

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 16 13:01:37 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  011D                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  018E                     	;# 
   197  0191                     	;# 
   198  0191                     	;# 
   199  0192                     	;# 
   200  0193                     	;# 
   201  0193                     	;# 
   202  0194                     	;# 
   203  0195                     	;# 
   204  0196                     	;# 
   205  0197                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019E                     	;# 
   216  019F                     	;# 
   217  020D                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0291                     	;# 
   235  0291                     	;# 
   236  0292                     	;# 
   237  0293                     	;# 
   238  0298                     	;# 
   239  0298                     	;# 
   240  0299                     	;# 
   241  029A                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  0010                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0015                     	;# 
   275  0016                     	;# 
   276  0016                     	;# 
   277  0017                     	;# 
   278  0018                     	;# 
   279  0019                     	;# 
   280  001A                     	;# 
   281  001B                     	;# 
   282  001C                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  008E                     	;# 
   286  0090                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  010E                     	;# 
   302  0116                     	;# 
   303  0117                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0197                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019C                     	;# 
   324  019C                     	;# 
   325  019D                     	;# 
   326  019E                     	;# 
   327  019F                     	;# 
   328  020D                     	;# 
   329  0210                     	;# 
   330  0211                     	;# 
   331  0211                     	;# 
   332  0212                     	;# 
   333  0212                     	;# 
   334  0213                     	;# 
   335  0213                     	;# 
   336  0214                     	;# 
   337  0214                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0216                     	;# 
   342  0216                     	;# 
   343  0217                     	;# 
   344  0217                     	;# 
   345  0291                     	;# 
   346  0291                     	;# 
   347  0292                     	;# 
   348  0293                     	;# 
   349  0298                     	;# 
   350  0298                     	;# 
   351  0299                     	;# 
   352  029A                     	;# 
   353  0394                     	;# 
   354  0395                     	;# 
   355  0396                     	;# 
   356  0FE4                     	;# 
   357  0FE5                     	;# 
   358  0FE6                     	;# 
   359  0FE7                     	;# 
   360  0FE8                     	;# 
   361  0FE9                     	;# 
   362  0FEA                     	;# 
   363  0FEB                     	;# 
   364  0FED                     	;# 
   365  0FEE                     	;# 
   366  0FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  0116                     	;# 
   414  0117                     	;# 
   415  011D                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  0191                     	;# 
   420  0191                     	;# 
   421  0192                     	;# 
   422  0193                     	;# 
   423  0193                     	;# 
   424  0194                     	;# 
   425  0195                     	;# 
   426  0196                     	;# 
   427  0197                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019C                     	;# 
   435  019C                     	;# 
   436  019D                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  020D                     	;# 
   440  0210                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0216                     	;# 
   453  0216                     	;# 
   454  0217                     	;# 
   455  0217                     	;# 
   456  0291                     	;# 
   457  0291                     	;# 
   458  0292                     	;# 
   459  0293                     	;# 
   460  0298                     	;# 
   461  0298                     	;# 
   462  0299                     	;# 
   463  029A                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  0FE4                     	;# 
   468  0FE5                     	;# 
   469  0FE6                     	;# 
   470  0FE7                     	;# 
   471  0FE8                     	;# 
   472  0FE9                     	;# 
   473  0FEA                     	;# 
   474  0FEB                     	;# 
   475  0FED                     	;# 
   476  0FEE                     	;# 
   477  0FEF                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0008                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0015                     	;# 
   497  0016                     	;# 
   498  0016                     	;# 
   499  0017                     	;# 
   500  0018                     	;# 
   501  0019                     	;# 
   502  001A                     	;# 
   503  001B                     	;# 
   504  001C                     	;# 
   505  008C                     	;# 
   506  008D                     	;# 
   507  008E                     	;# 
   508  0090                     	;# 
   509  0091                     	;# 
   510  0092                     	;# 
   511  0095                     	;# 
   512  0096                     	;# 
   513  0097                     	;# 
   514  0099                     	;# 
   515  009A                     	;# 
   516  009B                     	;# 
   517  009B                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  010C                     	;# 
   522  010D                     	;# 
   523  010E                     	;# 
   524  0116                     	;# 
   525  0117                     	;# 
   526  011D                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529  018E                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0194                     	;# 
   536  0195                     	;# 
   537  0196                     	;# 
   538  0197                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019C                     	;# 
   546  019C                     	;# 
   547  019D                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  020D                     	;# 
   551  0210                     	;# 
   552  0211                     	;# 
   553  0211                     	;# 
   554  0212                     	;# 
   555  0212                     	;# 
   556  0213                     	;# 
   557  0213                     	;# 
   558  0214                     	;# 
   559  0214                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0216                     	;# 
   564  0216                     	;# 
   565  0217                     	;# 
   566  0217                     	;# 
   567  0291                     	;# 
   568  0291                     	;# 
   569  0292                     	;# 
   570  0293                     	;# 
   571  0298                     	;# 
   572  0298                     	;# 
   573  0299                     	;# 
   574  029A                     	;# 
   575  0394                     	;# 
   576  0395                     	;# 
   577  0396                     	;# 
   578  0FE4                     	;# 
   579  0FE5                     	;# 
   580  0FE6                     	;# 
   581  0FE7                     	;# 
   582  0FE8                     	;# 
   583  0FE9                     	;# 
   584  0FEA                     	;# 
   585  0FEB                     	;# 
   586  0FED                     	;# 
   587  0FEE                     	;# 
   588  0FEF                     	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  0010                     	;# 
   605  0011                     	;# 
   606  0012                     	;# 
   607  0015                     	;# 
   608  0016                     	;# 
   609  0016                     	;# 
   610  0017                     	;# 
   611  0018                     	;# 
   612  0019                     	;# 
   613  001A                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0092                     	;# 
   622  0095                     	;# 
   623  0096                     	;# 
   624  0097                     	;# 
   625  0099                     	;# 
   626  009A                     	;# 
   627  009B                     	;# 
   628  009B                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009E                     	;# 
   632  010C                     	;# 
   633  010D                     	;# 
   634  010E                     	;# 
   635  0116                     	;# 
   636  0117                     	;# 
   637  011D                     	;# 
   638  018C                     	;# 
   639  018D                     	;# 
   640  018E                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0197                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019D                     	;# 
   659  019E                     	;# 
   660  019F                     	;# 
   661  020D                     	;# 
   662  0210                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  0394                     	;# 
   687  0395                     	;# 
   688  0396                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001C                     	;# 
   727  008C                     	;# 
   728  008D                     	;# 
   729  008E                     	;# 
   730  0090                     	;# 
   731  0091                     	;# 
   732  0092                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009B                     	;# 
   740  009C                     	;# 
   741  009D                     	;# 
   742  009E                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  011D                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  018E                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0197                     	;# 
   761  0199                     	;# 
   762  019A                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019C                     	;# 
   768  019C                     	;# 
   769  019D                     	;# 
   770  019E                     	;# 
   771  019F                     	;# 
   772  020D                     	;# 
   773  0210                     	;# 
   774  0211                     	;# 
   775  0211                     	;# 
   776  0212                     	;# 
   777  0212                     	;# 
   778  0213                     	;# 
   779  0213                     	;# 
   780  0214                     	;# 
   781  0214                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0216                     	;# 
   786  0216                     	;# 
   787  0217                     	;# 
   788  0217                     	;# 
   789  0291                     	;# 
   790  0291                     	;# 
   791  0292                     	;# 
   792  0293                     	;# 
   793  0298                     	;# 
   794  0298                     	;# 
   795  0299                     	;# 
   796  029A                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0010                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  0090                     	;# 
   842  0091                     	;# 
   843  0092                     	;# 
   844  0095                     	;# 
   845  0096                     	;# 
   846  0097                     	;# 
   847  0099                     	;# 
   848  009A                     	;# 
   849  009B                     	;# 
   850  009B                     	;# 
   851  009C                     	;# 
   852  009D                     	;# 
   853  009E                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  011D                     	;# 
   860  018C                     	;# 
   861  018D                     	;# 
   862  018E                     	;# 
   863  0191                     	;# 
   864  0191                     	;# 
   865  0192                     	;# 
   866  0193                     	;# 
   867  0193                     	;# 
   868  0194                     	;# 
   869  0195                     	;# 
   870  0196                     	;# 
   871  0197                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019C                     	;# 
   879  019C                     	;# 
   880  019D                     	;# 
   881  019E                     	;# 
   882  019F                     	;# 
   883  020D                     	;# 
   884  0210                     	;# 
   885  0211                     	;# 
   886  0211                     	;# 
   887  0212                     	;# 
   888  0212                     	;# 
   889  0213                     	;# 
   890  0213                     	;# 
   891  0214                     	;# 
   892  0214                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0216                     	;# 
   897  0216                     	;# 
   898  0217                     	;# 
   899  0217                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  0FE4                     	;# 
   912  0FE5                     	;# 
   913  0FE6                     	;# 
   914  0FE7                     	;# 
   915  0FE8                     	;# 
   916  0FE9                     	;# 
   917  0FEA                     	;# 
   918  0FEB                     	;# 
   919  0FED                     	;# 
   920  0FEE                     	;# 
   921  0FEF                     	;# 
   922  0000                     	;# 
   923  0001                     	;# 
   924  0002                     	;# 
   925  0003                     	;# 
   926  0004                     	;# 
   927  0005                     	;# 
   928  0006                     	;# 
   929  0007                     	;# 
   930  0008                     	;# 
   931  0009                     	;# 
   932  000A                     	;# 
   933  000B                     	;# 
   934  000C                     	;# 
   935  000D                     	;# 
   936  000E                     	;# 
   937  0010                     	;# 
   938  0011                     	;# 
   939  0012                     	;# 
   940  0015                     	;# 
   941  0016                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001C                     	;# 
   949  008C                     	;# 
   950  008D                     	;# 
   951  008E                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0095                     	;# 
   956  0096                     	;# 
   957  0097                     	;# 
   958  0099                     	;# 
   959  009A                     	;# 
   960  009B                     	;# 
   961  009B                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009E                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010E                     	;# 
   968  0116                     	;# 
   969  0117                     	;# 
   970  011D                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  018E                     	;# 
   974  0191                     	;# 
   975  0191                     	;# 
   976  0192                     	;# 
   977  0193                     	;# 
   978  0193                     	;# 
   979  0194                     	;# 
   980  0195                     	;# 
   981  0196                     	;# 
   982  0197                     	;# 
   983  0199                     	;# 
   984  019A                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019C                     	;# 
   990  019C                     	;# 
   991  019D                     	;# 
   992  019E                     	;# 
   993  019F                     	;# 
   994  020D                     	;# 
   995  0210                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  0212                     	;# 
   999  0212                     	;# 
  1000  0213                     	;# 
  1001  0213                     	;# 
  1002  0214                     	;# 
  1003  0214                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0216                     	;# 
  1008  0216                     	;# 
  1009  0217                     	;# 
  1010  0217                     	;# 
  1011  0291                     	;# 
  1012  0291                     	;# 
  1013  0292                     	;# 
  1014  0293                     	;# 
  1015  0298                     	;# 
  1016  0298                     	;# 
  1017  0299                     	;# 
  1018  029A                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0FE4                     	;# 
  1023  0FE5                     	;# 
  1024  0FE6                     	;# 
  1025  0FE7                     	;# 
  1026  0FE8                     	;# 
  1027  0FE9                     	;# 
  1028  0FEA                     	;# 
  1029  0FEB                     	;# 
  1030  0FED                     	;# 
  1031  0FEE                     	;# 
  1032  0FEF                     	;# 
  1033  0000                     	;# 
  1034  0001                     	;# 
  1035  0002                     	;# 
  1036  0003                     	;# 
  1037  0004                     	;# 
  1038  0005                     	;# 
  1039  0006                     	;# 
  1040  0007                     	;# 
  1041  0008                     	;# 
  1042  0009                     	;# 
  1043  000A                     	;# 
  1044  000B                     	;# 
  1045  000C                     	;# 
  1046  000D                     	;# 
  1047  000E                     	;# 
  1048  0010                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0015                     	;# 
  1052  0016                     	;# 
  1053  0016                     	;# 
  1054  0017                     	;# 
  1055  0018                     	;# 
  1056  0019                     	;# 
  1057  001A                     	;# 
  1058  001B                     	;# 
  1059  001C                     	;# 
  1060  008C                     	;# 
  1061  008D                     	;# 
  1062  008E                     	;# 
  1063  0090                     	;# 
  1064  0091                     	;# 
  1065  0092                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  010C                     	;# 
  1077  010D                     	;# 
  1078  010E                     	;# 
  1079  0116                     	;# 
  1080  0117                     	;# 
  1081  011D                     	;# 
  1082  018C                     	;# 
  1083  018D                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0194                     	;# 
  1091  0195                     	;# 
  1092  0196                     	;# 
  1093  0197                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  020D                     	;# 
  1106  0210                     	;# 
  1107  0211                     	;# 
  1108  0211                     	;# 
  1109  0212                     	;# 
  1110  0212                     	;# 
  1111  0213                     	;# 
  1112  0213                     	;# 
  1113  0214                     	;# 
  1114  0214                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0216                     	;# 
  1119  0216                     	;# 
  1120  0217                     	;# 
  1121  0217                     	;# 
  1122  0291                     	;# 
  1123  0291                     	;# 
  1124  0292                     	;# 
  1125  0293                     	;# 
  1126  0298                     	;# 
  1127  0298                     	;# 
  1128  0299                     	;# 
  1129  029A                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  0FE4                     	;# 
  1134  0FE5                     	;# 
  1135  0FE6                     	;# 
  1136  0FE7                     	;# 
  1137  0FE8                     	;# 
  1138  0FE9                     	;# 
  1139  0FEA                     	;# 
  1140  0FEB                     	;# 
  1141  0FED                     	;# 
  1142  0FEE                     	;# 
  1143  0FEF                     	;# 
  1144  0000                     	;# 
  1145  0001                     	;# 
  1146  0002                     	;# 
  1147  0003                     	;# 
  1148  0004                     	;# 
  1149  0005                     	;# 
  1150  0006                     	;# 
  1151  0007                     	;# 
  1152  0008                     	;# 
  1153  0009                     	;# 
  1154  000A                     	;# 
  1155  000B                     	;# 
  1156  000C                     	;# 
  1157  000D                     	;# 
  1158  000E                     	;# 
  1159  0010                     	;# 
  1160  0011                     	;# 
  1161  0012                     	;# 
  1162  0015                     	;# 
  1163  0016                     	;# 
  1164  0016                     	;# 
  1165  0017                     	;# 
  1166  0018                     	;# 
  1167  0019                     	;# 
  1168  001A                     	;# 
  1169  001B                     	;# 
  1170  001C                     	;# 
  1171  008C                     	;# 
  1172  008D                     	;# 
  1173  008E                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0092                     	;# 
  1177  0095                     	;# 
  1178  0096                     	;# 
  1179  0097                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009B                     	;# 
  1184  009C                     	;# 
  1185  009D                     	;# 
  1186  009E                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010E                     	;# 
  1190  0116                     	;# 
  1191  0117                     	;# 
  1192  011D                     	;# 
  1193  018C                     	;# 
  1194  018D                     	;# 
  1195  018E                     	;# 
  1196  0191                     	;# 
  1197  0191                     	;# 
  1198  0192                     	;# 
  1199  0193                     	;# 
  1200  0193                     	;# 
  1201  0194                     	;# 
  1202  0195                     	;# 
  1203  0196                     	;# 
  1204  0197                     	;# 
  1205  0199                     	;# 
  1206  019A                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019F                     	;# 
  1216  020D                     	;# 
  1217  0210                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0291                     	;# 
  1234  0291                     	;# 
  1235  0292                     	;# 
  1236  0293                     	;# 
  1237  0298                     	;# 
  1238  0298                     	;# 
  1239  0299                     	;# 
  1240  029A                     	;# 
  1241  0394                     	;# 
  1242  0395                     	;# 
  1243  0396                     	;# 
  1244  0FE4                     	;# 
  1245  0FE5                     	;# 
  1246  0FE6                     	;# 
  1247  0FE7                     	;# 
  1248  0FE8                     	;# 
  1249  0FE9                     	;# 
  1250  0FEA                     	;# 
  1251  0FEB                     	;# 
  1252  0FED                     	;# 
  1253  0FEE                     	;# 
  1254  0FEF                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0008                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000D                     	;# 
  1269  000E                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0015                     	;# 
  1274  0016                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001C                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  0090                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009B                     	;# 
  1295  009C                     	;# 
  1296  009D                     	;# 
  1297  009E                     	;# 
  1298  010C                     	;# 
  1299  010D                     	;# 
  1300  010E                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  011D                     	;# 
  1304  018C                     	;# 
  1305  018D                     	;# 
  1306  018E                     	;# 
  1307  0191                     	;# 
  1308  0191                     	;# 
  1309  0192                     	;# 
  1310  0193                     	;# 
  1311  0193                     	;# 
  1312  0194                     	;# 
  1313  0195                     	;# 
  1314  0196                     	;# 
  1315  0197                     	;# 
  1316  0199                     	;# 
  1317  019A                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019C                     	;# 
  1323  019C                     	;# 
  1324  019D                     	;# 
  1325  019E                     	;# 
  1326  019F                     	;# 
  1327  020D                     	;# 
  1328  0210                     	;# 
  1329  0211                     	;# 
  1330  0211                     	;# 
  1331  0212                     	;# 
  1332  0212                     	;# 
  1333  0213                     	;# 
  1334  0213                     	;# 
  1335  0214                     	;# 
  1336  0214                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0215                     	;# 
  1340  0216                     	;# 
  1341  0216                     	;# 
  1342  0217                     	;# 
  1343  0217                     	;# 
  1344  0291                     	;# 
  1345  0291                     	;# 
  1346  0292                     	;# 
  1347  0293                     	;# 
  1348  0298                     	;# 
  1349  0298                     	;# 
  1350  0299                     	;# 
  1351  029A                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  0FE4                     	;# 
  1356  0FE5                     	;# 
  1357  0FE6                     	;# 
  1358  0FE7                     	;# 
  1359  0FE8                     	;# 
  1360  0FE9                     	;# 
  1361  0FEA                     	;# 
  1362  0FEB                     	;# 
  1363  0FED                     	;# 
  1364  0FEE                     	;# 
  1365  0FEF                     	;# 
  1366  0000                     	;# 
  1367  0001                     	;# 
  1368  0002                     	;# 
  1369  0003                     	;# 
  1370  0004                     	;# 
  1371  0005                     	;# 
  1372  0006                     	;# 
  1373  0007                     	;# 
  1374  0008                     	;# 
  1375  0009                     	;# 
  1376  000A                     	;# 
  1377  000B                     	;# 
  1378  000C                     	;# 
  1379  000D                     	;# 
  1380  000E                     	;# 
  1381  0010                     	;# 
  1382  0011                     	;# 
  1383  0012                     	;# 
  1384  0015                     	;# 
  1385  0016                     	;# 
  1386  0016                     	;# 
  1387  0017                     	;# 
  1388  0018                     	;# 
  1389  0019                     	;# 
  1390  001A                     	;# 
  1391  001B                     	;# 
  1392  001C                     	;# 
  1393  008C                     	;# 
  1394  008D                     	;# 
  1395  008E                     	;# 
  1396  0090                     	;# 
  1397  0091                     	;# 
  1398  0092                     	;# 
  1399  0095                     	;# 
  1400  0096                     	;# 
  1401  0097                     	;# 
  1402  0099                     	;# 
  1403  009A                     	;# 
  1404  009B                     	;# 
  1405  009B                     	;# 
  1406  009C                     	;# 
  1407  009D                     	;# 
  1408  009E                     	;# 
  1409  010C                     	;# 
  1410  010D                     	;# 
  1411  010E                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  011D                     	;# 
  1415  018C                     	;# 
  1416  018D                     	;# 
  1417  018E                     	;# 
  1418  0191                     	;# 
  1419  0191                     	;# 
  1420  0192                     	;# 
  1421  0193                     	;# 
  1422  0193                     	;# 
  1423  0194                     	;# 
  1424  0195                     	;# 
  1425  0196                     	;# 
  1426  0197                     	;# 
  1427  0199                     	;# 
  1428  019A                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019C                     	;# 
  1434  019C                     	;# 
  1435  019D                     	;# 
  1436  019E                     	;# 
  1437  019F                     	;# 
  1438  020D                     	;# 
  1439  0210                     	;# 
  1440  0211                     	;# 
  1441  0211                     	;# 
  1442  0212                     	;# 
  1443  0212                     	;# 
  1444  0213                     	;# 
  1445  0213                     	;# 
  1446  0214                     	;# 
  1447  0214                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0216                     	;# 
  1452  0216                     	;# 
  1453  0217                     	;# 
  1454  0217                     	;# 
  1455  0291                     	;# 
  1456  0291                     	;# 
  1457  0292                     	;# 
  1458  0293                     	;# 
  1459  0298                     	;# 
  1460  0298                     	;# 
  1461  0299                     	;# 
  1462  029A                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477  0000                     	;# 
  1478  0001                     	;# 
  1479  0002                     	;# 
  1480  0003                     	;# 
  1481  0004                     	;# 
  1482  0005                     	;# 
  1483  0006                     	;# 
  1484  0007                     	;# 
  1485  0008                     	;# 
  1486  0009                     	;# 
  1487  000A                     	;# 
  1488  000B                     	;# 
  1489  000C                     	;# 
  1490  000D                     	;# 
  1491  000E                     	;# 
  1492  0010                     	;# 
  1493  0011                     	;# 
  1494  0012                     	;# 
  1495  0015                     	;# 
  1496  0016                     	;# 
  1497  0016                     	;# 
  1498  0017                     	;# 
  1499  0018                     	;# 
  1500  0019                     	;# 
  1501  001A                     	;# 
  1502  001B                     	;# 
  1503  001C                     	;# 
  1504  008C                     	;# 
  1505  008D                     	;# 
  1506  008E                     	;# 
  1507  0090                     	;# 
  1508  0091                     	;# 
  1509  0092                     	;# 
  1510  0095                     	;# 
  1511  0096                     	;# 
  1512  0097                     	;# 
  1513  0099                     	;# 
  1514  009A                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  010C                     	;# 
  1521  010D                     	;# 
  1522  010E                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  011D                     	;# 
  1526  018C                     	;# 
  1527  018D                     	;# 
  1528  018E                     	;# 
  1529  0191                     	;# 
  1530  0191                     	;# 
  1531  0192                     	;# 
  1532  0193                     	;# 
  1533  0193                     	;# 
  1534  0194                     	;# 
  1535  0195                     	;# 
  1536  0196                     	;# 
  1537  0197                     	;# 
  1538  0199                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019C                     	;# 
  1545  019C                     	;# 
  1546  019D                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  020D                     	;# 
  1550  0210                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0298                     	;# 
  1571  0298                     	;# 
  1572  0299                     	;# 
  1573  029A                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  0FE4                     	;# 
  1578  0FE5                     	;# 
  1579  0FE6                     	;# 
  1580  0FE7                     	;# 
  1581  0FE8                     	;# 
  1582  0FE9                     	;# 
  1583  0FEA                     	;# 
  1584  0FEB                     	;# 
  1585  0FED                     	;# 
  1586  0FEE                     	;# 
  1587  0FEF                     	;# 
  1588  0000                     	;# 
  1589  0001                     	;# 
  1590  0002                     	;# 
  1591  0003                     	;# 
  1592  0004                     	;# 
  1593  0005                     	;# 
  1594  0006                     	;# 
  1595  0007                     	;# 
  1596  0008                     	;# 
  1597  0009                     	;# 
  1598  000A                     	;# 
  1599  000B                     	;# 
  1600  000C                     	;# 
  1601  000D                     	;# 
  1602  000E                     	;# 
  1603  0010                     	;# 
  1604  0011                     	;# 
  1605  0012                     	;# 
  1606  0015                     	;# 
  1607  0016                     	;# 
  1608  0016                     	;# 
  1609  0017                     	;# 
  1610  0018                     	;# 
  1611  0019                     	;# 
  1612  001A                     	;# 
  1613  001B                     	;# 
  1614  001C                     	;# 
  1615  008C                     	;# 
  1616  008D                     	;# 
  1617  008E                     	;# 
  1618  0090                     	;# 
  1619  0091                     	;# 
  1620  0092                     	;# 
  1621  0095                     	;# 
  1622  0096                     	;# 
  1623  0097                     	;# 
  1624  0099                     	;# 
  1625  009A                     	;# 
  1626  009B                     	;# 
  1627  009B                     	;# 
  1628  009C                     	;# 
  1629  009D                     	;# 
  1630  009E                     	;# 
  1631  010C                     	;# 
  1632  010D                     	;# 
  1633  010E                     	;# 
  1634  0116                     	;# 
  1635  0117                     	;# 
  1636  011D                     	;# 
  1637  018C                     	;# 
  1638  018D                     	;# 
  1639  018E                     	;# 
  1640  0191                     	;# 
  1641  0191                     	;# 
  1642  0192                     	;# 
  1643  0193                     	;# 
  1644  0193                     	;# 
  1645  0194                     	;# 
  1646  0195                     	;# 
  1647  0196                     	;# 
  1648  0197                     	;# 
  1649  0199                     	;# 
  1650  019A                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019C                     	;# 
  1656  019C                     	;# 
  1657  019D                     	;# 
  1658  019E                     	;# 
  1659  019F                     	;# 
  1660  020D                     	;# 
  1661  0210                     	;# 
  1662  0211                     	;# 
  1663  0211                     	;# 
  1664  0212                     	;# 
  1665  0212                     	;# 
  1666  0213                     	;# 
  1667  0213                     	;# 
  1668  0214                     	;# 
  1669  0214                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0216                     	;# 
  1674  0216                     	;# 
  1675  0217                     	;# 
  1676  0217                     	;# 
  1677  0291                     	;# 
  1678  0291                     	;# 
  1679  0292                     	;# 
  1680  0293                     	;# 
  1681  0298                     	;# 
  1682  0298                     	;# 
  1683  0299                     	;# 
  1684  029A                     	;# 
  1685  0394                     	;# 
  1686  0395                     	;# 
  1687  0396                     	;# 
  1688  0FE4                     	;# 
  1689  0FE5                     	;# 
  1690  0FE6                     	;# 
  1691  0FE7                     	;# 
  1692  0FE8                     	;# 
  1693  0FE9                     	;# 
  1694  0FEA                     	;# 
  1695  0FEB                     	;# 
  1696  0FED                     	;# 
  1697  0FEE                     	;# 
  1698  0FEF                     	;# 
  1699  0000                     	;# 
  1700  0001                     	;# 
  1701  0002                     	;# 
  1702  0003                     	;# 
  1703  0004                     	;# 
  1704  0005                     	;# 
  1705  0006                     	;# 
  1706  0007                     	;# 
  1707  0008                     	;# 
  1708  0009                     	;# 
  1709  000A                     	;# 
  1710  000B                     	;# 
  1711  000C                     	;# 
  1712  000D                     	;# 
  1713  000E                     	;# 
  1714  0010                     	;# 
  1715  0011                     	;# 
  1716  0012                     	;# 
  1717  0015                     	;# 
  1718  0016                     	;# 
  1719  0016                     	;# 
  1720  0017                     	;# 
  1721  0018                     	;# 
  1722  0019                     	;# 
  1723  001A                     	;# 
  1724  001B                     	;# 
  1725  001C                     	;# 
  1726  008C                     	;# 
  1727  008D                     	;# 
  1728  008E                     	;# 
  1729  0090                     	;# 
  1730  0091                     	;# 
  1731  0092                     	;# 
  1732  0095                     	;# 
  1733  0096                     	;# 
  1734  0097                     	;# 
  1735  0099                     	;# 
  1736  009A                     	;# 
  1737  009B                     	;# 
  1738  009B                     	;# 
  1739  009C                     	;# 
  1740  009D                     	;# 
  1741  009E                     	;# 
  1742  010C                     	;# 
  1743  010D                     	;# 
  1744  010E                     	;# 
  1745  0116                     	;# 
  1746  0117                     	;# 
  1747  011D                     	;# 
  1748  018C                     	;# 
  1749  018D                     	;# 
  1750  018E                     	;# 
  1751  0191                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0193                     	;# 
  1755  0193                     	;# 
  1756  0194                     	;# 
  1757  0195                     	;# 
  1758  0196                     	;# 
  1759  0197                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019B                     	;# 
  1766  019C                     	;# 
  1767  019C                     	;# 
  1768  019D                     	;# 
  1769  019E                     	;# 
  1770  019F                     	;# 
  1771  020D                     	;# 
  1772  0210                     	;# 
  1773  0211                     	;# 
  1774  0211                     	;# 
  1775  0212                     	;# 
  1776  0212                     	;# 
  1777  0213                     	;# 
  1778  0213                     	;# 
  1779  0214                     	;# 
  1780  0214                     	;# 
  1781  0215                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  0394                     	;# 
  1797  0395                     	;# 
  1798  0396                     	;# 
  1799  0FE4                     	;# 
  1800  0FE5                     	;# 
  1801  0FE6                     	;# 
  1802  0FE7                     	;# 
  1803  0FE8                     	;# 
  1804  0FE9                     	;# 
  1805  0FEA                     	;# 
  1806  0FEB                     	;# 
  1807  0FED                     	;# 
  1808  0FEE                     	;# 
  1809  0FEF                     	;# 
  1810  0000                     	;# 
  1811  0001                     	;# 
  1812  0002                     	;# 
  1813  0003                     	;# 
  1814  0004                     	;# 
  1815  0005                     	;# 
  1816  0006                     	;# 
  1817  0007                     	;# 
  1818  0008                     	;# 
  1819  0009                     	;# 
  1820  000A                     	;# 
  1821  000B                     	;# 
  1822  000C                     	;# 
  1823  000D                     	;# 
  1824  000E                     	;# 
  1825  0010                     	;# 
  1826  0011                     	;# 
  1827  0012                     	;# 
  1828  0015                     	;# 
  1829  0016                     	;# 
  1830  0016                     	;# 
  1831  0017                     	;# 
  1832  0018                     	;# 
  1833  0019                     	;# 
  1834  001A                     	;# 
  1835  001B                     	;# 
  1836  001C                     	;# 
  1837  008C                     	;# 
  1838  008D                     	;# 
  1839  008E                     	;# 
  1840  0090                     	;# 
  1841  0091                     	;# 
  1842  0092                     	;# 
  1843  0095                     	;# 
  1844  0096                     	;# 
  1845  0097                     	;# 
  1846  0099                     	;# 
  1847  009A                     	;# 
  1848  009B                     	;# 
  1849  009B                     	;# 
  1850  009C                     	;# 
  1851  009D                     	;# 
  1852  009E                     	;# 
  1853  010C                     	;# 
  1854  010D                     	;# 
  1855  010E                     	;# 
  1856  0116                     	;# 
  1857  0117                     	;# 
  1858  011D                     	;# 
  1859  018C                     	;# 
  1860  018D                     	;# 
  1861  018E                     	;# 
  1862  0191                     	;# 
  1863  0191                     	;# 
  1864  0192                     	;# 
  1865  0193                     	;# 
  1866  0193                     	;# 
  1867  0194                     	;# 
  1868  0195                     	;# 
  1869  0196                     	;# 
  1870  0197                     	;# 
  1871  0199                     	;# 
  1872  019A                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019C                     	;# 
  1878  019C                     	;# 
  1879  019D                     	;# 
  1880  019E                     	;# 
  1881  019F                     	;# 
  1882  020D                     	;# 
  1883  0210                     	;# 
  1884  0211                     	;# 
  1885  0211                     	;# 
  1886  0212                     	;# 
  1887  0212                     	;# 
  1888  0213                     	;# 
  1889  0213                     	;# 
  1890  0214                     	;# 
  1891  0214                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0216                     	;# 
  1896  0216                     	;# 
  1897  0217                     	;# 
  1898  0217                     	;# 
  1899  0291                     	;# 
  1900  0291                     	;# 
  1901  0292                     	;# 
  1902  0293                     	;# 
  1903  0298                     	;# 
  1904  0298                     	;# 
  1905  0299                     	;# 
  1906  029A                     	;# 
  1907  0394                     	;# 
  1908  0395                     	;# 
  1909  0396                     	;# 
  1910  0FE4                     	;# 
  1911  0FE5                     	;# 
  1912  0FE6                     	;# 
  1913  0FE7                     	;# 
  1914  0FE8                     	;# 
  1915  0FE9                     	;# 
  1916  0FEA                     	;# 
  1917  0FEB                     	;# 
  1918  0FED                     	;# 
  1919  0FEE                     	;# 
  1920  0FEF                     	;# 
  1921  0000                     	;# 
  1922  0001                     	;# 
  1923  0002                     	;# 
  1924  0003                     	;# 
  1925  0004                     	;# 
  1926  0005                     	;# 
  1927  0006                     	;# 
  1928  0007                     	;# 
  1929  0008                     	;# 
  1930  0009                     	;# 
  1931  000A                     	;# 
  1932  000B                     	;# 
  1933  000C                     	;# 
  1934  000D                     	;# 
  1935  000E                     	;# 
  1936  0010                     	;# 
  1937  0011                     	;# 
  1938  0012                     	;# 
  1939  0015                     	;# 
  1940  0016                     	;# 
  1941  0016                     	;# 
  1942  0017                     	;# 
  1943  0018                     	;# 
  1944  0019                     	;# 
  1945  001A                     	;# 
  1946  001B                     	;# 
  1947  001C                     	;# 
  1948  008C                     	;# 
  1949  008D                     	;# 
  1950  008E                     	;# 
  1951  0090                     	;# 
  1952  0091                     	;# 
  1953  0092                     	;# 
  1954  0095                     	;# 
  1955  0096                     	;# 
  1956  0097                     	;# 
  1957  0099                     	;# 
  1958  009A                     	;# 
  1959  009B                     	;# 
  1960  009B                     	;# 
  1961  009C                     	;# 
  1962  009D                     	;# 
  1963  009E                     	;# 
  1964  010C                     	;# 
  1965  010D                     	;# 
  1966  010E                     	;# 
  1967  0116                     	;# 
  1968  0117                     	;# 
  1969  011D                     	;# 
  1970  018C                     	;# 
  1971  018D                     	;# 
  1972  018E                     	;# 
  1973  0191                     	;# 
  1974  0191                     	;# 
  1975  0192                     	;# 
  1976  0193                     	;# 
  1977  0193                     	;# 
  1978  0194                     	;# 
  1979  0195                     	;# 
  1980  0196                     	;# 
  1981  0197                     	;# 
  1982  0199                     	;# 
  1983  019A                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019C                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020D                     	;# 
  1994  0210                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0216                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0217                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  0394                     	;# 
  2019  0395                     	;# 
  2020  0396                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032                           
  2033                           	psect	idataBANK3
  2034  1F9C                     __pidataBANK3:	
  2035                           
  2036                           ;initializer for __product
  2037  1F9C  3463               	retlw	99
  2038  1F9D  3402               	retlw	2
  2039  1F9E  3400               	retlw	0
  2040  1F9F  3400               	retlw	0
  2041  1FA0  3400               	retlw	0
  2042  1FA1  3400               	retlw	0
  2043  1FA2  3400               	retlw	0
  2044  1FA3  3400               	retlw	0
  2045  1FA4  3400               	retlw	0
  2046  1FA5  3400               	retlw	0
  2047  1FA6  3400               	retlw	0
  2048  1FA7  3400               	retlw	0
  2049  1FA8  34FF               	retlw	255
  2050  1FA9  34FF               	retlw	255
  2051  1FAA  34FF               	retlw	255
  2052  1FAB  3400               	retlw	0
  2053  1FAC  3400               	retlw	0
  2054  1FAD  3400               	retlw	0
  2055  1FAE  3400               	retlw	0
  2056  1FAF  3400               	retlw	0
  2057  1FB0  3400               	retlw	0
  2058  1FB1  3400               	retlw	0
  2059  1FB2  3400               	retlw	0
  2060  1FB3  3400               	retlw	0
  2061  1FB4  3400               	retlw	0
  2062  1FB5  3400               	retlw	0
  2063  1FB6  3400               	retlw	0
  2064  1FB7  3400               	retlw	0
  2065  1FB8  3400               	retlw	0
  2066  1FB9  3400               	retlw	0
  2067  1FBA  3400               	retlw	0
  2068  1FBB  3400               	retlw	0
  2069                           
  2070                           	psect	stringtext
  2071  1000                     __pstringtext:	
  2072  1000                     _CC2500_registers_address:	
  2073  1000  3403               	retlw	3
  2074  1001  3416               	retlw	22
  2075  1002  3417               	retlw	23
  2076  1003  341E               	retlw	30
  2077  1004  341F               	retlw	31
  2078  1005  3420               	retlw	32
  2079  1006  342A               	retlw	42
  2080  1007  342B               	retlw	43
  2081  1008  340B               	retlw	11
  2082  1009  340C               	retlw	12
  2083  100A  340D               	retlw	13
  2084  100B  340E               	retlw	14
  2085  100C  340F               	retlw	15
  2086  100D  3410               	retlw	16
  2087  100E  3411               	retlw	17
  2088  100F  3412               	retlw	18
  2089  1010  3413               	retlw	19
  2090  1011  3414               	retlw	20
  2091  1012  340A               	retlw	10
  2092  1013  3415               	retlw	21
  2093  1014  3421               	retlw	33
  2094  1015  3422               	retlw	34
  2095  1016  3418               	retlw	24
  2096  1017  3419               	retlw	25
  2097  1018  341A               	retlw	26
  2098  1019  341B               	retlw	27
  2099  101A  341C               	retlw	28
  2100  101B  341D               	retlw	29
  2101  101C  3423               	retlw	35
  2102  101D  3424               	retlw	36
  2103  101E  3425               	retlw	37
  2104  101F  3426               	retlw	38
  2105  1020  3429               	retlw	41
  2106  1021  342C               	retlw	44
  2107  1022  342D               	retlw	45
  2108  1023  342E               	retlw	46
  2109  1024  3400               	retlw	0
  2110  1025  3401               	retlw	1
  2111  1026  3402               	retlw	2
  2112  1027  3407               	retlw	7
  2113  1028  3408               	retlw	8
  2114  1029  3409               	retlw	9
  2115  102A  3406               	retlw	6
  2116  102B  3404               	retlw	4
  2117  102C  3405               	retlw	5
  2118  102D  3427               	retlw	39
  2119  102E  3428               	retlw	40
  2120  102F                     __end_of_CC2500_registers_address:	
  2121  102F                     _CC2500_rfSettings:	
  2122  102F  3407               	retlw	7
  2123  1030  3407               	retlw	7
  2124  1031  3430               	retlw	48
  2125  1032  3487               	retlw	135
  2126  1033  346B               	retlw	107
  2127  1034  34F8               	retlw	248
  2128  1035  347F               	retlw	127
  2129  1036  343F               	retlw	63
  2130  1037  3409               	retlw	9
  2131  1038  3400               	retlw	0
  2132  1039  345C               	retlw	92
  2133  103A  34A7               	retlw	167
  2134  103B  3462               	retlw	98
  2135  103C  3486               	retlw	134
  2136  103D  3483               	retlw	131
  2137  103E  3403               	retlw	3
  2138  103F  3422               	retlw	34
  2139  1040  34F8               	retlw	248
  2140  1041  3400               	retlw	0
  2141  1042  3444               	retlw	68
  2142  1043  34B6               	retlw	182
  2143  1044  3410               	retlw	16
  2144  1045  3418               	retlw	24
  2145  1046  341D               	retlw	29
  2146  1047  341C               	retlw	28
  2147  1048  34C7               	retlw	199
  2148  1049  3400               	retlw	0
  2149  104A  34B2               	retlw	178
  2150  104B  34EA               	retlw	234
  2151  104C  340A               	retlw	10
  2152  104D  3400               	retlw	0
  2153  104E  3411               	retlw	17
  2154  104F  3459               	retlw	89
  2155  1050  3488               	retlw	136
  2156  1051  3431               	retlw	49
  2157  1052  340B               	retlw	11
  2158  1053  342F               	retlw	47
  2159  1054  342E               	retlw	46
  2160  1055  3406               	retlw	6
  2161  1056  3404               	retlw	4
  2162  1057  3405               	retlw	5
  2163  1058  3400               	retlw	0
  2164  1059  3430               	retlw	48
  2165  105A  34D3               	retlw	211
  2166  105B  3491               	retlw	145
  2167  105C  3441               	retlw	65
  2168  105D  3400               	retlw	0
  2169  105E                     __end_of_CC2500_rfSettings:	
  2170  105E                     _CC2500_patable_vaule:	
  2171  105E  34FE               	retlw	254
  2172  105F  34FE               	retlw	254
  2173  1060  34FE               	retlw	254
  2174  1061  34FE               	retlw	254
  2175  1062  34FE               	retlw	254
  2176  1063  34FE               	retlw	254
  2177  1064  34FE               	retlw	254
  2178  1065  34FE               	retlw	254
  2179  1066                     __end_of_CC2500_patable_vaule:	
  2180                           
  2181                           	psect	nvCOMMON
  2182  007D                     __pnvCOMMON:	
  2183  007D                     _product:	
  2184  007D                     	ds	1
  2185                           
  2186                           	psect	nvBANK1
  2187  00ED                     __pnvBANK1:	
  2188  00ED                     _Timer0:	
  2189  00ED                     	ds	1
  2190  00EE                     _myMain:	
  2191  00EE                     	ds	1
  2192  00EF                     _Memory:	
  2193  00EF                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0015                     _TMR0	set	21
  2198  005F                     _GIE	set	95
  2199  005C                     _INTE	set	92
  2200  0059                     _INTF	set	89
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006B                     _RB3	set	107
  2212  006C                     _RB4	set	108
  2213  006D                     _RB5	set	109
  2214  0070                     _RC0	set	112
  2215  0071                     _RC1	set	113
  2216  0072                     _RC2	set	114
  2217  0074                     _RC4	set	116
  2218  0075                     _RC5	set	117
  2219  0077                     _RC7	set	119
  2220  005D                     _TMR0IE	set	93
  2221  005A                     _TMR0IF	set	90
  2222  009D                     _ADCON0	set	157
  2223  009E                     _ADCON1	set	158
  2224  009C                     _ADRESH	set	156
  2225  009B                     _ADRESL	set	155
  2226  0095                     _OPTION_REG	set	149
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  04E9                     _GO_nDONE	set	1257
  2232  0117                     _FVRCON	set	279
  2233  010C                     _LATA	set	268
  2234  010D                     _LATB	set	269
  2235  010E                     _LATC	set	270
  2236  018C                     _ANSELA	set	396
  2237  018D                     _ANSELB	set	397
  2238  018E                     _ANSELC	set	398
  2239  0192                     _PMADRH	set	402
  2240  0191                     _PMADRL	set	401
  2241  0196                     _PMCON2	set	406
  2242  0194                     _PMDATH	set	404
  2243  0193                     _PMDATL	set	403
  2244  0CAE                     _CFGS	set	3246
  2245  0CAC                     _FREE	set	3244
  2246  0CAD                     _LWLO	set	3245
  2247  0CA8                     _RD	set	3240
  2248  0CA9                     _WR	set	3241
  2249  0CAA                     _WREN	set	3242
  2250  1068                     _WPUB0	set	4200
  2251  1069                     _WPUB1	set	4201
  2252  106A                     _WPUB2	set	4202
  2253  0396                     _IOCBF	set	918
  2254  0395                     _IOCBN	set	917
  2255  0394                     _IOCBP	set	916
  2256  1CB2                     _IOCBF2	set	7346
  2257                           
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	cinit
  2261  0018                     start_initialization:	
  2262  0018                     __initialization:	
  2263                           
  2264                           ; Clear objects allocated to BITCOMMON
  2265  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2266                           
  2267                           ; Clear objects allocated to COMMON
  2268  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2269  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2270  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2271  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK1
  2274  001D  30A0               	movlw	low __pbssBANK1
  2275  001E  0084               	movwf	4
  2276  001F  3000               	movlw	high __pbssBANK1
  2277  0020  0085               	movwf	5
  2278  0021  304D               	movlw	77
  2279  0022  3187  27FA  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK2
  2282  0025  3020               	movlw	low __pbssBANK2
  2283  0026  0084               	movwf	4
  2284  0027  3001               	movlw	high __pbssBANK2
  2285  0028  0085               	movwf	5
  2286  0029  303C               	movlw	60
  2287  002A  3187  27FA  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK3
  2290  002D  30A0               	movlw	low __pbssBANK3
  2291  002E  0084               	movwf	4
  2292  002F  3001               	movlw	high __pbssBANK3
  2293  0030  0085               	movwf	5
  2294  0031  3025               	movlw	37
  2295  0032  3187  27FA  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Initialize objects allocated to BANK3
  2298  0035  309C               	movlw	low __pidataBANK3
  2299  0036  0084               	movwf	4
  2300  0037  309F               	movlw	(high __pidataBANK3)| (0+128)
  2301  0038  0085               	movwf	5
  2302  0039  30C5               	movlw	low __pdataBANK3
  2303  003A  0086               	movwf	6
  2304  003B  3001               	movlw	high __pdataBANK3
  2305  003C  0087               	movwf	7
  2306  003D  3020               	movlw	32
  2307  003E  319C  2412         	fcall	init_ram
  2308  0040                     end_of_initialization:	
  2309                           ;End of C runtime variable initialization code
  2310                           
  2311  0040                     __end_of__initialization:	
  2312  0040  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2313  0041  0020               	movlb	0
  2314  0042  3197  2FA2         	ljmp	_main	;jump to C main() function
  2315                           
  2316                           	psect	bitbssCOMMON
  2317  03E0                     __pbitbssCOMMON:	
  2318  03E0                     _Receive_OK:	
  2319  03E0                     	ds	1
  2320  03E1                     _Transceive_OK:	
  2321  03E1                     	ds	1
  2322                           
  2323                           	psect	bssCOMMON
  2324  0078                     __pbssCOMMON:	
  2325  0078                     _DimmerLights:	
  2326  0078                     	ds	1
  2327  0079                     _DimmerLightsIntr:	
  2328  0079                     	ds	1
  2329  007A                     _RF:	
  2330  007A                     	ds	1
  2331  007B                     _Sw:	
  2332  007B                     	ds	1
  2333                           
  2334                           	psect	bssBANK1
  2335  00A0                     __pbssBANK1:	
  2336  00A0                     _RF_Data:	
  2337  00A0                     	ds	21
  2338  00B5                     _RF_Count:	
  2339  00B5                     	ds	2
  2340  00B7                     _Buz:	
  2341  00B7                     	ds	1
  2342  00B8                     _CRC:	
  2343  00B8                     	ds	1
  2344  00B9                     _DelayOff:	
  2345  00B9                     	ds	1
  2346  00BA                     _Dimmer:	
  2347  00BA                     	ds	1
  2348  00BB                     _DimmerLights11:	
  2349  00BB                     	ds	1
  2350  00BC                     _DimmerLightsIntrIOC:	
  2351  00BC                     	ds	1
  2352  00BD                     _LED:	
  2353  00BD                     	ds	1
  2354  00BE                     _PF:	
  2355  00BE                     	ds	1
  2356  00BF                     _RFSW:	
  2357  00BF                     	ds	1
  2358  00C0                     _RSSI:	
  2359  00C0                     	ds	1
  2360  00C1                     _Rx_Length:	
  2361  00C1                     	ds	1
  2362  00C2                     _SPI0Buffer:	
  2363  00C2                     	ds	1
  2364  00C3                     _Tx_Length:	
  2365  00C3                     	ds	1
  2366  00C4                     _r_address:	
  2367  00C4                     	ds	1
  2368  00C5                     _r_data:	
  2369  00C5                     	ds	1
  2370  00C6                     _s_data:	
  2371  00C6                     	ds	1
  2372  00C7                     _Buz1:	
  2373  00C7                     	ds	12
  2374  00D3                     _DlySw1:	
  2375  00D3                     	ds	5
  2376  00D8                     _RF1:	
  2377  00D8                     	ds	5
  2378  00DD                     _VarErrLED:	
  2379  00DD                     	ds	4
  2380  00E1                     _VarLED1:	
  2381  00E1                     	ds	4
  2382  00E5                     _VarLED2:	
  2383  00E5                     	ds	4
  2384  00E9                     _Dimmer1:	
  2385  00E9                     	ds	3
  2386  00EC                     _RFSW1:	
  2387  00EC                     	ds	1
  2388                           
  2389                           	psect	bssBANK2
  2390  0120                     __pbssBANK2:	
  2391  0120                     __myMain:	
  2392  0120                     	ds	20
  2393  0134                     _DimmerLights1:	
  2394  0134                     	ds	15
  2395  0143                     _Sw1:	
  2396  0143                     	ds	9
  2397  014C                     _PF1:	
  2398  014C                     	ds	8
  2399  0154                     _VarTimer0:	
  2400  0154                     	ds	8
  2401                           
  2402                           	psect	bssBANK3
  2403  01A0                     __pbssBANK3:	
  2404  01A0                     _VarMemory:	
  2405  01A0                     	ds	37
  2406                           
  2407                           	psect	dataBANK3
  2408  01C5                     __pdataBANK3:	
  2409  01C5                     __product:	
  2410  01C5                     	ds	32
  2411                           
  2412                           	psect	clrtext
  2413  07FA                     clear_ram0:	
  2414                           ;	Called with FSR0 containing the base address, and
  2415                           ;	WREG with the size to clear
  2416                           
  2417  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2418  07FB                     clrloop0:	
  2419  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2420  07FC  3101               	addfsr 0,1
  2421  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2422  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2423  07FF  3400               	retlw	0	;all done for this memory range, return
  2424                           
  2425                           	psect	inittext
  2426  1C12                     init_ram:	
  2427  1C12  00FE               	movwf	126
  2428  1C13                     initloop:	
  2429  1C13  0012               	moviw fsr0++
  2430  1C14  001E               	movwi fsr1++
  2431  1C15  0BFE               	decfsz	126,f
  2432  1C16  2C13               	goto	initloop
  2433  1C17  3400               	retlw	0
  2434                           
  2435                           	psect	cstackCOMMON
  2436  0070                     __pcstackCOMMON:	
  2437  0070                     ?_CC2500_WriteByte:	
  2438  0070                     ?_CC2500_WriteCommand:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_CC2500_ReadStatus:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_CC2500_ReadByte:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ?_CC2500_PowerRST:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_CC2500_InitSetREG:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_CC2500_InitPATable:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ClearTXFIFO:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ClearRXFIFO:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_FrequencyCabr:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_SIDLEMode:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_DlyOff_Initialization:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_DlyOff_Main:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_setTxData:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_setDimmerLights_Initialization:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_Dimmer_Initialization:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_setMemory_GO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_setDimmerLights_Main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setDimmerLights_ERROR:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setLED_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setLED_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Fosc_Set:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_IO_Set:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_TMR0_Set:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_ADC_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_INT_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_IOC_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_IOC_ISR:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_TMR0_ISR:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_INT_ISR:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_Flash_Memory_Write:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_Flash_Memory_Modify:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_setPowerFault_Initialization:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_setPowerFault_Main:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_setPowerFault_Exceptions:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_setSw_Enable:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_setRF_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_setRF_Main:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_RF_RxDisable:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_getRxData:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setLog_Code:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setControl_Lights_Table:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRFSW_Control:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRFSW_AdjControl:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_DimmerValue:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setSw_Initialization:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setSw_Main:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_Sw_DimmerOnFunc:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_Sw_DimmerAdjFunc:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_Sw_DimmerOffFunc:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_myMain_Initialization:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_my_Main:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_my_TestPointCleared:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_Buzzer_Initialization:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Buzzer_Main:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_TxData:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_RxData:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_PowerOnInitial:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_DelayOffPointSelect:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_DelayOff_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_DelayOff_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_DimmerIntrIOCPointSelect:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ??_DimmerIntrIOCPointSelect:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DimmerIntrPointSelect:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ??_DimmerIntrPointSelect:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_IntrControl:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerLightsPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DimmerLights_Initialization:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerLights_Close:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerLights_Main:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DimmerLights_Exceptions:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_AdjRF:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_LedPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_LED_Initialization:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_LED_Main:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_Mcu_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ISR:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_setDimmerReClock:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Flash_Memory_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Flash_Memory_Main:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Unlock:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Erasing:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_PowerFault_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_PowerFault_Main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_getPowerFault_AD:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_RfPointSelect:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_RF_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RF_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_RfSWPointSelect:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TouchPower:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_SwPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Switch_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Switch_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?i1_RfPointSelect:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ??i1_RfPointSelect:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_DelayTimejudge:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_getDimmerLights_StatusFlag:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_getPercentValue:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_Flash_Memory_Read:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_setPercentValue:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     setRF_Initialization@rf:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x0
  2743  0070                     	ds	1
  2744  0071                     DimmerIntrIOCPointSelect@lights:	
  2745  0071                     DimmerIntrPointSelect@lights:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748  0071                     i1RfPointSelect@rf:	
  2749                           ; 1 bytes @ 0x1
  2750                           
  2751                           
  2752                           ; 1 bytes @ 0x1
  2753  0071                     	ds	1
  2754  0072                     ?_setRF_ReceiveGO:	
  2755  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2756                           ; 0 bytes @ 0x2
  2757                           
  2758  0072                     ??_setDimmerLights_IntrControl:	
  2759                           ; 0 bytes @ 0x2
  2760                           
  2761  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2762                           ; 0 bytes @ 0x2
  2763                           
  2764  0072                     setRF_ReceiveGO@command:	
  2765                           ; 1 bytes @ 0x2
  2766                           
  2767                           
  2768                           ; 1 bytes @ 0x2
  2769  0072                     	ds	1
  2770  0073                     ??_IOC_ISR:	
  2771  0073                     ??_setRF_ReceiveGO:	
  2772                           ; 0 bytes @ 0x3
  2773                           
  2774  0073                     ??_setDimmerReClock:	
  2775                           ; 0 bytes @ 0x3
  2776                           
  2777  0073                     setRF_ReceiveGO@rf:	
  2778                           ; 0 bytes @ 0x3
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0x3
  2782  0073                     	ds	1
  2783  0074                     ??_INT_ISR:	
  2784                           
  2785                           ; 0 bytes @ 0x4
  2786  0074                     	ds	2
  2787  0076                     setDimmerLights_IntrControl@lights:	
  2788                           
  2789                           ; 1 bytes @ 0x6
  2790  0076                     	ds	1
  2791  0077                     ??_TMR0_ISR:	
  2792  0077                     ??_ISR:	
  2793                           ; 0 bytes @ 0x7
  2794                           
  2795                           
  2796                           ; 0 bytes @ 0x7
  2797  0077                     	ds	1
  2798                           
  2799                           	psect	cstackBANK0
  2800  0020                     __pcstackBANK0:	
  2801  0020                     ??_CC2500_WriteByte:	
  2802  0020                     ??_CC2500_ReadByte:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ?_DelayTime_1us:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_DelayTimejudge:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_Dimmer_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_getDimmerLights_StatusFlag:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_setMemory_GO:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_Fosc_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_IO_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_TMR0_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_ADC_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_INT_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_IOC_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Read:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Flash_Memory_Write:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setPowerFault_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setRF_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_myMain_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_my_TestPointCleared:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_Buzzer_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_Buzzer_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_DelayOffPointSelect:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_DimmerLightsPointSelect:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_LedPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_Flash_Memory_Unlock:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_Flash_Memory_Erasing:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_RfPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_RfSWPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_TouchPower:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_SwPointSelect:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ?_getAD:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?___awdiv:	
  2893                           ; 2 bytes @ 0x0
  2894                           
  2895  0020                     ?___ftpack:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     getDimmerLights_StatusFlag@Status:	
  2899                           ; 3 bytes @ 0x0
  2900                           
  2901  0020                     getAD@adcon1:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0020                     DelayTime_1us@count:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0020                     ___awdiv@divisor:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     ___ftpack@arg:	
  2911                           ; 2 bytes @ 0x0
  2912                           
  2913                           
  2914                           ; 3 bytes @ 0x0
  2915  0020                     	ds	1
  2916  0021                     ??_Mcu_Initialization:	
  2917  0021                     ??_PowerFault_Initialization:	
  2918                           ; 0 bytes @ 0x1
  2919                           
  2920  0021                     ??_RF_Initialization:	
  2921                           ; 0 bytes @ 0x1
  2922                           
  2923  0021                     CC2500_WriteByte@loop_a:	
  2924                           ; 0 bytes @ 0x1
  2925                           
  2926  0021                     CC2500_ReadByte@loop_b:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0021                     DelayOffPointSelect@sw:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0021                     DelayTimejudge@value:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935  0021                     DimmerLightsPointSelect@lights:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     LedPointSelect@led:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     Flash_Memory_Read@i:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     Flash_Memory_Write@i:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     RfPointSelect@rf:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     RfSWPointSelect@sw:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     SwPointSelect@sw:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x1
  2958  0021                     	ds	1
  2959  0022                     ??_CC2500_WriteCommand:	
  2960  0022                     ??_CC2500_ReadStatus:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0022                     ??_DelayTime_1us:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0022                     ?_CC2500_WriteREG:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0022                     ??_DlyOff_Initialization:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ?_setSw_Status:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_setRFSW_Status:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ?_setDimmerLights_Trigger:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ?_setDimmerLights_Switch:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ??_setTxData:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     ??_setDimmerLights_Initialization:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     ?_setDimmerLights_TriggerERROR:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993  0022                     ?_setLED:	
  2994                           ; 0 bytes @ 0x2
  2995                           
  2996  0022                     ??_setLED_Main:	
  2997                           ; 0 bytes @ 0x2
  2998                           
  2999  0022                     ??_setSw_Enable:	
  3000                           ; 0 bytes @ 0x2
  3001                           
  3002  0022                     ?_setRF_Enable:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ?_setDimmerLights_AdjGo:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_setDimmerLights_TriggerAdj:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ?_setRF_Learn:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     CC2500_WriteREG@value:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     DlyOff_Initialization@sw:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     DelayTimejudge@i:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     setDimmerLights_TriggerERROR@command:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     setDimmerLights_Switch@command:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     setDimmerLights_AdjGo@command:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     setDimmerLights_Trigger@command:	
  3033                           ; 1 bytes @ 0x2
  3034                           
  3035  0022                     setDimmerLights_TriggerAdj@command:	
  3036                           ; 1 bytes @ 0x2
  3037                           
  3038  0022                     setLED@command:	
  3039                           ; 1 bytes @ 0x2
  3040                           
  3041  0022                     Flash_Memory_Read@address:	
  3042                           ; 1 bytes @ 0x2
  3043                           
  3044  0022                     setMemory_GO@command:	
  3045                           ; 1 bytes @ 0x2
  3046                           
  3047  0022                     setRF_Learn@command:	
  3048                           ; 1 bytes @ 0x2
  3049                           
  3050  0022                     setRF_Enable@command:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setRFSW_Status@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setSw_Enable@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setSw_Status@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     DelayTime_1us@i:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     ___awdiv@dividend:	
  3066                           ; 2 bytes @ 0x2
  3067                           
  3068                           
  3069                           ; 2 bytes @ 0x2
  3070  0022                     	ds	1
  3071  0023                     ??_CC2500_WriteREG:	
  3072  0023                     ??_setSw_Status:	
  3073                           ; 0 bytes @ 0x3
  3074                           
  3075  0023                     ??_setRFSW_Status:	
  3076                           ; 0 bytes @ 0x3
  3077                           
  3078  0023                     ??_setDimmerLights_Trigger:	
  3079                           ; 0 bytes @ 0x3
  3080                           
  3081  0023                     ??_setDimmerLights_Switch:	
  3082                           ; 0 bytes @ 0x3
  3083                           
  3084  0023                     ??_setDimmerLights_TriggerERROR:	
  3085                           ; 0 bytes @ 0x3
  3086                           
  3087  0023                     ??_setLED:	
  3088                           ; 0 bytes @ 0x3
  3089                           
  3090  0023                     ??_setRF_Enable:	
  3091                           ; 0 bytes @ 0x3
  3092                           
  3093  0023                     ??_DelayOff_Initialization:	
  3094                           ; 0 bytes @ 0x3
  3095                           
  3096  0023                     ?_setDelayOff_GO:	
  3097                           ; 0 bytes @ 0x3
  3098                           
  3099  0023                     ??_DimmerLights_Close:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setDimmerLights_AdjGo:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_TriggerAdj:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_getAD:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ??_setRF_Learn:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     CC2500_WriteCommand@command:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     CC2500_ReadStatus@status_addr:	
  3118                           ; 1 bytes @ 0x3
  3119                           
  3120  0023                     setDelayOff_GO@command:	
  3121                           ; 1 bytes @ 0x3
  3122                           
  3123  0023                     setDimmerLights_Initialization@lights:	
  3124                           ; 1 bytes @ 0x3
  3125                           
  3126  0023                     setDimmerLights_TriggerERROR@lights:	
  3127                           ; 1 bytes @ 0x3
  3128                           
  3129  0023                     setDimmerLights_Switch@lights:	
  3130                           ; 1 bytes @ 0x3
  3131                           
  3132  0023                     setDimmerLights_AdjGo@lights:	
  3133                           ; 1 bytes @ 0x3
  3134                           
  3135  0023                     setDimmerLights_Trigger@lights:	
  3136                           ; 1 bytes @ 0x3
  3137                           
  3138  0023                     setDimmerLights_TriggerAdj@lights:	
  3139                           ; 1 bytes @ 0x3
  3140                           
  3141  0023                     setLED@led:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     getAD@adcon0:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     Flash_Memory_Read@ret:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setRF_Learn@rf:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setTxData@rf:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setRF_Enable@rf:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setRFSW_Status@sw:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setSw_Status@sw:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     ___ftpack@exp:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168                           
  3169                           ; 1 bytes @ 0x3
  3170  0023                     	ds	1
  3171  0024                     ??_CC2500_ClearTXFIFO:	
  3172  0024                     ??_CC2500_ClearRXFIFO:	
  3173                           ; 0 bytes @ 0x4
  3174                           
  3175  0024                     ??_CC2500_SIDLEMode:	
  3176                           ; 0 bytes @ 0x4
  3177                           
  3178  0024                     ?_setDimmerLights:	
  3179                           ; 0 bytes @ 0x4
  3180                           
  3181  0024                     ??_setDimmerLights_ERROR:	
  3182                           ; 0 bytes @ 0x4
  3183                           
  3184  0024                     ??_setLED_Initialization:	
  3185                           ; 0 bytes @ 0x4
  3186                           
  3187  0024                     ??_Flash_Memory_Modify:	
  3188                           ; 0 bytes @ 0x4
  3189                           
  3190  0024                     ??_RF_RxDisable:	
  3191                           ; 0 bytes @ 0x4
  3192                           
  3193  0024                     ??_setSw_Initialization:	
  3194                           ; 0 bytes @ 0x4
  3195                           
  3196  0024                     ??_Sw_DimmerAdjFunc:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_CC2500_TxData:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_DimmerLights_Initialization:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_getPowerFault_AD:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??___awdiv:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     CC2500_WriteREG@w_addr:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     setDelayOff_GO@value:	
  3215                           ; 1 bytes @ 0x4
  3216                           
  3217  0024                     setDimmerLights@status:	
  3218                           ; 1 bytes @ 0x4
  3219                           
  3220  0024                     setLED_Initialization@led:	
  3221                           ; 1 bytes @ 0x4
  3222                           
  3223  0024                     setLED_Main@led:	
  3224                           ; 1 bytes @ 0x4
  3225                           
  3226  0024                     RF_RxDisable@rf:	
  3227                           ; 1 bytes @ 0x4
  3228                           
  3229  0024                     setSw_Initialization@sw:	
  3230                           ; 1 bytes @ 0x4
  3231                           
  3232  0024                     Sw_DimmerAdjFunc@Idle:	
  3233                           ; 1 bytes @ 0x4
  3234                           
  3235  0024                     ___ftpack@sign:	
  3236                           ; 1 bytes @ 0x4
  3237                           
  3238  0024                     DelayTime_1us@j:	
  3239                           ; 1 bytes @ 0x4
  3240                           
  3241                           
  3242                           ; 2 bytes @ 0x4
  3243  0024                     	ds	1
  3244  0025                     ??_CC2500_InitSetREG:	
  3245  0025                     ??_CC2500_InitPATable:	
  3246                           ; 0 bytes @ 0x5
  3247                           
  3248  0025                     ??_setDimmerLights:	
  3249                           ; 0 bytes @ 0x5
  3250                           
  3251  0025                     ??___ftpack:	
  3252                           ; 0 bytes @ 0x5
  3253                           
  3254  0025                     ??_setDelayOff_GO:	
  3255                           ; 0 bytes @ 0x5
  3256                           
  3257  0025                     ??_LED_Initialization:	
  3258                           ; 0 bytes @ 0x5
  3259                           
  3260  0025                     ??_LED_Main:	
  3261                           ; 0 bytes @ 0x5
  3262                           
  3263  0025                     ??_Switch_Initialization:	
  3264                           ; 0 bytes @ 0x5
  3265                           
  3266  0025                     CC2500_TxData@loop_e:	
  3267                           ; 0 bytes @ 0x5
  3268                           
  3269  0025                     setDimmerLights_ERROR@lights:	
  3270                           ; 1 bytes @ 0x5
  3271                           
  3272  0025                     Sw_DimmerAdjFunc@sw:	
  3273                           ; 1 bytes @ 0x5
  3274                           
  3275  0025                     ___awdiv@counter:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278                           
  3279                           ; 1 bytes @ 0x5
  3280  0025                     	ds	1
  3281  0026                     ??_CC2500_PowerRST:	
  3282  0026                     ??_CC2500_FrequencyCabr:	
  3283                           ; 0 bytes @ 0x6
  3284                           
  3285  0026                     CC2500_InitSetREG@temp1:	
  3286                           ; 0 bytes @ 0x6
  3287                           
  3288  0026                     CC2500_InitPATable@temp:	
  3289                           ; 1 bytes @ 0x6
  3290                           
  3291  0026                     setDimmerLights@lights:	
  3292                           ; 1 bytes @ 0x6
  3293                           
  3294  0026                     Flash_Memory_Modify@i:	
  3295                           ; 1 bytes @ 0x6
  3296                           
  3297  0026                     ___awdiv@sign:	
  3298                           ; 1 bytes @ 0x6
  3299                           
  3300                           
  3301                           ; 1 bytes @ 0x6
  3302  0026                     	ds	1
  3303  0027                     ??_Flash_Memory_Main:	
  3304  0027                     CC2500_InitSetREG@temp2:	
  3305                           ; 0 bytes @ 0x7
  3306                           
  3307  0027                     CC2500_InitPATable@loop_d:	
  3308                           ; 1 bytes @ 0x7
  3309                           
  3310  0027                     setDelayOff_GO@sw:	
  3311                           ; 1 bytes @ 0x7
  3312                           
  3313  0027                     ___awdiv@quotient:	
  3314                           ; 1 bytes @ 0x7
  3315                           
  3316                           
  3317                           ; 2 bytes @ 0x7
  3318  0027                     	ds	1
  3319  0028                     ?___awtoft:	
  3320  0028                     CC2500_InitSetREG@loop_c:	
  3321                           ; 3 bytes @ 0x8
  3322                           
  3323  0028                     getPowerFault_AD@channel:	
  3324                           ; 1 bytes @ 0x8
  3325                           
  3326  0028                     ___awtoft@c:	
  3327                           ; 1 bytes @ 0x8
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x8
  3331  0028                     	ds	1
  3332  0029                     ?_setBuz:	
  3333  0029                     ??_CC2500_PowerOnInitial:	
  3334                           ; 0 bytes @ 0x9
  3335                           
  3336  0029                     setBuz@time:	
  3337                           ; 0 bytes @ 0x9
  3338                           
  3339                           
  3340                           ; 2 bytes @ 0x9
  3341  0029                     	ds	2
  3342  002B                     ??_setBuz:	
  3343  002B                     ??___awtoft:	
  3344                           ; 0 bytes @ 0xB
  3345                           
  3346                           
  3347                           ; 0 bytes @ 0xB
  3348  002B                     	ds	1
  3349  002C                     setBuz@count:	
  3350                           
  3351                           ; 1 bytes @ 0xC
  3352  002C                     	ds	1
  3353  002D                     ??_setLog_Code:	
  3354  002D                     ??_my_Main:	
  3355                           ; 0 bytes @ 0xD
  3356                           
  3357  002D                     ??_CC2500_RxData:	
  3358                           ; 0 bytes @ 0xD
  3359                           
  3360  002D                     ??_DimmerLights_Exceptions:	
  3361                           ; 0 bytes @ 0xD
  3362                           
  3363  002D                     DimmerLights_Exceptions@status:	
  3364                           ; 0 bytes @ 0xD
  3365                           
  3366  002D                     ___awtoft@sign:	
  3367                           ; 1 bytes @ 0xD
  3368                           
  3369                           
  3370                           ; 1 bytes @ 0xD
  3371  002D                     	ds	1
  3372  002E                     ??_setPowerFault_Exceptions:	
  3373  002E                     ?___ftdiv:	
  3374                           ; 0 bytes @ 0xE
  3375                           
  3376  002E                     ?___ftmul:	
  3377                           ; 3 bytes @ 0xE
  3378                           
  3379  002E                     setLog_Code@rf:	
  3380                           ; 3 bytes @ 0xE
  3381                           
  3382  002E                     ___ftdiv@f2:	
  3383                           ; 1 bytes @ 0xE
  3384                           
  3385  002E                     ___ftmul@f1:	
  3386                           ; 3 bytes @ 0xE
  3387                           
  3388                           
  3389                           ; 3 bytes @ 0xE
  3390  002E                     	ds	1
  3391  002F                     CC2500_RxData@loop_f:	
  3392  002F                     setPowerFault_Exceptions@command:	
  3393                           ; 1 bytes @ 0xF
  3394                           
  3395                           
  3396                           ; 1 bytes @ 0xF
  3397  002F                     	ds	1
  3398  0030                     ??_setPowerFault_Main:	
  3399                           
  3400                           ; 0 bytes @ 0x10
  3401  0030                     	ds	1
  3402  0031                     ___ftdiv@f1:	
  3403  0031                     ___ftmul@f2:	
  3404                           ; 3 bytes @ 0x11
  3405                           
  3406                           
  3407                           ; 3 bytes @ 0x11
  3408  0031                     	ds	1
  3409  0032                     ??_PowerFault_Main:	
  3410                           
  3411                           ; 0 bytes @ 0x12
  3412  0032                     	ds	2
  3413  0034                     ??___ftdiv:	
  3414  0034                     ??___ftmul:	
  3415                           ; 0 bytes @ 0x14
  3416                           
  3417                           
  3418                           ; 0 bytes @ 0x14
  3419  0034                     	ds	4
  3420  0038                     ___ftdiv@cntr:	
  3421  0038                     ___ftmul@exp:	
  3422                           ; 1 bytes @ 0x18
  3423                           
  3424                           
  3425                           ; 1 bytes @ 0x18
  3426  0038                     	ds	1
  3427  0039                     ___ftdiv@f3:	
  3428  0039                     ___ftmul@f3_as_product:	
  3429                           ; 3 bytes @ 0x19
  3430                           
  3431                           
  3432                           ; 3 bytes @ 0x19
  3433  0039                     	ds	3
  3434  003C                     ___ftdiv@exp:	
  3435  003C                     ___ftmul@cntr:	
  3436                           ; 1 bytes @ 0x1C
  3437                           
  3438                           
  3439                           ; 1 bytes @ 0x1C
  3440  003C                     	ds	1
  3441  003D                     ___ftdiv@sign:	
  3442  003D                     ___ftmul@sign:	
  3443                           ; 1 bytes @ 0x1D
  3444                           
  3445                           
  3446                           ; 1 bytes @ 0x1D
  3447  003D                     	ds	1
  3448  003E                     ?___ftadd:	
  3449  003E                     ___ftadd@f1:	
  3450                           ; 3 bytes @ 0x1E
  3451                           
  3452                           
  3453                           ; 3 bytes @ 0x1E
  3454  003E                     	ds	3
  3455  0041                     ___ftadd@f2:	
  3456                           
  3457                           ; 3 bytes @ 0x21
  3458  0041                     	ds	3
  3459  0044                     ??___ftadd:	
  3460                           
  3461                           ; 0 bytes @ 0x24
  3462  0044                     	ds	4
  3463  0048                     ___ftadd@sign:	
  3464                           
  3465                           ; 1 bytes @ 0x28
  3466  0048                     	ds	1
  3467  0049                     ___ftadd@exp2:	
  3468                           
  3469                           ; 1 bytes @ 0x29
  3470  0049                     	ds	1
  3471  004A                     ___ftadd@exp1:	
  3472                           
  3473                           ; 1 bytes @ 0x2A
  3474  004A                     	ds	1
  3475  004B                     ?___fttol:	
  3476  004B                     ___fttol@f1:	
  3477                           ; 4 bytes @ 0x2B
  3478                           
  3479                           
  3480                           ; 3 bytes @ 0x2B
  3481  004B                     	ds	4
  3482  004F                     ??___fttol:	
  3483                           
  3484                           ; 0 bytes @ 0x2F
  3485  004F                     	ds	4
  3486  0053                     ___fttol@sign1:	
  3487                           
  3488                           ; 1 bytes @ 0x33
  3489  0053                     	ds	1
  3490  0054                     ___fttol@lval:	
  3491                           
  3492                           ; 4 bytes @ 0x34
  3493  0054                     	ds	4
  3494  0058                     ___fttol@exp1:	
  3495                           
  3496                           ; 1 bytes @ 0x38
  3497  0058                     	ds	1
  3498  0059                     ??_getPercentValue:	
  3499  0059                     ??_setPercentValue:	
  3500                           ; 0 bytes @ 0x39
  3501                           
  3502  0059                     setPercentValue@value:	
  3503                           ; 0 bytes @ 0x39
  3504                           
  3505                           
  3506                           ; 1 bytes @ 0x39
  3507  0059                     	ds	1
  3508  005A                     setPercentValue@i:	
  3509                           
  3510                           ; 3 bytes @ 0x3A
  3511  005A                     	ds	1
  3512  005B                     getPercentValue@value:	
  3513                           
  3514                           ; 1 bytes @ 0x3B
  3515  005B                     	ds	1
  3516  005C                     getPercentValue@i:	
  3517                           
  3518                           ; 3 bytes @ 0x3C
  3519  005C                     	ds	1
  3520  005D                     ?_setRF_DimmerLights:	
  3521  005D                     ??_Flash_Memory_Initialization:	
  3522                           ; 0 bytes @ 0x3D
  3523                           
  3524  005D                     setRF_DimmerLights@on:	
  3525                           ; 0 bytes @ 0x3D
  3526                           
  3527                           
  3528                           ; 1 bytes @ 0x3D
  3529  005D                     	ds	1
  3530  005E                     ??_setRF_DimmerLights:	
  3531  005E                     Flash_Memory_Initialization@i:	
  3532                           ; 0 bytes @ 0x3E
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x3E
  3536  005E                     	ds	1
  3537  005F                     ??_setDimmerLights_AdjRF:	
  3538                           
  3539                           ; 0 bytes @ 0x3F
  3540  005F                     	ds	1
  3541  0060                     setDimmerLights_AdjRF@lights:	
  3542  0060                     setRF_DimmerLights@status:	
  3543                           ; 1 bytes @ 0x40
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x40
  3547  0060                     	ds	1
  3548  0061                     ??_setRF_DimmerValue:	
  3549  0061                     setRF_DimmerLights@lights:	
  3550                           ; 0 bytes @ 0x41
  3551                           
  3552                           
  3553                           ; 1 bytes @ 0x41
  3554  0061                     	ds	1
  3555  0062                     ??_DlyOff_Main:	
  3556  0062                     ?_setDimmerLights_Adj:	
  3557                           ; 0 bytes @ 0x42
  3558                           
  3559  0062                     ??_setRFSW_Control:	
  3560                           ; 0 bytes @ 0x42
  3561                           
  3562  0062                     ??_Sw_DimmerOnFunc:	
  3563                           ; 0 bytes @ 0x42
  3564                           
  3565  0062                     ??_Sw_DimmerOffFunc:	
  3566                           ; 0 bytes @ 0x42
  3567                           
  3568  0062                     setDimmerLights_Adj@status:	
  3569                           ; 0 bytes @ 0x42
  3570                           
  3571  0062                     Sw_DimmerOnFunc@Idle:	
  3572                           ; 1 bytes @ 0x42
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x42
  3576  0062                     	ds	1
  3577  0063                     ??_setDimmerLights_Adj:	
  3578  0063                     setRFSW_Control@sw:	
  3579                           ; 0 bytes @ 0x43
  3580                           
  3581  0063                     setRF_DimmerValue@lights:	
  3582                           ; 1 bytes @ 0x43
  3583                           
  3584  0063                     Sw_DimmerOnFunc@sw:	
  3585                           ; 1 bytes @ 0x43
  3586                           
  3587                           
  3588                           ; 1 bytes @ 0x43
  3589  0063                     	ds	1
  3590  0064                     ??_setRFSW_AdjControl:	
  3591  0064                     DlyOff_Main@sw:	
  3592                           ; 0 bytes @ 0x44
  3593                           
  3594  0064                     setDimmerLights_Adj@lights:	
  3595                           ; 1 bytes @ 0x44
  3596                           
  3597  0064                     Sw_DimmerOffFunc@sw:	
  3598                           ; 1 bytes @ 0x44
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x44
  3602  0064                     	ds	1
  3603  0065                     ??_setDimmerLights_Main:	
  3604  0065                     ??_setSw_Main:	
  3605                           ; 0 bytes @ 0x45
  3606                           
  3607  0065                     ??_DelayOff_Main:	
  3608                           ; 0 bytes @ 0x45
  3609                           
  3610  0065                     setDimmerLights_Main@clear:	
  3611                           ; 0 bytes @ 0x45
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x45
  3615  0065                     	ds	1
  3616  0066                     setDimmerLights_Main@lights:	
  3617  0066                     setRFSW_AdjControl@sw:	
  3618                           ; 1 bytes @ 0x46
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x46
  3622  0066                     	ds	1
  3623  0067                     ??_setControl_Lights_Table:	
  3624  0067                     ??_DimmerLights_Main:	
  3625                           ; 0 bytes @ 0x47
  3626                           
  3627  0067                     setControl_Lights_Table@rf:	
  3628                           ; 0 bytes @ 0x47
  3629                           
  3630  0067                     _setSw_Main$4803:	
  3631                           ; 1 bytes @ 0x47
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0x47
  3635  0067                     	ds	1
  3636  0068                     ??_getRxData:	
  3637  0068                     getRxData@rf:	
  3638                           ; 0 bytes @ 0x48
  3639                           
  3640  0068                     setSw_Main@sw:	
  3641                           ; 1 bytes @ 0x48
  3642                           
  3643                           
  3644                           ; 1 bytes @ 0x48
  3645  0068                     	ds	1
  3646  0069                     ??_setRF_Main:	
  3647  0069                     ??_Switch_Main:	
  3648                           ; 0 bytes @ 0x49
  3649                           
  3650                           
  3651                           ; 0 bytes @ 0x49
  3652  0069                     	ds	1
  3653  006A                     setRF_Main@rf:	
  3654                           
  3655                           ; 1 bytes @ 0x4A
  3656  006A                     	ds	1
  3657  006B                     _setRF_Main$3967:	
  3658                           
  3659                           ; 1 bytes @ 0x4B
  3660  006B                     	ds	1
  3661  006C                     ??_RF_Main:	
  3662  006C                     ?_main:	
  3663                           ; 0 bytes @ 0x4C
  3664                           
  3665  006C                     main@argc:	
  3666                           ; 2 bytes @ 0x4C
  3667                           
  3668                           
  3669                           ; 2 bytes @ 0x4C
  3670  006C                     	ds	2
  3671  006E                     main@argv:	
  3672                           
  3673                           ; 2 bytes @ 0x4E
  3674  006E                     	ds	2
  3675  0070                     ??_main:	
  3676                           
  3677                           	psect	maintext
  3678  17A2                     __pmaintext:	
  3679                           ; 0 bytes @ 0x50
  3680 ;;
  3681 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3682 ;;
  3683 ;; *************** function _main *****************
  3684 ;; Defined at:
  3685 ;;		line 7 in file "../src/main_B1.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  argc            2   76[BANK0 ] int 
  3688 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;		None
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  2   76[BANK0 ] int 
  3693 ;; Registers used:
  3694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3695 ;; Tracked objects:
  3696 ;;		On entry : 17F/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3704 ;;Total ram usage:        4 bytes
  3705 ;; Hardware stack levels required when called:   15
  3706 ;; This function calls:
  3707 ;;		_Buzzer_Initialization
  3708 ;;		_Buzzer_Main
  3709 ;;		_CC2500_PowerOnInitial
  3710 ;;		_DelayOff_Initialization
  3711 ;;		_DelayOff_Main
  3712 ;;		_DimmerLights_Initialization
  3713 ;;		_DimmerLights_Main
  3714 ;;		_Flash_Memory_Initialization
  3715 ;;		_Flash_Memory_Main
  3716 ;;		_LED_Initialization
  3717 ;;		_LED_Main
  3718 ;;		_Mcu_Initialization
  3719 ;;		_PowerFault_Initialization
  3720 ;;		_PowerFault_Main
  3721 ;;		_RF_Initialization
  3722 ;;		_RF_Main
  3723 ;;		_Switch_Initialization
  3724 ;;		_Switch_Main
  3725 ;;		_getPowerFault_AD
  3726 ;;		_myMain_Initialization
  3727 ;;		_my_Main
  3728 ;;		_my_TestPointCleared
  3729 ;; This function is called by:
  3730 ;;		Startup code after reset
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _main
  3736  17A2                     _main:	
  3737                           
  3738                           ;main_B1.c: 9: myMain_Initialization();
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3742  17A2  319E  2611  3197   	fcall	_myMain_Initialization
  3743                           
  3744                           ;main_B1.c: 10: Mcu_Initialization();
  3745  17A5  319E  2650  3197   	fcall	_Mcu_Initialization
  3746                           
  3747                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3748  17A8  3184  2444  3197   	fcall	_Flash_Memory_Initialization
  3749                           
  3750                           ;main_B1.c: 12: LED_Initialization();
  3751  17AB  319C  24D4  3197   	fcall	_LED_Initialization
  3752                           
  3753                           ;main_B1.c: 13: Buzzer_Initialization();
  3754  17AE  319C  246C  3197   	fcall	_Buzzer_Initialization
  3755                           
  3756                           ;main_B1.c: 15: ;;
  3757                           ;main_B1.c: 16: ;;
  3758                           ;main_B1.c: 17: ;;
  3759                           ;main_B1.c: 18: PowerFault_Initialization();
  3760  17B1  319B  23DD  3197   	fcall	_PowerFault_Initialization
  3761                           
  3762                           ;main_B1.c: 19: DelayOff_Initialization();
  3763  17B4  319B  23EF  3197   	fcall	_DelayOff_Initialization
  3764                           
  3765                           ;main_B1.c: 21: DimmerLights_Initialization();
  3766  17B7  319C  24F9  3197   	fcall	_DimmerLights_Initialization
  3767                           
  3768                           ;main_B1.c: 22: ;;
  3769                           ;main_B1.c: 23: ;;
  3770                           ;main_B1.c: 24: ;;
  3771                           ;main_B1.c: 25: Switch_Initialization();
  3772  17BA  319C  2444  3197   	fcall	_Switch_Initialization
  3773                           
  3774                           ;main_B1.c: 26: RF_Initialization();
  3775  17BD  319B  23FB  3197   	fcall	_RF_Initialization
  3776                           
  3777                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3778  17C0  319E  2625  3197   	fcall	_CC2500_PowerOnInitial
  3779  17C3                     l7118:	
  3780                           ;main_B1.c: 28: ;;
  3781                           ;main_B1.c: 31: while (1) {
  3782                           
  3783                           
  3784                           ;main_B1.c: 33: if (myMain->PowerON) {
  3785  17C3  0021               	movlb	1	; select bank1
  3786  17C4  086E               	movf	_myMain^(0+128),w
  3787  17C5  0086               	movwf	6
  3788  17C6  3001               	movlw	1	; select bank2/3
  3789  17C7  0087               	movwf	7
  3790  17C8  1C01               	btfss	1,0
  3791  17C9  2FCE               	goto	l7122
  3792                           
  3793                           ;main_B1.c: 35: ;;
  3794                           ;main_B1.c: 39: ;;
  3795                           ;main_B1.c: 43: ;;
  3796                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  3797  17CA  3011               	movlw	17
  3798  17CB  3194  2443  3197   	fcall	_getPowerFault_AD
  3799  17CE                     l7122:	
  3800                           
  3801                           ;main_B1.c: 58: }
  3802                           ;main_B1.c: 61: if (myMain->T0_Timerout) {
  3803  17CE  0021               	movlb	1	; select bank1
  3804  17CF  086E               	movf	_myMain^(0+128),w
  3805  17D0  0086               	movwf	6
  3806  17D1  3001               	movlw	1	; select bank2/3
  3807  17D2  0087               	movwf	7
  3808  17D3  1C81               	btfss	1,1
  3809  17D4  2FC3               	goto	l7118
  3810                           
  3811                           ;main_B1.c: 62: myMain->T0_Timerout = 0;
  3812  17D5  086E               	movf	_myMain^(0+128),w
  3813  17D6  0086               	movwf	6
  3814  17D7  3001               	movlw	1	; select bank2/3
  3815  17D8  0087               	movwf	7
  3816  17D9  1081               	bcf	1,1
  3817                           
  3818                           ;main_B1.c: 63: my_Main();
  3819  17DA  318A  2247  3197   	fcall	_my_Main
  3820                           
  3821                           ;main_B1.c: 64: my_TestPointCleared();
  3822  17DD  319D  25EB  3197   	fcall	_my_TestPointCleared
  3823                           
  3824                           ;main_B1.c: 65: ;;
  3825                           ;main_B1.c: 66: ;;
  3826                           ;main_B1.c: 67: ;;
  3827                           ;main_B1.c: 68: if (myMain->PowerON) {
  3828  17E0  0021               	movlb	1	; select bank1
  3829  17E1  086E               	movf	_myMain^(0+128),w
  3830  17E2  0086               	movwf	6
  3831  17E3  3001               	movlw	1	; select bank2/3
  3832  17E4  0087               	movwf	7
  3833  17E5  1C01               	btfss	1,0
  3834  17E6  2FC3               	goto	l7118
  3835                           
  3836                           ;main_B1.c: 69: Flash_Memory_Main();
  3837  17E7  3193  232C  3197   	fcall	_Flash_Memory_Main
  3838                           
  3839                           ;main_B1.c: 71: LED_Main();
  3840  17EA  319C  24E0  3197   	fcall	_LED_Main
  3841                           
  3842                           ;main_B1.c: 72: Buzzer_Main();
  3843  17ED  318E  269D  3197   	fcall	_Buzzer_Main
  3844                           
  3845                           ;main_B1.c: 74: ;;
  3846                           ;main_B1.c: 75: ;;
  3847                           ;main_B1.c: 76: ;;
  3848                           ;main_B1.c: 77: PowerFault_Main();
  3849  17F0  319B  23E0  3197   	fcall	_PowerFault_Main
  3850                           
  3851                           ;main_B1.c: 79: ;;
  3852                           ;main_B1.c: 80: DimmerLights_Main();
  3853  17F3  319C  2426  3197   	fcall	_DimmerLights_Main
  3854                           
  3855                           ;main_B1.c: 81: Switch_Main();
  3856  17F6  319C  2403  3197   	fcall	_Switch_Main
  3857                           
  3858                           ;main_B1.c: 82: ;;
  3859                           ;main_B1.c: 83: ;;
  3860                           ;main_B1.c: 85: RF_Main();
  3861  17F9  319B  23FF  3197   	fcall	_RF_Main
  3862                           
  3863                           ;main_B1.c: 86: DelayOff_Main();
  3864  17FC  319B  23F3  3197   	fcall	_DelayOff_Main
  3865                           
  3866                           ;main_B1.c: 87: ;;
  3867  17FF  2FC3               	goto	l7118
  3868  1800                     __end_of_main:	
  3869                           ;main_B1.c: 88: }
  3870                           ;main_B1.c: 89: }
  3871                           ;main_B1.c: 107: }
  3872                           ;main_B1.c: 108: return (0);
  3873                           ;	Return value of _main is never used
  3874                           
  3875                           
  3876                           	psect	text1
  3877  1DEB                     __ptext1:	
  3878 ;; *************** function _my_TestPointCleared *****************
  3879 ;; Defined at:
  3880 ;;		line 206 in file "../src/main_B1.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;		None               void
  3887 ;; Registers used:
  3888 ;;		wreg, fsr1l, fsr1h
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3898 ;;Total ram usage:        0 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    5
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_main
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _my_TestPointCleared
  3910  1DEB                     _my_TestPointCleared:	
  3911                           
  3912                           ;main_B1.c: 207: myMain->pcount1 = 0;
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  3916  1DEB  0021               	movlb	1	; select bank1
  3917  1DEC  086E               	movf	_myMain^(0+128),w
  3918  1DED  3E10               	addlw	16
  3919  1DEE  0086               	movwf	6
  3920  1DEF  3001               	movlw	1	; select bank2/3
  3921  1DF0  0087               	movwf	7
  3922  1DF1  3000               	movlw	0
  3923  1DF2  3FC0               	movwi [0]fsr1
  3924  1DF3  3FC1               	movwi [1]fsr1
  3925                           
  3926                           ;main_B1.c: 208: myMain->pcount2 = 0;
  3927  1DF4  086E               	movf	_myMain^(0+128),w
  3928  1DF5  3E12               	addlw	18
  3929  1DF6  0086               	movwf	6
  3930  1DF7  3001               	movlw	1	; select bank2/3
  3931  1DF8  0087               	movwf	7
  3932  1DF9  3000               	movlw	0
  3933  1DFA  3FC0               	movwi [0]fsr1
  3934  1DFB  3FC1               	movwi [1]fsr1
  3935  1DFC  0008               	return
  3936  1DFD                     __end_of_my_TestPointCleared:	
  3937                           
  3938                           	psect	text2
  3939  0A47                     __ptext2:	
  3940 ;; *************** function _my_Main *****************
  3941 ;; Defined at:
  3942 ;;		line 125 in file "../src/main_B1.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;		None               void
  3949 ;; Registers used:
  3950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    7
  3963 ;; This function calls:
  3964 ;;		_setBuz
  3965 ;;		_setRF_Enable
  3966 ;;		_setSw_Enable
  3967 ;; This function is called by:
  3968 ;;		_main
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           
  3973                           ;psect for function _my_Main
  3974  0A47                     _my_Main:	
  3975                           
  3976                           ;main_B1.c: 127: if (myMain->PowerON == 0) {
  3977                           
  3978                           ;incstack = 0
  3979                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3980  0A47  0021               	movlb	1	; select bank1
  3981  0A48  086E               	movf	_myMain^(0+128),w
  3982  0A49  0086               	movwf	6
  3983  0A4A  3001               	movlw	1	; select bank2/3
  3984  0A4B  0087               	movwf	7
  3985  0A4C  1801               	btfsc	1,0
  3986  0A4D  2A89               	goto	l7030
  3987                           
  3988                           ;main_B1.c: 128: myMain->PowerCount++;
  3989  0A4E  0A6E               	incf	_myMain^(0+128),w
  3990  0A4F  0086               	movwf	6
  3991  0A50  3001               	movlw	1	; select bank2/3
  3992  0A51  0087               	movwf	7
  3993  0A52  3001               	movlw	1
  3994  0A53  0781               	addwf	1,f
  3995  0A54  3141               	addfsr 1,1
  3996  0A55  1803               	skipnc
  3997  0A56  0A81               	incf	1,f
  3998                           
  3999                           ;main_B1.c: 129: if (myMain->PowerCount == 150)
  4000  0A57  0A6E               	incf	_myMain^(0+128),w
  4001  0A58  0086               	movwf	6
  4002  0A59  3001               	movlw	1	; select bank2/3
  4003  0A5A  0087               	movwf	7
  4004  0A5B  3F40               	moviw [0]fsr1
  4005  0A5C  3A96               	xorlw	150
  4006  0A5D  1D03               	skipz
  4007  0A5E  2A61               	goto	u6305
  4008  0A5F  3F41               	moviw [1]fsr1
  4009  0A60  3A00               	xorlw	0
  4010  0A61                     u6305:	
  4011  0A61  1D03               	skipz
  4012  0A62  0008               	return
  4013                           
  4014                           ;main_B1.c: 130: {
  4015                           ;main_B1.c: 131: myMain->PowerCount = 0;
  4016  0A63  0A6E               	incf	_myMain^(0+128),w
  4017  0A64  0086               	movwf	6
  4018  0A65  3001               	movlw	1	; select bank2/3
  4019  0A66  0087               	movwf	7
  4020  0A67  3000               	movlw	0
  4021  0A68  3FC0               	movwi [0]fsr1
  4022  0A69  3FC1               	movwi [1]fsr1
  4023                           
  4024                           ;main_B1.c: 132: myMain->PowerON = 1;
  4025  0A6A  086E               	movf	_myMain^(0+128),w
  4026  0A6B  0086               	movwf	6
  4027  0A6C  3001               	movlw	1	; select bank2/3
  4028  0A6D  0087               	movwf	7
  4029  0A6E  1401               	bsf	1,0
  4030                           
  4031                           ;main_B1.c: 135: ;;
  4032                           ;main_B1.c: 139: ;;
  4033                           ;main_B1.c: 145: setBuz(3, 50);
  4034  0A6F  3032               	movlw	50
  4035  0A70  0020               	movlb	0	; select bank0
  4036  0A71  00A9               	movwf	setBuz@time
  4037  0A72  3000               	movlw	0
  4038  0A73  00AA               	movwf	setBuz@time+1
  4039  0A74  3003               	movlw	3
  4040  0A75  318C  243C  318A   	fcall	_setBuz
  4041                           
  4042                           ;main_B1.c: 146: myMain->SelfTest = 1;
  4043  0A78  0021               	movlb	1	; select bank1
  4044  0A79  086E               	movf	_myMain^(0+128),w
  4045  0A7A  0086               	movwf	6
  4046  0A7B  3001               	movlw	1	; select bank2/3
  4047  0A7C  0087               	movwf	7
  4048  0A7D  1701               	bsf	1,6
  4049                           
  4050                           ;main_B1.c: 148: setSw_Enable(1);
  4051  0A7E  3001               	movlw	1
  4052  0A7F  319D  255A  318A   	fcall	_setSw_Enable
  4053                           
  4054                           ;main_B1.c: 151: setRF_Enable(1, 1);
  4055  0A82  0020               	movlb	0	; select bank0
  4056  0A83  01A2               	clrf	setRF_Enable@command
  4057  0A84  0AA2               	incf	setRF_Enable@command,f
  4058  0A85  3001               	movlw	1
  4059  0A86  3190  20BF         	fcall	_setRF_Enable
  4060                           
  4061                           ;main_B1.c: 155: }
  4062                           ;main_B1.c: 156: } else {
  4063  0A88  0008               	return
  4064  0A89                     l7030:	
  4065                           
  4066                           ;main_B1.c: 164: myMain->Count1++;
  4067  0A89  0021               	movlb	1	; select bank1
  4068  0A8A  086E               	movf	_myMain^(0+128),w
  4069  0A8B  3E05               	addlw	5
  4070  0A8C  0086               	movwf	6
  4071  0A8D  3001               	movlw	1	; select bank2/3
  4072  0A8E  0087               	movwf	7
  4073  0A8F  3001               	movlw	1
  4074  0A90  0781               	addwf	1,f
  4075  0A91  3141               	addfsr 1,1
  4076  0A92  1803               	skipnc
  4077  0A93  0A81               	incf	1,f
  4078                           
  4079                           ;main_B1.c: 165: if (myMain->Count1 == 100)
  4080  0A94  086E               	movf	_myMain^(0+128),w
  4081  0A95  3E05               	addlw	5
  4082  0A96  0086               	movwf	6
  4083  0A97  3001               	movlw	1	; select bank2/3
  4084  0A98  0087               	movwf	7
  4085  0A99  3F40               	moviw [0]fsr1
  4086  0A9A  3A64               	xorlw	100
  4087  0A9B  1D03               	skipz
  4088  0A9C  2A9F               	goto	u6315
  4089  0A9D  3F41               	moviw [1]fsr1
  4090  0A9E  3A00               	xorlw	0
  4091  0A9F                     u6315:	
  4092  0A9F  1D03               	skipz
  4093  0AA0  0008               	return
  4094                           
  4095                           ;main_B1.c: 166: {
  4096                           ;main_B1.c: 167: myMain->Count1 = 0;
  4097  0AA1  086E               	movf	_myMain^(0+128),w
  4098  0AA2  3E05               	addlw	5
  4099  0AA3  0086               	movwf	6
  4100  0AA4  3001               	movlw	1	; select bank2/3
  4101  0AA5  0087               	movwf	7
  4102  0AA6  3000               	movlw	0
  4103  0AA7  3FC0               	movwi [0]fsr1
  4104  0AA8  3FC1               	movwi [1]fsr1
  4105                           
  4106                           ;main_B1.c: 180: if (myMain->Flag) {
  4107  0AA9  086E               	movf	_myMain^(0+128),w
  4108  0AAA  0086               	movwf	6
  4109  0AAB  3001               	movlw	1	; select bank2/3
  4110  0AAC  0087               	movwf	7
  4111  0AAD  1D81               	btfss	1,3
  4112  0AAE  2AB5               	goto	l7038
  4113                           
  4114                           ;main_B1.c: 181: myMain->Flag = 0;
  4115  0AAF  086E               	movf	_myMain^(0+128),w
  4116  0AB0  0086               	movwf	6
  4117  0AB1  3001               	movlw	1	; select bank2/3
  4118  0AB2  0087               	movwf	7
  4119  0AB3  1181               	bcf	1,3
  4120                           
  4121                           ;main_B1.c: 190: } else {
  4122  0AB4  0008               	return
  4123  0AB5                     l7038:	
  4124                           
  4125                           ;main_B1.c: 191: myMain->Flag = 1;
  4126  0AB5  086E               	movf	_myMain^(0+128),w
  4127  0AB6  0086               	movwf	6
  4128  0AB7  3001               	movlw	1	; select bank2/3
  4129  0AB8  0087               	movwf	7
  4130  0AB9  1581               	bsf	1,3
  4131  0ABA  0008               	return
  4132  0ABB                     __end_of_my_Main:	
  4133                           
  4134                           	psect	text3
  4135  1E11                     __ptext3:	
  4136 ;; *************** function _myMain_Initialization *****************
  4137 ;; Defined at:
  4138 ;;		line 113 in file "../src/main_B1.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;		None               void
  4145 ;; Registers used:
  4146 ;;		wreg, fsr1l, fsr1h
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;Total ram usage:        1 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    5
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _myMain_Initialization
  4168  1E11                     _myMain_Initialization:	
  4169                           
  4170                           ;main_B1.c: 115: product = &_product;
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4174  1E11  30C5               	movlw	__product& (0+255)
  4175  1E12  0020               	movlb	0	; select bank0
  4176  1E13  00A0               	movwf	??_myMain_Initialization
  4177  1E14  0820               	movf	??_myMain_Initialization,w
  4178  1E15  00FD               	movwf	_product
  4179                           
  4180                           ;main_B1.c: 116: product->Data[20] = 209;
  4181  1E16  30D1               	movlw	209
  4182  1E17  00A0               	movwf	??_myMain_Initialization
  4183  1E18  087D               	movf	_product,w
  4184  1E19  3E14               	addlw	20
  4185  1E1A  0086               	movwf	6
  4186  1E1B  3001               	movlw	1	; select bank2/3
  4187  1E1C  0087               	movwf	7
  4188  1E1D  0820               	movf	??_myMain_Initialization,w
  4189  1E1E  0081               	movwf	1
  4190                           
  4191                           ;main_B1.c: 119: myMain = &_myMain;
  4192  1E1F  3020               	movlw	__myMain& (0+255)
  4193  1E20  00A0               	movwf	??_myMain_Initialization
  4194  1E21  0820               	movf	??_myMain_Initialization,w
  4195  1E22  0021               	movlb	1	; select bank1
  4196  1E23  00EE               	movwf	_myMain^(0+128)
  4197  1E24  0008               	return
  4198  1E25                     __end_of_myMain_Initialization:	
  4199                           
  4200                           	psect	text4
  4201  1443                     __ptext4:	
  4202 ;; *************** function _getPowerFault_AD *****************
  4203 ;; Defined at:
  4204 ;;		line 49 in file "../src/PowerFault_B1.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  channel         1    wreg     unsigned char 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  channel         1    8[BANK0 ] unsigned char 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;		None               void
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        5 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    6
  4225 ;; This function calls:
  4226 ;;		_getAD
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _getPowerFault_AD
  4234  1443                     _getPowerFault_AD:	
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4238                           ;getPowerFault_AD@channel stored from wreg
  4239  1443  0020               	movlb	0	; select bank0
  4240  1444  00A8               	movwf	getPowerFault_AD@channel
  4241                           
  4242                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4243  1445  0021               	movlb	1	; select bank1
  4244  1446  083E               	movf	_PF^(0+128),w
  4245  1447  0086               	movwf	6
  4246  1448  3001               	movlw	1	; select bank2/3
  4247  1449  0087               	movwf	7
  4248  144A  1D81               	btfss	1,3
  4249  144B  0008               	return
  4250                           
  4251                           ;PowerFault_B1.c: 52: {
  4252                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4253  144C  30F0               	movlw	240
  4254  144D  0020               	movlb	0	; select bank0
  4255  144E  00A4               	movwf	??_getPowerFault_AD
  4256  144F  0824               	movf	??_getPowerFault_AD,w
  4257  1450  00A0               	movwf	getAD@adcon1
  4258  1451  0828               	movf	getPowerFault_AD@channel,w
  4259  1452  319E  263A  3194   	fcall	_getAD
  4260  1455  0021               	movlb	1	; select bank1
  4261  1456  083E               	movf	_PF^(0+128),w
  4262  1457  3E06               	addlw	6
  4263  1458  0086               	movwf	6
  4264  1459  3001               	movlw	1	; select bank2/3
  4265  145A  0087               	movwf	7
  4266  145B  0020               	movlb	0	; select bank0
  4267  145C  0820               	movf	?_getAD,w
  4268  145D  3FC0               	movwi [0]fsr1
  4269  145E  0821               	movf	?_getAD+1,w
  4270  145F  3FC1               	movwi [1]fsr1
  4271                           
  4272                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4273  1460  0021               	movlb	1	; select bank1
  4274  1461  083E               	movf	_PF^(0+128),w
  4275  1462  3E06               	addlw	6
  4276  1463  0086               	movwf	6
  4277  1464  3001               	movlw	1	; select bank2/3
  4278  1465  0087               	movwf	7
  4279  1466  3F40               	moviw [0]fsr1
  4280  1467  0020               	movlb	0	; select bank0
  4281  1468  00A4               	movwf	??_getPowerFault_AD
  4282  1469  3F41               	moviw [1]fsr1
  4283  146A  00A5               	movwf	??_getPowerFault_AD+1
  4284  146B  0021               	movlb	1	; select bank1
  4285  146C  083E               	movf	_PF^(0+128),w
  4286  146D  3E04               	addlw	4
  4287  146E  0086               	movwf	6
  4288  146F  3001               	movlw	1	; select bank2/3
  4289  1470  0087               	movwf	7
  4290  1471  3F40               	moviw [0]fsr1
  4291  1472  0020               	movlb	0	; select bank0
  4292  1473  00A6               	movwf	??_getPowerFault_AD+2
  4293  1474  3F41               	moviw [1]fsr1
  4294  1475  00A7               	movwf	??_getPowerFault_AD+3
  4295  1476  0825               	movf	??_getPowerFault_AD+1,w
  4296  1477  0227               	subwf	??_getPowerFault_AD+3,w
  4297  1478  1D03               	skipz
  4298  1479  2C7C               	goto	u6285
  4299  147A  0824               	movf	??_getPowerFault_AD,w
  4300  147B  0226               	subwf	??_getPowerFault_AD+2,w
  4301  147C                     u6285:	
  4302  147C  1803               	skipnc
  4303  147D  0008               	return
  4304                           
  4305                           ;PowerFault_B1.c: 55: {
  4306                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4307  147E  0021               	movlb	1	; select bank1
  4308  147F  083E               	movf	_PF^(0+128),w
  4309  1480  3E06               	addlw	6
  4310  1481  0086               	movwf	6
  4311  1482  3001               	movlw	1	; select bank2/3
  4312  1483  0087               	movwf	7
  4313  1484  083E               	movf	_PF^(0+128),w
  4314  1485  3E04               	addlw	4
  4315  1486  0084               	movwf	4
  4316  1487  3001               	movlw	1	; select bank2/3
  4317  1488  0085               	movwf	5
  4318  1489  3F40               	moviw [0]fsr1
  4319  148A  3F80               	movwi [0]fsr0
  4320  148B  3F41               	moviw [1]fsr1
  4321  148C  3F81               	movwi [1]fsr0
  4322  148D  0008               	return
  4323  148E                     __end_of_getPowerFault_AD:	
  4324                           
  4325                           	psect	text5
  4326  1E3A                     __ptext5:	
  4327 ;; *************** function _getAD *****************
  4328 ;; Defined at:
  4329 ;;		line 342 in file "../src/MCU_B1.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  adcon0          1    wreg     unsigned char 
  4332 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  2    0[BANK0 ] int 
  4337 ;; Registers used:
  4338 ;;		wreg, status,2, status,0
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4344 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;Total ram usage:        4 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    5
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_getPowerFault_AD
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           
  4359                           ;psect for function _getAD
  4360  1E3A                     _getAD:	
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4364                           ;getAD@adcon0 stored from wreg
  4365  1E3A  0020               	movlb	0	; select bank0
  4366  1E3B  00A3               	movwf	getAD@adcon0
  4367                           
  4368                           ;MCU_B1.c: 343: ADCON0 = adcon0;
  4369  1E3C  0823               	movf	getAD@adcon0,w
  4370  1E3D  0021               	movlb	1	; select bank1
  4371  1E3E  009D               	movwf	29	;volatile
  4372                           
  4373                           ;MCU_B1.c: 344: ADCON1 = adcon1;
  4374  1E3F  0020               	movlb	0	; select bank0
  4375  1E40  0820               	movf	getAD@adcon1,w
  4376  1E41  0021               	movlb	1	; select bank1
  4377  1E42  009E               	movwf	30	;volatile
  4378                           
  4379                           ;MCU_B1.c: 345: GO_nDONE = 1;
  4380  1E43  149D               	bsf	29,1	;volatile
  4381  1E44                     l1287:	
  4382                           ;MCU_B1.c: 346: while (GO_nDONE == 1);
  4383                           
  4384  1E44  189D               	btfsc	29,1	;volatile
  4385  1E45  2E44               	goto	l1287
  4386                           
  4387                           ;MCU_B1.c: 347: return ((ADRESH*256)+ADRESL);
  4388  1E46  081C               	movf	28,w	;volatile
  4389  1E47  0020               	movlb	0	; select bank0
  4390  1E48  01A1               	clrf	?_getAD+1
  4391  1E49  07A1               	addwf	?_getAD+1,f
  4392  1E4A  0021               	movlb	1	; select bank1
  4393  1E4B  081B               	movf	27,w	;volatile
  4394  1E4C  0020               	movlb	0	; select bank0
  4395  1E4D  01A0               	clrf	?_getAD
  4396  1E4E  07A0               	addwf	?_getAD,f
  4397  1E4F  0008               	return
  4398  1E50                     __end_of_getAD:	
  4399                           
  4400                           	psect	text6
  4401  1C03                     __ptext6:	
  4402 ;; *************** function _Switch_Main *****************
  4403 ;; Defined at:
  4404 ;;		line 61 in file "../src/Switch_B1.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;		None
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;		None
  4409 ;; Return value:  Size  Location     Type
  4410 ;;		None               void
  4411 ;; Registers used:
  4412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4413 ;; Tracked objects:
  4414 ;;		On entry : 0/0
  4415 ;;		On exit  : 0/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;Total ram usage:        0 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:   11
  4425 ;; This function calls:
  4426 ;;		_setSw_Main
  4427 ;; This function is called by:
  4428 ;;		_main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _Switch_Main
  4434  1C03                     _Switch_Main:	
  4435                           
  4436                           ;Switch_B1.c: 63: setSw_Main(1);
  4437                           
  4438                           ;incstack = 0
  4439                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4440  1C03  3001               	movlw	1
  4441  1C04  3181  21FA         	fcall	_setSw_Main
  4442  1C06  0008               	return
  4443  1C07                     __end_of_Switch_Main:	
  4444                           
  4445                           	psect	text7
  4446  01FA                     __ptext7:	
  4447 ;; *************** function _setSw_Main *****************
  4448 ;; Defined at:
  4449 ;;		line 111 in file "../src/Switch_B1.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;  sw              1    wreg     unsigned char 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  sw              1   72[BANK0 ] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;Total ram usage:        4 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:   10
  4470 ;; This function calls:
  4471 ;;		_SwPointSelect
  4472 ;;		_Sw_DimmerAdjFunc
  4473 ;;		_Sw_DimmerOffFunc
  4474 ;;		_Sw_DimmerOnFunc
  4475 ;;		_setBuz
  4476 ;;		_setRF_Learn
  4477 ;; This function is called by:
  4478 ;;		_Switch_Main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _setSw_Main
  4484  01FA                     _setSw_Main:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4488                           ;setSw_Main@sw stored from wreg
  4489  01FA  0020               	movlb	0	; select bank0
  4490  01FB  00E8               	movwf	setSw_Main@sw
  4491                           
  4492                           ;Switch_B1.c: 112: SwPointSelect(sw);
  4493  01FC  0868               	movf	setSw_Main@sw,w
  4494  01FD  319C  248D  3181   	fcall	_SwPointSelect
  4495                           
  4496                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  4497  0200  087B               	movf	_Sw,w
  4498  0201  0086               	movwf	6
  4499  0202  3001               	movlw	1	; select bank2/3
  4500  0203  0087               	movwf	7
  4501  0204  1C01               	btfss	1,0
  4502  0205  0008               	return
  4503                           
  4504                           ;Switch_B1.c: 133: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  4505  0206  0020               	movlb	0	; select bank0
  4506  0207  01E7               	clrf	_setSw_Main$4803
  4507  0208  0AE7               	incf	_setSw_Main$4803,f
  4508  0209  1F0C               	btfss	12,6	;volatile
  4509  020A  1A0C               	btfsc	12,4	;volatile
  4510  020B  2A10               	goto	l6736
  4511  020C  1C0C               	btfss	12,0	;volatile
  4512  020D  188D               	btfsc	13,1	;volatile
  4513  020E  2A10               	goto	l6736
  4514  020F  01E7               	clrf	_setSw_Main$4803
  4515  0210                     l6736:	
  4516  0210  087B               	movf	_Sw,w
  4517  0211  0086               	movwf	6
  4518  0212  3001               	movlw	1	; select bank2/3
  4519  0213  0087               	movwf	7
  4520  0214  0867               	movf	_setSw_Main$4803,w
  4521  0215  1081               	bcf	1,1
  4522  0216  1D03               	skipz
  4523  0217  1481               	bsf	1,1
  4524                           
  4525                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  4526  0218  087B               	movf	_Sw,w
  4527  0219  0086               	movwf	6
  4528  021A  3001               	movlw	1	; select bank2/3
  4529  021B  0087               	movwf	7
  4530  021C  1C81               	btfss	1,1
  4531  021D  2AE9               	goto	l6786
  4532                           
  4533                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  4534  021E  087B               	movf	_Sw,w
  4535  021F  0086               	movwf	6
  4536  0220  3001               	movlw	1	; select bank2/3
  4537  0221  0087               	movwf	7
  4538  0222  1901               	btfsc	1,2
  4539  0223  2A45               	goto	l6752
  4540                           
  4541                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  4542  0224  3001               	movlw	1
  4543  0225  00E5               	movwf	??_setSw_Main
  4544  0226  087B               	movf	_Sw,w
  4545  0227  3E02               	addlw	2
  4546  0228  0086               	movwf	6
  4547  0229  3001               	movlw	1	; select bank2/3
  4548  022A  0087               	movwf	7
  4549  022B  0865               	movf	??_setSw_Main,w
  4550  022C  0781               	addwf	1,f
  4551                           
  4552                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  4553  022D  087B               	movf	_Sw,w
  4554  022E  3E02               	addlw	2
  4555  022F  0086               	movwf	6
  4556  0230  3001               	movlw	1	; select bank2/3
  4557  0231  0087               	movwf	7
  4558  0232  3005               	movlw	5
  4559  0233  0201               	subwf	1,w
  4560  0234  1C03               	skipc
  4561  0235  0008               	return
  4562                           
  4563                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  4564  0236  087B               	movf	_Sw,w
  4565  0237  3E02               	addlw	2
  4566  0238  0086               	movwf	6
  4567  0239  3001               	movlw	1	; select bank2/3
  4568  023A  0087               	movwf	7
  4569  023B  0181               	clrf	1
  4570                           
  4571                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  4572  023C  087B               	movf	_Sw,w
  4573  023D  0086               	movwf	6
  4574  023E  3001               	movlw	1	; select bank2/3
  4575  023F  0087               	movwf	7
  4576  0240  1501               	bsf	1,2
  4577                           
  4578                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  4579  0241  0868               	movf	setSw_Main@sw,w
  4580  0242  3195  257F         	fcall	_Sw_DimmerOnFunc
  4581                           
  4582                           ;Switch_B1.c: 145: }
  4583                           ;Switch_B1.c: 146: } else {
  4584  0244  0008               	return
  4585  0245                     l6752:	
  4586                           
  4587                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  4588  0245  087B               	movf	_Sw,w
  4589  0246  0086               	movwf	6
  4590  0247  3001               	movlw	1	; select bank2/3
  4591  0248  0087               	movwf	7
  4592  0249  1981               	btfsc	1,3
  4593  024A  2A72               	goto	l6762
  4594                           
  4595                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  4596  024B  087B               	movf	_Sw,w
  4597  024C  3E03               	addlw	3
  4598  024D  0086               	movwf	6
  4599  024E  3001               	movlw	1	; select bank2/3
  4600  024F  0087               	movwf	7
  4601  0250  3001               	movlw	1
  4602  0251  0781               	addwf	1,f
  4603  0252  3141               	addfsr 1,1
  4604  0253  1803               	skipnc
  4605  0254  0A81               	incf	1,f
  4606                           
  4607                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  4608  0255  087B               	movf	_Sw,w
  4609  0256  3E03               	addlw	3
  4610  0257  0086               	movwf	6
  4611  0258  3001               	movlw	1	; select bank2/3
  4612  0259  0087               	movwf	7
  4613  025A  3F40               	moviw [0]fsr1
  4614  025B  0020               	movlb	0	; select bank0
  4615  025C  00E5               	movwf	??_setSw_Main
  4616  025D  3F41               	moviw [1]fsr1
  4617  025E  00E6               	movwf	??_setSw_Main+1
  4618  025F  3000               	movlw	0
  4619  0260  0266               	subwf	??_setSw_Main+1,w
  4620  0261  3096               	movlw	150
  4621  0262  1903               	skipnz
  4622  0263  0265               	subwf	??_setSw_Main,w
  4623  0264  1C03               	skipc
  4624  0265  0008               	return
  4625                           
  4626                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  4627  0266  087B               	movf	_Sw,w
  4628  0267  3E03               	addlw	3
  4629  0268  0086               	movwf	6
  4630  0269  3001               	movlw	1	; select bank2/3
  4631  026A  0087               	movwf	7
  4632  026B  3000               	movlw	0
  4633  026C  3FC0               	movwi [0]fsr1
  4634  026D  3FC1               	movwi [1]fsr1
  4635                           
  4636                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  4637  026E  0868               	movf	setSw_Main@sw,w
  4638  026F  3191  21C6         	fcall	_Sw_DimmerAdjFunc
  4639                           
  4640                           ;Switch_B1.c: 156: }
  4641                           ;Switch_B1.c: 157: } else {
  4642  0271  0008               	return
  4643  0272                     l6762:	
  4644                           
  4645                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  4646  0272  087B               	movf	_Sw,w
  4647  0273  0086               	movwf	6
  4648  0274  3001               	movlw	1	; select bank2/3
  4649  0275  0087               	movwf	7
  4650  0276  1A01               	btfsc	1,4
  4651  0277  2AB6               	goto	l6776
  4652                           
  4653                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  4654  0278  087B               	movf	_Sw,w
  4655  0279  3E05               	addlw	5
  4656  027A  0086               	movwf	6
  4657  027B  3001               	movlw	1	; select bank2/3
  4658  027C  0087               	movwf	7
  4659  027D  3001               	movlw	1
  4660  027E  0781               	addwf	1,f
  4661  027F  3141               	addfsr 1,1
  4662  0280  1803               	skipnc
  4663  0281  0A81               	incf	1,f
  4664                           
  4665                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  4666  0282  087B               	movf	_Sw,w
  4667  0283  3E05               	addlw	5
  4668  0284  0086               	movwf	6
  4669  0285  3001               	movlw	1	; select bank2/3
  4670  0286  0087               	movwf	7
  4671  0287  3F40               	moviw [0]fsr1
  4672  0288  0020               	movlb	0	; select bank0
  4673  0289  00E5               	movwf	??_setSw_Main
  4674  028A  3F41               	moviw [1]fsr1
  4675  028B  00E6               	movwf	??_setSw_Main+1
  4676  028C  3000               	movlw	0
  4677  028D  0266               	subwf	??_setSw_Main+1,w
  4678  028E  3096               	movlw	150
  4679  028F  1903               	skipnz
  4680  0290  0265               	subwf	??_setSw_Main,w
  4681  0291  1C03               	skipc
  4682  0292  0008               	return
  4683                           
  4684                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  4685  0293  087B               	movf	_Sw,w
  4686  0294  3E05               	addlw	5
  4687  0295  0086               	movwf	6
  4688  0296  3001               	movlw	1	; select bank2/3
  4689  0297  0087               	movwf	7
  4690  0298  3000               	movlw	0
  4691  0299  3FC0               	movwi [0]fsr1
  4692  029A  3FC1               	movwi [1]fsr1
  4693                           
  4694                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  4695  029B  087B               	movf	_Sw,w
  4696  029C  0086               	movwf	6
  4697  029D  3001               	movlw	1	; select bank2/3
  4698  029E  0087               	movwf	7
  4699  029F  1601               	bsf	1,4
  4700                           
  4701                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  4702  02A0  01A2               	clrf	setRF_Learn@command
  4703  02A1  0AA2               	incf	setRF_Learn@command,f
  4704  02A2  3001               	movlw	1
  4705  02A3  319D  252E  3181   	fcall	_setRF_Learn
  4706                           
  4707                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  4708  02A6  0021               	movlb	1	; select bank1
  4709  02A7  086E               	movf	_myMain^(0+128),w
  4710  02A8  0086               	movwf	6
  4711  02A9  3001               	movlw	1	; select bank2/3
  4712  02AA  0087               	movwf	7
  4713  02AB  1F81               	btfss	1,7
  4714  02AC  0008               	return
  4715                           
  4716                           ;Switch_B1.c: 168: setBuz(2, 100);
  4717  02AD  3064               	movlw	100
  4718  02AE  0020               	movlb	0	; select bank0
  4719  02AF  00A9               	movwf	setBuz@time
  4720  02B0  3000               	movlw	0
  4721  02B1  00AA               	movwf	setBuz@time+1
  4722  02B2  3002               	movlw	2
  4723  02B3  318C  243C         	fcall	_setBuz
  4724                           
  4725                           ;Switch_B1.c: 169: }
  4726                           ;Switch_B1.c: 171: }
  4727                           ;Switch_B1.c: 172: } else {
  4728  02B5  0008               	return
  4729  02B6                     l6776:	
  4730                           
  4731                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  4732  02B6  087B               	movf	_Sw,w
  4733  02B7  0086               	movwf	6
  4734  02B8  3001               	movlw	1	; select bank2/3
  4735  02B9  0087               	movwf	7
  4736  02BA  1A81               	btfsc	1,5
  4737  02BB  0008               	return
  4738                           
  4739                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  4740  02BC  087B               	movf	_Sw,w
  4741  02BD  3E07               	addlw	7
  4742  02BE  0086               	movwf	6
  4743  02BF  3001               	movlw	1	; select bank2/3
  4744  02C0  0087               	movwf	7
  4745  02C1  3001               	movlw	1
  4746  02C2  0781               	addwf	1,f
  4747  02C3  3141               	addfsr 1,1
  4748  02C4  1803               	skipnc
  4749  02C5  0A81               	incf	1,f
  4750                           
  4751                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  4752  02C6  087B               	movf	_Sw,w
  4753  02C7  3E07               	addlw	7
  4754  02C8  0086               	movwf	6
  4755  02C9  3001               	movlw	1	; select bank2/3
  4756  02CA  0087               	movwf	7
  4757  02CB  3F40               	moviw [0]fsr1
  4758  02CC  0020               	movlb	0	; select bank0
  4759  02CD  00E5               	movwf	??_setSw_Main
  4760  02CE  3F41               	moviw [1]fsr1
  4761  02CF  00E6               	movwf	??_setSw_Main+1
  4762  02D0  3001               	movlw	1
  4763  02D1  0266               	subwf	??_setSw_Main+1,w
  4764  02D2  302C               	movlw	44
  4765  02D3  1903               	skipnz
  4766  02D4  0265               	subwf	??_setSw_Main,w
  4767  02D5  1C03               	skipc
  4768  02D6  0008               	return
  4769                           
  4770                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  4771  02D7  087B               	movf	_Sw,w
  4772  02D8  3E07               	addlw	7
  4773  02D9  0086               	movwf	6
  4774  02DA  3001               	movlw	1	; select bank2/3
  4775  02DB  0087               	movwf	7
  4776  02DC  3000               	movlw	0
  4777  02DD  3FC0               	movwi [0]fsr1
  4778  02DE  3FC1               	movwi [1]fsr1
  4779                           
  4780                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  4781  02DF  087B               	movf	_Sw,w
  4782  02E0  0086               	movwf	6
  4783  02E1  3001               	movlw	1	; select bank2/3
  4784  02E2  0087               	movwf	7
  4785  02E3  1681               	bsf	1,5
  4786                           
  4787                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  4788  02E4  01A2               	clrf	setRF_Learn@command
  4789  02E5  3001               	movlw	1
  4790  02E6  319D  252E         	fcall	_setRF_Learn
  4791                           
  4792                           ;Switch_B1.c: 183: }
  4793                           ;Switch_B1.c: 184: }
  4794                           ;Switch_B1.c: 185: }
  4795                           ;Switch_B1.c: 186: }
  4796                           ;Switch_B1.c: 187: }
  4797                           ;Switch_B1.c: 188: } else {
  4798  02E8  0008               	return
  4799  02E9                     l6786:	
  4800                           
  4801                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  4802  02E9  087B               	movf	_Sw,w
  4803  02EA  0086               	movwf	6
  4804  02EB  3001               	movlw	1	; select bank2/3
  4805  02EC  0087               	movwf	7
  4806  02ED  1D01               	btfss	1,2
  4807  02EE  0008               	return
  4808                           
  4809                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  4810  02EF  3001               	movlw	1
  4811  02F0  0020               	movlb	0	; select bank0
  4812  02F1  00E5               	movwf	??_setSw_Main
  4813  02F2  087B               	movf	_Sw,w
  4814  02F3  3E02               	addlw	2
  4815  02F4  0086               	movwf	6
  4816  02F5  3001               	movlw	1	; select bank2/3
  4817  02F6  0087               	movwf	7
  4818  02F7  0865               	movf	??_setSw_Main,w
  4819  02F8  0781               	addwf	1,f
  4820                           
  4821                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  4822  02F9  087B               	movf	_Sw,w
  4823  02FA  3E02               	addlw	2
  4824  02FB  0086               	movwf	6
  4825  02FC  3001               	movlw	1	; select bank2/3
  4826  02FD  0087               	movwf	7
  4827  02FE  3005               	movlw	5
  4828  02FF  0201               	subwf	1,w
  4829  0300  1C03               	skipc
  4830  0301  0008               	return
  4831                           
  4832                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  4833  0302  087B               	movf	_Sw,w
  4834  0303  3E02               	addlw	2
  4835  0304  0086               	movwf	6
  4836  0305  3001               	movlw	1	; select bank2/3
  4837  0306  0087               	movwf	7
  4838  0307  0181               	clrf	1
  4839                           
  4840                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  4841  0308  087B               	movf	_Sw,w
  4842  0309  0086               	movwf	6
  4843  030A  3001               	movlw	1	; select bank2/3
  4844  030B  0087               	movwf	7
  4845  030C  1101               	bcf	1,2
  4846                           
  4847                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  4848  030D  087B               	movf	_Sw,w
  4849  030E  3E03               	addlw	3
  4850  030F  0086               	movwf	6
  4851  0310  3001               	movlw	1	; select bank2/3
  4852  0311  0087               	movwf	7
  4853  0312  3000               	movlw	0
  4854  0313  3FC0               	movwi [0]fsr1
  4855  0314  3FC1               	movwi [1]fsr1
  4856                           
  4857                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  4858  0315  087B               	movf	_Sw,w
  4859  0316  0086               	movwf	6
  4860  0317  3001               	movlw	1	; select bank2/3
  4861  0318  0087               	movwf	7
  4862  0319  1181               	bcf	1,3
  4863                           
  4864                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  4865  031A  087B               	movf	_Sw,w
  4866  031B  3E05               	addlw	5
  4867  031C  0086               	movwf	6
  4868  031D  3001               	movlw	1	; select bank2/3
  4869  031E  0087               	movwf	7
  4870  031F  3000               	movlw	0
  4871  0320  3FC0               	movwi [0]fsr1
  4872  0321  3FC1               	movwi [1]fsr1
  4873                           
  4874                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  4875  0322  087B               	movf	_Sw,w
  4876  0323  0086               	movwf	6
  4877  0324  3001               	movlw	1	; select bank2/3
  4878  0325  0087               	movwf	7
  4879  0326  1201               	bcf	1,4
  4880                           
  4881                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  4882  0327  087B               	movf	_Sw,w
  4883  0328  3E07               	addlw	7
  4884  0329  0086               	movwf	6
  4885  032A  3001               	movlw	1	; select bank2/3
  4886  032B  0087               	movwf	7
  4887  032C  3000               	movlw	0
  4888  032D  3FC0               	movwi [0]fsr1
  4889  032E  3FC1               	movwi [1]fsr1
  4890                           
  4891                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  4892  032F  087B               	movf	_Sw,w
  4893  0330  0086               	movwf	6
  4894  0331  3001               	movlw	1	; select bank2/3
  4895  0332  0087               	movwf	7
  4896  0333  1281               	bcf	1,5
  4897                           
  4898                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  4899  0334  0868               	movf	setSw_Main@sw,w
  4900  0335  3189  21D6  3181   	fcall	_Sw_DimmerOffFunc
  4901                           
  4902                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  4903  0338  0020               	movlb	0	; select bank0
  4904  0339  01A2               	clrf	setRF_Learn@command
  4905  033A  3001               	movlw	1
  4906  033B  319D  252E         	fcall	_setRF_Learn
  4907  033D  0008               	return
  4908  033E                     __end_of_setSw_Main:	
  4909                           
  4910                           	psect	text8
  4911  1D2E                     __ptext8:	
  4912 ;; *************** function _setRF_Learn *****************
  4913 ;; Defined at:
  4914 ;;		line 33 in file "../src/RF_Control_B1.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  rf              1    wreg     unsigned char 
  4917 ;;  command         1    2[BANK0 ] unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  rf              1    3[BANK0 ] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4929 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;Total ram usage:        2 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    6
  4936 ;; This function calls:
  4937 ;;		_RfPointSelect
  4938 ;; This function is called by:
  4939 ;;		_setSw_Main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _setRF_Learn
  4945  1D2E                     _setRF_Learn:	
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4949                           ;setRF_Learn@rf stored from wreg
  4950  1D2E  0020               	movlb	0	; select bank0
  4951  1D2F  00A3               	movwf	setRF_Learn@rf
  4952                           
  4953                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  4954  1D30  0823               	movf	setRF_Learn@rf,w
  4955  1D31  319D  2520         	fcall	_RfPointSelect
  4956                           
  4957                           ;RF_Control_B1.c: 35: RF->Learn = command;
  4958  1D33  087A               	movf	_RF,w
  4959  1D34  0086               	movwf	6
  4960  1D35  0187               	clrf	7
  4961  1D36  0020               	movlb	0	; select bank0
  4962  1D37  0822               	movf	setRF_Learn@command,w
  4963  1D38  1301               	bcf	1,6
  4964  1D39  1D03               	skipz
  4965  1D3A  1701               	bsf	1,6
  4966  1D3B  0008               	return
  4967  1D3C                     __end_of_setRF_Learn:	
  4968                           
  4969                           	psect	text9
  4970  157F                     __ptext9:	
  4971 ;; *************** function _Sw_DimmerOnFunc *****************
  4972 ;; Defined at:
  4973 ;;		line 213 in file "../src/Switch_B1.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  sw              1    wreg     unsigned char 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  sw              1   67[BANK0 ] unsigned char 
  4978 ;;  Idle            1   66[BANK0 ] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;		None               void
  4981 ;; Registers used:
  4982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;Total ram usage:        2 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:    9
  4995 ;; This function calls:
  4996 ;;		_setBuz
  4997 ;;		_setDimmerLights_Switch
  4998 ;;		_setDimmerLights_Trigger
  4999 ;;		_setRFSW_Status
  5000 ;;		_setRF_DimmerLights
  5001 ;;		_setTxData
  5002 ;; This function is called by:
  5003 ;;		_setSw_Main
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _Sw_DimmerOnFunc
  5009  157F                     _Sw_DimmerOnFunc:	
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5013                           ;Sw_DimmerOnFunc@sw stored from wreg
  5014  157F  0020               	movlb	0	; select bank0
  5015  1580  00E3               	movwf	Sw_DimmerOnFunc@sw
  5016                           
  5017                           ;Switch_B1.c: 214: char Idle = 1;
  5018  1581  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5019  1582  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5020                           
  5021                           ;Switch_B1.c: 235: if (Idle == 1) {
  5022  1583  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5023  1584  3A01               	xorlw	1
  5024  1585  1D03               	skipz
  5025  1586  0008               	return
  5026                           
  5027                           ;Switch_B1.c: 236: Sw->Flag = 1;
  5028  1587  087B               	movf	_Sw,w
  5029  1588  0086               	movwf	6
  5030  1589  3001               	movlw	1	; select bank2/3
  5031  158A  0087               	movwf	7
  5032  158B  1781               	bsf	1,7
  5033                           
  5034                           ;Switch_B1.c: 237: setBuz(1, 100);
  5035  158C  3064               	movlw	100
  5036  158D  00A9               	movwf	setBuz@time
  5037  158E  3000               	movlw	0
  5038  158F  00AA               	movwf	setBuz@time+1
  5039  1590  3001               	movlw	1
  5040  1591  318C  243C  3195   	fcall	_setBuz
  5041                           
  5042                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  5043  1594  087B               	movf	_Sw,w
  5044  1595  0086               	movwf	6
  5045  1596  3001               	movlw	1	; select bank2/3
  5046  1597  0087               	movwf	7
  5047  1598  1B01               	btfsc	1,6
  5048  1599  2DC5               	goto	l6166
  5049                           
  5050                           ;Switch_B1.c: 239: Sw->Status = 1;
  5051  159A  087B               	movf	_Sw,w
  5052  159B  0086               	movwf	6
  5053  159C  3001               	movlw	1	; select bank2/3
  5054  159D  0087               	movwf	7
  5055  159E  1701               	bsf	1,6
  5056                           
  5057                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  5058  159F  0020               	movlb	0	; select bank0
  5059  15A0  01A2               	clrf	setRFSW_Status@command
  5060  15A1  0AA2               	incf	setRFSW_Status@command,f
  5061  15A2  0863               	movf	Sw_DimmerOnFunc@sw,w
  5062  15A3  319D  253C  3195   	fcall	_setRFSW_Status
  5063                           
  5064                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  5065  15A6  0020               	movlb	0	; select bank0
  5066  15A7  01A2               	clrf	setDimmerLights_Trigger@command
  5067  15A8  0AA2               	incf	setDimmerLights_Trigger@command,f
  5068  15A9  0863               	movf	Sw_DimmerOnFunc@sw,w
  5069  15AA  319D  2589  3195   	fcall	_setDimmerLights_Trigger
  5070                           
  5071                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  5072  15AD  0020               	movlb	0	; select bank0
  5073  15AE  01A2               	clrf	setDimmerLights_Switch@command
  5074  15AF  0AA2               	incf	setDimmerLights_Switch@command,f
  5075  15B0  0863               	movf	Sw_DimmerOnFunc@sw,w
  5076  15B1  319D  2579  3195   	fcall	_setDimmerLights_Switch
  5077                           
  5078                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  5079  15B4  087B               	movf	_Sw,w
  5080  15B5  0086               	movwf	6
  5081  15B6  3001               	movlw	1	; select bank2/3
  5082  15B7  0087               	movwf	7
  5083  15B8  3000               	movlw	0
  5084  15B9  1B01               	btfsc	1,6
  5085  15BA  3001               	movlw	1
  5086  15BB  0020               	movlb	0	; select bank0
  5087  15BC  00DD               	movwf	setRF_DimmerLights@on
  5088  15BD  0863               	movf	Sw_DimmerOnFunc@sw,w
  5089  15BE  3188  208E  3195   	fcall	_setRF_DimmerLights
  5090                           
  5091                           ;Switch_B1.c: 246: setTxData(1);
  5092  15C1  3001               	movlw	1
  5093  15C2  318D  2554         	fcall	_setTxData
  5094                           
  5095                           ;Switch_B1.c: 248: } else {
  5096  15C4  0008               	return
  5097  15C5                     l6166:	
  5098                           
  5099                           ;Switch_B1.c: 249: Sw->Status = 0;
  5100  15C5  087B               	movf	_Sw,w
  5101  15C6  0086               	movwf	6
  5102  15C7  3001               	movlw	1	; select bank2/3
  5103  15C8  0087               	movwf	7
  5104  15C9  1301               	bcf	1,6
  5105                           
  5106                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  5107  15CA  087B               	movf	_Sw,w
  5108  15CB  0086               	movwf	6
  5109  15CC  3001               	movlw	1	; select bank2/3
  5110  15CD  0087               	movwf	7
  5111  15CE  3000               	movlw	0
  5112  15CF  1B01               	btfsc	1,6
  5113  15D0  3001               	movlw	1
  5114  15D1  0020               	movlb	0	; select bank0
  5115  15D2  00A2               	movwf	setRFSW_Status@command
  5116  15D3  0863               	movf	Sw_DimmerOnFunc@sw,w
  5117  15D4  319D  253C         	fcall	_setRFSW_Status
  5118  15D6  0008               	return
  5119  15D7                     __end_of_Sw_DimmerOnFunc:	
  5120                           
  5121                           	psect	text10
  5122  09D6                     __ptext10:	
  5123 ;; *************** function _Sw_DimmerOffFunc *****************
  5124 ;; Defined at:
  5125 ;;		line 256 in file "../src/Switch_B1.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  sw              1    wreg     unsigned char 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  sw              1   68[BANK0 ] unsigned char 
  5130 ;; Return value:  Size  Location     Type
  5131 ;;		None               void
  5132 ;; Registers used:
  5133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5143 ;;Total ram usage:        3 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    9
  5146 ;; This function calls:
  5147 ;;		_setDelayOff_GO
  5148 ;;		_setDimmerLights_AdjGo
  5149 ;;		_setDimmerLights_Switch
  5150 ;;		_setDimmerLights_Trigger
  5151 ;;		_setDimmerLights_TriggerAdj
  5152 ;;		_setRF_DimmerLights
  5153 ;;		_setTxData
  5154 ;; This function is called by:
  5155 ;;		_setSw_Main
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           
  5160                           ;psect for function _Sw_DimmerOffFunc
  5161  09D6                     _Sw_DimmerOffFunc:	
  5162                           
  5163                           ;incstack = 0
  5164                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5165                           ;Sw_DimmerOffFunc@sw stored from wreg
  5166  09D6  0020               	movlb	0	; select bank0
  5167  09D7  00E4               	movwf	Sw_DimmerOffFunc@sw
  5168                           
  5169                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  5170  09D8  087B               	movf	_Sw,w
  5171  09D9  0086               	movwf	6
  5172  09DA  3001               	movlw	1	; select bank2/3
  5173  09DB  0087               	movwf	7
  5174  09DC  1F81               	btfss	1,7
  5175  09DD  0008               	return
  5176                           
  5177                           ;Switch_B1.c: 258: Sw->Flag = 0;
  5178  09DE  087B               	movf	_Sw,w
  5179  09DF  0086               	movwf	6
  5180  09E0  3001               	movlw	1	; select bank2/3
  5181  09E1  0087               	movwf	7
  5182  09E2  1381               	bcf	1,7
  5183                           
  5184                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  5185  09E3  087B               	movf	_Sw,w
  5186  09E4  0086               	movwf	6
  5187  09E5  3001               	movlw	1	; select bank2/3
  5188  09E6  0087               	movwf	7
  5189  09E7  1F01               	btfss	1,6
  5190  09E8  2A22               	goto	l6202
  5191                           
  5192                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  5193  09E9  0A7B               	incf	_Sw,w
  5194  09EA  0086               	movwf	6
  5195  09EB  3001               	movlw	1	; select bank2/3
  5196  09EC  0087               	movwf	7
  5197  09ED  1C01               	btfss	1,0
  5198  09EE  0008               	return
  5199                           
  5200                           ;Switch_B1.c: 261: Sw->Adj = 0;
  5201  09EF  0A7B               	incf	_Sw,w
  5202  09F0  0086               	movwf	6
  5203  09F1  3001               	movlw	1	; select bank2/3
  5204  09F2  0087               	movwf	7
  5205  09F3  1001               	bcf	1,0
  5206                           
  5207                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  5208  09F4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5209  09F5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5210  09F6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5211  09F7  319D  25B9  3189   	fcall	_setDimmerLights_TriggerAdj
  5212                           
  5213                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  5214  09FA  0020               	movlb	0	; select bank0
  5215  09FB  01A2               	clrf	setDimmerLights_AdjGo@command
  5216  09FC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5217  09FD  319D  25A9  3189   	fcall	_setDimmerLights_AdjGo
  5218                           
  5219                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  5220  0A00  0020               	movlb	0	; select bank0
  5221  0A01  0864               	movf	Sw_DimmerOffFunc@sw,w
  5222  0A02  3E1A               	addlw	26
  5223  0A03  077D               	addwf	_product,w
  5224  0A04  00E2               	movwf	??_Sw_DimmerOffFunc
  5225  0A05  0862               	movf	??_Sw_DimmerOffFunc,w
  5226  0A06  0086               	movwf	6
  5227  0A07  3001               	movlw	1	; select bank2/3
  5228  0A08  0087               	movwf	7
  5229  0A09  0801               	movf	1,w
  5230  0A0A  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5231  0A0B  087D               	movf	_product,w
  5232  0A0C  3E11               	addlw	17
  5233  0A0D  0086               	movwf	6
  5234  0A0E  3001               	movlw	1	; select bank2/3
  5235  0A0F  0087               	movwf	7
  5236  0A10  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5237  0A11  0081               	movwf	1
  5238                           
  5239                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  5240  0A12  087B               	movf	_Sw,w
  5241  0A13  0086               	movwf	6
  5242  0A14  3001               	movlw	1	; select bank2/3
  5243  0A15  0087               	movwf	7
  5244  0A16  3000               	movlw	0
  5245  0A17  1B01               	btfsc	1,6
  5246  0A18  3001               	movlw	1
  5247  0A19  00DD               	movwf	setRF_DimmerLights@on
  5248  0A1A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5249  0A1B  3188  208E  3189   	fcall	_setRF_DimmerLights
  5250                           
  5251                           ;Switch_B1.c: 267: setTxData(1);
  5252  0A1E  3001               	movlw	1
  5253  0A1F  318D  2554         	fcall	_setTxData
  5254                           
  5255                           ;Switch_B1.c: 269: }
  5256                           ;Switch_B1.c: 270: } else {
  5257  0A21  0008               	return
  5258  0A22                     l6202:	
  5259                           
  5260                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  5261  0A22  0020               	movlb	0	; select bank0
  5262  0A23  01A2               	clrf	setDimmerLights_Trigger@command
  5263  0A24  0AA2               	incf	setDimmerLights_Trigger@command,f
  5264  0A25  0864               	movf	Sw_DimmerOffFunc@sw,w
  5265  0A26  319D  2589  3189   	fcall	_setDimmerLights_Trigger
  5266                           
  5267                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  5268  0A29  0020               	movlb	0	; select bank0
  5269  0A2A  01A2               	clrf	setDimmerLights_Switch@command
  5270  0A2B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5271  0A2C  319D  2579  3189   	fcall	_setDimmerLights_Switch
  5272                           
  5273                           ;Switch_B1.c: 274: setDelayOff_GO(sw, 0, 0);
  5274  0A2F  0020               	movlb	0	; select bank0
  5275  0A30  01A3               	clrf	setDelayOff_GO@command
  5276  0A31  01A4               	clrf	setDelayOff_GO@value
  5277  0A32  0864               	movf	Sw_DimmerOffFunc@sw,w
  5278  0A33  3196  26E7  3189   	fcall	_setDelayOff_GO
  5279                           
  5280                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  5281  0A36  087B               	movf	_Sw,w
  5282  0A37  0086               	movwf	6
  5283  0A38  3001               	movlw	1	; select bank2/3
  5284  0A39  0087               	movwf	7
  5285  0A3A  3000               	movlw	0
  5286  0A3B  1B01               	btfsc	1,6
  5287  0A3C  3001               	movlw	1
  5288  0A3D  0020               	movlb	0	; select bank0
  5289  0A3E  00DD               	movwf	setRF_DimmerLights@on
  5290  0A3F  0864               	movf	Sw_DimmerOffFunc@sw,w
  5291  0A40  3188  208E  3189   	fcall	_setRF_DimmerLights
  5292                           
  5293                           ;Switch_B1.c: 276: setTxData(1);
  5294  0A43  3001               	movlw	1
  5295  0A44  318D  2554         	fcall	_setTxData
  5296  0A46  0008               	return
  5297  0A47                     __end_of_Sw_DimmerOffFunc:	
  5298                           
  5299                           	psect	text11
  5300  11C6                     __ptext11:	
  5301 ;; *************** function _Sw_DimmerAdjFunc *****************
  5302 ;; Defined at:
  5303 ;;		line 283 in file "../src/Switch_B1.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  sw              1    wreg     unsigned char 
  5306 ;; Auto vars:     Size  Location     Type
  5307 ;;  sw              1    5[BANK0 ] unsigned char 
  5308 ;;  Idle            1    4[BANK0 ] unsigned char 
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;Total ram usage:        2 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    7
  5325 ;; This function calls:
  5326 ;;		_setDimmerLights_AdjGo
  5327 ;;		_setDimmerLights_TriggerAdj
  5328 ;;		_setRFSW_Status
  5329 ;; This function is called by:
  5330 ;;		_setSw_Main
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           
  5335                           ;psect for function _Sw_DimmerAdjFunc
  5336  11C6                     _Sw_DimmerAdjFunc:	
  5337                           
  5338                           ;incstack = 0
  5339                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5340                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5341  11C6  0020               	movlb	0	; select bank0
  5342  11C7  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5343                           
  5344                           ;Switch_B1.c: 284: char Idle = 1;
  5345  11C8  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5346  11C9  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5347                           
  5348                           ;Switch_B1.c: 304: if (Idle == 1) {
  5349  11CA  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5350  11CB  3A01               	xorlw	1
  5351  11CC  1D03               	skipz
  5352  11CD  0008               	return
  5353                           
  5354                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  5355  11CE  087B               	movf	_Sw,w
  5356  11CF  0086               	movwf	6
  5357  11D0  3001               	movlw	1	; select bank2/3
  5358  11D1  0087               	movwf	7
  5359  11D2  1F81               	btfss	1,7
  5360  11D3  0008               	return
  5361                           
  5362                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  5363  11D4  087B               	movf	_Sw,w
  5364  11D5  0086               	movwf	6
  5365  11D6  3001               	movlw	1	; select bank2/3
  5366  11D7  0087               	movwf	7
  5367  11D8  1581               	bsf	1,3
  5368                           
  5369                           ;Switch_B1.c: 307: Sw->Adj = 1;
  5370  11D9  0A7B               	incf	_Sw,w
  5371  11DA  0086               	movwf	6
  5372  11DB  3001               	movlw	1	; select bank2/3
  5373  11DC  0087               	movwf	7
  5374  11DD  1401               	bsf	1,0
  5375                           
  5376                           ;Switch_B1.c: 308: Sw->Status = 1;
  5377  11DE  087B               	movf	_Sw,w
  5378  11DF  0086               	movwf	6
  5379  11E0  3001               	movlw	1	; select bank2/3
  5380  11E1  0087               	movwf	7
  5381  11E2  1701               	bsf	1,6
  5382                           
  5383                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  5384  11E3  01A2               	clrf	setRFSW_Status@command
  5385  11E4  0AA2               	incf	setRFSW_Status@command,f
  5386  11E5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5387  11E6  319D  253C  3191   	fcall	_setRFSW_Status
  5388                           
  5389                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  5390  11E9  0020               	movlb	0	; select bank0
  5391  11EA  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5392  11EB  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5393  11EC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5394  11ED  319D  25B9  3191   	fcall	_setDimmerLights_TriggerAdj
  5395                           
  5396                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  5397  11F0  0020               	movlb	0	; select bank0
  5398  11F1  01A2               	clrf	setDimmerLights_AdjGo@command
  5399  11F2  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5400  11F3  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5401  11F4  319D  25A9         	fcall	_setDimmerLights_AdjGo
  5402  11F6  0008               	return
  5403  11F7                     __end_of_Sw_DimmerAdjFunc:	
  5404                           
  5405                           	psect	text12
  5406  1DB9                     __ptext12:	
  5407 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5408 ;; Defined at:
  5409 ;;		line 711 in file "../src/Dimmer_B1.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;  lights          1    wreg     unsigned char 
  5412 ;;  command         1    2[BANK0 ] unsigned char 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  lights          1    3[BANK0 ] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;		None               void
  5417 ;; Registers used:
  5418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5424 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5428 ;;Total ram usage:        2 bytes
  5429 ;; Hardware stack levels used:    1
  5430 ;; Hardware stack levels required when called:    6
  5431 ;; This function calls:
  5432 ;;		_DimmerLightsPointSelect
  5433 ;; This function is called by:
  5434 ;;		_Sw_DimmerOffFunc
  5435 ;;		_Sw_DimmerAdjFunc
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           
  5440                           ;psect for function _setDimmerLights_TriggerAdj
  5441  1DB9                     _setDimmerLights_TriggerAdj:	
  5442                           
  5443                           ;incstack = 0
  5444                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5445                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5446  1DB9  0020               	movlb	0	; select bank0
  5447  1DBA  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5448                           
  5449                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  5450  1DBB  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5451  1DBC  319C  2482         	fcall	_DimmerLightsPointSelect
  5452                           
  5453                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  5454  1DBE  0878               	movf	_DimmerLights,w
  5455  1DBF  3E08               	addlw	8
  5456  1DC0  0086               	movwf	6
  5457  1DC1  3001               	movlw	1	; select bank2/3
  5458  1DC2  0087               	movwf	7
  5459  1DC3  0020               	movlb	0	; select bank0
  5460  1DC4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5461  1DC5  1201               	bcf	1,4
  5462  1DC6  1D03               	skipz
  5463  1DC7  1601               	bsf	1,4
  5464  1DC8  0008               	return
  5465  1DC9                     __end_of_setDimmerLights_TriggerAdj:	
  5466                           
  5467                           	psect	text13
  5468  1DA9                     __ptext13:	
  5469 ;; *************** function _setDimmerLights_AdjGo *****************
  5470 ;; Defined at:
  5471 ;;		line 699 in file "../src/Dimmer_B1.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  lights          1    wreg     unsigned char 
  5474 ;;  command         1    2[BANK0 ] unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  lights          1    3[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;		None               void
  5479 ;; Registers used:
  5480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        2 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    6
  5493 ;; This function calls:
  5494 ;;		_DimmerLightsPointSelect
  5495 ;; This function is called by:
  5496 ;;		_Sw_DimmerOffFunc
  5497 ;;		_Sw_DimmerAdjFunc
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           
  5502                           ;psect for function _setDimmerLights_AdjGo
  5503  1DA9                     _setDimmerLights_AdjGo:	
  5504                           
  5505                           ;incstack = 0
  5506                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5507                           ;setDimmerLights_AdjGo@lights stored from wreg
  5508  1DA9  0020               	movlb	0	; select bank0
  5509  1DAA  00A3               	movwf	setDimmerLights_AdjGo@lights
  5510                           
  5511                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  5512  1DAB  0823               	movf	setDimmerLights_AdjGo@lights,w
  5513  1DAC  319C  2482         	fcall	_DimmerLightsPointSelect
  5514                           
  5515                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  5516  1DAE  0878               	movf	_DimmerLights,w
  5517  1DAF  3E08               	addlw	8
  5518  1DB0  0086               	movwf	6
  5519  1DB1  3001               	movlw	1	; select bank2/3
  5520  1DB2  0087               	movwf	7
  5521  1DB3  0020               	movlb	0	; select bank0
  5522  1DB4  0822               	movf	setDimmerLights_AdjGo@command,w
  5523  1DB5  1181               	bcf	1,3
  5524  1DB6  1D03               	skipz
  5525  1DB7  1581               	bsf	1,3
  5526  1DB8  0008               	return
  5527  1DB9                     __end_of_setDimmerLights_AdjGo:	
  5528                           
  5529                           	psect	text14
  5530  1C44                     __ptext14:	
  5531 ;; *************** function _Switch_Initialization *****************
  5532 ;; Defined at:
  5533 ;;		line 37 in file "../src/Switch_B1.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;		None               void
  5540 ;; Registers used:
  5541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;Total ram usage:        0 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    8
  5554 ;; This function calls:
  5555 ;;		_TouchPower
  5556 ;;		_setSw_Initialization
  5557 ;; This function is called by:
  5558 ;;		_main
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           
  5563                           ;psect for function _Switch_Initialization
  5564  1C44                     _Switch_Initialization:	
  5565                           
  5566                           ;Switch_B1.c: 38: TouchPower();
  5567                           
  5568                           ;incstack = 0
  5569                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5570  1C44  319C  2407  319C   	fcall	_TouchPower
  5571                           
  5572                           ;Switch_B1.c: 40: WPUB1 = 0;
  5573  1C47  0024               	movlb	4	; select bank4
  5574  1C48  108D               	bcf	13,1	;volatile
  5575                           
  5576                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5577  1C49  3001               	movlw	1
  5578  1C4A  319D  2599         	fcall	_setSw_Initialization
  5579  1C4C  0008               	return
  5580  1C4D                     __end_of_Switch_Initialization:	
  5581                           
  5582                           	psect	text15
  5583  1D99                     __ptext15:	
  5584 ;; *************** function _setSw_Initialization *****************
  5585 ;; Defined at:
  5586 ;;		line 77 in file "../src/Switch_B1.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  sw              1    wreg     unsigned char 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  sw              1    4[BANK0 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;		None               void
  5593 ;; Registers used:
  5594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;Total ram usage:        1 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    7
  5607 ;; This function calls:
  5608 ;;		_setLED
  5609 ;; This function is called by:
  5610 ;;		_Switch_Initialization
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _setSw_Initialization
  5616  1D99                     _setSw_Initialization:	
  5617                           
  5618                           ;incstack = 0
  5619                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5620                           ;setSw_Initialization@sw stored from wreg
  5621  1D99  0020               	movlb	0	; select bank0
  5622  1D9A  00A4               	movwf	setSw_Initialization@sw
  5623                           
  5624                           ;Switch_B1.c: 78: setLED(sw, 1);
  5625  1D9B  01A2               	clrf	setLED@command
  5626  1D9C  0AA2               	incf	setLED@command,f
  5627  1D9D  0824               	movf	setSw_Initialization@sw,w
  5628  1D9E  3197  2744  319D   	fcall	_setLED
  5629                           
  5630                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  5631  1DA1  0020               	movlb	0	; select bank0
  5632  1DA2  01A2               	clrf	setLED@command
  5633  1DA3  0AA2               	incf	setLED@command,f
  5634  1DA4  0824               	movf	setSw_Initialization@sw,w
  5635  1DA5  3E01               	addlw	1
  5636  1DA6  3197  2744         	fcall	_setLED
  5637  1DA8  0008               	return
  5638  1DA9                     __end_of_setSw_Initialization:	
  5639                           
  5640                           	psect	text16
  5641  1C07                     __ptext16:	
  5642 ;; *************** function _TouchPower *****************
  5643 ;; Defined at:
  5644 ;;		line 10 in file "../src/Switch_B1.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;		None
  5647 ;; Auto vars:     Size  Location     Type
  5648 ;;		None
  5649 ;; Return value:  Size  Location     Type
  5650 ;;		None               void
  5651 ;; Registers used:
  5652 ;;		None
  5653 ;; Tracked objects:
  5654 ;;		On entry : 0/0
  5655 ;;		On exit  : 0/0
  5656 ;;		Unchanged: 0/0
  5657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;Total ram usage:        0 bytes
  5663 ;; Hardware stack levels used:    1
  5664 ;; Hardware stack levels required when called:    5
  5665 ;; This function calls:
  5666 ;;		Nothing
  5667 ;; This function is called by:
  5668 ;;		_Switch_Initialization
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           
  5673                           ;psect for function _TouchPower
  5674  1C07                     _TouchPower:	
  5675  1C07                     l2316:	
  5676                           ;Switch_B1.c: 11: while (RC5 == 0)
  5677                           
  5678                           ;incstack = 0
  5679                           ; Regs used in _TouchPower: []
  5680                           
  5681  1C07  0020               	movlb	0	; select bank0
  5682  1C08  1A8E               	btfsc	14,5	;volatile
  5683  1C09  0008               	return
  5684                           
  5685                           ;Switch_B1.c: 12: RC5 = 1;
  5686  1C0A  168E               	bsf	14,5	;volatile
  5687  1C0B  2C07               	goto	l2316
  5688  1C0C                     __end_of_TouchPower:	
  5689                           
  5690                           	psect	text17
  5691  1BFF                     __ptext17:	
  5692 ;; *************** function _RF_Main *****************
  5693 ;; Defined at:
  5694 ;;		line 26 in file "../src/RF_Control_B1.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:   14
  5715 ;; This function calls:
  5716 ;;		_setRF_Main
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           
  5723                           ;psect for function _RF_Main
  5724  1BFF                     _RF_Main:	
  5725                           
  5726                           ;RF_Control_B1.c: 28: setRF_Main(1);
  5727                           
  5728                           ;incstack = 0
  5729                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5730  1BFF  3001               	movlw	1
  5731  1C00  3186  2632         	fcall	_setRF_Main
  5732  1C02  0008               	return
  5733  1C03                     __end_of_RF_Main:	
  5734                           
  5735                           	psect	text18
  5736  0632                     __ptext18:	
  5737 ;; *************** function _setRF_Main *****************
  5738 ;; Defined at:
  5739 ;;		line 64 in file "../src/RF_Control_B1.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;  rf              1    wreg     unsigned char 
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;  rf              1   74[BANK0 ] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;		None               void
  5746 ;; Registers used:
  5747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;Total ram usage:        3 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:   13
  5760 ;; This function calls:
  5761 ;;		_CC2500_RxData
  5762 ;;		_CC2500_TxData
  5763 ;;		_CC2500_WriteCommand
  5764 ;;		_RF_RxDisable
  5765 ;;		_RfPointSelect
  5766 ;;		_getRxData
  5767 ;; This function is called by:
  5768 ;;		_RF_Main
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _setRF_Main
  5774  0632                     _setRF_Main:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5778                           ;setRF_Main@rf stored from wreg
  5779  0632  0020               	movlb	0	; select bank0
  5780  0633  00EA               	movwf	setRF_Main@rf
  5781                           
  5782                           ;RF_Control_B1.c: 65: RfPointSelect(rf);
  5783  0634  086A               	movf	setRF_Main@rf,w
  5784  0635  319D  2520  3186   	fcall	_RfPointSelect
  5785                           
  5786                           ;RF_Control_B1.c: 66: if (RF->Enable == 1) {
  5787  0638  087A               	movf	_RF,w
  5788  0639  0086               	movwf	6
  5789  063A  0187               	clrf	7
  5790  063B  1C01               	btfss	1,0
  5791  063C  0008               	return
  5792                           
  5793                           ;RF_Control_B1.c: 69: if (Buz->GO == 0) {
  5794  063D  0021               	movlb	1	; select bank1
  5795  063E  0837               	movf	_Buz^(0+128),w
  5796  063F  0086               	movwf	6
  5797  0640  0187               	clrf	7
  5798  0641  1881               	btfsc	1,1
  5799  0642  0008               	return
  5800                           
  5801                           ;RF_Control_B1.c: 79: RF->Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5802  0643  0020               	movlb	0	; select bank0
  5803  0644  01EB               	clrf	_setRF_Main$3967
  5804  0645  0AEB               	incf	_setRF_Main$3967,f
  5805  0646  1F0C               	btfss	12,6	;volatile
  5806  0647  1A0C               	btfsc	12,4	;volatile
  5807  0648  2E4D               	goto	l6640
  5808  0649  1C0C               	btfss	12,0	;volatile
  5809  064A  188D               	btfsc	13,1	;volatile
  5810  064B  2E4D               	goto	l6640
  5811  064C  01EB               	clrf	_setRF_Main$3967
  5812  064D                     l6640:	
  5813  064D  087A               	movf	_RF,w
  5814  064E  0086               	movwf	6
  5815  064F  0187               	clrf	7
  5816  0650  086B               	movf	_setRF_Main$3967,w
  5817  0651  1381               	bcf	1,7
  5818  0652  1D03               	skipz
  5819  0653  1781               	bsf	1,7
  5820                           
  5821                           ;RF_Control_B1.c: 81: if (RF->Key == 1 && RF->Learn == 0) {
  5822  0654  087A               	movf	_RF,w
  5823  0655  0086               	movwf	6
  5824  0656  0187               	clrf	7
  5825  0657  1F81               	btfss	1,7
  5826  0658  2E66               	goto	l6650
  5827  0659  087A               	movf	_RF,w
  5828  065A  0086               	movwf	6
  5829  065B  0187               	clrf	7
  5830  065C  1B01               	btfsc	1,6
  5831  065D  2E66               	goto	l6650
  5832                           
  5833                           ;RF_Control_B1.c: 82: RF->Run = 1;
  5834  065E  0A7A               	incf	_RF,w
  5835  065F  0086               	movwf	6
  5836  0660  0187               	clrf	7
  5837  0661  1481               	bsf	1,1
  5838                           
  5839                           ;RF_Control_B1.c: 83: RF_RxDisable(1);
  5840  0662  3001               	movlw	1
  5841  0663  319F  277C         	fcall	_RF_RxDisable
  5842                           
  5843                           ;RF_Control_B1.c: 84: } else {
  5844  0665  0008               	return
  5845  0666                     l6650:	
  5846                           
  5847                           ;RF_Control_B1.c: 85: if (RF->Run == 1 && RF->Learn == 0) {
  5848  0666  0A7A               	incf	_RF,w
  5849  0667  0086               	movwf	6
  5850  0668  0187               	clrf	7
  5851  0669  1C81               	btfss	1,1
  5852  066A  2E8B               	goto	l6662
  5853  066B  087A               	movf	_RF,w
  5854  066C  0086               	movwf	6
  5855  066D  0187               	clrf	7
  5856  066E  1B01               	btfsc	1,6
  5857  066F  2E8B               	goto	l6662
  5858                           
  5859                           ;RF_Control_B1.c: 86: RF->Count++;
  5860  0670  3001               	movlw	1
  5861  0671  0020               	movlb	0	; select bank0
  5862  0672  00E9               	movwf	??_setRF_Main
  5863  0673  087A               	movf	_RF,w
  5864  0674  3E03               	addlw	3
  5865  0675  0086               	movwf	6
  5866  0676  0187               	clrf	7
  5867  0677  0869               	movf	??_setRF_Main,w
  5868  0678  0781               	addwf	1,f
  5869                           
  5870                           ;RF_Control_B1.c: 87: if (RF->Count == 5) {
  5871  0679  087A               	movf	_RF,w
  5872  067A  3E03               	addlw	3
  5873  067B  0086               	movwf	6
  5874  067C  0187               	clrf	7
  5875  067D  0801               	movf	1,w
  5876  067E  3A05               	xorlw	5
  5877  067F  1D03               	skipz
  5878  0680  0008               	return
  5879                           
  5880                           ;RF_Control_B1.c: 88: RF->Count = 0;
  5881  0681  087A               	movf	_RF,w
  5882  0682  3E03               	addlw	3
  5883  0683  0086               	movwf	6
  5884  0684  0187               	clrf	7
  5885  0685  0181               	clrf	1
  5886                           
  5887                           ;RF_Control_B1.c: 89: RF->Run = 0;
  5888  0686  0A7A               	incf	_RF,w
  5889  0687  0086               	movwf	6
  5890  0688  0187               	clrf	7
  5891  0689  1081               	bcf	1,1
  5892                           
  5893                           ;RF_Control_B1.c: 90: }
  5894                           ;RF_Control_B1.c: 91: } else {
  5895  068A  0008               	return
  5896  068B                     l6662:	
  5897                           
  5898                           ;RF_Control_B1.c: 92: RF->Count = 0;
  5899  068B  087A               	movf	_RF,w
  5900  068C  3E03               	addlw	3
  5901  068D  0086               	movwf	6
  5902  068E  0187               	clrf	7
  5903  068F  0181               	clrf	1
  5904                           
  5905                           ;RF_Control_B1.c: 93: RF->Run = 0;
  5906  0690  0A7A               	incf	_RF,w
  5907  0691  0086               	movwf	6
  5908  0692  0187               	clrf	7
  5909  0693  1081               	bcf	1,1
  5910                           
  5911                           ;RF_Control_B1.c: 95: if (RF->ReceiveGO == 1) {
  5912  0694  087A               	movf	_RF,w
  5913  0695  0086               	movwf	6
  5914  0696  0187               	clrf	7
  5915  0697  1C81               	btfss	1,1
  5916  0698  2EA8               	goto	l6676
  5917                           
  5918                           ;RF_Control_B1.c: 96: RF->ReceiveGO = 0;
  5919  0699  087A               	movf	_RF,w
  5920  069A  0086               	movwf	6
  5921  069B  0187               	clrf	7
  5922  069C  1081               	bcf	1,1
  5923                           
  5924                           ;RF_Control_B1.c: 97: CC2500_RxData();
  5925  069D  3187  2707  3186   	fcall	_CC2500_RxData
  5926                           
  5927                           ;RF_Control_B1.c: 104: getRxData(1);
  5928  06A0  3001               	movlw	1
  5929  06A1  3194  248E         	fcall	_getRxData
  5930                           
  5931                           ;RF_Control_B1.c: 107: RF->Run = 1;
  5932  06A3  0A7A               	incf	_RF,w
  5933  06A4  0086               	movwf	6
  5934  06A5  0187               	clrf	7
  5935  06A6  1481               	bsf	1,1
  5936                           
  5937                           ;RF_Control_B1.c: 108: } else {
  5938  06A7  0008               	return
  5939  06A8                     l6676:	
  5940                           
  5941                           ;RF_Control_B1.c: 109: if (RF->Learn == 0) {
  5942  06A8  087A               	movf	_RF,w
  5943  06A9  0086               	movwf	6
  5944  06AA  0187               	clrf	7
  5945  06AB  1B01               	btfsc	1,6
  5946  06AC  2EEA               	goto	l6704
  5947                           
  5948                           ;RF_Control_B1.c: 110: if (RF->TransceiveGO == 1) {
  5949  06AD  087A               	movf	_RF,w
  5950  06AE  0086               	movwf	6
  5951  06AF  0187               	clrf	7
  5952  06B0  1D01               	btfss	1,2
  5953  06B1  2ECD               	goto	l6690
  5954                           
  5955                           ;RF_Control_B1.c: 111: RF->TransceiveGO = 0;
  5956  06B2  087A               	movf	_RF,w
  5957  06B3  0086               	movwf	6
  5958  06B4  0187               	clrf	7
  5959  06B5  1101               	bcf	1,2
  5960                           
  5961                           ;RF_Control_B1.c: 112: RF->RxStatus = 0;
  5962  06B6  087A               	movf	_RF,w
  5963  06B7  0086               	movwf	6
  5964  06B8  0187               	clrf	7
  5965  06B9  1181               	bcf	1,3
  5966                           
  5967                           ;RF_Control_B1.c: 113: RF->ReceiveGO = 0;
  5968  06BA  087A               	movf	_RF,w
  5969  06BB  0086               	movwf	6
  5970  06BC  0187               	clrf	7
  5971  06BD  1081               	bcf	1,1
  5972                           
  5973                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x36);
  5974  06BE  3036               	movlw	54
  5975  06BF  319D  2569  3186   	fcall	_CC2500_WriteCommand
  5976                           
  5977                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x3B);
  5978  06C2  303B               	movlw	59
  5979  06C3  319D  2569  3186   	fcall	_CC2500_WriteCommand
  5980                           
  5981                           ;RF_Control_B1.c: 117: CC2500_TxData();
  5982  06C6  3192  22E8         	fcall	_CC2500_TxData
  5983                           
  5984                           ;RF_Control_B1.c: 118: RF->Run = 1;
  5985  06C8  0A7A               	incf	_RF,w
  5986  06C9  0086               	movwf	6
  5987  06CA  0187               	clrf	7
  5988  06CB  1481               	bsf	1,1
  5989                           
  5990                           ;RF_Control_B1.c: 119: } else {
  5991  06CC  0008               	return
  5992  06CD                     l6690:	
  5993                           
  5994                           ;RF_Control_B1.c: 121: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  5995  06CD  087A               	movf	_RF,w
  5996  06CE  0086               	movwf	6
  5997  06CF  0187               	clrf	7
  5998  06D0  1981               	btfsc	1,3
  5999  06D1  0008               	return
  6000  06D2  087A               	movf	_RF,w
  6001  06D3  0086               	movwf	6
  6002  06D4  0187               	clrf	7
  6003  06D5  1881               	btfsc	1,1
  6004  06D6  0008               	return
  6005                           
  6006                           ;RF_Control_B1.c: 122: RF->RxStatus = 1;
  6007  06D7  087A               	movf	_RF,w
  6008  06D8  0086               	movwf	6
  6009  06D9  0187               	clrf	7
  6010  06DA  1581               	bsf	1,3
  6011                           
  6012                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6013  06DB  3036               	movlw	54
  6014  06DC  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6015                           
  6016                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6017  06DF  303A               	movlw	58
  6018  06E0  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6019                           
  6020                           ;RF_Control_B1.c: 125: CC2500_WriteCommand(0x34);
  6021  06E3  3034               	movlw	52
  6022  06E4  319D  2569         	fcall	_CC2500_WriteCommand
  6023                           
  6024                           ;RF_Control_B1.c: 127: RB5 = RB5 == 1 ? 0 : 1;
  6025  06E6  3020               	movlw	32
  6026  06E7  0020               	movlb	0	; select bank0
  6027  06E8  068D               	xorwf	13,f
  6028                           
  6029                           ;RF_Control_B1.c: 128: }
  6030                           ;RF_Control_B1.c: 131: }
  6031                           ;RF_Control_B1.c: 132: } else {
  6032  06E9  0008               	return
  6033  06EA                     l6704:	
  6034                           
  6035                           ;RF_Control_B1.c: 134: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6036  06EA  087A               	movf	_RF,w
  6037  06EB  0086               	movwf	6
  6038  06EC  0187               	clrf	7
  6039  06ED  1981               	btfsc	1,3
  6040  06EE  0008               	return
  6041  06EF  087A               	movf	_RF,w
  6042  06F0  0086               	movwf	6
  6043  06F1  0187               	clrf	7
  6044  06F2  1881               	btfsc	1,1
  6045  06F3  0008               	return
  6046                           
  6047                           ;RF_Control_B1.c: 135: RF->RxStatus = 1;
  6048  06F4  087A               	movf	_RF,w
  6049  06F5  0086               	movwf	6
  6050  06F6  0187               	clrf	7
  6051  06F7  1581               	bsf	1,3
  6052                           
  6053                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6054  06F8  3036               	movlw	54
  6055  06F9  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6056                           
  6057                           ;RF_Control_B1.c: 137: CC2500_WriteCommand(0x3A);
  6058  06FC  303A               	movlw	58
  6059  06FD  319D  2569  3186   	fcall	_CC2500_WriteCommand
  6060                           
  6061                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x34);
  6062  0700  3034               	movlw	52
  6063  0701  319D  2569         	fcall	_CC2500_WriteCommand
  6064                           
  6065                           ;RF_Control_B1.c: 140: RB5 = RB5 == 1 ? 0 : 1;
  6066  0703  3020               	movlw	32
  6067  0704  0020               	movlb	0	; select bank0
  6068  0705  068D               	xorwf	13,f
  6069  0706  0008               	return
  6070  0707                     __end_of_setRF_Main:	
  6071                           
  6072                           	psect	text19
  6073  148E                     __ptext19:	
  6074 ;; *************** function _getRxData *****************
  6075 ;; Defined at:
  6076 ;;		line 228 in file "../src/RF_Control_B1.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  rf              1    wreg     unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  rf              1   72[BANK0 ] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;		None               void
  6083 ;; Registers used:
  6084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;Total ram usage:        1 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:   12
  6097 ;; This function calls:
  6098 ;;		_RfPointSelect
  6099 ;;		_setControl_Lights_Table
  6100 ;;		_setLog_Code
  6101 ;; This function is called by:
  6102 ;;		_setRF_Main
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _getRxData
  6108  148E                     _getRxData:	
  6109                           
  6110                           ;incstack = 0
  6111                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6112                           ;getRxData@rf stored from wreg
  6113  148E  0020               	movlb	0	; select bank0
  6114  148F  00E8               	movwf	getRxData@rf
  6115                           
  6116                           ;RF_Control_B1.c: 229: RfPointSelect(rf);
  6117  1490  0868               	movf	getRxData@rf,w
  6118  1491  319D  2520  3194   	fcall	_RfPointSelect
  6119                           
  6120                           ;RF_Control_B1.c: 230: if (RF->Learn) {
  6121  1494  087A               	movf	_RF,w
  6122  1495  0086               	movwf	6
  6123  1496  0187               	clrf	7
  6124  1497  1F01               	btfss	1,6
  6125  1498  2CA5               	goto	l6114
  6126                           
  6127                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6128  1499  0021               	movlb	1	; select bank1
  6129  149A  08A0               	movf	_RF_Data^(0+128),f
  6130  149B  1D03               	skipz
  6131  149C  0008               	return
  6132  149D  0821               	movf	(_RF_Data^(0+128)+1),w
  6133  149E  3A64               	xorlw	100
  6134  149F  1D03               	skipz
  6135  14A0  0008               	return
  6136                           
  6137                           ;RF_Control_B1.c: 232: {
  6138                           ;RF_Control_B1.c: 233: setLog_Code(1);
  6139  14A1  3001               	movlw	1
  6140  14A2  3193  23FC         	fcall	_setLog_Code
  6141                           
  6142                           ;RF_Control_B1.c: 234: }
  6143                           ;RF_Control_B1.c: 235: } else {
  6144  14A4  0008               	return
  6145  14A5                     l6114:	
  6146                           
  6147                           ;RF_Control_B1.c: 236: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6148  14A5  0021               	movlb	1	; select bank1
  6149  14A6  08A0               	movf	_RF_Data^(0+128),f
  6150  14A7  1D03               	skipz
  6151  14A8  0008               	return
  6152  14A9  0821               	movf	(_RF_Data^(0+128)+1),w
  6153  14AA  3A02               	xorlw	2
  6154  14AB  1D03               	skipz
  6155  14AC  0008               	return
  6156                           
  6157                           ;RF_Control_B1.c: 237: {
  6158                           ;RF_Control_B1.c: 238: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6159  14AD  082C               	movf	(_RF_Data^(0+128)+12),w
  6160  14AE  3AFF               	xorlw	255
  6161  14AF  1D03               	skipz
  6162  14B0  2CBB               	goto	l6126
  6163  14B1  082D               	movf	(_RF_Data^(0+128)+13),w
  6164  14B2  3AFF               	xorlw	255
  6165  14B3  1D03               	skipz
  6166  14B4  2CBB               	goto	l6126
  6167  14B5  082E               	movf	(_RF_Data^(0+128)+14),w
  6168  14B6  3AFF               	xorlw	255
  6169  14B7  1D03               	skipz
  6170  14B8  2CBB               	goto	l6126
  6171                           
  6172                           ;RF_Control_B1.c: 239: __nop();
  6173  14B9  0000               	nop
  6174                           
  6175                           ;RF_Control_B1.c: 240: } else {
  6176  14BA  0008               	return
  6177  14BB                     l6126:	
  6178                           
  6179                           ;RF_Control_B1.c: 241: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6180  14BB  087D               	movf	_product,w
  6181  14BC  3E0C               	addlw	12
  6182  14BD  0086               	movwf	6
  6183  14BE  3001               	movlw	1	; select bank2/3
  6184  14BF  0087               	movwf	7
  6185  14C0  0021               	movlb	1	; select bank1
  6186  14C1  082C               	movf	(_RF_Data^(0+128)+12),w
  6187  14C2  0601               	xorwf	1,w
  6188  14C3  1D03               	skipz
  6189  14C4  0008               	return
  6190  14C5  087D               	movf	_product,w
  6191  14C6  3E0D               	addlw	13
  6192  14C7  0086               	movwf	6
  6193  14C8  3001               	movlw	1	; select bank2/3
  6194  14C9  0087               	movwf	7
  6195  14CA  082D               	movf	(_RF_Data^(0+128)+13),w
  6196  14CB  0601               	xorwf	1,w
  6197  14CC  1D03               	skipz
  6198  14CD  0008               	return
  6199  14CE  087D               	movf	_product,w
  6200  14CF  3E0E               	addlw	14
  6201  14D0  0086               	movwf	6
  6202  14D1  3001               	movlw	1	; select bank2/3
  6203  14D2  0087               	movwf	7
  6204  14D3  082E               	movf	(_RF_Data^(0+128)+14),w
  6205  14D4  0601               	xorwf	1,w
  6206  14D5  1D03               	skipz
  6207  14D6  0008               	return
  6208                           
  6209                           ;RF_Control_B1.c: 242: setControl_Lights_Table(1);
  6210  14D7  3001               	movlw	1
  6211  14D8  3189  2168         	fcall	_setControl_Lights_Table
  6212                           
  6213                           ;RF_Control_B1.c: 249: {
  6214                           ;RF_Control_B1.c: 250: ;
  6215                           
  6216                           ;RF_Control_B1.c: 246: {
  6217                           ;RF_Control_B1.c: 247: ;
  6218                           ;RF_Control_B1.c: 248: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6219                           
  6220                           ;RF_Control_B1.c: 243: }
  6221                           ;RF_Control_B1.c: 244: }
  6222                           ;RF_Control_B1.c: 245: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6223  14DA  0008               	return
  6224  14DB                     __end_of_getRxData:	
  6225                           
  6226                           	psect	text20
  6227  13FC                     __ptext20:	
  6228 ;; *************** function _setLog_Code *****************
  6229 ;; Defined at:
  6230 ;;		line 260 in file "../src/RF_Control_B1.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;  rf              1    wreg     unsigned char 
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  rf              1   14[BANK0 ] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;		None               void
  6237 ;; Registers used:
  6238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;Total ram usage:        2 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    7
  6251 ;; This function calls:
  6252 ;;		_RfPointSelect
  6253 ;;		_setBuz
  6254 ;; This function is called by:
  6255 ;;		_getRxData
  6256 ;; This function uses a non-reentrant model
  6257 ;;
  6258                           
  6259                           
  6260                           ;psect for function _setLog_Code
  6261  13FC                     _setLog_Code:	
  6262                           
  6263                           ;incstack = 0
  6264                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6265                           ;setLog_Code@rf stored from wreg
  6266  13FC  0020               	movlb	0	; select bank0
  6267  13FD  00AE               	movwf	setLog_Code@rf
  6268                           
  6269                           ;RF_Control_B1.c: 261: RfPointSelect(rf);
  6270  13FE  082E               	movf	setLog_Code@rf,w
  6271  13FF  319D  2520  3193   	fcall	_RfPointSelect
  6272                           
  6273                           ;RF_Control_B1.c: 262: product->Data[12]=RF_Data[12];
  6274  1402  0021               	movlb	1	; select bank1
  6275  1403  082C               	movf	(_RF_Data^(0+128)+12),w
  6276  1404  0020               	movlb	0	; select bank0
  6277  1405  00AD               	movwf	??_setLog_Code
  6278  1406  087D               	movf	_product,w
  6279  1407  3E0C               	addlw	12
  6280  1408  0086               	movwf	6
  6281  1409  3001               	movlw	1	; select bank2/3
  6282  140A  0087               	movwf	7
  6283  140B  082D               	movf	??_setLog_Code,w
  6284  140C  0081               	movwf	1
  6285                           
  6286                           ;RF_Control_B1.c: 263: product->Data[13]=RF_Data[13];
  6287  140D  0021               	movlb	1	; select bank1
  6288  140E  082D               	movf	(_RF_Data^(0+128)+13),w
  6289  140F  0020               	movlb	0	; select bank0
  6290  1410  00AD               	movwf	??_setLog_Code
  6291  1411  087D               	movf	_product,w
  6292  1412  3E0D               	addlw	13
  6293  1413  0086               	movwf	6
  6294  1414  3001               	movlw	1	; select bank2/3
  6295  1415  0087               	movwf	7
  6296  1416  082D               	movf	??_setLog_Code,w
  6297  1417  0081               	movwf	1
  6298                           
  6299                           ;RF_Control_B1.c: 264: product->Data[14]=RF_Data[14];
  6300  1418  0021               	movlb	1	; select bank1
  6301  1419  082E               	movf	(_RF_Data^(0+128)+14),w
  6302  141A  0020               	movlb	0	; select bank0
  6303  141B  00AD               	movwf	??_setLog_Code
  6304  141C  087D               	movf	_product,w
  6305  141D  3E0E               	addlw	14
  6306  141E  0086               	movwf	6
  6307  141F  3001               	movlw	1	; select bank2/3
  6308  1420  0087               	movwf	7
  6309  1421  082D               	movf	??_setLog_Code,w
  6310  1422  0081               	movwf	1
  6311                           
  6312                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  6313  1423  3064               	movlw	100
  6314  1424  00A9               	movwf	setBuz@time
  6315  1425  3000               	movlw	0
  6316  1426  00AA               	movwf	setBuz@time+1
  6317  1427  3001               	movlw	1
  6318  1428  318C  243C  3193   	fcall	_setBuz
  6319                           
  6320                           ;RF_Control_B1.c: 266: RF->Learn = 0;
  6321  142B  087A               	movf	_RF,w
  6322  142C  0086               	movwf	6
  6323  142D  0187               	clrf	7
  6324  142E  1301               	bcf	1,6
  6325                           
  6326                           ;RF_Control_B1.c: 267: if (myMain->First) {
  6327  142F  0021               	movlb	1	; select bank1
  6328  1430  086E               	movf	_myMain^(0+128),w
  6329  1431  0086               	movwf	6
  6330  1432  3001               	movlw	1	; select bank2/3
  6331  1433  0087               	movwf	7
  6332  1434  1F81               	btfss	1,7
  6333  1435  2C3C               	goto	l1963
  6334                           
  6335                           ;RF_Control_B1.c: 268: Memory->LoopSave=1;
  6336  1436  086F               	movf	_Memory^(0+128),w
  6337  1437  3E24               	addlw	36
  6338  1438  0086               	movwf	6
  6339  1439  3001               	movlw	1	; select bank2/3
  6340  143A  0087               	movwf	7
  6341  143B  1501               	bsf	1,2
  6342  143C                     l1963:	
  6343                           
  6344                           ;RF_Control_B1.c: 269: }
  6345                           ;RF_Control_B1.c: 270: Memory->Modify=1;
  6346  143C  086F               	movf	_Memory^(0+128),w
  6347  143D  3E24               	addlw	36
  6348  143E  0086               	movwf	6
  6349  143F  3001               	movlw	1	; select bank2/3
  6350  1440  0087               	movwf	7
  6351  1441  1401               	bsf	1,0
  6352  1442  0008               	return
  6353  1443                     __end_of_setLog_Code:	
  6354                           
  6355                           	psect	text21
  6356  0968                     __ptext21:	
  6357 ;; *************** function _setControl_Lights_Table *****************
  6358 ;; Defined at:
  6359 ;;		line 274 in file "../src/RF_Control_B1.c"
  6360 ;; Parameters:    Size  Location     Type
  6361 ;;  rf              1    wreg     unsigned char 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  rf              1   71[BANK0 ] unsigned char 
  6364 ;; Return value:  Size  Location     Type
  6365 ;;		None               void
  6366 ;; Registers used:
  6367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6368 ;; Tracked objects:
  6369 ;;		On entry : 0/0
  6370 ;;		On exit  : 0/0
  6371 ;;		Unchanged: 0/0
  6372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;Total ram usage:        1 bytes
  6378 ;; Hardware stack levels used:    1
  6379 ;; Hardware stack levels required when called:   11
  6380 ;; This function calls:
  6381 ;;		_RfPointSelect
  6382 ;;		_setBuz
  6383 ;;		_setDimmerLights
  6384 ;;		_setRFSW_AdjControl
  6385 ;;		_setRFSW_Control
  6386 ;;		_setRFSW_Status
  6387 ;;		_setSw_Status
  6388 ;;		_setTxData
  6389 ;; This function is called by:
  6390 ;;		_getRxData
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           
  6395                           ;psect for function _setControl_Lights_Table
  6396  0968                     _setControl_Lights_Table:	
  6397                           
  6398                           ;incstack = 0
  6399                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6400                           ;setControl_Lights_Table@rf stored from wreg
  6401  0968  0020               	movlb	0	; select bank0
  6402  0969  00E7               	movwf	setControl_Lights_Table@rf
  6403                           
  6404                           ;RF_Control_B1.c: 275: RfPointSelect(rf);
  6405  096A  0867               	movf	setControl_Lights_Table@rf,w
  6406  096B  319D  2520  3189   	fcall	_RfPointSelect
  6407                           
  6408                           ;RF_Control_B1.c: 276: if (RF_Data[15] == 0x00) {
  6409  096E  0021               	movlb	1	; select bank1
  6410  096F  08AF               	movf	(_RF_Data^(0+128)+15),f
  6411  0970  1D03               	skipz
  6412  0971  29A9               	goto	l5868
  6413                           
  6414                           ;RF_Control_B1.c: 278: setDimmerLights(1, 0);
  6415  0972  0020               	movlb	0	; select bank0
  6416  0973  01A4               	clrf	setDimmerLights@status
  6417  0974  3001               	movlw	1
  6418  0975  318B  2334  3189   	fcall	_setDimmerLights
  6419                           
  6420                           ;RF_Control_B1.c: 279: setRFSW_Status(1, 0);
  6421  0978  0020               	movlb	0	; select bank0
  6422  0979  01A2               	clrf	setRFSW_Status@command
  6423  097A  3001               	movlw	1
  6424  097B  319D  253C  3189   	fcall	_setRFSW_Status
  6425                           
  6426                           ;RF_Control_B1.c: 280: setSw_Status(1, 0);
  6427  097E  0020               	movlb	0	; select bank0
  6428  097F  01A2               	clrf	setSw_Status@command
  6429  0980  3001               	movlw	1
  6430  0981  319D  254B  3189   	fcall	_setSw_Status
  6431                           
  6432                           ;RF_Control_B1.c: 293: product->Data[9]=0;
  6433  0984  087D               	movf	_product,w
  6434  0985  3E09               	addlw	9
  6435  0986  0086               	movwf	6
  6436  0987  3001               	movlw	1	; select bank2/3
  6437  0988  0087               	movwf	7
  6438  0989  0181               	clrf	1
  6439                           
  6440                           ;RF_Control_B1.c: 294: product->Data[11]=0;
  6441  098A  087D               	movf	_product,w
  6442  098B  3E0B               	addlw	11
  6443  098C  0086               	movwf	6
  6444  098D  3001               	movlw	1	; select bank2/3
  6445  098E  0087               	movwf	7
  6446  098F  0181               	clrf	1
  6447                           
  6448                           ;RF_Control_B1.c: 295: product->Data[15]=0;
  6449  0990  087D               	movf	_product,w
  6450  0991  3E0F               	addlw	15
  6451  0992  0086               	movwf	6
  6452  0993  3001               	movlw	1	; select bank2/3
  6453  0994  0087               	movwf	7
  6454  0995  0181               	clrf	1
  6455                           
  6456                           ;RF_Control_B1.c: 296: product->Data[17]=0;
  6457  0996  087D               	movf	_product,w
  6458  0997  3E11               	addlw	17
  6459  0998  0086               	movwf	6
  6460  0999  3001               	movlw	1	; select bank2/3
  6461  099A  0087               	movwf	7
  6462  099B  0181               	clrf	1
  6463                           
  6464                           ;RF_Control_B1.c: 297: setBuz(1, 100);
  6465  099C  3064               	movlw	100
  6466  099D  0020               	movlb	0	; select bank0
  6467  099E  00A9               	movwf	setBuz@time
  6468  099F  3000               	movlw	0
  6469  09A0  00AA               	movwf	setBuz@time+1
  6470  09A1  3001               	movlw	1
  6471  09A2  318C  243C  3189   	fcall	_setBuz
  6472                           
  6473                           ;RF_Control_B1.c: 298: setTxData(1);
  6474  09A5  3001               	movlw	1
  6475  09A6  318D  2554         	fcall	_setTxData
  6476                           
  6477                           ;RF_Control_B1.c: 299: } else if (RF_Data[15] == 0x20) {
  6478  09A8  0008               	return
  6479  09A9                     l5868:	
  6480  09A9  0021               	movlb	1	; select bank1
  6481  09AA  082F               	movf	(_RF_Data^(0+128)+15),w
  6482  09AB  3A20               	xorlw	32
  6483  09AC  1D03               	skipz
  6484  09AD  29C4               	goto	l5874
  6485                           
  6486                           ;RF_Control_B1.c: 300: product->Data[9]=0;
  6487  09AE  087D               	movf	_product,w
  6488  09AF  3E09               	addlw	9
  6489  09B0  0086               	movwf	6
  6490  09B1  3001               	movlw	1	; select bank2/3
  6491  09B2  0087               	movwf	7
  6492  09B3  0181               	clrf	1
  6493                           
  6494                           ;RF_Control_B1.c: 301: product->Data[11]=0;
  6495  09B4  087D               	movf	_product,w
  6496  09B5  3E0B               	addlw	11
  6497  09B6  0086               	movwf	6
  6498  09B7  3001               	movlw	1	; select bank2/3
  6499  09B8  0087               	movwf	7
  6500  09B9  0181               	clrf	1
  6501                           
  6502                           ;RF_Control_B1.c: 302: product->Data[17]=0;
  6503  09BA  087D               	movf	_product,w
  6504  09BB  3E11               	addlw	17
  6505  09BC  0086               	movwf	6
  6506  09BD  3001               	movlw	1	; select bank2/3
  6507  09BE  0087               	movwf	7
  6508  09BF  0181               	clrf	1
  6509                           
  6510                           ;RF_Control_B1.c: 303: setTxData(1);
  6511  09C0  3001               	movlw	1
  6512  09C1  318D  2554         	fcall	_setTxData
  6513                           
  6514                           ;RF_Control_B1.c: 304: }
  6515  09C3  0008               	return
  6516  09C4                     l5874:	
  6517                           
  6518                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x01) {
  6519  09C4  0021               	movlb	1	; select bank1
  6520  09C5  082F               	movf	(_RF_Data^(0+128)+15),w
  6521  09C6  3A01               	xorlw	1
  6522  09C7  1D03               	skipz
  6523  09C8  29CD               	goto	l5878
  6524                           
  6525                           ;RF_Control_B1.c: 307: setRFSW_Control(1);
  6526  09C9  3001               	movlw	1
  6527  09CA  318C  24C4         	fcall	_setRFSW_Control
  6528                           
  6529                           ;RF_Control_B1.c: 308: }
  6530  09CC  0008               	return
  6531  09CD                     l5878:	
  6532                           
  6533                           ;RF_Control_B1.c: 310: else if (RF_Data[15] == 0x11) {
  6534  09CD  0021               	movlb	1	; select bank1
  6535  09CE  082F               	movf	(_RF_Data^(0+128)+15),w
  6536  09CF  3A11               	xorlw	17
  6537  09D0  1D03               	skipz
  6538  09D1  0008               	return
  6539                           
  6540                           ;RF_Control_B1.c: 311: setRFSW_AdjControl(1);
  6541  09D2  3001               	movlw	1
  6542  09D3  3192  22A8         	fcall	_setRFSW_AdjControl
  6543  09D5  0008               	return
  6544  09D6                     __end_of_setControl_Lights_Table:	
  6545                           
  6546                           	psect	text22
  6547  0CC4                     __ptext22:	
  6548 ;; *************** function _setRFSW_Control *****************
  6549 ;; Defined at:
  6550 ;;		line 359 in file "../src/RF_Control_B1.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  sw              1    wreg     unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  sw              1   67[BANK0 ] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;Total ram usage:        2 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    9
  6571 ;; This function calls:
  6572 ;;		_RfSWPointSelect
  6573 ;;		_setBuz
  6574 ;;		_setDelayOff_GO
  6575 ;;		_setDimmerLights_Switch
  6576 ;;		_setDimmerLights_Trigger
  6577 ;;		_setRF_DimmerLights
  6578 ;;		_setSw_Status
  6579 ;;		_setTxData
  6580 ;; This function is called by:
  6581 ;;		_setControl_Lights_Table
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           
  6586                           ;psect for function _setRFSW_Control
  6587  0CC4                     _setRFSW_Control:	
  6588                           
  6589                           ;incstack = 0
  6590                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6591                           ;setRFSW_Control@sw stored from wreg
  6592  0CC4  0020               	movlb	0	; select bank0
  6593  0CC5  00E3               	movwf	setRFSW_Control@sw
  6594                           
  6595                           ;RF_Control_B1.c: 360: RfSWPointSelect(sw);
  6596  0CC6  0863               	movf	setRFSW_Control@sw,w
  6597  0CC7  319C  24BC  318C   	fcall	_RfSWPointSelect
  6598                           
  6599                           ;RF_Control_B1.c: 361: if (!RFSW->Status) {
  6600  0CCA  0021               	movlb	1	; select bank1
  6601  0CCB  083F               	movf	_RFSW^(0+128),w
  6602  0CCC  0086               	movwf	6
  6603  0CCD  0187               	clrf	7
  6604  0CCE  1801               	btfsc	1,0
  6605  0CCF  2D05               	goto	l5728
  6606                           
  6607                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  6608  0CD0  0830               	movf	(_RF_Data^(0+128)+16),w
  6609  0CD1  3A80               	xorlw	128
  6610  0CD2  1D03               	skipz
  6611  0CD3  2CE1               	goto	l5718
  6612                           
  6613                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  6614  0CD4  0020               	movlb	0	; select bank0
  6615  0CD5  01A3               	clrf	setDelayOff_GO@command
  6616  0CD6  0AA3               	incf	setDelayOff_GO@command,f
  6617  0CD7  0021               	movlb	1	; select bank1
  6618  0CD8  0831               	movf	(_RF_Data^(0+128)+17),w
  6619  0CD9  0020               	movlb	0	; select bank0
  6620  0CDA  00E2               	movwf	??_setRFSW_Control
  6621  0CDB  0862               	movf	??_setRFSW_Control,w
  6622  0CDC  00A4               	movwf	setDelayOff_GO@value
  6623  0CDD  0863               	movf	setRFSW_Control@sw,w
  6624  0CDE  3196  26E7  318C   	fcall	_setDelayOff_GO
  6625  0CE1                     l5718:	
  6626                           
  6627                           ;RF_Control_B1.c: 364: }
  6628                           ;RF_Control_B1.c: 365: RFSW->Status = 1;
  6629  0CE1  0021               	movlb	1	; select bank1
  6630  0CE2  083F               	movf	_RFSW^(0+128),w
  6631  0CE3  0086               	movwf	6
  6632  0CE4  0187               	clrf	7
  6633  0CE5  1401               	bsf	1,0
  6634                           
  6635                           ;RF_Control_B1.c: 366: setSw_Status(sw, 1);
  6636  0CE6  0020               	movlb	0	; select bank0
  6637  0CE7  01A2               	clrf	setSw_Status@command
  6638  0CE8  0AA2               	incf	setSw_Status@command,f
  6639  0CE9  0863               	movf	setRFSW_Control@sw,w
  6640  0CEA  319D  254B  318C   	fcall	_setSw_Status
  6641                           
  6642                           ;RF_Control_B1.c: 368: setDimmerLights_Trigger(sw, 1);
  6643  0CED  0020               	movlb	0	; select bank0
  6644  0CEE  01A2               	clrf	setDimmerLights_Trigger@command
  6645  0CEF  0AA2               	incf	setDimmerLights_Trigger@command,f
  6646  0CF0  0863               	movf	setRFSW_Control@sw,w
  6647  0CF1  319D  2589  318C   	fcall	_setDimmerLights_Trigger
  6648                           
  6649                           ;RF_Control_B1.c: 369: setDimmerLights_Switch(sw, 1);
  6650  0CF4  0020               	movlb	0	; select bank0
  6651  0CF5  01A2               	clrf	setDimmerLights_Switch@command
  6652  0CF6  0AA2               	incf	setDimmerLights_Switch@command,f
  6653  0CF7  0863               	movf	setRFSW_Control@sw,w
  6654  0CF8  319D  2579  318C   	fcall	_setDimmerLights_Switch
  6655                           
  6656                           ;RF_Control_B1.c: 371: setRF_DimmerLights(sw, RFSW->Status);
  6657  0CFB  0021               	movlb	1	; select bank1
  6658  0CFC  083F               	movf	_RFSW^(0+128),w
  6659  0CFD  0086               	movwf	6
  6660  0CFE  0187               	clrf	7
  6661  0CFF  3000               	movlw	0
  6662  0D00  1801               	btfsc	1,0
  6663  0D01  3001               	movlw	1
  6664  0D02  0020               	movlb	0	; select bank0
  6665  0D03  00DD               	movwf	setRF_DimmerLights@on
  6666  0D04  2D43               	goto	L1
  6667  0D05                     l5728:	
  6668                           ;RF_Control_B1.c: 372: } else {
  6669                           
  6670                           
  6671                           ;RF_Control_B1.c: 373: if (RF_Data[16] == 0x80) {
  6672  0D05  0021               	movlb	1	; select bank1
  6673  0D06  0830               	movf	(_RF_Data^(0+128)+16),w
  6674  0D07  3A80               	xorlw	128
  6675  0D08  1D03               	skipz
  6676  0D09  2D1B               	goto	l5734
  6677                           
  6678                           ;RF_Control_B1.c: 374: setDelayOff_GO(sw, 1, RF_Data[17]);
  6679  0D0A  0020               	movlb	0	; select bank0
  6680  0D0B  01A3               	clrf	setDelayOff_GO@command
  6681  0D0C  0AA3               	incf	setDelayOff_GO@command,f
  6682  0D0D  0021               	movlb	1	; select bank1
  6683  0D0E  0831               	movf	(_RF_Data^(0+128)+17),w
  6684  0D0F  0020               	movlb	0	; select bank0
  6685  0D10  00E2               	movwf	??_setRFSW_Control
  6686  0D11  0862               	movf	??_setRFSW_Control,w
  6687  0D12  00A4               	movwf	setDelayOff_GO@value
  6688  0D13  0863               	movf	setRFSW_Control@sw,w
  6689  0D14  3196  26E7  318C   	fcall	_setDelayOff_GO
  6690                           
  6691                           ;RF_Control_B1.c: 375: setRF_DimmerLights(sw, 1);
  6692  0D17  0020               	movlb	0	; select bank0
  6693  0D18  01DD               	clrf	setRF_DimmerLights@on
  6694  0D19  0ADD               	incf	setRF_DimmerLights@on,f
  6695  0D1A  2D43               	goto	L1
  6696  0D1B                     l5734:	
  6697                           ;RF_Control_B1.c: 376: } else {
  6698                           
  6699                           
  6700                           ;RF_Control_B1.c: 377: RFSW->Status = 0;
  6701  0D1B  0021               	movlb	1	; select bank1
  6702  0D1C  083F               	movf	_RFSW^(0+128),w
  6703  0D1D  0086               	movwf	6
  6704  0D1E  0187               	clrf	7
  6705  0D1F  1001               	bcf	1,0
  6706                           
  6707                           ;RF_Control_B1.c: 378: setSw_Status(sw, 0);
  6708  0D20  0020               	movlb	0	; select bank0
  6709  0D21  01A2               	clrf	setSw_Status@command
  6710  0D22  0863               	movf	setRFSW_Control@sw,w
  6711  0D23  319D  254B  318C   	fcall	_setSw_Status
  6712                           
  6713                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw, 1);
  6714  0D26  0020               	movlb	0	; select bank0
  6715  0D27  01A2               	clrf	setDimmerLights_Trigger@command
  6716  0D28  0AA2               	incf	setDimmerLights_Trigger@command,f
  6717  0D29  0863               	movf	setRFSW_Control@sw,w
  6718  0D2A  319D  2589  318C   	fcall	_setDimmerLights_Trigger
  6719                           
  6720                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw, RFSW->Status);
  6721  0D2D  0021               	movlb	1	; select bank1
  6722  0D2E  083F               	movf	_RFSW^(0+128),w
  6723  0D2F  0086               	movwf	6
  6724  0D30  0187               	clrf	7
  6725  0D31  3000               	movlw	0
  6726  0D32  1801               	btfsc	1,0
  6727  0D33  3001               	movlw	1
  6728  0D34  0020               	movlb	0	; select bank0
  6729  0D35  00A2               	movwf	setDimmerLights_Switch@command
  6730  0D36  0863               	movf	setRFSW_Control@sw,w
  6731  0D37  319D  2579  318C   	fcall	_setDimmerLights_Switch
  6732                           
  6733                           ;RF_Control_B1.c: 383: setDelayOff_GO(sw, 0, 0);
  6734  0D3A  0020               	movlb	0	; select bank0
  6735  0D3B  01A3               	clrf	setDelayOff_GO@command
  6736  0D3C  01A4               	clrf	setDelayOff_GO@value
  6737  0D3D  0863               	movf	setRFSW_Control@sw,w
  6738  0D3E  3196  26E7  318C   	fcall	_setDelayOff_GO
  6739                           
  6740                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw, 0);
  6741  0D41  0020               	movlb	0	; select bank0
  6742  0D42  01DD               	clrf	setRF_DimmerLights@on
  6743  0D43                     L1:	
  6744  0D43  0863               	movf	setRFSW_Control@sw,w
  6745  0D44  3188  208E  318C   	fcall	_setRF_DimmerLights
  6746                           
  6747                           ;RF_Control_B1.c: 385: }
  6748                           ;RF_Control_B1.c: 386: }
  6749                           ;RF_Control_B1.c: 387: setBuz(1, 100);
  6750  0D47  3064               	movlw	100
  6751  0D48  0020               	movlb	0	; select bank0
  6752  0D49  00A9               	movwf	setBuz@time
  6753  0D4A  3000               	movlw	0
  6754  0D4B  00AA               	movwf	setBuz@time+1
  6755  0D4C  3001               	movlw	1
  6756  0D4D  318C  243C  318C   	fcall	_setBuz
  6757                           
  6758                           ;RF_Control_B1.c: 388: setTxData(1);
  6759  0D50  3001               	movlw	1
  6760  0D51  318D  2554         	fcall	_setTxData
  6761  0D53  0008               	return
  6762  0D54                     __end_of_setRFSW_Control:	
  6763                           
  6764                           	psect	text23
  6765  16E7                     __ptext23:	
  6766 ;; *************** function _setDelayOff_GO *****************
  6767 ;; Defined at:
  6768 ;;		line 85 in file "../src/DelayOff_B1.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  sw              1    wreg     unsigned char 
  6771 ;;  command         1    3[BANK0 ] unsigned char 
  6772 ;;  value           1    4[BANK0 ] unsigned char 
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  sw              1    7[BANK0 ] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;		None               void
  6777 ;; Registers used:
  6778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6784 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;Total ram usage:        5 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    6
  6791 ;; This function calls:
  6792 ;;		_DelayOffPointSelect
  6793 ;;		_DelayTimejudge
  6794 ;; This function is called by:
  6795 ;;		_setRFSW_Control
  6796 ;;		_Sw_DimmerOffFunc
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _setDelayOff_GO
  6802  16E7                     _setDelayOff_GO:	
  6803                           
  6804                           ;incstack = 0
  6805                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6806                           ;setDelayOff_GO@sw stored from wreg
  6807  16E7  0020               	movlb	0	; select bank0
  6808  16E8  00A7               	movwf	setDelayOff_GO@sw
  6809                           
  6810                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6811  16E9  0827               	movf	setDelayOff_GO@sw,w
  6812  16EA  319C  24B0  3196   	fcall	_DelayOffPointSelect
  6813                           
  6814                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6815  16ED  0021               	movlb	1	; select bank1
  6816  16EE  0839               	movf	_DelayOff^(0+128),w
  6817  16EF  0086               	movwf	6
  6818  16F0  0187               	clrf	7
  6819  16F1  1C01               	btfss	1,0
  6820  16F2  0008               	return
  6821                           
  6822                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6823  16F3  0839               	movf	_DelayOff^(0+128),w
  6824  16F4  0086               	movwf	6
  6825  16F5  0187               	clrf	7
  6826  16F6  0020               	movlb	0	; select bank0
  6827  16F7  0823               	movf	setDelayOff_GO@command,w
  6828  16F8  1081               	bcf	1,1
  6829  16F9  1D03               	skipz
  6830  16FA  1481               	bsf	1,1
  6831                           
  6832                           ;DelayOff_B1.c: 89: if (command == 1) {
  6833  16FB  0823               	movf	setDelayOff_GO@command,w
  6834  16FC  3A01               	xorlw	1
  6835  16FD  1D03               	skipz
  6836  16FE  2F2A               	goto	l5544
  6837                           
  6838                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6839  16FF  0824               	movf	setDelayOff_GO@value,w
  6840  1700  3191  213B  3196   	fcall	_DelayTimejudge
  6841  1703  0020               	movlb	0	; select bank0
  6842  1704  00A5               	movwf	??_setDelayOff_GO
  6843  1705  0021               	movlb	1	; select bank1
  6844  1706  0A39               	incf	_DelayOff^(0+128),w
  6845  1707  0086               	movwf	6
  6846  1708  0187               	clrf	7
  6847  1709  0020               	movlb	0	; select bank0
  6848  170A  0825               	movf	??_setDelayOff_GO,w
  6849  170B  0081               	movwf	1
  6850                           
  6851                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6852  170C  300F               	movlw	15
  6853  170D  0524               	andwf	setDelayOff_GO@value,w
  6854  170E  00A5               	movwf	??_setDelayOff_GO
  6855  170F  0825               	movf	??_setDelayOff_GO,w
  6856  1710  3A05               	xorlw	5
  6857  1711  1903               	skipnz
  6858  1712  2F17               	goto	l5538
  6859  1713  0824               	movf	setDelayOff_GO@value,w
  6860  1714  390F               	andlw	15
  6861  1715  1D03               	btfss	3,2
  6862  1716  2F1D               	goto	l5542
  6863  1717                     l5538:	
  6864  1717  3026               	movlw	38
  6865  1718  0224               	subwf	setDelayOff_GO@value,w
  6866  1719  1803               	skipnc
  6867  171A  2F1D               	goto	l5542
  6868                           
  6869                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6870  171B  0824               	movf	setDelayOff_GO@value,w
  6871  171C  2F1E               	goto	L2
  6872  171D                     l5542:	
  6873                           ;DelayOff_B1.c: 93: } else {
  6874                           
  6875                           
  6876                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6877  171D  3005               	movlw	5
  6878  171E                     L2:	
  6879  171E  00A5               	movwf	??_setDelayOff_GO
  6880  171F  0827               	movf	setDelayOff_GO@sw,w
  6881  1720  3E1A               	addlw	26
  6882  1721  077D               	addwf	_product,w
  6883  1722  00A6               	movwf	??_setDelayOff_GO+1
  6884  1723  0826               	movf	??_setDelayOff_GO+1,w
  6885  1724  0086               	movwf	6
  6886  1725  3001               	movlw	1	; select bank2/3
  6887  1726  0087               	movwf	7
  6888  1727  0825               	movf	??_setDelayOff_GO,w
  6889  1728  0081               	movwf	1
  6890                           
  6891                           ;DelayOff_B1.c: 95: }
  6892                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6893  1729  2F36               	goto	l5548
  6894  172A                     l5544:	
  6895  172A  08A3               	movf	setDelayOff_GO@command,f
  6896  172B  1D03               	skipz
  6897  172C  2F36               	goto	l5548
  6898                           
  6899                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6900  172D  0827               	movf	setDelayOff_GO@sw,w
  6901  172E  3E1A               	addlw	26
  6902  172F  077D               	addwf	_product,w
  6903  1730  00A5               	movwf	??_setDelayOff_GO
  6904  1731  0825               	movf	??_setDelayOff_GO,w
  6905  1732  0086               	movwf	6
  6906  1733  3001               	movlw	1	; select bank2/3
  6907  1734  0087               	movwf	7
  6908  1735  0181               	clrf	1
  6909  1736                     l5548:	
  6910                           
  6911                           ;DelayOff_B1.c: 98: }
  6912                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6913  1736  0021               	movlb	1	; select bank1
  6914  1737  0839               	movf	_DelayOff^(0+128),w
  6915  1738  3E02               	addlw	2
  6916  1739  0086               	movwf	6
  6917  173A  0187               	clrf	7
  6918  173B  3000               	movlw	0
  6919  173C  3FC0               	movwi [0]fsr1
  6920  173D  3FC1               	movwi [1]fsr1
  6921                           
  6922                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6923  173E  0839               	movf	_DelayOff^(0+128),w
  6924  173F  3E04               	addlw	4
  6925  1740  0086               	movwf	6
  6926  1741  0187               	clrf	7
  6927  1742  0181               	clrf	1
  6928  1743  0008               	return
  6929  1744                     __end_of_setDelayOff_GO:	
  6930                           
  6931                           	psect	text24
  6932  113B                     __ptext24:	
  6933 ;; *************** function _DelayTimejudge *****************
  6934 ;; Defined at:
  6935 ;;		line 105 in file "../src/DelayOff_B1.c"
  6936 ;; Parameters:    Size  Location     Type
  6937 ;;  value           1    wreg     unsigned char 
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  value           1    1[BANK0 ] unsigned char 
  6940 ;;  i               1    2[BANK0 ] unsigned char 
  6941 ;; Return value:  Size  Location     Type
  6942 ;;                  1    wreg      unsigned char 
  6943 ;; Registers used:
  6944 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6945 ;; Tracked objects:
  6946 ;;		On entry : 0/0
  6947 ;;		On exit  : 0/0
  6948 ;;		Unchanged: 0/0
  6949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;Total ram usage:        3 bytes
  6955 ;; Hardware stack levels used:    1
  6956 ;; Hardware stack levels required when called:    5
  6957 ;; This function calls:
  6958 ;;		Nothing
  6959 ;; This function is called by:
  6960 ;;		_setDelayOff_GO
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           
  6965                           ;psect for function _DelayTimejudge
  6966  113B                     _DelayTimejudge:	
  6967                           
  6968                           ;incstack = 0
  6969                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  6970                           ;DelayTimejudge@value stored from wreg
  6971  113B  0020               	movlb	0	; select bank0
  6972  113C  00A1               	movwf	DelayTimejudge@value
  6973                           
  6974                           ;DelayOff_B1.c: 106: char i = 5;
  6975  113D  3005               	movlw	5
  6976  113E  00A0               	movwf	??_DelayTimejudge
  6977  113F  0820               	movf	??_DelayTimejudge,w
  6978  1140  00A2               	movwf	DelayTimejudge@i
  6979                           
  6980                           ;DelayOff_B1.c: 107: switch (value) {
  6981  1141  2951               	goto	l5364
  6982  1142                     l5350:	
  6983                           ;DelayOff_B1.c: 108: case 0x05:
  6984                           
  6985                           
  6986                           ;DelayOff_B1.c: 109: i = 5;
  6987  1142  3005               	movlw	5
  6988  1143  294D               	goto	L7
  6989  1144                     l5352:	
  6990                           ;DelayOff_B1.c: 111: case 0x10:
  6991                           
  6992                           ;DelayOff_B1.c: 110: break;
  6993                           
  6994                           
  6995                           ;DelayOff_B1.c: 112: i = 10;
  6996  1144  300A               	movlw	10
  6997  1145  294D               	goto	L7
  6998  1146                     l5354:	
  6999                           ;DelayOff_B1.c: 114: case 0x15:
  7000                           
  7001                           ;DelayOff_B1.c: 113: break;
  7002                           
  7003                           
  7004                           ;DelayOff_B1.c: 115: i = 15;
  7005  1146  300F               	movlw	15
  7006  1147  294D               	goto	L7
  7007  1148                     l5356:	
  7008                           ;DelayOff_B1.c: 117: case 0x20:
  7009                           
  7010                           ;DelayOff_B1.c: 116: break;
  7011                           
  7012                           
  7013                           ;DelayOff_B1.c: 118: i = 20;
  7014  1148  3014               	movlw	20
  7015  1149  294D               	goto	L7
  7016  114A                     l5358:	
  7017                           ;DelayOff_B1.c: 120: case 0x25:
  7018                           
  7019                           ;DelayOff_B1.c: 119: break;
  7020                           
  7021                           
  7022                           ;DelayOff_B1.c: 121: i = 25;
  7023  114A  3019               	movlw	25
  7024  114B  294D               	goto	L7
  7025  114C                     l5360:	
  7026                           ;DelayOff_B1.c: 123: case 0x30:
  7027                           
  7028                           ;DelayOff_B1.c: 122: break;
  7029                           
  7030                           
  7031                           ;DelayOff_B1.c: 124: i = 30;
  7032  114C  301E               	movlw	30
  7033  114D                     L7:	
  7034  114D  00A0               	movwf	??_DelayTimejudge
  7035  114E  0820               	movf	??_DelayTimejudge,w
  7036  114F  00A2               	movwf	DelayTimejudge@i
  7037                           
  7038                           ;DelayOff_B1.c: 126: }
  7039                           
  7040                           ;DelayOff_B1.c: 125: break;
  7041  1150  2965               	goto	l5366
  7042  1151                     l5364:	
  7043  1151  0821               	movf	DelayTimejudge@value,w
  7044                           
  7045                           ; Switch size 1, requested type "space"
  7046                           ; Number of cases is 6, Range of values is 5 to 48
  7047                           ; switch strategies available:
  7048                           ; Name         Instructions Cycles
  7049                           ; simple_byte           19    10 (average)
  7050                           ; direct_byte           97     9 (fixed)
  7051                           ; jumptable            263     9 (fixed)
  7052                           ;	Chosen strategy is simple_byte
  7053  1152  3A05               	xorlw	5	; case 5
  7054  1153  1903               	skipnz
  7055  1154  2942               	goto	l5350
  7056  1155  3A15               	xorlw	21	; case 16
  7057  1156  1903               	skipnz
  7058  1157  2944               	goto	l5352
  7059  1158  3A05               	xorlw	5	; case 21
  7060  1159  1903               	skipnz
  7061  115A  2946               	goto	l5354
  7062  115B  3A35               	xorlw	53	; case 32
  7063  115C  1903               	skipnz
  7064  115D  2948               	goto	l5356
  7065  115E  3A05               	xorlw	5	; case 37
  7066  115F  1903               	skipnz
  7067  1160  294A               	goto	l5358
  7068  1161  3A15               	xorlw	21	; case 48
  7069  1162  1903               	skipnz
  7070  1163  294C               	goto	l5360
  7071  1164  2965               	goto	l5366
  7072  1165                     l5366:	
  7073                           
  7074                           ;DelayOff_B1.c: 127: return i;
  7075  1165  0822               	movf	DelayTimejudge@i,w
  7076  1166  0008               	return
  7077  1167                     __end_of_DelayTimejudge:	
  7078                           
  7079                           	psect	text25
  7080  12A8                     __ptext25:	
  7081 ;; *************** function _setRFSW_AdjControl *****************
  7082 ;; Defined at:
  7083 ;;		line 392 in file "../src/RF_Control_B1.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  sw              1    wreg     unsigned char 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  sw              1   70[BANK0 ] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;		None               void
  7090 ;; Registers used:
  7091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;Total ram usage:        3 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:   10
  7104 ;; This function calls:
  7105 ;;		_RfSWPointSelect
  7106 ;;		_setRF_DimmerValue
  7107 ;;		_setTxData
  7108 ;; This function is called by:
  7109 ;;		_setControl_Lights_Table
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           
  7114                           ;psect for function _setRFSW_AdjControl
  7115  12A8                     _setRFSW_AdjControl:	
  7116                           
  7117                           ;incstack = 0
  7118                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7119                           ;setRFSW_AdjControl@sw stored from wreg
  7120  12A8  0020               	movlb	0	; select bank0
  7121  12A9  00E6               	movwf	setRFSW_AdjControl@sw
  7122                           
  7123                           ;RF_Control_B1.c: 393: RfSWPointSelect(sw);
  7124  12AA  0866               	movf	setRFSW_AdjControl@sw,w
  7125  12AB  319C  24BC  3192   	fcall	_RfSWPointSelect
  7126                           
  7127                           ;RF_Control_B1.c: 394: if (RFSW->Status == 1) {
  7128  12AE  0021               	movlb	1	; select bank1
  7129  12AF  083F               	movf	_RFSW^(0+128),w
  7130  12B0  0086               	movwf	6
  7131  12B1  0187               	clrf	7
  7132  12B2  1C01               	btfss	1,0
  7133  12B3  2AC0               	goto	l5758
  7134                           
  7135                           ;RF_Control_B1.c: 395: Memory->Modify=1;
  7136  12B4  086F               	movf	_Memory^(0+128),w
  7137  12B5  3E24               	addlw	36
  7138  12B6  0086               	movwf	6
  7139  12B7  3001               	movlw	1	; select bank2/3
  7140  12B8  0087               	movwf	7
  7141  12B9  1401               	bsf	1,0
  7142                           
  7143                           ;RF_Control_B1.c: 396: setRF_DimmerValue(sw);
  7144  12BA  0020               	movlb	0	; select bank0
  7145  12BB  0866               	movf	setRFSW_AdjControl@sw,w
  7146  12BC  3187  27C5  3192   	fcall	_setRF_DimmerValue
  7147                           
  7148                           ;RF_Control_B1.c: 397: } else {
  7149  12BF  2AD2               	goto	l1990
  7150  12C0                     l5758:	
  7151                           
  7152                           ;RF_Control_B1.c: 398: product->Data[9]=product->Data[20 + sw];
  7153  12C0  0020               	movlb	0	; select bank0
  7154  12C1  0866               	movf	setRFSW_AdjControl@sw,w
  7155  12C2  3E14               	addlw	20
  7156  12C3  077D               	addwf	_product,w
  7157  12C4  00E4               	movwf	??_setRFSW_AdjControl
  7158  12C5  0864               	movf	??_setRFSW_AdjControl,w
  7159  12C6  0086               	movwf	6
  7160  12C7  3001               	movlw	1	; select bank2/3
  7161  12C8  0087               	movwf	7
  7162  12C9  0801               	movf	1,w
  7163  12CA  00E5               	movwf	??_setRFSW_AdjControl+1
  7164  12CB  087D               	movf	_product,w
  7165  12CC  3E09               	addlw	9
  7166  12CD  0086               	movwf	6
  7167  12CE  3001               	movlw	1	; select bank2/3
  7168  12CF  0087               	movwf	7
  7169  12D0  0865               	movf	??_setRFSW_AdjControl+1,w
  7170  12D1  0081               	movwf	1
  7171  12D2                     l1990:	
  7172                           
  7173                           ;RF_Control_B1.c: 399: }
  7174                           ;RF_Control_B1.c: 400: product->Data[17]=product->Data[26 + sw];
  7175  12D2  0020               	movlb	0	; select bank0
  7176  12D3  0866               	movf	setRFSW_AdjControl@sw,w
  7177  12D4  3E1A               	addlw	26
  7178  12D5  077D               	addwf	_product,w
  7179  12D6  00E4               	movwf	??_setRFSW_AdjControl
  7180  12D7  0864               	movf	??_setRFSW_AdjControl,w
  7181  12D8  0086               	movwf	6
  7182  12D9  3001               	movlw	1	; select bank2/3
  7183  12DA  0087               	movwf	7
  7184  12DB  0801               	movf	1,w
  7185  12DC  00E5               	movwf	??_setRFSW_AdjControl+1
  7186  12DD  087D               	movf	_product,w
  7187  12DE  3E11               	addlw	17
  7188  12DF  0086               	movwf	6
  7189  12E0  3001               	movlw	1	; select bank2/3
  7190  12E1  0087               	movwf	7
  7191  12E2  0865               	movf	??_setRFSW_AdjControl+1,w
  7192  12E3  0081               	movwf	1
  7193                           
  7194                           ;RF_Control_B1.c: 401: setTxData(1);
  7195  12E4  3001               	movlw	1
  7196  12E5  318D  2554         	fcall	_setTxData
  7197  12E7  0008               	return
  7198  12E8                     __end_of_setRFSW_AdjControl:	
  7199                           
  7200                           	psect	text26
  7201  07C5                     __ptext26:	
  7202 ;; *************** function _setRF_DimmerValue *****************
  7203 ;; Defined at:
  7204 ;;		line 412 in file "../src/RF_Control_B1.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  lights          1    wreg     unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  lights          1   67[BANK0 ] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;		None               void
  7211 ;; Registers used:
  7212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7221 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;Total ram usage:        3 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; Hardware stack levels required when called:    9
  7225 ;; This function calls:
  7226 ;;		_setDimmerLights_AdjRF
  7227 ;; This function is called by:
  7228 ;;		_setRFSW_AdjControl
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           
  7233                           ;psect for function _setRF_DimmerValue
  7234  07C5                     _setRF_DimmerValue:	
  7235                           
  7236                           ;incstack = 0
  7237                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7238                           ;setRF_DimmerValue@lights stored from wreg
  7239  07C5  0020               	movlb	0	; select bank0
  7240  07C6  00E3               	movwf	setRF_DimmerValue@lights
  7241                           
  7242                           ;RF_Control_B1.c: 413: if (RF_Data[9] > 0x64) {
  7243  07C7  3065               	movlw	101
  7244  07C8  0021               	movlb	1	; select bank1
  7245  07C9  0229               	subwf	(_RF_Data^(0+128)+9),w
  7246  07CA  1C03               	skipc
  7247  07CB  2FD2               	goto	l5612
  7248                           
  7249                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x64;
  7250  07CC  3064               	movlw	100
  7251  07CD  0020               	movlb	0	; select bank0
  7252  07CE  00E1               	movwf	??_setRF_DimmerValue
  7253  07CF  0861               	movf	??_setRF_DimmerValue,w
  7254  07D0  0021               	movlb	1	; select bank1
  7255  07D1  00A9               	movwf	(_RF_Data^(0+128)+9)
  7256  07D2                     l5612:	
  7257                           
  7258                           ;RF_Control_B1.c: 415: }
  7259                           ;RF_Control_B1.c: 416: product->Data[9]=RF_Data[9];
  7260  07D2  0829               	movf	(_RF_Data^(0+128)+9),w
  7261  07D3  0020               	movlb	0	; select bank0
  7262  07D4  00E1               	movwf	??_setRF_DimmerValue
  7263  07D5  087D               	movf	_product,w
  7264  07D6  3E09               	addlw	9
  7265  07D7  0086               	movwf	6
  7266  07D8  3001               	movlw	1	; select bank2/3
  7267  07D9  0087               	movwf	7
  7268  07DA  0861               	movf	??_setRF_DimmerValue,w
  7269  07DB  0081               	movwf	1
  7270                           
  7271                           ;RF_Control_B1.c: 417: product->Data[11]=lights;
  7272  07DC  0863               	movf	setRF_DimmerValue@lights,w
  7273  07DD  00E1               	movwf	??_setRF_DimmerValue
  7274  07DE  087D               	movf	_product,w
  7275  07DF  3E0B               	addlw	11
  7276  07E0  0086               	movwf	6
  7277  07E1  3001               	movlw	1	; select bank2/3
  7278  07E2  0087               	movwf	7
  7279  07E3  0861               	movf	??_setRF_DimmerValue,w
  7280  07E4  0081               	movwf	1
  7281                           
  7282                           ;RF_Control_B1.c: 418: product->Data[(20 + lights)]=product->Data[9];
  7283  07E5  087D               	movf	_product,w
  7284  07E6  3E09               	addlw	9
  7285  07E7  0086               	movwf	6
  7286  07E8  3001               	movlw	1	; select bank2/3
  7287  07E9  0087               	movwf	7
  7288  07EA  0801               	movf	1,w
  7289  07EB  00E1               	movwf	??_setRF_DimmerValue
  7290  07EC  0863               	movf	setRF_DimmerValue@lights,w
  7291  07ED  3E14               	addlw	20
  7292  07EE  077D               	addwf	_product,w
  7293  07EF  00E2               	movwf	??_setRF_DimmerValue+1
  7294  07F0  0862               	movf	??_setRF_DimmerValue+1,w
  7295  07F1  0086               	movwf	6
  7296  07F2  3001               	movlw	1	; select bank2/3
  7297  07F3  0087               	movwf	7
  7298  07F4  0861               	movf	??_setRF_DimmerValue,w
  7299  07F5  0081               	movwf	1
  7300                           
  7301                           ;RF_Control_B1.c: 419: setDimmerLights_AdjRF(lights);
  7302  07F6  0863               	movf	setRF_DimmerValue@lights,w
  7303  07F7  3190  2077         	fcall	_setDimmerLights_AdjRF
  7304  07F9  0008               	return
  7305  07FA                     __end_of_setRF_DimmerValue:	
  7306                           
  7307                           	psect	text27
  7308  1077                     __ptext27:	
  7309 ;; *************** function _setDimmerLights_AdjRF *****************
  7310 ;; Defined at:
  7311 ;;		line 679 in file "../src/Dimmer_B1.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  lights          1    wreg     unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  lights          1   64[BANK0 ] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;		None               void
  7318 ;; Registers used:
  7319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;Total ram usage:        2 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    8
  7332 ;; This function calls:
  7333 ;;		_DimmerLightsPointSelect
  7334 ;;		_getPercentValue
  7335 ;; This function is called by:
  7336 ;;		_setRF_DimmerValue
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _setDimmerLights_AdjRF
  7342  1077                     _setDimmerLights_AdjRF:	
  7343                           
  7344                           ;incstack = 0
  7345                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7346                           ;setDimmerLights_AdjRF@lights stored from wreg
  7347  1077  0020               	movlb	0	; select bank0
  7348  1078  00E0               	movwf	setDimmerLights_AdjRF@lights
  7349                           
  7350                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7351  1079  0860               	movf	setDimmerLights_AdjRF@lights,w
  7352  107A  319C  2482  3190   	fcall	_DimmerLightsPointSelect
  7353                           
  7354                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7355  107D  0878               	movf	_DimmerLights,w
  7356  107E  0086               	movwf	6
  7357  107F  3001               	movlw	1	; select bank2/3
  7358  1080  0087               	movwf	7
  7359  1081  1501               	bsf	1,2
  7360                           
  7361                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7362  1082  0878               	movf	_DimmerLights,w
  7363  1083  0086               	movwf	6
  7364  1084  3001               	movlw	1	; select bank2/3
  7365  1085  0087               	movwf	7
  7366  1086  1481               	bsf	1,1
  7367                           
  7368                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7369  1087  087D               	movf	_product,w
  7370  1088  3E09               	addlw	9
  7371  1089  0086               	movwf	6
  7372  108A  3001               	movlw	1	; select bank2/3
  7373  108B  0087               	movwf	7
  7374  108C  0801               	movf	1,w
  7375  108D  3196  268C         	fcall	_getPercentValue
  7376  108F  0020               	movlb	0	; select bank0
  7377  1090  00DF               	movwf	??_setDimmerLights_AdjRF
  7378  1091  0878               	movf	_DimmerLights,w
  7379  1092  3E05               	addlw	5
  7380  1093  0086               	movwf	6
  7381  1094  3001               	movlw	1	; select bank2/3
  7382  1095  0087               	movwf	7
  7383  1096  085F               	movf	??_setDimmerLights_AdjRF,w
  7384  1097  0081               	movwf	1
  7385  1098  0008               	return
  7386  1099                     __end_of_setDimmerLights_AdjRF:	
  7387                           
  7388                           	psect	text28
  7389  168C                     __ptext28:	
  7390 ;; *************** function _getPercentValue *****************
  7391 ;; Defined at:
  7392 ;;		line 752 in file "../src/Dimmer_B1.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  value           1    wreg     unsigned char 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  value           1   59[BANK0 ] unsigned char 
  7397 ;;  i               3   60[BANK0 ] float 
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  1    wreg      unsigned char 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0, pclath, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;Total ram usage:        6 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    7
  7414 ;; This function calls:
  7415 ;;		___awtoft
  7416 ;;		___ftadd
  7417 ;;		___ftdiv
  7418 ;;		___ftmul
  7419 ;;		___fttol
  7420 ;; This function is called by:
  7421 ;;		_setDimmerLights_AdjRF
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function _getPercentValue
  7427  168C                     _getPercentValue:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7431                           ;getPercentValue@value stored from wreg
  7432  168C  0020               	movlb	0	; select bank0
  7433  168D  00DB               	movwf	getPercentValue@value
  7434                           
  7435                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7436  168E  3000               	movlw	0
  7437  168F  00DC               	movwf	getPercentValue@i
  7438  1690  30E0               	movlw	224
  7439  1691  00DD               	movwf	getPercentValue@i+1
  7440  1692  3041               	movlw	65
  7441  1693  00DE               	movwf	getPercentValue@i+2
  7442                           
  7443                           ;Dimmer_B1.c: 755: i /= 100;
  7444  1694  3000               	movlw	0
  7445  1695  00AE               	movwf	___ftdiv@f2
  7446  1696  30C8               	movlw	200
  7447  1697  00AF               	movwf	___ftdiv@f2+1
  7448  1698  3042               	movlw	66
  7449  1699  00B0               	movwf	___ftdiv@f2+2
  7450  169A  085C               	movf	getPercentValue@i,w
  7451  169B  00B1               	movwf	___ftdiv@f1
  7452  169C  085D               	movf	getPercentValue@i+1,w
  7453  169D  00B2               	movwf	___ftdiv@f1+1
  7454  169E  085E               	movf	getPercentValue@i+2,w
  7455  169F  00B3               	movwf	___ftdiv@f1+2
  7456  16A0  318D  25F4  3196   	fcall	___ftdiv
  7457  16A3  0020               	movlb	0	; select bank0
  7458  16A4  082E               	movf	?___ftdiv,w
  7459  16A5  00DC               	movwf	getPercentValue@i
  7460  16A6  082F               	movf	?___ftdiv+1,w
  7461  16A7  00DD               	movwf	getPercentValue@i+1
  7462  16A8  0830               	movf	?___ftdiv+2,w
  7463  16A9  00DE               	movwf	getPercentValue@i+2
  7464                           
  7465                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7466  16AA  085B               	movf	getPercentValue@value,w
  7467  16AB  00D9               	movwf	??_getPercentValue
  7468  16AC  01DA               	clrf	??_getPercentValue+1
  7469  16AD  09D9               	comf	??_getPercentValue,f
  7470  16AE  09DA               	comf	??_getPercentValue+1,f
  7471  16AF  0AD9               	incf	??_getPercentValue,f
  7472  16B0  1903               	skipnz
  7473  16B1  0ADA               	incf	??_getPercentValue+1,f
  7474  16B2  0859               	movf	??_getPercentValue,w
  7475  16B3  3E64               	addlw	100
  7476  16B4  00A8               	movwf	___awtoft@c
  7477  16B5  3000               	movlw	0
  7478  16B6  3D5A               	addwfc	??_getPercentValue+1,w
  7479  16B7  00A9               	movwf	___awtoft@c+1
  7480  16B8  319F  27BC  3196   	fcall	___awtoft
  7481  16BB  0020               	movlb	0	; select bank0
  7482  16BC  0828               	movf	?___awtoft,w
  7483  16BD  00B1               	movwf	___ftmul@f2
  7484  16BE  0829               	movf	?___awtoft+1,w
  7485  16BF  00B2               	movwf	___ftmul@f2+1
  7486  16C0  082A               	movf	?___awtoft+2,w
  7487  16C1  00B3               	movwf	___ftmul@f2+2
  7488  16C2  085C               	movf	getPercentValue@i,w
  7489  16C3  00AE               	movwf	___ftmul@f1
  7490  16C4  085D               	movf	getPercentValue@i+1,w
  7491  16C5  00AF               	movwf	___ftmul@f1+1
  7492  16C6  085E               	movf	getPercentValue@i+2,w
  7493  16C7  00B0               	movwf	___ftmul@f1+2
  7494  16C8  318F  274C  3196   	fcall	___ftmul
  7495  16CB  0020               	movlb	0	; select bank0
  7496  16CC  082E               	movf	?___ftmul,w
  7497  16CD  00C1               	movwf	___ftadd@f2
  7498  16CE  082F               	movf	?___ftmul+1,w
  7499  16CF  00C2               	movwf	___ftadd@f2+1
  7500  16D0  0830               	movf	?___ftmul+2,w
  7501  16D1  00C3               	movwf	___ftadd@f2+2
  7502  16D2  3000               	movlw	0
  7503  16D3  00BE               	movwf	___ftadd@f1
  7504  16D4  3000               	movlw	0
  7505  16D5  00BF               	movwf	___ftadd@f1+1
  7506  16D6  3042               	movlw	66
  7507  16D7  00C0               	movwf	___ftadd@f1+2
  7508  16D8  3185  253C  3196   	fcall	___ftadd
  7509  16DB  0020               	movlb	0	; select bank0
  7510  16DC  083E               	movf	?___ftadd,w
  7511  16DD  00CB               	movwf	___fttol@f1
  7512  16DE  083F               	movf	?___ftadd+1,w
  7513  16DF  00CC               	movwf	___fttol@f1+1
  7514  16E0  0840               	movf	?___ftadd+2,w
  7515  16E1  00CD               	movwf	___fttol@f1+2
  7516  16E2  318B  23B5         	fcall	___fttol
  7517  16E4  0020               	movlb	0	; select bank0
  7518  16E5  084B               	movf	?___fttol,w
  7519  16E6  0008               	return
  7520  16E7                     __end_of_getPercentValue:	
  7521                           
  7522                           	psect	text29
  7523  0F4C                     __ptext29:	
  7524 ;; *************** function ___ftmul *****************
  7525 ;; Defined at:
  7526 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  f1              3   14[BANK0 ] float 
  7529 ;;  f2              3   17[BANK0 ] float 
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7532 ;;  sign            1   29[BANK0 ] unsigned char 
  7533 ;;  cntr            1   28[BANK0 ] unsigned char 
  7534 ;;  exp             1   24[BANK0 ] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  3   14[BANK0 ] float 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:       16 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    6
  7551 ;; This function calls:
  7552 ;;		___ftpack
  7553 ;; This function is called by:
  7554 ;;		_getPercentValue
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           
  7559                           ;psect for function ___ftmul
  7560  0F4C                     ___ftmul:	
  7561                           
  7562                           ;incstack = 0
  7563                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7564  0F4C  0020               	movlb	0	; select bank0
  7565  0F4D  082E               	movf	___ftmul@f1,w
  7566  0F4E  00B4               	movwf	??___ftmul
  7567  0F4F  082F               	movf	___ftmul@f1+1,w
  7568  0F50  00B5               	movwf	??___ftmul+1
  7569  0F51  0830               	movf	___ftmul@f1+2,w
  7570  0F52  00B6               	movwf	??___ftmul+2
  7571  0F53  1003               	clrc
  7572  0F54  0D35               	rlf	??___ftmul+1,w
  7573  0F55  0D36               	rlf	??___ftmul+2,w
  7574  0F56  00B7               	movwf	??___ftmul+3
  7575  0F57  0837               	movf	??___ftmul+3,w
  7576  0F58  00B8               	movwf	___ftmul@exp
  7577  0F59  08B8               	movf	___ftmul@exp,f
  7578  0F5A  1D03               	skipz
  7579  0F5B  2F63               	goto	l5244
  7580  0F5C  3000               	movlw	0
  7581  0F5D  00AE               	movwf	?___ftmul
  7582  0F5E  3000               	movlw	0
  7583  0F5F  00AF               	movwf	?___ftmul+1
  7584  0F60  3000               	movlw	0
  7585  0F61  00B0               	movwf	?___ftmul+2
  7586  0F62  0008               	return
  7587  0F63                     l5244:	
  7588  0F63  0831               	movf	___ftmul@f2,w
  7589  0F64  00B4               	movwf	??___ftmul
  7590  0F65  0832               	movf	___ftmul@f2+1,w
  7591  0F66  00B5               	movwf	??___ftmul+1
  7592  0F67  0833               	movf	___ftmul@f2+2,w
  7593  0F68  00B6               	movwf	??___ftmul+2
  7594  0F69  1003               	clrc
  7595  0F6A  0D35               	rlf	??___ftmul+1,w
  7596  0F6B  0D36               	rlf	??___ftmul+2,w
  7597  0F6C  00B7               	movwf	??___ftmul+3
  7598  0F6D  0837               	movf	??___ftmul+3,w
  7599  0F6E  00BD               	movwf	___ftmul@sign
  7600  0F6F  08BD               	movf	___ftmul@sign,f
  7601  0F70  1D03               	skipz
  7602  0F71  2F79               	goto	l5250
  7603  0F72  3000               	movlw	0
  7604  0F73  00AE               	movwf	?___ftmul
  7605  0F74  3000               	movlw	0
  7606  0F75  00AF               	movwf	?___ftmul+1
  7607  0F76  3000               	movlw	0
  7608  0F77  00B0               	movwf	?___ftmul+2
  7609  0F78  0008               	return
  7610  0F79                     l5250:	
  7611  0F79  083D               	movf	___ftmul@sign,w
  7612  0F7A  3E7B               	addlw	123
  7613  0F7B  00B4               	movwf	??___ftmul
  7614  0F7C  0834               	movf	??___ftmul,w
  7615  0F7D  07B8               	addwf	___ftmul@exp,f
  7616  0F7E  082E               	movf	___ftmul@f1,w
  7617  0F7F  00B4               	movwf	??___ftmul
  7618  0F80  082F               	movf	___ftmul@f1+1,w
  7619  0F81  00B5               	movwf	??___ftmul+1
  7620  0F82  0830               	movf	___ftmul@f1+2,w
  7621  0F83  00B6               	movwf	??___ftmul+2
  7622  0F84  3010               	movlw	16
  7623  0F85                     u3675:	
  7624  0F85  36B6               	lsrf	??___ftmul+2,f
  7625  0F86  0CB5               	rrf	??___ftmul+1,f
  7626  0F87  0CB4               	rrf	??___ftmul,f
  7627  0F88  0B89               	decfsz	9,f
  7628  0F89  2F85               	goto	u3675
  7629  0F8A  0834               	movf	??___ftmul,w
  7630  0F8B  00B7               	movwf	??___ftmul+3
  7631  0F8C  0837               	movf	??___ftmul+3,w
  7632  0F8D  00BD               	movwf	___ftmul@sign
  7633  0F8E  0831               	movf	___ftmul@f2,w
  7634  0F8F  00B4               	movwf	??___ftmul
  7635  0F90  0832               	movf	___ftmul@f2+1,w
  7636  0F91  00B5               	movwf	??___ftmul+1
  7637  0F92  0833               	movf	___ftmul@f2+2,w
  7638  0F93  00B6               	movwf	??___ftmul+2
  7639  0F94  3010               	movlw	16
  7640  0F95                     u3685:	
  7641  0F95  36B6               	lsrf	??___ftmul+2,f
  7642  0F96  0CB5               	rrf	??___ftmul+1,f
  7643  0F97  0CB4               	rrf	??___ftmul,f
  7644  0F98  0B89               	decfsz	9,f
  7645  0F99  2F95               	goto	u3685
  7646  0F9A  0834               	movf	??___ftmul,w
  7647  0F9B  00B7               	movwf	??___ftmul+3
  7648  0F9C  0837               	movf	??___ftmul+3,w
  7649  0F9D  06BD               	xorwf	___ftmul@sign,f
  7650  0F9E  3080               	movlw	128
  7651  0F9F  00B4               	movwf	??___ftmul
  7652  0FA0  0834               	movf	??___ftmul,w
  7653  0FA1  05BD               	andwf	___ftmul@sign,f
  7654  0FA2  17AF               	bsf	___ftmul@f1+1,7
  7655  0FA3  17B2               	bsf	___ftmul@f2+1,7
  7656  0FA4  30FF               	movlw	255
  7657  0FA5  05B1               	andwf	___ftmul@f2,f
  7658  0FA6  30FF               	movlw	255
  7659  0FA7  05B2               	andwf	___ftmul@f2+1,f
  7660  0FA8  3000               	movlw	0
  7661  0FA9  05B3               	andwf	___ftmul@f2+2,f
  7662  0FAA  3000               	movlw	0
  7663  0FAB  00B9               	movwf	___ftmul@f3_as_product
  7664  0FAC  3000               	movlw	0
  7665  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  7666  0FAE  3000               	movlw	0
  7667  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  7668  0FB0  3007               	movlw	7
  7669  0FB1  00B4               	movwf	??___ftmul
  7670  0FB2  0834               	movf	??___ftmul,w
  7671  0FB3  00BC               	movwf	___ftmul@cntr
  7672  0FB4                     l5262:	
  7673  0FB4  1C2E               	btfss	___ftmul@f1,0
  7674  0FB5  2FBC               	goto	l5266
  7675  0FB6  0831               	movf	___ftmul@f2,w
  7676  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  7677  0FB8  0832               	movf	___ftmul@f2+1,w
  7678  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7679  0FBA  0833               	movf	___ftmul@f2+2,w
  7680  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7681  0FBC                     l5266:	
  7682  0FBC  3001               	movlw	1
  7683  0FBD                     u3705:	
  7684  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  7685  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  7686  0FBF  0CAE               	rrf	___ftmul@f1,f
  7687  0FC0  0B89               	decfsz	9,f
  7688  0FC1  2FBD               	goto	u3705
  7689  0FC2  3001               	movlw	1
  7690  0FC3                     u3715:	
  7691  0FC3  35B1               	lslf	___ftmul@f2,f
  7692  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  7693  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  7694  0FC6  0B89               	decfsz	9,f
  7695  0FC7  2FC3               	goto	u3715
  7696  0FC8  3001               	movlw	1
  7697  0FC9  02BC               	subwf	___ftmul@cntr,f
  7698  0FCA  1D03               	btfss	3,2
  7699  0FCB  2FB4               	goto	l5262
  7700  0FCC  3009               	movlw	9
  7701  0FCD  00B4               	movwf	??___ftmul
  7702  0FCE  0834               	movf	??___ftmul,w
  7703  0FCF  00BC               	movwf	___ftmul@cntr
  7704  0FD0                     l5274:	
  7705  0FD0  1C2E               	btfss	___ftmul@f1,0
  7706  0FD1  2FD8               	goto	l5278
  7707  0FD2  0831               	movf	___ftmul@f2,w
  7708  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  7709  0FD4  0832               	movf	___ftmul@f2+1,w
  7710  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7711  0FD6  0833               	movf	___ftmul@f2+2,w
  7712  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7713  0FD8                     l5278:	
  7714  0FD8  3001               	movlw	1
  7715  0FD9                     u3745:	
  7716  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  7717  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  7718  0FDB  0CAE               	rrf	___ftmul@f1,f
  7719  0FDC  0B89               	decfsz	9,f
  7720  0FDD  2FD9               	goto	u3745
  7721  0FDE  3001               	movlw	1
  7722  0FDF                     u3755:	
  7723  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7724  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7725  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  7726  0FE2  0B89               	decfsz	9,f
  7727  0FE3  2FDF               	goto	u3755
  7728  0FE4  3001               	movlw	1
  7729  0FE5  02BC               	subwf	___ftmul@cntr,f
  7730  0FE6  1D03               	btfss	3,2
  7731  0FE7  2FD0               	goto	l5274
  7732  0FE8  0839               	movf	___ftmul@f3_as_product,w
  7733  0FE9  00A0               	movwf	___ftpack@arg
  7734  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  7735  0FEB  00A1               	movwf	___ftpack@arg+1
  7736  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  7737  0FED  00A2               	movwf	___ftpack@arg+2
  7738  0FEE  0838               	movf	___ftmul@exp,w
  7739  0FEF  00B4               	movwf	??___ftmul
  7740  0FF0  0834               	movf	??___ftmul,w
  7741  0FF1  00A3               	movwf	___ftpack@exp
  7742  0FF2  083D               	movf	___ftmul@sign,w
  7743  0FF3  00B5               	movwf	??___ftmul+1
  7744  0FF4  0835               	movf	??___ftmul+1,w
  7745  0FF5  00A4               	movwf	___ftpack@sign
  7746  0FF6  3188  202D         	fcall	___ftpack
  7747  0FF8  0020               	movlb	0	; select bank0
  7748  0FF9  0820               	movf	?___ftpack,w
  7749  0FFA  00AE               	movwf	?___ftmul
  7750  0FFB  0821               	movf	?___ftpack+1,w
  7751  0FFC  00AF               	movwf	?___ftmul+1
  7752  0FFD  0822               	movf	?___ftpack+2,w
  7753  0FFE  00B0               	movwf	?___ftmul+2
  7754  0FFF  0008               	return
  7755  1000                     __end_of___ftmul:	
  7756                           
  7757                           	psect	text30
  7758  053C                     __ptext30:	
  7759 ;; *************** function ___ftadd *****************
  7760 ;; Defined at:
  7761 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;  f1              3   30[BANK0 ] float 
  7764 ;;  f2              3   33[BANK0 ] float 
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  exp1            1   42[BANK0 ] unsigned char 
  7767 ;;  exp2            1   41[BANK0 ] unsigned char 
  7768 ;;  sign            1   40[BANK0 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  3   30[BANK0 ] float 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:       13 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		___ftpack
  7787 ;; This function is called by:
  7788 ;;		_getPercentValue
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function ___ftadd
  7794  053C                     ___ftadd:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7798  053C  0020               	movlb	0	; select bank0
  7799  053D  083E               	movf	___ftadd@f1,w
  7800  053E  00C4               	movwf	??___ftadd
  7801  053F  083F               	movf	___ftadd@f1+1,w
  7802  0540  00C5               	movwf	??___ftadd+1
  7803  0541  0840               	movf	___ftadd@f1+2,w
  7804  0542  00C6               	movwf	??___ftadd+2
  7805  0543  1003               	clrc
  7806  0544  0D45               	rlf	??___ftadd+1,w
  7807  0545  0D46               	rlf	??___ftadd+2,w
  7808  0546  00C7               	movwf	??___ftadd+3
  7809  0547  0847               	movf	??___ftadd+3,w
  7810  0548  00CA               	movwf	___ftadd@exp1
  7811  0549  0841               	movf	___ftadd@f2,w
  7812  054A  00C4               	movwf	??___ftadd
  7813  054B  0842               	movf	___ftadd@f2+1,w
  7814  054C  00C5               	movwf	??___ftadd+1
  7815  054D  0843               	movf	___ftadd@f2+2,w
  7816  054E  00C6               	movwf	??___ftadd+2
  7817  054F  1003               	clrc
  7818  0550  0D45               	rlf	??___ftadd+1,w
  7819  0551  0D46               	rlf	??___ftadd+2,w
  7820  0552  00C7               	movwf	??___ftadd+3
  7821  0553  0847               	movf	??___ftadd+3,w
  7822  0554  00C9               	movwf	___ftadd@exp2
  7823  0555  084A               	movf	___ftadd@exp1,w
  7824  0556  1903               	btfsc	3,2
  7825  0557  2D64               	goto	l5132
  7826  0558  0849               	movf	___ftadd@exp2,w
  7827  0559  024A               	subwf	___ftadd@exp1,w
  7828  055A  1803               	skipnc
  7829  055B  2D6B               	goto	l5136
  7830  055C  034A               	decf	___ftadd@exp1,w
  7831  055D  3AFF               	xorlw	255
  7832  055E  0749               	addwf	___ftadd@exp2,w
  7833  055F  00C4               	movwf	??___ftadd
  7834  0560  3019               	movlw	25
  7835  0561  0244               	subwf	??___ftadd,w
  7836  0562  1C03               	skipc
  7837  0563  2D6B               	goto	l5136
  7838  0564                     l5132:	
  7839  0564  0841               	movf	___ftadd@f2,w
  7840  0565  00BE               	movwf	?___ftadd
  7841  0566  0842               	movf	___ftadd@f2+1,w
  7842  0567  00BF               	movwf	?___ftadd+1
  7843  0568  0843               	movf	___ftadd@f2+2,w
  7844  0569  00C0               	movwf	?___ftadd+2
  7845  056A  0008               	return
  7846  056B                     l5136:	
  7847  056B  0849               	movf	___ftadd@exp2,w
  7848  056C  1903               	btfsc	3,2
  7849  056D  0008               	return
  7850  056E  084A               	movf	___ftadd@exp1,w
  7851  056F  0249               	subwf	___ftadd@exp2,w
  7852  0570  1803               	skipnc
  7853  0571  2D7A               	goto	l5142
  7854  0572  0349               	decf	___ftadd@exp2,w
  7855  0573  3AFF               	xorlw	255
  7856  0574  074A               	addwf	___ftadd@exp1,w
  7857  0575  00C4               	movwf	??___ftadd
  7858  0576  3019               	movlw	25
  7859  0577  0244               	subwf	??___ftadd,w
  7860  0578  1803               	btfsc	3,0
  7861  0579  0008               	return
  7862  057A                     l5142:	
  7863  057A  3006               	movlw	6
  7864  057B  00C4               	movwf	??___ftadd
  7865  057C  0844               	movf	??___ftadd,w
  7866  057D  00C8               	movwf	___ftadd@sign
  7867  057E  1BC0               	btfsc	___ftadd@f1+2,7
  7868  057F  17C8               	bsf	___ftadd@sign,7
  7869  0580  1BC3               	btfsc	___ftadd@f2+2,7
  7870  0581  1748               	bsf	___ftadd@sign,6
  7871  0582  17BF               	bsf	___ftadd@f1+1,7
  7872  0583  30FF               	movlw	255
  7873  0584  05BE               	andwf	___ftadd@f1,f
  7874  0585  30FF               	movlw	255
  7875  0586  05BF               	andwf	___ftadd@f1+1,f
  7876  0587  3000               	movlw	0
  7877  0588  05C0               	andwf	___ftadd@f1+2,f
  7878  0589  17C2               	bsf	___ftadd@f2+1,7
  7879  058A  30FF               	movlw	255
  7880  058B  05C1               	andwf	___ftadd@f2,f
  7881  058C  30FF               	movlw	255
  7882  058D  05C2               	andwf	___ftadd@f2+1,f
  7883  058E  3000               	movlw	0
  7884  058F  05C3               	andwf	___ftadd@f2+2,f
  7885  0590  0849               	movf	___ftadd@exp2,w
  7886  0591  024A               	subwf	___ftadd@exp1,w
  7887  0592  1803               	skipnc
  7888  0593  2DB6               	goto	l5164
  7889  0594                     l5154:	
  7890  0594  3001               	movlw	1
  7891  0595                     u3435:	
  7892  0595  35C1               	lslf	___ftadd@f2,f
  7893  0596  0DC2               	rlf	___ftadd@f2+1,f
  7894  0597  0DC3               	rlf	___ftadd@f2+2,f
  7895  0598  0B89               	decfsz	9,f
  7896  0599  2D95               	goto	u3435
  7897  059A  3001               	movlw	1
  7898  059B  02C9               	subwf	___ftadd@exp2,f
  7899  059C  0849               	movf	___ftadd@exp2,w
  7900  059D  064A               	xorwf	___ftadd@exp1,w
  7901  059E  1903               	skipnz
  7902  059F  2DB1               	goto	l5162
  7903  05A0  3001               	movlw	1
  7904  05A1  02C8               	subwf	___ftadd@sign,f
  7905  05A2  0848               	movf	___ftadd@sign,w
  7906  05A3  3907               	andlw	7
  7907  05A4  1903               	btfsc	3,2
  7908  05A5  2DB1               	goto	l5162
  7909  05A6  2D94               	goto	l5154
  7910  05A7                     l5160:	
  7911  05A7  3001               	movlw	1
  7912  05A8                     u3465:	
  7913  05A8  36C0               	lsrf	___ftadd@f1+2,f
  7914  05A9  0CBF               	rrf	___ftadd@f1+1,f
  7915  05AA  0CBE               	rrf	___ftadd@f1,f
  7916  05AB  0B89               	decfsz	9,f
  7917  05AC  2DA8               	goto	u3465
  7918  05AD  3001               	movlw	1
  7919  05AE  00C4               	movwf	??___ftadd
  7920  05AF  0844               	movf	??___ftadd,w
  7921  05B0  07CA               	addwf	___ftadd@exp1,f
  7922  05B1                     l5162:	
  7923  05B1  084A               	movf	___ftadd@exp1,w
  7924  05B2  0649               	xorwf	___ftadd@exp2,w
  7925  05B3  1903               	btfsc	3,2
  7926  05B4  2DDB               	goto	l2827
  7927  05B5  2DA7               	goto	l5160
  7928  05B6                     l5164:	
  7929  05B6  084A               	movf	___ftadd@exp1,w
  7930  05B7  0249               	subwf	___ftadd@exp2,w
  7931  05B8  1803               	skipnc
  7932  05B9  2DDB               	goto	l2827
  7933  05BA                     l5166:	
  7934  05BA  3001               	movlw	1
  7935  05BB                     u3495:	
  7936  05BB  35BE               	lslf	___ftadd@f1,f
  7937  05BC  0DBF               	rlf	___ftadd@f1+1,f
  7938  05BD  0DC0               	rlf	___ftadd@f1+2,f
  7939  05BE  0B89               	decfsz	9,f
  7940  05BF  2DBB               	goto	u3495
  7941  05C0  3001               	movlw	1
  7942  05C1  02CA               	subwf	___ftadd@exp1,f
  7943  05C2  0849               	movf	___ftadd@exp2,w
  7944  05C3  064A               	xorwf	___ftadd@exp1,w
  7945  05C4  1903               	skipnz
  7946  05C5  2DD7               	goto	l5174
  7947  05C6  3001               	movlw	1
  7948  05C7  02C8               	subwf	___ftadd@sign,f
  7949  05C8  0848               	movf	___ftadd@sign,w
  7950  05C9  3907               	andlw	7
  7951  05CA  1903               	btfsc	3,2
  7952  05CB  2DD7               	goto	l5174
  7953  05CC  2DBA               	goto	l5166
  7954  05CD                     l5172:	
  7955  05CD  3001               	movlw	1
  7956  05CE                     u3525:	
  7957  05CE  36C3               	lsrf	___ftadd@f2+2,f
  7958  05CF  0CC2               	rrf	___ftadd@f2+1,f
  7959  05D0  0CC1               	rrf	___ftadd@f2,f
  7960  05D1  0B89               	decfsz	9,f
  7961  05D2  2DCE               	goto	u3525
  7962  05D3  3001               	movlw	1
  7963  05D4  00C4               	movwf	??___ftadd
  7964  05D5  0844               	movf	??___ftadd,w
  7965  05D6  07C9               	addwf	___ftadd@exp2,f
  7966  05D7                     l5174:	
  7967  05D7  084A               	movf	___ftadd@exp1,w
  7968  05D8  0649               	xorwf	___ftadd@exp2,w
  7969  05D9  1D03               	skipz
  7970  05DA  2DCD               	goto	l5172
  7971  05DB                     l2827:	
  7972  05DB  1FC8               	btfss	___ftadd@sign,7
  7973  05DC  2DED               	goto	l5178
  7974  05DD  30FF               	movlw	255
  7975  05DE  06BE               	xorwf	___ftadd@f1,f
  7976  05DF  30FF               	movlw	255
  7977  05E0  06BF               	xorwf	___ftadd@f1+1,f
  7978  05E1  30FF               	movlw	255
  7979  05E2  06C0               	xorwf	___ftadd@f1+2,f
  7980  05E3  3001               	movlw	1
  7981  05E4  07BE               	addwf	___ftadd@f1,f
  7982  05E5  3000               	movlw	0
  7983  05E6  1803               	skipnc
  7984  05E7  3001               	movlw	1
  7985  05E8  07BF               	addwf	___ftadd@f1+1,f
  7986  05E9  3000               	movlw	0
  7987  05EA  1803               	skipnc
  7988  05EB  3001               	movlw	1
  7989  05EC  07C0               	addwf	___ftadd@f1+2,f
  7990  05ED                     l5178:	
  7991  05ED  1F48               	btfss	___ftadd@sign,6
  7992  05EE  2DFF               	goto	l5182
  7993  05EF  30FF               	movlw	255
  7994  05F0  06C1               	xorwf	___ftadd@f2,f
  7995  05F1  30FF               	movlw	255
  7996  05F2  06C2               	xorwf	___ftadd@f2+1,f
  7997  05F3  30FF               	movlw	255
  7998  05F4  06C3               	xorwf	___ftadd@f2+2,f
  7999  05F5  3001               	movlw	1
  8000  05F6  07C1               	addwf	___ftadd@f2,f
  8001  05F7  3000               	movlw	0
  8002  05F8  1803               	skipnc
  8003  05F9  3001               	movlw	1
  8004  05FA  07C2               	addwf	___ftadd@f2+1,f
  8005  05FB  3000               	movlw	0
  8006  05FC  1803               	skipnc
  8007  05FD  3001               	movlw	1
  8008  05FE  07C3               	addwf	___ftadd@f2+2,f
  8009  05FF                     l5182:	
  8010  05FF  01C8               	clrf	___ftadd@sign
  8011  0600  083E               	movf	___ftadd@f1,w
  8012  0601  07C1               	addwf	___ftadd@f2,f
  8013  0602  083F               	movf	___ftadd@f1+1,w
  8014  0603  3DC2               	addwfc	___ftadd@f2+1,f
  8015  0604  0840               	movf	___ftadd@f1+2,w
  8016  0605  3DC3               	addwfc	___ftadd@f2+2,f
  8017  0606  1FC3               	btfss	___ftadd@f2+2,7
  8018  0607  2E1A               	goto	l5192
  8019  0608  30FF               	movlw	255
  8020  0609  06C1               	xorwf	___ftadd@f2,f
  8021  060A  30FF               	movlw	255
  8022  060B  06C2               	xorwf	___ftadd@f2+1,f
  8023  060C  30FF               	movlw	255
  8024  060D  06C3               	xorwf	___ftadd@f2+2,f
  8025  060E  3001               	movlw	1
  8026  060F  07C1               	addwf	___ftadd@f2,f
  8027  0610  3000               	movlw	0
  8028  0611  1803               	skipnc
  8029  0612  3001               	movlw	1
  8030  0613  07C2               	addwf	___ftadd@f2+1,f
  8031  0614  3000               	movlw	0
  8032  0615  1803               	skipnc
  8033  0616  3001               	movlw	1
  8034  0617  07C3               	addwf	___ftadd@f2+2,f
  8035  0618  01C8               	clrf	___ftadd@sign
  8036  0619  0AC8               	incf	___ftadd@sign,f
  8037  061A                     l5192:	
  8038  061A  0841               	movf	___ftadd@f2,w
  8039  061B  00A0               	movwf	___ftpack@arg
  8040  061C  0842               	movf	___ftadd@f2+1,w
  8041  061D  00A1               	movwf	___ftpack@arg+1
  8042  061E  0843               	movf	___ftadd@f2+2,w
  8043  061F  00A2               	movwf	___ftpack@arg+2
  8044  0620  084A               	movf	___ftadd@exp1,w
  8045  0621  00C4               	movwf	??___ftadd
  8046  0622  0844               	movf	??___ftadd,w
  8047  0623  00A3               	movwf	___ftpack@exp
  8048  0624  0848               	movf	___ftadd@sign,w
  8049  0625  00C5               	movwf	??___ftadd+1
  8050  0626  0845               	movf	??___ftadd+1,w
  8051  0627  00A4               	movwf	___ftpack@sign
  8052  0628  3188  202D         	fcall	___ftpack
  8053  062A  0020               	movlb	0	; select bank0
  8054  062B  0820               	movf	?___ftpack,w
  8055  062C  00BE               	movwf	?___ftadd
  8056  062D  0821               	movf	?___ftpack+1,w
  8057  062E  00BF               	movwf	?___ftadd+1
  8058  062F  0822               	movf	?___ftpack+2,w
  8059  0630  00C0               	movwf	?___ftadd+2
  8060  0631  0008               	return
  8061  0632                     __end_of___ftadd:	
  8062                           
  8063                           	psect	text31
  8064  1F7C                     __ptext31:	
  8065 ;; *************** function _RF_RxDisable *****************
  8066 ;; Defined at:
  8067 ;;		line 215 in file "../src/RF_Control_B1.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  rf              1    wreg     unsigned char 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  rf              1    4[BANK0 ] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;		None               void
  8074 ;; Registers used:
  8075 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;Total ram usage:        1 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    7
  8088 ;; This function calls:
  8089 ;;		_CC2500_WriteCommand
  8090 ;;		_RfPointSelect
  8091 ;; This function is called by:
  8092 ;;		_setRF_Main
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           
  8097                           ;psect for function _RF_RxDisable
  8098  1F7C                     _RF_RxDisable:	
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8102                           ;RF_RxDisable@rf stored from wreg
  8103  1F7C  0020               	movlb	0	; select bank0
  8104  1F7D  00A4               	movwf	RF_RxDisable@rf
  8105                           
  8106                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
  8107  1F7E  0824               	movf	RF_RxDisable@rf,w
  8108  1F7F  319D  2520  319F   	fcall	_RfPointSelect
  8109                           
  8110                           ;RF_Control_B1.c: 218: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8111  1F82  087A               	movf	_RF,w
  8112  1F83  0086               	movwf	6
  8113  1F84  0187               	clrf	7
  8114  1F85  1881               	btfsc	1,1
  8115  1F86  2F8C               	goto	l6098
  8116  1F87  087A               	movf	_RF,w
  8117  1F88  0086               	movwf	6
  8118  1F89  0187               	clrf	7
  8119  1F8A  1D81               	btfss	1,3
  8120  1F8B  0008               	return
  8121  1F8C                     l6098:	
  8122                           
  8123                           ;RF_Control_B1.c: 219: RF->RxStatus = 0;
  8124  1F8C  087A               	movf	_RF,w
  8125  1F8D  0086               	movwf	6
  8126  1F8E  0187               	clrf	7
  8127  1F8F  1181               	bcf	1,3
  8128                           
  8129                           ;RF_Control_B1.c: 220: RF->ReceiveGO = 0;
  8130  1F90  087A               	movf	_RF,w
  8131  1F91  0086               	movwf	6
  8132  1F92  0187               	clrf	7
  8133  1F93  1081               	bcf	1,1
  8134                           
  8135                           ;RF_Control_B1.c: 221: CC2500_WriteCommand(0x36);
  8136  1F94  3036               	movlw	54
  8137  1F95  319D  2569  319F   	fcall	_CC2500_WriteCommand
  8138                           
  8139                           ;RF_Control_B1.c: 222: CC2500_WriteCommand(0x3A);
  8140  1F98  303A               	movlw	58
  8141  1F99  319D  2569         	fcall	_CC2500_WriteCommand
  8142  1F9B  0008               	return
  8143  1F9C                     __end_of_RF_RxDisable:	
  8144                           
  8145                           	psect	text32
  8146  12E8                     __ptext32:	
  8147 ;; *************** function _CC2500_TxData *****************
  8148 ;; Defined at:
  8149 ;;		line 32 in file "../src/CC2500_B1.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;Total ram usage:        2 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    7
  8170 ;; This function calls:
  8171 ;;		_CC2500_WriteByte
  8172 ;;		_CC2500_WriteCommand
  8173 ;; This function is called by:
  8174 ;;		_setRF_Main
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _CC2500_TxData
  8180  12E8                     _CC2500_TxData:	
  8181                           
  8182                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8183                           ;CC2500_B1.c: 35: RC4 = 0;
  8184                           
  8185                           ;incstack = 0
  8186                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8187  12E8  0020               	movlb	0	; select bank0
  8188  12E9  120E               	bcf	14,4	;volatile
  8189                           
  8190                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8191  12EA  307F               	movlw	127
  8192  12EB  00A4               	movwf	??_CC2500_TxData
  8193  12EC  0824               	movf	??_CC2500_TxData,w
  8194  12ED  0021               	movlb	1	; select bank1
  8195  12EE  00C2               	movwf	_SPI0Buffer^(0+128)
  8196  12EF                     l255:	
  8197                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8198                           
  8199  12EF  0020               	movlb	0	; select bank0
  8200  12F0  190E               	btfsc	14,2	;volatile
  8201  12F1  2AEF               	goto	l255
  8202                           
  8203                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8204  12F2  319E  2668  3192   	fcall	_CC2500_WriteByte
  8205                           
  8206                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8207  12F5  0021               	movlb	1	; select bank1
  8208  12F6  0843               	movf	_Tx_Length^(0+128),w
  8209  12F7  0020               	movlb	0	; select bank0
  8210  12F8  00A4               	movwf	??_CC2500_TxData
  8211  12F9  0824               	movf	??_CC2500_TxData,w
  8212  12FA  0021               	movlb	1	; select bank1
  8213  12FB  00C2               	movwf	_SPI0Buffer^(0+128)
  8214                           
  8215                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8216  12FC  319E  2668  3192   	fcall	_CC2500_WriteByte
  8217                           
  8218                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8219  12FF  0020               	movlb	0	; select bank0
  8220  1300  01A5               	clrf	CC2500_TxData@loop_e
  8221  1301                     l5900:	
  8222  1301  0021               	movlb	1	; select bank1
  8223  1302  0843               	movf	_Tx_Length^(0+128),w
  8224  1303  0020               	movlb	0	; select bank0
  8225  1304  0225               	subwf	CC2500_TxData@loop_e,w
  8226  1305  1803               	btfsc	3,0
  8227  1306  2B19               	goto	l260
  8228                           
  8229                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8230  1307  0825               	movf	CC2500_TxData@loop_e,w
  8231  1308  3EA0               	addlw	_RF_Data& (0+255)
  8232  1309  0086               	movwf	6
  8233  130A  0187               	clrf	7
  8234  130B  0801               	movf	1,w
  8235  130C  00A4               	movwf	??_CC2500_TxData
  8236  130D  0824               	movf	??_CC2500_TxData,w
  8237  130E  0021               	movlb	1	; select bank1
  8238  130F  00C2               	movwf	_SPI0Buffer^(0+128)
  8239                           
  8240                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8241  1310  319E  2668  3192   	fcall	_CC2500_WriteByte
  8242  1313  3001               	movlw	1
  8243  1314  0020               	movlb	0	; select bank0
  8244  1315  00A4               	movwf	??_CC2500_TxData
  8245  1316  0824               	movf	??_CC2500_TxData,w
  8246  1317  07A5               	addwf	CC2500_TxData@loop_e,f
  8247  1318  2B01               	goto	l5900
  8248  1319                     l260:	
  8249                           
  8250                           ;CC2500_B1.c: 44: }
  8251                           ;CC2500_B1.c: 45: RC4 = 1;
  8252  1319  160E               	bsf	14,4	;volatile
  8253                           
  8254                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8255  131A  3035               	movlw	53
  8256  131B  319D  2569  3192   	fcall	_CC2500_WriteCommand
  8257  131E                     l261:	
  8258                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8259                           
  8260  131E  0020               	movlb	0	; select bank0
  8261  131F  1C0D               	btfss	13,0	;volatile
  8262  1320  2B1E               	goto	l261
  8263  1321                     l264:	
  8264                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8265                           
  8266  1321  180D               	btfsc	13,0	;volatile
  8267  1322  2B21               	goto	l264
  8268                           
  8269                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8270  1323  3036               	movlw	54
  8271  1324  319D  2569  3192   	fcall	_CC2500_WriteCommand
  8272                           
  8273                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8274  1327  303B               	movlw	59
  8275  1328  319D  2569         	fcall	_CC2500_WriteCommand
  8276                           
  8277                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8278  132A  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8279  132B  0008               	return
  8280  132C                     __end_of_CC2500_TxData:	
  8281                           
  8282                           	psect	text33
  8283  0707                     __ptext33:	
  8284 ;; *************** function _CC2500_RxData *****************
  8285 ;; Defined at:
  8286 ;;		line 57 in file "../src/CC2500_B1.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;		None
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;  loop_f          1   15[BANK0 ] unsigned char 
  8291 ;; Return value:  Size  Location     Type
  8292 ;;		None               void
  8293 ;; Registers used:
  8294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;Total ram usage:        3 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:    7
  8307 ;; This function calls:
  8308 ;;		_CC2500_ReadByte
  8309 ;;		_CC2500_ReadStatus
  8310 ;;		_CC2500_WriteByte
  8311 ;;		_CC2500_WriteCommand
  8312 ;;		_setBuz
  8313 ;; This function is called by:
  8314 ;;		_setRF_Main
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           
  8319                           ;psect for function _CC2500_RxData
  8320  0707                     _CC2500_RxData:	
  8321                           
  8322                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8323                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8324                           
  8325                           ;incstack = 0
  8326                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8327  0707  0020               	movlb	0	; select bank0
  8328  0708  180D               	btfsc	13,0	;volatile
  8329  0709  2F3A               	goto	l271
  8330  070A  2F3D               	goto	l5920
  8331  070B                     l5912:	
  8332                           ;CC2500_B1.c: 63: {
  8333                           ;CC2500_B1.c: 64: while (RB0 == 1) {
  8334                           
  8335                           
  8336                           ;CC2500_B1.c: 65: myMain->pcount1++;
  8337  070B  0021               	movlb	1	; select bank1
  8338  070C  086E               	movf	_myMain^(0+128),w
  8339  070D  3E10               	addlw	16
  8340  070E  0086               	movwf	6
  8341  070F  3001               	movlw	1	; select bank2/3
  8342  0710  0087               	movwf	7
  8343  0711  3001               	movlw	1
  8344  0712  0781               	addwf	1,f
  8345  0713  3141               	addfsr 1,1
  8346  0714  1803               	skipnc
  8347  0715  0A81               	incf	1,f
  8348                           
  8349                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
  8350  0716  086E               	movf	_myMain^(0+128),w
  8351  0717  3E10               	addlw	16
  8352  0718  0086               	movwf	6
  8353  0719  3001               	movlw	1	; select bank2/3
  8354  071A  0087               	movwf	7
  8355  071B  3F40               	moviw [0]fsr1
  8356  071C  0020               	movlb	0	; select bank0
  8357  071D  00AD               	movwf	??_CC2500_RxData
  8358  071E  3F41               	moviw [1]fsr1
  8359  071F  00AE               	movwf	??_CC2500_RxData+1
  8360  0720  3027               	movlw	39
  8361  0721  022E               	subwf	??_CC2500_RxData+1,w
  8362  0722  3010               	movlw	16
  8363  0723  1903               	skipnz
  8364  0724  022D               	subwf	??_CC2500_RxData,w
  8365  0725  1C03               	skipc
  8366  0726  2F3A               	goto	l271
  8367                           
  8368                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
  8369  0727  0021               	movlb	1	; select bank1
  8370  0728  086E               	movf	_myMain^(0+128),w
  8371  0729  3E10               	addlw	16
  8372  072A  0086               	movwf	6
  8373  072B  3001               	movlw	1	; select bank2/3
  8374  072C  0087               	movwf	7
  8375  072D  3000               	movlw	0
  8376  072E  3FC0               	movwi [0]fsr1
  8377  072F  3FC1               	movwi [1]fsr1
  8378                           
  8379                           ;CC2500_B1.c: 68: setBuz(1, 250);
  8380  0730  30FA               	movlw	250
  8381  0731  0020               	movlb	0	; select bank0
  8382  0732  00A9               	movwf	setBuz@time
  8383  0733  3000               	movlw	0
  8384  0734  00AA               	movwf	setBuz@time+1
  8385  0735  3001               	movlw	1
  8386  0736  318C  243C  3187   	fcall	_setBuz
  8387                           
  8388                           ;CC2500_B1.c: 69: break;
  8389  0739  2F3D               	goto	l5920
  8390  073A                     l271:	
  8391  073A  0020               	movlb	0	; select bank0
  8392  073B  180D               	btfsc	13,0	;volatile
  8393  073C  2F0B               	goto	l5912
  8394  073D                     l5920:	
  8395                           ;CC2500_B1.c: 70: }
  8396                           ;CC2500_B1.c: 71: };
  8397                           
  8398                           
  8399                           ;CC2500_B1.c: 72: }
  8400                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
  8401  073D  303B               	movlw	59
  8402  073E  319E  26E7  3187   	fcall	_CC2500_ReadStatus
  8403                           
  8404                           ;CC2500_B1.c: 75: if (s_data != 0) {
  8405  0741  0021               	movlb	1	; select bank1
  8406  0742  0846               	movf	_s_data^(0+128),w
  8407  0743  1903               	btfsc	3,2
  8408  0744  2FBD               	goto	l5962
  8409                           
  8410                           ;CC2500_B1.c: 76: RC4 = 0;
  8411  0745  0020               	movlb	0	; select bank0
  8412  0746  120E               	bcf	14,4	;volatile
  8413                           
  8414                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
  8415  0747  30FF               	movlw	255
  8416  0748  00AD               	movwf	??_CC2500_RxData
  8417  0749  082D               	movf	??_CC2500_RxData,w
  8418  074A  0021               	movlb	1	; select bank1
  8419  074B  00C2               	movwf	_SPI0Buffer^(0+128)
  8420  074C                     l276:	
  8421                           ;CC2500_B1.c: 78: while (RC2 == 1) {
  8422                           
  8423  074C  0020               	movlb	0	; select bank0
  8424  074D  1D0E               	btfss	14,2	;volatile
  8425  074E  2F7D               	goto	l5936
  8426                           
  8427                           ;CC2500_B1.c: 79: myMain->pcount2++;
  8428  074F  0021               	movlb	1	; select bank1
  8429  0750  086E               	movf	_myMain^(0+128),w
  8430  0751  3E12               	addlw	18
  8431  0752  0086               	movwf	6
  8432  0753  3001               	movlw	1	; select bank2/3
  8433  0754  0087               	movwf	7
  8434  0755  3001               	movlw	1
  8435  0756  0781               	addwf	1,f
  8436  0757  3141               	addfsr 1,1
  8437  0758  1803               	skipnc
  8438  0759  0A81               	incf	1,f
  8439                           
  8440                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
  8441  075A  086E               	movf	_myMain^(0+128),w
  8442  075B  3E12               	addlw	18
  8443  075C  0086               	movwf	6
  8444  075D  3001               	movlw	1	; select bank2/3
  8445  075E  0087               	movwf	7
  8446  075F  3F40               	moviw [0]fsr1
  8447  0760  0020               	movlb	0	; select bank0
  8448  0761  00AD               	movwf	??_CC2500_RxData
  8449  0762  3F41               	moviw [1]fsr1
  8450  0763  00AE               	movwf	??_CC2500_RxData+1
  8451  0764  3027               	movlw	39
  8452  0765  022E               	subwf	??_CC2500_RxData+1,w
  8453  0766  3010               	movlw	16
  8454  0767  1903               	skipnz
  8455  0768  022D               	subwf	??_CC2500_RxData,w
  8456  0769  1C03               	skipc
  8457  076A  2F4C               	goto	l276
  8458                           
  8459                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
  8460  076B  0021               	movlb	1	; select bank1
  8461  076C  086E               	movf	_myMain^(0+128),w
  8462  076D  3E12               	addlw	18
  8463  076E  0086               	movwf	6
  8464  076F  3001               	movlw	1	; select bank2/3
  8465  0770  0087               	movwf	7
  8466  0771  3000               	movlw	0
  8467  0772  3FC0               	movwi [0]fsr1
  8468  0773  3FC1               	movwi [1]fsr1
  8469                           
  8470                           ;CC2500_B1.c: 82: setBuz(2, 250);
  8471  0774  30FA               	movlw	250
  8472  0775  0020               	movlb	0	; select bank0
  8473  0776  00A9               	movwf	setBuz@time
  8474  0777  3000               	movlw	0
  8475  0778  00AA               	movwf	setBuz@time+1
  8476  0779  3002               	movlw	2
  8477  077A  318C  243C  3187   	fcall	_setBuz
  8478  077D                     l5936:	
  8479                           ;CC2500_B1.c: 83: break;
  8480                           
  8481                           
  8482                           ;CC2500_B1.c: 84: }
  8483                           ;CC2500_B1.c: 85: };
  8484                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8485  077D  319E  2668  3187   	fcall	_CC2500_WriteByte
  8486                           
  8487                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8488  0780  319F  2702  3187   	fcall	_CC2500_ReadByte
  8489                           
  8490                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8491  0783  0021               	movlb	1	; select bank1
  8492  0784  0842               	movf	_SPI0Buffer^(0+128),w
  8493  0785  0020               	movlb	0	; select bank0
  8494  0786  00AD               	movwf	??_CC2500_RxData
  8495  0787  082D               	movf	??_CC2500_RxData,w
  8496  0788  0021               	movlb	1	; select bank1
  8497  0789  00C1               	movwf	_Rx_Length^(0+128)
  8498                           
  8499                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8500  078A  0020               	movlb	0	; select bank0
  8501  078B  01AF               	clrf	CC2500_RxData@loop_f
  8502  078C                     l5948:	
  8503  078C  0021               	movlb	1	; select bank1
  8504  078D  0841               	movf	_Rx_Length^(0+128),w
  8505  078E  0020               	movlb	0	; select bank0
  8506  078F  022F               	subwf	CC2500_RxData@loop_f,w
  8507  0790  1803               	btfsc	3,0
  8508  0791  2FA4               	goto	l5950
  8509                           
  8510                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8511  0792  319F  2702  3187   	fcall	_CC2500_ReadByte
  8512                           
  8513                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8514  0795  0021               	movlb	1	; select bank1
  8515  0796  0842               	movf	_SPI0Buffer^(0+128),w
  8516  0797  0020               	movlb	0	; select bank0
  8517  0798  00AD               	movwf	??_CC2500_RxData
  8518  0799  082F               	movf	CC2500_RxData@loop_f,w
  8519  079A  3EA0               	addlw	_RF_Data& (0+255)
  8520  079B  0086               	movwf	6
  8521  079C  0187               	clrf	7
  8522  079D  082D               	movf	??_CC2500_RxData,w
  8523  079E  0081               	movwf	1
  8524  079F  3001               	movlw	1
  8525  07A0  00AD               	movwf	??_CC2500_RxData
  8526  07A1  082D               	movf	??_CC2500_RxData,w
  8527  07A2  07AF               	addwf	CC2500_RxData@loop_f,f
  8528  07A3  2F8C               	goto	l5948
  8529  07A4                     l5950:	
  8530                           
  8531                           ;CC2500_B1.c: 94: }
  8532                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8533  07A4  319F  2702  3187   	fcall	_CC2500_ReadByte
  8534                           
  8535                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8536  07A7  0021               	movlb	1	; select bank1
  8537  07A8  0842               	movf	_SPI0Buffer^(0+128),w
  8538  07A9  0020               	movlb	0	; select bank0
  8539  07AA  00AD               	movwf	??_CC2500_RxData
  8540  07AB  082D               	movf	??_CC2500_RxData,w
  8541  07AC  0021               	movlb	1	; select bank1
  8542  07AD  00C0               	movwf	_RSSI^(0+128)
  8543                           
  8544                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8545  07AE  319F  2702  3187   	fcall	_CC2500_ReadByte
  8546                           
  8547                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  8548  07B1  0021               	movlb	1	; select bank1
  8549  07B2  0842               	movf	_SPI0Buffer^(0+128),w
  8550  07B3  0020               	movlb	0	; select bank0
  8551  07B4  00AD               	movwf	??_CC2500_RxData
  8552  07B5  082D               	movf	??_CC2500_RxData,w
  8553  07B6  0021               	movlb	1	; select bank1
  8554  07B7  00B8               	movwf	_CRC^(0+128)
  8555                           
  8556                           ;CC2500_B1.c: 99: RC4 = 1;
  8557  07B8  0020               	movlb	0	; select bank0
  8558  07B9  160E               	bsf	14,4	;volatile
  8559                           
  8560                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  8561  07BA  0021               	movlb	1	; select bank1
  8562  07BB  1BB8               	btfsc	_CRC^(0+128),7
  8563                           
  8564                           ;CC2500_B1.c: 101: Receive_OK = 1;
  8565  07BC  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8566  07BD                     l5962:	
  8567                           
  8568                           ;CC2500_B1.c: 102: }
  8569                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  8570  07BD  3036               	movlw	54
  8571  07BE  319D  2569  3187   	fcall	_CC2500_WriteCommand
  8572                           
  8573                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  8574  07C1  303A               	movlw	58
  8575  07C2  319D  2569         	fcall	_CC2500_WriteCommand
  8576  07C4  0008               	return
  8577  07C5                     __end_of_CC2500_RxData:	
  8578                           
  8579                           	psect	text34
  8580  1EE7                     __ptext34:	
  8581 ;; *************** function _CC2500_ReadStatus *****************
  8582 ;; Defined at:
  8583 ;;		line 277 in file "../src/CC2500_B1.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  status_addr     1    wreg     unsigned char 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8588 ;; Return value:  Size  Location     Type
  8589 ;;		None               void
  8590 ;; Registers used:
  8591 ;;		wreg, status,2, status,0, pclath, cstack
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;Total ram usage:        2 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    6
  8604 ;; This function calls:
  8605 ;;		_CC2500_ReadByte
  8606 ;;		_CC2500_WriteByte
  8607 ;; This function is called by:
  8608 ;;		_CC2500_RxData
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           
  8613                           ;psect for function _CC2500_ReadStatus
  8614  1EE7                     _CC2500_ReadStatus:	
  8615                           
  8616                           ;incstack = 0
  8617                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8618                           ;CC2500_ReadStatus@status_addr stored from wreg
  8619  1EE7  0020               	movlb	0	; select bank0
  8620  1EE8  00A3               	movwf	CC2500_ReadStatus@status_addr
  8621                           
  8622                           ;CC2500_B1.c: 278: RC4 = 0;
  8623  1EE9  120E               	bcf	14,4	;volatile
  8624                           
  8625                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
  8626  1EEA  0823               	movf	CC2500_ReadStatus@status_addr,w
  8627  1EEB  3EC0               	addlw	192
  8628  1EEC  00A2               	movwf	??_CC2500_ReadStatus
  8629  1EED  0822               	movf	??_CC2500_ReadStatus,w
  8630  1EEE  0021               	movlb	1	; select bank1
  8631  1EEF  00C2               	movwf	_SPI0Buffer^(0+128)
  8632  1EF0                     l353:	
  8633                           ;CC2500_B1.c: 281: while (RC2 == 1);
  8634                           
  8635  1EF0  0020               	movlb	0	; select bank0
  8636  1EF1  190E               	btfsc	14,2	;volatile
  8637  1EF2  2EF0               	goto	l353
  8638                           
  8639                           ;CC2500_B1.c: 283: CC2500_WriteByte();
  8640  1EF3  319E  2668  319E   	fcall	_CC2500_WriteByte
  8641                           
  8642                           ;CC2500_B1.c: 284: CC2500_ReadByte();
  8643  1EF6  319F  2702         	fcall	_CC2500_ReadByte
  8644                           
  8645                           ;CC2500_B1.c: 285: RC4 = 1;
  8646  1EF8  0020               	movlb	0	; select bank0
  8647  1EF9  160E               	bsf	14,4	;volatile
  8648                           
  8649                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
  8650  1EFA  0021               	movlb	1	; select bank1
  8651  1EFB  0842               	movf	_SPI0Buffer^(0+128),w
  8652  1EFC  0020               	movlb	0	; select bank0
  8653  1EFD  00A2               	movwf	??_CC2500_ReadStatus
  8654  1EFE  0822               	movf	??_CC2500_ReadStatus,w
  8655  1EFF  0021               	movlb	1	; select bank1
  8656  1F00  00C6               	movwf	_s_data^(0+128)
  8657  1F01  0008               	return
  8658  1F02                     __end_of_CC2500_ReadStatus:	
  8659                           
  8660                           	psect	text35
  8661  1F02                     __ptext35:	
  8662 ;; *************** function _CC2500_ReadByte *****************
  8663 ;; Defined at:
  8664 ;;		line 221 in file "../src/CC2500_B1.c"
  8665 ;; Parameters:    Size  Location     Type
  8666 ;;		None
  8667 ;; Auto vars:     Size  Location     Type
  8668 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8669 ;; Return value:  Size  Location     Type
  8670 ;;		None               void
  8671 ;; Registers used:
  8672 ;;		wreg, status,2, status,0
  8673 ;; Tracked objects:
  8674 ;;		On entry : 0/0
  8675 ;;		On exit  : 0/0
  8676 ;;		Unchanged: 0/0
  8677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8681 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8682 ;;Total ram usage:        2 bytes
  8683 ;; Hardware stack levels used:    1
  8684 ;; Hardware stack levels required when called:    5
  8685 ;; This function calls:
  8686 ;;		Nothing
  8687 ;; This function is called by:
  8688 ;;		_CC2500_RxData
  8689 ;;		_CC2500_ReadStatus
  8690 ;;		_CC2500_ReadREG
  8691 ;; This function uses a non-reentrant model
  8692 ;;
  8693                           
  8694                           
  8695                           ;psect for function _CC2500_ReadByte
  8696  1F02                     _CC2500_ReadByte:	
  8697                           
  8698                           ;CC2500_B1.c: 222: unsigned char loop_b;
  8699                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
  8700                           
  8701                           ;incstack = 0
  8702                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8703  1F02  0020               	movlb	0	; select bank0
  8704  1F03  01A1               	clrf	CC2500_ReadByte@loop_b
  8705  1F04                     L8:	
  8706  1F04  3008               	movlw	8
  8707  1F05  0221               	subwf	CC2500_ReadByte@loop_b,w
  8708  1F06  1803               	btfsc	3,0
  8709  1F07  0008               	return
  8710                           
  8711                           ;CC2500_B1.c: 224: RC1 = 1;
  8712  1F08  148E               	bsf	14,1	;volatile
  8713                           
  8714                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
  8715  1F09  1003               	clrc
  8716  1F0A  0021               	movlb	1	; select bank1
  8717  1F0B  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8718                           
  8719                           ;CC2500_B1.c: 226: if (RC2 == 1)
  8720  1F0C  0020               	movlb	0	; select bank0
  8721  1F0D  1D0E               	btfss	14,2	;volatile
  8722  1F0E  2F12               	goto	l5648
  8723                           
  8724                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
  8725  1F0F  0021               	movlb	1	; select bank1
  8726  1F10  1442               	bsf	_SPI0Buffer^(0+128),0
  8727  1F11  2F18               	goto	l5650
  8728  1F12                     l5648:	
  8729                           
  8730                           ;CC2500_B1.c: 228: else
  8731                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
  8732  1F12  30FE               	movlw	254
  8733  1F13  0020               	movlb	0	; select bank0
  8734  1F14  00A0               	movwf	??_CC2500_ReadByte
  8735  1F15  0820               	movf	??_CC2500_ReadByte,w
  8736  1F16  0021               	movlb	1	; select bank1
  8737  1F17  05C2               	andwf	_SPI0Buffer^(0+128),f
  8738  1F18                     l5650:	
  8739                           
  8740                           ;CC2500_B1.c: 230: RC1 = 0;
  8741  1F18  0020               	movlb	0	; select bank0
  8742  1F19  108E               	bcf	14,1	;volatile
  8743  1F1A  3001               	movlw	1
  8744  1F1B  00A0               	movwf	??_CC2500_ReadByte
  8745  1F1C  0820               	movf	??_CC2500_ReadByte,w
  8746  1F1D  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8747  1F1E  2F04               	goto	L8
  8748  1F1F                     __end_of_CC2500_ReadByte:	
  8749                           
  8750                           	psect	text36
  8751  1BFB                     __ptext36:	
  8752 ;; *************** function _RF_Initialization *****************
  8753 ;; Defined at:
  8754 ;;		line 19 in file "../src/RF_Control_B1.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;		None
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;		None
  8759 ;; Return value:  Size  Location     Type
  8760 ;;		None               void
  8761 ;; Registers used:
  8762 ;;		wreg, status,2, status,0, pclath, cstack
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8772 ;;Total ram usage:        0 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; Hardware stack levels required when called:    6
  8775 ;; This function calls:
  8776 ;;		_setRF_Initialization
  8777 ;; This function is called by:
  8778 ;;		_main
  8779 ;; This function uses a non-reentrant model
  8780 ;;
  8781                           
  8782                           
  8783                           ;psect for function _RF_Initialization
  8784  1BFB                     _RF_Initialization:	
  8785                           
  8786                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
  8787                           
  8788                           ;incstack = 0
  8789                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8790  1BFB  3001               	movlw	1
  8791  1BFC  319C  2434         	fcall	_setRF_Initialization
  8792  1BFE  0008               	return
  8793  1BFF                     __end_of_RF_Initialization:	
  8794                           
  8795                           	psect	text37
  8796  1C34                     __ptext37:	
  8797 ;; *************** function _setRF_Initialization *****************
  8798 ;; Defined at:
  8799 ;;		line 56 in file "../src/RF_Control_B1.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  rf              1    wreg     unsigned char 
  8802 ;; Auto vars:     Size  Location     Type
  8803 ;;  rf              1    0[COMMON] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;		None               void
  8806 ;; Registers used:
  8807 ;;		wreg
  8808 ;; Tracked objects:
  8809 ;;		On entry : 0/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;Total ram usage:        1 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    5
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_RF_Initialization
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _setRF_Initialization
  8829  1C34                     _setRF_Initialization:	
  8830                           
  8831                           ;RF_Control_B1.c: 59: Tx_Length = 21;
  8832                           
  8833                           ;incstack = 0
  8834                           ; Regs used in _setRF_Initialization: [wreg]
  8835  1C34  3015               	movlw	21
  8836  1C35  0020               	movlb	0	; select bank0
  8837  1C36  00A0               	movwf	??_setRF_Initialization
  8838  1C37  0820               	movf	??_setRF_Initialization,w
  8839  1C38  0021               	movlb	1	; select bank1
  8840  1C39  00C3               	movwf	_Tx_Length^(0+128)
  8841  1C3A  0008               	return
  8842  1C3B                     __end_of_setRF_Initialization:	
  8843                           
  8844                           	psect	text38
  8845  1BE0                     __ptext38:	
  8846 ;; *************** function _PowerFault_Main *****************
  8847 ;; Defined at:
  8848 ;;		line 22 in file "../src/PowerFault_B1.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;		None
  8853 ;; Return value:  Size  Location     Type
  8854 ;;		None               void
  8855 ;; Registers used:
  8856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;Total ram usage:        0 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:   11
  8869 ;; This function calls:
  8870 ;;		_setPowerFault_Main
  8871 ;; This function is called by:
  8872 ;;		_main
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           
  8877                           ;psect for function _PowerFault_Main
  8878  1BE0                     _PowerFault_Main:	
  8879                           
  8880                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  8881                           
  8882                           ;incstack = 0
  8883                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8884  1BE0  3183  233E         	fcall	_setPowerFault_Main
  8885  1BE2  0008               	return
  8886  1BE3                     __end_of_PowerFault_Main:	
  8887                           
  8888                           	psect	text39
  8889  033E                     __ptext39:	
  8890 ;; *************** function _setPowerFault_Main *****************
  8891 ;; Defined at:
  8892 ;;		line 61 in file "../src/PowerFault_B1.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;		None
  8895 ;; Auto vars:     Size  Location     Type
  8896 ;;		None
  8897 ;; Return value:  Size  Location     Type
  8898 ;;		None               void
  8899 ;; Registers used:
  8900 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8901 ;; Tracked objects:
  8902 ;;		On entry : 0/0
  8903 ;;		On exit  : 0/0
  8904 ;;		Unchanged: 0/0
  8905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;Total ram usage:        2 bytes
  8911 ;; Hardware stack levels used:    1
  8912 ;; Hardware stack levels required when called:   10
  8913 ;; This function calls:
  8914 ;;		_setPowerFault_Exceptions
  8915 ;; This function is called by:
  8916 ;;		_PowerFault_Main
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _setPowerFault_Main
  8922  033E                     _setPowerFault_Main:	
  8923                           
  8924                           ;PowerFault_B1.c: 63: if(PF->Enable)
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8928  033E  0021               	movlb	1	; select bank1
  8929  033F  083E               	movf	_PF^(0+128),w
  8930  0340  0086               	movwf	6
  8931  0341  3001               	movlw	1	; select bank2/3
  8932  0342  0087               	movwf	7
  8933  0343  1C01               	btfss	1,0
  8934  0344  0008               	return
  8935                           
  8936                           ;PowerFault_B1.c: 64: {
  8937                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  8938  0345  083E               	movf	_PF^(0+128),w
  8939  0346  0086               	movwf	6
  8940  0347  3001               	movlw	1	; select bank2/3
  8941  0348  0087               	movwf	7
  8942  0349  1981               	btfsc	1,3
  8943  034A  2B7A               	goto	l6584
  8944                           
  8945                           ;PowerFault_B1.c: 66: {
  8946                           ;PowerFault_B1.c: 67: PF->Time++;
  8947  034B  083E               	movf	_PF^(0+128),w
  8948  034C  3E02               	addlw	2
  8949  034D  0086               	movwf	6
  8950  034E  3001               	movlw	1	; select bank2/3
  8951  034F  0087               	movwf	7
  8952  0350  3001               	movlw	1
  8953  0351  0781               	addwf	1,f
  8954  0352  3141               	addfsr 1,1
  8955  0353  1803               	skipnc
  8956  0354  0A81               	incf	1,f
  8957                           
  8958                           ;PowerFault_B1.c: 69: {
  8959                           ;PowerFault_B1.c: 70: if(1 && 1)
  8960  0355  083E               	movf	_PF^(0+128),w
  8961  0356  3E02               	addlw	2
  8962  0357  0086               	movwf	6
  8963  0358  3001               	movlw	1	; select bank2/3
  8964  0359  0087               	movwf	7
  8965  035A  3F40               	moviw [0]fsr1
  8966  035B  0020               	movlb	0	; select bank0
  8967  035C  00B0               	movwf	??_setPowerFault_Main
  8968  035D  3F41               	moviw [1]fsr1
  8969  035E  00B1               	movwf	??_setPowerFault_Main+1
  8970  035F  3002               	movlw	2
  8971  0360  0231               	subwf	??_setPowerFault_Main+1,w
  8972  0361  30BC               	movlw	188
  8973  0362  1903               	skipnz
  8974  0363  0230               	subwf	??_setPowerFault_Main,w
  8975  0364  1C03               	skipc
  8976  0365  0008               	return
  8977                           
  8978                           ;PowerFault_B1.c: 71: {
  8979                           ;PowerFault_B1.c: 72: PF->Time=0;
  8980  0366  0021               	movlb	1	; select bank1
  8981  0367  083E               	movf	_PF^(0+128),w
  8982  0368  3E02               	addlw	2
  8983  0369  0086               	movwf	6
  8984  036A  3001               	movlw	1	; select bank2/3
  8985  036B  0087               	movwf	7
  8986  036C  3000               	movlw	0
  8987  036D  3FC0               	movwi [0]fsr1
  8988  036E  3FC1               	movwi [1]fsr1
  8989                           
  8990                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  8991  036F  083E               	movf	_PF^(0+128),w
  8992  0370  0086               	movwf	6
  8993  0371  3001               	movlw	1	; select bank2/3
  8994  0372  0087               	movwf	7
  8995  0373  1581               	bsf	1,3
  8996                           
  8997                           ;PowerFault_B1.c: 74: PF->Safe=0;
  8998  0374  083E               	movf	_PF^(0+128),w
  8999  0375  0086               	movwf	6
  9000  0376  3001               	movlw	1	; select bank2/3
  9001  0377  0087               	movwf	7
  9002  0378  1101               	bcf	1,2
  9003                           
  9004                           ;PowerFault_B1.c: 75: }
  9005  0379  0008               	return
  9006  037A                     l6584:	
  9007                           ;PowerFault_B1.c: 79: }
  9008                           ;PowerFault_B1.c: 80: }
  9009                           ;PowerFault_B1.c: 81: }
  9010                           
  9011                           ;PowerFault_B1.c: 76: else
  9012                           ;PowerFault_B1.c: 77: {
  9013                           ;PowerFault_B1.c: 78: PF->Time=700;
  9014                           
  9015                           
  9016                           ;PowerFault_B1.c: 82: else
  9017                           ;PowerFault_B1.c: 83: {
  9018                           ;PowerFault_B1.c: 84: PF->Time++;
  9019  037A  083E               	movf	_PF^(0+128),w
  9020  037B  3E02               	addlw	2
  9021  037C  0086               	movwf	6
  9022  037D  3001               	movlw	1	; select bank2/3
  9023  037E  0087               	movwf	7
  9024  037F  3001               	movlw	1
  9025  0380  0781               	addwf	1,f
  9026  0381  3141               	addfsr 1,1
  9027  0382  1803               	skipnc
  9028  0383  0A81               	incf	1,f
  9029                           
  9030                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9031  0384  083E               	movf	_PF^(0+128),w
  9032  0385  3E02               	addlw	2
  9033  0386  0086               	movwf	6
  9034  0387  3001               	movlw	1	; select bank2/3
  9035  0388  0087               	movwf	7
  9036  0389  3F40               	moviw [0]fsr1
  9037  038A  0020               	movlb	0	; select bank0
  9038  038B  00B0               	movwf	??_setPowerFault_Main
  9039  038C  3F41               	moviw [1]fsr1
  9040  038D  00B1               	movwf	??_setPowerFault_Main+1
  9041  038E  3000               	movlw	0
  9042  038F  0231               	subwf	??_setPowerFault_Main+1,w
  9043  0390  3002               	movlw	2
  9044  0391  1903               	skipnz
  9045  0392  0230               	subwf	??_setPowerFault_Main,w
  9046  0393  1C03               	skipc
  9047  0394  0008               	return
  9048                           
  9049                           ;PowerFault_B1.c: 86: {
  9050                           ;PowerFault_B1.c: 87: PF->Time=0;
  9051  0395  0021               	movlb	1	; select bank1
  9052  0396  083E               	movf	_PF^(0+128),w
  9053  0397  3E02               	addlw	2
  9054  0398  0086               	movwf	6
  9055  0399  3001               	movlw	1	; select bank2/3
  9056  039A  0087               	movwf	7
  9057  039B  3000               	movlw	0
  9058  039C  3FC0               	movwi [0]fsr1
  9059  039D  3FC1               	movwi [1]fsr1
  9060                           
  9061                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9062  039E  083E               	movf	_PF^(0+128),w
  9063  039F  0086               	movwf	6
  9064  03A0  3001               	movlw	1	; select bank2/3
  9065  03A1  0087               	movwf	7
  9066  03A2  1181               	bcf	1,3
  9067                           
  9068                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9069  03A3  083E               	movf	_PF^(0+128),w
  9070  03A4  0086               	movwf	6
  9071  03A5  3001               	movlw	1	; select bank2/3
  9072  03A6  0087               	movwf	7
  9073  03A7  1C81               	btfss	1,1
  9074  03A8  2BE9               	goto	l6604
  9075                           
  9076                           ;PowerFault_B1.c: 91: {
  9077                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9078  03A9  083E               	movf	_PF^(0+128),w
  9079  03AA  3E04               	addlw	4
  9080  03AB  0086               	movwf	6
  9081  03AC  3001               	movlw	1	; select bank2/3
  9082  03AD  0087               	movwf	7
  9083  03AE  3F40               	moviw [0]fsr1
  9084  03AF  0020               	movlb	0	; select bank0
  9085  03B0  00B0               	movwf	??_setPowerFault_Main
  9086  03B1  3F41               	moviw [1]fsr1
  9087  03B2  00B1               	movwf	??_setPowerFault_Main+1
  9088  03B3  3001               	movlw	1
  9089  03B4  0231               	subwf	??_setPowerFault_Main+1,w
  9090  03B5  3091               	movlw	145
  9091  03B6  1903               	skipnz
  9092  03B7  0230               	subwf	??_setPowerFault_Main,w
  9093  03B8  1803               	skipnc
  9094  03B9  2C29               	goto	l6616
  9095  03BA  0021               	movlb	1	; select bank1
  9096  03BB  083E               	movf	_PF^(0+128),w
  9097  03BC  3E04               	addlw	4
  9098  03BD  0086               	movwf	6
  9099  03BE  3001               	movlw	1	; select bank2/3
  9100  03BF  0087               	movwf	7
  9101  03C0  3F40               	moviw [0]fsr1
  9102  03C1  0020               	movlb	0	; select bank0
  9103  03C2  00B0               	movwf	??_setPowerFault_Main
  9104  03C3  3F41               	moviw [1]fsr1
  9105  03C4  00B1               	movwf	??_setPowerFault_Main+1
  9106  03C5  3000               	movlw	0
  9107  03C6  0231               	subwf	??_setPowerFault_Main+1,w
  9108  03C7  30C8               	movlw	200
  9109  03C8  1903               	skipnz
  9110  03C9  0230               	subwf	??_setPowerFault_Main,w
  9111  03CA  1C03               	skipc
  9112  03CB  2C29               	goto	l6616
  9113                           
  9114                           ;PowerFault_B1.c: 93: {
  9115                           ;PowerFault_B1.c: 94: PF->Count++;
  9116  03CC  3001               	movlw	1
  9117  03CD  00B0               	movwf	??_setPowerFault_Main
  9118  03CE  0021               	movlb	1	; select bank1
  9119  03CF  0A3E               	incf	_PF^(0+128),w
  9120  03D0  0086               	movwf	6
  9121  03D1  3001               	movlw	1	; select bank2/3
  9122  03D2  0087               	movwf	7
  9123  03D3  0020               	movlb	0	; select bank0
  9124  03D4  0830               	movf	??_setPowerFault_Main,w
  9125  03D5  0781               	addwf	1,f
  9126                           
  9127                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
  9128  03D6  0021               	movlb	1	; select bank1
  9129  03D7  0A3E               	incf	_PF^(0+128),w
  9130  03D8  0086               	movwf	6
  9131  03D9  3001               	movlw	1	; select bank2/3
  9132  03DA  0087               	movwf	7
  9133  03DB  3002               	movlw	2
  9134  03DC  0201               	subwf	1,w
  9135  03DD  1C03               	skipc
  9136  03DE  2C2F               	goto	l6618
  9137                           
  9138                           ;PowerFault_B1.c: 96: {
  9139                           ;PowerFault_B1.c: 97: PF->Count=0;
  9140  03DF  0A3E               	incf	_PF^(0+128),w
  9141  03E0  0086               	movwf	6
  9142  03E1  3001               	movlw	1	; select bank2/3
  9143  03E2  0087               	movwf	7
  9144  03E3  0181               	clrf	1
  9145                           
  9146                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
  9147  03E4  3000               	movlw	0
  9148  03E5  3193  2371  3183   	fcall	_setPowerFault_Exceptions
  9149                           
  9150                           ;PowerFault_B1.c: 99: }
  9151                           ;PowerFault_B1.c: 100: }
  9152  03E8  2C2F               	goto	l6618
  9153  03E9                     l6604:	
  9154                           ;PowerFault_B1.c: 104: }
  9155                           ;PowerFault_B1.c: 105: }
  9156                           
  9157                           ;PowerFault_B1.c: 101: else
  9158                           ;PowerFault_B1.c: 102: {
  9159                           ;PowerFault_B1.c: 103: PF->Count=0;
  9160                           
  9161                           
  9162                           ;PowerFault_B1.c: 106: else
  9163                           ;PowerFault_B1.c: 107: {
  9164                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
  9165  03E9  083E               	movf	_PF^(0+128),w
  9166  03EA  3E04               	addlw	4
  9167  03EB  0086               	movwf	6
  9168  03EC  3001               	movlw	1	; select bank2/3
  9169  03ED  0087               	movwf	7
  9170  03EE  3F40               	moviw [0]fsr1
  9171  03EF  0020               	movlb	0	; select bank0
  9172  03F0  00B0               	movwf	??_setPowerFault_Main
  9173  03F1  3F41               	moviw [1]fsr1
  9174  03F2  00B1               	movwf	??_setPowerFault_Main+1
  9175  03F3  3001               	movlw	1
  9176  03F4  0231               	subwf	??_setPowerFault_Main+1,w
  9177  03F5  3090               	movlw	144
  9178  03F6  1903               	skipnz
  9179  03F7  0230               	subwf	??_setPowerFault_Main,w
  9180  03F8  1803               	skipnc
  9181  03F9  2C0C               	goto	l6608
  9182  03FA  0021               	movlb	1	; select bank1
  9183  03FB  083E               	movf	_PF^(0+128),w
  9184  03FC  3E04               	addlw	4
  9185  03FD  0086               	movwf	6
  9186  03FE  3001               	movlw	1	; select bank2/3
  9187  03FF  0087               	movwf	7
  9188  0400  3F40               	moviw [0]fsr1
  9189  0401  0020               	movlb	0	; select bank0
  9190  0402  00B0               	movwf	??_setPowerFault_Main
  9191  0403  3F41               	moviw [1]fsr1
  9192  0404  00B1               	movwf	??_setPowerFault_Main+1
  9193  0405  3000               	movlw	0
  9194  0406  0231               	subwf	??_setPowerFault_Main+1,w
  9195  0407  30D3               	movlw	211
  9196  0408  1903               	skipnz
  9197  0409  0230               	subwf	??_setPowerFault_Main,w
  9198  040A  1803               	skipnc
  9199  040B  2C29               	goto	l6616
  9200  040C                     l6608:	
  9201                           
  9202                           ;PowerFault_B1.c: 109: {
  9203                           ;PowerFault_B1.c: 110: PF->Count++;
  9204  040C  3001               	movlw	1
  9205  040D  00B0               	movwf	??_setPowerFault_Main
  9206  040E  0021               	movlb	1	; select bank1
  9207  040F  0A3E               	incf	_PF^(0+128),w
  9208  0410  0086               	movwf	6
  9209  0411  3001               	movlw	1	; select bank2/3
  9210  0412  0087               	movwf	7
  9211  0413  0020               	movlb	0	; select bank0
  9212  0414  0830               	movf	??_setPowerFault_Main,w
  9213  0415  0781               	addwf	1,f
  9214                           
  9215                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
  9216  0416  0021               	movlb	1	; select bank1
  9217  0417  0A3E               	incf	_PF^(0+128),w
  9218  0418  0086               	movwf	6
  9219  0419  3001               	movlw	1	; select bank2/3
  9220  041A  0087               	movwf	7
  9221  041B  3002               	movlw	2
  9222  041C  0201               	subwf	1,w
  9223  041D  1C03               	skipc
  9224  041E  2C2F               	goto	l6618
  9225                           
  9226                           ;PowerFault_B1.c: 112: {
  9227                           ;PowerFault_B1.c: 113: PF->Count=0;
  9228  041F  0A3E               	incf	_PF^(0+128),w
  9229  0420  0086               	movwf	6
  9230  0421  3001               	movlw	1	; select bank2/3
  9231  0422  0087               	movwf	7
  9232  0423  0181               	clrf	1
  9233                           
  9234                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
  9235  0424  3001               	movlw	1
  9236  0425  3193  2371  3183   	fcall	_setPowerFault_Exceptions
  9237                           
  9238                           ;PowerFault_B1.c: 115: }
  9239                           ;PowerFault_B1.c: 116: }
  9240  0428  2C2F               	goto	l6618
  9241  0429                     l6616:	
  9242                           
  9243                           ;PowerFault_B1.c: 117: else
  9244                           ;PowerFault_B1.c: 118: {
  9245                           ;PowerFault_B1.c: 119: PF->Count=0;
  9246  0429  0021               	movlb	1	; select bank1
  9247  042A  0A3E               	incf	_PF^(0+128),w
  9248  042B  0086               	movwf	6
  9249  042C  3001               	movlw	1	; select bank2/3
  9250  042D  0087               	movwf	7
  9251  042E  0181               	clrf	1
  9252  042F                     l6618:	
  9253                           
  9254                           ;PowerFault_B1.c: 120: }
  9255                           ;PowerFault_B1.c: 122: }
  9256                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
  9257  042F  0021               	movlb	1	; select bank1
  9258  0430  083E               	movf	_PF^(0+128),w
  9259  0431  0086               	movwf	6
  9260  0432  3001               	movlw	1	; select bank2/3
  9261  0433  0087               	movwf	7
  9262  0434  1881               	btfsc	1,1
  9263  0435  2C3B               	goto	l1738
  9264                           
  9265                           ;PowerFault_B1.c: 124: {
  9266                           ;PowerFault_B1.c: 125: PF->Safe=1;
  9267  0436  083E               	movf	_PF^(0+128),w
  9268  0437  0086               	movwf	6
  9269  0438  3001               	movlw	1	; select bank2/3
  9270  0439  0087               	movwf	7
  9271  043A  1501               	bsf	1,2
  9272  043B                     l1738:	
  9273                           
  9274                           ;PowerFault_B1.c: 126: }
  9275                           ;PowerFault_B1.c: 127: PF->AD=0;
  9276  043B  083E               	movf	_PF^(0+128),w
  9277  043C  3E04               	addlw	4
  9278  043D  0086               	movwf	6
  9279  043E  3001               	movlw	1	; select bank2/3
  9280  043F  0087               	movwf	7
  9281  0440  3000               	movlw	0
  9282  0441  3FC0               	movwi [0]fsr1
  9283  0442  3FC1               	movwi [1]fsr1
  9284  0443  0008               	return
  9285  0444                     __end_of_setPowerFault_Main:	
  9286                           
  9287                           	psect	text40
  9288  1371                     __ptext40:	
  9289 ;; *************** function _setPowerFault_Exceptions *****************
  9290 ;; Defined at:
  9291 ;;		line 133 in file "../src/PowerFault_B1.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  command         1    wreg     unsigned char 
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;  command         1   15[BANK0 ] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;Total ram usage:        2 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    9
  9312 ;; This function calls:
  9313 ;;		_DimmerLights_Exceptions
  9314 ;;		_setLED
  9315 ;;		_setRF_Enable
  9316 ;;		_setSw_Enable
  9317 ;; This function is called by:
  9318 ;;		_setPowerFault_Main
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           
  9323                           ;psect for function _setPowerFault_Exceptions
  9324  1371                     _setPowerFault_Exceptions:	
  9325                           
  9326                           ;incstack = 0
  9327                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9328                           ;setPowerFault_Exceptions@command stored from wreg
  9329  1371  0020               	movlb	0	; select bank0
  9330  1372  00AF               	movwf	setPowerFault_Exceptions@command
  9331                           
  9332                           ;PowerFault_B1.c: 135: PF->ERROR=command;
  9333  1373  0021               	movlb	1	; select bank1
  9334  1374  083E               	movf	_PF^(0+128),w
  9335  1375  0086               	movwf	6
  9336  1376  3001               	movlw	1	; select bank2/3
  9337  1377  0087               	movwf	7
  9338  1378  0020               	movlb	0	; select bank0
  9339  1379  082F               	movf	setPowerFault_Exceptions@command,w
  9340  137A  1081               	bcf	1,1
  9341  137B  1D03               	skipz
  9342  137C  1481               	bsf	1,1
  9343                           
  9344                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
  9345  137D  092F               	comf	setPowerFault_Exceptions@command,w
  9346  137E  3901               	andlw	1
  9347  137F  00AE               	movwf	??_setPowerFault_Exceptions
  9348  1380  0021               	movlb	1	; select bank1
  9349  1381  083E               	movf	_PF^(0+128),w
  9350  1382  0086               	movwf	6
  9351  1383  3001               	movlw	1	; select bank2/3
  9352  1384  0087               	movwf	7
  9353  1385  0020               	movlb	0	; select bank0
  9354  1386  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9355  1387  0DAE               	rlf	??_setPowerFault_Exceptions,f
  9356  1388  0801               	movf	1,w
  9357  1389  062E               	xorwf	??_setPowerFault_Exceptions,w
  9358  138A  39FB               	andlw	-5
  9359  138B  062E               	xorwf	??_setPowerFault_Exceptions,w
  9360  138C  0081               	movwf	1
  9361                           
  9362                           ;PowerFault_B1.c: 137: if(command == 1)
  9363  138D  082F               	movf	setPowerFault_Exceptions@command,w
  9364  138E  3A01               	xorlw	1
  9365  138F  1D03               	skipz
  9366  1390  2B9C               	goto	l1742
  9367                           
  9368                           ;PowerFault_B1.c: 138: {
  9369                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
  9370  1391  3003               	movlw	3
  9371  1392  3195  25D7  3193   	fcall	_DimmerLights_Exceptions
  9372                           
  9373                           ;PowerFault_B1.c: 141: setLED(2,1);
  9374  1395  0020               	movlb	0	; select bank0
  9375  1396  01A2               	clrf	setLED@command
  9376  1397  0AA2               	incf	setLED@command,f
  9377  1398  3002               	movlw	2
  9378  1399  3197  2744  3193   	fcall	_setLED
  9379  139C                     l1742:	
  9380                           
  9381                           ;PowerFault_B1.c: 143: }
  9382                           ;PowerFault_B1.c: 144: setLED(99,command+10);
  9383  139C  0020               	movlb	0	; select bank0
  9384  139D  082F               	movf	setPowerFault_Exceptions@command,w
  9385  139E  3E0A               	addlw	10
  9386  139F  00AE               	movwf	??_setPowerFault_Exceptions
  9387  13A0  082E               	movf	??_setPowerFault_Exceptions,w
  9388  13A1  00A2               	movwf	setLED@command
  9389  13A2  3063               	movlw	99
  9390  13A3  3197  2744  3193   	fcall	_setLED
  9391                           
  9392                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
  9393  13A6  0020               	movlb	0	; select bank0
  9394  13A7  092F               	comf	setPowerFault_Exceptions@command,w
  9395  13A8  3901               	andlw	1
  9396  13A9  319D  255A  3193   	fcall	_setSw_Enable
  9397                           
  9398                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
  9399  13AC  0020               	movlb	0	; select bank0
  9400  13AD  092F               	comf	setPowerFault_Exceptions@command,w
  9401  13AE  3901               	andlw	1
  9402  13AF  00AE               	movwf	??_setPowerFault_Exceptions
  9403  13B0  082E               	movf	??_setPowerFault_Exceptions,w
  9404  13B1  00A2               	movwf	setRF_Enable@command
  9405  13B2  3001               	movlw	1
  9406  13B3  3190  20BF         	fcall	_setRF_Enable
  9407  13B5  0008               	return
  9408  13B6                     __end_of_setPowerFault_Exceptions:	
  9409                           
  9410                           	psect	text41
  9411  1D5A                     __ptext41:	
  9412 ;; *************** function _setSw_Enable *****************
  9413 ;; Defined at:
  9414 ;;		line 85 in file "../src/Switch_B1.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  command         1    wreg     unsigned char 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  command         1    2[BANK0 ] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;		None               void
  9421 ;; Registers used:
  9422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;Total ram usage:        1 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    6
  9435 ;; This function calls:
  9436 ;;		_SwPointSelect
  9437 ;; This function is called by:
  9438 ;;		_setPowerFault_Exceptions
  9439 ;;		_my_Main
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _setSw_Enable
  9445  1D5A                     _setSw_Enable:	
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9449                           ;setSw_Enable@command stored from wreg
  9450  1D5A  0020               	movlb	0	; select bank0
  9451  1D5B  00A2               	movwf	setSw_Enable@command
  9452                           
  9453                           ;Switch_B1.c: 88: SwPointSelect(1);
  9454  1D5C  3001               	movlw	1
  9455  1D5D  319C  248D         	fcall	_SwPointSelect
  9456                           
  9457                           ;Switch_B1.c: 89: Sw->Enable = command;
  9458  1D5F  087B               	movf	_Sw,w
  9459  1D60  0086               	movwf	6
  9460  1D61  3001               	movlw	1	; select bank2/3
  9461  1D62  0087               	movwf	7
  9462  1D63  0020               	movlb	0	; select bank0
  9463  1D64  0822               	movf	setSw_Enable@command,w
  9464  1D65  1001               	bcf	1,0
  9465  1D66  1D03               	skipz
  9466  1D67  1401               	bsf	1,0
  9467  1D68  0008               	return
  9468  1D69                     __end_of_setSw_Enable:	
  9469                           
  9470                           	psect	text42
  9471  10BF                     __ptext42:	
  9472 ;; *************** function _setRF_Enable *****************
  9473 ;; Defined at:
  9474 ;;		line 202 in file "../src/RF_Control_B1.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  rf              1    wreg     unsigned char 
  9477 ;;  command         1    2[BANK0 ] unsigned char 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  rf              1    3[BANK0 ] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        2 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    6
  9496 ;; This function calls:
  9497 ;;		_RfPointSelect
  9498 ;; This function is called by:
  9499 ;;		_setPowerFault_Exceptions
  9500 ;;		_my_Main
  9501 ;; This function uses a non-reentrant model
  9502 ;;
  9503                           
  9504                           
  9505                           ;psect for function _setRF_Enable
  9506  10BF                     _setRF_Enable:	
  9507                           
  9508                           ;incstack = 0
  9509                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9510                           ;setRF_Enable@rf stored from wreg
  9511  10BF  0020               	movlb	0	; select bank0
  9512  10C0  00A3               	movwf	setRF_Enable@rf
  9513                           
  9514                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  9515  10C1  0823               	movf	setRF_Enable@rf,w
  9516  10C2  319D  2520         	fcall	_RfPointSelect
  9517                           
  9518                           ;RF_Control_B1.c: 204: RF->Enable = command;
  9519  10C4  087A               	movf	_RF,w
  9520  10C5  0086               	movwf	6
  9521  10C6  0187               	clrf	7
  9522  10C7  0020               	movlb	0	; select bank0
  9523  10C8  0822               	movf	setRF_Enable@command,w
  9524  10C9  1001               	bcf	1,0
  9525  10CA  1D03               	skipz
  9526  10CB  1401               	bsf	1,0
  9527                           
  9528                           ;RF_Control_B1.c: 205: RF->Learn = 0;
  9529  10CC  087A               	movf	_RF,w
  9530  10CD  0086               	movwf	6
  9531  10CE  0187               	clrf	7
  9532  10CF  1301               	bcf	1,6
  9533                           
  9534                           ;RF_Control_B1.c: 206: RF->TransceiveGO = 0;
  9535  10D0  087A               	movf	_RF,w
  9536  10D1  0086               	movwf	6
  9537  10D2  0187               	clrf	7
  9538  10D3  1101               	bcf	1,2
  9539                           
  9540                           ;RF_Control_B1.c: 207: RF->RxStatus = 0;
  9541  10D4  087A               	movf	_RF,w
  9542  10D5  0086               	movwf	6
  9543  10D6  0187               	clrf	7
  9544  10D7  1181               	bcf	1,3
  9545                           
  9546                           ;RF_Control_B1.c: 208: RF->ReceiveGO = 0;
  9547  10D8  087A               	movf	_RF,w
  9548  10D9  0086               	movwf	6
  9549  10DA  0187               	clrf	7
  9550  10DB  1081               	bcf	1,1
  9551                           
  9552                           ;RF_Control_B1.c: 209: RF->DebounceTime = 0;
  9553  10DC  087A               	movf	_RF,w
  9554  10DD  3E04               	addlw	4
  9555  10DE  0086               	movwf	6
  9556  10DF  0187               	clrf	7
  9557  10E0  0181               	clrf	1
  9558                           
  9559                           ;RF_Control_B1.c: 210: RF->Debounce = 0;
  9560  10E1  087A               	movf	_RF,w
  9561  10E2  0086               	movwf	6
  9562  10E3  0187               	clrf	7
  9563  10E4  1281               	bcf	1,5
  9564  10E5  0008               	return
  9565  10E6                     __end_of_setRF_Enable:	
  9566                           
  9567                           	psect	text43
  9568  15D7                     __ptext43:	
  9569 ;; *************** function _DimmerLights_Exceptions *****************
  9570 ;; Defined at:
  9571 ;;		line 513 in file "../src/Dimmer_B1.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  status          1    wreg     unsigned char 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  status          1   13[BANK0 ] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;		None               void
  9578 ;; Registers used:
  9579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        1 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    8
  9592 ;; This function calls:
  9593 ;;		_getDimmerLights_StatusFlag
  9594 ;;		_setBuz
  9595 ;;		_setDimmerLights_ERROR
  9596 ;;		_setDimmerLights_TriggerERROR
  9597 ;; This function is called by:
  9598 ;;		_setPowerFault_Exceptions
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _DimmerLights_Exceptions
  9604  15D7                     _DimmerLights_Exceptions:	
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9608                           ;DimmerLights_Exceptions@status stored from wreg
  9609  15D7  0020               	movlb	0	; select bank0
  9610  15D8  00AD               	movwf	DimmerLights_Exceptions@status
  9611                           
  9612                           ;Dimmer_B1.c: 514: if (status == 1) {
  9613  15D9  082D               	movf	DimmerLights_Exceptions@status,w
  9614  15DA  3A01               	xorlw	1
  9615  15DB  1D03               	skipz
  9616  15DC  2DED               	goto	l5790
  9617                           
  9618                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  9619  15DD  319C  2457  3195   	fcall	_getDimmerLights_StatusFlag
  9620  15E0  3A01               	xorlw	1
  9621  15E1  1D03               	skipz
  9622  15E2  2E05               	goto	l5796
  9623                           
  9624                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  9625  15E3  302C               	movlw	44
  9626  15E4  0020               	movlb	0	; select bank0
  9627  15E5  00A9               	movwf	setBuz@time
  9628  15E6  3001               	movlw	1
  9629  15E7  00AA               	movwf	setBuz@time+1
  9630  15E8  300A               	movlw	10
  9631  15E9  318C  243C  3195   	fcall	_setBuz
  9632  15EC  2E05               	goto	l5796
  9633  15ED                     l5790:	
  9634                           ;Dimmer_B1.c: 528: } else if (status == 2)
  9635                           
  9636                           ;Dimmer_B1.c: 517: }
  9637                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  9638                           
  9639  15ED  0020               	movlb	0	; select bank0
  9640  15EE  082D               	movf	DimmerLights_Exceptions@status,w
  9641  15EF  3A02               	xorlw	2
  9642  15F0  1D03               	skipz
  9643  15F1  2E00               	goto	l5794
  9644                           
  9645                           ;Dimmer_B1.c: 529: {
  9646                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  9647  15F2  302C               	movlw	44
  9648  15F3  00A9               	movwf	setBuz@time
  9649  15F4  3001               	movlw	1
  9650  15F5  00AA               	movwf	setBuz@time+1
  9651  15F6  3005               	movlw	5
  9652  15F7  318C  243C  3195   	fcall	_setBuz
  9653                           
  9654                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  9655  15FA  0021               	movlb	1	; select bank1
  9656  15FB  0A3A               	incf	_Dimmer^(0+128),w
  9657  15FC  0086               	movwf	6
  9658  15FD  0187               	clrf	7
  9659  15FE  0801               	movf	1,w
  9660  15FF  2E06               	goto	L9
  9661  1600                     l5794:	
  9662                           ;Dimmer_B1.c: 532: } else if (status == 3)
  9663                           
  9664  1600  0020               	movlb	0	; select bank0
  9665  1601  082D               	movf	DimmerLights_Exceptions@status,w
  9666  1602  3A03               	xorlw	3
  9667  1603  1D03               	skipz
  9668  1604  2E09               	goto	l817
  9669  1605                     l5796:	
  9670                           
  9671                           ;Dimmer_B1.c: 533: {
  9672                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  9673  1605  3001               	movlw	1
  9674  1606                     L9:	
  9675  1606  3194  24DB  3195   	fcall	_setDimmerLights_ERROR
  9676  1609                     l817:	
  9677                           
  9678                           ;Dimmer_B1.c: 543: }
  9679                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  9680  1609  0020               	movlb	0	; select bank0
  9681  160A  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9682  160B  3001               	movlw	1
  9683  160C  3191  2110  3195   	fcall	_setDimmerLights_TriggerERROR
  9684                           
  9685                           ;Dimmer_B1.c: 555: if (myMain->SelfTest == 0) {
  9686  160F  0021               	movlb	1	; select bank1
  9687  1610  086E               	movf	_myMain^(0+128),w
  9688  1611  0086               	movwf	6
  9689  1612  3001               	movlw	1	; select bank2/3
  9690  1613  0087               	movwf	7
  9691  1614  1B01               	btfsc	1,6
  9692  1615  0008               	return
  9693                           
  9694                           ;Dimmer_B1.c: 556: myMain->i = 0;
  9695  1616  086E               	movf	_myMain^(0+128),w
  9696  1617  3E0E               	addlw	14
  9697  1618  0086               	movwf	6
  9698  1619  3001               	movlw	1	; select bank2/3
  9699  161A  0087               	movwf	7
  9700  161B  1001               	bcf	1,0
  9701                           
  9702                           ;Dimmer_B1.c: 557: myMain->j = 0;
  9703  161C  086E               	movf	_myMain^(0+128),w
  9704  161D  3E0E               	addlw	14
  9705  161E  0086               	movwf	6
  9706  161F  3001               	movlw	1	; select bank2/3
  9707  1620  0087               	movwf	7
  9708  1621  1081               	bcf	1,1
  9709                           
  9710                           ;Dimmer_B1.c: 558: myMain->k = 1;
  9711  1622  086E               	movf	_myMain^(0+128),w
  9712  1623  3E0E               	addlw	14
  9713  1624  0086               	movwf	6
  9714  1625  3001               	movlw	1	; select bank2/3
  9715  1626  0087               	movwf	7
  9716  1627  1501               	bsf	1,2
  9717                           
  9718                           ;Dimmer_B1.c: 559: myMain->Count2 = 0;
  9719  1628  086E               	movf	_myMain^(0+128),w
  9720  1629  3E07               	addlw	7
  9721  162A  0086               	movwf	6
  9722  162B  3001               	movlw	1	; select bank2/3
  9723  162C  0087               	movwf	7
  9724  162D  3000               	movlw	0
  9725  162E  3FC0               	movwi [0]fsr1
  9726  162F  3FC1               	movwi [1]fsr1
  9727  1630  0008               	return
  9728  1631                     __end_of_DimmerLights_Exceptions:	
  9729                           
  9730                           	psect	text44
  9731  1110                     __ptext44:	
  9732 ;; *************** function _setDimmerLights_TriggerERROR *****************
  9733 ;; Defined at:
  9734 ;;		line 582 in file "../src/Dimmer_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;  lights          1    wreg     unsigned char 
  9737 ;;  command         1    2[BANK0 ] unsigned char 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  lights          1    3[BANK0 ] unsigned char 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9749 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;Total ram usage:        2 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    6
  9756 ;; This function calls:
  9757 ;;		_DimmerLightsPointSelect
  9758 ;; This function is called by:
  9759 ;;		_DimmerLights_Exceptions
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _setDimmerLights_TriggerERROR
  9765  1110                     _setDimmerLights_TriggerERROR:	
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  9769                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  9770  1110  0020               	movlb	0	; select bank0
  9771  1111  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  9772                           
  9773                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  9774  1112  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  9775  1113  319C  2482         	fcall	_DimmerLightsPointSelect
  9776                           
  9777                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  9778  1115  0878               	movf	_DimmerLights,w
  9779  1116  3E08               	addlw	8
  9780  1117  0086               	movwf	6
  9781  1118  3001               	movlw	1	; select bank2/3
  9782  1119  0087               	movwf	7
  9783  111A  0020               	movlb	0	; select bank0
  9784  111B  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9785  111C  1101               	bcf	1,2
  9786  111D  1D03               	skipz
  9787  111E  1501               	bsf	1,2
  9788                           
  9789                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  9790  111F  0878               	movf	_DimmerLights,w
  9791  1120  3E08               	addlw	8
  9792  1121  0086               	movwf	6
  9793  1122  3001               	movlw	1	; select bank2/3
  9794  1123  0087               	movwf	7
  9795  1124  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9796  1125  1081               	bcf	1,1
  9797  1126  1D03               	skipz
  9798  1127  1481               	bsf	1,1
  9799                           
  9800                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  9801  1128  0878               	movf	_DimmerLights,w
  9802  1129  3E08               	addlw	8
  9803  112A  0086               	movwf	6
  9804  112B  3001               	movlw	1	; select bank2/3
  9805  112C  0087               	movwf	7
  9806  112D  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9807  112E  1201               	bcf	1,4
  9808  112F  1D03               	skipz
  9809  1130  1601               	bsf	1,4
  9810                           
  9811                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  9812  1131  0878               	movf	_DimmerLights,w
  9813  1132  3E08               	addlw	8
  9814  1133  0086               	movwf	6
  9815  1134  3001               	movlw	1	; select bank2/3
  9816  1135  0087               	movwf	7
  9817  1136  0822               	movf	setDimmerLights_TriggerERROR@command,w
  9818  1137  1181               	bcf	1,3
  9819  1138  1D03               	skipz
  9820  1139  1581               	bsf	1,3
  9821  113A  0008               	return
  9822  113B                     __end_of_setDimmerLights_TriggerERROR:	
  9823                           
  9824                           	psect	text45
  9825  14DB                     __ptext45:	
  9826 ;; *************** function _setDimmerLights_ERROR *****************
  9827 ;; Defined at:
  9828 ;;		line 564 in file "../src/Dimmer_B1.c"
  9829 ;; Parameters:    Size  Location     Type
  9830 ;;  lights          1    wreg     unsigned char 
  9831 ;; Auto vars:     Size  Location     Type
  9832 ;;  lights          1    5[BANK0 ] unsigned char 
  9833 ;; Return value:  Size  Location     Type
  9834 ;;		None               void
  9835 ;; Registers used:
  9836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9837 ;; Tracked objects:
  9838 ;;		On entry : 0/0
  9839 ;;		On exit  : 0/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;Total ram usage:        2 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; Hardware stack levels required when called:    7
  9849 ;; This function calls:
  9850 ;;		_DimmerLightsPointSelect
  9851 ;;		_setLED
  9852 ;;		_setRFSW_Status
  9853 ;;		_setSw_Status
  9854 ;; This function is called by:
  9855 ;;		_DimmerLights_Exceptions
  9856 ;; This function uses a non-reentrant model
  9857 ;;
  9858                           
  9859                           
  9860                           ;psect for function _setDimmerLights_ERROR
  9861  14DB                     _setDimmerLights_ERROR:	
  9862                           
  9863                           ;incstack = 0
  9864                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9865                           ;setDimmerLights_ERROR@lights stored from wreg
  9866  14DB  0020               	movlb	0	; select bank0
  9867  14DC  00A5               	movwf	setDimmerLights_ERROR@lights
  9868                           
  9869                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  9870  14DD  0825               	movf	setDimmerLights_ERROR@lights,w
  9871  14DE  319C  2482  3194   	fcall	_DimmerLightsPointSelect
  9872                           
  9873                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  9874  14E1  0878               	movf	_DimmerLights,w
  9875  14E2  0086               	movwf	6
  9876  14E3  3001               	movlw	1	; select bank2/3
  9877  14E4  0087               	movwf	7
  9878  14E5  1E81               	btfss	1,5
  9879  14E6  0008               	return
  9880                           
  9881                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  9882  14E7  0878               	movf	_DimmerLights,w
  9883  14E8  0086               	movwf	6
  9884  14E9  3001               	movlw	1	; select bank2/3
  9885  14EA  0087               	movwf	7
  9886  14EB  1081               	bcf	1,1
  9887                           
  9888                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  9889  14EC  0878               	movf	_DimmerLights,w
  9890  14ED  0086               	movwf	6
  9891  14EE  3001               	movlw	1	; select bank2/3
  9892  14EF  0087               	movwf	7
  9893  14F0  1181               	bcf	1,3
  9894                           
  9895                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  9896  14F1  0878               	movf	_DimmerLights,w
  9897  14F2  0086               	movwf	6
  9898  14F3  3001               	movlw	1	; select bank2/3
  9899  14F4  0087               	movwf	7
  9900  14F5  1201               	bcf	1,4
  9901                           
  9902                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  9903  14F6  0878               	movf	_DimmerLights,w
  9904  14F7  0086               	movwf	6
  9905  14F8  3001               	movlw	1	; select bank2/3
  9906  14F9  0087               	movwf	7
  9907  14FA  1301               	bcf	1,6
  9908                           
  9909                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  9910  14FB  3007               	movlw	7
  9911  14FC  0020               	movlb	0	; select bank0
  9912  14FD  00A4               	movwf	??_setDimmerLights_ERROR
  9913  14FE  0878               	movf	_DimmerLights,w
  9914  14FF  3E02               	addlw	2
  9915  1500  0086               	movwf	6
  9916  1501  3001               	movlw	1	; select bank2/3
  9917  1502  0087               	movwf	7
  9918  1503  0824               	movf	??_setDimmerLights_ERROR,w
  9919  1504  0081               	movwf	1
  9920                           
  9921                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  9922  1505  0878               	movf	_DimmerLights,w
  9923  1506  3E06               	addlw	6
  9924  1507  0086               	movwf	6
  9925  1508  3001               	movlw	1	; select bank2/3
  9926  1509  0087               	movwf	7
  9927  150A  0801               	movf	1,w
  9928  150B  00A4               	movwf	??_setDimmerLights_ERROR
  9929  150C  0878               	movf	_DimmerLights,w
  9930  150D  3E04               	addlw	4
  9931  150E  0086               	movwf	6
  9932  150F  3001               	movlw	1	; select bank2/3
  9933  1510  0087               	movwf	7
  9934  1511  0824               	movf	??_setDimmerLights_ERROR,w
  9935  1512  0081               	movwf	1
  9936                           
  9937                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  9938  1513  0021               	movlb	1	; select bank1
  9939  1514  083A               	movf	_Dimmer^(0+128),w
  9940  1515  0086               	movwf	6
  9941  1516  0187               	clrf	7
  9942  1517  1401               	bsf	1,0
  9943                           
  9944                           ;Dimmer_B1.c: 575: ;;
  9945                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  9946  1518  0020               	movlb	0	; select bank0
  9947  1519  01A2               	clrf	setLED@command
  9948  151A  0AA2               	incf	setLED@command,f
  9949  151B  0825               	movf	setDimmerLights_ERROR@lights,w
  9950  151C  3197  2744  3194   	fcall	_setLED
  9951                           
  9952                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  9953  151F  0020               	movlb	0	; select bank0
  9954  1520  01A2               	clrf	setSw_Status@command
  9955  1521  0825               	movf	setDimmerLights_ERROR@lights,w
  9956  1522  319D  254B  3194   	fcall	_setSw_Status
  9957                           
  9958                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  9959  1525  0020               	movlb	0	; select bank0
  9960  1526  01A2               	clrf	setRFSW_Status@command
  9961  1527  0825               	movf	setDimmerLights_ERROR@lights,w
  9962  1528  319D  253C         	fcall	_setRFSW_Status
  9963  152A  0008               	return
  9964  152B                     __end_of_setDimmerLights_ERROR:	
  9965                           
  9966                           	psect	text46
  9967  1BDD                     __ptext46:	
  9968 ;; *************** function _PowerFault_Initialization *****************
  9969 ;; Defined at:
  9970 ;;		line 15 in file "../src/PowerFault_B1.c"
  9971 ;; Parameters:    Size  Location     Type
  9972 ;;		None
  9973 ;; Auto vars:     Size  Location     Type
  9974 ;;		None
  9975 ;; Return value:  Size  Location     Type
  9976 ;;		None               void
  9977 ;; Registers used:
  9978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;Total ram usage:        0 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    6
  9991 ;; This function calls:
  9992 ;;		_setPowerFault_Initialization
  9993 ;; This function is called by:
  9994 ;;		_main
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           
  9999                           ;psect for function _PowerFault_Initialization
 10000  1BDD                     _PowerFault_Initialization:	
 10001                           
 10002                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10003                           
 10004                           ;incstack = 0
 10005                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10006  1BDD  3190  2066         	fcall	_setPowerFault_Initialization
 10007  1BDF  0008               	return
 10008  1BE0                     __end_of_PowerFault_Initialization:	
 10009                           
 10010                           	psect	text47
 10011  1066                     __ptext47:	
 10012 ;; *************** function _setPowerFault_Initialization *****************
 10013 ;; Defined at:
 10014 ;;		line 29 in file "../src/PowerFault_B1.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;		None
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;		None
 10019 ;; Return value:  Size  Location     Type
 10020 ;;		None               void
 10021 ;; Registers used:
 10022 ;;		wreg, fsr1l, fsr1h
 10023 ;; Tracked objects:
 10024 ;;		On entry : 0/0
 10025 ;;		On exit  : 0/0
 10026 ;;		Unchanged: 0/0
 10027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;Total ram usage:        1 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:    5
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_PowerFault_Initialization
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           
 10043                           ;psect for function _setPowerFault_Initialization
 10044  1066                     _setPowerFault_Initialization:	
 10045                           
 10046                           ;PowerFault_B1.c: 31: PF=&PF1;
 10047                           
 10048                           ;incstack = 0
 10049                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10050  1066  304C               	movlw	_PF1& (0+255)
 10051  1067  0020               	movlb	0	; select bank0
 10052  1068  00A0               	movwf	??_setPowerFault_Initialization
 10053  1069  0820               	movf	??_setPowerFault_Initialization,w
 10054  106A  0021               	movlb	1	; select bank1
 10055  106B  00BE               	movwf	_PF^(0+128)
 10056                           
 10057                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10058  106C  083E               	movf	_PF^(0+128),w
 10059  106D  0086               	movwf	6
 10060  106E  3001               	movlw	1	; select bank2/3
 10061  106F  0087               	movwf	7
 10062  1070  1401               	bsf	1,0
 10063                           
 10064                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10065  1071  083E               	movf	_PF^(0+128),w
 10066  1072  0086               	movwf	6
 10067  1073  3001               	movlw	1	; select bank2/3
 10068  1074  0087               	movwf	7
 10069  1075  1501               	bsf	1,2
 10070  1076  0008               	return
 10071  1077                     __end_of_setPowerFault_Initialization:	
 10072                           
 10073                           	psect	text48
 10074  1E50                     __ptext48:	
 10075 ;; *************** function _Mcu_Initialization *****************
 10076 ;; Defined at:
 10077 ;;		line 30 in file "../src/MCU_B1.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;		None
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;		None
 10082 ;; Return value:  Size  Location     Type
 10083 ;;		None               void
 10084 ;; Registers used:
 10085 ;;		wreg, status,2, status,0, pclath, cstack
 10086 ;; Tracked objects:
 10087 ;;		On entry : 0/0
 10088 ;;		On exit  : 0/0
 10089 ;;		Unchanged: 0/0
 10090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10093 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10094 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;Total ram usage:        1 bytes
 10096 ;; Hardware stack levels used:    1
 10097 ;; Hardware stack levels required when called:    6
 10098 ;; This function calls:
 10099 ;;		_ADC_Set
 10100 ;;		_Fosc_Set
 10101 ;;		_INT_Set
 10102 ;;		_IOC_Set
 10103 ;;		_IO_Set
 10104 ;;		_TMR0_Set
 10105 ;; This function is called by:
 10106 ;;		_main
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           
 10111                           ;psect for function _Mcu_Initialization
 10112  1E50                     _Mcu_Initialization:	
 10113                           
 10114                           ;MCU_B1.c: 32: Fosc_Set();
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10118  1E50  319B  23F7  319E   	fcall	_Fosc_Set
 10119                           
 10120                           ;MCU_B1.c: 34: IO_Set();
 10121  1E53  319E  269A  319E   	fcall	_IO_Set
 10122                           
 10123                           ;MCU_B1.c: 36: TMR0_Set();
 10124  1E56  319D  2513  319E   	fcall	_TMR0_Set
 10125                           
 10126                           ;MCU_B1.c: 38: ;;
 10127                           ;MCU_B1.c: 40: ADC_Set();
 10128  1E59  319C  242D  319E   	fcall	_ADC_Set
 10129                           
 10130                           ;MCU_B1.c: 44: INT_Set();
 10131  1E5C  319C  240C  319E   	fcall	_INT_Set
 10132                           
 10133                           ;MCU_B1.c: 46: IOC_Set();
 10134  1E5F  319D  2506         	fcall	_IOC_Set
 10135                           
 10136                           ;MCU_B1.c: 48: ;;
 10137                           ;MCU_B1.c: 50: ;;
 10138                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10139  1E61  30A0               	movlw	_VarMemory& (0+255)
 10140  1E62  0020               	movlb	0	; select bank0
 10141  1E63  00A1               	movwf	??_Mcu_Initialization
 10142  1E64  0821               	movf	??_Mcu_Initialization,w
 10143  1E65  0021               	movlb	1	; select bank1
 10144  1E66  00EF               	movwf	_Memory^(0+128)
 10145  1E67  0008               	return
 10146  1E68                     __end_of_Mcu_Initialization:	
 10147                           
 10148                           	psect	text49
 10149  1D13                     __ptext49:	
 10150 ;; *************** function _TMR0_Set *****************
 10151 ;; Defined at:
 10152 ;;		line 128 in file "../src/MCU_B1.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;		None               void
 10159 ;; Registers used:
 10160 ;;		wreg, status,2
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;Total ram usage:        1 bytes
 10171 ;; Hardware stack levels used:    1
 10172 ;; Hardware stack levels required when called:    5
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_Mcu_Initialization
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _TMR0_Set
 10182  1D13                     _TMR0_Set:	
 10183                           
 10184                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10188  1D13  3054               	movlw	_VarTimer0& (0+255)
 10189  1D14  0020               	movlb	0	; select bank0
 10190  1D15  00A0               	movwf	??_TMR0_Set
 10191  1D16  0820               	movf	??_TMR0_Set,w
 10192  1D17  0021               	movlb	1	; select bank1
 10193  1D18  00ED               	movwf	_Timer0^(0+128)
 10194                           
 10195                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10196  1D19  0195               	clrf	21	;volatile
 10197                           
 10198                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10199  1D1A  3042               	movlw	66
 10200  1D1B  0020               	movlb	0	; select bank0
 10201  1D1C  0095               	movwf	21	;volatile
 10202                           
 10203                           ;MCU_B1.c: 132: TMR0IE = 1;
 10204  1D1D  168B               	bsf	11,5	;volatile
 10205                           
 10206                           ;MCU_B1.c: 133: GIE = 1;
 10207  1D1E  178B               	bsf	11,7	;volatile
 10208  1D1F  0008               	return
 10209  1D20                     __end_of_TMR0_Set:	
 10210                           
 10211                           	psect	text50
 10212  1E9A                     __ptext50:	
 10213 ;; *************** function _IO_Set *****************
 10214 ;; Defined at:
 10215 ;;		line 62 in file "../src/MCU_B1.c"
 10216 ;; Parameters:    Size  Location     Type
 10217 ;;		None
 10218 ;; Auto vars:     Size  Location     Type
 10219 ;;		None
 10220 ;; Return value:  Size  Location     Type
 10221 ;;		None               void
 10222 ;; Registers used:
 10223 ;;		wreg, status,2
 10224 ;; Tracked objects:
 10225 ;;		On entry : 0/0
 10226 ;;		On exit  : 0/0
 10227 ;;		Unchanged: 0/0
 10228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;Total ram usage:        0 bytes
 10234 ;; Hardware stack levels used:    1
 10235 ;; Hardware stack levels required when called:    5
 10236 ;; This function calls:
 10237 ;;		Nothing
 10238 ;; This function is called by:
 10239 ;;		_Mcu_Initialization
 10240 ;; This function uses a non-reentrant model
 10241 ;;
 10242                           
 10243                           
 10244                           ;psect for function _IO_Set
 10245  1E9A                     _IO_Set:	
 10246                           
 10247                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10248                           
 10249                           ;incstack = 0
 10250                           ; Regs used in _IO_Set: [wreg+status,2]
 10251  1E9A  3077               	movlw	119
 10252  1E9B  0021               	movlb	1	; select bank1
 10253  1E9C  008C               	movwf	12	;volatile
 10254                           
 10255                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
 10256  1E9D  3007               	movlw	7
 10257  1E9E  008D               	movwf	13	;volatile
 10258                           
 10259                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 10260  1E9F  300C               	movlw	12
 10261  1EA0  008E               	movwf	14	;volatile
 10262                           
 10263                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 10264  1EA1  0022               	movlb	2	; select bank2
 10265  1EA2  018C               	clrf	12	;volatile
 10266                           
 10267                           ;MCU_B1.c: 94: LATB = 0b00000010;;
 10268  1EA3  3002               	movlw	2
 10269  1EA4  008D               	movwf	13	;volatile
 10270                           
 10271                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 10272  1EA5  018E               	clrf	14	;volatile
 10273                           
 10274                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10275  1EA6  3022               	movlw	34
 10276  1EA7  0023               	movlb	3	; select bank3
 10277  1EA8  008C               	movwf	12	;volatile
 10278                           
 10279                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10280  1EA9  018D               	clrf	13	;volatile
 10281                           
 10282                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10283  1EAA  018E               	clrf	14	;volatile
 10284                           
 10285                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 10286  1EAB  3077               	movlw	119
 10287  1EAC  0020               	movlb	0	; select bank0
 10288  1EAD  008C               	movwf	12	;volatile
 10289                           
 10290                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
 10291  1EAE  3007               	movlw	7
 10292  1EAF  008D               	movwf	13	;volatile
 10293                           
 10294                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 10295  1EB0  300C               	movlw	12
 10296  1EB1  008E               	movwf	14	;volatile
 10297  1EB2  0008               	return
 10298  1EB3                     __end_of_IO_Set:	
 10299                           
 10300                           	psect	text51
 10301  1D06                     __ptext51:	
 10302 ;; *************** function _IOC_Set *****************
 10303 ;; Defined at:
 10304 ;;		line 269 in file "../src/MCU_B1.c"
 10305 ;; Parameters:    Size  Location     Type
 10306 ;;		None
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;		None
 10309 ;; Return value:  Size  Location     Type
 10310 ;;		None               void
 10311 ;; Registers used:
 10312 ;;		wreg, status,2
 10313 ;; Tracked objects:
 10314 ;;		On entry : 0/0
 10315 ;;		On exit  : 0/0
 10316 ;;		Unchanged: 0/0
 10317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;Total ram usage:        0 bytes
 10323 ;; Hardware stack levels used:    1
 10324 ;; Hardware stack levels required when called:    5
 10325 ;; This function calls:
 10326 ;;		Nothing
 10327 ;; This function is called by:
 10328 ;;		_Mcu_Initialization
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _IOC_Set
 10334  1D06                     _IOC_Set:	
 10335                           
 10336                           ;MCU_B1.c: 270: WPUB2 = 0;
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _IOC_Set: [wreg+status,2]
 10340  1D06  0024               	movlb	4	; select bank4
 10341  1D07  110D               	bcf	13,2	;volatile
 10342                           
 10343                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
 10344  1D08  3004               	movlw	4
 10345  1D09  0027               	movlb	7	; select bank7
 10346  1D0A  0094               	movwf	20	;volatile
 10347                           
 10348                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
 10349  1D0B  3004               	movlw	4
 10350  1D0C  0095               	movwf	21	;volatile
 10351                           
 10352                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 10353  1D0D  0196               	clrf	22	;volatile
 10354                           
 10355                           ;MCU_B1.c: 290: IOCIE = 1;
 10356  1D0E  158B               	bsf	11,3	;volatile
 10357                           
 10358                           ;MCU_B1.c: 291: IOCIF = 0;
 10359  1D0F  100B               	bcf	11,0	;volatile
 10360                           
 10361                           ;MCU_B1.c: 292: PEIE = 1;
 10362  1D10  170B               	bsf	11,6	;volatile
 10363                           
 10364                           ;MCU_B1.c: 293: GIE = 1;
 10365  1D11  178B               	bsf	11,7	;volatile
 10366  1D12  0008               	return
 10367  1D13                     __end_of_IOC_Set:	
 10368                           
 10369                           	psect	text52
 10370  1C0C                     __ptext52:	
 10371 ;; *************** function _INT_Set *****************
 10372 ;; Defined at:
 10373 ;;		line 242 in file "../src/MCU_B1.c"
 10374 ;; Parameters:    Size  Location     Type
 10375 ;;		None
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;		None
 10378 ;; Return value:  Size  Location     Type
 10379 ;;		None               void
 10380 ;; Registers used:
 10381 ;;		None
 10382 ;; Tracked objects:
 10383 ;;		On entry : 0/0
 10384 ;;		On exit  : 0/0
 10385 ;;		Unchanged: 0/0
 10386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;Total ram usage:        0 bytes
 10392 ;; Hardware stack levels used:    1
 10393 ;; Hardware stack levels required when called:    5
 10394 ;; This function calls:
 10395 ;;		Nothing
 10396 ;; This function is called by:
 10397 ;;		_Mcu_Initialization
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _INT_Set
 10403  1C0C                     _INT_Set:	
 10404                           
 10405                           ;MCU_B1.c: 243: WPUB0 = 0;
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _INT_Set: []
 10409  1C0C  0024               	movlb	4	; select bank4
 10410  1C0D  100D               	bcf	13,0	;volatile
 10411                           
 10412                           ;MCU_B1.c: 244: INTE = 0;
 10413  1C0E  120B               	bcf	11,4	;volatile
 10414                           
 10415                           ;MCU_B1.c: 245: PEIE = 1;
 10416  1C0F  170B               	bsf	11,6	;volatile
 10417                           
 10418                           ;MCU_B1.c: 246: GIE = 1;
 10419  1C10  178B               	bsf	11,7	;volatile
 10420  1C11  0008               	return
 10421  1C12                     __end_of_INT_Set:	
 10422                           
 10423                           	psect	text53
 10424  1BF7                     __ptext53:	
 10425 ;; *************** function _Fosc_Set *****************
 10426 ;; Defined at:
 10427 ;;		line 58 in file "../src/MCU_B1.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;		None               void
 10434 ;; Registers used:
 10435 ;;		wreg
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        0 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    5
 10448 ;; This function calls:
 10449 ;;		Nothing
 10450 ;; This function is called by:
 10451 ;;		_Mcu_Initialization
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           
 10456                           ;psect for function _Fosc_Set
 10457  1BF7                     _Fosc_Set:	
 10458                           
 10459                           ;MCU_B1.c: 59: OSCCON = 0x78;
 10460                           
 10461                           ;incstack = 0
 10462                           ; Regs used in _Fosc_Set: [wreg]
 10463  1BF7  3078               	movlw	120
 10464  1BF8  0021               	movlb	1	; select bank1
 10465  1BF9  0099               	movwf	25	;volatile
 10466  1BFA  0008               	return
 10467  1BFB                     __end_of_Fosc_Set:	
 10468                           
 10469                           	psect	text54
 10470  1C2D                     __ptext54:	
 10471 ;; *************** function _ADC_Set *****************
 10472 ;; Defined at:
 10473 ;;		line 315 in file "../src/MCU_B1.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;		None
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;		None
 10478 ;; Return value:  Size  Location     Type
 10479 ;;		None               void
 10480 ;; Registers used:
 10481 ;;		wreg
 10482 ;; Tracked objects:
 10483 ;;		On entry : 0/0
 10484 ;;		On exit  : 0/0
 10485 ;;		Unchanged: 0/0
 10486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10491 ;;Total ram usage:        0 bytes
 10492 ;; Hardware stack levels used:    1
 10493 ;; Hardware stack levels required when called:    5
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		_Mcu_Initialization
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _ADC_Set
 10503  1C2D                     _ADC_Set:	
 10504                           
 10505                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _ADC_Set: [wreg]
 10509  1C2D  30F2               	movlw	242
 10510  1C2E  0021               	movlb	1	; select bank1
 10511  1C2F  009E               	movwf	30	;volatile
 10512                           
 10513                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 10514  1C30  30C0               	movlw	192
 10515  1C31  0022               	movlb	2	; select bank2
 10516  1C32  0097               	movwf	23	;volatile
 10517  1C33  0008               	return
 10518  1C34                     __end_of_ADC_Set:	
 10519                           
 10520                           	psect	text55
 10521  1CE0                     __ptext55:	
 10522 ;; *************** function _LED_Main *****************
 10523 ;; Defined at:
 10524 ;;		line 51 in file "../src/LED_B1.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;		None
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;		None
 10529 ;; Return value:  Size  Location     Type
 10530 ;;		None               void
 10531 ;; Registers used:
 10532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;Total ram usage:        0 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:    7
 10545 ;; This function calls:
 10546 ;;		_setLED_Main
 10547 ;; This function is called by:
 10548 ;;		_main
 10549 ;; This function uses a non-reentrant model
 10550 ;;
 10551                           
 10552                           
 10553                           ;psect for function _LED_Main
 10554  1CE0                     _LED_Main:	
 10555                           
 10556                           ;LED_B1.c: 54: setLED_Main(1);
 10557                           
 10558                           ;incstack = 0
 10559                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10560  1CE0  3001               	movlw	1
 10561  1CE1  3192  2268  319C   	fcall	_setLED_Main
 10562                           
 10563                           ;LED_B1.c: 57: setLED_Main(2);
 10564  1CE4  3002               	movlw	2
 10565  1CE5  3192  2268  319C   	fcall	_setLED_Main
 10566                           
 10567                           ;LED_B1.c: 63: setLED_Main(99);
 10568  1CE8  3063               	movlw	99
 10569  1CE9  3192  2268         	fcall	_setLED_Main
 10570  1CEB  0008               	return
 10571  1CEC                     __end_of_LED_Main:	
 10572                           
 10573                           	psect	text56
 10574  1268                     __ptext56:	
 10575 ;; *************** function _setLED_Main *****************
 10576 ;; Defined at:
 10577 ;;		line 215 in file "../src/LED_B1.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  led             1    wreg     unsigned char 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  led             1    4[BANK0 ] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;		None               void
 10584 ;; Registers used:
 10585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;Total ram usage:        3 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    6
 10598 ;; This function calls:
 10599 ;;		_LedPointSelect
 10600 ;; This function is called by:
 10601 ;;		_LED_Main
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           
 10606                           ;psect for function _setLED_Main
 10607  1268                     _setLED_Main:	
 10608                           
 10609                           ;incstack = 0
 10610                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10611                           ;setLED_Main@led stored from wreg
 10612  1268  0020               	movlb	0	; select bank0
 10613  1269  00A4               	movwf	setLED_Main@led
 10614                           
 10615                           ;LED_B1.c: 217: LedPointSelect(led);
 10616  126A  0824               	movf	setLED_Main@led,w
 10617  126B  319F  27DE  3192   	fcall	_LedPointSelect
 10618                           
 10619                           ;LED_B1.c: 218: if(LED->GO)
 10620  126E  0021               	movlb	1	; select bank1
 10621  126F  083D               	movf	_LED^(0+128),w
 10622  1270  0086               	movwf	6
 10623  1271  0187               	clrf	7
 10624  1272  1C81               	btfss	1,1
 10625  1273  0008               	return
 10626                           
 10627                           ;LED_B1.c: 219: {
 10628                           ;LED_B1.c: 220: LED->Time++;
 10629  1274  0A3D               	incf	_LED^(0+128),w
 10630  1275  0086               	movwf	6
 10631  1276  0187               	clrf	7
 10632  1277  3001               	movlw	1
 10633  1278  0781               	addwf	1,f
 10634  1279  3141               	addfsr 1,1
 10635  127A  1803               	skipnc
 10636  127B  0A81               	incf	1,f
 10637                           
 10638                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 10639  127C  0A3D               	incf	_LED^(0+128),w
 10640  127D  0086               	movwf	6
 10641  127E  0187               	clrf	7
 10642  127F  3F40               	moviw [0]fsr1
 10643  1280  0020               	movlb	0	; select bank0
 10644  1281  00A2               	movwf	??_setLED_Main
 10645  1282  3F41               	moviw [1]fsr1
 10646  1283  00A3               	movwf	??_setLED_Main+1
 10647  1284  3000               	movlw	0
 10648  1285  0223               	subwf	??_setLED_Main+1,w
 10649  1286  3032               	movlw	50
 10650  1287  1903               	skipnz
 10651  1288  0222               	subwf	??_setLED_Main,w
 10652  1289  1C03               	skipc
 10653  128A  0008               	return
 10654                           
 10655                           ;LED_B1.c: 222: {
 10656                           ;LED_B1.c: 223: LED->Time=0;
 10657  128B  0021               	movlb	1	; select bank1
 10658  128C  0A3D               	incf	_LED^(0+128),w
 10659  128D  0086               	movwf	6
 10660  128E  0187               	clrf	7
 10661  128F  3000               	movlw	0
 10662  1290  3FC0               	movwi [0]fsr1
 10663  1291  3FC1               	movwi [1]fsr1
 10664                           
 10665                           ;LED_B1.c: 225: if(led == 1)
 10666  1292  0020               	movlb	0	; select bank0
 10667  1293  0824               	movf	setLED_Main@led,w
 10668  1294  3A01               	xorlw	1
 10669  1295  1D03               	skipz
 10670  1296  2A9A               	goto	l6468
 10671                           
 10672                           ;LED_B1.c: 226: {
 10673                           ;LED_B1.c: 227: RA3=~RA3;
 10674  1297  3008               	movlw	8
 10675  1298  068C               	xorwf	12,f
 10676                           
 10677                           ;LED_B1.c: 228: }
 10678  1299  0008               	return
 10679  129A                     l6468:	
 10680                           
 10681                           ;LED_B1.c: 231: else if(led == 2)
 10682  129A  0824               	movf	setLED_Main@led,w
 10683  129B  3A02               	xorlw	2
 10684  129C  1D03               	skipz
 10685  129D  2AA1               	goto	l6472
 10686                           
 10687                           ;LED_B1.c: 232: {
 10688                           ;LED_B1.c: 233: RC7=~RC7;
 10689  129E  3080               	movlw	128
 10690  129F  068E               	xorwf	14,f
 10691                           
 10692                           ;LED_B1.c: 234: }
 10693  12A0  0008               	return
 10694  12A1                     l6472:	
 10695                           
 10696                           ;LED_B1.c: 243: else if(led == 99)
 10697  12A1  0824               	movf	setLED_Main@led,w
 10698  12A2  3A63               	xorlw	99
 10699  12A3  1D03               	skipz
 10700  12A4  0008               	return
 10701                           
 10702                           ;LED_B1.c: 244: {
 10703                           ;LED_B1.c: 245: RB5=~RB5;
 10704  12A5  3020               	movlw	32
 10705  12A6  068D               	xorwf	13,f
 10706  12A7  0008               	return
 10707  12A8                     __end_of_setLED_Main:	
 10708                           
 10709                           	psect	text57
 10710  1CD4                     __ptext57:	
 10711 ;; *************** function _LED_Initialization *****************
 10712 ;; Defined at:
 10713 ;;		line 35 in file "../src/LED_B1.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;		None               void
 10720 ;; Registers used:
 10721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    8
 10734 ;; This function calls:
 10735 ;;		_setLED_Initialization
 10736 ;; This function is called by:
 10737 ;;		_main
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           
 10742                           ;psect for function _LED_Initialization
 10743  1CD4                     _LED_Initialization:	
 10744                           
 10745                           ;LED_B1.c: 38: setLED_Initialization(1);
 10746                           
 10747                           ;incstack = 0
 10748                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10749  1CD4  3001               	movlw	1
 10750  1CD5  319D  25DA  319C   	fcall	_setLED_Initialization
 10751                           
 10752                           ;LED_B1.c: 41: setLED_Initialization(2);
 10753  1CD8  3002               	movlw	2
 10754  1CD9  319D  25DA  319C   	fcall	_setLED_Initialization
 10755                           
 10756                           ;LED_B1.c: 47: setLED_Initialization(99);
 10757  1CDC  3063               	movlw	99
 10758  1CDD  319D  25DA         	fcall	_setLED_Initialization
 10759  1CDF  0008               	return
 10760  1CE0                     __end_of_LED_Initialization:	
 10761                           
 10762                           	psect	text58
 10763  1DDA                     __ptext58:	
 10764 ;; *************** function _setLED_Initialization *****************
 10765 ;; Defined at:
 10766 ;;		line 67 in file "../src/LED_B1.c"
 10767 ;; Parameters:    Size  Location     Type
 10768 ;;  led             1    wreg     unsigned char 
 10769 ;; Auto vars:     Size  Location     Type
 10770 ;;  led             1    4[BANK0 ] unsigned char 
 10771 ;; Return value:  Size  Location     Type
 10772 ;;		None               void
 10773 ;; Registers used:
 10774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10775 ;; Tracked objects:
 10776 ;;		On entry : 0/0
 10777 ;;		On exit  : 0/0
 10778 ;;		Unchanged: 0/0
 10779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;Total ram usage:        1 bytes
 10785 ;; Hardware stack levels used:    1
 10786 ;; Hardware stack levels required when called:    7
 10787 ;; This function calls:
 10788 ;;		_LedPointSelect
 10789 ;;		_setLED
 10790 ;; This function is called by:
 10791 ;;		_LED_Initialization
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           
 10796                           ;psect for function _setLED_Initialization
 10797  1DDA                     _setLED_Initialization:	
 10798                           
 10799                           ;incstack = 0
 10800                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10801                           ;setLED_Initialization@led stored from wreg
 10802  1DDA  0020               	movlb	0	; select bank0
 10803  1DDB  00A4               	movwf	setLED_Initialization@led
 10804                           
 10805                           ;LED_B1.c: 69: LedPointSelect(led);
 10806  1DDC  0824               	movf	setLED_Initialization@led,w
 10807  1DDD  319F  27DE  319D   	fcall	_LedPointSelect
 10808                           
 10809                           ;LED_B1.c: 70: LED->Enable=1;
 10810  1DE0  0021               	movlb	1	; select bank1
 10811  1DE1  083D               	movf	_LED^(0+128),w
 10812  1DE2  0086               	movwf	6
 10813  1DE3  0187               	clrf	7
 10814  1DE4  1401               	bsf	1,0
 10815                           
 10816                           ;LED_B1.c: 71: setLED(led,0);
 10817  1DE5  0020               	movlb	0	; select bank0
 10818  1DE6  01A2               	clrf	setLED@command
 10819  1DE7  0824               	movf	setLED_Initialization@led,w
 10820  1DE8  3197  2744         	fcall	_setLED
 10821  1DEA  0008               	return
 10822  1DEB                     __end_of_setLED_Initialization:	
 10823                           
 10824                           	psect	text59
 10825  132C                     __ptext59:	
 10826 ;; *************** function _Flash_Memory_Main *****************
 10827 ;; Defined at:
 10828 ;;		line 786 in file "../src/MCU_B1.c"
 10829 ;; Parameters:    Size  Location     Type
 10830 ;;		None
 10831 ;; Auto vars:     Size  Location     Type
 10832 ;;		None
 10833 ;; Return value:  Size  Location     Type
 10834 ;;		None               void
 10835 ;; Registers used:
 10836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10837 ;; Tracked objects:
 10838 ;;		On entry : 0/0
 10839 ;;		On exit  : 0/0
 10840 ;;		Unchanged: 0/0
 10841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;Total ram usage:        0 bytes
 10847 ;; Hardware stack levels used:    1
 10848 ;; Hardware stack levels required when called:    8
 10849 ;; This function calls:
 10850 ;;		_Flash_Memory_Modify
 10851 ;; This function is called by:
 10852 ;;		_main
 10853 ;; This function uses a non-reentrant model
 10854 ;;
 10855                           
 10856                           
 10857                           ;psect for function _Flash_Memory_Main
 10858  132C                     _Flash_Memory_Main:	
 10859                           
 10860                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 10861                           
 10862                           ;incstack = 0
 10863                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10864  132C  0021               	movlb	1	; select bank1
 10865  132D  086F               	movf	_Memory^(0+128),w
 10866  132E  3E24               	addlw	36
 10867  132F  0086               	movwf	6
 10868  1330  3001               	movlw	1	; select bank2/3
 10869  1331  0087               	movwf	7
 10870  1332  1C81               	btfss	1,1
 10871  1333  0008               	return
 10872                           
 10873                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 10874  1334  086F               	movf	_Memory^(0+128),w
 10875  1335  3E24               	addlw	36
 10876  1336  0086               	movwf	6
 10877  1337  3001               	movlw	1	; select bank2/3
 10878  1338  0087               	movwf	7
 10879  1339  1C01               	btfss	1,0
 10880  133A  2B69               	goto	l6982
 10881                           
 10882                           ;MCU_B1.c: 789: Memory->Time++;
 10883  133B  086F               	movf	_Memory^(0+128),w
 10884  133C  3E22               	addlw	34
 10885  133D  0086               	movwf	6
 10886  133E  3001               	movlw	1	; select bank2/3
 10887  133F  0087               	movwf	7
 10888  1340  3001               	movlw	1
 10889  1341  0781               	addwf	1,f
 10890  1342  3141               	addfsr 1,1
 10891  1343  1803               	skipnc
 10892  1344  0A81               	incf	1,f
 10893                           
 10894                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 10895  1345  086F               	movf	_Memory^(0+128),w
 10896  1346  3E22               	addlw	34
 10897  1347  0086               	movwf	6
 10898  1348  3001               	movlw	1	; select bank2/3
 10899  1349  0087               	movwf	7
 10900  134A  3F40               	moviw [0]fsr1
 10901  134B  3A19               	xorlw	25
 10902  134C  1D03               	skipz
 10903  134D  2B50               	goto	u6265
 10904  134E  3F41               	moviw [1]fsr1
 10905  134F  3A00               	xorlw	0
 10906  1350                     u6265:	
 10907  1350  1D03               	skipz
 10908  1351  0008               	return
 10909                           
 10910                           ;MCU_B1.c: 791: {
 10911                           ;MCU_B1.c: 792: Memory->Time = 0;
 10912  1352  086F               	movf	_Memory^(0+128),w
 10913  1353  3E22               	addlw	34
 10914  1354  0086               	movwf	6
 10915  1355  3001               	movlw	1	; select bank2/3
 10916  1356  0087               	movwf	7
 10917  1357  3000               	movlw	0
 10918  1358  3FC0               	movwi [0]fsr1
 10919  1359  3FC1               	movwi [1]fsr1
 10920                           
 10921                           ;MCU_B1.c: 793: Memory->Modify = 0;
 10922  135A  086F               	movf	_Memory^(0+128),w
 10923  135B  3E24               	addlw	36
 10924  135C  0086               	movwf	6
 10925  135D  3001               	movlw	1	; select bank2/3
 10926  135E  0087               	movwf	7
 10927  135F  1001               	bcf	1,0
 10928                           
 10929                           ;MCU_B1.c: 794: Memory->GO = 0;
 10930  1360  086F               	movf	_Memory^(0+128),w
 10931  1361  3E24               	addlw	36
 10932  1362  0086               	movwf	6
 10933  1363  3001               	movlw	1	; select bank2/3
 10934  1364  0087               	movwf	7
 10935  1365  1081               	bcf	1,1
 10936                           
 10937                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 10938  1366  3188  20FA         	fcall	_Flash_Memory_Modify
 10939                           
 10940                           ;MCU_B1.c: 796: }
 10941                           ;MCU_B1.c: 797: } else {
 10942  1368  0008               	return
 10943  1369                     l6982:	
 10944                           
 10945                           ;MCU_B1.c: 798: Memory->GO = 0;
 10946  1369  0021               	movlb	1	; select bank1
 10947  136A  086F               	movf	_Memory^(0+128),w
 10948  136B  3E24               	addlw	36
 10949  136C  0086               	movwf	6
 10950  136D  3001               	movlw	1	; select bank2/3
 10951  136E  0087               	movwf	7
 10952  136F  1081               	bcf	1,1
 10953  1370  0008               	return
 10954  1371                     __end_of_Flash_Memory_Main:	
 10955                           
 10956                           	psect	text60
 10957  08FA                     __ptext60:	
 10958 ;; *************** function _Flash_Memory_Modify *****************
 10959 ;; Defined at:
 10960 ;;		line 855 in file "../src/MCU_B1.c"
 10961 ;; Parameters:    Size  Location     Type
 10962 ;;		None
 10963 ;; Auto vars:     Size  Location     Type
 10964 ;;  i               1    6[BANK0 ] unsigned char 
 10965 ;; Return value:  Size  Location     Type
 10966 ;;		None               void
 10967 ;; Registers used:
 10968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10969 ;; Tracked objects:
 10970 ;;		On entry : 0/0
 10971 ;;		On exit  : 0/0
 10972 ;;		Unchanged: 0/0
 10973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10978 ;;Total ram usage:        3 bytes
 10979 ;; Hardware stack levels used:    1
 10980 ;; Hardware stack levels required when called:    7
 10981 ;; This function calls:
 10982 ;;		_Flash_Memory_Erasing
 10983 ;;		_Flash_Memory_Read
 10984 ;;		_Flash_Memory_Write
 10985 ;; This function is called by:
 10986 ;;		_Flash_Memory_Main
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           
 10991                           ;psect for function _Flash_Memory_Modify
 10992  08FA                     _Flash_Memory_Modify:	
 10993                           
 10994                           ;MCU_B1.c: 856: char i = 0;
 10995                           
 10996                           ;incstack = 0
 10997                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10998  08FA  0020               	movlb	0	; select bank0
 10999  08FB  01A6               	clrf	Flash_Memory_Modify@i
 11000                           
 11001                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 11002  08FC  01A6               	clrf	Flash_Memory_Modify@i
 11003  08FD  3020               	movlw	32
 11004  08FE  0226               	subwf	Flash_Memory_Modify@i,w
 11005  08FF  1803               	btfsc	3,0
 11006  0900  291A               	goto	l6554
 11007  0901                     l6548:	
 11008                           
 11009                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 11010  0901  0826               	movf	Flash_Memory_Modify@i,w
 11011  0902  319E  26CD  3188   	fcall	_Flash_Memory_Read
 11012  0905  0020               	movlb	0	; select bank0
 11013  0906  00A4               	movwf	??_Flash_Memory_Modify
 11014  0907  0826               	movf	Flash_Memory_Modify@i,w
 11015  0908  0021               	movlb	1	; select bank1
 11016  0909  076F               	addwf	_Memory^(0+128),w
 11017  090A  0020               	movlb	0	; select bank0
 11018  090B  00A5               	movwf	??_Flash_Memory_Modify+1
 11019  090C  0825               	movf	??_Flash_Memory_Modify+1,w
 11020  090D  0086               	movwf	6
 11021  090E  3001               	movlw	1	; select bank2/3
 11022  090F  0087               	movwf	7
 11023  0910  0824               	movf	??_Flash_Memory_Modify,w
 11024  0911  0081               	movwf	1
 11025  0912  3001               	movlw	1
 11026  0913  00A4               	movwf	??_Flash_Memory_Modify
 11027  0914  0824               	movf	??_Flash_Memory_Modify,w
 11028  0915  07A6               	addwf	Flash_Memory_Modify@i,f
 11029  0916  3020               	movlw	32
 11030  0917  0226               	subwf	Flash_Memory_Modify@i,w
 11031  0918  1C03               	skipc
 11032  0919  2901               	goto	l6548
 11033  091A                     l6554:	
 11034                           
 11035                           ;MCU_B1.c: 859: }
 11036                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 11037  091A  087D               	movf	_product,w
 11038  091B  3E0C               	addlw	12
 11039  091C  0086               	movwf	6
 11040  091D  3001               	movlw	1	; select bank2/3
 11041  091E  0087               	movwf	7
 11042  091F  0801               	movf	1,w
 11043  0920  00A4               	movwf	??_Flash_Memory_Modify
 11044  0921  0021               	movlb	1	; select bank1
 11045  0922  086F               	movf	_Memory^(0+128),w
 11046  0923  0086               	movwf	6
 11047  0924  3001               	movlw	1	; select bank2/3
 11048  0925  0087               	movwf	7
 11049  0926  0020               	movlb	0	; select bank0
 11050  0927  0824               	movf	??_Flash_Memory_Modify,w
 11051  0928  0081               	movwf	1
 11052                           
 11053                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 11054  0929  087D               	movf	_product,w
 11055  092A  3E0D               	addlw	13
 11056  092B  0086               	movwf	6
 11057  092C  3001               	movlw	1	; select bank2/3
 11058  092D  0087               	movwf	7
 11059  092E  0801               	movf	1,w
 11060  092F  00A4               	movwf	??_Flash_Memory_Modify
 11061  0930  0021               	movlb	1	; select bank1
 11062  0931  0A6F               	incf	_Memory^(0+128),w
 11063  0932  0086               	movwf	6
 11064  0933  3001               	movlw	1	; select bank2/3
 11065  0934  0087               	movwf	7
 11066  0935  0020               	movlb	0	; select bank0
 11067  0936  0824               	movf	??_Flash_Memory_Modify,w
 11068  0937  0081               	movwf	1
 11069                           
 11070                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 11071  0938  087D               	movf	_product,w
 11072  0939  3E0E               	addlw	14
 11073  093A  0086               	movwf	6
 11074  093B  3001               	movlw	1	; select bank2/3
 11075  093C  0087               	movwf	7
 11076  093D  0801               	movf	1,w
 11077  093E  00A4               	movwf	??_Flash_Memory_Modify
 11078  093F  0021               	movlb	1	; select bank1
 11079  0940  086F               	movf	_Memory^(0+128),w
 11080  0941  3E02               	addlw	2
 11081  0942  0086               	movwf	6
 11082  0943  3001               	movlw	1	; select bank2/3
 11083  0944  0087               	movwf	7
 11084  0945  0020               	movlb	0	; select bank0
 11085  0946  0824               	movf	??_Flash_Memory_Modify,w
 11086  0947  0081               	movwf	1
 11087                           
 11088                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 11089  0948  0021               	movlb	1	; select bank1
 11090  0949  086F               	movf	_Memory^(0+128),w
 11091  094A  3E24               	addlw	36
 11092  094B  0086               	movwf	6
 11093  094C  3001               	movlw	1	; select bank2/3
 11094  094D  0087               	movwf	7
 11095  094E  1D01               	btfss	1,2
 11096  094F  2960               	goto	l6558
 11097                           
 11098                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 11099  0950  086F               	movf	_Memory^(0+128),w
 11100  0951  3E24               	addlw	36
 11101  0952  0086               	movwf	6
 11102  0953  3001               	movlw	1	; select bank2/3
 11103  0954  0087               	movwf	7
 11104  0955  1101               	bcf	1,2
 11105                           
 11106                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 11107  0956  086E               	movf	_myMain^(0+128),w
 11108  0957  0086               	movwf	6
 11109  0958  3001               	movlw	1	; select bank2/3
 11110  0959  0087               	movwf	7
 11111  095A  1281               	bcf	1,5
 11112                           
 11113                           ;MCU_B1.c: 871: myMain->First = 0;
 11114  095B  086E               	movf	_myMain^(0+128),w
 11115  095C  0086               	movwf	6
 11116  095D  3001               	movlw	1	; select bank2/3
 11117  095E  0087               	movwf	7
 11118  095F  1381               	bcf	1,7
 11119  0960                     l6558:	
 11120                           
 11121                           ;MCU_B1.c: 873: }
 11122                           ;MCU_B1.c: 874: GIE = 0;
 11123  0960  138B               	bcf	11,7	;volatile
 11124                           
 11125                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 11126  0961  319C  24C8  3188   	fcall	_Flash_Memory_Erasing
 11127                           
 11128                           ;MCU_B1.c: 876: Flash_Memory_Write();
 11129  0964  3191  21F7         	fcall	_Flash_Memory_Write
 11130                           
 11131                           ;MCU_B1.c: 877: GIE = 1;
 11132  0966  178B               	bsf	11,7	;volatile
 11133  0967  0008               	return
 11134  0968                     __end_of_Flash_Memory_Modify:	
 11135                           
 11136                           	psect	text61
 11137  1CC8                     __ptext61:	
 11138 ;; *************** function _Flash_Memory_Erasing *****************
 11139 ;; Defined at:
 11140 ;;		line 844 in file "../src/MCU_B1.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;		None
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;		None
 11145 ;; Return value:  Size  Location     Type
 11146 ;;		None               void
 11147 ;; Registers used:
 11148 ;;		wreg, status,2, status,0, pclath, cstack
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;Total ram usage:        0 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    6
 11161 ;; This function calls:
 11162 ;;		_Flash_Memory_Unlock
 11163 ;; This function is called by:
 11164 ;;		_Flash_Memory_Modify
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _Flash_Memory_Erasing
 11170  1CC8                     _Flash_Memory_Erasing:	
 11171                           
 11172                           ;MCU_B1.c: 845: CFGS = 0;
 11173                           
 11174                           ;incstack = 0
 11175                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11176  1CC8  0023               	movlb	3	; select bank3
 11177  1CC9  1315               	bcf	21,6	;volatile
 11178                           
 11179                           ;MCU_B1.c: 846: PMADRH = 0x30;
 11180  1CCA  3030               	movlw	48
 11181  1CCB  0092               	movwf	18	;volatile
 11182                           
 11183                           ;MCU_B1.c: 847: PMADRL = 0x00;
 11184  1CCC  0191               	clrf	17	;volatile
 11185                           
 11186                           ;MCU_B1.c: 848: FREE = 1;
 11187  1CCD  1615               	bsf	21,4	;volatile
 11188                           
 11189                           ;MCU_B1.c: 849: WREN = 1;
 11190  1CCE  1515               	bsf	21,2	;volatile
 11191                           
 11192                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 11193  1CCF  319C  243B         	fcall	_Flash_Memory_Unlock
 11194                           
 11195                           ;MCU_B1.c: 851: WREN = 0;
 11196  1CD1  0023               	movlb	3	; select bank3
 11197  1CD2  1115               	bcf	21,2	;volatile
 11198  1CD3  0008               	return
 11199  1CD4                     __end_of_Flash_Memory_Erasing:	
 11200                           
 11201                           	psect	text62
 11202  0444                     __ptext62:	
 11203 ;; *************** function _Flash_Memory_Initialization *****************
 11204 ;; Defined at:
 11205 ;;		line 745 in file "../src/MCU_B1.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;		None
 11208 ;; Auto vars:     Size  Location     Type
 11209 ;;  i               1   62[BANK0 ] unsigned char 
 11210 ;; Return value:  Size  Location     Type
 11211 ;;		None               void
 11212 ;; Registers used:
 11213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11214 ;; Tracked objects:
 11215 ;;		On entry : 0/0
 11216 ;;		On exit  : 0/0
 11217 ;;		Unchanged: 0/0
 11218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;Total ram usage:        2 bytes
 11224 ;; Hardware stack levels used:    1
 11225 ;; Hardware stack levels required when called:    8
 11226 ;; This function calls:
 11227 ;;		_Flash_Memory_Read
 11228 ;;		_Flash_Memory_Write
 11229 ;;		_setPercentValue
 11230 ;; This function is called by:
 11231 ;;		_main
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           
 11236                           ;psect for function _Flash_Memory_Initialization
 11237  0444                     _Flash_Memory_Initialization:	
 11238                           
 11239                           ;MCU_B1.c: 746: char i = 0;
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11243  0444  0020               	movlb	0	; select bank0
 11244  0445  01DE               	clrf	Flash_Memory_Initialization@i
 11245                           
 11246                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 11247  0446  301F               	movlw	31
 11248  0447  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11249  044A  3AAA               	xorlw	170
 11250  044B  1D03               	skipz
 11251  044C  2CBE               	goto	l6938
 11252                           
 11253                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 11254  044D  3000               	movlw	0
 11255  044E  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11256  0451  0020               	movlb	0	; select bank0
 11257  0452  00DD               	movwf	??_Flash_Memory_Initialization
 11258  0453  087D               	movf	_product,w
 11259  0454  3E0C               	addlw	12
 11260  0455  0086               	movwf	6
 11261  0456  3001               	movlw	1	; select bank2/3
 11262  0457  0087               	movwf	7
 11263  0458  085D               	movf	??_Flash_Memory_Initialization,w
 11264  0459  0081               	movwf	1
 11265                           
 11266                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 11267  045A  3001               	movlw	1
 11268  045B  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11269  045E  0020               	movlb	0	; select bank0
 11270  045F  00DD               	movwf	??_Flash_Memory_Initialization
 11271  0460  087D               	movf	_product,w
 11272  0461  3E0D               	addlw	13
 11273  0462  0086               	movwf	6
 11274  0463  3001               	movlw	1	; select bank2/3
 11275  0464  0087               	movwf	7
 11276  0465  085D               	movf	??_Flash_Memory_Initialization,w
 11277  0466  0081               	movwf	1
 11278                           
 11279                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 11280  0467  3002               	movlw	2
 11281  0468  319E  26CD  3184   	fcall	_Flash_Memory_Read
 11282  046B  0020               	movlb	0	; select bank0
 11283  046C  00DD               	movwf	??_Flash_Memory_Initialization
 11284  046D  087D               	movf	_product,w
 11285  046E  3E0E               	addlw	14
 11286  046F  0086               	movwf	6
 11287  0470  3001               	movlw	1	; select bank2/3
 11288  0471  0087               	movwf	7
 11289  0472  085D               	movf	??_Flash_Memory_Initialization,w
 11290  0473  0081               	movwf	1
 11291                           
 11292                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-60)*0.8)));
 11293  0474  3020               	movlw	32
 11294  0475  3193  23B6  3184   	fcall	_setPercentValue
 11295  0478  0020               	movlb	0	; select bank0
 11296  0479  00DD               	movwf	??_Flash_Memory_Initialization
 11297  047A  085D               	movf	??_Flash_Memory_Initialization,w
 11298  047B  00DE               	movwf	Flash_Memory_Initialization@i
 11299                           
 11300                           ;MCU_B1.c: 757: product->Data[21] = i;
 11301  047C  085E               	movf	Flash_Memory_Initialization@i,w
 11302  047D  00DD               	movwf	??_Flash_Memory_Initialization
 11303  047E  087D               	movf	_product,w
 11304  047F  3E15               	addlw	21
 11305  0480  0086               	movwf	6
 11306  0481  3001               	movlw	1	; select bank2/3
 11307  0482  0087               	movwf	7
 11308  0483  085D               	movf	??_Flash_Memory_Initialization,w
 11309  0484  0081               	movwf	1
 11310                           
 11311                           ;MCU_B1.c: 758: product->Data[22] = i;
 11312  0485  085E               	movf	Flash_Memory_Initialization@i,w
 11313  0486  00DD               	movwf	??_Flash_Memory_Initialization
 11314  0487  087D               	movf	_product,w
 11315  0488  3E16               	addlw	22
 11316  0489  0086               	movwf	6
 11317  048A  3001               	movlw	1	; select bank2/3
 11318  048B  0087               	movwf	7
 11319  048C  085D               	movf	??_Flash_Memory_Initialization,w
 11320  048D  0081               	movwf	1
 11321                           
 11322                           ;MCU_B1.c: 759: product->Data[23] = i;
 11323  048E  085E               	movf	Flash_Memory_Initialization@i,w
 11324  048F  00DD               	movwf	??_Flash_Memory_Initialization
 11325  0490  087D               	movf	_product,w
 11326  0491  3E17               	addlw	23
 11327  0492  0086               	movwf	6
 11328  0493  3001               	movlw	1	; select bank2/3
 11329  0494  0087               	movwf	7
 11330  0495  085D               	movf	??_Flash_Memory_Initialization,w
 11331  0496  0081               	movwf	1
 11332                           
 11333                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11334  0497  087D               	movf	_product,w
 11335  0498  3E0C               	addlw	12
 11336  0499  0086               	movwf	6
 11337  049A  3001               	movlw	1	; select bank2/3
 11338  049B  0087               	movwf	7
 11339  049C  0801               	movf	1,w
 11340  049D  3AFF               	xorlw	255
 11341  049E  1D03               	skipz
 11342  049F  0008               	return
 11343  04A0  087D               	movf	_product,w
 11344  04A1  3E0D               	addlw	13
 11345  04A2  0086               	movwf	6
 11346  04A3  3001               	movlw	1	; select bank2/3
 11347  04A4  0087               	movwf	7
 11348  04A5  0801               	movf	1,w
 11349  04A6  3AFF               	xorlw	255
 11350  04A7  1D03               	skipz
 11351  04A8  0008               	return
 11352  04A9  087D               	movf	_product,w
 11353  04AA  3E0E               	addlw	14
 11354  04AB  0086               	movwf	6
 11355  04AC  3001               	movlw	1	; select bank2/3
 11356  04AD  0087               	movwf	7
 11357  04AE  0801               	movf	1,w
 11358  04AF  3AFF               	xorlw	255
 11359  04B0  1D03               	skipz
 11360  04B1  0008               	return
 11361                           
 11362                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 11363  04B2  0021               	movlb	1	; select bank1
 11364  04B3  086E               	movf	_myMain^(0+128),w
 11365  04B4  0086               	movwf	6
 11366  04B5  3001               	movlw	1	; select bank2/3
 11367  04B6  0087               	movwf	7
 11368  04B7  1681               	bsf	1,5
 11369                           
 11370                           ;MCU_B1.c: 763: myMain->First = 1;
 11371  04B8  086E               	movf	_myMain^(0+128),w
 11372  04B9  0086               	movwf	6
 11373  04BA  3001               	movlw	1	; select bank2/3
 11374  04BB  0087               	movwf	7
 11375  04BC  1781               	bsf	1,7
 11376                           
 11377                           ;MCU_B1.c: 764: }
 11378                           ;MCU_B1.c: 765: } else {
 11379  04BD  0008               	return
 11380  04BE                     l6938:	
 11381                           
 11382                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-60)*0.8)));
 11383  04BE  3020               	movlw	32
 11384  04BF  3193  23B6  3184   	fcall	_setPercentValue
 11385  04C2  0020               	movlb	0	; select bank0
 11386  04C3  00DD               	movwf	??_Flash_Memory_Initialization
 11387  04C4  085D               	movf	??_Flash_Memory_Initialization,w
 11388  04C5  00DE               	movwf	Flash_Memory_Initialization@i
 11389                           
 11390                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 11391  04C6  30FF               	movlw	255
 11392  04C7  00DD               	movwf	??_Flash_Memory_Initialization
 11393  04C8  0021               	movlb	1	; select bank1
 11394  04C9  086F               	movf	_Memory^(0+128),w
 11395  04CA  0086               	movwf	6
 11396  04CB  3001               	movlw	1	; select bank2/3
 11397  04CC  0087               	movwf	7
 11398  04CD  0020               	movlb	0	; select bank0
 11399  04CE  085D               	movf	??_Flash_Memory_Initialization,w
 11400  04CF  0081               	movwf	1
 11401                           
 11402                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 11403  04D0  30FF               	movlw	255
 11404  04D1  00DD               	movwf	??_Flash_Memory_Initialization
 11405  04D2  0021               	movlb	1	; select bank1
 11406  04D3  0A6F               	incf	_Memory^(0+128),w
 11407  04D4  0086               	movwf	6
 11408  04D5  3001               	movlw	1	; select bank2/3
 11409  04D6  0087               	movwf	7
 11410  04D7  0020               	movlb	0	; select bank0
 11411  04D8  085D               	movf	??_Flash_Memory_Initialization,w
 11412  04D9  0081               	movwf	1
 11413                           
 11414                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 11415  04DA  30FF               	movlw	255
 11416  04DB  00DD               	movwf	??_Flash_Memory_Initialization
 11417  04DC  0021               	movlb	1	; select bank1
 11418  04DD  086F               	movf	_Memory^(0+128),w
 11419  04DE  3E02               	addlw	2
 11420  04DF  0086               	movwf	6
 11421  04E0  3001               	movlw	1	; select bank2/3
 11422  04E1  0087               	movwf	7
 11423  04E2  0020               	movlb	0	; select bank0
 11424  04E3  085D               	movf	??_Flash_Memory_Initialization,w
 11425  04E4  0081               	movwf	1
 11426                           
 11427                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 11428  04E5  30FF               	movlw	255
 11429  04E6  00DD               	movwf	??_Flash_Memory_Initialization
 11430  04E7  0021               	movlb	1	; select bank1
 11431  04E8  086F               	movf	_Memory^(0+128),w
 11432  04E9  3E03               	addlw	3
 11433  04EA  0086               	movwf	6
 11434  04EB  3001               	movlw	1	; select bank2/3
 11435  04EC  0087               	movwf	7
 11436  04ED  0020               	movlb	0	; select bank0
 11437  04EE  085D               	movf	??_Flash_Memory_Initialization,w
 11438  04EF  0081               	movwf	1
 11439                           
 11440                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 11441  04F0  30FF               	movlw	255
 11442  04F1  00DD               	movwf	??_Flash_Memory_Initialization
 11443  04F2  0021               	movlb	1	; select bank1
 11444  04F3  086F               	movf	_Memory^(0+128),w
 11445  04F4  3E04               	addlw	4
 11446  04F5  0086               	movwf	6
 11447  04F6  3001               	movlw	1	; select bank2/3
 11448  04F7  0087               	movwf	7
 11449  04F8  0020               	movlb	0	; select bank0
 11450  04F9  085D               	movf	??_Flash_Memory_Initialization,w
 11451  04FA  0081               	movwf	1
 11452                           
 11453                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 11454  04FB  30FF               	movlw	255
 11455  04FC  00DD               	movwf	??_Flash_Memory_Initialization
 11456  04FD  0021               	movlb	1	; select bank1
 11457  04FE  086F               	movf	_Memory^(0+128),w
 11458  04FF  3E05               	addlw	5
 11459  0500  0086               	movwf	6
 11460  0501  3001               	movlw	1	; select bank2/3
 11461  0502  0087               	movwf	7
 11462  0503  0020               	movlb	0	; select bank0
 11463  0504  085D               	movf	??_Flash_Memory_Initialization,w
 11464  0505  0081               	movwf	1
 11465                           
 11466                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 11467  0506  30AA               	movlw	170
 11468  0507  00DD               	movwf	??_Flash_Memory_Initialization
 11469  0508  0021               	movlb	1	; select bank1
 11470  0509  086F               	movf	_Memory^(0+128),w
 11471  050A  3E1F               	addlw	31
 11472  050B  0086               	movwf	6
 11473  050C  3001               	movlw	1	; select bank2/3
 11474  050D  0087               	movwf	7
 11475  050E  0020               	movlb	0	; select bank0
 11476  050F  085D               	movf	??_Flash_Memory_Initialization,w
 11477  0510  0081               	movwf	1
 11478                           
 11479                           ;MCU_B1.c: 774: product->Data[21] = i;
 11480  0511  085E               	movf	Flash_Memory_Initialization@i,w
 11481  0512  00DD               	movwf	??_Flash_Memory_Initialization
 11482  0513  087D               	movf	_product,w
 11483  0514  3E15               	addlw	21
 11484  0515  0086               	movwf	6
 11485  0516  3001               	movlw	1	; select bank2/3
 11486  0517  0087               	movwf	7
 11487  0518  085D               	movf	??_Flash_Memory_Initialization,w
 11488  0519  0081               	movwf	1
 11489                           
 11490                           ;MCU_B1.c: 775: product->Data[22] = i;
 11491  051A  085E               	movf	Flash_Memory_Initialization@i,w
 11492  051B  00DD               	movwf	??_Flash_Memory_Initialization
 11493  051C  087D               	movf	_product,w
 11494  051D  3E16               	addlw	22
 11495  051E  0086               	movwf	6
 11496  051F  3001               	movlw	1	; select bank2/3
 11497  0520  0087               	movwf	7
 11498  0521  085D               	movf	??_Flash_Memory_Initialization,w
 11499  0522  0081               	movwf	1
 11500                           
 11501                           ;MCU_B1.c: 776: product->Data[23] = i;
 11502  0523  085E               	movf	Flash_Memory_Initialization@i,w
 11503  0524  00DD               	movwf	??_Flash_Memory_Initialization
 11504  0525  087D               	movf	_product,w
 11505  0526  3E17               	addlw	23
 11506  0527  0086               	movwf	6
 11507  0528  3001               	movlw	1	; select bank2/3
 11508  0529  0087               	movwf	7
 11509  052A  085D               	movf	??_Flash_Memory_Initialization,w
 11510  052B  0081               	movwf	1
 11511                           
 11512                           ;MCU_B1.c: 777: GIE = 0;
 11513  052C  138B               	bcf	11,7	;volatile
 11514                           
 11515                           ;MCU_B1.c: 778: Flash_Memory_Write();
 11516  052D  3191  21F7         	fcall	_Flash_Memory_Write
 11517                           
 11518                           ;MCU_B1.c: 779: GIE = 1;
 11519  052F  178B               	bsf	11,7	;volatile
 11520                           
 11521                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 11522  0530  0021               	movlb	1	; select bank1
 11523  0531  086E               	movf	_myMain^(0+128),w
 11524  0532  0086               	movwf	6
 11525  0533  3001               	movlw	1	; select bank2/3
 11526  0534  0087               	movwf	7
 11527  0535  1681               	bsf	1,5
 11528                           
 11529                           ;MCU_B1.c: 781: myMain->First = 1;
 11530  0536  086E               	movf	_myMain^(0+128),w
 11531  0537  0086               	movwf	6
 11532  0538  3001               	movlw	1	; select bank2/3
 11533  0539  0087               	movwf	7
 11534  053A  1781               	bsf	1,7
 11535  053B  0008               	return
 11536  053C                     __end_of_Flash_Memory_Initialization:	
 11537                           
 11538                           	psect	text63
 11539  11F7                     __ptext63:	
 11540 ;; *************** function _Flash_Memory_Write *****************
 11541 ;; Defined at:
 11542 ;;		line 825 in file "../src/MCU_B1.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;		None
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;  i               1    1[BANK0 ] unsigned char 
 11547 ;; Return value:  Size  Location     Type
 11548 ;;		None               void
 11549 ;; Registers used:
 11550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11551 ;; Tracked objects:
 11552 ;;		On entry : 0/0
 11553 ;;		On exit  : 0/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;Total ram usage:        2 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    6
 11563 ;; This function calls:
 11564 ;;		_Flash_Memory_Unlock
 11565 ;; This function is called by:
 11566 ;;		_Flash_Memory_Initialization
 11567 ;;		_Flash_Memory_Modify
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           
 11572                           ;psect for function _Flash_Memory_Write
 11573  11F7                     _Flash_Memory_Write:	
 11574                           
 11575                           ;MCU_B1.c: 826: char i = 0;
 11576                           
 11577                           ;incstack = 0
 11578                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11579  11F7  0020               	movlb	0	; select bank0
 11580  11F8  01A1               	clrf	Flash_Memory_Write@i
 11581                           
 11582                           ;MCU_B1.c: 827: CFGS = 0;
 11583  11F9  0023               	movlb	3	; select bank3
 11584  11FA  1315               	bcf	21,6	;volatile
 11585                           
 11586                           ;MCU_B1.c: 828: PMADRH = 0x30;
 11587  11FB  3030               	movlw	48
 11588  11FC  0092               	movwf	18	;volatile
 11589                           
 11590                           ;MCU_B1.c: 829: PMDATH = 0;
 11591  11FD  0194               	clrf	20	;volatile
 11592                           
 11593                           ;MCU_B1.c: 830: FREE = 0;
 11594  11FE  1215               	bcf	21,4	;volatile
 11595                           
 11596                           ;MCU_B1.c: 831: LWLO = 1;
 11597  11FF  1695               	bsf	21,5	;volatile
 11598                           
 11599                           ;MCU_B1.c: 832: WREN = 1;
 11600  1200  1515               	bsf	21,2	;volatile
 11601                           
 11602                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 11603  1201  0020               	movlb	0	; select bank0
 11604  1202  01A1               	clrf	Flash_Memory_Write@i
 11605  1203  3020               	movlw	32
 11606  1204  0221               	subwf	Flash_Memory_Write@i,w
 11607  1205  1803               	btfsc	3,0
 11608  1206  2A23               	goto	l1313
 11609  1207                     l6052:	
 11610                           
 11611                           ;MCU_B1.c: 834: PMADRL = i;
 11612  1207  0821               	movf	Flash_Memory_Write@i,w
 11613  1208  0023               	movlb	3	; select bank3
 11614  1209  0091               	movwf	17	;volatile
 11615                           
 11616                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 11617  120A  0020               	movlb	0	; select bank0
 11618  120B  0821               	movf	Flash_Memory_Write@i,w
 11619  120C  0021               	movlb	1	; select bank1
 11620  120D  076F               	addwf	_Memory^(0+128),w
 11621  120E  0020               	movlb	0	; select bank0
 11622  120F  00A0               	movwf	??_Flash_Memory_Write
 11623  1210  0820               	movf	??_Flash_Memory_Write,w
 11624  1211  0086               	movwf	6
 11625  1212  3001               	movlw	1	; select bank2/3
 11626  1213  0087               	movwf	7
 11627  1214  0801               	movf	1,w
 11628  1215  0023               	movlb	3	; select bank3
 11629  1216  0093               	movwf	19	;volatile
 11630                           
 11631                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 11632  1217  319C  243B  3191   	fcall	_Flash_Memory_Unlock
 11633  121A  3001               	movlw	1
 11634  121B  0020               	movlb	0	; select bank0
 11635  121C  00A0               	movwf	??_Flash_Memory_Write
 11636  121D  0820               	movf	??_Flash_Memory_Write,w
 11637  121E  07A1               	addwf	Flash_Memory_Write@i,f
 11638  121F  3020               	movlw	32
 11639  1220  0221               	subwf	Flash_Memory_Write@i,w
 11640  1221  1C03               	skipc
 11641  1222  2A07               	goto	l6052
 11642  1223                     l1313:	
 11643                           
 11644                           ;MCU_B1.c: 837: }
 11645                           ;MCU_B1.c: 838: LWLO = 0;
 11646  1223  0023               	movlb	3	; select bank3
 11647  1224  1295               	bcf	21,5	;volatile
 11648                           
 11649                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 11650  1225  319C  243B         	fcall	_Flash_Memory_Unlock
 11651                           
 11652                           ;MCU_B1.c: 840: WREN = 0;
 11653  1227  0023               	movlb	3	; select bank3
 11654  1228  1115               	bcf	21,2	;volatile
 11655  1229  0008               	return
 11656  122A                     __end_of_Flash_Memory_Write:	
 11657                           
 11658                           	psect	text64
 11659  1C3B                     __ptext64:	
 11660 ;; *************** function _Flash_Memory_Unlock *****************
 11661 ;; Defined at:
 11662 ;;		line 804 in file "../src/MCU_B1.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;		None               void
 11669 ;; Registers used:
 11670 ;;		wreg
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    5
 11683 ;; This function calls:
 11684 ;;		Nothing
 11685 ;; This function is called by:
 11686 ;;		_Flash_Memory_Write
 11687 ;;		_Flash_Memory_Erasing
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           
 11692                           ;psect for function _Flash_Memory_Unlock
 11693  1C3B                     _Flash_Memory_Unlock:	
 11694                           
 11695                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 11696                           
 11697                           ;incstack = 0
 11698                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11699  1C3B  3055               	movlw	85
 11700  1C3C  0023               	movlb	3	; select bank3
 11701  1C3D  0096               	movwf	22	;volatile
 11702                           
 11703                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 11704  1C3E  30AA               	movlw	170
 11705  1C3F  0096               	movwf	22	;volatile
 11706                           
 11707                           ;MCU_B1.c: 807: WR = 1;
 11708  1C40  1495               	bsf	21,1	;volatile
 11709                           
 11710                           ;MCU_B1.c: 808: __nop();
 11711  1C41  0000               	nop
 11712                           
 11713                           ;MCU_B1.c: 809: __nop();
 11714  1C42  0000               	nop
 11715  1C43  0008               	return
 11716  1C44                     __end_of_Flash_Memory_Unlock:	
 11717                           
 11718                           	psect	text65
 11719  1ECD                     __ptext65:	
 11720 ;; *************** function _Flash_Memory_Read *****************
 11721 ;; Defined at:
 11722 ;;		line 813 in file "../src/MCU_B1.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;  address         1    wreg     unsigned char 
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  address         1    2[BANK0 ] unsigned char 
 11727 ;;  ret             1    3[BANK0 ] unsigned char 
 11728 ;;  i               1    1[BANK0 ] unsigned char 
 11729 ;; Return value:  Size  Location     Type
 11730 ;;                  1    wreg      unsigned char 
 11731 ;; Registers used:
 11732 ;;		wreg, status,2
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;Total ram usage:        4 bytes
 11743 ;; Hardware stack levels used:    1
 11744 ;; Hardware stack levels required when called:    5
 11745 ;; This function calls:
 11746 ;;		Nothing
 11747 ;; This function is called by:
 11748 ;;		_Flash_Memory_Initialization
 11749 ;;		_Flash_Memory_Modify
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753                           
 11754                           ;psect for function _Flash_Memory_Read
 11755  1ECD                     _Flash_Memory_Read:	
 11756                           
 11757                           ;incstack = 0
 11758                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11759                           ;Flash_Memory_Read@address stored from wreg
 11760  1ECD  0020               	movlb	0	; select bank0
 11761  1ECE  00A2               	movwf	Flash_Memory_Read@address
 11762                           
 11763                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 11764  1ECF  01A1               	clrf	Flash_Memory_Read@i
 11765  1ED0  01A3               	clrf	Flash_Memory_Read@ret
 11766                           
 11767                           ;MCU_B1.c: 815: PMADRH = 0x30;
 11768  1ED1  3030               	movlw	48
 11769  1ED2  0023               	movlb	3	; select bank3
 11770  1ED3  0092               	movwf	18	;volatile
 11771                           
 11772                           ;MCU_B1.c: 816: PMADRL = address;
 11773  1ED4  0020               	movlb	0	; select bank0
 11774  1ED5  0822               	movf	Flash_Memory_Read@address,w
 11775  1ED6  0023               	movlb	3	; select bank3
 11776  1ED7  0091               	movwf	17	;volatile
 11777                           
 11778                           ;MCU_B1.c: 817: CFGS = 0;
 11779  1ED8  1315               	bcf	21,6	;volatile
 11780                           
 11781                           ;MCU_B1.c: 818: RD = 1;
 11782  1ED9  1415               	bsf	21,0	;volatile
 11783                           
 11784                           ;MCU_B1.c: 819: i = PMDATH;
 11785  1EDA  0814               	movf	20,w	;volatile
 11786  1EDB  0020               	movlb	0	; select bank0
 11787  1EDC  00A0               	movwf	??_Flash_Memory_Read
 11788  1EDD  0820               	movf	??_Flash_Memory_Read,w
 11789  1EDE  00A1               	movwf	Flash_Memory_Read@i
 11790                           
 11791                           ;MCU_B1.c: 820: ret = PMDATL;
 11792  1EDF  0023               	movlb	3	; select bank3
 11793  1EE0  0813               	movf	19,w	;volatile
 11794  1EE1  0020               	movlb	0	; select bank0
 11795  1EE2  00A0               	movwf	??_Flash_Memory_Read
 11796  1EE3  0820               	movf	??_Flash_Memory_Read,w
 11797  1EE4  00A3               	movwf	Flash_Memory_Read@ret
 11798                           
 11799                           ;MCU_B1.c: 821: return ret;
 11800  1EE5  0823               	movf	Flash_Memory_Read@ret,w
 11801  1EE6  0008               	return
 11802  1EE7                     __end_of_Flash_Memory_Read:	
 11803                           
 11804                           	psect	text66
 11805  1C26                     __ptext66:	
 11806 ;; *************** function _DimmerLights_Main *****************
 11807 ;; Defined at:
 11808 ;;		line 407 in file "../src/Dimmer_B1.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;		None
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;		None
 11813 ;; Return value:  Size  Location     Type
 11814 ;;		None               void
 11815 ;; Registers used:
 11816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;Total ram usage:        0 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; Hardware stack levels required when called:   11
 11829 ;; This function calls:
 11830 ;;		_DimmerLights_Close
 11831 ;;		_setDimmerLights_Main
 11832 ;; This function is called by:
 11833 ;;		_main
 11834 ;; This function uses a non-reentrant model
 11835 ;;
 11836                           
 11837                           
 11838                           ;psect for function _DimmerLights_Main
 11839  1C26                     _DimmerLights_Main:	
 11840                           
 11841                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11845  1C26  3001               	movlw	1
 11846  1C27  3196  2631  319C   	fcall	_setDimmerLights_Main
 11847                           
 11848                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11849  1C2A  319D  25FD         	fcall	_DimmerLights_Close
 11850  1C2C  0008               	return
 11851  1C2D                     __end_of_DimmerLights_Main:	
 11852                           
 11853                           	psect	text67
 11854  1631                     __ptext67:	
 11855 ;; *************** function _setDimmerLights_Main *****************
 11856 ;; Defined at:
 11857 ;;		line 425 in file "../src/Dimmer_B1.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;  lights          1    wreg     unsigned char 
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;  lights          1   70[BANK0 ] unsigned char 
 11862 ;;  clear           1   69[BANK0 ] unsigned char 
 11863 ;; Return value:  Size  Location     Type
 11864 ;;		None               void
 11865 ;; Registers used:
 11866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11867 ;; Tracked objects:
 11868 ;;		On entry : 0/0
 11869 ;;		On exit  : 0/0
 11870 ;;		Unchanged: 0/0
 11871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;Total ram usage:        2 bytes
 11877 ;; Hardware stack levels used:    1
 11878 ;; Hardware stack levels required when called:   10
 11879 ;; This function calls:
 11880 ;;		_DimmerLightsPointSelect
 11881 ;;		_setBuz
 11882 ;;		_setDimmerLights
 11883 ;;		_setDimmerLights_Adj
 11884 ;; This function is called by:
 11885 ;;		_DimmerLights_Main
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           
 11890                           ;psect for function _setDimmerLights_Main
 11891  1631                     _setDimmerLights_Main:	
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11895                           ;setDimmerLights_Main@lights stored from wreg
 11896  1631  0020               	movlb	0	; select bank0
 11897  1632  00E6               	movwf	setDimmerLights_Main@lights
 11898                           
 11899                           ;Dimmer_B1.c: 426: char clear = 1;
 11900  1633  01E5               	clrf	setDimmerLights_Main@clear
 11901  1634  0AE5               	incf	setDimmerLights_Main@clear,f
 11902                           
 11903                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11904  1635  0866               	movf	setDimmerLights_Main@lights,w
 11905  1636  319C  2482  3196   	fcall	_DimmerLightsPointSelect
 11906                           
 11907                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11908  1639  0878               	movf	_DimmerLights,w
 11909  163A  3E08               	addlw	8
 11910  163B  0086               	movwf	6
 11911  163C  3001               	movlw	1	; select bank2/3
 11912  163D  0087               	movwf	7
 11913  163E  1D01               	btfss	1,2
 11914  163F  2E5E               	goto	l6438
 11915                           
 11916                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11917  1640  0020               	movlb	0	; select bank0
 11918  1641  0865               	movf	setDimmerLights_Main@clear,w
 11919  1642  3A01               	xorlw	1
 11920  1643  1D03               	skipz
 11921  1644  0008               	return
 11922                           
 11923                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11924  1645  0878               	movf	_DimmerLights,w
 11925  1646  3E08               	addlw	8
 11926  1647  0086               	movwf	6
 11927  1648  3001               	movlw	1	; select bank2/3
 11928  1649  0087               	movwf	7
 11929  164A  1101               	bcf	1,2
 11930                           
 11931                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 11932  164B  0878               	movf	_DimmerLights,w
 11933  164C  3E08               	addlw	8
 11934  164D  0086               	movwf	6
 11935  164E  3001               	movlw	1	; select bank2/3
 11936  164F  0087               	movwf	7
 11937  1650  1C81               	btfss	1,1
 11938  1651  2E58               	goto	l6436
 11939                           
 11940                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 11941  1652  01A4               	clrf	setDimmerLights@status
 11942  1653  0AA4               	incf	setDimmerLights@status,f
 11943  1654  0866               	movf	setDimmerLights_Main@lights,w
 11944  1655  318B  2334         	fcall	_setDimmerLights
 11945                           
 11946                           ;Dimmer_B1.c: 452: } else {
 11947  1657  0008               	return
 11948  1658                     l6436:	
 11949                           
 11950                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 11951  1658  0020               	movlb	0	; select bank0
 11952  1659  01A4               	clrf	setDimmerLights@status
 11953  165A  0866               	movf	setDimmerLights_Main@lights,w
 11954  165B  318B  2334         	fcall	_setDimmerLights
 11955                           
 11956                           ;Dimmer_B1.c: 454: }
 11957                           ;Dimmer_B1.c: 458: }
 11958                           ;Dimmer_B1.c: 459: } else {
 11959  165D  0008               	return
 11960  165E                     l6438:	
 11961                           
 11962                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 11963  165E  0878               	movf	_DimmerLights,w
 11964  165F  3E08               	addlw	8
 11965  1660  0086               	movwf	6
 11966  1661  3001               	movlw	1	; select bank2/3
 11967  1662  0087               	movwf	7
 11968  1663  1E01               	btfss	1,4
 11969  1664  0008               	return
 11970                           
 11971                           ;Dimmer_B1.c: 461: if (clear == 1) {
 11972  1665  0020               	movlb	0	; select bank0
 11973  1666  0865               	movf	setDimmerLights_Main@clear,w
 11974  1667  3A01               	xorlw	1
 11975  1668  1D03               	skipz
 11976  1669  0008               	return
 11977                           
 11978                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 11979  166A  0878               	movf	_DimmerLights,w
 11980  166B  3E08               	addlw	8
 11981  166C  0086               	movwf	6
 11982  166D  3001               	movlw	1	; select bank2/3
 11983  166E  0087               	movwf	7
 11984  166F  1201               	bcf	1,4
 11985                           
 11986                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 11987  1670  0878               	movf	_DimmerLights,w
 11988  1671  3E08               	addlw	8
 11989  1672  0086               	movwf	6
 11990  1673  3001               	movlw	1	; select bank2/3
 11991  1674  0087               	movwf	7
 11992  1675  1D81               	btfss	1,3
 11993  1676  2E86               	goto	l6446
 11994                           
 11995                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 11996  1677  01E2               	clrf	setDimmerLights_Adj@status
 11997  1678  0AE2               	incf	setDimmerLights_Adj@status,f
 11998  1679  0866               	movf	setDimmerLights_Main@lights,w
 11999  167A  3192  222A  3196   	fcall	_setDimmerLights_Adj
 12000                           
 12001                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12002  167D  3064               	movlw	100
 12003  167E  0020               	movlb	0	; select bank0
 12004  167F  00A9               	movwf	setBuz@time
 12005  1680  3000               	movlw	0
 12006  1681  00AA               	movwf	setBuz@time+1
 12007  1682  3001               	movlw	1
 12008  1683  318C  243C         	fcall	_setBuz
 12009                           
 12010                           ;Dimmer_B1.c: 466: } else {
 12011  1685  0008               	return
 12012  1686                     l6446:	
 12013                           
 12014                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12015  1686  0020               	movlb	0	; select bank0
 12016  1687  01E2               	clrf	setDimmerLights_Adj@status
 12017  1688  0866               	movf	setDimmerLights_Main@lights,w
 12018  1689  3192  222A         	fcall	_setDimmerLights_Adj
 12019  168B  0008               	return
 12020  168C                     __end_of_setDimmerLights_Main:	
 12021                           
 12022                           	psect	text68
 12023  122A                     __ptext68:	
 12024 ;; *************** function _setDimmerLights_Adj *****************
 12025 ;; Defined at:
 12026 ;;		line 646 in file "../src/Dimmer_B1.c"
 12027 ;; Parameters:    Size  Location     Type
 12028 ;;  lights          1    wreg     unsigned char 
 12029 ;;  status          1   66[BANK0 ] unsigned char 
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;  lights          1   68[BANK0 ] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;		None               void
 12034 ;; Registers used:
 12035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12041 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12042 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;Total ram usage:        3 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; Hardware stack levels required when called:    9
 12048 ;; This function calls:
 12049 ;;		_DimmerLightsPointSelect
 12050 ;;		_setRF_DimmerLights
 12051 ;;		_setTxData
 12052 ;; This function is called by:
 12053 ;;		_setDimmerLights_Main
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function _setDimmerLights_Adj
 12059  122A                     _setDimmerLights_Adj:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12063                           ;setDimmerLights_Adj@lights stored from wreg
 12064  122A  0020               	movlb	0	; select bank0
 12065  122B  00E4               	movwf	setDimmerLights_Adj@lights
 12066                           
 12067                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12068  122C  0864               	movf	setDimmerLights_Adj@lights,w
 12069  122D  319C  2482  3192   	fcall	_DimmerLightsPointSelect
 12070                           
 12071                           ;Dimmer_B1.c: 648: if (status == 1) {
 12072  1230  0020               	movlb	0	; select bank0
 12073  1231  0862               	movf	setDimmerLights_Adj@status,w
 12074  1232  3A01               	xorlw	1
 12075  1233  1D03               	skipz
 12076  1234  2A40               	goto	l6006
 12077                           
 12078                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12079  1235  0878               	movf	_DimmerLights,w
 12080  1236  0086               	movwf	6
 12081  1237  3001               	movlw	1	; select bank2/3
 12082  1238  0087               	movwf	7
 12083  1239  1581               	bsf	1,3
 12084                           
 12085                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12086  123A  0878               	movf	_DimmerLights,w
 12087  123B  0086               	movwf	6
 12088  123C  3001               	movlw	1	; select bank2/3
 12089  123D  0087               	movwf	7
 12090  123E  1481               	bsf	1,1
 12091                           
 12092                           ;Dimmer_B1.c: 651: } else {
 12093  123F  0008               	return
 12094  1240                     l6006:	
 12095                           
 12096                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12097  1240  0878               	movf	_DimmerLights,w
 12098  1241  0086               	movwf	6
 12099  1242  3001               	movlw	1	; select bank2/3
 12100  1243  0087               	movwf	7
 12101  1244  1D81               	btfss	1,3
 12102  1245  0008               	return
 12103                           
 12104                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12105  1246  0878               	movf	_DimmerLights,w
 12106  1247  0086               	movwf	6
 12107  1248  3001               	movlw	1	; select bank2/3
 12108  1249  0087               	movwf	7
 12109  124A  1081               	bcf	1,1
 12110                           
 12111                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12112  124B  0878               	movf	_DimmerLights,w
 12113  124C  0086               	movwf	6
 12114  124D  3001               	movlw	1	; select bank2/3
 12115  124E  0087               	movwf	7
 12116  124F  1181               	bcf	1,3
 12117                           
 12118                           ;Dimmer_B1.c: 656: ;;
 12119                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12120  1250  0878               	movf	_DimmerLights,w
 12121  1251  3E04               	addlw	4
 12122  1252  0086               	movwf	6
 12123  1253  3001               	movlw	1	; select bank2/3
 12124  1254  0087               	movwf	7
 12125  1255  0801               	movf	1,w
 12126  1256  00E3               	movwf	??_setDimmerLights_Adj
 12127  1257  0878               	movf	_DimmerLights,w
 12128  1258  3E05               	addlw	5
 12129  1259  0086               	movwf	6
 12130  125A  3001               	movlw	1	; select bank2/3
 12131  125B  0087               	movwf	7
 12132  125C  0863               	movf	??_setDimmerLights_Adj,w
 12133  125D  0081               	movwf	1
 12134                           
 12135                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12136  125E  01DD               	clrf	setRF_DimmerLights@on
 12137  125F  0ADD               	incf	setRF_DimmerLights@on,f
 12138  1260  0864               	movf	setDimmerLights_Adj@lights,w
 12139  1261  3188  208E  3192   	fcall	_setRF_DimmerLights
 12140                           
 12141                           ;Dimmer_B1.c: 666: setTxData(1);
 12142  1264  3001               	movlw	1
 12143  1265  318D  2554         	fcall	_setTxData
 12144  1267  0008               	return
 12145  1268                     __end_of_setDimmerLights_Adj:	
 12146                           
 12147                           	psect	text69
 12148  0B34                     __ptext69:	
 12149 ;; *************** function _setDimmerLights *****************
 12150 ;; Defined at:
 12151 ;;		line 593 in file "../src/Dimmer_B1.c"
 12152 ;; Parameters:    Size  Location     Type
 12153 ;;  lights          1    wreg     unsigned char 
 12154 ;;  status          1    4[BANK0 ] unsigned char 
 12155 ;; Auto vars:     Size  Location     Type
 12156 ;;  lights          1    6[BANK0 ] unsigned char 
 12157 ;; Return value:  Size  Location     Type
 12158 ;;		None               void
 12159 ;; Registers used:
 12160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12161 ;; Tracked objects:
 12162 ;;		On entry : 0/0
 12163 ;;		On exit  : 0/0
 12164 ;;		Unchanged: 0/0
 12165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12166 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12170 ;;Total ram usage:        3 bytes
 12171 ;; Hardware stack levels used:    1
 12172 ;; Hardware stack levels required when called:    7
 12173 ;; This function calls:
 12174 ;;		_DimmerLightsPointSelect
 12175 ;;		_setLED
 12176 ;;		_setMemory_GO
 12177 ;; This function is called by:
 12178 ;;		_setDimmerLights_Main
 12179 ;;		_setControl_Lights_Table
 12180 ;; This function uses a non-reentrant model
 12181 ;;
 12182                           
 12183                           
 12184                           ;psect for function _setDimmerLights
 12185  0B34                     _setDimmerLights:	
 12186                           
 12187                           ;incstack = 0
 12188                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12189                           ;setDimmerLights@lights stored from wreg
 12190  0B34  0020               	movlb	0	; select bank0
 12191  0B35  00A6               	movwf	setDimmerLights@lights
 12192                           
 12193                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12194  0B36  0826               	movf	setDimmerLights@lights,w
 12195  0B37  319C  2482  318B   	fcall	_DimmerLightsPointSelect
 12196                           
 12197                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12198  0B3A  0020               	movlb	0	; select bank0
 12199  0B3B  0826               	movf	setDimmerLights@lights,w
 12200  0B3C  00A5               	movwf	??_setDimmerLights
 12201  0B3D  0021               	movlb	1	; select bank1
 12202  0B3E  0A3A               	incf	_Dimmer^(0+128),w
 12203  0B3F  0086               	movwf	6
 12204  0B40  0187               	clrf	7
 12205  0B41  0020               	movlb	0	; select bank0
 12206  0B42  0825               	movf	??_setDimmerLights,w
 12207  0B43  0081               	movwf	1
 12208                           
 12209                           ;Dimmer_B1.c: 596: if (status == 1) {
 12210  0B44  0824               	movf	setDimmerLights@status,w
 12211  0B45  3A01               	xorlw	1
 12212  0B46  1D03               	skipz
 12213  0B47  2B89               	goto	l5686
 12214                           
 12215                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12216  0B48  0878               	movf	_DimmerLights,w
 12217  0B49  0086               	movwf	6
 12218  0B4A  3001               	movlw	1	; select bank2/3
 12219  0B4B  0087               	movwf	7
 12220  0B4C  1681               	bsf	1,5
 12221                           
 12222                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12223  0B4D  01A2               	clrf	setLED@command
 12224  0B4E  0826               	movf	setDimmerLights@lights,w
 12225  0B4F  3197  2744  318B   	fcall	_setLED
 12226                           
 12227                           ;Dimmer_B1.c: 599: RC7=!0;
 12228  0B52  0020               	movlb	0	; select bank0
 12229  0B53  178E               	bsf	14,7	;volatile
 12230                           
 12231                           ;Dimmer_B1.c: 600: ;;
 12232                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12233  0B54  0878               	movf	_DimmerLights,w
 12234  0B55  0086               	movwf	6
 12235  0B56  3001               	movlw	1	; select bank2/3
 12236  0B57  0087               	movwf	7
 12237  0B58  1481               	bsf	1,1
 12238                           
 12239                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12240  0B59  3007               	movlw	7
 12241  0B5A  00A5               	movwf	??_setDimmerLights
 12242  0B5B  0878               	movf	_DimmerLights,w
 12243  0B5C  3E02               	addlw	2
 12244  0B5D  0086               	movwf	6
 12245  0B5E  3001               	movlw	1	; select bank2/3
 12246  0B5F  0087               	movwf	7
 12247  0B60  0825               	movf	??_setDimmerLights,w
 12248  0B61  0081               	movwf	1
 12249                           
 12250                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12251  0B62  0878               	movf	_DimmerLights,w
 12252  0B63  0086               	movwf	6
 12253  0B64  3001               	movlw	1	; select bank2/3
 12254  0B65  0087               	movwf	7
 12255  0B66  1B01               	btfsc	1,6
 12256  0B67  0008               	return
 12257                           
 12258                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12259  0B68  0878               	movf	_DimmerLights,w
 12260  0B69  0086               	movwf	6
 12261  0B6A  3001               	movlw	1	; select bank2/3
 12262  0B6B  0087               	movwf	7
 12263  0B6C  1701               	bsf	1,6
 12264                           
 12265                           ;Dimmer_B1.c: 607: ;;
 12266                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12267  0B6D  3000               	movlw	0
 12268  0B6E  319F  275D         	fcall	_setMemory_GO
 12269                           
 12270                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12271  0B70  0878               	movf	_DimmerLights,w
 12272  0B71  3E05               	addlw	5
 12273  0B72  0086               	movwf	6
 12274  0B73  3001               	movlw	1	; select bank2/3
 12275  0B74  0087               	movwf	7
 12276  0B75  0801               	movf	1,w
 12277  0B76  0020               	movlb	0	; select bank0
 12278  0B77  00A5               	movwf	??_setDimmerLights
 12279  0B78  0878               	movf	_DimmerLights,w
 12280  0B79  3E04               	addlw	4
 12281  0B7A  0086               	movwf	6
 12282  0B7B  3001               	movlw	1	; select bank2/3
 12283  0B7C  0087               	movwf	7
 12284  0B7D  0825               	movf	??_setDimmerLights,w
 12285  0B7E  0081               	movwf	1
 12286                           
 12287                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12288  0B7F  3020               	movlw	32
 12289  0B80  00A5               	movwf	??_setDimmerLights
 12290  0B81  0878               	movf	_DimmerLights,w
 12291  0B82  3E04               	addlw	4
 12292  0B83  0086               	movwf	6
 12293  0B84  3001               	movlw	1	; select bank2/3
 12294  0B85  0087               	movwf	7
 12295  0B86  0825               	movf	??_setDimmerLights,w
 12296  0B87  0081               	movwf	1
 12297                           
 12298                           ;Dimmer_B1.c: 617: }
 12299                           ;Dimmer_B1.c: 618: } else {
 12300  0B88  0008               	return
 12301  0B89                     l5686:	
 12302                           
 12303                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12304  0B89  0878               	movf	_DimmerLights,w
 12305  0B8A  0086               	movwf	6
 12306  0B8B  3001               	movlw	1	; select bank2/3
 12307  0B8C  0087               	movwf	7
 12308  0B8D  1281               	bcf	1,5
 12309                           
 12310                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12311  0B8E  0878               	movf	_DimmerLights,w
 12312  0B8F  3E06               	addlw	6
 12313  0B90  0086               	movwf	6
 12314  0B91  3001               	movlw	1	; select bank2/3
 12315  0B92  0087               	movwf	7
 12316  0B93  0801               	movf	1,w
 12317  0B94  00A5               	movwf	??_setDimmerLights
 12318  0B95  0878               	movf	_DimmerLights,w
 12319  0B96  3E04               	addlw	4
 12320  0B97  0086               	movwf	6
 12321  0B98  3001               	movlw	1	; select bank2/3
 12322  0B99  0087               	movwf	7
 12323  0B9A  0825               	movf	??_setDimmerLights,w
 12324  0B9B  0081               	movwf	1
 12325                           
 12326                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12327  0B9C  0878               	movf	_DimmerLights,w
 12328  0B9D  0086               	movwf	6
 12329  0B9E  3001               	movlw	1	; select bank2/3
 12330  0B9F  0087               	movwf	7
 12331  0BA0  1481               	bsf	1,1
 12332                           
 12333                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12334  0BA1  0878               	movf	_DimmerLights,w
 12335  0BA2  0086               	movwf	6
 12336  0BA3  3001               	movlw	1	; select bank2/3
 12337  0BA4  0087               	movwf	7
 12338  0BA5  1181               	bcf	1,3
 12339                           
 12340                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12341  0BA6  0878               	movf	_DimmerLights,w
 12342  0BA7  0086               	movwf	6
 12343  0BA8  3001               	movlw	1	; select bank2/3
 12344  0BA9  0087               	movwf	7
 12345  0BAA  1201               	bcf	1,4
 12346                           
 12347                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12348  0BAB  3007               	movlw	7
 12349  0BAC  00A5               	movwf	??_setDimmerLights
 12350  0BAD  0878               	movf	_DimmerLights,w
 12351  0BAE  3E02               	addlw	2
 12352  0BAF  0086               	movwf	6
 12353  0BB0  3001               	movlw	1	; select bank2/3
 12354  0BB1  0087               	movwf	7
 12355  0BB2  0825               	movf	??_setDimmerLights,w
 12356  0BB3  0081               	movwf	1
 12357  0BB4  0008               	return
 12358  0BB5                     __end_of_setDimmerLights:	
 12359                           
 12360                           	psect	text70
 12361  1744                     __ptext70:	
 12362 ;; *************** function _setLED *****************
 12363 ;; Defined at:
 12364 ;;		line 74 in file "../src/LED_B1.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  led             1    wreg     unsigned char 
 12367 ;;  command         1    2[BANK0 ] unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  led             1    3[BANK0 ] unsigned char 
 12370 ;; Return value:  Size  Location     Type
 12371 ;;		None               void
 12372 ;; Registers used:
 12373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 0/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12379 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;Total ram usage:        2 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    6
 12386 ;; This function calls:
 12387 ;;		_LedPointSelect
 12388 ;; This function is called by:
 12389 ;;		_setDimmerLights_ERROR
 12390 ;;		_setDimmerLights
 12391 ;;		_setLED_Initialization
 12392 ;;		_setPowerFault_Exceptions
 12393 ;;		_setSw_Initialization
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           
 12398                           ;psect for function _setLED
 12399  1744                     _setLED:	
 12400                           
 12401                           ;incstack = 0
 12402                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12403                           ;setLED@led stored from wreg
 12404  1744  0020               	movlb	0	; select bank0
 12405  1745  00A3               	movwf	setLED@led
 12406                           
 12407                           ;LED_B1.c: 76: LedPointSelect(led);
 12408  1746  0823               	movf	setLED@led,w
 12409  1747  319F  27DE  3197   	fcall	_LedPointSelect
 12410                           
 12411                           ;LED_B1.c: 77: if(command == 0)
 12412  174A  0020               	movlb	0	; select bank0
 12413  174B  08A2               	movf	setLED@command,f
 12414  174C  1D03               	skipz
 12415  174D  2F60               	goto	l5574
 12416                           
 12417                           ;LED_B1.c: 78: {
 12418                           ;LED_B1.c: 80: if(led == 1)
 12419  174E  0823               	movf	setLED@led,w
 12420  174F  3A01               	xorlw	1
 12421  1750  1D03               	skipz
 12422  1751  2F54               	goto	l5566
 12423                           
 12424                           ;LED_B1.c: 81: {
 12425                           ;LED_B1.c: 85: RA3=1;
 12426  1752  158C               	bsf	12,3	;volatile
 12427                           
 12428                           ;LED_B1.c: 87: }
 12429  1753  0008               	return
 12430  1754                     l5566:	
 12431                           
 12432                           ;LED_B1.c: 90: else if(led == 2)
 12433  1754  0823               	movf	setLED@led,w
 12434  1755  3A02               	xorlw	2
 12435  1756  1D03               	skipz
 12436  1757  2F5A               	goto	l5570
 12437                           
 12438                           ;LED_B1.c: 91: {
 12439                           ;LED_B1.c: 95: RC7=1;
 12440  1758  178E               	bsf	14,7	;volatile
 12441                           
 12442                           ;LED_B1.c: 97: }
 12443  1759  0008               	return
 12444  175A                     l5570:	
 12445                           
 12446                           ;LED_B1.c: 110: else if(led == 99)
 12447  175A  0823               	movf	setLED@led,w
 12448  175B  3A63               	xorlw	99
 12449  175C  1D03               	skipz
 12450  175D  0008               	return
 12451                           
 12452                           ;LED_B1.c: 111: {
 12453                           ;LED_B1.c: 115: RB5=1;
 12454  175E  168D               	bsf	13,5	;volatile
 12455                           
 12456                           ;LED_B1.c: 117: }
 12457                           ;LED_B1.c: 119: }
 12458  175F  0008               	return
 12459  1760                     l5574:	
 12460                           
 12461                           ;LED_B1.c: 120: else if(command == 1)
 12462  1760  0822               	movf	setLED@command,w
 12463  1761  3A01               	xorlw	1
 12464  1762  1D03               	skipz
 12465  1763  2F76               	goto	l5588
 12466                           
 12467                           ;LED_B1.c: 121: {
 12468                           ;LED_B1.c: 123: if(led == 1)
 12469  1764  0823               	movf	setLED@led,w
 12470  1765  3A01               	xorlw	1
 12471  1766  1D03               	skipz
 12472  1767  2F6A               	goto	l5580
 12473                           
 12474                           ;LED_B1.c: 124: {
 12475                           ;LED_B1.c: 128: RA3=0;
 12476  1768  118C               	bcf	12,3	;volatile
 12477                           
 12478                           ;LED_B1.c: 130: }
 12479  1769  0008               	return
 12480  176A                     l5580:	
 12481                           
 12482                           ;LED_B1.c: 133: else if(led == 2)
 12483  176A  0823               	movf	setLED@led,w
 12484  176B  3A02               	xorlw	2
 12485  176C  1D03               	skipz
 12486  176D  2F70               	goto	l5584
 12487                           
 12488                           ;LED_B1.c: 134: {
 12489                           ;LED_B1.c: 138: RC7=0;
 12490  176E  138E               	bcf	14,7	;volatile
 12491                           
 12492                           ;LED_B1.c: 140: }
 12493  176F  0008               	return
 12494  1770                     l5584:	
 12495                           
 12496                           ;LED_B1.c: 153: else if(led == 99)
 12497  1770  0823               	movf	setLED@led,w
 12498  1771  3A63               	xorlw	99
 12499  1772  1D03               	skipz
 12500  1773  0008               	return
 12501                           
 12502                           ;LED_B1.c: 154: {
 12503                           ;LED_B1.c: 158: RB5=0;
 12504  1774  128D               	bcf	13,5	;volatile
 12505                           
 12506                           ;LED_B1.c: 160: }
 12507                           ;LED_B1.c: 162: }
 12508  1775  0008               	return
 12509  1776                     l5588:	
 12510                           
 12511                           ;LED_B1.c: 163: else if(command == 10)
 12512  1776  0822               	movf	setLED@command,w
 12513  1777  3A0A               	xorlw	10
 12514  1778  1D03               	skipz
 12515  1779  2F98               	goto	l5604
 12516                           
 12517                           ;LED_B1.c: 164: {
 12518                           ;LED_B1.c: 165: LED->GO=0;
 12519  177A  0021               	movlb	1	; select bank1
 12520  177B  083D               	movf	_LED^(0+128),w
 12521  177C  0086               	movwf	6
 12522  177D  0187               	clrf	7
 12523  177E  1081               	bcf	1,1
 12524                           
 12525                           ;LED_B1.c: 166: LED->Time=0;
 12526  177F  0A3D               	incf	_LED^(0+128),w
 12527  1780  0086               	movwf	6
 12528  1781  0187               	clrf	7
 12529  1782  3000               	movlw	0
 12530  1783  3FC0               	movwi [0]fsr1
 12531  1784  3FC1               	movwi [1]fsr1
 12532                           
 12533                           ;LED_B1.c: 168: if(led == 1)
 12534  1785  0020               	movlb	0	; select bank0
 12535  1786  0823               	movf	setLED@led,w
 12536  1787  3A01               	xorlw	1
 12537  1788  1D03               	skipz
 12538  1789  2F8C               	goto	l5596
 12539                           
 12540                           ;LED_B1.c: 169: {
 12541                           ;LED_B1.c: 173: RA3=1;
 12542  178A  158C               	bsf	12,3	;volatile
 12543                           
 12544                           ;LED_B1.c: 175: }
 12545  178B  0008               	return
 12546  178C                     l5596:	
 12547                           
 12548                           ;LED_B1.c: 178: else if(led == 2)
 12549  178C  0823               	movf	setLED@led,w
 12550  178D  3A02               	xorlw	2
 12551  178E  1D03               	skipz
 12552  178F  2F92               	goto	l5600
 12553                           
 12554                           ;LED_B1.c: 179: {
 12555                           ;LED_B1.c: 183: RC7=1;
 12556  1790  178E               	bsf	14,7	;volatile
 12557                           
 12558                           ;LED_B1.c: 185: }
 12559  1791  0008               	return
 12560  1792                     l5600:	
 12561                           
 12562                           ;LED_B1.c: 198: else if(led == 99)
 12563  1792  0823               	movf	setLED@led,w
 12564  1793  3A63               	xorlw	99
 12565  1794  1D03               	skipz
 12566  1795  0008               	return
 12567                           
 12568                           ;LED_B1.c: 199: {
 12569                           ;LED_B1.c: 203: RB5=1;
 12570  1796  168D               	bsf	13,5	;volatile
 12571                           
 12572                           ;LED_B1.c: 205: }
 12573                           ;LED_B1.c: 207: }
 12574  1797  0008               	return
 12575  1798                     l5604:	
 12576                           
 12577                           ;LED_B1.c: 208: else if(command == 11)
 12578  1798  0822               	movf	setLED@command,w
 12579  1799  3A0B               	xorlw	11
 12580  179A  1D03               	skipz
 12581  179B  0008               	return
 12582                           
 12583                           ;LED_B1.c: 209: {
 12584                           ;LED_B1.c: 210: LED->GO=1;
 12585  179C  0021               	movlb	1	; select bank1
 12586  179D  083D               	movf	_LED^(0+128),w
 12587  179E  0086               	movwf	6
 12588  179F  0187               	clrf	7
 12589  17A0  1481               	bsf	1,1
 12590  17A1  0008               	return
 12591  17A2                     __end_of_setLED:	
 12592                           
 12593                           	psect	text71
 12594  1FDE                     __ptext71:	
 12595 ;; *************** function _LedPointSelect *****************
 12596 ;; Defined at:
 12597 ;;		line 7 in file "../src/LED_B1.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;  led             1    wreg     unsigned char 
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  led             1    1[BANK0 ] unsigned char 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;		None               void
 12604 ;; Registers used:
 12605 ;;		wreg
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;Total ram usage:        2 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    5
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_setLED_Initialization
 12622 ;;		_setLED
 12623 ;;		_setLED_Main
 12624 ;; This function uses a non-reentrant model
 12625 ;;
 12626                           
 12627                           
 12628                           ;psect for function _LedPointSelect
 12629  1FDE                     _LedPointSelect:	
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _LedPointSelect: [wreg]
 12633                           ;LedPointSelect@led stored from wreg
 12634  1FDE  0020               	movlb	0	; select bank0
 12635  1FDF  00A1               	movwf	LedPointSelect@led
 12636                           
 12637                           ;LED_B1.c: 10: if(led == 1)
 12638  1FE0  0821               	movf	LedPointSelect@led,w
 12639  1FE1  3A01               	xorlw	1
 12640  1FE2  1D03               	skipz
 12641  1FE3  2FEA               	goto	l5390
 12642                           
 12643                           ;LED_B1.c: 11: {
 12644                           ;LED_B1.c: 12: LED=&VarLED1;
 12645  1FE4  30E1               	movlw	_VarLED1& (0+255)
 12646  1FE5  00A0               	movwf	??_LedPointSelect
 12647  1FE6  0820               	movf	??_LedPointSelect,w
 12648  1FE7  0021               	movlb	1	; select bank1
 12649  1FE8  00BD               	movwf	_LED^(0+128)
 12650                           
 12651                           ;LED_B1.c: 13: }
 12652  1FE9  0008               	return
 12653  1FEA                     l5390:	
 12654                           
 12655                           ;LED_B1.c: 16: else if(led == 2)
 12656  1FEA  0020               	movlb	0	; select bank0
 12657  1FEB  0821               	movf	LedPointSelect@led,w
 12658  1FEC  3A02               	xorlw	2
 12659  1FED  1D03               	skipz
 12660  1FEE  2FF5               	goto	l5394
 12661                           
 12662                           ;LED_B1.c: 17: {
 12663                           ;LED_B1.c: 18: LED=&VarLED2;
 12664  1FEF  30E5               	movlw	_VarLED2& (0+255)
 12665  1FF0  00A0               	movwf	??_LedPointSelect
 12666  1FF1  0820               	movf	??_LedPointSelect,w
 12667  1FF2  0021               	movlb	1	; select bank1
 12668  1FF3  00BD               	movwf	_LED^(0+128)
 12669                           
 12670                           ;LED_B1.c: 19: }
 12671  1FF4  0008               	return
 12672  1FF5                     l5394:	
 12673                           
 12674                           ;LED_B1.c: 28: else if(led == 99)
 12675  1FF5  0020               	movlb	0	; select bank0
 12676  1FF6  0821               	movf	LedPointSelect@led,w
 12677  1FF7  3A63               	xorlw	99
 12678  1FF8  1D03               	skipz
 12679  1FF9  0008               	return
 12680                           
 12681                           ;LED_B1.c: 29: {
 12682                           ;LED_B1.c: 30: LED=&VarErrLED;
 12683  1FFA  30DD               	movlw	_VarErrLED& (0+255)
 12684  1FFB  00A0               	movwf	??_LedPointSelect
 12685  1FFC  0820               	movf	??_LedPointSelect,w
 12686  1FFD  0021               	movlb	1	; select bank1
 12687  1FFE  00BD               	movwf	_LED^(0+128)
 12688  1FFF  0008               	return
 12689  2000                     __end_of_LedPointSelect:	
 12690                           
 12691                           	psect	text72
 12692  1DFD                     __ptext72:	
 12693 ;; *************** function _DimmerLights_Close *****************
 12694 ;; Defined at:
 12695 ;;		line 396 in file "../src/Dimmer_B1.c"
 12696 ;; Parameters:    Size  Location     Type
 12697 ;;		None
 12698 ;; Auto vars:     Size  Location     Type
 12699 ;;		None
 12700 ;; Return value:  Size  Location     Type
 12701 ;;		None               void
 12702 ;; Registers used:
 12703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12704 ;; Tracked objects:
 12705 ;;		On entry : 0/0
 12706 ;;		On exit  : 0/0
 12707 ;;		Unchanged: 0/0
 12708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;Total ram usage:        0 bytes
 12714 ;; Hardware stack levels used:    1
 12715 ;; Hardware stack levels required when called:    6
 12716 ;; This function calls:
 12717 ;;		_getDimmerLights_StatusFlag
 12718 ;;		_setMemory_GO
 12719 ;; This function is called by:
 12720 ;;		_DimmerLights_Main
 12721 ;; This function uses a non-reentrant model
 12722 ;;
 12723                           
 12724                           
 12725                           ;psect for function _DimmerLights_Close
 12726  1DFD                     _DimmerLights_Close:	
 12727                           
 12728                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12729                           
 12730                           ;incstack = 0
 12731                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12732  1DFD  0021               	movlb	1	; select bank1
 12733  1DFE  083A               	movf	_Dimmer^(0+128),w
 12734  1DFF  0086               	movwf	6
 12735  1E00  0187               	clrf	7
 12736  1E01  1C01               	btfss	1,0
 12737  1E02  0008               	return
 12738                           
 12739                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12740  1E03  083A               	movf	_Dimmer^(0+128),w
 12741  1E04  0086               	movwf	6
 12742  1E05  0187               	clrf	7
 12743  1E06  1001               	bcf	1,0
 12744                           
 12745                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12746  1E07  319C  2457  319D   	fcall	_getDimmerLights_StatusFlag
 12747  1E0A  3800               	iorlw	0
 12748  1E0B  1D03               	skipz
 12749  1E0C  0008               	return
 12750                           
 12751                           ;Dimmer_B1.c: 400: ;;
 12752                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12753  1E0D  3001               	movlw	1
 12754  1E0E  319F  275D         	fcall	_setMemory_GO
 12755  1E10  0008               	return
 12756  1E11                     __end_of_DimmerLights_Close:	
 12757                           
 12758                           	psect	text73
 12759  1F5D                     __ptext73:	
 12760 ;; *************** function _setMemory_GO *****************
 12761 ;; Defined at:
 12762 ;;		line 882 in file "../src/MCU_B1.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;  command         1    wreg     unsigned char 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  command         1    2[BANK0 ] unsigned char 
 12767 ;; Return value:  Size  Location     Type
 12768 ;;		None               void
 12769 ;; Registers used:
 12770 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12771 ;; Tracked objects:
 12772 ;;		On entry : 0/0
 12773 ;;		On exit  : 0/0
 12774 ;;		Unchanged: 0/0
 12775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;Total ram usage:        3 bytes
 12781 ;; Hardware stack levels used:    1
 12782 ;; Hardware stack levels required when called:    5
 12783 ;; This function calls:
 12784 ;;		Nothing
 12785 ;; This function is called by:
 12786 ;;		_DimmerLights_Close
 12787 ;;		_setDimmerLights
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           
 12792                           ;psect for function _setMemory_GO
 12793  1F5D                     _setMemory_GO:	
 12794                           
 12795                           ;incstack = 0
 12796                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 12797                           ;setMemory_GO@command stored from wreg
 12798  1F5D  0020               	movlb	0	; select bank0
 12799  1F5E  00A2               	movwf	setMemory_GO@command
 12800                           
 12801                           ;MCU_B1.c: 883: Memory->GO = command;
 12802  1F5F  0021               	movlb	1	; select bank1
 12803  1F60  086F               	movf	_Memory^(0+128),w
 12804  1F61  3E24               	addlw	36
 12805  1F62  0086               	movwf	6
 12806  1F63  3001               	movlw	1	; select bank2/3
 12807  1F64  0087               	movwf	7
 12808  1F65  0020               	movlb	0	; select bank0
 12809  1F66  0822               	movf	setMemory_GO@command,w
 12810  1F67  1081               	bcf	1,1
 12811  1F68  1D03               	skipz
 12812  1F69  1481               	bsf	1,1
 12813                           
 12814                           ;MCU_B1.c: 884: if (command == 0) {
 12815  1F6A  08A2               	movf	setMemory_GO@command,f
 12816  1F6B  1D03               	skipz
 12817  1F6C  0008               	return
 12818                           
 12819                           ;MCU_B1.c: 885: Memory->Time = command;
 12820  1F6D  0822               	movf	setMemory_GO@command,w
 12821  1F6E  00A0               	movwf	??_setMemory_GO
 12822  1F6F  01A1               	clrf	??_setMemory_GO+1
 12823  1F70  0021               	movlb	1	; select bank1
 12824  1F71  086F               	movf	_Memory^(0+128),w
 12825  1F72  3E22               	addlw	34
 12826  1F73  0086               	movwf	6
 12827  1F74  3001               	movlw	1	; select bank2/3
 12828  1F75  0087               	movwf	7
 12829  1F76  0020               	movlb	0	; select bank0
 12830  1F77  0820               	movf	??_setMemory_GO,w
 12831  1F78  3FC0               	movwi [0]fsr1
 12832  1F79  0821               	movf	??_setMemory_GO+1,w
 12833  1F7A  3FC1               	movwi [1]fsr1
 12834  1F7B  0008               	return
 12835  1F7C                     __end_of_setMemory_GO:	
 12836                           
 12837                           	psect	text74
 12838  1C57                     __ptext74:	
 12839 ;; *************** function _getDimmerLights_StatusFlag *****************
 12840 ;; Defined at:
 12841 ;;		line 475 in file "../src/Dimmer_B1.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;		None
 12844 ;; Auto vars:     Size  Location     Type
 12845 ;;  Status          1    0[BANK0 ] unsigned char 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      unsigned char 
 12848 ;; Registers used:
 12849 ;;		wreg, status,2
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;Total ram usage:        1 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    5
 12862 ;; This function calls:
 12863 ;;		Nothing
 12864 ;; This function is called by:
 12865 ;;		_DimmerLights_Close
 12866 ;;		_DimmerLights_Exceptions
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           
 12871                           ;psect for function _getDimmerLights_StatusFlag
 12872  1C57                     _getDimmerLights_StatusFlag:	
 12873                           
 12874                           ;Dimmer_B1.c: 476: char Status = 0;
 12875                           
 12876                           ;incstack = 0
 12877                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12878  1C57  0020               	movlb	0	; select bank0
 12879  1C58  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12880                           
 12881                           ;Dimmer_B1.c: 487: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12882  1C59  3000               	movlw	0
 12883  1C5A  0022               	movlb	2	; select bank2
 12884  1C5B  1B34               	btfsc	_DimmerLights1^(0+256),6
 12885  1C5C  3001               	movlw	1
 12886  1C5D  0020               	movlb	0	; select bank0
 12887  1C5E  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12888                           
 12889                           ;Dimmer_B1.c: 490: return Status;
 12890  1C5F  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12891  1C60  0008               	return
 12892  1C61                     __end_of_getDimmerLights_StatusFlag:	
 12893                           
 12894                           	psect	text75
 12895  1CF9                     __ptext75:	
 12896 ;; *************** function _DimmerLights_Initialization *****************
 12897 ;; Defined at:
 12898 ;;		line 334 in file "../src/Dimmer_B1.c"
 12899 ;; Parameters:    Size  Location     Type
 12900 ;;		None
 12901 ;; Auto vars:     Size  Location     Type
 12902 ;;		None
 12903 ;; Return value:  Size  Location     Type
 12904 ;;		None               void
 12905 ;; Registers used:
 12906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12907 ;; Tracked objects:
 12908 ;;		On entry : 0/0
 12909 ;;		On exit  : 0/0
 12910 ;;		Unchanged: 0/0
 12911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;Total ram usage:        1 bytes
 12917 ;; Hardware stack levels used:    1
 12918 ;; Hardware stack levels required when called:    7
 12919 ;; This function calls:
 12920 ;;		_Dimmer_Initialization
 12921 ;;		_setDimmerLights_Initialization
 12922 ;; This function is called by:
 12923 ;;		_main
 12924 ;; This function uses a non-reentrant model
 12925 ;;
 12926                           
 12927                           
 12928                           ;psect for function _DimmerLights_Initialization
 12929  1CF9                     _DimmerLights_Initialization:	
 12930                           
 12931                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 12932                           
 12933                           ;incstack = 0
 12934                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12935  1CF9  3034               	movlw	_DimmerLights1& (0+255)
 12936  1CFA  0020               	movlb	0	; select bank0
 12937  1CFB  00A4               	movwf	??_DimmerLights_Initialization
 12938  1CFC  0824               	movf	??_DimmerLights_Initialization,w
 12939  1CFD  0021               	movlb	1	; select bank1
 12940  1CFE  00BB               	movwf	_DimmerLights11^(0+128)
 12941                           
 12942                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 12943  1CFF  3001               	movlw	1
 12944  1D00  3188  2000  319C   	fcall	_setDimmerLights_Initialization
 12945                           
 12946                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 12947  1D03  319C  241F         	fcall	_Dimmer_Initialization
 12948  1D05  0008               	return
 12949  1D06                     __end_of_DimmerLights_Initialization:	
 12950                           
 12951                           	psect	text76
 12952  0800                     __ptext76:	
 12953 ;; *************** function _setDimmerLights_Initialization *****************
 12954 ;; Defined at:
 12955 ;;		line 357 in file "../src/Dimmer_B1.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;  lights          1    wreg     unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  lights          1    3[BANK0 ] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;		None               void
 12962 ;; Registers used:
 12963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        2 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    6
 12976 ;; This function calls:
 12977 ;;		_DimmerLightsPointSelect
 12978 ;; This function is called by:
 12979 ;;		_DimmerLights_Initialization
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _setDimmerLights_Initialization
 12985  0800                     _setDimmerLights_Initialization:	
 12986                           
 12987                           ;incstack = 0
 12988                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12989                           ;setDimmerLights_Initialization@lights stored from wreg
 12990  0800  0020               	movlb	0	; select bank0
 12991  0801  00A3               	movwf	setDimmerLights_Initialization@lights
 12992                           
 12993                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 12994  0802  0823               	movf	setDimmerLights_Initialization@lights,w
 12995  0803  319C  2482         	fcall	_DimmerLightsPointSelect
 12996                           
 12997                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 12998  0805  0878               	movf	_DimmerLights,w
 12999  0806  3E09               	addlw	9
 13000  0807  0086               	movwf	6
 13001  0808  3001               	movlw	1	; select bank2/3
 13002  0809  0087               	movwf	7
 13003  080A  1501               	bsf	1,2
 13004                           
 13005                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13006  080B  3020               	movlw	32
 13007  080C  0020               	movlb	0	; select bank0
 13008  080D  00A2               	movwf	??_setDimmerLights_Initialization
 13009  080E  0878               	movf	_DimmerLights,w
 13010  080F  3E05               	addlw	5
 13011  0810  0086               	movwf	6
 13012  0811  3001               	movlw	1	; select bank2/3
 13013  0812  0087               	movwf	7
 13014  0813  0822               	movf	??_setDimmerLights_Initialization,w
 13015  0814  0081               	movwf	1
 13016                           
 13017                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13018  0815  303C               	movlw	60
 13019  0816  00A2               	movwf	??_setDimmerLights_Initialization
 13020  0817  0878               	movf	_DimmerLights,w
 13021  0818  3E06               	addlw	6
 13022  0819  0086               	movwf	6
 13023  081A  3001               	movlw	1	; select bank2/3
 13024  081B  0087               	movwf	7
 13025  081C  0822               	movf	??_setDimmerLights_Initialization,w
 13026  081D  0081               	movwf	1
 13027                           
 13028                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13029  081E  0878               	movf	_DimmerLights,w
 13030  081F  3E06               	addlw	6
 13031  0820  0086               	movwf	6
 13032  0821  3001               	movlw	1	; select bank2/3
 13033  0822  0087               	movwf	7
 13034  0823  0801               	movf	1,w
 13035  0824  00A2               	movwf	??_setDimmerLights_Initialization
 13036  0825  0878               	movf	_DimmerLights,w
 13037  0826  3E04               	addlw	4
 13038  0827  0086               	movwf	6
 13039  0828  3001               	movlw	1	; select bank2/3
 13040  0829  0087               	movwf	7
 13041  082A  0822               	movf	??_setDimmerLights_Initialization,w
 13042  082B  0081               	movwf	1
 13043  082C  0008               	return
 13044  082D                     __end_of_setDimmerLights_Initialization:	
 13045                           
 13046                           	psect	text77
 13047  1C1F                     __ptext77:	
 13048 ;; *************** function _Dimmer_Initialization *****************
 13049 ;; Defined at:
 13050 ;;		line 786 in file "../src/Dimmer_B1.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;		None
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;		None
 13055 ;; Return value:  Size  Location     Type
 13056 ;;		None               void
 13057 ;; Registers used:
 13058 ;;		wreg
 13059 ;; Tracked objects:
 13060 ;;		On entry : 0/0
 13061 ;;		On exit  : 0/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;Total ram usage:        1 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; Hardware stack levels required when called:    5
 13071 ;; This function calls:
 13072 ;;		Nothing
 13073 ;; This function is called by:
 13074 ;;		_DimmerLights_Initialization
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           
 13079                           ;psect for function _Dimmer_Initialization
 13080  1C1F                     _Dimmer_Initialization:	
 13081                           
 13082                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13083                           
 13084                           ;incstack = 0
 13085                           ; Regs used in _Dimmer_Initialization: [wreg]
 13086  1C1F  30E9               	movlw	_Dimmer1& (0+255)
 13087  1C20  0020               	movlb	0	; select bank0
 13088  1C21  00A0               	movwf	??_Dimmer_Initialization
 13089  1C22  0820               	movf	??_Dimmer_Initialization,w
 13090  1C23  0021               	movlb	1	; select bank1
 13091  1C24  00BA               	movwf	_Dimmer^(0+128)
 13092  1C25  0008               	return
 13093  1C26                     __end_of_Dimmer_Initialization:	
 13094                           
 13095                           	psect	text78
 13096  1BF3                     __ptext78:	
 13097 ;; *************** function _DelayOff_Main *****************
 13098 ;; Defined at:
 13099 ;;		line 41 in file "../src/DelayOff_B1.c"
 13100 ;; Parameters:    Size  Location     Type
 13101 ;;		None
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;		None
 13104 ;; Return value:  Size  Location     Type
 13105 ;;		None               void
 13106 ;; Registers used:
 13107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;Total ram usage:        0 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:   10
 13120 ;; This function calls:
 13121 ;;		_DlyOff_Main
 13122 ;; This function is called by:
 13123 ;;		_main
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127                           
 13128                           ;psect for function _DelayOff_Main
 13129  1BF3                     _DelayOff_Main:	
 13130                           
 13131                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13132                           
 13133                           ;incstack = 0
 13134                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13135  1BF3  3001               	movlw	1
 13136  1BF4  318A  22BB         	fcall	_DlyOff_Main
 13137  1BF6  0008               	return
 13138  1BF7                     __end_of_DelayOff_Main:	
 13139                           
 13140                           	psect	text79
 13141  0ABB                     __ptext79:	
 13142 ;; *************** function _DlyOff_Main *****************
 13143 ;; Defined at:
 13144 ;;		line 62 in file "../src/DelayOff_B1.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  sw              1    wreg     unsigned char 
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  sw              1   68[BANK0 ] unsigned char 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;		None               void
 13151 ;; Registers used:
 13152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;Total ram usage:        3 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    9
 13165 ;; This function calls:
 13166 ;;		_DelayOffPointSelect
 13167 ;;		_setBuz
 13168 ;;		_setDimmerLights_Switch
 13169 ;;		_setDimmerLights_Trigger
 13170 ;;		_setRFSW_Status
 13171 ;;		_setRF_DimmerLights
 13172 ;;		_setSw_Status
 13173 ;;		_setTxData
 13174 ;; This function is called by:
 13175 ;;		_DelayOff_Main
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           
 13180                           ;psect for function _DlyOff_Main
 13181  0ABB                     _DlyOff_Main:	
 13182                           
 13183                           ;incstack = 0
 13184                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13185                           ;DlyOff_Main@sw stored from wreg
 13186  0ABB  0020               	movlb	0	; select bank0
 13187  0ABC  00E4               	movwf	DlyOff_Main@sw
 13188                           
 13189                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13190  0ABD  0864               	movf	DlyOff_Main@sw,w
 13191  0ABE  319C  24B0  318A   	fcall	_DelayOffPointSelect
 13192                           
 13193                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 13194  0AC1  0021               	movlb	1	; select bank1
 13195  0AC2  0839               	movf	_DelayOff^(0+128),w
 13196  0AC3  0086               	movwf	6
 13197  0AC4  0187               	clrf	7
 13198  0AC5  1C81               	btfss	1,1
 13199  0AC6  0008               	return
 13200                           
 13201                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13202  0AC7  0839               	movf	_DelayOff^(0+128),w
 13203  0AC8  3E02               	addlw	2
 13204  0AC9  0086               	movwf	6
 13205  0ACA  0187               	clrf	7
 13206  0ACB  3001               	movlw	1
 13207  0ACC  0781               	addwf	1,f
 13208  0ACD  3141               	addfsr 1,1
 13209  0ACE  1803               	skipnc
 13210  0ACF  0A81               	incf	1,f
 13211                           
 13212                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13213  0AD0  0839               	movf	_DelayOff^(0+128),w
 13214  0AD1  3E02               	addlw	2
 13215  0AD2  0086               	movwf	6
 13216  0AD3  0187               	clrf	7
 13217  0AD4  3F40               	moviw [0]fsr1
 13218  0AD5  0020               	movlb	0	; select bank0
 13219  0AD6  00E2               	movwf	??_DlyOff_Main
 13220  0AD7  3F41               	moviw [1]fsr1
 13221  0AD8  00E3               	movwf	??_DlyOff_Main+1
 13222  0AD9  3015               	movlw	21
 13223  0ADA  0263               	subwf	??_DlyOff_Main+1,w
 13224  0ADB  30E0               	movlw	224
 13225  0ADC  1903               	skipnz
 13226  0ADD  0262               	subwf	??_DlyOff_Main,w
 13227  0ADE  1C03               	skipc
 13228  0ADF  0008               	return
 13229                           
 13230                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13231  0AE0  0021               	movlb	1	; select bank1
 13232  0AE1  0839               	movf	_DelayOff^(0+128),w
 13233  0AE2  3E02               	addlw	2
 13234  0AE3  0086               	movwf	6
 13235  0AE4  0187               	clrf	7
 13236  0AE5  3000               	movlw	0
 13237  0AE6  3FC0               	movwi [0]fsr1
 13238  0AE7  3FC1               	movwi [1]fsr1
 13239                           
 13240                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13241  0AE8  3001               	movlw	1
 13242  0AE9  0020               	movlb	0	; select bank0
 13243  0AEA  00E2               	movwf	??_DlyOff_Main
 13244  0AEB  0021               	movlb	1	; select bank1
 13245  0AEC  0839               	movf	_DelayOff^(0+128),w
 13246  0AED  3E04               	addlw	4
 13247  0AEE  0086               	movwf	6
 13248  0AEF  0187               	clrf	7
 13249  0AF0  0020               	movlb	0	; select bank0
 13250  0AF1  0862               	movf	??_DlyOff_Main,w
 13251  0AF2  0781               	addwf	1,f
 13252                           
 13253                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13254  0AF3  0021               	movlb	1	; select bank1
 13255  0AF4  0839               	movf	_DelayOff^(0+128),w
 13256  0AF5  3E04               	addlw	4
 13257  0AF6  0086               	movwf	6
 13258  0AF7  0187               	clrf	7
 13259  0AF8  0A39               	incf	_DelayOff^(0+128),w
 13260  0AF9  0084               	movwf	4
 13261  0AFA  0185               	clrf	5
 13262  0AFB  0800               	movf	0,w
 13263  0AFC  0201               	subwf	1,w
 13264  0AFD  1C03               	skipc
 13265  0AFE  0008               	return
 13266                           
 13267                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13268  0AFF  0839               	movf	_DelayOff^(0+128),w
 13269  0B00  3E04               	addlw	4
 13270  0B01  0086               	movwf	6
 13271  0B02  0187               	clrf	7
 13272  0B03  0181               	clrf	1
 13273                           
 13274                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13275  0B04  0839               	movf	_DelayOff^(0+128),w
 13276  0B05  0086               	movwf	6
 13277  0B06  0187               	clrf	7
 13278  0B07  1081               	bcf	1,1
 13279                           
 13280                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 13281  0B08  0020               	movlb	0	; select bank0
 13282  0B09  01A2               	clrf	setSw_Status@command
 13283  0B0A  0864               	movf	DlyOff_Main@sw,w
 13284  0B0B  319D  254B  318A   	fcall	_setSw_Status
 13285                           
 13286                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 13287  0B0E  0020               	movlb	0	; select bank0
 13288  0B0F  01A2               	clrf	setRFSW_Status@command
 13289  0B10  0864               	movf	DlyOff_Main@sw,w
 13290  0B11  319D  253C  318A   	fcall	_setRFSW_Status
 13291                           
 13292                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 13293  0B14  0020               	movlb	0	; select bank0
 13294  0B15  01DD               	clrf	setRF_DimmerLights@on
 13295  0B16  0864               	movf	DlyOff_Main@sw,w
 13296  0B17  3188  208E  318A   	fcall	_setRF_DimmerLights
 13297                           
 13298                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 13299  0B1A  0020               	movlb	0	; select bank0
 13300  0B1B  01A2               	clrf	setDimmerLights_Trigger@command
 13301  0B1C  0AA2               	incf	setDimmerLights_Trigger@command,f
 13302  0B1D  0864               	movf	DlyOff_Main@sw,w
 13303  0B1E  319D  2589  318A   	fcall	_setDimmerLights_Trigger
 13304                           
 13305                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 13306  0B21  0020               	movlb	0	; select bank0
 13307  0B22  01A2               	clrf	setDimmerLights_Switch@command
 13308  0B23  0864               	movf	DlyOff_Main@sw,w
 13309  0B24  319D  2579  318A   	fcall	_setDimmerLights_Switch
 13310                           
 13311                           ;DelayOff_B1.c: 77: setTxData(1);
 13312  0B27  3001               	movlw	1
 13313  0B28  318D  2554  318A   	fcall	_setTxData
 13314                           
 13315                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 13316  0B2B  3064               	movlw	100
 13317  0B2C  0020               	movlb	0	; select bank0
 13318  0B2D  00A9               	movwf	setBuz@time
 13319  0B2E  3000               	movlw	0
 13320  0B2F  00AA               	movwf	setBuz@time+1
 13321  0B30  3001               	movlw	1
 13322  0B31  318C  243C         	fcall	_setBuz
 13323  0B33  0008               	return
 13324  0B34                     __end_of_DlyOff_Main:	
 13325                           
 13326                           	psect	text80
 13327  0D54                     __ptext80:	
 13328 ;; *************** function _setTxData *****************
 13329 ;; Defined at:
 13330 ;;		line 161 in file "../src/RF_Control_B1.c"
 13331 ;; Parameters:    Size  Location     Type
 13332 ;;  rf              1    wreg     unsigned char 
 13333 ;; Auto vars:     Size  Location     Type
 13334 ;;  rf              1    3[BANK0 ] unsigned char 
 13335 ;;  i               1    0        unsigned char 
 13336 ;; Return value:  Size  Location     Type
 13337 ;;		None               void
 13338 ;; Registers used:
 13339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13340 ;; Tracked objects:
 13341 ;;		On entry : 0/0
 13342 ;;		On exit  : 0/0
 13343 ;;		Unchanged: 0/0
 13344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;Total ram usage:        2 bytes
 13350 ;; Hardware stack levels used:    1
 13351 ;; Hardware stack levels required when called:    6
 13352 ;; This function calls:
 13353 ;;		_RfPointSelect
 13354 ;; This function is called by:
 13355 ;;		_DlyOff_Main
 13356 ;;		_setDimmerLights_Adj
 13357 ;;		_setControl_Lights_Table
 13358 ;;		_setRFSW_Control
 13359 ;;		_setRFSW_AdjControl
 13360 ;;		_Sw_DimmerOnFunc
 13361 ;;		_Sw_DimmerOffFunc
 13362 ;; This function uses a non-reentrant model
 13363 ;;
 13364                           
 13365                           
 13366                           ;psect for function _setTxData
 13367  0D54                     _setTxData:	
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13371                           ;setTxData@rf stored from wreg
 13372  0D54  0020               	movlb	0	; select bank0
 13373  0D55  00A3               	movwf	setTxData@rf
 13374                           
 13375                           ;RF_Control_B1.c: 162: char i;
 13376                           ;RF_Control_B1.c: 163: RfPointSelect(rf);
 13377  0D56  0823               	movf	setTxData@rf,w
 13378  0D57  319D  2520  318D   	fcall	_RfPointSelect
 13379                           
 13380                           ;RF_Control_B1.c: 164: if (RF->Enable == 1) {
 13381  0D5A  087A               	movf	_RF,w
 13382  0D5B  0086               	movwf	6
 13383  0D5C  0187               	clrf	7
 13384  0D5D  1C01               	btfss	1,0
 13385  0D5E  0008               	return
 13386                           
 13387                           ;RF_Control_B1.c: 166: RF->TransceiveGO = 1;
 13388  0D5F  087A               	movf	_RF,w
 13389  0D60  0086               	movwf	6
 13390  0D61  0187               	clrf	7
 13391  0D62  1501               	bsf	1,2
 13392                           
 13393                           ;RF_Control_B1.c: 176: RF_Data[0] = 0x63;
 13394  0D63  3063               	movlw	99
 13395  0D64  0020               	movlb	0	; select bank0
 13396  0D65  00A2               	movwf	??_setTxData
 13397  0D66  0822               	movf	??_setTxData,w
 13398  0D67  0021               	movlb	1	; select bank1
 13399  0D68  00A0               	movwf	_RF_Data^(0+128)
 13400                           
 13401                           ;RF_Control_B1.c: 177: RF_Data[1] = 0x02;
 13402  0D69  3002               	movlw	2
 13403  0D6A  0020               	movlb	0	; select bank0
 13404  0D6B  00A2               	movwf	??_setTxData
 13405  0D6C  0822               	movf	??_setTxData,w
 13406  0D6D  0021               	movlb	1	; select bank1
 13407  0D6E  00A1               	movwf	(_RF_Data^(0+128)+1)
 13408                           
 13409                           ;RF_Control_B1.c: 178: RF_Data[2] = product->Data[2];
 13410  0D6F  087D               	movf	_product,w
 13411  0D70  0086               	movwf	6
 13412  0D71  3001               	movlw	1	; select bank2/3
 13413  0D72  0087               	movwf	7
 13414  0D73  3001               	movlw	1	; select bank2/3
 13415  0D74  3F42               	moviw [2]fsr1
 13416  0D75  00A2               	movwf	(_RF_Data^(0+128)+2)
 13417                           
 13418                           ;RF_Control_B1.c: 179: RF_Data[3] = product->Data[3];
 13419  0D76  087D               	movf	_product,w
 13420  0D77  0086               	movwf	6
 13421  0D78  3001               	movlw	1	; select bank2/3
 13422  0D79  0087               	movwf	7
 13423  0D7A  3001               	movlw	1	; select bank2/3
 13424  0D7B  3F43               	moviw [3]fsr1
 13425  0D7C  00A3               	movwf	(_RF_Data^(0+128)+3)
 13426                           
 13427                           ;RF_Control_B1.c: 180: RF_Data[4] = product->Data[4];
 13428  0D7D  087D               	movf	_product,w
 13429  0D7E  0086               	movwf	6
 13430  0D7F  3001               	movlw	1	; select bank2/3
 13431  0D80  0087               	movwf	7
 13432  0D81  3001               	movlw	1	; select bank2/3
 13433  0D82  3F44               	moviw [4]fsr1
 13434  0D83  00A4               	movwf	(_RF_Data^(0+128)+4)
 13435                           
 13436                           ;RF_Control_B1.c: 181: RF_Data[5] = product->Data[5];
 13437  0D84  087D               	movf	_product,w
 13438  0D85  0086               	movwf	6
 13439  0D86  3001               	movlw	1	; select bank2/3
 13440  0D87  0087               	movwf	7
 13441  0D88  3001               	movlw	1	; select bank2/3
 13442  0D89  3F45               	moviw [5]fsr1
 13443  0D8A  00A5               	movwf	(_RF_Data^(0+128)+5)
 13444                           
 13445                           ;RF_Control_B1.c: 182: RF_Data[6] = product->Data[6];
 13446  0D8B  087D               	movf	_product,w
 13447  0D8C  0086               	movwf	6
 13448  0D8D  3001               	movlw	1	; select bank2/3
 13449  0D8E  0087               	movwf	7
 13450  0D8F  3001               	movlw	1	; select bank2/3
 13451  0D90  3F46               	moviw [6]fsr1
 13452  0D91  00A6               	movwf	(_RF_Data^(0+128)+6)
 13453                           
 13454                           ;RF_Control_B1.c: 183: RF_Data[7] = product->Data[7];
 13455  0D92  087D               	movf	_product,w
 13456  0D93  0086               	movwf	6
 13457  0D94  3001               	movlw	1	; select bank2/3
 13458  0D95  0087               	movwf	7
 13459  0D96  3001               	movlw	1	; select bank2/3
 13460  0D97  3F47               	moviw [7]fsr1
 13461  0D98  00A7               	movwf	(_RF_Data^(0+128)+7)
 13462                           
 13463                           ;RF_Control_B1.c: 184: RF_Data[8] = product->Data[8];
 13464  0D99  087D               	movf	_product,w
 13465  0D9A  0086               	movwf	6
 13466  0D9B  3001               	movlw	1	; select bank2/3
 13467  0D9C  0087               	movwf	7
 13468  0D9D  3001               	movlw	1	; select bank2/3
 13469  0D9E  3F48               	moviw [8]fsr1
 13470  0D9F  00A8               	movwf	(_RF_Data^(0+128)+8)
 13471                           
 13472                           ;RF_Control_B1.c: 185: RF_Data[9] = product->Data[9];
 13473  0DA0  087D               	movf	_product,w
 13474  0DA1  0086               	movwf	6
 13475  0DA2  3001               	movlw	1	; select bank2/3
 13476  0DA3  0087               	movwf	7
 13477  0DA4  3001               	movlw	1	; select bank2/3
 13478  0DA5  3F49               	moviw [9]fsr1
 13479  0DA6  00A9               	movwf	(_RF_Data^(0+128)+9)
 13480                           
 13481                           ;RF_Control_B1.c: 186: RF_Data[10] = product->Data[10];
 13482  0DA7  087D               	movf	_product,w
 13483  0DA8  0086               	movwf	6
 13484  0DA9  3001               	movlw	1	; select bank2/3
 13485  0DAA  0087               	movwf	7
 13486  0DAB  3001               	movlw	1	; select bank2/3
 13487  0DAC  3F4A               	moviw [10]fsr1
 13488  0DAD  00AA               	movwf	(_RF_Data^(0+128)+10)
 13489                           
 13490                           ;RF_Control_B1.c: 187: RF_Data[11] = product->Data[11];
 13491  0DAE  087D               	movf	_product,w
 13492  0DAF  0086               	movwf	6
 13493  0DB0  3001               	movlw	1	; select bank2/3
 13494  0DB1  0087               	movwf	7
 13495  0DB2  3001               	movlw	1	; select bank2/3
 13496  0DB3  3F4B               	moviw [11]fsr1
 13497  0DB4  00AB               	movwf	(_RF_Data^(0+128)+11)
 13498                           
 13499                           ;RF_Control_B1.c: 188: RF_Data[12] = product->Data[12];
 13500  0DB5  087D               	movf	_product,w
 13501  0DB6  0086               	movwf	6
 13502  0DB7  3001               	movlw	1	; select bank2/3
 13503  0DB8  0087               	movwf	7
 13504  0DB9  3001               	movlw	1	; select bank2/3
 13505  0DBA  3F4C               	moviw [12]fsr1
 13506  0DBB  00AC               	movwf	(_RF_Data^(0+128)+12)
 13507                           
 13508                           ;RF_Control_B1.c: 189: RF_Data[13] = product->Data[13];
 13509  0DBC  087D               	movf	_product,w
 13510  0DBD  0086               	movwf	6
 13511  0DBE  3001               	movlw	1	; select bank2/3
 13512  0DBF  0087               	movwf	7
 13513  0DC0  3001               	movlw	1	; select bank2/3
 13514  0DC1  3F4D               	moviw [13]fsr1
 13515  0DC2  00AD               	movwf	(_RF_Data^(0+128)+13)
 13516                           
 13517                           ;RF_Control_B1.c: 190: RF_Data[14] = product->Data[14];
 13518  0DC3  087D               	movf	_product,w
 13519  0DC4  0086               	movwf	6
 13520  0DC5  3001               	movlw	1	; select bank2/3
 13521  0DC6  0087               	movwf	7
 13522  0DC7  3001               	movlw	1	; select bank2/3
 13523  0DC8  3F4E               	moviw [14]fsr1
 13524  0DC9  00AE               	movwf	(_RF_Data^(0+128)+14)
 13525                           
 13526                           ;RF_Control_B1.c: 191: RF_Data[15] = product->Data[15];
 13527  0DCA  087D               	movf	_product,w
 13528  0DCB  0086               	movwf	6
 13529  0DCC  3001               	movlw	1	; select bank2/3
 13530  0DCD  0087               	movwf	7
 13531  0DCE  3001               	movlw	1	; select bank2/3
 13532  0DCF  3F4F               	moviw [15]fsr1
 13533  0DD0  00AF               	movwf	(_RF_Data^(0+128)+15)
 13534                           
 13535                           ;RF_Control_B1.c: 192: RF_Data[16] = product->Data[16];
 13536  0DD1  087D               	movf	_product,w
 13537  0DD2  0086               	movwf	6
 13538  0DD3  3001               	movlw	1	; select bank2/3
 13539  0DD4  0087               	movwf	7
 13540  0DD5  3001               	movlw	1	; select bank2/3
 13541  0DD6  3F50               	moviw [16]fsr1
 13542  0DD7  00B0               	movwf	(_RF_Data^(0+128)+16)
 13543                           
 13544                           ;RF_Control_B1.c: 193: RF_Data[17] = product->Data[17];
 13545  0DD8  087D               	movf	_product,w
 13546  0DD9  0086               	movwf	6
 13547  0DDA  3001               	movlw	1	; select bank2/3
 13548  0DDB  0087               	movwf	7
 13549  0DDC  3001               	movlw	1	; select bank2/3
 13550  0DDD  3F51               	moviw [17]fsr1
 13551  0DDE  00B1               	movwf	(_RF_Data^(0+128)+17)
 13552                           
 13553                           ;RF_Control_B1.c: 194: RF_Data[18] = product->Data[18];
 13554  0DDF  087D               	movf	_product,w
 13555  0DE0  0086               	movwf	6
 13556  0DE1  3001               	movlw	1	; select bank2/3
 13557  0DE2  0087               	movwf	7
 13558  0DE3  3001               	movlw	1	; select bank2/3
 13559  0DE4  3F52               	moviw [18]fsr1
 13560  0DE5  00B2               	movwf	(_RF_Data^(0+128)+18)
 13561                           
 13562                           ;RF_Control_B1.c: 195: RF_Data[19] = product->Data[19];
 13563  0DE6  087D               	movf	_product,w
 13564  0DE7  0086               	movwf	6
 13565  0DE8  3001               	movlw	1	; select bank2/3
 13566  0DE9  0087               	movwf	7
 13567  0DEA  3001               	movlw	1	; select bank2/3
 13568  0DEB  3F53               	moviw [19]fsr1
 13569  0DEC  00B3               	movwf	(_RF_Data^(0+128)+19)
 13570                           
 13571                           ;RF_Control_B1.c: 196: RF_Data[20] = 209;
 13572  0DED  30D1               	movlw	209
 13573  0DEE  0020               	movlb	0	; select bank0
 13574  0DEF  00A2               	movwf	??_setTxData
 13575  0DF0  0822               	movf	??_setTxData,w
 13576  0DF1  0021               	movlb	1	; select bank1
 13577  0DF2  00B4               	movwf	(_RF_Data^(0+128)+20)
 13578  0DF3  0008               	return
 13579  0DF4                     __end_of_setTxData:	
 13580                           
 13581                           	psect	text81
 13582  1D20                     __ptext81:	
 13583 ;; *************** function _RfPointSelect *****************
 13584 ;; Defined at:
 13585 ;;		line 7 in file "../src/RF_Control_B1.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;  rf              1    wreg     unsigned char 
 13588 ;; Auto vars:     Size  Location     Type
 13589 ;;  rf              1    1[BANK0 ] unsigned char 
 13590 ;; Return value:  Size  Location     Type
 13591 ;;		None               void
 13592 ;; Registers used:
 13593 ;;		wreg
 13594 ;; Tracked objects:
 13595 ;;		On entry : 0/0
 13596 ;;		On exit  : 0/0
 13597 ;;		Unchanged: 0/0
 13598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;Total ram usage:        2 bytes
 13604 ;; Hardware stack levels used:    1
 13605 ;; Hardware stack levels required when called:    5
 13606 ;; This function calls:
 13607 ;;		Nothing
 13608 ;; This function is called by:
 13609 ;;		_setRF_Learn
 13610 ;;		_setRF_Main
 13611 ;;		_setTxData
 13612 ;;		_setRF_Enable
 13613 ;;		_RF_RxDisable
 13614 ;;		_getRxData
 13615 ;;		_setLog_Code
 13616 ;;		_setControl_Lights_Table
 13617 ;;		_setRF_RxStatus
 13618 ;; This function uses a non-reentrant model
 13619 ;;
 13620                           
 13621                           
 13622                           ;psect for function _RfPointSelect
 13623  1D20                     _RfPointSelect:	
 13624                           
 13625                           ;incstack = 0
 13626                           ; Regs used in _RfPointSelect: [wreg]
 13627                           ;RfPointSelect@rf stored from wreg
 13628  1D20  0020               	movlb	0	; select bank0
 13629  1D21  00A1               	movwf	RfPointSelect@rf
 13630                           
 13631                           ;RF_Control_B1.c: 9: if (rf == 1) {
 13632  1D22  0821               	movf	RfPointSelect@rf,w
 13633  1D23  3A01               	xorlw	1
 13634  1D24  1D03               	skipz
 13635  1D25  2D2A               	goto	l5402
 13636                           
 13637                           ;RF_Control_B1.c: 10: RF = &RF1;
 13638  1D26  30D8               	movlw	_RF1& (0+255)
 13639  1D27  00A0               	movwf	??_RfPointSelect
 13640  1D28  0820               	movf	??_RfPointSelect,w
 13641  1D29  00FA               	movwf	_RF
 13642  1D2A                     l5402:	
 13643                           
 13644                           ;RF_Control_B1.c: 11: }
 13645                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 13646  1D2A  1A0B               	btfsc	11,4	;volatile
 13647  1D2B  0008               	return
 13648                           
 13649                           ;RF_Control_B1.c: 13: INTE = 1;
 13650  1D2C  160B               	bsf	11,4	;volatile
 13651  1D2D  0008               	return
 13652  1D2E                     __end_of_RfPointSelect:	
 13653                           
 13654                           	psect	text82
 13655  1D4B                     __ptext82:	
 13656 ;; *************** function _setSw_Status *****************
 13657 ;; Defined at:
 13658 ;;		line 105 in file "../src/Switch_B1.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  sw              1    wreg     unsigned char 
 13661 ;;  command         1    2[BANK0 ] unsigned char 
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;  sw              1    3[BANK0 ] unsigned char 
 13664 ;; Return value:  Size  Location     Type
 13665 ;;		None               void
 13666 ;; Registers used:
 13667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13673 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;Total ram usage:        2 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; Hardware stack levels required when called:    6
 13680 ;; This function calls:
 13681 ;;		_SwPointSelect
 13682 ;; This function is called by:
 13683 ;;		_DlyOff_Main
 13684 ;;		_setDimmerLights_ERROR
 13685 ;;		_setControl_Lights_Table
 13686 ;;		_setRFSW_Control
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function _setSw_Status
 13692  1D4B                     _setSw_Status:	
 13693                           
 13694                           ;incstack = 0
 13695                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13696                           ;setSw_Status@sw stored from wreg
 13697  1D4B  0020               	movlb	0	; select bank0
 13698  1D4C  00A3               	movwf	setSw_Status@sw
 13699                           
 13700                           ;Switch_B1.c: 106: SwPointSelect(sw);
 13701  1D4D  0823               	movf	setSw_Status@sw,w
 13702  1D4E  319C  248D         	fcall	_SwPointSelect
 13703                           
 13704                           ;Switch_B1.c: 107: Sw->Status = command;
 13705  1D50  087B               	movf	_Sw,w
 13706  1D51  0086               	movwf	6
 13707  1D52  3001               	movlw	1	; select bank2/3
 13708  1D53  0087               	movwf	7
 13709  1D54  0020               	movlb	0	; select bank0
 13710  1D55  0822               	movf	setSw_Status@command,w
 13711  1D56  1301               	bcf	1,6
 13712  1D57  1D03               	skipz
 13713  1D58  1701               	bsf	1,6
 13714  1D59  0008               	return
 13715  1D5A                     __end_of_setSw_Status:	
 13716                           
 13717                           	psect	text83
 13718  1C8D                     __ptext83:	
 13719 ;; *************** function _SwPointSelect *****************
 13720 ;; Defined at:
 13721 ;;		line 17 in file "../src/Switch_B1.c"
 13722 ;; Parameters:    Size  Location     Type
 13723 ;;  sw              1    wreg     unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  sw              1    1[BANK0 ] unsigned char 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;		None               void
 13728 ;; Registers used:
 13729 ;;		wreg
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:        2 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    5
 13742 ;; This function calls:
 13743 ;;		Nothing
 13744 ;; This function is called by:
 13745 ;;		_setSw_Enable
 13746 ;;		_setSw_Status
 13747 ;;		_setSw_Main
 13748 ;;		_Sw_Detect
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function _SwPointSelect
 13754  1C8D                     _SwPointSelect:	
 13755                           
 13756                           ;incstack = 0
 13757                           ; Regs used in _SwPointSelect: [wreg]
 13758                           ;SwPointSelect@sw stored from wreg
 13759  1C8D  0020               	movlb	0	; select bank0
 13760  1C8E  00A1               	movwf	SwPointSelect@sw
 13761                           
 13762                           ;Switch_B1.c: 20: if (sw == 1) {
 13763  1C8F  0821               	movf	SwPointSelect@sw,w
 13764  1C90  3A01               	xorlw	1
 13765  1C91  1D03               	skipz
 13766  1C92  0008               	return
 13767                           
 13768                           ;Switch_B1.c: 21: Sw = &Sw1;
 13769  1C93  3043               	movlw	_Sw1& (0+255)
 13770  1C94  00A0               	movwf	??_SwPointSelect
 13771  1C95  0820               	movf	??_SwPointSelect,w
 13772  1C96  00FB               	movwf	_Sw
 13773  1C97  0008               	return
 13774  1C98                     __end_of_SwPointSelect:	
 13775                           
 13776                           	psect	text84
 13777  088E                     __ptext84:	
 13778 ;; *************** function _setRF_DimmerLights *****************
 13779 ;; Defined at:
 13780 ;;		line 423 in file "../src/RF_Control_B1.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  lights          1    wreg     unsigned char 
 13783 ;;  on              1   61[BANK0 ] unsigned char 
 13784 ;; Auto vars:     Size  Location     Type
 13785 ;;  lights          1   65[BANK0 ] unsigned char 
 13786 ;;  status          1   64[BANK0 ] unsigned char 
 13787 ;; Return value:  Size  Location     Type
 13788 ;;		None               void
 13789 ;; Registers used:
 13790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13796 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;Total ram usage:        5 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    8
 13803 ;; This function calls:
 13804 ;;		_setPercentValue
 13805 ;; This function is called by:
 13806 ;;		_DlyOff_Main
 13807 ;;		_setDimmerLights_Adj
 13808 ;;		_setRFSW_Control
 13809 ;;		_Sw_DimmerOnFunc
 13810 ;;		_Sw_DimmerOffFunc
 13811 ;; This function uses a non-reentrant model
 13812 ;;
 13813                           
 13814                           
 13815                           ;psect for function _setRF_DimmerLights
 13816  088E                     _setRF_DimmerLights:	
 13817                           
 13818                           ;incstack = 0
 13819                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13820                           ;setRF_DimmerLights@lights stored from wreg
 13821  088E  0020               	movlb	0	; select bank0
 13822  088F  00E1               	movwf	setRF_DimmerLights@lights
 13823                           
 13824                           ;RF_Control_B1.c: 424: char status;
 13825                           ;RF_Control_B1.c: 425: status = 1;
 13826  0890  01E0               	clrf	setRF_DimmerLights@status
 13827  0891  0AE0               	incf	setRF_DimmerLights@status,f
 13828                           
 13829                           ;RF_Control_B1.c: 426: status <<= (lights - 1);
 13830  0892  0861               	movf	setRF_DimmerLights@lights,w
 13831  0893  3EFF               	addlw	-1
 13832  0894  0A89               	incf	9,f
 13833  0895  2898               	goto	u4100
 13834  0896                     u4105:	
 13835  0896  1003               	clrc
 13836  0897  0DE0               	rlf	setRF_DimmerLights@status,f
 13837  0898                     u4100:	
 13838  0898  3EFF               	addlw	-1
 13839  0899  1D03               	skipz
 13840  089A  2896               	goto	u4105
 13841                           
 13842                           ;RF_Control_B1.c: 427: product->Data[11]=lights;
 13843  089B  0861               	movf	setRF_DimmerLights@lights,w
 13844  089C  00DE               	movwf	??_setRF_DimmerLights
 13845  089D  087D               	movf	_product,w
 13846  089E  3E0B               	addlw	11
 13847  089F  0086               	movwf	6
 13848  08A0  3001               	movlw	1	; select bank2/3
 13849  08A1  0087               	movwf	7
 13850  08A2  085E               	movf	??_setRF_DimmerLights,w
 13851  08A3  0081               	movwf	1
 13852                           
 13853                           ;RF_Control_B1.c: 430: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13854  08A4  3020               	movlw	32
 13855  08A5  3193  23B6  3188   	fcall	_setPercentValue
 13856  08A8  0020               	movlb	0	; select bank0
 13857  08A9  00DE               	movwf	??_setRF_DimmerLights
 13858  08AA  0861               	movf	setRF_DimmerLights@lights,w
 13859  08AB  3E14               	addlw	20
 13860  08AC  077D               	addwf	_product,w
 13861  08AD  00DF               	movwf	??_setRF_DimmerLights+1
 13862  08AE  085F               	movf	??_setRF_DimmerLights+1,w
 13863  08AF  0086               	movwf	6
 13864  08B0  3001               	movlw	1	; select bank2/3
 13865  08B1  0087               	movwf	7
 13866  08B2  085E               	movf	??_setRF_DimmerLights,w
 13867  08B3  0081               	movwf	1
 13868                           
 13869                           ;RF_Control_B1.c: 433: product->Data[9]=product->Data[20 + lights];
 13870  08B4  0861               	movf	setRF_DimmerLights@lights,w
 13871  08B5  3E14               	addlw	20
 13872  08B6  077D               	addwf	_product,w
 13873  08B7  00DE               	movwf	??_setRF_DimmerLights
 13874  08B8  085E               	movf	??_setRF_DimmerLights,w
 13875  08B9  0086               	movwf	6
 13876  08BA  3001               	movlw	1	; select bank2/3
 13877  08BB  0087               	movwf	7
 13878  08BC  0801               	movf	1,w
 13879  08BD  00DF               	movwf	??_setRF_DimmerLights+1
 13880  08BE  087D               	movf	_product,w
 13881  08BF  3E09               	addlw	9
 13882  08C0  0086               	movwf	6
 13883  08C1  3001               	movlw	1	; select bank2/3
 13884  08C2  0087               	movwf	7
 13885  08C3  085F               	movf	??_setRF_DimmerLights+1,w
 13886  08C4  0081               	movwf	1
 13887                           
 13888                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + lights];
 13889  08C5  0861               	movf	setRF_DimmerLights@lights,w
 13890  08C6  3E1A               	addlw	26
 13891  08C7  077D               	addwf	_product,w
 13892  08C8  00DE               	movwf	??_setRF_DimmerLights
 13893  08C9  085E               	movf	??_setRF_DimmerLights,w
 13894  08CA  0086               	movwf	6
 13895  08CB  3001               	movlw	1	; select bank2/3
 13896  08CC  0087               	movwf	7
 13897  08CD  0801               	movf	1,w
 13898  08CE  00DF               	movwf	??_setRF_DimmerLights+1
 13899  08CF  087D               	movf	_product,w
 13900  08D0  3E11               	addlw	17
 13901  08D1  0086               	movwf	6
 13902  08D2  3001               	movlw	1	; select bank2/3
 13903  08D3  0087               	movwf	7
 13904  08D4  085F               	movf	??_setRF_DimmerLights+1,w
 13905  08D5  0081               	movwf	1
 13906                           
 13907                           ;RF_Control_B1.c: 435: if (on == 1) {
 13908  08D6  085D               	movf	setRF_DimmerLights@on,w
 13909  08D7  3A01               	xorlw	1
 13910  08D8  1D03               	skipz
 13911  08D9  28EA               	goto	l5502
 13912                           
 13913                           ;RF_Control_B1.c: 436: product->Data[15]=(product->Data[15] | status);
 13914  08DA  087D               	movf	_product,w
 13915  08DB  3E0F               	addlw	15
 13916  08DC  0086               	movwf	6
 13917  08DD  3001               	movlw	1	; select bank2/3
 13918  08DE  0087               	movwf	7
 13919  08DF  0801               	movf	1,w
 13920  08E0  0460               	iorwf	setRF_DimmerLights@status,w
 13921  08E1  00DE               	movwf	??_setRF_DimmerLights
 13922  08E2  087D               	movf	_product,w
 13923  08E3  3E0F               	addlw	15
 13924  08E4  0086               	movwf	6
 13925  08E5  3001               	movlw	1	; select bank2/3
 13926  08E6  0087               	movwf	7
 13927  08E7  085E               	movf	??_setRF_DimmerLights,w
 13928  08E8  0081               	movwf	1
 13929                           
 13930                           ;RF_Control_B1.c: 437: } else {
 13931  08E9  0008               	return
 13932  08EA                     l5502:	
 13933                           
 13934                           ;RF_Control_B1.c: 438: product->Data[15]=(product->Data[15]&(~status));
 13935  08EA  087D               	movf	_product,w
 13936  08EB  3E0F               	addlw	15
 13937  08EC  0086               	movwf	6
 13938  08ED  3001               	movlw	1	; select bank2/3
 13939  08EE  0087               	movwf	7
 13940  08EF  0960               	comf	setRF_DimmerLights@status,w
 13941  08F0  0501               	andwf	1,w
 13942  08F1  00DE               	movwf	??_setRF_DimmerLights
 13943  08F2  087D               	movf	_product,w
 13944  08F3  3E0F               	addlw	15
 13945  08F4  0086               	movwf	6
 13946  08F5  3001               	movlw	1	; select bank2/3
 13947  08F6  0087               	movwf	7
 13948  08F7  085E               	movf	??_setRF_DimmerLights,w
 13949  08F8  0081               	movwf	1
 13950  08F9  0008               	return
 13951  08FA                     __end_of_setRF_DimmerLights:	
 13952                           
 13953                           	psect	text85
 13954  13B6                     __ptext85:	
 13955 ;; *************** function _setPercentValue *****************
 13956 ;; Defined at:
 13957 ;;		line 768 in file "../src/Dimmer_B1.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;  value           1    wreg     unsigned char 
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  value           1   57[BANK0 ] unsigned char 
 13962 ;;  i               3   58[BANK0 ] float 
 13963 ;; Return value:  Size  Location     Type
 13964 ;;                  1    wreg      unsigned char 
 13965 ;; Registers used:
 13966 ;;		wreg, status,2, status,0, pclath, cstack
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13973 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13976 ;;Total ram usage:        4 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    7
 13979 ;; This function calls:
 13980 ;;		___awtoft
 13981 ;;		___ftdiv
 13982 ;;		___fttol
 13983 ;; This function is called by:
 13984 ;;		_Flash_Memory_Initialization
 13985 ;;		_setRF_DimmerLights
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           
 13990                           ;psect for function _setPercentValue
 13991  13B6                     _setPercentValue:	
 13992                           
 13993                           ;incstack = 0
 13994                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13995                           ;setPercentValue@value stored from wreg
 13996  13B6  0020               	movlb	0	; select bank0
 13997  13B7  00D9               	movwf	setPercentValue@value
 13998                           
 13999                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14000  13B8  3000               	movlw	0
 14001  13B9  00DA               	movwf	setPercentValue@i
 14002  13BA  30E0               	movlw	224
 14003  13BB  00DB               	movwf	setPercentValue@i+1
 14004  13BC  3041               	movlw	65
 14005  13BD  00DC               	movwf	setPercentValue@i+2
 14006                           
 14007                           ;Dimmer_B1.c: 771: i /= 100;
 14008  13BE  3000               	movlw	0
 14009  13BF  00AE               	movwf	___ftdiv@f2
 14010  13C0  30C8               	movlw	200
 14011  13C1  00AF               	movwf	___ftdiv@f2+1
 14012  13C2  3042               	movlw	66
 14013  13C3  00B0               	movwf	___ftdiv@f2+2
 14014  13C4  085A               	movf	setPercentValue@i,w
 14015  13C5  00B1               	movwf	___ftdiv@f1
 14016  13C6  085B               	movf	setPercentValue@i+1,w
 14017  13C7  00B2               	movwf	___ftdiv@f1+1
 14018  13C8  085C               	movf	setPercentValue@i+2,w
 14019  13C9  00B3               	movwf	___ftdiv@f1+2
 14020  13CA  318D  25F4  3193   	fcall	___ftdiv
 14021  13CD  0020               	movlb	0	; select bank0
 14022  13CE  082E               	movf	?___ftdiv,w
 14023  13CF  00DA               	movwf	setPercentValue@i
 14024  13D0  082F               	movf	?___ftdiv+1,w
 14025  13D1  00DB               	movwf	setPercentValue@i+1
 14026  13D2  0830               	movf	?___ftdiv+2,w
 14027  13D3  00DC               	movwf	setPercentValue@i+2
 14028                           
 14029                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14030  13D4  0859               	movf	setPercentValue@value,w
 14031  13D5  3EE0               	addlw	224
 14032  13D6  00A8               	movwf	___awtoft@c
 14033  13D7  30FF               	movlw	255
 14034  13D8  1803               	skipnc
 14035  13D9  3000               	movlw	0
 14036  13DA  00A9               	movwf	___awtoft@c+1
 14037  13DB  319F  27BC  3193   	fcall	___awtoft
 14038  13DE  0020               	movlb	0	; select bank0
 14039  13DF  0828               	movf	?___awtoft,w
 14040  13E0  00B1               	movwf	___ftdiv@f1
 14041  13E1  0829               	movf	?___awtoft+1,w
 14042  13E2  00B2               	movwf	___ftdiv@f1+1
 14043  13E3  082A               	movf	?___awtoft+2,w
 14044  13E4  00B3               	movwf	___ftdiv@f1+2
 14045  13E5  085A               	movf	setPercentValue@i,w
 14046  13E6  00AE               	movwf	___ftdiv@f2
 14047  13E7  085B               	movf	setPercentValue@i+1,w
 14048  13E8  00AF               	movwf	___ftdiv@f2+1
 14049  13E9  085C               	movf	setPercentValue@i+2,w
 14050  13EA  00B0               	movwf	___ftdiv@f2+2
 14051  13EB  318D  25F4  3193   	fcall	___ftdiv
 14052  13EE  0020               	movlb	0	; select bank0
 14053  13EF  082E               	movf	?___ftdiv,w
 14054  13F0  00CB               	movwf	___fttol@f1
 14055  13F1  082F               	movf	?___ftdiv+1,w
 14056  13F2  00CC               	movwf	___fttol@f1+1
 14057  13F3  0830               	movf	?___ftdiv+2,w
 14058  13F4  00CD               	movwf	___fttol@f1+2
 14059  13F5  318B  23B5         	fcall	___fttol
 14060  13F7  0020               	movlb	0	; select bank0
 14061  13F8  034B               	decf	?___fttol,w
 14062  13F9  3AFF               	xorlw	255
 14063  13FA  3E64               	addlw	100
 14064  13FB  0008               	return
 14065  13FC                     __end_of_setPercentValue:	
 14066                           
 14067                           	psect	text86
 14068  0BB5                     __ptext86:	
 14069 ;; *************** function ___fttol *****************
 14070 ;; Defined at:
 14071 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;  f1              3   43[BANK0 ] float 
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;  lval            4   52[BANK0 ] unsigned long 
 14076 ;;  exp1            1   56[BANK0 ] unsigned char 
 14077 ;;  sign1           1   51[BANK0 ] unsigned char 
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  4   43[BANK0 ] long 
 14080 ;; Registers used:
 14081 ;;		wreg, status,2, status,0
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 0/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14087 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14089 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;Total ram usage:       14 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    5
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		_getPercentValue
 14098 ;;		_setPercentValue
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           
 14103                           ;psect for function ___fttol
 14104  0BB5                     ___fttol:	
 14105                           
 14106                           ;incstack = 0
 14107                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14108  0BB5  0020               	movlb	0	; select bank0
 14109  0BB6  084B               	movf	___fttol@f1,w
 14110  0BB7  00CF               	movwf	??___fttol
 14111  0BB8  084C               	movf	___fttol@f1+1,w
 14112  0BB9  00D0               	movwf	??___fttol+1
 14113  0BBA  084D               	movf	___fttol@f1+2,w
 14114  0BBB  00D1               	movwf	??___fttol+2
 14115  0BBC  1003               	clrc
 14116  0BBD  0D50               	rlf	??___fttol+1,w
 14117  0BBE  0D51               	rlf	??___fttol+2,w
 14118  0BBF  00D2               	movwf	??___fttol+3
 14119  0BC0  0852               	movf	??___fttol+3,w
 14120  0BC1  00D8               	movwf	___fttol@exp1
 14121  0BC2  08D8               	movf	___fttol@exp1,f
 14122  0BC3  1D03               	skipz
 14123  0BC4  2BCE               	goto	l5294
 14124  0BC5  3000               	movlw	0
 14125  0BC6  00CE               	movwf	?___fttol+3
 14126  0BC7  3000               	movlw	0
 14127  0BC8  00CD               	movwf	?___fttol+2
 14128  0BC9  3000               	movlw	0
 14129  0BCA  00CC               	movwf	?___fttol+1
 14130  0BCB  3000               	movlw	0
 14131  0BCC  00CB               	movwf	?___fttol
 14132  0BCD  0008               	return
 14133  0BCE                     l5294:	
 14134  0BCE  084B               	movf	___fttol@f1,w
 14135  0BCF  00CF               	movwf	??___fttol
 14136  0BD0  084C               	movf	___fttol@f1+1,w
 14137  0BD1  00D0               	movwf	??___fttol+1
 14138  0BD2  084D               	movf	___fttol@f1+2,w
 14139  0BD3  00D1               	movwf	??___fttol+2
 14140  0BD4  3017               	movlw	23
 14141  0BD5                     u3785:	
 14142  0BD5  36D1               	lsrf	??___fttol+2,f
 14143  0BD6  0CD0               	rrf	??___fttol+1,f
 14144  0BD7  0CCF               	rrf	??___fttol,f
 14145  0BD8  0B89               	decfsz	9,f
 14146  0BD9  2BD5               	goto	u3785
 14147  0BDA  084F               	movf	??___fttol,w
 14148  0BDB  00D2               	movwf	??___fttol+3
 14149  0BDC  0852               	movf	??___fttol+3,w
 14150  0BDD  00D3               	movwf	___fttol@sign1
 14151  0BDE  17CC               	bsf	___fttol@f1+1,7
 14152  0BDF  30FF               	movlw	255
 14153  0BE0  05CB               	andwf	___fttol@f1,f
 14154  0BE1  30FF               	movlw	255
 14155  0BE2  05CC               	andwf	___fttol@f1+1,f
 14156  0BE3  3000               	movlw	0
 14157  0BE4  05CD               	andwf	___fttol@f1+2,f
 14158  0BE5  084B               	movf	___fttol@f1,w
 14159  0BE6  00D4               	movwf	___fttol@lval
 14160  0BE7  084C               	movf	___fttol@f1+1,w
 14161  0BE8  00D5               	movwf	___fttol@lval+1
 14162  0BE9  084D               	movf	___fttol@f1+2,w
 14163  0BEA  00D6               	movwf	___fttol@lval+2
 14164  0BEB  01D7               	clrf	___fttol@lval+3
 14165  0BEC  308E               	movlw	142
 14166  0BED  02D8               	subwf	___fttol@exp1,f
 14167  0BEE  1FD8               	btfss	___fttol@exp1,7
 14168  0BEF  2C0C               	goto	l5314
 14169  0BF0  0858               	movf	___fttol@exp1,w
 14170  0BF1  3A80               	xorlw	128
 14171  0BF2  3E8F               	addlw	143
 14172  0BF3  1803               	skipnc
 14173  0BF4  2BFE               	goto	l5312
 14174  0BF5  3000               	movlw	0
 14175  0BF6  00CE               	movwf	?___fttol+3
 14176  0BF7  3000               	movlw	0
 14177  0BF8  00CD               	movwf	?___fttol+2
 14178  0BF9  3000               	movlw	0
 14179  0BFA  00CC               	movwf	?___fttol+1
 14180  0BFB  3000               	movlw	0
 14181  0BFC  00CB               	movwf	?___fttol
 14182  0BFD  0008               	return
 14183  0BFE                     l5312:	
 14184  0BFE  3001               	movlw	1
 14185  0BFF                     u3815:	
 14186  0BFF  36D7               	lsrf	___fttol@lval+3,f
 14187  0C00  0CD6               	rrf	___fttol@lval+2,f
 14188  0C01  0CD5               	rrf	___fttol@lval+1,f
 14189  0C02  0CD4               	rrf	___fttol@lval,f
 14190  0C03  0B89               	decfsz	9,f
 14191  0C04  2BFF               	goto	u3815
 14192  0C05  3001               	movlw	1
 14193  0C06  00CF               	movwf	??___fttol
 14194  0C07  084F               	movf	??___fttol,w
 14195  0C08  07D8               	addwf	___fttol@exp1,f
 14196  0C09  1903               	btfsc	3,2
 14197  0C0A  2C25               	goto	l5324
 14198  0C0B  2BFE               	goto	l5312
 14199  0C0C                     l5314:	
 14200  0C0C  3018               	movlw	24
 14201  0C0D  0258               	subwf	___fttol@exp1,w
 14202  0C0E  1C03               	skipc
 14203  0C0F  2C22               	goto	l5322
 14204  0C10  3000               	movlw	0
 14205  0C11  00CE               	movwf	?___fttol+3
 14206  0C12  3000               	movlw	0
 14207  0C13  00CD               	movwf	?___fttol+2
 14208  0C14  3000               	movlw	0
 14209  0C15  00CC               	movwf	?___fttol+1
 14210  0C16  3000               	movlw	0
 14211  0C17  00CB               	movwf	?___fttol
 14212  0C18  0008               	return
 14213  0C19                     l5320:	
 14214  0C19  3001               	movlw	1
 14215  0C1A                     u3845:	
 14216  0C1A  35D4               	lslf	___fttol@lval,f
 14217  0C1B  0DD5               	rlf	___fttol@lval+1,f
 14218  0C1C  0DD6               	rlf	___fttol@lval+2,f
 14219  0C1D  0DD7               	rlf	___fttol@lval+3,f
 14220  0C1E  0B89               	decfsz	9,f
 14221  0C1F  2C1A               	goto	u3845
 14222  0C20  3001               	movlw	1
 14223  0C21  02D8               	subwf	___fttol@exp1,f
 14224  0C22                     l5322:	
 14225  0C22  08D8               	movf	___fttol@exp1,f
 14226  0C23  1D03               	skipz
 14227  0C24  2C19               	goto	l5320
 14228  0C25                     l5324:	
 14229  0C25  0853               	movf	___fttol@sign1,w
 14230  0C26  1903               	btfsc	3,2
 14231  0C27  2C33               	goto	l5328
 14232  0C28  09D4               	comf	___fttol@lval,f
 14233  0C29  09D5               	comf	___fttol@lval+1,f
 14234  0C2A  09D6               	comf	___fttol@lval+2,f
 14235  0C2B  09D7               	comf	___fttol@lval+3,f
 14236  0C2C  0AD4               	incf	___fttol@lval,f
 14237  0C2D  1903               	skipnz
 14238  0C2E  0AD5               	incf	___fttol@lval+1,f
 14239  0C2F  1903               	skipnz
 14240  0C30  0AD6               	incf	___fttol@lval+2,f
 14241  0C31  1903               	skipnz
 14242  0C32  0AD7               	incf	___fttol@lval+3,f
 14243  0C33                     l5328:	
 14244  0C33  0857               	movf	___fttol@lval+3,w
 14245  0C34  00CE               	movwf	?___fttol+3
 14246  0C35  0856               	movf	___fttol@lval+2,w
 14247  0C36  00CD               	movwf	?___fttol+2
 14248  0C37  0855               	movf	___fttol@lval+1,w
 14249  0C38  00CC               	movwf	?___fttol+1
 14250  0C39  0854               	movf	___fttol@lval,w
 14251  0C3A  00CB               	movwf	?___fttol
 14252  0C3B  0008               	return
 14253  0C3C                     __end_of___fttol:	
 14254                           
 14255                           	psect	text87
 14256  0DF4                     __ptext87:	
 14257 ;; *************** function ___ftdiv *****************
 14258 ;; Defined at:
 14259 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14260 ;; Parameters:    Size  Location     Type
 14261 ;;  f2              3   14[BANK0 ] float 
 14262 ;;  f1              3   17[BANK0 ] float 
 14263 ;; Auto vars:     Size  Location     Type
 14264 ;;  f3              3   25[BANK0 ] float 
 14265 ;;  sign            1   29[BANK0 ] unsigned char 
 14266 ;;  exp             1   28[BANK0 ] unsigned char 
 14267 ;;  cntr            1   24[BANK0 ] unsigned char 
 14268 ;; Return value:  Size  Location     Type
 14269 ;;                  3   14[BANK0 ] float 
 14270 ;; Registers used:
 14271 ;;		wreg, status,2, status,0, pclath, cstack
 14272 ;; Tracked objects:
 14273 ;;		On entry : 0/0
 14274 ;;		On exit  : 0/0
 14275 ;;		Unchanged: 0/0
 14276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14277 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14280 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;Total ram usage:       16 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    6
 14284 ;; This function calls:
 14285 ;;		___ftpack
 14286 ;; This function is called by:
 14287 ;;		_getPercentValue
 14288 ;;		_setPercentValue
 14289 ;; This function uses a non-reentrant model
 14290 ;;
 14291                           
 14292                           
 14293                           ;psect for function ___ftdiv
 14294  0DF4                     ___ftdiv:	
 14295                           
 14296                           ;incstack = 0
 14297                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14298  0DF4  0020               	movlb	0	; select bank0
 14299  0DF5  0831               	movf	___ftdiv@f1,w
 14300  0DF6  00B4               	movwf	??___ftdiv
 14301  0DF7  0832               	movf	___ftdiv@f1+1,w
 14302  0DF8  00B5               	movwf	??___ftdiv+1
 14303  0DF9  0833               	movf	___ftdiv@f1+2,w
 14304  0DFA  00B6               	movwf	??___ftdiv+2
 14305  0DFB  1003               	clrc
 14306  0DFC  0D35               	rlf	??___ftdiv+1,w
 14307  0DFD  0D36               	rlf	??___ftdiv+2,w
 14308  0DFE  00B7               	movwf	??___ftdiv+3
 14309  0DFF  0837               	movf	??___ftdiv+3,w
 14310  0E00  00BC               	movwf	___ftdiv@exp
 14311  0E01  08BC               	movf	___ftdiv@exp,f
 14312  0E02  1D03               	skipz
 14313  0E03  2E0B               	goto	l5202
 14314  0E04  3000               	movlw	0
 14315  0E05  00AE               	movwf	?___ftdiv
 14316  0E06  3000               	movlw	0
 14317  0E07  00AF               	movwf	?___ftdiv+1
 14318  0E08  3000               	movlw	0
 14319  0E09  00B0               	movwf	?___ftdiv+2
 14320  0E0A  0008               	return
 14321  0E0B                     l5202:	
 14322  0E0B  082E               	movf	___ftdiv@f2,w
 14323  0E0C  00B4               	movwf	??___ftdiv
 14324  0E0D  082F               	movf	___ftdiv@f2+1,w
 14325  0E0E  00B5               	movwf	??___ftdiv+1
 14326  0E0F  0830               	movf	___ftdiv@f2+2,w
 14327  0E10  00B6               	movwf	??___ftdiv+2
 14328  0E11  1003               	clrc
 14329  0E12  0D35               	rlf	??___ftdiv+1,w
 14330  0E13  0D36               	rlf	??___ftdiv+2,w
 14331  0E14  00B7               	movwf	??___ftdiv+3
 14332  0E15  0837               	movf	??___ftdiv+3,w
 14333  0E16  00BD               	movwf	___ftdiv@sign
 14334  0E17  08BD               	movf	___ftdiv@sign,f
 14335  0E18  1D03               	skipz
 14336  0E19  2E21               	goto	l5208
 14337  0E1A  3000               	movlw	0
 14338  0E1B  00AE               	movwf	?___ftdiv
 14339  0E1C  3000               	movlw	0
 14340  0E1D  00AF               	movwf	?___ftdiv+1
 14341  0E1E  3000               	movlw	0
 14342  0E1F  00B0               	movwf	?___ftdiv+2
 14343  0E20  0008               	return
 14344  0E21                     l5208:	
 14345  0E21  3000               	movlw	0
 14346  0E22  00B9               	movwf	___ftdiv@f3
 14347  0E23  3000               	movlw	0
 14348  0E24  00BA               	movwf	___ftdiv@f3+1
 14349  0E25  3000               	movlw	0
 14350  0E26  00BB               	movwf	___ftdiv@f3+2
 14351  0E27  3089               	movlw	137
 14352  0E28  073D               	addwf	___ftdiv@sign,w
 14353  0E29  00B4               	movwf	??___ftdiv
 14354  0E2A  0834               	movf	??___ftdiv,w
 14355  0E2B  02BC               	subwf	___ftdiv@exp,f
 14356  0E2C  0831               	movf	___ftdiv@f1,w
 14357  0E2D  00B4               	movwf	??___ftdiv
 14358  0E2E  0832               	movf	___ftdiv@f1+1,w
 14359  0E2F  00B5               	movwf	??___ftdiv+1
 14360  0E30  0833               	movf	___ftdiv@f1+2,w
 14361  0E31  00B6               	movwf	??___ftdiv+2
 14362  0E32  3010               	movlw	16
 14363  0E33                     u3595:	
 14364  0E33  36B6               	lsrf	??___ftdiv+2,f
 14365  0E34  0CB5               	rrf	??___ftdiv+1,f
 14366  0E35  0CB4               	rrf	??___ftdiv,f
 14367  0E36  0B89               	decfsz	9,f
 14368  0E37  2E33               	goto	u3595
 14369  0E38  0834               	movf	??___ftdiv,w
 14370  0E39  00B7               	movwf	??___ftdiv+3
 14371  0E3A  0837               	movf	??___ftdiv+3,w
 14372  0E3B  00BD               	movwf	___ftdiv@sign
 14373  0E3C  082E               	movf	___ftdiv@f2,w
 14374  0E3D  00B4               	movwf	??___ftdiv
 14375  0E3E  082F               	movf	___ftdiv@f2+1,w
 14376  0E3F  00B5               	movwf	??___ftdiv+1
 14377  0E40  0830               	movf	___ftdiv@f2+2,w
 14378  0E41  00B6               	movwf	??___ftdiv+2
 14379  0E42  3010               	movlw	16
 14380  0E43                     u3605:	
 14381  0E43  36B6               	lsrf	??___ftdiv+2,f
 14382  0E44  0CB5               	rrf	??___ftdiv+1,f
 14383  0E45  0CB4               	rrf	??___ftdiv,f
 14384  0E46  0B89               	decfsz	9,f
 14385  0E47  2E43               	goto	u3605
 14386  0E48  0834               	movf	??___ftdiv,w
 14387  0E49  00B7               	movwf	??___ftdiv+3
 14388  0E4A  0837               	movf	??___ftdiv+3,w
 14389  0E4B  06BD               	xorwf	___ftdiv@sign,f
 14390  0E4C  3080               	movlw	128
 14391  0E4D  00B4               	movwf	??___ftdiv
 14392  0E4E  0834               	movf	??___ftdiv,w
 14393  0E4F  05BD               	andwf	___ftdiv@sign,f
 14394  0E50  17B2               	bsf	___ftdiv@f1+1,7
 14395  0E51  30FF               	movlw	255
 14396  0E52  05B1               	andwf	___ftdiv@f1,f
 14397  0E53  30FF               	movlw	255
 14398  0E54  05B2               	andwf	___ftdiv@f1+1,f
 14399  0E55  3000               	movlw	0
 14400  0E56  05B3               	andwf	___ftdiv@f1+2,f
 14401  0E57  17AF               	bsf	___ftdiv@f2+1,7
 14402  0E58  30FF               	movlw	255
 14403  0E59  05AE               	andwf	___ftdiv@f2,f
 14404  0E5A  30FF               	movlw	255
 14405  0E5B  05AF               	andwf	___ftdiv@f2+1,f
 14406  0E5C  3000               	movlw	0
 14407  0E5D  05B0               	andwf	___ftdiv@f2+2,f
 14408  0E5E  3018               	movlw	24
 14409  0E5F  00B4               	movwf	??___ftdiv
 14410  0E60  0834               	movf	??___ftdiv,w
 14411  0E61  00B8               	movwf	___ftdiv@cntr
 14412  0E62                     l5222:	
 14413  0E62  3001               	movlw	1
 14414  0E63                     u3615:	
 14415  0E63  35B9               	lslf	___ftdiv@f3,f
 14416  0E64  0DBA               	rlf	___ftdiv@f3+1,f
 14417  0E65  0DBB               	rlf	___ftdiv@f3+2,f
 14418  0E66  0B89               	decfsz	9,f
 14419  0E67  2E63               	goto	u3615
 14420  0E68  0830               	movf	___ftdiv@f2+2,w
 14421  0E69  0233               	subwf	___ftdiv@f1+2,w
 14422  0E6A  1D03               	skipz
 14423  0E6B  2E72               	goto	u3625
 14424  0E6C  082F               	movf	___ftdiv@f2+1,w
 14425  0E6D  0232               	subwf	___ftdiv@f1+1,w
 14426  0E6E  1D03               	skipz
 14427  0E6F  2E72               	goto	u3625
 14428  0E70  082E               	movf	___ftdiv@f2,w
 14429  0E71  0231               	subwf	___ftdiv@f1,w
 14430  0E72                     u3625:	
 14431  0E72  1C03               	skipc
 14432  0E73  2E7B               	goto	l5230
 14433  0E74  082E               	movf	___ftdiv@f2,w
 14434  0E75  02B1               	subwf	___ftdiv@f1,f
 14435  0E76  082F               	movf	___ftdiv@f2+1,w
 14436  0E77  3BB2               	subwfb	___ftdiv@f1+1,f
 14437  0E78  0830               	movf	___ftdiv@f2+2,w
 14438  0E79  3BB3               	subwfb	___ftdiv@f1+2,f
 14439  0E7A  1439               	bsf	___ftdiv@f3,0
 14440  0E7B                     l5230:	
 14441  0E7B  3001               	movlw	1
 14442  0E7C                     u3635:	
 14443  0E7C  35B1               	lslf	___ftdiv@f1,f
 14444  0E7D  0DB2               	rlf	___ftdiv@f1+1,f
 14445  0E7E  0DB3               	rlf	___ftdiv@f1+2,f
 14446  0E7F  0B89               	decfsz	9,f
 14447  0E80  2E7C               	goto	u3635
 14448  0E81  3001               	movlw	1
 14449  0E82  02B8               	subwf	___ftdiv@cntr,f
 14450  0E83  1D03               	btfss	3,2
 14451  0E84  2E62               	goto	l5222
 14452  0E85  0839               	movf	___ftdiv@f3,w
 14453  0E86  00A0               	movwf	___ftpack@arg
 14454  0E87  083A               	movf	___ftdiv@f3+1,w
 14455  0E88  00A1               	movwf	___ftpack@arg+1
 14456  0E89  083B               	movf	___ftdiv@f3+2,w
 14457  0E8A  00A2               	movwf	___ftpack@arg+2
 14458  0E8B  083C               	movf	___ftdiv@exp,w
 14459  0E8C  00B4               	movwf	??___ftdiv
 14460  0E8D  0834               	movf	??___ftdiv,w
 14461  0E8E  00A3               	movwf	___ftpack@exp
 14462  0E8F  083D               	movf	___ftdiv@sign,w
 14463  0E90  00B5               	movwf	??___ftdiv+1
 14464  0E91  0835               	movf	??___ftdiv+1,w
 14465  0E92  00A4               	movwf	___ftpack@sign
 14466  0E93  3188  202D         	fcall	___ftpack
 14467  0E95  0020               	movlb	0	; select bank0
 14468  0E96  0820               	movf	?___ftpack,w
 14469  0E97  00AE               	movwf	?___ftdiv
 14470  0E98  0821               	movf	?___ftpack+1,w
 14471  0E99  00AF               	movwf	?___ftdiv+1
 14472  0E9A  0822               	movf	?___ftpack+2,w
 14473  0E9B  00B0               	movwf	?___ftdiv+2
 14474  0E9C  0008               	return
 14475  0E9D                     __end_of___ftdiv:	
 14476                           
 14477                           	psect	text88
 14478  1FBC                     __ptext88:	
 14479 ;; *************** function ___awtoft *****************
 14480 ;; Defined at:
 14481 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  c               2    8[BANK0 ] int 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  sign            1   13[BANK0 ] unsigned char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;                  3    8[BANK0 ] float 
 14488 ;; Registers used:
 14489 ;;		wreg, status,2, status,0, pclath, cstack
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        6 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    6
 14502 ;; This function calls:
 14503 ;;		___ftpack
 14504 ;; This function is called by:
 14505 ;;		_getPercentValue
 14506 ;;		_setPercentValue
 14507 ;; This function uses a non-reentrant model
 14508 ;;
 14509                           
 14510                           
 14511                           ;psect for function ___awtoft
 14512  1FBC                     ___awtoft:	
 14513                           
 14514                           ;incstack = 0
 14515                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14516  1FBC  0020               	movlb	0	; select bank0
 14517  1FBD  01AD               	clrf	___awtoft@sign
 14518  1FBE  1FA9               	btfss	___awtoft@c+1,7
 14519  1FBF  2FC7               	goto	l5120
 14520  1FC0  09A8               	comf	___awtoft@c,f
 14521  1FC1  09A9               	comf	___awtoft@c+1,f
 14522  1FC2  0AA8               	incf	___awtoft@c,f
 14523  1FC3  1903               	skipnz
 14524  1FC4  0AA9               	incf	___awtoft@c+1,f
 14525  1FC5  01AD               	clrf	___awtoft@sign
 14526  1FC6  0AAD               	incf	___awtoft@sign,f
 14527  1FC7                     l5120:	
 14528  1FC7  0828               	movf	___awtoft@c,w
 14529  1FC8  00A0               	movwf	___ftpack@arg
 14530  1FC9  0829               	movf	___awtoft@c+1,w
 14531  1FCA  00A1               	movwf	___ftpack@arg+1
 14532  1FCB  01A2               	clrf	___ftpack@arg+2
 14533  1FCC  308E               	movlw	142
 14534  1FCD  00AB               	movwf	??___awtoft
 14535  1FCE  082B               	movf	??___awtoft,w
 14536  1FCF  00A3               	movwf	___ftpack@exp
 14537  1FD0  082D               	movf	___awtoft@sign,w
 14538  1FD1  00AC               	movwf	??___awtoft+1
 14539  1FD2  082C               	movf	??___awtoft+1,w
 14540  1FD3  00A4               	movwf	___ftpack@sign
 14541  1FD4  3188  202D         	fcall	___ftpack
 14542  1FD6  0020               	movlb	0	; select bank0
 14543  1FD7  0820               	movf	?___ftpack,w
 14544  1FD8  00A8               	movwf	?___awtoft
 14545  1FD9  0821               	movf	?___ftpack+1,w
 14546  1FDA  00A9               	movwf	?___awtoft+1
 14547  1FDB  0822               	movf	?___ftpack+2,w
 14548  1FDC  00AA               	movwf	?___awtoft+2
 14549  1FDD  0008               	return
 14550  1FDE                     __end_of___awtoft:	
 14551                           
 14552                           	psect	text89
 14553  082D                     __ptext89:	
 14554 ;; *************** function ___ftpack *****************
 14555 ;; Defined at:
 14556 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  arg             3    0[BANK0 ] unsigned um
 14559 ;;  exp             1    3[BANK0 ] unsigned char 
 14560 ;;  sign            1    4[BANK0 ] unsigned char 
 14561 ;; Auto vars:     Size  Location     Type
 14562 ;;		None
 14563 ;; Return value:  Size  Location     Type
 14564 ;;                  3    0[BANK0 ] float 
 14565 ;; Registers used:
 14566 ;;		wreg, status,2, status,0
 14567 ;; Tracked objects:
 14568 ;;		On entry : 0/0
 14569 ;;		On exit  : 0/0
 14570 ;;		Unchanged: 0/0
 14571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14572 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;Total ram usage:        8 bytes
 14577 ;; Hardware stack levels used:    1
 14578 ;; Hardware stack levels required when called:    5
 14579 ;; This function calls:
 14580 ;;		Nothing
 14581 ;; This function is called by:
 14582 ;;		___awtoft
 14583 ;;		___ftadd
 14584 ;;		___ftdiv
 14585 ;;		___ftmul
 14586 ;; This function uses a non-reentrant model
 14587 ;;
 14588                           
 14589                           
 14590                           ;psect for function ___ftpack
 14591  082D                     ___ftpack:	
 14592                           
 14593                           ;incstack = 0
 14594                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14595  082D  0020               	movlb	0	; select bank0
 14596  082E  0823               	movf	___ftpack@exp,w
 14597  082F  1903               	btfsc	3,2
 14598  0830  2836               	goto	l5086
 14599  0831  0822               	movf	___ftpack@arg+2,w
 14600  0832  0421               	iorwf	___ftpack@arg+1,w
 14601  0833  0420               	iorwf	___ftpack@arg,w
 14602  0834  1D03               	skipz
 14603  0835  2847               	goto	l5092
 14604  0836                     l5086:	
 14605  0836  3000               	movlw	0
 14606  0837  00A0               	movwf	?___ftpack
 14607  0838  3000               	movlw	0
 14608  0839  00A1               	movwf	?___ftpack+1
 14609  083A  3000               	movlw	0
 14610  083B  00A2               	movwf	?___ftpack+2
 14611  083C  0008               	return
 14612  083D                     l5090:	
 14613  083D  3001               	movlw	1
 14614  083E  00A5               	movwf	??___ftpack
 14615  083F  0825               	movf	??___ftpack,w
 14616  0840  07A3               	addwf	___ftpack@exp,f
 14617  0841  3001               	movlw	1
 14618  0842                     u3245:	
 14619  0842  36A2               	lsrf	___ftpack@arg+2,f
 14620  0843  0CA1               	rrf	___ftpack@arg+1,f
 14621  0844  0CA0               	rrf	___ftpack@arg,f
 14622  0845  0B89               	decfsz	9,f
 14623  0846  2842               	goto	u3245
 14624  0847                     l5092:	
 14625  0847  30FE               	movlw	254
 14626  0848  0522               	andwf	___ftpack@arg+2,w
 14627  0849  1903               	btfsc	3,2
 14628  084A  2860               	goto	l2798
 14629  084B  283D               	goto	l5090
 14630  084C                     l5094:	
 14631  084C  3001               	movlw	1
 14632  084D  00A5               	movwf	??___ftpack
 14633  084E  0825               	movf	??___ftpack,w
 14634  084F  07A3               	addwf	___ftpack@exp,f
 14635  0850  3001               	movlw	1
 14636  0851  07A0               	addwf	___ftpack@arg,f
 14637  0852  3000               	movlw	0
 14638  0853  1803               	skipnc
 14639  0854  3001               	movlw	1
 14640  0855  07A1               	addwf	___ftpack@arg+1,f
 14641  0856  3000               	movlw	0
 14642  0857  1803               	skipnc
 14643  0858  3001               	movlw	1
 14644  0859  07A2               	addwf	___ftpack@arg+2,f
 14645  085A  3001               	movlw	1
 14646  085B                     u3265:	
 14647  085B  36A2               	lsrf	___ftpack@arg+2,f
 14648  085C  0CA1               	rrf	___ftpack@arg+1,f
 14649  085D  0CA0               	rrf	___ftpack@arg,f
 14650  085E  0B89               	decfsz	9,f
 14651  085F  285B               	goto	u3265
 14652  0860                     l2798:	
 14653  0860  30FF               	movlw	255
 14654  0861  0522               	andwf	___ftpack@arg+2,w
 14655  0862  1903               	btfsc	3,2
 14656  0863  286D               	goto	l5102
 14657  0864  284C               	goto	l5094
 14658  0865                     l5100:	
 14659  0865  3001               	movlw	1
 14660  0866  02A3               	subwf	___ftpack@exp,f
 14661  0867  3001               	movlw	1
 14662  0868                     u3285:	
 14663  0868  35A0               	lslf	___ftpack@arg,f
 14664  0869  0DA1               	rlf	___ftpack@arg+1,f
 14665  086A  0DA2               	rlf	___ftpack@arg+2,f
 14666  086B  0B89               	decfsz	9,f
 14667  086C  2868               	goto	u3285
 14668  086D                     l5102:	
 14669  086D  1FA1               	btfss	___ftpack@arg+1,7
 14670  086E  2865               	goto	l5100
 14671  086F  1823               	btfsc	___ftpack@exp,0
 14672  0870  2877               	goto	l2804
 14673  0871  30FF               	movlw	255
 14674  0872  05A0               	andwf	___ftpack@arg,f
 14675  0873  307F               	movlw	127
 14676  0874  05A1               	andwf	___ftpack@arg+1,f
 14677  0875  30FF               	movlw	255
 14678  0876  05A2               	andwf	___ftpack@arg+2,f
 14679  0877                     l2804:	
 14680  0877  1003               	clrc
 14681  0878  0CA3               	rrf	___ftpack@exp,f
 14682  0879  0823               	movf	___ftpack@exp,w
 14683  087A  00A5               	movwf	??___ftpack
 14684  087B  01A6               	clrf	??___ftpack+1
 14685  087C  01A7               	clrf	??___ftpack+2
 14686  087D  3010               	movlw	16
 14687  087E                     u3315:	
 14688  087E  35A5               	lslf	??___ftpack,f
 14689  087F  0DA6               	rlf	??___ftpack+1,f
 14690  0880  0DA7               	rlf	??___ftpack+2,f
 14691  0881  0B89               	decfsz	9,f
 14692  0882  287E               	goto	u3315
 14693  0883  0825               	movf	??___ftpack,w
 14694  0884  04A0               	iorwf	___ftpack@arg,f
 14695  0885  0826               	movf	??___ftpack+1,w
 14696  0886  04A1               	iorwf	___ftpack@arg+1,f
 14697  0887  0827               	movf	??___ftpack+2,w
 14698  0888  04A2               	iorwf	___ftpack@arg+2,f
 14699  0889  0824               	movf	___ftpack@sign,w
 14700  088A  1903               	btfsc	3,2
 14701  088B  0008               	return
 14702  088C  17A2               	bsf	___ftpack@arg+2,7
 14703  088D  0008               	return
 14704  088E                     __end_of___ftpack:	
 14705                           
 14706                           	psect	text90
 14707  1D3C                     __ptext90:	
 14708 ;; *************** function _setRFSW_Status *****************
 14709 ;; Defined at:
 14710 ;;		line 405 in file "../src/RF_Control_B1.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;  sw              1    wreg     unsigned char 
 14713 ;;  command         1    2[BANK0 ] unsigned char 
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;  sw              1    3[BANK0 ] unsigned char 
 14716 ;; Return value:  Size  Location     Type
 14717 ;;		None               void
 14718 ;; Registers used:
 14719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14720 ;; Tracked objects:
 14721 ;;		On entry : 0/0
 14722 ;;		On exit  : 0/0
 14723 ;;		Unchanged: 0/0
 14724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14725 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;Total ram usage:        2 bytes
 14730 ;; Hardware stack levels used:    1
 14731 ;; Hardware stack levels required when called:    6
 14732 ;; This function calls:
 14733 ;;		_RfSWPointSelect
 14734 ;; This function is called by:
 14735 ;;		_DlyOff_Main
 14736 ;;		_setDimmerLights_ERROR
 14737 ;;		_setControl_Lights_Table
 14738 ;;		_Sw_DimmerOnFunc
 14739 ;;		_Sw_DimmerAdjFunc
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743                           
 14744                           ;psect for function _setRFSW_Status
 14745  1D3C                     _setRFSW_Status:	
 14746                           
 14747                           ;incstack = 0
 14748                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14749                           ;setRFSW_Status@sw stored from wreg
 14750  1D3C  0020               	movlb	0	; select bank0
 14751  1D3D  00A3               	movwf	setRFSW_Status@sw
 14752                           
 14753                           ;RF_Control_B1.c: 406: RfSWPointSelect(sw);
 14754  1D3E  0823               	movf	setRFSW_Status@sw,w
 14755  1D3F  319C  24BC         	fcall	_RfSWPointSelect
 14756                           
 14757                           ;RF_Control_B1.c: 407: RFSW->Status = command;
 14758  1D41  0021               	movlb	1	; select bank1
 14759  1D42  083F               	movf	_RFSW^(0+128),w
 14760  1D43  0086               	movwf	6
 14761  1D44  0187               	clrf	7
 14762  1D45  0020               	movlb	0	; select bank0
 14763  1D46  0822               	movf	setRFSW_Status@command,w
 14764  1D47  1001               	bcf	1,0
 14765  1D48  1D03               	skipz
 14766  1D49  1401               	bsf	1,0
 14767  1D4A  0008               	return
 14768  1D4B                     __end_of_setRFSW_Status:	
 14769                           
 14770                           	psect	text91
 14771  1CBC                     __ptext91:	
 14772 ;; *************** function _RfSWPointSelect *****************
 14773 ;; Defined at:
 14774 ;;		line 340 in file "../src/RF_Control_B1.c"
 14775 ;; Parameters:    Size  Location     Type
 14776 ;;  sw              1    wreg     unsigned char 
 14777 ;; Auto vars:     Size  Location     Type
 14778 ;;  sw              1    1[BANK0 ] unsigned char 
 14779 ;; Return value:  Size  Location     Type
 14780 ;;		None               void
 14781 ;; Registers used:
 14782 ;;		wreg
 14783 ;; Tracked objects:
 14784 ;;		On entry : 0/0
 14785 ;;		On exit  : 0/0
 14786 ;;		Unchanged: 0/0
 14787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;Total ram usage:        2 bytes
 14793 ;; Hardware stack levels used:    1
 14794 ;; Hardware stack levels required when called:    5
 14795 ;; This function calls:
 14796 ;;		Nothing
 14797 ;; This function is called by:
 14798 ;;		_setRFSW_Control
 14799 ;;		_setRFSW_AdjControl
 14800 ;;		_setRFSW_Status
 14801 ;; This function uses a non-reentrant model
 14802 ;;
 14803                           
 14804                           
 14805                           ;psect for function _RfSWPointSelect
 14806  1CBC                     _RfSWPointSelect:	
 14807                           
 14808                           ;incstack = 0
 14809                           ; Regs used in _RfSWPointSelect: [wreg]
 14810                           ;RfSWPointSelect@sw stored from wreg
 14811  1CBC  0020               	movlb	0	; select bank0
 14812  1CBD  00A1               	movwf	RfSWPointSelect@sw
 14813                           
 14814                           ;RF_Control_B1.c: 342: if (sw == 1) {
 14815  1CBE  0821               	movf	RfSWPointSelect@sw,w
 14816  1CBF  3A01               	xorlw	1
 14817  1CC0  1D03               	skipz
 14818  1CC1  0008               	return
 14819                           
 14820                           ;RF_Control_B1.c: 343: RFSW = &RFSW1;
 14821  1CC2  30EC               	movlw	_RFSW1& (0+255)
 14822  1CC3  00A0               	movwf	??_RfSWPointSelect
 14823  1CC4  0820               	movf	??_RfSWPointSelect,w
 14824  1CC5  0021               	movlb	1	; select bank1
 14825  1CC6  00BF               	movwf	_RFSW^(0+128)
 14826  1CC7  0008               	return
 14827  1CC8                     __end_of_RfSWPointSelect:	
 14828                           
 14829                           	psect	text92
 14830  1D89                     __ptext92:	
 14831 ;; *************** function _setDimmerLights_Trigger *****************
 14832 ;; Defined at:
 14833 ;;		line 705 in file "../src/Dimmer_B1.c"
 14834 ;; Parameters:    Size  Location     Type
 14835 ;;  lights          1    wreg     unsigned char 
 14836 ;;  command         1    2[BANK0 ] unsigned char 
 14837 ;; Auto vars:     Size  Location     Type
 14838 ;;  lights          1    3[BANK0 ] unsigned char 
 14839 ;; Return value:  Size  Location     Type
 14840 ;;		None               void
 14841 ;; Registers used:
 14842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14843 ;; Tracked objects:
 14844 ;;		On entry : 0/0
 14845 ;;		On exit  : 0/0
 14846 ;;		Unchanged: 0/0
 14847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14852 ;;Total ram usage:        2 bytes
 14853 ;; Hardware stack levels used:    1
 14854 ;; Hardware stack levels required when called:    6
 14855 ;; This function calls:
 14856 ;;		_DimmerLightsPointSelect
 14857 ;; This function is called by:
 14858 ;;		_DlyOff_Main
 14859 ;;		_setRFSW_Control
 14860 ;;		_Sw_DimmerOnFunc
 14861 ;;		_Sw_DimmerOffFunc
 14862 ;; This function uses a non-reentrant model
 14863 ;;
 14864                           
 14865                           
 14866                           ;psect for function _setDimmerLights_Trigger
 14867  1D89                     _setDimmerLights_Trigger:	
 14868                           
 14869                           ;incstack = 0
 14870                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14871                           ;setDimmerLights_Trigger@lights stored from wreg
 14872  1D89  0020               	movlb	0	; select bank0
 14873  1D8A  00A3               	movwf	setDimmerLights_Trigger@lights
 14874                           
 14875                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14876  1D8B  0823               	movf	setDimmerLights_Trigger@lights,w
 14877  1D8C  319C  2482         	fcall	_DimmerLightsPointSelect
 14878                           
 14879                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 14880  1D8E  0878               	movf	_DimmerLights,w
 14881  1D8F  3E08               	addlw	8
 14882  1D90  0086               	movwf	6
 14883  1D91  3001               	movlw	1	; select bank2/3
 14884  1D92  0087               	movwf	7
 14885  1D93  0020               	movlb	0	; select bank0
 14886  1D94  0822               	movf	setDimmerLights_Trigger@command,w
 14887  1D95  1101               	bcf	1,2
 14888  1D96  1D03               	skipz
 14889  1D97  1501               	bsf	1,2
 14890  1D98  0008               	return
 14891  1D99                     __end_of_setDimmerLights_Trigger:	
 14892                           
 14893                           	psect	text93
 14894  1D79                     __ptext93:	
 14895 ;; *************** function _setDimmerLights_Switch *****************
 14896 ;; Defined at:
 14897 ;;		line 693 in file "../src/Dimmer_B1.c"
 14898 ;; Parameters:    Size  Location     Type
 14899 ;;  lights          1    wreg     unsigned char 
 14900 ;;  command         1    2[BANK0 ] unsigned char 
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;  lights          1    3[BANK0 ] unsigned char 
 14903 ;; Return value:  Size  Location     Type
 14904 ;;		None               void
 14905 ;; Registers used:
 14906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14907 ;; Tracked objects:
 14908 ;;		On entry : 0/0
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14912 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;Total ram usage:        2 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    6
 14919 ;; This function calls:
 14920 ;;		_DimmerLightsPointSelect
 14921 ;; This function is called by:
 14922 ;;		_DlyOff_Main
 14923 ;;		_setRFSW_Control
 14924 ;;		_Sw_DimmerOnFunc
 14925 ;;		_Sw_DimmerOffFunc
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           
 14930                           ;psect for function _setDimmerLights_Switch
 14931  1D79                     _setDimmerLights_Switch:	
 14932                           
 14933                           ;incstack = 0
 14934                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14935                           ;setDimmerLights_Switch@lights stored from wreg
 14936  1D79  0020               	movlb	0	; select bank0
 14937  1D7A  00A3               	movwf	setDimmerLights_Switch@lights
 14938                           
 14939                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 14940  1D7B  0823               	movf	setDimmerLights_Switch@lights,w
 14941  1D7C  319C  2482         	fcall	_DimmerLightsPointSelect
 14942                           
 14943                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 14944  1D7E  0878               	movf	_DimmerLights,w
 14945  1D7F  3E08               	addlw	8
 14946  1D80  0086               	movwf	6
 14947  1D81  3001               	movlw	1	; select bank2/3
 14948  1D82  0087               	movwf	7
 14949  1D83  0020               	movlb	0	; select bank0
 14950  1D84  0822               	movf	setDimmerLights_Switch@command,w
 14951  1D85  1081               	bcf	1,1
 14952  1D86  1D03               	skipz
 14953  1D87  1481               	bsf	1,1
 14954  1D88  0008               	return
 14955  1D89                     __end_of_setDimmerLights_Switch:	
 14956                           
 14957                           	psect	text94
 14958  1C82                     __ptext94:	
 14959 ;; *************** function _DimmerLightsPointSelect *****************
 14960 ;; Defined at:
 14961 ;;		line 315 in file "../src/Dimmer_B1.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;  lights          1    wreg     unsigned char 
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;  lights          1    1[BANK0 ] unsigned char 
 14966 ;; Return value:  Size  Location     Type
 14967 ;;		None               void
 14968 ;; Registers used:
 14969 ;;		wreg
 14970 ;; Tracked objects:
 14971 ;;		On entry : 0/0
 14972 ;;		On exit  : 0/0
 14973 ;;		Unchanged: 0/0
 14974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;Total ram usage:        2 bytes
 14980 ;; Hardware stack levels used:    1
 14981 ;; Hardware stack levels required when called:    5
 14982 ;; This function calls:
 14983 ;;		Nothing
 14984 ;; This function is called by:
 14985 ;;		_setDimmerLights_Initialization
 14986 ;;		_setDimmerLights_Main
 14987 ;;		_setDimmerLights_ERROR
 14988 ;;		_setDimmerLights_TriggerERROR
 14989 ;;		_setDimmerLights
 14990 ;;		_setDimmerLights_Adj
 14991 ;;		_setDimmerLights_AdjRF
 14992 ;;		_setDimmerLights_Switch
 14993 ;;		_setDimmerLights_AdjGo
 14994 ;;		_setDimmerLights_Trigger
 14995 ;;		_setDimmerLights_TriggerAdj
 14996 ;;		_setDimmerLights_GO
 14997 ;;		_setDimmerLights_MaxmumValue
 14998 ;;		_setDimmerLights_Clear
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           
 15003                           ;psect for function _DimmerLightsPointSelect
 15004  1C82                     _DimmerLightsPointSelect:	
 15005                           
 15006                           ;incstack = 0
 15007                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15008                           ;DimmerLightsPointSelect@lights stored from wreg
 15009  1C82  0020               	movlb	0	; select bank0
 15010  1C83  00A1               	movwf	DimmerLightsPointSelect@lights
 15011                           
 15012                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15013  1C84  0821               	movf	DimmerLightsPointSelect@lights,w
 15014  1C85  3A01               	xorlw	1
 15015  1C86  1D03               	skipz
 15016  1C87  0008               	return
 15017                           
 15018                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15019  1C88  3034               	movlw	_DimmerLights1& (0+255)
 15020  1C89  00A0               	movwf	??_DimmerLightsPointSelect
 15021  1C8A  0820               	movf	??_DimmerLightsPointSelect,w
 15022  1C8B  00F8               	movwf	_DimmerLights
 15023  1C8C  0008               	return
 15024  1C8D                     __end_of_DimmerLightsPointSelect:	
 15025                           
 15026                           	psect	text95
 15027  0C3C                     __ptext95:	
 15028 ;; *************** function _setBuz *****************
 15029 ;; Defined at:
 15030 ;;		line 30 in file "../src/Buzzer_B1.c"
 15031 ;; Parameters:    Size  Location     Type
 15032 ;;  count           1    wreg     unsigned char 
 15033 ;;  time            2    9[BANK0 ] int 
 15034 ;; Auto vars:     Size  Location     Type
 15035 ;;  count           1   12[BANK0 ] unsigned char 
 15036 ;; Return value:  Size  Location     Type
 15037 ;;		None               void
 15038 ;; Registers used:
 15039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15040 ;; Tracked objects:
 15041 ;;		On entry : 0/0
 15042 ;;		On exit  : 0/0
 15043 ;;		Unchanged: 0/0
 15044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15045 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;Total ram usage:        4 bytes
 15050 ;; Hardware stack levels used:    1
 15051 ;; Hardware stack levels required when called:    6
 15052 ;; This function calls:
 15053 ;;		___awdiv
 15054 ;; This function is called by:
 15055 ;;		_CC2500_RxData
 15056 ;;		_DlyOff_Main
 15057 ;;		_setDimmerLights_Main
 15058 ;;		_DimmerLights_Exceptions
 15059 ;;		_setLog_Code
 15060 ;;		_setControl_Lights_Table
 15061 ;;		_setRFSW_Control
 15062 ;;		_setSw_Main
 15063 ;;		_Sw_DimmerOnFunc
 15064 ;;		_my_Main
 15065 ;; This function uses a non-reentrant model
 15066 ;;
 15067                           
 15068                           
 15069                           ;psect for function _setBuz
 15070  0C3C                     _setBuz:	
 15071                           
 15072                           ;incstack = 0
 15073                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15074                           ;setBuz@count stored from wreg
 15075  0C3C  0020               	movlb	0	; select bank0
 15076  0C3D  00AC               	movwf	setBuz@count
 15077                           
 15078                           ;Buzzer_B1.c: 31: Buz = &Buz1;
 15079  0C3E  30C7               	movlw	_Buz1& (0+255)
 15080  0C3F  00AB               	movwf	??_setBuz
 15081  0C40  082B               	movf	??_setBuz,w
 15082  0C41  0021               	movlb	1	; select bank1
 15083  0C42  00B7               	movwf	_Buz^(0+128)
 15084                           
 15085                           ;Buzzer_B1.c: 32: time /= 10;
 15086  0C43  300A               	movlw	10
 15087  0C44  0020               	movlb	0	; select bank0
 15088  0C45  00A0               	movwf	___awdiv@divisor
 15089  0C46  3000               	movlw	0
 15090  0C47  00A1               	movwf	___awdiv@divisor+1
 15091  0C48  082A               	movf	setBuz@time+1,w
 15092  0C49  01A3               	clrf	___awdiv@dividend+1
 15093  0C4A  07A3               	addwf	___awdiv@dividend+1,f
 15094  0C4B  0829               	movf	setBuz@time,w
 15095  0C4C  01A2               	clrf	___awdiv@dividend
 15096  0C4D  07A2               	addwf	___awdiv@dividend,f
 15097  0C4E  3195  252B  318C   	fcall	___awdiv
 15098  0C51  0020               	movlb	0	; select bank0
 15099  0C52  0821               	movf	?___awdiv+1,w
 15100  0C53  01AA               	clrf	setBuz@time+1
 15101  0C54  07AA               	addwf	setBuz@time+1,f
 15102  0C55  0820               	movf	?___awdiv,w
 15103  0C56  01A9               	clrf	setBuz@time
 15104  0C57  07A9               	addwf	setBuz@time,f
 15105                           
 15106                           ;Buzzer_B1.c: 33: if (Buz->Enable == 1) {
 15107  0C58  0021               	movlb	1	; select bank1
 15108  0C59  0837               	movf	_Buz^(0+128),w
 15109  0C5A  0086               	movwf	6
 15110  0C5B  0187               	clrf	7
 15111  0C5C  1C01               	btfss	1,0
 15112  0C5D  0008               	return
 15113                           
 15114                           ;Buzzer_B1.c: 34: if (Buz->GO == 0) {
 15115  0C5E  0837               	movf	_Buz^(0+128),w
 15116  0C5F  0086               	movwf	6
 15117  0C60  0187               	clrf	7
 15118  0C61  1881               	btfsc	1,1
 15119  0C62  2C84               	goto	l5470
 15120                           
 15121                           ;Buzzer_B1.c: 35: Buz->GO = 1;
 15122  0C63  0837               	movf	_Buz^(0+128),w
 15123  0C64  0086               	movwf	6
 15124  0C65  0187               	clrf	7
 15125  0C66  1481               	bsf	1,1
 15126                           
 15127                           ;Buzzer_B1.c: 36: Buz->Counter = 0;
 15128  0C67  0A37               	incf	_Buz^(0+128),w
 15129  0C68  0086               	movwf	6
 15130  0C69  0187               	clrf	7
 15131  0C6A  3000               	movlw	0
 15132  0C6B  3FC0               	movwi [0]fsr1
 15133  0C6C  3FC1               	movwi [1]fsr1
 15134                           
 15135                           ;Buzzer_B1.c: 37: Buz->Count = count;
 15136  0C6D  0020               	movlb	0	; select bank0
 15137  0C6E  082C               	movf	setBuz@count,w
 15138  0C6F  00AB               	movwf	??_setBuz
 15139  0C70  0021               	movlb	1	; select bank1
 15140  0C71  0837               	movf	_Buz^(0+128),w
 15141  0C72  3E03               	addlw	3
 15142  0C73  0086               	movwf	6
 15143  0C74  0187               	clrf	7
 15144  0C75  0020               	movlb	0	; select bank0
 15145  0C76  082B               	movf	??_setBuz,w
 15146  0C77  0081               	movwf	1
 15147                           
 15148                           ;Buzzer_B1.c: 38: Buz->TimeValue = time;
 15149  0C78  0021               	movlb	1	; select bank1
 15150  0C79  0837               	movf	_Buz^(0+128),w
 15151  0C7A  3E06               	addlw	6
 15152  0C7B  0086               	movwf	6
 15153  0C7C  0187               	clrf	7
 15154  0C7D  0020               	movlb	0	; select bank0
 15155  0C7E  0829               	movf	setBuz@time,w
 15156  0C7F  3FC0               	movwi [0]fsr1
 15157  0C80  082A               	movf	setBuz@time+1,w
 15158  0C81  3FC1               	movwi [1]fsr1
 15159                           
 15160                           ;Buzzer_B1.c: 39: RB3 = 1;
 15161  0C82  158D               	bsf	13,3	;volatile
 15162                           
 15163                           ;Buzzer_B1.c: 40: } else {
 15164  0C83  0008               	return
 15165  0C84                     l5470:	
 15166                           
 15167                           ;Buzzer_B1.c: 41: if (Buz->BufferStatus1 == 0) {
 15168  0C84  0021               	movlb	1	; select bank1
 15169  0C85  0837               	movf	_Buz^(0+128),w
 15170  0C86  0086               	movwf	6
 15171  0C87  0187               	clrf	7
 15172  0C88  1981               	btfsc	1,3
 15173  0C89  2CA4               	goto	l5474
 15174                           
 15175                           ;Buzzer_B1.c: 42: Buz->BufferStatus1 = 1;
 15176  0C8A  0837               	movf	_Buz^(0+128),w
 15177  0C8B  0086               	movwf	6
 15178  0C8C  0187               	clrf	7
 15179  0C8D  1581               	bsf	1,3
 15180                           
 15181                           ;Buzzer_B1.c: 43: Buz->CountBuffer1 = count;
 15182  0C8E  0020               	movlb	0	; select bank0
 15183  0C8F  082C               	movf	setBuz@count,w
 15184  0C90  00AB               	movwf	??_setBuz
 15185  0C91  0021               	movlb	1	; select bank1
 15186  0C92  0837               	movf	_Buz^(0+128),w
 15187  0C93  3E04               	addlw	4
 15188  0C94  0086               	movwf	6
 15189  0C95  0187               	clrf	7
 15190  0C96  0020               	movlb	0	; select bank0
 15191  0C97  082B               	movf	??_setBuz,w
 15192  0C98  0081               	movwf	1
 15193                           
 15194                           ;Buzzer_B1.c: 44: Buz->TimeValueBuffer1 = time;
 15195  0C99  0021               	movlb	1	; select bank1
 15196  0C9A  0837               	movf	_Buz^(0+128),w
 15197  0C9B  3E08               	addlw	8
 15198  0C9C  0086               	movwf	6
 15199  0C9D  0187               	clrf	7
 15200  0C9E  0020               	movlb	0	; select bank0
 15201  0C9F  0829               	movf	setBuz@time,w
 15202  0CA0  3FC0               	movwi [0]fsr1
 15203  0CA1  082A               	movf	setBuz@time+1,w
 15204  0CA2  3FC1               	movwi [1]fsr1
 15205                           
 15206                           ;Buzzer_B1.c: 45: } else if (Buz->BufferStatus2 == 0) {
 15207  0CA3  0008               	return
 15208  0CA4                     l5474:	
 15209  0CA4  0021               	movlb	1	; select bank1
 15210  0CA5  0837               	movf	_Buz^(0+128),w
 15211  0CA6  0086               	movwf	6
 15212  0CA7  0187               	clrf	7
 15213  0CA8  1A01               	btfsc	1,4
 15214  0CA9  0008               	return
 15215                           
 15216                           ;Buzzer_B1.c: 46: Buz->BufferStatus2 = 1;
 15217  0CAA  0837               	movf	_Buz^(0+128),w
 15218  0CAB  0086               	movwf	6
 15219  0CAC  0187               	clrf	7
 15220  0CAD  1601               	bsf	1,4
 15221                           
 15222                           ;Buzzer_B1.c: 47: Buz->CountBuffer2 = count;
 15223  0CAE  0020               	movlb	0	; select bank0
 15224  0CAF  082C               	movf	setBuz@count,w
 15225  0CB0  00AB               	movwf	??_setBuz
 15226  0CB1  0021               	movlb	1	; select bank1
 15227  0CB2  0837               	movf	_Buz^(0+128),w
 15228  0CB3  3E05               	addlw	5
 15229  0CB4  0086               	movwf	6
 15230  0CB5  0187               	clrf	7
 15231  0CB6  0020               	movlb	0	; select bank0
 15232  0CB7  082B               	movf	??_setBuz,w
 15233  0CB8  0081               	movwf	1
 15234                           
 15235                           ;Buzzer_B1.c: 48: Buz->TimeValueBuffer2 = time;
 15236  0CB9  0021               	movlb	1	; select bank1
 15237  0CBA  0837               	movf	_Buz^(0+128),w
 15238  0CBB  3E0A               	addlw	10
 15239  0CBC  0086               	movwf	6
 15240  0CBD  0187               	clrf	7
 15241  0CBE  0020               	movlb	0	; select bank0
 15242  0CBF  0829               	movf	setBuz@time,w
 15243  0CC0  3FC0               	movwi [0]fsr1
 15244  0CC1  082A               	movf	setBuz@time+1,w
 15245  0CC2  3FC1               	movwi [1]fsr1
 15246  0CC3  0008               	return
 15247  0CC4                     __end_of_setBuz:	
 15248                           
 15249                           	psect	text96
 15250  152B                     __ptext96:	
 15251 ;; *************** function ___awdiv *****************
 15252 ;; Defined at:
 15253 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  divisor         2    0[BANK0 ] int 
 15256 ;;  dividend        2    2[BANK0 ] int 
 15257 ;; Auto vars:     Size  Location     Type
 15258 ;;  quotient        2    7[BANK0 ] int 
 15259 ;;  sign            1    6[BANK0 ] unsigned char 
 15260 ;;  counter         1    5[BANK0 ] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  2    0[BANK0 ] int 
 15263 ;; Registers used:
 15264 ;;		wreg, status,2, status,0
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;Total ram usage:        9 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    5
 15277 ;; This function calls:
 15278 ;;		Nothing
 15279 ;; This function is called by:
 15280 ;;		_setBuz
 15281 ;; This function uses a non-reentrant model
 15282 ;;
 15283                           
 15284                           
 15285                           ;psect for function ___awdiv
 15286  152B                     ___awdiv:	
 15287                           
 15288                           ;incstack = 0
 15289                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15290  152B  0020               	movlb	0	; select bank0
 15291  152C  01A6               	clrf	___awdiv@sign
 15292  152D  1FA1               	btfss	___awdiv@divisor+1,7
 15293  152E  2D36               	goto	l5422
 15294  152F  09A0               	comf	___awdiv@divisor,f
 15295  1530  09A1               	comf	___awdiv@divisor+1,f
 15296  1531  0AA0               	incf	___awdiv@divisor,f
 15297  1532  1903               	skipnz
 15298  1533  0AA1               	incf	___awdiv@divisor+1,f
 15299  1534  01A6               	clrf	___awdiv@sign
 15300  1535  0AA6               	incf	___awdiv@sign,f
 15301  1536                     l5422:	
 15302  1536  1FA3               	btfss	___awdiv@dividend+1,7
 15303  1537  2D41               	goto	l5428
 15304  1538  09A2               	comf	___awdiv@dividend,f
 15305  1539  09A3               	comf	___awdiv@dividend+1,f
 15306  153A  0AA2               	incf	___awdiv@dividend,f
 15307  153B  1903               	skipnz
 15308  153C  0AA3               	incf	___awdiv@dividend+1,f
 15309  153D  3001               	movlw	1
 15310  153E  00A4               	movwf	??___awdiv
 15311  153F  0824               	movf	??___awdiv,w
 15312  1540  06A6               	xorwf	___awdiv@sign,f
 15313  1541                     l5428:	
 15314  1541  01A7               	clrf	___awdiv@quotient
 15315  1542  01A8               	clrf	___awdiv@quotient+1
 15316  1543  0821               	movf	___awdiv@divisor+1,w
 15317  1544  0420               	iorwf	___awdiv@divisor,w
 15318  1545  1903               	skipnz
 15319  1546  2D70               	goto	l5450
 15320  1547  01A5               	clrf	___awdiv@counter
 15321  1548  0AA5               	incf	___awdiv@counter,f
 15322  1549                     l5438:	
 15323  1549  1BA1               	btfsc	___awdiv@divisor+1,7
 15324  154A  2D55               	goto	l5440
 15325  154B  3001               	movlw	1
 15326  154C                     u3995:	
 15327  154C  35A0               	lslf	___awdiv@divisor,f
 15328  154D  0DA1               	rlf	___awdiv@divisor+1,f
 15329  154E  0B89               	decfsz	9,f
 15330  154F  2D4C               	goto	u3995
 15331  1550  3001               	movlw	1
 15332  1551  00A4               	movwf	??___awdiv
 15333  1552  0824               	movf	??___awdiv,w
 15334  1553  07A5               	addwf	___awdiv@counter,f
 15335  1554  2D49               	goto	l5438
 15336  1555                     l5440:	
 15337  1555  3001               	movlw	1
 15338  1556                     u4015:	
 15339  1556  35A7               	lslf	___awdiv@quotient,f
 15340  1557  0DA8               	rlf	___awdiv@quotient+1,f
 15341  1558  0B89               	decfsz	9,f
 15342  1559  2D56               	goto	u4015
 15343  155A  0821               	movf	___awdiv@divisor+1,w
 15344  155B  0223               	subwf	___awdiv@dividend+1,w
 15345  155C  1D03               	skipz
 15346  155D  2D60               	goto	u4025
 15347  155E  0820               	movf	___awdiv@divisor,w
 15348  155F  0222               	subwf	___awdiv@dividend,w
 15349  1560                     u4025:	
 15350  1560  1C03               	skipc
 15351  1561  2D67               	goto	l5446
 15352  1562  0820               	movf	___awdiv@divisor,w
 15353  1563  02A2               	subwf	___awdiv@dividend,f
 15354  1564  0821               	movf	___awdiv@divisor+1,w
 15355  1565  3BA3               	subwfb	___awdiv@dividend+1,f
 15356  1566  1427               	bsf	___awdiv@quotient,0
 15357  1567                     l5446:	
 15358  1567  3001               	movlw	1
 15359  1568                     u4035:	
 15360  1568  36A1               	lsrf	___awdiv@divisor+1,f
 15361  1569  0CA0               	rrf	___awdiv@divisor,f
 15362  156A  0B89               	decfsz	9,f
 15363  156B  2D68               	goto	u4035
 15364  156C  3001               	movlw	1
 15365  156D  02A5               	subwf	___awdiv@counter,f
 15366  156E  1D03               	btfss	3,2
 15367  156F  2D55               	goto	l5440
 15368  1570                     l5450:	
 15369  1570  0826               	movf	___awdiv@sign,w
 15370  1571  1903               	btfsc	3,2
 15371  1572  2D78               	goto	l5454
 15372  1573  09A7               	comf	___awdiv@quotient,f
 15373  1574  09A8               	comf	___awdiv@quotient+1,f
 15374  1575  0AA7               	incf	___awdiv@quotient,f
 15375  1576  1903               	skipnz
 15376  1577  0AA8               	incf	___awdiv@quotient+1,f
 15377  1578                     l5454:	
 15378  1578  0828               	movf	___awdiv@quotient+1,w
 15379  1579  01A1               	clrf	?___awdiv+1
 15380  157A  07A1               	addwf	?___awdiv+1,f
 15381  157B  0827               	movf	___awdiv@quotient,w
 15382  157C  01A0               	clrf	?___awdiv
 15383  157D  07A0               	addwf	?___awdiv,f
 15384  157E  0008               	return
 15385  157F                     __end_of___awdiv:	
 15386                           
 15387                           	psect	text97
 15388  1BEF                     __ptext97:	
 15389 ;; *************** function _DelayOff_Initialization *****************
 15390 ;; Defined at:
 15391 ;;		line 26 in file "../src/DelayOff_B1.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;		None
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;		None
 15396 ;; Return value:  Size  Location     Type
 15397 ;;		None               void
 15398 ;; Registers used:
 15399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;Total ram usage:        0 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    7
 15412 ;; This function calls:
 15413 ;;		_DlyOff_Initialization
 15414 ;; This function is called by:
 15415 ;;		_main
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           
 15420                           ;psect for function _DelayOff_Initialization
 15421  1BEF                     _DelayOff_Initialization:	
 15422                           
 15423                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15424                           
 15425                           ;incstack = 0
 15426                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15427  1BEF  3001               	movlw	1
 15428  1BF0  319C  2477         	fcall	_DlyOff_Initialization
 15429  1BF2  0008               	return
 15430  1BF3                     __end_of_DelayOff_Initialization:	
 15431                           
 15432                           	psect	text98
 15433  1C77                     __ptext98:	
 15434 ;; *************** function _DlyOff_Initialization *****************
 15435 ;; Defined at:
 15436 ;;		line 56 in file "../src/DelayOff_B1.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  sw              1    wreg     unsigned char 
 15439 ;; Auto vars:     Size  Location     Type
 15440 ;;  sw              1    2[BANK0 ] unsigned char 
 15441 ;; Return value:  Size  Location     Type
 15442 ;;		None               void
 15443 ;; Registers used:
 15444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15445 ;; Tracked objects:
 15446 ;;		On entry : 0/0
 15447 ;;		On exit  : 0/0
 15448 ;;		Unchanged: 0/0
 15449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15453 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;Total ram usage:        1 bytes
 15455 ;; Hardware stack levels used:    1
 15456 ;; Hardware stack levels required when called:    6
 15457 ;; This function calls:
 15458 ;;		_DelayOffPointSelect
 15459 ;; This function is called by:
 15460 ;;		_DelayOff_Initialization
 15461 ;; This function uses a non-reentrant model
 15462 ;;
 15463                           
 15464                           
 15465                           ;psect for function _DlyOff_Initialization
 15466  1C77                     _DlyOff_Initialization:	
 15467                           
 15468                           ;incstack = 0
 15469                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15470                           ;DlyOff_Initialization@sw stored from wreg
 15471  1C77  0020               	movlb	0	; select bank0
 15472  1C78  00A2               	movwf	DlyOff_Initialization@sw
 15473                           
 15474                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15475  1C79  0822               	movf	DlyOff_Initialization@sw,w
 15476  1C7A  319C  24B0         	fcall	_DelayOffPointSelect
 15477                           
 15478                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15479  1C7C  0021               	movlb	1	; select bank1
 15480  1C7D  0839               	movf	_DelayOff^(0+128),w
 15481  1C7E  0086               	movwf	6
 15482  1C7F  0187               	clrf	7
 15483  1C80  1401               	bsf	1,0
 15484  1C81  0008               	return
 15485  1C82                     __end_of_DlyOff_Initialization:	
 15486                           
 15487                           	psect	text99
 15488  1CB0                     __ptext99:	
 15489 ;; *************** function _DelayOffPointSelect *****************
 15490 ;; Defined at:
 15491 ;;		line 7 in file "../src/DelayOff_B1.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;  sw              1    wreg     unsigned char 
 15494 ;; Auto vars:     Size  Location     Type
 15495 ;;  sw              1    1[BANK0 ] unsigned char 
 15496 ;; Return value:  Size  Location     Type
 15497 ;;		None               void
 15498 ;; Registers used:
 15499 ;;		wreg
 15500 ;; Tracked objects:
 15501 ;;		On entry : 0/0
 15502 ;;		On exit  : 0/0
 15503 ;;		Unchanged: 0/0
 15504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15509 ;;Total ram usage:        2 bytes
 15510 ;; Hardware stack levels used:    1
 15511 ;; Hardware stack levels required when called:    5
 15512 ;; This function calls:
 15513 ;;		Nothing
 15514 ;; This function is called by:
 15515 ;;		_DlyOff_Initialization
 15516 ;;		_DlyOff_Main
 15517 ;;		_setDelayOff_GO
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           
 15522                           ;psect for function _DelayOffPointSelect
 15523  1CB0                     _DelayOffPointSelect:	
 15524                           
 15525                           ;incstack = 0
 15526                           ; Regs used in _DelayOffPointSelect: [wreg]
 15527                           ;DelayOffPointSelect@sw stored from wreg
 15528  1CB0  0020               	movlb	0	; select bank0
 15529  1CB1  00A1               	movwf	DelayOffPointSelect@sw
 15530                           
 15531                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15532  1CB2  0821               	movf	DelayOffPointSelect@sw,w
 15533  1CB3  3A01               	xorlw	1
 15534  1CB4  1D03               	skipz
 15535  1CB5  0008               	return
 15536                           
 15537                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15538  1CB6  30D3               	movlw	_DlySw1& (0+255)
 15539  1CB7  00A0               	movwf	??_DelayOffPointSelect
 15540  1CB8  0820               	movf	??_DelayOffPointSelect,w
 15541  1CB9  0021               	movlb	1	; select bank1
 15542  1CBA  00B9               	movwf	_DelayOff^(0+128)
 15543  1CBB  0008               	return
 15544  1CBC                     __end_of_DelayOffPointSelect:	
 15545                           
 15546                           	psect	text100
 15547  1E25                     __ptext100:	
 15548 ;; *************** function _CC2500_PowerOnInitial *****************
 15549 ;; Defined at:
 15550 ;;		line 111 in file "../src/CC2500_B1.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;		None
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;		None
 15555 ;; Return value:  Size  Location     Type
 15556 ;;		None               void
 15557 ;; Registers used:
 15558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15559 ;; Tracked objects:
 15560 ;;		On entry : 0/0
 15561 ;;		On exit  : 0/0
 15562 ;;		Unchanged: 0/0
 15563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;Total ram usage:        0 bytes
 15569 ;; Hardware stack levels used:    1
 15570 ;; Hardware stack levels required when called:    8
 15571 ;; This function calls:
 15572 ;;		_CC2500_ClearRXFIFO
 15573 ;;		_CC2500_ClearTXFIFO
 15574 ;;		_CC2500_FrequencyCabr
 15575 ;;		_CC2500_InitPATable
 15576 ;;		_CC2500_InitSetREG
 15577 ;;		_CC2500_PowerRST
 15578 ;;		_CC2500_SIDLEMode
 15579 ;; This function is called by:
 15580 ;;		_main
 15581 ;; This function uses a non-reentrant model
 15582 ;;
 15583                           
 15584                           
 15585                           ;psect for function _CC2500_PowerOnInitial
 15586  1E25                     _CC2500_PowerOnInitial:	
 15587                           
 15588                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 15589                           
 15590                           ;incstack = 0
 15591                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15592  1E25  3191  2196  319E   	fcall	_CC2500_PowerRST
 15593                           
 15594                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 15595  1E28  3190  20E6  319E   	fcall	_CC2500_InitSetREG
 15596                           
 15597                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 15598  1E2B  319F  273E  319E   	fcall	_CC2500_InitPATable
 15599                           
 15600                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 15601  1E2E  319B  23E7  319E   	fcall	_CC2500_ClearTXFIFO
 15602                           
 15603                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 15604  1E31  319B  23E3  319E   	fcall	_CC2500_ClearRXFIFO
 15605                           
 15606                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 15607  1E34  319C  24A4  319E   	fcall	_CC2500_FrequencyCabr
 15608                           
 15609                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 15610  1E37  319B  23EB         	fcall	_CC2500_SIDLEMode
 15611  1E39  0008               	return
 15612  1E3A                     __end_of_CC2500_PowerOnInitial:	
 15613                           
 15614                           	psect	text101
 15615  1BEB                     __ptext101:	
 15616 ;; *************** function _CC2500_SIDLEMode *****************
 15617 ;; Defined at:
 15618 ;;		line 195 in file "../src/CC2500_B1.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;		None
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;		None
 15623 ;; Return value:  Size  Location     Type
 15624 ;;		None               void
 15625 ;; Registers used:
 15626 ;;		wreg, status,2, status,0, pclath, cstack
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;Total ram usage:        0 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    7
 15639 ;; This function calls:
 15640 ;;		_CC2500_WriteCommand
 15641 ;; This function is called by:
 15642 ;;		_CC2500_PowerOnInitial
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           
 15647                           ;psect for function _CC2500_SIDLEMode
 15648  1BEB                     _CC2500_SIDLEMode:	
 15649                           
 15650                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 15651                           
 15652                           ;incstack = 0
 15653                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 15654  1BEB  3036               	movlw	54
 15655  1BEC  319D  2569         	fcall	_CC2500_WriteCommand
 15656  1BEE  0008               	return
 15657  1BEF                     __end_of_CC2500_SIDLEMode:	
 15658                           
 15659                           	psect	text102
 15660  1196                     __ptext102:	
 15661 ;; *************** function _CC2500_PowerRST *****************
 15662 ;; Defined at:
 15663 ;;		line 124 in file "../src/CC2500_B1.c"
 15664 ;; Parameters:    Size  Location     Type
 15665 ;;		None
 15666 ;; Auto vars:     Size  Location     Type
 15667 ;;		None
 15668 ;; Return value:  Size  Location     Type
 15669 ;;		None               void
 15670 ;; Registers used:
 15671 ;;		wreg, status,2, status,0, pclath, cstack
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;Total ram usage:        1 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    6
 15684 ;; This function calls:
 15685 ;;		_CC2500_WriteByte
 15686 ;;		_DelayTime_1us
 15687 ;; This function is called by:
 15688 ;;		_CC2500_PowerOnInitial
 15689 ;; This function uses a non-reentrant model
 15690 ;;
 15691                           
 15692                           
 15693                           ;psect for function _CC2500_PowerRST
 15694  1196                     _CC2500_PowerRST:	
 15695                           
 15696                           ;CC2500_B1.c: 125: RC1 = 0;
 15697                           
 15698                           ;incstack = 0
 15699                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 15700  1196  0020               	movlb	0	; select bank0
 15701  1197  108E               	bcf	14,1	;volatile
 15702                           
 15703                           ;CC2500_B1.c: 126: RC0 = 0;
 15704  1198  100E               	bcf	14,0	;volatile
 15705                           
 15706                           ;CC2500_B1.c: 127: RC4 = 1;
 15707  1199  160E               	bsf	14,4	;volatile
 15708                           
 15709                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 15710  119A  300A               	movlw	10
 15711  119B  00A0               	movwf	DelayTime_1us@count
 15712  119C  3000               	movlw	0
 15713  119D  00A1               	movwf	DelayTime_1us@count+1
 15714  119E  3190  2099  3191   	fcall	_DelayTime_1us
 15715                           
 15716                           ;CC2500_B1.c: 129: RC4 = 0;
 15717  11A1  0020               	movlb	0	; select bank0
 15718  11A2  120E               	bcf	14,4	;volatile
 15719                           
 15720                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 15721  11A3  300A               	movlw	10
 15722  11A4  00A0               	movwf	DelayTime_1us@count
 15723  11A5  3000               	movlw	0
 15724  11A6  00A1               	movwf	DelayTime_1us@count+1
 15725  11A7  3190  2099  3191   	fcall	_DelayTime_1us
 15726                           
 15727                           ;CC2500_B1.c: 131: RC4 = 1;
 15728  11AA  0020               	movlb	0	; select bank0
 15729  11AB  160E               	bsf	14,4	;volatile
 15730                           
 15731                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 15732  11AC  3028               	movlw	40
 15733  11AD  00A0               	movwf	DelayTime_1us@count
 15734  11AE  3000               	movlw	0
 15735  11AF  00A1               	movwf	DelayTime_1us@count+1
 15736  11B0  3190  2099  3191   	fcall	_DelayTime_1us
 15737                           
 15738                           ;CC2500_B1.c: 133: RC4 = 0;
 15739  11B3  0020               	movlb	0	; select bank0
 15740  11B4  120E               	bcf	14,4	;volatile
 15741                           
 15742                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 15743  11B5  3030               	movlw	48
 15744  11B6  00A6               	movwf	??_CC2500_PowerRST
 15745  11B7  0826               	movf	??_CC2500_PowerRST,w
 15746  11B8  0021               	movlb	1	; select bank1
 15747  11B9  00C2               	movwf	_SPI0Buffer^(0+128)
 15748  11BA                     l290:	
 15749                           ;CC2500_B1.c: 135: while (RC2 == 1);
 15750                           
 15751  11BA  0020               	movlb	0	; select bank0
 15752  11BB  190E               	btfsc	14,2	;volatile
 15753  11BC  29BA               	goto	l290
 15754                           
 15755                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 15756  11BD  319E  2668  3191   	fcall	_CC2500_WriteByte
 15757  11C0                     l293:	
 15758                           ;CC2500_B1.c: 137: while (RC2 == 1);
 15759                           
 15760  11C0  0020               	movlb	0	; select bank0
 15761  11C1  190E               	btfsc	14,2	;volatile
 15762  11C2  29C0               	goto	l293
 15763                           
 15764                           ;CC2500_B1.c: 138: RC0 = 0;
 15765  11C3  100E               	bcf	14,0	;volatile
 15766                           
 15767                           ;CC2500_B1.c: 139: RC4 = 1;
 15768  11C4  160E               	bsf	14,4	;volatile
 15769  11C5  0008               	return
 15770  11C6                     __end_of_CC2500_PowerRST:	
 15771                           
 15772                           	psect	text103
 15773  10E6                     __ptext103:	
 15774 ;; *************** function _CC2500_InitSetREG *****************
 15775 ;; Defined at:
 15776 ;;		line 145 in file "../src/CC2500_B1.c"
 15777 ;; Parameters:    Size  Location     Type
 15778 ;;		None
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15781 ;;  temp2           1    7[BANK0 ] unsigned char 
 15782 ;;  temp1           1    6[BANK0 ] unsigned char 
 15783 ;; Return value:  Size  Location     Type
 15784 ;;		None               void
 15785 ;; Registers used:
 15786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15787 ;; Tracked objects:
 15788 ;;		On entry : 0/0
 15789 ;;		On exit  : 0/0
 15790 ;;		Unchanged: 0/0
 15791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;Total ram usage:        4 bytes
 15797 ;; Hardware stack levels used:    1
 15798 ;; Hardware stack levels required when called:    7
 15799 ;; This function calls:
 15800 ;;		_CC2500_WriteREG
 15801 ;; This function is called by:
 15802 ;;		_CC2500_PowerOnInitial
 15803 ;; This function uses a non-reentrant model
 15804 ;;
 15805                           
 15806                           
 15807                           ;psect for function _CC2500_InitSetREG
 15808  10E6                     _CC2500_InitSetREG:	
 15809                           
 15810                           ;CC2500_B1.c: 146: unsigned char loop_c;
 15811                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 15812                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 15813                           
 15814                           ;incstack = 0
 15815                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15816  10E6  0020               	movlb	0	; select bank0
 15817  10E7  01A8               	clrf	CC2500_InitSetREG@loop_c
 15818  10E8                     L10:	
 15819  10E8  302F               	movlw	47
 15820  10E9  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15821  10EA  1803               	btfsc	3,0
 15822  10EB  0008               	return
 15823                           
 15824                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 15825  10EC  0828               	movf	CC2500_InitSetREG@loop_c,w
 15826  10ED  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15827  10EE  0084               	movwf	4
 15828  10EF  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15829  10F0  1803               	skipnc
 15830  10F1  3E01               	addlw	1
 15831  10F2  0085               	movwf	5
 15832  10F3  0800               	movf	0,w	;code access
 15833  10F4  00A5               	movwf	??_CC2500_InitSetREG
 15834  10F5  0825               	movf	??_CC2500_InitSetREG,w
 15835  10F6  00A6               	movwf	CC2500_InitSetREG@temp1
 15836                           
 15837                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 15838  10F7  0828               	movf	CC2500_InitSetREG@loop_c,w
 15839  10F8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15840  10F9  0084               	movwf	4
 15841  10FA  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15842  10FB  1803               	skipnc
 15843  10FC  3E01               	addlw	1
 15844  10FD  0085               	movwf	5
 15845  10FE  0800               	movf	0,w	;code access
 15846  10FF  00A5               	movwf	??_CC2500_InitSetREG
 15847  1100  0825               	movf	??_CC2500_InitSetREG,w
 15848  1101  00A7               	movwf	CC2500_InitSetREG@temp2
 15849                           
 15850                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 15851  1102  0827               	movf	CC2500_InitSetREG@temp2,w
 15852  1103  00A5               	movwf	??_CC2500_InitSetREG
 15853  1104  0825               	movf	??_CC2500_InitSetREG,w
 15854  1105  00A2               	movwf	CC2500_WriteREG@value
 15855  1106  0826               	movf	CC2500_InitSetREG@temp1,w
 15856  1107  319E  2681  3190   	fcall	_CC2500_WriteREG
 15857  110A  3001               	movlw	1
 15858  110B  0020               	movlb	0	; select bank0
 15859  110C  00A5               	movwf	??_CC2500_InitSetREG
 15860  110D  0825               	movf	??_CC2500_InitSetREG,w
 15861  110E  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15862  110F  28E8               	goto	L10
 15863  1110                     __end_of_CC2500_InitSetREG:	
 15864                           
 15865                           	psect	text104
 15866  1F3E                     __ptext104:	
 15867 ;; *************** function _CC2500_InitPATable *****************
 15868 ;; Defined at:
 15869 ;;		line 160 in file "../src/CC2500_B1.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;		None
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15874 ;;  temp            1    6[BANK0 ] unsigned char 
 15875 ;; Return value:  Size  Location     Type
 15876 ;;		None               void
 15877 ;; Registers used:
 15878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15879 ;; Tracked objects:
 15880 ;;		On entry : 0/0
 15881 ;;		On exit  : 0/0
 15882 ;;		Unchanged: 0/0
 15883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;Total ram usage:        3 bytes
 15889 ;; Hardware stack levels used:    1
 15890 ;; Hardware stack levels required when called:    7
 15891 ;; This function calls:
 15892 ;;		_CC2500_WriteREG
 15893 ;; This function is called by:
 15894 ;;		_CC2500_PowerOnInitial
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           
 15899                           ;psect for function _CC2500_InitPATable
 15900  1F3E                     _CC2500_InitPATable:	
 15901                           
 15902                           ;CC2500_B1.c: 161: unsigned char loop_d;
 15903                           ;CC2500_B1.c: 162: unsigned char temp;
 15904                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 15905                           
 15906                           ;incstack = 0
 15907                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15908  1F3E  0020               	movlb	0	; select bank0
 15909  1F3F  01A7               	clrf	CC2500_InitPATable@loop_d
 15910  1F40                     L11:	
 15911  1F40  3008               	movlw	8
 15912  1F41  0227               	subwf	CC2500_InitPATable@loop_d,w
 15913  1F42  1803               	btfsc	3,0
 15914  1F43  0008               	return
 15915                           
 15916                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 15917  1F44  0827               	movf	CC2500_InitPATable@loop_d,w
 15918  1F45  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15919  1F46  0084               	movwf	4
 15920  1F47  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15921  1F48  1803               	skipnc
 15922  1F49  3E01               	addlw	1
 15923  1F4A  0085               	movwf	5
 15924  1F4B  0800               	movf	0,w	;code access
 15925  1F4C  00A5               	movwf	??_CC2500_InitPATable
 15926  1F4D  0825               	movf	??_CC2500_InitPATable,w
 15927  1F4E  00A6               	movwf	CC2500_InitPATable@temp
 15928                           
 15929                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 15930  1F4F  0826               	movf	CC2500_InitPATable@temp,w
 15931  1F50  00A5               	movwf	??_CC2500_InitPATable
 15932  1F51  0825               	movf	??_CC2500_InitPATable,w
 15933  1F52  00A2               	movwf	CC2500_WriteREG@value
 15934  1F53  303E               	movlw	62
 15935  1F54  319E  2681  319F   	fcall	_CC2500_WriteREG
 15936  1F57  3001               	movlw	1
 15937  1F58  0020               	movlb	0	; select bank0
 15938  1F59  00A5               	movwf	??_CC2500_InitPATable
 15939  1F5A  0825               	movf	??_CC2500_InitPATable,w
 15940  1F5B  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15941  1F5C  2F40               	goto	L11
 15942  1F5D                     __end_of_CC2500_InitPATable:	
 15943                           
 15944                           	psect	text105
 15945  1E81                     __ptext105:	
 15946 ;; *************** function _CC2500_WriteREG *****************
 15947 ;; Defined at:
 15948 ;;		line 237 in file "../src/CC2500_B1.c"
 15949 ;; Parameters:    Size  Location     Type
 15950 ;;  w_addr          1    wreg     unsigned char 
 15951 ;;  value           1    2[BANK0 ] unsigned char 
 15952 ;; Auto vars:     Size  Location     Type
 15953 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15954 ;; Return value:  Size  Location     Type
 15955 ;;		None               void
 15956 ;; Registers used:
 15957 ;;		wreg, status,2, status,0, pclath, cstack
 15958 ;; Tracked objects:
 15959 ;;		On entry : 0/0
 15960 ;;		On exit  : 0/0
 15961 ;;		Unchanged: 0/0
 15962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15963 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15966 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15967 ;;Total ram usage:        3 bytes
 15968 ;; Hardware stack levels used:    1
 15969 ;; Hardware stack levels required when called:    6
 15970 ;; This function calls:
 15971 ;;		_CC2500_WriteByte
 15972 ;; This function is called by:
 15973 ;;		_CC2500_InitSetREG
 15974 ;;		_CC2500_InitPATable
 15975 ;; This function uses a non-reentrant model
 15976 ;;
 15977                           
 15978                           
 15979                           ;psect for function _CC2500_WriteREG
 15980  1E81                     _CC2500_WriteREG:	
 15981                           
 15982                           ;incstack = 0
 15983                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 15984                           ;CC2500_WriteREG@w_addr stored from wreg
 15985  1E81  0020               	movlb	0	; select bank0
 15986  1E82  00A4               	movwf	CC2500_WriteREG@w_addr
 15987                           
 15988                           ;CC2500_B1.c: 238: RC4 = 0;
 15989  1E83  120E               	bcf	14,4	;volatile
 15990                           
 15991                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 15992  1E84  0824               	movf	CC2500_WriteREG@w_addr,w
 15993  1E85  00A3               	movwf	??_CC2500_WriteREG
 15994  1E86  0823               	movf	??_CC2500_WriteREG,w
 15995  1E87  0021               	movlb	1	; select bank1
 15996  1E88  00C2               	movwf	_SPI0Buffer^(0+128)
 15997  1E89                     l335:	
 15998                           ;CC2500_B1.c: 240: while (RC2 == 1);
 15999                           
 16000  1E89  0020               	movlb	0	; select bank0
 16001  1E8A  190E               	btfsc	14,2	;volatile
 16002  1E8B  2E89               	goto	l335
 16003                           
 16004                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 16005  1E8C  319E  2668  319E   	fcall	_CC2500_WriteByte
 16006                           
 16007                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 16008  1E8F  0020               	movlb	0	; select bank0
 16009  1E90  0822               	movf	CC2500_WriteREG@value,w
 16010  1E91  00A3               	movwf	??_CC2500_WriteREG
 16011  1E92  0823               	movf	??_CC2500_WriteREG,w
 16012  1E93  0021               	movlb	1	; select bank1
 16013  1E94  00C2               	movwf	_SPI0Buffer^(0+128)
 16014                           
 16015                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 16016  1E95  319E  2668         	fcall	_CC2500_WriteByte
 16017                           
 16018                           ;CC2500_B1.c: 244: RC4 = 1;
 16019  1E97  0020               	movlb	0	; select bank0
 16020  1E98  160E               	bsf	14,4	;volatile
 16021  1E99  0008               	return
 16022  1E9A                     __end_of_CC2500_WriteREG:	
 16023                           
 16024                           	psect	text106
 16025  1CA4                     __ptext106:	
 16026 ;; *************** function _CC2500_FrequencyCabr *****************
 16027 ;; Defined at:
 16028 ;;		line 187 in file "../src/CC2500_B1.c"
 16029 ;; Parameters:    Size  Location     Type
 16030 ;;		None
 16031 ;; Auto vars:     Size  Location     Type
 16032 ;;		None
 16033 ;; Return value:  Size  Location     Type
 16034 ;;		None               void
 16035 ;; Registers used:
 16036 ;;		wreg, status,2, status,0, pclath, cstack
 16037 ;; Tracked objects:
 16038 ;;		On entry : 0/0
 16039 ;;		On exit  : 0/0
 16040 ;;		Unchanged: 0/0
 16041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16046 ;;Total ram usage:        0 bytes
 16047 ;; Hardware stack levels used:    1
 16048 ;; Hardware stack levels required when called:    7
 16049 ;; This function calls:
 16050 ;;		_CC2500_WriteCommand
 16051 ;;		_DelayTime_1us
 16052 ;; This function is called by:
 16053 ;;		_CC2500_PowerOnInitial
 16054 ;; This function uses a non-reentrant model
 16055 ;;
 16056                           
 16057                           
 16058                           ;psect for function _CC2500_FrequencyCabr
 16059  1CA4                     _CC2500_FrequencyCabr:	
 16060                           
 16061                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 16065  1CA4  3033               	movlw	51
 16066  1CA5  319D  2569  319C   	fcall	_CC2500_WriteCommand
 16067                           
 16068                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 16069  1CA8  30E8               	movlw	232
 16070  1CA9  0020               	movlb	0	; select bank0
 16071  1CAA  00A0               	movwf	DelayTime_1us@count
 16072  1CAB  3003               	movlw	3
 16073  1CAC  00A1               	movwf	DelayTime_1us@count+1
 16074  1CAD  3190  2099         	fcall	_DelayTime_1us
 16075  1CAF  0008               	return
 16076  1CB0                     __end_of_CC2500_FrequencyCabr:	
 16077                           
 16078                           	psect	text107
 16079  1099                     __ptext107:	
 16080 ;; *************** function _DelayTime_1us *****************
 16081 ;; Defined at:
 16082 ;;		line 293 in file "../src/CC2500_B1.c"
 16083 ;; Parameters:    Size  Location     Type
 16084 ;;  count           2    0[BANK0 ] int 
 16085 ;; Auto vars:     Size  Location     Type
 16086 ;;  j               2    4[BANK0 ] unsigned int 
 16087 ;;  i               2    2[BANK0 ] unsigned int 
 16088 ;; Return value:  Size  Location     Type
 16089 ;;		None               void
 16090 ;; Registers used:
 16091 ;;		wreg, status,2
 16092 ;; Tracked objects:
 16093 ;;		On entry : 0/0
 16094 ;;		On exit  : 0/0
 16095 ;;		Unchanged: 0/0
 16096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;Total ram usage:        6 bytes
 16102 ;; Hardware stack levels used:    1
 16103 ;; Hardware stack levels required when called:    5
 16104 ;; This function calls:
 16105 ;;		Nothing
 16106 ;; This function is called by:
 16107 ;;		_CC2500_PowerRST
 16108 ;;		_CC2500_FrequencyCabr
 16109 ;; This function uses a non-reentrant model
 16110 ;;
 16111                           
 16112                           
 16113                           ;psect for function _DelayTime_1us
 16114  1099                     _DelayTime_1us:	
 16115                           
 16116                           ;CC2500_B1.c: 294: unsigned int i, j;
 16117                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 16118                           
 16119                           ;incstack = 0
 16120                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16121  1099  3001               	movlw	1
 16122  109A  0020               	movlb	0	; select bank0
 16123  109B  00A2               	movwf	DelayTime_1us@i
 16124  109C  3000               	movlw	0
 16125  109D  00A3               	movwf	DelayTime_1us@i+1
 16126  109E                     l359:	
 16127  109E  0821               	movf	DelayTime_1us@count+1,w
 16128  109F  0223               	subwf	DelayTime_1us@i+1,w
 16129  10A0  1D03               	skipz
 16130  10A1  28A4               	goto	u4745
 16131  10A2  0820               	movf	DelayTime_1us@count,w
 16132  10A3  0222               	subwf	DelayTime_1us@i,w
 16133  10A4                     u4745:	
 16134  10A4  1803               	btfsc	3,0
 16135  10A5  0008               	return
 16136                           
 16137                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 16138  10A6  01A4               	clrf	DelayTime_1us@j
 16139  10A7  01A5               	clrf	DelayTime_1us@j+1
 16140  10A8  3000               	movlw	0
 16141  10A9  0225               	subwf	DelayTime_1us@j+1,w
 16142  10AA  3002               	movlw	2
 16143  10AB  1903               	skipnz
 16144  10AC  0224               	subwf	DelayTime_1us@j,w
 16145  10AD  1803               	btfsc	3,0
 16146  10AE  28BA               	goto	l5974
 16147  10AF                     l5972:	
 16148  10AF  3001               	movlw	1
 16149  10B0  07A4               	addwf	DelayTime_1us@j,f
 16150  10B1  3000               	movlw	0
 16151  10B2  3DA5               	addwfc	DelayTime_1us@j+1,f
 16152  10B3  3000               	movlw	0
 16153  10B4  0225               	subwf	DelayTime_1us@j+1,w
 16154  10B5  3002               	movlw	2
 16155  10B6  1903               	skipnz
 16156  10B7  0224               	subwf	DelayTime_1us@j,w
 16157  10B8  1C03               	skipc
 16158  10B9  28AF               	goto	l5972
 16159  10BA                     l5974:	
 16160  10BA  3001               	movlw	1
 16161  10BB  07A2               	addwf	DelayTime_1us@i,f
 16162  10BC  3000               	movlw	0
 16163  10BD  3DA3               	addwfc	DelayTime_1us@i+1,f
 16164  10BE  289E               	goto	l359
 16165  10BF                     __end_of_DelayTime_1us:	
 16166                           
 16167                           	psect	text108
 16168  1BE7                     __ptext108:	
 16169 ;; *************** function _CC2500_ClearTXFIFO *****************
 16170 ;; Defined at:
 16171 ;;		line 173 in file "../src/CC2500_B1.c"
 16172 ;; Parameters:    Size  Location     Type
 16173 ;;		None
 16174 ;; Auto vars:     Size  Location     Type
 16175 ;;		None
 16176 ;; Return value:  Size  Location     Type
 16177 ;;		None               void
 16178 ;; Registers used:
 16179 ;;		wreg, status,2, status,0, pclath, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;Total ram usage:        0 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    7
 16192 ;; This function calls:
 16193 ;;		_CC2500_WriteCommand
 16194 ;; This function is called by:
 16195 ;;		_CC2500_PowerOnInitial
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           
 16200                           ;psect for function _CC2500_ClearTXFIFO
 16201  1BE7                     _CC2500_ClearTXFIFO:	
 16202                           
 16203                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 16204                           
 16205                           ;incstack = 0
 16206                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16207  1BE7  303B               	movlw	59
 16208  1BE8  319D  2569         	fcall	_CC2500_WriteCommand
 16209  1BEA  0008               	return
 16210  1BEB                     __end_of_CC2500_ClearTXFIFO:	
 16211                           
 16212                           	psect	text109
 16213  1BE3                     __ptext109:	
 16214 ;; *************** function _CC2500_ClearRXFIFO *****************
 16215 ;; Defined at:
 16216 ;;		line 180 in file "../src/CC2500_B1.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;		None
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;		None
 16221 ;; Return value:  Size  Location     Type
 16222 ;;		None               void
 16223 ;; Registers used:
 16224 ;;		wreg, status,2, status,0, pclath, cstack
 16225 ;; Tracked objects:
 16226 ;;		On entry : 0/0
 16227 ;;		On exit  : 0/0
 16228 ;;		Unchanged: 0/0
 16229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;Total ram usage:        0 bytes
 16235 ;; Hardware stack levels used:    1
 16236 ;; Hardware stack levels required when called:    7
 16237 ;; This function calls:
 16238 ;;		_CC2500_WriteCommand
 16239 ;; This function is called by:
 16240 ;;		_CC2500_PowerOnInitial
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           
 16245                           ;psect for function _CC2500_ClearRXFIFO
 16246  1BE3                     _CC2500_ClearRXFIFO:	
 16247                           
 16248                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 16249                           
 16250                           ;incstack = 0
 16251                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16252  1BE3  303A               	movlw	58
 16253  1BE4  319D  2569         	fcall	_CC2500_WriteCommand
 16254  1BE6  0008               	return
 16255  1BE7                     __end_of_CC2500_ClearRXFIFO:	
 16256                           
 16257                           	psect	text110
 16258  1D69                     __ptext110:	
 16259 ;; *************** function _CC2500_WriteCommand *****************
 16260 ;; Defined at:
 16261 ;;		line 263 in file "../src/CC2500_B1.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  command         1    wreg     unsigned char 
 16264 ;; Auto vars:     Size  Location     Type
 16265 ;;  command         1    3[BANK0 ] unsigned char 
 16266 ;; Return value:  Size  Location     Type
 16267 ;;		None               void
 16268 ;; Registers used:
 16269 ;;		wreg, status,2, status,0, pclath, cstack
 16270 ;; Tracked objects:
 16271 ;;		On entry : 0/0
 16272 ;;		On exit  : 0/0
 16273 ;;		Unchanged: 0/0
 16274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;Total ram usage:        2 bytes
 16280 ;; Hardware stack levels used:    1
 16281 ;; Hardware stack levels required when called:    6
 16282 ;; This function calls:
 16283 ;;		_CC2500_WriteByte
 16284 ;; This function is called by:
 16285 ;;		_CC2500_TxData
 16286 ;;		_CC2500_RxData
 16287 ;;		_CC2500_ClearTXFIFO
 16288 ;;		_CC2500_ClearRXFIFO
 16289 ;;		_CC2500_FrequencyCabr
 16290 ;;		_CC2500_SIDLEMode
 16291 ;;		_setRF_Main
 16292 ;;		_RF_RxDisable
 16293 ;; This function uses a non-reentrant model
 16294 ;;
 16295                           
 16296                           
 16297                           ;psect for function _CC2500_WriteCommand
 16298  1D69                     _CC2500_WriteCommand:	
 16299                           
 16300                           ;incstack = 0
 16301                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 16302                           ;CC2500_WriteCommand@command stored from wreg
 16303  1D69  0020               	movlb	0	; select bank0
 16304  1D6A  00A3               	movwf	CC2500_WriteCommand@command
 16305                           
 16306                           ;CC2500_B1.c: 264: RC4 = 0;
 16307  1D6B  120E               	bcf	14,4	;volatile
 16308                           
 16309                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 16310  1D6C  0823               	movf	CC2500_WriteCommand@command,w
 16311  1D6D  00A2               	movwf	??_CC2500_WriteCommand
 16312  1D6E  0822               	movf	??_CC2500_WriteCommand,w
 16313  1D6F  0021               	movlb	1	; select bank1
 16314  1D70  00C2               	movwf	_SPI0Buffer^(0+128)
 16315  1D71                     l347:	
 16316                           ;CC2500_B1.c: 267: while (RC2 == 1);
 16317                           
 16318  1D71  0020               	movlb	0	; select bank0
 16319  1D72  190E               	btfsc	14,2	;volatile
 16320  1D73  2D71               	goto	l347
 16321                           
 16322                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 16323  1D74  319E  2668         	fcall	_CC2500_WriteByte
 16324                           
 16325                           ;CC2500_B1.c: 270: RC4 = 1;
 16326  1D76  0020               	movlb	0	; select bank0
 16327  1D77  160E               	bsf	14,4	;volatile
 16328  1D78  0008               	return
 16329  1D79                     __end_of_CC2500_WriteCommand:	
 16330                           
 16331                           	psect	text111
 16332  1E68                     __ptext111:	
 16333 ;; *************** function _CC2500_WriteByte *****************
 16334 ;; Defined at:
 16335 ;;		line 205 in file "../src/CC2500_B1.c"
 16336 ;; Parameters:    Size  Location     Type
 16337 ;;		None
 16338 ;; Auto vars:     Size  Location     Type
 16339 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16340 ;; Return value:  Size  Location     Type
 16341 ;;		None               void
 16342 ;; Registers used:
 16343 ;;		wreg, status,2, status,0
 16344 ;; Tracked objects:
 16345 ;;		On entry : 0/0
 16346 ;;		On exit  : 0/0
 16347 ;;		Unchanged: 0/0
 16348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;Total ram usage:        2 bytes
 16354 ;; Hardware stack levels used:    1
 16355 ;; Hardware stack levels required when called:    5
 16356 ;; This function calls:
 16357 ;;		Nothing
 16358 ;; This function is called by:
 16359 ;;		_CC2500_TxData
 16360 ;;		_CC2500_RxData
 16361 ;;		_CC2500_PowerRST
 16362 ;;		_CC2500_WriteREG
 16363 ;;		_CC2500_WriteCommand
 16364 ;;		_CC2500_ReadStatus
 16365 ;;		_CC2500_ReadREG
 16366 ;; This function uses a non-reentrant model
 16367 ;;
 16368                           
 16369                           
 16370                           ;psect for function _CC2500_WriteByte
 16371  1E68                     _CC2500_WriteByte:	
 16372                           
 16373                           ;CC2500_B1.c: 206: unsigned char loop_a;
 16374                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 16375                           
 16376                           ;incstack = 0
 16377                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16378  1E68  0020               	movlb	0	; select bank0
 16379  1E69  01A1               	clrf	CC2500_WriteByte@loop_a
 16380  1E6A                     L12:	
 16381  1E6A  3008               	movlw	8
 16382  1E6B  0221               	subwf	CC2500_WriteByte@loop_a,w
 16383  1E6C  1803               	btfsc	3,0
 16384  1E6D  0008               	return
 16385                           
 16386                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 16387  1E6E  0021               	movlb	1	; select bank1
 16388  1E6F  1FC2               	btfss	_SPI0Buffer^(0+128),7
 16389  1E70  2E74               	goto	l323
 16390                           
 16391                           ;CC2500_B1.c: 209: RC0 = 1;
 16392  1E71  0020               	movlb	0	; select bank0
 16393  1E72  140E               	bsf	14,0	;volatile
 16394  1E73  2E76               	goto	l324
 16395  1E74                     l323:	
 16396                           
 16397                           ;CC2500_B1.c: 210: else
 16398                           ;CC2500_B1.c: 211: RC0 = 0;
 16399  1E74  0020               	movlb	0	; select bank0
 16400  1E75  100E               	bcf	14,0	;volatile
 16401  1E76                     l324:	
 16402                           
 16403                           ;CC2500_B1.c: 212: RC1 = 1;
 16404  1E76  148E               	bsf	14,1	;volatile
 16405                           
 16406                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 16407  1E77  1003               	clrc
 16408  1E78  0021               	movlb	1	; select bank1
 16409  1E79  0DC2               	rlf	_SPI0Buffer^(0+128),f
 16410                           
 16411                           ;CC2500_B1.c: 214: RC1 = 0;
 16412  1E7A  0020               	movlb	0	; select bank0
 16413  1E7B  108E               	bcf	14,1	;volatile
 16414  1E7C  3001               	movlw	1
 16415  1E7D  00A0               	movwf	??_CC2500_WriteByte
 16416  1E7E  0820               	movf	??_CC2500_WriteByte,w
 16417  1E7F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16418  1E80  2E6A               	goto	L12
 16419  1E81                     __end_of_CC2500_WriteByte:	
 16420                           
 16421                           	psect	text112
 16422  0E9D                     __ptext112:	
 16423 ;; *************** function _Buzzer_Main *****************
 16424 ;; Defined at:
 16425 ;;		line 55 in file "../src/Buzzer_B1.c"
 16426 ;; Parameters:    Size  Location     Type
 16427 ;;		None
 16428 ;; Auto vars:     Size  Location     Type
 16429 ;;		None
 16430 ;; Return value:  Size  Location     Type
 16431 ;;		None               void
 16432 ;; Registers used:
 16433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16434 ;; Tracked objects:
 16435 ;;		On entry : 0/0
 16436 ;;		On exit  : 0/0
 16437 ;;		Unchanged: 0/0
 16438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;Total ram usage:        4 bytes
 16444 ;; Hardware stack levels used:    1
 16445 ;; Hardware stack levels required when called:    5
 16446 ;; This function calls:
 16447 ;;		Nothing
 16448 ;; This function is called by:
 16449 ;;		_main
 16450 ;; This function uses a non-reentrant model
 16451 ;;
 16452                           
 16453                           
 16454                           ;psect for function _Buzzer_Main
 16455  0E9D                     _Buzzer_Main:	
 16456                           
 16457                           ;Buzzer_B1.c: 56: Buz = &Buz1;
 16458                           
 16459                           ;incstack = 0
 16460                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 16461  0E9D  30C7               	movlw	_Buz1& (0+255)
 16462  0E9E  0020               	movlb	0	; select bank0
 16463  0E9F  00A0               	movwf	??_Buzzer_Main
 16464  0EA0  0820               	movf	??_Buzzer_Main,w
 16465  0EA1  0021               	movlb	1	; select bank1
 16466  0EA2  00B7               	movwf	_Buz^(0+128)
 16467                           
 16468                           ;Buzzer_B1.c: 57: if (Buz->GO == 1) {
 16469  0EA3  0837               	movf	_Buz^(0+128),w
 16470  0EA4  0086               	movwf	6
 16471  0EA5  0187               	clrf	7
 16472  0EA6  1C81               	btfss	1,1
 16473  0EA7  0008               	return
 16474                           
 16475                           ;Buzzer_B1.c: 58: Buz->Counter++;
 16476  0EA8  0A37               	incf	_Buz^(0+128),w
 16477  0EA9  0086               	movwf	6
 16478  0EAA  0187               	clrf	7
 16479  0EAB  3001               	movlw	1
 16480  0EAC  0781               	addwf	1,f
 16481  0EAD  3141               	addfsr 1,1
 16482  0EAE  1803               	skipnc
 16483  0EAF  0A81               	incf	1,f
 16484                           
 16485                           ;Buzzer_B1.c: 59: if (Buz->Counter >= Buz->TimeValue) {
 16486  0EB0  0837               	movf	_Buz^(0+128),w
 16487  0EB1  3E06               	addlw	6
 16488  0EB2  0086               	movwf	6
 16489  0EB3  0187               	clrf	7
 16490  0EB4  3F40               	moviw [0]fsr1
 16491  0EB5  0020               	movlb	0	; select bank0
 16492  0EB6  00A0               	movwf	??_Buzzer_Main
 16493  0EB7  3F41               	moviw [1]fsr1
 16494  0EB8  00A1               	movwf	??_Buzzer_Main+1
 16495  0EB9  0021               	movlb	1	; select bank1
 16496  0EBA  0A37               	incf	_Buz^(0+128),w
 16497  0EBB  0086               	movwf	6
 16498  0EBC  0187               	clrf	7
 16499  0EBD  3F40               	moviw [0]fsr1
 16500  0EBE  0020               	movlb	0	; select bank0
 16501  0EBF  00A2               	movwf	??_Buzzer_Main+2
 16502  0EC0  3F41               	moviw [1]fsr1
 16503  0EC1  00A3               	movwf	??_Buzzer_Main+3
 16504  0EC2  0821               	movf	??_Buzzer_Main+1,w
 16505  0EC3  0223               	subwf	??_Buzzer_Main+3,w
 16506  0EC4  1D03               	skipz
 16507  0EC5  2EC8               	goto	u6065
 16508  0EC6  0820               	movf	??_Buzzer_Main,w
 16509  0EC7  0222               	subwf	??_Buzzer_Main+2,w
 16510  0EC8                     u6065:	
 16511  0EC8  1C03               	skipc
 16512  0EC9  0008               	return
 16513                           
 16514                           ;Buzzer_B1.c: 60: Buz->Counter = 0;
 16515  0ECA  0021               	movlb	1	; select bank1
 16516  0ECB  0A37               	incf	_Buz^(0+128),w
 16517  0ECC  0086               	movwf	6
 16518  0ECD  0187               	clrf	7
 16519  0ECE  3000               	movlw	0
 16520  0ECF  3FC0               	movwi [0]fsr1
 16521  0ED0  3FC1               	movwi [1]fsr1
 16522                           
 16523                           ;Buzzer_B1.c: 61: Buz->Switch = (RB3 == 1) ? 1 : 0;
 16524  0ED1  0837               	movf	_Buz^(0+128),w
 16525  0ED2  0086               	movwf	6
 16526  0ED3  0187               	clrf	7
 16527  0ED4  1281               	bcf	1,5
 16528  0ED5  0020               	movlb	0	; select bank0
 16529  0ED6  198D               	btfsc	13,3	;volatile
 16530  0ED7  1681               	bsf	1,5
 16531                           
 16532                           ;Buzzer_B1.c: 62: if (Buz->Switch == 0) {
 16533  0ED8  0021               	movlb	1	; select bank1
 16534  0ED9  0837               	movf	_Buz^(0+128),w
 16535  0EDA  0086               	movwf	6
 16536  0EDB  0187               	clrf	7
 16537  0EDC  1A81               	btfsc	1,5
 16538  0EDD  2F3D               	goto	l6846
 16539                           
 16540                           ;Buzzer_B1.c: 63: if (Buz->Count == 0) {
 16541  0EDE  0837               	movf	_Buz^(0+128),w
 16542  0EDF  3E03               	addlw	3
 16543  0EE0  0086               	movwf	6
 16544  0EE1  0187               	clrf	7
 16545  0EE2  0881               	movf	1,f
 16546  0EE3  1D03               	skipz
 16547  0EE4  2F36               	goto	l6842
 16548                           
 16549                           ;Buzzer_B1.c: 64: if (Buz->BufferStatus1 == 1) {
 16550  0EE5  0837               	movf	_Buz^(0+128),w
 16551  0EE6  0086               	movwf	6
 16552  0EE7  0187               	clrf	7
 16553  0EE8  1D81               	btfss	1,3
 16554  0EE9  2F0B               	goto	l6834
 16555                           
 16556                           ;Buzzer_B1.c: 65: Buz->BufferStatus1 = 0;
 16557  0EEA  0837               	movf	_Buz^(0+128),w
 16558  0EEB  0086               	movwf	6
 16559  0EEC  0187               	clrf	7
 16560  0EED  1181               	bcf	1,3
 16561                           
 16562                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer1;
 16563  0EEE  0837               	movf	_Buz^(0+128),w
 16564  0EEF  3E04               	addlw	4
 16565  0EF0  0086               	movwf	6
 16566  0EF1  0187               	clrf	7
 16567  0EF2  0801               	movf	1,w
 16568  0EF3  0020               	movlb	0	; select bank0
 16569  0EF4  00A0               	movwf	??_Buzzer_Main
 16570  0EF5  0021               	movlb	1	; select bank1
 16571  0EF6  0837               	movf	_Buz^(0+128),w
 16572  0EF7  3E03               	addlw	3
 16573  0EF8  0086               	movwf	6
 16574  0EF9  0187               	clrf	7
 16575  0EFA  0020               	movlb	0	; select bank0
 16576  0EFB  0820               	movf	??_Buzzer_Main,w
 16577  0EFC  0081               	movwf	1
 16578                           
 16579                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer1;
 16580  0EFD  0021               	movlb	1	; select bank1
 16581  0EFE  0837               	movf	_Buz^(0+128),w
 16582  0EFF  3E08               	addlw	8
 16583  0F00  0086               	movwf	6
 16584  0F01  0187               	clrf	7
 16585  0F02  0837               	movf	_Buz^(0+128),w
 16586  0F03  3E06               	addlw	6
 16587  0F04  0084               	movwf	4
 16588  0F05  0185               	clrf	5
 16589  0F06  3F40               	moviw [0]fsr1
 16590  0F07  3F80               	movwi [0]fsr0
 16591  0F08  3F41               	moviw [1]fsr1
 16592  0F09  3F81               	movwi [1]fsr0
 16593                           
 16594                           ;Buzzer_B1.c: 68: } else if (Buz->BufferStatus2 == 1) {
 16595  0F0A  0008               	return
 16596  0F0B                     l6834:	
 16597  0F0B  0837               	movf	_Buz^(0+128),w
 16598  0F0C  0086               	movwf	6
 16599  0F0D  0187               	clrf	7
 16600  0F0E  1E01               	btfss	1,4
 16601  0F0F  2F31               	goto	l6840
 16602                           
 16603                           ;Buzzer_B1.c: 69: Buz->BufferStatus2 = 0;
 16604  0F10  0837               	movf	_Buz^(0+128),w
 16605  0F11  0086               	movwf	6
 16606  0F12  0187               	clrf	7
 16607  0F13  1201               	bcf	1,4
 16608                           
 16609                           ;Buzzer_B1.c: 70: Buz->Count = Buz->CountBuffer2;
 16610  0F14  0837               	movf	_Buz^(0+128),w
 16611  0F15  3E05               	addlw	5
 16612  0F16  0086               	movwf	6
 16613  0F17  0187               	clrf	7
 16614  0F18  0801               	movf	1,w
 16615  0F19  0020               	movlb	0	; select bank0
 16616  0F1A  00A0               	movwf	??_Buzzer_Main
 16617  0F1B  0021               	movlb	1	; select bank1
 16618  0F1C  0837               	movf	_Buz^(0+128),w
 16619  0F1D  3E03               	addlw	3
 16620  0F1E  0086               	movwf	6
 16621  0F1F  0187               	clrf	7
 16622  0F20  0020               	movlb	0	; select bank0
 16623  0F21  0820               	movf	??_Buzzer_Main,w
 16624  0F22  0081               	movwf	1
 16625                           
 16626                           ;Buzzer_B1.c: 71: Buz->TimeValue = Buz->TimeValueBuffer2;
 16627  0F23  0021               	movlb	1	; select bank1
 16628  0F24  0837               	movf	_Buz^(0+128),w
 16629  0F25  3E0A               	addlw	10
 16630  0F26  0086               	movwf	6
 16631  0F27  0187               	clrf	7
 16632  0F28  0837               	movf	_Buz^(0+128),w
 16633  0F29  3E06               	addlw	6
 16634  0F2A  0084               	movwf	4
 16635  0F2B  0185               	clrf	5
 16636  0F2C  3F40               	moviw [0]fsr1
 16637  0F2D  3F80               	movwi [0]fsr0
 16638  0F2E  3F41               	moviw [1]fsr1
 16639  0F2F  3F81               	movwi [1]fsr0
 16640                           
 16641                           ;Buzzer_B1.c: 72: } else {
 16642  0F30  0008               	return
 16643  0F31                     l6840:	
 16644                           
 16645                           ;Buzzer_B1.c: 73: Buz->GO = 0;
 16646  0F31  0837               	movf	_Buz^(0+128),w
 16647  0F32  0086               	movwf	6
 16648  0F33  0187               	clrf	7
 16649  0F34  1081               	bcf	1,1
 16650                           
 16651                           ;Buzzer_B1.c: 74: }
 16652                           ;Buzzer_B1.c: 75: } else {
 16653  0F35  0008               	return
 16654  0F36                     l6842:	
 16655                           
 16656                           ;Buzzer_B1.c: 76: Buz->Switch = 1;
 16657  0F36  0837               	movf	_Buz^(0+128),w
 16658  0F37  0086               	movwf	6
 16659  0F38  0187               	clrf	7
 16660  0F39  1681               	bsf	1,5
 16661                           
 16662                           ;Buzzer_B1.c: 78: RB3 = 1;
 16663  0F3A  0020               	movlb	0	; select bank0
 16664  0F3B  158D               	bsf	13,3	;volatile
 16665                           
 16666                           ;Buzzer_B1.c: 79: }
 16667                           ;Buzzer_B1.c: 80: } else {
 16668  0F3C  0008               	return
 16669  0F3D                     l6846:	
 16670                           
 16671                           ;Buzzer_B1.c: 81: Buz->Switch = 0;
 16672  0F3D  0021               	movlb	1	; select bank1
 16673  0F3E  0837               	movf	_Buz^(0+128),w
 16674  0F3F  0086               	movwf	6
 16675  0F40  0187               	clrf	7
 16676  0F41  1281               	bcf	1,5
 16677                           
 16678                           ;Buzzer_B1.c: 83: RB3 = 0;
 16679  0F42  0020               	movlb	0	; select bank0
 16680  0F43  118D               	bcf	13,3	;volatile
 16681                           
 16682                           ;Buzzer_B1.c: 85: Buz->Count--;
 16683  0F44  0021               	movlb	1	; select bank1
 16684  0F45  0837               	movf	_Buz^(0+128),w
 16685  0F46  3E03               	addlw	3
 16686  0F47  0086               	movwf	6
 16687  0F48  0187               	clrf	7
 16688  0F49  3001               	movlw	1
 16689  0F4A  0281               	subwf	1,f
 16690  0F4B  0008               	return
 16691  0F4C                     __end_of_Buzzer_Main:	
 16692                           
 16693                           	psect	text113
 16694  1C6C                     __ptext113:	
 16695 ;; *************** function _Buzzer_Initialization *****************
 16696 ;; Defined at:
 16697 ;;		line 11 in file "../src/Buzzer_B1.c"
 16698 ;; Parameters:    Size  Location     Type
 16699 ;;		None
 16700 ;; Auto vars:     Size  Location     Type
 16701 ;;		None
 16702 ;; Return value:  Size  Location     Type
 16703 ;;		None               void
 16704 ;; Registers used:
 16705 ;;		wreg, fsr1l, fsr1h
 16706 ;; Tracked objects:
 16707 ;;		On entry : 0/0
 16708 ;;		On exit  : 0/0
 16709 ;;		Unchanged: 0/0
 16710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;Total ram usage:        1 bytes
 16716 ;; Hardware stack levels used:    1
 16717 ;; Hardware stack levels required when called:    5
 16718 ;; This function calls:
 16719 ;;		Nothing
 16720 ;; This function is called by:
 16721 ;;		_main
 16722 ;; This function uses a non-reentrant model
 16723 ;;
 16724                           
 16725                           
 16726                           ;psect for function _Buzzer_Initialization
 16727  1C6C                     _Buzzer_Initialization:	
 16728                           
 16729                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 16730                           
 16731                           ;incstack = 0
 16732                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 16733  1C6C  30C7               	movlw	_Buz1& (0+255)
 16734  1C6D  0020               	movlb	0	; select bank0
 16735  1C6E  00A0               	movwf	??_Buzzer_Initialization
 16736  1C6F  0820               	movf	??_Buzzer_Initialization,w
 16737  1C70  0021               	movlb	1	; select bank1
 16738  1C71  00B7               	movwf	_Buz^(0+128)
 16739                           
 16740                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 16741  1C72  0837               	movf	_Buz^(0+128),w
 16742  1C73  0086               	movwf	6
 16743  1C74  0187               	clrf	7
 16744  1C75  1401               	bsf	1,0
 16745  1C76  0008               	return
 16746  1C77                     __end_of_Buzzer_Initialization:	
 16747                           
 16748                           	psect	intentry
 16749  0004                     __pintentry:	
 16750 ;; *************** function _ISR *****************
 16751 ;; Defined at:
 16752 ;;		line 109 in file "../src/MCU_B1.c"
 16753 ;; Parameters:    Size  Location     Type
 16754 ;;		None
 16755 ;; Auto vars:     Size  Location     Type
 16756 ;;		None
 16757 ;; Return value:  Size  Location     Type
 16758 ;;		None               void
 16759 ;; Registers used:
 16760 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16761 ;; Tracked objects:
 16762 ;;		On entry : 0/0
 16763 ;;		On exit  : 0/0
 16764 ;;		Unchanged: 0/0
 16765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;Total ram usage:        1 bytes
 16771 ;; Hardware stack levels used:    1
 16772 ;; Hardware stack levels required when called:    4
 16773 ;; This function calls:
 16774 ;;		_INT_ISR
 16775 ;;		_IOC_ISR
 16776 ;;		_TMR0_ISR
 16777 ;; This function is called by:
 16778 ;;		Interrupt level 1
 16779 ;; This function uses a non-reentrant model
 16780 ;;
 16781                           
 16782  0004                     _ISR:	
 16783                           
 16784                           ;incstack = 0
 16785                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16786  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16787  0005  3180               	pagesel	$
 16788  0006  0020               	movlb	0	; select bank0
 16789  0007  087F               	movf	127,w
 16790  0008  00F7               	movwf	??_ISR
 16791                           
 16792                           ;MCU_B1.c: 111: IOC_ISR();
 16793  0009  319D  25C9  3180   	fcall	_IOC_ISR
 16794                           
 16795                           ;MCU_B1.c: 113: TMR0_ISR();
 16796  000C  3191  2167  3180   	fcall	_TMR0_ISR
 16797                           
 16798                           ;MCU_B1.c: 115: ;;
 16799                           ;MCU_B1.c: 119: INT_ISR();
 16800  000F  319C  2498         	fcall	_INT_ISR
 16801  0011  0877               	movf	??_ISR,w
 16802  0012  0020               	movlb	0	; select bank0
 16803  0013  00FF               	movwf	127
 16804  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 16805  0015  0009               	retfie
 16806  0016                     __end_of_ISR:	
 16807                           
 16808                           	psect	text115
 16809  1167                     __ptext115:	
 16810 ;; *************** function _TMR0_ISR *****************
 16811 ;; Defined at:
 16812 ;;		line 137 in file "../src/MCU_B1.c"
 16813 ;; Parameters:    Size  Location     Type
 16814 ;;		None
 16815 ;; Auto vars:     Size  Location     Type
 16816 ;;		None
 16817 ;; Return value:  Size  Location     Type
 16818 ;;		None               void
 16819 ;; Registers used:
 16820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16821 ;; Tracked objects:
 16822 ;;		On entry : 0/0
 16823 ;;		On exit  : 0/0
 16824 ;;		Unchanged: 0/0
 16825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16830 ;;Total ram usage:        0 bytes
 16831 ;; Hardware stack levels used:    1
 16832 ;; Hardware stack levels required when called:    2
 16833 ;; This function calls:
 16834 ;;		_setDimmerLights_IntrControl
 16835 ;; This function is called by:
 16836 ;;		_ISR
 16837 ;; This function uses a non-reentrant model
 16838 ;;
 16839                           
 16840                           
 16841                           ;psect for function _TMR0_ISR
 16842  1167                     _TMR0_ISR:	
 16843                           
 16844                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 16845                           
 16846                           ;incstack = 0
 16847                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16848  1167  1E8B               	btfss	11,5	;volatile
 16849  1168  0008               	return
 16850  1169  1D0B               	btfss	11,2	;volatile
 16851  116A  0008               	return
 16852                           
 16853                           ;MCU_B1.c: 139: TMR0 = (256-190);
 16854  116B  3042               	movlw	66
 16855  116C  0020               	movlb	0	; select bank0
 16856  116D  0095               	movwf	21	;volatile
 16857                           
 16858                           ;MCU_B1.c: 140: TMR0IF = 0;
 16859  116E  110B               	bcf	11,2	;volatile
 16860                           
 16861                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 16862  116F  3001               	movlw	1
 16863  1170  3180  2044  3191   	fcall	_setDimmerLights_IntrControl
 16864                           
 16865                           ;MCU_B1.c: 161: Timer0->Count++;
 16866  1173  0021               	movlb	1	; select bank1
 16867  1174  0A6D               	incf	_Timer0^(0+128),w
 16868  1175  0086               	movwf	6
 16869  1176  3001               	movlw	1	; select bank2/3
 16870  1177  0087               	movwf	7
 16871  1178  3001               	movlw	1
 16872  1179  0781               	addwf	1,f
 16873  117A  3141               	addfsr 1,1
 16874  117B  1803               	skipnc
 16875  117C  0A81               	incf	1,f
 16876                           
 16877                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 16878  117D  0A6D               	incf	_Timer0^(0+128),w
 16879  117E  0086               	movwf	6
 16880  117F  3001               	movlw	1	; select bank2/3
 16881  1180  0087               	movwf	7
 16882  1181  3F40               	moviw [0]fsr1
 16883  1182  3A64               	xorlw	100
 16884  1183  1D03               	skipz
 16885  1184  2987               	goto	u617_25
 16886  1185  3F41               	moviw [1]fsr1
 16887  1186  3A00               	xorlw	0
 16888  1187                     u617_25:	
 16889  1187  1D03               	skipz
 16890  1188  0008               	return
 16891                           
 16892                           ;MCU_B1.c: 163: Timer0->Count = 0;
 16893  1189  0A6D               	incf	_Timer0^(0+128),w
 16894  118A  0086               	movwf	6
 16895  118B  3001               	movlw	1	; select bank2/3
 16896  118C  0087               	movwf	7
 16897  118D  3000               	movlw	0
 16898  118E  3FC0               	movwi [0]fsr1
 16899  118F  3FC1               	movwi [1]fsr1
 16900                           
 16901                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 16902  1190  086E               	movf	_myMain^(0+128),w
 16903  1191  0086               	movwf	6
 16904  1192  3001               	movlw	1	; select bank2/3
 16905  1193  0087               	movwf	7
 16906  1194  1481               	bsf	1,1
 16907  1195  0008               	return
 16908  1196                     __end_of_TMR0_ISR:	
 16909                           
 16910                           	psect	text116
 16911  0044                     __ptext116:	
 16912 ;; *************** function _setDimmerLights_IntrControl *****************
 16913 ;; Defined at:
 16914 ;;		line 87 in file "../src/Dimmer_B1.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;  lights          1    wreg     unsigned char 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  lights          1    6[COMMON] unsigned char 
 16919 ;; Return value:  Size  Location     Type
 16920 ;;		None               void
 16921 ;; Registers used:
 16922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16923 ;; Tracked objects:
 16924 ;;		On entry : 0/0
 16925 ;;		On exit  : 0/0
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        5 bytes
 16933 ;; Hardware stack levels used:    1
 16934 ;; Hardware stack levels required when called:    1
 16935 ;; This function calls:
 16936 ;;		_DimmerIntrPointSelect
 16937 ;; This function is called by:
 16938 ;;		_TMR0_ISR
 16939 ;; This function uses a non-reentrant model
 16940 ;;
 16941                           
 16942                           
 16943                           ;psect for function _setDimmerLights_IntrControl
 16944  0044                     _setDimmerLights_IntrControl:	
 16945                           
 16946                           ;incstack = 0
 16947                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16948                           ;setDimmerLights_IntrControl@lights stored from wreg
 16949  0044  00F6               	movwf	setDimmerLights_IntrControl@lights
 16950                           
 16951                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16952  0045  0876               	movf	setDimmerLights_IntrControl@lights,w
 16953  0046  319C  244D  3180   	fcall	_DimmerIntrPointSelect
 16954                           
 16955                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16956  0049  0879               	movf	_DimmerLightsIntr,w
 16957  004A  0086               	movwf	6
 16958  004B  3001               	movlw	1	; select bank2/3
 16959  004C  0087               	movwf	7
 16960  004D  1C01               	btfss	1,0
 16961  004E  28A4               	goto	i1l6322
 16962                           
 16963                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16964  004F  3001               	movlw	1
 16965  0050  00F2               	movwf	??_setDimmerLights_IntrControl
 16966  0051  0879               	movf	_DimmerLightsIntr,w
 16967  0052  3E03               	addlw	3
 16968  0053  0086               	movwf	6
 16969  0054  3001               	movlw	1	; select bank2/3
 16970  0055  0087               	movwf	7
 16971  0056  0872               	movf	??_setDimmerLights_IntrControl,w
 16972  0057  0781               	addwf	1,f
 16973                           
 16974                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16975  0058  0021               	movlb	1	; select bank1
 16976  0059  083A               	movf	_Dimmer^(0+128),w
 16977  005A  3E02               	addlw	2
 16978  005B  0086               	movwf	6
 16979  005C  0187               	clrf	7
 16980  005D  0801               	movf	1,w
 16981  005E  00F2               	movwf	??_setDimmerLights_IntrControl
 16982  005F  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16983  0060  09F2               	comf	??_setDimmerLights_IntrControl,f
 16984  0061  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16985  0062  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16986  0063  1903               	skipnz
 16987  0064  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16988  0065  0879               	movf	_DimmerLightsIntr,w
 16989  0066  3E04               	addlw	4
 16990  0067  0086               	movwf	6
 16991  0068  3001               	movlw	1	; select bank2/3
 16992  0069  0087               	movwf	7
 16993  006A  0801               	movf	1,w
 16994  006B  0772               	addwf	??_setDimmerLights_IntrControl,w
 16995  006C  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16996  006D  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16997  006E  1803               	skipnc
 16998  006F  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 16999  0070  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17000  0071  0879               	movf	_DimmerLightsIntr,w
 17001  0072  3E03               	addlw	3
 17002  0073  0086               	movwf	6
 17003  0074  3001               	movlw	1	; select bank2/3
 17004  0075  0087               	movwf	7
 17005  0076  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17006  0077  3A80               	xorlw	128
 17007  0078  3C80               	sublw	128
 17008  0079  1D03               	skipz
 17009  007A  287D               	goto	u516_25
 17010  007B  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17011  007C  0201               	subwf	1,w
 17012  007D                     u516_25:	
 17013  007D  1C03               	skipc
 17014  007E  29A8               	goto	i1l6380
 17015                           
 17016                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17017  007F  0879               	movf	_DimmerLightsIntr,w
 17018  0080  3E03               	addlw	3
 17019  0081  0086               	movwf	6
 17020  0082  3001               	movlw	1	; select bank2/3
 17021  0083  0087               	movwf	7
 17022  0084  0181               	clrf	1
 17023                           
 17024                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17025  0085  0879               	movf	_DimmerLightsIntr,w
 17026  0086  0086               	movwf	6
 17027  0087  3001               	movlw	1	; select bank2/3
 17028  0088  0087               	movwf	7
 17029  0089  1001               	bcf	1,0
 17030                           
 17031                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17032  008A  0879               	movf	_DimmerLightsIntr,w
 17033  008B  0086               	movwf	6
 17034  008C  3001               	movlw	1	; select bank2/3
 17035  008D  0087               	movwf	7
 17036  008E  1F01               	btfss	1,6
 17037  008F  29A8               	goto	i1l6380
 17038                           
 17039                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17040  0090  0879               	movf	_DimmerLightsIntr,w
 17041  0091  3E08               	addlw	8
 17042  0092  0086               	movwf	6
 17043  0093  3001               	movlw	1	; select bank2/3
 17044  0094  0087               	movwf	7
 17045  0095  1401               	bsf	1,0
 17046                           
 17047                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17048  0096  0879               	movf	_DimmerLightsIntr,w
 17049  0097  3E08               	addlw	8
 17050  0098  0086               	movwf	6
 17051  0099  3001               	movlw	1	; select bank2/3
 17052  009A  0087               	movwf	7
 17053  009B  1681               	bsf	1,5
 17054                           
 17055                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17056  009C  0876               	movf	setDimmerLights_IntrControl@lights,w
 17057  009D  3A01               	xorlw	1
 17058  009E  1D03               	skipz
 17059  009F  29A8               	goto	i1l6380
 17060                           
 17061                           ;Dimmer_B1.c: 101: RA7 = 1;
 17062  00A0  0020               	movlb	0	; select bank0
 17063  00A1  178C               	bsf	12,7	;volatile
 17064                           
 17065                           ;Dimmer_B1.c: 102: RB4=1;
 17066  00A2  160D               	bsf	13,4	;volatile
 17067                           
 17068                           ;Dimmer_B1.c: 103: }
 17069                           ;Dimmer_B1.c: 115: }
 17070                           ;Dimmer_B1.c: 116: }
 17071                           ;Dimmer_B1.c: 117: } else {
 17072  00A3  29A8               	goto	i1l6380
 17073  00A4                     i1l6322:	
 17074                           
 17075                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17076  00A4  0879               	movf	_DimmerLightsIntr,w
 17077  00A5  3E08               	addlw	8
 17078  00A6  0086               	movwf	6
 17079  00A7  3001               	movlw	1	; select bank2/3
 17080  00A8  0087               	movwf	7
 17081  00A9  1C01               	btfss	1,0
 17082  00AA  29A8               	goto	i1l6380
 17083                           
 17084                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17085  00AB  0879               	movf	_DimmerLightsIntr,w
 17086  00AC  3E08               	addlw	8
 17087  00AD  0086               	movwf	6
 17088  00AE  3001               	movlw	1	; select bank2/3
 17089  00AF  0087               	movwf	7
 17090  00B0  1001               	bcf	1,0
 17091                           
 17092                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17093  00B1  0879               	movf	_DimmerLightsIntr,w
 17094  00B2  0086               	movwf	6
 17095  00B3  3001               	movlw	1	; select bank2/3
 17096  00B4  0087               	movwf	7
 17097  00B5  1C81               	btfss	1,1
 17098  00B6  29A8               	goto	i1l6380
 17099                           
 17100                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17101  00B7  3001               	movlw	1
 17102  00B8  00F2               	movwf	??_setDimmerLights_IntrControl
 17103  00B9  0A79               	incf	_DimmerLightsIntr,w
 17104  00BA  0086               	movwf	6
 17105  00BB  3001               	movlw	1	; select bank2/3
 17106  00BC  0087               	movwf	7
 17107  00BD  0872               	movf	??_setDimmerLights_IntrControl,w
 17108  00BE  0781               	addwf	1,f
 17109                           
 17110                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17111  00BF  0A79               	incf	_DimmerLightsIntr,w
 17112  00C0  0086               	movwf	6
 17113  00C1  3001               	movlw	1	; select bank2/3
 17114  00C2  0087               	movwf	7
 17115  00C3  0879               	movf	_DimmerLightsIntr,w
 17116  00C4  3E02               	addlw	2
 17117  00C5  0084               	movwf	4
 17118  00C6  3001               	movlw	1	; select bank2/3
 17119  00C7  0085               	movwf	5
 17120  00C8  0800               	movf	0,w
 17121  00C9  0201               	subwf	1,w
 17122  00CA  1C03               	skipc
 17123  00CB  29A8               	goto	i1l6380
 17124                           
 17125                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17126  00CC  0A79               	incf	_DimmerLightsIntr,w
 17127  00CD  0086               	movwf	6
 17128  00CE  3001               	movlw	1	; select bank2/3
 17129  00CF  0087               	movwf	7
 17130  00D0  0181               	clrf	1
 17131                           
 17132                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17133  00D1  0879               	movf	_DimmerLightsIntr,w
 17134  00D2  0086               	movwf	6
 17135  00D3  3001               	movlw	1	; select bank2/3
 17136  00D4  0087               	movwf	7
 17137  00D5  1D81               	btfss	1,3
 17138  00D6  290D               	goto	i1l6348
 17139                           
 17140                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17141  00D7  0879               	movf	_DimmerLightsIntr,w
 17142  00D8  0086               	movwf	6
 17143  00D9  3001               	movlw	1	; select bank2/3
 17144  00DA  0087               	movwf	7
 17145  00DB  1A01               	btfsc	1,4
 17146  00DC  28F4               	goto	i1l6342
 17147                           
 17148                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17149  00DD  0879               	movf	_DimmerLightsIntr,w
 17150  00DE  3E04               	addlw	4
 17151  00DF  0086               	movwf	6
 17152  00E0  3001               	movlw	1	; select bank2/3
 17153  00E1  0087               	movwf	7
 17154  00E2  3021               	movlw	33
 17155  00E3  0201               	subwf	1,w
 17156  00E4  1C03               	skipc
 17157  00E5  28EE               	goto	i1l6340
 17158                           
 17159                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17160  00E6  0879               	movf	_DimmerLightsIntr,w
 17161  00E7  3E04               	addlw	4
 17162  00E8  0086               	movwf	6
 17163  00E9  3001               	movlw	1	; select bank2/3
 17164  00EA  0087               	movwf	7
 17165  00EB  3001               	movlw	1
 17166  00EC  0281               	subwf	1,f
 17167                           
 17168                           ;Dimmer_B1.c: 128: } else {
 17169  00ED  29A8               	goto	i1l6380
 17170  00EE                     i1l6340:	
 17171                           
 17172                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17173  00EE  0879               	movf	_DimmerLightsIntr,w
 17174  00EF  0086               	movwf	6
 17175  00F0  3001               	movlw	1	; select bank2/3
 17176  00F1  0087               	movwf	7
 17177  00F2  1601               	bsf	1,4
 17178                           
 17179                           ;Dimmer_B1.c: 130: }
 17180                           ;Dimmer_B1.c: 131: } else {
 17181  00F3  29A8               	goto	i1l6380
 17182  00F4                     i1l6342:	
 17183                           
 17184                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17185  00F4  0879               	movf	_DimmerLightsIntr,w
 17186  00F5  3E04               	addlw	4
 17187  00F6  0086               	movwf	6
 17188  00F7  3001               	movlw	1	; select bank2/3
 17189  00F8  0087               	movwf	7
 17190  00F9  303C               	movlw	60
 17191  00FA  0201               	subwf	1,w
 17192  00FB  1803               	skipnc
 17193  00FC  2907               	goto	i1l6346
 17194                           
 17195                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17196  00FD  3001               	movlw	1
 17197  00FE  00F2               	movwf	??_setDimmerLights_IntrControl
 17198  00FF  0879               	movf	_DimmerLightsIntr,w
 17199  0100  3E04               	addlw	4
 17200  0101  0086               	movwf	6
 17201  0102  3001               	movlw	1	; select bank2/3
 17202  0103  0087               	movwf	7
 17203  0104  0872               	movf	??_setDimmerLights_IntrControl,w
 17204  0105  0781               	addwf	1,f
 17205                           
 17206                           ;Dimmer_B1.c: 134: } else {
 17207  0106  29A8               	goto	i1l6380
 17208  0107                     i1l6346:	
 17209                           
 17210                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17211  0107  0879               	movf	_DimmerLightsIntr,w
 17212  0108  0086               	movwf	6
 17213  0109  3001               	movlw	1	; select bank2/3
 17214  010A  0087               	movwf	7
 17215  010B  1201               	bcf	1,4
 17216                           
 17217                           ;Dimmer_B1.c: 136: }
 17218                           ;Dimmer_B1.c: 137: }
 17219                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17220  010C  29A8               	goto	i1l6380
 17221  010D                     i1l6348:	
 17222  010D  0879               	movf	_DimmerLightsIntr,w
 17223  010E  0086               	movwf	6
 17224  010F  3001               	movlw	1	; select bank2/3
 17225  0110  0087               	movwf	7
 17226  0111  1D01               	btfss	1,2
 17227  0112  2954               	goto	i1l6362
 17228                           
 17229                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17230  0113  0879               	movf	_DimmerLightsIntr,w
 17231  0114  3E05               	addlw	5
 17232  0115  0086               	movwf	6
 17233  0116  3001               	movlw	1	; select bank2/3
 17234  0117  0087               	movwf	7
 17235  0118  0879               	movf	_DimmerLightsIntr,w
 17236  0119  3E04               	addlw	4
 17237  011A  0084               	movwf	4
 17238  011B  3001               	movlw	1	; select bank2/3
 17239  011C  0085               	movwf	5
 17240  011D  0800               	movf	0,w
 17241  011E  0201               	subwf	1,w
 17242  011F  1803               	skipnc
 17243  0120  2929               	goto	i1l6354
 17244                           
 17245                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17246  0121  0879               	movf	_DimmerLightsIntr,w
 17247  0122  3E04               	addlw	4
 17248  0123  0086               	movwf	6
 17249  0124  3001               	movlw	1	; select bank2/3
 17250  0125  0087               	movwf	7
 17251  0126  3001               	movlw	1
 17252  0127  0281               	subwf	1,f
 17253                           
 17254                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17255  0128  2940               	goto	i1l6358
 17256  0129                     i1l6354:	
 17257  0129  0879               	movf	_DimmerLightsIntr,w
 17258  012A  3E04               	addlw	4
 17259  012B  0086               	movwf	6
 17260  012C  3001               	movlw	1	; select bank2/3
 17261  012D  0087               	movwf	7
 17262  012E  0879               	movf	_DimmerLightsIntr,w
 17263  012F  3E05               	addlw	5
 17264  0130  0084               	movwf	4
 17265  0131  3001               	movlw	1	; select bank2/3
 17266  0132  0085               	movwf	5
 17267  0133  0800               	movf	0,w
 17268  0134  0201               	subwf	1,w
 17269  0135  1803               	skipnc
 17270  0136  2940               	goto	i1l6358
 17271                           
 17272                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17273  0137  3001               	movlw	1
 17274  0138  00F2               	movwf	??_setDimmerLights_IntrControl
 17275  0139  0879               	movf	_DimmerLightsIntr,w
 17276  013A  3E04               	addlw	4
 17277  013B  0086               	movwf	6
 17278  013C  3001               	movlw	1	; select bank2/3
 17279  013D  0087               	movwf	7
 17280  013E  0872               	movf	??_setDimmerLights_IntrControl,w
 17281  013F  0781               	addwf	1,f
 17282  0140                     i1l6358:	
 17283                           
 17284                           ;Dimmer_B1.c: 143: }
 17285                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17286  0140  0879               	movf	_DimmerLightsIntr,w
 17287  0141  3E05               	addlw	5
 17288  0142  0086               	movwf	6
 17289  0143  3001               	movlw	1	; select bank2/3
 17290  0144  0087               	movwf	7
 17291  0145  0879               	movf	_DimmerLightsIntr,w
 17292  0146  3E04               	addlw	4
 17293  0147  0084               	movwf	4
 17294  0148  3001               	movlw	1	; select bank2/3
 17295  0149  0085               	movwf	5
 17296  014A  0800               	movf	0,w
 17297  014B  0601               	xorwf	1,w
 17298  014C  1D03               	skipz
 17299  014D  29A8               	goto	i1l6380
 17300                           
 17301                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17302  014E  0879               	movf	_DimmerLightsIntr,w
 17303  014F  0086               	movwf	6
 17304  0150  3001               	movlw	1	; select bank2/3
 17305  0151  0087               	movwf	7
 17306  0152  1101               	bcf	1,2
 17307  0153  296F               	goto	i1l6368
 17308  0154                     i1l6362:	
 17309                           ;Dimmer_B1.c: 147: }
 17310                           ;Dimmer_B1.c: 148: } else {
 17311                           
 17312                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17313                           
 17314                           
 17315                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17316  0154  0879               	movf	_DimmerLightsIntr,w
 17317  0155  0086               	movwf	6
 17318  0156  3001               	movlw	1	; select bank2/3
 17319  0157  0087               	movwf	7
 17320  0158  1E81               	btfss	1,5
 17321  0159  2975               	goto	i1l6370
 17322                           
 17323                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17324  015A  0879               	movf	_DimmerLightsIntr,w
 17325  015B  3E04               	addlw	4
 17326  015C  0086               	movwf	6
 17327  015D  3001               	movlw	1	; select bank2/3
 17328  015E  0087               	movwf	7
 17329  015F  3001               	movlw	1
 17330  0160  0281               	subwf	1,f
 17331                           
 17332                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17333  0161  0879               	movf	_DimmerLightsIntr,w
 17334  0162  3E05               	addlw	5
 17335  0163  0086               	movwf	6
 17336  0164  3001               	movlw	1	; select bank2/3
 17337  0165  0087               	movwf	7
 17338  0166  0879               	movf	_DimmerLightsIntr,w
 17339  0167  3E04               	addlw	4
 17340  0168  0084               	movwf	4
 17341  0169  3001               	movlw	1	; select bank2/3
 17342  016A  0085               	movwf	5
 17343  016B  0800               	movf	0,w
 17344  016C  0201               	subwf	1,w
 17345  016D  1C03               	skipc
 17346  016E  29A8               	goto	i1l6380
 17347  016F                     i1l6368:	
 17348                           
 17349                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17350  016F  0879               	movf	_DimmerLightsIntr,w
 17351  0170  0086               	movwf	6
 17352  0171  3001               	movlw	1	; select bank2/3
 17353  0172  0087               	movwf	7
 17354  0173  1081               	bcf	1,1
 17355                           
 17356                           ;Dimmer_B1.c: 153: }
 17357                           ;Dimmer_B1.c: 154: } else {
 17358  0174  29A8               	goto	i1l6380
 17359  0175                     i1l6370:	
 17360                           
 17361                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17362  0175  3001               	movlw	1
 17363  0176  00F2               	movwf	??_setDimmerLights_IntrControl
 17364  0177  0879               	movf	_DimmerLightsIntr,w
 17365  0178  3E04               	addlw	4
 17366  0179  0086               	movwf	6
 17367  017A  3001               	movlw	1	; select bank2/3
 17368  017B  0087               	movwf	7
 17369  017C  0872               	movf	??_setDimmerLights_IntrControl,w
 17370  017D  0781               	addwf	1,f
 17371                           
 17372                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17373  017E  0879               	movf	_DimmerLightsIntr,w
 17374  017F  3E04               	addlw	4
 17375  0180  0086               	movwf	6
 17376  0181  3001               	movlw	1	; select bank2/3
 17377  0182  0087               	movwf	7
 17378  0183  0879               	movf	_DimmerLightsIntr,w
 17379  0184  3E06               	addlw	6
 17380  0185  0084               	movwf	4
 17381  0186  3001               	movlw	1	; select bank2/3
 17382  0187  0085               	movwf	5
 17383  0188  0800               	movf	0,w
 17384  0189  0201               	subwf	1,w
 17385  018A  1C03               	skipc
 17386  018B  29A8               	goto	i1l6380
 17387                           
 17388                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17389  018C  0879               	movf	_DimmerLightsIntr,w
 17390  018D  0086               	movwf	6
 17391  018E  3001               	movlw	1	; select bank2/3
 17392  018F  0087               	movwf	7
 17393  0190  1081               	bcf	1,1
 17394                           
 17395                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17396  0191  0879               	movf	_DimmerLightsIntr,w
 17397  0192  0086               	movwf	6
 17398  0193  3001               	movlw	1	; select bank2/3
 17399  0194  0087               	movwf	7
 17400  0195  1301               	bcf	1,6
 17401                           
 17402                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17403  0196  0879               	movf	_DimmerLightsIntr,w
 17404  0197  3E09               	addlw	9
 17405  0198  0086               	movwf	6
 17406  0199  3001               	movlw	1	; select bank2/3
 17407  019A  0087               	movwf	7
 17408  019B  1501               	bsf	1,2
 17409                           
 17410                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17411  019C  0021               	movlb	1	; select bank1
 17412  019D  083A               	movf	_Dimmer^(0+128),w
 17413  019E  0086               	movwf	6
 17414  019F  0187               	clrf	7
 17415  01A0  1401               	bsf	1,0
 17416                           
 17417                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17418  01A1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17419  01A2  3A01               	xorlw	1
 17420  01A3  1D03               	skipz
 17421  01A4  29A8               	goto	i1l6380
 17422                           
 17423                           ;Dimmer_B1.c: 163: RA3 = 0;
 17424  01A5  0020               	movlb	0	; select bank0
 17425  01A6  118C               	bcf	12,3	;volatile
 17426                           
 17427                           ;Dimmer_B1.c: 164: RC7=!1;
 17428  01A7  138E               	bcf	14,7	;volatile
 17429  01A8                     i1l6380:	
 17430                           ;Dimmer_B1.c: 165: }
 17431                           ;Dimmer_B1.c: 177: ;;
 17432                           
 17433                           
 17434                           ;Dimmer_B1.c: 178: }
 17435                           ;Dimmer_B1.c: 179: }
 17436                           ;Dimmer_B1.c: 180: }
 17437                           ;Dimmer_B1.c: 181: }
 17438                           ;Dimmer_B1.c: 182: }
 17439                           ;Dimmer_B1.c: 183: }
 17440                           ;Dimmer_B1.c: 184: }
 17441                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17442  01A8  0879               	movf	_DimmerLightsIntr,w
 17443  01A9  3E08               	addlw	8
 17444  01AA  0086               	movwf	6
 17445  01AB  3001               	movlw	1	; select bank2/3
 17446  01AC  0087               	movwf	7
 17447  01AD  1E81               	btfss	1,5
 17448  01AE  29D4               	goto	i1l6394
 17449                           
 17450                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17451  01AF  3001               	movlw	1
 17452  01B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17453  01B1  0879               	movf	_DimmerLightsIntr,w
 17454  01B2  3E07               	addlw	7
 17455  01B3  0086               	movwf	6
 17456  01B4  3001               	movlw	1	; select bank2/3
 17457  01B5  0087               	movwf	7
 17458  01B6  0872               	movf	??_setDimmerLights_IntrControl,w
 17459  01B7  0781               	addwf	1,f
 17460                           
 17461                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17462  01B8  0879               	movf	_DimmerLightsIntr,w
 17463  01B9  3E07               	addlw	7
 17464  01BA  0086               	movwf	6
 17465  01BB  3001               	movlw	1	; select bank2/3
 17466  01BC  0087               	movwf	7
 17467  01BD  3005               	movlw	5
 17468  01BE  0201               	subwf	1,w
 17469  01BF  1C03               	skipc
 17470  01C0  29D4               	goto	i1l6394
 17471                           
 17472                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17473  01C1  0879               	movf	_DimmerLightsIntr,w
 17474  01C2  3E07               	addlw	7
 17475  01C3  0086               	movwf	6
 17476  01C4  3001               	movlw	1	; select bank2/3
 17477  01C5  0087               	movwf	7
 17478  01C6  0181               	clrf	1
 17479                           
 17480                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17481  01C7  0879               	movf	_DimmerLightsIntr,w
 17482  01C8  3E08               	addlw	8
 17483  01C9  0086               	movwf	6
 17484  01CA  3001               	movlw	1	; select bank2/3
 17485  01CB  0087               	movwf	7
 17486  01CC  1281               	bcf	1,5
 17487                           
 17488                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17489  01CD  0876               	movf	setDimmerLights_IntrControl@lights,w
 17490  01CE  3A01               	xorlw	1
 17491  01CF  1D03               	skipz
 17492  01D0  29D4               	goto	i1l6394
 17493                           
 17494                           ;Dimmer_B1.c: 193: RA7 = 0;
 17495  01D1  0020               	movlb	0	; select bank0
 17496  01D2  138C               	bcf	12,7	;volatile
 17497                           
 17498                           ;Dimmer_B1.c: 194: RB4=0;
 17499  01D3  120D               	bcf	13,4	;volatile
 17500  01D4                     i1l6394:	
 17501                           
 17502                           ;Dimmer_B1.c: 195: }
 17503                           ;Dimmer_B1.c: 207: }
 17504                           ;Dimmer_B1.c: 208: }
 17505                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17506  01D4  0879               	movf	_DimmerLightsIntr,w
 17507  01D5  3E09               	addlw	9
 17508  01D6  0086               	movwf	6
 17509  01D7  3001               	movlw	1	; select bank2/3
 17510  01D8  0087               	movwf	7
 17511  01D9  1E81               	btfss	1,5
 17512  01DA  0008               	return
 17513                           
 17514                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17515  01DB  3001               	movlw	1
 17516  01DC  00F2               	movwf	??_setDimmerLights_IntrControl
 17517  01DD  0879               	movf	_DimmerLightsIntr,w
 17518  01DE  3E0A               	addlw	10
 17519  01DF  0086               	movwf	6
 17520  01E0  3001               	movlw	1	; select bank2/3
 17521  01E1  0087               	movwf	7
 17522  01E2  0872               	movf	??_setDimmerLights_IntrControl,w
 17523  01E3  0781               	addwf	1,f
 17524                           
 17525                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17526  01E4  0879               	movf	_DimmerLightsIntr,w
 17527  01E5  3E0A               	addlw	10
 17528  01E6  0086               	movwf	6
 17529  01E7  3001               	movlw	1	; select bank2/3
 17530  01E8  0087               	movwf	7
 17531  01E9  0801               	movf	1,w
 17532  01EA  3A46               	xorlw	70
 17533  01EB  1D03               	skipz
 17534  01EC  0008               	return
 17535                           
 17536                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17537  01ED  0879               	movf	_DimmerLightsIntr,w
 17538  01EE  3E0A               	addlw	10
 17539  01EF  0086               	movwf	6
 17540  01F0  3001               	movlw	1	; select bank2/3
 17541  01F1  0087               	movwf	7
 17542  01F2  0181               	clrf	1
 17543                           
 17544                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17545  01F3  0879               	movf	_DimmerLightsIntr,w
 17546  01F4  3E09               	addlw	9
 17547  01F5  0086               	movwf	6
 17548  01F6  3001               	movlw	1	; select bank2/3
 17549  01F7  0087               	movwf	7
 17550  01F8  1281               	bcf	1,5
 17551  01F9  0008               	return
 17552  01FA                     __end_of_setDimmerLights_IntrControl:	
 17553                           
 17554                           	psect	text117
 17555  1C4D                     __ptext117:	
 17556 ;; *************** function _DimmerIntrPointSelect *****************
 17557 ;; Defined at:
 17558 ;;		line 65 in file "../src/Dimmer_B1.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;  lights          1    wreg     unsigned char 
 17561 ;; Auto vars:     Size  Location     Type
 17562 ;;  lights          1    1[COMMON] unsigned char 
 17563 ;; Return value:  Size  Location     Type
 17564 ;;		None               void
 17565 ;; Registers used:
 17566 ;;		wreg
 17567 ;; Tracked objects:
 17568 ;;		On entry : 0/0
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;Total ram usage:        2 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; This function calls:
 17579 ;;		Nothing
 17580 ;; This function is called by:
 17581 ;;		_setDimmerLights_IntrControl
 17582 ;; This function uses a non-reentrant model
 17583 ;;
 17584                           
 17585                           
 17586                           ;psect for function _DimmerIntrPointSelect
 17587  1C4D                     _DimmerIntrPointSelect:	
 17588                           
 17589                           ;incstack = 0
 17590                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17591                           ;DimmerIntrPointSelect@lights stored from wreg
 17592  1C4D  00F1               	movwf	DimmerIntrPointSelect@lights
 17593                           
 17594                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17595  1C4E  0871               	movf	DimmerIntrPointSelect@lights,w
 17596  1C4F  3A01               	xorlw	1
 17597  1C50  1D03               	skipz
 17598  1C51  0008               	return
 17599                           
 17600                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17601  1C52  3034               	movlw	_DimmerLights1& (0+255)
 17602  1C53  00F0               	movwf	??_DimmerIntrPointSelect
 17603  1C54  0870               	movf	??_DimmerIntrPointSelect,w
 17604  1C55  00F9               	movwf	_DimmerLightsIntr
 17605  1C56  0008               	return
 17606  1C57                     __end_of_DimmerIntrPointSelect:	
 17607                           
 17608                           	psect	text118
 17609  1DC9                     __ptext118:	
 17610 ;; *************** function _IOC_ISR *****************
 17611 ;; Defined at:
 17612 ;;		line 297 in file "../src/MCU_B1.c"
 17613 ;; Parameters:    Size  Location     Type
 17614 ;;		None
 17615 ;; Auto vars:     Size  Location     Type
 17616 ;;		None
 17617 ;; Return value:  Size  Location     Type
 17618 ;;		None               void
 17619 ;; Registers used:
 17620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17621 ;; Tracked objects:
 17622 ;;		On entry : 0/0
 17623 ;;		On exit  : 0/0
 17624 ;;		Unchanged: 0/0
 17625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17630 ;;Total ram usage:        0 bytes
 17631 ;; Hardware stack levels used:    1
 17632 ;; Hardware stack levels required when called:    3
 17633 ;; This function calls:
 17634 ;;		_setDimmerReClock
 17635 ;; This function is called by:
 17636 ;;		_ISR
 17637 ;; This function uses a non-reentrant model
 17638 ;;
 17639                           
 17640                           
 17641                           ;psect for function _IOC_ISR
 17642  1DC9                     _IOC_ISR:	
 17643                           
 17644                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 17645                           
 17646                           ;incstack = 0
 17647                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17648  1DC9  1D8B               	btfss	11,3	;volatile
 17649  1DCA  0008               	return
 17650  1DCB  0027               	movlb	7	; select bank7
 17651  1DCC  1D16               	btfss	22,2	;volatile
 17652  1DCD  0008               	return
 17653                           
 17654                           ;MCU_B1.c: 299: IOCBF2 = 0;
 17655  1DCE  1116               	bcf	22,2	;volatile
 17656                           
 17657                           ;MCU_B1.c: 300: IOCIF = 0;
 17658  1DCF  100B               	bcf	11,0	;volatile
 17659                           
 17660                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 17661  1DD0  0021               	movlb	1	; select bank1
 17662  1DD1  086E               	movf	_myMain^(0+128),w
 17663  1DD2  0086               	movwf	6
 17664  1DD3  3001               	movlw	1	; select bank2/3
 17665  1DD4  0087               	movwf	7
 17666  1DD5  1C01               	btfss	1,0
 17667  1DD6  0008               	return
 17668                           
 17669                           ;MCU_B1.c: 303: setDimmerReClock();
 17670  1DD7  319C  2418         	fcall	_setDimmerReClock
 17671  1DD9  0008               	return
 17672  1DDA                     __end_of_IOC_ISR:	
 17673                           
 17674                           	psect	text119
 17675  1C18                     __ptext119:	
 17676 ;; *************** function _setDimmerReClock *****************
 17677 ;; Defined at:
 17678 ;;		line 175 in file "../src/MCU_B1.c"
 17679 ;; Parameters:    Size  Location     Type
 17680 ;;		None
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;		None
 17683 ;; Return value:  Size  Location     Type
 17684 ;;		None               void
 17685 ;; Registers used:
 17686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;Total ram usage:        0 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    2
 17699 ;; This function calls:
 17700 ;;		_setDimmerLights_IntrIOC_GO
 17701 ;; This function is called by:
 17702 ;;		_IOC_ISR
 17703 ;; This function uses a non-reentrant model
 17704 ;;
 17705                           
 17706                           
 17707                           ;psect for function _setDimmerReClock
 17708  1C18                     _setDimmerReClock:	
 17709                           
 17710                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 17711                           
 17712                           ;incstack = 0
 17713                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17714  1C18  3001               	movlw	1
 17715  1C19  319F  271F         	fcall	_setDimmerLights_IntrIOC_GO
 17716                           
 17717                           ;MCU_B1.c: 191: TMR0 = 255;
 17718  1C1B  30FF               	movlw	255
 17719  1C1C  0020               	movlb	0	; select bank0
 17720  1C1D  0095               	movwf	21	;volatile
 17721  1C1E  0008               	return
 17722  1C1F                     __end_of_setDimmerReClock:	
 17723                           
 17724                           	psect	text120
 17725  1F1F                     __ptext120:	
 17726 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17727 ;; Defined at:
 17728 ;;		line 28 in file "../src/Dimmer_B1.c"
 17729 ;; Parameters:    Size  Location     Type
 17730 ;;  lights          1    wreg     unsigned char 
 17731 ;; Auto vars:     Size  Location     Type
 17732 ;;  lights          1    2[COMMON] unsigned char 
 17733 ;; Return value:  Size  Location     Type
 17734 ;;		None               void
 17735 ;; Registers used:
 17736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17737 ;; Tracked objects:
 17738 ;;		On entry : 0/0
 17739 ;;		On exit  : 0/0
 17740 ;;		Unchanged: 0/0
 17741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;Total ram usage:        1 bytes
 17747 ;; Hardware stack levels used:    1
 17748 ;; Hardware stack levels required when called:    1
 17749 ;; This function calls:
 17750 ;;		_DimmerIntrIOCPointSelect
 17751 ;; This function is called by:
 17752 ;;		_setDimmerReClock
 17753 ;; This function uses a non-reentrant model
 17754 ;;
 17755                           
 17756                           
 17757                           ;psect for function _setDimmerLights_IntrIOC_GO
 17758  1F1F                     _setDimmerLights_IntrIOC_GO:	
 17759                           
 17760                           ;incstack = 0
 17761                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17762                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17763  1F1F  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17764                           
 17765                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17766  1F20  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17767  1F21  319C  2461  319F   	fcall	_DimmerIntrIOCPointSelect
 17768                           
 17769                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17770  1F24  0021               	movlb	1	; select bank1
 17771  1F25  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17772  1F26  0086               	movwf	6
 17773  1F27  3001               	movlw	1	; select bank2/3
 17774  1F28  0087               	movwf	7
 17775  1F29  1801               	btfsc	1,0
 17776  1F2A  0008               	return
 17777  1F2B  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17778  1F2C  3E09               	addlw	9
 17779  1F2D  0086               	movwf	6
 17780  1F2E  3001               	movlw	1	; select bank2/3
 17781  1F2F  0087               	movwf	7
 17782  1F30  1A81               	btfsc	1,5
 17783  1F31  0008               	return
 17784                           
 17785                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17786  1F32  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17787  1F33  0086               	movwf	6
 17788  1F34  3001               	movlw	1	; select bank2/3
 17789  1F35  0087               	movwf	7
 17790  1F36  1401               	bsf	1,0
 17791                           
 17792                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17793  1F37  083C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17794  1F38  3E09               	addlw	9
 17795  1F39  0086               	movwf	6
 17796  1F3A  3001               	movlw	1	; select bank2/3
 17797  1F3B  0087               	movwf	7
 17798  1F3C  1681               	bsf	1,5
 17799  1F3D  0008               	return
 17800  1F3E                     __end_of_setDimmerLights_IntrIOC_GO:	
 17801                           
 17802                           	psect	text121
 17803  1C61                     __ptext121:	
 17804 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17805 ;; Defined at:
 17806 ;;		line 8 in file "../src/Dimmer_B1.c"
 17807 ;; Parameters:    Size  Location     Type
 17808 ;;  lights          1    wreg     unsigned char 
 17809 ;; Auto vars:     Size  Location     Type
 17810 ;;  lights          1    1[COMMON] unsigned char 
 17811 ;; Return value:  Size  Location     Type
 17812 ;;		None               void
 17813 ;; Registers used:
 17814 ;;		wreg
 17815 ;; Tracked objects:
 17816 ;;		On entry : 0/0
 17817 ;;		On exit  : 0/0
 17818 ;;		Unchanged: 0/0
 17819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;Total ram usage:        2 bytes
 17825 ;; Hardware stack levels used:    1
 17826 ;; This function calls:
 17827 ;;		Nothing
 17828 ;; This function is called by:
 17829 ;;		_setDimmerLights_IntrIOC_GO
 17830 ;; This function uses a non-reentrant model
 17831 ;;
 17832                           
 17833                           
 17834                           ;psect for function _DimmerIntrIOCPointSelect
 17835  1C61                     _DimmerIntrIOCPointSelect:	
 17836                           
 17837                           ;incstack = 0
 17838                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17839                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17840  1C61  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17841                           
 17842                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17843  1C62  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17844  1C63  3A01               	xorlw	1
 17845  1C64  1D03               	skipz
 17846  1C65  0008               	return
 17847                           
 17848                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17849  1C66  3034               	movlw	_DimmerLights1& (0+255)
 17850  1C67  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17851  1C68  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17852  1C69  0021               	movlb	1	; select bank1
 17853  1C6A  00BC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17854  1C6B  0008               	return
 17855  1C6C                     __end_of_DimmerIntrIOCPointSelect:	
 17856                           
 17857                           	psect	text122
 17858  1C98                     __ptext122:	
 17859 ;; *************** function _INT_ISR *****************
 17860 ;; Defined at:
 17861 ;;		line 250 in file "../src/MCU_B1.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;		None
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;		None
 17866 ;; Return value:  Size  Location     Type
 17867 ;;		None               void
 17868 ;; Registers used:
 17869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17879 ;;Total ram usage:        0 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    2
 17882 ;; This function calls:
 17883 ;;		_setRF_ReceiveGO
 17884 ;; This function is called by:
 17885 ;;		_ISR
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _INT_ISR
 17891  1C98                     _INT_ISR:	
 17892                           
 17893                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 17894                           
 17895                           ;incstack = 0
 17896                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17897  1C98  1E0B               	btfss	11,4	;volatile
 17898  1C99  0008               	return
 17899  1C9A  1C8B               	btfss	11,1	;volatile
 17900  1C9B  0008               	return
 17901                           
 17902                           ;MCU_B1.c: 252: INTF = 0;
 17903  1C9C  108B               	bcf	11,1	;volatile
 17904                           
 17905                           ;MCU_B1.c: 253: INTE = 0;
 17906  1C9D  120B               	bcf	11,4	;volatile
 17907                           
 17908                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 17909  1C9E  01F2               	clrf	setRF_ReceiveGO@command
 17910  1C9F  0AF2               	incf	setRF_ReceiveGO@command,f
 17911  1CA0  3001               	movlw	1
 17912  1CA1  319E  26B3         	fcall	_setRF_ReceiveGO
 17913  1CA3  0008               	return
 17914  1CA4                     __end_of_INT_ISR:	
 17915                           
 17916                           	psect	text123
 17917  1EB3                     __ptext123:	
 17918 ;; *************** function _setRF_ReceiveGO *****************
 17919 ;; Defined at:
 17920 ;;		line 39 in file "../src/RF_Control_B1.c"
 17921 ;; Parameters:    Size  Location     Type
 17922 ;;  rf              1    wreg     unsigned char 
 17923 ;;  command         1    2[COMMON] unsigned char 
 17924 ;; Auto vars:     Size  Location     Type
 17925 ;;  rf              1    3[COMMON] unsigned char 
 17926 ;; Return value:  Size  Location     Type
 17927 ;;		None               void
 17928 ;; Registers used:
 17929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17930 ;; Tracked objects:
 17931 ;;		On entry : 0/0
 17932 ;;		On exit  : 0/0
 17933 ;;		Unchanged: 0/0
 17934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17935 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17938 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17939 ;;Total ram usage:        2 bytes
 17940 ;; Hardware stack levels used:    1
 17941 ;; Hardware stack levels required when called:    1
 17942 ;; This function calls:
 17943 ;;		i1_RfPointSelect
 17944 ;; This function is called by:
 17945 ;;		_INT_ISR
 17946 ;; This function uses a non-reentrant model
 17947 ;;
 17948                           
 17949                           
 17950                           ;psect for function _setRF_ReceiveGO
 17951  1EB3                     _setRF_ReceiveGO:	
 17952                           
 17953                           ;incstack = 0
 17954                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17955                           ;setRF_ReceiveGO@rf stored from wreg
 17956  1EB3  00F3               	movwf	setRF_ReceiveGO@rf
 17957                           
 17958                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 17959  1EB4  0873               	movf	setRF_ReceiveGO@rf,w
 17960  1EB5  319C  24EC  319E   	fcall	i1_RfPointSelect
 17961                           
 17962                           ;RF_Control_B1.c: 41: if (RF->RxStatus == 1) {
 17963  1EB8  087A               	movf	_RF,w
 17964  1EB9  0086               	movwf	6
 17965  1EBA  0187               	clrf	7
 17966  1EBB  1D81               	btfss	1,3
 17967  1EBC  0008               	return
 17968                           
 17969                           ;RF_Control_B1.c: 42: RF->RxStatus = 0;
 17970  1EBD  087A               	movf	_RF,w
 17971  1EBE  0086               	movwf	6
 17972  1EBF  0187               	clrf	7
 17973  1EC0  1181               	bcf	1,3
 17974                           
 17975                           ;RF_Control_B1.c: 43: RF->Run = 1;
 17976  1EC1  0A7A               	incf	_RF,w
 17977  1EC2  0086               	movwf	6
 17978  1EC3  0187               	clrf	7
 17979  1EC4  1481               	bsf	1,1
 17980                           
 17981                           ;RF_Control_B1.c: 44: RF->ReceiveGO = command;
 17982  1EC5  087A               	movf	_RF,w
 17983  1EC6  0086               	movwf	6
 17984  1EC7  0187               	clrf	7
 17985  1EC8  0872               	movf	setRF_ReceiveGO@command,w
 17986  1EC9  1081               	bcf	1,1
 17987  1ECA  1D03               	skipz
 17988  1ECB  1481               	bsf	1,1
 17989  1ECC  0008               	return
 17990  1ECD                     __end_of_setRF_ReceiveGO:	
 17991                           
 17992                           	psect	text124
 17993  1CEC                     __ptext124:	
 17994 ;; *************** function i1_RfPointSelect *****************
 17995 ;; Defined at:
 17996 ;;		line 7 in file "../src/RF_Control_B1.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;  rf              1    wreg     unsigned char 
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  rf              1    1[COMMON] unsigned char 
 18001 ;; Return value:  Size  Location     Type
 18002 ;;		None               void
 18003 ;; Registers used:
 18004 ;;		wreg
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;Total ram usage:        2 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; This function calls:
 18017 ;;		Nothing
 18018 ;; This function is called by:
 18019 ;;		_setRF_ReceiveGO
 18020 ;; This function uses a non-reentrant model
 18021 ;;
 18022                           
 18023                           
 18024                           ;psect for function i1_RfPointSelect
 18025  1CEC                     i1_RfPointSelect:	
 18026                           
 18027                           ;incstack = 0
 18028                           ; Regs used in i1_RfPointSelect: [wreg]
 18029                           ;i1RfPointSelect@rf stored from wreg
 18030  1CEC  00F1               	movwf	i1RfPointSelect@rf
 18031                           
 18032                           ;RF_Control_B1.c: 9: if (rf == 1) {
 18033  1CED  0871               	movf	i1RfPointSelect@rf,w
 18034  1CEE  3A01               	xorlw	1
 18035  1CEF  1D03               	skipz
 18036  1CF0  2CF5               	goto	i1l6214
 18037                           
 18038                           ;RF_Control_B1.c: 10: RF = &RF1;
 18039  1CF1  30D8               	movlw	_RF1& (0+255)
 18040  1CF2  00F0               	movwf	??i1_RfPointSelect
 18041  1CF3  0870               	movf	??i1_RfPointSelect,w
 18042  1CF4  00FA               	movwf	_RF
 18043  1CF5                     i1l6214:	
 18044                           
 18045                           ;RF_Control_B1.c: 11: }
 18046                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 18047  1CF5  1A0B               	btfsc	11,4	;volatile
 18048  1CF6  0008               	return
 18049                           
 18050                           ;RF_Control_B1.c: 13: INTE = 1;
 18051  1CF7  160B               	bsf	11,4	;volatile
 18052  1CF8  0008               	return
 18053  1CF9                     __end_ofi1_RfPointSelect:	
 18054  007E                     btemp	set	126	;btemp
 18055  007E                     pic14e$flags	set	126
 18056  007E                     wtemp	set	126
 18057  007E                     wtemp0	set	126
 18058  0080                     wtemp1	set	128
 18059  0082                     wtemp2	set	130
 18060  0084                     wtemp3	set	132
 18061  0086                     wtemp4	set	134
 18062  0088                     wtemp5	set	136
 18063  007F                     wtemp6	set	127
 18064  007E                     ttemp	set	126
 18065  007E                     ttemp0	set	126
 18066  0081                     ttemp1	set	129
 18067  0084                     ttemp2	set	132
 18068  0087                     ttemp3	set	135
 18069  007F                     ttemp4	set	127
 18070  007E                     ltemp	set	126
 18071  007E                     ltemp0	set	126
 18072  0082                     ltemp1	set	130
 18073  0086                     ltemp2	set	134
 18074  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         178
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      80
    BANK2            80      0      60
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK2[20]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getPowerFault_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   82427
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                   _getPowerFault_AD
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1589
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     130
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19883
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   19883
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8867
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8346
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0     927
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     866
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     866
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   28121
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   28121
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   26042
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1395
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24603
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9827
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     849
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1671
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    4597
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    4597
                                             16 BANK0      2     2      0
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    4597
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      44
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     194
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3405
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     196
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    1768
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     932
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     932
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9185
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9095
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6377
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1190
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     822
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      90
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9274
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9274
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     386
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     450
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1351
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     284
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _getPowerFault_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3C       9       75.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     12F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     12F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 16 13:01:37 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                                       _PF 00BE  
                                     _RD 0CA8                                       _RF 007A  
                __end_of_CC2500_WriteREG 1E9A                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1C61               _getDimmerLights_StatusFlag 1C57  
                 __end_of_setDelayOff_GO 1744                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 1631                             ___ftadd@sign 0048  
                                    l323 1E74                                      l324 1E76  
                                    l260 1319                                      l261 131E  
                                    l335 1E89                                      l271 073A  
                                    l255 12EF                                      l264 1321  
                                    l353 1EF0                                      l290 11BA  
                                    l347 1D71                                      l276 074C  
                                    l293 11C0                                      l359 109E  
                                    l817 1609                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000D  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 014C                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BD  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00D8                                      _ISR 0004  
        setPowerFault_Exceptions@command 002F                                      _Sw1 0143  
                                    _Buz 00B7                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1E81           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1C6C                          __end_of_ADC_Set 1C34  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0B34  
                  _setDimmerLights_ERROR 14DB                    _setDimmerLights_AdjRF 1077  
                  _setDimmerLights_AdjGo 1DA9                                     ?_ISR 0070  
                        _PowerFault_Main 1BE0                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1DDA                             ___ftdiv@sign 003D  
                                   l1313 1223                 ?_DimmerLightsPointSelect 0070  
                                   l2316 1C07                                     l1287 1E44  
                                   l5100 0865                          __end_of_IOC_Set 1D13  
                                   l5102 086D                                     l1742 139C  
                                   l5120 1FC7                                     l5202 0E0B  
                                   l1738 043B                                     l2804 0877  
                                   l5132 0564                                     l5230 0E7B  
                                   l5222 0E62                                     l6006 1240  
                                   l5142 057A                                     l5208 0E21  
                                   l5320 0C19                                     l5312 0BFE  
                                   l5160 05A7                                     l5136 056B  
                                   l5090 083D                                     l5322 0C22  
                                   l5314 0C0C                                     l5402 1D2A  
                                   l5162 05B1                                     l5154 0594  
                                   l5250 0F79                                     l6114 14A5  
                                   l6202 0A22                                     l2827 05DB  
                                   l1963 143C                                     l5092 0847  
                                   l5324 0C25                                     l6052 1207  
                                   l5172 05CD                                     l5164 05B6  
                                   l5244 0F63                                     l5422 1536  
                                   l5094 084C                                     l5086 0836  
                                   l5502 08EA                                     l5182 05FF  
                                   l5174 05D7                                     l5166 05BA  
                                   l5262 0FB4                                     l1990 12D2  
                                   l5350 1142                                     l6126 14BB  
                                   l7030 0A89                                     l5440 1555  
                                   l5328 0C33                                     l5600 1792  
                                   l5192 061A                                     l5360 114C  
                                   l5352 1144                                     l5450 1570  
                                   l5178 05ED                                     l5274 0FD0  
                                   l5266 0FBC                                     l5354 1146  
                                   l7122 17CE                                     l5428 1541  
                                   l5604 1798                                     l5612 07D2  
                                   l5356 1148                                     l5364 1151  
                                   l5454 1578                                     l5446 1567  
                                   l5438 1549                                     l5470 0C84  
                                   l2798 0860                                     l5294 0BCE  
                                   l5390 1FEA                                     l5278 0FD8  
                                   l5358 114A                                     l5366 1165  
                                   l5542 171D                                     l6166 15C5  
                                   l7038 0AB5                                     l7118 17C3  
                                   l5544 172A                                     l5474 0CA4  
                                   l5394 1FF5                                     l5570 175A  
                                   l5650 1F18                                     l6098 1F8C  
                                   l5538 1717                                     l5580 176A  
                                   l6436 1658                                     l6604 03E9  
                                   l5900 1301                                     l5548 1736  
                                   l5566 1754                                     l5574 1760  
                                   l6446 1686                                     l6438 165E  
                                   l5734 0D1B                                     l5718 0CE1  
                                   l5584 1770                                     l6472 12A1  
                                   l6616 0429                                     l6608 040C  
                                   l5648 1F12                                     l5912 070B  
                                   l5920 073D                                     l5728 0D05  
                                   l6704 06EA                                     l6640 064D  
                                   l6554 091A                                     l6618 042F  
                                   l6650 0666                                     l5596 178C  
                                   l5588 1776                                     l6548 0901  
                                   l6468 129A                                     l5686 0B89  
                                   l6558 0960                                     l5790 15ED  
                                   l5950 07A4                                     l5758 12C0  
                                   l6662 068B                                     l6840 0F31  
                                   l6584 037A                                     l5936 077D  
                                   l6752 0245                                     l6736 0210  
                                   l6834 0F0B                                     l6842 0F36  
                                   l5794 1600                                     l5962 07BD  
                                   l5874 09C4                                     l6690 06CD  
                                   l6762 0272                                     l5972 10AF  
                                   l5796 1605                                     l5948 078C  
                                   l5868 09A9                                     l6676 06A8  
                                   l6846 0F3D                                     l5974 10BA  
                                   l5878 09CD                                     l6776 02B6  
                                   l6938 04BE                                     l6786 02E9  
                  _myMain_Initialization 1E11                                     l6982 1369  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1CA4                                     _LATC 010E  
                                   u4100 0898                                     u4015 1556  
                                   u4025 1560                                     u4105 0896  
                                   u4035 1568                                     u3315 087E  
                                   u3245 0842                                     u3265 085B  
                                   u3435 0595                                     u3285 0868  
                                   u3605 0E43                                     u3525 05CE  
                                   u3615 0E63                                     u3625 0E72  
                                   u3465 05A8                                     u3705 0FBD  
                                   u3635 0E7C                                     u3715 0FC3  
                                   _PEIE 005E                                     _INTE 005C  
                                   _INTF 0059                                     u3815 0BFF  
                                   u3495 05BB                                     u6065 0EC8  
                                   u3745 0FD9                                     u6305 0A61  
                                   u3595 0E33                                     u3755 0FDF  
                                   u3675 0F85                                     u6315 0A9F  
                                   u3845 0C1A                                     u3685 0F95  
                                   u4745 10A4                                     u3785 0BD5  
                                   u6265 1350                                     u6285 147C  
                                   u3995 154C                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1C12                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 00C7  
                                   _main 17A2                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 1BE0                      __end_of_DlyOff_Main 0B34  
                        __end_of_RF_Main 1C03                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1C18                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1371                      DelayTimejudge@value 0021  
                          _RfPointSelect 1D20               __end_of_setRFSW_AdjControl 12E8  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
            __size_of_setPowerFault_Main 0106                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1CEC  
          __end_of_DimmerIntrPointSelect 1C57                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 157F  
                        __end_of___ftadd 0632                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 0E9D                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                          __end_of___fttol 0C3C  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                 _setDimmerLights_Switch 1D79                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EC  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 1F3E  
             _setDimmerLights_IntrIOC_GO 1F1F                         __end_of_TMR0_ISR 1196  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 1D20  
                                  _getAD 1E3A                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1631            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0ABB              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 002F                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1DEB  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 088E              __size_of_Flash_Memory_Write 0033  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 168C  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1800  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1BFB  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0BB5                     _setSw_Initialization 1D99  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0968  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000B  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 1BE3  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1C8D  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0ABB                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B                        ?_getPowerFault_AD 0070  
                       ___awdiv@dividend 0022                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1FDE                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 088E                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1D89                                   i1l6214 1CF5  
                                 i1l6322 00A4                                   i1l6340 00EE  
                                 i1l6342 00F4                                   i1l6370 0175  
                                 i1l6354 0129                                   i1l6362 0154  
                                 i1l6346 0107                                   i1l6348 010D  
                                 i1l6380 01A8                                   i1l6358 0140  
                                 i1l6368 016F                                   i1l6394 01D4  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 u516_25 007D                       ??_getPowerFault_AD 0024  
                                 u617_25 1187                                   _OSCCON 0099  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1E9A                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1C1F           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1E3A                                   _Dimmer 00BA  
                                 _DlySw1 00D3               __end_of_Mcu_Initialization 1E68  
                    __end_of_Buzzer_Main 0F4C                                   _Memory 00EF  
                                 _Timer0 00ED       __end_of_setDimmerLights_TriggerAdj 1DC9  
             _setDimmerLights_TriggerAdj 1DB9            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1CEC              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 1744  
                                 _myMain 00EE                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0C3C  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
           __size_of_my_TestPointCleared 0012                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 002D  
    __end_of_setDimmerLights_IntrControl 01FA              _setDimmerLights_IntrControl 0044  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                  __end_of_SwPointSelect 1C98                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1CBC  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1C07                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 16E7         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1077    __size_of_setPowerFault_Initialization 0011  
           _setPowerFault_Initialization 1066                  __end_of__initialization 0040  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1F9C                            __end_of_getAD 1E50  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003E                       _LED_Initialization 1CD4  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005A  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 001A  
                       ?_setDimmerLights 0024                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1C1F                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BB  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0E9D                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1BEF  
                             __pnvCOMMON 007D            ?_setPowerFault_Initialization 0070  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1CF9                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000E                              setBuz@count 002C  
                             __pmaintext 17A2                      _CC2500_WriteCommand 1D69  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A0                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1C2D  
              _PowerFault_Initialization 1BDD                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
           __end_of_setRF_Initialization 1C3B                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 12A8                  __end_of_RfSWPointSelect 1CC8  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1DC9  
                                _IOC_Set 1D06                     __size_of_setLog_Code 0047  
                                _INT_ISR 1C98                                  _INT_Set 1C0C  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 132C  
                      _Flash_Memory_Read 1ECD              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 00BE                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 1BFF                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 09D6  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 157F                          _setPercentValue 13B6  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E9  
           __end_of_CC2500_FrequencyCabr 1CB0                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00E1                                  _VarLED2 00E5  
                      __end_of_getRxData 14DB               __end_of_setPowerFault_Main 0444  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1C6C  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1D99  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1D89  
                                ___awdiv 152B                                  ___ftadd 053C  
                         ??_setSw_Enable 0022                                  ___ftdiv 0DF4  
                                ___ftmul 0F4C                                  ___fttol 0BB5  
                    __end_of_Switch_Main 1C07                  ??_Buzzer_Initialization 0020  
                                __myMain 0120                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0088                           ??_setSw_Status 0023  
                                __ptext1 1DEB                                  __ptext2 0A47  
                                __ptext3 1E11                                  __ptext4 1443  
                                __ptext5 1E3A                                  __ptext6 1C03  
                                __ptext7 01FA                                  __ptext8 1D2E  
                                __ptext9 157F                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 1C4D  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 1371  
              __end_of_Flash_Memory_Read 1EE7                               _setRF_Main 0632  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1BF3  
                      _DimmerLights_Main 1C26                                  _my_Main 0A47  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1C82                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1BE7               __end_of_CC2500_ClearTXFIFO 1BEB  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 1FDE                      _DelayOffPointSelect 1CB0  
                                clrloop0 07FB           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1C4D                     end_of_initialization 0040  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 10E6  
                          _DelayTime_1us 1099                        __end_of_setTxData 0DF4  
             __end_of_Flash_Memory_Write 122A                      _my_TestPointCleared 1DEB  
                                init_ram 1C12                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1C13                               _setSw_Main 01FA  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1EE7  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1DDA  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0707                            _CC2500_TxData 12E8  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 10E6  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 004B            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 08FA  
                _DimmerLights_Exceptions 15D7                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1C3B                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                     ?_my_TestPointCleared 0070  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1C2D  
                     _Mcu_Initialization 1E50                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4803 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 2000                  __end_of_Sw_DimmerOnFunc 15D7  
                __end_of_setPercentValue 13FC                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 1110                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 13B6                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 122A                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F02                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1EB3  
                   _setRF_Initialization 1C34                              _Switch_Main 1C03  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1C82  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1E25  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0031  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1C61  
                  ??_my_TestPointCleared 0020                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 002F                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1F7C  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 17A2  
                         __end_of_setBuz 0CC4                     _CC2500_FrequencyCabr 1CA4  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0CC4                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 07C5  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1E11  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1F5D  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 1D69  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00DD  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1D5A  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1D2E  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 0154  
              ??_DimmerLights_Exceptions 002D                                _Rx_Length 00C1  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C3  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1BEB               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 07FA                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$3967 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0081                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0134                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 0027                          ??_CC2500_RxData 002D  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00ED  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00D5                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                         _getPowerFault_AD 1443  
      __size_of_setPowerFault_Exceptions 0045      __end_of_Flash_Memory_Initialization 053C  
            _Flash_Memory_Initialization 0444                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1E25  
                              __ptext101 1BEB                                __ptext110 1D69  
                              __ptext102 1196                                __ptext111 1E68  
                              __ptext103 10E6                                __ptext120 1F1F  
                              __ptext112 0E9D                                __ptext104 1F3E  
                              __ptext121 1C61                                __ptext113 1C6C  
                              __ptext105 1E81                                __ptext122 1C98  
                              __ptext106 1CA4                                __ptext123 1EB3  
                              __ptext115 1167                                __ptext107 1099  
                              __ptext124 1CEC                                __ptext116 0044  
                              __ptext108 1BE7                                __ptext117 1C4D  
                              __ptext109 1BE3                                 ?___ftadd 003E  
                              __ptext118 1DC9                                __ptext119 1C18  
                              _getRxData 148E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0D54                          _setRF_ReceiveGO 1EB3  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000B  
          __end_of_Buzzer_Initialization 1C77                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1C0C                       _setPowerFault_Main 033E  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0050  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 0144            __end_of_setDimmerLights_ERROR 152B  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1099  
          __end_of_setDimmerLights_AdjGo 1DB9                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C4  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1E25                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0016                             _setRF_Enable 10BF  
                __size_of_DelayTimejudge 002C                            _SwPointSelect 1C8D  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 12A8  
                    _DimmerLightsIntrIOC 00BC                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1CE0  
                        SwPointSelect@sw 0021                                clear_ram0 07FA  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0D54  
    __end_of_DimmerLights_Initialization 1D06              _DimmerLights_Initialization 1CF9  
                     _CC2500_ClearRXFIFO 1BE3                       _CC2500_ClearTXFIFO 1BE7  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D3C  
                   ??_setPowerFault_Main 0030                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 11F7                               ?_getRxData 0070  
                               _TMR0_ISR 1167                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1D13                         _Sw_DimmerAdjFunc 11C6  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1F9C              __end_of_CC2500_WriteCommand 1D79  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 09D6  
                __size_of_setDelayOff_GO 005D                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B9                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1CD4                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1443  
                  _DlyOff_Initialization 1C77                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1BF7                    _Switch_Initialization 1C44  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1D3C                             _setMemory_GO 1F5D  
                   __size_of_Buzzer_Main 00AF                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1E68             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1ECD                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 113B    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1110                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1D5A                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000D  
                               ___awtoft 1FBC                         ??_LedPointSelect 0020  
                               ___ftpack 082D                             _setSw_Status 1D4B  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1268                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 08FA                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0074  
                               __ptext10 09D6                                 __ptext11 11C6  
                               __ptext20 13FC                                 __ptext12 1DB9  
                               __ptext21 0968                                 __ptext13 1DA9  
                               __ptext30 053C                                 __ptext22 0CC4  
                               __ptext14 1C44                                 __ptext31 1F7C  
                               __ptext23 16E7                                 __ptext15 1D99  
                               __ptext40 1371                                 __ptext32 12E8  
                               __ptext24 113B                                 __ptext16 1C07  
                               __ptext41 1D5A                                 __ptext33 0707  
                               __ptext25 12A8                                 __ptext17 1BFF  
                               __ptext50 1E9A                                 __ptext42 10BF  
                               __ptext34 1EE7                                 __ptext26 07C5  
                               __ptext18 0632                                 __ptext51 1D06  
                               __ptext43 15D7                                 __ptext35 1F02  
                               __ptext27 1077                                 __ptext19 148E  
                               __ptext60 08FA                                 __ptext52 1C0C  
                               __ptext44 1110                                 __ptext36 1BFB  
                               __ptext28 168C                                 __ptext61 1CC8  
                               __ptext53 1BF7                                 __ptext45 14DB  
                               __ptext37 1C34                                 __ptext29 0F4C  
                               __ptext70 1744                                 __ptext62 0444  
                               __ptext54 1C2D                                 __ptext46 1BDD  
                               __ptext38 1BE0                                 __ptext71 1FDE  
                               __ptext63 11F7                                 __ptext55 1CE0  
                               __ptext47 1066                                 __ptext39 033E  
                               __ptext80 0D54                                 __ptext72 1DFD  
                               __ptext64 1C3B                                 __ptext56 1268  
                               __ptext48 1E50                                 __ptext81 1D20  
                               __ptext73 1F5D                                 __ptext65 1ECD  
                               __ptext57 1CD4                                 __ptext49 1D13  
                               __ptext90 1D3C                                 __ptext82 1D4B  
                               __ptext74 1C57                                 __ptext66 1C26  
                               __ptext58 1DDA                                 __ptext91 1CBC  
                               __ptext83 1C8D                                 __ptext75 1CF9  
                               __ptext67 1631                                 __ptext59 132C  
                               __ptext92 1D89                                 __ptext84 088E  
                               __ptext76 0800                                 __ptext68 122A  
                               __ptext93 1D79                                 __ptext85 13B6  
                               __ptext77 1C1F                                 __ptext69 0B34  
                               __ptext94 1C82                                 __ptext86 0BB5  
                               __ptext78 1BF3                                 __ptext95 0C3C  
                               __ptext87 0DF4                                 __ptext79 0ABB  
                               __ptext96 152B                                 __ptext88 1FBC  
                               __ptext97 1BEF                                 __ptext89 082D  
                               __ptext98 1C77                                 __ptext99 1CB0  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1D4B  
          __end_of_Dimmer_Initialization 1C26             __end_of_setDimmerLights_Main 168C  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 005E  
                            _setRF_Learn 1D2E                 __end_of_CC2500_SIDLEMode 1BEF  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1CBC  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1DFD  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0007  
                        _CC2500_ReadByte 1F02                       _CC2500_InitPATable 1F3E  
    __size_of_getDimmerLights_StatusFlag 000A              __end_of_my_TestPointCleared 1DFD  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0707  
            __size_of_Mcu_Initialization 0018                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 006E  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1196  
            __end_of_Flash_Memory_Modify 0968                        ??_getPercentValue 0059  
                            _setLog_Code 13FC              __end_of_Flash_Memory_Unlock 1C44  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1E81  
                     __end_of_setSw_Main 033E                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 113B  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 148E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 082D  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 0800  
            __end_of_setDimmerLights_Adj 1268                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1BFB  
   __size_of_setDimmerLights_IntrControl 01B6                     _Flash_Memory_Erasing 1CC8  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 1BF3      __size_of_setDimmerLights_IntrIOC_GO 001F  
                             _OPTION_REG 0095                    __end_of_DelayOff_Main 1BF7  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 16E7         __size_of_setControl_Lights_Table 006E  
                 __end_of_DelayTimejudge 1167                   __size_of_RfPointSelect 000E  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 10BF  
               __end_of_Sw_DimmerAdjFunc 11F7                  __end_of_CC2500_ReadByte 1F1F  
           __end_of_setSw_Initialization 1DA9                     getPercentValue@value 005B  
                           _RF_RxDisable 1F7C               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 1CE0         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0058                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1BFF                 __end_of_Sw_DimmerOffFunc 0A47  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 07C5                    __end_of_CC2500_TxData 132C  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 11C6  
