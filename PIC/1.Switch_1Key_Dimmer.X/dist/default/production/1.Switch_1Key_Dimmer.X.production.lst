

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 03 17:12:00 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943                           
  1944                           	psect	idataBANK3
  1945  19F0                     __pidataBANK3:	
  1946                           
  1947                           ;initializer for _VarProduct
  1948  19F0  3463               	retlw	99
  1949  19F1  3402               	retlw	2
  1950  19F2  3400               	retlw	0
  1951  19F3  3400               	retlw	0
  1952  19F4  3400               	retlw	0
  1953  19F5  3400               	retlw	0
  1954  19F6  3400               	retlw	0
  1955  19F7  3400               	retlw	0
  1956  19F8  3400               	retlw	0
  1957  19F9  3400               	retlw	0
  1958  19FA  3400               	retlw	0
  1959  19FB  3400               	retlw	0
  1960  19FC  34FF               	retlw	255
  1961  19FD  34FF               	retlw	255
  1962  19FE  34FF               	retlw	255
  1963  19FF  3400               	retlw	0
  1964  1A00  3400               	retlw	0
  1965  1A01  3400               	retlw	0
  1966  1A02  3400               	retlw	0
  1967  1A03  3400               	retlw	0
  1968  1A04  3400               	retlw	0
  1969  1A05  3400               	retlw	0
  1970  1A06  3400               	retlw	0
  1971  1A07  3400               	retlw	0
  1972  1A08  3400               	retlw	0
  1973  1A09  3400               	retlw	0
  1974  1A0A  3400               	retlw	0
  1975  1A0B  3400               	retlw	0
  1976  1A0C  3400               	retlw	0
  1977  1A0D  3400               	retlw	0
  1978  1A0E  3400               	retlw	0
  1979  1A0F  3400               	retlw	0
  1980                           
  1981                           	psect	stringtext
  1982  1800                     __pstringtext:	
  1983  1800                     _CC2500_registers_address:	
  1984  1800  3403               	retlw	3
  1985  1801  3416               	retlw	22
  1986  1802  3417               	retlw	23
  1987  1803  341E               	retlw	30
  1988  1804  341F               	retlw	31
  1989  1805  3420               	retlw	32
  1990  1806  342A               	retlw	42
  1991  1807  342B               	retlw	43
  1992  1808  340B               	retlw	11
  1993  1809  340C               	retlw	12
  1994  180A  340D               	retlw	13
  1995  180B  340E               	retlw	14
  1996  180C  340F               	retlw	15
  1997  180D  3410               	retlw	16
  1998  180E  3411               	retlw	17
  1999  180F  3412               	retlw	18
  2000  1810  3413               	retlw	19
  2001  1811  3414               	retlw	20
  2002  1812  340A               	retlw	10
  2003  1813  3415               	retlw	21
  2004  1814  3421               	retlw	33
  2005  1815  3422               	retlw	34
  2006  1816  3418               	retlw	24
  2007  1817  3419               	retlw	25
  2008  1818  341A               	retlw	26
  2009  1819  341B               	retlw	27
  2010  181A  341C               	retlw	28
  2011  181B  341D               	retlw	29
  2012  181C  3423               	retlw	35
  2013  181D  3424               	retlw	36
  2014  181E  3425               	retlw	37
  2015  181F  3426               	retlw	38
  2016  1820  3429               	retlw	41
  2017  1821  342C               	retlw	44
  2018  1822  342D               	retlw	45
  2019  1823  342E               	retlw	46
  2020  1824  3400               	retlw	0
  2021  1825  3401               	retlw	1
  2022  1826  3402               	retlw	2
  2023  1827  3407               	retlw	7
  2024  1828  3408               	retlw	8
  2025  1829  3409               	retlw	9
  2026  182A  3406               	retlw	6
  2027  182B  3404               	retlw	4
  2028  182C  3405               	retlw	5
  2029  182D  3427               	retlw	39
  2030  182E  3428               	retlw	40
  2031  182F                     __end_of_CC2500_registers_address:	
  2032  182F                     _CC2500_rfSettings:	
  2033  182F  3407               	retlw	7
  2034  1830  3407               	retlw	7
  2035  1831  3430               	retlw	48
  2036  1832  3487               	retlw	135
  2037  1833  346B               	retlw	107
  2038  1834  34F8               	retlw	248
  2039  1835  347F               	retlw	127
  2040  1836  343F               	retlw	63
  2041  1837  3409               	retlw	9
  2042  1838  3400               	retlw	0
  2043  1839  345C               	retlw	92
  2044  183A  34A7               	retlw	167
  2045  183B  3462               	retlw	98
  2046  183C  3486               	retlw	134
  2047  183D  3483               	retlw	131
  2048  183E  3403               	retlw	3
  2049  183F  3422               	retlw	34
  2050  1840  34F8               	retlw	248
  2051  1841  3400               	retlw	0
  2052  1842  3444               	retlw	68
  2053  1843  34B6               	retlw	182
  2054  1844  3410               	retlw	16
  2055  1845  3418               	retlw	24
  2056  1846  341D               	retlw	29
  2057  1847  341C               	retlw	28
  2058  1848  34C7               	retlw	199
  2059  1849  3400               	retlw	0
  2060  184A  34B2               	retlw	178
  2061  184B  34EA               	retlw	234
  2062  184C  340A               	retlw	10
  2063  184D  3400               	retlw	0
  2064  184E  3411               	retlw	17
  2065  184F  3459               	retlw	89
  2066  1850  3488               	retlw	136
  2067  1851  3431               	retlw	49
  2068  1852  340B               	retlw	11
  2069  1853  342F               	retlw	47
  2070  1854  342E               	retlw	46
  2071  1855  3406               	retlw	6
  2072  1856  3404               	retlw	4
  2073  1857  3405               	retlw	5
  2074  1858  3400               	retlw	0
  2075  1859  3430               	retlw	48
  2076  185A  34D3               	retlw	211
  2077  185B  3491               	retlw	145
  2078  185C  3441               	retlw	65
  2079  185D  3400               	retlw	0
  2080  185E                     __end_of_CC2500_rfSettings:	
  2081  185E                     _CC2500_patable_vaule:	
  2082  185E  34FE               	retlw	254
  2083  185F  34FE               	retlw	254
  2084  1860  34FE               	retlw	254
  2085  1861  34FE               	retlw	254
  2086  1862  34FE               	retlw	254
  2087  1863  34FE               	retlw	254
  2088  1864  34FE               	retlw	254
  2089  1865  34FE               	retlw	254
  2090  1866                     __end_of_CC2500_patable_vaule:	
  2091                           
  2092                           	psect	nvCOMMON
  2093  007D                     __pnvCOMMON:	
  2094  007D                     _Product:	
  2095  007D                     	ds	1
  2096                           
  2097                           	psect	nvBANK1
  2098  00EA                     __pnvBANK1:	
  2099  00EA                     _Memory:	
  2100  00EA                     	ds	1
  2101  00EB                     _TMain:	
  2102  00EB                     	ds	1
  2103  00EC                     _Timer0:	
  2104  00EC                     	ds	1
  2105  00ED                     _WDT:	
  2106  00ED                     	ds	1
  2107  000C                     _PORTA	set	12
  2108  000D                     _PORTB	set	13
  2109  000E                     _PORTC	set	14
  2110  0015                     _TMR0	set	21
  2111  005F                     _GIE	set	95
  2112  005C                     _INTE	set	92
  2113  0059                     _INTF	set	89
  2114  005B                     _IOCIE	set	91
  2115  0058                     _IOCIF	set	88
  2116  005E                     _PEIE	set	94
  2117  0060                     _RA0	set	96
  2118  0063                     _RA3	set	99
  2119  0064                     _RA4	set	100
  2120  0066                     _RA6	set	102
  2121  0067                     _RA7	set	103
  2122  0068                     _RB0	set	104
  2123  0069                     _RB1	set	105
  2124  006A                     _RB2	set	106
  2125  006B                     _RB3	set	107
  2126  006C                     _RB4	set	108
  2127  006D                     _RB5	set	109
  2128  0070                     _RC0	set	112
  2129  0071                     _RC1	set	113
  2130  0072                     _RC2	set	114
  2131  0074                     _RC4	set	116
  2132  0075                     _RC5	set	117
  2133  0077                     _RC7	set	119
  2134  005D                     _TMR0IE	set	93
  2135  005A                     _TMR0IF	set	90
  2136  009D                     _ADCON0	set	157
  2137  009E                     _ADCON1	set	158
  2138  009C                     _ADRESH	set	156
  2139  009B                     _ADRESL	set	155
  2140  0095                     _OPTION_REG	set	149
  2141  0099                     _OSCCON	set	153
  2142  008C                     _TRISA	set	140
  2143  008D                     _TRISB	set	141
  2144  008E                     _TRISC	set	142
  2145  0097                     _WDTCON	set	151
  2146  04E9                     _GO_nDONE	set	1257
  2147  0117                     _FVRCON	set	279
  2148  010C                     _LATA	set	268
  2149  010D                     _LATB	set	269
  2150  010E                     _LATC	set	270
  2151  018C                     _ANSELA	set	396
  2152  018D                     _ANSELB	set	397
  2153  018E                     _ANSELC	set	398
  2154  0192                     _PMADRH	set	402
  2155  0191                     _PMADRL	set	401
  2156  0196                     _PMCON2	set	406
  2157  0194                     _PMDATH	set	404
  2158  0193                     _PMDATL	set	403
  2159  0CAE                     _CFGS	set	3246
  2160  0CAC                     _FREE	set	3244
  2161  0CAD                     _LWLO	set	3245
  2162  0CA8                     _RD	set	3240
  2163  0CA9                     _WR	set	3241
  2164  0CAA                     _WREN	set	3242
  2165  1068                     _WPUB0	set	4200
  2166  1069                     _WPUB1	set	4201
  2167  106A                     _WPUB2	set	4202
  2168  0396                     _IOCBF	set	918
  2169  0395                     _IOCBN	set	917
  2170  0394                     _IOCBP	set	916
  2171  1CB2                     _IOCBF2	set	7346
  2172                           
  2173                           ; #config settings
  2174  0000                     
  2175                           	psect	cinit
  2176  0018                     start_initialization:	
  2177  0018                     __initialization:	
  2178                           
  2179                           ; Clear objects allocated to BITCOMMON
  2180  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2181                           
  2182                           ; Clear objects allocated to COMMON
  2183  0019  01F7               	clrf	__pbssCOMMON& (0+127)
  2184  001A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2185  001B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  2186  001C  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  2187  001D  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  2188                           
  2189                           ; Clear objects allocated to BANK1
  2190  001E  30A0               	movlw	low __pbssBANK1
  2191  001F  0084               	movwf	4
  2192  0020  3000               	movlw	high __pbssBANK1
  2193  0021  0085               	movwf	5
  2194  0022  304A               	movlw	74
  2195  0023  31A5  25B3  3180   	fcall	clear_ram0
  2196                           
  2197                           ; Clear objects allocated to BANK2
  2198  0026  3020               	movlw	low __pbssBANK2
  2199  0027  0084               	movwf	4
  2200  0028  3001               	movlw	high __pbssBANK2
  2201  0029  0085               	movwf	5
  2202  002A  304A               	movlw	74
  2203  002B  31A5  25B3  3180   	fcall	clear_ram0
  2204                           
  2205                           ; Clear objects allocated to BANK3
  2206  002E  30A0               	movlw	low __pbssBANK3
  2207  002F  0084               	movwf	4
  2208  0030  3001               	movlw	high __pbssBANK3
  2209  0031  0085               	movwf	5
  2210  0032  3025               	movlw	37
  2211  0033  31A5  25B3  3180   	fcall	clear_ram0
  2212                           
  2213                           ; Clear objects allocated to BANK4
  2214  0036  3020               	movlw	low __pbssBANK4
  2215  0037  0084               	movwf	4
  2216  0038  3002               	movlw	high __pbssBANK4
  2217  0039  0085               	movwf	5
  2218  003A  3047               	movlw	71
  2219  003B  31A5  25B3  3180   	fcall	clear_ram0
  2220                           
  2221                           ; Initialize objects allocated to BANK3
  2222  003E  30F0               	movlw	low __pidataBANK3
  2223  003F  0084               	movwf	4
  2224  0040  3099               	movlw	(high __pidataBANK3)| (0+128)
  2225  0041  0085               	movwf	5
  2226  0042  30C5               	movlw	low __pdataBANK3
  2227  0043  0086               	movwf	6
  2228  0044  3001               	movlw	high __pdataBANK3
  2229  0045  0087               	movwf	7
  2230  0046  3020               	movlw	32
  2231  0047  31A5  25AD         	fcall	init_ram
  2232  0049                     end_of_initialization:	
  2233                           ;End of C runtime variable initialization code
  2234                           
  2235  0049                     __end_of__initialization:	
  2236  0049  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2237  004A  0020               	movlb	0
  2238  004B  3195  2D9B         	ljmp	_main	;jump to C main() function
  2239                           
  2240                           	psect	bitbssCOMMON
  2241  03E0                     __pbitbssCOMMON:	
  2242  03E0                     _Receive_OK:	
  2243  03E0                     	ds	1
  2244  03E1                     _Transceive_OK:	
  2245  03E1                     	ds	1
  2246                           
  2247                           	psect	bssCOMMON
  2248  0077                     __pbssCOMMON:	
  2249  0077                     _DimmerLights:	
  2250  0077                     	ds	1
  2251  0078                     _DimmerLights11:	
  2252  0078                     	ds	1
  2253  0079                     _Sw:	
  2254  0079                     	ds	1
  2255  007A                     _Temp:	
  2256  007A                     	ds	1
  2257  007B                     _Load:	
  2258  007B                     	ds	1
  2259                           
  2260                           	psect	bssBANK1
  2261  00A0                     __pbssBANK1:	
  2262  00A0                     _RF_Data:	
  2263  00A0                     	ds	21
  2264  00B5                     _RF_Count:	
  2265  00B5                     	ds	2
  2266  00B7                     _Buz:	
  2267  00B7                     	ds	1
  2268  00B8                     _CRC:	
  2269  00B8                     	ds	1
  2270  00B9                     _DelayOff:	
  2271  00B9                     	ds	1
  2272  00BA                     _Dimmer:	
  2273  00BA                     	ds	1
  2274  00BB                     _DimmerLightsIntr:	
  2275  00BB                     	ds	1
  2276  00BC                     _LED:	
  2277  00BC                     	ds	1
  2278  00BD                     _PF:	
  2279  00BD                     	ds	1
  2280  00BE                     _RF:	
  2281  00BE                     	ds	1
  2282  00BF                     _RFSW:	
  2283  00BF                     	ds	1
  2284  00C0                     _RSSI:	
  2285  00C0                     	ds	1
  2286  00C1                     _Rx_Length:	
  2287  00C1                     	ds	1
  2288  00C2                     _SPI0Buffer:	
  2289  00C2                     	ds	1
  2290  00C3                     _Tx_Length:	
  2291  00C3                     	ds	1
  2292  00C4                     _r_address:	
  2293  00C4                     	ds	1
  2294  00C5                     _r_data:	
  2295  00C5                     	ds	1
  2296  00C6                     _s_data:	
  2297  00C6                     	ds	1
  2298  00C7                     _VarTimer0:	
  2299  00C7                     	ds	9
  2300  00D0                     _DlySw1:	
  2301  00D0                     	ds	5
  2302  00D5                     _VarErrLED:	
  2303  00D5                     	ds	4
  2304  00D9                     _VarLED1:	
  2305  00D9                     	ds	4
  2306  00DD                     _VarLED2:	
  2307  00DD                     	ds	4
  2308  00E1                     _Dimmer1:	
  2309  00E1                     	ds	3
  2310  00E4                     _RF1:	
  2311  00E4                     	ds	3
  2312  00E7                     __WDT:	
  2313  00E7                     	ds	2
  2314  00E9                     _RFSW1:	
  2315  00E9                     	ds	1
  2316                           
  2317                           	psect	bssBANK2
  2318  0120                     __pbssBANK2:	
  2319  0120                     _VarTMain:	
  2320  0120                     	ds	17
  2321  0131                     _DimmerLights1:	
  2322  0131                     	ds	14
  2323  013F                     _Temp1:	
  2324  013F                     	ds	14
  2325  014D                     _Buz1:	
  2326  014D                     	ds	12
  2327  0159                     _Sw1:	
  2328  0159                     	ds	9
  2329  0162                     _PF1:	
  2330  0162                     	ds	8
  2331                           
  2332                           	psect	bssBANK3
  2333  01A0                     __pbssBANK3:	
  2334  01A0                     _VarMemory:	
  2335  01A0                     	ds	37
  2336                           
  2337                           	psect	dataBANK3
  2338  01C5                     __pdataBANK3:	
  2339  01C5                     _VarProduct:	
  2340  01C5                     	ds	32
  2341                           
  2342                           	psect	bssBANK4
  2343  0220                     __pbssBANK4:	
  2344  0220                     _Load1:	
  2345  0220                     	ds	71
  2346                           
  2347                           	psect	clrtext
  2348  25B3                     clear_ram0:	
  2349                           ;	Called with FSR0 containing the base address, and
  2350                           ;	WREG with the size to clear
  2351                           
  2352  25B3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2353  25B4                     clrloop0:	
  2354  25B4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2355  25B5  3101               	addfsr 0,1
  2356  25B6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2357  25B7  2DB4               	goto	clrloop0	;have we reached the end yet?
  2358  25B8  3400               	retlw	0	;all done for this memory range, return
  2359                           
  2360                           	psect	inittext
  2361  25AD                     init_ram:	
  2362  25AD  00FE               	movwf	126
  2363  25AE                     initloop:	
  2364  25AE  0012               	moviw fsr0++
  2365  25AF  001E               	movwi fsr1++
  2366  25B0  0BFE               	decfsz	126,f
  2367  25B1  2DAE               	goto	initloop
  2368  25B2  3400               	retlw	0
  2369                           
  2370                           	psect	cstackCOMMON
  2371  0070                     __pcstackCOMMON:	
  2372  0070                     ?_CC2500_WriteByte:	
  2373  0070                     ?_CC2500_WriteCommand:	
  2374                           ; 0 bytes @ 0x0
  2375                           
  2376  0070                     ?_CC2500_ReadStatus:	
  2377                           ; 0 bytes @ 0x0
  2378                           
  2379  0070                     ?_CC2500_ReadByte:	
  2380                           ; 0 bytes @ 0x0
  2381                           
  2382  0070                     ?_CC2500_PowerRST:	
  2383                           ; 0 bytes @ 0x0
  2384                           
  2385  0070                     ?_CC2500_InitSetREG:	
  2386                           ; 0 bytes @ 0x0
  2387                           
  2388  0070                     ?_CC2500_InitPATable:	
  2389                           ; 0 bytes @ 0x0
  2390                           
  2391  0070                     ?_CC2500_ClearTXFIFO:	
  2392                           ; 0 bytes @ 0x0
  2393                           
  2394  0070                     ?_CC2500_ClearRXFIFO:	
  2395                           ; 0 bytes @ 0x0
  2396                           
  2397  0070                     ?_CC2500_FrequencyCabr:	
  2398                           ; 0 bytes @ 0x0
  2399                           
  2400  0070                     ?_CC2500_SIDLEMode:	
  2401                           ; 0 bytes @ 0x0
  2402                           
  2403  0070                     ?_DlyOff_Initialization:	
  2404                           ; 0 bytes @ 0x0
  2405                           
  2406  0070                     ?_DlyOff_Main:	
  2407                           ; 0 bytes @ 0x0
  2408                           
  2409  0070                     ?_setTxData:	
  2410                           ; 0 bytes @ 0x0
  2411                           
  2412  0070                     ?_setDimmerLights_Initialization:	
  2413                           ; 0 bytes @ 0x0
  2414                           
  2415  0070                     ?_Dimmer_Initialization:	
  2416                           ; 0 bytes @ 0x0
  2417                           
  2418  0070                     ?_setLoad_GO:	
  2419                           ; 0 bytes @ 0x0
  2420                           
  2421  0070                     ?_setDimmerLights_Main:	
  2422                           ; 0 bytes @ 0x0
  2423                           
  2424  0070                     ?_setDimmerLights_ERROR:	
  2425                           ; 0 bytes @ 0x0
  2426                           
  2427  0070                     ?_setLoad_Count:	
  2428                           ; 0 bytes @ 0x0
  2429                           
  2430  0070                     ?_setLED_Initialization:	
  2431                           ; 0 bytes @ 0x0
  2432                           
  2433  0070                     ?_setLED_Main:	
  2434                           ; 0 bytes @ 0x0
  2435                           
  2436  0070                     ?_IO_Set:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ?_TMR0_Set:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_ADC_Set:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ?_INT_Set:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_IOC_Set:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_WDT_Set:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_IOC_ISR:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ??_IOC_ISR:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_TMR0_ISR:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_INT_ISR:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_Flash_Memory_Write:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_Flash_Memory_Modify:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_WDT_Clearing:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_setLoad_AH_AL_Restore:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_setLoad_Exceptions:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_setSw_Enable:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_setTemp_Initialization:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_setTemp_Main:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setOverTemp_Exceptions:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_setPowerFault_Initialization:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setPowerFault_Main:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setPowerFault_Exceptions:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_setRF_Initialization:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_setRF_Main:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_getRxData:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_RF_RxDisable:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_setLog_Code:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_setControl_Lights_Table:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_setRFSW_Control:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_setRFSW_AdjControl:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_setRF_DimmerValue:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setSw_Initialization:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setSw_Main:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Sw_DimmerOnFunc:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Sw_DimmerAdjFunc:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_Sw_DimmerOffFunc:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_MainT_Initialization:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_MainT:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_Buzzer_Initialization:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_Buzzer_Main:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_CC2500_TxData:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_CC2500_RxData:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_CC2500_PowerOnInitial:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_DelayOffPointSelect:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_DelayOff_Initialization:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_DelayOff_Main:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_DimmerLightsPointSelect:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_DimmerLights_Initialization:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_DimmerLights_Close:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_DimmerLights_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_DimmerLights_Exceptions:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_setDimmerLights_AdjRF:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_LedPointSelect:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_LED_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_LED_Main:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Mcu_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_ISR:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setDimmerReClock:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ??_setDimmerReClock:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_setINT_GO:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_Flash_Memory_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_Flash_Memory_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_Flash_Memory_Unlock:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_Flash_Memory_Erasing:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_WDT_Main:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_Load_Initialization:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_getLoad_AD:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_Load_Main:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setLoad_Enable:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_Temp_Initialization:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setTemp_Enable:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_getTemp_AD:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_Temp_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_PowerFault_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_PowerFault_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_getPowerFault_AD:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_RfPointSelect:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_RF_Initialization:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_RF_Main:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_RfSWPointSelect:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_TouchPower:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_SwPointSelect:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Switch_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Switch_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?i1_setLoad_StatusOff:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?i1_RfPointSelect:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ??i1_RfPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_DelayTimejudge:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_getDimmerLights_StatusFlag:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_getPercentValue:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_Flash_Memory_Read:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_getTemp_Safe:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_getPF_Safe:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_setPercentValue:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_getLoad_Safe:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     setRF_Initialization@rf:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     i1setLoad_StatusOff@command:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727                           
  2728                           ; 1 bytes @ 0x0
  2729  0070                     	ds	1
  2730  0071                     ??i1_setLoad_StatusOff:	
  2731  0071                     i1setLoad_StatusOff@lights:	
  2732                           ; 0 bytes @ 0x1
  2733                           
  2734  0071                     i1RfPointSelect@rf:	
  2735                           ; 1 bytes @ 0x1
  2736                           
  2737                           
  2738                           ; 1 bytes @ 0x1
  2739  0071                     	ds	1
  2740  0072                     ??_TMR0_ISR:	
  2741  0072                     ?_setRF_ReceiveGO:	
  2742                           ; 0 bytes @ 0x2
  2743                           
  2744  0072                     setRF_ReceiveGO@command:	
  2745                           ; 0 bytes @ 0x2
  2746                           
  2747                           
  2748                           ; 1 bytes @ 0x2
  2749  0072                     	ds	1
  2750  0073                     ??_setRF_ReceiveGO:	
  2751  0073                     setRF_ReceiveGO@rf:	
  2752                           ; 0 bytes @ 0x3
  2753                           
  2754                           
  2755                           ; 1 bytes @ 0x3
  2756  0073                     	ds	1
  2757  0074                     ??_INT_ISR:	
  2758                           
  2759                           ; 0 bytes @ 0x4
  2760  0074                     	ds	2
  2761  0076                     ??_ISR:	
  2762                           
  2763                           ; 0 bytes @ 0x6
  2764  0076                     	ds	1
  2765                           
  2766                           	psect	cstackBANK0
  2767  0020                     __pcstackBANK0:	
  2768  0020                     ??_CC2500_WriteByte:	
  2769  0020                     ??_CC2500_ReadByte:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0020                     ?_DelayTime_1us:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0020                     ??_DelayTimejudge:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0020                     ??_Dimmer_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ??_getDimmerLights_StatusFlag:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_setLoad_GO:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ?_setLoad_StatusOff:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_setLoad_Count:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ?_setLoad_StatusOn:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ??_IO_Set:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_TMR0_Set:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_ADC_Set:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_INT_Set:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_IOC_Set:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_WDT_Set:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_Flash_Memory_Read:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_Flash_Memory_Write:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_WDT_Clearing:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_setLoad_AH_AL_Restore:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_getTemp_Safe:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_getPF_Safe:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_setTemp_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_setPowerFault_Initialization:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_setRF_Initialization:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_MainT_Initialization:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_Buzzer_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_Buzzer_Main:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_DelayOffPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_DimmerLightsPointSelect:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_LedPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_setINT_GO:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Flash_Memory_Unlock:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Flash_Memory_Erasing:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_WDT_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_setLoad_Enable:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_getLoad_Safe:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_setTemp_Enable:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_RfPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_RfSWPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_TouchPower:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_SwPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ?_getAD:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ?___wmul:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     ?___lwdiv:	
  2899                           ; 2 bytes @ 0x0
  2900                           
  2901  0020                     ?___ftpack:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     getDimmerLights_StatusFlag@Status:	
  2905                           ; 3 bytes @ 0x0
  2906                           
  2907  0020                     setINT_GO@command:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     getAD@adcon1:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     setLoad_Enable@command:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     setLoad_GO@command:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     setLoad_StatusOn@command:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     setLoad_StatusOff@command:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     setTemp_Enable@command:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     DelayTime_1us@count:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     ___wmul@multiplier:	
  2932                           ; 2 bytes @ 0x0
  2933                           
  2934  0020                     ___lwdiv@divisor:	
  2935                           ; 2 bytes @ 0x0
  2936                           
  2937  0020                     ___ftpack@arg:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940                           
  2941                           ; 3 bytes @ 0x0
  2942  0020                     	ds	1
  2943  0021                     ??_setLoad_StatusOff:	
  2944  0021                     ??_setLoad_StatusOn:	
  2945                           ; 0 bytes @ 0x1
  2946                           
  2947  0021                     ??_DimmerLights_Close:	
  2948                           ; 0 bytes @ 0x1
  2949                           
  2950  0021                     ??_Mcu_Initialization:	
  2951                           ; 0 bytes @ 0x1
  2952                           
  2953  0021                     ??_Temp_Initialization:	
  2954                           ; 0 bytes @ 0x1
  2955                           
  2956  0021                     ??_PowerFault_Initialization:	
  2957                           ; 0 bytes @ 0x1
  2958                           
  2959  0021                     ??_RF_Initialization:	
  2960                           ; 0 bytes @ 0x1
  2961                           
  2962  0021                     CC2500_WriteByte@loop_a:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     CC2500_ReadByte@loop_b:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     DelayOffPointSelect@sw:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     DelayTimejudge@i:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DimmerLightsPointSelect@lights:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     LedPointSelect@led:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     Flash_Memory_Read@i:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     Flash_Memory_Write@i:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     setLoad_Count@command:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     setLoad_StatusOn@lights:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     setLoad_StatusOff@lights:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     setLoad_AH_AL_Restore@i:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998  0021                     RfPointSelect@rf:	
  2999                           ; 1 bytes @ 0x1
  3000                           
  3001  0021                     RfSWPointSelect@sw:	
  3002                           ; 1 bytes @ 0x1
  3003                           
  3004  0021                     SwPointSelect@sw:	
  3005                           ; 1 bytes @ 0x1
  3006                           
  3007                           
  3008                           ; 1 bytes @ 0x1
  3009  0021                     	ds	1
  3010  0022                     ??_CC2500_WriteCommand:	
  3011  0022                     ??_CC2500_ReadStatus:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setRF_RxStatus:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ??_DelayTime_1us:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_CC2500_WriteREG:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ??_DlyOff_Initialization:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ?_setSw_Status:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setRFSW_Status:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ?_setDimmerLights_Trigger:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ?_setDimmerLights_Switch:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_setTxData:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ??_setDimmerLights_Initialization:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_TriggerERROR:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     ?_setLED:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     ??_setLED_Main:	
  3051                           ; 0 bytes @ 0x2
  3052                           
  3053  0022                     ??_setSw_Enable:	
  3054                           ; 0 bytes @ 0x2
  3055                           
  3056  0022                     ?_setRF_Enable:	
  3057                           ; 0 bytes @ 0x2
  3058                           
  3059  0022                     ?_setDimmerLights_AdjGo:	
  3060                           ; 0 bytes @ 0x2
  3061                           
  3062  0022                     ?_setDimmerLights_TriggerAdj:	
  3063                           ; 0 bytes @ 0x2
  3064                           
  3065  0022                     ?_setDimmerLights_Clear:	
  3066                           ; 0 bytes @ 0x2
  3067                           
  3068  0022                     ??_Load_Initialization:	
  3069                           ; 0 bytes @ 0x2
  3070                           
  3071  0022                     ?_setRF_Learn:	
  3072                           ; 0 bytes @ 0x2
  3073                           
  3074  0022                     CC2500_WriteREG@value:	
  3075                           ; 0 bytes @ 0x2
  3076                           
  3077  0022                     DlyOff_Initialization@sw:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     DelayTimejudge@value:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setDimmerLights_TriggerERROR@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     setDimmerLights_Switch@command:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     setDimmerLights_AdjGo@command:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     setDimmerLights_Trigger@command:	
  3093                           ; 1 bytes @ 0x2
  3094                           
  3095  0022                     setDimmerLights_TriggerAdj@command:	
  3096                           ; 1 bytes @ 0x2
  3097                           
  3098  0022                     setDimmerLights_Clear@command:	
  3099                           ; 1 bytes @ 0x2
  3100                           
  3101  0022                     setLED@command:	
  3102                           ; 1 bytes @ 0x2
  3103                           
  3104  0022                     Flash_Memory_Read@address:	
  3105                           ; 1 bytes @ 0x2
  3106                           
  3107  0022                     setRF_Learn@command:	
  3108                           ; 1 bytes @ 0x2
  3109                           
  3110  0022                     setRF_RxStatus@command:	
  3111                           ; 1 bytes @ 0x2
  3112                           
  3113  0022                     setRF_Enable@command:	
  3114                           ; 1 bytes @ 0x2
  3115                           
  3116  0022                     setRFSW_Status@command:	
  3117                           ; 1 bytes @ 0x2
  3118                           
  3119  0022                     setSw_Enable@command:	
  3120                           ; 1 bytes @ 0x2
  3121                           
  3122  0022                     setSw_Status@command:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125  0022                     DelayTime_1us@i:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128  0022                     ___wmul@multiplicand:	
  3129                           ; 2 bytes @ 0x2
  3130                           
  3131  0022                     ___lwdiv@dividend:	
  3132                           ; 2 bytes @ 0x2
  3133                           
  3134                           
  3135                           ; 2 bytes @ 0x2
  3136  0022                     	ds	1
  3137  0023                     ??_setRF_RxStatus:	
  3138  0023                     ??_CC2500_WriteREG:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     ??_setSw_Status:	
  3142                           ; 0 bytes @ 0x3
  3143                           
  3144  0023                     ??_setRFSW_Status:	
  3145                           ; 0 bytes @ 0x3
  3146                           
  3147  0023                     ??_setDimmerLights_Trigger:	
  3148                           ; 0 bytes @ 0x3
  3149                           
  3150  0023                     ??_setDimmerLights_Switch:	
  3151                           ; 0 bytes @ 0x3
  3152                           
  3153  0023                     ??_setDimmerLights_TriggerERROR:	
  3154                           ; 0 bytes @ 0x3
  3155                           
  3156  0023                     ??_setLED:	
  3157                           ; 0 bytes @ 0x3
  3158                           
  3159  0023                     ??_setRF_Enable:	
  3160                           ; 0 bytes @ 0x3
  3161                           
  3162  0023                     ??_DelayOff_Initialization:	
  3163                           ; 0 bytes @ 0x3
  3164                           
  3165  0023                     ?_setDelayOff_GO:	
  3166                           ; 0 bytes @ 0x3
  3167                           
  3168  0023                     ??_setDimmerLights_AdjGo:	
  3169                           ; 0 bytes @ 0x3
  3170                           
  3171  0023                     ??_setDimmerLights_TriggerAdj:	
  3172                           ; 0 bytes @ 0x3
  3173                           
  3174  0023                     ??_setDimmerLights_Clear:	
  3175                           ; 0 bytes @ 0x3
  3176                           
  3177  0023                     ??_getAD:	
  3178                           ; 0 bytes @ 0x3
  3179                           
  3180  0023                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x3
  3182                           
  3183  0023                     CC2500_WriteCommand@command:	
  3184                           ; 0 bytes @ 0x3
  3185                           
  3186  0023                     CC2500_ReadStatus@status_addr:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     setDelayOff_GO@command:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192  0023                     setDimmerLights_Initialization@lights:	
  3193                           ; 1 bytes @ 0x3
  3194                           
  3195  0023                     setDimmerLights_TriggerERROR@lights:	
  3196                           ; 1 bytes @ 0x3
  3197                           
  3198  0023                     setDimmerLights_Switch@lights:	
  3199                           ; 1 bytes @ 0x3
  3200                           
  3201  0023                     setDimmerLights_AdjGo@lights:	
  3202                           ; 1 bytes @ 0x3
  3203                           
  3204  0023                     setDimmerLights_Trigger@lights:	
  3205                           ; 1 bytes @ 0x3
  3206                           
  3207  0023                     setDimmerLights_TriggerAdj@lights:	
  3208                           ; 1 bytes @ 0x3
  3209                           
  3210  0023                     setDimmerLights_Clear@lights:	
  3211                           ; 1 bytes @ 0x3
  3212                           
  3213  0023                     setLED@led:	
  3214                           ; 1 bytes @ 0x3
  3215                           
  3216  0023                     getAD@adcon0:	
  3217                           ; 1 bytes @ 0x3
  3218                           
  3219  0023                     Flash_Memory_Read@ret:	
  3220                           ; 1 bytes @ 0x3
  3221                           
  3222  0023                     setRF_Learn@rf:	
  3223                           ; 1 bytes @ 0x3
  3224                           
  3225  0023                     setRF_RxStatus@rf:	
  3226                           ; 1 bytes @ 0x3
  3227                           
  3228  0023                     setTxData@rf:	
  3229                           ; 1 bytes @ 0x3
  3230                           
  3231  0023                     setRF_Enable@rf:	
  3232                           ; 1 bytes @ 0x3
  3233                           
  3234  0023                     setRFSW_Status@sw:	
  3235                           ; 1 bytes @ 0x3
  3236                           
  3237  0023                     setSw_Status@sw:	
  3238                           ; 1 bytes @ 0x3
  3239                           
  3240  0023                     ___ftpack@exp:	
  3241                           ; 1 bytes @ 0x3
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0x3
  3245  0023                     	ds	1
  3246  0024                     ??_CC2500_ClearTXFIFO:	
  3247  0024                     ??_CC2500_ClearRXFIFO:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     ??_CC2500_SIDLEMode:	
  3251                           ; 0 bytes @ 0x4
  3252                           
  3253  0024                     ?_setDimmerLights:	
  3254                           ; 0 bytes @ 0x4
  3255                           
  3256  0024                     ??_setDimmerLights_ERROR:	
  3257                           ; 0 bytes @ 0x4
  3258                           
  3259  0024                     ??_setLED_Initialization:	
  3260                           ; 0 bytes @ 0x4
  3261                           
  3262  0024                     ??_Flash_Memory_Modify:	
  3263                           ; 0 bytes @ 0x4
  3264                           
  3265  0024                     ??_RF_RxDisable:	
  3266                           ; 0 bytes @ 0x4
  3267                           
  3268  0024                     ??_setSw_Initialization:	
  3269                           ; 0 bytes @ 0x4
  3270                           
  3271  0024                     ??_Sw_DimmerAdjFunc:	
  3272                           ; 0 bytes @ 0x4
  3273                           
  3274  0024                     ??_CC2500_TxData:	
  3275                           ; 0 bytes @ 0x4
  3276                           
  3277  0024                     ??_CC2500_RxData:	
  3278                           ; 0 bytes @ 0x4
  3279                           
  3280  0024                     ??_DimmerLights_Initialization:	
  3281                           ; 0 bytes @ 0x4
  3282                           
  3283  0024                     ??_getLoad_AD:	
  3284                           ; 0 bytes @ 0x4
  3285                           
  3286  0024                     ??_getTemp_AD:	
  3287                           ; 0 bytes @ 0x4
  3288                           
  3289  0024                     ??_getPowerFault_AD:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     ??___wmul:	
  3293                           ; 0 bytes @ 0x4
  3294                           
  3295  0024                     ??___lwdiv:	
  3296                           ; 0 bytes @ 0x4
  3297                           
  3298  0024                     CC2500_WriteREG@w_addr:	
  3299                           ; 0 bytes @ 0x4
  3300                           
  3301  0024                     setDelayOff_GO@value:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304  0024                     setDimmerLights@status:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307  0024                     setLED_Initialization@led:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310  0024                     setLED_Main@led:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313  0024                     RF_RxDisable@rf:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316  0024                     setSw_Initialization@sw:	
  3317                           ; 1 bytes @ 0x4
  3318                           
  3319  0024                     Sw_DimmerAdjFunc@Idle:	
  3320                           ; 1 bytes @ 0x4
  3321                           
  3322  0024                     ___ftpack@sign:	
  3323                           ; 1 bytes @ 0x4
  3324                           
  3325  0024                     DelayTime_1us@j:	
  3326                           ; 1 bytes @ 0x4
  3327                           
  3328  0024                     ___wmul@product:	
  3329                           ; 2 bytes @ 0x4
  3330                           
  3331                           
  3332                           ; 2 bytes @ 0x4
  3333  0024                     	ds	1
  3334  0025                     ??_CC2500_InitSetREG:	
  3335  0025                     ??_CC2500_InitPATable:	
  3336                           ; 0 bytes @ 0x5
  3337                           
  3338  0025                     ??_setDimmerLights:	
  3339                           ; 0 bytes @ 0x5
  3340                           
  3341  0025                     ??___ftpack:	
  3342                           ; 0 bytes @ 0x5
  3343                           
  3344  0025                     ??_setDelayOff_GO:	
  3345                           ; 0 bytes @ 0x5
  3346                           
  3347  0025                     ??_LED_Initialization:	
  3348                           ; 0 bytes @ 0x5
  3349                           
  3350  0025                     ??_LED_Main:	
  3351                           ; 0 bytes @ 0x5
  3352                           
  3353  0025                     ??_Switch_Initialization:	
  3354                           ; 0 bytes @ 0x5
  3355                           
  3356  0025                     CC2500_TxData@loop_e:	
  3357                           ; 0 bytes @ 0x5
  3358                           
  3359  0025                     CC2500_RxData@loop_f:	
  3360                           ; 1 bytes @ 0x5
  3361                           
  3362  0025                     setDimmerLights_ERROR@lights:	
  3363                           ; 1 bytes @ 0x5
  3364                           
  3365  0025                     Sw_DimmerAdjFunc@sw:	
  3366                           ; 1 bytes @ 0x5
  3367                           
  3368  0025                     ___lwdiv@quotient:	
  3369                           ; 1 bytes @ 0x5
  3370                           
  3371                           
  3372                           ; 2 bytes @ 0x5
  3373  0025                     	ds	1
  3374  0026                     ??_CC2500_PowerRST:	
  3375  0026                     ??_CC2500_FrequencyCabr:	
  3376                           ; 0 bytes @ 0x6
  3377                           
  3378  0026                     ?_setBuz:	
  3379                           ; 0 bytes @ 0x6
  3380                           
  3381  0026                     CC2500_InitSetREG@temp1:	
  3382                           ; 0 bytes @ 0x6
  3383                           
  3384  0026                     CC2500_InitPATable@temp:	
  3385                           ; 1 bytes @ 0x6
  3386                           
  3387  0026                     setDimmerLights@lights:	
  3388                           ; 1 bytes @ 0x6
  3389                           
  3390  0026                     Flash_Memory_Modify@i:	
  3391                           ; 1 bytes @ 0x6
  3392                           
  3393  0026                     setBuz@time:	
  3394                           ; 1 bytes @ 0x6
  3395                           
  3396                           
  3397                           ; 2 bytes @ 0x6
  3398  0026                     	ds	1
  3399  0027                     ??_Flash_Memory_Main:	
  3400  0027                     CC2500_InitSetREG@temp2:	
  3401                           ; 0 bytes @ 0x7
  3402                           
  3403  0027                     CC2500_InitPATable@loop_d:	
  3404                           ; 1 bytes @ 0x7
  3405                           
  3406  0027                     setDelayOff_GO@sw:	
  3407                           ; 1 bytes @ 0x7
  3408                           
  3409  0027                     ___lwdiv@counter:	
  3410                           ; 1 bytes @ 0x7
  3411                           
  3412                           
  3413                           ; 1 bytes @ 0x7
  3414  0027                     	ds	1
  3415  0028                     ??_setBuz:	
  3416  0028                     ?___awtoft:	
  3417                           ; 0 bytes @ 0x8
  3418                           
  3419  0028                     CC2500_InitSetREG@loop_c:	
  3420                           ; 3 bytes @ 0x8
  3421                           
  3422  0028                     getTemp_AD@channel:	
  3423                           ; 1 bytes @ 0x8
  3424                           
  3425  0028                     getPowerFault_AD@channel:	
  3426                           ; 1 bytes @ 0x8
  3427                           
  3428  0028                     ___awtoft@c:	
  3429                           ; 1 bytes @ 0x8
  3430                           
  3431                           
  3432                           ; 2 bytes @ 0x8
  3433  0028                     	ds	1
  3434  0029                     ??_CC2500_PowerOnInitial:	
  3435  0029                     setBuz@count:	
  3436                           ; 0 bytes @ 0x9
  3437                           
  3438  0029                     getLoad_AD@channel:	
  3439                           ; 1 bytes @ 0x9
  3440                           
  3441                           
  3442                           ; 1 bytes @ 0x9
  3443  0029                     	ds	1
  3444  002A                     ??_setLog_Code:	
  3445  002A                     ??_MainT:	
  3446                           ; 0 bytes @ 0xA
  3447                           
  3448  002A                     ??_DimmerLights_Exceptions:	
  3449                           ; 0 bytes @ 0xA
  3450                           
  3451  002A                     DimmerLights_Exceptions@status:	
  3452                           ; 0 bytes @ 0xA
  3453                           
  3454  002A                     getLoad_AD@j:	
  3455                           ; 1 bytes @ 0xA
  3456                           
  3457                           
  3458                           ; 1 bytes @ 0xA
  3459  002A                     	ds	1
  3460  002B                     ??_setLoad_Exceptions:	
  3461  002B                     ??_setOverTemp_Exceptions:	
  3462                           ; 0 bytes @ 0xB
  3463                           
  3464  002B                     ??_setPowerFault_Exceptions:	
  3465                           ; 0 bytes @ 0xB
  3466                           
  3467  002B                     ??___awtoft:	
  3468                           ; 0 bytes @ 0xB
  3469                           
  3470  002B                     getLoad_AD@i:	
  3471                           ; 0 bytes @ 0xB
  3472                           
  3473  002B                     setLog_Code@rf:	
  3474                           ; 1 bytes @ 0xB
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0xB
  3478  002B                     	ds	1
  3479  002C                     setLoad_Exceptions@command:	
  3480  002C                     setOverTemp_Exceptions@command:	
  3481                           ; 1 bytes @ 0xC
  3482                           
  3483  002C                     setPowerFault_Exceptions@command:	
  3484                           ; 1 bytes @ 0xC
  3485                           
  3486                           
  3487                           ; 1 bytes @ 0xC
  3488  002C                     	ds	1
  3489  002D                     ??_setTemp_Main:	
  3490  002D                     ??_setPowerFault_Main:	
  3491                           ; 0 bytes @ 0xD
  3492                           
  3493  002D                     ??_Load_Main:	
  3494                           ; 0 bytes @ 0xD
  3495                           
  3496  002D                     ___awtoft@sign:	
  3497                           ; 0 bytes @ 0xD
  3498                           
  3499                           
  3500                           ; 1 bytes @ 0xD
  3501  002D                     	ds	1
  3502  002E                     ?___ftdiv:	
  3503  002E                     ?___ftmul:	
  3504                           ; 3 bytes @ 0xE
  3505                           
  3506  002E                     ___ftdiv@f2:	
  3507                           ; 3 bytes @ 0xE
  3508                           
  3509  002E                     ___ftmul@f1:	
  3510                           ; 3 bytes @ 0xE
  3511                           
  3512                           
  3513                           ; 3 bytes @ 0xE
  3514  002E                     	ds	1
  3515  002F                     ??_PowerFault_Main:	
  3516                           
  3517                           ; 0 bytes @ 0xF
  3518  002F                     	ds	1
  3519  0030                     ??_Temp_Main:	
  3520                           
  3521                           ; 0 bytes @ 0x10
  3522  0030                     	ds	1
  3523  0031                     Load_Main@i:	
  3524  0031                     ___ftdiv@f1:	
  3525                           ; 1 bytes @ 0x11
  3526                           
  3527  0031                     ___ftmul@f2:	
  3528                           ; 3 bytes @ 0x11
  3529                           
  3530                           
  3531                           ; 3 bytes @ 0x11
  3532  0031                     	ds	3
  3533  0034                     ??___ftdiv:	
  3534  0034                     ??___ftmul:	
  3535                           ; 0 bytes @ 0x14
  3536                           
  3537                           
  3538                           ; 0 bytes @ 0x14
  3539  0034                     	ds	4
  3540  0038                     ___ftdiv@cntr:	
  3541  0038                     ___ftmul@exp:	
  3542                           ; 1 bytes @ 0x18
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x18
  3546  0038                     	ds	1
  3547  0039                     ___ftdiv@f3:	
  3548  0039                     ___ftmul@f3_as_product:	
  3549                           ; 3 bytes @ 0x19
  3550                           
  3551                           
  3552                           ; 3 bytes @ 0x19
  3553  0039                     	ds	3
  3554  003C                     ___ftdiv@exp:	
  3555  003C                     ___ftmul@cntr:	
  3556                           ; 1 bytes @ 0x1C
  3557                           
  3558                           
  3559                           ; 1 bytes @ 0x1C
  3560  003C                     	ds	1
  3561  003D                     ___ftdiv@sign:	
  3562  003D                     ___ftmul@sign:	
  3563                           ; 1 bytes @ 0x1D
  3564                           
  3565                           
  3566                           ; 1 bytes @ 0x1D
  3567  003D                     	ds	1
  3568  003E                     ?___ftadd:	
  3569  003E                     ___ftadd@f1:	
  3570                           ; 3 bytes @ 0x1E
  3571                           
  3572                           
  3573                           ; 3 bytes @ 0x1E
  3574  003E                     	ds	3
  3575  0041                     ___ftadd@f2:	
  3576                           
  3577                           ; 3 bytes @ 0x21
  3578  0041                     	ds	3
  3579  0044                     ??___ftadd:	
  3580                           
  3581                           ; 0 bytes @ 0x24
  3582  0044                     	ds	4
  3583  0048                     ___ftadd@sign:	
  3584                           
  3585                           ; 1 bytes @ 0x28
  3586  0048                     	ds	1
  3587  0049                     ___ftadd@exp2:	
  3588                           
  3589                           ; 1 bytes @ 0x29
  3590  0049                     	ds	1
  3591  004A                     ___ftadd@exp1:	
  3592                           
  3593                           ; 1 bytes @ 0x2A
  3594  004A                     	ds	1
  3595  004B                     ?___fttol:	
  3596  004B                     ___fttol@f1:	
  3597                           ; 4 bytes @ 0x2B
  3598                           
  3599                           
  3600                           ; 3 bytes @ 0x2B
  3601  004B                     	ds	4
  3602  004F                     ??___fttol:	
  3603                           
  3604                           ; 0 bytes @ 0x2F
  3605  004F                     	ds	4
  3606  0053                     ___fttol@sign1:	
  3607                           
  3608                           ; 1 bytes @ 0x33
  3609  0053                     	ds	1
  3610  0054                     ___fttol@lval:	
  3611                           
  3612                           ; 4 bytes @ 0x34
  3613  0054                     	ds	4
  3614  0058                     ___fttol@exp1:	
  3615                           
  3616                           ; 1 bytes @ 0x38
  3617  0058                     	ds	1
  3618  0059                     ??_getPercentValue:	
  3619  0059                     ??_setPercentValue:	
  3620                           ; 0 bytes @ 0x39
  3621                           
  3622  0059                     setPercentValue@value:	
  3623                           ; 0 bytes @ 0x39
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0x39
  3627  0059                     	ds	1
  3628  005A                     setPercentValue@i:	
  3629                           
  3630                           ; 3 bytes @ 0x3A
  3631  005A                     	ds	1
  3632  005B                     getPercentValue@value:	
  3633                           
  3634                           ; 1 bytes @ 0x3B
  3635  005B                     	ds	1
  3636  005C                     getPercentValue@i:	
  3637                           
  3638                           ; 3 bytes @ 0x3C
  3639  005C                     	ds	1
  3640  005D                     ?_setRF_DimmerLights:	
  3641  005D                     ??_Flash_Memory_Initialization:	
  3642                           ; 0 bytes @ 0x3D
  3643                           
  3644  005D                     setRF_DimmerLights@on:	
  3645                           ; 0 bytes @ 0x3D
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0x3D
  3649  005D                     	ds	1
  3650  005E                     ??_setRF_DimmerLights:	
  3651  005E                     Flash_Memory_Initialization@i:	
  3652                           ; 0 bytes @ 0x3E
  3653                           
  3654                           
  3655                           ; 1 bytes @ 0x3E
  3656  005E                     	ds	1
  3657  005F                     ??_setDimmerLights_AdjRF:	
  3658                           
  3659                           ; 0 bytes @ 0x3F
  3660  005F                     	ds	1
  3661  0060                     setDimmerLights_AdjRF@lights:	
  3662  0060                     setRF_DimmerLights@status:	
  3663                           ; 1 bytes @ 0x40
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x40
  3667  0060                     	ds	1
  3668  0061                     ??_setRF_DimmerValue:	
  3669  0061                     setRF_DimmerLights@lights:	
  3670                           ; 0 bytes @ 0x41
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x41
  3674  0061                     	ds	1
  3675  0062                     ??_DlyOff_Main:	
  3676  0062                     ?_setDimmerLights_Adj:	
  3677                           ; 0 bytes @ 0x42
  3678                           
  3679  0062                     ??_setRFSW_Control:	
  3680                           ; 0 bytes @ 0x42
  3681                           
  3682  0062                     ??_Sw_DimmerOnFunc:	
  3683                           ; 0 bytes @ 0x42
  3684                           
  3685  0062                     ??_Sw_DimmerOffFunc:	
  3686                           ; 0 bytes @ 0x42
  3687                           
  3688  0062                     setDimmerLights_Adj@status:	
  3689                           ; 0 bytes @ 0x42
  3690                           
  3691  0062                     Sw_DimmerOnFunc@Idle:	
  3692                           ; 1 bytes @ 0x42
  3693                           
  3694                           
  3695                           ; 1 bytes @ 0x42
  3696  0062                     	ds	1
  3697  0063                     ??_setDimmerLights_Adj:	
  3698  0063                     setRFSW_Control@sw:	
  3699                           ; 0 bytes @ 0x43
  3700                           
  3701  0063                     setRF_DimmerValue@lights:	
  3702                           ; 1 bytes @ 0x43
  3703                           
  3704  0063                     Sw_DimmerOnFunc@sw:	
  3705                           ; 1 bytes @ 0x43
  3706                           
  3707                           
  3708                           ; 1 bytes @ 0x43
  3709  0063                     	ds	1
  3710  0064                     ??_setRFSW_AdjControl:	
  3711  0064                     DlyOff_Main@sw:	
  3712                           ; 0 bytes @ 0x44
  3713                           
  3714  0064                     setDimmerLights_Adj@lights:	
  3715                           ; 1 bytes @ 0x44
  3716                           
  3717  0064                     Sw_DimmerOffFunc@sw:	
  3718                           ; 1 bytes @ 0x44
  3719                           
  3720                           
  3721                           ; 1 bytes @ 0x44
  3722  0064                     	ds	1
  3723  0065                     ??_setDimmerLights_Main:	
  3724  0065                     ??_setSw_Main:	
  3725                           ; 0 bytes @ 0x45
  3726                           
  3727  0065                     ??_DelayOff_Main:	
  3728                           ; 0 bytes @ 0x45
  3729                           
  3730  0065                     setDimmerLights_Main@clear:	
  3731                           ; 0 bytes @ 0x45
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x45
  3735  0065                     	ds	1
  3736  0066                     setDimmerLights_Main@lights:	
  3737  0066                     setRFSW_AdjControl@sw:	
  3738                           ; 1 bytes @ 0x46
  3739                           
  3740                           
  3741                           ; 1 bytes @ 0x46
  3742  0066                     	ds	1
  3743  0067                     ??_setControl_Lights_Table:	
  3744  0067                     ??_DimmerLights_Main:	
  3745                           ; 0 bytes @ 0x47
  3746                           
  3747  0067                     setControl_Lights_Table@rf:	
  3748                           ; 0 bytes @ 0x47
  3749                           
  3750  0067                     _setSw_Main$4539:	
  3751                           ; 1 bytes @ 0x47
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x47
  3755  0067                     	ds	1
  3756  0068                     ??_getRxData:	
  3757  0068                     getRxData@rf:	
  3758                           ; 0 bytes @ 0x48
  3759                           
  3760  0068                     setSw_Main@sw:	
  3761                           ; 1 bytes @ 0x48
  3762                           
  3763                           
  3764                           ; 1 bytes @ 0x48
  3765  0068                     	ds	1
  3766  0069                     ??_setRF_Main:	
  3767  0069                     ??_Switch_Main:	
  3768                           ; 0 bytes @ 0x49
  3769                           
  3770                           
  3771                           ; 0 bytes @ 0x49
  3772  0069                     	ds	1
  3773  006A                     setRF_Main@rf:	
  3774                           
  3775                           ; 1 bytes @ 0x4A
  3776  006A                     	ds	1
  3777  006B                     _setRF_Main$3951:	
  3778                           
  3779                           ; 1 bytes @ 0x4B
  3780  006B                     	ds	1
  3781  006C                     ??_RF_Main:	
  3782  006C                     ?_main:	
  3783                           ; 0 bytes @ 0x4C
  3784                           
  3785  006C                     main@argc:	
  3786                           ; 2 bytes @ 0x4C
  3787                           
  3788                           
  3789                           ; 2 bytes @ 0x4C
  3790  006C                     	ds	2
  3791  006E                     main@argv:	
  3792                           
  3793                           ; 2 bytes @ 0x4E
  3794  006E                     	ds	2
  3795  0070                     ??_main:	
  3796                           
  3797                           	psect	maintext
  3798  159B                     __pmaintext:	
  3799                           ; 0 bytes @ 0x50
  3800 ;;
  3801 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3802 ;;
  3803 ;; *************** function _main *****************
  3804 ;; Defined at:
  3805 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  argc            2   76[BANK0 ] int 
  3808 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;		None
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  2   76[BANK0 ] int 
  3813 ;; Registers used:
  3814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 17F/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3820 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3823 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3824 ;;Total ram usage:        4 bytes
  3825 ;; Hardware stack levels required when called:   14
  3826 ;; This function calls:
  3827 ;;		_Buzzer_Initialization
  3828 ;;		_Buzzer_Main
  3829 ;;		_CC2500_PowerOnInitial
  3830 ;;		_DelayOff_Initialization
  3831 ;;		_DelayOff_Main
  3832 ;;		_DimmerLights_Initialization
  3833 ;;		_DimmerLights_Main
  3834 ;;		_Flash_Memory_Initialization
  3835 ;;		_Flash_Memory_Main
  3836 ;;		_LED_Initialization
  3837 ;;		_LED_Main
  3838 ;;		_Load_Initialization
  3839 ;;		_Load_Main
  3840 ;;		_MainT
  3841 ;;		_MainT_Initialization
  3842 ;;		_Mcu_Initialization
  3843 ;;		_PowerFault_Initialization
  3844 ;;		_PowerFault_Main
  3845 ;;		_RF_Initialization
  3846 ;;		_RF_Main
  3847 ;;		_Switch_Initialization
  3848 ;;		_Switch_Main
  3849 ;;		_Temp_Initialization
  3850 ;;		_Temp_Main
  3851 ;;		_WDT_Main
  3852 ;;		_getLoad_AD
  3853 ;;		_getPowerFault_AD
  3854 ;;		_getTemp_AD
  3855 ;; This function is called by:
  3856 ;;		Startup code after reset
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function _main
  3862  159B                     _main:	
  3863                           
  3864                           ;main_B1.c: 8: MainT_Initialization();
  3865                           
  3866                           ;incstack = 0
  3867                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3868  159B  3198  2072  3195   	fcall	_MainT_Initialization
  3869                           
  3870                           ;main_B1.c: 9: Mcu_Initialization();
  3871  159E  3199  2144  3195   	fcall	_Mcu_Initialization
  3872                           
  3873                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3874  15A1  318D  25EB  3195   	fcall	_Flash_Memory_Initialization
  3875                           
  3876                           ;main_B1.c: 11: LED_Initialization();
  3877  15A4  31A6  26C4  3195   	fcall	_LED_Initialization
  3878                           
  3879                           ;main_B1.c: 12: Buzzer_Initialization();
  3880  15A7  31A6  2664  3195   	fcall	_Buzzer_Initialization
  3881                           
  3882                           ;main_B1.c: 14: ;;
  3883                           ;main_B1.c: 15: Temp_Initialization();
  3884  15AA  31A5  257C  3195   	fcall	_Temp_Initialization
  3885                           
  3886                           ;main_B1.c: 16: Load_Initialization();
  3887  15AD  31A6  26DD  3195   	fcall	_Load_Initialization
  3888                           
  3889                           ;main_B1.c: 17: PowerFault_Initialization();
  3890  15B0  31A5  2576  3195   	fcall	_PowerFault_Initialization
  3891                           
  3892                           ;main_B1.c: 18: DelayOff_Initialization();
  3893  15B3  31A5  258E  3195   	fcall	_DelayOff_Initialization
  3894                           
  3895                           ;main_B1.c: 20: DimmerLights_Initialization();
  3896  15B6  31A6  26A0  3195   	fcall	_DimmerLights_Initialization
  3897                           
  3898                           ;main_B1.c: 21: ;;
  3899                           ;main_B1.c: 22: ;;
  3900                           ;main_B1.c: 23: ;;
  3901                           ;main_B1.c: 25: Switch_Initialization();
  3902  15B9  31A5  25F7  3195   	fcall	_Switch_Initialization
  3903                           
  3904                           ;main_B1.c: 26: RF_Initialization();
  3905  15BC  31A5  2596  3195   	fcall	_RF_Initialization
  3906                           
  3907                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3908  15BF  3198  2086  3195   	fcall	_CC2500_PowerOnInitial
  3909  15C2                     l9396:	
  3910                           ;main_B1.c: 29: while (1) {
  3911                           
  3912                           
  3913                           ;main_B1.c: 30: if (TMain->PowerON) {
  3914  15C2  0021               	movlb	1	; select bank1
  3915  15C3  086B               	movf	_TMain^(0+128),w
  3916  15C4  0086               	movwf	6
  3917  15C5  3001               	movlw	1	; select bank2/3
  3918  15C6  0087               	movwf	7
  3919  15C7  1C01               	btfss	1,0
  3920  15C8  2DD8               	goto	l9400
  3921                           
  3922                           ;main_B1.c: 32: ;;
  3923                           ;main_B1.c: 36: getLoad_AD(0x05);
  3924  15C9  3005               	movlw	5
  3925  15CA  318A  225C  3195   	fcall	_getLoad_AD
  3926                           
  3927                           ;main_B1.c: 40: getTemp_AD(0x09);
  3928  15CD  3009               	movlw	9
  3929  15CE  3193  23E2  3195   	fcall	_getTemp_AD
  3930                           
  3931                           ;main_B1.c: 44: getPowerFault_AD(0x11);
  3932  15D1  3011               	movlw	17
  3933  15D2  319F  27B5  3195   	fcall	_getPowerFault_AD
  3934                           
  3935                           ;main_B1.c: 56: Buzzer_Main();
  3936  15D5  3187  271B  3195   	fcall	_Buzzer_Main
  3937  15D8                     l9400:	
  3938                           
  3939                           ;main_B1.c: 58: }
  3940                           ;main_B1.c: 60: if (TMain->T0_Timerout)
  3941  15D8  0021               	movlb	1	; select bank1
  3942  15D9  086B               	movf	_TMain^(0+128),w
  3943  15DA  0086               	movwf	6
  3944  15DB  3001               	movlw	1	; select bank2/3
  3945  15DC  0087               	movwf	7
  3946  15DD  1C81               	btfss	1,1
  3947  15DE  2DC2               	goto	l9396
  3948                           
  3949                           ;main_B1.c: 61: {
  3950                           ;main_B1.c: 62: TMain->T0_Timerout = 0;
  3951  15DF  086B               	movf	_TMain^(0+128),w
  3952  15E0  0086               	movwf	6
  3953  15E1  3001               	movlw	1	; select bank2/3
  3954  15E2  0087               	movwf	7
  3955  15E3  1081               	bcf	1,1
  3956                           
  3957                           ;main_B1.c: 63: MainT();
  3958  15E4  3196  26FC  3195   	fcall	_MainT
  3959                           
  3960                           ;main_B1.c: 64: WDT_Main();
  3961  15E7  3199  217A  3195   	fcall	_WDT_Main
  3962                           
  3963                           ;main_B1.c: 65: if (TMain->PowerON) {
  3964  15EA  0021               	movlb	1	; select bank1
  3965  15EB  086B               	movf	_TMain^(0+128),w
  3966  15EC  0086               	movwf	6
  3967  15ED  3001               	movlw	1	; select bank2/3
  3968  15EE  0087               	movwf	7
  3969  15EF  1C01               	btfss	1,0
  3970  15F0  2DC2               	goto	l9396
  3971                           
  3972                           ;main_B1.c: 66: Flash_Memory_Main();
  3973  15F1  319E  264F  3195   	fcall	_Flash_Memory_Main
  3974                           
  3975                           ;main_B1.c: 68: LED_Main();
  3976  15F4  3198  2066  3195   	fcall	_LED_Main
  3977                           
  3978                           ;main_B1.c: 70: ;;
  3979                           ;main_B1.c: 71: Temp_Main();
  3980  15F7  31A5  257F  3195   	fcall	_Temp_Main
  3981                           
  3982                           ;main_B1.c: 72: Load_Main();
  3983  15FA  3180  204D  3195   	fcall	_Load_Main
  3984                           
  3985                           ;main_B1.c: 73: PowerFault_Main();
  3986  15FD  31A5  2579  3195   	fcall	_PowerFault_Main
  3987                           
  3988                           ;main_B1.c: 75: ;;
  3989                           ;main_B1.c: 76: DimmerLights_Main();
  3990  1600  31A5  25C0  3195   	fcall	_DimmerLights_Main
  3991                           
  3992                           ;main_B1.c: 77: Switch_Main();
  3993  1603  31A5  259E  3195   	fcall	_Switch_Main
  3994                           
  3995                           ;main_B1.c: 78: ;;
  3996                           ;main_B1.c: 79: ;;
  3997                           ;main_B1.c: 81: RF_Main();
  3998  1606  31A5  259A  3195   	fcall	_RF_Main
  3999                           
  4000                           ;main_B1.c: 82: DelayOff_Main();
  4001  1609  31A5  2592  3195   	fcall	_DelayOff_Main
  4002  160C  2DC2               	goto	l9396
  4003  160D                     __end_of_main:	
  4004                           
  4005                           	psect	text1
  4006  13E2                     __ptext1:	
  4007 ;; *************** function _getTemp_AD *****************
  4008 ;; Defined at:
  4009 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;  channel         1    wreg     unsigned char 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  channel         1    8[BANK0 ] unsigned char 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;		None               void
  4016 ;; Registers used:
  4017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;Total ram usage:        5 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    5
  4030 ;; This function calls:
  4031 ;;		_getAD
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _getTemp_AD
  4039  13E2                     _getTemp_AD:	
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4043                           ;getTemp_AD@channel stored from wreg
  4044  13E2  0020               	movlb	0	; select bank0
  4045  13E3  00A8               	movwf	getTemp_AD@channel
  4046                           
  4047                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4048  13E4  087A               	movf	_Temp,w
  4049  13E5  0086               	movwf	6
  4050  13E6  3001               	movlw	1	; select bank2/3
  4051  13E7  0087               	movwf	7
  4052  13E8  1D01               	btfss	1,2
  4053  13E9  0008               	return
  4054                           
  4055                           ;OverTemperature_B1.c: 38: {
  4056                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4057  13EA  30F0               	movlw	240
  4058  13EB  00A4               	movwf	??_getTemp_AD
  4059  13EC  0824               	movf	??_getTemp_AD,w
  4060  13ED  00A0               	movwf	getAD@adcon1
  4061  13EE  0828               	movf	getTemp_AD@channel,w
  4062  13EF  3198  20B0  3193   	fcall	_getAD
  4063  13F2  087A               	movf	_Temp,w
  4064  13F3  3E0C               	addlw	12
  4065  13F4  0086               	movwf	6
  4066  13F5  3001               	movlw	1	; select bank2/3
  4067  13F6  0087               	movwf	7
  4068  13F7  0020               	movlb	0	; select bank0
  4069  13F8  0820               	movf	?_getAD,w
  4070  13F9  3FC0               	movwi [0]fsr1
  4071  13FA  0821               	movf	?_getAD+1,w
  4072  13FB  3FC1               	movwi [1]fsr1
  4073                           
  4074                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4075  13FC  087A               	movf	_Temp,w
  4076  13FD  3E0C               	addlw	12
  4077  13FE  0086               	movwf	6
  4078  13FF  3001               	movlw	1	; select bank2/3
  4079  1400  0087               	movwf	7
  4080  1401  3F40               	moviw [0]fsr1
  4081  1402  00A4               	movwf	??_getTemp_AD
  4082  1403  3F41               	moviw [1]fsr1
  4083  1404  00A5               	movwf	??_getTemp_AD+1
  4084  1405  087A               	movf	_Temp,w
  4085  1406  3E08               	addlw	8
  4086  1407  0086               	movwf	6
  4087  1408  3001               	movlw	1	; select bank2/3
  4088  1409  0087               	movwf	7
  4089  140A  3F40               	moviw [0]fsr1
  4090  140B  00A6               	movwf	??_getTemp_AD+2
  4091  140C  3F41               	moviw [1]fsr1
  4092  140D  00A7               	movwf	??_getTemp_AD+3
  4093  140E  0825               	movf	??_getTemp_AD+1,w
  4094  140F  0227               	subwf	??_getTemp_AD+3,w
  4095  1410  1D03               	skipz
  4096  1411  2C14               	goto	u9455
  4097  1412  0824               	movf	??_getTemp_AD,w
  4098  1413  0226               	subwf	??_getTemp_AD+2,w
  4099  1414                     u9455:	
  4100  1414  1803               	skipnc
  4101  1415  2C25               	goto	l9334
  4102                           
  4103                           ;OverTemperature_B1.c: 41: {
  4104                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4105  1416  087A               	movf	_Temp,w
  4106  1417  3E0C               	addlw	12
  4107  1418  0086               	movwf	6
  4108  1419  3001               	movlw	1	; select bank2/3
  4109  141A  0087               	movwf	7
  4110  141B  087A               	movf	_Temp,w
  4111  141C  3E08               	addlw	8
  4112  141D  0084               	movwf	4
  4113  141E  3001               	movlw	1	; select bank2/3
  4114  141F  0085               	movwf	5
  4115  1420  3F40               	moviw [0]fsr1
  4116  1421  3F80               	movwi [0]fsr0
  4117  1422  3F41               	moviw [1]fsr1
  4118  1423  3F81               	movwi [1]fsr0
  4119                           
  4120                           ;OverTemperature_B1.c: 43: }
  4121  1424  0008               	return
  4122  1425                     l9334:	
  4123                           
  4124                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4125  1425  087A               	movf	_Temp,w
  4126  1426  3E0C               	addlw	12
  4127  1427  0086               	movwf	6
  4128  1428  3001               	movlw	1	; select bank2/3
  4129  1429  0087               	movwf	7
  4130  142A  3F40               	moviw [0]fsr1
  4131  142B  00A4               	movwf	??_getTemp_AD
  4132  142C  3F41               	moviw [1]fsr1
  4133  142D  00A5               	movwf	??_getTemp_AD+1
  4134  142E  087A               	movf	_Temp,w
  4135  142F  3E0A               	addlw	10
  4136  1430  0086               	movwf	6
  4137  1431  3001               	movlw	1	; select bank2/3
  4138  1432  0087               	movwf	7
  4139  1433  3F40               	moviw [0]fsr1
  4140  1434  00A6               	movwf	??_getTemp_AD+2
  4141  1435  3F41               	moviw [1]fsr1
  4142  1436  00A7               	movwf	??_getTemp_AD+3
  4143  1437  0825               	movf	??_getTemp_AD+1,w
  4144  1438  0227               	subwf	??_getTemp_AD+3,w
  4145  1439  1D03               	skipz
  4146  143A  2C3D               	goto	u9465
  4147  143B  0824               	movf	??_getTemp_AD,w
  4148  143C  0226               	subwf	??_getTemp_AD+2,w
  4149  143D                     u9465:	
  4150  143D  1803               	skipnc
  4151  143E  0008               	return
  4152                           
  4153                           ;OverTemperature_B1.c: 45: {
  4154                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4155  143F  087A               	movf	_Temp,w
  4156  1440  3E0C               	addlw	12
  4157  1441  0086               	movwf	6
  4158  1442  3001               	movlw	1	; select bank2/3
  4159  1443  0087               	movwf	7
  4160  1444  087A               	movf	_Temp,w
  4161  1445  3E0A               	addlw	10
  4162  1446  0084               	movwf	4
  4163  1447  3001               	movlw	1	; select bank2/3
  4164  1448  0085               	movwf	5
  4165  1449  3F40               	moviw [0]fsr1
  4166  144A  3F80               	movwi [0]fsr0
  4167  144B  3F41               	moviw [1]fsr1
  4168  144C  3F81               	movwi [1]fsr0
  4169  144D  0008               	return
  4170  144E                     __end_of_getTemp_AD:	
  4171                           
  4172                           	psect	text2
  4173  1FB5                     __ptext2:	
  4174 ;; *************** function _getPowerFault_AD *****************
  4175 ;; Defined at:
  4176 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  channel         1    wreg     unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  channel         1    8[BANK0 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        5 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    5
  4197 ;; This function calls:
  4198 ;;		_getAD
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function _getPowerFault_AD
  4206  1FB5                     _getPowerFault_AD:	
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4210                           ;getPowerFault_AD@channel stored from wreg
  4211  1FB5  0020               	movlb	0	; select bank0
  4212  1FB6  00A8               	movwf	getPowerFault_AD@channel
  4213                           
  4214                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4215  1FB7  0021               	movlb	1	; select bank1
  4216  1FB8  083D               	movf	_PF^(0+128),w
  4217  1FB9  0086               	movwf	6
  4218  1FBA  3001               	movlw	1	; select bank2/3
  4219  1FBB  0087               	movwf	7
  4220  1FBC  1D81               	btfss	1,3
  4221  1FBD  0008               	return
  4222                           
  4223                           ;PowerFault_B1.c: 52: {
  4224                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4225  1FBE  30F0               	movlw	240
  4226  1FBF  0020               	movlb	0	; select bank0
  4227  1FC0  00A4               	movwf	??_getPowerFault_AD
  4228  1FC1  0824               	movf	??_getPowerFault_AD,w
  4229  1FC2  00A0               	movwf	getAD@adcon1
  4230  1FC3  0828               	movf	getPowerFault_AD@channel,w
  4231  1FC4  3198  20B0  319F   	fcall	_getAD
  4232  1FC7  0021               	movlb	1	; select bank1
  4233  1FC8  083D               	movf	_PF^(0+128),w
  4234  1FC9  3E06               	addlw	6
  4235  1FCA  0086               	movwf	6
  4236  1FCB  3001               	movlw	1	; select bank2/3
  4237  1FCC  0087               	movwf	7
  4238  1FCD  0020               	movlb	0	; select bank0
  4239  1FCE  0820               	movf	?_getAD,w
  4240  1FCF  3FC0               	movwi [0]fsr1
  4241  1FD0  0821               	movf	?_getAD+1,w
  4242  1FD1  3FC1               	movwi [1]fsr1
  4243                           
  4244                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4245  1FD2  0021               	movlb	1	; select bank1
  4246  1FD3  083D               	movf	_PF^(0+128),w
  4247  1FD4  3E06               	addlw	6
  4248  1FD5  0086               	movwf	6
  4249  1FD6  3001               	movlw	1	; select bank2/3
  4250  1FD7  0087               	movwf	7
  4251  1FD8  3F40               	moviw [0]fsr1
  4252  1FD9  0020               	movlb	0	; select bank0
  4253  1FDA  00A4               	movwf	??_getPowerFault_AD
  4254  1FDB  3F41               	moviw [1]fsr1
  4255  1FDC  00A5               	movwf	??_getPowerFault_AD+1
  4256  1FDD  0021               	movlb	1	; select bank1
  4257  1FDE  083D               	movf	_PF^(0+128),w
  4258  1FDF  3E04               	addlw	4
  4259  1FE0  0086               	movwf	6
  4260  1FE1  3001               	movlw	1	; select bank2/3
  4261  1FE2  0087               	movwf	7
  4262  1FE3  3F40               	moviw [0]fsr1
  4263  1FE4  0020               	movlb	0	; select bank0
  4264  1FE5  00A6               	movwf	??_getPowerFault_AD+2
  4265  1FE6  3F41               	moviw [1]fsr1
  4266  1FE7  00A7               	movwf	??_getPowerFault_AD+3
  4267  1FE8  0825               	movf	??_getPowerFault_AD+1,w
  4268  1FE9  0227               	subwf	??_getPowerFault_AD+3,w
  4269  1FEA  1D03               	skipz
  4270  1FEB  2FEE               	goto	u9485
  4271  1FEC  0824               	movf	??_getPowerFault_AD,w
  4272  1FED  0226               	subwf	??_getPowerFault_AD+2,w
  4273  1FEE                     u9485:	
  4274  1FEE  1803               	skipnc
  4275  1FEF  0008               	return
  4276                           
  4277                           ;PowerFault_B1.c: 55: {
  4278                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4279  1FF0  0021               	movlb	1	; select bank1
  4280  1FF1  083D               	movf	_PF^(0+128),w
  4281  1FF2  3E06               	addlw	6
  4282  1FF3  0086               	movwf	6
  4283  1FF4  3001               	movlw	1	; select bank2/3
  4284  1FF5  0087               	movwf	7
  4285  1FF6  083D               	movf	_PF^(0+128),w
  4286  1FF7  3E04               	addlw	4
  4287  1FF8  0084               	movwf	4
  4288  1FF9  3001               	movlw	1	; select bank2/3
  4289  1FFA  0085               	movwf	5
  4290  1FFB  3F40               	moviw [0]fsr1
  4291  1FFC  3F80               	movwi [0]fsr0
  4292  1FFD  3F41               	moviw [1]fsr1
  4293  1FFE  3F81               	movwi [1]fsr0
  4294  1FFF  0008               	return
  4295  2000                     __end_of_getPowerFault_AD:	
  4296                           
  4297                           	psect	text3
  4298  0A5C                     __ptext3:	
  4299 ;; *************** function _getLoad_AD *****************
  4300 ;; Defined at:
  4301 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  channel         1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  channel         1    9[BANK0 ] unsigned char 
  4306 ;;  i               1   11[BANK0 ] unsigned char 
  4307 ;;  j               1   10[BANK0 ] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        8 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    5
  4324 ;; This function calls:
  4325 ;;		_getAD
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _getLoad_AD
  4333  0A5C                     _getLoad_AD:	
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4337                           ;getLoad_AD@channel stored from wreg
  4338  0A5C  0020               	movlb	0	; select bank0
  4339  0A5D  00A9               	movwf	getLoad_AD@channel
  4340                           
  4341                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4342  0A5E  01AB               	clrf	getLoad_AD@i
  4343  0A5F  01AA               	clrf	getLoad_AD@j
  4344                           
  4345                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4346  0A60  087B               	movf	_Load,w
  4347  0A61  0086               	movwf	6
  4348  0A62  3002               	movlw	2	; select bank4/5
  4349  0A63  0087               	movwf	7
  4350  0A64  1E01               	btfss	1,4
  4351  0A65  0008               	return
  4352                           
  4353                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4354  0A66  30C0               	movlw	192
  4355  0A67  00A4               	movwf	??_getLoad_AD
  4356  0A68  0824               	movf	??_getLoad_AD,w
  4357  0A69  00A0               	movwf	getAD@adcon1
  4358  0A6A  0829               	movf	getLoad_AD@channel,w
  4359  0A6B  3198  20B0  318A   	fcall	_getAD
  4360  0A6E  087B               	movf	_Load,w
  4361  0A6F  3E32               	addlw	50
  4362  0A70  0086               	movwf	6
  4363  0A71  3002               	movlw	2	; select bank4/5
  4364  0A72  0087               	movwf	7
  4365  0A73  0020               	movlb	0	; select bank0
  4366  0A74  0820               	movf	?_getAD,w
  4367  0A75  3FC0               	movwi [0]fsr1
  4368  0A76  0821               	movf	?_getAD+1,w
  4369  0A77  3FC1               	movwi [1]fsr1
  4370                           
  4371                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4372  0A78  01AB               	clrf	getLoad_AD@i
  4373  0A79  3005               	movlw	5
  4374  0A7A  022B               	subwf	getLoad_AD@i,w
  4375  0A7B  1803               	btfsc	3,0
  4376  0A7C  2AB6               	goto	l9184
  4377  0A7D                     l9174:	
  4378                           
  4379                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4380  0A7D  087B               	movf	_Load,w
  4381  0A7E  3E32               	addlw	50
  4382  0A7F  0086               	movwf	6
  4383  0A80  3002               	movlw	2	; select bank4/5
  4384  0A81  0087               	movwf	7
  4385  0A82  3F40               	moviw [0]fsr1
  4386  0A83  00A4               	movwf	??_getLoad_AD
  4387  0A84  3F41               	moviw [1]fsr1
  4388  0A85  00A5               	movwf	??_getLoad_AD+1
  4389  0A86  352B               	lslf	getLoad_AD@i,w
  4390  0A87  3E08               	addlw	8
  4391  0A88  077B               	addwf	_Load,w
  4392  0A89  00A6               	movwf	??_getLoad_AD+2
  4393  0A8A  0826               	movf	??_getLoad_AD+2,w
  4394  0A8B  0086               	movwf	6
  4395  0A8C  3002               	movlw	2	; select bank4/5
  4396  0A8D  0087               	movwf	7
  4397  0A8E  3F40               	moviw [0]fsr1
  4398  0A8F  00A7               	movwf	??_getLoad_AD+3
  4399  0A90  3F41               	moviw [1]fsr1
  4400  0A91  00A8               	movwf	??_getLoad_AD+4
  4401  0A92  0825               	movf	??_getLoad_AD+1,w
  4402  0A93  0228               	subwf	??_getLoad_AD+4,w
  4403  0A94  1D03               	skipz
  4404  0A95  2A98               	goto	u9165
  4405  0A96  0824               	movf	??_getLoad_AD,w
  4406  0A97  0227               	subwf	??_getLoad_AD+3,w
  4407  0A98                     u9165:	
  4408  0A98  1803               	skipnc
  4409  0A99  2AAE               	goto	l9180
  4410                           
  4411                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4412  0A9A  087B               	movf	_Load,w
  4413  0A9B  3E32               	addlw	50
  4414  0A9C  0086               	movwf	6
  4415  0A9D  3002               	movlw	2	; select bank4/5
  4416  0A9E  0087               	movwf	7
  4417  0A9F  352B               	lslf	getLoad_AD@i,w
  4418  0AA0  3E08               	addlw	8
  4419  0AA1  077B               	addwf	_Load,w
  4420  0AA2  00A4               	movwf	??_getLoad_AD
  4421  0AA3  0824               	movf	??_getLoad_AD,w
  4422  0AA4  0084               	movwf	4
  4423  0AA5  3002               	movlw	2	; select bank4/5
  4424  0AA6  0085               	movwf	5
  4425  0AA7  3F40               	moviw [0]fsr1
  4426  0AA8  3F80               	movwi [0]fsr0
  4427  0AA9  3F41               	moviw [1]fsr1
  4428  0AAA  3F81               	movwi [1]fsr0
  4429                           
  4430                           ;OverLoad_B1.c: 24: j = 1;
  4431  0AAB  01AA               	clrf	getLoad_AD@j
  4432  0AAC  0AAA               	incf	getLoad_AD@j,f
  4433                           
  4434                           ;OverLoad_B1.c: 25: break;
  4435  0AAD  2AB6               	goto	l9184
  4436  0AAE                     l9180:	
  4437  0AAE  3001               	movlw	1
  4438  0AAF  00A4               	movwf	??_getLoad_AD
  4439  0AB0  0824               	movf	??_getLoad_AD,w
  4440  0AB1  07AB               	addwf	getLoad_AD@i,f
  4441  0AB2  3005               	movlw	5
  4442  0AB3  022B               	subwf	getLoad_AD@i,w
  4443  0AB4  1C03               	skipc
  4444  0AB5  2A7D               	goto	l9174
  4445  0AB6                     l9184:	
  4446                           
  4447                           ;OverLoad_B1.c: 26: }
  4448                           ;OverLoad_B1.c: 27: }
  4449                           ;OverLoad_B1.c: 28: if (!j) {
  4450  0AB6  08AA               	movf	getLoad_AD@j,f
  4451  0AB7  1D03               	skipz
  4452  0AB8  0008               	return
  4453                           
  4454                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4455  0AB9  01AB               	clrf	getLoad_AD@i
  4456  0ABA                     L1:	
  4457  0ABA  3005               	movlw	5
  4458  0ABB  022B               	subwf	getLoad_AD@i,w
  4459  0ABC  1803               	btfsc	3,0
  4460  0ABD  0008               	return
  4461                           
  4462                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4463  0ABE  352B               	lslf	getLoad_AD@i,w
  4464  0ABF  3E1A               	addlw	26
  4465  0AC0  077B               	addwf	_Load,w
  4466  0AC1  00A4               	movwf	??_getLoad_AD
  4467  0AC2  0824               	movf	??_getLoad_AD,w
  4468  0AC3  0086               	movwf	6
  4469  0AC4  3002               	movlw	2	; select bank4/5
  4470  0AC5  0087               	movwf	7
  4471  0AC6  3F40               	moviw [0]fsr1
  4472  0AC7  00A5               	movwf	??_getLoad_AD+1
  4473  0AC8  3F41               	moviw [1]fsr1
  4474  0AC9  00A6               	movwf	??_getLoad_AD+2
  4475  0ACA  087B               	movf	_Load,w
  4476  0ACB  3E32               	addlw	50
  4477  0ACC  0086               	movwf	6
  4478  0ACD  3002               	movlw	2	; select bank4/5
  4479  0ACE  0087               	movwf	7
  4480  0ACF  3F40               	moviw [0]fsr1
  4481  0AD0  00A7               	movwf	??_getLoad_AD+3
  4482  0AD1  3F41               	moviw [1]fsr1
  4483  0AD2  00A8               	movwf	??_getLoad_AD+4
  4484  0AD3  0826               	movf	??_getLoad_AD+2,w
  4485  0AD4  0228               	subwf	??_getLoad_AD+4,w
  4486  0AD5  1D03               	skipz
  4487  0AD6  2AD9               	goto	u9205
  4488  0AD7  0825               	movf	??_getLoad_AD+1,w
  4489  0AD8  0227               	subwf	??_getLoad_AD+3,w
  4490  0AD9                     u9205:	
  4491  0AD9  1803               	skipnc
  4492  0ADA  2AED               	goto	l9196
  4493                           
  4494                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4495  0ADB  087B               	movf	_Load,w
  4496  0ADC  3E32               	addlw	50
  4497  0ADD  0086               	movwf	6
  4498  0ADE  3002               	movlw	2	; select bank4/5
  4499  0ADF  0087               	movwf	7
  4500  0AE0  352B               	lslf	getLoad_AD@i,w
  4501  0AE1  3E1A               	addlw	26
  4502  0AE2  077B               	addwf	_Load,w
  4503  0AE3  00A4               	movwf	??_getLoad_AD
  4504  0AE4  0824               	movf	??_getLoad_AD,w
  4505  0AE5  0084               	movwf	4
  4506  0AE6  3002               	movlw	2	; select bank4/5
  4507  0AE7  0085               	movwf	5
  4508  0AE8  3F40               	moviw [0]fsr1
  4509  0AE9  3F80               	movwi [0]fsr0
  4510  0AEA  3F41               	moviw [1]fsr1
  4511  0AEB  3F81               	movwi [1]fsr0
  4512                           
  4513                           ;OverLoad_B1.c: 32: break;
  4514  0AEC  0008               	return
  4515  0AED                     l9196:	
  4516  0AED  3001               	movlw	1
  4517  0AEE  00A4               	movwf	??_getLoad_AD
  4518  0AEF  0824               	movf	??_getLoad_AD,w
  4519  0AF0  07AB               	addwf	getLoad_AD@i,f
  4520  0AF1  2ABA               	goto	L1
  4521  0AF2                     __end_of_getLoad_AD:	
  4522                           
  4523                           	psect	text4
  4524  18B0                     __ptext4:	
  4525 ;; *************** function _getAD *****************
  4526 ;; Defined at:
  4527 ;;		line 386 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  adcon0          1    wreg     unsigned char 
  4530 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  2    0[BANK0 ] int 
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4542 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4546 ;;Total ram usage:        4 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    4
  4549 ;; This function calls:
  4550 ;;		Nothing
  4551 ;; This function is called by:
  4552 ;;		_getLoad_AD
  4553 ;;		_getTemp_AD
  4554 ;;		_getPowerFault_AD
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function _getAD
  4560  18B0                     _getAD:	
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4564                           ;getAD@adcon0 stored from wreg
  4565  18B0  0020               	movlb	0	; select bank0
  4566  18B1  00A3               	movwf	getAD@adcon0
  4567                           
  4568                           ;MCU_B1.c: 387: ADCON0 = adcon0;
  4569  18B2  0823               	movf	getAD@adcon0,w
  4570  18B3  0021               	movlb	1	; select bank1
  4571  18B4  009D               	movwf	29	;volatile
  4572                           
  4573                           ;MCU_B1.c: 388: ADCON1 = adcon1;
  4574  18B5  0020               	movlb	0	; select bank0
  4575  18B6  0820               	movf	getAD@adcon1,w
  4576  18B7  0021               	movlb	1	; select bank1
  4577  18B8  009E               	movwf	30	;volatile
  4578                           
  4579                           ;MCU_B1.c: 389: GO_nDONE = 1;
  4580  18B9  149D               	bsf	29,1	;volatile
  4581  18BA                     l1349:	
  4582                           ;MCU_B1.c: 390: while (GO_nDONE);
  4583                           
  4584  18BA  189D               	btfsc	29,1	;volatile
  4585  18BB  28BA               	goto	l1349
  4586                           
  4587                           ;MCU_B1.c: 391: return ((ADRESH*256)+ADRESL);
  4588  18BC  081C               	movf	28,w	;volatile
  4589  18BD  0020               	movlb	0	; select bank0
  4590  18BE  01A1               	clrf	?_getAD+1
  4591  18BF  07A1               	addwf	?_getAD+1,f
  4592  18C0  0021               	movlb	1	; select bank1
  4593  18C1  081B               	movf	27,w	;volatile
  4594  18C2  0020               	movlb	0	; select bank0
  4595  18C3  01A0               	clrf	?_getAD
  4596  18C4  07A0               	addwf	?_getAD,f
  4597  18C5  0008               	return
  4598  18C6                     __end_of_getAD:	
  4599                           
  4600                           	psect	text5
  4601  197A                     __ptext5:	
  4602 ;; *************** function _WDT_Main *****************
  4603 ;; Defined at:
  4604 ;;		line 944 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;		None
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;		None
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;Total ram usage:        1 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    5
  4625 ;; This function calls:
  4626 ;;		_WDT_Clearing
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           
  4633                           ;psect for function _WDT_Main
  4634  197A                     _WDT_Main:	
  4635                           
  4636                           ;MCU_B1.c: 945: if (WDT->Enable) {
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4640  197A  0021               	movlb	1	; select bank1
  4641  197B  086D               	movf	_WDT^(0+128),w
  4642  197C  0086               	movwf	6
  4643  197D  0187               	clrf	7
  4644  197E  1C01               	btfss	1,0
  4645  197F  0008               	return
  4646                           
  4647                           ;MCU_B1.c: 946: if (WDT->Count-- > 0) {
  4648  1980  0A6D               	incf	_WDT^(0+128),w
  4649  1981  0086               	movwf	6
  4650  1982  0187               	clrf	7
  4651  1983  3001               	movlw	1
  4652  1984  0281               	subwf	1,f
  4653  1985  0801               	movf	1,w
  4654  1986  3AFF               	xorlw	255
  4655  1987  1903               	skipnz
  4656  1988  0008               	return
  4657                           
  4658                           ;MCU_B1.c: 947: WDT->Count = 10;
  4659  1989  300A               	movlw	10
  4660  198A  0020               	movlb	0	; select bank0
  4661  198B  00A0               	movwf	??_WDT_Main
  4662  198C  0021               	movlb	1	; select bank1
  4663  198D  0A6D               	incf	_WDT^(0+128),w
  4664  198E  0086               	movwf	6
  4665  198F  0187               	clrf	7
  4666  1990  0020               	movlb	0	; select bank0
  4667  1991  0820               	movf	??_WDT_Main,w
  4668  1992  0081               	movwf	1
  4669                           
  4670                           ;MCU_B1.c: 948: WDT_Clearing();
  4671  1993  3180  2002         	fcall	_WDT_Clearing
  4672  1995  0008               	return
  4673  1996                     __end_of_WDT_Main:	
  4674                           
  4675                           	psect	text6
  4676  0002                     __ptext6:	
  4677 ;; *************** function _WDT_Clearing *****************
  4678 ;; Defined at:
  4679 ;;		line 954 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;		None               void
  4686 ;; Registers used:
  4687 ;;		None
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:    4
  4700 ;; This function calls:
  4701 ;;		Nothing
  4702 ;; This function is called by:
  4703 ;;		_WDT_Main
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           
  4708                           ;psect for function _WDT_Clearing
  4709  0002                     _WDT_Clearing:	
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _WDT_Clearing: []
  4713  0002  0064               	clrwdt	;# 
  4714  0003  0008               	return
  4715  0004                     __end_of_WDT_Clearing:	
  4716                           
  4717                           	psect	text7
  4718  257F                     __ptext7:	
  4719 ;; *************** function _Temp_Main *****************
  4720 ;; Defined at:
  4721 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;		None
  4726 ;; Return value:  Size  Location     Type
  4727 ;;		None               void
  4728 ;; Registers used:
  4729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4739 ;;Total ram usage:        0 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:   10
  4742 ;; This function calls:
  4743 ;;		_setTemp_Main
  4744 ;; This function is called by:
  4745 ;;		_main
  4746 ;; This function uses a non-reentrant model
  4747 ;;
  4748                           
  4749                           
  4750                           ;psect for function _Temp_Main
  4751  257F                     _Temp_Main:	
  4752                           
  4753                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4754                           
  4755                           ;incstack = 0
  4756                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4757  257F  3185  25F8         	fcall	_setTemp_Main
  4758  2581  0008               	return
  4759  2582                     __end_of_Temp_Main:	
  4760                           
  4761                           	psect	text8
  4762  05F8                     __ptext8:	
  4763 ;; *************** function _setTemp_Main *****************
  4764 ;; Defined at:
  4765 ;;		line 64 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;		None
  4768 ;; Auto vars:     Size  Location     Type
  4769 ;;		None
  4770 ;; Return value:  Size  Location     Type
  4771 ;;		None               void
  4772 ;; Registers used:
  4773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;Total ram usage:        3 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    9
  4786 ;; This function calls:
  4787 ;;		_getLoad_Safe
  4788 ;;		_getPF_Safe
  4789 ;;		_setOverTemp_Exceptions
  4790 ;; This function is called by:
  4791 ;;		_Temp_Main
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _setTemp_Main
  4797  05F8                     _setTemp_Main:	
  4798                           
  4799                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4800                           
  4801                           ;incstack = 0
  4802                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4803  05F8  087A               	movf	_Temp,w
  4804  05F9  0086               	movwf	6
  4805  05FA  3001               	movlw	1	; select bank2/3
  4806  05FB  0087               	movwf	7
  4807  05FC  1C01               	btfss	1,0
  4808  05FD  0008               	return
  4809                           
  4810                           ;OverTemperature_B1.c: 67: {
  4811                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4812  05FE  087A               	movf	_Temp,w
  4813  05FF  0086               	movwf	6
  4814  0600  3001               	movlw	1	; select bank2/3
  4815  0601  0087               	movwf	7
  4816  0602  1901               	btfsc	1,2
  4817  0603  2E44               	goto	l8804
  4818                           
  4819                           ;OverTemperature_B1.c: 69: {
  4820                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4821  0604  0A7A               	incf	_Temp,w
  4822  0605  0086               	movwf	6
  4823  0606  3001               	movlw	1	; select bank2/3
  4824  0607  0087               	movwf	7
  4825  0608  3001               	movlw	1
  4826  0609  0781               	addwf	1,f
  4827  060A  3141               	addfsr 1,1
  4828  060B  1803               	skipnc
  4829  060C  0A81               	incf	1,f
  4830                           
  4831                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4832  060D  0A7A               	incf	_Temp,w
  4833  060E  0086               	movwf	6
  4834  060F  3001               	movlw	1	; select bank2/3
  4835  0610  0087               	movwf	7
  4836  0611  3F40               	moviw [0]fsr1
  4837  0612  0020               	movlb	0	; select bank0
  4838  0613  00AD               	movwf	??_setTemp_Main
  4839  0614  3F41               	moviw [1]fsr1
  4840  0615  00AE               	movwf	??_setTemp_Main+1
  4841  0616  3001               	movlw	1
  4842  0617  022E               	subwf	??_setTemp_Main+1,w
  4843  0618  30F4               	movlw	244
  4844  0619  1903               	skipnz
  4845  061A  022D               	subwf	??_setTemp_Main,w
  4846  061B  1C03               	skipc
  4847  061C  0008               	return
  4848                           
  4849                           ;OverTemperature_B1.c: 72: {
  4850                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4851  061D  31A6  2642  3185   	fcall	_getLoad_Safe
  4852  0620  3A00               	xorlw	0
  4853  0621  1903               	skipnz
  4854  0622  2E3B               	goto	l8802
  4855  0623  31A5  25E5  3185   	fcall	_getPF_Safe
  4856  0626  3A00               	xorlw	0
  4857  0627  1903               	skipnz
  4858  0628  2E3B               	goto	l8802
  4859                           
  4860                           ;OverTemperature_B1.c: 74: {
  4861                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4862  0629  0A7A               	incf	_Temp,w
  4863  062A  0086               	movwf	6
  4864  062B  3001               	movlw	1	; select bank2/3
  4865  062C  0087               	movwf	7
  4866  062D  3000               	movlw	0
  4867  062E  3FC0               	movwi [0]fsr1
  4868  062F  3FC1               	movwi [1]fsr1
  4869                           
  4870                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4871  0630  087A               	movf	_Temp,w
  4872  0631  0086               	movwf	6
  4873  0632  3001               	movlw	1	; select bank2/3
  4874  0633  0087               	movwf	7
  4875  0634  1501               	bsf	1,2
  4876                           
  4877                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4878  0635  087A               	movf	_Temp,w
  4879  0636  0086               	movwf	6
  4880  0637  3001               	movlw	1	; select bank2/3
  4881  0638  0087               	movwf	7
  4882  0639  1201               	bcf	1,4
  4883                           
  4884                           ;OverTemperature_B1.c: 78: }
  4885  063A  0008               	return
  4886  063B                     l8802:	
  4887                           
  4888                           ;OverTemperature_B1.c: 79: else
  4889                           ;OverTemperature_B1.c: 80: {
  4890                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4891  063B  0A7A               	incf	_Temp,w
  4892  063C  0086               	movwf	6
  4893  063D  3001               	movlw	1	; select bank2/3
  4894  063E  0087               	movwf	7
  4895  063F  30E8               	movlw	232
  4896  0640  3FC0               	movwi [0]fsr1
  4897  0641  3003               	movlw	3
  4898  0642  3FC1               	movwi [1]fsr1
  4899                           
  4900                           ;OverTemperature_B1.c: 82: }
  4901                           ;OverTemperature_B1.c: 83: }
  4902                           ;OverTemperature_B1.c: 84: }
  4903  0643  0008               	return
  4904  0644                     l8804:	
  4905                           
  4906                           ;OverTemperature_B1.c: 85: else
  4907                           ;OverTemperature_B1.c: 86: {
  4908                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4909  0644  0A7A               	incf	_Temp,w
  4910  0645  0086               	movwf	6
  4911  0646  3001               	movlw	1	; select bank2/3
  4912  0647  0087               	movwf	7
  4913  0648  3001               	movlw	1
  4914  0649  0781               	addwf	1,f
  4915  064A  3141               	addfsr 1,1
  4916  064B  1803               	skipnc
  4917  064C  0A81               	incf	1,f
  4918                           
  4919                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4920  064D  0A7A               	incf	_Temp,w
  4921  064E  0086               	movwf	6
  4922  064F  3001               	movlw	1	; select bank2/3
  4923  0650  0087               	movwf	7
  4924  0651  3F40               	moviw [0]fsr1
  4925  0652  0020               	movlb	0	; select bank0
  4926  0653  00AD               	movwf	??_setTemp_Main
  4927  0654  3F41               	moviw [1]fsr1
  4928  0655  00AE               	movwf	??_setTemp_Main+1
  4929  0656  3000               	movlw	0
  4930  0657  022E               	subwf	??_setTemp_Main+1,w
  4931  0658  3004               	movlw	4
  4932  0659  1903               	skipnz
  4933  065A  022D               	subwf	??_setTemp_Main,w
  4934  065B  1C03               	skipc
  4935  065C  0008               	return
  4936                           
  4937                           ;OverTemperature_B1.c: 89: {
  4938                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4939  065D  0A7A               	incf	_Temp,w
  4940  065E  0086               	movwf	6
  4941  065F  3001               	movlw	1	; select bank2/3
  4942  0660  0087               	movwf	7
  4943  0661  3000               	movlw	0
  4944  0662  3FC0               	movwi [0]fsr1
  4945  0663  3FC1               	movwi [1]fsr1
  4946                           
  4947                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4948  0664  087A               	movf	_Temp,w
  4949  0665  0086               	movwf	6
  4950  0666  3001               	movlw	1	; select bank2/3
  4951  0667  0087               	movwf	7
  4952  0668  1101               	bcf	1,2
  4953                           
  4954                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4955  0669  087A               	movf	_Temp,w
  4956  066A  3E0A               	addlw	10
  4957  066B  0086               	movwf	6
  4958  066C  3001               	movlw	1	; select bank2/3
  4959  066D  0087               	movwf	7
  4960  066E  087A               	movf	_Temp,w
  4961  066F  3E06               	addlw	6
  4962  0670  0084               	movwf	4
  4963  0671  3001               	movlw	1	; select bank2/3
  4964  0672  0085               	movwf	5
  4965  0673  3F40               	moviw [0]fsr1
  4966  0674  3F80               	movwi [0]fsr0
  4967  0675  3F41               	moviw [1]fsr1
  4968  0676  3F81               	movwi [1]fsr0
  4969                           
  4970                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4971  0677  087A               	movf	_Temp,w
  4972  0678  0086               	movwf	6
  4973  0679  3001               	movlw	1	; select bank2/3
  4974  067A  0087               	movwf	7
  4975  067B  1C81               	btfss	1,1
  4976  067C  2EAA               	goto	l8826
  4977                           
  4978                           ;OverTemperature_B1.c: 94: {
  4979                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4980  067D  087A               	movf	_Temp,w
  4981  067E  3E06               	addlw	6
  4982  067F  0086               	movwf	6
  4983  0680  3001               	movlw	1	; select bank2/3
  4984  0681  0087               	movwf	7
  4985  0682  3F40               	moviw [0]fsr1
  4986  0683  00AD               	movwf	??_setTemp_Main
  4987  0684  3F41               	moviw [1]fsr1
  4988  0685  00AE               	movwf	??_setTemp_Main+1
  4989  0686  3002               	movlw	2
  4990  0687  022E               	subwf	??_setTemp_Main+1,w
  4991  0688  3058               	movlw	88
  4992  0689  1903               	skipnz
  4993  068A  022D               	subwf	??_setTemp_Main,w
  4994  068B  1C03               	skipc
  4995  068C  2ED8               	goto	l8836
  4996                           
  4997                           ;OverTemperature_B1.c: 96: {
  4998                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4999  068D  3001               	movlw	1
  5000  068E  00AD               	movwf	??_setTemp_Main
  5001  068F  087A               	movf	_Temp,w
  5002  0690  3E03               	addlw	3
  5003  0691  0086               	movwf	6
  5004  0692  3001               	movlw	1	; select bank2/3
  5005  0693  0087               	movwf	7
  5006  0694  082D               	movf	??_setTemp_Main,w
  5007  0695  0781               	addwf	1,f
  5008                           
  5009                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5010  0696  087A               	movf	_Temp,w
  5011  0697  3E03               	addlw	3
  5012  0698  0086               	movwf	6
  5013  0699  3001               	movlw	1	; select bank2/3
  5014  069A  0087               	movwf	7
  5015  069B  3003               	movlw	3
  5016  069C  0201               	subwf	1,w
  5017  069D  1C03               	skipc
  5018  069E  2EDE               	goto	l8838
  5019                           
  5020                           ;OverTemperature_B1.c: 99: {
  5021                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5022  069F  087A               	movf	_Temp,w
  5023  06A0  3E03               	addlw	3
  5024  06A1  0086               	movwf	6
  5025  06A2  3001               	movlw	1	; select bank2/3
  5026  06A3  0087               	movwf	7
  5027  06A4  0181               	clrf	1
  5028                           
  5029                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5030  06A5  3000               	movlw	0
  5031  06A6  319F  2722  3185   	fcall	_setOverTemp_Exceptions
  5032                           
  5033                           ;OverTemperature_B1.c: 102: }
  5034                           ;OverTemperature_B1.c: 103: }
  5035  06A9  2EDE               	goto	l8838
  5036  06AA                     l8826:	
  5037                           ;OverTemperature_B1.c: 107: }
  5038                           ;OverTemperature_B1.c: 108: }
  5039                           
  5040                           ;OverTemperature_B1.c: 104: else
  5041                           ;OverTemperature_B1.c: 105: {
  5042                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5043                           
  5044                           
  5045                           ;OverTemperature_B1.c: 109: else
  5046                           ;OverTemperature_B1.c: 110: {
  5047                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5048  06AA  087A               	movf	_Temp,w
  5049  06AB  3E06               	addlw	6
  5050  06AC  0086               	movwf	6
  5051  06AD  3001               	movlw	1	; select bank2/3
  5052  06AE  0087               	movwf	7
  5053  06AF  3F40               	moviw [0]fsr1
  5054  06B0  0020               	movlb	0	; select bank0
  5055  06B1  00AD               	movwf	??_setTemp_Main
  5056  06B2  3F41               	moviw [1]fsr1
  5057  06B3  00AE               	movwf	??_setTemp_Main+1
  5058  06B4  3002               	movlw	2
  5059  06B5  022E               	subwf	??_setTemp_Main+1,w
  5060  06B6  3027               	movlw	39
  5061  06B7  1903               	skipnz
  5062  06B8  022D               	subwf	??_setTemp_Main,w
  5063  06B9  1803               	skipnc
  5064  06BA  2ED8               	goto	l8836
  5065                           
  5066                           ;OverTemperature_B1.c: 112: {
  5067                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5068  06BB  3001               	movlw	1
  5069  06BC  00AD               	movwf	??_setTemp_Main
  5070  06BD  087A               	movf	_Temp,w
  5071  06BE  3E03               	addlw	3
  5072  06BF  0086               	movwf	6
  5073  06C0  3001               	movlw	1	; select bank2/3
  5074  06C1  0087               	movwf	7
  5075  06C2  082D               	movf	??_setTemp_Main,w
  5076  06C3  0781               	addwf	1,f
  5077                           
  5078                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5079  06C4  087A               	movf	_Temp,w
  5080  06C5  3E03               	addlw	3
  5081  06C6  0086               	movwf	6
  5082  06C7  3001               	movlw	1	; select bank2/3
  5083  06C8  0087               	movwf	7
  5084  06C9  3003               	movlw	3
  5085  06CA  0201               	subwf	1,w
  5086  06CB  1C03               	skipc
  5087  06CC  2EDE               	goto	l8838
  5088                           
  5089                           ;OverTemperature_B1.c: 115: {
  5090                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5091  06CD  087A               	movf	_Temp,w
  5092  06CE  3E03               	addlw	3
  5093  06CF  0086               	movwf	6
  5094  06D0  3001               	movlw	1	; select bank2/3
  5095  06D1  0087               	movwf	7
  5096  06D2  0181               	clrf	1
  5097                           
  5098                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5099  06D3  3001               	movlw	1
  5100  06D4  319F  2722  3185   	fcall	_setOverTemp_Exceptions
  5101                           
  5102                           ;OverTemperature_B1.c: 118: }
  5103                           ;OverTemperature_B1.c: 119: }
  5104  06D7  2EDE               	goto	l8838
  5105  06D8                     l8836:	
  5106                           
  5107                           ;OverTemperature_B1.c: 120: else
  5108                           ;OverTemperature_B1.c: 121: {
  5109                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5110  06D8  087A               	movf	_Temp,w
  5111  06D9  3E03               	addlw	3
  5112  06DA  0086               	movwf	6
  5113  06DB  3001               	movlw	1	; select bank2/3
  5114  06DC  0087               	movwf	7
  5115  06DD  0181               	clrf	1
  5116  06DE                     l8838:	
  5117                           
  5118                           ;OverTemperature_B1.c: 123: }
  5119                           ;OverTemperature_B1.c: 124: }
  5120                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5121  06DE  087A               	movf	_Temp,w
  5122  06DF  0086               	movwf	6
  5123  06E0  3001               	movlw	1	; select bank2/3
  5124  06E1  0087               	movwf	7
  5125  06E2  1881               	btfsc	1,1
  5126  06E3  2EE9               	goto	l8842
  5127                           
  5128                           ;OverTemperature_B1.c: 126: {
  5129                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5130  06E4  087A               	movf	_Temp,w
  5131  06E5  0086               	movwf	6
  5132  06E6  3001               	movlw	1	; select bank2/3
  5133  06E7  0087               	movwf	7
  5134  06E8  1601               	bsf	1,4
  5135  06E9                     l8842:	
  5136                           
  5137                           ;OverTemperature_B1.c: 128: }
  5138                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5139  06E9  087A               	movf	_Temp,w
  5140  06EA  3E06               	addlw	6
  5141  06EB  0086               	movwf	6
  5142  06EC  3001               	movlw	1	; select bank2/3
  5143  06ED  0087               	movwf	7
  5144  06EE  3F40               	moviw [0]fsr1
  5145  06EF  0020               	movlb	0	; select bank0
  5146  06F0  00AD               	movwf	??_setTemp_Main
  5147  06F1  3F41               	moviw [1]fsr1
  5148  06F2  00AE               	movwf	??_setTemp_Main+1
  5149  06F3  082E               	movf	??_setTemp_Main+1,w
  5150  06F4  00AF               	movwf	??_setTemp_Main+2
  5151  06F5  087D               	movf	_Product,w
  5152  06F6  3E18               	addlw	24
  5153  06F7  0086               	movwf	6
  5154  06F8  3001               	movlw	1	; select bank2/3
  5155  06F9  0087               	movwf	7
  5156  06FA  082F               	movf	??_setTemp_Main+2,w
  5157  06FB  0081               	movwf	1
  5158                           
  5159                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5160  06FC  087A               	movf	_Temp,w
  5161  06FD  3E06               	addlw	6
  5162  06FE  0086               	movwf	6
  5163  06FF  3001               	movlw	1	; select bank2/3
  5164  0700  0087               	movwf	7
  5165  0701  0801               	movf	1,w
  5166  0702  00AD               	movwf	??_setTemp_Main
  5167  0703  087D               	movf	_Product,w
  5168  0704  3E19               	addlw	25
  5169  0705  0086               	movwf	6
  5170  0706  3001               	movlw	1	; select bank2/3
  5171  0707  0087               	movwf	7
  5172  0708  082D               	movf	??_setTemp_Main,w
  5173  0709  0081               	movwf	1
  5174                           
  5175                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5176  070A  087A               	movf	_Temp,w
  5177  070B  3E08               	addlw	8
  5178  070C  0086               	movwf	6
  5179  070D  3001               	movlw	1	; select bank2/3
  5180  070E  0087               	movwf	7
  5181  070F  3000               	movlw	0
  5182  0710  3FC0               	movwi [0]fsr1
  5183  0711  3FC1               	movwi [1]fsr1
  5184                           
  5185                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5186  0712  087A               	movf	_Temp,w
  5187  0713  3E0A               	addlw	10
  5188  0714  0086               	movwf	6
  5189  0715  3001               	movlw	1	; select bank2/3
  5190  0716  0087               	movwf	7
  5191  0717  3000               	movlw	0
  5192  0718  3FC0               	movwi [0]fsr1
  5193  0719  3FC1               	movwi [1]fsr1
  5194  071A  0008               	return
  5195  071B                     __end_of_setTemp_Main:	
  5196                           
  5197                           	psect	text9
  5198  1F22                     __ptext9:	
  5199 ;; *************** function _setOverTemp_Exceptions *****************
  5200 ;; Defined at:
  5201 ;;		line 138 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  command         1    wreg     unsigned char 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  command         1   12[BANK0 ] unsigned char 
  5206 ;; Return value:  Size  Location     Type
  5207 ;;		None               void
  5208 ;; Registers used:
  5209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5219 ;;Total ram usage:        2 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    8
  5222 ;; This function calls:
  5223 ;;		_DimmerLights_Exceptions
  5224 ;;		_setBuz
  5225 ;;		_setLED
  5226 ;;		_setRF_Enable
  5227 ;;		_setSw_Enable
  5228 ;; This function is called by:
  5229 ;;		_setTemp_Main
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _setOverTemp_Exceptions
  5235  1F22                     _setOverTemp_Exceptions:	
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5239                           ;setOverTemp_Exceptions@command stored from wreg
  5240  1F22  0020               	movlb	0	; select bank0
  5241  1F23  00AC               	movwf	setOverTemp_Exceptions@command
  5242                           
  5243                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5244  1F24  087A               	movf	_Temp,w
  5245  1F25  0086               	movwf	6
  5246  1F26  3001               	movlw	1	; select bank2/3
  5247  1F27  0087               	movwf	7
  5248  1F28  082C               	movf	setOverTemp_Exceptions@command,w
  5249  1F29  1081               	bcf	1,1
  5250  1F2A  1D03               	skipz
  5251  1F2B  1481               	bsf	1,1
  5252                           
  5253                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5254  1F2C  092C               	comf	setOverTemp_Exceptions@command,w
  5255  1F2D  3901               	andlw	1
  5256  1F2E  00AB               	movwf	??_setOverTemp_Exceptions
  5257  1F2F  087A               	movf	_Temp,w
  5258  1F30  0086               	movwf	6
  5259  1F31  3001               	movlw	1	; select bank2/3
  5260  1F32  0087               	movwf	7
  5261  1F33  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5262  1F34  0801               	movf	1,w
  5263  1F35  062B               	xorwf	??_setOverTemp_Exceptions,w
  5264  1F36  39EF               	andlw	-17
  5265  1F37  062B               	xorwf	??_setOverTemp_Exceptions,w
  5266  1F38  0081               	movwf	1
  5267                           
  5268                           ;OverTemperature_B1.c: 142: if(command)
  5269  1F39  082C               	movf	setOverTemp_Exceptions@command,w
  5270  1F3A  1903               	btfsc	3,2
  5271  1F3B  2F48               	goto	l8462
  5272                           
  5273                           ;OverTemperature_B1.c: 143: {
  5274                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5275  1F3C  3001               	movlw	1
  5276  1F3D  3191  2142  319F   	fcall	_DimmerLights_Exceptions
  5277                           
  5278                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5279  1F40  0020               	movlb	0	; select bank0
  5280  1F41  01A2               	clrf	setLED@command
  5281  1F42  0AA2               	incf	setLED@command,f
  5282  1F43  3002               	movlw	2
  5283  1F44  3192  2254  319F   	fcall	_setLED
  5284                           
  5285                           ;OverTemperature_B1.c: 148: }
  5286  1F47  2F51               	goto	l1762
  5287  1F48                     l8462:	
  5288                           
  5289                           ;OverTemperature_B1.c: 149: else
  5290                           ;OverTemperature_B1.c: 150: {
  5291                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5292  1F48  3064               	movlw	100
  5293  1F49  0020               	movlb	0	; select bank0
  5294  1F4A  00A6               	movwf	setBuz@time
  5295  1F4B  3000               	movlw	0
  5296  1F4C  00A7               	movwf	setBuz@time+1
  5297  1F4D  3002               	movlw	2
  5298  1F4E  3188  2019  319F   	fcall	_setBuz
  5299  1F51                     l1762:	
  5300                           
  5301                           ;OverTemperature_B1.c: 152: }
  5302                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5303  1F51  0020               	movlb	0	; select bank0
  5304  1F52  082C               	movf	setOverTemp_Exceptions@command,w
  5305  1F53  3E0A               	addlw	10
  5306  1F54  00AB               	movwf	??_setOverTemp_Exceptions
  5307  1F55  082B               	movf	??_setOverTemp_Exceptions,w
  5308  1F56  00A2               	movwf	setLED@command
  5309  1F57  3063               	movlw	99
  5310  1F58  3192  2254  319F   	fcall	_setLED
  5311                           
  5312                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5313  1F5B  0020               	movlb	0	; select bank0
  5314  1F5C  092C               	comf	setOverTemp_Exceptions@command,w
  5315  1F5D  3901               	andlw	1
  5316  1F5E  31A7  2731  319F   	fcall	_setSw_Enable
  5317                           
  5318                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5319  1F61  0020               	movlb	0	; select bank0
  5320  1F62  092C               	comf	setOverTemp_Exceptions@command,w
  5321  1F63  3901               	andlw	1
  5322  1F64  00AB               	movwf	??_setOverTemp_Exceptions
  5323  1F65  082B               	movf	??_setOverTemp_Exceptions,w
  5324  1F66  00A2               	movwf	setRF_Enable@command
  5325  1F67  3001               	movlw	1
  5326  1F68  319B  2360         	fcall	_setRF_Enable
  5327  1F6A  0008               	return
  5328  1F6B                     __end_of_setOverTemp_Exceptions:	
  5329                           
  5330                           	psect	text10
  5331  257C                     __ptext10:	
  5332 ;; *************** function _Temp_Initialization *****************
  5333 ;; Defined at:
  5334 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;		None               void
  5341 ;; Registers used:
  5342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;Total ram usage:        0 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    5
  5355 ;; This function calls:
  5356 ;;		_setTemp_Initialization
  5357 ;; This function is called by:
  5358 ;;		_main
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           
  5363                           ;psect for function _Temp_Initialization
  5364  257C                     _Temp_Initialization:	
  5365                           
  5366                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5370  257C  31A6  264D         	fcall	_setTemp_Initialization
  5371  257E  0008               	return
  5372  257F                     __end_of_Temp_Initialization:	
  5373                           
  5374                           	psect	text11
  5375  264D                     __ptext11:	
  5376 ;; *************** function _setTemp_Initialization *****************
  5377 ;; Defined at:
  5378 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;		None
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;		None
  5383 ;; Return value:  Size  Location     Type
  5384 ;;		None               void
  5385 ;; Registers used:
  5386 ;;		wreg, fsr1l, fsr1h
  5387 ;; Tracked objects:
  5388 ;;		On entry : 0/0
  5389 ;;		On exit  : 0/0
  5390 ;;		Unchanged: 0/0
  5391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;Total ram usage:        1 bytes
  5397 ;; Hardware stack levels used:    1
  5398 ;; Hardware stack levels required when called:    4
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		_Temp_Initialization
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function _setTemp_Initialization
  5408  264D                     _setTemp_Initialization:	
  5409                           
  5410                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5414  264D  303F               	movlw	_Temp1& (0+255)
  5415  264E  0020               	movlb	0	; select bank0
  5416  264F  00A0               	movwf	??_setTemp_Initialization
  5417  2650  0820               	movf	??_setTemp_Initialization,w
  5418  2651  00FA               	movwf	_Temp
  5419                           
  5420                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5421  2652  087A               	movf	_Temp,w
  5422  2653  0086               	movwf	6
  5423  2654  3001               	movlw	1	; select bank2/3
  5424  2655  0087               	movwf	7
  5425  2656  1601               	bsf	1,4
  5426  2657  0008               	return
  5427  2658                     __end_of_setTemp_Initialization:	
  5428                           
  5429                           	psect	text12
  5430  259E                     __ptext12:	
  5431 ;; *************** function _Switch_Main *****************
  5432 ;; Defined at:
  5433 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;		None
  5438 ;; Return value:  Size  Location     Type
  5439 ;;		None               void
  5440 ;; Registers used:
  5441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5451 ;;Total ram usage:        0 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:   10
  5454 ;; This function calls:
  5455 ;;		_setSw_Main
  5456 ;; This function is called by:
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           
  5462                           ;psect for function _Switch_Main
  5463  259E                     _Switch_Main:	
  5464                           
  5465                           ;Switch_B1.c: 63: setSw_Main(1);
  5466                           
  5467                           ;incstack = 0
  5468                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5469  259E  3001               	movlw	1
  5470  259F  3184  24AE         	fcall	_setSw_Main
  5471  25A1  0008               	return
  5472  25A2                     __end_of_Switch_Main:	
  5473                           
  5474                           	psect	text13
  5475  04AE                     __ptext13:	
  5476 ;; *************** function _setSw_Main *****************
  5477 ;; Defined at:
  5478 ;;		line 111 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  sw              1    wreg     unsigned char 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  sw              1   72[BANK0 ] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;		None               void
  5485 ;; Registers used:
  5486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;Total ram usage:        4 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    9
  5499 ;; This function calls:
  5500 ;;		_SwPointSelect
  5501 ;;		_Sw_DimmerAdjFunc
  5502 ;;		_Sw_DimmerOffFunc
  5503 ;;		_Sw_DimmerOnFunc
  5504 ;;		_setBuz
  5505 ;;		_setRF_Learn
  5506 ;; This function is called by:
  5507 ;;		_Switch_Main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _setSw_Main
  5513  04AE                     _setSw_Main:	
  5514                           
  5515                           ;incstack = 0
  5516                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5517                           ;setSw_Main@sw stored from wreg
  5518  04AE  0020               	movlb	0	; select bank0
  5519  04AF  00E8               	movwf	setSw_Main@sw
  5520                           
  5521                           ;Switch_B1.c: 112: if (Sw->Enable) {
  5522  04B0  0879               	movf	_Sw,w
  5523  04B1  0086               	movwf	6
  5524  04B2  3001               	movlw	1	; select bank2/3
  5525  04B3  0087               	movwf	7
  5526  04B4  1C01               	btfss	1,0
  5527  04B5  0008               	return
  5528                           
  5529                           ;Switch_B1.c: 113: SwPointSelect(sw);
  5530  04B6  0868               	movf	setSw_Main@sw,w
  5531  04B7  31A6  2621  3184   	fcall	_SwPointSelect
  5532                           
  5533                           ;Switch_B1.c: 133: Sw->Touch = (RA6 || RA4 || RA0 || RB1) ? 1 : 0;
  5534  04BA  0020               	movlb	0	; select bank0
  5535  04BB  01E7               	clrf	_setSw_Main$4539
  5536  04BC  0AE7               	incf	_setSw_Main$4539,f
  5537  04BD  1F0C               	btfss	12,6	;volatile
  5538  04BE  1A0C               	btfsc	12,4	;volatile
  5539  04BF  2CC4               	goto	l8984
  5540  04C0  1C0C               	btfss	12,0	;volatile
  5541  04C1  188D               	btfsc	13,1	;volatile
  5542  04C2  2CC4               	goto	l8984
  5543  04C3  01E7               	clrf	_setSw_Main$4539
  5544  04C4                     l8984:	
  5545  04C4  0879               	movf	_Sw,w
  5546  04C5  0086               	movwf	6
  5547  04C6  3001               	movlw	1	; select bank2/3
  5548  04C7  0087               	movwf	7
  5549  04C8  0867               	movf	_setSw_Main$4539,w
  5550  04C9  1081               	bcf	1,1
  5551  04CA  1D03               	skipz
  5552  04CB  1481               	bsf	1,1
  5553                           
  5554                           ;Switch_B1.c: 137: if (Sw->Touch) {
  5555  04CC  0879               	movf	_Sw,w
  5556  04CD  0086               	movwf	6
  5557  04CE  3001               	movlw	1	; select bank2/3
  5558  04CF  0087               	movwf	7
  5559  04D0  1C81               	btfss	1,1
  5560  04D1  2DA3               	goto	l9034
  5561                           
  5562                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  5563  04D2  0879               	movf	_Sw,w
  5564  04D3  0086               	movwf	6
  5565  04D4  3001               	movlw	1	; select bank2/3
  5566  04D5  0087               	movwf	7
  5567  04D6  1901               	btfsc	1,2
  5568  04D7  2CF9               	goto	l9000
  5569                           
  5570                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5571  04D8  3001               	movlw	1
  5572  04D9  00E5               	movwf	??_setSw_Main
  5573  04DA  0879               	movf	_Sw,w
  5574  04DB  3E02               	addlw	2
  5575  04DC  0086               	movwf	6
  5576  04DD  3001               	movlw	1	; select bank2/3
  5577  04DE  0087               	movwf	7
  5578  04DF  0865               	movf	??_setSw_Main,w
  5579  04E0  0781               	addwf	1,f
  5580                           
  5581                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5582  04E1  0879               	movf	_Sw,w
  5583  04E2  3E02               	addlw	2
  5584  04E3  0086               	movwf	6
  5585  04E4  3001               	movlw	1	; select bank2/3
  5586  04E5  0087               	movwf	7
  5587  04E6  3005               	movlw	5
  5588  04E7  0201               	subwf	1,w
  5589  04E8  1C03               	skipc
  5590  04E9  0008               	return
  5591                           
  5592                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5593  04EA  0879               	movf	_Sw,w
  5594  04EB  3E02               	addlw	2
  5595  04EC  0086               	movwf	6
  5596  04ED  3001               	movlw	1	; select bank2/3
  5597  04EE  0087               	movwf	7
  5598  04EF  0181               	clrf	1
  5599                           
  5600                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5601  04F0  0879               	movf	_Sw,w
  5602  04F1  0086               	movwf	6
  5603  04F2  3001               	movlw	1	; select bank2/3
  5604  04F3  0087               	movwf	7
  5605  04F4  1501               	bsf	1,2
  5606                           
  5607                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  5608  04F5  0868               	movf	setSw_Main@sw,w
  5609  04F6  3190  20E9         	fcall	_Sw_DimmerOnFunc
  5610                           
  5611                           ;Switch_B1.c: 148: }
  5612                           ;Switch_B1.c: 149: } else {
  5613  04F8  0008               	return
  5614  04F9                     l9000:	
  5615                           
  5616                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  5617  04F9  0879               	movf	_Sw,w
  5618  04FA  0086               	movwf	6
  5619  04FB  3001               	movlw	1	; select bank2/3
  5620  04FC  0087               	movwf	7
  5621  04FD  1981               	btfsc	1,3
  5622  04FE  2D2B               	goto	l9010
  5623                           
  5624                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5625  04FF  0879               	movf	_Sw,w
  5626  0500  3E03               	addlw	3
  5627  0501  0086               	movwf	6
  5628  0502  3001               	movlw	1	; select bank2/3
  5629  0503  0087               	movwf	7
  5630  0504  3001               	movlw	1
  5631  0505  0781               	addwf	1,f
  5632  0506  3141               	addfsr 1,1
  5633  0507  1803               	skipnc
  5634  0508  0A81               	incf	1,f
  5635                           
  5636                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5637  0509  0879               	movf	_Sw,w
  5638  050A  3E03               	addlw	3
  5639  050B  0086               	movwf	6
  5640  050C  3001               	movlw	1	; select bank2/3
  5641  050D  0087               	movwf	7
  5642  050E  3F40               	moviw [0]fsr1
  5643  050F  0020               	movlb	0	; select bank0
  5644  0510  00E5               	movwf	??_setSw_Main
  5645  0511  3F41               	moviw [1]fsr1
  5646  0512  00E6               	movwf	??_setSw_Main+1
  5647  0513  3000               	movlw	0
  5648  0514  0266               	subwf	??_setSw_Main+1,w
  5649  0515  3096               	movlw	150
  5650  0516  1903               	skipnz
  5651  0517  0265               	subwf	??_setSw_Main,w
  5652  0518  1C03               	skipc
  5653  0519  0008               	return
  5654                           
  5655                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5656  051A  0879               	movf	_Sw,w
  5657  051B  3E03               	addlw	3
  5658  051C  0086               	movwf	6
  5659  051D  3001               	movlw	1	; select bank2/3
  5660  051E  0087               	movwf	7
  5661  051F  3000               	movlw	0
  5662  0520  3FC0               	movwi [0]fsr1
  5663  0521  3FC1               	movwi [1]fsr1
  5664                           
  5665                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  5666  0522  0879               	movf	_Sw,w
  5667  0523  0086               	movwf	6
  5668  0524  3001               	movlw	1	; select bank2/3
  5669  0525  0087               	movwf	7
  5670  0526  1581               	bsf	1,3
  5671                           
  5672                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5673  0527  0868               	movf	setSw_Main@sw,w
  5674  0528  3187  27D4         	fcall	_Sw_DimmerAdjFunc
  5675                           
  5676                           ;Switch_B1.c: 160: }
  5677                           ;Switch_B1.c: 161: } else {
  5678  052A  0008               	return
  5679  052B                     l9010:	
  5680                           
  5681                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  5682  052B  0879               	movf	_Sw,w
  5683  052C  0086               	movwf	6
  5684  052D  3001               	movlw	1	; select bank2/3
  5685  052E  0087               	movwf	7
  5686  052F  1A01               	btfsc	1,4
  5687  0530  2D70               	goto	l9024
  5688                           
  5689                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5690  0531  0879               	movf	_Sw,w
  5691  0532  3E05               	addlw	5
  5692  0533  0086               	movwf	6
  5693  0534  3001               	movlw	1	; select bank2/3
  5694  0535  0087               	movwf	7
  5695  0536  3001               	movlw	1
  5696  0537  0781               	addwf	1,f
  5697  0538  3141               	addfsr 1,1
  5698  0539  1803               	skipnc
  5699  053A  0A81               	incf	1,f
  5700                           
  5701                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5702  053B  0879               	movf	_Sw,w
  5703  053C  3E05               	addlw	5
  5704  053D  0086               	movwf	6
  5705  053E  3001               	movlw	1	; select bank2/3
  5706  053F  0087               	movwf	7
  5707  0540  3F40               	moviw [0]fsr1
  5708  0541  0020               	movlb	0	; select bank0
  5709  0542  00E5               	movwf	??_setSw_Main
  5710  0543  3F41               	moviw [1]fsr1
  5711  0544  00E6               	movwf	??_setSw_Main+1
  5712  0545  3000               	movlw	0
  5713  0546  0266               	subwf	??_setSw_Main+1,w
  5714  0547  3096               	movlw	150
  5715  0548  1903               	skipnz
  5716  0549  0265               	subwf	??_setSw_Main,w
  5717  054A  1C03               	skipc
  5718  054B  0008               	return
  5719                           
  5720                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5721  054C  0879               	movf	_Sw,w
  5722  054D  3E05               	addlw	5
  5723  054E  0086               	movwf	6
  5724  054F  3001               	movlw	1	; select bank2/3
  5725  0550  0087               	movwf	7
  5726  0551  3000               	movlw	0
  5727  0552  3FC0               	movwi [0]fsr1
  5728  0553  3FC1               	movwi [1]fsr1
  5729                           
  5730                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5731  0554  0879               	movf	_Sw,w
  5732  0555  0086               	movwf	6
  5733  0556  3001               	movlw	1	; select bank2/3
  5734  0557  0087               	movwf	7
  5735  0558  1601               	bsf	1,4
  5736                           
  5737                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  5738  0559  01A2               	clrf	setRF_Learn@command
  5739  055A  0AA2               	incf	setRF_Learn@command,f
  5740  055B  3001               	movlw	1
  5741  055C  31A7  274F  3184   	fcall	_setRF_Learn
  5742                           
  5743                           ;Switch_B1.c: 172: if (TMain->First) {
  5744  055F  0021               	movlb	1	; select bank1
  5745  0560  086B               	movf	_TMain^(0+128),w
  5746  0561  3E03               	addlw	3
  5747  0562  0086               	movwf	6
  5748  0563  3001               	movlw	1	; select bank2/3
  5749  0564  0087               	movwf	7
  5750  0565  1C81               	btfss	1,1
  5751  0566  0008               	return
  5752                           
  5753                           ;Switch_B1.c: 173: setBuz(2, 100);
  5754  0567  3064               	movlw	100
  5755  0568  0020               	movlb	0	; select bank0
  5756  0569  00A6               	movwf	setBuz@time
  5757  056A  3000               	movlw	0
  5758  056B  00A7               	movwf	setBuz@time+1
  5759  056C  3002               	movlw	2
  5760  056D  3188  2019         	fcall	_setBuz
  5761                           
  5762                           ;Switch_B1.c: 174: }
  5763                           ;Switch_B1.c: 176: }
  5764                           ;Switch_B1.c: 177: } else {
  5765  056F  0008               	return
  5766  0570                     l9024:	
  5767                           
  5768                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  5769  0570  0879               	movf	_Sw,w
  5770  0571  0086               	movwf	6
  5771  0572  3001               	movlw	1	; select bank2/3
  5772  0573  0087               	movwf	7
  5773  0574  1A81               	btfsc	1,5
  5774  0575  0008               	return
  5775                           
  5776                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5777  0576  0879               	movf	_Sw,w
  5778  0577  3E07               	addlw	7
  5779  0578  0086               	movwf	6
  5780  0579  3001               	movlw	1	; select bank2/3
  5781  057A  0087               	movwf	7
  5782  057B  3001               	movlw	1
  5783  057C  0781               	addwf	1,f
  5784  057D  3141               	addfsr 1,1
  5785  057E  1803               	skipnc
  5786  057F  0A81               	incf	1,f
  5787                           
  5788                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  5789  0580  0879               	movf	_Sw,w
  5790  0581  3E07               	addlw	7
  5791  0582  0086               	movwf	6
  5792  0583  3001               	movlw	1	; select bank2/3
  5793  0584  0087               	movwf	7
  5794  0585  3F40               	moviw [0]fsr1
  5795  0586  0020               	movlb	0	; select bank0
  5796  0587  00E5               	movwf	??_setSw_Main
  5797  0588  3F41               	moviw [1]fsr1
  5798  0589  00E6               	movwf	??_setSw_Main+1
  5799  058A  3001               	movlw	1
  5800  058B  0266               	subwf	??_setSw_Main+1,w
  5801  058C  302C               	movlw	44
  5802  058D  1903               	skipnz
  5803  058E  0265               	subwf	??_setSw_Main,w
  5804  058F  1C03               	skipc
  5805  0590  0008               	return
  5806                           
  5807                           ;Switch_B1.c: 181: {
  5808                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  5809  0591  0879               	movf	_Sw,w
  5810  0592  3E07               	addlw	7
  5811  0593  0086               	movwf	6
  5812  0594  3001               	movlw	1	; select bank2/3
  5813  0595  0087               	movwf	7
  5814  0596  3000               	movlw	0
  5815  0597  3FC0               	movwi [0]fsr1
  5816  0598  3FC1               	movwi [1]fsr1
  5817                           
  5818                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  5819  0599  0879               	movf	_Sw,w
  5820  059A  0086               	movwf	6
  5821  059B  3001               	movlw	1	; select bank2/3
  5822  059C  0087               	movwf	7
  5823  059D  1681               	bsf	1,5
  5824                           
  5825                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  5826  059E  01A2               	clrf	setRF_Learn@command
  5827  059F  3001               	movlw	1
  5828  05A0  31A7  274F         	fcall	_setRF_Learn
  5829                           
  5830                           ;Switch_B1.c: 189: }
  5831                           ;Switch_B1.c: 190: }
  5832                           ;Switch_B1.c: 191: }
  5833                           ;Switch_B1.c: 192: }
  5834                           ;Switch_B1.c: 193: }
  5835                           ;Switch_B1.c: 194: } else {
  5836  05A2  0008               	return
  5837  05A3                     l9034:	
  5838                           
  5839                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  5840  05A3  0879               	movf	_Sw,w
  5841  05A4  0086               	movwf	6
  5842  05A5  3001               	movlw	1	; select bank2/3
  5843  05A6  0087               	movwf	7
  5844  05A7  1D01               	btfss	1,2
  5845  05A8  0008               	return
  5846                           
  5847                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  5848  05A9  3001               	movlw	1
  5849  05AA  0020               	movlb	0	; select bank0
  5850  05AB  00E5               	movwf	??_setSw_Main
  5851  05AC  0879               	movf	_Sw,w
  5852  05AD  3E02               	addlw	2
  5853  05AE  0086               	movwf	6
  5854  05AF  3001               	movlw	1	; select bank2/3
  5855  05B0  0087               	movwf	7
  5856  05B1  0865               	movf	??_setSw_Main,w
  5857  05B2  0781               	addwf	1,f
  5858                           
  5859                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  5860  05B3  0879               	movf	_Sw,w
  5861  05B4  3E02               	addlw	2
  5862  05B5  0086               	movwf	6
  5863  05B6  3001               	movlw	1	; select bank2/3
  5864  05B7  0087               	movwf	7
  5865  05B8  3005               	movlw	5
  5866  05B9  0201               	subwf	1,w
  5867  05BA  1C03               	skipc
  5868  05BB  0008               	return
  5869                           
  5870                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  5871  05BC  0879               	movf	_Sw,w
  5872  05BD  3E02               	addlw	2
  5873  05BE  0086               	movwf	6
  5874  05BF  3001               	movlw	1	; select bank2/3
  5875  05C0  0087               	movwf	7
  5876  05C1  0181               	clrf	1
  5877                           
  5878                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  5879  05C2  0879               	movf	_Sw,w
  5880  05C3  0086               	movwf	6
  5881  05C4  3001               	movlw	1	; select bank2/3
  5882  05C5  0087               	movwf	7
  5883  05C6  1101               	bcf	1,2
  5884                           
  5885                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  5886  05C7  0879               	movf	_Sw,w
  5887  05C8  3E03               	addlw	3
  5888  05C9  0086               	movwf	6
  5889  05CA  3001               	movlw	1	; select bank2/3
  5890  05CB  0087               	movwf	7
  5891  05CC  3000               	movlw	0
  5892  05CD  3FC0               	movwi [0]fsr1
  5893  05CE  3FC1               	movwi [1]fsr1
  5894                           
  5895                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  5896  05CF  0879               	movf	_Sw,w
  5897  05D0  0086               	movwf	6
  5898  05D1  3001               	movlw	1	; select bank2/3
  5899  05D2  0087               	movwf	7
  5900  05D3  1181               	bcf	1,3
  5901                           
  5902                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  5903  05D4  0879               	movf	_Sw,w
  5904  05D5  3E05               	addlw	5
  5905  05D6  0086               	movwf	6
  5906  05D7  3001               	movlw	1	; select bank2/3
  5907  05D8  0087               	movwf	7
  5908  05D9  3000               	movlw	0
  5909  05DA  3FC0               	movwi [0]fsr1
  5910  05DB  3FC1               	movwi [1]fsr1
  5911                           
  5912                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  5913  05DC  0879               	movf	_Sw,w
  5914  05DD  0086               	movwf	6
  5915  05DE  3001               	movlw	1	; select bank2/3
  5916  05DF  0087               	movwf	7
  5917  05E0  1201               	bcf	1,4
  5918                           
  5919                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5920  05E1  0879               	movf	_Sw,w
  5921  05E2  3E07               	addlw	7
  5922  05E3  0086               	movwf	6
  5923  05E4  3001               	movlw	1	; select bank2/3
  5924  05E5  0087               	movwf	7
  5925  05E6  3000               	movlw	0
  5926  05E7  3FC0               	movwi [0]fsr1
  5927  05E8  3FC1               	movwi [1]fsr1
  5928                           
  5929                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  5930  05E9  0879               	movf	_Sw,w
  5931  05EA  0086               	movwf	6
  5932  05EB  3001               	movlw	1	; select bank2/3
  5933  05EC  0087               	movwf	7
  5934  05ED  1281               	bcf	1,5
  5935                           
  5936                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  5937  05EE  0868               	movf	setSw_Main@sw,w
  5938  05EF  3195  252A  3184   	fcall	_Sw_DimmerOffFunc
  5939                           
  5940                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  5941  05F2  0020               	movlb	0	; select bank0
  5942  05F3  01A2               	clrf	setRF_Learn@command
  5943  05F4  3001               	movlw	1
  5944  05F5  31A7  274F         	fcall	_setRF_Learn
  5945  05F7  0008               	return
  5946  05F8                     __end_of_setSw_Main:	
  5947                           
  5948                           	psect	text14
  5949  274F                     __ptext14:	
  5950 ;; *************** function _setRF_Learn *****************
  5951 ;; Defined at:
  5952 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  rf              1    wreg     unsigned char 
  5955 ;;  command         1    2[BANK0 ] unsigned char 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  rf              1    3[BANK0 ] unsigned char 
  5958 ;; Return value:  Size  Location     Type
  5959 ;;		None               void
  5960 ;; Registers used:
  5961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5967 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;Total ram usage:        2 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    5
  5974 ;; This function calls:
  5975 ;;		_RfPointSelect
  5976 ;; This function is called by:
  5977 ;;		_setSw_Main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _setRF_Learn
  5983  274F                     _setRF_Learn:	
  5984                           
  5985                           ;incstack = 0
  5986                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5987                           ;setRF_Learn@rf stored from wreg
  5988  274F  0020               	movlb	0	; select bank0
  5989  2750  00A3               	movwf	setRF_Learn@rf
  5990                           
  5991                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  5992  2751  0823               	movf	setRF_Learn@rf,w
  5993  2752  31A6  2694         	fcall	_RfPointSelect
  5994                           
  5995                           ;RF_Control_B1.c: 32: RF->Learn = command;
  5996  2754  0021               	movlb	1	; select bank1
  5997  2755  083E               	movf	_RF^(0+128),w
  5998  2756  0086               	movwf	6
  5999  2757  0187               	clrf	7
  6000  2758  0020               	movlb	0	; select bank0
  6001  2759  0822               	movf	setRF_Learn@command,w
  6002  275A  1301               	bcf	1,6
  6003  275B  1D03               	skipz
  6004  275C  1701               	bsf	1,6
  6005  275D  0008               	return
  6006  275E                     __end_of_setRF_Learn:	
  6007                           
  6008                           	psect	text15
  6009  10E9                     __ptext15:	
  6010 ;; *************** function _Sw_DimmerOnFunc *****************
  6011 ;; Defined at:
  6012 ;;		line 222 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  sw              1    wreg     unsigned char 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  sw              1   67[BANK0 ] unsigned char 
  6017 ;;  Idle            1   66[BANK0 ] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;		None               void
  6020 ;; Registers used:
  6021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    8
  6034 ;; This function calls:
  6035 ;;		_setBuz
  6036 ;;		_setDimmerLights_Switch
  6037 ;;		_setDimmerLights_Trigger
  6038 ;;		_setRFSW_Status
  6039 ;;		_setRF_DimmerLights
  6040 ;;		_setTxData
  6041 ;; This function is called by:
  6042 ;;		_setSw_Main
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           
  6047                           ;psect for function _Sw_DimmerOnFunc
  6048  10E9                     _Sw_DimmerOnFunc:	
  6049                           
  6050                           ;incstack = 0
  6051                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6052                           ;Sw_DimmerOnFunc@sw stored from wreg
  6053  10E9  0020               	movlb	0	; select bank0
  6054  10EA  00E3               	movwf	Sw_DimmerOnFunc@sw
  6055                           
  6056                           ;Switch_B1.c: 223: char Idle = 1;
  6057  10EB  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6058  10EC  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6059                           
  6060                           ;Switch_B1.c: 242: if (Idle) {
  6061  10ED  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6062  10EE  1903               	btfsc	3,2
  6063  10EF  0008               	return
  6064                           
  6065                           ;Switch_B1.c: 243: Sw->Flag = 1;
  6066  10F0  0879               	movf	_Sw,w
  6067  10F1  0086               	movwf	6
  6068  10F2  3001               	movlw	1	; select bank2/3
  6069  10F3  0087               	movwf	7
  6070  10F4  1781               	bsf	1,7
  6071                           
  6072                           ;Switch_B1.c: 244: setBuz(1, 100);
  6073  10F5  3064               	movlw	100
  6074  10F6  00A6               	movwf	setBuz@time
  6075  10F7  3000               	movlw	0
  6076  10F8  00A7               	movwf	setBuz@time+1
  6077  10F9  3001               	movlw	1
  6078  10FA  3188  2019  3190   	fcall	_setBuz
  6079                           
  6080                           ;Switch_B1.c: 245: if (!Sw->Status) {
  6081  10FD  0879               	movf	_Sw,w
  6082  10FE  0086               	movwf	6
  6083  10FF  3001               	movlw	1	; select bank2/3
  6084  1100  0087               	movwf	7
  6085  1101  1B01               	btfsc	1,6
  6086  1102  292F               	goto	l8552
  6087                           
  6088                           ;Switch_B1.c: 246: Sw->Status = 1;
  6089  1103  0879               	movf	_Sw,w
  6090  1104  0086               	movwf	6
  6091  1105  3001               	movlw	1	; select bank2/3
  6092  1106  0087               	movwf	7
  6093  1107  1701               	bsf	1,6
  6094                           
  6095                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  6096  1108  0020               	movlb	0	; select bank0
  6097  1109  01A2               	clrf	setRFSW_Status@command
  6098  110A  0AA2               	incf	setRFSW_Status@command,f
  6099  110B  0863               	movf	Sw_DimmerOnFunc@sw,w
  6100  110C  31A7  2713  3190   	fcall	_setRFSW_Status
  6101                           
  6102                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  6103  110F  0020               	movlb	0	; select bank0
  6104  1110  01A2               	clrf	setDimmerLights_Trigger@command
  6105  1111  0AA2               	incf	setDimmerLights_Trigger@command,f
  6106  1112  0863               	movf	Sw_DimmerOnFunc@sw,w
  6107  1113  31A7  277E  3190   	fcall	_setDimmerLights_Trigger
  6108                           
  6109                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  6110  1116  0020               	movlb	0	; select bank0
  6111  1117  01A2               	clrf	setDimmerLights_Switch@command
  6112  1118  0AA2               	incf	setDimmerLights_Switch@command,f
  6113  1119  0863               	movf	Sw_DimmerOnFunc@sw,w
  6114  111A  31A7  276E  3190   	fcall	_setDimmerLights_Switch
  6115                           
  6116                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  6117  111D  0879               	movf	_Sw,w
  6118  111E  0086               	movwf	6
  6119  111F  3001               	movlw	1	; select bank2/3
  6120  1120  0087               	movwf	7
  6121  1121  3000               	movlw	0
  6122  1122  1B01               	btfsc	1,6
  6123  1123  3001               	movlw	1
  6124  1124  0020               	movlb	0	; select bank0
  6125  1125  00DD               	movwf	setRF_DimmerLights@on
  6126  1126  0863               	movf	Sw_DimmerOnFunc@sw,w
  6127  1127  3193  2377  3190   	fcall	_setRF_DimmerLights
  6128                           
  6129                           ;Switch_B1.c: 253: setTxData(1);
  6130  112A  3001               	movlw	1
  6131  112B  318A  22F2         	fcall	_setTxData
  6132                           
  6133                           ;Switch_B1.c: 255: } else {
  6134  112D  0020               	movlb	0	; select bank0
  6135  112E  0008               	return
  6136  112F                     l8552:	
  6137                           
  6138                           ;Switch_B1.c: 256: Sw->Status = 0;
  6139  112F  0879               	movf	_Sw,w
  6140  1130  0086               	movwf	6
  6141  1131  3001               	movlw	1	; select bank2/3
  6142  1132  0087               	movwf	7
  6143  1133  1301               	bcf	1,6
  6144                           
  6145                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  6146  1134  0879               	movf	_Sw,w
  6147  1135  0086               	movwf	6
  6148  1136  3001               	movlw	1	; select bank2/3
  6149  1137  0087               	movwf	7
  6150  1138  3000               	movlw	0
  6151  1139  1B01               	btfsc	1,6
  6152  113A  3001               	movlw	1
  6153  113B  0020               	movlb	0	; select bank0
  6154  113C  00A2               	movwf	setRFSW_Status@command
  6155  113D  0863               	movf	Sw_DimmerOnFunc@sw,w
  6156  113E  31A7  2713         	fcall	_setRFSW_Status
  6157  1140  0020               	movlb	0	; select bank0
  6158  1141  0008               	return
  6159  1142                     __end_of_Sw_DimmerOnFunc:	
  6160                           
  6161                           	psect	text16
  6162  152A                     __ptext16:	
  6163 ;; *************** function _Sw_DimmerOffFunc *****************
  6164 ;; Defined at:
  6165 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  sw              1    wreg     unsigned char 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  sw              1   68[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;		None               void
  6172 ;; Registers used:
  6173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 0/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;Total ram usage:        3 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    8
  6186 ;; This function calls:
  6187 ;;		_setDelayOff_GO
  6188 ;;		_setDimmerLights_AdjGo
  6189 ;;		_setDimmerLights_Switch
  6190 ;;		_setDimmerLights_Trigger
  6191 ;;		_setDimmerLights_TriggerAdj
  6192 ;;		_setRF_DimmerLights
  6193 ;;		_setTxData
  6194 ;; This function is called by:
  6195 ;;		_setSw_Main
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           
  6200                           ;psect for function _Sw_DimmerOffFunc
  6201  152A                     _Sw_DimmerOffFunc:	
  6202                           
  6203                           ;incstack = 0
  6204                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6205                           ;Sw_DimmerOffFunc@sw stored from wreg
  6206  152A  0020               	movlb	0	; select bank0
  6207  152B  00E4               	movwf	Sw_DimmerOffFunc@sw
  6208                           
  6209                           ;Switch_B1.c: 264: if (Sw->Flag) {
  6210  152C  0879               	movf	_Sw,w
  6211  152D  0086               	movwf	6
  6212  152E  3001               	movlw	1	; select bank2/3
  6213  152F  0087               	movwf	7
  6214  1530  1F81               	btfss	1,7
  6215  1531  0008               	return
  6216                           
  6217                           ;Switch_B1.c: 265: Sw->Flag = 0;
  6218  1532  0879               	movf	_Sw,w
  6219  1533  0086               	movwf	6
  6220  1534  3001               	movlw	1	; select bank2/3
  6221  1535  0087               	movwf	7
  6222  1536  1381               	bcf	1,7
  6223                           
  6224                           ;Switch_B1.c: 266: if (Sw->Status) {
  6225  1537  0879               	movf	_Sw,w
  6226  1538  0086               	movwf	6
  6227  1539  3001               	movlw	1	; select bank2/3
  6228  153A  0087               	movwf	7
  6229  153B  1F01               	btfss	1,6
  6230  153C  2D76               	goto	l8586
  6231                           
  6232                           ;Switch_B1.c: 267: if (Sw->Adj) {
  6233  153D  0A79               	incf	_Sw,w
  6234  153E  0086               	movwf	6
  6235  153F  3001               	movlw	1	; select bank2/3
  6236  1540  0087               	movwf	7
  6237  1541  1C01               	btfss	1,0
  6238  1542  0008               	return
  6239                           
  6240                           ;Switch_B1.c: 268: Sw->Adj = 0;
  6241  1543  0A79               	incf	_Sw,w
  6242  1544  0086               	movwf	6
  6243  1545  3001               	movlw	1	; select bank2/3
  6244  1546  0087               	movwf	7
  6245  1547  1001               	bcf	1,0
  6246                           
  6247                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  6248  1548  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6249  1549  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6250  154A  0864               	movf	Sw_DimmerOffFunc@sw,w
  6251  154B  31A7  27CE  3195   	fcall	_setDimmerLights_TriggerAdj
  6252                           
  6253                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  6254  154E  0020               	movlb	0	; select bank0
  6255  154F  01A2               	clrf	setDimmerLights_AdjGo@command
  6256  1550  0864               	movf	Sw_DimmerOffFunc@sw,w
  6257  1551  31A7  27BE  3195   	fcall	_setDimmerLights_AdjGo
  6258                           
  6259                           ;Switch_B1.c: 272: Product->Data[17]=Product->Data[26 + sw];
  6260  1554  0020               	movlb	0	; select bank0
  6261  1555  0864               	movf	Sw_DimmerOffFunc@sw,w
  6262  1556  3E1A               	addlw	26
  6263  1557  077D               	addwf	_Product,w
  6264  1558  00E2               	movwf	??_Sw_DimmerOffFunc
  6265  1559  0862               	movf	??_Sw_DimmerOffFunc,w
  6266  155A  0086               	movwf	6
  6267  155B  3001               	movlw	1	; select bank2/3
  6268  155C  0087               	movwf	7
  6269  155D  0801               	movf	1,w
  6270  155E  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6271  155F  087D               	movf	_Product,w
  6272  1560  3E11               	addlw	17
  6273  1561  0086               	movwf	6
  6274  1562  3001               	movlw	1	; select bank2/3
  6275  1563  0087               	movwf	7
  6276  1564  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6277  1565  0081               	movwf	1
  6278                           
  6279                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6280  1566  0879               	movf	_Sw,w
  6281  1567  0086               	movwf	6
  6282  1568  3001               	movlw	1	; select bank2/3
  6283  1569  0087               	movwf	7
  6284  156A  3000               	movlw	0
  6285  156B  1B01               	btfsc	1,6
  6286  156C  3001               	movlw	1
  6287  156D  00DD               	movwf	setRF_DimmerLights@on
  6288  156E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6289  156F  3193  2377  3195   	fcall	_setRF_DimmerLights
  6290                           
  6291                           ;Switch_B1.c: 274: setTxData(1);
  6292  1572  3001               	movlw	1
  6293  1573  318A  22F2         	fcall	_setTxData
  6294                           
  6295                           ;Switch_B1.c: 276: }
  6296                           ;Switch_B1.c: 277: } else {
  6297  1575  0008               	return
  6298  1576                     l8586:	
  6299                           
  6300                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  6301  1576  0020               	movlb	0	; select bank0
  6302  1577  01A2               	clrf	setDimmerLights_Trigger@command
  6303  1578  0AA2               	incf	setDimmerLights_Trigger@command,f
  6304  1579  0864               	movf	Sw_DimmerOffFunc@sw,w
  6305  157A  31A7  277E  3195   	fcall	_setDimmerLights_Trigger
  6306                           
  6307                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  6308  157D  0020               	movlb	0	; select bank0
  6309  157E  01A2               	clrf	setDimmerLights_Switch@command
  6310  157F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6311  1580  31A7  276E  3195   	fcall	_setDimmerLights_Switch
  6312                           
  6313                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  6314  1583  0020               	movlb	0	; select bank0
  6315  1584  01A3               	clrf	setDelayOff_GO@command
  6316  1585  01A4               	clrf	setDelayOff_GO@value
  6317  1586  0864               	movf	Sw_DimmerOffFunc@sw,w
  6318  1587  3191  21F8  3195   	fcall	_setDelayOff_GO
  6319                           
  6320                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  6321  158A  0879               	movf	_Sw,w
  6322  158B  0086               	movwf	6
  6323  158C  3001               	movlw	1	; select bank2/3
  6324  158D  0087               	movwf	7
  6325  158E  3000               	movlw	0
  6326  158F  1B01               	btfsc	1,6
  6327  1590  3001               	movlw	1
  6328  1591  0020               	movlb	0	; select bank0
  6329  1592  00DD               	movwf	setRF_DimmerLights@on
  6330  1593  0864               	movf	Sw_DimmerOffFunc@sw,w
  6331  1594  3193  2377  3195   	fcall	_setRF_DimmerLights
  6332                           
  6333                           ;Switch_B1.c: 283: setTxData(1);
  6334  1597  3001               	movlw	1
  6335  1598  318A  22F2         	fcall	_setTxData
  6336  159A  0008               	return
  6337  159B                     __end_of_Sw_DimmerOffFunc:	
  6338                           
  6339                           	psect	text17
  6340  07D4                     __ptext17:	
  6341 ;; *************** function _Sw_DimmerAdjFunc *****************
  6342 ;; Defined at:
  6343 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6344 ;; Parameters:    Size  Location     Type
  6345 ;;  sw              1    wreg     unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  sw              1    5[BANK0 ] unsigned char 
  6348 ;;  Idle            1    4[BANK0 ] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        2 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    6
  6365 ;; This function calls:
  6366 ;;		_setDimmerLights_AdjGo
  6367 ;;		_setDimmerLights_TriggerAdj
  6368 ;;		_setRFSW_Status
  6369 ;; This function is called by:
  6370 ;;		_setSw_Main
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _Sw_DimmerAdjFunc
  6376  07D4                     _Sw_DimmerAdjFunc:	
  6377                           
  6378                           ;incstack = 0
  6379                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6380                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6381  07D4  0020               	movlb	0	; select bank0
  6382  07D5  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6383                           
  6384                           ;Switch_B1.c: 291: char Idle = 1;
  6385  07D6  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6386  07D7  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6387                           
  6388                           ;Switch_B1.c: 310: if (Idle) {
  6389  07D8  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6390  07D9  1903               	btfsc	3,2
  6391  07DA  0008               	return
  6392                           
  6393                           ;Switch_B1.c: 311: if (Sw->Flag) {
  6394  07DB  0879               	movf	_Sw,w
  6395  07DC  0086               	movwf	6
  6396  07DD  3001               	movlw	1	; select bank2/3
  6397  07DE  0087               	movwf	7
  6398  07DF  1F81               	btfss	1,7
  6399  07E0  0008               	return
  6400                           
  6401                           ;Switch_B1.c: 312: Sw->Adj = 1;
  6402  07E1  0A79               	incf	_Sw,w
  6403  07E2  0086               	movwf	6
  6404  07E3  3001               	movlw	1	; select bank2/3
  6405  07E4  0087               	movwf	7
  6406  07E5  1401               	bsf	1,0
  6407                           
  6408                           ;Switch_B1.c: 313: Sw->Status = 1;
  6409  07E6  0879               	movf	_Sw,w
  6410  07E7  0086               	movwf	6
  6411  07E8  3001               	movlw	1	; select bank2/3
  6412  07E9  0087               	movwf	7
  6413  07EA  1701               	bsf	1,6
  6414                           
  6415                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  6416  07EB  01A2               	clrf	setRFSW_Status@command
  6417  07EC  0AA2               	incf	setRFSW_Status@command,f
  6418  07ED  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6419  07EE  31A7  2713  3187   	fcall	_setRFSW_Status
  6420                           
  6421                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  6422  07F1  0020               	movlb	0	; select bank0
  6423  07F2  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6424  07F3  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6425  07F4  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6426  07F5  31A7  27CE  3187   	fcall	_setDimmerLights_TriggerAdj
  6427                           
  6428                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  6429  07F8  0020               	movlb	0	; select bank0
  6430  07F9  01A2               	clrf	setDimmerLights_AdjGo@command
  6431  07FA  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6432  07FB  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6433  07FC  31A7  27BE         	fcall	_setDimmerLights_AdjGo
  6434  07FE  0020               	movlb	0	; select bank0
  6435  07FF  0008               	return
  6436  0800                     __end_of_Sw_DimmerAdjFunc:	
  6437                           
  6438                           	psect	text18
  6439  27CE                     __ptext18:	
  6440 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6441 ;; Defined at:
  6442 ;;		line 450 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;  lights          1    wreg     unsigned char 
  6445 ;;  command         1    2[BANK0 ] unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  lights          1    3[BANK0 ] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        2 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    5
  6464 ;; This function calls:
  6465 ;;		_DimmerLightsPointSelect
  6466 ;; This function is called by:
  6467 ;;		_Sw_DimmerOffFunc
  6468 ;;		_Sw_DimmerAdjFunc
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           
  6473                           ;psect for function _setDimmerLights_TriggerAdj
  6474  27CE                     _setDimmerLights_TriggerAdj:	
  6475                           
  6476                           ;incstack = 0
  6477                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6478                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6479  27CE  0020               	movlb	0	; select bank0
  6480  27CF  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6481                           
  6482                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6483  27D0  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6484  27D1  31A6  2616         	fcall	_DimmerLightsPointSelect
  6485                           
  6486                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6487  27D3  0877               	movf	_DimmerLights,w
  6488  27D4  3E09               	addlw	9
  6489  27D5  0086               	movwf	6
  6490  27D6  3001               	movlw	1	; select bank2/3
  6491  27D7  0087               	movwf	7
  6492  27D8  0020               	movlb	0	; select bank0
  6493  27D9  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6494  27DA  1181               	bcf	1,3
  6495  27DB  1D03               	skipz
  6496  27DC  1581               	bsf	1,3
  6497  27DD  0008               	return
  6498  27DE                     __end_of_setDimmerLights_TriggerAdj:	
  6499                           
  6500                           	psect	text19
  6501  27BE                     __ptext19:	
  6502 ;; *************** function _setDimmerLights_AdjGo *****************
  6503 ;; Defined at:
  6504 ;;		line 440 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  lights          1    wreg     unsigned char 
  6507 ;;  command         1    2[BANK0 ] unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  lights          1    3[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        2 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    5
  6526 ;; This function calls:
  6527 ;;		_DimmerLightsPointSelect
  6528 ;; This function is called by:
  6529 ;;		_Sw_DimmerOffFunc
  6530 ;;		_Sw_DimmerAdjFunc
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _setDimmerLights_AdjGo
  6536  27BE                     _setDimmerLights_AdjGo:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6540                           ;setDimmerLights_AdjGo@lights stored from wreg
  6541  27BE  0020               	movlb	0	; select bank0
  6542  27BF  00A3               	movwf	setDimmerLights_AdjGo@lights
  6543                           
  6544                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6545  27C0  0823               	movf	setDimmerLights_AdjGo@lights,w
  6546  27C1  31A6  2616         	fcall	_DimmerLightsPointSelect
  6547                           
  6548                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6549  27C3  0877               	movf	_DimmerLights,w
  6550  27C4  3E09               	addlw	9
  6551  27C5  0086               	movwf	6
  6552  27C6  3001               	movlw	1	; select bank2/3
  6553  27C7  0087               	movwf	7
  6554  27C8  0020               	movlb	0	; select bank0
  6555  27C9  0822               	movf	setDimmerLights_AdjGo@command,w
  6556  27CA  1101               	bcf	1,2
  6557  27CB  1D03               	skipz
  6558  27CC  1501               	bsf	1,2
  6559  27CD  0008               	return
  6560  27CE                     __end_of_setDimmerLights_AdjGo:	
  6561                           
  6562                           	psect	text20
  6563  25F7                     __ptext20:	
  6564 ;; *************** function _Switch_Initialization *****************
  6565 ;; Defined at:
  6566 ;;		line 37 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;		None
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;		None
  6571 ;; Return value:  Size  Location     Type
  6572 ;;		None               void
  6573 ;; Registers used:
  6574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;Total ram usage:        0 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    7
  6587 ;; This function calls:
  6588 ;;		_TouchPower
  6589 ;;		_setSw_Initialization
  6590 ;; This function is called by:
  6591 ;;		_main
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           
  6596                           ;psect for function _Switch_Initialization
  6597  25F7                     _Switch_Initialization:	
  6598                           
  6599                           ;Switch_B1.c: 38: TouchPower();
  6600                           
  6601                           ;incstack = 0
  6602                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6603  25F7  31A5  25A2  31A5   	fcall	_TouchPower
  6604                           
  6605                           ;Switch_B1.c: 40: WPUB1 = 0;
  6606  25FA  0024               	movlb	4	; select bank4
  6607  25FB  108D               	bcf	13,1	;volatile
  6608                           
  6609                           ;Switch_B1.c: 49: setSw_Initialization(1);
  6610  25FC  3001               	movlw	1
  6611  25FD  31A7  27AE         	fcall	_setSw_Initialization
  6612  25FF  0008               	return
  6613  2600                     __end_of_Switch_Initialization:	
  6614                           
  6615                           	psect	text21
  6616  27AE                     __ptext21:	
  6617 ;; *************** function _setSw_Initialization *****************
  6618 ;; Defined at:
  6619 ;;		line 77 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  sw              1    wreg     unsigned char 
  6622 ;; Auto vars:     Size  Location     Type
  6623 ;;  sw              1    4[BANK0 ] unsigned char 
  6624 ;; Return value:  Size  Location     Type
  6625 ;;		None               void
  6626 ;; Registers used:
  6627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6628 ;; Tracked objects:
  6629 ;;		On entry : 0/0
  6630 ;;		On exit  : 0/0
  6631 ;;		Unchanged: 0/0
  6632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6636 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6637 ;;Total ram usage:        1 bytes
  6638 ;; Hardware stack levels used:    1
  6639 ;; Hardware stack levels required when called:    6
  6640 ;; This function calls:
  6641 ;;		_setLED
  6642 ;; This function is called by:
  6643 ;;		_Switch_Initialization
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           
  6648                           ;psect for function _setSw_Initialization
  6649  27AE                     _setSw_Initialization:	
  6650                           
  6651                           ;incstack = 0
  6652                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6653                           ;setSw_Initialization@sw stored from wreg
  6654  27AE  0020               	movlb	0	; select bank0
  6655  27AF  00A4               	movwf	setSw_Initialization@sw
  6656                           
  6657                           ;Switch_B1.c: 78: setLED(sw, 1);
  6658  27B0  01A2               	clrf	setLED@command
  6659  27B1  0AA2               	incf	setLED@command,f
  6660  27B2  0824               	movf	setSw_Initialization@sw,w
  6661  27B3  3192  2254  31A7   	fcall	_setLED
  6662                           
  6663                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  6664  27B6  0020               	movlb	0	; select bank0
  6665  27B7  01A2               	clrf	setLED@command
  6666  27B8  0AA2               	incf	setLED@command,f
  6667  27B9  0824               	movf	setSw_Initialization@sw,w
  6668  27BA  3E01               	addlw	1
  6669  27BB  3192  2254         	fcall	_setLED
  6670  27BD  0008               	return
  6671  27BE                     __end_of_setSw_Initialization:	
  6672                           
  6673                           	psect	text22
  6674  25A2                     __ptext22:	
  6675 ;; *************** function _TouchPower *****************
  6676 ;; Defined at:
  6677 ;;		line 10 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;		None
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;		None
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		None
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;Total ram usage:        0 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    4
  6698 ;; This function calls:
  6699 ;;		Nothing
  6700 ;; This function is called by:
  6701 ;;		_Switch_Initialization
  6702 ;; This function uses a non-reentrant model
  6703 ;;
  6704                           
  6705                           
  6706                           ;psect for function _TouchPower
  6707  25A2                     _TouchPower:	
  6708  25A2                     l2537:	
  6709                           ;Switch_B1.c: 11: while (!RC5)
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _TouchPower: []
  6713                           
  6714  25A2  0020               	movlb	0	; select bank0
  6715  25A3  1A8E               	btfsc	14,5	;volatile
  6716  25A4  0008               	return
  6717                           
  6718                           ;Switch_B1.c: 12: RC5 = 1;
  6719  25A5  168E               	bsf	14,5	;volatile
  6720  25A6  2DA2               	goto	l2537
  6721  25A7                     __end_of_TouchPower:	
  6722                           
  6723                           	psect	text23
  6724  259A                     __ptext23:	
  6725 ;; *************** function _RF_Main *****************
  6726 ;; Defined at:
  6727 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;		None
  6732 ;; Return value:  Size  Location     Type
  6733 ;;		None               void
  6734 ;; Registers used:
  6735 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6736 ;; Tracked objects:
  6737 ;;		On entry : 0/0
  6738 ;;		On exit  : 0/0
  6739 ;;		Unchanged: 0/0
  6740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;Total ram usage:        0 bytes
  6746 ;; Hardware stack levels used:    1
  6747 ;; Hardware stack levels required when called:   13
  6748 ;; This function calls:
  6749 ;;		_setRF_Main
  6750 ;; This function is called by:
  6751 ;;		_main
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _RF_Main
  6757  259A                     _RF_Main:	
  6758                           
  6759                           ;RF_Control_B1.c: 25: setRF_Main(1);
  6760                           
  6761                           ;incstack = 0
  6762                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6763  259A  3001               	movlw	1
  6764  259B  3189  2132         	fcall	_setRF_Main
  6765  259D  0008               	return
  6766  259E                     __end_of_RF_Main:	
  6767                           
  6768                           	psect	text24
  6769  0932                     __ptext24:	
  6770 ;; *************** function _setRF_Main *****************
  6771 ;; Defined at:
  6772 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  rf              1    wreg     unsigned char 
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;  rf              1   74[BANK0 ] unsigned char 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;		None               void
  6779 ;; Registers used:
  6780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6790 ;;Total ram usage:        3 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:   12
  6793 ;; This function calls:
  6794 ;;		_CC2500_RxData
  6795 ;;		_CC2500_TxData
  6796 ;;		_CC2500_WriteCommand
  6797 ;;		_RF_RxDisable
  6798 ;;		_RfPointSelect
  6799 ;;		_getRxData
  6800 ;;		_setINT_GO
  6801 ;; This function is called by:
  6802 ;;		_RF_Main
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           
  6807                           ;psect for function _setRF_Main
  6808  0932                     _setRF_Main:	
  6809                           
  6810                           ;incstack = 0
  6811                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6812                           ;setRF_Main@rf stored from wreg
  6813  0932  0020               	movlb	0	; select bank0
  6814  0933  00EA               	movwf	setRF_Main@rf
  6815                           
  6816                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  6817  0934  086A               	movf	setRF_Main@rf,w
  6818  0935  31A6  2694  3189   	fcall	_RfPointSelect
  6819                           
  6820                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  6821  0938  0021               	movlb	1	; select bank1
  6822  0939  083E               	movf	_RF^(0+128),w
  6823  093A  0086               	movwf	6
  6824  093B  0187               	clrf	7
  6825  093C  1C01               	btfss	1,0
  6826  093D  0008               	return
  6827                           
  6828                           ;RF_Control_B1.c: 70: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  6829  093E  0020               	movlb	0	; select bank0
  6830  093F  01EB               	clrf	_setRF_Main$3951
  6831  0940  1F0C               	btfss	12,6	;volatile
  6832  0941  1A0C               	btfsc	12,4	;volatile
  6833  0942  2947               	goto	l8918
  6834  0943  180C               	btfsc	12,0	;volatile
  6835  0944  2947               	goto	l8918
  6836  0945  1C8D               	btfss	13,1	;volatile
  6837  0946  2950               	goto	l8922
  6838  0947                     l8918:	
  6839  0947  0021               	movlb	1	; select bank1
  6840  0948  083E               	movf	_RF^(0+128),w
  6841  0949  0086               	movwf	6
  6842  094A  0187               	clrf	7
  6843  094B  1B01               	btfsc	1,6
  6844  094C  2950               	goto	l8922
  6845  094D  0020               	movlb	0	; select bank0
  6846  094E  01EB               	clrf	_setRF_Main$3951
  6847  094F  0AEB               	incf	_setRF_Main$3951,f
  6848  0950                     l8922:	
  6849  0950  0021               	movlb	1	; select bank1
  6850  0951  083E               	movf	_RF^(0+128),w
  6851  0952  0086               	movwf	6
  6852  0953  0187               	clrf	7
  6853  0954  0020               	movlb	0	; select bank0
  6854  0955  086B               	movf	_setRF_Main$3951,w
  6855  0956  1381               	bcf	1,7
  6856  0957  1D03               	skipz
  6857  0958  1781               	bsf	1,7
  6858                           
  6859                           ;RF_Control_B1.c: 74: if (!RF->Key) {
  6860  0959  0021               	movlb	1	; select bank1
  6861  095A  083E               	movf	_RF^(0+128),w
  6862  095B  0086               	movwf	6
  6863  095C  0187               	clrf	7
  6864  095D  1B81               	btfsc	1,7
  6865  095E  298C               	goto	l8944
  6866                           
  6867                           ;RF_Control_B1.c: 75: if (RF->ReceiveGO)
  6868  095F  083E               	movf	_RF^(0+128),w
  6869  0960  0086               	movwf	6
  6870  0961  0187               	clrf	7
  6871  0962  1C81               	btfss	1,1
  6872  0963  2970               	goto	l8932
  6873                           
  6874                           ;RF_Control_B1.c: 76: {
  6875                           ;RF_Control_B1.c: 77: RF->ReceiveGO = 0;
  6876  0964  083E               	movf	_RF^(0+128),w
  6877  0965  0086               	movwf	6
  6878  0966  0187               	clrf	7
  6879  0967  1081               	bcf	1,1
  6880                           
  6881                           ;RF_Control_B1.c: 78: CC2500_RxData();
  6882  0968  3193  2313  3189   	fcall	_CC2500_RxData
  6883                           
  6884                           ;RF_Control_B1.c: 85: getRxData(1);
  6885  096B  3001               	movlw	1
  6886  096C  3190  2045  3189   	fcall	_getRxData
  6887                           
  6888                           ;RF_Control_B1.c: 88: } else {
  6889  096F  2990               	goto	l8946
  6890  0970                     l8932:	
  6891                           
  6892                           ;RF_Control_B1.c: 89: if (!RF->TransceiveGO) {
  6893  0970  0021               	movlb	1	; select bank1
  6894  0971  083E               	movf	_RF^(0+128),w
  6895  0972  0086               	movwf	6
  6896  0973  0187               	clrf	7
  6897  0974  1901               	btfsc	1,2
  6898  0975  2990               	goto	l8946
  6899                           
  6900                           ;RF_Control_B1.c: 91: if (!RF->RxStatus)
  6901  0976  083E               	movf	_RF^(0+128),w
  6902  0977  0086               	movwf	6
  6903  0978  0187               	clrf	7
  6904  0979  1981               	btfsc	1,3
  6905  097A  2990               	goto	l8946
  6906                           
  6907                           ;RF_Control_B1.c: 92: {
  6908                           ;RF_Control_B1.c: 93: RF->RxStatus = 1;
  6909  097B  083E               	movf	_RF^(0+128),w
  6910  097C  0086               	movwf	6
  6911  097D  0187               	clrf	7
  6912  097E  1581               	bsf	1,3
  6913                           
  6914                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6915  097F  3036               	movlw	54
  6916  0980  31A7  275E  3189   	fcall	_CC2500_WriteCommand
  6917                           
  6918                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x34);
  6919  0983  3034               	movlw	52
  6920  0984  31A7  275E  3189   	fcall	_CC2500_WriteCommand
  6921                           
  6922                           ;RF_Control_B1.c: 96: setINT_GO(1);
  6923  0987  3001               	movlw	1
  6924  0988  31A5  25EE  3189   	fcall	_setINT_GO
  6925                           
  6926                           ;RF_Control_B1.c: 97: }
  6927                           ;RF_Control_B1.c: 99: }
  6928                           ;RF_Control_B1.c: 100: }
  6929                           ;RF_Control_B1.c: 101: } else {
  6930  098B  2990               	goto	l8946
  6931  098C                     l8944:	
  6932                           
  6933                           ;RF_Control_B1.c: 102: RF_RxDisable(1);
  6934  098C  3001               	movlw	1
  6935  098D  319A  22E3  3189   	fcall	_RF_RxDisable
  6936  0990                     l8946:	
  6937                           
  6938                           ;RF_Control_B1.c: 103: }
  6939                           ;RF_Control_B1.c: 104: if (RF->TransceiveGO)
  6940  0990  0021               	movlb	1	; select bank1
  6941  0991  083E               	movf	_RF^(0+128),w
  6942  0992  0086               	movwf	6
  6943  0993  0187               	clrf	7
  6944  0994  1D01               	btfss	1,2
  6945  0995  0008               	return
  6946                           
  6947                           ;RF_Control_B1.c: 105: {
  6948                           ;RF_Control_B1.c: 106: RF_RxDisable(1);
  6949  0996  3001               	movlw	1
  6950  0997  319A  22E3  3189   	fcall	_RF_RxDisable
  6951                           
  6952                           ;RF_Control_B1.c: 107: if (!RF->Debounce) {
  6953  099A  0021               	movlb	1	; select bank1
  6954  099B  083E               	movf	_RF^(0+128),w
  6955  099C  0086               	movwf	6
  6956  099D  0187               	clrf	7
  6957  099E  1A81               	btfsc	1,5
  6958  099F  29BB               	goto	l8960
  6959                           
  6960                           ;RF_Control_B1.c: 108: RF->DebounceTime++;
  6961  09A0  3001               	movlw	1
  6962  09A1  0020               	movlb	0	; select bank0
  6963  09A2  00E9               	movwf	??_setRF_Main
  6964  09A3  0021               	movlb	1	; select bank1
  6965  09A4  0A3E               	incf	_RF^(0+128),w
  6966  09A5  0086               	movwf	6
  6967  09A6  0187               	clrf	7
  6968  09A7  0020               	movlb	0	; select bank0
  6969  09A8  0869               	movf	??_setRF_Main,w
  6970  09A9  0781               	addwf	1,f
  6971                           
  6972                           ;RF_Control_B1.c: 109: if (RF->DebounceTime == 25)
  6973  09AA  0021               	movlb	1	; select bank1
  6974  09AB  0A3E               	incf	_RF^(0+128),w
  6975  09AC  0086               	movwf	6
  6976  09AD  0187               	clrf	7
  6977  09AE  0801               	movf	1,w
  6978  09AF  3A19               	xorlw	25
  6979  09B0  1D03               	skipz
  6980  09B1  0008               	return
  6981                           
  6982                           ;RF_Control_B1.c: 110: {
  6983                           ;RF_Control_B1.c: 111: RF->DebounceTime = 0;
  6984  09B2  0A3E               	incf	_RF^(0+128),w
  6985  09B3  0086               	movwf	6
  6986  09B4  0187               	clrf	7
  6987  09B5  0181               	clrf	1
  6988                           
  6989                           ;RF_Control_B1.c: 112: RF->Debounce = 1;
  6990  09B6  083E               	movf	_RF^(0+128),w
  6991  09B7  0086               	movwf	6
  6992  09B8  0187               	clrf	7
  6993  09B9  1681               	bsf	1,5
  6994                           
  6995                           ;RF_Control_B1.c: 113: }
  6996                           ;RF_Control_B1.c: 114: } else {
  6997  09BA  0008               	return
  6998  09BB                     l8960:	
  6999                           
  7000                           ;RF_Control_B1.c: 115: RF->Debounce = 0;
  7001  09BB  083E               	movf	_RF^(0+128),w
  7002  09BC  0086               	movwf	6
  7003  09BD  0187               	clrf	7
  7004  09BE  1281               	bcf	1,5
  7005                           
  7006                           ;RF_Control_B1.c: 116: RF->TransceiveGO = 0;
  7007  09BF  083E               	movf	_RF^(0+128),w
  7008  09C0  0086               	movwf	6
  7009  09C1  0187               	clrf	7
  7010  09C2  1101               	bcf	1,2
  7011                           
  7012                           ;RF_Control_B1.c: 117: CC2500_TxData();
  7013  09C3  319E  260B         	fcall	_CC2500_TxData
  7014  09C5  0008               	return
  7015  09C6                     __end_of_setRF_Main:	
  7016                           
  7017                           	psect	text25
  7018  1045                     __ptext25:	
  7019 ;; *************** function _getRxData *****************
  7020 ;; Defined at:
  7021 ;;		line 201 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  rf              1    wreg     unsigned char 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  rf              1   72[BANK0 ] unsigned char 
  7026 ;;  i               1    0        unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;		None               void
  7029 ;; Registers used:
  7030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        1 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:   11
  7043 ;; This function calls:
  7044 ;;		_RfPointSelect
  7045 ;;		_setControl_Lights_Table
  7046 ;;		_setLog_Code
  7047 ;; This function is called by:
  7048 ;;		_setRF_Main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _getRxData
  7054  1045                     _getRxData:	
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7058                           ;getRxData@rf stored from wreg
  7059  1045  0020               	movlb	0	; select bank0
  7060  1046  00E8               	movwf	getRxData@rf
  7061                           
  7062                           ;RF_Control_B1.c: 202: unsigned char i;
  7063                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  7064  1047  0868               	movf	getRxData@rf,w
  7065  1048  31A6  2694  3190   	fcall	_RfPointSelect
  7066                           
  7067                           ;RF_Control_B1.c: 204: if (RF->Learn) {
  7068  104B  0021               	movlb	1	; select bank1
  7069  104C  083E               	movf	_RF^(0+128),w
  7070  104D  0086               	movwf	6
  7071  104E  0187               	clrf	7
  7072  104F  1F01               	btfss	1,6
  7073  1050  285C               	goto	l8486
  7074                           
  7075                           ;RF_Control_B1.c: 205: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7076  1051  08A0               	movf	_RF_Data^(0+128),f
  7077  1052  1D03               	skipz
  7078  1053  0008               	return
  7079  1054  0821               	movf	(_RF_Data^(0+128)+1),w
  7080  1055  3A64               	xorlw	100
  7081  1056  1D03               	skipz
  7082  1057  0008               	return
  7083                           
  7084                           ;RF_Control_B1.c: 206: {
  7085                           ;RF_Control_B1.c: 207: setLog_Code(1);
  7086  1058  3001               	movlw	1
  7087  1059  319E  26DA         	fcall	_setLog_Code
  7088                           
  7089                           ;RF_Control_B1.c: 208: }
  7090                           ;RF_Control_B1.c: 209: } else {
  7091  105B  0008               	return
  7092  105C                     l8486:	
  7093                           
  7094                           ;RF_Control_B1.c: 210: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7095  105C  0021               	movlb	1	; select bank1
  7096  105D  08A0               	movf	_RF_Data^(0+128),f
  7097  105E  1D03               	skipz
  7098  105F  0008               	return
  7099  1060  0821               	movf	(_RF_Data^(0+128)+1),w
  7100  1061  3A02               	xorlw	2
  7101  1062  1D03               	skipz
  7102  1063  0008               	return
  7103                           
  7104                           ;RF_Control_B1.c: 211: {
  7105                           ;RF_Control_B1.c: 212: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7106  1064  082C               	movf	(_RF_Data^(0+128)+12),w
  7107  1065  3AFF               	xorlw	255
  7108  1066  1D03               	skipz
  7109  1067  2872               	goto	l8498
  7110  1068  082D               	movf	(_RF_Data^(0+128)+13),w
  7111  1069  3AFF               	xorlw	255
  7112  106A  1D03               	skipz
  7113  106B  2872               	goto	l8498
  7114  106C  082E               	movf	(_RF_Data^(0+128)+14),w
  7115  106D  3AFF               	xorlw	255
  7116  106E  1D03               	skipz
  7117  106F  2872               	goto	l8498
  7118                           
  7119                           ;RF_Control_B1.c: 213: __nop();
  7120  1070  0000               	nop
  7121                           
  7122                           ;RF_Control_B1.c: 214: } else {
  7123  1071  0008               	return
  7124  1072                     l8498:	
  7125                           
  7126                           ;RF_Control_B1.c: 215: if (RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->D
      +                          ata[13] && RF_Data[14] == Product->Data[14]) {
  7127  1072  087D               	movf	_Product,w
  7128  1073  3E0C               	addlw	12
  7129  1074  0086               	movwf	6
  7130  1075  3001               	movlw	1	; select bank2/3
  7131  1076  0087               	movwf	7
  7132  1077  0021               	movlb	1	; select bank1
  7133  1078  082C               	movf	(_RF_Data^(0+128)+12),w
  7134  1079  0601               	xorwf	1,w
  7135  107A  1D03               	skipz
  7136  107B  0008               	return
  7137  107C  087D               	movf	_Product,w
  7138  107D  3E0D               	addlw	13
  7139  107E  0086               	movwf	6
  7140  107F  3001               	movlw	1	; select bank2/3
  7141  1080  0087               	movwf	7
  7142  1081  082D               	movf	(_RF_Data^(0+128)+13),w
  7143  1082  0601               	xorwf	1,w
  7144  1083  1D03               	skipz
  7145  1084  0008               	return
  7146  1085  087D               	movf	_Product,w
  7147  1086  3E0E               	addlw	14
  7148  1087  0086               	movwf	6
  7149  1088  3001               	movlw	1	; select bank2/3
  7150  1089  0087               	movwf	7
  7151  108A  082E               	movf	(_RF_Data^(0+128)+14),w
  7152  108B  0601               	xorwf	1,w
  7153  108C  1D03               	skipz
  7154  108D  0008               	return
  7155                           
  7156                           ;RF_Control_B1.c: 216: setControl_Lights_Table(1);
  7157  108E  3001               	movlw	1
  7158  108F  3194  24BC         	fcall	_setControl_Lights_Table
  7159                           
  7160                           ;RF_Control_B1.c: 223: {
  7161                           ;RF_Control_B1.c: 224: ;
  7162                           
  7163                           ;RF_Control_B1.c: 220: {
  7164                           ;RF_Control_B1.c: 221: ;
  7165                           ;RF_Control_B1.c: 222: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7166                           
  7167                           ;RF_Control_B1.c: 217: }
  7168                           ;RF_Control_B1.c: 218: }
  7169                           ;RF_Control_B1.c: 219: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7170  1091  0008               	return
  7171  1092                     __end_of_getRxData:	
  7172                           
  7173                           	psect	text26
  7174  1EDA                     __ptext26:	
  7175 ;; *************** function _setLog_Code *****************
  7176 ;; Defined at:
  7177 ;;		line 234 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  rf              1    wreg     unsigned char 
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  rf              1   11[BANK0 ] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;		None               void
  7184 ;; Registers used:
  7185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;Total ram usage:        2 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    6
  7198 ;; This function calls:
  7199 ;;		_RfPointSelect
  7200 ;;		_setBuz
  7201 ;; This function is called by:
  7202 ;;		_getRxData
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           
  7207                           ;psect for function _setLog_Code
  7208  1EDA                     _setLog_Code:	
  7209                           
  7210                           ;incstack = 0
  7211                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7212                           ;setLog_Code@rf stored from wreg
  7213  1EDA  0020               	movlb	0	; select bank0
  7214  1EDB  00AB               	movwf	setLog_Code@rf
  7215                           
  7216                           ;RF_Control_B1.c: 235: RfPointSelect(rf);
  7217  1EDC  082B               	movf	setLog_Code@rf,w
  7218  1EDD  31A6  2694  319E   	fcall	_RfPointSelect
  7219                           
  7220                           ;RF_Control_B1.c: 236: Product->Data[12]=RF_Data[12];
  7221  1EE0  0021               	movlb	1	; select bank1
  7222  1EE1  082C               	movf	(_RF_Data^(0+128)+12),w
  7223  1EE2  0020               	movlb	0	; select bank0
  7224  1EE3  00AA               	movwf	??_setLog_Code
  7225  1EE4  087D               	movf	_Product,w
  7226  1EE5  3E0C               	addlw	12
  7227  1EE6  0086               	movwf	6
  7228  1EE7  3001               	movlw	1	; select bank2/3
  7229  1EE8  0087               	movwf	7
  7230  1EE9  082A               	movf	??_setLog_Code,w
  7231  1EEA  0081               	movwf	1
  7232                           
  7233                           ;RF_Control_B1.c: 237: Product->Data[13]=RF_Data[13];
  7234  1EEB  0021               	movlb	1	; select bank1
  7235  1EEC  082D               	movf	(_RF_Data^(0+128)+13),w
  7236  1EED  0020               	movlb	0	; select bank0
  7237  1EEE  00AA               	movwf	??_setLog_Code
  7238  1EEF  087D               	movf	_Product,w
  7239  1EF0  3E0D               	addlw	13
  7240  1EF1  0086               	movwf	6
  7241  1EF2  3001               	movlw	1	; select bank2/3
  7242  1EF3  0087               	movwf	7
  7243  1EF4  082A               	movf	??_setLog_Code,w
  7244  1EF5  0081               	movwf	1
  7245                           
  7246                           ;RF_Control_B1.c: 238: Product->Data[14]=RF_Data[14];
  7247  1EF6  0021               	movlb	1	; select bank1
  7248  1EF7  082E               	movf	(_RF_Data^(0+128)+14),w
  7249  1EF8  0020               	movlb	0	; select bank0
  7250  1EF9  00AA               	movwf	??_setLog_Code
  7251  1EFA  087D               	movf	_Product,w
  7252  1EFB  3E0E               	addlw	14
  7253  1EFC  0086               	movwf	6
  7254  1EFD  3001               	movlw	1	; select bank2/3
  7255  1EFE  0087               	movwf	7
  7256  1EFF  082A               	movf	??_setLog_Code,w
  7257  1F00  0081               	movwf	1
  7258                           
  7259                           ;RF_Control_B1.c: 239: setBuz(1, 100);
  7260  1F01  3064               	movlw	100
  7261  1F02  00A6               	movwf	setBuz@time
  7262  1F03  3000               	movlw	0
  7263  1F04  00A7               	movwf	setBuz@time+1
  7264  1F05  3001               	movlw	1
  7265  1F06  3188  2019  319E   	fcall	_setBuz
  7266                           
  7267                           ;RF_Control_B1.c: 240: RF->Learn = 0;
  7268  1F09  0021               	movlb	1	; select bank1
  7269  1F0A  083E               	movf	_RF^(0+128),w
  7270  1F0B  0086               	movwf	6
  7271  1F0C  0187               	clrf	7
  7272  1F0D  1301               	bcf	1,6
  7273                           
  7274                           ;RF_Control_B1.c: 241: if (TMain->First) {
  7275  1F0E  086B               	movf	_TMain^(0+128),w
  7276  1F0F  3E03               	addlw	3
  7277  1F10  0086               	movwf	6
  7278  1F11  3001               	movlw	1	; select bank2/3
  7279  1F12  0087               	movwf	7
  7280  1F13  1C81               	btfss	1,1
  7281  1F14  2F1B               	goto	l2248
  7282                           
  7283                           ;RF_Control_B1.c: 242: Memory->LoopSave=1;
  7284  1F15  086A               	movf	_Memory^(0+128),w
  7285  1F16  3E22               	addlw	34
  7286  1F17  0086               	movwf	6
  7287  1F18  3001               	movlw	1	; select bank2/3
  7288  1F19  0087               	movwf	7
  7289  1F1A  1501               	bsf	1,2
  7290  1F1B                     l2248:	
  7291                           
  7292                           ;RF_Control_B1.c: 243: }
  7293                           ;RF_Control_B1.c: 244: Memory->Modify=1;
  7294  1F1B  086A               	movf	_Memory^(0+128),w
  7295  1F1C  3E22               	addlw	34
  7296  1F1D  0086               	movwf	6
  7297  1F1E  3001               	movlw	1	; select bank2/3
  7298  1F1F  0087               	movwf	7
  7299  1F20  1401               	bsf	1,0
  7300  1F21  0008               	return
  7301  1F22                     __end_of_setLog_Code:	
  7302                           
  7303                           	psect	text27
  7304  14BC                     __ptext27:	
  7305 ;; *************** function _setControl_Lights_Table *****************
  7306 ;; Defined at:
  7307 ;;		line 248 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  rf              1    wreg     unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  rf              1   71[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;		None               void
  7314 ;; Registers used:
  7315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7325 ;;Total ram usage:        1 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:   10
  7328 ;; This function calls:
  7329 ;;		_RfPointSelect
  7330 ;;		_setBuz
  7331 ;;		_setDimmerLights
  7332 ;;		_setRFSW_AdjControl
  7333 ;;		_setRFSW_Control
  7334 ;;		_setRFSW_Status
  7335 ;;		_setSw_Status
  7336 ;;		_setTxData
  7337 ;; This function is called by:
  7338 ;;		_getRxData
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           
  7343                           ;psect for function _setControl_Lights_Table
  7344  14BC                     _setControl_Lights_Table:	
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7348                           ;setControl_Lights_Table@rf stored from wreg
  7349  14BC  0020               	movlb	0	; select bank0
  7350  14BD  00E7               	movwf	setControl_Lights_Table@rf
  7351                           
  7352                           ;RF_Control_B1.c: 249: RfPointSelect(rf);
  7353  14BE  0867               	movf	setControl_Lights_Table@rf,w
  7354  14BF  31A6  2694  3194   	fcall	_RfPointSelect
  7355                           
  7356                           ;RF_Control_B1.c: 250: if (RF_Data[15] == 0x00) {
  7357  14C2  0021               	movlb	1	; select bank1
  7358  14C3  08AF               	movf	(_RF_Data^(0+128)+15),f
  7359  14C4  1D03               	skipz
  7360  14C5  2CFD               	goto	l8318
  7361                           
  7362                           ;RF_Control_B1.c: 252: setDimmerLights(1, 0);
  7363  14C6  0020               	movlb	0	; select bank0
  7364  14C7  01A4               	clrf	setDimmerLights@status
  7365  14C8  3001               	movlw	1
  7366  14C9  3189  21C6  3194   	fcall	_setDimmerLights
  7367                           
  7368                           ;RF_Control_B1.c: 253: setRFSW_Status(1, 0);
  7369  14CC  0020               	movlb	0	; select bank0
  7370  14CD  01A2               	clrf	setRFSW_Status@command
  7371  14CE  3001               	movlw	1
  7372  14CF  31A7  2713  3194   	fcall	_setRFSW_Status
  7373                           
  7374                           ;RF_Control_B1.c: 254: setSw_Status(1, 0);
  7375  14D2  0020               	movlb	0	; select bank0
  7376  14D3  01A2               	clrf	setSw_Status@command
  7377  14D4  3001               	movlw	1
  7378  14D5  31A7  2722  3194   	fcall	_setSw_Status
  7379                           
  7380                           ;RF_Control_B1.c: 267: Product->Data[9]=0;
  7381  14D8  087D               	movf	_Product,w
  7382  14D9  3E09               	addlw	9
  7383  14DA  0086               	movwf	6
  7384  14DB  3001               	movlw	1	; select bank2/3
  7385  14DC  0087               	movwf	7
  7386  14DD  0181               	clrf	1
  7387                           
  7388                           ;RF_Control_B1.c: 268: Product->Data[11]=0;
  7389  14DE  087D               	movf	_Product,w
  7390  14DF  3E0B               	addlw	11
  7391  14E0  0086               	movwf	6
  7392  14E1  3001               	movlw	1	; select bank2/3
  7393  14E2  0087               	movwf	7
  7394  14E3  0181               	clrf	1
  7395                           
  7396                           ;RF_Control_B1.c: 269: Product->Data[15]=0;
  7397  14E4  087D               	movf	_Product,w
  7398  14E5  3E0F               	addlw	15
  7399  14E6  0086               	movwf	6
  7400  14E7  3001               	movlw	1	; select bank2/3
  7401  14E8  0087               	movwf	7
  7402  14E9  0181               	clrf	1
  7403                           
  7404                           ;RF_Control_B1.c: 270: Product->Data[17]=0;
  7405  14EA  087D               	movf	_Product,w
  7406  14EB  3E11               	addlw	17
  7407  14EC  0086               	movwf	6
  7408  14ED  3001               	movlw	1	; select bank2/3
  7409  14EE  0087               	movwf	7
  7410  14EF  0181               	clrf	1
  7411                           
  7412                           ;RF_Control_B1.c: 271: setBuz(1, 100);
  7413  14F0  3064               	movlw	100
  7414  14F1  0020               	movlb	0	; select bank0
  7415  14F2  00A6               	movwf	setBuz@time
  7416  14F3  3000               	movlw	0
  7417  14F4  00A7               	movwf	setBuz@time+1
  7418  14F5  3001               	movlw	1
  7419  14F6  3188  2019  3194   	fcall	_setBuz
  7420                           
  7421                           ;RF_Control_B1.c: 272: setTxData(1);
  7422  14F9  3001               	movlw	1
  7423  14FA  318A  22F2         	fcall	_setTxData
  7424                           
  7425                           ;RF_Control_B1.c: 273: } else if (RF_Data[15] == 0x20) {
  7426  14FC  0008               	return
  7427  14FD                     l8318:	
  7428  14FD  0021               	movlb	1	; select bank1
  7429  14FE  082F               	movf	(_RF_Data^(0+128)+15),w
  7430  14FF  3A20               	xorlw	32
  7431  1500  1D03               	skipz
  7432  1501  2D18               	goto	l8324
  7433                           
  7434                           ;RF_Control_B1.c: 274: Product->Data[9]=0;
  7435  1502  087D               	movf	_Product,w
  7436  1503  3E09               	addlw	9
  7437  1504  0086               	movwf	6
  7438  1505  3001               	movlw	1	; select bank2/3
  7439  1506  0087               	movwf	7
  7440  1507  0181               	clrf	1
  7441                           
  7442                           ;RF_Control_B1.c: 275: Product->Data[11]=0;
  7443  1508  087D               	movf	_Product,w
  7444  1509  3E0B               	addlw	11
  7445  150A  0086               	movwf	6
  7446  150B  3001               	movlw	1	; select bank2/3
  7447  150C  0087               	movwf	7
  7448  150D  0181               	clrf	1
  7449                           
  7450                           ;RF_Control_B1.c: 276: Product->Data[17]=0;
  7451  150E  087D               	movf	_Product,w
  7452  150F  3E11               	addlw	17
  7453  1510  0086               	movwf	6
  7454  1511  3001               	movlw	1	; select bank2/3
  7455  1512  0087               	movwf	7
  7456  1513  0181               	clrf	1
  7457                           
  7458                           ;RF_Control_B1.c: 277: setTxData(1);
  7459  1514  3001               	movlw	1
  7460  1515  318A  22F2         	fcall	_setTxData
  7461                           
  7462                           ;RF_Control_B1.c: 278: }
  7463  1517  0008               	return
  7464  1518                     l8324:	
  7465                           
  7466                           ;RF_Control_B1.c: 280: else if (RF_Data[15] == 0x01) {
  7467  1518  0021               	movlb	1	; select bank1
  7468  1519  082F               	movf	(_RF_Data^(0+128)+15),w
  7469  151A  3A01               	xorlw	1
  7470  151B  1D03               	skipz
  7471  151C  2D21               	goto	l8328
  7472                           
  7473                           ;RF_Control_B1.c: 281: setRFSW_Control(1);
  7474  151D  3001               	movlw	1
  7475  151E  3188  20A2         	fcall	_setRFSW_Control
  7476                           
  7477                           ;RF_Control_B1.c: 282: }
  7478  1520  0008               	return
  7479  1521                     l8328:	
  7480                           
  7481                           ;RF_Control_B1.c: 284: else if (RF_Data[15] == 0x11) {
  7482  1521  0021               	movlb	1	; select bank1
  7483  1522  082F               	movf	(_RF_Data^(0+128)+15),w
  7484  1523  3A11               	xorlw	17
  7485  1524  1D03               	skipz
  7486  1525  0008               	return
  7487                           
  7488                           ;RF_Control_B1.c: 285: setRFSW_AdjControl(1);
  7489  1526  3001               	movlw	1
  7490  1527  319D  2587         	fcall	_setRFSW_AdjControl
  7491  1529  0008               	return
  7492  152A                     __end_of_setControl_Lights_Table:	
  7493                           
  7494                           	psect	text28
  7495  08A2                     __ptext28:	
  7496 ;; *************** function _setRFSW_Control *****************
  7497 ;; Defined at:
  7498 ;;		line 333 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  sw              1    wreg     unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  sw              1   67[BANK0 ] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;		None               void
  7505 ;; Registers used:
  7506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        2 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    8
  7519 ;; This function calls:
  7520 ;;		_RfSWPointSelect
  7521 ;;		_setBuz
  7522 ;;		_setDelayOff_GO
  7523 ;;		_setDimmerLights_Switch
  7524 ;;		_setDimmerLights_Trigger
  7525 ;;		_setRF_DimmerLights
  7526 ;;		_setSw_Status
  7527 ;;		_setTxData
  7528 ;; This function is called by:
  7529 ;;		_setControl_Lights_Table
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _setRFSW_Control
  7535  08A2                     _setRFSW_Control:	
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7539                           ;setRFSW_Control@sw stored from wreg
  7540  08A2  0020               	movlb	0	; select bank0
  7541  08A3  00E3               	movwf	setRFSW_Control@sw
  7542                           
  7543                           ;RF_Control_B1.c: 334: RfSWPointSelect(sw);
  7544  08A4  0863               	movf	setRFSW_Control@sw,w
  7545  08A5  31A6  2688  3188   	fcall	_RfSWPointSelect
  7546                           
  7547                           ;RF_Control_B1.c: 335: if (!RFSW->Status) {
  7548  08A8  0021               	movlb	1	; select bank1
  7549  08A9  083F               	movf	_RFSW^(0+128),w
  7550  08AA  0086               	movwf	6
  7551  08AB  0187               	clrf	7
  7552  08AC  1801               	btfsc	1,0
  7553  08AD  28E3               	goto	l8208
  7554                           
  7555                           ;RF_Control_B1.c: 336: if (RF_Data[16] == 0x80) {
  7556  08AE  0830               	movf	(_RF_Data^(0+128)+16),w
  7557  08AF  3A80               	xorlw	128
  7558  08B0  1D03               	skipz
  7559  08B1  28BF               	goto	l8198
  7560                           
  7561                           ;RF_Control_B1.c: 337: setDelayOff_GO(sw, 1, RF_Data[17]);
  7562  08B2  0020               	movlb	0	; select bank0
  7563  08B3  01A3               	clrf	setDelayOff_GO@command
  7564  08B4  0AA3               	incf	setDelayOff_GO@command,f
  7565  08B5  0021               	movlb	1	; select bank1
  7566  08B6  0831               	movf	(_RF_Data^(0+128)+17),w
  7567  08B7  0020               	movlb	0	; select bank0
  7568  08B8  00E2               	movwf	??_setRFSW_Control
  7569  08B9  0862               	movf	??_setRFSW_Control,w
  7570  08BA  00A4               	movwf	setDelayOff_GO@value
  7571  08BB  0863               	movf	setRFSW_Control@sw,w
  7572  08BC  3191  21F8  3188   	fcall	_setDelayOff_GO
  7573  08BF                     l8198:	
  7574                           
  7575                           ;RF_Control_B1.c: 338: }
  7576                           ;RF_Control_B1.c: 339: RFSW->Status = 1;
  7577  08BF  0021               	movlb	1	; select bank1
  7578  08C0  083F               	movf	_RFSW^(0+128),w
  7579  08C1  0086               	movwf	6
  7580  08C2  0187               	clrf	7
  7581  08C3  1401               	bsf	1,0
  7582                           
  7583                           ;RF_Control_B1.c: 340: setSw_Status(sw, 1);
  7584  08C4  0020               	movlb	0	; select bank0
  7585  08C5  01A2               	clrf	setSw_Status@command
  7586  08C6  0AA2               	incf	setSw_Status@command,f
  7587  08C7  0863               	movf	setRFSW_Control@sw,w
  7588  08C8  31A7  2722  3188   	fcall	_setSw_Status
  7589                           
  7590                           ;RF_Control_B1.c: 342: setDimmerLights_Trigger(sw, 1);
  7591  08CB  0020               	movlb	0	; select bank0
  7592  08CC  01A2               	clrf	setDimmerLights_Trigger@command
  7593  08CD  0AA2               	incf	setDimmerLights_Trigger@command,f
  7594  08CE  0863               	movf	setRFSW_Control@sw,w
  7595  08CF  31A7  277E  3188   	fcall	_setDimmerLights_Trigger
  7596                           
  7597                           ;RF_Control_B1.c: 343: setDimmerLights_Switch(sw, 1);
  7598  08D2  0020               	movlb	0	; select bank0
  7599  08D3  01A2               	clrf	setDimmerLights_Switch@command
  7600  08D4  0AA2               	incf	setDimmerLights_Switch@command,f
  7601  08D5  0863               	movf	setRFSW_Control@sw,w
  7602  08D6  31A7  276E  3188   	fcall	_setDimmerLights_Switch
  7603                           
  7604                           ;RF_Control_B1.c: 345: setRF_DimmerLights(sw, RFSW->Status);
  7605  08D9  0021               	movlb	1	; select bank1
  7606  08DA  083F               	movf	_RFSW^(0+128),w
  7607  08DB  0086               	movwf	6
  7608  08DC  0187               	clrf	7
  7609  08DD  3000               	movlw	0
  7610  08DE  1801               	btfsc	1,0
  7611  08DF  3001               	movlw	1
  7612  08E0  0020               	movlb	0	; select bank0
  7613  08E1  00DD               	movwf	setRF_DimmerLights@on
  7614  08E2  2921               	goto	L2
  7615  08E3                     l8208:	
  7616                           ;RF_Control_B1.c: 346: } else {
  7617                           
  7618                           
  7619                           ;RF_Control_B1.c: 347: if (RF_Data[16] == 0x80) {
  7620  08E3  0021               	movlb	1	; select bank1
  7621  08E4  0830               	movf	(_RF_Data^(0+128)+16),w
  7622  08E5  3A80               	xorlw	128
  7623  08E6  1D03               	skipz
  7624  08E7  28F9               	goto	l8212
  7625                           
  7626                           ;RF_Control_B1.c: 348: setDelayOff_GO(sw, 1, RF_Data[17]);
  7627  08E8  0020               	movlb	0	; select bank0
  7628  08E9  01A3               	clrf	setDelayOff_GO@command
  7629  08EA  0AA3               	incf	setDelayOff_GO@command,f
  7630  08EB  0021               	movlb	1	; select bank1
  7631  08EC  0831               	movf	(_RF_Data^(0+128)+17),w
  7632  08ED  0020               	movlb	0	; select bank0
  7633  08EE  00E2               	movwf	??_setRFSW_Control
  7634  08EF  0862               	movf	??_setRFSW_Control,w
  7635  08F0  00A4               	movwf	setDelayOff_GO@value
  7636  08F1  0863               	movf	setRFSW_Control@sw,w
  7637  08F2  3191  21F8  3188   	fcall	_setDelayOff_GO
  7638                           
  7639                           ;RF_Control_B1.c: 349: setRF_DimmerLights(sw, 1);
  7640  08F5  0020               	movlb	0	; select bank0
  7641  08F6  01DD               	clrf	setRF_DimmerLights@on
  7642  08F7  0ADD               	incf	setRF_DimmerLights@on,f
  7643  08F8  2921               	goto	L2
  7644  08F9                     l8212:	
  7645                           ;RF_Control_B1.c: 350: } else {
  7646                           
  7647                           
  7648                           ;RF_Control_B1.c: 351: RFSW->Status = 0;
  7649  08F9  0021               	movlb	1	; select bank1
  7650  08FA  083F               	movf	_RFSW^(0+128),w
  7651  08FB  0086               	movwf	6
  7652  08FC  0187               	clrf	7
  7653  08FD  1001               	bcf	1,0
  7654                           
  7655                           ;RF_Control_B1.c: 352: setSw_Status(sw, 0);
  7656  08FE  0020               	movlb	0	; select bank0
  7657  08FF  01A2               	clrf	setSw_Status@command
  7658  0900  0863               	movf	setRFSW_Control@sw,w
  7659  0901  31A7  2722  3188   	fcall	_setSw_Status
  7660                           
  7661                           ;RF_Control_B1.c: 354: setDimmerLights_Trigger(sw, 1);
  7662  0904  0020               	movlb	0	; select bank0
  7663  0905  01A2               	clrf	setDimmerLights_Trigger@command
  7664  0906  0AA2               	incf	setDimmerLights_Trigger@command,f
  7665  0907  0863               	movf	setRFSW_Control@sw,w
  7666  0908  31A7  277E  3188   	fcall	_setDimmerLights_Trigger
  7667                           
  7668                           ;RF_Control_B1.c: 355: setDimmerLights_Switch(sw, RFSW->Status);
  7669  090B  0021               	movlb	1	; select bank1
  7670  090C  083F               	movf	_RFSW^(0+128),w
  7671  090D  0086               	movwf	6
  7672  090E  0187               	clrf	7
  7673  090F  3000               	movlw	0
  7674  0910  1801               	btfsc	1,0
  7675  0911  3001               	movlw	1
  7676  0912  0020               	movlb	0	; select bank0
  7677  0913  00A2               	movwf	setDimmerLights_Switch@command
  7678  0914  0863               	movf	setRFSW_Control@sw,w
  7679  0915  31A7  276E  3188   	fcall	_setDimmerLights_Switch
  7680                           
  7681                           ;RF_Control_B1.c: 357: setDelayOff_GO(sw, 0, 0);
  7682  0918  0020               	movlb	0	; select bank0
  7683  0919  01A3               	clrf	setDelayOff_GO@command
  7684  091A  01A4               	clrf	setDelayOff_GO@value
  7685  091B  0863               	movf	setRFSW_Control@sw,w
  7686  091C  3191  21F8  3188   	fcall	_setDelayOff_GO
  7687                           
  7688                           ;RF_Control_B1.c: 358: setRF_DimmerLights(sw, 0);
  7689  091F  0020               	movlb	0	; select bank0
  7690  0920  01DD               	clrf	setRF_DimmerLights@on
  7691  0921                     L2:	
  7692  0921  0863               	movf	setRFSW_Control@sw,w
  7693  0922  3193  2377  3188   	fcall	_setRF_DimmerLights
  7694                           
  7695                           ;RF_Control_B1.c: 359: }
  7696                           ;RF_Control_B1.c: 360: }
  7697                           ;RF_Control_B1.c: 361: setBuz(1, 100);
  7698  0925  3064               	movlw	100
  7699  0926  0020               	movlb	0	; select bank0
  7700  0927  00A6               	movwf	setBuz@time
  7701  0928  3000               	movlw	0
  7702  0929  00A7               	movwf	setBuz@time+1
  7703  092A  3001               	movlw	1
  7704  092B  3188  2019  3188   	fcall	_setBuz
  7705                           
  7706                           ;RF_Control_B1.c: 362: setTxData(1);
  7707  092E  3001               	movlw	1
  7708  092F  318A  22F2         	fcall	_setTxData
  7709  0931  0008               	return
  7710  0932                     __end_of_setRFSW_Control:	
  7711                           
  7712                           	psect	text29
  7713  11F8                     __ptext29:	
  7714 ;; *************** function _setDelayOff_GO *****************
  7715 ;; Defined at:
  7716 ;;		line 92 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  sw              1    wreg     unsigned char 
  7719 ;;  command         1    3[BANK0 ] unsigned char 
  7720 ;;  value           1    4[BANK0 ] unsigned char 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;  sw              1    7[BANK0 ] unsigned char 
  7723 ;; Return value:  Size  Location     Type
  7724 ;;		None               void
  7725 ;; Registers used:
  7726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;Total ram usage:        5 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    5
  7739 ;; This function calls:
  7740 ;;		_DelayOffPointSelect
  7741 ;;		_DelayTimejudge
  7742 ;; This function is called by:
  7743 ;;		_setRFSW_Control
  7744 ;;		_Sw_DimmerOffFunc
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           
  7749                           ;psect for function _setDelayOff_GO
  7750  11F8                     _setDelayOff_GO:	
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7754                           ;setDelayOff_GO@sw stored from wreg
  7755  11F8  0020               	movlb	0	; select bank0
  7756  11F9  00A7               	movwf	setDelayOff_GO@sw
  7757                           
  7758                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7759  11FA  0827               	movf	setDelayOff_GO@sw,w
  7760  11FB  31A6  267C  3191   	fcall	_DelayOffPointSelect
  7761                           
  7762                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7763  11FE  0021               	movlb	1	; select bank1
  7764  11FF  0839               	movf	_DelayOff^(0+128),w
  7765  1200  0086               	movwf	6
  7766  1201  0187               	clrf	7
  7767  1202  1C01               	btfss	1,0
  7768  1203  0008               	return
  7769                           
  7770                           ;DelayOff_B1.c: 96: {
  7771                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7772  1204  0839               	movf	_DelayOff^(0+128),w
  7773  1205  0086               	movwf	6
  7774  1206  0187               	clrf	7
  7775  1207  0020               	movlb	0	; select bank0
  7776  1208  0823               	movf	setDelayOff_GO@command,w
  7777  1209  1081               	bcf	1,1
  7778  120A  1D03               	skipz
  7779  120B  1481               	bsf	1,1
  7780                           
  7781                           ;DelayOff_B1.c: 98: if(command)
  7782  120C  0823               	movf	setDelayOff_GO@command,w
  7783  120D  1903               	btfsc	3,2
  7784  120E  2A3A               	goto	l6060
  7785                           
  7786                           ;DelayOff_B1.c: 99: {
  7787                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7788  120F  0824               	movf	setDelayOff_GO@value,w
  7789  1210  319B  23B9  3191   	fcall	_DelayTimejudge
  7790  1213  0020               	movlb	0	; select bank0
  7791  1214  00A5               	movwf	??_setDelayOff_GO
  7792  1215  0021               	movlb	1	; select bank1
  7793  1216  0A39               	incf	_DelayOff^(0+128),w
  7794  1217  0086               	movwf	6
  7795  1218  0187               	clrf	7
  7796  1219  0020               	movlb	0	; select bank0
  7797  121A  0825               	movf	??_setDelayOff_GO,w
  7798  121B  0081               	movwf	1
  7799                           
  7800                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7801  121C  300F               	movlw	15
  7802  121D  0524               	andwf	setDelayOff_GO@value,w
  7803  121E  00A5               	movwf	??_setDelayOff_GO
  7804  121F  0825               	movf	??_setDelayOff_GO,w
  7805  1220  3A05               	xorlw	5
  7806  1221  1903               	skipnz
  7807  1222  2A27               	goto	l6054
  7808  1223  0824               	movf	setDelayOff_GO@value,w
  7809  1224  390F               	andlw	15
  7810  1225  1D03               	btfss	3,2
  7811  1226  2A2D               	goto	l6058
  7812  1227                     l6054:	
  7813  1227  3026               	movlw	38
  7814  1228  0224               	subwf	setDelayOff_GO@value,w
  7815  1229  1803               	skipnc
  7816  122A  2A2D               	goto	l6058
  7817                           
  7818                           ;DelayOff_B1.c: 102: {
  7819                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7820  122B  0824               	movf	setDelayOff_GO@value,w
  7821  122C  2A2E               	goto	L3
  7822  122D                     l6058:	
  7823                           ;DelayOff_B1.c: 104: }
  7824                           
  7825                           
  7826                           ;DelayOff_B1.c: 105: else
  7827                           ;DelayOff_B1.c: 106: {
  7828                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7829  122D  3005               	movlw	5
  7830  122E                     L3:	
  7831  122E  00A5               	movwf	??_setDelayOff_GO
  7832  122F  0827               	movf	setDelayOff_GO@sw,w
  7833  1230  3E1A               	addlw	26
  7834  1231  077D               	addwf	_Product,w
  7835  1232  00A6               	movwf	??_setDelayOff_GO+1
  7836  1233  0826               	movf	??_setDelayOff_GO+1,w
  7837  1234  0086               	movwf	6
  7838  1235  3001               	movlw	1	; select bank2/3
  7839  1236  0087               	movwf	7
  7840  1237  0825               	movf	??_setDelayOff_GO,w
  7841  1238  0081               	movwf	1
  7842                           
  7843                           ;DelayOff_B1.c: 108: }
  7844                           ;DelayOff_B1.c: 109: }
  7845  1239  2A46               	goto	l6064
  7846  123A                     l6060:	
  7847                           
  7848                           ;DelayOff_B1.c: 110: else if(!command)
  7849  123A  08A3               	movf	setDelayOff_GO@command,f
  7850  123B  1D03               	skipz
  7851  123C  2A46               	goto	l6064
  7852                           
  7853                           ;DelayOff_B1.c: 111: {
  7854                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7855  123D  0827               	movf	setDelayOff_GO@sw,w
  7856  123E  3E1A               	addlw	26
  7857  123F  077D               	addwf	_Product,w
  7858  1240  00A5               	movwf	??_setDelayOff_GO
  7859  1241  0825               	movf	??_setDelayOff_GO,w
  7860  1242  0086               	movwf	6
  7861  1243  3001               	movlw	1	; select bank2/3
  7862  1244  0087               	movwf	7
  7863  1245  0181               	clrf	1
  7864  1246                     l6064:	
  7865                           
  7866                           ;DelayOff_B1.c: 113: }
  7867                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7868  1246  0021               	movlb	1	; select bank1
  7869  1247  0839               	movf	_DelayOff^(0+128),w
  7870  1248  3E02               	addlw	2
  7871  1249  0086               	movwf	6
  7872  124A  0187               	clrf	7
  7873  124B  3000               	movlw	0
  7874  124C  3FC0               	movwi [0]fsr1
  7875  124D  3FC1               	movwi [1]fsr1
  7876                           
  7877                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7878  124E  0839               	movf	_DelayOff^(0+128),w
  7879  124F  3E04               	addlw	4
  7880  1250  0086               	movwf	6
  7881  1251  0187               	clrf	7
  7882  1252  0181               	clrf	1
  7883  1253  0008               	return
  7884  1254                     __end_of_setDelayOff_GO:	
  7885                           
  7886                           	psect	text30
  7887  1BB9                     __ptext30:	
  7888 ;; *************** function _DelayTimejudge *****************
  7889 ;; Defined at:
  7890 ;;		line 119 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  value           1    wreg     unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  value           1    2[BANK0 ] unsigned char 
  7895 ;;  i               1    1[BANK0 ] unsigned char 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      unsigned char 
  7898 ;; Registers used:
  7899 ;;		wreg
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7909 ;;Total ram usage:        3 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    4
  7912 ;; This function calls:
  7913 ;;		Nothing
  7914 ;; This function is called by:
  7915 ;;		_setDelayOff_GO
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           
  7920                           ;psect for function _DelayTimejudge
  7921  1BB9                     _DelayTimejudge:	
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _DelayTimejudge: [wreg]
  7925                           ;DelayTimejudge@value stored from wreg
  7926  1BB9  0020               	movlb	0	; select bank0
  7927  1BBA  00A2               	movwf	DelayTimejudge@value
  7928                           
  7929                           ;DelayOff_B1.c: 121: char i=5;
  7930  1BBB  3005               	movlw	5
  7931  1BBC  00A0               	movwf	??_DelayTimejudge
  7932  1BBD  0820               	movf	??_DelayTimejudge,w
  7933  1BBE  00A1               	movwf	DelayTimejudge@i
  7934                           
  7935                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7936  1BBF  0822               	movf	DelayTimejudge@value,w
  7937  1BC0  3A05               	xorlw	5
  7938  1BC1  1D03               	skipz
  7939  1BC2  2BC5               	goto	l5900
  7940                           
  7941                           ;DelayOff_B1.c: 123: {
  7942                           ;DelayOff_B1.c: 124: i=5;
  7943  1BC3  3005               	movlw	5
  7944  1BC4  2BE2               	goto	L8
  7945  1BC5                     l5900:	
  7946                           ;DelayOff_B1.c: 125: }
  7947                           
  7948                           
  7949                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7950  1BC5  0822               	movf	DelayTimejudge@value,w
  7951  1BC6  3A10               	xorlw	16
  7952  1BC7  1D03               	skipz
  7953  1BC8  2BCB               	goto	l5904
  7954                           
  7955                           ;DelayOff_B1.c: 127: {
  7956                           ;DelayOff_B1.c: 128: i=10;
  7957  1BC9  300A               	movlw	10
  7958  1BCA  2BE2               	goto	L8
  7959  1BCB                     l5904:	
  7960                           ;DelayOff_B1.c: 129: }
  7961                           
  7962                           
  7963                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7964  1BCB  0822               	movf	DelayTimejudge@value,w
  7965  1BCC  3A15               	xorlw	21
  7966  1BCD  1D03               	skipz
  7967  1BCE  2BD1               	goto	l5908
  7968                           
  7969                           ;DelayOff_B1.c: 131: {
  7970                           ;DelayOff_B1.c: 132: i=15;
  7971  1BCF  300F               	movlw	15
  7972  1BD0  2BE2               	goto	L8
  7973  1BD1                     l5908:	
  7974                           ;DelayOff_B1.c: 133: }
  7975                           
  7976                           
  7977                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7978  1BD1  0822               	movf	DelayTimejudge@value,w
  7979  1BD2  3A20               	xorlw	32
  7980  1BD3  1D03               	skipz
  7981  1BD4  2BD7               	goto	l5912
  7982                           
  7983                           ;DelayOff_B1.c: 135: {
  7984                           ;DelayOff_B1.c: 136: i=20;
  7985  1BD5  3014               	movlw	20
  7986  1BD6  2BE2               	goto	L8
  7987  1BD7                     l5912:	
  7988                           ;DelayOff_B1.c: 137: }
  7989                           
  7990                           
  7991                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7992  1BD7  0822               	movf	DelayTimejudge@value,w
  7993  1BD8  3A25               	xorlw	37
  7994  1BD9  1D03               	skipz
  7995  1BDA  2BDD               	goto	l5916
  7996                           
  7997                           ;DelayOff_B1.c: 139: {
  7998                           ;DelayOff_B1.c: 140: i=25;
  7999  1BDB  3019               	movlw	25
  8000  1BDC  2BE2               	goto	L8
  8001  1BDD                     l5916:	
  8002                           ;DelayOff_B1.c: 141: }
  8003                           
  8004                           
  8005                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8006  1BDD  0822               	movf	DelayTimejudge@value,w
  8007  1BDE  3A30               	xorlw	48
  8008  1BDF  1D03               	skipz
  8009  1BE0  2BE5               	goto	l628
  8010                           
  8011                           ;DelayOff_B1.c: 143: {
  8012                           ;DelayOff_B1.c: 144: i=30;
  8013  1BE1  301E               	movlw	30
  8014  1BE2                     L8:	
  8015  1BE2  00A0               	movwf	??_DelayTimejudge
  8016  1BE3  0820               	movf	??_DelayTimejudge,w
  8017  1BE4  00A1               	movwf	DelayTimejudge@i
  8018  1BE5                     l628:	
  8019                           
  8020                           ;DelayOff_B1.c: 145: }
  8021                           ;DelayOff_B1.c: 146: return i;
  8022  1BE5  0821               	movf	DelayTimejudge@i,w
  8023  1BE6  0008               	return
  8024  1BE7                     __end_of_DelayTimejudge:	
  8025                           
  8026                           	psect	text31
  8027  1D87                     __ptext31:	
  8028 ;; *************** function _setRFSW_AdjControl *****************
  8029 ;; Defined at:
  8030 ;;		line 366 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  sw              1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  sw              1   70[BANK0 ] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;		None               void
  8037 ;; Registers used:
  8038 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;Total ram usage:        3 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    9
  8051 ;; This function calls:
  8052 ;;		_RfSWPointSelect
  8053 ;;		_setRF_DimmerValue
  8054 ;;		_setTxData
  8055 ;; This function is called by:
  8056 ;;		_setControl_Lights_Table
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _setRFSW_AdjControl
  8062  1D87                     _setRFSW_AdjControl:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8066                           ;setRFSW_AdjControl@sw stored from wreg
  8067  1D87  0020               	movlb	0	; select bank0
  8068  1D88  00E6               	movwf	setRFSW_AdjControl@sw
  8069                           
  8070                           ;RF_Control_B1.c: 367: RfSWPointSelect(sw);
  8071  1D89  0866               	movf	setRFSW_AdjControl@sw,w
  8072  1D8A  31A6  2688  319D   	fcall	_RfSWPointSelect
  8073                           
  8074                           ;RF_Control_B1.c: 368: if (RFSW->Status) {
  8075  1D8D  0021               	movlb	1	; select bank1
  8076  1D8E  083F               	movf	_RFSW^(0+128),w
  8077  1D8F  0086               	movwf	6
  8078  1D90  0187               	clrf	7
  8079  1D91  1C01               	btfss	1,0
  8080  1D92  2D9F               	goto	l6306
  8081                           
  8082                           ;RF_Control_B1.c: 369: Memory->Modify=1;
  8083  1D93  086A               	movf	_Memory^(0+128),w
  8084  1D94  3E22               	addlw	34
  8085  1D95  0086               	movwf	6
  8086  1D96  3001               	movlw	1	; select bank2/3
  8087  1D97  0087               	movwf	7
  8088  1D98  1401               	bsf	1,0
  8089                           
  8090                           ;RF_Control_B1.c: 370: setRF_DimmerValue(sw);
  8091  1D99  0020               	movlb	0	; select bank0
  8092  1D9A  0866               	movf	setRFSW_AdjControl@sw,w
  8093  1D9B  319C  24DB  319D   	fcall	_setRF_DimmerValue
  8094                           
  8095                           ;RF_Control_B1.c: 371: } else {
  8096  1D9E  2DB1               	goto	l2275
  8097  1D9F                     l6306:	
  8098                           
  8099                           ;RF_Control_B1.c: 372: Product->Data[9]=Product->Data[20 + sw];
  8100  1D9F  0020               	movlb	0	; select bank0
  8101  1DA0  0866               	movf	setRFSW_AdjControl@sw,w
  8102  1DA1  3E14               	addlw	20
  8103  1DA2  077D               	addwf	_Product,w
  8104  1DA3  00E4               	movwf	??_setRFSW_AdjControl
  8105  1DA4  0864               	movf	??_setRFSW_AdjControl,w
  8106  1DA5  0086               	movwf	6
  8107  1DA6  3001               	movlw	1	; select bank2/3
  8108  1DA7  0087               	movwf	7
  8109  1DA8  0801               	movf	1,w
  8110  1DA9  00E5               	movwf	??_setRFSW_AdjControl+1
  8111  1DAA  087D               	movf	_Product,w
  8112  1DAB  3E09               	addlw	9
  8113  1DAC  0086               	movwf	6
  8114  1DAD  3001               	movlw	1	; select bank2/3
  8115  1DAE  0087               	movwf	7
  8116  1DAF  0865               	movf	??_setRFSW_AdjControl+1,w
  8117  1DB0  0081               	movwf	1
  8118  1DB1                     l2275:	
  8119                           
  8120                           ;RF_Control_B1.c: 373: }
  8121                           ;RF_Control_B1.c: 374: Product->Data[17]=Product->Data[26 + sw];
  8122  1DB1  0020               	movlb	0	; select bank0
  8123  1DB2  0866               	movf	setRFSW_AdjControl@sw,w
  8124  1DB3  3E1A               	addlw	26
  8125  1DB4  077D               	addwf	_Product,w
  8126  1DB5  00E4               	movwf	??_setRFSW_AdjControl
  8127  1DB6  0864               	movf	??_setRFSW_AdjControl,w
  8128  1DB7  0086               	movwf	6
  8129  1DB8  3001               	movlw	1	; select bank2/3
  8130  1DB9  0087               	movwf	7
  8131  1DBA  0801               	movf	1,w
  8132  1DBB  00E5               	movwf	??_setRFSW_AdjControl+1
  8133  1DBC  087D               	movf	_Product,w
  8134  1DBD  3E11               	addlw	17
  8135  1DBE  0086               	movwf	6
  8136  1DBF  3001               	movlw	1	; select bank2/3
  8137  1DC0  0087               	movwf	7
  8138  1DC1  0865               	movf	??_setRFSW_AdjControl+1,w
  8139  1DC2  0081               	movwf	1
  8140                           
  8141                           ;RF_Control_B1.c: 375: setTxData(1);
  8142  1DC3  3001               	movlw	1
  8143  1DC4  318A  22F2         	fcall	_setTxData
  8144  1DC6  0008               	return
  8145  1DC7                     __end_of_setRFSW_AdjControl:	
  8146                           
  8147                           	psect	text32
  8148  1CDB                     __ptext32:	
  8149 ;; *************** function _setRF_DimmerValue *****************
  8150 ;; Defined at:
  8151 ;;		line 386 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;  lights          1    wreg     unsigned char 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  lights          1   67[BANK0 ] unsigned char 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;		None               void
  8158 ;; Registers used:
  8159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;Total ram usage:        3 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    8
  8172 ;; This function calls:
  8173 ;;		_setDimmerLights_AdjRF
  8174 ;; This function is called by:
  8175 ;;		_setRFSW_AdjControl
  8176 ;; This function uses a non-reentrant model
  8177 ;;
  8178                           
  8179                           
  8180                           ;psect for function _setRF_DimmerValue
  8181  1CDB                     _setRF_DimmerValue:	
  8182                           
  8183                           ;incstack = 0
  8184                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8185                           ;setRF_DimmerValue@lights stored from wreg
  8186  1CDB  0020               	movlb	0	; select bank0
  8187  1CDC  00E3               	movwf	setRF_DimmerValue@lights
  8188                           
  8189                           ;RF_Control_B1.c: 387: if (RF_Data[9] > 0x64) {
  8190  1CDD  3065               	movlw	101
  8191  1CDE  0021               	movlb	1	; select bank1
  8192  1CDF  0229               	subwf	(_RF_Data^(0+128)+9),w
  8193  1CE0  1C03               	skipc
  8194  1CE1  2CE8               	goto	l6154
  8195                           
  8196                           ;RF_Control_B1.c: 388: RF_Data[9] = 0x64;
  8197  1CE2  3064               	movlw	100
  8198  1CE3  0020               	movlb	0	; select bank0
  8199  1CE4  00E1               	movwf	??_setRF_DimmerValue
  8200  1CE5  0861               	movf	??_setRF_DimmerValue,w
  8201  1CE6  0021               	movlb	1	; select bank1
  8202  1CE7  00A9               	movwf	(_RF_Data^(0+128)+9)
  8203  1CE8                     l6154:	
  8204                           
  8205                           ;RF_Control_B1.c: 389: }
  8206                           ;RF_Control_B1.c: 390: Product->Data[9]=RF_Data[9];
  8207  1CE8  0829               	movf	(_RF_Data^(0+128)+9),w
  8208  1CE9  0020               	movlb	0	; select bank0
  8209  1CEA  00E1               	movwf	??_setRF_DimmerValue
  8210  1CEB  087D               	movf	_Product,w
  8211  1CEC  3E09               	addlw	9
  8212  1CED  0086               	movwf	6
  8213  1CEE  3001               	movlw	1	; select bank2/3
  8214  1CEF  0087               	movwf	7
  8215  1CF0  0861               	movf	??_setRF_DimmerValue,w
  8216  1CF1  0081               	movwf	1
  8217                           
  8218                           ;RF_Control_B1.c: 391: Product->Data[11]=lights;
  8219  1CF2  0863               	movf	setRF_DimmerValue@lights,w
  8220  1CF3  00E1               	movwf	??_setRF_DimmerValue
  8221  1CF4  087D               	movf	_Product,w
  8222  1CF5  3E0B               	addlw	11
  8223  1CF6  0086               	movwf	6
  8224  1CF7  3001               	movlw	1	; select bank2/3
  8225  1CF8  0087               	movwf	7
  8226  1CF9  0861               	movf	??_setRF_DimmerValue,w
  8227  1CFA  0081               	movwf	1
  8228                           
  8229                           ;RF_Control_B1.c: 392: Product->Data[(20 + lights)]=Product->Data[9];
  8230  1CFB  087D               	movf	_Product,w
  8231  1CFC  3E09               	addlw	9
  8232  1CFD  0086               	movwf	6
  8233  1CFE  3001               	movlw	1	; select bank2/3
  8234  1CFF  0087               	movwf	7
  8235  1D00  0801               	movf	1,w
  8236  1D01  00E1               	movwf	??_setRF_DimmerValue
  8237  1D02  0863               	movf	setRF_DimmerValue@lights,w
  8238  1D03  3E14               	addlw	20
  8239  1D04  077D               	addwf	_Product,w
  8240  1D05  00E2               	movwf	??_setRF_DimmerValue+1
  8241  1D06  0862               	movf	??_setRF_DimmerValue+1,w
  8242  1D07  0086               	movwf	6
  8243  1D08  3001               	movlw	1	; select bank2/3
  8244  1D09  0087               	movwf	7
  8245  1D0A  0861               	movf	??_setRF_DimmerValue,w
  8246  1D0B  0081               	movwf	1
  8247                           
  8248                           ;RF_Control_B1.c: 393: setDimmerLights_AdjRF(lights);
  8249  1D0C  0863               	movf	setRF_DimmerValue@lights,w
  8250  1D0D  319A  2276         	fcall	_setDimmerLights_AdjRF
  8251  1D0F  0008               	return
  8252  1D10                     __end_of_setRF_DimmerValue:	
  8253                           
  8254                           	psect	text33
  8255  1A76                     __ptext33:	
  8256 ;; *************** function _setDimmerLights_AdjRF *****************
  8257 ;; Defined at:
  8258 ;;		line 423 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  lights          1    wreg     unsigned char 
  8261 ;; Auto vars:     Size  Location     Type
  8262 ;;  lights          1   64[BANK0 ] unsigned char 
  8263 ;; Return value:  Size  Location     Type
  8264 ;;		None               void
  8265 ;; Registers used:
  8266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8267 ;; Tracked objects:
  8268 ;;		On entry : 0/0
  8269 ;;		On exit  : 0/0
  8270 ;;		Unchanged: 0/0
  8271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;Total ram usage:        2 bytes
  8277 ;; Hardware stack levels used:    1
  8278 ;; Hardware stack levels required when called:    7
  8279 ;; This function calls:
  8280 ;;		_DimmerLightsPointSelect
  8281 ;;		_getPercentValue
  8282 ;; This function is called by:
  8283 ;;		_setRF_DimmerValue
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _setDimmerLights_AdjRF
  8289  1A76                     _setDimmerLights_AdjRF:	
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8293                           ;setDimmerLights_AdjRF@lights stored from wreg
  8294  1A76  0020               	movlb	0	; select bank0
  8295  1A77  00E0               	movwf	setDimmerLights_AdjRF@lights
  8296                           
  8297                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8298  1A78  0860               	movf	setDimmerLights_AdjRF@lights,w
  8299  1A79  31A6  2616  319A   	fcall	_DimmerLightsPointSelect
  8300                           
  8301                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8302  1A7C  0877               	movf	_DimmerLights,w
  8303  1A7D  0086               	movwf	6
  8304  1A7E  3001               	movlw	1	; select bank2/3
  8305  1A7F  0087               	movwf	7
  8306  1A80  1501               	bsf	1,2
  8307                           
  8308                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8309  1A81  0877               	movf	_DimmerLights,w
  8310  1A82  0086               	movwf	6
  8311  1A83  3001               	movlw	1	; select bank2/3
  8312  1A84  0087               	movwf	7
  8313  1A85  1481               	bsf	1,1
  8314                           
  8315                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8316  1A86  087D               	movf	_Product,w
  8317  1A87  3E09               	addlw	9
  8318  1A88  0086               	movwf	6
  8319  1A89  3001               	movlw	1	; select bank2/3
  8320  1A8A  0087               	movwf	7
  8321  1A8B  0801               	movf	1,w
  8322  1A8C  3191  219D         	fcall	_getPercentValue
  8323  1A8E  0020               	movlb	0	; select bank0
  8324  1A8F  00DF               	movwf	??_setDimmerLights_AdjRF
  8325  1A90  0877               	movf	_DimmerLights,w
  8326  1A91  3E05               	addlw	5
  8327  1A92  0086               	movwf	6
  8328  1A93  3001               	movlw	1	; select bank2/3
  8329  1A94  0087               	movwf	7
  8330  1A95  085F               	movf	??_setDimmerLights_AdjRF,w
  8331  1A96  0081               	movwf	1
  8332  1A97  0008               	return
  8333  1A98                     __end_of_setDimmerLights_AdjRF:	
  8334                           
  8335                           	psect	text34
  8336  119D                     __ptext34:	
  8337 ;; *************** function _getPercentValue *****************
  8338 ;; Defined at:
  8339 ;;		line 490 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  value           1    wreg     unsigned char 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  value           1   59[BANK0 ] unsigned char 
  8344 ;;  i               3   60[BANK0 ] float 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  1    wreg      unsigned char 
  8347 ;; Registers used:
  8348 ;;		wreg, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:        6 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    6
  8361 ;; This function calls:
  8362 ;;		___awtoft
  8363 ;;		___ftadd
  8364 ;;		___ftdiv
  8365 ;;		___ftmul
  8366 ;;		___fttol
  8367 ;; This function is called by:
  8368 ;;		_setDimmerLights_AdjRF
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           
  8373                           ;psect for function _getPercentValue
  8374  119D                     _getPercentValue:	
  8375                           
  8376                           ;incstack = 0
  8377                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8378                           ;getPercentValue@value stored from wreg
  8379  119D  0020               	movlb	0	; select bank0
  8380  119E  00DB               	movwf	getPercentValue@value
  8381                           
  8382                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8383  119F  3000               	movlw	0
  8384  11A0  00DC               	movwf	getPercentValue@i
  8385  11A1  3054               	movlw	84
  8386  11A2  00DD               	movwf	getPercentValue@i+1
  8387  11A3  3042               	movlw	66
  8388  11A4  00DE               	movwf	getPercentValue@i+2
  8389                           
  8390                           ;Dimmer_B1.c: 494: i/=100;
  8391  11A5  3000               	movlw	0
  8392  11A6  00AE               	movwf	___ftdiv@f2
  8393  11A7  30C8               	movlw	200
  8394  11A8  00AF               	movwf	___ftdiv@f2+1
  8395  11A9  3042               	movlw	66
  8396  11AA  00B0               	movwf	___ftdiv@f2+2
  8397  11AB  085C               	movf	getPercentValue@i,w
  8398  11AC  00B1               	movwf	___ftdiv@f1
  8399  11AD  085D               	movf	getPercentValue@i+1,w
  8400  11AE  00B2               	movwf	___ftdiv@f1+1
  8401  11AF  085E               	movf	getPercentValue@i+2,w
  8402  11B0  00B3               	movwf	___ftdiv@f1+2
  8403  11B1  318B  2398  3191   	fcall	___ftdiv
  8404  11B4  0020               	movlb	0	; select bank0
  8405  11B5  082E               	movf	?___ftdiv,w
  8406  11B6  00DC               	movwf	getPercentValue@i
  8407  11B7  082F               	movf	?___ftdiv+1,w
  8408  11B8  00DD               	movwf	getPercentValue@i+1
  8409  11B9  0830               	movf	?___ftdiv+2,w
  8410  11BA  00DE               	movwf	getPercentValue@i+2
  8411                           
  8412                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8413  11BB  085B               	movf	getPercentValue@value,w
  8414  11BC  00D9               	movwf	??_getPercentValue
  8415  11BD  01DA               	clrf	??_getPercentValue+1
  8416  11BE  09D9               	comf	??_getPercentValue,f
  8417  11BF  09DA               	comf	??_getPercentValue+1,f
  8418  11C0  0AD9               	incf	??_getPercentValue,f
  8419  11C1  1903               	skipnz
  8420  11C2  0ADA               	incf	??_getPercentValue+1,f
  8421  11C3  0859               	movf	??_getPercentValue,w
  8422  11C4  3E64               	addlw	100
  8423  11C5  00A8               	movwf	___awtoft@c
  8424  11C6  3000               	movlw	0
  8425  11C7  3D5A               	addwfc	??_getPercentValue+1,w
  8426  11C8  00A9               	movwf	___awtoft@c+1
  8427  11C9  319A  2210  3191   	fcall	___awtoft
  8428  11CC  0020               	movlb	0	; select bank0
  8429  11CD  0828               	movf	?___awtoft,w
  8430  11CE  00B1               	movwf	___ftmul@f2
  8431  11CF  0829               	movf	?___awtoft+1,w
  8432  11D0  00B2               	movwf	___ftmul@f2+1
  8433  11D1  082A               	movf	?___awtoft+2,w
  8434  11D2  00B3               	movwf	___ftmul@f2+2
  8435  11D3  085C               	movf	getPercentValue@i,w
  8436  11D4  00AE               	movwf	___ftmul@f1
  8437  11D5  085D               	movf	getPercentValue@i+1,w
  8438  11D6  00AF               	movwf	___ftmul@f1+1
  8439  11D7  085E               	movf	getPercentValue@i+2,w
  8440  11D8  00B0               	movwf	___ftmul@f1+2
  8441  11D9  318C  2441  3191   	fcall	___ftmul
  8442  11DC  0020               	movlb	0	; select bank0
  8443  11DD  082E               	movf	?___ftmul,w
  8444  11DE  00C1               	movwf	___ftadd@f2
  8445  11DF  082F               	movf	?___ftmul+1,w
  8446  11E0  00C2               	movwf	___ftadd@f2+1
  8447  11E1  0830               	movf	?___ftmul+2,w
  8448  11E2  00C3               	movwf	___ftadd@f2+2
  8449  11E3  3000               	movlw	0
  8450  11E4  00BE               	movwf	___ftadd@f1
  8451  11E5  3086               	movlw	134
  8452  11E6  00BF               	movwf	___ftadd@f1+1
  8453  11E7  3042               	movlw	66
  8454  11E8  00C0               	movwf	___ftadd@f1+2
  8455  11E9  318C  24F5  3191   	fcall	___ftadd
  8456  11EC  0020               	movlb	0	; select bank0
  8457  11ED  083E               	movf	?___ftadd,w
  8458  11EE  00CB               	movwf	___fttol@f1
  8459  11EF  083F               	movf	?___ftadd+1,w
  8460  11F0  00CC               	movwf	___fttol@f1+1
  8461  11F1  0840               	movf	?___ftadd+2,w
  8462  11F2  00CD               	movwf	___fttol@f1+2
  8463  11F3  3197  2779         	fcall	___fttol
  8464  11F5  0020               	movlb	0	; select bank0
  8465  11F6  084B               	movf	?___fttol,w
  8466  11F7  0008               	return
  8467  11F8                     __end_of_getPercentValue:	
  8468                           
  8469                           	psect	text35
  8470  0C41                     __ptext35:	
  8471 ;; *************** function ___ftmul *****************
  8472 ;; Defined at:
  8473 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8474 ;; Parameters:    Size  Location     Type
  8475 ;;  f1              3   14[BANK0 ] float 
  8476 ;;  f2              3   17[BANK0 ] float 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8479 ;;  sign            1   29[BANK0 ] unsigned char 
  8480 ;;  cntr            1   28[BANK0 ] unsigned char 
  8481 ;;  exp             1   24[BANK0 ] unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  3   14[BANK0 ] float 
  8484 ;; Registers used:
  8485 ;;		wreg, status,2, status,0, pclath, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : 0/0
  8488 ;;		On exit  : 0/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8491 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;Total ram usage:       16 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    5
  8498 ;; This function calls:
  8499 ;;		___ftpack
  8500 ;; This function is called by:
  8501 ;;		_getPercentValue
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           
  8506                           ;psect for function ___ftmul
  8507  0C41                     ___ftmul:	
  8508                           
  8509                           ;incstack = 0
  8510                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8511  0C41  0020               	movlb	0	; select bank0
  8512  0C42  082E               	movf	___ftmul@f1,w
  8513  0C43  00B4               	movwf	??___ftmul
  8514  0C44  082F               	movf	___ftmul@f1+1,w
  8515  0C45  00B5               	movwf	??___ftmul+1
  8516  0C46  0830               	movf	___ftmul@f1+2,w
  8517  0C47  00B6               	movwf	??___ftmul+2
  8518  0C48  1003               	clrc
  8519  0C49  0D35               	rlf	??___ftmul+1,w
  8520  0C4A  0D36               	rlf	??___ftmul+2,w
  8521  0C4B  00B7               	movwf	??___ftmul+3
  8522  0C4C  0837               	movf	??___ftmul+3,w
  8523  0C4D  00B8               	movwf	___ftmul@exp
  8524  0C4E  08B8               	movf	___ftmul@exp,f
  8525  0C4F  1D03               	skipz
  8526  0C50  2C58               	goto	l5792
  8527  0C51  3000               	movlw	0
  8528  0C52  00AE               	movwf	?___ftmul
  8529  0C53  3000               	movlw	0
  8530  0C54  00AF               	movwf	?___ftmul+1
  8531  0C55  3000               	movlw	0
  8532  0C56  00B0               	movwf	?___ftmul+2
  8533  0C57  0008               	return
  8534  0C58                     l5792:	
  8535  0C58  0831               	movf	___ftmul@f2,w
  8536  0C59  00B4               	movwf	??___ftmul
  8537  0C5A  0832               	movf	___ftmul@f2+1,w
  8538  0C5B  00B5               	movwf	??___ftmul+1
  8539  0C5C  0833               	movf	___ftmul@f2+2,w
  8540  0C5D  00B6               	movwf	??___ftmul+2
  8541  0C5E  1003               	clrc
  8542  0C5F  0D35               	rlf	??___ftmul+1,w
  8543  0C60  0D36               	rlf	??___ftmul+2,w
  8544  0C61  00B7               	movwf	??___ftmul+3
  8545  0C62  0837               	movf	??___ftmul+3,w
  8546  0C63  00BD               	movwf	___ftmul@sign
  8547  0C64  08BD               	movf	___ftmul@sign,f
  8548  0C65  1D03               	skipz
  8549  0C66  2C6E               	goto	l5798
  8550  0C67  3000               	movlw	0
  8551  0C68  00AE               	movwf	?___ftmul
  8552  0C69  3000               	movlw	0
  8553  0C6A  00AF               	movwf	?___ftmul+1
  8554  0C6B  3000               	movlw	0
  8555  0C6C  00B0               	movwf	?___ftmul+2
  8556  0C6D  0008               	return
  8557  0C6E                     l5798:	
  8558  0C6E  083D               	movf	___ftmul@sign,w
  8559  0C6F  3E7B               	addlw	123
  8560  0C70  00B4               	movwf	??___ftmul
  8561  0C71  0834               	movf	??___ftmul,w
  8562  0C72  07B8               	addwf	___ftmul@exp,f
  8563  0C73  082E               	movf	___ftmul@f1,w
  8564  0C74  00B4               	movwf	??___ftmul
  8565  0C75  082F               	movf	___ftmul@f1+1,w
  8566  0C76  00B5               	movwf	??___ftmul+1
  8567  0C77  0830               	movf	___ftmul@f1+2,w
  8568  0C78  00B6               	movwf	??___ftmul+2
  8569  0C79  3010               	movlw	16
  8570  0C7A                     u4205:	
  8571  0C7A  36B6               	lsrf	??___ftmul+2,f
  8572  0C7B  0CB5               	rrf	??___ftmul+1,f
  8573  0C7C  0CB4               	rrf	??___ftmul,f
  8574  0C7D  0B89               	decfsz	9,f
  8575  0C7E  2C7A               	goto	u4205
  8576  0C7F  0834               	movf	??___ftmul,w
  8577  0C80  00B7               	movwf	??___ftmul+3
  8578  0C81  0837               	movf	??___ftmul+3,w
  8579  0C82  00BD               	movwf	___ftmul@sign
  8580  0C83  0831               	movf	___ftmul@f2,w
  8581  0C84  00B4               	movwf	??___ftmul
  8582  0C85  0832               	movf	___ftmul@f2+1,w
  8583  0C86  00B5               	movwf	??___ftmul+1
  8584  0C87  0833               	movf	___ftmul@f2+2,w
  8585  0C88  00B6               	movwf	??___ftmul+2
  8586  0C89  3010               	movlw	16
  8587  0C8A                     u4215:	
  8588  0C8A  36B6               	lsrf	??___ftmul+2,f
  8589  0C8B  0CB5               	rrf	??___ftmul+1,f
  8590  0C8C  0CB4               	rrf	??___ftmul,f
  8591  0C8D  0B89               	decfsz	9,f
  8592  0C8E  2C8A               	goto	u4215
  8593  0C8F  0834               	movf	??___ftmul,w
  8594  0C90  00B7               	movwf	??___ftmul+3
  8595  0C91  0837               	movf	??___ftmul+3,w
  8596  0C92  06BD               	xorwf	___ftmul@sign,f
  8597  0C93  3080               	movlw	128
  8598  0C94  00B4               	movwf	??___ftmul
  8599  0C95  0834               	movf	??___ftmul,w
  8600  0C96  05BD               	andwf	___ftmul@sign,f
  8601  0C97  17AF               	bsf	___ftmul@f1+1,7
  8602  0C98  17B2               	bsf	___ftmul@f2+1,7
  8603  0C99  30FF               	movlw	255
  8604  0C9A  05B1               	andwf	___ftmul@f2,f
  8605  0C9B  30FF               	movlw	255
  8606  0C9C  05B2               	andwf	___ftmul@f2+1,f
  8607  0C9D  3000               	movlw	0
  8608  0C9E  05B3               	andwf	___ftmul@f2+2,f
  8609  0C9F  3000               	movlw	0
  8610  0CA0  00B9               	movwf	___ftmul@f3_as_product
  8611  0CA1  3000               	movlw	0
  8612  0CA2  00BA               	movwf	___ftmul@f3_as_product+1
  8613  0CA3  3000               	movlw	0
  8614  0CA4  00BB               	movwf	___ftmul@f3_as_product+2
  8615  0CA5  3007               	movlw	7
  8616  0CA6  00B4               	movwf	??___ftmul
  8617  0CA7  0834               	movf	??___ftmul,w
  8618  0CA8  00BC               	movwf	___ftmul@cntr
  8619  0CA9                     l5810:	
  8620  0CA9  1C2E               	btfss	___ftmul@f1,0
  8621  0CAA  2CB1               	goto	l5814
  8622  0CAB  0831               	movf	___ftmul@f2,w
  8623  0CAC  07B9               	addwf	___ftmul@f3_as_product,f
  8624  0CAD  0832               	movf	___ftmul@f2+1,w
  8625  0CAE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8626  0CAF  0833               	movf	___ftmul@f2+2,w
  8627  0CB0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8628  0CB1                     l5814:	
  8629  0CB1  3001               	movlw	1
  8630  0CB2                     u4235:	
  8631  0CB2  36B0               	lsrf	___ftmul@f1+2,f
  8632  0CB3  0CAF               	rrf	___ftmul@f1+1,f
  8633  0CB4  0CAE               	rrf	___ftmul@f1,f
  8634  0CB5  0B89               	decfsz	9,f
  8635  0CB6  2CB2               	goto	u4235
  8636  0CB7  3001               	movlw	1
  8637  0CB8                     u4245:	
  8638  0CB8  35B1               	lslf	___ftmul@f2,f
  8639  0CB9  0DB2               	rlf	___ftmul@f2+1,f
  8640  0CBA  0DB3               	rlf	___ftmul@f2+2,f
  8641  0CBB  0B89               	decfsz	9,f
  8642  0CBC  2CB8               	goto	u4245
  8643  0CBD  3001               	movlw	1
  8644  0CBE  02BC               	subwf	___ftmul@cntr,f
  8645  0CBF  1D03               	btfss	3,2
  8646  0CC0  2CA9               	goto	l5810
  8647  0CC1  3009               	movlw	9
  8648  0CC2  00B4               	movwf	??___ftmul
  8649  0CC3  0834               	movf	??___ftmul,w
  8650  0CC4  00BC               	movwf	___ftmul@cntr
  8651  0CC5                     l5822:	
  8652  0CC5  1C2E               	btfss	___ftmul@f1,0
  8653  0CC6  2CCD               	goto	l5826
  8654  0CC7  0831               	movf	___ftmul@f2,w
  8655  0CC8  07B9               	addwf	___ftmul@f3_as_product,f
  8656  0CC9  0832               	movf	___ftmul@f2+1,w
  8657  0CCA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8658  0CCB  0833               	movf	___ftmul@f2+2,w
  8659  0CCC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8660  0CCD                     l5826:	
  8661  0CCD  3001               	movlw	1
  8662  0CCE                     u4275:	
  8663  0CCE  36B0               	lsrf	___ftmul@f1+2,f
  8664  0CCF  0CAF               	rrf	___ftmul@f1+1,f
  8665  0CD0  0CAE               	rrf	___ftmul@f1,f
  8666  0CD1  0B89               	decfsz	9,f
  8667  0CD2  2CCE               	goto	u4275
  8668  0CD3  3001               	movlw	1
  8669  0CD4                     u4285:	
  8670  0CD4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8671  0CD5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8672  0CD6  0CB9               	rrf	___ftmul@f3_as_product,f
  8673  0CD7  0B89               	decfsz	9,f
  8674  0CD8  2CD4               	goto	u4285
  8675  0CD9  3001               	movlw	1
  8676  0CDA  02BC               	subwf	___ftmul@cntr,f
  8677  0CDB  1D03               	btfss	3,2
  8678  0CDC  2CC5               	goto	l5822
  8679  0CDD  0839               	movf	___ftmul@f3_as_product,w
  8680  0CDE  00A0               	movwf	___ftpack@arg
  8681  0CDF  083A               	movf	___ftmul@f3_as_product+1,w
  8682  0CE0  00A1               	movwf	___ftpack@arg+1
  8683  0CE1  083B               	movf	___ftmul@f3_as_product+2,w
  8684  0CE2  00A2               	movwf	___ftpack@arg+2
  8685  0CE3  0838               	movf	___ftmul@exp,w
  8686  0CE4  00B4               	movwf	??___ftmul
  8687  0CE5  0834               	movf	??___ftmul,w
  8688  0CE6  00A3               	movwf	___ftpack@exp
  8689  0CE7  083D               	movf	___ftmul@sign,w
  8690  0CE8  00B5               	movwf	??___ftmul+1
  8691  0CE9  0835               	movf	??___ftmul+1,w
  8692  0CEA  00A4               	movwf	___ftpack@sign
  8693  0CEB  3192  22B2         	fcall	___ftpack
  8694  0CED  0020               	movlb	0	; select bank0
  8695  0CEE  0820               	movf	?___ftpack,w
  8696  0CEF  00AE               	movwf	?___ftmul
  8697  0CF0  0821               	movf	?___ftpack+1,w
  8698  0CF1  00AF               	movwf	?___ftmul+1
  8699  0CF2  0822               	movf	?___ftpack+2,w
  8700  0CF3  00B0               	movwf	?___ftmul+2
  8701  0CF4  0008               	return
  8702  0CF5                     __end_of___ftmul:	
  8703                           
  8704                           	psect	text36
  8705  0CF5                     __ptext36:	
  8706 ;; *************** function ___ftadd *****************
  8707 ;; Defined at:
  8708 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  f1              3   30[BANK0 ] float 
  8711 ;;  f2              3   33[BANK0 ] float 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  exp1            1   42[BANK0 ] unsigned char 
  8714 ;;  exp2            1   41[BANK0 ] unsigned char 
  8715 ;;  sign            1   40[BANK0 ] unsigned char 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  3   30[BANK0 ] float 
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0, pclath, cstack
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8725 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;Total ram usage:       13 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    5
  8732 ;; This function calls:
  8733 ;;		___ftpack
  8734 ;; This function is called by:
  8735 ;;		_getPercentValue
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function ___ftadd
  8741  0CF5                     ___ftadd:	
  8742                           
  8743                           ;incstack = 0
  8744                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8745  0CF5  0020               	movlb	0	; select bank0
  8746  0CF6  083E               	movf	___ftadd@f1,w
  8747  0CF7  00C4               	movwf	??___ftadd
  8748  0CF8  083F               	movf	___ftadd@f1+1,w
  8749  0CF9  00C5               	movwf	??___ftadd+1
  8750  0CFA  0840               	movf	___ftadd@f1+2,w
  8751  0CFB  00C6               	movwf	??___ftadd+2
  8752  0CFC  1003               	clrc
  8753  0CFD  0D45               	rlf	??___ftadd+1,w
  8754  0CFE  0D46               	rlf	??___ftadd+2,w
  8755  0CFF  00C7               	movwf	??___ftadd+3
  8756  0D00  0847               	movf	??___ftadd+3,w
  8757  0D01  00CA               	movwf	___ftadd@exp1
  8758  0D02  0841               	movf	___ftadd@f2,w
  8759  0D03  00C4               	movwf	??___ftadd
  8760  0D04  0842               	movf	___ftadd@f2+1,w
  8761  0D05  00C5               	movwf	??___ftadd+1
  8762  0D06  0843               	movf	___ftadd@f2+2,w
  8763  0D07  00C6               	movwf	??___ftadd+2
  8764  0D08  1003               	clrc
  8765  0D09  0D45               	rlf	??___ftadd+1,w
  8766  0D0A  0D46               	rlf	??___ftadd+2,w
  8767  0D0B  00C7               	movwf	??___ftadd+3
  8768  0D0C  0847               	movf	??___ftadd+3,w
  8769  0D0D  00C9               	movwf	___ftadd@exp2
  8770  0D0E  084A               	movf	___ftadd@exp1,w
  8771  0D0F  1903               	btfsc	3,2
  8772  0D10  2D1D               	goto	l5680
  8773  0D11  0849               	movf	___ftadd@exp2,w
  8774  0D12  024A               	subwf	___ftadd@exp1,w
  8775  0D13  1803               	skipnc
  8776  0D14  2D24               	goto	l5684
  8777  0D15  034A               	decf	___ftadd@exp1,w
  8778  0D16  3AFF               	xorlw	255
  8779  0D17  0749               	addwf	___ftadd@exp2,w
  8780  0D18  00C4               	movwf	??___ftadd
  8781  0D19  3019               	movlw	25
  8782  0D1A  0244               	subwf	??___ftadd,w
  8783  0D1B  1C03               	skipc
  8784  0D1C  2D24               	goto	l5684
  8785  0D1D                     l5680:	
  8786  0D1D  0841               	movf	___ftadd@f2,w
  8787  0D1E  00BE               	movwf	?___ftadd
  8788  0D1F  0842               	movf	___ftadd@f2+1,w
  8789  0D20  00BF               	movwf	?___ftadd+1
  8790  0D21  0843               	movf	___ftadd@f2+2,w
  8791  0D22  00C0               	movwf	?___ftadd+2
  8792  0D23  0008               	return
  8793  0D24                     l5684:	
  8794  0D24  0849               	movf	___ftadd@exp2,w
  8795  0D25  1903               	btfsc	3,2
  8796  0D26  0008               	return
  8797  0D27  084A               	movf	___ftadd@exp1,w
  8798  0D28  0249               	subwf	___ftadd@exp2,w
  8799  0D29  1803               	skipnc
  8800  0D2A  2D33               	goto	l5690
  8801  0D2B  0349               	decf	___ftadd@exp2,w
  8802  0D2C  3AFF               	xorlw	255
  8803  0D2D  074A               	addwf	___ftadd@exp1,w
  8804  0D2E  00C4               	movwf	??___ftadd
  8805  0D2F  3019               	movlw	25
  8806  0D30  0244               	subwf	??___ftadd,w
  8807  0D31  1803               	btfsc	3,0
  8808  0D32  0008               	return
  8809  0D33                     l5690:	
  8810  0D33  3006               	movlw	6
  8811  0D34  00C4               	movwf	??___ftadd
  8812  0D35  0844               	movf	??___ftadd,w
  8813  0D36  00C8               	movwf	___ftadd@sign
  8814  0D37  1BC0               	btfsc	___ftadd@f1+2,7
  8815  0D38  17C8               	bsf	___ftadd@sign,7
  8816  0D39  1BC3               	btfsc	___ftadd@f2+2,7
  8817  0D3A  1748               	bsf	___ftadd@sign,6
  8818  0D3B  17BF               	bsf	___ftadd@f1+1,7
  8819  0D3C  30FF               	movlw	255
  8820  0D3D  05BE               	andwf	___ftadd@f1,f
  8821  0D3E  30FF               	movlw	255
  8822  0D3F  05BF               	andwf	___ftadd@f1+1,f
  8823  0D40  3000               	movlw	0
  8824  0D41  05C0               	andwf	___ftadd@f1+2,f
  8825  0D42  17C2               	bsf	___ftadd@f2+1,7
  8826  0D43  30FF               	movlw	255
  8827  0D44  05C1               	andwf	___ftadd@f2,f
  8828  0D45  30FF               	movlw	255
  8829  0D46  05C2               	andwf	___ftadd@f2+1,f
  8830  0D47  3000               	movlw	0
  8831  0D48  05C3               	andwf	___ftadd@f2+2,f
  8832  0D49  0849               	movf	___ftadd@exp2,w
  8833  0D4A  024A               	subwf	___ftadd@exp1,w
  8834  0D4B  1803               	skipnc
  8835  0D4C  2D6F               	goto	l5712
  8836  0D4D                     l5702:	
  8837  0D4D  3001               	movlw	1
  8838  0D4E                     u3965:	
  8839  0D4E  35C1               	lslf	___ftadd@f2,f
  8840  0D4F  0DC2               	rlf	___ftadd@f2+1,f
  8841  0D50  0DC3               	rlf	___ftadd@f2+2,f
  8842  0D51  0B89               	decfsz	9,f
  8843  0D52  2D4E               	goto	u3965
  8844  0D53  3001               	movlw	1
  8845  0D54  02C9               	subwf	___ftadd@exp2,f
  8846  0D55  0849               	movf	___ftadd@exp2,w
  8847  0D56  064A               	xorwf	___ftadd@exp1,w
  8848  0D57  1903               	skipnz
  8849  0D58  2D6A               	goto	l5710
  8850  0D59  3001               	movlw	1
  8851  0D5A  02C8               	subwf	___ftadd@sign,f
  8852  0D5B  0848               	movf	___ftadd@sign,w
  8853  0D5C  3907               	andlw	7
  8854  0D5D  1903               	btfsc	3,2
  8855  0D5E  2D6A               	goto	l5710
  8856  0D5F  2D4D               	goto	l5702
  8857  0D60                     l5708:	
  8858  0D60  3001               	movlw	1
  8859  0D61                     u3995:	
  8860  0D61  36C0               	lsrf	___ftadd@f1+2,f
  8861  0D62  0CBF               	rrf	___ftadd@f1+1,f
  8862  0D63  0CBE               	rrf	___ftadd@f1,f
  8863  0D64  0B89               	decfsz	9,f
  8864  0D65  2D61               	goto	u3995
  8865  0D66  3001               	movlw	1
  8866  0D67  00C4               	movwf	??___ftadd
  8867  0D68  0844               	movf	??___ftadd,w
  8868  0D69  07CA               	addwf	___ftadd@exp1,f
  8869  0D6A                     l5710:	
  8870  0D6A  084A               	movf	___ftadd@exp1,w
  8871  0D6B  0649               	xorwf	___ftadd@exp2,w
  8872  0D6C  1903               	btfsc	3,2
  8873  0D6D  2D94               	goto	l3081
  8874  0D6E  2D60               	goto	l5708
  8875  0D6F                     l5712:	
  8876  0D6F  084A               	movf	___ftadd@exp1,w
  8877  0D70  0249               	subwf	___ftadd@exp2,w
  8878  0D71  1803               	skipnc
  8879  0D72  2D94               	goto	l3081
  8880  0D73                     l5714:	
  8881  0D73  3001               	movlw	1
  8882  0D74                     u4025:	
  8883  0D74  35BE               	lslf	___ftadd@f1,f
  8884  0D75  0DBF               	rlf	___ftadd@f1+1,f
  8885  0D76  0DC0               	rlf	___ftadd@f1+2,f
  8886  0D77  0B89               	decfsz	9,f
  8887  0D78  2D74               	goto	u4025
  8888  0D79  3001               	movlw	1
  8889  0D7A  02CA               	subwf	___ftadd@exp1,f
  8890  0D7B  0849               	movf	___ftadd@exp2,w
  8891  0D7C  064A               	xorwf	___ftadd@exp1,w
  8892  0D7D  1903               	skipnz
  8893  0D7E  2D90               	goto	l5722
  8894  0D7F  3001               	movlw	1
  8895  0D80  02C8               	subwf	___ftadd@sign,f
  8896  0D81  0848               	movf	___ftadd@sign,w
  8897  0D82  3907               	andlw	7
  8898  0D83  1903               	btfsc	3,2
  8899  0D84  2D90               	goto	l5722
  8900  0D85  2D73               	goto	l5714
  8901  0D86                     l5720:	
  8902  0D86  3001               	movlw	1
  8903  0D87                     u4055:	
  8904  0D87  36C3               	lsrf	___ftadd@f2+2,f
  8905  0D88  0CC2               	rrf	___ftadd@f2+1,f
  8906  0D89  0CC1               	rrf	___ftadd@f2,f
  8907  0D8A  0B89               	decfsz	9,f
  8908  0D8B  2D87               	goto	u4055
  8909  0D8C  3001               	movlw	1
  8910  0D8D  00C4               	movwf	??___ftadd
  8911  0D8E  0844               	movf	??___ftadd,w
  8912  0D8F  07C9               	addwf	___ftadd@exp2,f
  8913  0D90                     l5722:	
  8914  0D90  084A               	movf	___ftadd@exp1,w
  8915  0D91  0649               	xorwf	___ftadd@exp2,w
  8916  0D92  1D03               	skipz
  8917  0D93  2D86               	goto	l5720
  8918  0D94                     l3081:	
  8919  0D94  1FC8               	btfss	___ftadd@sign,7
  8920  0D95  2DA6               	goto	l5726
  8921  0D96  30FF               	movlw	255
  8922  0D97  06BE               	xorwf	___ftadd@f1,f
  8923  0D98  30FF               	movlw	255
  8924  0D99  06BF               	xorwf	___ftadd@f1+1,f
  8925  0D9A  30FF               	movlw	255
  8926  0D9B  06C0               	xorwf	___ftadd@f1+2,f
  8927  0D9C  3001               	movlw	1
  8928  0D9D  07BE               	addwf	___ftadd@f1,f
  8929  0D9E  3000               	movlw	0
  8930  0D9F  1803               	skipnc
  8931  0DA0  3001               	movlw	1
  8932  0DA1  07BF               	addwf	___ftadd@f1+1,f
  8933  0DA2  3000               	movlw	0
  8934  0DA3  1803               	skipnc
  8935  0DA4  3001               	movlw	1
  8936  0DA5  07C0               	addwf	___ftadd@f1+2,f
  8937  0DA6                     l5726:	
  8938  0DA6  1F48               	btfss	___ftadd@sign,6
  8939  0DA7  2DB8               	goto	l5730
  8940  0DA8  30FF               	movlw	255
  8941  0DA9  06C1               	xorwf	___ftadd@f2,f
  8942  0DAA  30FF               	movlw	255
  8943  0DAB  06C2               	xorwf	___ftadd@f2+1,f
  8944  0DAC  30FF               	movlw	255
  8945  0DAD  06C3               	xorwf	___ftadd@f2+2,f
  8946  0DAE  3001               	movlw	1
  8947  0DAF  07C1               	addwf	___ftadd@f2,f
  8948  0DB0  3000               	movlw	0
  8949  0DB1  1803               	skipnc
  8950  0DB2  3001               	movlw	1
  8951  0DB3  07C2               	addwf	___ftadd@f2+1,f
  8952  0DB4  3000               	movlw	0
  8953  0DB5  1803               	skipnc
  8954  0DB6  3001               	movlw	1
  8955  0DB7  07C3               	addwf	___ftadd@f2+2,f
  8956  0DB8                     l5730:	
  8957  0DB8  01C8               	clrf	___ftadd@sign
  8958  0DB9  083E               	movf	___ftadd@f1,w
  8959  0DBA  07C1               	addwf	___ftadd@f2,f
  8960  0DBB  083F               	movf	___ftadd@f1+1,w
  8961  0DBC  3DC2               	addwfc	___ftadd@f2+1,f
  8962  0DBD  0840               	movf	___ftadd@f1+2,w
  8963  0DBE  3DC3               	addwfc	___ftadd@f2+2,f
  8964  0DBF  1FC3               	btfss	___ftadd@f2+2,7
  8965  0DC0  2DD3               	goto	l5740
  8966  0DC1  30FF               	movlw	255
  8967  0DC2  06C1               	xorwf	___ftadd@f2,f
  8968  0DC3  30FF               	movlw	255
  8969  0DC4  06C2               	xorwf	___ftadd@f2+1,f
  8970  0DC5  30FF               	movlw	255
  8971  0DC6  06C3               	xorwf	___ftadd@f2+2,f
  8972  0DC7  3001               	movlw	1
  8973  0DC8  07C1               	addwf	___ftadd@f2,f
  8974  0DC9  3000               	movlw	0
  8975  0DCA  1803               	skipnc
  8976  0DCB  3001               	movlw	1
  8977  0DCC  07C2               	addwf	___ftadd@f2+1,f
  8978  0DCD  3000               	movlw	0
  8979  0DCE  1803               	skipnc
  8980  0DCF  3001               	movlw	1
  8981  0DD0  07C3               	addwf	___ftadd@f2+2,f
  8982  0DD1  01C8               	clrf	___ftadd@sign
  8983  0DD2  0AC8               	incf	___ftadd@sign,f
  8984  0DD3                     l5740:	
  8985  0DD3  0841               	movf	___ftadd@f2,w
  8986  0DD4  00A0               	movwf	___ftpack@arg
  8987  0DD5  0842               	movf	___ftadd@f2+1,w
  8988  0DD6  00A1               	movwf	___ftpack@arg+1
  8989  0DD7  0843               	movf	___ftadd@f2+2,w
  8990  0DD8  00A2               	movwf	___ftpack@arg+2
  8991  0DD9  084A               	movf	___ftadd@exp1,w
  8992  0DDA  00C4               	movwf	??___ftadd
  8993  0DDB  0844               	movf	??___ftadd,w
  8994  0DDC  00A3               	movwf	___ftpack@exp
  8995  0DDD  0848               	movf	___ftadd@sign,w
  8996  0DDE  00C5               	movwf	??___ftadd+1
  8997  0DDF  0845               	movf	??___ftadd+1,w
  8998  0DE0  00A4               	movwf	___ftpack@sign
  8999  0DE1  3192  22B2         	fcall	___ftpack
  9000  0DE3  0020               	movlb	0	; select bank0
  9001  0DE4  0820               	movf	?___ftpack,w
  9002  0DE5  00BE               	movwf	?___ftadd
  9003  0DE6  0821               	movf	?___ftpack+1,w
  9004  0DE7  00BF               	movwf	?___ftadd+1
  9005  0DE8  0822               	movf	?___ftpack+2,w
  9006  0DE9  00C0               	movwf	?___ftadd+2
  9007  0DEA  0008               	return
  9008  0DEB                     __end_of___ftadd:	
  9009                           
  9010                           	psect	text37
  9011  1AE3                     __ptext37:	
  9012 ;; *************** function _RF_RxDisable *****************
  9013 ;; Defined at:
  9014 ;;		line 186 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  rf              1    wreg     unsigned char 
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  rf              1    4[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    6
  9035 ;; This function calls:
  9036 ;;		_CC2500_WriteCommand
  9037 ;;		_RfPointSelect
  9038 ;;		_setINT_GO
  9039 ;; This function is called by:
  9040 ;;		_setRF_Main
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           
  9045                           ;psect for function _RF_RxDisable
  9046  1AE3                     _RF_RxDisable:	
  9047                           
  9048                           ;incstack = 0
  9049                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9050                           ;RF_RxDisable@rf stored from wreg
  9051  1AE3  0020               	movlb	0	; select bank0
  9052  1AE4  00A4               	movwf	RF_RxDisable@rf
  9053                           
  9054                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
  9055  1AE5  0824               	movf	RF_RxDisable@rf,w
  9056  1AE6  31A6  2694  319A   	fcall	_RfPointSelect
  9057                           
  9058                           ;RF_Control_B1.c: 189: if (RF->RxStatus) {
  9059  1AE9  0021               	movlb	1	; select bank1
  9060  1AEA  083E               	movf	_RF^(0+128),w
  9061  1AEB  0086               	movwf	6
  9062  1AEC  0187               	clrf	7
  9063  1AED  1D81               	btfss	1,3
  9064  1AEE  0008               	return
  9065                           
  9066                           ;RF_Control_B1.c: 190: RF->RxStatus = 0;
  9067  1AEF  083E               	movf	_RF^(0+128),w
  9068  1AF0  0086               	movwf	6
  9069  1AF1  0187               	clrf	7
  9070  1AF2  1181               	bcf	1,3
  9071                           
  9072                           ;RF_Control_B1.c: 191: RF->ReceiveGO = 0;
  9073  1AF3  083E               	movf	_RF^(0+128),w
  9074  1AF4  0086               	movwf	6
  9075  1AF5  0187               	clrf	7
  9076  1AF6  1081               	bcf	1,1
  9077                           
  9078                           ;RF_Control_B1.c: 192: RF->DebounceTime = 0;
  9079  1AF7  0A3E               	incf	_RF^(0+128),w
  9080  1AF8  0086               	movwf	6
  9081  1AF9  0187               	clrf	7
  9082  1AFA  0181               	clrf	1
  9083                           
  9084                           ;RF_Control_B1.c: 193: RF->Debounce = 0;
  9085  1AFB  083E               	movf	_RF^(0+128),w
  9086  1AFC  0086               	movwf	6
  9087  1AFD  0187               	clrf	7
  9088  1AFE  1281               	bcf	1,5
  9089                           
  9090                           ;RF_Control_B1.c: 194: CC2500_WriteCommand(0x36);
  9091  1AFF  3036               	movlw	54
  9092  1B00  31A7  275E  319A   	fcall	_CC2500_WriteCommand
  9093                           
  9094                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x3A);
  9095  1B03  303A               	movlw	58
  9096  1B04  31A7  275E  319A   	fcall	_CC2500_WriteCommand
  9097                           
  9098                           ;RF_Control_B1.c: 196: setINT_GO(0);
  9099  1B07  3000               	movlw	0
  9100  1B08  31A5  25EE         	fcall	_setINT_GO
  9101  1B0A  0008               	return
  9102  1B0B                     __end_of_RF_RxDisable:	
  9103                           
  9104                           	psect	text38
  9105  1E0B                     __ptext38:	
  9106 ;; *************** function _CC2500_TxData *****************
  9107 ;; Defined at:
  9108 ;;		line 32 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;		None               void
  9115 ;; Registers used:
  9116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;Total ram usage:        2 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    6
  9129 ;; This function calls:
  9130 ;;		_CC2500_WriteByte
  9131 ;;		_CC2500_WriteCommand
  9132 ;; This function is called by:
  9133 ;;		_setRF_Main
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function _CC2500_TxData
  9139  1E0B                     _CC2500_TxData:	
  9140                           
  9141                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9142                           ;CC2500_B1.c: 35: RC4 = 0;
  9143                           
  9144                           ;incstack = 0
  9145                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9146  1E0B  0020               	movlb	0	; select bank0
  9147  1E0C  120E               	bcf	14,4	;volatile
  9148                           
  9149                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9150  1E0D  307F               	movlw	127
  9151  1E0E  00A4               	movwf	??_CC2500_TxData
  9152  1E0F  0824               	movf	??_CC2500_TxData,w
  9153  1E10  0021               	movlb	1	; select bank1
  9154  1E11  00C2               	movwf	_SPI0Buffer^(0+128)
  9155  1E12                     l271:	
  9156                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9157                           
  9158  1E12  0020               	movlb	0	; select bank0
  9159  1E13  190E               	btfsc	14,2	;volatile
  9160  1E14  2E12               	goto	l271
  9161                           
  9162                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9163  1E15  3198  20DE  319E   	fcall	_CC2500_WriteByte
  9164                           
  9165                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9166  1E18  0021               	movlb	1	; select bank1
  9167  1E19  0843               	movf	_Tx_Length^(0+128),w
  9168  1E1A  0020               	movlb	0	; select bank0
  9169  1E1B  00A4               	movwf	??_CC2500_TxData
  9170  1E1C  0824               	movf	??_CC2500_TxData,w
  9171  1E1D  0021               	movlb	1	; select bank1
  9172  1E1E  00C2               	movwf	_SPI0Buffer^(0+128)
  9173                           
  9174                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9175  1E1F  3198  20DE  319E   	fcall	_CC2500_WriteByte
  9176                           
  9177                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9178  1E22  0020               	movlb	0	; select bank0
  9179  1E23  01A5               	clrf	CC2500_TxData@loop_e
  9180  1E24                     l6450:	
  9181  1E24  0021               	movlb	1	; select bank1
  9182  1E25  0843               	movf	_Tx_Length^(0+128),w
  9183  1E26  0020               	movlb	0	; select bank0
  9184  1E27  0225               	subwf	CC2500_TxData@loop_e,w
  9185  1E28  1803               	btfsc	3,0
  9186  1E29  2E3C               	goto	l276
  9187                           
  9188                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9189  1E2A  0825               	movf	CC2500_TxData@loop_e,w
  9190  1E2B  3EA0               	addlw	_RF_Data& (0+255)
  9191  1E2C  0086               	movwf	6
  9192  1E2D  0187               	clrf	7
  9193  1E2E  0801               	movf	1,w
  9194  1E2F  00A4               	movwf	??_CC2500_TxData
  9195  1E30  0824               	movf	??_CC2500_TxData,w
  9196  1E31  0021               	movlb	1	; select bank1
  9197  1E32  00C2               	movwf	_SPI0Buffer^(0+128)
  9198                           
  9199                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9200  1E33  3198  20DE  319E   	fcall	_CC2500_WriteByte
  9201  1E36  3001               	movlw	1
  9202  1E37  0020               	movlb	0	; select bank0
  9203  1E38  00A4               	movwf	??_CC2500_TxData
  9204  1E39  0824               	movf	??_CC2500_TxData,w
  9205  1E3A  07A5               	addwf	CC2500_TxData@loop_e,f
  9206  1E3B  2E24               	goto	l6450
  9207  1E3C                     l276:	
  9208                           
  9209                           ;CC2500_B1.c: 44: }
  9210                           ;CC2500_B1.c: 45: RC4 = 1;
  9211  1E3C  160E               	bsf	14,4	;volatile
  9212                           
  9213                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9214  1E3D  3035               	movlw	53
  9215  1E3E  31A7  275E  319E   	fcall	_CC2500_WriteCommand
  9216  1E41                     l277:	
  9217                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9218                           
  9219  1E41  0020               	movlb	0	; select bank0
  9220  1E42  1C0D               	btfss	13,0	;volatile
  9221  1E43  2E41               	goto	l277
  9222  1E44                     l280:	
  9223                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9224                           
  9225  1E44  180D               	btfsc	13,0	;volatile
  9226  1E45  2E44               	goto	l280
  9227                           
  9228                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9229  1E46  3036               	movlw	54
  9230  1E47  31A7  275E  319E   	fcall	_CC2500_WriteCommand
  9231                           
  9232                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9233  1E4A  303B               	movlw	59
  9234  1E4B  31A7  275E         	fcall	_CC2500_WriteCommand
  9235                           
  9236                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9237  1E4D  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9238  1E4E  0008               	return
  9239  1E4F                     __end_of_CC2500_TxData:	
  9240                           
  9241                           	psect	text39
  9242  1313                     __ptext39:	
  9243 ;; *************** function _CC2500_RxData *****************
  9244 ;; Defined at:
  9245 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;		None               void
  9252 ;; Registers used:
  9253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;Total ram usage:        2 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    6
  9266 ;; This function calls:
  9267 ;;		_CC2500_ReadByte
  9268 ;;		_CC2500_ReadStatus
  9269 ;;		_CC2500_WriteByte
  9270 ;;		_CC2500_WriteCommand
  9271 ;;		_setRF_RxStatus
  9272 ;; This function is called by:
  9273 ;;		_setRF_Main
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           
  9278                           ;psect for function _CC2500_RxData
  9279  1313                     _CC2500_RxData:	
  9280                           
  9281                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9282                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9283                           
  9284                           ;incstack = 0
  9285                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9286  1313  0020               	movlb	0	; select bank0
  9287  1314  180D               	btfsc	13,0	;volatile
  9288  1315                     l287:	
  9289                           ;CC2500_B1.c: 63: {
  9290                           ;CC2500_B1.c: 64: while (RB0 == 1);
  9291                           
  9292  1315  180D               	btfsc	13,0	;volatile
  9293  1316  2B15               	goto	l287
  9294                           
  9295                           ;CC2500_B1.c: 65: }
  9296                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9297  1317  303B               	movlw	59
  9298  1318  3199  215F  3193   	fcall	_CC2500_ReadStatus
  9299                           
  9300                           ;CC2500_B1.c: 67: if (s_data != 0)
  9301  131B  0021               	movlb	1	; select bank1
  9302  131C  0846               	movf	_s_data^(0+128),w
  9303  131D  1903               	btfsc	3,2
  9304  131E  2B69               	goto	l8370
  9305                           
  9306                           ;CC2500_B1.c: 69: {
  9307                           ;CC2500_B1.c: 70: RC4 = 0;
  9308  131F  0020               	movlb	0	; select bank0
  9309  1320  120E               	bcf	14,4	;volatile
  9310                           
  9311                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  9312  1321  30FF               	movlw	255
  9313  1322  00A4               	movwf	??_CC2500_RxData
  9314  1323  0824               	movf	??_CC2500_RxData,w
  9315  1324  0021               	movlb	1	; select bank1
  9316  1325  00C2               	movwf	_SPI0Buffer^(0+128)
  9317  1326                     l291:	
  9318                           ;CC2500_B1.c: 72: while (RC2 == 1);
  9319                           
  9320  1326  0020               	movlb	0	; select bank0
  9321  1327  190E               	btfsc	14,2	;volatile
  9322  1328  2B26               	goto	l291
  9323                           
  9324                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9325  1329  3198  20DE  3193   	fcall	_CC2500_WriteByte
  9326                           
  9327                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9328  132C  3199  2196  3193   	fcall	_CC2500_ReadByte
  9329                           
  9330                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  9331  132F  0021               	movlb	1	; select bank1
  9332  1330  0842               	movf	_SPI0Buffer^(0+128),w
  9333  1331  0020               	movlb	0	; select bank0
  9334  1332  00A4               	movwf	??_CC2500_RxData
  9335  1333  0824               	movf	??_CC2500_RxData,w
  9336  1334  0021               	movlb	1	; select bank1
  9337  1335  00C1               	movwf	_Rx_Length^(0+128)
  9338                           
  9339                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9340  1336  0020               	movlb	0	; select bank0
  9341  1337  01A5               	clrf	CC2500_RxData@loop_f
  9342  1338                     l8356:	
  9343  1338  0021               	movlb	1	; select bank1
  9344  1339  0841               	movf	_Rx_Length^(0+128),w
  9345  133A  0020               	movlb	0	; select bank0
  9346  133B  0225               	subwf	CC2500_RxData@loop_f,w
  9347  133C  1803               	btfsc	3,0
  9348  133D  2B50               	goto	l8358
  9349                           
  9350                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  9351  133E  3199  2196  3193   	fcall	_CC2500_ReadByte
  9352                           
  9353                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  9354  1341  0021               	movlb	1	; select bank1
  9355  1342  0842               	movf	_SPI0Buffer^(0+128),w
  9356  1343  0020               	movlb	0	; select bank0
  9357  1344  00A4               	movwf	??_CC2500_RxData
  9358  1345  0825               	movf	CC2500_RxData@loop_f,w
  9359  1346  3EA0               	addlw	_RF_Data& (0+255)
  9360  1347  0086               	movwf	6
  9361  1348  0187               	clrf	7
  9362  1349  0824               	movf	??_CC2500_RxData,w
  9363  134A  0081               	movwf	1
  9364  134B  3001               	movlw	1
  9365  134C  00A4               	movwf	??_CC2500_RxData
  9366  134D  0824               	movf	??_CC2500_RxData,w
  9367  134E  07A5               	addwf	CC2500_RxData@loop_f,f
  9368  134F  2B38               	goto	l8356
  9369  1350                     l8358:	
  9370                           
  9371                           ;CC2500_B1.c: 80: }
  9372                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  9373  1350  3199  2196  3193   	fcall	_CC2500_ReadByte
  9374                           
  9375                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  9376  1353  0021               	movlb	1	; select bank1
  9377  1354  0842               	movf	_SPI0Buffer^(0+128),w
  9378  1355  0020               	movlb	0	; select bank0
  9379  1356  00A4               	movwf	??_CC2500_RxData
  9380  1357  0824               	movf	??_CC2500_RxData,w
  9381  1358  0021               	movlb	1	; select bank1
  9382  1359  00C0               	movwf	_RSSI^(0+128)
  9383                           
  9384                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  9385  135A  3199  2196  3193   	fcall	_CC2500_ReadByte
  9386                           
  9387                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  9388  135D  0021               	movlb	1	; select bank1
  9389  135E  0842               	movf	_SPI0Buffer^(0+128),w
  9390  135F  0020               	movlb	0	; select bank0
  9391  1360  00A4               	movwf	??_CC2500_RxData
  9392  1361  0824               	movf	??_CC2500_RxData,w
  9393  1362  0021               	movlb	1	; select bank1
  9394  1363  00B8               	movwf	_CRC^(0+128)
  9395                           
  9396                           ;CC2500_B1.c: 85: RC4 = 1;
  9397  1364  0020               	movlb	0	; select bank0
  9398  1365  160E               	bsf	14,4	;volatile
  9399                           
  9400                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  9401  1366  0021               	movlb	1	; select bank1
  9402  1367  1BB8               	btfsc	_CRC^(0+128),7
  9403                           
  9404                           ;CC2500_B1.c: 87: Receive_OK = 1;
  9405  1368  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9406  1369                     l8370:	
  9407                           
  9408                           ;CC2500_B1.c: 88: }
  9409                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  9410  1369  3036               	movlw	54
  9411  136A  31A7  275E  3193   	fcall	_CC2500_WriteCommand
  9412                           
  9413                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  9414  136D  303A               	movlw	58
  9415  136E  31A7  275E  3193   	fcall	_CC2500_WriteCommand
  9416                           
  9417                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  9418  1371  0020               	movlb	0	; select bank0
  9419  1372  01A2               	clrf	setRF_RxStatus@command
  9420  1373  3001               	movlw	1
  9421  1374  31A7  2740         	fcall	_setRF_RxStatus
  9422  1376  0008               	return
  9423  1377                     __end_of_CC2500_RxData:	
  9424                           
  9425                           	psect	text40
  9426  2740                     __ptext40:	
  9427 ;; *************** function _setRF_RxStatus *****************
  9428 ;; Defined at:
  9429 ;;		line 42 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9430 ;; Parameters:    Size  Location     Type
  9431 ;;  rf              1    wreg     unsigned char 
  9432 ;;  command         1    2[BANK0 ] unsigned char 
  9433 ;; Auto vars:     Size  Location     Type
  9434 ;;  rf              1    3[BANK0 ] unsigned char 
  9435 ;; Return value:  Size  Location     Type
  9436 ;;		None               void
  9437 ;; Registers used:
  9438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9439 ;; Tracked objects:
  9440 ;;		On entry : 0/0
  9441 ;;		On exit  : 0/0
  9442 ;;		Unchanged: 0/0
  9443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9444 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;Total ram usage:        2 bytes
  9449 ;; Hardware stack levels used:    1
  9450 ;; Hardware stack levels required when called:    5
  9451 ;; This function calls:
  9452 ;;		_RfPointSelect
  9453 ;; This function is called by:
  9454 ;;		_CC2500_RxData
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           
  9459                           ;psect for function _setRF_RxStatus
  9460  2740                     _setRF_RxStatus:	
  9461                           
  9462                           ;incstack = 0
  9463                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9464                           ;setRF_RxStatus@rf stored from wreg
  9465  2740  0020               	movlb	0	; select bank0
  9466  2741  00A3               	movwf	setRF_RxStatus@rf
  9467                           
  9468                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  9469  2742  0823               	movf	setRF_RxStatus@rf,w
  9470  2743  31A6  2694         	fcall	_RfPointSelect
  9471                           
  9472                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  9473  2745  0021               	movlb	1	; select bank1
  9474  2746  083E               	movf	_RF^(0+128),w
  9475  2747  0086               	movwf	6
  9476  2748  0187               	clrf	7
  9477  2749  0020               	movlb	0	; select bank0
  9478  274A  0822               	movf	setRF_RxStatus@command,w
  9479  274B  1181               	bcf	1,3
  9480  274C  1D03               	skipz
  9481  274D  1581               	bsf	1,3
  9482  274E  0008               	return
  9483  274F                     __end_of_setRF_RxStatus:	
  9484                           
  9485                           	psect	text41
  9486  195F                     __ptext41:	
  9487 ;; *************** function _CC2500_ReadStatus *****************
  9488 ;; Defined at:
  9489 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  status_addr     1    wreg     unsigned char 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9494 ;; Return value:  Size  Location     Type
  9495 ;;		None               void
  9496 ;; Registers used:
  9497 ;;		wreg, status,2, status,0, pclath, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;Total ram usage:        2 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    5
  9510 ;; This function calls:
  9511 ;;		_CC2500_ReadByte
  9512 ;;		_CC2500_WriteByte
  9513 ;; This function is called by:
  9514 ;;		_CC2500_RxData
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _CC2500_ReadStatus
  9520  195F                     _CC2500_ReadStatus:	
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9524                           ;CC2500_ReadStatus@status_addr stored from wreg
  9525  195F  0020               	movlb	0	; select bank0
  9526  1960  00A3               	movwf	CC2500_ReadStatus@status_addr
  9527                           
  9528                           ;CC2500_B1.c: 264: RC4 = 0;
  9529  1961  120E               	bcf	14,4	;volatile
  9530                           
  9531                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  9532  1962  0823               	movf	CC2500_ReadStatus@status_addr,w
  9533  1963  3EC0               	addlw	192
  9534  1964  00A2               	movwf	??_CC2500_ReadStatus
  9535  1965  0822               	movf	??_CC2500_ReadStatus,w
  9536  1966  0021               	movlb	1	; select bank1
  9537  1967  00C2               	movwf	_SPI0Buffer^(0+128)
  9538  1968                     l367:	
  9539                           ;CC2500_B1.c: 267: while (RC2 == 1);
  9540                           
  9541  1968  0020               	movlb	0	; select bank0
  9542  1969  190E               	btfsc	14,2	;volatile
  9543  196A  2968               	goto	l367
  9544                           
  9545                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  9546  196B  3198  20DE  3199   	fcall	_CC2500_WriteByte
  9547                           
  9548                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  9549  196E  3199  2196         	fcall	_CC2500_ReadByte
  9550                           
  9551                           ;CC2500_B1.c: 271: RC4 = 1;
  9552  1970  0020               	movlb	0	; select bank0
  9553  1971  160E               	bsf	14,4	;volatile
  9554                           
  9555                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  9556  1972  0021               	movlb	1	; select bank1
  9557  1973  0842               	movf	_SPI0Buffer^(0+128),w
  9558  1974  0020               	movlb	0	; select bank0
  9559  1975  00A2               	movwf	??_CC2500_ReadStatus
  9560  1976  0822               	movf	??_CC2500_ReadStatus,w
  9561  1977  0021               	movlb	1	; select bank1
  9562  1978  00C6               	movwf	_s_data^(0+128)
  9563  1979  0008               	return
  9564  197A                     __end_of_CC2500_ReadStatus:	
  9565                           
  9566                           	psect	text42
  9567  1996                     __ptext42:	
  9568 ;; *************** function _CC2500_ReadByte *****************
  9569 ;; Defined at:
  9570 ;;		line 207 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;		None
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;		None               void
  9577 ;; Registers used:
  9578 ;;		wreg, status,2, status,0
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;Total ram usage:        2 bytes
  9589 ;; Hardware stack levels used:    1
  9590 ;; Hardware stack levels required when called:    4
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_CC2500_RxData
  9595 ;;		_CC2500_ReadStatus
  9596 ;;		_CC2500_ReadREG
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _CC2500_ReadByte
  9602  1996                     _CC2500_ReadByte:	
  9603                           
  9604                           ;CC2500_B1.c: 208: unsigned char loop_b;
  9605                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9609  1996  0020               	movlb	0	; select bank0
  9610  1997  01A1               	clrf	CC2500_ReadByte@loop_b
  9611  1998                     L9:	
  9612  1998  3008               	movlw	8
  9613  1999  0221               	subwf	CC2500_ReadByte@loop_b,w
  9614  199A  1803               	btfsc	3,0
  9615  199B  0008               	return
  9616                           
  9617                           ;CC2500_B1.c: 210: RC1 = 1;
  9618  199C  148E               	bsf	14,1	;volatile
  9619                           
  9620                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  9621  199D  1003               	clrc
  9622  199E  0021               	movlb	1	; select bank1
  9623  199F  0DC2               	rlf	_SPI0Buffer^(0+128),f
  9624                           
  9625                           ;CC2500_B1.c: 212: if (RC2 == 1)
  9626  19A0  0020               	movlb	0	; select bank0
  9627  19A1  1D0E               	btfss	14,2	;volatile
  9628  19A2  29A6               	goto	l6190
  9629                           
  9630                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  9631  19A3  0021               	movlb	1	; select bank1
  9632  19A4  1442               	bsf	_SPI0Buffer^(0+128),0
  9633  19A5  29AC               	goto	l6192
  9634  19A6                     l6190:	
  9635                           
  9636                           ;CC2500_B1.c: 214: else
  9637                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  9638  19A6  30FE               	movlw	254
  9639  19A7  0020               	movlb	0	; select bank0
  9640  19A8  00A0               	movwf	??_CC2500_ReadByte
  9641  19A9  0820               	movf	??_CC2500_ReadByte,w
  9642  19AA  0021               	movlb	1	; select bank1
  9643  19AB  05C2               	andwf	_SPI0Buffer^(0+128),f
  9644  19AC                     l6192:	
  9645                           
  9646                           ;CC2500_B1.c: 216: RC1 = 0;
  9647  19AC  0020               	movlb	0	; select bank0
  9648  19AD  108E               	bcf	14,1	;volatile
  9649  19AE  3001               	movlw	1
  9650  19AF  00A0               	movwf	??_CC2500_ReadByte
  9651  19B0  0820               	movf	??_CC2500_ReadByte,w
  9652  19B1  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9653  19B2  2998               	goto	L9
  9654  19B3                     __end_of_CC2500_ReadByte:	
  9655                           
  9656                           	psect	text43
  9657  2596                     __ptext43:	
  9658 ;; *************** function _RF_Initialization *****************
  9659 ;; Defined at:
  9660 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0, pclath, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;Total ram usage:        0 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    5
  9681 ;; This function calls:
  9682 ;;		_setRF_Initialization
  9683 ;; This function is called by:
  9684 ;;		_main
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           
  9689                           ;psect for function _RF_Initialization
  9690  2596                     _RF_Initialization:	
  9691                           
  9692                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  9693                           
  9694                           ;incstack = 0
  9695                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9696  2596  3001               	movlw	1
  9697  2597  31A5  25D5         	fcall	_setRF_Initialization
  9698  2599  0008               	return
  9699  259A                     __end_of_RF_Initialization:	
  9700                           
  9701                           	psect	text44
  9702  25D5                     __ptext44:	
  9703 ;; *************** function _setRF_Initialization *****************
  9704 ;; Defined at:
  9705 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9706 ;; Parameters:    Size  Location     Type
  9707 ;;  rf              1    wreg     unsigned char 
  9708 ;; Auto vars:     Size  Location     Type
  9709 ;;  rf              1    0[COMMON] unsigned char 
  9710 ;; Return value:  Size  Location     Type
  9711 ;;		None               void
  9712 ;; Registers used:
  9713 ;;		wreg
  9714 ;; Tracked objects:
  9715 ;;		On entry : 0/0
  9716 ;;		On exit  : 0/0
  9717 ;;		Unchanged: 0/0
  9718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;Total ram usage:        1 bytes
  9724 ;; Hardware stack levels used:    1
  9725 ;; Hardware stack levels required when called:    4
  9726 ;; This function calls:
  9727 ;;		Nothing
  9728 ;; This function is called by:
  9729 ;;		_RF_Initialization
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           
  9734                           ;psect for function _setRF_Initialization
  9735  25D5                     _setRF_Initialization:	
  9736                           
  9737                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  9738                           
  9739                           ;incstack = 0
  9740                           ; Regs used in _setRF_Initialization: [wreg]
  9741  25D5  3015               	movlw	21
  9742  25D6  0020               	movlb	0	; select bank0
  9743  25D7  00A0               	movwf	??_setRF_Initialization
  9744  25D8  0820               	movf	??_setRF_Initialization,w
  9745  25D9  0021               	movlb	1	; select bank1
  9746  25DA  00C3               	movwf	_Tx_Length^(0+128)
  9747  25DB  0008               	return
  9748  25DC                     __end_of_setRF_Initialization:	
  9749                           
  9750                           	psect	text45
  9751  2579                     __ptext45:	
  9752 ;; *************** function _PowerFault_Main *****************
  9753 ;; Defined at:
  9754 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;		None               void
  9761 ;; Registers used:
  9762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:   10
  9775 ;; This function calls:
  9776 ;;		_setPowerFault_Main
  9777 ;; This function is called by:
  9778 ;;		_main
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           
  9783                           ;psect for function _PowerFault_Main
  9784  2579                     _PowerFault_Main:	
  9785                           
  9786                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9787                           
  9788                           ;incstack = 0
  9789                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9790  2579  318E  26E3         	fcall	_setPowerFault_Main
  9791  257B  0008               	return
  9792  257C                     __end_of_PowerFault_Main:	
  9793                           
  9794                           	psect	text46
  9795  0EE3                     __ptext46:	
  9796 ;; *************** function _setPowerFault_Main *****************
  9797 ;; Defined at:
  9798 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        2 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    9
  9819 ;; This function calls:
  9820 ;;		_getLoad_Safe
  9821 ;;		_getTemp_Safe
  9822 ;;		_setPowerFault_Exceptions
  9823 ;; This function is called by:
  9824 ;;		_PowerFault_Main
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           
  9829                           ;psect for function _setPowerFault_Main
  9830  0EE3                     _setPowerFault_Main:	
  9831                           
  9832                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9836  0EE3  0021               	movlb	1	; select bank1
  9837  0EE4  083D               	movf	_PF^(0+128),w
  9838  0EE5  0086               	movwf	6
  9839  0EE6  3001               	movlw	1	; select bank2/3
  9840  0EE7  0087               	movwf	7
  9841  0EE8  1C01               	btfss	1,0
  9842  0EE9  0008               	return
  9843                           
  9844                           ;PowerFault_B1.c: 64: {
  9845                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9846  0EEA  083D               	movf	_PF^(0+128),w
  9847  0EEB  0086               	movwf	6
  9848  0EEC  3001               	movlw	1	; select bank2/3
  9849  0EED  0087               	movwf	7
  9850  0EEE  1981               	btfsc	1,3
  9851  0EEF  2F36               	goto	l8866
  9852                           
  9853                           ;PowerFault_B1.c: 66: {
  9854                           ;PowerFault_B1.c: 67: PF->Time++;
  9855  0EF0  083D               	movf	_PF^(0+128),w
  9856  0EF1  3E02               	addlw	2
  9857  0EF2  0086               	movwf	6
  9858  0EF3  3001               	movlw	1	; select bank2/3
  9859  0EF4  0087               	movwf	7
  9860  0EF5  3001               	movlw	1
  9861  0EF6  0781               	addwf	1,f
  9862  0EF7  3141               	addfsr 1,1
  9863  0EF8  1803               	skipnc
  9864  0EF9  0A81               	incf	1,f
  9865                           
  9866                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9867  0EFA  083D               	movf	_PF^(0+128),w
  9868  0EFB  3E02               	addlw	2
  9869  0EFC  0086               	movwf	6
  9870  0EFD  3001               	movlw	1	; select bank2/3
  9871  0EFE  0087               	movwf	7
  9872  0EFF  3F40               	moviw [0]fsr1
  9873  0F00  0020               	movlb	0	; select bank0
  9874  0F01  00AD               	movwf	??_setPowerFault_Main
  9875  0F02  3F41               	moviw [1]fsr1
  9876  0F03  00AE               	movwf	??_setPowerFault_Main+1
  9877  0F04  3002               	movlw	2
  9878  0F05  022E               	subwf	??_setPowerFault_Main+1,w
  9879  0F06  30BC               	movlw	188
  9880  0F07  1903               	skipnz
  9881  0F08  022D               	subwf	??_setPowerFault_Main,w
  9882  0F09  1C03               	skipc
  9883  0F0A  0008               	return
  9884                           
  9885                           ;PowerFault_B1.c: 69: {
  9886                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9887  0F0B  31A6  2642  318E   	fcall	_getLoad_Safe
  9888  0F0E  3A00               	xorlw	0
  9889  0F0F  1903               	skipnz
  9890  0F10  2F2B               	goto	l8864
  9891  0F11  31A5  25C7  318E   	fcall	_getTemp_Safe
  9892  0F14  3A00               	xorlw	0
  9893  0F15  1903               	skipnz
  9894  0F16  2F2B               	goto	l8864
  9895                           
  9896                           ;PowerFault_B1.c: 71: {
  9897                           ;PowerFault_B1.c: 72: PF->Time=0;
  9898  0F17  0021               	movlb	1	; select bank1
  9899  0F18  083D               	movf	_PF^(0+128),w
  9900  0F19  3E02               	addlw	2
  9901  0F1A  0086               	movwf	6
  9902  0F1B  3001               	movlw	1	; select bank2/3
  9903  0F1C  0087               	movwf	7
  9904  0F1D  3000               	movlw	0
  9905  0F1E  3FC0               	movwi [0]fsr1
  9906  0F1F  3FC1               	movwi [1]fsr1
  9907                           
  9908                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9909  0F20  083D               	movf	_PF^(0+128),w
  9910  0F21  0086               	movwf	6
  9911  0F22  3001               	movlw	1	; select bank2/3
  9912  0F23  0087               	movwf	7
  9913  0F24  1581               	bsf	1,3
  9914                           
  9915                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9916  0F25  083D               	movf	_PF^(0+128),w
  9917  0F26  0086               	movwf	6
  9918  0F27  3001               	movlw	1	; select bank2/3
  9919  0F28  0087               	movwf	7
  9920  0F29  1101               	bcf	1,2
  9921                           
  9922                           ;PowerFault_B1.c: 75: }
  9923  0F2A  0008               	return
  9924  0F2B                     l8864:	
  9925                           
  9926                           ;PowerFault_B1.c: 76: else
  9927                           ;PowerFault_B1.c: 77: {
  9928                           ;PowerFault_B1.c: 78: PF->Time=700;
  9929  0F2B  0021               	movlb	1	; select bank1
  9930  0F2C  083D               	movf	_PF^(0+128),w
  9931  0F2D  3E02               	addlw	2
  9932  0F2E  0086               	movwf	6
  9933  0F2F  3001               	movlw	1	; select bank2/3
  9934  0F30  0087               	movwf	7
  9935  0F31  30BC               	movlw	188
  9936  0F32  3FC0               	movwi [0]fsr1
  9937  0F33  3002               	movlw	2
  9938  0F34  3FC1               	movwi [1]fsr1
  9939                           
  9940                           ;PowerFault_B1.c: 79: }
  9941                           ;PowerFault_B1.c: 80: }
  9942                           ;PowerFault_B1.c: 81: }
  9943  0F35  0008               	return
  9944  0F36                     l8866:	
  9945                           
  9946                           ;PowerFault_B1.c: 82: else
  9947                           ;PowerFault_B1.c: 83: {
  9948                           ;PowerFault_B1.c: 84: PF->Time++;
  9949  0F36  083D               	movf	_PF^(0+128),w
  9950  0F37  3E02               	addlw	2
  9951  0F38  0086               	movwf	6
  9952  0F39  3001               	movlw	1	; select bank2/3
  9953  0F3A  0087               	movwf	7
  9954  0F3B  3001               	movlw	1
  9955  0F3C  0781               	addwf	1,f
  9956  0F3D  3141               	addfsr 1,1
  9957  0F3E  1803               	skipnc
  9958  0F3F  0A81               	incf	1,f
  9959                           
  9960                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9961  0F40  083D               	movf	_PF^(0+128),w
  9962  0F41  3E02               	addlw	2
  9963  0F42  0086               	movwf	6
  9964  0F43  3001               	movlw	1	; select bank2/3
  9965  0F44  0087               	movwf	7
  9966  0F45  3F40               	moviw [0]fsr1
  9967  0F46  0020               	movlb	0	; select bank0
  9968  0F47  00AD               	movwf	??_setPowerFault_Main
  9969  0F48  3F41               	moviw [1]fsr1
  9970  0F49  00AE               	movwf	??_setPowerFault_Main+1
  9971  0F4A  3000               	movlw	0
  9972  0F4B  022E               	subwf	??_setPowerFault_Main+1,w
  9973  0F4C  3002               	movlw	2
  9974  0F4D  1903               	skipnz
  9975  0F4E  022D               	subwf	??_setPowerFault_Main,w
  9976  0F4F  1C03               	skipc
  9977  0F50  0008               	return
  9978                           
  9979                           ;PowerFault_B1.c: 86: {
  9980                           ;PowerFault_B1.c: 87: PF->Time=0;
  9981  0F51  0021               	movlb	1	; select bank1
  9982  0F52  083D               	movf	_PF^(0+128),w
  9983  0F53  3E02               	addlw	2
  9984  0F54  0086               	movwf	6
  9985  0F55  3001               	movlw	1	; select bank2/3
  9986  0F56  0087               	movwf	7
  9987  0F57  3000               	movlw	0
  9988  0F58  3FC0               	movwi [0]fsr1
  9989  0F59  3FC1               	movwi [1]fsr1
  9990                           
  9991                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9992  0F5A  083D               	movf	_PF^(0+128),w
  9993  0F5B  0086               	movwf	6
  9994  0F5C  3001               	movlw	1	; select bank2/3
  9995  0F5D  0087               	movwf	7
  9996  0F5E  1181               	bcf	1,3
  9997                           
  9998                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9999  0F5F  083D               	movf	_PF^(0+128),w
 10000  0F60  0086               	movwf	6
 10001  0F61  3001               	movlw	1	; select bank2/3
 10002  0F62  0087               	movwf	7
 10003  0F63  1C81               	btfss	1,1
 10004  0F64  2FA5               	goto	l8886
 10005                           
 10006                           ;PowerFault_B1.c: 91: {
 10007                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10008  0F65  083D               	movf	_PF^(0+128),w
 10009  0F66  3E04               	addlw	4
 10010  0F67  0086               	movwf	6
 10011  0F68  3001               	movlw	1	; select bank2/3
 10012  0F69  0087               	movwf	7
 10013  0F6A  3F40               	moviw [0]fsr1
 10014  0F6B  0020               	movlb	0	; select bank0
 10015  0F6C  00AD               	movwf	??_setPowerFault_Main
 10016  0F6D  3F41               	moviw [1]fsr1
 10017  0F6E  00AE               	movwf	??_setPowerFault_Main+1
 10018  0F6F  3001               	movlw	1
 10019  0F70  022E               	subwf	??_setPowerFault_Main+1,w
 10020  0F71  3091               	movlw	145
 10021  0F72  1903               	skipnz
 10022  0F73  022D               	subwf	??_setPowerFault_Main,w
 10023  0F74  1803               	skipnc
 10024  0F75  2FE5               	goto	l8898
 10025  0F76  0021               	movlb	1	; select bank1
 10026  0F77  083D               	movf	_PF^(0+128),w
 10027  0F78  3E04               	addlw	4
 10028  0F79  0086               	movwf	6
 10029  0F7A  3001               	movlw	1	; select bank2/3
 10030  0F7B  0087               	movwf	7
 10031  0F7C  3F40               	moviw [0]fsr1
 10032  0F7D  0020               	movlb	0	; select bank0
 10033  0F7E  00AD               	movwf	??_setPowerFault_Main
 10034  0F7F  3F41               	moviw [1]fsr1
 10035  0F80  00AE               	movwf	??_setPowerFault_Main+1
 10036  0F81  3000               	movlw	0
 10037  0F82  022E               	subwf	??_setPowerFault_Main+1,w
 10038  0F83  30C8               	movlw	200
 10039  0F84  1903               	skipnz
 10040  0F85  022D               	subwf	??_setPowerFault_Main,w
 10041  0F86  1C03               	skipc
 10042  0F87  2FE5               	goto	l8898
 10043                           
 10044                           ;PowerFault_B1.c: 93: {
 10045                           ;PowerFault_B1.c: 94: PF->Count++;
 10046  0F88  3001               	movlw	1
 10047  0F89  00AD               	movwf	??_setPowerFault_Main
 10048  0F8A  0021               	movlb	1	; select bank1
 10049  0F8B  0A3D               	incf	_PF^(0+128),w
 10050  0F8C  0086               	movwf	6
 10051  0F8D  3001               	movlw	1	; select bank2/3
 10052  0F8E  0087               	movwf	7
 10053  0F8F  0020               	movlb	0	; select bank0
 10054  0F90  082D               	movf	??_setPowerFault_Main,w
 10055  0F91  0781               	addwf	1,f
 10056                           
 10057                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10058  0F92  0021               	movlb	1	; select bank1
 10059  0F93  0A3D               	incf	_PF^(0+128),w
 10060  0F94  0086               	movwf	6
 10061  0F95  3001               	movlw	1	; select bank2/3
 10062  0F96  0087               	movwf	7
 10063  0F97  3002               	movlw	2
 10064  0F98  0201               	subwf	1,w
 10065  0F99  1C03               	skipc
 10066  0F9A  2FEB               	goto	l8900
 10067                           
 10068                           ;PowerFault_B1.c: 96: {
 10069                           ;PowerFault_B1.c: 97: PF->Count=0;
 10070  0F9B  0A3D               	incf	_PF^(0+128),w
 10071  0F9C  0086               	movwf	6
 10072  0F9D  3001               	movlw	1	; select bank2/3
 10073  0F9E  0087               	movwf	7
 10074  0F9F  0181               	clrf	1
 10075                           
 10076                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10077  0FA0  3000               	movlw	0
 10078  0FA1  3190  2000  318E   	fcall	_setPowerFault_Exceptions
 10079                           
 10080                           ;PowerFault_B1.c: 99: }
 10081                           ;PowerFault_B1.c: 100: }
 10082  0FA4  2FEB               	goto	l8900
 10083  0FA5                     l8886:	
 10084                           ;PowerFault_B1.c: 104: }
 10085                           ;PowerFault_B1.c: 105: }
 10086                           
 10087                           ;PowerFault_B1.c: 101: else
 10088                           ;PowerFault_B1.c: 102: {
 10089                           ;PowerFault_B1.c: 103: PF->Count=0;
 10090                           
 10091                           
 10092                           ;PowerFault_B1.c: 106: else
 10093                           ;PowerFault_B1.c: 107: {
 10094                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10095  0FA5  083D               	movf	_PF^(0+128),w
 10096  0FA6  3E04               	addlw	4
 10097  0FA7  0086               	movwf	6
 10098  0FA8  3001               	movlw	1	; select bank2/3
 10099  0FA9  0087               	movwf	7
 10100  0FAA  3F40               	moviw [0]fsr1
 10101  0FAB  0020               	movlb	0	; select bank0
 10102  0FAC  00AD               	movwf	??_setPowerFault_Main
 10103  0FAD  3F41               	moviw [1]fsr1
 10104  0FAE  00AE               	movwf	??_setPowerFault_Main+1
 10105  0FAF  3001               	movlw	1
 10106  0FB0  022E               	subwf	??_setPowerFault_Main+1,w
 10107  0FB1  3090               	movlw	144
 10108  0FB2  1903               	skipnz
 10109  0FB3  022D               	subwf	??_setPowerFault_Main,w
 10110  0FB4  1803               	skipnc
 10111  0FB5  2FC8               	goto	l8890
 10112  0FB6  0021               	movlb	1	; select bank1
 10113  0FB7  083D               	movf	_PF^(0+128),w
 10114  0FB8  3E04               	addlw	4
 10115  0FB9  0086               	movwf	6
 10116  0FBA  3001               	movlw	1	; select bank2/3
 10117  0FBB  0087               	movwf	7
 10118  0FBC  3F40               	moviw [0]fsr1
 10119  0FBD  0020               	movlb	0	; select bank0
 10120  0FBE  00AD               	movwf	??_setPowerFault_Main
 10121  0FBF  3F41               	moviw [1]fsr1
 10122  0FC0  00AE               	movwf	??_setPowerFault_Main+1
 10123  0FC1  3000               	movlw	0
 10124  0FC2  022E               	subwf	??_setPowerFault_Main+1,w
 10125  0FC3  30D3               	movlw	211
 10126  0FC4  1903               	skipnz
 10127  0FC5  022D               	subwf	??_setPowerFault_Main,w
 10128  0FC6  1803               	skipnc
 10129  0FC7  2FE5               	goto	l8898
 10130  0FC8                     l8890:	
 10131                           
 10132                           ;PowerFault_B1.c: 109: {
 10133                           ;PowerFault_B1.c: 110: PF->Count++;
 10134  0FC8  3001               	movlw	1
 10135  0FC9  00AD               	movwf	??_setPowerFault_Main
 10136  0FCA  0021               	movlb	1	; select bank1
 10137  0FCB  0A3D               	incf	_PF^(0+128),w
 10138  0FCC  0086               	movwf	6
 10139  0FCD  3001               	movlw	1	; select bank2/3
 10140  0FCE  0087               	movwf	7
 10141  0FCF  0020               	movlb	0	; select bank0
 10142  0FD0  082D               	movf	??_setPowerFault_Main,w
 10143  0FD1  0781               	addwf	1,f
 10144                           
 10145                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10146  0FD2  0021               	movlb	1	; select bank1
 10147  0FD3  0A3D               	incf	_PF^(0+128),w
 10148  0FD4  0086               	movwf	6
 10149  0FD5  3001               	movlw	1	; select bank2/3
 10150  0FD6  0087               	movwf	7
 10151  0FD7  3002               	movlw	2
 10152  0FD8  0201               	subwf	1,w
 10153  0FD9  1C03               	skipc
 10154  0FDA  2FEB               	goto	l8900
 10155                           
 10156                           ;PowerFault_B1.c: 112: {
 10157                           ;PowerFault_B1.c: 113: PF->Count=0;
 10158  0FDB  0A3D               	incf	_PF^(0+128),w
 10159  0FDC  0086               	movwf	6
 10160  0FDD  3001               	movlw	1	; select bank2/3
 10161  0FDE  0087               	movwf	7
 10162  0FDF  0181               	clrf	1
 10163                           
 10164                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10165  0FE0  3001               	movlw	1
 10166  0FE1  3190  2000  318E   	fcall	_setPowerFault_Exceptions
 10167                           
 10168                           ;PowerFault_B1.c: 115: }
 10169                           ;PowerFault_B1.c: 116: }
 10170  0FE4  2FEB               	goto	l8900
 10171  0FE5                     l8898:	
 10172                           
 10173                           ;PowerFault_B1.c: 117: else
 10174                           ;PowerFault_B1.c: 118: {
 10175                           ;PowerFault_B1.c: 119: PF->Count=0;
 10176  0FE5  0021               	movlb	1	; select bank1
 10177  0FE6  0A3D               	incf	_PF^(0+128),w
 10178  0FE7  0086               	movwf	6
 10179  0FE8  3001               	movlw	1	; select bank2/3
 10180  0FE9  0087               	movwf	7
 10181  0FEA  0181               	clrf	1
 10182  0FEB                     l8900:	
 10183                           
 10184                           ;PowerFault_B1.c: 120: }
 10185                           ;PowerFault_B1.c: 122: }
 10186                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10187  0FEB  0021               	movlb	1	; select bank1
 10188  0FEC  083D               	movf	_PF^(0+128),w
 10189  0FED  0086               	movwf	6
 10190  0FEE  3001               	movlw	1	; select bank2/3
 10191  0FEF  0087               	movwf	7
 10192  0FF0  1881               	btfsc	1,1
 10193  0FF1  2FF7               	goto	l2022
 10194                           
 10195                           ;PowerFault_B1.c: 124: {
 10196                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10197  0FF2  083D               	movf	_PF^(0+128),w
 10198  0FF3  0086               	movwf	6
 10199  0FF4  3001               	movlw	1	; select bank2/3
 10200  0FF5  0087               	movwf	7
 10201  0FF6  1501               	bsf	1,2
 10202  0FF7                     l2022:	
 10203                           
 10204                           ;PowerFault_B1.c: 126: }
 10205                           ;PowerFault_B1.c: 127: PF->AD=0;
 10206  0FF7  083D               	movf	_PF^(0+128),w
 10207  0FF8  3E04               	addlw	4
 10208  0FF9  0086               	movwf	6
 10209  0FFA  3001               	movlw	1	; select bank2/3
 10210  0FFB  0087               	movwf	7
 10211  0FFC  3000               	movlw	0
 10212  0FFD  3FC0               	movwi [0]fsr1
 10213  0FFE  3FC1               	movwi [1]fsr1
 10214  0FFF  0008               	return
 10215  1000                     __end_of_setPowerFault_Main:	
 10216                           
 10217                           	psect	text47
 10218  1000                     __ptext47:	
 10219 ;; *************** function _setPowerFault_Exceptions *****************
 10220 ;; Defined at:
 10221 ;;		line 133 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  command         1    wreg     unsigned char 
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  command         1   12[BANK0 ] unsigned char 
 10226 ;; Return value:  Size  Location     Type
 10227 ;;		None               void
 10228 ;; Registers used:
 10229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;Total ram usage:        2 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    8
 10242 ;; This function calls:
 10243 ;;		_DimmerLights_Exceptions
 10244 ;;		_setLED
 10245 ;;		_setRF_Enable
 10246 ;;		_setSw_Enable
 10247 ;; This function is called by:
 10248 ;;		_setPowerFault_Main
 10249 ;; This function uses a non-reentrant model
 10250 ;;
 10251                           
 10252                           
 10253                           ;psect for function _setPowerFault_Exceptions
 10254  1000                     _setPowerFault_Exceptions:	
 10255                           
 10256                           ;incstack = 0
 10257                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10258                           ;setPowerFault_Exceptions@command stored from wreg
 10259  1000  0020               	movlb	0	; select bank0
 10260  1001  00AC               	movwf	setPowerFault_Exceptions@command
 10261                           
 10262                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10263  1002  0021               	movlb	1	; select bank1
 10264  1003  083D               	movf	_PF^(0+128),w
 10265  1004  0086               	movwf	6
 10266  1005  3001               	movlw	1	; select bank2/3
 10267  1006  0087               	movwf	7
 10268  1007  0020               	movlb	0	; select bank0
 10269  1008  082C               	movf	setPowerFault_Exceptions@command,w
 10270  1009  1081               	bcf	1,1
 10271  100A  1D03               	skipz
 10272  100B  1481               	bsf	1,1
 10273                           
 10274                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10275  100C  092C               	comf	setPowerFault_Exceptions@command,w
 10276  100D  3901               	andlw	1
 10277  100E  00AB               	movwf	??_setPowerFault_Exceptions
 10278  100F  0021               	movlb	1	; select bank1
 10279  1010  083D               	movf	_PF^(0+128),w
 10280  1011  0086               	movwf	6
 10281  1012  3001               	movlw	1	; select bank2/3
 10282  1013  0087               	movwf	7
 10283  1014  0020               	movlb	0	; select bank0
 10284  1015  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10285  1016  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10286  1017  0801               	movf	1,w
 10287  1018  062B               	xorwf	??_setPowerFault_Exceptions,w
 10288  1019  39FB               	andlw	-5
 10289  101A  062B               	xorwf	??_setPowerFault_Exceptions,w
 10290  101B  0081               	movwf	1
 10291                           
 10292                           ;PowerFault_B1.c: 137: if(command == 1)
 10293  101C  082C               	movf	setPowerFault_Exceptions@command,w
 10294  101D  3A01               	xorlw	1
 10295  101E  1D03               	skipz
 10296  101F  282B               	goto	l2026
 10297                           
 10298                           ;PowerFault_B1.c: 138: {
 10299                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10300  1020  3003               	movlw	3
 10301  1021  3191  2142  3190   	fcall	_DimmerLights_Exceptions
 10302                           
 10303                           ;PowerFault_B1.c: 141: setLED(2,1);
 10304  1024  0020               	movlb	0	; select bank0
 10305  1025  01A2               	clrf	setLED@command
 10306  1026  0AA2               	incf	setLED@command,f
 10307  1027  3002               	movlw	2
 10308  1028  3192  2254  3190   	fcall	_setLED
 10309  102B                     l2026:	
 10310                           
 10311                           ;PowerFault_B1.c: 143: }
 10312                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10313  102B  0020               	movlb	0	; select bank0
 10314  102C  082C               	movf	setPowerFault_Exceptions@command,w
 10315  102D  3E0A               	addlw	10
 10316  102E  00AB               	movwf	??_setPowerFault_Exceptions
 10317  102F  082B               	movf	??_setPowerFault_Exceptions,w
 10318  1030  00A2               	movwf	setLED@command
 10319  1031  3063               	movlw	99
 10320  1032  3192  2254  3190   	fcall	_setLED
 10321                           
 10322                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10323  1035  0020               	movlb	0	; select bank0
 10324  1036  092C               	comf	setPowerFault_Exceptions@command,w
 10325  1037  3901               	andlw	1
 10326  1038  31A7  2731  3190   	fcall	_setSw_Enable
 10327                           
 10328                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10329  103B  0020               	movlb	0	; select bank0
 10330  103C  092C               	comf	setPowerFault_Exceptions@command,w
 10331  103D  3901               	andlw	1
 10332  103E  00AB               	movwf	??_setPowerFault_Exceptions
 10333  103F  082B               	movf	??_setPowerFault_Exceptions,w
 10334  1040  00A2               	movwf	setRF_Enable@command
 10335  1041  3001               	movlw	1
 10336  1042  319B  2360         	fcall	_setRF_Enable
 10337  1044  0008               	return
 10338  1045                     __end_of_setPowerFault_Exceptions:	
 10339                           
 10340                           	psect	text48
 10341  2642                     __ptext48:	
 10342 ;; *************** function _getLoad_Safe *****************
 10343 ;; Defined at:
 10344 ;;		line 298 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;		None
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;		None
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      unsigned char 
 10351 ;; Registers used:
 10352 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;Total ram usage:        1 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    4
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_setTemp_Main
 10369 ;;		_setPowerFault_Main
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           
 10374                           ;psect for function _getLoad_Safe
 10375  2642                     _getLoad_Safe:	
 10376                           
 10377                           ;OverLoad_B1.c: 299: return Load->Safe;
 10378                           
 10379                           ;incstack = 0
 10380                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10381  2642  087B               	movf	_Load,w
 10382  2643  0086               	movwf	6
 10383  2644  3002               	movlw	2	; select bank4/5
 10384  2645  0087               	movwf	7
 10385  2646  0C01               	rrf	1,w
 10386  2647  0020               	movlb	0	; select bank0
 10387  2648  00A0               	movwf	??_getLoad_Safe
 10388  2649  0CA0               	rrf	??_getLoad_Safe,f
 10389  264A  0C20               	rrf	??_getLoad_Safe,w
 10390  264B  3901               	andlw	1
 10391  264C  0008               	return
 10392  264D                     __end_of_getLoad_Safe:	
 10393                           
 10394                           	psect	text49
 10395  2576                     __ptext49:	
 10396 ;; *************** function _PowerFault_Initialization *****************
 10397 ;; Defined at:
 10398 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;		None
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;		None
 10403 ;; Return value:  Size  Location     Type
 10404 ;;		None               void
 10405 ;; Registers used:
 10406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10407 ;; Tracked objects:
 10408 ;;		On entry : 0/0
 10409 ;;		On exit  : 0/0
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;Total ram usage:        0 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    5
 10419 ;; This function calls:
 10420 ;;		_setPowerFault_Initialization
 10421 ;; This function is called by:
 10422 ;;		_main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _PowerFault_Initialization
 10428  2576                     _PowerFault_Initialization:	
 10429                           
 10430                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10434  2576  31A7  27EF         	fcall	_setPowerFault_Initialization
 10435  2578  0008               	return
 10436  2579                     __end_of_PowerFault_Initialization:	
 10437                           
 10438                           	psect	text50
 10439  27EF                     __ptext50:	
 10440 ;; *************** function _setPowerFault_Initialization *****************
 10441 ;; Defined at:
 10442 ;;		line 29 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;		None
 10445 ;; Auto vars:     Size  Location     Type
 10446 ;;		None
 10447 ;; Return value:  Size  Location     Type
 10448 ;;		None               void
 10449 ;; Registers used:
 10450 ;;		wreg, fsr1l, fsr1h
 10451 ;; Tracked objects:
 10452 ;;		On entry : 0/0
 10453 ;;		On exit  : 0/0
 10454 ;;		Unchanged: 0/0
 10455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;Total ram usage:        1 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    4
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_PowerFault_Initialization
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           
 10471                           ;psect for function _setPowerFault_Initialization
 10472  27EF                     _setPowerFault_Initialization:	
 10473                           
 10474                           ;PowerFault_B1.c: 31: PF=&PF1;
 10475                           
 10476                           ;incstack = 0
 10477                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10478  27EF  3062               	movlw	_PF1& (0+255)
 10479  27F0  0020               	movlb	0	; select bank0
 10480  27F1  00A0               	movwf	??_setPowerFault_Initialization
 10481  27F2  0820               	movf	??_setPowerFault_Initialization,w
 10482  27F3  0021               	movlb	1	; select bank1
 10483  27F4  00BD               	movwf	_PF^(0+128)
 10484                           
 10485                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10486  27F5  083D               	movf	_PF^(0+128),w
 10487  27F6  0086               	movwf	6
 10488  27F7  3001               	movlw	1	; select bank2/3
 10489  27F8  0087               	movwf	7
 10490  27F9  1401               	bsf	1,0
 10491                           
 10492                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10493  27FA  083D               	movf	_PF^(0+128),w
 10494  27FB  0086               	movwf	6
 10495  27FC  3001               	movlw	1	; select bank2/3
 10496  27FD  0087               	movwf	7
 10497  27FE  1501               	bsf	1,2
 10498  27FF  0008               	return
 10499  2800                     __end_of_setPowerFault_Initialization:	
 10500                           
 10501                           	psect	text51
 10502  1944                     __ptext51:	
 10503 ;; *************** function _Mcu_Initialization *****************
 10504 ;; Defined at:
 10505 ;;		line 24 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;		None               void
 10512 ;; Registers used:
 10513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:        1 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    5
 10526 ;; This function calls:
 10527 ;;		_ADC_Set
 10528 ;;		_INT_Set
 10529 ;;		_IOC_Set
 10530 ;;		_IO_Set
 10531 ;;		_TMR0_Set
 10532 ;;		_WDT_Set
 10533 ;; This function is called by:
 10534 ;;		_main
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _Mcu_Initialization
 10540  1944                     _Mcu_Initialization:	
 10541                           
 10542                           ;MCU_B1.c: 26: OSCCON=0x78; ;;
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10546  1944  3078               	movlw	120
 10547  1945  0021               	movlb	1	; select bank1
 10548  1946  0099               	movwf	25	;volatile
 10549                           
 10550                           ;MCU_B1.c: 28: IO_Set();
 10551  1947  3188  2000  3199   	fcall	_IO_Set
 10552                           
 10553                           ;MCU_B1.c: 30: TMR0_Set();
 10554  194A  31A6  26F7  3199   	fcall	_TMR0_Set
 10555                           
 10556                           ;MCU_B1.c: 32: ;;
 10557                           ;MCU_B1.c: 34: ADC_Set();
 10558  194D  31A5  25CE  3199   	fcall	_ADC_Set
 10559                           
 10560                           ;MCU_B1.c: 38: INT_Set();
 10561  1950  31A5  25A7  3199   	fcall	_INT_Set
 10562                           
 10563                           ;MCU_B1.c: 40: IOC_Set();
 10564  1953  31A6  26EA  3199   	fcall	_IOC_Set
 10565                           
 10566                           ;MCU_B1.c: 42: ;;
 10567                           ;MCU_B1.c: 44: ;;
 10568                           ;MCU_B1.c: 46: Memory=&VarMemory;
 10569  1956  30A0               	movlw	_VarMemory& (0+255)
 10570  1957  0020               	movlb	0	; select bank0
 10571  1958  00A1               	movwf	??_Mcu_Initialization
 10572  1959  0821               	movf	??_Mcu_Initialization,w
 10573  195A  0021               	movlb	1	; select bank1
 10574  195B  00EA               	movwf	_Memory^(0+128)
 10575                           
 10576                           ;MCU_B1.c: 48: WDT_Set();
 10577  195C  3198  20C6         	fcall	_WDT_Set
 10578  195E  0008               	return
 10579  195F                     __end_of_Mcu_Initialization:	
 10580                           
 10581                           	psect	text52
 10582  18C6                     __ptext52:	
 10583 ;; *************** function _WDT_Set *****************
 10584 ;; Defined at:
 10585 ;;		line 936 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;		None
 10590 ;; Return value:  Size  Location     Type
 10591 ;;		None               void
 10592 ;; Registers used:
 10593 ;;		wreg, fsr1l, fsr1h
 10594 ;; Tracked objects:
 10595 ;;		On entry : 0/0
 10596 ;;		On exit  : 0/0
 10597 ;;		Unchanged: 0/0
 10598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;Total ram usage:        1 bytes
 10604 ;; Hardware stack levels used:    1
 10605 ;; Hardware stack levels required when called:    4
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_Mcu_Initialization
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _WDT_Set
 10615  18C6                     _WDT_Set:	
 10616                           
 10617                           ;MCU_B1.c: 937: WDTCON = 0b00010111;;
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _WDT_Set: [wregfsr1]
 10621  18C6  3017               	movlw	23
 10622  18C7  0021               	movlb	1	; select bank1
 10623  18C8  0097               	movwf	23	;volatile
 10624                           
 10625                           ;MCU_B1.c: 938: WDT = &_WDT;
 10626  18C9  30E7               	movlw	__WDT& (0+255)
 10627  18CA  0020               	movlb	0	; select bank0
 10628  18CB  00A0               	movwf	??_WDT_Set
 10629  18CC  0820               	movf	??_WDT_Set,w
 10630  18CD  0021               	movlb	1	; select bank1
 10631  18CE  00ED               	movwf	_WDT^(0+128)
 10632                           
 10633                           ;MCU_B1.c: 939: WDT->Enable = 1;
 10634  18CF  086D               	movf	_WDT^(0+128),w
 10635  18D0  0086               	movwf	6
 10636  18D1  0187               	clrf	7
 10637  18D2  1401               	bsf	1,0
 10638                           
 10639                           ;MCU_B1.c: 940: WDT->Count = 10;
 10640  18D3  300A               	movlw	10
 10641  18D4  0020               	movlb	0	; select bank0
 10642  18D5  00A0               	movwf	??_WDT_Set
 10643  18D6  0021               	movlb	1	; select bank1
 10644  18D7  0A6D               	incf	_WDT^(0+128),w
 10645  18D8  0086               	movwf	6
 10646  18D9  0187               	clrf	7
 10647  18DA  0020               	movlb	0	; select bank0
 10648  18DB  0820               	movf	??_WDT_Set,w
 10649  18DC  0081               	movwf	1
 10650  18DD  0008               	return
 10651  18DE                     __end_of_WDT_Set:	
 10652                           
 10653                           	psect	text53
 10654  26F7                     __ptext53:	
 10655 ;; *************** function _TMR0_Set *****************
 10656 ;; Defined at:
 10657 ;;		line 118 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10658 ;; Parameters:    Size  Location     Type
 10659 ;;		None
 10660 ;; Auto vars:     Size  Location     Type
 10661 ;;		None
 10662 ;; Return value:  Size  Location     Type
 10663 ;;		None               void
 10664 ;; Registers used:
 10665 ;;		wreg, status,2
 10666 ;; Tracked objects:
 10667 ;;		On entry : 0/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;Total ram usage:        1 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    4
 10678 ;; This function calls:
 10679 ;;		Nothing
 10680 ;; This function is called by:
 10681 ;;		_Mcu_Initialization
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           
 10686                           ;psect for function _TMR0_Set
 10687  26F7                     _TMR0_Set:	
 10688                           
 10689                           ;MCU_B1.c: 119: Timer0 = &VarTimer0;
 10690                           
 10691                           ;incstack = 0
 10692                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10693  26F7  30C7               	movlw	_VarTimer0& (0+255)
 10694  26F8  0020               	movlb	0	; select bank0
 10695  26F9  00A0               	movwf	??_TMR0_Set
 10696  26FA  0820               	movf	??_TMR0_Set,w
 10697  26FB  0021               	movlb	1	; select bank1
 10698  26FC  00EC               	movwf	_Timer0^(0+128)
 10699                           
 10700                           ;MCU_B1.c: 120: OPTION_REG = 0x00;
 10701  26FD  0195               	clrf	21	;volatile
 10702                           
 10703                           ;MCU_B1.c: 121: TMR0 = (256-90);
 10704  26FE  30A6               	movlw	166
 10705  26FF  0020               	movlb	0	; select bank0
 10706  2700  0095               	movwf	21	;volatile
 10707                           
 10708                           ;MCU_B1.c: 122: TMR0IE = 1;
 10709  2701  168B               	bsf	11,5	;volatile
 10710                           
 10711                           ;MCU_B1.c: 123: GIE = 1;
 10712  2702  178B               	bsf	11,7	;volatile
 10713  2703  0008               	return
 10714  2704                     __end_of_TMR0_Set:	
 10715                           
 10716                           	psect	text54
 10717  0800                     __ptext54:	
 10718 ;; *************** function _IO_Set *****************
 10719 ;; Defined at:
 10720 ;;		line 52 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;		None
 10725 ;; Return value:  Size  Location     Type
 10726 ;;		None               void
 10727 ;; Registers used:
 10728 ;;		wreg, status,2
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;Total ram usage:        0 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    4
 10741 ;; This function calls:
 10742 ;;		Nothing
 10743 ;; This function is called by:
 10744 ;;		_Mcu_Initialization
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           
 10749                           ;psect for function _IO_Set
 10750  0800                     _IO_Set:	
 10751                           
 10752                           ;MCU_B1.c: 80: TRISA = 0b01110111;;
 10753                           
 10754                           ;incstack = 0
 10755                           ; Regs used in _IO_Set: [wreg+status,2]
 10756  0800  3077               	movlw	119
 10757  0801  0021               	movlb	1	; select bank1
 10758  0802  008C               	movwf	12	;volatile
 10759                           
 10760                           ;MCU_B1.c: 81: TRISB = 0b00000111;;
 10761  0803  3007               	movlw	7
 10762  0804  008D               	movwf	13	;volatile
 10763                           
 10764                           ;MCU_B1.c: 82: TRISC = 0b00001100;;
 10765  0805  300C               	movlw	12
 10766  0806  008E               	movwf	14	;volatile
 10767                           
 10768                           ;MCU_B1.c: 83: LATA = 0b00000000;;
 10769  0807  0022               	movlb	2	; select bank2
 10770  0808  018C               	clrf	12	;volatile
 10771                           
 10772                           ;MCU_B1.c: 84: LATB = 0b00000010;;
 10773  0809  3002               	movlw	2
 10774  080A  008D               	movwf	13	;volatile
 10775                           
 10776                           ;MCU_B1.c: 85: LATC = 0b00000000;;
 10777  080B  018E               	clrf	14	;volatile
 10778                           
 10779                           ;MCU_B1.c: 86: ANSELA = 0b00100010;;
 10780  080C  3022               	movlw	34
 10781  080D  0023               	movlb	3	; select bank3
 10782  080E  008C               	movwf	12	;volatile
 10783                           
 10784                           ;MCU_B1.c: 87: ANSELB = 0b00000000;;
 10785  080F  018D               	clrf	13	;volatile
 10786                           
 10787                           ;MCU_B1.c: 88: ANSELC = 0b00000000;;
 10788  0810  018E               	clrf	14	;volatile
 10789                           
 10790                           ;MCU_B1.c: 89: PORTA = 0b01110111;;
 10791  0811  3077               	movlw	119
 10792  0812  0020               	movlb	0	; select bank0
 10793  0813  008C               	movwf	12	;volatile
 10794                           
 10795                           ;MCU_B1.c: 90: PORTB = 0b00000111;;
 10796  0814  3007               	movlw	7
 10797  0815  008D               	movwf	13	;volatile
 10798                           
 10799                           ;MCU_B1.c: 91: PORTC = 0b00001100;;
 10800  0816  300C               	movlw	12
 10801  0817  008E               	movwf	14	;volatile
 10802  0818  0008               	return
 10803  0819                     __end_of_IO_Set:	
 10804                           
 10805                           	psect	text55
 10806  26EA                     __ptext55:	
 10807 ;; *************** function _IOC_Set *****************
 10808 ;; Defined at:
 10809 ;;		line 300 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;		None
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;		None
 10814 ;; Return value:  Size  Location     Type
 10815 ;;		None               void
 10816 ;; Registers used:
 10817 ;;		wreg, status,2
 10818 ;; Tracked objects:
 10819 ;;		On entry : 0/0
 10820 ;;		On exit  : 0/0
 10821 ;;		Unchanged: 0/0
 10822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;Total ram usage:        0 bytes
 10828 ;; Hardware stack levels used:    1
 10829 ;; Hardware stack levels required when called:    4
 10830 ;; This function calls:
 10831 ;;		Nothing
 10832 ;; This function is called by:
 10833 ;;		_Mcu_Initialization
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           
 10838                           ;psect for function _IOC_Set
 10839  26EA                     _IOC_Set:	
 10840                           
 10841                           ;MCU_B1.c: 301: WPUB2 = 0;
 10842                           
 10843                           ;incstack = 0
 10844                           ; Regs used in _IOC_Set: [wreg+status,2]
 10845  26EA  0024               	movlb	4	; select bank4
 10846  26EB  110D               	bcf	13,2	;volatile
 10847                           
 10848                           ;MCU_B1.c: 303: IOCBP = 0b00000100;
 10849  26EC  3004               	movlw	4
 10850  26ED  0027               	movlb	7	; select bank7
 10851  26EE  0094               	movwf	20	;volatile
 10852                           
 10853                           ;MCU_B1.c: 304: IOCBN = 0b00000100;
 10854  26EF  3004               	movlw	4
 10855  26F0  0095               	movwf	21	;volatile
 10856                           
 10857                           ;MCU_B1.c: 319: IOCBF = 0b00000000;
 10858  26F1  0196               	clrf	22	;volatile
 10859                           
 10860                           ;MCU_B1.c: 321: IOCIE = 1;
 10861  26F2  158B               	bsf	11,3	;volatile
 10862                           
 10863                           ;MCU_B1.c: 322: IOCIF = 0;
 10864  26F3  100B               	bcf	11,0	;volatile
 10865                           
 10866                           ;MCU_B1.c: 323: PEIE = 1;
 10867  26F4  170B               	bsf	11,6	;volatile
 10868                           
 10869                           ;MCU_B1.c: 324: GIE = 1;
 10870  26F5  178B               	bsf	11,7	;volatile
 10871  26F6  0008               	return
 10872  26F7                     __end_of_IOC_Set:	
 10873                           
 10874                           	psect	text56
 10875  25A7                     __ptext56:	
 10876 ;; *************** function _INT_Set *****************
 10877 ;; Defined at:
 10878 ;;		line 273 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10879 ;; Parameters:    Size  Location     Type
 10880 ;;		None
 10881 ;; Auto vars:     Size  Location     Type
 10882 ;;		None
 10883 ;; Return value:  Size  Location     Type
 10884 ;;		None               void
 10885 ;; Registers used:
 10886 ;;		None
 10887 ;; Tracked objects:
 10888 ;;		On entry : 0/0
 10889 ;;		On exit  : 0/0
 10890 ;;		Unchanged: 0/0
 10891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;Total ram usage:        0 bytes
 10897 ;; Hardware stack levels used:    1
 10898 ;; Hardware stack levels required when called:    4
 10899 ;; This function calls:
 10900 ;;		Nothing
 10901 ;; This function is called by:
 10902 ;;		_Mcu_Initialization
 10903 ;; This function uses a non-reentrant model
 10904 ;;
 10905                           
 10906                           
 10907                           ;psect for function _INT_Set
 10908  25A7                     _INT_Set:	
 10909                           
 10910                           ;MCU_B1.c: 274: WPUB0 = 0;
 10911                           
 10912                           ;incstack = 0
 10913                           ; Regs used in _INT_Set: []
 10914  25A7  0024               	movlb	4	; select bank4
 10915  25A8  100D               	bcf	13,0	;volatile
 10916                           
 10917                           ;MCU_B1.c: 275: INTE = 1;
 10918  25A9  160B               	bsf	11,4	;volatile
 10919                           
 10920                           ;MCU_B1.c: 276: PEIE = 1;
 10921  25AA  170B               	bsf	11,6	;volatile
 10922                           
 10923                           ;MCU_B1.c: 277: GIE = 1;
 10924  25AB  178B               	bsf	11,7	;volatile
 10925  25AC  0008               	return
 10926  25AD                     __end_of_INT_Set:	
 10927                           
 10928                           	psect	text57
 10929  25CE                     __ptext57:	
 10930 ;; *************** function _ADC_Set *****************
 10931 ;; Defined at:
 10932 ;;		line 359 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;		None               void
 10939 ;; Registers used:
 10940 ;;		wreg
 10941 ;; Tracked objects:
 10942 ;;		On entry : 0/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        0 bytes
 10951 ;; Hardware stack levels used:    1
 10952 ;; Hardware stack levels required when called:    4
 10953 ;; This function calls:
 10954 ;;		Nothing
 10955 ;; This function is called by:
 10956 ;;		_Mcu_Initialization
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _ADC_Set
 10962  25CE                     _ADC_Set:	
 10963                           
 10964                           ;MCU_B1.c: 360: ADCON1 = 0xf2;
 10965                           
 10966                           ;incstack = 0
 10967                           ; Regs used in _ADC_Set: [wreg]
 10968  25CE  30F2               	movlw	242
 10969  25CF  0021               	movlb	1	; select bank1
 10970  25D0  009E               	movwf	30	;volatile
 10971                           
 10972                           ;MCU_B1.c: 361: FVRCON = 0xc0;
 10973  25D1  30C0               	movlw	192
 10974  25D2  0022               	movlb	2	; select bank2
 10975  25D3  0097               	movwf	23	;volatile
 10976  25D4  0008               	return
 10977  25D5                     __end_of_ADC_Set:	
 10978                           
 10979                           	psect	text58
 10980  1872                     __ptext58:	
 10981 ;; *************** function _MainT_Initialization *****************
 10982 ;; Defined at:
 10983 ;;		line 90 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
 10984 ;; Parameters:    Size  Location     Type
 10985 ;;		None
 10986 ;; Auto vars:     Size  Location     Type
 10987 ;;		None
 10988 ;; Return value:  Size  Location     Type
 10989 ;;		None               void
 10990 ;; Registers used:
 10991 ;;		wreg, fsr1l, fsr1h
 10992 ;; Tracked objects:
 10993 ;;		On entry : 0/0
 10994 ;;		On exit  : 0/0
 10995 ;;		Unchanged: 0/0
 10996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;Total ram usage:        1 bytes
 11002 ;; Hardware stack levels used:    1
 11003 ;; Hardware stack levels required when called:    4
 11004 ;; This function calls:
 11005 ;;		Nothing
 11006 ;; This function is called by:
 11007 ;;		_main
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           
 11012                           ;psect for function _MainT_Initialization
 11013  1872                     _MainT_Initialization:	
 11014                           
 11015                           ;main_B1.c: 92: Product = &VarProduct;
 11016                           
 11017                           ;incstack = 0
 11018                           ; Regs used in _MainT_Initialization: [wregfsr1]
 11019  1872  30C5               	movlw	_VarProduct& (0+255)
 11020  1873  0020               	movlb	0	; select bank0
 11021  1874  00A0               	movwf	??_MainT_Initialization
 11022  1875  0820               	movf	??_MainT_Initialization,w
 11023  1876  00FD               	movwf	_Product
 11024                           
 11025                           ;main_B1.c: 93: Product->Data[20] = 209;
 11026  1877  30D1               	movlw	209
 11027  1878  00A0               	movwf	??_MainT_Initialization
 11028  1879  087D               	movf	_Product,w
 11029  187A  3E14               	addlw	20
 11030  187B  0086               	movwf	6
 11031  187C  3001               	movlw	1	; select bank2/3
 11032  187D  0087               	movwf	7
 11033  187E  0820               	movf	??_MainT_Initialization,w
 11034  187F  0081               	movwf	1
 11035                           
 11036                           ;main_B1.c: 96: TMain = &VarTMain;
 11037  1880  3020               	movlw	_VarTMain& (0+255)
 11038  1881  00A0               	movwf	??_MainT_Initialization
 11039  1882  0820               	movf	??_MainT_Initialization,w
 11040  1883  0021               	movlb	1	; select bank1
 11041  1884  00EB               	movwf	_TMain^(0+128)
 11042  1885  0008               	return
 11043  1886                     __end_of_MainT_Initialization:	
 11044                           
 11045                           	psect	text59
 11046  16FC                     __ptext59:	
 11047 ;; *************** function _MainT *****************
 11048 ;; Defined at:
 11049 ;;		line 102 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;		None
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;		None
 11054 ;; Return value:  Size  Location     Type
 11055 ;;		None               void
 11056 ;; Registers used:
 11057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;Total ram usage:        0 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    6
 11070 ;; This function calls:
 11071 ;;		_setBuz
 11072 ;;		_setLoad_Enable
 11073 ;;		_setRF_Enable
 11074 ;;		_setSw_Enable
 11075 ;;		_setTemp_Enable
 11076 ;; This function is called by:
 11077 ;;		_main
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           
 11082                           ;psect for function _MainT
 11083  16FC                     _MainT:	
 11084                           
 11085                           ;main_B1.c: 104: if (!TMain->PowerON) {
 11086                           
 11087                           ;incstack = 0
 11088                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11089  16FC  0021               	movlb	1	; select bank1
 11090  16FD  086B               	movf	_TMain^(0+128),w
 11091  16FE  0086               	movwf	6
 11092  16FF  3001               	movlw	1	; select bank2/3
 11093  1700  0087               	movwf	7
 11094  1701  1801               	btfsc	1,0
 11095  1702  2F47               	goto	l9380
 11096                           
 11097                           ;main_B1.c: 105: TMain->PowerCount++;
 11098  1703  0A6B               	incf	_TMain^(0+128),w
 11099  1704  0086               	movwf	6
 11100  1705  3001               	movlw	1	; select bank2/3
 11101  1706  0087               	movwf	7
 11102  1707  3001               	movlw	1
 11103  1708  0781               	addwf	1,f
 11104  1709  3141               	addfsr 1,1
 11105  170A  1803               	skipnc
 11106  170B  0A81               	incf	1,f
 11107                           
 11108                           ;main_B1.c: 106: if (TMain->PowerCount == 150)
 11109  170C  0A6B               	incf	_TMain^(0+128),w
 11110  170D  0086               	movwf	6
 11111  170E  3001               	movlw	1	; select bank2/3
 11112  170F  0087               	movwf	7
 11113  1710  3F40               	moviw [0]fsr1
 11114  1711  3A96               	xorlw	150
 11115  1712  1D03               	skipz
 11116  1713  2F16               	goto	u9505
 11117  1714  3F41               	moviw [1]fsr1
 11118  1715  3A00               	xorlw	0
 11119  1716                     u9505:	
 11120  1716  1D03               	skipz
 11121  1717  0008               	return
 11122                           
 11123                           ;main_B1.c: 107: {
 11124                           ;main_B1.c: 108: TMain->PowerCount = 0;
 11125  1718  0A6B               	incf	_TMain^(0+128),w
 11126  1719  0086               	movwf	6
 11127  171A  3001               	movlw	1	; select bank2/3
 11128  171B  0087               	movwf	7
 11129  171C  3000               	movlw	0
 11130  171D  3FC0               	movwi [0]fsr1
 11131  171E  3FC1               	movwi [1]fsr1
 11132                           
 11133                           ;main_B1.c: 109: TMain->PowerON = 1;
 11134  171F  086B               	movf	_TMain^(0+128),w
 11135  1720  0086               	movwf	6
 11136  1721  3001               	movlw	1	; select bank2/3
 11137  1722  0087               	movwf	7
 11138  1723  1401               	bsf	1,0
 11139                           
 11140                           ;main_B1.c: 112: setTemp_Enable(1);
 11141  1724  3001               	movlw	1
 11142  1725  31A6  2637  3196   	fcall	_setTemp_Enable
 11143                           
 11144                           ;main_B1.c: 116: setLoad_Enable(1);
 11145  1728  3001               	movlw	1
 11146  1729  31A7  279E  3196   	fcall	_setLoad_Enable
 11147                           
 11148                           ;main_B1.c: 122: setBuz(3, 50);
 11149  172C  3032               	movlw	50
 11150  172D  0020               	movlb	0	; select bank0
 11151  172E  00A6               	movwf	setBuz@time
 11152  172F  3000               	movlw	0
 11153  1730  00A7               	movwf	setBuz@time+1
 11154  1731  3003               	movlw	3
 11155  1732  3188  2019  3196   	fcall	_setBuz
 11156                           
 11157                           ;main_B1.c: 123: TMain->SelfTest = 1;
 11158  1735  0021               	movlb	1	; select bank1
 11159  1736  086B               	movf	_TMain^(0+128),w
 11160  1737  3E03               	addlw	3
 11161  1738  0086               	movwf	6
 11162  1739  3001               	movlw	1	; select bank2/3
 11163  173A  0087               	movwf	7
 11164  173B  1401               	bsf	1,0
 11165                           
 11166                           ;main_B1.c: 125: setSw_Enable(1);
 11167  173C  3001               	movlw	1
 11168  173D  31A7  2731  3196   	fcall	_setSw_Enable
 11169                           
 11170                           ;main_B1.c: 128: setRF_Enable(1, 1);
 11171  1740  0020               	movlb	0	; select bank0
 11172  1741  01A2               	clrf	setRF_Enable@command
 11173  1742  0AA2               	incf	setRF_Enable@command,f
 11174  1743  3001               	movlw	1
 11175  1744  319B  2360         	fcall	_setRF_Enable
 11176                           
 11177                           ;main_B1.c: 132: }
 11178                           ;main_B1.c: 133: } else {
 11179  1746  0008               	return
 11180  1747                     l9380:	
 11181                           
 11182                           ;main_B1.c: 141: TMain->Count1++;
 11183  1747  0021               	movlb	1	; select bank1
 11184  1748  086B               	movf	_TMain^(0+128),w
 11185  1749  3E06               	addlw	6
 11186  174A  0086               	movwf	6
 11187  174B  3001               	movlw	1	; select bank2/3
 11188  174C  0087               	movwf	7
 11189  174D  3001               	movlw	1
 11190  174E  0781               	addwf	1,f
 11191  174F  3141               	addfsr 1,1
 11192  1750  1803               	skipnc
 11193  1751  0A81               	incf	1,f
 11194                           
 11195                           ;main_B1.c: 142: if (TMain->Count1 == 100)
 11196  1752  086B               	movf	_TMain^(0+128),w
 11197  1753  3E06               	addlw	6
 11198  1754  0086               	movwf	6
 11199  1755  3001               	movlw	1	; select bank2/3
 11200  1756  0087               	movwf	7
 11201  1757  3F40               	moviw [0]fsr1
 11202  1758  3A64               	xorlw	100
 11203  1759  1D03               	skipz
 11204  175A  2F5D               	goto	u9515
 11205  175B  3F41               	moviw [1]fsr1
 11206  175C  3A00               	xorlw	0
 11207  175D                     u9515:	
 11208  175D  1D03               	skipz
 11209  175E  0008               	return
 11210                           
 11211                           ;main_B1.c: 143: {
 11212                           ;main_B1.c: 144: TMain->Count1 = 0;
 11213  175F  086B               	movf	_TMain^(0+128),w
 11214  1760  3E06               	addlw	6
 11215  1761  0086               	movwf	6
 11216  1762  3001               	movlw	1	; select bank2/3
 11217  1763  0087               	movwf	7
 11218  1764  3000               	movlw	0
 11219  1765  3FC0               	movwi [0]fsr1
 11220  1766  3FC1               	movwi [1]fsr1
 11221                           
 11222                           ;main_B1.c: 157: if (TMain->Flag) {
 11223  1767  086B               	movf	_TMain^(0+128),w
 11224  1768  0086               	movwf	6
 11225  1769  3001               	movlw	1	; select bank2/3
 11226  176A  0087               	movwf	7
 11227  176B  1D81               	btfss	1,3
 11228  176C  2F73               	goto	l9388
 11229                           
 11230                           ;main_B1.c: 158: TMain->Flag = 0;
 11231  176D  086B               	movf	_TMain^(0+128),w
 11232  176E  0086               	movwf	6
 11233  176F  3001               	movlw	1	; select bank2/3
 11234  1770  0087               	movwf	7
 11235  1771  1181               	bcf	1,3
 11236                           
 11237                           ;main_B1.c: 167: } else {
 11238  1772  0008               	return
 11239  1773                     l9388:	
 11240                           
 11241                           ;main_B1.c: 168: TMain->Flag = 1;
 11242  1773  086B               	movf	_TMain^(0+128),w
 11243  1774  0086               	movwf	6
 11244  1775  3001               	movlw	1	; select bank2/3
 11245  1776  0087               	movwf	7
 11246  1777  1581               	bsf	1,3
 11247  1778  0008               	return
 11248  1779                     __end_of_MainT:	
 11249                           
 11250                           	psect	text60
 11251  2637                     __ptext60:	
 11252 ;; *************** function _setTemp_Enable *****************
 11253 ;; Defined at:
 11254 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
 11255 ;; Parameters:    Size  Location     Type
 11256 ;;  command         1    wreg     unsigned char 
 11257 ;; Auto vars:     Size  Location     Type
 11258 ;;  command         1    0[BANK0 ] unsigned char 
 11259 ;; Return value:  Size  Location     Type
 11260 ;;		None               void
 11261 ;; Registers used:
 11262 ;;		wreg, fsr1l, fsr1h
 11263 ;; Tracked objects:
 11264 ;;		On entry : 0/0
 11265 ;;		On exit  : 0/0
 11266 ;;		Unchanged: 0/0
 11267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;Total ram usage:        1 bytes
 11273 ;; Hardware stack levels used:    1
 11274 ;; Hardware stack levels required when called:    4
 11275 ;; This function calls:
 11276 ;;		Nothing
 11277 ;; This function is called by:
 11278 ;;		_MainT
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           
 11283                           ;psect for function _setTemp_Enable
 11284  2637                     _setTemp_Enable:	
 11285                           
 11286                           ;incstack = 0
 11287                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11288                           ;setTemp_Enable@command stored from wreg
 11289  2637  0020               	movlb	0	; select bank0
 11290  2638  00A0               	movwf	setTemp_Enable@command
 11291                           
 11292                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11293  2639  087A               	movf	_Temp,w
 11294  263A  0086               	movwf	6
 11295  263B  3001               	movlw	1	; select bank2/3
 11296  263C  0087               	movwf	7
 11297  263D  0820               	movf	setTemp_Enable@command,w
 11298  263E  1001               	bcf	1,0
 11299  263F  1D03               	skipz
 11300  2640  1401               	bsf	1,0
 11301  2641  0008               	return
 11302  2642                     __end_of_setTemp_Enable:	
 11303                           
 11304                           	psect	text61
 11305  279E                     __ptext61:	
 11306 ;; *************** function _setLoad_Enable *****************
 11307 ;; Defined at:
 11308 ;;		line 260 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  command         1    wreg     unsigned char 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  command         1    0[BANK0 ] unsigned char 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, fsr1l, fsr1h
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        1 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    4
 11329 ;; This function calls:
 11330 ;;		Nothing
 11331 ;; This function is called by:
 11332 ;;		_MainT
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           
 11337                           ;psect for function _setLoad_Enable
 11338  279E                     _setLoad_Enable:	
 11339                           
 11340                           ;incstack = 0
 11341                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11342                           ;setLoad_Enable@command stored from wreg
 11343  279E  0020               	movlb	0	; select bank0
 11344  279F  00A0               	movwf	setLoad_Enable@command
 11345                           
 11346                           ;OverLoad_B1.c: 261: Load->Enable = command;
 11347  27A0  087B               	movf	_Load,w
 11348  27A1  0086               	movwf	6
 11349  27A2  3002               	movlw	2	; select bank4/5
 11350  27A3  0087               	movwf	7
 11351  27A4  0820               	movf	setLoad_Enable@command,w
 11352  27A5  1001               	bcf	1,0
 11353  27A6  1D03               	skipz
 11354  27A7  1401               	bsf	1,0
 11355                           
 11356                           ;OverLoad_B1.c: 262: Load->GO = 0;
 11357  27A8  087B               	movf	_Load,w
 11358  27A9  0086               	movwf	6
 11359  27AA  3002               	movlw	2	; select bank4/5
 11360  27AB  0087               	movwf	7
 11361  27AC  1081               	bcf	1,1
 11362  27AD  0008               	return
 11363  27AE                     __end_of_setLoad_Enable:	
 11364                           
 11365                           	psect	text62
 11366  004D                     __ptext62:	
 11367 ;; *************** function _Load_Main *****************
 11368 ;; Defined at:
 11369 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11370 ;; Parameters:    Size  Location     Type
 11371 ;;		None
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  i               1   17[BANK0 ] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;		None               void
 11376 ;; Registers used:
 11377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:        5 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    9
 11390 ;; This function calls:
 11391 ;;		___lwdiv
 11392 ;;		___wmul
 11393 ;;		_getPF_Safe
 11394 ;;		_getTemp_Safe
 11395 ;;		_setDimmerLights_Clear
 11396 ;;		_setLoad_AH_AL_Restore
 11397 ;;		_setLoad_Exceptions
 11398 ;; This function is called by:
 11399 ;;		_main
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           
 11404                           ;psect for function _Load_Main
 11405  004D                     _Load_Main:	
 11406                           
 11407                           ;OverLoad_B1.c: 41: char i;
 11408                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11412  004D  087B               	movf	_Load,w
 11413  004E  0086               	movwf	6
 11414  004F  3002               	movlw	2	; select bank4/5
 11415  0050  0087               	movwf	7
 11416  0051  1E81               	btfss	1,5
 11417  0052  287A               	goto	l9210
 11418                           
 11419                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 11420  0053  087B               	movf	_Load,w
 11421  0054  3E03               	addlw	3
 11422  0055  0086               	movwf	6
 11423  0056  3002               	movlw	2	; select bank4/5
 11424  0057  0087               	movwf	7
 11425  0058  3001               	movlw	1
 11426  0059  0781               	addwf	1,f
 11427  005A  3141               	addfsr 1,1
 11428  005B  1803               	skipnc
 11429  005C  0A81               	incf	1,f
 11430                           
 11431                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 11432  005D  087B               	movf	_Load,w
 11433  005E  3E03               	addlw	3
 11434  005F  0086               	movwf	6
 11435  0060  3002               	movlw	2	; select bank4/5
 11436  0061  0087               	movwf	7
 11437  0062  3F40               	moviw [0]fsr1
 11438  0063  0020               	movlb	0	; select bank0
 11439  0064  00AD               	movwf	??_Load_Main
 11440  0065  3F41               	moviw [1]fsr1
 11441  0066  00AE               	movwf	??_Load_Main+1
 11442  0067  3003               	movlw	3
 11443  0068  022E               	subwf	??_Load_Main+1,w
 11444  0069  30E8               	movlw	232
 11445  006A  1903               	skipnz
 11446  006B  022D               	subwf	??_Load_Main,w
 11447  006C  1C03               	skipc
 11448  006D  0008               	return
 11449                           
 11450                           ;OverLoad_B1.c: 45: {
 11451                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 11452  006E  087B               	movf	_Load,w
 11453  006F  3E03               	addlw	3
 11454  0070  0086               	movwf	6
 11455  0071  3002               	movlw	2	; select bank4/5
 11456  0072  0087               	movwf	7
 11457  0073  3000               	movlw	0
 11458  0074  3FC0               	movwi [0]fsr1
 11459  0075  3FC1               	movwi [1]fsr1
 11460                           
 11461                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11462  0076  3000               	movlw	0
 11463  0077  319F  276B         	fcall	_setLoad_Exceptions
 11464                           
 11465                           ;OverLoad_B1.c: 48: }
 11466                           ;OverLoad_B1.c: 49: } else {
 11467  0079  0008               	return
 11468  007A                     l9210:	
 11469                           
 11470                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11471  007A  087B               	movf	_Load,w
 11472  007B  0086               	movwf	6
 11473  007C  3002               	movlw	2	; select bank4/5
 11474  007D  0087               	movwf	7
 11475  007E  1E01               	btfss	1,4
 11476  007F  2A7A               	goto	l9292
 11477                           
 11478                           ;OverLoad_B1.c: 51: Load->Time++;
 11479  0080  0A7B               	incf	_Load,w
 11480  0081  0086               	movwf	6
 11481  0082  3002               	movlw	2	; select bank4/5
 11482  0083  0087               	movwf	7
 11483  0084  3001               	movlw	1
 11484  0085  0781               	addwf	1,f
 11485  0086  3141               	addfsr 1,1
 11486  0087  1803               	skipnc
 11487  0088  0A81               	incf	1,f
 11488                           
 11489                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11490  0089  0A7B               	incf	_Load,w
 11491  008A  0086               	movwf	6
 11492  008B  3002               	movlw	2	; select bank4/5
 11493  008C  0087               	movwf	7
 11494  008D  3F40               	moviw [0]fsr1
 11495  008E  0020               	movlb	0	; select bank0
 11496  008F  00AD               	movwf	??_Load_Main
 11497  0090  3F41               	moviw [1]fsr1
 11498  0091  00AE               	movwf	??_Load_Main+1
 11499  0092  3000               	movlw	0
 11500  0093  022E               	subwf	??_Load_Main+1,w
 11501  0094  3005               	movlw	5
 11502  0095  1903               	skipnz
 11503  0096  022D               	subwf	??_Load_Main,w
 11504  0097  1C03               	skipc
 11505  0098  0008               	return
 11506                           
 11507                           ;OverLoad_B1.c: 53: {
 11508                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11509  0099  0A7B               	incf	_Load,w
 11510  009A  0086               	movwf	6
 11511  009B  3002               	movlw	2	; select bank4/5
 11512  009C  0087               	movwf	7
 11513  009D  3000               	movlw	0
 11514  009E  3FC0               	movwi [0]fsr1
 11515  009F  3FC1               	movwi [1]fsr1
 11516                           
 11517                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11518  00A0  087B               	movf	_Load,w
 11519  00A1  0086               	movwf	6
 11520  00A2  3002               	movlw	2	; select bank4/5
 11521  00A3  0087               	movwf	7
 11522  00A4  1201               	bcf	1,4
 11523                           
 11524                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11525  00A5  087B               	movf	_Load,w
 11526  00A6  3E45               	addlw	69
 11527  00A7  0086               	movwf	6
 11528  00A8  3002               	movlw	2	; select bank4/5
 11529  00A9  0087               	movwf	7
 11530  00AA  087B               	movf	_Load,w
 11531  00AB  3E44               	addlw	68
 11532  00AC  0084               	movwf	4
 11533  00AD  3002               	movlw	2	; select bank4/5
 11534  00AE  0085               	movwf	5
 11535  00AF  0800               	movf	0,w
 11536  00B0  00AD               	movwf	??_Load_Main
 11537  00B1  087B               	movf	_Load,w
 11538  00B2  3E43               	addlw	67
 11539  00B3  0084               	movwf	4
 11540  00B4  3002               	movlw	2	; select bank4/5
 11541  00B5  0085               	movwf	5
 11542  00B6  0800               	movf	0,w
 11543  00B7  072D               	addwf	??_Load_Main,w
 11544  00B8  0701               	addwf	1,w
 11545  00B9  00AE               	movwf	??_Load_Main+1
 11546  00BA  087B               	movf	_Load,w
 11547  00BB  3E3E               	addlw	62
 11548  00BC  0086               	movwf	6
 11549  00BD  3002               	movlw	2	; select bank4/5
 11550  00BE  0087               	movwf	7
 11551  00BF  082E               	movf	??_Load_Main+1,w
 11552  00C0  0081               	movwf	1
 11553                           
 11554                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11555  00C1  01B1               	clrf	Load_Main@i
 11556  00C2  0AB1               	incf	Load_Main@i,f
 11557  00C3  3004               	movlw	4
 11558  00C4  0231               	subwf	Load_Main@i,w
 11559  00C5  1803               	btfsc	3,0
 11560  00C6  28F5               	goto	l9232
 11561  00C7                     l9226:	
 11562                           
 11563                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11564  00C7  3531               	lslf	Load_Main@i,w
 11565  00C8  3E08               	addlw	8
 11566  00C9  077B               	addwf	_Load,w
 11567  00CA  00AD               	movwf	??_Load_Main
 11568  00CB  082D               	movf	??_Load_Main,w
 11569  00CC  0086               	movwf	6
 11570  00CD  3002               	movlw	2	; select bank4/5
 11571  00CE  0087               	movwf	7
 11572  00CF  087B               	movf	_Load,w
 11573  00D0  3E2E               	addlw	46
 11574  00D1  0084               	movwf	4
 11575  00D2  3002               	movlw	2	; select bank4/5
 11576  00D3  0085               	movwf	5
 11577  00D4  3F40               	moviw [0]fsr1
 11578  00D5  0780               	addwf	0,f
 11579  00D6  3101               	addfsr 0,1
 11580  00D7  3F41               	moviw [1]fsr1
 11581  00D8  3D80               	addwfc	0,f
 11582  00D9  313F               	addfsr 0,-1
 11583                           
 11584                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11585  00DA  3531               	lslf	Load_Main@i,w
 11586  00DB  3E1A               	addlw	26
 11587  00DC  077B               	addwf	_Load,w
 11588  00DD  00AD               	movwf	??_Load_Main
 11589  00DE  082D               	movf	??_Load_Main,w
 11590  00DF  0086               	movwf	6
 11591  00E0  3002               	movlw	2	; select bank4/5
 11592  00E1  0087               	movwf	7
 11593  00E2  087B               	movf	_Load,w
 11594  00E3  3E30               	addlw	48
 11595  00E4  0084               	movwf	4
 11596  00E5  3002               	movlw	2	; select bank4/5
 11597  00E6  0085               	movwf	5
 11598  00E7  3F40               	moviw [0]fsr1
 11599  00E8  0780               	addwf	0,f
 11600  00E9  3101               	addfsr 0,1
 11601  00EA  3F41               	moviw [1]fsr1
 11602  00EB  3D80               	addwfc	0,f
 11603  00EC  313F               	addfsr 0,-1
 11604  00ED  3001               	movlw	1
 11605  00EE  00AD               	movwf	??_Load_Main
 11606  00EF  082D               	movf	??_Load_Main,w
 11607  00F0  07B1               	addwf	Load_Main@i,f
 11608  00F1  3004               	movlw	4
 11609  00F2  0231               	subwf	Load_Main@i,w
 11610  00F3  1C03               	skipc
 11611  00F4  28C7               	goto	l9226
 11612  00F5                     l9232:	
 11613                           
 11614                           ;OverLoad_B1.c: 60: }
 11615                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11616  00F5  3003               	movlw	3
 11617  00F6  00A0               	movwf	___lwdiv@divisor
 11618  00F7  3000               	movlw	0
 11619  00F8  00A1               	movwf	___lwdiv@divisor+1
 11620  00F9  087B               	movf	_Load,w
 11621  00FA  3E2E               	addlw	46
 11622  00FB  0086               	movwf	6
 11623  00FC  3002               	movlw	2	; select bank4/5
 11624  00FD  0087               	movwf	7
 11625  00FE  3F40               	moviw [0]fsr1
 11626  00FF  00A2               	movwf	___lwdiv@dividend
 11627  0100  3F41               	moviw [1]fsr1
 11628  0101  00A3               	movwf	___lwdiv@dividend+1
 11629  0102  319D  2510  3180   	fcall	___lwdiv
 11630  0105  087B               	movf	_Load,w
 11631  0106  3E2E               	addlw	46
 11632  0107  0086               	movwf	6
 11633  0108  3002               	movlw	2	; select bank4/5
 11634  0109  0087               	movwf	7
 11635  010A  0020               	movlb	0	; select bank0
 11636  010B  0820               	movf	?___lwdiv,w
 11637  010C  3FC0               	movwi [0]fsr1
 11638  010D  0821               	movf	?___lwdiv+1,w
 11639  010E  3FC1               	movwi [1]fsr1
 11640                           
 11641                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11642  010F  3003               	movlw	3
 11643  0110  00A0               	movwf	___lwdiv@divisor
 11644  0111  3000               	movlw	0
 11645  0112  00A1               	movwf	___lwdiv@divisor+1
 11646  0113  087B               	movf	_Load,w
 11647  0114  3E30               	addlw	48
 11648  0115  0086               	movwf	6
 11649  0116  3002               	movlw	2	; select bank4/5
 11650  0117  0087               	movwf	7
 11651  0118  3F40               	moviw [0]fsr1
 11652  0119  00A2               	movwf	___lwdiv@dividend
 11653  011A  3F41               	moviw [1]fsr1
 11654  011B  00A3               	movwf	___lwdiv@dividend+1
 11655  011C  319D  2510  3180   	fcall	___lwdiv
 11656  011F  087B               	movf	_Load,w
 11657  0120  3E30               	addlw	48
 11658  0121  0086               	movwf	6
 11659  0122  3002               	movlw	2	; select bank4/5
 11660  0123  0087               	movwf	7
 11661  0124  0020               	movlb	0	; select bank0
 11662  0125  0820               	movf	?___lwdiv,w
 11663  0126  3FC0               	movwi [0]fsr1
 11664  0127  0821               	movf	?___lwdiv+1,w
 11665  0128  3FC1               	movwi [1]fsr1
 11666                           
 11667                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11668  0129  087B               	movf	_Load,w
 11669  012A  3E2E               	addlw	46
 11670  012B  0086               	movwf	6
 11671  012C  3002               	movlw	2	; select bank4/5
 11672  012D  0087               	movwf	7
 11673  012E  3F40               	moviw [0]fsr1
 11674  012F  00AD               	movwf	??_Load_Main
 11675  0130  3F41               	moviw [1]fsr1
 11676  0131  00AE               	movwf	??_Load_Main+1
 11677  0132  087B               	movf	_Load,w
 11678  0133  3E30               	addlw	48
 11679  0134  0086               	movwf	6
 11680  0135  3002               	movlw	2	; select bank4/5
 11681  0136  0087               	movwf	7
 11682  0137  3F40               	moviw [0]fsr1
 11683  0138  00AF               	movwf	??_Load_Main+2
 11684  0139  3F41               	moviw [1]fsr1
 11685  013A  00B0               	movwf	??_Load_Main+3
 11686  013B  082E               	movf	??_Load_Main+1,w
 11687  013C  0230               	subwf	??_Load_Main+3,w
 11688  013D  1D03               	skipz
 11689  013E  2941               	goto	u9285
 11690  013F  082D               	movf	??_Load_Main,w
 11691  0140  022F               	subwf	??_Load_Main+2,w
 11692  0141                     u9285:	
 11693  0141  1803               	skipnc
 11694  0142  2A77               	goto	l9290
 11695                           
 11696                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11697  0143  087B               	movf	_Load,w
 11698  0144  3E2E               	addlw	46
 11699  0145  0086               	movwf	6
 11700  0146  3002               	movlw	2	; select bank4/5
 11701  0147  0087               	movwf	7
 11702  0148  087B               	movf	_Load,w
 11703  0149  3E30               	addlw	48
 11704  014A  0084               	movwf	4
 11705  014B  3002               	movlw	2	; select bank4/5
 11706  014C  0085               	movwf	5
 11707  014D  3F00               	moviw [0]fsr0
 11708  014E  00AD               	movwf	??_Load_Main
 11709  014F  3F01               	moviw [1]fsr0
 11710  0150  00AE               	movwf	??_Load_Main+1
 11711  0151  09AD               	comf	??_Load_Main,f
 11712  0152  09AE               	comf	??_Load_Main+1,f
 11713  0153  0AAD               	incf	??_Load_Main,f
 11714  0154  1903               	skipnz
 11715  0155  0AAE               	incf	??_Load_Main+1,f
 11716  0156  3F40               	moviw [0]fsr1
 11717  0157  072D               	addwf	??_Load_Main,w
 11718  0158  00AF               	movwf	??_Load_Main+2
 11719  0159  3F41               	moviw [1]fsr1
 11720  015A  3D2E               	addwfc	??_Load_Main+1,w
 11721  015B  00B0               	movwf	??_Load_Main+3
 11722  015C  087B               	movf	_Load,w
 11723  015D  3E2C               	addlw	44
 11724  015E  0086               	movwf	6
 11725  015F  3002               	movlw	2	; select bank4/5
 11726  0160  0087               	movwf	7
 11727  0161  082F               	movf	??_Load_Main+2,w
 11728  0162  3FC0               	movwi [0]fsr1
 11729  0163  0830               	movf	??_Load_Main+3,w
 11730  0164  3FC1               	movwi [1]fsr1
 11731                           
 11732                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11733  0165  087B               	movf	_Load,w
 11734  0166  3E3A               	addlw	58
 11735  0167  0086               	movwf	6
 11736  0168  3002               	movlw	2	; select bank4/5
 11737  0169  0087               	movwf	7
 11738  016A  3002               	movlw	2
 11739  016B  0201               	subwf	1,w
 11740  016C  1803               	skipnc
 11741  016D  29BE               	goto	l9254
 11742                           
 11743                           ;OverLoad_B1.c: 67: Load->Count++;
 11744  016E  3001               	movlw	1
 11745  016F  00AD               	movwf	??_Load_Main
 11746  0170  087B               	movf	_Load,w
 11747  0171  3E3A               	addlw	58
 11748  0172  0086               	movwf	6
 11749  0173  3002               	movlw	2	; select bank4/5
 11750  0174  0087               	movwf	7
 11751  0175  082D               	movf	??_Load_Main,w
 11752  0176  0781               	addwf	1,f
 11753                           
 11754                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11755  0177  087B               	movf	_Load,w
 11756  0178  3E3A               	addlw	58
 11757  0179  0086               	movwf	6
 11758  017A  3002               	movlw	2	; select bank4/5
 11759  017B  0087               	movwf	7
 11760  017C  0801               	movf	1,w
 11761  017D  3A01               	xorlw	1
 11762  017E  1D03               	skipz
 11763  017F  298A               	goto	l9246
 11764                           
 11765                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11766  0180  087B               	movf	_Load,w
 11767  0181  3E36               	addlw	54
 11768  0182  0086               	movwf	6
 11769  0183  3002               	movlw	2	; select bank4/5
 11770  0184  0087               	movwf	7
 11771  0185  30F4               	movlw	244
 11772  0186  3FC0               	movwi [0]fsr1
 11773  0187  3001               	movlw	1
 11774  0188  3FC1               	movwi [1]fsr1
 11775                           
 11776                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11777  0189  29BE               	goto	l9254
 11778  018A                     l9246:	
 11779  018A  087B               	movf	_Load,w
 11780  018B  3E3A               	addlw	58
 11781  018C  0086               	movwf	6
 11782  018D  3002               	movlw	2	; select bank4/5
 11783  018E  0087               	movwf	7
 11784  018F  0801               	movf	1,w
 11785  0190  3A02               	xorlw	2
 11786  0191  1D03               	skipz
 11787  0192  29BE               	goto	l9254
 11788                           
 11789                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11790  0193  087B               	movf	_Load,w
 11791  0194  3E3E               	addlw	62
 11792  0195  0086               	movwf	6
 11793  0196  3002               	movlw	2	; select bank4/5
 11794  0197  0087               	movwf	7
 11795  0198  0801               	movf	1,w
 11796  0199  3A01               	xorlw	1
 11797  019A  1D03               	skipz
 11798  019B  29A6               	goto	l9252
 11799                           
 11800                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x42;
 11801  019C  087B               	movf	_Load,w
 11802  019D  3E36               	addlw	54
 11803  019E  0086               	movwf	6
 11804  019F  3002               	movlw	2	; select bank4/5
 11805  01A0  0087               	movwf	7
 11806  01A1  3042               	movlw	66
 11807  01A2  3FC0               	movwi [0]fsr1
 11808  01A3  3000               	movlw	0
 11809  01A4  3FC1               	movwi [1]fsr1
 11810                           
 11811                           ;OverLoad_B1.c: 73: } else {
 11812  01A5  29BE               	goto	l9254
 11813  01A6                     l9252:	
 11814                           
 11815                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x42 + Load->TotalLoad) - 0x08;
 11816  01A6  087B               	movf	_Load,w
 11817  01A7  3E06               	addlw	6
 11818  01A8  0086               	movwf	6
 11819  01A9  3002               	movlw	2	; select bank4/5
 11820  01AA  0087               	movwf	7
 11821  01AB  3F40               	moviw [0]fsr1
 11822  01AC  00AD               	movwf	??_Load_Main
 11823  01AD  3F41               	moviw [1]fsr1
 11824  01AE  00AE               	movwf	??_Load_Main+1
 11825  01AF  082D               	movf	??_Load_Main,w
 11826  01B0  3E3A               	addlw	58
 11827  01B1  00AF               	movwf	??_Load_Main+2
 11828  01B2  3000               	movlw	0
 11829  01B3  3D2E               	addwfc	??_Load_Main+1,w
 11830  01B4  00B0               	movwf	??_Load_Main+3
 11831  01B5  087B               	movf	_Load,w
 11832  01B6  3E36               	addlw	54
 11833  01B7  0086               	movwf	6
 11834  01B8  3002               	movlw	2	; select bank4/5
 11835  01B9  0087               	movwf	7
 11836  01BA  082F               	movf	??_Load_Main+2,w
 11837  01BB  3FC0               	movwi [0]fsr1
 11838  01BC  0830               	movf	??_Load_Main+3,w
 11839  01BD  3FC1               	movwi [1]fsr1
 11840  01BE                     l9254:	
 11841                           
 11842                           ;OverLoad_B1.c: 75: }
 11843                           ;OverLoad_B1.c: 76: }
 11844                           ;OverLoad_B1.c: 77: }
 11845                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 11846  01BE  087B               	movf	_Load,w
 11847  01BF  3E36               	addlw	54
 11848  01C0  0086               	movwf	6
 11849  01C1  3002               	movlw	2	; select bank4/5
 11850  01C2  0087               	movwf	7
 11851  01C3  3F40               	moviw [0]fsr1
 11852  01C4  00AD               	movwf	??_Load_Main
 11853  01C5  3F41               	moviw [1]fsr1
 11854  01C6  00AE               	movwf	??_Load_Main+1
 11855  01C7  087B               	movf	_Load,w
 11856  01C8  3E2C               	addlw	44
 11857  01C9  0086               	movwf	6
 11858  01CA  3002               	movlw	2	; select bank4/5
 11859  01CB  0087               	movwf	7
 11860  01CC  3F40               	moviw [0]fsr1
 11861  01CD  00AF               	movwf	??_Load_Main+2
 11862  01CE  3F41               	moviw [1]fsr1
 11863  01CF  00B0               	movwf	??_Load_Main+3
 11864  01D0  082E               	movf	??_Load_Main+1,w
 11865  01D1  0230               	subwf	??_Load_Main+3,w
 11866  01D2  1D03               	skipz
 11867  01D3  29D6               	goto	u9335
 11868  01D4  082D               	movf	??_Load_Main,w
 11869  01D5  022F               	subwf	??_Load_Main+2,w
 11870  01D6                     u9335:	
 11871  01D6  1C03               	skipc
 11872  01D7  29F5               	goto	l9264
 11873                           
 11874                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 11875  01D8  3001               	movlw	1
 11876  01D9  00AD               	movwf	??_Load_Main
 11877  01DA  087B               	movf	_Load,w
 11878  01DB  3E3C               	addlw	60
 11879  01DC  0086               	movwf	6
 11880  01DD  3002               	movlw	2	; select bank4/5
 11881  01DE  0087               	movwf	7
 11882  01DF  082D               	movf	??_Load_Main,w
 11883  01E0  0781               	addwf	1,f
 11884                           
 11885                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 11886  01E1  087B               	movf	_Load,w
 11887  01E2  3E3C               	addlw	60
 11888  01E3  0086               	movwf	6
 11889  01E4  3002               	movlw	2	; select bank4/5
 11890  01E5  0087               	movwf	7
 11891  01E6  3003               	movlw	3
 11892  01E7  0201               	subwf	1,w
 11893  01E8  1C03               	skipc
 11894  01E9  2A77               	goto	l9290
 11895                           
 11896                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 11897  01EA  087B               	movf	_Load,w
 11898  01EB  3E3C               	addlw	60
 11899  01EC  0086               	movwf	6
 11900  01ED  3002               	movlw	2	; select bank4/5
 11901  01EE  0087               	movwf	7
 11902  01EF  0181               	clrf	1
 11903                           
 11904                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 11905  01F0  3001               	movlw	1
 11906  01F1  319F  276B  3180   	fcall	_setLoad_Exceptions
 11907                           
 11908                           ;OverLoad_B1.c: 92: }
 11909                           ;OverLoad_B1.c: 93: } else {
 11910  01F4  2A77               	goto	l9290
 11911  01F5                     l9264:	
 11912                           
 11913                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 11914  01F5  087B               	movf	_Load,w
 11915  01F6  3E3C               	addlw	60
 11916  01F7  0086               	movwf	6
 11917  01F8  3002               	movlw	2	; select bank4/5
 11918  01F9  0087               	movwf	7
 11919  01FA  0181               	clrf	1
 11920                           
 11921                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 11922  01FB  087B               	movf	_Load,w
 11923  01FC  3E42               	addlw	66
 11924  01FD  0086               	movwf	6
 11925  01FE  3002               	movlw	2	; select bank4/5
 11926  01FF  0087               	movwf	7
 11927  0200  300A               	movlw	10
 11928  0201  0201               	subwf	1,w
 11929  0202  1803               	skipnc
 11930  0203  2A0E               	goto	l9270
 11931                           
 11932                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 11933  0204  3001               	movlw	1
 11934  0205  0020               	movlb	0	; select bank0
 11935  0206  00AD               	movwf	??_Load_Main
 11936  0207  087B               	movf	_Load,w
 11937  0208  3E42               	addlw	66
 11938  0209  0086               	movwf	6
 11939  020A  3002               	movlw	2	; select bank4/5
 11940  020B  0087               	movwf	7
 11941  020C  082D               	movf	??_Load_Main,w
 11942  020D  0781               	addwf	1,f
 11943  020E                     l9270:	
 11944                           
 11945                           ;OverLoad_B1.c: 97: }
 11946                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 11947  020E  087B               	movf	_Load,w
 11948  020F  3E42               	addlw	66
 11949  0210  0086               	movwf	6
 11950  0211  3002               	movlw	2	; select bank4/5
 11951  0212  0087               	movwf	7
 11952  0213  300A               	movlw	10
 11953  0214  0201               	subwf	1,w
 11954  0215  1C03               	skipc
 11955  0216  2A77               	goto	l9290
 11956                           
 11957                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 11958  0217  087B               	movf	_Load,w
 11959  0218  0086               	movwf	6
 11960  0219  3002               	movlw	2	; select bank4/5
 11961  021A  0087               	movwf	7
 11962  021B  1581               	bsf	1,3
 11963                           
 11964                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 11965  021C  0020               	movlb	0	; select bank0
 11966  021D  01A2               	clrf	setDimmerLights_Clear@command
 11967  021E  0AA2               	incf	setDimmerLights_Clear@command,f
 11968  021F  3001               	movlw	1
 11969  0220  31A7  278E  3180   	fcall	_setDimmerLights_Clear
 11970                           
 11971                           ;OverLoad_B1.c: 107: ;;
 11972                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 11973  0223  087B               	movf	_Load,w
 11974  0224  3E46               	addlw	70
 11975  0225  0086               	movwf	6
 11976  0226  3002               	movlw	2	; select bank4/5
 11977  0227  0087               	movwf	7
 11978  0228  1C01               	btfss	1,0
 11979  0229  2A3E               	goto	l9282
 11980                           
 11981                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 11982  022A  087B               	movf	_Load,w
 11983  022B  3E46               	addlw	70
 11984  022C  0086               	movwf	6
 11985  022D  3002               	movlw	2	; select bank4/5
 11986  022E  0087               	movwf	7
 11987  022F  1001               	bcf	1,0
 11988                           
 11989                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 11990  0230  087B               	movf	_Load,w
 11991  0231  3E2C               	addlw	44
 11992  0232  0086               	movwf	6
 11993  0233  3002               	movlw	2	; select bank4/5
 11994  0234  0087               	movwf	7
 11995  0235  087B               	movf	_Load,w
 11996  0236  3E06               	addlw	6
 11997  0237  0084               	movwf	4
 11998  0238  3002               	movlw	2	; select bank4/5
 11999  0239  0085               	movwf	5
 12000  023A  3F40               	moviw [0]fsr1
 12001  023B  3F80               	movwi [0]fsr0
 12002  023C  3F41               	moviw [1]fsr1
 12003  023D  3F81               	movwi [1]fsr0
 12004  023E                     l9282:	
 12005                           
 12006                           ;OverLoad_B1.c: 136: }
 12007                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 12008  023E  087B               	movf	_Load,w
 12009  023F  3E46               	addlw	70
 12010  0240  0086               	movwf	6
 12011  0241  3002               	movlw	2	; select bank4/5
 12012  0242  0087               	movwf	7
 12013  0243  1C81               	btfss	1,1
 12014  0244  2A77               	goto	l9290
 12015                           
 12016                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 12017  0245  087B               	movf	_Load,w
 12018  0246  3E46               	addlw	70
 12019  0247  0086               	movwf	6
 12020  0248  3002               	movlw	2	; select bank4/5
 12021  0249  0087               	movwf	7
 12022  024A  1081               	bcf	1,1
 12023                           
 12024                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 12025  024B  087B               	movf	_Load,w
 12026  024C  3E2C               	addlw	44
 12027  024D  0086               	movwf	6
 12028  024E  3002               	movlw	2	; select bank4/5
 12029  024F  0087               	movwf	7
 12030  0250  087B               	movf	_Load,w
 12031  0251  3E06               	addlw	6
 12032  0252  0084               	movwf	4
 12033  0253  3002               	movlw	2	; select bank4/5
 12034  0254  0085               	movwf	5
 12035  0255  3F40               	moviw [0]fsr1
 12036  0256  3F80               	movwi [0]fsr0
 12037  0257  3F41               	moviw [1]fsr1
 12038  0258  3F81               	movwi [1]fsr0
 12039                           
 12040                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x42 * Load->LightsCount;
 12041  0259  087B               	movf	_Load,w
 12042  025A  3E3E               	addlw	62
 12043  025B  0086               	movwf	6
 12044  025C  3002               	movlw	2	; select bank4/5
 12045  025D  0087               	movwf	7
 12046  025E  0801               	movf	1,w
 12047  025F  0020               	movlb	0	; select bank0
 12048  0260  00AD               	movwf	??_Load_Main
 12049  0261  01AE               	clrf	??_Load_Main+1
 12050  0262  082D               	movf	??_Load_Main,w
 12051  0263  00A0               	movwf	___wmul@multiplier
 12052  0264  082E               	movf	??_Load_Main+1,w
 12053  0265  00A1               	movwf	___wmul@multiplier+1
 12054  0266  3042               	movlw	66
 12055  0267  00A2               	movwf	___wmul@multiplicand
 12056  0268  3000               	movlw	0
 12057  0269  00A3               	movwf	___wmul@multiplicand+1
 12058  026A  3199  21B3  3180   	fcall	___wmul
 12059  026D  087B               	movf	_Load,w
 12060  026E  3E36               	addlw	54
 12061  026F  0086               	movwf	6
 12062  0270  3002               	movlw	2	; select bank4/5
 12063  0271  0087               	movwf	7
 12064  0272  0020               	movlb	0	; select bank0
 12065  0273  0820               	movf	?___wmul,w
 12066  0274  3FC0               	movwi [0]fsr1
 12067  0275  0821               	movf	?___wmul+1,w
 12068  0276  3FC1               	movwi [1]fsr1
 12069  0277                     l9290:	
 12070                           
 12071                           ;OverLoad_B1.c: 142: }
 12072                           ;OverLoad_B1.c: 143: }
 12073                           ;OverLoad_B1.c: 144: }
 12074                           ;OverLoad_B1.c: 145: }
 12075                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 12076  0277  319A  2254         	fcall	_setLoad_AH_AL_Restore
 12077                           
 12078                           ;OverLoad_B1.c: 158: }
 12079                           ;OverLoad_B1.c: 159: } else {
 12080  0279  0008               	return
 12081  027A                     l9292:	
 12082                           
 12083                           ;OverLoad_B1.c: 160: if (Load->GO) {
 12084  027A  087B               	movf	_Load,w
 12085  027B  0086               	movwf	6
 12086  027C  3002               	movlw	2	; select bank4/5
 12087  027D  0087               	movwf	7
 12088  027E  1C81               	btfss	1,1
 12089  027F  2AA2               	goto	l9304
 12090                           
 12091                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 12092  0280  087B               	movf	_Load,w
 12093  0281  0086               	movwf	6
 12094  0282  3002               	movlw	2	; select bank4/5
 12095  0283  0087               	movwf	7
 12096  0284  1901               	btfsc	1,2
 12097  0285  2A90               	goto	l9298
 12098                           
 12099                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 12100  0286  087B               	movf	_Load,w
 12101  0287  0086               	movwf	6
 12102  0288  3002               	movlw	2	; select bank4/5
 12103  0289  0087               	movwf	7
 12104  028A  1501               	bsf	1,2
 12105                           
 12106                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 12107  028B  087B               	movf	_Load,w
 12108  028C  0086               	movwf	6
 12109  028D  3002               	movlw	2	; select bank4/5
 12110  028E  0087               	movwf	7
 12111  028F  1181               	bcf	1,3
 12112  0290                     l9298:	
 12113                           
 12114                           ;OverLoad_B1.c: 164: }
 12115                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && getPF_Safe()) {
 12116  0290  31A5  25C7  3180   	fcall	_getTemp_Safe
 12117  0293  3A00               	xorlw	0
 12118  0294  1903               	skipnz
 12119  0295  0008               	return
 12120  0296  31A5  25E5  3180   	fcall	_getPF_Safe
 12121  0299  3A00               	xorlw	0
 12122  029A  1903               	skipnz
 12123  029B  0008               	return
 12124                           
 12125                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 12126  029C  087B               	movf	_Load,w
 12127  029D  0086               	movwf	6
 12128  029E  3002               	movlw	2	; select bank4/5
 12129  029F  0087               	movwf	7
 12130  02A0  1601               	bsf	1,4
 12131                           
 12132                           ;OverLoad_B1.c: 167: }
 12133                           ;OverLoad_B1.c: 168: } else {
 12134  02A1  0008               	return
 12135  02A2                     l9304:	
 12136                           
 12137                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 12138  02A2  087B               	movf	_Load,w
 12139  02A3  0086               	movwf	6
 12140  02A4  3002               	movlw	2	; select bank4/5
 12141  02A5  0087               	movwf	7
 12142  02A6  1D01               	btfss	1,2
 12143  02A7  0008               	return
 12144                           
 12145                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 12146  02A8  087B               	movf	_Load,w
 12147  02A9  0086               	movwf	6
 12148  02AA  3002               	movlw	2	; select bank4/5
 12149  02AB  0087               	movwf	7
 12150  02AC  1101               	bcf	1,2
 12151                           
 12152                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 12153  02AD  087B               	movf	_Load,w
 12154  02AE  0086               	movwf	6
 12155  02AF  3002               	movlw	2	; select bank4/5
 12156  02B0  0087               	movwf	7
 12157  02B1  1581               	bsf	1,3
 12158                           
 12159                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 12160  02B2  087B               	movf	_Load,w
 12161  02B3  3E3C               	addlw	60
 12162  02B4  0086               	movwf	6
 12163  02B5  3002               	movlw	2	; select bank4/5
 12164  02B6  0087               	movwf	7
 12165  02B7  0181               	clrf	1
 12166                           
 12167                           ;OverLoad_B1.c: 173: Load->Count = 0;
 12168  02B8  087B               	movf	_Load,w
 12169  02B9  3E3A               	addlw	58
 12170  02BA  0086               	movwf	6
 12171  02BB  3002               	movlw	2	; select bank4/5
 12172  02BC  0087               	movwf	7
 12173  02BD  0181               	clrf	1
 12174                           
 12175                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 12176  02BE  087B               	movf	_Load,w
 12177  02BF  3E06               	addlw	6
 12178  02C0  0086               	movwf	6
 12179  02C1  3002               	movlw	2	; select bank4/5
 12180  02C2  0087               	movwf	7
 12181  02C3  3000               	movlw	0
 12182  02C4  3FC0               	movwi [0]fsr1
 12183  02C5  3FC1               	movwi [1]fsr1
 12184                           
 12185                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 12186  02C6  087B               	movf	_Load,w
 12187  02C7  3E3F               	addlw	63
 12188  02C8  0086               	movwf	6
 12189  02C9  3002               	movlw	2	; select bank4/5
 12190  02CA  0087               	movwf	7
 12191  02CB  0181               	clrf	1
 12192                           
 12193                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 12194  02CC  087B               	movf	_Load,w
 12195  02CD  3E46               	addlw	70
 12196  02CE  0086               	movwf	6
 12197  02CF  3002               	movlw	2	; select bank4/5
 12198  02D0  0087               	movwf	7
 12199  02D1  1001               	bcf	1,0
 12200                           
 12201                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 12202  02D2  087B               	movf	_Load,w
 12203  02D3  3E46               	addlw	70
 12204  02D4  0086               	movwf	6
 12205  02D5  3002               	movlw	2	; select bank4/5
 12206  02D6  0087               	movwf	7
 12207  02D7  1081               	bcf	1,1
 12208                           
 12209                           ;OverLoad_B1.c: 178: Load->AD = 0;
 12210  02D8  087B               	movf	_Load,w
 12211  02D9  3E2C               	addlw	44
 12212  02DA  0086               	movwf	6
 12213  02DB  3002               	movlw	2	; select bank4/5
 12214  02DC  0087               	movwf	7
 12215  02DD  3000               	movlw	0
 12216  02DE  3FC0               	movwi [0]fsr1
 12217  02DF  3FC1               	movwi [1]fsr1
 12218                           
 12219                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 12220  02E0  319A  2254  3180   	fcall	_setLoad_AH_AL_Restore
 12221                           
 12222                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 12223  02E3  0020               	movlb	0	; select bank0
 12224  02E4  01A2               	clrf	setDimmerLights_Clear@command
 12225  02E5  0AA2               	incf	setDimmerLights_Clear@command,f
 12226  02E6  3001               	movlw	1
 12227  02E7  31A7  278E         	fcall	_setDimmerLights_Clear
 12228                           
 12229                           ;OverLoad_B1.c: 187: ;;
 12230  02E9  0008               	return
 12231  02EA                     __end_of_Load_Main:	
 12232                           
 12233                           	psect	text63
 12234  1F6B                     __ptext63:	
 12235 ;; *************** function _setLoad_Exceptions *****************
 12236 ;; Defined at:
 12237 ;;		line 232 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;  command         1    wreg     unsigned char 
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  command         1   12[BANK0 ] unsigned char 
 12242 ;; Return value:  Size  Location     Type
 12243 ;;		None               void
 12244 ;; Registers used:
 12245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        2 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    8
 12258 ;; This function calls:
 12259 ;;		_DimmerLights_Exceptions
 12260 ;;		_setLED
 12261 ;;		_setRF_Enable
 12262 ;;		_setSw_Enable
 12263 ;; This function is called by:
 12264 ;;		_Load_Main
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           
 12269                           ;psect for function _setLoad_Exceptions
 12270  1F6B                     _setLoad_Exceptions:	
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12274                           ;setLoad_Exceptions@command stored from wreg
 12275  1F6B  0020               	movlb	0	; select bank0
 12276  1F6C  00AC               	movwf	setLoad_Exceptions@command
 12277                           
 12278                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 12279  1F6D  087B               	movf	_Load,w
 12280  1F6E  0086               	movwf	6
 12281  1F6F  3002               	movlw	2	; select bank4/5
 12282  1F70  0087               	movwf	7
 12283  1F71  082C               	movf	setLoad_Exceptions@command,w
 12284  1F72  1281               	bcf	1,5
 12285  1F73  1D03               	skipz
 12286  1F74  1681               	bsf	1,5
 12287                           
 12288                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 12289  1F75  092C               	comf	setLoad_Exceptions@command,w
 12290  1F76  3901               	andlw	1
 12291  1F77  00AB               	movwf	??_setLoad_Exceptions
 12292  1F78  087B               	movf	_Load,w
 12293  1F79  0086               	movwf	6
 12294  1F7A  3002               	movlw	2	; select bank4/5
 12295  1F7B  0087               	movwf	7
 12296  1F7C  0DAB               	rlf	??_setLoad_Exceptions,f
 12297  1F7D  0DAB               	rlf	??_setLoad_Exceptions,f
 12298  1F7E  0DAB               	rlf	??_setLoad_Exceptions,f
 12299  1F7F  0801               	movf	1,w
 12300  1F80  062B               	xorwf	??_setLoad_Exceptions,w
 12301  1F81  39F7               	andlw	-9
 12302  1F82  062B               	xorwf	??_setLoad_Exceptions,w
 12303  1F83  0081               	movwf	1
 12304                           
 12305                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 12306  1F84  082C               	movf	setLoad_Exceptions@command,w
 12307  1F85  00AB               	movwf	??_setLoad_Exceptions
 12308  1F86  087B               	movf	_Load,w
 12309  1F87  3E05               	addlw	5
 12310  1F88  0086               	movwf	6
 12311  1F89  3002               	movlw	2	; select bank4/5
 12312  1F8A  0087               	movwf	7
 12313  1F8B  082B               	movf	??_setLoad_Exceptions,w
 12314  1F8C  0081               	movwf	1
 12315                           
 12316                           ;OverLoad_B1.c: 237: if (command) {
 12317  1F8D  082C               	movf	setLoad_Exceptions@command,w
 12318  1F8E  1903               	btfsc	3,2
 12319  1F8F  2F9B               	goto	l1561
 12320                           
 12321                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 12322  1F90  3002               	movlw	2
 12323  1F91  3191  2142  319F   	fcall	_DimmerLights_Exceptions
 12324                           
 12325                           ;OverLoad_B1.c: 240: setLED(2, 1);
 12326  1F94  0020               	movlb	0	; select bank0
 12327  1F95  01A2               	clrf	setLED@command
 12328  1F96  0AA2               	incf	setLED@command,f
 12329  1F97  3002               	movlw	2
 12330  1F98  3192  2254  319F   	fcall	_setLED
 12331  1F9B                     l1561:	
 12332                           
 12333                           ;OverLoad_B1.c: 242: }
 12334                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 12335  1F9B  0020               	movlb	0	; select bank0
 12336  1F9C  082C               	movf	setLoad_Exceptions@command,w
 12337  1F9D  3E0A               	addlw	10
 12338  1F9E  00AB               	movwf	??_setLoad_Exceptions
 12339  1F9F  082B               	movf	??_setLoad_Exceptions,w
 12340  1FA0  00A2               	movwf	setLED@command
 12341  1FA1  3063               	movlw	99
 12342  1FA2  3192  2254  319F   	fcall	_setLED
 12343                           
 12344                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 12345  1FA5  0020               	movlb	0	; select bank0
 12346  1FA6  092C               	comf	setLoad_Exceptions@command,w
 12347  1FA7  3901               	andlw	1
 12348  1FA8  31A7  2731  319F   	fcall	_setSw_Enable
 12349                           
 12350                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 12351  1FAB  0020               	movlb	0	; select bank0
 12352  1FAC  092C               	comf	setLoad_Exceptions@command,w
 12353  1FAD  3901               	andlw	1
 12354  1FAE  00AB               	movwf	??_setLoad_Exceptions
 12355  1FAF  082B               	movf	??_setLoad_Exceptions,w
 12356  1FB0  00A2               	movwf	setRF_Enable@command
 12357  1FB1  3001               	movlw	1
 12358  1FB2  319B  2360         	fcall	_setRF_Enable
 12359  1FB4  0008               	return
 12360  1FB5                     __end_of_setLoad_Exceptions:	
 12361                           
 12362                           	psect	text64
 12363  2731                     __ptext64:	
 12364 ;; *************** function _setSw_Enable *****************
 12365 ;; Defined at:
 12366 ;;		line 85 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;  command         1    wreg     unsigned char 
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;  command         1    2[BANK0 ] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;		None               void
 12373 ;; Registers used:
 12374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;Total ram usage:        1 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    5
 12387 ;; This function calls:
 12388 ;;		_SwPointSelect
 12389 ;; This function is called by:
 12390 ;;		_setLoad_Exceptions
 12391 ;;		_setOverTemp_Exceptions
 12392 ;;		_setPowerFault_Exceptions
 12393 ;;		_MainT
 12394 ;; This function uses a non-reentrant model
 12395 ;;
 12396                           
 12397                           
 12398                           ;psect for function _setSw_Enable
 12399  2731                     _setSw_Enable:	
 12400                           
 12401                           ;incstack = 0
 12402                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12403                           ;setSw_Enable@command stored from wreg
 12404  2731  0020               	movlb	0	; select bank0
 12405  2732  00A2               	movwf	setSw_Enable@command
 12406                           
 12407                           ;Switch_B1.c: 88: SwPointSelect(1);
 12408  2733  3001               	movlw	1
 12409  2734  31A6  2621         	fcall	_SwPointSelect
 12410                           
 12411                           ;Switch_B1.c: 89: Sw->Enable = command;
 12412  2736  0879               	movf	_Sw,w
 12413  2737  0086               	movwf	6
 12414  2738  3001               	movlw	1	; select bank2/3
 12415  2739  0087               	movwf	7
 12416  273A  0020               	movlb	0	; select bank0
 12417  273B  0822               	movf	setSw_Enable@command,w
 12418  273C  1001               	bcf	1,0
 12419  273D  1D03               	skipz
 12420  273E  1401               	bsf	1,0
 12421  273F  0008               	return
 12422  2740                     __end_of_setSw_Enable:	
 12423                           
 12424                           	psect	text65
 12425  1B60                     __ptext65:	
 12426 ;; *************** function _setRF_Enable *****************
 12427 ;; Defined at:
 12428 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 12429 ;; Parameters:    Size  Location     Type
 12430 ;;  rf              1    wreg     unsigned char 
 12431 ;;  command         1    2[BANK0 ] unsigned char 
 12432 ;; Auto vars:     Size  Location     Type
 12433 ;;  rf              1    3[BANK0 ] unsigned char 
 12434 ;; Return value:  Size  Location     Type
 12435 ;;		None               void
 12436 ;; Registers used:
 12437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12438 ;; Tracked objects:
 12439 ;;		On entry : 0/0
 12440 ;;		On exit  : 0/0
 12441 ;;		Unchanged: 0/0
 12442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12443 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;Total ram usage:        2 bytes
 12448 ;; Hardware stack levels used:    1
 12449 ;; Hardware stack levels required when called:    5
 12450 ;; This function calls:
 12451 ;;		_RfPointSelect
 12452 ;;		_setINT_GO
 12453 ;; This function is called by:
 12454 ;;		_setLoad_Exceptions
 12455 ;;		_setOverTemp_Exceptions
 12456 ;;		_setPowerFault_Exceptions
 12457 ;;		_MainT
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _setRF_Enable
 12463  1B60                     _setRF_Enable:	
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12467                           ;setRF_Enable@rf stored from wreg
 12468  1B60  0020               	movlb	0	; select bank0
 12469  1B61  00A3               	movwf	setRF_Enable@rf
 12470                           
 12471                           ;RF_Control_B1.c: 174: RfPointSelect(rf);
 12472  1B62  0823               	movf	setRF_Enable@rf,w
 12473  1B63  31A6  2694  319B   	fcall	_RfPointSelect
 12474                           
 12475                           ;RF_Control_B1.c: 175: RF->Enable = command;
 12476  1B66  0021               	movlb	1	; select bank1
 12477  1B67  083E               	movf	_RF^(0+128),w
 12478  1B68  0086               	movwf	6
 12479  1B69  0187               	clrf	7
 12480  1B6A  0020               	movlb	0	; select bank0
 12481  1B6B  0822               	movf	setRF_Enable@command,w
 12482  1B6C  1001               	bcf	1,0
 12483  1B6D  1D03               	skipz
 12484  1B6E  1401               	bsf	1,0
 12485                           
 12486                           ;RF_Control_B1.c: 176: RF->Learn = 0;
 12487  1B6F  0021               	movlb	1	; select bank1
 12488  1B70  083E               	movf	_RF^(0+128),w
 12489  1B71  0086               	movwf	6
 12490  1B72  0187               	clrf	7
 12491  1B73  1301               	bcf	1,6
 12492                           
 12493                           ;RF_Control_B1.c: 177: RF->TransceiveGO = 0;
 12494  1B74  083E               	movf	_RF^(0+128),w
 12495  1B75  0086               	movwf	6
 12496  1B76  0187               	clrf	7
 12497  1B77  1101               	bcf	1,2
 12498                           
 12499                           ;RF_Control_B1.c: 178: RF->RxStatus = 0;
 12500  1B78  083E               	movf	_RF^(0+128),w
 12501  1B79  0086               	movwf	6
 12502  1B7A  0187               	clrf	7
 12503  1B7B  1181               	bcf	1,3
 12504                           
 12505                           ;RF_Control_B1.c: 179: RF->ReceiveGO = 0;
 12506  1B7C  083E               	movf	_RF^(0+128),w
 12507  1B7D  0086               	movwf	6
 12508  1B7E  0187               	clrf	7
 12509  1B7F  1081               	bcf	1,1
 12510                           
 12511                           ;RF_Control_B1.c: 180: RF->DebounceTime = 0;
 12512  1B80  0A3E               	incf	_RF^(0+128),w
 12513  1B81  0086               	movwf	6
 12514  1B82  0187               	clrf	7
 12515  1B83  0181               	clrf	1
 12516                           
 12517                           ;RF_Control_B1.c: 181: RF->Debounce = 0;
 12518  1B84  083E               	movf	_RF^(0+128),w
 12519  1B85  0086               	movwf	6
 12520  1B86  0187               	clrf	7
 12521  1B87  1281               	bcf	1,5
 12522                           
 12523                           ;RF_Control_B1.c: 182: setINT_GO(0);
 12524  1B88  3000               	movlw	0
 12525  1B89  31A5  25EE         	fcall	_setINT_GO
 12526  1B8B  0008               	return
 12527  1B8C                     __end_of_setRF_Enable:	
 12528                           
 12529                           	psect	text66
 12530  25EE                     __ptext66:	
 12531 ;; *************** function _setINT_GO *****************
 12532 ;; Defined at:
 12533 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;  command         1    wreg     unsigned char 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  command         1    0[BANK0 ] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;		None               void
 12540 ;; Registers used:
 12541 ;;		wreg
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12551 ;;Total ram usage:        1 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    4
 12554 ;; This function calls:
 12555 ;;		Nothing
 12556 ;; This function is called by:
 12557 ;;		_setRF_Main
 12558 ;;		_setRF_Enable
 12559 ;;		_RF_RxDisable
 12560 ;; This function uses a non-reentrant model
 12561 ;;
 12562                           
 12563                           
 12564                           ;psect for function _setINT_GO
 12565  25EE                     _setINT_GO:	
 12566                           
 12567                           ;incstack = 0
 12568                           ; Regs used in _setINT_GO: [wreg]
 12569                           ;setINT_GO@command stored from wreg
 12570  25EE  0020               	movlb	0	; select bank0
 12571  25EF  00A0               	movwf	setINT_GO@command
 12572                           
 12573                           ;MCU_B1.c: 291: INTF = 0;
 12574  25F0  108B               	bcf	11,1	;volatile
 12575                           
 12576                           ;MCU_B1.c: 292: INTE = command;
 12577  25F1  1C20               	btfss	setINT_GO@command,0
 12578  25F2  2DF5               	goto	u7810
 12579  25F3  160B               	bsf	11,4	;volatile
 12580  25F4  0008               	return
 12581  25F5                     u7810:	
 12582  25F5  120B               	bcf	11,4	;volatile
 12583  25F6  0008               	return
 12584  25F7                     __end_of_setINT_GO:	
 12585                           
 12586                           	psect	text67
 12587  1142                     __ptext67:	
 12588 ;; *************** function _DimmerLights_Exceptions *****************
 12589 ;; Defined at:
 12590 ;;		line 246 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12591 ;; Parameters:    Size  Location     Type
 12592 ;;  status          1    wreg     unsigned char 
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  status          1   10[BANK0 ] unsigned char 
 12595 ;; Return value:  Size  Location     Type
 12596 ;;		None               void
 12597 ;; Registers used:
 12598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;Total ram usage:        1 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:    7
 12611 ;; This function calls:
 12612 ;;		_getDimmerLights_StatusFlag
 12613 ;;		_setBuz
 12614 ;;		_setDimmerLights_ERROR
 12615 ;;		_setDimmerLights_TriggerERROR
 12616 ;; This function is called by:
 12617 ;;		_setLoad_Exceptions
 12618 ;;		_setOverTemp_Exceptions
 12619 ;;		_setPowerFault_Exceptions
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function _DimmerLights_Exceptions
 12625  1142                     _DimmerLights_Exceptions:	
 12626                           
 12627                           ;incstack = 0
 12628                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12629                           ;DimmerLights_Exceptions@status stored from wreg
 12630  1142  0020               	movlb	0	; select bank0
 12631  1143  00AA               	movwf	DimmerLights_Exceptions@status
 12632                           
 12633                           ;Dimmer_B1.c: 248: if(status == 1)
 12634  1144  082A               	movf	DimmerLights_Exceptions@status,w
 12635  1145  3A01               	xorlw	1
 12636  1146  1D03               	skipz
 12637  1147  2958               	goto	l8238
 12638                           
 12639                           ;Dimmer_B1.c: 249: {
 12640                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 12641  1148  31A6  26AC  3191   	fcall	_getDimmerLights_StatusFlag
 12642  114B  3A00               	xorlw	0
 12643  114C  1903               	skipnz
 12644  114D  2970               	goto	l8244
 12645                           
 12646                           ;Dimmer_B1.c: 251: {
 12647                           ;Dimmer_B1.c: 252: setBuz(10,300);
 12648  114E  302C               	movlw	44
 12649  114F  0020               	movlb	0	; select bank0
 12650  1150  00A6               	movwf	setBuz@time
 12651  1151  3001               	movlw	1
 12652  1152  00A7               	movwf	setBuz@time+1
 12653  1153  300A               	movlw	10
 12654  1154  3188  2019  3191   	fcall	_setBuz
 12655  1157  2970               	goto	l8244
 12656  1158                     l8238:	
 12657                           ;Dimmer_B1.c: 264: }
 12658                           
 12659                           ;Dimmer_B1.c: 253: }
 12660                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 12661                           
 12662                           
 12663                           ;Dimmer_B1.c: 265: else if(status == 2)
 12664  1158  0020               	movlb	0	; select bank0
 12665  1159  082A               	movf	DimmerLights_Exceptions@status,w
 12666  115A  3A02               	xorlw	2
 12667  115B  1D03               	skipz
 12668  115C  296B               	goto	l8242
 12669                           
 12670                           ;Dimmer_B1.c: 266: {
 12671                           ;Dimmer_B1.c: 267: setBuz(5,300);
 12672  115D  302C               	movlw	44
 12673  115E  00A6               	movwf	setBuz@time
 12674  115F  3001               	movlw	1
 12675  1160  00A7               	movwf	setBuz@time+1
 12676  1161  3005               	movlw	5
 12677  1162  3188  2019  3191   	fcall	_setBuz
 12678                           
 12679                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 12680  1165  0021               	movlb	1	; select bank1
 12681  1166  0A3A               	incf	_Dimmer^(0+128),w
 12682  1167  0086               	movwf	6
 12683  1168  0187               	clrf	7
 12684  1169  0801               	movf	1,w
 12685  116A  2971               	goto	L10
 12686  116B                     l8242:	
 12687                           ;Dimmer_B1.c: 269: }
 12688                           
 12689                           
 12690                           ;Dimmer_B1.c: 270: else if(status == 3)
 12691  116B  0020               	movlb	0	; select bank0
 12692  116C  082A               	movf	DimmerLights_Exceptions@status,w
 12693  116D  3A03               	xorlw	3
 12694  116E  1D03               	skipz
 12695  116F  2974               	goto	l818
 12696  1170                     l8244:	
 12697                           
 12698                           ;Dimmer_B1.c: 271: {
 12699                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 12700  1170  3001               	movlw	1
 12701  1171                     L10:	
 12702  1171  3190  2092  3191   	fcall	_setDimmerLights_ERROR
 12703  1174                     l818:	
 12704                           
 12705                           ;Dimmer_B1.c: 281: }
 12706                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 12707  1174  0020               	movlb	0	; select bank0
 12708  1175  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12709  1176  3001               	movlw	1
 12710  1177  319B  2335  3191   	fcall	_setDimmerLights_TriggerERROR
 12711                           
 12712                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 12713  117A  0021               	movlb	1	; select bank1
 12714  117B  086B               	movf	_TMain^(0+128),w
 12715  117C  3E03               	addlw	3
 12716  117D  0086               	movwf	6
 12717  117E  3001               	movlw	1	; select bank2/3
 12718  117F  0087               	movwf	7
 12719  1180  1801               	btfsc	1,0
 12720  1181  0008               	return
 12721                           
 12722                           ;Dimmer_B1.c: 294: {
 12723                           ;Dimmer_B1.c: 295: TMain->i=0;
 12724  1182  086B               	movf	_TMain^(0+128),w
 12725  1183  3E0F               	addlw	15
 12726  1184  0086               	movwf	6
 12727  1185  3001               	movlw	1	; select bank2/3
 12728  1186  0087               	movwf	7
 12729  1187  1001               	bcf	1,0
 12730                           
 12731                           ;Dimmer_B1.c: 296: TMain->j=0;
 12732  1188  086B               	movf	_TMain^(0+128),w
 12733  1189  3E0F               	addlw	15
 12734  118A  0086               	movwf	6
 12735  118B  3001               	movlw	1	; select bank2/3
 12736  118C  0087               	movwf	7
 12737  118D  1081               	bcf	1,1
 12738                           
 12739                           ;Dimmer_B1.c: 297: TMain->k=1;
 12740  118E  086B               	movf	_TMain^(0+128),w
 12741  118F  3E0F               	addlw	15
 12742  1190  0086               	movwf	6
 12743  1191  3001               	movlw	1	; select bank2/3
 12744  1192  0087               	movwf	7
 12745  1193  1501               	bsf	1,2
 12746                           
 12747                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 12748  1194  086B               	movf	_TMain^(0+128),w
 12749  1195  3E08               	addlw	8
 12750  1196  0086               	movwf	6
 12751  1197  3001               	movlw	1	; select bank2/3
 12752  1198  0087               	movwf	7
 12753  1199  3000               	movlw	0
 12754  119A  3FC0               	movwi [0]fsr1
 12755  119B  3FC1               	movwi [1]fsr1
 12756  119C  0008               	return
 12757  119D                     __end_of_DimmerLights_Exceptions:	
 12758                           
 12759                           	psect	text68
 12760  1B35                     __ptext68:	
 12761 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12762 ;; Defined at:
 12763 ;;		line 320 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;  lights          1    wreg     unsigned char 
 12766 ;;  command         1    2[BANK0 ] unsigned char 
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;  lights          1    3[BANK0 ] unsigned char 
 12769 ;; Return value:  Size  Location     Type
 12770 ;;		None               void
 12771 ;; Registers used:
 12772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12778 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12782 ;;Total ram usage:        2 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:    5
 12785 ;; This function calls:
 12786 ;;		_DimmerLightsPointSelect
 12787 ;; This function is called by:
 12788 ;;		_DimmerLights_Exceptions
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _setDimmerLights_TriggerERROR
 12794  1B35                     _setDimmerLights_TriggerERROR:	
 12795                           
 12796                           ;incstack = 0
 12797                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12798                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12799  1B35  0020               	movlb	0	; select bank0
 12800  1B36  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12801                           
 12802                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 12803  1B37  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12804  1B38  31A6  2616         	fcall	_DimmerLightsPointSelect
 12805                           
 12806                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 12807  1B3A  0877               	movf	_DimmerLights,w
 12808  1B3B  3E09               	addlw	9
 12809  1B3C  0086               	movwf	6
 12810  1B3D  3001               	movlw	1	; select bank2/3
 12811  1B3E  0087               	movwf	7
 12812  1B3F  0020               	movlb	0	; select bank0
 12813  1B40  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12814  1B41  1081               	bcf	1,1
 12815  1B42  1D03               	skipz
 12816  1B43  1481               	bsf	1,1
 12817                           
 12818                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 12819  1B44  0877               	movf	_DimmerLights,w
 12820  1B45  3E09               	addlw	9
 12821  1B46  0086               	movwf	6
 12822  1B47  3001               	movlw	1	; select bank2/3
 12823  1B48  0087               	movwf	7
 12824  1B49  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12825  1B4A  1001               	bcf	1,0
 12826  1B4B  1D03               	skipz
 12827  1B4C  1401               	bsf	1,0
 12828                           
 12829                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 12830  1B4D  0877               	movf	_DimmerLights,w
 12831  1B4E  3E09               	addlw	9
 12832  1B4F  0086               	movwf	6
 12833  1B50  3001               	movlw	1	; select bank2/3
 12834  1B51  0087               	movwf	7
 12835  1B52  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12836  1B53  1181               	bcf	1,3
 12837  1B54  1D03               	skipz
 12838  1B55  1581               	bsf	1,3
 12839                           
 12840                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 12841  1B56  0877               	movf	_DimmerLights,w
 12842  1B57  3E09               	addlw	9
 12843  1B58  0086               	movwf	6
 12844  1B59  3001               	movlw	1	; select bank2/3
 12845  1B5A  0087               	movwf	7
 12846  1B5B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12847  1B5C  1101               	bcf	1,2
 12848  1B5D  1D03               	skipz
 12849  1B5E  1501               	bsf	1,2
 12850  1B5F  0008               	return
 12851  1B60                     __end_of_setDimmerLights_TriggerERROR:	
 12852                           
 12853                           	psect	text69
 12854  1092                     __ptext69:	
 12855 ;; *************** function _setDimmerLights_ERROR *****************
 12856 ;; Defined at:
 12857 ;;		line 302 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  lights          1    wreg     unsigned char 
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;  lights          1    5[BANK0 ] unsigned char 
 12862 ;; Return value:  Size  Location     Type
 12863 ;;		None               void
 12864 ;; Registers used:
 12865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;Total ram usage:        2 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:    6
 12878 ;; This function calls:
 12879 ;;		_DimmerLightsPointSelect
 12880 ;;		_setLED
 12881 ;;		_setLoad_StatusOff
 12882 ;;		_setRFSW_Status
 12883 ;;		_setSw_Status
 12884 ;; This function is called by:
 12885 ;;		_DimmerLights_Exceptions
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _setDimmerLights_ERROR
 12891  1092                     _setDimmerLights_ERROR:	
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12895                           ;setDimmerLights_ERROR@lights stored from wreg
 12896  1092  0020               	movlb	0	; select bank0
 12897  1093  00A5               	movwf	setDimmerLights_ERROR@lights
 12898                           
 12899                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 12900  1094  0825               	movf	setDimmerLights_ERROR@lights,w
 12901  1095  31A6  2616  3190   	fcall	_DimmerLightsPointSelect
 12902                           
 12903                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 12904  1098  0877               	movf	_DimmerLights,w
 12905  1099  0086               	movwf	6
 12906  109A  3001               	movlw	1	; select bank2/3
 12907  109B  0087               	movwf	7
 12908  109C  1E81               	btfss	1,5
 12909  109D  0008               	return
 12910                           
 12911                           ;Dimmer_B1.c: 306: {
 12912                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 12913  109E  0877               	movf	_DimmerLights,w
 12914  109F  0086               	movwf	6
 12915  10A0  3001               	movlw	1	; select bank2/3
 12916  10A1  0087               	movwf	7
 12917  10A2  1081               	bcf	1,1
 12918                           
 12919                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 12920  10A3  0877               	movf	_DimmerLights,w
 12921  10A4  0086               	movwf	6
 12922  10A5  3001               	movlw	1	; select bank2/3
 12923  10A6  0087               	movwf	7
 12924  10A7  1181               	bcf	1,3
 12925                           
 12926                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 12927  10A8  0877               	movf	_DimmerLights,w
 12928  10A9  0086               	movwf	6
 12929  10AA  3001               	movlw	1	; select bank2/3
 12930  10AB  0087               	movwf	7
 12931  10AC  1201               	bcf	1,4
 12932                           
 12933                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 12934  10AD  0877               	movf	_DimmerLights,w
 12935  10AE  0086               	movwf	6
 12936  10AF  3001               	movlw	1	; select bank2/3
 12937  10B0  0087               	movwf	7
 12938  10B1  1301               	bcf	1,6
 12939                           
 12940                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 12941  10B2  3003               	movlw	3
 12942  10B3  0020               	movlb	0	; select bank0
 12943  10B4  00A4               	movwf	??_setDimmerLights_ERROR
 12944  10B5  0877               	movf	_DimmerLights,w
 12945  10B6  3E02               	addlw	2
 12946  10B7  0086               	movwf	6
 12947  10B8  3001               	movlw	1	; select bank2/3
 12948  10B9  0087               	movwf	7
 12949  10BA  0824               	movf	??_setDimmerLights_ERROR,w
 12950  10BB  0081               	movwf	1
 12951                           
 12952                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12953  10BC  0877               	movf	_DimmerLights,w
 12954  10BD  3E06               	addlw	6
 12955  10BE  0086               	movwf	6
 12956  10BF  3001               	movlw	1	; select bank2/3
 12957  10C0  0087               	movwf	7
 12958  10C1  0801               	movf	1,w
 12959  10C2  00A4               	movwf	??_setDimmerLights_ERROR
 12960  10C3  0877               	movf	_DimmerLights,w
 12961  10C4  3E04               	addlw	4
 12962  10C5  0086               	movwf	6
 12963  10C6  3001               	movlw	1	; select bank2/3
 12964  10C7  0087               	movwf	7
 12965  10C8  0824               	movf	??_setDimmerLights_ERROR,w
 12966  10C9  0081               	movwf	1
 12967                           
 12968                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 12969  10CA  0021               	movlb	1	; select bank1
 12970  10CB  083A               	movf	_Dimmer^(0+128),w
 12971  10CC  0086               	movwf	6
 12972  10CD  0187               	clrf	7
 12973  10CE  1401               	bsf	1,0
 12974                           
 12975                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 12976  10CF  0020               	movlb	0	; select bank0
 12977  10D0  01A0               	clrf	setLoad_StatusOff@command
 12978  10D1  0AA0               	incf	setLoad_StatusOff@command,f
 12979  10D2  0825               	movf	setDimmerLights_ERROR@lights,w
 12980  10D3  319C  2447  3190   	fcall	_setLoad_StatusOff
 12981                           
 12982                           ;Dimmer_B1.c: 315: setLED(lights,1);
 12983  10D6  0020               	movlb	0	; select bank0
 12984  10D7  01A2               	clrf	setLED@command
 12985  10D8  0AA2               	incf	setLED@command,f
 12986  10D9  0825               	movf	setDimmerLights_ERROR@lights,w
 12987  10DA  3192  2254  3190   	fcall	_setLED
 12988                           
 12989                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 12990  10DD  0020               	movlb	0	; select bank0
 12991  10DE  01A2               	clrf	setSw_Status@command
 12992  10DF  0825               	movf	setDimmerLights_ERROR@lights,w
 12993  10E0  31A7  2722  3190   	fcall	_setSw_Status
 12994                           
 12995                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 12996  10E3  0020               	movlb	0	; select bank0
 12997  10E4  01A2               	clrf	setRFSW_Status@command
 12998  10E5  0825               	movf	setDimmerLights_ERROR@lights,w
 12999  10E6  31A7  2713         	fcall	_setRFSW_Status
 13000  10E8  0008               	return
 13001  10E9                     __end_of_setDimmerLights_ERROR:	
 13002                           
 13003                           	psect	text70
 13004  278E                     __ptext70:	
 13005 ;; *************** function _setDimmerLights_Clear *****************
 13006 ;; Defined at:
 13007 ;;		line 456 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  lights          1    wreg     unsigned char 
 13010 ;;  command         1    2[BANK0 ] unsigned char 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  lights          1    3[BANK0 ] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;		None               void
 13015 ;; Registers used:
 13016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13022 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;Total ram usage:        2 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    5
 13029 ;; This function calls:
 13030 ;;		_DimmerLightsPointSelect
 13031 ;; This function is called by:
 13032 ;;		_Load_Main
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           
 13037                           ;psect for function _setDimmerLights_Clear
 13038  278E                     _setDimmerLights_Clear:	
 13039                           
 13040                           ;incstack = 0
 13041                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13042                           ;setDimmerLights_Clear@lights stored from wreg
 13043  278E  0020               	movlb	0	; select bank0
 13044  278F  00A3               	movwf	setDimmerLights_Clear@lights
 13045                           
 13046                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13047  2790  0823               	movf	setDimmerLights_Clear@lights,w
 13048  2791  31A6  2616         	fcall	_DimmerLightsPointSelect
 13049                           
 13050                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13051  2793  0877               	movf	_DimmerLights,w
 13052  2794  3E0C               	addlw	12
 13053  2795  0086               	movwf	6
 13054  2796  3001               	movlw	1	; select bank2/3
 13055  2797  0087               	movwf	7
 13056  2798  0020               	movlb	0	; select bank0
 13057  2799  0822               	movf	setDimmerLights_Clear@command,w
 13058  279A  1001               	bcf	1,0
 13059  279B  1D03               	skipz
 13060  279C  1401               	bsf	1,0
 13061  279D  0008               	return
 13062  279E                     __end_of_setDimmerLights_Clear:	
 13063                           
 13064                           	psect	text71
 13065  25C7                     __ptext71:	
 13066 ;; *************** function _getTemp_Safe *****************
 13067 ;; Defined at:
 13068 ;;		line 26 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;		None
 13071 ;; Auto vars:     Size  Location     Type
 13072 ;;		None
 13073 ;; Return value:  Size  Location     Type
 13074 ;;                  1    wreg      unsigned char 
 13075 ;; Registers used:
 13076 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13077 ;; Tracked objects:
 13078 ;;		On entry : 0/0
 13079 ;;		On exit  : 0/0
 13080 ;;		Unchanged: 0/0
 13081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;Total ram usage:        0 bytes
 13087 ;; Hardware stack levels used:    1
 13088 ;; Hardware stack levels required when called:    4
 13089 ;; This function calls:
 13090 ;;		Nothing
 13091 ;; This function is called by:
 13092 ;;		_Load_Main
 13093 ;;		_setPowerFault_Main
 13094 ;; This function uses a non-reentrant model
 13095 ;;
 13096                           
 13097                           
 13098                           ;psect for function _getTemp_Safe
 13099  25C7                     _getTemp_Safe:	
 13100                           
 13101                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13102                           
 13103                           ;incstack = 0
 13104                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13105  25C7  087A               	movf	_Temp,w
 13106  25C8  0086               	movwf	6
 13107  25C9  3001               	movlw	1	; select bank2/3
 13108  25CA  0087               	movwf	7
 13109  25CB  0E01               	swapf	1,w
 13110  25CC  3901               	andlw	1
 13111  25CD  0008               	return
 13112  25CE                     __end_of_getTemp_Safe:	
 13113                           
 13114                           	psect	text72
 13115  25E5                     __ptext72:	
 13116 ;; *************** function _getPF_Safe *****************
 13117 ;; Defined at:
 13118 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;		None
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      unsigned char 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;Total ram usage:        0 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    4
 13139 ;; This function calls:
 13140 ;;		Nothing
 13141 ;; This function is called by:
 13142 ;;		_Load_Main
 13143 ;;		_setTemp_Main
 13144 ;; This function uses a non-reentrant model
 13145 ;;
 13146                           
 13147                           
 13148                           ;psect for function _getPF_Safe
 13149  25E5                     _getPF_Safe:	
 13150                           
 13151                           ;PowerFault_B1.c: 42: return PF->Safe;
 13152                           
 13153                           ;incstack = 0
 13154                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13155  25E5  0021               	movlb	1	; select bank1
 13156  25E6  083D               	movf	_PF^(0+128),w
 13157  25E7  0086               	movwf	6
 13158  25E8  3001               	movlw	1	; select bank2/3
 13159  25E9  0087               	movwf	7
 13160  25EA  0C01               	rrf	1,w
 13161  25EB  0C89               	rrf	9,f
 13162  25EC  3901               	andlw	1
 13163  25ED  0008               	return
 13164  25EE                     __end_of_getPF_Safe:	
 13165                           
 13166                           	psect	text73
 13167  1D10                     __ptext73:	
 13168 ;; *************** function ___lwdiv *****************
 13169 ;; Defined at:
 13170 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13171 ;; Parameters:    Size  Location     Type
 13172 ;;  divisor         2    0[BANK0 ] unsigned int 
 13173 ;;  dividend        2    2[BANK0 ] unsigned int 
 13174 ;; Auto vars:     Size  Location     Type
 13175 ;;  quotient        2    5[BANK0 ] unsigned int 
 13176 ;;  counter         1    7[BANK0 ] unsigned char 
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  2    0[BANK0 ] unsigned int 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13186 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;Total ram usage:        8 bytes
 13191 ;; Hardware stack levels used:    1
 13192 ;; Hardware stack levels required when called:    4
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_Load_Main
 13197 ;; This function uses a non-reentrant model
 13198 ;;
 13199                           
 13200                           
 13201                           ;psect for function ___lwdiv
 13202  1D10                     ___lwdiv:	
 13203                           
 13204                           ;incstack = 0
 13205                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13206  1D10  0020               	movlb	0	; select bank0
 13207  1D11  01A5               	clrf	___lwdiv@quotient
 13208  1D12  01A6               	clrf	___lwdiv@quotient+1
 13209  1D13  0821               	movf	___lwdiv@divisor+1,w
 13210  1D14  0420               	iorwf	___lwdiv@divisor,w
 13211  1D15  1903               	skipnz
 13212  1D16  2D40               	goto	l7358
 13213  1D17  01A7               	clrf	___lwdiv@counter
 13214  1D18  0AA7               	incf	___lwdiv@counter,f
 13215  1D19                     l7346:	
 13216  1D19  1BA1               	btfsc	___lwdiv@divisor+1,7
 13217  1D1A  2D25               	goto	l7348
 13218  1D1B  3001               	movlw	1
 13219  1D1C                     u6475:	
 13220  1D1C  35A0               	lslf	___lwdiv@divisor,f
 13221  1D1D  0DA1               	rlf	___lwdiv@divisor+1,f
 13222  1D1E  0B89               	decfsz	9,f
 13223  1D1F  2D1C               	goto	u6475
 13224  1D20  3001               	movlw	1
 13225  1D21  00A4               	movwf	??___lwdiv
 13226  1D22  0824               	movf	??___lwdiv,w
 13227  1D23  07A7               	addwf	___lwdiv@counter,f
 13228  1D24  2D19               	goto	l7346
 13229  1D25                     l7348:	
 13230  1D25  3001               	movlw	1
 13231  1D26                     u6495:	
 13232  1D26  35A5               	lslf	___lwdiv@quotient,f
 13233  1D27  0DA6               	rlf	___lwdiv@quotient+1,f
 13234  1D28  0B89               	decfsz	9,f
 13235  1D29  2D26               	goto	u6495
 13236  1D2A  0821               	movf	___lwdiv@divisor+1,w
 13237  1D2B  0223               	subwf	___lwdiv@dividend+1,w
 13238  1D2C  1D03               	skipz
 13239  1D2D  2D30               	goto	u6505
 13240  1D2E  0820               	movf	___lwdiv@divisor,w
 13241  1D2F  0222               	subwf	___lwdiv@dividend,w
 13242  1D30                     u6505:	
 13243  1D30  1C03               	skipc
 13244  1D31  2D37               	goto	l7354
 13245  1D32  0820               	movf	___lwdiv@divisor,w
 13246  1D33  02A2               	subwf	___lwdiv@dividend,f
 13247  1D34  0821               	movf	___lwdiv@divisor+1,w
 13248  1D35  3BA3               	subwfb	___lwdiv@dividend+1,f
 13249  1D36  1425               	bsf	___lwdiv@quotient,0
 13250  1D37                     l7354:	
 13251  1D37  3001               	movlw	1
 13252  1D38                     u6515:	
 13253  1D38  36A1               	lsrf	___lwdiv@divisor+1,f
 13254  1D39  0CA0               	rrf	___lwdiv@divisor,f
 13255  1D3A  0B89               	decfsz	9,f
 13256  1D3B  2D38               	goto	u6515
 13257  1D3C  3001               	movlw	1
 13258  1D3D  02A7               	subwf	___lwdiv@counter,f
 13259  1D3E  1D03               	btfss	3,2
 13260  1D3F  2D25               	goto	l7348
 13261  1D40                     l7358:	
 13262  1D40  0826               	movf	___lwdiv@quotient+1,w
 13263  1D41  01A1               	clrf	?___lwdiv+1
 13264  1D42  07A1               	addwf	?___lwdiv+1,f
 13265  1D43  0825               	movf	___lwdiv@quotient,w
 13266  1D44  01A0               	clrf	?___lwdiv
 13267  1D45  07A0               	addwf	?___lwdiv,f
 13268  1D46  0008               	return
 13269  1D47                     __end_of___lwdiv:	
 13270                           
 13271                           	psect	text74
 13272  26DD                     __ptext74:	
 13273 ;; *************** function _Load_Initialization *****************
 13274 ;; Defined at:
 13275 ;;		line 9 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;		None
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;		None
 13280 ;; Return value:  Size  Location     Type
 13281 ;;		None               void
 13282 ;; Registers used:
 13283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13284 ;; Tracked objects:
 13285 ;;		On entry : 0/0
 13286 ;;		On exit  : 0/0
 13287 ;;		Unchanged: 0/0
 13288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;Total ram usage:        1 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    5
 13296 ;; This function calls:
 13297 ;;		_setLoad_AH_AL_Restore
 13298 ;; This function is called by:
 13299 ;;		_main
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           
 13304                           ;psect for function _Load_Initialization
 13305  26DD                     _Load_Initialization:	
 13306                           
 13307                           ;OverLoad_B1.c: 10: Load = &Load1;
 13308                           
 13309                           ;incstack = 0
 13310                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13311  26DD  3020               	movlw	_Load1& (0+255)
 13312  26DE  0020               	movlb	0	; select bank0
 13313  26DF  00A2               	movwf	??_Load_Initialization
 13314  26E0  0822               	movf	??_Load_Initialization,w
 13315  26E1  00FB               	movwf	_Load
 13316                           
 13317                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 13318  26E2  087B               	movf	_Load,w
 13319  26E3  0086               	movwf	6
 13320  26E4  3002               	movlw	2	; select bank4/5
 13321  26E5  0087               	movwf	7
 13322  26E6  1581               	bsf	1,3
 13323                           
 13324                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13325  26E7  319A  2254         	fcall	_setLoad_AH_AL_Restore
 13326  26E9  0008               	return
 13327  26EA                     __end_of_Load_Initialization:	
 13328                           
 13329                           	psect	text75
 13330  1A54                     __ptext75:	
 13331 ;; *************** function _setLoad_AH_AL_Restore *****************
 13332 ;; Defined at:
 13333 ;;		line 307 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;		None
 13336 ;; Auto vars:     Size  Location     Type
 13337 ;;  i               1    1[BANK0 ] unsigned char 
 13338 ;; Return value:  Size  Location     Type
 13339 ;;		None               void
 13340 ;; Registers used:
 13341 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13342 ;; Tracked objects:
 13343 ;;		On entry : 0/0
 13344 ;;		On exit  : 0/0
 13345 ;;		Unchanged: 0/0
 13346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;Total ram usage:        2 bytes
 13352 ;; Hardware stack levels used:    1
 13353 ;; Hardware stack levels required when called:    4
 13354 ;; This function calls:
 13355 ;;		Nothing
 13356 ;; This function is called by:
 13357 ;;		_Load_Initialization
 13358 ;;		_Load_Main
 13359 ;; This function uses a non-reentrant model
 13360 ;;
 13361                           
 13362                           
 13363                           ;psect for function _setLoad_AH_AL_Restore
 13364  1A54                     _setLoad_AH_AL_Restore:	
 13365                           
 13366                           ;OverLoad_B1.c: 308: char i;
 13367                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 13368                           
 13369                           ;incstack = 0
 13370                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13371  1A54  0020               	movlb	0	; select bank0
 13372  1A55  01A1               	clrf	setLoad_AH_AL_Restore@i
 13373  1A56                     L11:	
 13374  1A56  3005               	movlw	5
 13375  1A57  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13376  1A58  1803               	btfsc	3,0
 13377  1A59  0008               	return
 13378                           
 13379                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 13380  1A5A  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13381  1A5B  3E08               	addlw	8
 13382  1A5C  077B               	addwf	_Load,w
 13383  1A5D  00A0               	movwf	??_setLoad_AH_AL_Restore
 13384  1A5E  0820               	movf	??_setLoad_AH_AL_Restore,w
 13385  1A5F  0086               	movwf	6
 13386  1A60  3002               	movlw	2	; select bank4/5
 13387  1A61  0087               	movwf	7
 13388  1A62  3000               	movlw	0
 13389  1A63  3FC0               	movwi [0]fsr1
 13390  1A64  3FC1               	movwi [1]fsr1
 13391                           
 13392                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 13393  1A65  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13394  1A66  3E1A               	addlw	26
 13395  1A67  077B               	addwf	_Load,w
 13396  1A68  00A0               	movwf	??_setLoad_AH_AL_Restore
 13397  1A69  0820               	movf	??_setLoad_AH_AL_Restore,w
 13398  1A6A  0086               	movwf	6
 13399  1A6B  3002               	movlw	2	; select bank4/5
 13400  1A6C  0087               	movwf	7
 13401  1A6D  30FF               	movlw	255
 13402  1A6E  3FC0               	movwi [0]fsr1
 13403  1A6F  30FF               	movlw	255
 13404  1A70  3FC1               	movwi [1]fsr1
 13405  1A71  3001               	movlw	1
 13406  1A72  00A0               	movwf	??_setLoad_AH_AL_Restore
 13407  1A73  0820               	movf	??_setLoad_AH_AL_Restore,w
 13408  1A74  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13409  1A75  2A56               	goto	L11
 13410  1A76                     __end_of_setLoad_AH_AL_Restore:	
 13411                           
 13412                           	psect	text76
 13413  1866                     __ptext76:	
 13414 ;; *************** function _LED_Main *****************
 13415 ;; Defined at:
 13416 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;		None
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;		None
 13421 ;; Return value:  Size  Location     Type
 13422 ;;		None               void
 13423 ;; Registers used:
 13424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;Total ram usage:        0 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    6
 13437 ;; This function calls:
 13438 ;;		_setLED_Main
 13439 ;; This function is called by:
 13440 ;;		_main
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           
 13445                           ;psect for function _LED_Main
 13446  1866                     _LED_Main:	
 13447                           
 13448                           ;LED_B1.c: 54: setLED_Main(1);
 13449                           
 13450                           ;incstack = 0
 13451                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13452  1866  3001               	movlw	1
 13453  1867  319D  2547  3198   	fcall	_setLED_Main
 13454                           
 13455                           ;LED_B1.c: 57: setLED_Main(2);
 13456  186A  3002               	movlw	2
 13457  186B  319D  2547  3198   	fcall	_setLED_Main
 13458                           
 13459                           ;LED_B1.c: 63: setLED_Main(99);
 13460  186E  3063               	movlw	99
 13461  186F  319D  2547         	fcall	_setLED_Main
 13462  1871  0008               	return
 13463  1872                     __end_of_LED_Main:	
 13464                           
 13465                           	psect	text77
 13466  1D47                     __ptext77:	
 13467 ;; *************** function _setLED_Main *****************
 13468 ;; Defined at:
 13469 ;;		line 214 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13470 ;; Parameters:    Size  Location     Type
 13471 ;;  led             1    wreg     unsigned char 
 13472 ;; Auto vars:     Size  Location     Type
 13473 ;;  led             1    4[BANK0 ] unsigned char 
 13474 ;; Return value:  Size  Location     Type
 13475 ;;		None               void
 13476 ;; Registers used:
 13477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13478 ;; Tracked objects:
 13479 ;;		On entry : 0/0
 13480 ;;		On exit  : 0/0
 13481 ;;		Unchanged: 0/0
 13482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13487 ;;Total ram usage:        3 bytes
 13488 ;; Hardware stack levels used:    1
 13489 ;; Hardware stack levels required when called:    5
 13490 ;; This function calls:
 13491 ;;		_LedPointSelect
 13492 ;; This function is called by:
 13493 ;;		_LED_Main
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           
 13498                           ;psect for function _setLED_Main
 13499  1D47                     _setLED_Main:	
 13500                           
 13501                           ;incstack = 0
 13502                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13503                           ;setLED_Main@led stored from wreg
 13504  1D47  0020               	movlb	0	; select bank0
 13505  1D48  00A4               	movwf	setLED_Main@led
 13506                           
 13507                           ;LED_B1.c: 216: LedPointSelect(led);
 13508  1D49  0824               	movf	setLED_Main@led,w
 13509  1D4A  319A  2232  319D   	fcall	_LedPointSelect
 13510                           
 13511                           ;LED_B1.c: 217: if(LED->GO)
 13512  1D4D  0021               	movlb	1	; select bank1
 13513  1D4E  083C               	movf	_LED^(0+128),w
 13514  1D4F  0086               	movwf	6
 13515  1D50  0187               	clrf	7
 13516  1D51  1C81               	btfss	1,1
 13517  1D52  0008               	return
 13518                           
 13519                           ;LED_B1.c: 218: {
 13520                           ;LED_B1.c: 219: LED->Time++;
 13521  1D53  0A3C               	incf	_LED^(0+128),w
 13522  1D54  0086               	movwf	6
 13523  1D55  0187               	clrf	7
 13524  1D56  3001               	movlw	1
 13525  1D57  0781               	addwf	1,f
 13526  1D58  3141               	addfsr 1,1
 13527  1D59  1803               	skipnc
 13528  1D5A  0A81               	incf	1,f
 13529                           
 13530                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13531  1D5B  0A3C               	incf	_LED^(0+128),w
 13532  1D5C  0086               	movwf	6
 13533  1D5D  0187               	clrf	7
 13534  1D5E  3F40               	moviw [0]fsr1
 13535  1D5F  0020               	movlb	0	; select bank0
 13536  1D60  00A2               	movwf	??_setLED_Main
 13537  1D61  3F41               	moviw [1]fsr1
 13538  1D62  00A3               	movwf	??_setLED_Main+1
 13539  1D63  3000               	movlw	0
 13540  1D64  0223               	subwf	??_setLED_Main+1,w
 13541  1D65  3032               	movlw	50
 13542  1D66  1903               	skipnz
 13543  1D67  0222               	subwf	??_setLED_Main,w
 13544  1D68  1C03               	skipc
 13545  1D69  0008               	return
 13546                           
 13547                           ;LED_B1.c: 221: {
 13548                           ;LED_B1.c: 222: LED->Time=0;
 13549  1D6A  0021               	movlb	1	; select bank1
 13550  1D6B  0A3C               	incf	_LED^(0+128),w
 13551  1D6C  0086               	movwf	6
 13552  1D6D  0187               	clrf	7
 13553  1D6E  3000               	movlw	0
 13554  1D6F  3FC0               	movwi [0]fsr1
 13555  1D70  3FC1               	movwi [1]fsr1
 13556                           
 13557                           ;LED_B1.c: 224: if(led == 1)
 13558  1D71  0020               	movlb	0	; select bank0
 13559  1D72  0824               	movf	setLED_Main@led,w
 13560  1D73  3A01               	xorlw	1
 13561  1D74  1D03               	skipz
 13562  1D75  2D79               	goto	l6922
 13563                           
 13564                           ;LED_B1.c: 225: {
 13565                           ;LED_B1.c: 226: RA3=~RA3;
 13566  1D76  3008               	movlw	8
 13567  1D77  068C               	xorwf	12,f
 13568                           
 13569                           ;LED_B1.c: 227: }
 13570  1D78  0008               	return
 13571  1D79                     l6922:	
 13572                           
 13573                           ;LED_B1.c: 230: else if(led == 2)
 13574  1D79  0824               	movf	setLED_Main@led,w
 13575  1D7A  3A02               	xorlw	2
 13576  1D7B  1D03               	skipz
 13577  1D7C  2D80               	goto	l6926
 13578                           
 13579                           ;LED_B1.c: 231: {
 13580                           ;LED_B1.c: 232: RC7=~RC7;
 13581  1D7D  3080               	movlw	128
 13582  1D7E  068E               	xorwf	14,f
 13583                           
 13584                           ;LED_B1.c: 233: }
 13585  1D7F  0008               	return
 13586  1D80                     l6926:	
 13587                           
 13588                           ;LED_B1.c: 242: else if(led == 99)
 13589  1D80  0824               	movf	setLED_Main@led,w
 13590  1D81  3A63               	xorlw	99
 13591  1D82  1D03               	skipz
 13592  1D83  0008               	return
 13593                           
 13594                           ;LED_B1.c: 243: {
 13595                           ;LED_B1.c: 244: RB5=~RB5;
 13596  1D84  3020               	movlw	32
 13597  1D85  068D               	xorwf	13,f
 13598  1D86  0008               	return
 13599  1D87                     __end_of_setLED_Main:	
 13600                           
 13601                           	psect	text78
 13602  26C4                     __ptext78:	
 13603 ;; *************** function _LED_Initialization *****************
 13604 ;; Defined at:
 13605 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13606 ;; Parameters:    Size  Location     Type
 13607 ;;		None
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;		None
 13610 ;; Return value:  Size  Location     Type
 13611 ;;		None               void
 13612 ;; Registers used:
 13613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;Total ram usage:        0 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    7
 13626 ;; This function calls:
 13627 ;;		_setLED_Initialization
 13628 ;; This function is called by:
 13629 ;;		_main
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function _LED_Initialization
 13635  26C4                     _LED_Initialization:	
 13636                           
 13637                           ;LED_B1.c: 38: setLED_Initialization(1);
 13638                           
 13639                           ;incstack = 0
 13640                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13641  26C4  3001               	movlw	1
 13642  26C5  31A7  27DE  31A6   	fcall	_setLED_Initialization
 13643                           
 13644                           ;LED_B1.c: 41: setLED_Initialization(2);
 13645  26C8  3002               	movlw	2
 13646  26C9  31A7  27DE  31A6   	fcall	_setLED_Initialization
 13647                           
 13648                           ;LED_B1.c: 47: setLED_Initialization(99);
 13649  26CC  3063               	movlw	99
 13650  26CD  31A7  27DE         	fcall	_setLED_Initialization
 13651  26CF  0008               	return
 13652  26D0                     __end_of_LED_Initialization:	
 13653                           
 13654                           	psect	text79
 13655  27DE                     __ptext79:	
 13656 ;; *************** function _setLED_Initialization *****************
 13657 ;; Defined at:
 13658 ;;		line 67 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  led             1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  led             1    4[BANK0 ] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;		None               void
 13665 ;; Registers used:
 13666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;Total ram usage:        1 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    6
 13679 ;; This function calls:
 13680 ;;		_LedPointSelect
 13681 ;;		_setLED
 13682 ;; This function is called by:
 13683 ;;		_LED_Initialization
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           
 13688                           ;psect for function _setLED_Initialization
 13689  27DE                     _setLED_Initialization:	
 13690                           
 13691                           ;incstack = 0
 13692                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13693                           ;setLED_Initialization@led stored from wreg
 13694  27DE  0020               	movlb	0	; select bank0
 13695  27DF  00A4               	movwf	setLED_Initialization@led
 13696                           
 13697                           ;LED_B1.c: 69: LedPointSelect(led);
 13698  27E0  0824               	movf	setLED_Initialization@led,w
 13699  27E1  319A  2232  31A7   	fcall	_LedPointSelect
 13700                           
 13701                           ;LED_B1.c: 70: LED->Enable=1;
 13702  27E4  0021               	movlb	1	; select bank1
 13703  27E5  083C               	movf	_LED^(0+128),w
 13704  27E6  0086               	movwf	6
 13705  27E7  0187               	clrf	7
 13706  27E8  1401               	bsf	1,0
 13707                           
 13708                           ;LED_B1.c: 71: setLED(led,0);
 13709  27E9  0020               	movlb	0	; select bank0
 13710  27EA  01A2               	clrf	setLED@command
 13711  27EB  0824               	movf	setLED_Initialization@led,w
 13712  27EC  3192  2254         	fcall	_setLED
 13713  27EE  0008               	return
 13714  27EF                     __end_of_setLED_Initialization:	
 13715                           
 13716                           	psect	text80
 13717  1E4F                     __ptext80:	
 13718 ;; *************** function _Flash_Memory_Main *****************
 13719 ;; Defined at:
 13720 ;;		line 838 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;		None
 13725 ;; Return value:  Size  Location     Type
 13726 ;;		None               void
 13727 ;; Registers used:
 13728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        0 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    7
 13741 ;; This function calls:
 13742 ;;		_Flash_Memory_Modify
 13743 ;; This function is called by:
 13744 ;;		_main
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function _Flash_Memory_Main
 13750  1E4F                     _Flash_Memory_Main:	
 13751                           
 13752                           ;MCU_B1.c: 839: if (Memory->GO) {
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13756  1E4F  0021               	movlb	1	; select bank1
 13757  1E50  086A               	movf	_Memory^(0+128),w
 13758  1E51  3E22               	addlw	34
 13759  1E52  0086               	movwf	6
 13760  1E53  3001               	movlw	1	; select bank2/3
 13761  1E54  0087               	movwf	7
 13762  1E55  1C81               	btfss	1,1
 13763  1E56  0008               	return
 13764                           
 13765                           ;MCU_B1.c: 840: if (Memory->Modify) {
 13766  1E57  086A               	movf	_Memory^(0+128),w
 13767  1E58  3E22               	addlw	34
 13768  1E59  0086               	movwf	6
 13769  1E5A  3001               	movlw	1	; select bank2/3
 13770  1E5B  0087               	movwf	7
 13771  1E5C  1C01               	btfss	1,0
 13772  1E5D  2E8C               	goto	l9152
 13773                           
 13774                           ;MCU_B1.c: 841: Memory->Time++;
 13775  1E5E  086A               	movf	_Memory^(0+128),w
 13776  1E5F  3E23               	addlw	35
 13777  1E60  0086               	movwf	6
 13778  1E61  3001               	movlw	1	; select bank2/3
 13779  1E62  0087               	movwf	7
 13780  1E63  3001               	movlw	1
 13781  1E64  0781               	addwf	1,f
 13782  1E65  3141               	addfsr 1,1
 13783  1E66  1803               	skipnc
 13784  1E67  0A81               	incf	1,f
 13785                           
 13786                           ;MCU_B1.c: 842: if (Memory->Time == 25)
 13787  1E68  086A               	movf	_Memory^(0+128),w
 13788  1E69  3E23               	addlw	35
 13789  1E6A  0086               	movwf	6
 13790  1E6B  3001               	movlw	1	; select bank2/3
 13791  1E6C  0087               	movwf	7
 13792  1E6D  3F40               	moviw [0]fsr1
 13793  1E6E  3A19               	xorlw	25
 13794  1E6F  1D03               	skipz
 13795  1E70  2E73               	goto	u9115
 13796  1E71  3F41               	moviw [1]fsr1
 13797  1E72  3A00               	xorlw	0
 13798  1E73                     u9115:	
 13799  1E73  1D03               	skipz
 13800  1E74  0008               	return
 13801                           
 13802                           ;MCU_B1.c: 843: {
 13803                           ;MCU_B1.c: 844: Memory->Time = 0;
 13804  1E75  086A               	movf	_Memory^(0+128),w
 13805  1E76  3E23               	addlw	35
 13806  1E77  0086               	movwf	6
 13807  1E78  3001               	movlw	1	; select bank2/3
 13808  1E79  0087               	movwf	7
 13809  1E7A  3000               	movlw	0
 13810  1E7B  3FC0               	movwi [0]fsr1
 13811  1E7C  3FC1               	movwi [1]fsr1
 13812                           
 13813                           ;MCU_B1.c: 845: Memory->Modify = 0;
 13814  1E7D  086A               	movf	_Memory^(0+128),w
 13815  1E7E  3E22               	addlw	34
 13816  1E7F  0086               	movwf	6
 13817  1E80  3001               	movlw	1	; select bank2/3
 13818  1E81  0087               	movwf	7
 13819  1E82  1001               	bcf	1,0
 13820                           
 13821                           ;MCU_B1.c: 846: Memory->GO = 0;
 13822  1E83  086A               	movf	_Memory^(0+128),w
 13823  1E84  3E22               	addlw	34
 13824  1E85  0086               	movwf	6
 13825  1E86  3001               	movlw	1	; select bank2/3
 13826  1E87  0087               	movwf	7
 13827  1E88  1081               	bcf	1,1
 13828                           
 13829                           ;MCU_B1.c: 847: Flash_Memory_Modify();
 13830  1E89  3194  244E         	fcall	_Flash_Memory_Modify
 13831                           
 13832                           ;MCU_B1.c: 849: }
 13833                           ;MCU_B1.c: 850: } else {
 13834  1E8B  0008               	return
 13835  1E8C                     l9152:	
 13836                           
 13837                           ;MCU_B1.c: 851: Memory->GO = 0;
 13838  1E8C  0021               	movlb	1	; select bank1
 13839  1E8D  086A               	movf	_Memory^(0+128),w
 13840  1E8E  3E22               	addlw	34
 13841  1E8F  0086               	movwf	6
 13842  1E90  3001               	movlw	1	; select bank2/3
 13843  1E91  0087               	movwf	7
 13844  1E92  1081               	bcf	1,1
 13845  1E93  0008               	return
 13846  1E94                     __end_of_Flash_Memory_Main:	
 13847                           
 13848                           	psect	text81
 13849  144E                     __ptext81:	
 13850 ;; *************** function _Flash_Memory_Modify *****************
 13851 ;; Defined at:
 13852 ;;		line 908 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;		None
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;  i               1    6[BANK0 ] unsigned char 
 13857 ;; Return value:  Size  Location     Type
 13858 ;;		None               void
 13859 ;; Registers used:
 13860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13861 ;; Tracked objects:
 13862 ;;		On entry : 0/0
 13863 ;;		On exit  : 0/0
 13864 ;;		Unchanged: 0/0
 13865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;Total ram usage:        3 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; Hardware stack levels required when called:    6
 13873 ;; This function calls:
 13874 ;;		_Flash_Memory_Erasing
 13875 ;;		_Flash_Memory_Read
 13876 ;;		_Flash_Memory_Write
 13877 ;; This function is called by:
 13878 ;;		_Flash_Memory_Main
 13879 ;; This function uses a non-reentrant model
 13880 ;;
 13881                           
 13882                           
 13883                           ;psect for function _Flash_Memory_Modify
 13884  144E                     _Flash_Memory_Modify:	
 13885                           
 13886                           ;MCU_B1.c: 909: char i;
 13887                           ;MCU_B1.c: 910: for (i = 0; i < 32; i++) {
 13888                           
 13889                           ;incstack = 0
 13890                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13891  144E  0020               	movlb	0	; select bank0
 13892  144F  01A6               	clrf	Flash_Memory_Modify@i
 13893  1450  3020               	movlw	32
 13894  1451  0226               	subwf	Flash_Memory_Modify@i,w
 13895  1452  1803               	btfsc	3,0
 13896  1453  2C6D               	goto	l8760
 13897  1454                     l8754:	
 13898                           
 13899                           ;MCU_B1.c: 911: Memory->Data[i] = Flash_Memory_Read(i);
 13900  1454  0826               	movf	Flash_Memory_Modify@i,w
 13901  1455  3199  2110  3194   	fcall	_Flash_Memory_Read
 13902  1458  0020               	movlb	0	; select bank0
 13903  1459  00A4               	movwf	??_Flash_Memory_Modify
 13904  145A  0826               	movf	Flash_Memory_Modify@i,w
 13905  145B  0021               	movlb	1	; select bank1
 13906  145C  076A               	addwf	_Memory^(0+128),w
 13907  145D  0020               	movlb	0	; select bank0
 13908  145E  00A5               	movwf	??_Flash_Memory_Modify+1
 13909  145F  0825               	movf	??_Flash_Memory_Modify+1,w
 13910  1460  0086               	movwf	6
 13911  1461  3001               	movlw	1	; select bank2/3
 13912  1462  0087               	movwf	7
 13913  1463  0824               	movf	??_Flash_Memory_Modify,w
 13914  1464  0081               	movwf	1
 13915  1465  3001               	movlw	1
 13916  1466  00A4               	movwf	??_Flash_Memory_Modify
 13917  1467  0824               	movf	??_Flash_Memory_Modify,w
 13918  1468  07A6               	addwf	Flash_Memory_Modify@i,f
 13919  1469  3020               	movlw	32
 13920  146A  0226               	subwf	Flash_Memory_Modify@i,w
 13921  146B  1C03               	skipc
 13922  146C  2C54               	goto	l8754
 13923  146D                     l8760:	
 13924                           
 13925                           ;MCU_B1.c: 912: }
 13926                           ;MCU_B1.c: 913: Memory->Data[0]=Product->Data[12];
 13927  146D  087D               	movf	_Product,w
 13928  146E  3E0C               	addlw	12
 13929  146F  0086               	movwf	6
 13930  1470  3001               	movlw	1	; select bank2/3
 13931  1471  0087               	movwf	7
 13932  1472  0801               	movf	1,w
 13933  1473  00A4               	movwf	??_Flash_Memory_Modify
 13934  1474  0021               	movlb	1	; select bank1
 13935  1475  086A               	movf	_Memory^(0+128),w
 13936  1476  0086               	movwf	6
 13937  1477  3001               	movlw	1	; select bank2/3
 13938  1478  0087               	movwf	7
 13939  1479  0020               	movlb	0	; select bank0
 13940  147A  0824               	movf	??_Flash_Memory_Modify,w
 13941  147B  0081               	movwf	1
 13942                           
 13943                           ;MCU_B1.c: 914: Memory->Data[1]=Product->Data[13];
 13944  147C  087D               	movf	_Product,w
 13945  147D  3E0D               	addlw	13
 13946  147E  0086               	movwf	6
 13947  147F  3001               	movlw	1	; select bank2/3
 13948  1480  0087               	movwf	7
 13949  1481  0801               	movf	1,w
 13950  1482  00A4               	movwf	??_Flash_Memory_Modify
 13951  1483  0021               	movlb	1	; select bank1
 13952  1484  0A6A               	incf	_Memory^(0+128),w
 13953  1485  0086               	movwf	6
 13954  1486  3001               	movlw	1	; select bank2/3
 13955  1487  0087               	movwf	7
 13956  1488  0020               	movlb	0	; select bank0
 13957  1489  0824               	movf	??_Flash_Memory_Modify,w
 13958  148A  0081               	movwf	1
 13959                           
 13960                           ;MCU_B1.c: 915: Memory->Data[2]=Product->Data[14];
 13961  148B  087D               	movf	_Product,w
 13962  148C  3E0E               	addlw	14
 13963  148D  0086               	movwf	6
 13964  148E  3001               	movlw	1	; select bank2/3
 13965  148F  0087               	movwf	7
 13966  1490  0801               	movf	1,w
 13967  1491  00A4               	movwf	??_Flash_Memory_Modify
 13968  1492  0021               	movlb	1	; select bank1
 13969  1493  086A               	movf	_Memory^(0+128),w
 13970  1494  3E02               	addlw	2
 13971  1495  0086               	movwf	6
 13972  1496  3001               	movlw	1	; select bank2/3
 13973  1497  0087               	movwf	7
 13974  1498  0020               	movlb	0	; select bank0
 13975  1499  0824               	movf	??_Flash_Memory_Modify,w
 13976  149A  0081               	movwf	1
 13977                           
 13978                           ;MCU_B1.c: 921: if (Memory->LoopSave) {
 13979  149B  0021               	movlb	1	; select bank1
 13980  149C  086A               	movf	_Memory^(0+128),w
 13981  149D  3E22               	addlw	34
 13982  149E  0086               	movwf	6
 13983  149F  3001               	movlw	1	; select bank2/3
 13984  14A0  0087               	movwf	7
 13985  14A1  1D01               	btfss	1,2
 13986  14A2  2CB4               	goto	l8764
 13987                           
 13988                           ;MCU_B1.c: 922: Memory->LoopSave = 0;
 13989  14A3  086A               	movf	_Memory^(0+128),w
 13990  14A4  3E22               	addlw	34
 13991  14A5  0086               	movwf	6
 13992  14A6  3001               	movlw	1	; select bank2/3
 13993  14A7  0087               	movwf	7
 13994  14A8  1101               	bcf	1,2
 13995                           
 13996                           ;MCU_B1.c: 923: TMain->FirstOpen = 0;
 13997  14A9  086B               	movf	_TMain^(0+128),w
 13998  14AA  0086               	movwf	6
 13999  14AB  3001               	movlw	1	; select bank2/3
 14000  14AC  0087               	movwf	7
 14001  14AD  1281               	bcf	1,5
 14002                           
 14003                           ;MCU_B1.c: 924: TMain->First = 0;
 14004  14AE  086B               	movf	_TMain^(0+128),w
 14005  14AF  3E03               	addlw	3
 14006  14B0  0086               	movwf	6
 14007  14B1  3001               	movlw	1	; select bank2/3
 14008  14B2  0087               	movwf	7
 14009  14B3  1081               	bcf	1,1
 14010  14B4                     l8764:	
 14011                           
 14012                           ;MCU_B1.c: 926: }
 14013                           ;MCU_B1.c: 927: GIE = 0;
 14014  14B4  138B               	bcf	11,7	;volatile
 14015                           
 14016                           ;MCU_B1.c: 928: Flash_Memory_Erasing();
 14017  14B5  31A6  26B8  3194   	fcall	_Flash_Memory_Erasing
 14018                           
 14019                           ;MCU_B1.c: 929: Flash_Memory_Write();
 14020  14B8  319C  2478         	fcall	_Flash_Memory_Write
 14021                           
 14022                           ;MCU_B1.c: 930: GIE = 1;
 14023  14BA  178B               	bsf	11,7	;volatile
 14024  14BB  0008               	return
 14025  14BC                     __end_of_Flash_Memory_Modify:	
 14026                           
 14027                           	psect	text82
 14028  26B8                     __ptext82:	
 14029 ;; *************** function _Flash_Memory_Erasing *****************
 14030 ;; Defined at:
 14031 ;;		line 897 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;		None
 14036 ;; Return value:  Size  Location     Type
 14037 ;;		None               void
 14038 ;; Registers used:
 14039 ;;		wreg, status,2, status,0, pclath, cstack
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;Total ram usage:        0 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    5
 14052 ;; This function calls:
 14053 ;;		_Flash_Memory_Unlock
 14054 ;; This function is called by:
 14055 ;;		_Flash_Memory_Modify
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           
 14060                           ;psect for function _Flash_Memory_Erasing
 14061  26B8                     _Flash_Memory_Erasing:	
 14062                           
 14063                           ;MCU_B1.c: 898: CFGS = 0;
 14064                           
 14065                           ;incstack = 0
 14066                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14067  26B8  0023               	movlb	3	; select bank3
 14068  26B9  1315               	bcf	21,6	;volatile
 14069                           
 14070                           ;MCU_B1.c: 899: PMADRH = 0x30;
 14071  26BA  3030               	movlw	48
 14072  26BB  0092               	movwf	18	;volatile
 14073                           
 14074                           ;MCU_B1.c: 900: PMADRL = 0x00;
 14075  26BC  0191               	clrf	17	;volatile
 14076                           
 14077                           ;MCU_B1.c: 901: FREE = 1;
 14078  26BD  1615               	bsf	21,4	;volatile
 14079                           
 14080                           ;MCU_B1.c: 902: WREN = 1;
 14081  26BE  1515               	bsf	21,2	;volatile
 14082                           
 14083                           ;MCU_B1.c: 903: Flash_Memory_Unlock();
 14084  26BF  31A5  25DC         	fcall	_Flash_Memory_Unlock
 14085                           
 14086                           ;MCU_B1.c: 904: WREN = 0;
 14087  26C1  0023               	movlb	3	; select bank3
 14088  26C2  1115               	bcf	21,2	;volatile
 14089  26C3  0008               	return
 14090  26C4                     __end_of_Flash_Memory_Erasing:	
 14091                           
 14092                           	psect	text83
 14093  0DEB                     __ptext83:	
 14094 ;; *************** function _Flash_Memory_Initialization *****************
 14095 ;; Defined at:
 14096 ;;		line 797 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;		None
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  i               1   62[BANK0 ] unsigned char 
 14101 ;; Return value:  Size  Location     Type
 14102 ;;		None               void
 14103 ;; Registers used:
 14104 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;Total ram usage:        2 bytes
 14115 ;; Hardware stack levels used:    1
 14116 ;; Hardware stack levels required when called:    7
 14117 ;; This function calls:
 14118 ;;		_Flash_Memory_Read
 14119 ;;		_Flash_Memory_Write
 14120 ;;		_setPercentValue
 14121 ;; This function is called by:
 14122 ;;		_main
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           
 14127                           ;psect for function _Flash_Memory_Initialization
 14128  0DEB                     _Flash_Memory_Initialization:	
 14129                           
 14130                           ;MCU_B1.c: 798: char i;
 14131                           ;MCU_B1.c: 799: if (Flash_Memory_Read(31) == 0xaa) {
 14132                           
 14133                           ;incstack = 0
 14134                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14135  0DEB  301F               	movlw	31
 14136  0DEC  3199  2110  318D   	fcall	_Flash_Memory_Read
 14137  0DEF  3AAA               	xorlw	170
 14138  0DF0  1D03               	skipz
 14139  0DF1  2E64               	goto	l9108
 14140                           
 14141                           ;MCU_B1.c: 800: Product->Data[12] = Flash_Memory_Read(0);
 14142  0DF2  3000               	movlw	0
 14143  0DF3  3199  2110  318D   	fcall	_Flash_Memory_Read
 14144  0DF6  0020               	movlb	0	; select bank0
 14145  0DF7  00DD               	movwf	??_Flash_Memory_Initialization
 14146  0DF8  087D               	movf	_Product,w
 14147  0DF9  3E0C               	addlw	12
 14148  0DFA  0086               	movwf	6
 14149  0DFB  3001               	movlw	1	; select bank2/3
 14150  0DFC  0087               	movwf	7
 14151  0DFD  085D               	movf	??_Flash_Memory_Initialization,w
 14152  0DFE  0081               	movwf	1
 14153                           
 14154                           ;MCU_B1.c: 801: Product->Data[13] = Flash_Memory_Read(1);
 14155  0DFF  3001               	movlw	1
 14156  0E00  3199  2110  318D   	fcall	_Flash_Memory_Read
 14157  0E03  0020               	movlb	0	; select bank0
 14158  0E04  00DD               	movwf	??_Flash_Memory_Initialization
 14159  0E05  087D               	movf	_Product,w
 14160  0E06  3E0D               	addlw	13
 14161  0E07  0086               	movwf	6
 14162  0E08  3001               	movlw	1	; select bank2/3
 14163  0E09  0087               	movwf	7
 14164  0E0A  085D               	movf	??_Flash_Memory_Initialization,w
 14165  0E0B  0081               	movwf	1
 14166                           
 14167                           ;MCU_B1.c: 802: Product->Data[14] = Flash_Memory_Read(2);
 14168  0E0C  3002               	movlw	2
 14169  0E0D  3199  2110  318D   	fcall	_Flash_Memory_Read
 14170  0E10  0020               	movlb	0	; select bank0
 14171  0E11  00DD               	movwf	??_Flash_Memory_Initialization
 14172  0E12  087D               	movf	_Product,w
 14173  0E13  3E0E               	addlw	14
 14174  0E14  0086               	movwf	6
 14175  0E15  3001               	movlw	1	; select bank2/3
 14176  0E16  0087               	movwf	7
 14177  0E17  085D               	movf	??_Flash_Memory_Initialization,w
 14178  0E18  0081               	movwf	1
 14179                           
 14180                           ;MCU_B1.c: 808: i = setPercentValue(((char)((100-55)*1.5)));
 14181  0E19  3043               	movlw	67
 14182  0E1A  319E  2694  318D   	fcall	_setPercentValue
 14183  0E1D  0020               	movlb	0	; select bank0
 14184  0E1E  00DD               	movwf	??_Flash_Memory_Initialization
 14185  0E1F  085D               	movf	??_Flash_Memory_Initialization,w
 14186  0E20  00DE               	movwf	Flash_Memory_Initialization@i
 14187                           
 14188                           ;MCU_B1.c: 809: Product->Data[21] = i;
 14189  0E21  085E               	movf	Flash_Memory_Initialization@i,w
 14190  0E22  00DD               	movwf	??_Flash_Memory_Initialization
 14191  0E23  087D               	movf	_Product,w
 14192  0E24  3E15               	addlw	21
 14193  0E25  0086               	movwf	6
 14194  0E26  3001               	movlw	1	; select bank2/3
 14195  0E27  0087               	movwf	7
 14196  0E28  085D               	movf	??_Flash_Memory_Initialization,w
 14197  0E29  0081               	movwf	1
 14198                           
 14199                           ;MCU_B1.c: 810: Product->Data[22] = i;
 14200  0E2A  085E               	movf	Flash_Memory_Initialization@i,w
 14201  0E2B  00DD               	movwf	??_Flash_Memory_Initialization
 14202  0E2C  087D               	movf	_Product,w
 14203  0E2D  3E16               	addlw	22
 14204  0E2E  0086               	movwf	6
 14205  0E2F  3001               	movlw	1	; select bank2/3
 14206  0E30  0087               	movwf	7
 14207  0E31  085D               	movf	??_Flash_Memory_Initialization,w
 14208  0E32  0081               	movwf	1
 14209                           
 14210                           ;MCU_B1.c: 811: Product->Data[23] = i;
 14211  0E33  085E               	movf	Flash_Memory_Initialization@i,w
 14212  0E34  00DD               	movwf	??_Flash_Memory_Initialization
 14213  0E35  087D               	movf	_Product,w
 14214  0E36  3E17               	addlw	23
 14215  0E37  0086               	movwf	6
 14216  0E38  3001               	movlw	1	; select bank2/3
 14217  0E39  0087               	movwf	7
 14218  0E3A  085D               	movf	??_Flash_Memory_Initialization,w
 14219  0E3B  0081               	movwf	1
 14220                           
 14221                           ;MCU_B1.c: 813: if (Product->Data[12] == 0xff && Product->Data[13] == 0xff && Product->D
      +                          ata[14] == 0xff) {
 14222  0E3C  087D               	movf	_Product,w
 14223  0E3D  3E0C               	addlw	12
 14224  0E3E  0086               	movwf	6
 14225  0E3F  3001               	movlw	1	; select bank2/3
 14226  0E40  0087               	movwf	7
 14227  0E41  0801               	movf	1,w
 14228  0E42  3AFF               	xorlw	255
 14229  0E43  1D03               	skipz
 14230  0E44  0008               	return
 14231  0E45  087D               	movf	_Product,w
 14232  0E46  3E0D               	addlw	13
 14233  0E47  0086               	movwf	6
 14234  0E48  3001               	movlw	1	; select bank2/3
 14235  0E49  0087               	movwf	7
 14236  0E4A  0801               	movf	1,w
 14237  0E4B  3AFF               	xorlw	255
 14238  0E4C  1D03               	skipz
 14239  0E4D  0008               	return
 14240  0E4E  087D               	movf	_Product,w
 14241  0E4F  3E0E               	addlw	14
 14242  0E50  0086               	movwf	6
 14243  0E51  3001               	movlw	1	; select bank2/3
 14244  0E52  0087               	movwf	7
 14245  0E53  0801               	movf	1,w
 14246  0E54  3AFF               	xorlw	255
 14247  0E55  1D03               	skipz
 14248  0E56  0008               	return
 14249                           
 14250                           ;MCU_B1.c: 814: TMain->FirstOpen = 1;
 14251  0E57  0021               	movlb	1	; select bank1
 14252  0E58  086B               	movf	_TMain^(0+128),w
 14253  0E59  0086               	movwf	6
 14254  0E5A  3001               	movlw	1	; select bank2/3
 14255  0E5B  0087               	movwf	7
 14256  0E5C  1681               	bsf	1,5
 14257                           
 14258                           ;MCU_B1.c: 815: TMain->First = 1;
 14259  0E5D  086B               	movf	_TMain^(0+128),w
 14260  0E5E  3E03               	addlw	3
 14261  0E5F  0086               	movwf	6
 14262  0E60  3001               	movlw	1	; select bank2/3
 14263  0E61  0087               	movwf	7
 14264  0E62  1481               	bsf	1,1
 14265                           
 14266                           ;MCU_B1.c: 816: }
 14267                           ;MCU_B1.c: 817: } else {
 14268  0E63  0008               	return
 14269  0E64                     l9108:	
 14270                           
 14271                           ;MCU_B1.c: 818: i = setPercentValue(((char)((100-55)*1.5)));
 14272  0E64  3043               	movlw	67
 14273  0E65  319E  2694  318D   	fcall	_setPercentValue
 14274  0E68  0020               	movlb	0	; select bank0
 14275  0E69  00DD               	movwf	??_Flash_Memory_Initialization
 14276  0E6A  085D               	movf	??_Flash_Memory_Initialization,w
 14277  0E6B  00DE               	movwf	Flash_Memory_Initialization@i
 14278                           
 14279                           ;MCU_B1.c: 819: Memory->Data[0]=0xff;
 14280  0E6C  30FF               	movlw	255
 14281  0E6D  00DD               	movwf	??_Flash_Memory_Initialization
 14282  0E6E  0021               	movlb	1	; select bank1
 14283  0E6F  086A               	movf	_Memory^(0+128),w
 14284  0E70  0086               	movwf	6
 14285  0E71  3001               	movlw	1	; select bank2/3
 14286  0E72  0087               	movwf	7
 14287  0E73  0020               	movlb	0	; select bank0
 14288  0E74  085D               	movf	??_Flash_Memory_Initialization,w
 14289  0E75  0081               	movwf	1
 14290                           
 14291                           ;MCU_B1.c: 820: Memory->Data[1]=0xff;
 14292  0E76  30FF               	movlw	255
 14293  0E77  00DD               	movwf	??_Flash_Memory_Initialization
 14294  0E78  0021               	movlb	1	; select bank1
 14295  0E79  0A6A               	incf	_Memory^(0+128),w
 14296  0E7A  0086               	movwf	6
 14297  0E7B  3001               	movlw	1	; select bank2/3
 14298  0E7C  0087               	movwf	7
 14299  0E7D  0020               	movlb	0	; select bank0
 14300  0E7E  085D               	movf	??_Flash_Memory_Initialization,w
 14301  0E7F  0081               	movwf	1
 14302                           
 14303                           ;MCU_B1.c: 821: Memory->Data[2]=0xff;
 14304  0E80  30FF               	movlw	255
 14305  0E81  00DD               	movwf	??_Flash_Memory_Initialization
 14306  0E82  0021               	movlb	1	; select bank1
 14307  0E83  086A               	movf	_Memory^(0+128),w
 14308  0E84  3E02               	addlw	2
 14309  0E85  0086               	movwf	6
 14310  0E86  3001               	movlw	1	; select bank2/3
 14311  0E87  0087               	movwf	7
 14312  0E88  0020               	movlb	0	; select bank0
 14313  0E89  085D               	movf	??_Flash_Memory_Initialization,w
 14314  0E8A  0081               	movwf	1
 14315                           
 14316                           ;MCU_B1.c: 822: Memory->Data[3]=0xff;
 14317  0E8B  30FF               	movlw	255
 14318  0E8C  00DD               	movwf	??_Flash_Memory_Initialization
 14319  0E8D  0021               	movlb	1	; select bank1
 14320  0E8E  086A               	movf	_Memory^(0+128),w
 14321  0E8F  3E03               	addlw	3
 14322  0E90  0086               	movwf	6
 14323  0E91  3001               	movlw	1	; select bank2/3
 14324  0E92  0087               	movwf	7
 14325  0E93  0020               	movlb	0	; select bank0
 14326  0E94  085D               	movf	??_Flash_Memory_Initialization,w
 14327  0E95  0081               	movwf	1
 14328                           
 14329                           ;MCU_B1.c: 823: Memory->Data[4]=0xff;
 14330  0E96  30FF               	movlw	255
 14331  0E97  00DD               	movwf	??_Flash_Memory_Initialization
 14332  0E98  0021               	movlb	1	; select bank1
 14333  0E99  086A               	movf	_Memory^(0+128),w
 14334  0E9A  3E04               	addlw	4
 14335  0E9B  0086               	movwf	6
 14336  0E9C  3001               	movlw	1	; select bank2/3
 14337  0E9D  0087               	movwf	7
 14338  0E9E  0020               	movlb	0	; select bank0
 14339  0E9F  085D               	movf	??_Flash_Memory_Initialization,w
 14340  0EA0  0081               	movwf	1
 14341                           
 14342                           ;MCU_B1.c: 824: Memory->Data[5]=0xff;
 14343  0EA1  30FF               	movlw	255
 14344  0EA2  00DD               	movwf	??_Flash_Memory_Initialization
 14345  0EA3  0021               	movlb	1	; select bank1
 14346  0EA4  086A               	movf	_Memory^(0+128),w
 14347  0EA5  3E05               	addlw	5
 14348  0EA6  0086               	movwf	6
 14349  0EA7  3001               	movlw	1	; select bank2/3
 14350  0EA8  0087               	movwf	7
 14351  0EA9  0020               	movlb	0	; select bank0
 14352  0EAA  085D               	movf	??_Flash_Memory_Initialization,w
 14353  0EAB  0081               	movwf	1
 14354                           
 14355                           ;MCU_B1.c: 825: Memory->Data[31]=0xaa;
 14356  0EAC  30AA               	movlw	170
 14357  0EAD  00DD               	movwf	??_Flash_Memory_Initialization
 14358  0EAE  0021               	movlb	1	; select bank1
 14359  0EAF  086A               	movf	_Memory^(0+128),w
 14360  0EB0  3E1F               	addlw	31
 14361  0EB1  0086               	movwf	6
 14362  0EB2  3001               	movlw	1	; select bank2/3
 14363  0EB3  0087               	movwf	7
 14364  0EB4  0020               	movlb	0	; select bank0
 14365  0EB5  085D               	movf	??_Flash_Memory_Initialization,w
 14366  0EB6  0081               	movwf	1
 14367                           
 14368                           ;MCU_B1.c: 826: Product->Data[21] = i;
 14369  0EB7  085E               	movf	Flash_Memory_Initialization@i,w
 14370  0EB8  00DD               	movwf	??_Flash_Memory_Initialization
 14371  0EB9  087D               	movf	_Product,w
 14372  0EBA  3E15               	addlw	21
 14373  0EBB  0086               	movwf	6
 14374  0EBC  3001               	movlw	1	; select bank2/3
 14375  0EBD  0087               	movwf	7
 14376  0EBE  085D               	movf	??_Flash_Memory_Initialization,w
 14377  0EBF  0081               	movwf	1
 14378                           
 14379                           ;MCU_B1.c: 827: Product->Data[22] = i;
 14380  0EC0  085E               	movf	Flash_Memory_Initialization@i,w
 14381  0EC1  00DD               	movwf	??_Flash_Memory_Initialization
 14382  0EC2  087D               	movf	_Product,w
 14383  0EC3  3E16               	addlw	22
 14384  0EC4  0086               	movwf	6
 14385  0EC5  3001               	movlw	1	; select bank2/3
 14386  0EC6  0087               	movwf	7
 14387  0EC7  085D               	movf	??_Flash_Memory_Initialization,w
 14388  0EC8  0081               	movwf	1
 14389                           
 14390                           ;MCU_B1.c: 828: Product->Data[23] = i;
 14391  0EC9  085E               	movf	Flash_Memory_Initialization@i,w
 14392  0ECA  00DD               	movwf	??_Flash_Memory_Initialization
 14393  0ECB  087D               	movf	_Product,w
 14394  0ECC  3E17               	addlw	23
 14395  0ECD  0086               	movwf	6
 14396  0ECE  3001               	movlw	1	; select bank2/3
 14397  0ECF  0087               	movwf	7
 14398  0ED0  085D               	movf	??_Flash_Memory_Initialization,w
 14399  0ED1  0081               	movwf	1
 14400                           
 14401                           ;MCU_B1.c: 829: GIE = 0;
 14402  0ED2  138B               	bcf	11,7	;volatile
 14403                           
 14404                           ;MCU_B1.c: 830: Flash_Memory_Write();
 14405  0ED3  319C  2478         	fcall	_Flash_Memory_Write
 14406                           
 14407                           ;MCU_B1.c: 831: GIE = 1;
 14408  0ED5  178B               	bsf	11,7	;volatile
 14409                           
 14410                           ;MCU_B1.c: 832: TMain->FirstOpen = 1;
 14411  0ED6  0021               	movlb	1	; select bank1
 14412  0ED7  086B               	movf	_TMain^(0+128),w
 14413  0ED8  0086               	movwf	6
 14414  0ED9  3001               	movlw	1	; select bank2/3
 14415  0EDA  0087               	movwf	7
 14416  0EDB  1681               	bsf	1,5
 14417                           
 14418                           ;MCU_B1.c: 833: TMain->First = 1;
 14419  0EDC  086B               	movf	_TMain^(0+128),w
 14420  0EDD  3E03               	addlw	3
 14421  0EDE  0086               	movwf	6
 14422  0EDF  3001               	movlw	1	; select bank2/3
 14423  0EE0  0087               	movwf	7
 14424  0EE1  1481               	bsf	1,1
 14425  0EE2  0008               	return
 14426  0EE3                     __end_of_Flash_Memory_Initialization:	
 14427                           
 14428                           	psect	text84
 14429  1C78                     __ptext84:	
 14430 ;; *************** function _Flash_Memory_Write *****************
 14431 ;; Defined at:
 14432 ;;		line 878 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14433 ;; Parameters:    Size  Location     Type
 14434 ;;		None
 14435 ;; Auto vars:     Size  Location     Type
 14436 ;;  i               1    1[BANK0 ] unsigned char 
 14437 ;; Return value:  Size  Location     Type
 14438 ;;		None               void
 14439 ;; Registers used:
 14440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14441 ;; Tracked objects:
 14442 ;;		On entry : 0/0
 14443 ;;		On exit  : 0/0
 14444 ;;		Unchanged: 0/0
 14445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;Total ram usage:        2 bytes
 14451 ;; Hardware stack levels used:    1
 14452 ;; Hardware stack levels required when called:    5
 14453 ;; This function calls:
 14454 ;;		_Flash_Memory_Unlock
 14455 ;; This function is called by:
 14456 ;;		_Flash_Memory_Initialization
 14457 ;;		_Flash_Memory_Modify
 14458 ;; This function uses a non-reentrant model
 14459 ;;
 14460                           
 14461                           
 14462                           ;psect for function _Flash_Memory_Write
 14463  1C78                     _Flash_Memory_Write:	
 14464                           
 14465                           ;MCU_B1.c: 879: char i;
 14466                           ;MCU_B1.c: 880: CFGS = 0;
 14467                           
 14468                           ;incstack = 0
 14469                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14470  1C78  0023               	movlb	3	; select bank3
 14471  1C79  1315               	bcf	21,6	;volatile
 14472                           
 14473                           ;MCU_B1.c: 881: PMADRH = 0x30;
 14474  1C7A  3030               	movlw	48
 14475  1C7B  0092               	movwf	18	;volatile
 14476                           
 14477                           ;MCU_B1.c: 882: PMDATH = 0;
 14478  1C7C  0194               	clrf	20	;volatile
 14479                           
 14480                           ;MCU_B1.c: 883: FREE = 0;
 14481  1C7D  1215               	bcf	21,4	;volatile
 14482                           
 14483                           ;MCU_B1.c: 884: LWLO = 1;
 14484  1C7E  1695               	bsf	21,5	;volatile
 14485                           
 14486                           ;MCU_B1.c: 885: WREN = 1;
 14487  1C7F  1515               	bsf	21,2	;volatile
 14488                           
 14489                           ;MCU_B1.c: 886: for (i = 0; i < 32; i++) {
 14490  1C80  0020               	movlb	0	; select bank0
 14491  1C81  01A1               	clrf	Flash_Memory_Write@i
 14492  1C82  3020               	movlw	32
 14493  1C83  0221               	subwf	Flash_Memory_Write@i,w
 14494  1C84  1803               	btfsc	3,0
 14495  1C85  2CA2               	goto	l1375
 14496  1C86                     l8418:	
 14497                           
 14498                           ;MCU_B1.c: 887: PMADRL = i;
 14499  1C86  0821               	movf	Flash_Memory_Write@i,w
 14500  1C87  0023               	movlb	3	; select bank3
 14501  1C88  0091               	movwf	17	;volatile
 14502                           
 14503                           ;MCU_B1.c: 888: PMDATL = Memory->Data[i];
 14504  1C89  0020               	movlb	0	; select bank0
 14505  1C8A  0821               	movf	Flash_Memory_Write@i,w
 14506  1C8B  0021               	movlb	1	; select bank1
 14507  1C8C  076A               	addwf	_Memory^(0+128),w
 14508  1C8D  0020               	movlb	0	; select bank0
 14509  1C8E  00A0               	movwf	??_Flash_Memory_Write
 14510  1C8F  0820               	movf	??_Flash_Memory_Write,w
 14511  1C90  0086               	movwf	6
 14512  1C91  3001               	movlw	1	; select bank2/3
 14513  1C92  0087               	movwf	7
 14514  1C93  0801               	movf	1,w
 14515  1C94  0023               	movlb	3	; select bank3
 14516  1C95  0093               	movwf	19	;volatile
 14517                           
 14518                           ;MCU_B1.c: 889: Flash_Memory_Unlock();
 14519  1C96  31A5  25DC  319C   	fcall	_Flash_Memory_Unlock
 14520  1C99  3001               	movlw	1
 14521  1C9A  0020               	movlb	0	; select bank0
 14522  1C9B  00A0               	movwf	??_Flash_Memory_Write
 14523  1C9C  0820               	movf	??_Flash_Memory_Write,w
 14524  1C9D  07A1               	addwf	Flash_Memory_Write@i,f
 14525  1C9E  3020               	movlw	32
 14526  1C9F  0221               	subwf	Flash_Memory_Write@i,w
 14527  1CA0  1C03               	skipc
 14528  1CA1  2C86               	goto	l8418
 14529  1CA2                     l1375:	
 14530                           
 14531                           ;MCU_B1.c: 890: }
 14532                           ;MCU_B1.c: 891: LWLO = 0;
 14533  1CA2  0023               	movlb	3	; select bank3
 14534  1CA3  1295               	bcf	21,5	;volatile
 14535                           
 14536                           ;MCU_B1.c: 892: Flash_Memory_Unlock();
 14537  1CA4  31A5  25DC         	fcall	_Flash_Memory_Unlock
 14538                           
 14539                           ;MCU_B1.c: 893: WREN = 0;
 14540  1CA6  0023               	movlb	3	; select bank3
 14541  1CA7  1115               	bcf	21,2	;volatile
 14542  1CA8  0008               	return
 14543  1CA9                     __end_of_Flash_Memory_Write:	
 14544                           
 14545                           	psect	text85
 14546  25DC                     __ptext85:	
 14547 ;; *************** function _Flash_Memory_Unlock *****************
 14548 ;; Defined at:
 14549 ;;		line 857 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14550 ;; Parameters:    Size  Location     Type
 14551 ;;		None
 14552 ;; Auto vars:     Size  Location     Type
 14553 ;;		None
 14554 ;; Return value:  Size  Location     Type
 14555 ;;		None               void
 14556 ;; Registers used:
 14557 ;;		wreg
 14558 ;; Tracked objects:
 14559 ;;		On entry : 0/0
 14560 ;;		On exit  : 0/0
 14561 ;;		Unchanged: 0/0
 14562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;Total ram usage:        0 bytes
 14568 ;; Hardware stack levels used:    1
 14569 ;; Hardware stack levels required when called:    4
 14570 ;; This function calls:
 14571 ;;		Nothing
 14572 ;; This function is called by:
 14573 ;;		_Flash_Memory_Write
 14574 ;;		_Flash_Memory_Erasing
 14575 ;; This function uses a non-reentrant model
 14576 ;;
 14577                           
 14578                           
 14579                           ;psect for function _Flash_Memory_Unlock
 14580  25DC                     _Flash_Memory_Unlock:	
 14581                           
 14582                           ;MCU_B1.c: 858: PMCON2 = 0x55;
 14583                           
 14584                           ;incstack = 0
 14585                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14586  25DC  3055               	movlw	85
 14587  25DD  0023               	movlb	3	; select bank3
 14588  25DE  0096               	movwf	22	;volatile
 14589                           
 14590                           ;MCU_B1.c: 859: PMCON2 = 0xaa;
 14591  25DF  30AA               	movlw	170
 14592  25E0  0096               	movwf	22	;volatile
 14593                           
 14594                           ;MCU_B1.c: 860: WR = 1;
 14595  25E1  1495               	bsf	21,1	;volatile
 14596                           
 14597                           ;MCU_B1.c: 861: __nop();
 14598  25E2  0000               	nop
 14599                           
 14600                           ;MCU_B1.c: 862: __nop();
 14601  25E3  0000               	nop
 14602  25E4  0008               	return
 14603  25E5                     __end_of_Flash_Memory_Unlock:	
 14604                           
 14605                           	psect	text86
 14606  1910                     __ptext86:	
 14607 ;; *************** function _Flash_Memory_Read *****************
 14608 ;; Defined at:
 14609 ;;		line 866 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14610 ;; Parameters:    Size  Location     Type
 14611 ;;  address         1    wreg     unsigned char 
 14612 ;; Auto vars:     Size  Location     Type
 14613 ;;  address         1    2[BANK0 ] unsigned char 
 14614 ;;  ret             1    3[BANK0 ] unsigned char 
 14615 ;;  i               1    1[BANK0 ] unsigned char 
 14616 ;; Return value:  Size  Location     Type
 14617 ;;                  1    wreg      unsigned char 
 14618 ;; Registers used:
 14619 ;;		wreg, status,2
 14620 ;; Tracked objects:
 14621 ;;		On entry : 0/0
 14622 ;;		On exit  : 0/0
 14623 ;;		Unchanged: 0/0
 14624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14626 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;Total ram usage:        4 bytes
 14630 ;; Hardware stack levels used:    1
 14631 ;; Hardware stack levels required when called:    4
 14632 ;; This function calls:
 14633 ;;		Nothing
 14634 ;; This function is called by:
 14635 ;;		_Flash_Memory_Initialization
 14636 ;;		_Flash_Memory_Modify
 14637 ;; This function uses a non-reentrant model
 14638 ;;
 14639                           
 14640                           
 14641                           ;psect for function _Flash_Memory_Read
 14642  1910                     _Flash_Memory_Read:	
 14643                           
 14644                           ;incstack = 0
 14645                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14646                           ;Flash_Memory_Read@address stored from wreg
 14647  1910  0020               	movlb	0	; select bank0
 14648  1911  00A2               	movwf	Flash_Memory_Read@address
 14649                           
 14650                           ;MCU_B1.c: 867: char i, ret = 0;
 14651  1912  01A3               	clrf	Flash_Memory_Read@ret
 14652                           
 14653                           ;MCU_B1.c: 868: PMADRH = 0x30;
 14654  1913  3030               	movlw	48
 14655  1914  0023               	movlb	3	; select bank3
 14656  1915  0092               	movwf	18	;volatile
 14657                           
 14658                           ;MCU_B1.c: 869: PMADRL = address;
 14659  1916  0020               	movlb	0	; select bank0
 14660  1917  0822               	movf	Flash_Memory_Read@address,w
 14661  1918  0023               	movlb	3	; select bank3
 14662  1919  0091               	movwf	17	;volatile
 14663                           
 14664                           ;MCU_B1.c: 870: CFGS = 0;
 14665  191A  1315               	bcf	21,6	;volatile
 14666                           
 14667                           ;MCU_B1.c: 871: RD = 1;
 14668  191B  1415               	bsf	21,0	;volatile
 14669                           
 14670                           ;MCU_B1.c: 872: i = PMDATH;
 14671  191C  0814               	movf	20,w	;volatile
 14672  191D  0020               	movlb	0	; select bank0
 14673  191E  00A0               	movwf	??_Flash_Memory_Read
 14674  191F  0820               	movf	??_Flash_Memory_Read,w
 14675  1920  00A1               	movwf	Flash_Memory_Read@i
 14676                           
 14677                           ;MCU_B1.c: 873: ret = PMDATL;
 14678  1921  0023               	movlb	3	; select bank3
 14679  1922  0813               	movf	19,w	;volatile
 14680  1923  0020               	movlb	0	; select bank0
 14681  1924  00A0               	movwf	??_Flash_Memory_Read
 14682  1925  0820               	movf	??_Flash_Memory_Read,w
 14683  1926  00A3               	movwf	Flash_Memory_Read@ret
 14684                           
 14685                           ;MCU_B1.c: 874: return ret;
 14686  1927  0823               	movf	Flash_Memory_Read@ret,w
 14687  1928  0008               	return
 14688  1929                     __end_of_Flash_Memory_Read:	
 14689                           
 14690                           	psect	text87
 14691  25C0                     __ptext87:	
 14692 ;; *************** function _DimmerLights_Main *****************
 14693 ;; Defined at:
 14694 ;;		line 114 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14695 ;; Parameters:    Size  Location     Type
 14696 ;;		None
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;		None
 14699 ;; Return value:  Size  Location     Type
 14700 ;;		None               void
 14701 ;; Registers used:
 14702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;Total ram usage:        0 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:   10
 14715 ;; This function calls:
 14716 ;;		_DimmerLights_Close
 14717 ;;		_setDimmerLights_Main
 14718 ;; This function is called by:
 14719 ;;		_main
 14720 ;; This function uses a non-reentrant model
 14721 ;;
 14722                           
 14723                           
 14724                           ;psect for function _DimmerLights_Main
 14725  25C0                     _DimmerLights_Main:	
 14726                           
 14727                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 14728                           
 14729                           ;incstack = 0
 14730                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14731  25C0  3001               	movlw	1
 14732  25C1  3196  260D  31A5   	fcall	_setDimmerLights_Main
 14733                           
 14734                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 14735  25C4  3199  2129         	fcall	_DimmerLights_Close
 14736  25C6  0008               	return
 14737  25C7                     __end_of_DimmerLights_Main:	
 14738                           
 14739                           	psect	text88
 14740  160D                     __ptext88:	
 14741 ;; *************** function _setDimmerLights_Main *****************
 14742 ;; Defined at:
 14743 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  lights          1    wreg     unsigned char 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  lights          1   70[BANK0 ] unsigned char 
 14748 ;;  clear           1   69[BANK0 ] unsigned char 
 14749 ;; Return value:  Size  Location     Type
 14750 ;;		None               void
 14751 ;; Registers used:
 14752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14753 ;; Tracked objects:
 14754 ;;		On entry : 0/0
 14755 ;;		On exit  : 0/0
 14756 ;;		Unchanged: 0/0
 14757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;Total ram usage:        2 bytes
 14763 ;; Hardware stack levels used:    1
 14764 ;; Hardware stack levels required when called:    9
 14765 ;; This function calls:
 14766 ;;		_DimmerLightsPointSelect
 14767 ;;		_setBuz
 14768 ;;		_setDimmerLights
 14769 ;;		_setDimmerLights_Adj
 14770 ;; This function is called by:
 14771 ;;		_DimmerLights_Main
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function _setDimmerLights_Main
 14777  160D                     _setDimmerLights_Main:	
 14778                           
 14779                           ;incstack = 0
 14780                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14781                           ;setDimmerLights_Main@lights stored from wreg
 14782  160D  0020               	movlb	0	; select bank0
 14783  160E  00E6               	movwf	setDimmerLights_Main@lights
 14784                           
 14785                           ;Dimmer_B1.c: 133: char clear=1;
 14786  160F  01E5               	clrf	setDimmerLights_Main@clear
 14787  1610  0AE5               	incf	setDimmerLights_Main@clear,f
 14788                           
 14789                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 14790  1611  0866               	movf	setDimmerLights_Main@lights,w
 14791  1612  31A6  2616  3196   	fcall	_DimmerLightsPointSelect
 14792                           
 14793                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 14794  1615  0877               	movf	_DimmerLights,w
 14795  1616  3E09               	addlw	9
 14796  1617  0086               	movwf	6
 14797  1618  3001               	movlw	1	; select bank2/3
 14798  1619  0087               	movwf	7
 14799  161A  1C81               	btfss	1,1
 14800  161B  2E4D               	goto	l8680
 14801                           
 14802                           ;Dimmer_B1.c: 163: {
 14803                           ;Dimmer_B1.c: 164: if(clear)
 14804  161C  0020               	movlb	0	; select bank0
 14805  161D  0865               	movf	setDimmerLights_Main@clear,w
 14806  161E  1903               	btfsc	3,2
 14807  161F  0008               	return
 14808                           
 14809                           ;Dimmer_B1.c: 165: {
 14810                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 14811  1620  0877               	movf	_DimmerLights,w
 14812  1621  3E09               	addlw	9
 14813  1622  0086               	movwf	6
 14814  1623  3001               	movlw	1	; select bank2/3
 14815  1624  0087               	movwf	7
 14816  1625  1C01               	btfss	1,0
 14817  1626  2E3A               	goto	l8674
 14818                           
 14819                           ;Dimmer_B1.c: 167: {
 14820                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 14821  1627  0877               	movf	_DimmerLights,w
 14822  1628  3E09               	addlw	9
 14823  1629  0086               	movwf	6
 14824  162A  3001               	movlw	1	; select bank2/3
 14825  162B  0087               	movwf	7
 14826  162C  1081               	bcf	1,1
 14827                           
 14828                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 14829  162D  01A4               	clrf	setDimmerLights@status
 14830  162E  0AA4               	incf	setDimmerLights@status,f
 14831  162F  0866               	movf	setDimmerLights_Main@lights,w
 14832  1630  3189  21C6         	fcall	_setDimmerLights
 14833                           
 14834                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 14835  1632  0877               	movf	_DimmerLights,w
 14836  1633  3E0C               	addlw	12
 14837  1634  0086               	movwf	6
 14838  1635  3001               	movlw	1	; select bank2/3
 14839  1636  0087               	movwf	7
 14840  1637  1001               	bcf	1,0
 14841                           
 14842                           ;Dimmer_B1.c: 174: }
 14843  1638  0020               	movlb	0	; select bank0
 14844  1639  0008               	return
 14845  163A                     l8674:	
 14846                           
 14847                           ;Dimmer_B1.c: 175: else
 14848                           ;Dimmer_B1.c: 176: {
 14849                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 14850  163A  0877               	movf	_DimmerLights,w
 14851  163B  3E09               	addlw	9
 14852  163C  0086               	movwf	6
 14853  163D  3001               	movlw	1	; select bank2/3
 14854  163E  0087               	movwf	7
 14855  163F  1081               	bcf	1,1
 14856                           
 14857                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 14858  1640  0020               	movlb	0	; select bank0
 14859  1641  01A4               	clrf	setDimmerLights@status
 14860  1642  0866               	movf	setDimmerLights_Main@lights,w
 14861  1643  3189  21C6         	fcall	_setDimmerLights
 14862                           
 14863                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 14864  1645  0877               	movf	_DimmerLights,w
 14865  1646  3E0C               	addlw	12
 14866  1647  0086               	movwf	6
 14867  1648  3001               	movlw	1	; select bank2/3
 14868  1649  0087               	movwf	7
 14869  164A  1001               	bcf	1,0
 14870  164B  0020               	movlb	0	; select bank0
 14871  164C  0008               	return
 14872  164D                     l8680:	
 14873                           ;Dimmer_B1.c: 183: }
 14874                           ;Dimmer_B1.c: 184: }
 14875                           ;Dimmer_B1.c: 185: }
 14876                           
 14877                           
 14878                           ;Dimmer_B1.c: 186: else
 14879                           ;Dimmer_B1.c: 187: {
 14880                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 14881  164D  0877               	movf	_DimmerLights,w
 14882  164E  3E09               	addlw	9
 14883  164F  0086               	movwf	6
 14884  1650  3001               	movlw	1	; select bank2/3
 14885  1651  0087               	movwf	7
 14886  1652  1981               	btfsc	1,3
 14887  1653  2E56               	goto	l8682
 14888  1654  0020               	movlb	0	; select bank0
 14889  1655  0008               	return
 14890  1656                     l8682:	
 14891                           
 14892                           ;Dimmer_B1.c: 189: {
 14893                           ;Dimmer_B1.c: 190: if(clear)
 14894  1656  0020               	movlb	0	; select bank0
 14895  1657  0865               	movf	setDimmerLights_Main@clear,w
 14896  1658  1903               	btfsc	3,2
 14897  1659  0008               	return
 14898                           
 14899                           ;Dimmer_B1.c: 191: {
 14900                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 14901  165A  0866               	movf	setDimmerLights_Main@lights,w
 14902  165B  31A6  2616  3196   	fcall	_DimmerLightsPointSelect
 14903                           
 14904                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 14905  165E  0877               	movf	_DimmerLights,w
 14906  165F  3E09               	addlw	9
 14907  1660  0086               	movwf	6
 14908  1661  3001               	movlw	1	; select bank2/3
 14909  1662  0087               	movwf	7
 14910  1663  1181               	bcf	1,3
 14911                           
 14912                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 14913  1664  0877               	movf	_DimmerLights,w
 14914  1665  3E09               	addlw	9
 14915  1666  0086               	movwf	6
 14916  1667  3001               	movlw	1	; select bank2/3
 14917  1668  0087               	movwf	7
 14918  1669  1D01               	btfss	1,2
 14919  166A  2E7C               	goto	l8692
 14920                           
 14921                           ;Dimmer_B1.c: 195: {
 14922                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 14923  166B  0020               	movlb	0	; select bank0
 14924  166C  01E2               	clrf	setDimmerLights_Adj@status
 14925  166D  0AE2               	incf	setDimmerLights_Adj@status,f
 14926  166E  0866               	movf	setDimmerLights_Main@lights,w
 14927  166F  319D  25C7  3196   	fcall	_setDimmerLights_Adj
 14928                           
 14929                           ;Dimmer_B1.c: 197: setBuz(1,100);
 14930  1672  3064               	movlw	100
 14931  1673  0020               	movlb	0	; select bank0
 14932  1674  00A6               	movwf	setBuz@time
 14933  1675  3000               	movlw	0
 14934  1676  00A7               	movwf	setBuz@time+1
 14935  1677  3001               	movlw	1
 14936  1678  3188  2019         	fcall	_setBuz
 14937                           
 14938                           ;Dimmer_B1.c: 198: }
 14939  167A  0020               	movlb	0	; select bank0
 14940  167B  0008               	return
 14941  167C                     l8692:	
 14942                           
 14943                           ;Dimmer_B1.c: 199: else
 14944                           ;Dimmer_B1.c: 200: {
 14945                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 14946  167C  0020               	movlb	0	; select bank0
 14947  167D  01E2               	clrf	setDimmerLights_Adj@status
 14948  167E  0866               	movf	setDimmerLights_Main@lights,w
 14949  167F  319D  25C7         	fcall	_setDimmerLights_Adj
 14950  1681  0020               	movlb	0	; select bank0
 14951  1682  0008               	return
 14952  1683                     __end_of_setDimmerLights_Main:	
 14953                           
 14954                           	psect	text89
 14955  1DC7                     __ptext89:	
 14956 ;; *************** function _setDimmerLights_Adj *****************
 14957 ;; Defined at:
 14958 ;;		line 388 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;  lights          1    wreg     unsigned char 
 14961 ;;  status          1   66[BANK0 ] unsigned char 
 14962 ;; Auto vars:     Size  Location     Type
 14963 ;;  lights          1   68[BANK0 ] unsigned char 
 14964 ;; Return value:  Size  Location     Type
 14965 ;;		None               void
 14966 ;; Registers used:
 14967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14968 ;; Tracked objects:
 14969 ;;		On entry : 0/0
 14970 ;;		On exit  : 0/0
 14971 ;;		Unchanged: 0/0
 14972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14973 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;Total ram usage:        3 bytes
 14978 ;; Hardware stack levels used:    1
 14979 ;; Hardware stack levels required when called:    8
 14980 ;; This function calls:
 14981 ;;		_DimmerLightsPointSelect
 14982 ;;		_setLoad_StatusOff
 14983 ;;		_setRF_DimmerLights
 14984 ;;		_setTxData
 14985 ;; This function is called by:
 14986 ;;		_setDimmerLights_Main
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           
 14991                           ;psect for function _setDimmerLights_Adj
 14992  1DC7                     _setDimmerLights_Adj:	
 14993                           
 14994                           ;incstack = 0
 14995                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14996                           ;setDimmerLights_Adj@lights stored from wreg
 14997  1DC7  0020               	movlb	0	; select bank0
 14998  1DC8  00E4               	movwf	setDimmerLights_Adj@lights
 14999                           
 15000                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15001  1DC9  0864               	movf	setDimmerLights_Adj@lights,w
 15002  1DCA  31A6  2616  319D   	fcall	_DimmerLightsPointSelect
 15003                           
 15004                           ;Dimmer_B1.c: 391: if(status)
 15005  1DCD  0020               	movlb	0	; select bank0
 15006  1DCE  0862               	movf	setDimmerLights_Adj@status,w
 15007  1DCF  1903               	btfsc	3,2
 15008  1DD0  2DDC               	goto	l8394
 15009                           
 15010                           ;Dimmer_B1.c: 392: {
 15011                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15012  1DD1  0877               	movf	_DimmerLights,w
 15013  1DD2  0086               	movwf	6
 15014  1DD3  3001               	movlw	1	; select bank2/3
 15015  1DD4  0087               	movwf	7
 15016  1DD5  1581               	bsf	1,3
 15017                           
 15018                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15019  1DD6  0877               	movf	_DimmerLights,w
 15020  1DD7  0086               	movwf	6
 15021  1DD8  3001               	movlw	1	; select bank2/3
 15022  1DD9  0087               	movwf	7
 15023  1DDA  1481               	bsf	1,1
 15024                           
 15025                           ;Dimmer_B1.c: 395: }
 15026  1DDB  0008               	return
 15027  1DDC                     l8394:	
 15028                           
 15029                           ;Dimmer_B1.c: 396: else
 15030                           ;Dimmer_B1.c: 397: {
 15031                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15032  1DDC  0877               	movf	_DimmerLights,w
 15033  1DDD  0086               	movwf	6
 15034  1DDE  3001               	movlw	1	; select bank2/3
 15035  1DDF  0087               	movwf	7
 15036  1DE0  1D81               	btfss	1,3
 15037  1DE1  0008               	return
 15038                           
 15039                           ;Dimmer_B1.c: 399: {
 15040                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15041  1DE2  0877               	movf	_DimmerLights,w
 15042  1DE3  0086               	movwf	6
 15043  1DE4  3001               	movlw	1	; select bank2/3
 15044  1DE5  0087               	movwf	7
 15045  1DE6  1081               	bcf	1,1
 15046                           
 15047                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15048  1DE7  0877               	movf	_DimmerLights,w
 15049  1DE8  0086               	movwf	6
 15050  1DE9  3001               	movlw	1	; select bank2/3
 15051  1DEA  0087               	movwf	7
 15052  1DEB  1181               	bcf	1,3
 15053                           
 15054                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15055  1DEC  01A0               	clrf	setLoad_StatusOff@command
 15056  1DED  0AA0               	incf	setLoad_StatusOff@command,f
 15057  1DEE  3000               	movlw	0
 15058  1DEF  319C  2447  319D   	fcall	_setLoad_StatusOff
 15059                           
 15060                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15061  1DF2  0877               	movf	_DimmerLights,w
 15062  1DF3  3E04               	addlw	4
 15063  1DF4  0086               	movwf	6
 15064  1DF5  3001               	movlw	1	; select bank2/3
 15065  1DF6  0087               	movwf	7
 15066  1DF7  0801               	movf	1,w
 15067  1DF8  0020               	movlb	0	; select bank0
 15068  1DF9  00E3               	movwf	??_setDimmerLights_Adj
 15069  1DFA  0877               	movf	_DimmerLights,w
 15070  1DFB  3E05               	addlw	5
 15071  1DFC  0086               	movwf	6
 15072  1DFD  3001               	movlw	1	; select bank2/3
 15073  1DFE  0087               	movwf	7
 15074  1DFF  0863               	movf	??_setDimmerLights_Adj,w
 15075  1E00  0081               	movwf	1
 15076                           
 15077                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15078  1E01  01DD               	clrf	setRF_DimmerLights@on
 15079  1E02  0ADD               	incf	setRF_DimmerLights@on,f
 15080  1E03  0864               	movf	setDimmerLights_Adj@lights,w
 15081  1E04  3193  2377  319D   	fcall	_setRF_DimmerLights
 15082                           
 15083                           ;Dimmer_B1.c: 412: setTxData(1);
 15084  1E07  3001               	movlw	1
 15085  1E08  318A  22F2         	fcall	_setTxData
 15086  1E0A  0008               	return
 15087  1E0B                     __end_of_setDimmerLights_Adj:	
 15088                           
 15089                           	psect	text90
 15090  1C47                     __ptext90:	
 15091 ;; *************** function _setLoad_StatusOff *****************
 15092 ;; Defined at:
 15093 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15094 ;; Parameters:    Size  Location     Type
 15095 ;;  lights          1    wreg     unsigned char 
 15096 ;;  command         1    0[BANK0 ] unsigned char 
 15097 ;; Auto vars:     Size  Location     Type
 15098 ;;  lights          1    1[BANK0 ] unsigned char 
 15099 ;; Return value:  Size  Location     Type
 15100 ;;		None               void
 15101 ;; Registers used:
 15102 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15103 ;; Tracked objects:
 15104 ;;		On entry : 0/0
 15105 ;;		On exit  : 0/0
 15106 ;;		Unchanged: 0/0
 15107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15108 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15112 ;;Total ram usage:        2 bytes
 15113 ;; Hardware stack levels used:    1
 15114 ;; Hardware stack levels required when called:    4
 15115 ;; This function calls:
 15116 ;;		Nothing
 15117 ;; This function is called by:
 15118 ;;		_setDimmerLights_ERROR
 15119 ;;		_setDimmerLights_Adj
 15120 ;; This function uses a non-reentrant model
 15121 ;;
 15122                           
 15123                           
 15124                           ;psect for function _setLoad_StatusOff
 15125  1C47                     _setLoad_StatusOff:	
 15126                           
 15127                           ;incstack = 0
 15128                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15129                           ;setLoad_StatusOff@lights stored from wreg
 15130  1C47  0020               	movlb	0	; select bank0
 15131  1C48  00A1               	movwf	setLoad_StatusOff@lights
 15132                           
 15133                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 15134  1C49  087B               	movf	_Load,w
 15135  1C4A  3E46               	addlw	70
 15136  1C4B  0086               	movwf	6
 15137  1C4C  3002               	movlw	2	; select bank4/5
 15138  1C4D  0087               	movwf	7
 15139  1C4E  0820               	movf	setLoad_StatusOff@command,w
 15140  1C4F  1081               	bcf	1,1
 15141  1C50  1D03               	skipz
 15142  1C51  1481               	bsf	1,1
 15143                           
 15144                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 15145  1C52  087B               	movf	_Load,w
 15146  1C53  3E42               	addlw	66
 15147  1C54  0086               	movwf	6
 15148  1C55  3002               	movlw	2	; select bank4/5
 15149  1C56  0087               	movwf	7
 15150  1C57  3002               	movlw	2
 15151  1C58  0281               	subwf	1,f
 15152                           
 15153                           ;OverLoad_B1.c: 287: if (lights == 1) {
 15154  1C59  0821               	movf	setLoad_StatusOff@lights,w
 15155  1C5A  3A01               	xorlw	1
 15156  1C5B  1D03               	skipz
 15157  1C5C  2C63               	goto	l8054
 15158                           
 15159                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 15160  1C5D  087B               	movf	_Load,w
 15161  1C5E  3E43               	addlw	67
 15162  1C5F  0086               	movwf	6
 15163  1C60  3002               	movlw	2	; select bank4/5
 15164  1C61  0087               	movwf	7
 15165  1C62  0181               	clrf	1
 15166  1C63                     l8054:	
 15167                           
 15168                           ;OverLoad_B1.c: 289: }
 15169                           ;OverLoad_B1.c: 290: if (lights == 2) {
 15170  1C63  0821               	movf	setLoad_StatusOff@lights,w
 15171  1C64  3A02               	xorlw	2
 15172  1C65  1D03               	skipz
 15173  1C66  2C6D               	goto	l8058
 15174                           
 15175                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 15176  1C67  087B               	movf	_Load,w
 15177  1C68  3E44               	addlw	68
 15178  1C69  0086               	movwf	6
 15179  1C6A  3002               	movlw	2	; select bank4/5
 15180  1C6B  0087               	movwf	7
 15181  1C6C  0181               	clrf	1
 15182  1C6D                     l8058:	
 15183                           
 15184                           ;OverLoad_B1.c: 292: }
 15185                           ;OverLoad_B1.c: 293: if (lights == 3) {
 15186  1C6D  0821               	movf	setLoad_StatusOff@lights,w
 15187  1C6E  3A03               	xorlw	3
 15188  1C6F  1D03               	skipz
 15189  1C70  0008               	return
 15190                           
 15191                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 15192  1C71  087B               	movf	_Load,w
 15193  1C72  3E45               	addlw	69
 15194  1C73  0086               	movwf	6
 15195  1C74  3002               	movlw	2	; select bank4/5
 15196  1C75  0087               	movwf	7
 15197  1C76  0181               	clrf	1
 15198  1C77  0008               	return
 15199  1C78                     __end_of_setLoad_StatusOff:	
 15200                           
 15201                           	psect	text91
 15202  09C6                     __ptext91:	
 15203 ;; *************** function _setDimmerLights *****************
 15204 ;; Defined at:
 15205 ;;		line 330 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15206 ;; Parameters:    Size  Location     Type
 15207 ;;  lights          1    wreg     unsigned char 
 15208 ;;  status          1    4[BANK0 ] unsigned char 
 15209 ;; Auto vars:     Size  Location     Type
 15210 ;;  lights          1    6[BANK0 ] unsigned char 
 15211 ;; Return value:  Size  Location     Type
 15212 ;;		None               void
 15213 ;; Registers used:
 15214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15215 ;; Tracked objects:
 15216 ;;		On entry : 0/0
 15217 ;;		On exit  : 0/0
 15218 ;;		Unchanged: 0/0
 15219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15220 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;Total ram usage:        3 bytes
 15225 ;; Hardware stack levels used:    1
 15226 ;; Hardware stack levels required when called:    6
 15227 ;; This function calls:
 15228 ;;		_DimmerLightsPointSelect
 15229 ;;		_setLED
 15230 ;;		_setLoad_Count
 15231 ;;		_setLoad_StatusOn
 15232 ;; This function is called by:
 15233 ;;		_setDimmerLights_Main
 15234 ;;		_setControl_Lights_Table
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           
 15239                           ;psect for function _setDimmerLights
 15240  09C6                     _setDimmerLights:	
 15241                           
 15242                           ;incstack = 0
 15243                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15244                           ;setDimmerLights@lights stored from wreg
 15245  09C6  0020               	movlb	0	; select bank0
 15246  09C7  00A6               	movwf	setDimmerLights@lights
 15247                           
 15248                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15249  09C8  0826               	movf	setDimmerLights@lights,w
 15250  09C9  31A6  2616  3189   	fcall	_DimmerLightsPointSelect
 15251                           
 15252                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15253  09CC  0020               	movlb	0	; select bank0
 15254  09CD  0826               	movf	setDimmerLights@lights,w
 15255  09CE  00A5               	movwf	??_setDimmerLights
 15256  09CF  0021               	movlb	1	; select bank1
 15257  09D0  0A3A               	incf	_Dimmer^(0+128),w
 15258  09D1  0086               	movwf	6
 15259  09D2  0187               	clrf	7
 15260  09D3  0020               	movlb	0	; select bank0
 15261  09D4  0825               	movf	??_setDimmerLights,w
 15262  09D5  0081               	movwf	1
 15263                           
 15264                           ;Dimmer_B1.c: 334: if(status)
 15265  09D6  0824               	movf	setDimmerLights@status,w
 15266  09D7  1903               	btfsc	3,2
 15267  09D8  2A30               	goto	l8160
 15268                           
 15269                           ;Dimmer_B1.c: 335: {
 15270                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15271  09D9  0877               	movf	_DimmerLights,w
 15272  09DA  0086               	movwf	6
 15273  09DB  3001               	movlw	1	; select bank2/3
 15274  09DC  0087               	movwf	7
 15275  09DD  1681               	bsf	1,5
 15276                           
 15277                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15278  09DE  01A2               	clrf	setLED@command
 15279  09DF  0826               	movf	setDimmerLights@lights,w
 15280  09E0  3192  2254  3189   	fcall	_setLED
 15281                           
 15282                           ;Dimmer_B1.c: 338: RC7=!0;
 15283  09E3  0020               	movlb	0	; select bank0
 15284  09E4  178E               	bsf	14,7	;volatile
 15285                           
 15286                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15287  09E5  3000               	movlw	0
 15288  09E6  3198  209B  3189   	fcall	_setLoad_Count
 15289                           
 15290                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15291  09E9  0877               	movf	_DimmerLights,w
 15292  09EA  0086               	movwf	6
 15293  09EB  3001               	movlw	1	; select bank2/3
 15294  09EC  0087               	movwf	7
 15295  09ED  1481               	bsf	1,1
 15296                           
 15297                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15298  09EE  3003               	movlw	3
 15299  09EF  0020               	movlb	0	; select bank0
 15300  09F0  00A5               	movwf	??_setDimmerLights
 15301  09F1  0877               	movf	_DimmerLights,w
 15302  09F2  3E02               	addlw	2
 15303  09F3  0086               	movwf	6
 15304  09F4  3001               	movlw	1	; select bank2/3
 15305  09F5  0087               	movwf	7
 15306  09F6  0825               	movf	??_setDimmerLights,w
 15307  09F7  0081               	movwf	1
 15308                           
 15309                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15310  09F8  0877               	movf	_DimmerLights,w
 15311  09F9  0086               	movwf	6
 15312  09FA  3001               	movlw	1	; select bank2/3
 15313  09FB  0087               	movwf	7
 15314  09FC  1B01               	btfsc	1,6
 15315  09FD  0008               	return
 15316                           
 15317                           ;Dimmer_B1.c: 345: {
 15318                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15319  09FE  0877               	movf	_DimmerLights,w
 15320  09FF  0086               	movwf	6
 15321  0A00  3001               	movlw	1	; select bank2/3
 15322  0A01  0087               	movwf	7
 15323  0A02  1701               	bsf	1,6
 15324                           
 15325                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15326  0A03  01A0               	clrf	setLoad_StatusOn@command
 15327  0A04  0AA0               	incf	setLoad_StatusOn@command,f
 15328  0A05  0826               	movf	setDimmerLights@lights,w
 15329  0A06  319C  24A9         	fcall	_setLoad_StatusOn
 15330                           
 15331                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15332  0A08  0021               	movlb	1	; select bank1
 15333  0A09  086A               	movf	_Memory^(0+128),w
 15334  0A0A  3E22               	addlw	34
 15335  0A0B  0086               	movwf	6
 15336  0A0C  3001               	movlw	1	; select bank2/3
 15337  0A0D  0087               	movwf	7
 15338  0A0E  1081               	bcf	1,1
 15339  0A0F  086A               	movf	_Memory^(0+128),w
 15340  0A10  3E23               	addlw	35
 15341  0A11  0086               	movwf	6
 15342  0A12  3001               	movlw	1	; select bank2/3
 15343  0A13  0087               	movwf	7
 15344  0A14  3000               	movlw	0
 15345  0A15  3FC0               	movwi [0]fsr1
 15346  0A16  3FC1               	movwi [1]fsr1
 15347                           
 15348                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15349  0A17  0877               	movf	_DimmerLights,w
 15350  0A18  3E05               	addlw	5
 15351  0A19  0086               	movwf	6
 15352  0A1A  3001               	movlw	1	; select bank2/3
 15353  0A1B  0087               	movwf	7
 15354  0A1C  0801               	movf	1,w
 15355  0A1D  0020               	movlb	0	; select bank0
 15356  0A1E  00A5               	movwf	??_setDimmerLights
 15357  0A1F  0877               	movf	_DimmerLights,w
 15358  0A20  3E04               	addlw	4
 15359  0A21  0086               	movwf	6
 15360  0A22  3001               	movlw	1	; select bank2/3
 15361  0A23  0087               	movwf	7
 15362  0A24  0825               	movf	??_setDimmerLights,w
 15363  0A25  0081               	movwf	1
 15364                           
 15365                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15366  0A26  3043               	movlw	67
 15367  0A27  00A5               	movwf	??_setDimmerLights
 15368  0A28  0877               	movf	_DimmerLights,w
 15369  0A29  3E04               	addlw	4
 15370  0A2A  0086               	movwf	6
 15371  0A2B  3001               	movlw	1	; select bank2/3
 15372  0A2C  0087               	movwf	7
 15373  0A2D  0825               	movf	??_setDimmerLights,w
 15374  0A2E  0081               	movwf	1
 15375                           
 15376                           ;Dimmer_B1.c: 357: }
 15377                           ;Dimmer_B1.c: 358: }
 15378  0A2F  0008               	return
 15379  0A30                     l8160:	
 15380                           
 15381                           ;Dimmer_B1.c: 359: else
 15382                           ;Dimmer_B1.c: 360: {
 15383                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15384  0A30  0877               	movf	_DimmerLights,w
 15385  0A31  0086               	movwf	6
 15386  0A32  3001               	movlw	1	; select bank2/3
 15387  0A33  0087               	movwf	7
 15388  0A34  1281               	bcf	1,5
 15389                           
 15390                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15391  0A35  0877               	movf	_DimmerLights,w
 15392  0A36  3E06               	addlw	6
 15393  0A37  0086               	movwf	6
 15394  0A38  3001               	movlw	1	; select bank2/3
 15395  0A39  0087               	movwf	7
 15396  0A3A  0801               	movf	1,w
 15397  0A3B  00A5               	movwf	??_setDimmerLights
 15398  0A3C  0877               	movf	_DimmerLights,w
 15399  0A3D  3E04               	addlw	4
 15400  0A3E  0086               	movwf	6
 15401  0A3F  3001               	movlw	1	; select bank2/3
 15402  0A40  0087               	movwf	7
 15403  0A41  0825               	movf	??_setDimmerLights,w
 15404  0A42  0081               	movwf	1
 15405                           
 15406                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15407  0A43  0877               	movf	_DimmerLights,w
 15408  0A44  0086               	movwf	6
 15409  0A45  3001               	movlw	1	; select bank2/3
 15410  0A46  0087               	movwf	7
 15411  0A47  1481               	bsf	1,1
 15412                           
 15413                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15414  0A48  0877               	movf	_DimmerLights,w
 15415  0A49  0086               	movwf	6
 15416  0A4A  3001               	movlw	1	; select bank2/3
 15417  0A4B  0087               	movwf	7
 15418  0A4C  1181               	bcf	1,3
 15419                           
 15420                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15421  0A4D  0877               	movf	_DimmerLights,w
 15422  0A4E  0086               	movwf	6
 15423  0A4F  3001               	movlw	1	; select bank2/3
 15424  0A50  0087               	movwf	7
 15425  0A51  1201               	bcf	1,4
 15426                           
 15427                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15428  0A52  3003               	movlw	3
 15429  0A53  00A5               	movwf	??_setDimmerLights
 15430  0A54  0877               	movf	_DimmerLights,w
 15431  0A55  3E02               	addlw	2
 15432  0A56  0086               	movwf	6
 15433  0A57  3001               	movlw	1	; select bank2/3
 15434  0A58  0087               	movwf	7
 15435  0A59  0825               	movf	??_setDimmerLights,w
 15436  0A5A  0081               	movwf	1
 15437  0A5B  0008               	return
 15438  0A5C                     __end_of_setDimmerLights:	
 15439                           
 15440                           	psect	text92
 15441  1CA9                     __ptext92:	
 15442 ;; *************** function _setLoad_StatusOn *****************
 15443 ;; Defined at:
 15444 ;;		line 269 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15445 ;; Parameters:    Size  Location     Type
 15446 ;;  lights          1    wreg     unsigned char 
 15447 ;;  command         1    0[BANK0 ] unsigned char 
 15448 ;; Auto vars:     Size  Location     Type
 15449 ;;  lights          1    1[BANK0 ] unsigned char 
 15450 ;; Return value:  Size  Location     Type
 15451 ;;		None               void
 15452 ;; Registers used:
 15453 ;;		wreg, fsr1l, fsr1h
 15454 ;; Tracked objects:
 15455 ;;		On entry : 0/0
 15456 ;;		On exit  : 0/0
 15457 ;;		Unchanged: 0/0
 15458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15459 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;Total ram usage:        2 bytes
 15464 ;; Hardware stack levels used:    1
 15465 ;; Hardware stack levels required when called:    4
 15466 ;; This function calls:
 15467 ;;		Nothing
 15468 ;; This function is called by:
 15469 ;;		_setDimmerLights
 15470 ;; This function uses a non-reentrant model
 15471 ;;
 15472                           
 15473                           
 15474                           ;psect for function _setLoad_StatusOn
 15475  1CA9                     _setLoad_StatusOn:	
 15476                           
 15477                           ;incstack = 0
 15478                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15479                           ;setLoad_StatusOn@lights stored from wreg
 15480  1CA9  0020               	movlb	0	; select bank0
 15481  1CAA  00A1               	movwf	setLoad_StatusOn@lights
 15482                           
 15483                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15484  1CAB  087B               	movf	_Load,w
 15485  1CAC  0086               	movwf	6
 15486  1CAD  3002               	movlw	2	; select bank4/5
 15487  1CAE  0087               	movwf	7
 15488  1CAF  1481               	bsf	1,1
 15489                           
 15490                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15491  1CB0  087B               	movf	_Load,w
 15492  1CB1  3E46               	addlw	70
 15493  1CB2  0086               	movwf	6
 15494  1CB3  3002               	movlw	2	; select bank4/5
 15495  1CB4  0087               	movwf	7
 15496  1CB5  0820               	movf	setLoad_StatusOn@command,w
 15497  1CB6  1001               	bcf	1,0
 15498  1CB7  1D03               	skipz
 15499  1CB8  1401               	bsf	1,0
 15500                           
 15501                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15502  1CB9  0821               	movf	setLoad_StatusOn@lights,w
 15503  1CBA  3A01               	xorlw	1
 15504  1CBB  1D03               	skipz
 15505  1CBC  2CC4               	goto	l8118
 15506                           
 15507                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15508  1CBD  087B               	movf	_Load,w
 15509  1CBE  3E43               	addlw	67
 15510  1CBF  0086               	movwf	6
 15511  1CC0  3002               	movlw	2	; select bank4/5
 15512  1CC1  0087               	movwf	7
 15513  1CC2  0181               	clrf	1
 15514  1CC3  0A81               	incf	1,f
 15515  1CC4                     l8118:	
 15516                           
 15517                           ;OverLoad_B1.c: 275: }
 15518                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15519  1CC4  0821               	movf	setLoad_StatusOn@lights,w
 15520  1CC5  3A02               	xorlw	2
 15521  1CC6  1D03               	skipz
 15522  1CC7  2CCF               	goto	l8122
 15523                           
 15524                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15525  1CC8  087B               	movf	_Load,w
 15526  1CC9  3E44               	addlw	68
 15527  1CCA  0086               	movwf	6
 15528  1CCB  3002               	movlw	2	; select bank4/5
 15529  1CCC  0087               	movwf	7
 15530  1CCD  0181               	clrf	1
 15531  1CCE  0A81               	incf	1,f
 15532  1CCF                     l8122:	
 15533                           
 15534                           ;OverLoad_B1.c: 278: }
 15535                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15536  1CCF  0821               	movf	setLoad_StatusOn@lights,w
 15537  1CD0  3A03               	xorlw	3
 15538  1CD1  1D03               	skipz
 15539  1CD2  0008               	return
 15540                           
 15541                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15542  1CD3  087B               	movf	_Load,w
 15543  1CD4  3E45               	addlw	69
 15544  1CD5  0086               	movwf	6
 15545  1CD6  3002               	movlw	2	; select bank4/5
 15546  1CD7  0087               	movwf	7
 15547  1CD8  0181               	clrf	1
 15548  1CD9  0A81               	incf	1,f
 15549  1CDA  0008               	return
 15550  1CDB                     __end_of_setLoad_StatusOn:	
 15551                           
 15552                           	psect	text93
 15553  189B                     __ptext93:	
 15554 ;; *************** function _setLoad_Count *****************
 15555 ;; Defined at:
 15556 ;;		line 254 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15557 ;; Parameters:    Size  Location     Type
 15558 ;;  command         1    wreg     unsigned char 
 15559 ;; Auto vars:     Size  Location     Type
 15560 ;;  command         1    1[BANK0 ] unsigned char 
 15561 ;; Return value:  Size  Location     Type
 15562 ;;		None               void
 15563 ;; Registers used:
 15564 ;;		wreg, fsr1l, fsr1h
 15565 ;; Tracked objects:
 15566 ;;		On entry : 0/0
 15567 ;;		On exit  : 0/0
 15568 ;;		Unchanged: 0/0
 15569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;Total ram usage:        2 bytes
 15575 ;; Hardware stack levels used:    1
 15576 ;; Hardware stack levels required when called:    4
 15577 ;; This function calls:
 15578 ;;		Nothing
 15579 ;; This function is called by:
 15580 ;;		_setDimmerLights
 15581 ;; This function uses a non-reentrant model
 15582 ;;
 15583                           
 15584                           
 15585                           ;psect for function _setLoad_Count
 15586  189B                     _setLoad_Count:	
 15587                           
 15588                           ;incstack = 0
 15589                           ; Regs used in _setLoad_Count: [wregfsr1]
 15590                           ;setLoad_Count@command stored from wreg
 15591  189B  0020               	movlb	0	; select bank0
 15592  189C  00A1               	movwf	setLoad_Count@command
 15593                           
 15594                           ;OverLoad_B1.c: 255: Load->Count = command;
 15595  189D  0821               	movf	setLoad_Count@command,w
 15596  189E  00A0               	movwf	??_setLoad_Count
 15597  189F  087B               	movf	_Load,w
 15598  18A0  3E3A               	addlw	58
 15599  18A1  0086               	movwf	6
 15600  18A2  3002               	movlw	2	; select bank4/5
 15601  18A3  0087               	movwf	7
 15602  18A4  0820               	movf	??_setLoad_Count,w
 15603  18A5  0081               	movwf	1
 15604                           
 15605                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15606  18A6  0821               	movf	setLoad_Count@command,w
 15607  18A7  00A0               	movwf	??_setLoad_Count
 15608  18A8  087B               	movf	_Load,w
 15609  18A9  3E42               	addlw	66
 15610  18AA  0086               	movwf	6
 15611  18AB  3002               	movlw	2	; select bank4/5
 15612  18AC  0087               	movwf	7
 15613  18AD  0820               	movf	??_setLoad_Count,w
 15614  18AE  0081               	movwf	1
 15615  18AF  0008               	return
 15616  18B0                     __end_of_setLoad_Count:	
 15617                           
 15618                           	psect	text94
 15619  1254                     __ptext94:	
 15620 ;; *************** function _setLED *****************
 15621 ;; Defined at:
 15622 ;;		line 74 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 15623 ;; Parameters:    Size  Location     Type
 15624 ;;  led             1    wreg     unsigned char 
 15625 ;;  command         1    2[BANK0 ] unsigned char 
 15626 ;; Auto vars:     Size  Location     Type
 15627 ;;  led             1    3[BANK0 ] unsigned char 
 15628 ;; Return value:  Size  Location     Type
 15629 ;;		None               void
 15630 ;; Registers used:
 15631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15632 ;; Tracked objects:
 15633 ;;		On entry : 0/0
 15634 ;;		On exit  : 0/0
 15635 ;;		Unchanged: 0/0
 15636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;Total ram usage:        2 bytes
 15642 ;; Hardware stack levels used:    1
 15643 ;; Hardware stack levels required when called:    5
 15644 ;; This function calls:
 15645 ;;		_LedPointSelect
 15646 ;; This function is called by:
 15647 ;;		_setDimmerLights_ERROR
 15648 ;;		_setDimmerLights
 15649 ;;		_setLED_Initialization
 15650 ;;		_setLoad_Exceptions
 15651 ;;		_setOverTemp_Exceptions
 15652 ;;		_setPowerFault_Exceptions
 15653 ;;		_setSw_Initialization
 15654 ;; This function uses a non-reentrant model
 15655 ;;
 15656                           
 15657                           
 15658                           ;psect for function _setLED
 15659  1254                     _setLED:	
 15660                           
 15661                           ;incstack = 0
 15662                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15663                           ;setLED@led stored from wreg
 15664  1254  0020               	movlb	0	; select bank0
 15665  1255  00A3               	movwf	setLED@led
 15666                           
 15667                           ;LED_B1.c: 76: LedPointSelect(led);
 15668  1256  0823               	movf	setLED@led,w
 15669  1257  319A  2232  3192   	fcall	_LedPointSelect
 15670                           
 15671                           ;LED_B1.c: 77: if(command == 0)
 15672  125A  0020               	movlb	0	; select bank0
 15673  125B  08A2               	movf	setLED@command,f
 15674  125C  1D03               	skipz
 15675  125D  2A70               	goto	l8078
 15676                           
 15677                           ;LED_B1.c: 78: {
 15678                           ;LED_B1.c: 80: if(led == 1)
 15679  125E  0823               	movf	setLED@led,w
 15680  125F  3A01               	xorlw	1
 15681  1260  1D03               	skipz
 15682  1261  2A64               	goto	l8070
 15683                           
 15684                           ;LED_B1.c: 81: {
 15685                           ;LED_B1.c: 85: RA3=1;
 15686  1262  158C               	bsf	12,3	;volatile
 15687                           
 15688                           ;LED_B1.c: 87: }
 15689  1263  0008               	return
 15690  1264                     l8070:	
 15691                           
 15692                           ;LED_B1.c: 90: else if(led == 2)
 15693  1264  0823               	movf	setLED@led,w
 15694  1265  3A02               	xorlw	2
 15695  1266  1D03               	skipz
 15696  1267  2A6A               	goto	l8074
 15697                           
 15698                           ;LED_B1.c: 91: {
 15699                           ;LED_B1.c: 95: RC7=1;
 15700  1268  178E               	bsf	14,7	;volatile
 15701                           
 15702                           ;LED_B1.c: 97: }
 15703  1269  0008               	return
 15704  126A                     l8074:	
 15705                           
 15706                           ;LED_B1.c: 110: else if(led == 99)
 15707  126A  0823               	movf	setLED@led,w
 15708  126B  3A63               	xorlw	99
 15709  126C  1D03               	skipz
 15710  126D  0008               	return
 15711                           
 15712                           ;LED_B1.c: 111: {
 15713                           ;LED_B1.c: 115: RB5=1;
 15714  126E  168D               	bsf	13,5	;volatile
 15715                           
 15716                           ;LED_B1.c: 117: }
 15717                           ;LED_B1.c: 119: }
 15718  126F  0008               	return
 15719  1270                     l8078:	
 15720                           
 15721                           ;LED_B1.c: 120: else if(command == 1)
 15722  1270  0822               	movf	setLED@command,w
 15723  1271  3A01               	xorlw	1
 15724  1272  1D03               	skipz
 15725  1273  2A86               	goto	l8092
 15726                           
 15727                           ;LED_B1.c: 121: {
 15728                           ;LED_B1.c: 123: if(led == 1)
 15729  1274  0823               	movf	setLED@led,w
 15730  1275  3A01               	xorlw	1
 15731  1276  1D03               	skipz
 15732  1277  2A7A               	goto	l8084
 15733                           
 15734                           ;LED_B1.c: 124: {
 15735                           ;LED_B1.c: 128: RA3=0;
 15736  1278  118C               	bcf	12,3	;volatile
 15737                           
 15738                           ;LED_B1.c: 130: }
 15739  1279  0008               	return
 15740  127A                     l8084:	
 15741                           
 15742                           ;LED_B1.c: 133: else if(led == 2)
 15743  127A  0823               	movf	setLED@led,w
 15744  127B  3A02               	xorlw	2
 15745  127C  1D03               	skipz
 15746  127D  2A80               	goto	l8088
 15747                           
 15748                           ;LED_B1.c: 134: {
 15749                           ;LED_B1.c: 138: RC7=0;
 15750  127E  138E               	bcf	14,7	;volatile
 15751                           
 15752                           ;LED_B1.c: 140: }
 15753  127F  0008               	return
 15754  1280                     l8088:	
 15755                           
 15756                           ;LED_B1.c: 153: else if(led == 99)
 15757  1280  0823               	movf	setLED@led,w
 15758  1281  3A63               	xorlw	99
 15759  1282  1D03               	skipz
 15760  1283  0008               	return
 15761                           
 15762                           ;LED_B1.c: 154: {
 15763                           ;LED_B1.c: 158: RB5=0;
 15764  1284  128D               	bcf	13,5	;volatile
 15765                           
 15766                           ;LED_B1.c: 160: }
 15767                           ;LED_B1.c: 162: }
 15768  1285  0008               	return
 15769  1286                     l8092:	
 15770                           
 15771                           ;LED_B1.c: 163: else if(command == 10)
 15772  1286  0822               	movf	setLED@command,w
 15773  1287  3A0A               	xorlw	10
 15774  1288  1D03               	skipz
 15775  1289  2AA8               	goto	l8108
 15776                           
 15777                           ;LED_B1.c: 164: {
 15778                           ;LED_B1.c: 165: LED->GO=0;
 15779  128A  0021               	movlb	1	; select bank1
 15780  128B  083C               	movf	_LED^(0+128),w
 15781  128C  0086               	movwf	6
 15782  128D  0187               	clrf	7
 15783  128E  1081               	bcf	1,1
 15784                           
 15785                           ;LED_B1.c: 166: LED->Time=0;
 15786  128F  0A3C               	incf	_LED^(0+128),w
 15787  1290  0086               	movwf	6
 15788  1291  0187               	clrf	7
 15789  1292  3000               	movlw	0
 15790  1293  3FC0               	movwi [0]fsr1
 15791  1294  3FC1               	movwi [1]fsr1
 15792                           
 15793                           ;LED_B1.c: 168: if(led == 1)
 15794  1295  0020               	movlb	0	; select bank0
 15795  1296  0823               	movf	setLED@led,w
 15796  1297  3A01               	xorlw	1
 15797  1298  1D03               	skipz
 15798  1299  2A9C               	goto	l8100
 15799                           
 15800                           ;LED_B1.c: 169: {
 15801                           ;LED_B1.c: 173: RA3=1;
 15802  129A  158C               	bsf	12,3	;volatile
 15803                           
 15804                           ;LED_B1.c: 175: }
 15805  129B  0008               	return
 15806  129C                     l8100:	
 15807                           
 15808                           ;LED_B1.c: 178: else if(led == 2)
 15809  129C  0823               	movf	setLED@led,w
 15810  129D  3A02               	xorlw	2
 15811  129E  1D03               	skipz
 15812  129F  2AA2               	goto	l8104
 15813                           
 15814                           ;LED_B1.c: 179: {
 15815                           ;LED_B1.c: 183: RC7=1;
 15816  12A0  178E               	bsf	14,7	;volatile
 15817                           
 15818                           ;LED_B1.c: 185: }
 15819  12A1  0008               	return
 15820  12A2                     l8104:	
 15821                           
 15822                           ;LED_B1.c: 198: else if(led == 99)
 15823  12A2  0823               	movf	setLED@led,w
 15824  12A3  3A63               	xorlw	99
 15825  12A4  1D03               	skipz
 15826  12A5  0008               	return
 15827                           
 15828                           ;LED_B1.c: 199: {
 15829                           ;LED_B1.c: 203: RB5=1;
 15830  12A6  168D               	bsf	13,5	;volatile
 15831                           
 15832                           ;LED_B1.c: 205: }
 15833                           ;LED_B1.c: 207: }
 15834  12A7  0008               	return
 15835  12A8                     l8108:	
 15836                           
 15837                           ;LED_B1.c: 208: else if(command == 11)
 15838  12A8  0822               	movf	setLED@command,w
 15839  12A9  3A0B               	xorlw	11
 15840  12AA  1D03               	skipz
 15841  12AB  0008               	return
 15842                           
 15843                           ;LED_B1.c: 209: {
 15844                           ;LED_B1.c: 210: LED->GO=1;
 15845  12AC  0021               	movlb	1	; select bank1
 15846  12AD  083C               	movf	_LED^(0+128),w
 15847  12AE  0086               	movwf	6
 15848  12AF  0187               	clrf	7
 15849  12B0  1481               	bsf	1,1
 15850  12B1  0008               	return
 15851  12B2                     __end_of_setLED:	
 15852                           
 15853                           	psect	text95
 15854  1A32                     __ptext95:	
 15855 ;; *************** function _LedPointSelect *****************
 15856 ;; Defined at:
 15857 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 15858 ;; Parameters:    Size  Location     Type
 15859 ;;  led             1    wreg     unsigned char 
 15860 ;; Auto vars:     Size  Location     Type
 15861 ;;  led             1    1[BANK0 ] unsigned char 
 15862 ;; Return value:  Size  Location     Type
 15863 ;;		None               void
 15864 ;; Registers used:
 15865 ;;		wreg
 15866 ;; Tracked objects:
 15867 ;;		On entry : 0/0
 15868 ;;		On exit  : 0/0
 15869 ;;		Unchanged: 0/0
 15870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15875 ;;Total ram usage:        2 bytes
 15876 ;; Hardware stack levels used:    1
 15877 ;; Hardware stack levels required when called:    4
 15878 ;; This function calls:
 15879 ;;		Nothing
 15880 ;; This function is called by:
 15881 ;;		_setLED_Initialization
 15882 ;;		_setLED
 15883 ;;		_setLED_Main
 15884 ;; This function uses a non-reentrant model
 15885 ;;
 15886                           
 15887                           
 15888                           ;psect for function _LedPointSelect
 15889  1A32                     _LedPointSelect:	
 15890                           
 15891                           ;incstack = 0
 15892                           ; Regs used in _LedPointSelect: [wreg]
 15893                           ;LedPointSelect@led stored from wreg
 15894  1A32  0020               	movlb	0	; select bank0
 15895  1A33  00A1               	movwf	LedPointSelect@led
 15896                           
 15897                           ;LED_B1.c: 10: if(led == 1)
 15898  1A34  0821               	movf	LedPointSelect@led,w
 15899  1A35  3A01               	xorlw	1
 15900  1A36  1D03               	skipz
 15901  1A37  2A3E               	goto	l5942
 15902                           
 15903                           ;LED_B1.c: 11: {
 15904                           ;LED_B1.c: 12: LED=&VarLED1;
 15905  1A38  30D9               	movlw	_VarLED1& (0+255)
 15906  1A39  00A0               	movwf	??_LedPointSelect
 15907  1A3A  0820               	movf	??_LedPointSelect,w
 15908  1A3B  0021               	movlb	1	; select bank1
 15909  1A3C  00BC               	movwf	_LED^(0+128)
 15910                           
 15911                           ;LED_B1.c: 13: }
 15912  1A3D  0008               	return
 15913  1A3E                     l5942:	
 15914                           
 15915                           ;LED_B1.c: 16: else if(led == 2)
 15916  1A3E  0020               	movlb	0	; select bank0
 15917  1A3F  0821               	movf	LedPointSelect@led,w
 15918  1A40  3A02               	xorlw	2
 15919  1A41  1D03               	skipz
 15920  1A42  2A49               	goto	l5946
 15921                           
 15922                           ;LED_B1.c: 17: {
 15923                           ;LED_B1.c: 18: LED=&VarLED2;
 15924  1A43  30DD               	movlw	_VarLED2& (0+255)
 15925  1A44  00A0               	movwf	??_LedPointSelect
 15926  1A45  0820               	movf	??_LedPointSelect,w
 15927  1A46  0021               	movlb	1	; select bank1
 15928  1A47  00BC               	movwf	_LED^(0+128)
 15929                           
 15930                           ;LED_B1.c: 19: }
 15931  1A48  0008               	return
 15932  1A49                     l5946:	
 15933                           
 15934                           ;LED_B1.c: 28: else if(led == 99)
 15935  1A49  0020               	movlb	0	; select bank0
 15936  1A4A  0821               	movf	LedPointSelect@led,w
 15937  1A4B  3A63               	xorlw	99
 15938  1A4C  1D03               	skipz
 15939  1A4D  0008               	return
 15940                           
 15941                           ;LED_B1.c: 29: {
 15942                           ;LED_B1.c: 30: LED=&VarErrLED;
 15943  1A4E  30D5               	movlw	_VarErrLED& (0+255)
 15944  1A4F  00A0               	movwf	??_LedPointSelect
 15945  1A50  0820               	movf	??_LedPointSelect,w
 15946  1A51  0021               	movlb	1	; select bank1
 15947  1A52  00BC               	movwf	_LED^(0+128)
 15948  1A53  0008               	return
 15949  1A54                     __end_of_LedPointSelect:	
 15950                           
 15951                           	psect	text96
 15952  1929                     __ptext96:	
 15953 ;; *************** function _DimmerLights_Close *****************
 15954 ;; Defined at:
 15955 ;;		line 101 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;		None
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;		None
 15960 ;; Return value:  Size  Location     Type
 15961 ;;		None               void
 15962 ;; Registers used:
 15963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;Total ram usage:        0 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:    5
 15976 ;; This function calls:
 15977 ;;		_getDimmerLights_StatusFlag
 15978 ;;		_setLoad_GO
 15979 ;; This function is called by:
 15980 ;;		_DimmerLights_Main
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           
 15985                           ;psect for function _DimmerLights_Close
 15986  1929                     _DimmerLights_Close:	
 15987                           
 15988                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 15989                           
 15990                           ;incstack = 0
 15991                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15992  1929  0021               	movlb	1	; select bank1
 15993  192A  083A               	movf	_Dimmer^(0+128),w
 15994  192B  0086               	movwf	6
 15995  192C  0187               	clrf	7
 15996  192D  1C01               	btfss	1,0
 15997  192E  0008               	return
 15998                           
 15999                           ;Dimmer_B1.c: 104: {
 16000                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16001  192F  083A               	movf	_Dimmer^(0+128),w
 16002  1930  0086               	movwf	6
 16003  1931  0187               	clrf	7
 16004  1932  1001               	bcf	1,0
 16005                           
 16006                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16007  1933  31A6  26AC  3199   	fcall	_getDimmerLights_StatusFlag
 16008  1936  3800               	iorlw	0
 16009  1937  1D03               	skipz
 16010  1938  0008               	return
 16011                           
 16012                           ;Dimmer_B1.c: 107: {
 16013                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16014  1939  3000               	movlw	0
 16015  193A  31A6  262C         	fcall	_setLoad_GO
 16016                           
 16017                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16018  193C  0021               	movlb	1	; select bank1
 16019  193D  086A               	movf	_Memory^(0+128),w
 16020  193E  3E22               	addlw	34
 16021  193F  0086               	movwf	6
 16022  1940  3001               	movlw	1	; select bank2/3
 16023  1941  0087               	movwf	7
 16024  1942  1481               	bsf	1,1
 16025  1943  0008               	return
 16026  1944                     __end_of_DimmerLights_Close:	
 16027                           
 16028                           	psect	text97
 16029  262C                     __ptext97:	
 16030 ;; *************** function _setLoad_GO *****************
 16031 ;; Defined at:
 16032 ;;		line 265 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 16033 ;; Parameters:    Size  Location     Type
 16034 ;;  command         1    wreg     unsigned char 
 16035 ;; Auto vars:     Size  Location     Type
 16036 ;;  command         1    0[BANK0 ] unsigned char 
 16037 ;; Return value:  Size  Location     Type
 16038 ;;		None               void
 16039 ;; Registers used:
 16040 ;;		wreg, fsr1l, fsr1h
 16041 ;; Tracked objects:
 16042 ;;		On entry : 0/0
 16043 ;;		On exit  : 0/0
 16044 ;;		Unchanged: 0/0
 16045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;Total ram usage:        1 bytes
 16051 ;; Hardware stack levels used:    1
 16052 ;; Hardware stack levels required when called:    4
 16053 ;; This function calls:
 16054 ;;		Nothing
 16055 ;; This function is called by:
 16056 ;;		_DimmerLights_Close
 16057 ;; This function uses a non-reentrant model
 16058 ;;
 16059                           
 16060                           
 16061                           ;psect for function _setLoad_GO
 16062  262C                     _setLoad_GO:	
 16063                           
 16064                           ;incstack = 0
 16065                           ; Regs used in _setLoad_GO: [wregfsr1]
 16066                           ;setLoad_GO@command stored from wreg
 16067  262C  0020               	movlb	0	; select bank0
 16068  262D  00A0               	movwf	setLoad_GO@command
 16069                           
 16070                           ;OverLoad_B1.c: 266: Load->GO = command;
 16071  262E  087B               	movf	_Load,w
 16072  262F  0086               	movwf	6
 16073  2630  3002               	movlw	2	; select bank4/5
 16074  2631  0087               	movwf	7
 16075  2632  0820               	movf	setLoad_GO@command,w
 16076  2633  1081               	bcf	1,1
 16077  2634  1D03               	skipz
 16078  2635  1481               	bsf	1,1
 16079  2636  0008               	return
 16080  2637                     __end_of_setLoad_GO:	
 16081                           
 16082                           	psect	text98
 16083  26AC                     __ptext98:	
 16084 ;; *************** function _getDimmerLights_StatusFlag *****************
 16085 ;; Defined at:
 16086 ;;		line 208 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16087 ;; Parameters:    Size  Location     Type
 16088 ;;		None
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  Status          1    0[BANK0 ] unsigned char 
 16091 ;; Return value:  Size  Location     Type
 16092 ;;                  1    wreg      unsigned char 
 16093 ;; Registers used:
 16094 ;;		wreg, fsr1l, fsr1h, status,2
 16095 ;; Tracked objects:
 16096 ;;		On entry : 0/0
 16097 ;;		On exit  : 0/0
 16098 ;;		Unchanged: 0/0
 16099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;Total ram usage:        1 bytes
 16105 ;; Hardware stack levels used:    1
 16106 ;; Hardware stack levels required when called:    4
 16107 ;; This function calls:
 16108 ;;		Nothing
 16109 ;; This function is called by:
 16110 ;;		_DimmerLights_Close
 16111 ;;		_DimmerLights_Exceptions
 16112 ;; This function uses a non-reentrant model
 16113 ;;
 16114                           
 16115                           
 16116                           ;psect for function _getDimmerLights_StatusFlag
 16117  26AC                     _getDimmerLights_StatusFlag:	
 16118                           
 16119                           ;Dimmer_B1.c: 210: char Status=0;
 16120                           
 16121                           ;incstack = 0
 16122                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16123  26AC  0020               	movlb	0	; select bank0
 16124  26AD  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16125                           
 16126                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16127  26AE  0878               	movf	_DimmerLights11,w
 16128  26AF  0086               	movwf	6
 16129  26B0  3001               	movlw	1	; select bank2/3
 16130  26B1  0087               	movwf	7
 16131  26B2  3000               	movlw	0
 16132  26B3  1B01               	btfsc	1,6
 16133  26B4  3001               	movlw	1
 16134  26B5  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16135                           
 16136                           ;Dimmer_B1.c: 224: return Status;
 16137  26B6  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16138  26B7  0008               	return
 16139  26B8                     __end_of_getDimmerLights_StatusFlag:	
 16140                           
 16141                           	psect	text99
 16142  26A0                     __ptext99:	
 16143 ;; *************** function _DimmerLights_Initialization *****************
 16144 ;; Defined at:
 16145 ;;		line 41 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;		None
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;		None
 16150 ;; Return value:  Size  Location     Type
 16151 ;;		None               void
 16152 ;; Registers used:
 16153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16154 ;; Tracked objects:
 16155 ;;		On entry : 0/0
 16156 ;;		On exit  : 0/0
 16157 ;;		Unchanged: 0/0
 16158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;Total ram usage:        1 bytes
 16164 ;; Hardware stack levels used:    1
 16165 ;; Hardware stack levels required when called:    6
 16166 ;; This function calls:
 16167 ;;		_Dimmer_Initialization
 16168 ;;		_setDimmerLights_Initialization
 16169 ;; This function is called by:
 16170 ;;		_main
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           
 16175                           ;psect for function _DimmerLights_Initialization
 16176  26A0                     _DimmerLights_Initialization:	
 16177                           
 16178                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16179                           
 16180                           ;incstack = 0
 16181                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16182  26A0  3031               	movlw	_DimmerLights1& (0+255)
 16183  26A1  0020               	movlb	0	; select bank0
 16184  26A2  00A4               	movwf	??_DimmerLights_Initialization
 16185  26A3  0824               	movf	??_DimmerLights_Initialization,w
 16186  26A4  00F8               	movwf	_DimmerLights11
 16187                           
 16188                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16189  26A5  3001               	movlw	1
 16190  26A6  319B  238C  31A6   	fcall	_setDimmerLights_Initialization
 16191                           
 16192                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16193  26A9  31A5  25B9         	fcall	_Dimmer_Initialization
 16194  26AB  0008               	return
 16195  26AC                     __end_of_DimmerLights_Initialization:	
 16196                           
 16197                           	psect	text100
 16198  1B8C                     __ptext100:	
 16199 ;; *************** function _setDimmerLights_Initialization *****************
 16200 ;; Defined at:
 16201 ;;		line 63 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16202 ;; Parameters:    Size  Location     Type
 16203 ;;  lights          1    wreg     unsigned char 
 16204 ;; Auto vars:     Size  Location     Type
 16205 ;;  lights          1    3[BANK0 ] unsigned char 
 16206 ;; Return value:  Size  Location     Type
 16207 ;;		None               void
 16208 ;; Registers used:
 16209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16210 ;; Tracked objects:
 16211 ;;		On entry : 0/0
 16212 ;;		On exit  : 0/0
 16213 ;;		Unchanged: 0/0
 16214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;Total ram usage:        2 bytes
 16220 ;; Hardware stack levels used:    1
 16221 ;; Hardware stack levels required when called:    5
 16222 ;; This function calls:
 16223 ;;		_DimmerLightsPointSelect
 16224 ;; This function is called by:
 16225 ;;		_DimmerLights_Initialization
 16226 ;; This function uses a non-reentrant model
 16227 ;;
 16228                           
 16229                           
 16230                           ;psect for function _setDimmerLights_Initialization
 16231  1B8C                     _setDimmerLights_Initialization:	
 16232                           
 16233                           ;incstack = 0
 16234                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16235                           ;setDimmerLights_Initialization@lights stored from wreg
 16236  1B8C  0020               	movlb	0	; select bank0
 16237  1B8D  00A3               	movwf	setDimmerLights_Initialization@lights
 16238                           
 16239                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16240  1B8E  0823               	movf	setDimmerLights_Initialization@lights,w
 16241  1B8F  31A6  2616         	fcall	_DimmerLightsPointSelect
 16242                           
 16243                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16244  1B91  0877               	movf	_DimmerLights,w
 16245  1B92  3E0C               	addlw	12
 16246  1B93  0086               	movwf	6
 16247  1B94  3001               	movlw	1	; select bank2/3
 16248  1B95  0087               	movwf	7
 16249  1B96  1401               	bsf	1,0
 16250                           
 16251                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16252  1B97  3043               	movlw	67
 16253  1B98  0020               	movlb	0	; select bank0
 16254  1B99  00A2               	movwf	??_setDimmerLights_Initialization
 16255  1B9A  0877               	movf	_DimmerLights,w
 16256  1B9B  3E05               	addlw	5
 16257  1B9C  0086               	movwf	6
 16258  1B9D  3001               	movlw	1	; select bank2/3
 16259  1B9E  0087               	movwf	7
 16260  1B9F  0822               	movf	??_setDimmerLights_Initialization,w
 16261  1BA0  0081               	movwf	1
 16262                           
 16263                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16264  1BA1  3078               	movlw	120
 16265  1BA2  00A2               	movwf	??_setDimmerLights_Initialization
 16266  1BA3  0877               	movf	_DimmerLights,w
 16267  1BA4  3E06               	addlw	6
 16268  1BA5  0086               	movwf	6
 16269  1BA6  3001               	movlw	1	; select bank2/3
 16270  1BA7  0087               	movwf	7
 16271  1BA8  0822               	movf	??_setDimmerLights_Initialization,w
 16272  1BA9  0081               	movwf	1
 16273                           
 16274                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16275  1BAA  0877               	movf	_DimmerLights,w
 16276  1BAB  3E06               	addlw	6
 16277  1BAC  0086               	movwf	6
 16278  1BAD  3001               	movlw	1	; select bank2/3
 16279  1BAE  0087               	movwf	7
 16280  1BAF  0801               	movf	1,w
 16281  1BB0  00A2               	movwf	??_setDimmerLights_Initialization
 16282  1BB1  0877               	movf	_DimmerLights,w
 16283  1BB2  3E04               	addlw	4
 16284  1BB3  0086               	movwf	6
 16285  1BB4  3001               	movlw	1	; select bank2/3
 16286  1BB5  0087               	movwf	7
 16287  1BB6  0822               	movf	??_setDimmerLights_Initialization,w
 16288  1BB7  0081               	movwf	1
 16289  1BB8  0008               	return
 16290  1BB9                     __end_of_setDimmerLights_Initialization:	
 16291                           
 16292                           	psect	text101
 16293  25B9                     __ptext101:	
 16294 ;; *************** function _Dimmer_Initialization *****************
 16295 ;; Defined at:
 16296 ;;		line 520 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16297 ;; Parameters:    Size  Location     Type
 16298 ;;		None
 16299 ;; Auto vars:     Size  Location     Type
 16300 ;;		None
 16301 ;; Return value:  Size  Location     Type
 16302 ;;		None               void
 16303 ;; Registers used:
 16304 ;;		wreg
 16305 ;; Tracked objects:
 16306 ;;		On entry : 0/0
 16307 ;;		On exit  : 0/0
 16308 ;;		Unchanged: 0/0
 16309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;Total ram usage:        1 bytes
 16315 ;; Hardware stack levels used:    1
 16316 ;; Hardware stack levels required when called:    4
 16317 ;; This function calls:
 16318 ;;		Nothing
 16319 ;; This function is called by:
 16320 ;;		_DimmerLights_Initialization
 16321 ;; This function uses a non-reentrant model
 16322 ;;
 16323                           
 16324                           
 16325                           ;psect for function _Dimmer_Initialization
 16326  25B9                     _Dimmer_Initialization:	
 16327                           
 16328                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16329                           
 16330                           ;incstack = 0
 16331                           ; Regs used in _Dimmer_Initialization: [wreg]
 16332  25B9  30E1               	movlw	_Dimmer1& (0+255)
 16333  25BA  0020               	movlb	0	; select bank0
 16334  25BB  00A0               	movwf	??_Dimmer_Initialization
 16335  25BC  0820               	movf	??_Dimmer_Initialization,w
 16336  25BD  0021               	movlb	1	; select bank1
 16337  25BE  00BA               	movwf	_Dimmer^(0+128)
 16338  25BF  0008               	return
 16339  25C0                     __end_of_Dimmer_Initialization:	
 16340                           
 16341                           	psect	text102
 16342  2592                     __ptext102:	
 16343 ;; *************** function _DelayOff_Main *****************
 16344 ;; Defined at:
 16345 ;;		line 45 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;		None
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;		None
 16350 ;; Return value:  Size  Location     Type
 16351 ;;		None               void
 16352 ;; Registers used:
 16353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16354 ;; Tracked objects:
 16355 ;;		On entry : 0/0
 16356 ;;		On exit  : 0/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;Total ram usage:        0 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    9
 16366 ;; This function calls:
 16367 ;;		_DlyOff_Main
 16368 ;; This function is called by:
 16369 ;;		_main
 16370 ;; This function uses a non-reentrant model
 16371 ;;
 16372                           
 16373                           
 16374                           ;psect for function _DelayOff_Main
 16375  2592                     _DelayOff_Main:	
 16376                           
 16377                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16378                           
 16379                           ;incstack = 0
 16380                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16381  2592  3001               	movlw	1
 16382  2593  3196  2683         	fcall	_DlyOff_Main
 16383  2595  0008               	return
 16384  2596                     __end_of_DelayOff_Main:	
 16385                           
 16386                           	psect	text103
 16387  1683                     __ptext103:	
 16388 ;; *************** function _DlyOff_Main *****************
 16389 ;; Defined at:
 16390 ;;		line 66 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;  sw              1    wreg     unsigned char 
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  sw              1   68[BANK0 ] unsigned char 
 16395 ;; Return value:  Size  Location     Type
 16396 ;;		None               void
 16397 ;; Registers used:
 16398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16399 ;; Tracked objects:
 16400 ;;		On entry : 0/0
 16401 ;;		On exit  : 0/0
 16402 ;;		Unchanged: 0/0
 16403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;Total ram usage:        3 bytes
 16409 ;; Hardware stack levels used:    1
 16410 ;; Hardware stack levels required when called:    8
 16411 ;; This function calls:
 16412 ;;		_DelayOffPointSelect
 16413 ;;		_setBuz
 16414 ;;		_setDimmerLights_Switch
 16415 ;;		_setDimmerLights_Trigger
 16416 ;;		_setRFSW_Status
 16417 ;;		_setRF_DimmerLights
 16418 ;;		_setSw_Status
 16419 ;;		_setTxData
 16420 ;; This function is called by:
 16421 ;;		_DelayOff_Main
 16422 ;; This function uses a non-reentrant model
 16423 ;;
 16424                           
 16425                           
 16426                           ;psect for function _DlyOff_Main
 16427  1683                     _DlyOff_Main:	
 16428                           
 16429                           ;incstack = 0
 16430                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16431                           ;DlyOff_Main@sw stored from wreg
 16432  1683  0020               	movlb	0	; select bank0
 16433  1684  00E4               	movwf	DlyOff_Main@sw
 16434                           
 16435                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16436  1685  0864               	movf	DlyOff_Main@sw,w
 16437  1686  31A6  267C  3196   	fcall	_DelayOffPointSelect
 16438                           
 16439                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16440  1689  0021               	movlb	1	; select bank1
 16441  168A  0839               	movf	_DelayOff^(0+128),w
 16442  168B  0086               	movwf	6
 16443  168C  0187               	clrf	7
 16444  168D  1C81               	btfss	1,1
 16445  168E  0008               	return
 16446                           
 16447                           ;DelayOff_B1.c: 70: {
 16448                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16449  168F  0839               	movf	_DelayOff^(0+128),w
 16450  1690  3E02               	addlw	2
 16451  1691  0086               	movwf	6
 16452  1692  0187               	clrf	7
 16453  1693  3001               	movlw	1
 16454  1694  0781               	addwf	1,f
 16455  1695  3141               	addfsr 1,1
 16456  1696  1803               	skipnc
 16457  1697  0A81               	incf	1,f
 16458                           
 16459                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16460  1698  0839               	movf	_DelayOff^(0+128),w
 16461  1699  3E02               	addlw	2
 16462  169A  0086               	movwf	6
 16463  169B  0187               	clrf	7
 16464  169C  3F40               	moviw [0]fsr1
 16465  169D  0020               	movlb	0	; select bank0
 16466  169E  00E2               	movwf	??_DlyOff_Main
 16467  169F  3F41               	moviw [1]fsr1
 16468  16A0  00E3               	movwf	??_DlyOff_Main+1
 16469  16A1  3015               	movlw	21
 16470  16A2  0263               	subwf	??_DlyOff_Main+1,w
 16471  16A3  30E0               	movlw	224
 16472  16A4  1903               	skipnz
 16473  16A5  0262               	subwf	??_DlyOff_Main,w
 16474  16A6  1C03               	skipc
 16475  16A7  0008               	return
 16476                           
 16477                           ;DelayOff_B1.c: 73: {
 16478                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16479  16A8  0021               	movlb	1	; select bank1
 16480  16A9  0839               	movf	_DelayOff^(0+128),w
 16481  16AA  3E02               	addlw	2
 16482  16AB  0086               	movwf	6
 16483  16AC  0187               	clrf	7
 16484  16AD  3000               	movlw	0
 16485  16AE  3FC0               	movwi [0]fsr1
 16486  16AF  3FC1               	movwi [1]fsr1
 16487                           
 16488                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16489  16B0  3001               	movlw	1
 16490  16B1  0020               	movlb	0	; select bank0
 16491  16B2  00E2               	movwf	??_DlyOff_Main
 16492  16B3  0021               	movlb	1	; select bank1
 16493  16B4  0839               	movf	_DelayOff^(0+128),w
 16494  16B5  3E04               	addlw	4
 16495  16B6  0086               	movwf	6
 16496  16B7  0187               	clrf	7
 16497  16B8  0020               	movlb	0	; select bank0
 16498  16B9  0862               	movf	??_DlyOff_Main,w
 16499  16BA  0781               	addwf	1,f
 16500                           
 16501                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16502  16BB  0021               	movlb	1	; select bank1
 16503  16BC  0839               	movf	_DelayOff^(0+128),w
 16504  16BD  3E04               	addlw	4
 16505  16BE  0086               	movwf	6
 16506  16BF  0187               	clrf	7
 16507  16C0  0A39               	incf	_DelayOff^(0+128),w
 16508  16C1  0084               	movwf	4
 16509  16C2  0185               	clrf	5
 16510  16C3  0800               	movf	0,w
 16511  16C4  0201               	subwf	1,w
 16512  16C5  1C03               	skipc
 16513  16C6  0008               	return
 16514                           
 16515                           ;DelayOff_B1.c: 77: {
 16516                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16517  16C7  0839               	movf	_DelayOff^(0+128),w
 16518  16C8  3E04               	addlw	4
 16519  16C9  0086               	movwf	6
 16520  16CA  0187               	clrf	7
 16521  16CB  0181               	clrf	1
 16522                           
 16523                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16524  16CC  0839               	movf	_DelayOff^(0+128),w
 16525  16CD  0086               	movwf	6
 16526  16CE  0187               	clrf	7
 16527  16CF  1081               	bcf	1,1
 16528                           
 16529                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16530  16D0  0020               	movlb	0	; select bank0
 16531  16D1  01A2               	clrf	setSw_Status@command
 16532  16D2  0864               	movf	DlyOff_Main@sw,w
 16533  16D3  31A7  2722  3196   	fcall	_setSw_Status
 16534                           
 16535                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16536  16D6  0020               	movlb	0	; select bank0
 16537  16D7  01A2               	clrf	setRFSW_Status@command
 16538  16D8  0864               	movf	DlyOff_Main@sw,w
 16539  16D9  31A7  2713  3196   	fcall	_setRFSW_Status
 16540                           
 16541                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16542  16DC  0020               	movlb	0	; select bank0
 16543  16DD  01DD               	clrf	setRF_DimmerLights@on
 16544  16DE  0864               	movf	DlyOff_Main@sw,w
 16545  16DF  3193  2377  3196   	fcall	_setRF_DimmerLights
 16546                           
 16547                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16548  16E2  0020               	movlb	0	; select bank0
 16549  16E3  01A2               	clrf	setDimmerLights_Trigger@command
 16550  16E4  0AA2               	incf	setDimmerLights_Trigger@command,f
 16551  16E5  0864               	movf	DlyOff_Main@sw,w
 16552  16E6  31A7  277E  3196   	fcall	_setDimmerLights_Trigger
 16553                           
 16554                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16555  16E9  0020               	movlb	0	; select bank0
 16556  16EA  01A2               	clrf	setDimmerLights_Switch@command
 16557  16EB  0864               	movf	DlyOff_Main@sw,w
 16558  16EC  31A7  276E  3196   	fcall	_setDimmerLights_Switch
 16559                           
 16560                           ;DelayOff_B1.c: 85: setTxData(1);
 16561  16EF  3001               	movlw	1
 16562  16F0  318A  22F2  3196   	fcall	_setTxData
 16563                           
 16564                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16565  16F3  3064               	movlw	100
 16566  16F4  0020               	movlb	0	; select bank0
 16567  16F5  00A6               	movwf	setBuz@time
 16568  16F6  3000               	movlw	0
 16569  16F7  00A7               	movwf	setBuz@time+1
 16570  16F8  3001               	movlw	1
 16571  16F9  3188  2019         	fcall	_setBuz
 16572  16FB  0008               	return
 16573  16FC                     __end_of_DlyOff_Main:	
 16574                           
 16575                           	psect	text104
 16576  0AF2                     __ptext104:	
 16577 ;; *************** function _setTxData *****************
 16578 ;; Defined at:
 16579 ;;		line 130 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16580 ;; Parameters:    Size  Location     Type
 16581 ;;  rf              1    wreg     unsigned char 
 16582 ;; Auto vars:     Size  Location     Type
 16583 ;;  rf              1    3[BANK0 ] unsigned char 
 16584 ;;  i               1    0        unsigned char 
 16585 ;; Return value:  Size  Location     Type
 16586 ;;		None               void
 16587 ;; Registers used:
 16588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16589 ;; Tracked objects:
 16590 ;;		On entry : 0/0
 16591 ;;		On exit  : 0/0
 16592 ;;		Unchanged: 0/0
 16593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;Total ram usage:        2 bytes
 16599 ;; Hardware stack levels used:    1
 16600 ;; Hardware stack levels required when called:    5
 16601 ;; This function calls:
 16602 ;;		_RfPointSelect
 16603 ;; This function is called by:
 16604 ;;		_DlyOff_Main
 16605 ;;		_setDimmerLights_Adj
 16606 ;;		_setControl_Lights_Table
 16607 ;;		_setRFSW_Control
 16608 ;;		_setRFSW_AdjControl
 16609 ;;		_Sw_DimmerOnFunc
 16610 ;;		_Sw_DimmerOffFunc
 16611 ;; This function uses a non-reentrant model
 16612 ;;
 16613                           
 16614                           
 16615                           ;psect for function _setTxData
 16616  0AF2                     _setTxData:	
 16617                           
 16618                           ;incstack = 0
 16619                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16620                           ;setTxData@rf stored from wreg
 16621  0AF2  0020               	movlb	0	; select bank0
 16622  0AF3  00A3               	movwf	setTxData@rf
 16623                           
 16624                           ;RF_Control_B1.c: 131: char i;
 16625                           ;RF_Control_B1.c: 132: RfPointSelect(rf);
 16626  0AF4  0823               	movf	setTxData@rf,w
 16627  0AF5  31A6  2694  318A   	fcall	_RfPointSelect
 16628                           
 16629                           ;RF_Control_B1.c: 133: if (RF->Enable) {
 16630  0AF8  0021               	movlb	1	; select bank1
 16631  0AF9  083E               	movf	_RF^(0+128),w
 16632  0AFA  0086               	movwf	6
 16633  0AFB  0187               	clrf	7
 16634  0AFC  1C01               	btfss	1,0
 16635  0AFD  0008               	return
 16636                           
 16637                           ;RF_Control_B1.c: 135: if (!RF->TransceiveGO) {
 16638  0AFE  083E               	movf	_RF^(0+128),w
 16639  0AFF  0086               	movwf	6
 16640  0B00  0187               	clrf	7
 16641  0B01  1901               	btfsc	1,2
 16642  0B02  0008               	return
 16643                           
 16644                           ;RF_Control_B1.c: 136: RF->TransceiveGO = 1;
 16645  0B03  083E               	movf	_RF^(0+128),w
 16646  0B04  0086               	movwf	6
 16647  0B05  0187               	clrf	7
 16648  0B06  1501               	bsf	1,2
 16649                           
 16650                           ;RF_Control_B1.c: 145: RF_Data[0] = 0x63;
 16651  0B07  3063               	movlw	99
 16652  0B08  0020               	movlb	0	; select bank0
 16653  0B09  00A2               	movwf	??_setTxData
 16654  0B0A  0822               	movf	??_setTxData,w
 16655  0B0B  0021               	movlb	1	; select bank1
 16656  0B0C  00A0               	movwf	_RF_Data^(0+128)
 16657                           
 16658                           ;RF_Control_B1.c: 146: RF_Data[1] = 0x02;
 16659  0B0D  3002               	movlw	2
 16660  0B0E  0020               	movlb	0	; select bank0
 16661  0B0F  00A2               	movwf	??_setTxData
 16662  0B10  0822               	movf	??_setTxData,w
 16663  0B11  0021               	movlb	1	; select bank1
 16664  0B12  00A1               	movwf	(_RF_Data^(0+128)+1)
 16665                           
 16666                           ;RF_Control_B1.c: 147: RF_Data[2] = Product->Data[2];
 16667  0B13  087D               	movf	_Product,w
 16668  0B14  0086               	movwf	6
 16669  0B15  3001               	movlw	1	; select bank2/3
 16670  0B16  0087               	movwf	7
 16671  0B17  3001               	movlw	1	; select bank2/3
 16672  0B18  3F42               	moviw [2]fsr1
 16673  0B19  00A2               	movwf	(_RF_Data^(0+128)+2)
 16674                           
 16675                           ;RF_Control_B1.c: 148: RF_Data[3] = Product->Data[3];
 16676  0B1A  087D               	movf	_Product,w
 16677  0B1B  0086               	movwf	6
 16678  0B1C  3001               	movlw	1	; select bank2/3
 16679  0B1D  0087               	movwf	7
 16680  0B1E  3001               	movlw	1	; select bank2/3
 16681  0B1F  3F43               	moviw [3]fsr1
 16682  0B20  00A3               	movwf	(_RF_Data^(0+128)+3)
 16683                           
 16684                           ;RF_Control_B1.c: 149: RF_Data[4] = Product->Data[4];
 16685  0B21  087D               	movf	_Product,w
 16686  0B22  0086               	movwf	6
 16687  0B23  3001               	movlw	1	; select bank2/3
 16688  0B24  0087               	movwf	7
 16689  0B25  3001               	movlw	1	; select bank2/3
 16690  0B26  3F44               	moviw [4]fsr1
 16691  0B27  00A4               	movwf	(_RF_Data^(0+128)+4)
 16692                           
 16693                           ;RF_Control_B1.c: 150: RF_Data[5] = Product->Data[5];
 16694  0B28  087D               	movf	_Product,w
 16695  0B29  0086               	movwf	6
 16696  0B2A  3001               	movlw	1	; select bank2/3
 16697  0B2B  0087               	movwf	7
 16698  0B2C  3001               	movlw	1	; select bank2/3
 16699  0B2D  3F45               	moviw [5]fsr1
 16700  0B2E  00A5               	movwf	(_RF_Data^(0+128)+5)
 16701                           
 16702                           ;RF_Control_B1.c: 151: RF_Data[6] = Product->Data[6];
 16703  0B2F  087D               	movf	_Product,w
 16704  0B30  0086               	movwf	6
 16705  0B31  3001               	movlw	1	; select bank2/3
 16706  0B32  0087               	movwf	7
 16707  0B33  3001               	movlw	1	; select bank2/3
 16708  0B34  3F46               	moviw [6]fsr1
 16709  0B35  00A6               	movwf	(_RF_Data^(0+128)+6)
 16710                           
 16711                           ;RF_Control_B1.c: 152: RF_Data[7] = Product->Data[7];
 16712  0B36  087D               	movf	_Product,w
 16713  0B37  0086               	movwf	6
 16714  0B38  3001               	movlw	1	; select bank2/3
 16715  0B39  0087               	movwf	7
 16716  0B3A  3001               	movlw	1	; select bank2/3
 16717  0B3B  3F47               	moviw [7]fsr1
 16718  0B3C  00A7               	movwf	(_RF_Data^(0+128)+7)
 16719                           
 16720                           ;RF_Control_B1.c: 153: RF_Data[8] = Product->Data[8];
 16721  0B3D  087D               	movf	_Product,w
 16722  0B3E  0086               	movwf	6
 16723  0B3F  3001               	movlw	1	; select bank2/3
 16724  0B40  0087               	movwf	7
 16725  0B41  3001               	movlw	1	; select bank2/3
 16726  0B42  3F48               	moviw [8]fsr1
 16727  0B43  00A8               	movwf	(_RF_Data^(0+128)+8)
 16728                           
 16729                           ;RF_Control_B1.c: 154: RF_Data[9] = Product->Data[9];
 16730  0B44  087D               	movf	_Product,w
 16731  0B45  0086               	movwf	6
 16732  0B46  3001               	movlw	1	; select bank2/3
 16733  0B47  0087               	movwf	7
 16734  0B48  3001               	movlw	1	; select bank2/3
 16735  0B49  3F49               	moviw [9]fsr1
 16736  0B4A  00A9               	movwf	(_RF_Data^(0+128)+9)
 16737                           
 16738                           ;RF_Control_B1.c: 155: RF_Data[10] = Product->Data[10];
 16739  0B4B  087D               	movf	_Product,w
 16740  0B4C  0086               	movwf	6
 16741  0B4D  3001               	movlw	1	; select bank2/3
 16742  0B4E  0087               	movwf	7
 16743  0B4F  3001               	movlw	1	; select bank2/3
 16744  0B50  3F4A               	moviw [10]fsr1
 16745  0B51  00AA               	movwf	(_RF_Data^(0+128)+10)
 16746                           
 16747                           ;RF_Control_B1.c: 156: RF_Data[11] = Product->Data[11];
 16748  0B52  087D               	movf	_Product,w
 16749  0B53  0086               	movwf	6
 16750  0B54  3001               	movlw	1	; select bank2/3
 16751  0B55  0087               	movwf	7
 16752  0B56  3001               	movlw	1	; select bank2/3
 16753  0B57  3F4B               	moviw [11]fsr1
 16754  0B58  00AB               	movwf	(_RF_Data^(0+128)+11)
 16755                           
 16756                           ;RF_Control_B1.c: 157: RF_Data[12] = Product->Data[12];
 16757  0B59  087D               	movf	_Product,w
 16758  0B5A  0086               	movwf	6
 16759  0B5B  3001               	movlw	1	; select bank2/3
 16760  0B5C  0087               	movwf	7
 16761  0B5D  3001               	movlw	1	; select bank2/3
 16762  0B5E  3F4C               	moviw [12]fsr1
 16763  0B5F  00AC               	movwf	(_RF_Data^(0+128)+12)
 16764                           
 16765                           ;RF_Control_B1.c: 158: RF_Data[13] = Product->Data[13];
 16766  0B60  087D               	movf	_Product,w
 16767  0B61  0086               	movwf	6
 16768  0B62  3001               	movlw	1	; select bank2/3
 16769  0B63  0087               	movwf	7
 16770  0B64  3001               	movlw	1	; select bank2/3
 16771  0B65  3F4D               	moviw [13]fsr1
 16772  0B66  00AD               	movwf	(_RF_Data^(0+128)+13)
 16773                           
 16774                           ;RF_Control_B1.c: 159: RF_Data[14] = Product->Data[14];
 16775  0B67  087D               	movf	_Product,w
 16776  0B68  0086               	movwf	6
 16777  0B69  3001               	movlw	1	; select bank2/3
 16778  0B6A  0087               	movwf	7
 16779  0B6B  3001               	movlw	1	; select bank2/3
 16780  0B6C  3F4E               	moviw [14]fsr1
 16781  0B6D  00AE               	movwf	(_RF_Data^(0+128)+14)
 16782                           
 16783                           ;RF_Control_B1.c: 160: RF_Data[15] = Product->Data[15];
 16784  0B6E  087D               	movf	_Product,w
 16785  0B6F  0086               	movwf	6
 16786  0B70  3001               	movlw	1	; select bank2/3
 16787  0B71  0087               	movwf	7
 16788  0B72  3001               	movlw	1	; select bank2/3
 16789  0B73  3F4F               	moviw [15]fsr1
 16790  0B74  00AF               	movwf	(_RF_Data^(0+128)+15)
 16791                           
 16792                           ;RF_Control_B1.c: 161: RF_Data[16] = Product->Data[16];
 16793  0B75  087D               	movf	_Product,w
 16794  0B76  0086               	movwf	6
 16795  0B77  3001               	movlw	1	; select bank2/3
 16796  0B78  0087               	movwf	7
 16797  0B79  3001               	movlw	1	; select bank2/3
 16798  0B7A  3F50               	moviw [16]fsr1
 16799  0B7B  00B0               	movwf	(_RF_Data^(0+128)+16)
 16800                           
 16801                           ;RF_Control_B1.c: 162: RF_Data[17] = Product->Data[17];
 16802  0B7C  087D               	movf	_Product,w
 16803  0B7D  0086               	movwf	6
 16804  0B7E  3001               	movlw	1	; select bank2/3
 16805  0B7F  0087               	movwf	7
 16806  0B80  3001               	movlw	1	; select bank2/3
 16807  0B81  3F51               	moviw [17]fsr1
 16808  0B82  00B1               	movwf	(_RF_Data^(0+128)+17)
 16809                           
 16810                           ;RF_Control_B1.c: 163: RF_Data[18] = Product->Data[18];
 16811  0B83  087D               	movf	_Product,w
 16812  0B84  0086               	movwf	6
 16813  0B85  3001               	movlw	1	; select bank2/3
 16814  0B86  0087               	movwf	7
 16815  0B87  3001               	movlw	1	; select bank2/3
 16816  0B88  3F52               	moviw [18]fsr1
 16817  0B89  00B2               	movwf	(_RF_Data^(0+128)+18)
 16818                           
 16819                           ;RF_Control_B1.c: 164: RF_Data[19] = Product->Data[19];
 16820  0B8A  087D               	movf	_Product,w
 16821  0B8B  0086               	movwf	6
 16822  0B8C  3001               	movlw	1	; select bank2/3
 16823  0B8D  0087               	movwf	7
 16824  0B8E  3001               	movlw	1	; select bank2/3
 16825  0B8F  3F53               	moviw [19]fsr1
 16826  0B90  00B3               	movwf	(_RF_Data^(0+128)+19)
 16827                           
 16828                           ;RF_Control_B1.c: 165: RF_Data[20] = 209;
 16829  0B91  30D1               	movlw	209
 16830  0B92  0020               	movlb	0	; select bank0
 16831  0B93  00A2               	movwf	??_setTxData
 16832  0B94  0822               	movf	??_setTxData,w
 16833  0B95  0021               	movlb	1	; select bank1
 16834  0B96  00B4               	movwf	(_RF_Data^(0+128)+20)
 16835  0B97  0008               	return
 16836  0B98                     __end_of_setTxData:	
 16837                           
 16838                           	psect	text105
 16839  2694                     __ptext105:	
 16840 ;; *************** function _RfPointSelect *****************
 16841 ;; Defined at:
 16842 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16843 ;; Parameters:    Size  Location     Type
 16844 ;;  rf              1    wreg     unsigned char 
 16845 ;; Auto vars:     Size  Location     Type
 16846 ;;  rf              1    1[BANK0 ] unsigned char 
 16847 ;; Return value:  Size  Location     Type
 16848 ;;		None               void
 16849 ;; Registers used:
 16850 ;;		wreg
 16851 ;; Tracked objects:
 16852 ;;		On entry : 0/0
 16853 ;;		On exit  : 0/0
 16854 ;;		Unchanged: 0/0
 16855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;Total ram usage:        2 bytes
 16861 ;; Hardware stack levels used:    1
 16862 ;; Hardware stack levels required when called:    4
 16863 ;; This function calls:
 16864 ;;		Nothing
 16865 ;; This function is called by:
 16866 ;;		_setRF_Learn
 16867 ;;		_setRF_RxStatus
 16868 ;;		_setRF_Main
 16869 ;;		_setTxData
 16870 ;;		_setRF_Enable
 16871 ;;		_RF_RxDisable
 16872 ;;		_getRxData
 16873 ;;		_setLog_Code
 16874 ;;		_setControl_Lights_Table
 16875 ;; This function uses a non-reentrant model
 16876 ;;
 16877                           
 16878                           
 16879                           ;psect for function _RfPointSelect
 16880  2694                     _RfPointSelect:	
 16881                           
 16882                           ;incstack = 0
 16883                           ; Regs used in _RfPointSelect: [wreg]
 16884                           ;RfPointSelect@rf stored from wreg
 16885  2694  0020               	movlb	0	; select bank0
 16886  2695  00A1               	movwf	RfPointSelect@rf
 16887                           
 16888                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16889  2696  0821               	movf	RfPointSelect@rf,w
 16890  2697  3A01               	xorlw	1
 16891  2698  1D03               	skipz
 16892  2699  0008               	return
 16893                           
 16894                           ;RF_Control_B1.c: 10: RF = &RF1;
 16895  269A  30E4               	movlw	_RF1& (0+255)
 16896  269B  00A0               	movwf	??_RfPointSelect
 16897  269C  0820               	movf	??_RfPointSelect,w
 16898  269D  0021               	movlb	1	; select bank1
 16899  269E  00BE               	movwf	_RF^(0+128)
 16900  269F  0008               	return
 16901  26A0                     __end_of_RfPointSelect:	
 16902                           
 16903                           	psect	text106
 16904  2722                     __ptext106:	
 16905 ;; *************** function _setSw_Status *****************
 16906 ;; Defined at:
 16907 ;;		line 105 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 16908 ;; Parameters:    Size  Location     Type
 16909 ;;  sw              1    wreg     unsigned char 
 16910 ;;  command         1    2[BANK0 ] unsigned char 
 16911 ;; Auto vars:     Size  Location     Type
 16912 ;;  sw              1    3[BANK0 ] unsigned char 
 16913 ;; Return value:  Size  Location     Type
 16914 ;;		None               void
 16915 ;; Registers used:
 16916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16917 ;; Tracked objects:
 16918 ;;		On entry : 0/0
 16919 ;;		On exit  : 0/0
 16920 ;;		Unchanged: 0/0
 16921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16922 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16926 ;;Total ram usage:        2 bytes
 16927 ;; Hardware stack levels used:    1
 16928 ;; Hardware stack levels required when called:    5
 16929 ;; This function calls:
 16930 ;;		_SwPointSelect
 16931 ;; This function is called by:
 16932 ;;		_DlyOff_Main
 16933 ;;		_setDimmerLights_ERROR
 16934 ;;		_setControl_Lights_Table
 16935 ;;		_setRFSW_Control
 16936 ;; This function uses a non-reentrant model
 16937 ;;
 16938                           
 16939                           
 16940                           ;psect for function _setSw_Status
 16941  2722                     _setSw_Status:	
 16942                           
 16943                           ;incstack = 0
 16944                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16945                           ;setSw_Status@sw stored from wreg
 16946  2722  0020               	movlb	0	; select bank0
 16947  2723  00A3               	movwf	setSw_Status@sw
 16948                           
 16949                           ;Switch_B1.c: 106: SwPointSelect(sw);
 16950  2724  0823               	movf	setSw_Status@sw,w
 16951  2725  31A6  2621         	fcall	_SwPointSelect
 16952                           
 16953                           ;Switch_B1.c: 107: Sw->Status = command;
 16954  2727  0879               	movf	_Sw,w
 16955  2728  0086               	movwf	6
 16956  2729  3001               	movlw	1	; select bank2/3
 16957  272A  0087               	movwf	7
 16958  272B  0020               	movlb	0	; select bank0
 16959  272C  0822               	movf	setSw_Status@command,w
 16960  272D  1301               	bcf	1,6
 16961  272E  1D03               	skipz
 16962  272F  1701               	bsf	1,6
 16963  2730  0008               	return
 16964  2731                     __end_of_setSw_Status:	
 16965                           
 16966                           	psect	text107
 16967  2621                     __ptext107:	
 16968 ;; *************** function _SwPointSelect *****************
 16969 ;; Defined at:
 16970 ;;		line 17 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 16971 ;; Parameters:    Size  Location     Type
 16972 ;;  sw              1    wreg     unsigned char 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;  sw              1    1[BANK0 ] unsigned char 
 16975 ;; Return value:  Size  Location     Type
 16976 ;;		None               void
 16977 ;; Registers used:
 16978 ;;		wreg
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16988 ;;Total ram usage:        2 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    4
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		_setSw_Enable
 16995 ;;		_setSw_Status
 16996 ;;		_setSw_Main
 16997 ;;		_Sw_Detect
 16998 ;; This function uses a non-reentrant model
 16999 ;;
 17000                           
 17001                           
 17002                           ;psect for function _SwPointSelect
 17003  2621                     _SwPointSelect:	
 17004                           
 17005                           ;incstack = 0
 17006                           ; Regs used in _SwPointSelect: [wreg]
 17007                           ;SwPointSelect@sw stored from wreg
 17008  2621  0020               	movlb	0	; select bank0
 17009  2622  00A1               	movwf	SwPointSelect@sw
 17010                           
 17011                           ;Switch_B1.c: 20: if (sw == 1) {
 17012  2623  0821               	movf	SwPointSelect@sw,w
 17013  2624  3A01               	xorlw	1
 17014  2625  1D03               	skipz
 17015  2626  0008               	return
 17016                           
 17017                           ;Switch_B1.c: 21: Sw = &Sw1;
 17018  2627  3059               	movlw	_Sw1& (0+255)
 17019  2628  00A0               	movwf	??_SwPointSelect
 17020  2629  0820               	movf	??_SwPointSelect,w
 17021  262A  00F9               	movwf	_Sw
 17022  262B  0008               	return
 17023  262C                     __end_of_SwPointSelect:	
 17024                           
 17025                           	psect	text108
 17026  1377                     __ptext108:	
 17027 ;; *************** function _setRF_DimmerLights *****************
 17028 ;; Defined at:
 17029 ;;		line 397 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17030 ;; Parameters:    Size  Location     Type
 17031 ;;  lights          1    wreg     unsigned char 
 17032 ;;  on              1   61[BANK0 ] unsigned char 
 17033 ;; Auto vars:     Size  Location     Type
 17034 ;;  lights          1   65[BANK0 ] unsigned char 
 17035 ;;  status          1   64[BANK0 ] unsigned char 
 17036 ;; Return value:  Size  Location     Type
 17037 ;;		None               void
 17038 ;; Registers used:
 17039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17040 ;; Tracked objects:
 17041 ;;		On entry : 0/0
 17042 ;;		On exit  : 0/0
 17043 ;;		Unchanged: 0/0
 17044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17045 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;Total ram usage:        5 bytes
 17050 ;; Hardware stack levels used:    1
 17051 ;; Hardware stack levels required when called:    7
 17052 ;; This function calls:
 17053 ;;		_setPercentValue
 17054 ;; This function is called by:
 17055 ;;		_DlyOff_Main
 17056 ;;		_setDimmerLights_Adj
 17057 ;;		_setRFSW_Control
 17058 ;;		_Sw_DimmerOnFunc
 17059 ;;		_Sw_DimmerOffFunc
 17060 ;; This function uses a non-reentrant model
 17061 ;;
 17062                           
 17063                           
 17064                           ;psect for function _setRF_DimmerLights
 17065  1377                     _setRF_DimmerLights:	
 17066                           
 17067                           ;incstack = 0
 17068                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17069                           ;setRF_DimmerLights@lights stored from wreg
 17070  1377  0020               	movlb	0	; select bank0
 17071  1378  00E1               	movwf	setRF_DimmerLights@lights
 17072                           
 17073                           ;RF_Control_B1.c: 398: char status;
 17074                           ;RF_Control_B1.c: 399: status = 1;
 17075  1379  01E0               	clrf	setRF_DimmerLights@status
 17076  137A  0AE0               	incf	setRF_DimmerLights@status,f
 17077                           
 17078                           ;RF_Control_B1.c: 400: status <<= (lights - 1);
 17079  137B  0861               	movf	setRF_DimmerLights@lights,w
 17080  137C  3EFF               	addlw	-1
 17081  137D  0A89               	incf	9,f
 17082  137E  2B81               	goto	u7570
 17083  137F                     u7575:	
 17084  137F  1003               	clrc
 17085  1380  0DE0               	rlf	setRF_DimmerLights@status,f
 17086  1381                     u7570:	
 17087  1381  3EFF               	addlw	-1
 17088  1382  1D03               	skipz
 17089  1383  2B7F               	goto	u7575
 17090                           
 17091                           ;RF_Control_B1.c: 401: Product->Data[11]=lights;
 17092  1384  0861               	movf	setRF_DimmerLights@lights,w
 17093  1385  00DE               	movwf	??_setRF_DimmerLights
 17094  1386  087D               	movf	_Product,w
 17095  1387  3E0B               	addlw	11
 17096  1388  0086               	movwf	6
 17097  1389  3001               	movlw	1	; select bank2/3
 17098  138A  0087               	movwf	7
 17099  138B  085E               	movf	??_setRF_DimmerLights,w
 17100  138C  0081               	movwf	1
 17101                           
 17102                           ;RF_Control_B1.c: 404: Product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 17103  138D  3043               	movlw	67
 17104  138E  319E  2694  3193   	fcall	_setPercentValue
 17105  1391  0020               	movlb	0	; select bank0
 17106  1392  00DE               	movwf	??_setRF_DimmerLights
 17107  1393  0861               	movf	setRF_DimmerLights@lights,w
 17108  1394  3E14               	addlw	20
 17109  1395  077D               	addwf	_Product,w
 17110  1396  00DF               	movwf	??_setRF_DimmerLights+1
 17111  1397  085F               	movf	??_setRF_DimmerLights+1,w
 17112  1398  0086               	movwf	6
 17113  1399  3001               	movlw	1	; select bank2/3
 17114  139A  0087               	movwf	7
 17115  139B  085E               	movf	??_setRF_DimmerLights,w
 17116  139C  0081               	movwf	1
 17117                           
 17118                           ;RF_Control_B1.c: 407: Product->Data[9]=Product->Data[20 + lights];
 17119  139D  0861               	movf	setRF_DimmerLights@lights,w
 17120  139E  3E14               	addlw	20
 17121  139F  077D               	addwf	_Product,w
 17122  13A0  00DE               	movwf	??_setRF_DimmerLights
 17123  13A1  085E               	movf	??_setRF_DimmerLights,w
 17124  13A2  0086               	movwf	6
 17125  13A3  3001               	movlw	1	; select bank2/3
 17126  13A4  0087               	movwf	7
 17127  13A5  0801               	movf	1,w
 17128  13A6  00DF               	movwf	??_setRF_DimmerLights+1
 17129  13A7  087D               	movf	_Product,w
 17130  13A8  3E09               	addlw	9
 17131  13A9  0086               	movwf	6
 17132  13AA  3001               	movlw	1	; select bank2/3
 17133  13AB  0087               	movwf	7
 17134  13AC  085F               	movf	??_setRF_DimmerLights+1,w
 17135  13AD  0081               	movwf	1
 17136                           
 17137                           ;RF_Control_B1.c: 408: Product->Data[17]=Product->Data[26 + lights];
 17138  13AE  0861               	movf	setRF_DimmerLights@lights,w
 17139  13AF  3E1A               	addlw	26
 17140  13B0  077D               	addwf	_Product,w
 17141  13B1  00DE               	movwf	??_setRF_DimmerLights
 17142  13B2  085E               	movf	??_setRF_DimmerLights,w
 17143  13B3  0086               	movwf	6
 17144  13B4  3001               	movlw	1	; select bank2/3
 17145  13B5  0087               	movwf	7
 17146  13B6  0801               	movf	1,w
 17147  13B7  00DF               	movwf	??_setRF_DimmerLights+1
 17148  13B8  087D               	movf	_Product,w
 17149  13B9  3E11               	addlw	17
 17150  13BA  0086               	movwf	6
 17151  13BB  3001               	movlw	1	; select bank2/3
 17152  13BC  0087               	movwf	7
 17153  13BD  085F               	movf	??_setRF_DimmerLights+1,w
 17154  13BE  0081               	movwf	1
 17155                           
 17156                           ;RF_Control_B1.c: 409: if (on) {
 17157  13BF  085D               	movf	setRF_DimmerLights@on,w
 17158  13C0  1903               	btfsc	3,2
 17159  13C1  2BD2               	goto	l8036
 17160                           
 17161                           ;RF_Control_B1.c: 410: Product->Data[15]=(Product->Data[15] | status);
 17162  13C2  087D               	movf	_Product,w
 17163  13C3  3E0F               	addlw	15
 17164  13C4  0086               	movwf	6
 17165  13C5  3001               	movlw	1	; select bank2/3
 17166  13C6  0087               	movwf	7
 17167  13C7  0801               	movf	1,w
 17168  13C8  0460               	iorwf	setRF_DimmerLights@status,w
 17169  13C9  00DE               	movwf	??_setRF_DimmerLights
 17170  13CA  087D               	movf	_Product,w
 17171  13CB  3E0F               	addlw	15
 17172  13CC  0086               	movwf	6
 17173  13CD  3001               	movlw	1	; select bank2/3
 17174  13CE  0087               	movwf	7
 17175  13CF  085E               	movf	??_setRF_DimmerLights,w
 17176  13D0  0081               	movwf	1
 17177                           
 17178                           ;RF_Control_B1.c: 411: } else {
 17179  13D1  0008               	return
 17180  13D2                     l8036:	
 17181                           
 17182                           ;RF_Control_B1.c: 412: Product->Data[15]=(Product->Data[15]&(~status));
 17183  13D2  087D               	movf	_Product,w
 17184  13D3  3E0F               	addlw	15
 17185  13D4  0086               	movwf	6
 17186  13D5  3001               	movlw	1	; select bank2/3
 17187  13D6  0087               	movwf	7
 17188  13D7  0960               	comf	setRF_DimmerLights@status,w
 17189  13D8  0501               	andwf	1,w
 17190  13D9  00DE               	movwf	??_setRF_DimmerLights
 17191  13DA  087D               	movf	_Product,w
 17192  13DB  3E0F               	addlw	15
 17193  13DC  0086               	movwf	6
 17194  13DD  3001               	movlw	1	; select bank2/3
 17195  13DE  0087               	movwf	7
 17196  13DF  085E               	movf	??_setRF_DimmerLights,w
 17197  13E0  0081               	movwf	1
 17198  13E1  0008               	return
 17199  13E2                     __end_of_setRF_DimmerLights:	
 17200                           
 17201                           	psect	text109
 17202  1E94                     __ptext109:	
 17203 ;; *************** function _setPercentValue *****************
 17204 ;; Defined at:
 17205 ;;		line 505 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;  value           1    wreg     unsigned char 
 17208 ;; Auto vars:     Size  Location     Type
 17209 ;;  value           1   57[BANK0 ] unsigned char 
 17210 ;;  i               3   58[BANK0 ] float 
 17211 ;; Return value:  Size  Location     Type
 17212 ;;                  1    wreg      unsigned char 
 17213 ;; Registers used:
 17214 ;;		wreg, status,2, status,0, pclath, cstack
 17215 ;; Tracked objects:
 17216 ;;		On entry : 0/0
 17217 ;;		On exit  : 0/0
 17218 ;;		Unchanged: 0/0
 17219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17223 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17224 ;;Total ram usage:        4 bytes
 17225 ;; Hardware stack levels used:    1
 17226 ;; Hardware stack levels required when called:    6
 17227 ;; This function calls:
 17228 ;;		___awtoft
 17229 ;;		___ftdiv
 17230 ;;		___fttol
 17231 ;; This function is called by:
 17232 ;;		_Flash_Memory_Initialization
 17233 ;;		_setRF_DimmerLights
 17234 ;; This function uses a non-reentrant model
 17235 ;;
 17236                           
 17237                           
 17238                           ;psect for function _setPercentValue
 17239  1E94                     _setPercentValue:	
 17240                           
 17241                           ;incstack = 0
 17242                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17243                           ;setPercentValue@value stored from wreg
 17244  1E94  0020               	movlb	0	; select bank0
 17245  1E95  00D9               	movwf	setPercentValue@value
 17246                           
 17247                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17248  1E96  3000               	movlw	0
 17249  1E97  00DA               	movwf	setPercentValue@i
 17250  1E98  3054               	movlw	84
 17251  1E99  00DB               	movwf	setPercentValue@i+1
 17252  1E9A  3042               	movlw	66
 17253  1E9B  00DC               	movwf	setPercentValue@i+2
 17254                           
 17255                           ;Dimmer_B1.c: 509: i/=100;
 17256  1E9C  3000               	movlw	0
 17257  1E9D  00AE               	movwf	___ftdiv@f2
 17258  1E9E  30C8               	movlw	200
 17259  1E9F  00AF               	movwf	___ftdiv@f2+1
 17260  1EA0  3042               	movlw	66
 17261  1EA1  00B0               	movwf	___ftdiv@f2+2
 17262  1EA2  085A               	movf	setPercentValue@i,w
 17263  1EA3  00B1               	movwf	___ftdiv@f1
 17264  1EA4  085B               	movf	setPercentValue@i+1,w
 17265  1EA5  00B2               	movwf	___ftdiv@f1+1
 17266  1EA6  085C               	movf	setPercentValue@i+2,w
 17267  1EA7  00B3               	movwf	___ftdiv@f1+2
 17268  1EA8  318B  2398  319E   	fcall	___ftdiv
 17269  1EAB  0020               	movlb	0	; select bank0
 17270  1EAC  082E               	movf	?___ftdiv,w
 17271  1EAD  00DA               	movwf	setPercentValue@i
 17272  1EAE  082F               	movf	?___ftdiv+1,w
 17273  1EAF  00DB               	movwf	setPercentValue@i+1
 17274  1EB0  0830               	movf	?___ftdiv+2,w
 17275  1EB1  00DC               	movwf	setPercentValue@i+2
 17276                           
 17277                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17278  1EB2  0859               	movf	setPercentValue@value,w
 17279  1EB3  3EBD               	addlw	189
 17280  1EB4  00A8               	movwf	___awtoft@c
 17281  1EB5  30FF               	movlw	255
 17282  1EB6  1803               	skipnc
 17283  1EB7  3000               	movlw	0
 17284  1EB8  00A9               	movwf	___awtoft@c+1
 17285  1EB9  319A  2210  319E   	fcall	___awtoft
 17286  1EBC  0020               	movlb	0	; select bank0
 17287  1EBD  0828               	movf	?___awtoft,w
 17288  1EBE  00B1               	movwf	___ftdiv@f1
 17289  1EBF  0829               	movf	?___awtoft+1,w
 17290  1EC0  00B2               	movwf	___ftdiv@f1+1
 17291  1EC1  082A               	movf	?___awtoft+2,w
 17292  1EC2  00B3               	movwf	___ftdiv@f1+2
 17293  1EC3  085A               	movf	setPercentValue@i,w
 17294  1EC4  00AE               	movwf	___ftdiv@f2
 17295  1EC5  085B               	movf	setPercentValue@i+1,w
 17296  1EC6  00AF               	movwf	___ftdiv@f2+1
 17297  1EC7  085C               	movf	setPercentValue@i+2,w
 17298  1EC8  00B0               	movwf	___ftdiv@f2+2
 17299  1EC9  318B  2398  319E   	fcall	___ftdiv
 17300  1ECC  0020               	movlb	0	; select bank0
 17301  1ECD  082E               	movf	?___ftdiv,w
 17302  1ECE  00CB               	movwf	___fttol@f1
 17303  1ECF  082F               	movf	?___ftdiv+1,w
 17304  1ED0  00CC               	movwf	___fttol@f1+1
 17305  1ED1  0830               	movf	?___ftdiv+2,w
 17306  1ED2  00CD               	movwf	___fttol@f1+2
 17307  1ED3  3197  2779         	fcall	___fttol
 17308  1ED5  0020               	movlb	0	; select bank0
 17309  1ED6  034B               	decf	?___fttol,w
 17310  1ED7  3AFF               	xorlw	255
 17311  1ED8  3E64               	addlw	100
 17312  1ED9  0008               	return
 17313  1EDA                     __end_of_setPercentValue:	
 17314                           
 17315                           	psect	text110
 17316  1779                     __ptext110:	
 17317 ;; *************** function ___fttol *****************
 17318 ;; Defined at:
 17319 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17320 ;; Parameters:    Size  Location     Type
 17321 ;;  f1              3   43[BANK0 ] float 
 17322 ;; Auto vars:     Size  Location     Type
 17323 ;;  lval            4   52[BANK0 ] unsigned long 
 17324 ;;  exp1            1   56[BANK0 ] unsigned char 
 17325 ;;  sign1           1   51[BANK0 ] unsigned char 
 17326 ;; Return value:  Size  Location     Type
 17327 ;;                  4   43[BANK0 ] long 
 17328 ;; Registers used:
 17329 ;;		wreg, status,2, status,0
 17330 ;; Tracked objects:
 17331 ;;		On entry : 0/0
 17332 ;;		On exit  : 0/0
 17333 ;;		Unchanged: 0/0
 17334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;Total ram usage:       14 bytes
 17340 ;; Hardware stack levels used:    1
 17341 ;; Hardware stack levels required when called:    4
 17342 ;; This function calls:
 17343 ;;		Nothing
 17344 ;; This function is called by:
 17345 ;;		_getPercentValue
 17346 ;;		_setPercentValue
 17347 ;; This function uses a non-reentrant model
 17348 ;;
 17349                           
 17350                           
 17351                           ;psect for function ___fttol
 17352  1779                     ___fttol:	
 17353                           
 17354                           ;incstack = 0
 17355                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17356  1779  0020               	movlb	0	; select bank0
 17357  177A  084B               	movf	___fttol@f1,w
 17358  177B  00CF               	movwf	??___fttol
 17359  177C  084C               	movf	___fttol@f1+1,w
 17360  177D  00D0               	movwf	??___fttol+1
 17361  177E  084D               	movf	___fttol@f1+2,w
 17362  177F  00D1               	movwf	??___fttol+2
 17363  1780  1003               	clrc
 17364  1781  0D50               	rlf	??___fttol+1,w
 17365  1782  0D51               	rlf	??___fttol+2,w
 17366  1783  00D2               	movwf	??___fttol+3
 17367  1784  0852               	movf	??___fttol+3,w
 17368  1785  00D8               	movwf	___fttol@exp1
 17369  1786  08D8               	movf	___fttol@exp1,f
 17370  1787  1D03               	skipz
 17371  1788  2F92               	goto	l5842
 17372  1789  3000               	movlw	0
 17373  178A  00CE               	movwf	?___fttol+3
 17374  178B  3000               	movlw	0
 17375  178C  00CD               	movwf	?___fttol+2
 17376  178D  3000               	movlw	0
 17377  178E  00CC               	movwf	?___fttol+1
 17378  178F  3000               	movlw	0
 17379  1790  00CB               	movwf	?___fttol
 17380  1791  0008               	return
 17381  1792                     l5842:	
 17382  1792  084B               	movf	___fttol@f1,w
 17383  1793  00CF               	movwf	??___fttol
 17384  1794  084C               	movf	___fttol@f1+1,w
 17385  1795  00D0               	movwf	??___fttol+1
 17386  1796  084D               	movf	___fttol@f1+2,w
 17387  1797  00D1               	movwf	??___fttol+2
 17388  1798  3017               	movlw	23
 17389  1799                     u4315:	
 17390  1799  36D1               	lsrf	??___fttol+2,f
 17391  179A  0CD0               	rrf	??___fttol+1,f
 17392  179B  0CCF               	rrf	??___fttol,f
 17393  179C  0B89               	decfsz	9,f
 17394  179D  2F99               	goto	u4315
 17395  179E  084F               	movf	??___fttol,w
 17396  179F  00D2               	movwf	??___fttol+3
 17397  17A0  0852               	movf	??___fttol+3,w
 17398  17A1  00D3               	movwf	___fttol@sign1
 17399  17A2  17CC               	bsf	___fttol@f1+1,7
 17400  17A3  30FF               	movlw	255
 17401  17A4  05CB               	andwf	___fttol@f1,f
 17402  17A5  30FF               	movlw	255
 17403  17A6  05CC               	andwf	___fttol@f1+1,f
 17404  17A7  3000               	movlw	0
 17405  17A8  05CD               	andwf	___fttol@f1+2,f
 17406  17A9  084B               	movf	___fttol@f1,w
 17407  17AA  00D4               	movwf	___fttol@lval
 17408  17AB  084C               	movf	___fttol@f1+1,w
 17409  17AC  00D5               	movwf	___fttol@lval+1
 17410  17AD  084D               	movf	___fttol@f1+2,w
 17411  17AE  00D6               	movwf	___fttol@lval+2
 17412  17AF  01D7               	clrf	___fttol@lval+3
 17413  17B0  308E               	movlw	142
 17414  17B1  02D8               	subwf	___fttol@exp1,f
 17415  17B2  1FD8               	btfss	___fttol@exp1,7
 17416  17B3  2FD0               	goto	l5862
 17417  17B4  0858               	movf	___fttol@exp1,w
 17418  17B5  3A80               	xorlw	128
 17419  17B6  3E8F               	addlw	143
 17420  17B7  1803               	skipnc
 17421  17B8  2FC2               	goto	l5860
 17422  17B9  3000               	movlw	0
 17423  17BA  00CE               	movwf	?___fttol+3
 17424  17BB  3000               	movlw	0
 17425  17BC  00CD               	movwf	?___fttol+2
 17426  17BD  3000               	movlw	0
 17427  17BE  00CC               	movwf	?___fttol+1
 17428  17BF  3000               	movlw	0
 17429  17C0  00CB               	movwf	?___fttol
 17430  17C1  0008               	return
 17431  17C2                     l5860:	
 17432  17C2  3001               	movlw	1
 17433  17C3                     u4345:	
 17434  17C3  36D7               	lsrf	___fttol@lval+3,f
 17435  17C4  0CD6               	rrf	___fttol@lval+2,f
 17436  17C5  0CD5               	rrf	___fttol@lval+1,f
 17437  17C6  0CD4               	rrf	___fttol@lval,f
 17438  17C7  0B89               	decfsz	9,f
 17439  17C8  2FC3               	goto	u4345
 17440  17C9  3001               	movlw	1
 17441  17CA  00CF               	movwf	??___fttol
 17442  17CB  084F               	movf	??___fttol,w
 17443  17CC  07D8               	addwf	___fttol@exp1,f
 17444  17CD  1903               	btfsc	3,2
 17445  17CE  2FE9               	goto	l5872
 17446  17CF  2FC2               	goto	l5860
 17447  17D0                     l5862:	
 17448  17D0  3018               	movlw	24
 17449  17D1  0258               	subwf	___fttol@exp1,w
 17450  17D2  1C03               	skipc
 17451  17D3  2FE6               	goto	l5870
 17452  17D4  3000               	movlw	0
 17453  17D5  00CE               	movwf	?___fttol+3
 17454  17D6  3000               	movlw	0
 17455  17D7  00CD               	movwf	?___fttol+2
 17456  17D8  3000               	movlw	0
 17457  17D9  00CC               	movwf	?___fttol+1
 17458  17DA  3000               	movlw	0
 17459  17DB  00CB               	movwf	?___fttol
 17460  17DC  0008               	return
 17461  17DD                     l5868:	
 17462  17DD  3001               	movlw	1
 17463  17DE                     u4375:	
 17464  17DE  35D4               	lslf	___fttol@lval,f
 17465  17DF  0DD5               	rlf	___fttol@lval+1,f
 17466  17E0  0DD6               	rlf	___fttol@lval+2,f
 17467  17E1  0DD7               	rlf	___fttol@lval+3,f
 17468  17E2  0B89               	decfsz	9,f
 17469  17E3  2FDE               	goto	u4375
 17470  17E4  3001               	movlw	1
 17471  17E5  02D8               	subwf	___fttol@exp1,f
 17472  17E6                     l5870:	
 17473  17E6  08D8               	movf	___fttol@exp1,f
 17474  17E7  1D03               	skipz
 17475  17E8  2FDD               	goto	l5868
 17476  17E9                     l5872:	
 17477  17E9  0853               	movf	___fttol@sign1,w
 17478  17EA  1903               	btfsc	3,2
 17479  17EB  2FF7               	goto	l5876
 17480  17EC  09D4               	comf	___fttol@lval,f
 17481  17ED  09D5               	comf	___fttol@lval+1,f
 17482  17EE  09D6               	comf	___fttol@lval+2,f
 17483  17EF  09D7               	comf	___fttol@lval+3,f
 17484  17F0  0AD4               	incf	___fttol@lval,f
 17485  17F1  1903               	skipnz
 17486  17F2  0AD5               	incf	___fttol@lval+1,f
 17487  17F3  1903               	skipnz
 17488  17F4  0AD6               	incf	___fttol@lval+2,f
 17489  17F5  1903               	skipnz
 17490  17F6  0AD7               	incf	___fttol@lval+3,f
 17491  17F7                     l5876:	
 17492  17F7  0857               	movf	___fttol@lval+3,w
 17493  17F8  00CE               	movwf	?___fttol+3
 17494  17F9  0856               	movf	___fttol@lval+2,w
 17495  17FA  00CD               	movwf	?___fttol+2
 17496  17FB  0855               	movf	___fttol@lval+1,w
 17497  17FC  00CC               	movwf	?___fttol+1
 17498  17FD  0854               	movf	___fttol@lval,w
 17499  17FE  00CB               	movwf	?___fttol
 17500  17FF  0008               	return
 17501  1800                     __end_of___fttol:	
 17502                           
 17503                           	psect	text111
 17504  0B98                     __ptext111:	
 17505 ;; *************** function ___ftdiv *****************
 17506 ;; Defined at:
 17507 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;  f2              3   14[BANK0 ] float 
 17510 ;;  f1              3   17[BANK0 ] float 
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  f3              3   25[BANK0 ] float 
 17513 ;;  sign            1   29[BANK0 ] unsigned char 
 17514 ;;  exp             1   28[BANK0 ] unsigned char 
 17515 ;;  cntr            1   24[BANK0 ] unsigned char 
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  3   14[BANK0 ] float 
 17518 ;; Registers used:
 17519 ;;		wreg, status,2, status,0, pclath, cstack
 17520 ;; Tracked objects:
 17521 ;;		On entry : 0/0
 17522 ;;		On exit  : 0/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17525 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;Total ram usage:       16 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    5
 17532 ;; This function calls:
 17533 ;;		___ftpack
 17534 ;; This function is called by:
 17535 ;;		_getPercentValue
 17536 ;;		_setPercentValue
 17537 ;; This function uses a non-reentrant model
 17538 ;;
 17539                           
 17540                           
 17541                           ;psect for function ___ftdiv
 17542  0B98                     ___ftdiv:	
 17543                           
 17544                           ;incstack = 0
 17545                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17546  0B98  0020               	movlb	0	; select bank0
 17547  0B99  0831               	movf	___ftdiv@f1,w
 17548  0B9A  00B4               	movwf	??___ftdiv
 17549  0B9B  0832               	movf	___ftdiv@f1+1,w
 17550  0B9C  00B5               	movwf	??___ftdiv+1
 17551  0B9D  0833               	movf	___ftdiv@f1+2,w
 17552  0B9E  00B6               	movwf	??___ftdiv+2
 17553  0B9F  1003               	clrc
 17554  0BA0  0D35               	rlf	??___ftdiv+1,w
 17555  0BA1  0D36               	rlf	??___ftdiv+2,w
 17556  0BA2  00B7               	movwf	??___ftdiv+3
 17557  0BA3  0837               	movf	??___ftdiv+3,w
 17558  0BA4  00BC               	movwf	___ftdiv@exp
 17559  0BA5  08BC               	movf	___ftdiv@exp,f
 17560  0BA6  1D03               	skipz
 17561  0BA7  2BAF               	goto	l5750
 17562  0BA8  3000               	movlw	0
 17563  0BA9  00AE               	movwf	?___ftdiv
 17564  0BAA  3000               	movlw	0
 17565  0BAB  00AF               	movwf	?___ftdiv+1
 17566  0BAC  3000               	movlw	0
 17567  0BAD  00B0               	movwf	?___ftdiv+2
 17568  0BAE  0008               	return
 17569  0BAF                     l5750:	
 17570  0BAF  082E               	movf	___ftdiv@f2,w
 17571  0BB0  00B4               	movwf	??___ftdiv
 17572  0BB1  082F               	movf	___ftdiv@f2+1,w
 17573  0BB2  00B5               	movwf	??___ftdiv+1
 17574  0BB3  0830               	movf	___ftdiv@f2+2,w
 17575  0BB4  00B6               	movwf	??___ftdiv+2
 17576  0BB5  1003               	clrc
 17577  0BB6  0D35               	rlf	??___ftdiv+1,w
 17578  0BB7  0D36               	rlf	??___ftdiv+2,w
 17579  0BB8  00B7               	movwf	??___ftdiv+3
 17580  0BB9  0837               	movf	??___ftdiv+3,w
 17581  0BBA  00BD               	movwf	___ftdiv@sign
 17582  0BBB  08BD               	movf	___ftdiv@sign,f
 17583  0BBC  1D03               	skipz
 17584  0BBD  2BC5               	goto	l5756
 17585  0BBE  3000               	movlw	0
 17586  0BBF  00AE               	movwf	?___ftdiv
 17587  0BC0  3000               	movlw	0
 17588  0BC1  00AF               	movwf	?___ftdiv+1
 17589  0BC2  3000               	movlw	0
 17590  0BC3  00B0               	movwf	?___ftdiv+2
 17591  0BC4  0008               	return
 17592  0BC5                     l5756:	
 17593  0BC5  3000               	movlw	0
 17594  0BC6  00B9               	movwf	___ftdiv@f3
 17595  0BC7  3000               	movlw	0
 17596  0BC8  00BA               	movwf	___ftdiv@f3+1
 17597  0BC9  3000               	movlw	0
 17598  0BCA  00BB               	movwf	___ftdiv@f3+2
 17599  0BCB  3089               	movlw	137
 17600  0BCC  073D               	addwf	___ftdiv@sign,w
 17601  0BCD  00B4               	movwf	??___ftdiv
 17602  0BCE  0834               	movf	??___ftdiv,w
 17603  0BCF  02BC               	subwf	___ftdiv@exp,f
 17604  0BD0  0831               	movf	___ftdiv@f1,w
 17605  0BD1  00B4               	movwf	??___ftdiv
 17606  0BD2  0832               	movf	___ftdiv@f1+1,w
 17607  0BD3  00B5               	movwf	??___ftdiv+1
 17608  0BD4  0833               	movf	___ftdiv@f1+2,w
 17609  0BD5  00B6               	movwf	??___ftdiv+2
 17610  0BD6  3010               	movlw	16
 17611  0BD7                     u4125:	
 17612  0BD7  36B6               	lsrf	??___ftdiv+2,f
 17613  0BD8  0CB5               	rrf	??___ftdiv+1,f
 17614  0BD9  0CB4               	rrf	??___ftdiv,f
 17615  0BDA  0B89               	decfsz	9,f
 17616  0BDB  2BD7               	goto	u4125
 17617  0BDC  0834               	movf	??___ftdiv,w
 17618  0BDD  00B7               	movwf	??___ftdiv+3
 17619  0BDE  0837               	movf	??___ftdiv+3,w
 17620  0BDF  00BD               	movwf	___ftdiv@sign
 17621  0BE0  082E               	movf	___ftdiv@f2,w
 17622  0BE1  00B4               	movwf	??___ftdiv
 17623  0BE2  082F               	movf	___ftdiv@f2+1,w
 17624  0BE3  00B5               	movwf	??___ftdiv+1
 17625  0BE4  0830               	movf	___ftdiv@f2+2,w
 17626  0BE5  00B6               	movwf	??___ftdiv+2
 17627  0BE6  3010               	movlw	16
 17628  0BE7                     u4135:	
 17629  0BE7  36B6               	lsrf	??___ftdiv+2,f
 17630  0BE8  0CB5               	rrf	??___ftdiv+1,f
 17631  0BE9  0CB4               	rrf	??___ftdiv,f
 17632  0BEA  0B89               	decfsz	9,f
 17633  0BEB  2BE7               	goto	u4135
 17634  0BEC  0834               	movf	??___ftdiv,w
 17635  0BED  00B7               	movwf	??___ftdiv+3
 17636  0BEE  0837               	movf	??___ftdiv+3,w
 17637  0BEF  06BD               	xorwf	___ftdiv@sign,f
 17638  0BF0  3080               	movlw	128
 17639  0BF1  00B4               	movwf	??___ftdiv
 17640  0BF2  0834               	movf	??___ftdiv,w
 17641  0BF3  05BD               	andwf	___ftdiv@sign,f
 17642  0BF4  17B2               	bsf	___ftdiv@f1+1,7
 17643  0BF5  30FF               	movlw	255
 17644  0BF6  05B1               	andwf	___ftdiv@f1,f
 17645  0BF7  30FF               	movlw	255
 17646  0BF8  05B2               	andwf	___ftdiv@f1+1,f
 17647  0BF9  3000               	movlw	0
 17648  0BFA  05B3               	andwf	___ftdiv@f1+2,f
 17649  0BFB  17AF               	bsf	___ftdiv@f2+1,7
 17650  0BFC  30FF               	movlw	255
 17651  0BFD  05AE               	andwf	___ftdiv@f2,f
 17652  0BFE  30FF               	movlw	255
 17653  0BFF  05AF               	andwf	___ftdiv@f2+1,f
 17654  0C00  3000               	movlw	0
 17655  0C01  05B0               	andwf	___ftdiv@f2+2,f
 17656  0C02  3018               	movlw	24
 17657  0C03  00B4               	movwf	??___ftdiv
 17658  0C04  0834               	movf	??___ftdiv,w
 17659  0C05  00B8               	movwf	___ftdiv@cntr
 17660  0C06                     l5770:	
 17661  0C06  3001               	movlw	1
 17662  0C07                     u4145:	
 17663  0C07  35B9               	lslf	___ftdiv@f3,f
 17664  0C08  0DBA               	rlf	___ftdiv@f3+1,f
 17665  0C09  0DBB               	rlf	___ftdiv@f3+2,f
 17666  0C0A  0B89               	decfsz	9,f
 17667  0C0B  2C07               	goto	u4145
 17668  0C0C  0830               	movf	___ftdiv@f2+2,w
 17669  0C0D  0233               	subwf	___ftdiv@f1+2,w
 17670  0C0E  1D03               	skipz
 17671  0C0F  2C16               	goto	u4155
 17672  0C10  082F               	movf	___ftdiv@f2+1,w
 17673  0C11  0232               	subwf	___ftdiv@f1+1,w
 17674  0C12  1D03               	skipz
 17675  0C13  2C16               	goto	u4155
 17676  0C14  082E               	movf	___ftdiv@f2,w
 17677  0C15  0231               	subwf	___ftdiv@f1,w
 17678  0C16                     u4155:	
 17679  0C16  1C03               	skipc
 17680  0C17  2C1F               	goto	l5778
 17681  0C18  082E               	movf	___ftdiv@f2,w
 17682  0C19  02B1               	subwf	___ftdiv@f1,f
 17683  0C1A  082F               	movf	___ftdiv@f2+1,w
 17684  0C1B  3BB2               	subwfb	___ftdiv@f1+1,f
 17685  0C1C  0830               	movf	___ftdiv@f2+2,w
 17686  0C1D  3BB3               	subwfb	___ftdiv@f1+2,f
 17687  0C1E  1439               	bsf	___ftdiv@f3,0
 17688  0C1F                     l5778:	
 17689  0C1F  3001               	movlw	1
 17690  0C20                     u4165:	
 17691  0C20  35B1               	lslf	___ftdiv@f1,f
 17692  0C21  0DB2               	rlf	___ftdiv@f1+1,f
 17693  0C22  0DB3               	rlf	___ftdiv@f1+2,f
 17694  0C23  0B89               	decfsz	9,f
 17695  0C24  2C20               	goto	u4165
 17696  0C25  3001               	movlw	1
 17697  0C26  02B8               	subwf	___ftdiv@cntr,f
 17698  0C27  1D03               	btfss	3,2
 17699  0C28  2C06               	goto	l5770
 17700  0C29  0839               	movf	___ftdiv@f3,w
 17701  0C2A  00A0               	movwf	___ftpack@arg
 17702  0C2B  083A               	movf	___ftdiv@f3+1,w
 17703  0C2C  00A1               	movwf	___ftpack@arg+1
 17704  0C2D  083B               	movf	___ftdiv@f3+2,w
 17705  0C2E  00A2               	movwf	___ftpack@arg+2
 17706  0C2F  083C               	movf	___ftdiv@exp,w
 17707  0C30  00B4               	movwf	??___ftdiv
 17708  0C31  0834               	movf	??___ftdiv,w
 17709  0C32  00A3               	movwf	___ftpack@exp
 17710  0C33  083D               	movf	___ftdiv@sign,w
 17711  0C34  00B5               	movwf	??___ftdiv+1
 17712  0C35  0835               	movf	??___ftdiv+1,w
 17713  0C36  00A4               	movwf	___ftpack@sign
 17714  0C37  3192  22B2         	fcall	___ftpack
 17715  0C39  0020               	movlb	0	; select bank0
 17716  0C3A  0820               	movf	?___ftpack,w
 17717  0C3B  00AE               	movwf	?___ftdiv
 17718  0C3C  0821               	movf	?___ftpack+1,w
 17719  0C3D  00AF               	movwf	?___ftdiv+1
 17720  0C3E  0822               	movf	?___ftpack+2,w
 17721  0C3F  00B0               	movwf	?___ftdiv+2
 17722  0C40  0008               	return
 17723  0C41                     __end_of___ftdiv:	
 17724                           
 17725                           	psect	text112
 17726  1A10                     __ptext112:	
 17727 ;; *************** function ___awtoft *****************
 17728 ;; Defined at:
 17729 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17730 ;; Parameters:    Size  Location     Type
 17731 ;;  c               2    8[BANK0 ] int 
 17732 ;; Auto vars:     Size  Location     Type
 17733 ;;  sign            1   13[BANK0 ] unsigned char 
 17734 ;; Return value:  Size  Location     Type
 17735 ;;                  3    8[BANK0 ] float 
 17736 ;; Registers used:
 17737 ;;		wreg, status,2, status,0, pclath, cstack
 17738 ;; Tracked objects:
 17739 ;;		On entry : 0/0
 17740 ;;		On exit  : 0/0
 17741 ;;		Unchanged: 0/0
 17742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17743 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17746 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17747 ;;Total ram usage:        6 bytes
 17748 ;; Hardware stack levels used:    1
 17749 ;; Hardware stack levels required when called:    5
 17750 ;; This function calls:
 17751 ;;		___ftpack
 17752 ;; This function is called by:
 17753 ;;		_getPercentValue
 17754 ;;		_setPercentValue
 17755 ;; This function uses a non-reentrant model
 17756 ;;
 17757                           
 17758                           
 17759                           ;psect for function ___awtoft
 17760  1A10                     ___awtoft:	
 17761                           
 17762                           ;incstack = 0
 17763                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17764  1A10  0020               	movlb	0	; select bank0
 17765  1A11  01AD               	clrf	___awtoft@sign
 17766  1A12  1FA9               	btfss	___awtoft@c+1,7
 17767  1A13  2A1B               	goto	l5668
 17768  1A14  09A8               	comf	___awtoft@c,f
 17769  1A15  09A9               	comf	___awtoft@c+1,f
 17770  1A16  0AA8               	incf	___awtoft@c,f
 17771  1A17  1903               	skipnz
 17772  1A18  0AA9               	incf	___awtoft@c+1,f
 17773  1A19  01AD               	clrf	___awtoft@sign
 17774  1A1A  0AAD               	incf	___awtoft@sign,f
 17775  1A1B                     l5668:	
 17776  1A1B  0828               	movf	___awtoft@c,w
 17777  1A1C  00A0               	movwf	___ftpack@arg
 17778  1A1D  0829               	movf	___awtoft@c+1,w
 17779  1A1E  00A1               	movwf	___ftpack@arg+1
 17780  1A1F  01A2               	clrf	___ftpack@arg+2
 17781  1A20  308E               	movlw	142
 17782  1A21  00AB               	movwf	??___awtoft
 17783  1A22  082B               	movf	??___awtoft,w
 17784  1A23  00A3               	movwf	___ftpack@exp
 17785  1A24  082D               	movf	___awtoft@sign,w
 17786  1A25  00AC               	movwf	??___awtoft+1
 17787  1A26  082C               	movf	??___awtoft+1,w
 17788  1A27  00A4               	movwf	___ftpack@sign
 17789  1A28  3192  22B2         	fcall	___ftpack
 17790  1A2A  0020               	movlb	0	; select bank0
 17791  1A2B  0820               	movf	?___ftpack,w
 17792  1A2C  00A8               	movwf	?___awtoft
 17793  1A2D  0821               	movf	?___ftpack+1,w
 17794  1A2E  00A9               	movwf	?___awtoft+1
 17795  1A2F  0822               	movf	?___ftpack+2,w
 17796  1A30  00AA               	movwf	?___awtoft+2
 17797  1A31  0008               	return
 17798  1A32                     __end_of___awtoft:	
 17799                           
 17800                           	psect	text113
 17801  12B2                     __ptext113:	
 17802 ;; *************** function ___ftpack *****************
 17803 ;; Defined at:
 17804 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17805 ;; Parameters:    Size  Location     Type
 17806 ;;  arg             3    0[BANK0 ] unsigned um
 17807 ;;  exp             1    3[BANK0 ] unsigned char 
 17808 ;;  sign            1    4[BANK0 ] unsigned char 
 17809 ;; Auto vars:     Size  Location     Type
 17810 ;;		None
 17811 ;; Return value:  Size  Location     Type
 17812 ;;                  3    0[BANK0 ] float 
 17813 ;; Registers used:
 17814 ;;		wreg, status,2, status,0
 17815 ;; Tracked objects:
 17816 ;;		On entry : 0/0
 17817 ;;		On exit  : 0/0
 17818 ;;		Unchanged: 0/0
 17819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17820 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17822 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;Total ram usage:        8 bytes
 17825 ;; Hardware stack levels used:    1
 17826 ;; Hardware stack levels required when called:    4
 17827 ;; This function calls:
 17828 ;;		Nothing
 17829 ;; This function is called by:
 17830 ;;		___awtoft
 17831 ;;		___ftadd
 17832 ;;		___ftdiv
 17833 ;;		___ftmul
 17834 ;; This function uses a non-reentrant model
 17835 ;;
 17836                           
 17837                           
 17838                           ;psect for function ___ftpack
 17839  12B2                     ___ftpack:	
 17840                           
 17841                           ;incstack = 0
 17842                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17843  12B2  0020               	movlb	0	; select bank0
 17844  12B3  0823               	movf	___ftpack@exp,w
 17845  12B4  1903               	btfsc	3,2
 17846  12B5  2ABB               	goto	l5634
 17847  12B6  0822               	movf	___ftpack@arg+2,w
 17848  12B7  0421               	iorwf	___ftpack@arg+1,w
 17849  12B8  0420               	iorwf	___ftpack@arg,w
 17850  12B9  1D03               	skipz
 17851  12BA  2ACC               	goto	l5640
 17852  12BB                     l5634:	
 17853  12BB  3000               	movlw	0
 17854  12BC  00A0               	movwf	?___ftpack
 17855  12BD  3000               	movlw	0
 17856  12BE  00A1               	movwf	?___ftpack+1
 17857  12BF  3000               	movlw	0
 17858  12C0  00A2               	movwf	?___ftpack+2
 17859  12C1  0008               	return
 17860  12C2                     l5638:	
 17861  12C2  3001               	movlw	1
 17862  12C3  00A5               	movwf	??___ftpack
 17863  12C4  0825               	movf	??___ftpack,w
 17864  12C5  07A3               	addwf	___ftpack@exp,f
 17865  12C6  3001               	movlw	1
 17866  12C7                     u3775:	
 17867  12C7  36A2               	lsrf	___ftpack@arg+2,f
 17868  12C8  0CA1               	rrf	___ftpack@arg+1,f
 17869  12C9  0CA0               	rrf	___ftpack@arg,f
 17870  12CA  0B89               	decfsz	9,f
 17871  12CB  2AC7               	goto	u3775
 17872  12CC                     l5640:	
 17873  12CC  30FE               	movlw	254
 17874  12CD  0522               	andwf	___ftpack@arg+2,w
 17875  12CE  1903               	btfsc	3,2
 17876  12CF  2AE5               	goto	l3052
 17877  12D0  2AC2               	goto	l5638
 17878  12D1                     l5642:	
 17879  12D1  3001               	movlw	1
 17880  12D2  00A5               	movwf	??___ftpack
 17881  12D3  0825               	movf	??___ftpack,w
 17882  12D4  07A3               	addwf	___ftpack@exp,f
 17883  12D5  3001               	movlw	1
 17884  12D6  07A0               	addwf	___ftpack@arg,f
 17885  12D7  3000               	movlw	0
 17886  12D8  1803               	skipnc
 17887  12D9  3001               	movlw	1
 17888  12DA  07A1               	addwf	___ftpack@arg+1,f
 17889  12DB  3000               	movlw	0
 17890  12DC  1803               	skipnc
 17891  12DD  3001               	movlw	1
 17892  12DE  07A2               	addwf	___ftpack@arg+2,f
 17893  12DF  3001               	movlw	1
 17894  12E0                     u3795:	
 17895  12E0  36A2               	lsrf	___ftpack@arg+2,f
 17896  12E1  0CA1               	rrf	___ftpack@arg+1,f
 17897  12E2  0CA0               	rrf	___ftpack@arg,f
 17898  12E3  0B89               	decfsz	9,f
 17899  12E4  2AE0               	goto	u3795
 17900  12E5                     l3052:	
 17901  12E5  30FF               	movlw	255
 17902  12E6  0522               	andwf	___ftpack@arg+2,w
 17903  12E7  1903               	btfsc	3,2
 17904  12E8  2AF2               	goto	l5650
 17905  12E9  2AD1               	goto	l5642
 17906  12EA                     l5648:	
 17907  12EA  3001               	movlw	1
 17908  12EB  02A3               	subwf	___ftpack@exp,f
 17909  12EC  3001               	movlw	1
 17910  12ED                     u3815:	
 17911  12ED  35A0               	lslf	___ftpack@arg,f
 17912  12EE  0DA1               	rlf	___ftpack@arg+1,f
 17913  12EF  0DA2               	rlf	___ftpack@arg+2,f
 17914  12F0  0B89               	decfsz	9,f
 17915  12F1  2AED               	goto	u3815
 17916  12F2                     l5650:	
 17917  12F2  1FA1               	btfss	___ftpack@arg+1,7
 17918  12F3  2AEA               	goto	l5648
 17919  12F4  1823               	btfsc	___ftpack@exp,0
 17920  12F5  2AFC               	goto	l3058
 17921  12F6  30FF               	movlw	255
 17922  12F7  05A0               	andwf	___ftpack@arg,f
 17923  12F8  307F               	movlw	127
 17924  12F9  05A1               	andwf	___ftpack@arg+1,f
 17925  12FA  30FF               	movlw	255
 17926  12FB  05A2               	andwf	___ftpack@arg+2,f
 17927  12FC                     l3058:	
 17928  12FC  1003               	clrc
 17929  12FD  0CA3               	rrf	___ftpack@exp,f
 17930  12FE  0823               	movf	___ftpack@exp,w
 17931  12FF  00A5               	movwf	??___ftpack
 17932  1300  01A6               	clrf	??___ftpack+1
 17933  1301  01A7               	clrf	??___ftpack+2
 17934  1302  3010               	movlw	16
 17935  1303                     u3845:	
 17936  1303  35A5               	lslf	??___ftpack,f
 17937  1304  0DA6               	rlf	??___ftpack+1,f
 17938  1305  0DA7               	rlf	??___ftpack+2,f
 17939  1306  0B89               	decfsz	9,f
 17940  1307  2B03               	goto	u3845
 17941  1308  0825               	movf	??___ftpack,w
 17942  1309  04A0               	iorwf	___ftpack@arg,f
 17943  130A  0826               	movf	??___ftpack+1,w
 17944  130B  04A1               	iorwf	___ftpack@arg+1,f
 17945  130C  0827               	movf	??___ftpack+2,w
 17946  130D  04A2               	iorwf	___ftpack@arg+2,f
 17947  130E  0824               	movf	___ftpack@sign,w
 17948  130F  1903               	btfsc	3,2
 17949  1310  0008               	return
 17950  1311  17A2               	bsf	___ftpack@arg+2,7
 17951  1312  0008               	return
 17952  1313                     __end_of___ftpack:	
 17953                           
 17954                           	psect	text114
 17955  2713                     __ptext114:	
 17956 ;; *************** function _setRFSW_Status *****************
 17957 ;; Defined at:
 17958 ;;		line 379 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17959 ;; Parameters:    Size  Location     Type
 17960 ;;  sw              1    wreg     unsigned char 
 17961 ;;  command         1    2[BANK0 ] unsigned char 
 17962 ;; Auto vars:     Size  Location     Type
 17963 ;;  sw              1    3[BANK0 ] unsigned char 
 17964 ;; Return value:  Size  Location     Type
 17965 ;;		None               void
 17966 ;; Registers used:
 17967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17968 ;; Tracked objects:
 17969 ;;		On entry : 0/0
 17970 ;;		On exit  : 0/0
 17971 ;;		Unchanged: 0/0
 17972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17973 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;Total ram usage:        2 bytes
 17978 ;; Hardware stack levels used:    1
 17979 ;; Hardware stack levels required when called:    5
 17980 ;; This function calls:
 17981 ;;		_RfSWPointSelect
 17982 ;; This function is called by:
 17983 ;;		_DlyOff_Main
 17984 ;;		_setDimmerLights_ERROR
 17985 ;;		_setControl_Lights_Table
 17986 ;;		_Sw_DimmerOnFunc
 17987 ;;		_Sw_DimmerAdjFunc
 17988 ;; This function uses a non-reentrant model
 17989 ;;
 17990                           
 17991                           
 17992                           ;psect for function _setRFSW_Status
 17993  2713                     _setRFSW_Status:	
 17994                           
 17995                           ;incstack = 0
 17996                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17997                           ;setRFSW_Status@sw stored from wreg
 17998  2713  0020               	movlb	0	; select bank0
 17999  2714  00A3               	movwf	setRFSW_Status@sw
 18000                           
 18001                           ;RF_Control_B1.c: 380: RfSWPointSelect(sw);
 18002  2715  0823               	movf	setRFSW_Status@sw,w
 18003  2716  31A6  2688         	fcall	_RfSWPointSelect
 18004                           
 18005                           ;RF_Control_B1.c: 381: RFSW->Status = command;
 18006  2718  0021               	movlb	1	; select bank1
 18007  2719  083F               	movf	_RFSW^(0+128),w
 18008  271A  0086               	movwf	6
 18009  271B  0187               	clrf	7
 18010  271C  0020               	movlb	0	; select bank0
 18011  271D  0822               	movf	setRFSW_Status@command,w
 18012  271E  1001               	bcf	1,0
 18013  271F  1D03               	skipz
 18014  2720  1401               	bsf	1,0
 18015  2721  0008               	return
 18016  2722                     __end_of_setRFSW_Status:	
 18017                           
 18018                           	psect	text115
 18019  2688                     __ptext115:	
 18020 ;; *************** function _RfSWPointSelect *****************
 18021 ;; Defined at:
 18022 ;;		line 314 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 18023 ;; Parameters:    Size  Location     Type
 18024 ;;  sw              1    wreg     unsigned char 
 18025 ;; Auto vars:     Size  Location     Type
 18026 ;;  sw              1    1[BANK0 ] unsigned char 
 18027 ;; Return value:  Size  Location     Type
 18028 ;;		None               void
 18029 ;; Registers used:
 18030 ;;		wreg
 18031 ;; Tracked objects:
 18032 ;;		On entry : 0/0
 18033 ;;		On exit  : 0/0
 18034 ;;		Unchanged: 0/0
 18035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;Total ram usage:        2 bytes
 18041 ;; Hardware stack levels used:    1
 18042 ;; Hardware stack levels required when called:    4
 18043 ;; This function calls:
 18044 ;;		Nothing
 18045 ;; This function is called by:
 18046 ;;		_setRFSW_Control
 18047 ;;		_setRFSW_AdjControl
 18048 ;;		_setRFSW_Status
 18049 ;; This function uses a non-reentrant model
 18050 ;;
 18051                           
 18052                           
 18053                           ;psect for function _RfSWPointSelect
 18054  2688                     _RfSWPointSelect:	
 18055                           
 18056                           ;incstack = 0
 18057                           ; Regs used in _RfSWPointSelect: [wreg]
 18058                           ;RfSWPointSelect@sw stored from wreg
 18059  2688  0020               	movlb	0	; select bank0
 18060  2689  00A1               	movwf	RfSWPointSelect@sw
 18061                           
 18062                           ;RF_Control_B1.c: 316: if (sw == 1) {
 18063  268A  0821               	movf	RfSWPointSelect@sw,w
 18064  268B  3A01               	xorlw	1
 18065  268C  1D03               	skipz
 18066  268D  0008               	return
 18067                           
 18068                           ;RF_Control_B1.c: 317: RFSW = &RFSW1;
 18069  268E  30E9               	movlw	_RFSW1& (0+255)
 18070  268F  00A0               	movwf	??_RfSWPointSelect
 18071  2690  0820               	movf	??_RfSWPointSelect,w
 18072  2691  0021               	movlb	1	; select bank1
 18073  2692  00BF               	movwf	_RFSW^(0+128)
 18074  2693  0008               	return
 18075  2694                     __end_of_RfSWPointSelect:	
 18076                           
 18077                           	psect	text116
 18078  277E                     __ptext116:	
 18079 ;; *************** function _setDimmerLights_Trigger *****************
 18080 ;; Defined at:
 18081 ;;		line 445 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18082 ;; Parameters:    Size  Location     Type
 18083 ;;  lights          1    wreg     unsigned char 
 18084 ;;  command         1    2[BANK0 ] unsigned char 
 18085 ;; Auto vars:     Size  Location     Type
 18086 ;;  lights          1    3[BANK0 ] unsigned char 
 18087 ;; Return value:  Size  Location     Type
 18088 ;;		None               void
 18089 ;; Registers used:
 18090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18091 ;; Tracked objects:
 18092 ;;		On entry : 0/0
 18093 ;;		On exit  : 0/0
 18094 ;;		Unchanged: 0/0
 18095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18096 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;Total ram usage:        2 bytes
 18101 ;; Hardware stack levels used:    1
 18102 ;; Hardware stack levels required when called:    5
 18103 ;; This function calls:
 18104 ;;		_DimmerLightsPointSelect
 18105 ;; This function is called by:
 18106 ;;		_DlyOff_Main
 18107 ;;		_setRFSW_Control
 18108 ;;		_Sw_DimmerOnFunc
 18109 ;;		_Sw_DimmerOffFunc
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           
 18114                           ;psect for function _setDimmerLights_Trigger
 18115  277E                     _setDimmerLights_Trigger:	
 18116                           
 18117                           ;incstack = 0
 18118                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18119                           ;setDimmerLights_Trigger@lights stored from wreg
 18120  277E  0020               	movlb	0	; select bank0
 18121  277F  00A3               	movwf	setDimmerLights_Trigger@lights
 18122                           
 18123                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18124  2780  0823               	movf	setDimmerLights_Trigger@lights,w
 18125  2781  31A6  2616         	fcall	_DimmerLightsPointSelect
 18126                           
 18127                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18128  2783  0877               	movf	_DimmerLights,w
 18129  2784  3E09               	addlw	9
 18130  2785  0086               	movwf	6
 18131  2786  3001               	movlw	1	; select bank2/3
 18132  2787  0087               	movwf	7
 18133  2788  0020               	movlb	0	; select bank0
 18134  2789  0822               	movf	setDimmerLights_Trigger@command,w
 18135  278A  1081               	bcf	1,1
 18136  278B  1D03               	skipz
 18137  278C  1481               	bsf	1,1
 18138  278D  0008               	return
 18139  278E                     __end_of_setDimmerLights_Trigger:	
 18140                           
 18141                           	psect	text117
 18142  276E                     __ptext117:	
 18143 ;; *************** function _setDimmerLights_Switch *****************
 18144 ;; Defined at:
 18145 ;;		line 435 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;  lights          1    wreg     unsigned char 
 18148 ;;  command         1    2[BANK0 ] unsigned char 
 18149 ;; Auto vars:     Size  Location     Type
 18150 ;;  lights          1    3[BANK0 ] unsigned char 
 18151 ;; Return value:  Size  Location     Type
 18152 ;;		None               void
 18153 ;; Registers used:
 18154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;Total ram usage:        2 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; Hardware stack levels required when called:    5
 18167 ;; This function calls:
 18168 ;;		_DimmerLightsPointSelect
 18169 ;; This function is called by:
 18170 ;;		_DlyOff_Main
 18171 ;;		_setRFSW_Control
 18172 ;;		_Sw_DimmerOnFunc
 18173 ;;		_Sw_DimmerOffFunc
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           
 18178                           ;psect for function _setDimmerLights_Switch
 18179  276E                     _setDimmerLights_Switch:	
 18180                           
 18181                           ;incstack = 0
 18182                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18183                           ;setDimmerLights_Switch@lights stored from wreg
 18184  276E  0020               	movlb	0	; select bank0
 18185  276F  00A3               	movwf	setDimmerLights_Switch@lights
 18186                           
 18187                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18188  2770  0823               	movf	setDimmerLights_Switch@lights,w
 18189  2771  31A6  2616         	fcall	_DimmerLightsPointSelect
 18190                           
 18191                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18192  2773  0877               	movf	_DimmerLights,w
 18193  2774  3E09               	addlw	9
 18194  2775  0086               	movwf	6
 18195  2776  3001               	movlw	1	; select bank2/3
 18196  2777  0087               	movwf	7
 18197  2778  0020               	movlb	0	; select bank0
 18198  2779  0822               	movf	setDimmerLights_Switch@command,w
 18199  277A  1001               	bcf	1,0
 18200  277B  1D03               	skipz
 18201  277C  1401               	bsf	1,0
 18202  277D  0008               	return
 18203  277E                     __end_of_setDimmerLights_Switch:	
 18204                           
 18205                           	psect	text118
 18206  2616                     __ptext118:	
 18207 ;; *************** function _DimmerLightsPointSelect *****************
 18208 ;; Defined at:
 18209 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18210 ;; Parameters:    Size  Location     Type
 18211 ;;  lights          1    wreg     unsigned char 
 18212 ;; Auto vars:     Size  Location     Type
 18213 ;;  lights          1    1[BANK0 ] unsigned char 
 18214 ;; Return value:  Size  Location     Type
 18215 ;;		None               void
 18216 ;; Registers used:
 18217 ;;		wreg
 18218 ;; Tracked objects:
 18219 ;;		On entry : 0/0
 18220 ;;		On exit  : 0/0
 18221 ;;		Unchanged: 0/0
 18222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;Total ram usage:        2 bytes
 18228 ;; Hardware stack levels used:    1
 18229 ;; Hardware stack levels required when called:    4
 18230 ;; This function calls:
 18231 ;;		Nothing
 18232 ;; This function is called by:
 18233 ;;		_setDimmerLights_Initialization
 18234 ;;		_setDimmerLights_Main
 18235 ;;		_setDimmerLights_ERROR
 18236 ;;		_setDimmerLights_TriggerERROR
 18237 ;;		_setDimmerLights
 18238 ;;		_setDimmerLights_Adj
 18239 ;;		_setDimmerLights_AdjRF
 18240 ;;		_setDimmerLights_Switch
 18241 ;;		_setDimmerLights_AdjGo
 18242 ;;		_setDimmerLights_Trigger
 18243 ;;		_setDimmerLights_TriggerAdj
 18244 ;;		_setDimmerLights_Clear
 18245 ;;		_setDimmerLights_GO
 18246 ;;		_setDimmerLights_MaxmumValue
 18247 ;; This function uses a non-reentrant model
 18248 ;;
 18249                           
 18250                           
 18251                           ;psect for function _DimmerLightsPointSelect
 18252  2616                     _DimmerLightsPointSelect:	
 18253                           
 18254                           ;incstack = 0
 18255                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18256                           ;DimmerLightsPointSelect@lights stored from wreg
 18257  2616  0020               	movlb	0	; select bank0
 18258  2617  00A1               	movwf	DimmerLightsPointSelect@lights
 18259                           
 18260                           ;Dimmer_B1.c: 10: if(lights == 1)
 18261  2618  0821               	movf	DimmerLightsPointSelect@lights,w
 18262  2619  3A01               	xorlw	1
 18263  261A  1D03               	skipz
 18264  261B  0008               	return
 18265                           
 18266                           ;Dimmer_B1.c: 11: {
 18267                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18268  261C  3031               	movlw	_DimmerLights1& (0+255)
 18269  261D  00A0               	movwf	??_DimmerLightsPointSelect
 18270  261E  0820               	movf	??_DimmerLightsPointSelect,w
 18271  261F  00F7               	movwf	_DimmerLights
 18272  2620  0008               	return
 18273  2621                     __end_of_DimmerLightsPointSelect:	
 18274                           
 18275                           	psect	text119
 18276  0819                     __ptext119:	
 18277 ;; *************** function _setBuz *****************
 18278 ;; Defined at:
 18279 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 18280 ;; Parameters:    Size  Location     Type
 18281 ;;  count           1    wreg     unsigned char 
 18282 ;;  time            2    6[BANK0 ] int 
 18283 ;; Auto vars:     Size  Location     Type
 18284 ;;  count           1    9[BANK0 ] unsigned char 
 18285 ;; Return value:  Size  Location     Type
 18286 ;;		None               void
 18287 ;; Registers used:
 18288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18289 ;; Tracked objects:
 18290 ;;		On entry : 0/0
 18291 ;;		On exit  : 0/0
 18292 ;;		Unchanged: 0/0
 18293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18298 ;;Total ram usage:        4 bytes
 18299 ;; Hardware stack levels used:    1
 18300 ;; Hardware stack levels required when called:    5
 18301 ;; This function calls:
 18302 ;;		___wmul
 18303 ;; This function is called by:
 18304 ;;		_DlyOff_Main
 18305 ;;		_setDimmerLights_Main
 18306 ;;		_DimmerLights_Exceptions
 18307 ;;		_setOverTemp_Exceptions
 18308 ;;		_setLog_Code
 18309 ;;		_setControl_Lights_Table
 18310 ;;		_setRFSW_Control
 18311 ;;		_setSw_Main
 18312 ;;		_Sw_DimmerOnFunc
 18313 ;;		_MainT
 18314 ;; This function uses a non-reentrant model
 18315 ;;
 18316                           
 18317                           
 18318                           ;psect for function _setBuz
 18319  0819                     _setBuz:	
 18320                           
 18321                           ;incstack = 0
 18322                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18323                           ;setBuz@count stored from wreg
 18324  0819  0020               	movlb	0	; select bank0
 18325  081A  00A9               	movwf	setBuz@count
 18326                           
 18327                           ;Buzzer_B1.c: 24: time *= 20;
 18328  081B  3014               	movlw	20
 18329  081C  00A0               	movwf	___wmul@multiplier
 18330  081D  3000               	movlw	0
 18331  081E  00A1               	movwf	___wmul@multiplier+1
 18332  081F  0827               	movf	setBuz@time+1,w
 18333  0820  01A3               	clrf	___wmul@multiplicand+1
 18334  0821  07A3               	addwf	___wmul@multiplicand+1,f
 18335  0822  0826               	movf	setBuz@time,w
 18336  0823  01A2               	clrf	___wmul@multiplicand
 18337  0824  07A2               	addwf	___wmul@multiplicand,f
 18338  0825  3199  21B3  3188   	fcall	___wmul
 18339  0828  0020               	movlb	0	; select bank0
 18340  0829  0821               	movf	?___wmul+1,w
 18341  082A  01A7               	clrf	setBuz@time+1
 18342  082B  07A7               	addwf	setBuz@time+1,f
 18343  082C  0820               	movf	?___wmul,w
 18344  082D  01A6               	clrf	setBuz@time
 18345  082E  07A6               	addwf	setBuz@time,f
 18346                           
 18347                           ;Buzzer_B1.c: 25: if (Buz->Enable) {
 18348  082F  0021               	movlb	1	; select bank1
 18349  0830  0837               	movf	_Buz^(0+128),w
 18350  0831  0086               	movwf	6
 18351  0832  3001               	movlw	1	; select bank2/3
 18352  0833  0087               	movwf	7
 18353  0834  1C01               	btfss	1,0
 18354  0835  0008               	return
 18355                           
 18356                           ;Buzzer_B1.c: 26: if (!Buz->GO) {
 18357  0836  0837               	movf	_Buz^(0+128),w
 18358  0837  0086               	movwf	6
 18359  0838  3001               	movlw	1	; select bank2/3
 18360  0839  0087               	movwf	7
 18361  083A  1881               	btfsc	1,1
 18362  083B  285A               	goto	l8004
 18363                           
 18364                           ;Buzzer_B1.c: 27: Buz->GO = 1;
 18365  083C  0837               	movf	_Buz^(0+128),w
 18366  083D  0086               	movwf	6
 18367  083E  3001               	movlw	1	; select bank2/3
 18368  083F  0087               	movwf	7
 18369  0840  1481               	bsf	1,1
 18370                           
 18371                           ;Buzzer_B1.c: 28: Buz->Count = count;
 18372  0841  0020               	movlb	0	; select bank0
 18373  0842  0829               	movf	setBuz@count,w
 18374  0843  00A8               	movwf	??_setBuz
 18375  0844  0021               	movlb	1	; select bank1
 18376  0845  0837               	movf	_Buz^(0+128),w
 18377  0846  3E03               	addlw	3
 18378  0847  0086               	movwf	6
 18379  0848  3001               	movlw	1	; select bank2/3
 18380  0849  0087               	movwf	7
 18381  084A  0020               	movlb	0	; select bank0
 18382  084B  0828               	movf	??_setBuz,w
 18383  084C  0081               	movwf	1
 18384                           
 18385                           ;Buzzer_B1.c: 29: Buz->TimeValue = time;
 18386  084D  0021               	movlb	1	; select bank1
 18387  084E  0837               	movf	_Buz^(0+128),w
 18388  084F  3E06               	addlw	6
 18389  0850  0086               	movwf	6
 18390  0851  3001               	movlw	1	; select bank2/3
 18391  0852  0087               	movwf	7
 18392  0853  0020               	movlb	0	; select bank0
 18393  0854  0826               	movf	setBuz@time,w
 18394  0855  3FC0               	movwi [0]fsr1
 18395  0856  0827               	movf	setBuz@time+1,w
 18396  0857  3FC1               	movwi [1]fsr1
 18397                           
 18398                           ;Buzzer_B1.c: 31: RB3 = 1;
 18399  0858  158D               	bsf	13,3	;volatile
 18400                           
 18401                           ;Buzzer_B1.c: 32: } else {
 18402  0859  0008               	return
 18403  085A                     l8004:	
 18404                           
 18405                           ;Buzzer_B1.c: 33: if (!Buz->BufferStatus1) {
 18406  085A  0021               	movlb	1	; select bank1
 18407  085B  0837               	movf	_Buz^(0+128),w
 18408  085C  0086               	movwf	6
 18409  085D  3001               	movlw	1	; select bank2/3
 18410  085E  0087               	movwf	7
 18411  085F  1981               	btfsc	1,3
 18412  0860  287E               	goto	l8008
 18413                           
 18414                           ;Buzzer_B1.c: 34: Buz->BufferStatus1 = 1;
 18415  0861  0837               	movf	_Buz^(0+128),w
 18416  0862  0086               	movwf	6
 18417  0863  3001               	movlw	1	; select bank2/3
 18418  0864  0087               	movwf	7
 18419  0865  1581               	bsf	1,3
 18420                           
 18421                           ;Buzzer_B1.c: 35: Buz->CountBuffer1 = count;
 18422  0866  0020               	movlb	0	; select bank0
 18423  0867  0829               	movf	setBuz@count,w
 18424  0868  00A8               	movwf	??_setBuz
 18425  0869  0021               	movlb	1	; select bank1
 18426  086A  0837               	movf	_Buz^(0+128),w
 18427  086B  3E04               	addlw	4
 18428  086C  0086               	movwf	6
 18429  086D  3001               	movlw	1	; select bank2/3
 18430  086E  0087               	movwf	7
 18431  086F  0020               	movlb	0	; select bank0
 18432  0870  0828               	movf	??_setBuz,w
 18433  0871  0081               	movwf	1
 18434                           
 18435                           ;Buzzer_B1.c: 36: Buz->TimeValueBuffer1 = time;
 18436  0872  0021               	movlb	1	; select bank1
 18437  0873  0837               	movf	_Buz^(0+128),w
 18438  0874  3E08               	addlw	8
 18439  0875  0086               	movwf	6
 18440  0876  3001               	movlw	1	; select bank2/3
 18441  0877  0087               	movwf	7
 18442  0878  0020               	movlb	0	; select bank0
 18443  0879  0826               	movf	setBuz@time,w
 18444  087A  3FC0               	movwi [0]fsr1
 18445  087B  0827               	movf	setBuz@time+1,w
 18446  087C  3FC1               	movwi [1]fsr1
 18447                           
 18448                           ;Buzzer_B1.c: 37: } else if (!Buz->BufferStatus2) {
 18449  087D  0008               	return
 18450  087E                     l8008:	
 18451  087E  0021               	movlb	1	; select bank1
 18452  087F  0837               	movf	_Buz^(0+128),w
 18453  0880  0086               	movwf	6
 18454  0881  3001               	movlw	1	; select bank2/3
 18455  0882  0087               	movwf	7
 18456  0883  1A01               	btfsc	1,4
 18457  0884  0008               	return
 18458                           
 18459                           ;Buzzer_B1.c: 38: Buz->BufferStatus2 = 1;
 18460  0885  0837               	movf	_Buz^(0+128),w
 18461  0886  0086               	movwf	6
 18462  0887  3001               	movlw	1	; select bank2/3
 18463  0888  0087               	movwf	7
 18464  0889  1601               	bsf	1,4
 18465                           
 18466                           ;Buzzer_B1.c: 39: Buz->CountBuffer2 = count;
 18467  088A  0020               	movlb	0	; select bank0
 18468  088B  0829               	movf	setBuz@count,w
 18469  088C  00A8               	movwf	??_setBuz
 18470  088D  0021               	movlb	1	; select bank1
 18471  088E  0837               	movf	_Buz^(0+128),w
 18472  088F  3E05               	addlw	5
 18473  0890  0086               	movwf	6
 18474  0891  3001               	movlw	1	; select bank2/3
 18475  0892  0087               	movwf	7
 18476  0893  0020               	movlb	0	; select bank0
 18477  0894  0828               	movf	??_setBuz,w
 18478  0895  0081               	movwf	1
 18479                           
 18480                           ;Buzzer_B1.c: 40: Buz->TimeValueBuffer2 = time;
 18481  0896  0021               	movlb	1	; select bank1
 18482  0897  0837               	movf	_Buz^(0+128),w
 18483  0898  3E0A               	addlw	10
 18484  0899  0086               	movwf	6
 18485  089A  3001               	movlw	1	; select bank2/3
 18486  089B  0087               	movwf	7
 18487  089C  0020               	movlb	0	; select bank0
 18488  089D  0826               	movf	setBuz@time,w
 18489  089E  3FC0               	movwi [0]fsr1
 18490  089F  0827               	movf	setBuz@time+1,w
 18491  08A0  3FC1               	movwi [1]fsr1
 18492  08A1  0008               	return
 18493  08A2                     __end_of_setBuz:	
 18494                           
 18495                           	psect	text120
 18496  19B3                     __ptext120:	
 18497 ;; *************** function ___wmul *****************
 18498 ;; Defined at:
 18499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18500 ;; Parameters:    Size  Location     Type
 18501 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18502 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18503 ;; Auto vars:     Size  Location     Type
 18504 ;;  product         2    4[BANK0 ] unsigned int 
 18505 ;; Return value:  Size  Location     Type
 18506 ;;                  2    0[BANK0 ] unsigned int 
 18507 ;; Registers used:
 18508 ;;		wreg, status,2, status,0
 18509 ;; Tracked objects:
 18510 ;;		On entry : 0/0
 18511 ;;		On exit  : 0/0
 18512 ;;		Unchanged: 0/0
 18513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18517 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18518 ;;Total ram usage:        6 bytes
 18519 ;; Hardware stack levels used:    1
 18520 ;; Hardware stack levels required when called:    4
 18521 ;; This function calls:
 18522 ;;		Nothing
 18523 ;; This function is called by:
 18524 ;;		_setBuz
 18525 ;;		_Load_Main
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function ___wmul
 18531  19B3                     ___wmul:	
 18532                           
 18533                           ;incstack = 0
 18534                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18535  19B3  0020               	movlb	0	; select bank0
 18536  19B4  01A4               	clrf	___wmul@product
 18537  19B5  01A5               	clrf	___wmul@product+1
 18538  19B6                     l7984:	
 18539  19B6  1C20               	btfss	___wmul@multiplier,0
 18540  19B7  29BC               	goto	l2891
 18541  19B8  0822               	movf	___wmul@multiplicand,w
 18542  19B9  07A4               	addwf	___wmul@product,f
 18543  19BA  0823               	movf	___wmul@multiplicand+1,w
 18544  19BB  3DA5               	addwfc	___wmul@product+1,f
 18545  19BC                     l2891:	
 18546  19BC  3001               	movlw	1
 18547  19BD                     u7505:	
 18548  19BD  35A2               	lslf	___wmul@multiplicand,f
 18549  19BE  0DA3               	rlf	___wmul@multiplicand+1,f
 18550  19BF  0B89               	decfsz	9,f
 18551  19C0  29BD               	goto	u7505
 18552  19C1  3001               	movlw	1
 18553  19C2                     u7515:	
 18554  19C2  36A1               	lsrf	___wmul@multiplier+1,f
 18555  19C3  0CA0               	rrf	___wmul@multiplier,f
 18556  19C4  0B89               	decfsz	9,f
 18557  19C5  29C2               	goto	u7515
 18558  19C6  0821               	movf	___wmul@multiplier+1,w
 18559  19C7  0420               	iorwf	___wmul@multiplier,w
 18560  19C8  1D03               	skipz
 18561  19C9  29B6               	goto	l7984
 18562  19CA  0825               	movf	___wmul@product+1,w
 18563  19CB  01A1               	clrf	?___wmul+1
 18564  19CC  07A1               	addwf	?___wmul+1,f
 18565  19CD  0824               	movf	___wmul@product,w
 18566  19CE  01A0               	clrf	?___wmul
 18567  19CF  07A0               	addwf	?___wmul,f
 18568  19D0  0008               	return
 18569  19D1                     __end_of___wmul:	
 18570                           
 18571                           	psect	text121
 18572  258E                     __ptext121:	
 18573 ;; *************** function _DelayOff_Initialization *****************
 18574 ;; Defined at:
 18575 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18576 ;; Parameters:    Size  Location     Type
 18577 ;;		None
 18578 ;; Auto vars:     Size  Location     Type
 18579 ;;		None
 18580 ;; Return value:  Size  Location     Type
 18581 ;;		None               void
 18582 ;; Registers used:
 18583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18584 ;; Tracked objects:
 18585 ;;		On entry : 0/0
 18586 ;;		On exit  : 0/0
 18587 ;;		Unchanged: 0/0
 18588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;Total ram usage:        0 bytes
 18594 ;; Hardware stack levels used:    1
 18595 ;; Hardware stack levels required when called:    6
 18596 ;; This function calls:
 18597 ;;		_DlyOff_Initialization
 18598 ;; This function is called by:
 18599 ;;		_main
 18600 ;; This function uses a non-reentrant model
 18601 ;;
 18602                           
 18603                           
 18604                           ;psect for function _DelayOff_Initialization
 18605  258E                     _DelayOff_Initialization:	
 18606                           
 18607                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18608                           
 18609                           ;incstack = 0
 18610                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18611  258E  3001               	movlw	1
 18612  258F  31A6  260B         	fcall	_DlyOff_Initialization
 18613  2591  0008               	return
 18614  2592                     __end_of_DelayOff_Initialization:	
 18615                           
 18616                           	psect	text122
 18617  260B                     __ptext122:	
 18618 ;; *************** function _DlyOff_Initialization *****************
 18619 ;; Defined at:
 18620 ;;		line 60 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;  sw              1    wreg     unsigned char 
 18623 ;; Auto vars:     Size  Location     Type
 18624 ;;  sw              1    2[BANK0 ] unsigned char 
 18625 ;; Return value:  Size  Location     Type
 18626 ;;		None               void
 18627 ;; Registers used:
 18628 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18629 ;; Tracked objects:
 18630 ;;		On entry : 0/0
 18631 ;;		On exit  : 0/0
 18632 ;;		Unchanged: 0/0
 18633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18638 ;;Total ram usage:        1 bytes
 18639 ;; Hardware stack levels used:    1
 18640 ;; Hardware stack levels required when called:    5
 18641 ;; This function calls:
 18642 ;;		_DelayOffPointSelect
 18643 ;; This function is called by:
 18644 ;;		_DelayOff_Initialization
 18645 ;; This function uses a non-reentrant model
 18646 ;;
 18647                           
 18648                           
 18649                           ;psect for function _DlyOff_Initialization
 18650  260B                     _DlyOff_Initialization:	
 18651                           
 18652                           ;incstack = 0
 18653                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18654                           ;DlyOff_Initialization@sw stored from wreg
 18655  260B  0020               	movlb	0	; select bank0
 18656  260C  00A2               	movwf	DlyOff_Initialization@sw
 18657                           
 18658                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18659  260D  0822               	movf	DlyOff_Initialization@sw,w
 18660  260E  31A6  267C         	fcall	_DelayOffPointSelect
 18661                           
 18662                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18663  2610  0021               	movlb	1	; select bank1
 18664  2611  0839               	movf	_DelayOff^(0+128),w
 18665  2612  0086               	movwf	6
 18666  2613  0187               	clrf	7
 18667  2614  1401               	bsf	1,0
 18668  2615  0008               	return
 18669  2616                     __end_of_DlyOff_Initialization:	
 18670                           
 18671                           	psect	text123
 18672  267C                     __ptext123:	
 18673 ;; *************** function _DelayOffPointSelect *****************
 18674 ;; Defined at:
 18675 ;;		line 8 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18676 ;; Parameters:    Size  Location     Type
 18677 ;;  sw              1    wreg     unsigned char 
 18678 ;; Auto vars:     Size  Location     Type
 18679 ;;  sw              1    1[BANK0 ] unsigned char 
 18680 ;; Return value:  Size  Location     Type
 18681 ;;		None               void
 18682 ;; Registers used:
 18683 ;;		wreg
 18684 ;; Tracked objects:
 18685 ;;		On entry : 0/0
 18686 ;;		On exit  : 0/0
 18687 ;;		Unchanged: 0/0
 18688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18692 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18693 ;;Total ram usage:        2 bytes
 18694 ;; Hardware stack levels used:    1
 18695 ;; Hardware stack levels required when called:    4
 18696 ;; This function calls:
 18697 ;;		Nothing
 18698 ;; This function is called by:
 18699 ;;		_DlyOff_Initialization
 18700 ;;		_DlyOff_Main
 18701 ;;		_setDelayOff_GO
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           
 18706                           ;psect for function _DelayOffPointSelect
 18707  267C                     _DelayOffPointSelect:	
 18708                           
 18709                           ;incstack = 0
 18710                           ; Regs used in _DelayOffPointSelect: [wreg]
 18711                           ;DelayOffPointSelect@sw stored from wreg
 18712  267C  0020               	movlb	0	; select bank0
 18713  267D  00A1               	movwf	DelayOffPointSelect@sw
 18714                           
 18715                           ;DelayOff_B1.c: 11: if(sw == 1)
 18716  267E  0821               	movf	DelayOffPointSelect@sw,w
 18717  267F  3A01               	xorlw	1
 18718  2680  1D03               	skipz
 18719  2681  0008               	return
 18720                           
 18721                           ;DelayOff_B1.c: 12: {
 18722                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18723  2682  30D0               	movlw	_DlySw1& (0+255)
 18724  2683  00A0               	movwf	??_DelayOffPointSelect
 18725  2684  0820               	movf	??_DelayOffPointSelect,w
 18726  2685  0021               	movlb	1	; select bank1
 18727  2686  00B9               	movwf	_DelayOff^(0+128)
 18728  2687  0008               	return
 18729  2688                     __end_of_DelayOffPointSelect:	
 18730                           
 18731                           	psect	text124
 18732  1886                     __ptext124:	
 18733 ;; *************** function _CC2500_PowerOnInitial *****************
 18734 ;; Defined at:
 18735 ;;		line 97 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;		None
 18738 ;; Auto vars:     Size  Location     Type
 18739 ;;		None
 18740 ;; Return value:  Size  Location     Type
 18741 ;;		None               void
 18742 ;; Registers used:
 18743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18744 ;; Tracked objects:
 18745 ;;		On entry : 0/0
 18746 ;;		On exit  : 0/0
 18747 ;;		Unchanged: 0/0
 18748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;Total ram usage:        0 bytes
 18754 ;; Hardware stack levels used:    1
 18755 ;; Hardware stack levels required when called:    7
 18756 ;; This function calls:
 18757 ;;		_CC2500_ClearRXFIFO
 18758 ;;		_CC2500_ClearTXFIFO
 18759 ;;		_CC2500_FrequencyCabr
 18760 ;;		_CC2500_InitPATable
 18761 ;;		_CC2500_InitSetREG
 18762 ;;		_CC2500_PowerRST
 18763 ;;		_CC2500_SIDLEMode
 18764 ;; This function is called by:
 18765 ;;		_main
 18766 ;; This function uses a non-reentrant model
 18767 ;;
 18768                           
 18769                           
 18770                           ;psect for function _CC2500_PowerOnInitial
 18771  1886                     _CC2500_PowerOnInitial:	
 18772                           
 18773                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 18774                           
 18775                           ;incstack = 0
 18776                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18777  1886  319C  2417  3198   	fcall	_CC2500_PowerRST
 18778                           
 18779                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 18780  1889  319B  230B  3198   	fcall	_CC2500_InitSetREG
 18781                           
 18782                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 18783  188C  3199  21D1  3198   	fcall	_CC2500_InitPATable
 18784                           
 18785                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 18786  188F  31A5  2586  3198   	fcall	_CC2500_ClearTXFIFO
 18787                           
 18788                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 18789  1892  31A5  2582  3198   	fcall	_CC2500_ClearRXFIFO
 18790                           
 18791                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 18792  1895  31A6  2670  3198   	fcall	_CC2500_FrequencyCabr
 18793                           
 18794                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 18795  1898  31A5  258A         	fcall	_CC2500_SIDLEMode
 18796  189A  0008               	return
 18797  189B                     __end_of_CC2500_PowerOnInitial:	
 18798                           
 18799                           	psect	text125
 18800  258A                     __ptext125:	
 18801 ;; *************** function _CC2500_SIDLEMode *****************
 18802 ;; Defined at:
 18803 ;;		line 181 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18804 ;; Parameters:    Size  Location     Type
 18805 ;;		None
 18806 ;; Auto vars:     Size  Location     Type
 18807 ;;		None
 18808 ;; Return value:  Size  Location     Type
 18809 ;;		None               void
 18810 ;; Registers used:
 18811 ;;		wreg, status,2, status,0, pclath, cstack
 18812 ;; Tracked objects:
 18813 ;;		On entry : 0/0
 18814 ;;		On exit  : 0/0
 18815 ;;		Unchanged: 0/0
 18816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;Total ram usage:        0 bytes
 18822 ;; Hardware stack levels used:    1
 18823 ;; Hardware stack levels required when called:    6
 18824 ;; This function calls:
 18825 ;;		_CC2500_WriteCommand
 18826 ;; This function is called by:
 18827 ;;		_CC2500_PowerOnInitial
 18828 ;; This function uses a non-reentrant model
 18829 ;;
 18830                           
 18831                           
 18832                           ;psect for function _CC2500_SIDLEMode
 18833  258A                     _CC2500_SIDLEMode:	
 18834                           
 18835                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 18836                           
 18837                           ;incstack = 0
 18838                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 18839  258A  3036               	movlw	54
 18840  258B  31A7  275E         	fcall	_CC2500_WriteCommand
 18841  258D  0008               	return
 18842  258E                     __end_of_CC2500_SIDLEMode:	
 18843                           
 18844                           	psect	text126
 18845  1C17                     __ptext126:	
 18846 ;; *************** function _CC2500_PowerRST *****************
 18847 ;; Defined at:
 18848 ;;		line 110 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18849 ;; Parameters:    Size  Location     Type
 18850 ;;		None
 18851 ;; Auto vars:     Size  Location     Type
 18852 ;;		None
 18853 ;; Return value:  Size  Location     Type
 18854 ;;		None               void
 18855 ;; Registers used:
 18856 ;;		wreg, status,2, status,0, pclath, cstack
 18857 ;; Tracked objects:
 18858 ;;		On entry : 0/0
 18859 ;;		On exit  : 0/0
 18860 ;;		Unchanged: 0/0
 18861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18866 ;;Total ram usage:        1 bytes
 18867 ;; Hardware stack levels used:    1
 18868 ;; Hardware stack levels required when called:    5
 18869 ;; This function calls:
 18870 ;;		_CC2500_WriteByte
 18871 ;;		_DelayTime_1us
 18872 ;; This function is called by:
 18873 ;;		_CC2500_PowerOnInitial
 18874 ;; This function uses a non-reentrant model
 18875 ;;
 18876                           
 18877                           
 18878                           ;psect for function _CC2500_PowerRST
 18879  1C17                     _CC2500_PowerRST:	
 18880                           
 18881                           ;CC2500_B1.c: 111: RC1 = 0;
 18882                           
 18883                           ;incstack = 0
 18884                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 18885  1C17  0020               	movlb	0	; select bank0
 18886  1C18  108E               	bcf	14,1	;volatile
 18887                           
 18888                           ;CC2500_B1.c: 112: RC0 = 0;
 18889  1C19  100E               	bcf	14,0	;volatile
 18890                           
 18891                           ;CC2500_B1.c: 113: RC4 = 1;
 18892  1C1A  160E               	bsf	14,4	;volatile
 18893                           
 18894                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 18895  1C1B  300A               	movlw	10
 18896  1C1C  00A0               	movwf	DelayTime_1us@count
 18897  1C1D  3000               	movlw	0
 18898  1C1E  00A1               	movwf	DelayTime_1us@count+1
 18899  1C1F  319A  22BD  319C   	fcall	_DelayTime_1us
 18900                           
 18901                           ;CC2500_B1.c: 115: RC4 = 0;
 18902  1C22  0020               	movlb	0	; select bank0
 18903  1C23  120E               	bcf	14,4	;volatile
 18904                           
 18905                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 18906  1C24  300A               	movlw	10
 18907  1C25  00A0               	movwf	DelayTime_1us@count
 18908  1C26  3000               	movlw	0
 18909  1C27  00A1               	movwf	DelayTime_1us@count+1
 18910  1C28  319A  22BD  319C   	fcall	_DelayTime_1us
 18911                           
 18912                           ;CC2500_B1.c: 117: RC4 = 1;
 18913  1C2B  0020               	movlb	0	; select bank0
 18914  1C2C  160E               	bsf	14,4	;volatile
 18915                           
 18916                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 18917  1C2D  3028               	movlw	40
 18918  1C2E  00A0               	movwf	DelayTime_1us@count
 18919  1C2F  3000               	movlw	0
 18920  1C30  00A1               	movwf	DelayTime_1us@count+1
 18921  1C31  319A  22BD  319C   	fcall	_DelayTime_1us
 18922                           
 18923                           ;CC2500_B1.c: 119: RC4 = 0;
 18924  1C34  0020               	movlb	0	; select bank0
 18925  1C35  120E               	bcf	14,4	;volatile
 18926                           
 18927                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 18928  1C36  3030               	movlw	48
 18929  1C37  00A6               	movwf	??_CC2500_PowerRST
 18930  1C38  0826               	movf	??_CC2500_PowerRST,w
 18931  1C39  0021               	movlb	1	; select bank1
 18932  1C3A  00C2               	movwf	_SPI0Buffer^(0+128)
 18933  1C3B                     l304:	
 18934                           ;CC2500_B1.c: 121: while (RC2 == 1);
 18935                           
 18936  1C3B  0020               	movlb	0	; select bank0
 18937  1C3C  190E               	btfsc	14,2	;volatile
 18938  1C3D  2C3B               	goto	l304
 18939                           
 18940                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 18941  1C3E  3198  20DE  319C   	fcall	_CC2500_WriteByte
 18942  1C41                     l307:	
 18943                           ;CC2500_B1.c: 123: while (RC2 == 1);
 18944                           
 18945  1C41  0020               	movlb	0	; select bank0
 18946  1C42  190E               	btfsc	14,2	;volatile
 18947  1C43  2C41               	goto	l307
 18948                           
 18949                           ;CC2500_B1.c: 124: RC0 = 0;
 18950  1C44  100E               	bcf	14,0	;volatile
 18951                           
 18952                           ;CC2500_B1.c: 125: RC4 = 1;
 18953  1C45  160E               	bsf	14,4	;volatile
 18954  1C46  0008               	return
 18955  1C47                     __end_of_CC2500_PowerRST:	
 18956                           
 18957                           	psect	text127
 18958  1B0B                     __ptext127:	
 18959 ;; *************** function _CC2500_InitSetREG *****************
 18960 ;; Defined at:
 18961 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18962 ;; Parameters:    Size  Location     Type
 18963 ;;		None
 18964 ;; Auto vars:     Size  Location     Type
 18965 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18966 ;;  temp2           1    7[BANK0 ] unsigned char 
 18967 ;;  temp1           1    6[BANK0 ] unsigned char 
 18968 ;; Return value:  Size  Location     Type
 18969 ;;		None               void
 18970 ;; Registers used:
 18971 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18972 ;; Tracked objects:
 18973 ;;		On entry : 0/0
 18974 ;;		On exit  : 0/0
 18975 ;;		Unchanged: 0/0
 18976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18978 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;Total ram usage:        4 bytes
 18982 ;; Hardware stack levels used:    1
 18983 ;; Hardware stack levels required when called:    6
 18984 ;; This function calls:
 18985 ;;		_CC2500_WriteREG
 18986 ;; This function is called by:
 18987 ;;		_CC2500_PowerOnInitial
 18988 ;; This function uses a non-reentrant model
 18989 ;;
 18990                           
 18991                           
 18992                           ;psect for function _CC2500_InitSetREG
 18993  1B0B                     _CC2500_InitSetREG:	
 18994                           
 18995                           ;CC2500_B1.c: 132: unsigned char loop_c;
 18996                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 18997                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 18998                           
 18999                           ;incstack = 0
 19000                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19001  1B0B  0020               	movlb	0	; select bank0
 19002  1B0C  01A8               	clrf	CC2500_InitSetREG@loop_c
 19003  1B0D                     L12:	
 19004  1B0D  302F               	movlw	47
 19005  1B0E  0228               	subwf	CC2500_InitSetREG@loop_c,w
 19006  1B0F  1803               	btfsc	3,0
 19007  1B10  0008               	return
 19008                           
 19009                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 19010  1B11  0828               	movf	CC2500_InitSetREG@loop_c,w
 19011  1B12  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 19012  1B13  0084               	movwf	4
 19013  1B14  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 19014  1B15  1803               	skipnc
 19015  1B16  3E01               	addlw	1
 19016  1B17  0085               	movwf	5
 19017  1B18  0800               	movf	0,w	;code access
 19018  1B19  00A5               	movwf	??_CC2500_InitSetREG
 19019  1B1A  0825               	movf	??_CC2500_InitSetREG,w
 19020  1B1B  00A6               	movwf	CC2500_InitSetREG@temp1
 19021                           
 19022                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 19023  1B1C  0828               	movf	CC2500_InitSetREG@loop_c,w
 19024  1B1D  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 19025  1B1E  0084               	movwf	4
 19026  1B1F  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 19027  1B20  1803               	skipnc
 19028  1B21  3E01               	addlw	1
 19029  1B22  0085               	movwf	5
 19030  1B23  0800               	movf	0,w	;code access
 19031  1B24  00A5               	movwf	??_CC2500_InitSetREG
 19032  1B25  0825               	movf	??_CC2500_InitSetREG,w
 19033  1B26  00A7               	movwf	CC2500_InitSetREG@temp2
 19034                           
 19035                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 19036  1B27  0827               	movf	CC2500_InitSetREG@temp2,w
 19037  1B28  00A5               	movwf	??_CC2500_InitSetREG
 19038  1B29  0825               	movf	??_CC2500_InitSetREG,w
 19039  1B2A  00A2               	movwf	CC2500_WriteREG@value
 19040  1B2B  0826               	movf	CC2500_InitSetREG@temp1,w
 19041  1B2C  3198  20F7  319B   	fcall	_CC2500_WriteREG
 19042  1B2F  3001               	movlw	1
 19043  1B30  0020               	movlb	0	; select bank0
 19044  1B31  00A5               	movwf	??_CC2500_InitSetREG
 19045  1B32  0825               	movf	??_CC2500_InitSetREG,w
 19046  1B33  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19047  1B34  2B0D               	goto	L12
 19048  1B35                     __end_of_CC2500_InitSetREG:	
 19049                           
 19050                           	psect	text128
 19051  19D1                     __ptext128:	
 19052 ;; *************** function _CC2500_InitPATable *****************
 19053 ;; Defined at:
 19054 ;;		line 146 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19055 ;; Parameters:    Size  Location     Type
 19056 ;;		None
 19057 ;; Auto vars:     Size  Location     Type
 19058 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19059 ;;  temp            1    6[BANK0 ] unsigned char 
 19060 ;; Return value:  Size  Location     Type
 19061 ;;		None               void
 19062 ;; Registers used:
 19063 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19073 ;;Total ram usage:        3 bytes
 19074 ;; Hardware stack levels used:    1
 19075 ;; Hardware stack levels required when called:    6
 19076 ;; This function calls:
 19077 ;;		_CC2500_WriteREG
 19078 ;; This function is called by:
 19079 ;;		_CC2500_PowerOnInitial
 19080 ;; This function uses a non-reentrant model
 19081 ;;
 19082                           
 19083                           
 19084                           ;psect for function _CC2500_InitPATable
 19085  19D1                     _CC2500_InitPATable:	
 19086                           
 19087                           ;CC2500_B1.c: 147: unsigned char loop_d;
 19088                           ;CC2500_B1.c: 148: unsigned char temp;
 19089                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 19090                           
 19091                           ;incstack = 0
 19092                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19093  19D1  0020               	movlb	0	; select bank0
 19094  19D2  01A7               	clrf	CC2500_InitPATable@loop_d
 19095  19D3                     L13:	
 19096  19D3  3008               	movlw	8
 19097  19D4  0227               	subwf	CC2500_InitPATable@loop_d,w
 19098  19D5  1803               	btfsc	3,0
 19099  19D6  0008               	return
 19100                           
 19101                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 19102  19D7  0827               	movf	CC2500_InitPATable@loop_d,w
 19103  19D8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19104  19D9  0084               	movwf	4
 19105  19DA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19106  19DB  1803               	skipnc
 19107  19DC  3E01               	addlw	1
 19108  19DD  0085               	movwf	5
 19109  19DE  0800               	movf	0,w	;code access
 19110  19DF  00A5               	movwf	??_CC2500_InitPATable
 19111  19E0  0825               	movf	??_CC2500_InitPATable,w
 19112  19E1  00A6               	movwf	CC2500_InitPATable@temp
 19113                           
 19114                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 19115  19E2  0826               	movf	CC2500_InitPATable@temp,w
 19116  19E3  00A5               	movwf	??_CC2500_InitPATable
 19117  19E4  0825               	movf	??_CC2500_InitPATable,w
 19118  19E5  00A2               	movwf	CC2500_WriteREG@value
 19119  19E6  303E               	movlw	62
 19120  19E7  3198  20F7  3199   	fcall	_CC2500_WriteREG
 19121  19EA  3001               	movlw	1
 19122  19EB  0020               	movlb	0	; select bank0
 19123  19EC  00A5               	movwf	??_CC2500_InitPATable
 19124  19ED  0825               	movf	??_CC2500_InitPATable,w
 19125  19EE  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19126  19EF  29D3               	goto	L13
 19127  19F0                     __end_of_CC2500_InitPATable:	
 19128                           
 19129                           	psect	text129
 19130  18F7                     __ptext129:	
 19131 ;; *************** function _CC2500_WriteREG *****************
 19132 ;; Defined at:
 19133 ;;		line 223 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19134 ;; Parameters:    Size  Location     Type
 19135 ;;  w_addr          1    wreg     unsigned char 
 19136 ;;  value           1    2[BANK0 ] unsigned char 
 19137 ;; Auto vars:     Size  Location     Type
 19138 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19139 ;; Return value:  Size  Location     Type
 19140 ;;		None               void
 19141 ;; Registers used:
 19142 ;;		wreg, status,2, status,0, pclath, cstack
 19143 ;; Tracked objects:
 19144 ;;		On entry : 0/0
 19145 ;;		On exit  : 0/0
 19146 ;;		Unchanged: 0/0
 19147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19148 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19152 ;;Total ram usage:        3 bytes
 19153 ;; Hardware stack levels used:    1
 19154 ;; Hardware stack levels required when called:    5
 19155 ;; This function calls:
 19156 ;;		_CC2500_WriteByte
 19157 ;; This function is called by:
 19158 ;;		_CC2500_InitSetREG
 19159 ;;		_CC2500_InitPATable
 19160 ;; This function uses a non-reentrant model
 19161 ;;
 19162                           
 19163                           
 19164                           ;psect for function _CC2500_WriteREG
 19165  18F7                     _CC2500_WriteREG:	
 19166                           
 19167                           ;incstack = 0
 19168                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19169                           ;CC2500_WriteREG@w_addr stored from wreg
 19170  18F7  0020               	movlb	0	; select bank0
 19171  18F8  00A4               	movwf	CC2500_WriteREG@w_addr
 19172                           
 19173                           ;CC2500_B1.c: 224: RC4 = 0;
 19174  18F9  120E               	bcf	14,4	;volatile
 19175                           
 19176                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 19177  18FA  0824               	movf	CC2500_WriteREG@w_addr,w
 19178  18FB  00A3               	movwf	??_CC2500_WriteREG
 19179  18FC  0823               	movf	??_CC2500_WriteREG,w
 19180  18FD  0021               	movlb	1	; select bank1
 19181  18FE  00C2               	movwf	_SPI0Buffer^(0+128)
 19182  18FF                     l349:	
 19183                           ;CC2500_B1.c: 226: while (RC2 == 1);
 19184                           
 19185  18FF  0020               	movlb	0	; select bank0
 19186  1900  190E               	btfsc	14,2	;volatile
 19187  1901  28FF               	goto	l349
 19188                           
 19189                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 19190  1902  3198  20DE  3198   	fcall	_CC2500_WriteByte
 19191                           
 19192                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 19193  1905  0020               	movlb	0	; select bank0
 19194  1906  0822               	movf	CC2500_WriteREG@value,w
 19195  1907  00A3               	movwf	??_CC2500_WriteREG
 19196  1908  0823               	movf	??_CC2500_WriteREG,w
 19197  1909  0021               	movlb	1	; select bank1
 19198  190A  00C2               	movwf	_SPI0Buffer^(0+128)
 19199                           
 19200                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 19201  190B  3198  20DE         	fcall	_CC2500_WriteByte
 19202                           
 19203                           ;CC2500_B1.c: 230: RC4 = 1;
 19204  190D  0020               	movlb	0	; select bank0
 19205  190E  160E               	bsf	14,4	;volatile
 19206  190F  0008               	return
 19207  1910                     __end_of_CC2500_WriteREG:	
 19208                           
 19209                           	psect	text130
 19210  2670                     __ptext130:	
 19211 ;; *************** function _CC2500_FrequencyCabr *****************
 19212 ;; Defined at:
 19213 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19214 ;; Parameters:    Size  Location     Type
 19215 ;;		None
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;		None
 19218 ;; Return value:  Size  Location     Type
 19219 ;;		None               void
 19220 ;; Registers used:
 19221 ;;		wreg, status,2, status,0, pclath, cstack
 19222 ;; Tracked objects:
 19223 ;;		On entry : 0/0
 19224 ;;		On exit  : 0/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;Total ram usage:        0 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:    6
 19234 ;; This function calls:
 19235 ;;		_CC2500_WriteCommand
 19236 ;;		_DelayTime_1us
 19237 ;; This function is called by:
 19238 ;;		_CC2500_PowerOnInitial
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           
 19243                           ;psect for function _CC2500_FrequencyCabr
 19244  2670                     _CC2500_FrequencyCabr:	
 19245                           
 19246                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 19247                           
 19248                           ;incstack = 0
 19249                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19250  2670  3033               	movlw	51
 19251  2671  31A7  275E  31A6   	fcall	_CC2500_WriteCommand
 19252                           
 19253                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 19254  2674  30E8               	movlw	232
 19255  2675  0020               	movlb	0	; select bank0
 19256  2676  00A0               	movwf	DelayTime_1us@count
 19257  2677  3003               	movlw	3
 19258  2678  00A1               	movwf	DelayTime_1us@count+1
 19259  2679  319A  22BD         	fcall	_DelayTime_1us
 19260  267B  0008               	return
 19261  267C                     __end_of_CC2500_FrequencyCabr:	
 19262                           
 19263                           	psect	text131
 19264  1ABD                     __ptext131:	
 19265 ;; *************** function _DelayTime_1us *****************
 19266 ;; Defined at:
 19267 ;;		line 279 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19268 ;; Parameters:    Size  Location     Type
 19269 ;;  count           2    0[BANK0 ] int 
 19270 ;; Auto vars:     Size  Location     Type
 19271 ;;  j               2    4[BANK0 ] unsigned int 
 19272 ;;  i               2    2[BANK0 ] unsigned int 
 19273 ;; Return value:  Size  Location     Type
 19274 ;;		None               void
 19275 ;; Registers used:
 19276 ;;		wreg, status,2
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19283 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19285 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19286 ;;Total ram usage:        6 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; Hardware stack levels required when called:    4
 19289 ;; This function calls:
 19290 ;;		Nothing
 19291 ;; This function is called by:
 19292 ;;		_CC2500_PowerRST
 19293 ;;		_CC2500_FrequencyCabr
 19294 ;; This function uses a non-reentrant model
 19295 ;;
 19296                           
 19297                           
 19298                           ;psect for function _DelayTime_1us
 19299  1ABD                     _DelayTime_1us:	
 19300                           
 19301                           ;CC2500_B1.c: 280: unsigned int i, j;
 19302                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 19303                           
 19304                           ;incstack = 0
 19305                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19306  1ABD  3001               	movlw	1
 19307  1ABE  0020               	movlb	0	; select bank0
 19308  1ABF  00A2               	movwf	DelayTime_1us@i
 19309  1AC0  3000               	movlw	0
 19310  1AC1  00A3               	movwf	DelayTime_1us@i+1
 19311  1AC2                     l373:	
 19312  1AC2  0821               	movf	DelayTime_1us@count+1,w
 19313  1AC3  0223               	subwf	DelayTime_1us@i+1,w
 19314  1AC4  1D03               	skipz
 19315  1AC5  2AC8               	goto	u8045
 19316  1AC6  0820               	movf	DelayTime_1us@count,w
 19317  1AC7  0222               	subwf	DelayTime_1us@i,w
 19318  1AC8                     u8045:	
 19319  1AC8  1803               	btfsc	3,0
 19320  1AC9  0008               	return
 19321                           
 19322                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 19323  1ACA  01A4               	clrf	DelayTime_1us@j
 19324  1ACB  01A5               	clrf	DelayTime_1us@j+1
 19325  1ACC  3000               	movlw	0
 19326  1ACD  0225               	subwf	DelayTime_1us@j+1,w
 19327  1ACE  3002               	movlw	2
 19328  1ACF  1903               	skipnz
 19329  1AD0  0224               	subwf	DelayTime_1us@j,w
 19330  1AD1  1803               	btfsc	3,0
 19331  1AD2  2ADE               	goto	l8384
 19332  1AD3                     l8382:	
 19333  1AD3  3001               	movlw	1
 19334  1AD4  07A4               	addwf	DelayTime_1us@j,f
 19335  1AD5  3000               	movlw	0
 19336  1AD6  3DA5               	addwfc	DelayTime_1us@j+1,f
 19337  1AD7  3000               	movlw	0
 19338  1AD8  0225               	subwf	DelayTime_1us@j+1,w
 19339  1AD9  3002               	movlw	2
 19340  1ADA  1903               	skipnz
 19341  1ADB  0224               	subwf	DelayTime_1us@j,w
 19342  1ADC  1C03               	skipc
 19343  1ADD  2AD3               	goto	l8382
 19344  1ADE                     l8384:	
 19345  1ADE  3001               	movlw	1
 19346  1ADF  07A2               	addwf	DelayTime_1us@i,f
 19347  1AE0  3000               	movlw	0
 19348  1AE1  3DA3               	addwfc	DelayTime_1us@i+1,f
 19349  1AE2  2AC2               	goto	l373
 19350  1AE3                     __end_of_DelayTime_1us:	
 19351                           
 19352                           	psect	text132
 19353  2586                     __ptext132:	
 19354 ;; *************** function _CC2500_ClearTXFIFO *****************
 19355 ;; Defined at:
 19356 ;;		line 159 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19357 ;; Parameters:    Size  Location     Type
 19358 ;;		None
 19359 ;; Auto vars:     Size  Location     Type
 19360 ;;		None
 19361 ;; Return value:  Size  Location     Type
 19362 ;;		None               void
 19363 ;; Registers used:
 19364 ;;		wreg, status,2, status,0, pclath, cstack
 19365 ;; Tracked objects:
 19366 ;;		On entry : 0/0
 19367 ;;		On exit  : 0/0
 19368 ;;		Unchanged: 0/0
 19369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19374 ;;Total ram usage:        0 bytes
 19375 ;; Hardware stack levels used:    1
 19376 ;; Hardware stack levels required when called:    6
 19377 ;; This function calls:
 19378 ;;		_CC2500_WriteCommand
 19379 ;; This function is called by:
 19380 ;;		_CC2500_PowerOnInitial
 19381 ;; This function uses a non-reentrant model
 19382 ;;
 19383                           
 19384                           
 19385                           ;psect for function _CC2500_ClearTXFIFO
 19386  2586                     _CC2500_ClearTXFIFO:	
 19387                           
 19388                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 19389                           
 19390                           ;incstack = 0
 19391                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19392  2586  303B               	movlw	59
 19393  2587  31A7  275E         	fcall	_CC2500_WriteCommand
 19394  2589  0008               	return
 19395  258A                     __end_of_CC2500_ClearTXFIFO:	
 19396                           
 19397                           	psect	text133
 19398  2582                     __ptext133:	
 19399 ;; *************** function _CC2500_ClearRXFIFO *****************
 19400 ;; Defined at:
 19401 ;;		line 166 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19402 ;; Parameters:    Size  Location     Type
 19403 ;;		None
 19404 ;; Auto vars:     Size  Location     Type
 19405 ;;		None
 19406 ;; Return value:  Size  Location     Type
 19407 ;;		None               void
 19408 ;; Registers used:
 19409 ;;		wreg, status,2, status,0, pclath, cstack
 19410 ;; Tracked objects:
 19411 ;;		On entry : 0/0
 19412 ;;		On exit  : 0/0
 19413 ;;		Unchanged: 0/0
 19414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19419 ;;Total ram usage:        0 bytes
 19420 ;; Hardware stack levels used:    1
 19421 ;; Hardware stack levels required when called:    6
 19422 ;; This function calls:
 19423 ;;		_CC2500_WriteCommand
 19424 ;; This function is called by:
 19425 ;;		_CC2500_PowerOnInitial
 19426 ;; This function uses a non-reentrant model
 19427 ;;
 19428                           
 19429                           
 19430                           ;psect for function _CC2500_ClearRXFIFO
 19431  2582                     _CC2500_ClearRXFIFO:	
 19432                           
 19433                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 19434                           
 19435                           ;incstack = 0
 19436                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19437  2582  303A               	movlw	58
 19438  2583  31A7  275E         	fcall	_CC2500_WriteCommand
 19439  2585  0008               	return
 19440  2586                     __end_of_CC2500_ClearRXFIFO:	
 19441                           
 19442                           	psect	text134
 19443  275E                     __ptext134:	
 19444 ;; *************** function _CC2500_WriteCommand *****************
 19445 ;; Defined at:
 19446 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19447 ;; Parameters:    Size  Location     Type
 19448 ;;  command         1    wreg     unsigned char 
 19449 ;; Auto vars:     Size  Location     Type
 19450 ;;  command         1    3[BANK0 ] unsigned char 
 19451 ;; Return value:  Size  Location     Type
 19452 ;;		None               void
 19453 ;; Registers used:
 19454 ;;		wreg, status,2, status,0, pclath, cstack
 19455 ;; Tracked objects:
 19456 ;;		On entry : 0/0
 19457 ;;		On exit  : 0/0
 19458 ;;		Unchanged: 0/0
 19459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19464 ;;Total ram usage:        2 bytes
 19465 ;; Hardware stack levels used:    1
 19466 ;; Hardware stack levels required when called:    5
 19467 ;; This function calls:
 19468 ;;		_CC2500_WriteByte
 19469 ;; This function is called by:
 19470 ;;		_CC2500_TxData
 19471 ;;		_CC2500_RxData
 19472 ;;		_CC2500_ClearTXFIFO
 19473 ;;		_CC2500_ClearRXFIFO
 19474 ;;		_CC2500_FrequencyCabr
 19475 ;;		_CC2500_SIDLEMode
 19476 ;;		_setRF_Main
 19477 ;;		_RF_RxDisable
 19478 ;; This function uses a non-reentrant model
 19479 ;;
 19480                           
 19481                           
 19482                           ;psect for function _CC2500_WriteCommand
 19483  275E                     _CC2500_WriteCommand:	
 19484                           
 19485                           ;incstack = 0
 19486                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19487                           ;CC2500_WriteCommand@command stored from wreg
 19488  275E  0020               	movlb	0	; select bank0
 19489  275F  00A3               	movwf	CC2500_WriteCommand@command
 19490                           
 19491                           ;CC2500_B1.c: 250: RC4 = 0;
 19492  2760  120E               	bcf	14,4	;volatile
 19493                           
 19494                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 19495  2761  0823               	movf	CC2500_WriteCommand@command,w
 19496  2762  00A2               	movwf	??_CC2500_WriteCommand
 19497  2763  0822               	movf	??_CC2500_WriteCommand,w
 19498  2764  0021               	movlb	1	; select bank1
 19499  2765  00C2               	movwf	_SPI0Buffer^(0+128)
 19500  2766                     l361:	
 19501                           ;CC2500_B1.c: 253: while (RC2 == 1);
 19502                           
 19503  2766  0020               	movlb	0	; select bank0
 19504  2767  190E               	btfsc	14,2	;volatile
 19505  2768  2F66               	goto	l361
 19506                           
 19507                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 19508  2769  3198  20DE         	fcall	_CC2500_WriteByte
 19509                           
 19510                           ;CC2500_B1.c: 256: RC4 = 1;
 19511  276B  0020               	movlb	0	; select bank0
 19512  276C  160E               	bsf	14,4	;volatile
 19513  276D  0008               	return
 19514  276E                     __end_of_CC2500_WriteCommand:	
 19515                           
 19516                           	psect	text135
 19517  18DE                     __ptext135:	
 19518 ;; *************** function _CC2500_WriteByte *****************
 19519 ;; Defined at:
 19520 ;;		line 191 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19521 ;; Parameters:    Size  Location     Type
 19522 ;;		None
 19523 ;; Auto vars:     Size  Location     Type
 19524 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19525 ;; Return value:  Size  Location     Type
 19526 ;;		None               void
 19527 ;; Registers used:
 19528 ;;		wreg, status,2, status,0
 19529 ;; Tracked objects:
 19530 ;;		On entry : 0/0
 19531 ;;		On exit  : 0/0
 19532 ;;		Unchanged: 0/0
 19533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19538 ;;Total ram usage:        2 bytes
 19539 ;; Hardware stack levels used:    1
 19540 ;; Hardware stack levels required when called:    4
 19541 ;; This function calls:
 19542 ;;		Nothing
 19543 ;; This function is called by:
 19544 ;;		_CC2500_TxData
 19545 ;;		_CC2500_RxData
 19546 ;;		_CC2500_PowerRST
 19547 ;;		_CC2500_WriteREG
 19548 ;;		_CC2500_WriteCommand
 19549 ;;		_CC2500_ReadStatus
 19550 ;;		_CC2500_ReadREG
 19551 ;; This function uses a non-reentrant model
 19552 ;;
 19553                           
 19554                           
 19555                           ;psect for function _CC2500_WriteByte
 19556  18DE                     _CC2500_WriteByte:	
 19557                           
 19558                           ;CC2500_B1.c: 192: unsigned char loop_a;
 19559                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 19560                           
 19561                           ;incstack = 0
 19562                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19563  18DE  0020               	movlb	0	; select bank0
 19564  18DF  01A1               	clrf	CC2500_WriteByte@loop_a
 19565  18E0                     L14:	
 19566  18E0  3008               	movlw	8
 19567  18E1  0221               	subwf	CC2500_WriteByte@loop_a,w
 19568  18E2  1803               	btfsc	3,0
 19569  18E3  0008               	return
 19570                           
 19571                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 19572  18E4  0021               	movlb	1	; select bank1
 19573  18E5  1FC2               	btfss	_SPI0Buffer^(0+128),7
 19574  18E6  28EA               	goto	l337
 19575                           
 19576                           ;CC2500_B1.c: 195: RC0 = 1;
 19577  18E7  0020               	movlb	0	; select bank0
 19578  18E8  140E               	bsf	14,0	;volatile
 19579  18E9  28EC               	goto	l338
 19580  18EA                     l337:	
 19581                           
 19582                           ;CC2500_B1.c: 196: else
 19583                           ;CC2500_B1.c: 197: RC0 = 0;
 19584  18EA  0020               	movlb	0	; select bank0
 19585  18EB  100E               	bcf	14,0	;volatile
 19586  18EC                     l338:	
 19587                           
 19588                           ;CC2500_B1.c: 198: RC1 = 1;
 19589  18EC  148E               	bsf	14,1	;volatile
 19590                           
 19591                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 19592  18ED  1003               	clrc
 19593  18EE  0021               	movlb	1	; select bank1
 19594  18EF  0DC2               	rlf	_SPI0Buffer^(0+128),f
 19595                           
 19596                           ;CC2500_B1.c: 200: RC1 = 0;
 19597  18F0  0020               	movlb	0	; select bank0
 19598  18F1  108E               	bcf	14,1	;volatile
 19599  18F2  3001               	movlw	1
 19600  18F3  00A0               	movwf	??_CC2500_WriteByte
 19601  18F4  0820               	movf	??_CC2500_WriteByte,w
 19602  18F5  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19603  18F6  28E0               	goto	L14
 19604  18F7                     __end_of_CC2500_WriteByte:	
 19605                           
 19606                           	psect	text136
 19607  071B                     __ptext136:	
 19608 ;; *************** function _Buzzer_Main *****************
 19609 ;; Defined at:
 19610 ;;		line 47 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;		None
 19613 ;; Auto vars:     Size  Location     Type
 19614 ;;		None
 19615 ;; Return value:  Size  Location     Type
 19616 ;;		None               void
 19617 ;; Registers used:
 19618 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/0
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19626 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19627 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;Total ram usage:        4 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:    4
 19631 ;; This function calls:
 19632 ;;		Nothing
 19633 ;; This function is called by:
 19634 ;;		_main
 19635 ;; This function uses a non-reentrant model
 19636 ;;
 19637                           
 19638                           
 19639                           ;psect for function _Buzzer_Main
 19640  071B                     _Buzzer_Main:	
 19641                           
 19642                           ;Buzzer_B1.c: 48: Buz->Switch = (RB3) ? 1 : 0;
 19643                           
 19644                           ;incstack = 0
 19645                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19646  071B  0021               	movlb	1	; select bank1
 19647  071C  0837               	movf	_Buz^(0+128),w
 19648  071D  0086               	movwf	6
 19649  071E  3001               	movlw	1	; select bank2/3
 19650  071F  0087               	movwf	7
 19651  0720  1281               	bcf	1,5
 19652  0721  0020               	movlb	0	; select bank0
 19653  0722  198D               	btfsc	13,3	;volatile
 19654  0723  1681               	bsf	1,5
 19655                           
 19656                           ;Buzzer_B1.c: 50: if (Buz->GO) {
 19657  0724  0021               	movlb	1	; select bank1
 19658  0725  0837               	movf	_Buz^(0+128),w
 19659  0726  0086               	movwf	6
 19660  0727  3001               	movlw	1	; select bank2/3
 19661  0728  0087               	movwf	7
 19662  0729  1C81               	btfss	1,1
 19663  072A  0008               	return
 19664                           
 19665                           ;Buzzer_B1.c: 52: if (Buz->Time >= Buz->TimeValue) {
 19666  072B  0837               	movf	_Buz^(0+128),w
 19667  072C  3E06               	addlw	6
 19668  072D  0086               	movwf	6
 19669  072E  3001               	movlw	1	; select bank2/3
 19670  072F  0087               	movwf	7
 19671  0730  3F40               	moviw [0]fsr1
 19672  0731  0020               	movlb	0	; select bank0
 19673  0732  00A0               	movwf	??_Buzzer_Main
 19674  0733  3F41               	moviw [1]fsr1
 19675  0734  00A1               	movwf	??_Buzzer_Main+1
 19676  0735  0021               	movlb	1	; select bank1
 19677  0736  0A37               	incf	_Buz^(0+128),w
 19678  0737  0086               	movwf	6
 19679  0738  3001               	movlw	1	; select bank2/3
 19680  0739  0087               	movwf	7
 19681  073A  3F40               	moviw [0]fsr1
 19682  073B  0020               	movlb	0	; select bank0
 19683  073C  00A2               	movwf	??_Buzzer_Main+2
 19684  073D  3F41               	moviw [1]fsr1
 19685  073E  00A3               	movwf	??_Buzzer_Main+3
 19686  073F  0821               	movf	??_Buzzer_Main+1,w
 19687  0740  0223               	subwf	??_Buzzer_Main+3,w
 19688  0741  1D03               	skipz
 19689  0742  2F45               	goto	u6585
 19690  0743  0820               	movf	??_Buzzer_Main,w
 19691  0744  0222               	subwf	??_Buzzer_Main+2,w
 19692  0745                     u6585:	
 19693  0745  1C03               	skipc
 19694  0746  0008               	return
 19695                           
 19696                           ;Buzzer_B1.c: 53: Buz->Time = 0;
 19697  0747  0021               	movlb	1	; select bank1
 19698  0748  0A37               	incf	_Buz^(0+128),w
 19699  0749  0086               	movwf	6
 19700  074A  3001               	movlw	1	; select bank2/3
 19701  074B  0087               	movwf	7
 19702  074C  3000               	movlw	0
 19703  074D  3FC0               	movwi [0]fsr1
 19704  074E  3FC1               	movwi [1]fsr1
 19705                           
 19706                           ;Buzzer_B1.c: 54: if (!Buz->Switch) {
 19707  074F  0837               	movf	_Buz^(0+128),w
 19708  0750  0086               	movwf	6
 19709  0751  3001               	movlw	1	; select bank2/3
 19710  0752  0087               	movwf	7
 19711  0753  1A81               	btfsc	1,5
 19712  0754  2FC3               	goto	l7408
 19713                           
 19714                           ;Buzzer_B1.c: 55: if (Buz->Count == 0) {
 19715  0755  0837               	movf	_Buz^(0+128),w
 19716  0756  3E03               	addlw	3
 19717  0757  0086               	movwf	6
 19718  0758  3001               	movlw	1	; select bank2/3
 19719  0759  0087               	movwf	7
 19720  075A  0881               	movf	1,f
 19721  075B  1D03               	skipz
 19722  075C  2FBB               	goto	l7404
 19723                           
 19724                           ;Buzzer_B1.c: 56: if (Buz->BufferStatus1) {
 19725  075D  0837               	movf	_Buz^(0+128),w
 19726  075E  0086               	movwf	6
 19727  075F  3001               	movlw	1	; select bank2/3
 19728  0760  0087               	movwf	7
 19729  0761  1D81               	btfss	1,3
 19730  0762  2F89               	goto	l7396
 19731                           
 19732                           ;Buzzer_B1.c: 57: Buz->BufferStatus1 = 0;
 19733  0763  0837               	movf	_Buz^(0+128),w
 19734  0764  0086               	movwf	6
 19735  0765  3001               	movlw	1	; select bank2/3
 19736  0766  0087               	movwf	7
 19737  0767  1181               	bcf	1,3
 19738                           
 19739                           ;Buzzer_B1.c: 58: Buz->Count = Buz->CountBuffer1;
 19740  0768  0837               	movf	_Buz^(0+128),w
 19741  0769  3E04               	addlw	4
 19742  076A  0086               	movwf	6
 19743  076B  3001               	movlw	1	; select bank2/3
 19744  076C  0087               	movwf	7
 19745  076D  0801               	movf	1,w
 19746  076E  0020               	movlb	0	; select bank0
 19747  076F  00A0               	movwf	??_Buzzer_Main
 19748  0770  0021               	movlb	1	; select bank1
 19749  0771  0837               	movf	_Buz^(0+128),w
 19750  0772  3E03               	addlw	3
 19751  0773  0086               	movwf	6
 19752  0774  3001               	movlw	1	; select bank2/3
 19753  0775  0087               	movwf	7
 19754  0776  0020               	movlb	0	; select bank0
 19755  0777  0820               	movf	??_Buzzer_Main,w
 19756  0778  0081               	movwf	1
 19757                           
 19758                           ;Buzzer_B1.c: 59: Buz->TimeValue = Buz->TimeValueBuffer1;
 19759  0779  0021               	movlb	1	; select bank1
 19760  077A  0837               	movf	_Buz^(0+128),w
 19761  077B  3E08               	addlw	8
 19762  077C  0086               	movwf	6
 19763  077D  3001               	movlw	1	; select bank2/3
 19764  077E  0087               	movwf	7
 19765  077F  0837               	movf	_Buz^(0+128),w
 19766  0780  3E06               	addlw	6
 19767  0781  0084               	movwf	4
 19768  0782  3001               	movlw	1	; select bank2/3
 19769  0783  0085               	movwf	5
 19770  0784  3F40               	moviw [0]fsr1
 19771  0785  3F80               	movwi [0]fsr0
 19772  0786  3F41               	moviw [1]fsr1
 19773  0787  3F81               	movwi [1]fsr0
 19774                           
 19775                           ;Buzzer_B1.c: 60: } else if (Buz->BufferStatus2) {
 19776  0788  0008               	return
 19777  0789                     l7396:	
 19778  0789  0837               	movf	_Buz^(0+128),w
 19779  078A  0086               	movwf	6
 19780  078B  3001               	movlw	1	; select bank2/3
 19781  078C  0087               	movwf	7
 19782  078D  1E01               	btfss	1,4
 19783  078E  2FB5               	goto	l7402
 19784                           
 19785                           ;Buzzer_B1.c: 61: Buz->BufferStatus2 = 0;
 19786  078F  0837               	movf	_Buz^(0+128),w
 19787  0790  0086               	movwf	6
 19788  0791  3001               	movlw	1	; select bank2/3
 19789  0792  0087               	movwf	7
 19790  0793  1201               	bcf	1,4
 19791                           
 19792                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer2;
 19793  0794  0837               	movf	_Buz^(0+128),w
 19794  0795  3E05               	addlw	5
 19795  0796  0086               	movwf	6
 19796  0797  3001               	movlw	1	; select bank2/3
 19797  0798  0087               	movwf	7
 19798  0799  0801               	movf	1,w
 19799  079A  0020               	movlb	0	; select bank0
 19800  079B  00A0               	movwf	??_Buzzer_Main
 19801  079C  0021               	movlb	1	; select bank1
 19802  079D  0837               	movf	_Buz^(0+128),w
 19803  079E  3E03               	addlw	3
 19804  079F  0086               	movwf	6
 19805  07A0  3001               	movlw	1	; select bank2/3
 19806  07A1  0087               	movwf	7
 19807  07A2  0020               	movlb	0	; select bank0
 19808  07A3  0820               	movf	??_Buzzer_Main,w
 19809  07A4  0081               	movwf	1
 19810                           
 19811                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer2;
 19812  07A5  0021               	movlb	1	; select bank1
 19813  07A6  0837               	movf	_Buz^(0+128),w
 19814  07A7  3E0A               	addlw	10
 19815  07A8  0086               	movwf	6
 19816  07A9  3001               	movlw	1	; select bank2/3
 19817  07AA  0087               	movwf	7
 19818  07AB  0837               	movf	_Buz^(0+128),w
 19819  07AC  3E06               	addlw	6
 19820  07AD  0084               	movwf	4
 19821  07AE  3001               	movlw	1	; select bank2/3
 19822  07AF  0085               	movwf	5
 19823  07B0  3F40               	moviw [0]fsr1
 19824  07B1  3F80               	movwi [0]fsr0
 19825  07B2  3F41               	moviw [1]fsr1
 19826  07B3  3F81               	movwi [1]fsr0
 19827                           
 19828                           ;Buzzer_B1.c: 64: } else {
 19829  07B4  0008               	return
 19830  07B5                     l7402:	
 19831                           
 19832                           ;Buzzer_B1.c: 65: Buz->GO = 0;
 19833  07B5  0837               	movf	_Buz^(0+128),w
 19834  07B6  0086               	movwf	6
 19835  07B7  3001               	movlw	1	; select bank2/3
 19836  07B8  0087               	movwf	7
 19837  07B9  1081               	bcf	1,1
 19838                           
 19839                           ;Buzzer_B1.c: 66: }
 19840                           ;Buzzer_B1.c: 67: } else {
 19841  07BA  0008               	return
 19842  07BB                     l7404:	
 19843                           
 19844                           ;Buzzer_B1.c: 68: Buz->Switch = 1;
 19845  07BB  0837               	movf	_Buz^(0+128),w
 19846  07BC  0086               	movwf	6
 19847  07BD  3001               	movlw	1	; select bank2/3
 19848  07BE  0087               	movwf	7
 19849  07BF  1681               	bsf	1,5
 19850                           
 19851                           ;Buzzer_B1.c: 70: RB3 = 1;
 19852  07C0  0020               	movlb	0	; select bank0
 19853  07C1  158D               	bsf	13,3	;volatile
 19854                           
 19855                           ;Buzzer_B1.c: 71: }
 19856                           ;Buzzer_B1.c: 72: } else {
 19857  07C2  0008               	return
 19858  07C3                     l7408:	
 19859                           
 19860                           ;Buzzer_B1.c: 73: Buz->Switch = 0;
 19861  07C3  0021               	movlb	1	; select bank1
 19862  07C4  0837               	movf	_Buz^(0+128),w
 19863  07C5  0086               	movwf	6
 19864  07C6  3001               	movlw	1	; select bank2/3
 19865  07C7  0087               	movwf	7
 19866  07C8  1281               	bcf	1,5
 19867                           
 19868                           ;Buzzer_B1.c: 75: RB3 = 0;
 19869  07C9  0020               	movlb	0	; select bank0
 19870  07CA  118D               	bcf	13,3	;volatile
 19871                           
 19872                           ;Buzzer_B1.c: 77: Buz->Count--;
 19873  07CB  0021               	movlb	1	; select bank1
 19874  07CC  0837               	movf	_Buz^(0+128),w
 19875  07CD  3E03               	addlw	3
 19876  07CE  0086               	movwf	6
 19877  07CF  3001               	movlw	1	; select bank2/3
 19878  07D0  0087               	movwf	7
 19879  07D1  3001               	movlw	1
 19880  07D2  0281               	subwf	1,f
 19881  07D3  0008               	return
 19882  07D4                     __end_of_Buzzer_Main:	
 19883                           
 19884                           	psect	text137
 19885  2664                     __ptext137:	
 19886 ;; *************** function _Buzzer_Initialization *****************
 19887 ;; Defined at:
 19888 ;;		line 11 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;		None
 19891 ;; Auto vars:     Size  Location     Type
 19892 ;;		None
 19893 ;; Return value:  Size  Location     Type
 19894 ;;		None               void
 19895 ;; Registers used:
 19896 ;;		wreg, fsr1l, fsr1h
 19897 ;; Tracked objects:
 19898 ;;		On entry : 0/0
 19899 ;;		On exit  : 0/0
 19900 ;;		Unchanged: 0/0
 19901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19904 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19905 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19906 ;;Total ram usage:        1 bytes
 19907 ;; Hardware stack levels used:    1
 19908 ;; Hardware stack levels required when called:    4
 19909 ;; This function calls:
 19910 ;;		Nothing
 19911 ;; This function is called by:
 19912 ;;		_main
 19913 ;; This function uses a non-reentrant model
 19914 ;;
 19915                           
 19916                           
 19917                           ;psect for function _Buzzer_Initialization
 19918  2664                     _Buzzer_Initialization:	
 19919                           
 19920                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 19921                           
 19922                           ;incstack = 0
 19923                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 19924  2664  304D               	movlw	_Buz1& (0+255)
 19925  2665  0020               	movlb	0	; select bank0
 19926  2666  00A0               	movwf	??_Buzzer_Initialization
 19927  2667  0820               	movf	??_Buzzer_Initialization,w
 19928  2668  0021               	movlb	1	; select bank1
 19929  2669  00B7               	movwf	_Buz^(0+128)
 19930                           
 19931                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 19932  266A  0837               	movf	_Buz^(0+128),w
 19933  266B  0086               	movwf	6
 19934  266C  3001               	movlw	1	; select bank2/3
 19935  266D  0087               	movwf	7
 19936  266E  1401               	bsf	1,0
 19937  266F  0008               	return
 19938  2670                     __end_of_Buzzer_Initialization:	
 19939                           
 19940                           	psect	intentry
 19941  0004                     __pintentry:	
 19942 ;; *************** function _ISR *****************
 19943 ;; Defined at:
 19944 ;;		line 99 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19945 ;; Parameters:    Size  Location     Type
 19946 ;;		None
 19947 ;; Auto vars:     Size  Location     Type
 19948 ;;		None
 19949 ;; Return value:  Size  Location     Type
 19950 ;;		None               void
 19951 ;; Registers used:
 19952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19953 ;; Tracked objects:
 19954 ;;		On entry : 0/0
 19955 ;;		On exit  : 0/0
 19956 ;;		Unchanged: 0/0
 19957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19961 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19962 ;;Total ram usage:        1 bytes
 19963 ;; Hardware stack levels used:    1
 19964 ;; Hardware stack levels required when called:    3
 19965 ;; This function calls:
 19966 ;;		_INT_ISR
 19967 ;;		_IOC_ISR
 19968 ;;		_TMR0_ISR
 19969 ;; This function is called by:
 19970 ;;		Interrupt level 1
 19971 ;; This function uses a non-reentrant model
 19972 ;;
 19973                           
 19974  0004                     _ISR:	
 19975                           
 19976                           ;incstack = 0
 19977                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19978  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19979  0005  3180               	pagesel	$
 19980  0006  0020               	movlb	0	; select bank0
 19981  0007  087F               	movf	127,w
 19982  0008  00F6               	movwf	??_ISR
 19983                           
 19984                           ;MCU_B1.c: 101: IOC_ISR();
 19985  0009  319A  2298  3180   	fcall	_IOC_ISR
 19986                           
 19987                           ;MCU_B1.c: 103: TMR0_ISR();
 19988  000C  3182  22EA  3180   	fcall	_TMR0_ISR
 19989                           
 19990                           ;MCU_B1.c: 105: ;;
 19991                           ;MCU_B1.c: 109: INT_ISR();
 19992  000F  31A6  2658         	fcall	_INT_ISR
 19993  0011  0876               	movf	??_ISR,w
 19994  0012  0020               	movlb	0	; select bank0
 19995  0013  00FF               	movwf	127
 19996  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19997  0015  0009               	retfie
 19998  0016                     __end_of_ISR:	
 19999                           
 20000                           	psect	text139
 20001  02EA                     __ptext139:	
 20002 ;; *************** function _TMR0_ISR *****************
 20003 ;; Defined at:
 20004 ;;		line 127 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20005 ;; Parameters:    Size  Location     Type
 20006 ;;		None
 20007 ;; Auto vars:     Size  Location     Type
 20008 ;;		None
 20009 ;; Return value:  Size  Location     Type
 20010 ;;		None               void
 20011 ;; Registers used:
 20012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20013 ;; Tracked objects:
 20014 ;;		On entry : 0/0
 20015 ;;		On exit  : 0/0
 20016 ;;		Unchanged: 0/0
 20017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20020 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20021 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20022 ;;Total ram usage:        4 bytes
 20023 ;; Hardware stack levels used:    1
 20024 ;; Hardware stack levels required when called:    1
 20025 ;; This function calls:
 20026 ;;		i1_setLoad_StatusOff
 20027 ;; This function is called by:
 20028 ;;		_ISR
 20029 ;; This function uses a non-reentrant model
 20030 ;;
 20031                           
 20032                           
 20033                           ;psect for function _TMR0_ISR
 20034  02EA                     _TMR0_ISR:	
 20035                           
 20036                           ;MCU_B1.c: 128: if (TMR0IE && TMR0IF) {
 20037                           
 20038                           ;incstack = 0
 20039                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20040  02EA  1E8B               	btfss	11,5	;volatile
 20041  02EB  0008               	return
 20042  02EC  1D0B               	btfss	11,2	;volatile
 20043  02ED  0008               	return
 20044                           
 20045                           ;MCU_B1.c: 129: TMR0 = (256-90);
 20046  02EE  30A6               	movlw	166
 20047  02EF  0020               	movlb	0	; select bank0
 20048  02F0  0095               	movwf	21	;volatile
 20049                           
 20050                           ;MCU_B1.c: 130: TMR0IF = 0;
 20051  02F1  110B               	bcf	11,2	;volatile
 20052                           
 20053                           ;MCU_B1.c: 135: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20054  02F2  0878               	movf	_DimmerLights11,w
 20055  02F3  0086               	movwf	6
 20056  02F4  3001               	movlw	1	; select bank2/3
 20057  02F5  0087               	movwf	7
 20058  02F6  1C01               	btfss	1,0
 20059  02F7  2B43               	goto	i1l7486
 20060  02F8  3001               	movlw	1
 20061  02F9  00F2               	movwf	??_TMR0_ISR
 20062  02FA  0878               	movf	_DimmerLights11,w
 20063  02FB  3E03               	addlw	3
 20064  02FC  0086               	movwf	6
 20065  02FD  3001               	movlw	1	; select bank2/3
 20066  02FE  0087               	movwf	7
 20067  02FF  0872               	movf	??_TMR0_ISR,w
 20068  0300  0781               	addwf	1,f
 20069  0301  0021               	movlb	1	; select bank1
 20070  0302  083A               	movf	_Dimmer^(0+128),w
 20071  0303  3E02               	addlw	2
 20072  0304  0086               	movwf	6
 20073  0305  0187               	clrf	7
 20074  0306  0801               	movf	1,w
 20075  0307  00F2               	movwf	??_TMR0_ISR
 20076  0308  01F3               	clrf	??_TMR0_ISR+1
 20077  0309  09F2               	comf	??_TMR0_ISR,f
 20078  030A  09F3               	comf	??_TMR0_ISR+1,f
 20079  030B  0AF2               	incf	??_TMR0_ISR,f
 20080  030C  1903               	skipnz
 20081  030D  0AF3               	incf	??_TMR0_ISR+1,f
 20082  030E  0878               	movf	_DimmerLights11,w
 20083  030F  3E04               	addlw	4
 20084  0310  0086               	movwf	6
 20085  0311  3001               	movlw	1	; select bank2/3
 20086  0312  0087               	movwf	7
 20087  0313  0801               	movf	1,w
 20088  0314  0772               	addwf	??_TMR0_ISR,w
 20089  0315  00F4               	movwf	??_TMR0_ISR+2
 20090  0316  0873               	movf	??_TMR0_ISR+1,w
 20091  0317  1803               	skipnc
 20092  0318  0A73               	incf	??_TMR0_ISR+1,w
 20093  0319  00F5               	movwf	??_TMR0_ISR+3
 20094  031A  0878               	movf	_DimmerLights11,w
 20095  031B  3E03               	addlw	3
 20096  031C  0086               	movwf	6
 20097  031D  3001               	movlw	1	; select bank2/3
 20098  031E  0087               	movwf	7
 20099  031F  0875               	movf	??_TMR0_ISR+3,w
 20100  0320  3A80               	xorlw	128
 20101  0321  3C80               	sublw	128
 20102  0322  1D03               	skipz
 20103  0323  2B26               	goto	u670_25
 20104  0324  0874               	movf	??_TMR0_ISR+2,w
 20105  0325  0201               	subwf	1,w
 20106  0326                     u670_25:	
 20107  0326  1C03               	skipc
 20108  0327  2C7F               	goto	i1l7556
 20109  0328  0878               	movf	_DimmerLights11,w
 20110  0329  3E03               	addlw	3
 20111  032A  0086               	movwf	6
 20112  032B  3001               	movlw	1	; select bank2/3
 20113  032C  0087               	movwf	7
 20114  032D  0181               	clrf	1
 20115  032E  0878               	movf	_DimmerLights11,w
 20116  032F  0086               	movwf	6
 20117  0330  3001               	movlw	1	; select bank2/3
 20118  0331  0087               	movwf	7
 20119  0332  1001               	bcf	1,0
 20120  0333  0878               	movf	_DimmerLights11,w
 20121  0334  3E07               	addlw	7
 20122  0335  0086               	movwf	6
 20123  0336  3001               	movlw	1	; select bank2/3
 20124  0337  0087               	movwf	7
 20125  0338  1401               	bsf	1,0
 20126  0339  0878               	movf	_DimmerLights11,w
 20127  033A  0086               	movwf	6
 20128  033B  3001               	movlw	1	; select bank2/3
 20129  033C  0087               	movwf	7
 20130  033D  1F01               	btfss	1,6
 20131  033E  2C7F               	goto	i1l7556
 20132  033F  0020               	movlb	0	; select bank0
 20133  0340  178C               	bsf	12,7	;volatile
 20134  0341  160D               	bsf	13,4	;volatile
 20135  0342  2C7F               	goto	i1l7556
 20136  0343                     i1l7486:	
 20137  0343  0878               	movf	_DimmerLights11,w
 20138  0344  3E07               	addlw	7
 20139  0345  0086               	movwf	6
 20140  0346  3001               	movlw	1	; select bank2/3
 20141  0347  0087               	movwf	7
 20142  0348  1C01               	btfss	1,0
 20143  0349  2C49               	goto	i1l7546
 20144  034A  0878               	movf	_DimmerLights11,w
 20145  034B  3E07               	addlw	7
 20146  034C  0086               	movwf	6
 20147  034D  3001               	movlw	1	; select bank2/3
 20148  034E  0087               	movwf	7
 20149  034F  1001               	bcf	1,0
 20150  0350  0878               	movf	_DimmerLights11,w
 20151  0351  0086               	movwf	6
 20152  0352  3001               	movlw	1	; select bank2/3
 20153  0353  0087               	movwf	7
 20154  0354  1C81               	btfss	1,1
 20155  0355  2C49               	goto	i1l7546
 20156  0356  3001               	movlw	1
 20157  0357  00F2               	movwf	??_TMR0_ISR
 20158  0358  0A78               	incf	_DimmerLights11,w
 20159  0359  0086               	movwf	6
 20160  035A  3001               	movlw	1	; select bank2/3
 20161  035B  0087               	movwf	7
 20162  035C  0872               	movf	??_TMR0_ISR,w
 20163  035D  0781               	addwf	1,f
 20164  035E  0A78               	incf	_DimmerLights11,w
 20165  035F  0086               	movwf	6
 20166  0360  3001               	movlw	1	; select bank2/3
 20167  0361  0087               	movwf	7
 20168  0362  0878               	movf	_DimmerLights11,w
 20169  0363  3E02               	addlw	2
 20170  0364  0084               	movwf	4
 20171  0365  3001               	movlw	1	; select bank2/3
 20172  0366  0085               	movwf	5
 20173  0367  0800               	movf	0,w
 20174  0368  0201               	subwf	1,w
 20175  0369  1C03               	skipc
 20176  036A  2C49               	goto	i1l7546
 20177  036B  0A78               	incf	_DimmerLights11,w
 20178  036C  0086               	movwf	6
 20179  036D  3001               	movlw	1	; select bank2/3
 20180  036E  0087               	movwf	7
 20181  036F  0181               	clrf	1
 20182  0370  0878               	movf	_DimmerLights11,w
 20183  0371  0086               	movwf	6
 20184  0372  3001               	movlw	1	; select bank2/3
 20185  0373  0087               	movwf	7
 20186  0374  1D81               	btfss	1,3
 20187  0375  2BAC               	goto	i1l7512
 20188  0376  0878               	movf	_DimmerLights11,w
 20189  0377  0086               	movwf	6
 20190  0378  3001               	movlw	1	; select bank2/3
 20191  0379  0087               	movwf	7
 20192  037A  1A01               	btfsc	1,4
 20193  037B  2B93               	goto	i1l7506
 20194  037C  0878               	movf	_DimmerLights11,w
 20195  037D  3E04               	addlw	4
 20196  037E  0086               	movwf	6
 20197  037F  3001               	movlw	1	; select bank2/3
 20198  0380  0087               	movwf	7
 20199  0381  3044               	movlw	68
 20200  0382  0201               	subwf	1,w
 20201  0383  1C03               	skipc
 20202  0384  2B8D               	goto	i1l7504
 20203  0385  0878               	movf	_DimmerLights11,w
 20204  0386  3E04               	addlw	4
 20205  0387  0086               	movwf	6
 20206  0388  3001               	movlw	1	; select bank2/3
 20207  0389  0087               	movwf	7
 20208  038A  3001               	movlw	1
 20209  038B  0281               	subwf	1,f
 20210  038C  2C49               	goto	i1l7546
 20211  038D                     i1l7504:	
 20212  038D  0878               	movf	_DimmerLights11,w
 20213  038E  0086               	movwf	6
 20214  038F  3001               	movlw	1	; select bank2/3
 20215  0390  0087               	movwf	7
 20216  0391  1601               	bsf	1,4
 20217  0392  2C49               	goto	i1l7546
 20218  0393                     i1l7506:	
 20219  0393  0878               	movf	_DimmerLights11,w
 20220  0394  3E04               	addlw	4
 20221  0395  0086               	movwf	6
 20222  0396  3001               	movlw	1	; select bank2/3
 20223  0397  0087               	movwf	7
 20224  0398  3078               	movlw	120
 20225  0399  0201               	subwf	1,w
 20226  039A  1803               	skipnc
 20227  039B  2BA6               	goto	i1l7510
 20228  039C  3001               	movlw	1
 20229  039D  00F2               	movwf	??_TMR0_ISR
 20230  039E  0878               	movf	_DimmerLights11,w
 20231  039F  3E04               	addlw	4
 20232  03A0  0086               	movwf	6
 20233  03A1  3001               	movlw	1	; select bank2/3
 20234  03A2  0087               	movwf	7
 20235  03A3  0872               	movf	??_TMR0_ISR,w
 20236  03A4  0781               	addwf	1,f
 20237  03A5  2C49               	goto	i1l7546
 20238  03A6                     i1l7510:	
 20239  03A6  0878               	movf	_DimmerLights11,w
 20240  03A7  0086               	movwf	6
 20241  03A8  3001               	movlw	1	; select bank2/3
 20242  03A9  0087               	movwf	7
 20243  03AA  1201               	bcf	1,4
 20244  03AB  2C49               	goto	i1l7546
 20245  03AC                     i1l7512:	
 20246  03AC  0878               	movf	_DimmerLights11,w
 20247  03AD  0086               	movwf	6
 20248  03AE  3001               	movlw	1	; select bank2/3
 20249  03AF  0087               	movwf	7
 20250  03B0  1D01               	btfss	1,2
 20251  03B1  2BF3               	goto	i1l7526
 20252  03B2  0878               	movf	_DimmerLights11,w
 20253  03B3  3E05               	addlw	5
 20254  03B4  0086               	movwf	6
 20255  03B5  3001               	movlw	1	; select bank2/3
 20256  03B6  0087               	movwf	7
 20257  03B7  0878               	movf	_DimmerLights11,w
 20258  03B8  3E04               	addlw	4
 20259  03B9  0084               	movwf	4
 20260  03BA  3001               	movlw	1	; select bank2/3
 20261  03BB  0085               	movwf	5
 20262  03BC  0800               	movf	0,w
 20263  03BD  0201               	subwf	1,w
 20264  03BE  1803               	skipnc
 20265  03BF  2BC8               	goto	i1l7518
 20266  03C0  0878               	movf	_DimmerLights11,w
 20267  03C1  3E04               	addlw	4
 20268  03C2  0086               	movwf	6
 20269  03C3  3001               	movlw	1	; select bank2/3
 20270  03C4  0087               	movwf	7
 20271  03C5  3001               	movlw	1
 20272  03C6  0281               	subwf	1,f
 20273  03C7  2BDF               	goto	i1l7522
 20274  03C8                     i1l7518:	
 20275  03C8  0878               	movf	_DimmerLights11,w
 20276  03C9  3E04               	addlw	4
 20277  03CA  0086               	movwf	6
 20278  03CB  3001               	movlw	1	; select bank2/3
 20279  03CC  0087               	movwf	7
 20280  03CD  0878               	movf	_DimmerLights11,w
 20281  03CE  3E05               	addlw	5
 20282  03CF  0084               	movwf	4
 20283  03D0  3001               	movlw	1	; select bank2/3
 20284  03D1  0085               	movwf	5
 20285  03D2  0800               	movf	0,w
 20286  03D3  0201               	subwf	1,w
 20287  03D4  1803               	skipnc
 20288  03D5  2BDF               	goto	i1l7522
 20289  03D6  3001               	movlw	1
 20290  03D7  00F2               	movwf	??_TMR0_ISR
 20291  03D8  0878               	movf	_DimmerLights11,w
 20292  03D9  3E04               	addlw	4
 20293  03DA  0086               	movwf	6
 20294  03DB  3001               	movlw	1	; select bank2/3
 20295  03DC  0087               	movwf	7
 20296  03DD  0872               	movf	??_TMR0_ISR,w
 20297  03DE  0781               	addwf	1,f
 20298  03DF                     i1l7522:	
 20299  03DF  0878               	movf	_DimmerLights11,w
 20300  03E0  3E05               	addlw	5
 20301  03E1  0086               	movwf	6
 20302  03E2  3001               	movlw	1	; select bank2/3
 20303  03E3  0087               	movwf	7
 20304  03E4  0878               	movf	_DimmerLights11,w
 20305  03E5  3E04               	addlw	4
 20306  03E6  0084               	movwf	4
 20307  03E7  3001               	movlw	1	; select bank2/3
 20308  03E8  0085               	movwf	5
 20309  03E9  0800               	movf	0,w
 20310  03EA  0601               	xorwf	1,w
 20311  03EB  1D03               	skipz
 20312  03EC  2C49               	goto	i1l7546
 20313  03ED  0878               	movf	_DimmerLights11,w
 20314  03EE  0086               	movwf	6
 20315  03EF  3001               	movlw	1	; select bank2/3
 20316  03F0  0087               	movwf	7
 20317  03F1  1101               	bcf	1,2
 20318  03F2  2C0E               	goto	i1l7532
 20319  03F3                     i1l7526:	
 20320  03F3  0878               	movf	_DimmerLights11,w
 20321  03F4  0086               	movwf	6
 20322  03F5  3001               	movlw	1	; select bank2/3
 20323  03F6  0087               	movwf	7
 20324  03F7  1E81               	btfss	1,5
 20325  03F8  2C14               	goto	i1l7534
 20326  03F9  0878               	movf	_DimmerLights11,w
 20327  03FA  3E04               	addlw	4
 20328  03FB  0086               	movwf	6
 20329  03FC  3001               	movlw	1	; select bank2/3
 20330  03FD  0087               	movwf	7
 20331  03FE  3001               	movlw	1
 20332  03FF  0281               	subwf	1,f
 20333  0400  0878               	movf	_DimmerLights11,w
 20334  0401  3E05               	addlw	5
 20335  0402  0086               	movwf	6
 20336  0403  3001               	movlw	1	; select bank2/3
 20337  0404  0087               	movwf	7
 20338  0405  0878               	movf	_DimmerLights11,w
 20339  0406  3E04               	addlw	4
 20340  0407  0084               	movwf	4
 20341  0408  3001               	movlw	1	; select bank2/3
 20342  0409  0085               	movwf	5
 20343  040A  0800               	movf	0,w
 20344  040B  0201               	subwf	1,w
 20345  040C  1C03               	skipc
 20346  040D  2C49               	goto	i1l7546
 20347  040E                     i1l7532:	
 20348  040E  0878               	movf	_DimmerLights11,w
 20349  040F  0086               	movwf	6
 20350  0410  3001               	movlw	1	; select bank2/3
 20351  0411  0087               	movwf	7
 20352  0412  1081               	bcf	1,1
 20353  0413  2C49               	goto	i1l7546
 20354  0414                     i1l7534:	
 20355  0414  3001               	movlw	1
 20356  0415  00F2               	movwf	??_TMR0_ISR
 20357  0416  0878               	movf	_DimmerLights11,w
 20358  0417  3E04               	addlw	4
 20359  0418  0086               	movwf	6
 20360  0419  3001               	movlw	1	; select bank2/3
 20361  041A  0087               	movwf	7
 20362  041B  0872               	movf	??_TMR0_ISR,w
 20363  041C  0781               	addwf	1,f
 20364  041D  0878               	movf	_DimmerLights11,w
 20365  041E  3E04               	addlw	4
 20366  041F  0086               	movwf	6
 20367  0420  3001               	movlw	1	; select bank2/3
 20368  0421  0087               	movwf	7
 20369  0422  0878               	movf	_DimmerLights11,w
 20370  0423  3E06               	addlw	6
 20371  0424  0084               	movwf	4
 20372  0425  3001               	movlw	1	; select bank2/3
 20373  0426  0085               	movwf	5
 20374  0427  0800               	movf	0,w
 20375  0428  0201               	subwf	1,w
 20376  0429  1C03               	skipc
 20377  042A  2C49               	goto	i1l7546
 20378  042B  0878               	movf	_DimmerLights11,w
 20379  042C  0086               	movwf	6
 20380  042D  3001               	movlw	1	; select bank2/3
 20381  042E  0087               	movwf	7
 20382  042F  1081               	bcf	1,1
 20383  0430  0878               	movf	_DimmerLights11,w
 20384  0431  0086               	movwf	6
 20385  0432  3001               	movlw	1	; select bank2/3
 20386  0433  0087               	movwf	7
 20387  0434  1301               	bcf	1,6
 20388  0435  0878               	movf	_DimmerLights11,w
 20389  0436  3E0C               	addlw	12
 20390  0437  0086               	movwf	6
 20391  0438  3001               	movlw	1	; select bank2/3
 20392  0439  0087               	movwf	7
 20393  043A  1401               	bsf	1,0
 20394  043B  0021               	movlb	1	; select bank1
 20395  043C  083A               	movf	_Dimmer^(0+128),w
 20396  043D  0086               	movwf	6
 20397  043E  0187               	clrf	7
 20398  043F  1401               	bsf	1,0
 20399  0440  0020               	movlb	0	; select bank0
 20400  0441  118C               	bcf	12,3	;volatile
 20401  0442  138E               	bcf	14,7	;volatile
 20402  0443  01F0               	clrf	i1setLoad_StatusOff@command
 20403  0444  0AF0               	incf	i1setLoad_StatusOff@command,f
 20404  0445  3001               	movlw	1
 20405  0446  319B  23E7  3182   	fcall	i1_setLoad_StatusOff
 20406  0449                     i1l7546:	
 20407  0449  0020               	movlb	0	; select bank0
 20408  044A  1F8C               	btfss	12,7	;volatile
 20409  044B  2C7F               	goto	i1l7556
 20410  044C  3001               	movlw	1
 20411  044D  00F2               	movwf	??_TMR0_ISR
 20412  044E  0878               	movf	_DimmerLights11,w
 20413  044F  3E08               	addlw	8
 20414  0450  0086               	movwf	6
 20415  0451  3001               	movlw	1	; select bank2/3
 20416  0452  0087               	movwf	7
 20417  0453  0872               	movf	??_TMR0_ISR,w
 20418  0454  0781               	addwf	1,f
 20419  0455  0878               	movf	_DimmerLights11,w
 20420  0456  3E04               	addlw	4
 20421  0457  0086               	movwf	6
 20422  0458  3001               	movlw	1	; select bank2/3
 20423  0459  0087               	movwf	7
 20424  045A  0801               	movf	1,w
 20425  045B  00F2               	movwf	??_TMR0_ISR
 20426  045C  01F3               	clrf	??_TMR0_ISR+1
 20427  045D  09F2               	comf	??_TMR0_ISR,f
 20428  045E  09F3               	comf	??_TMR0_ISR+1,f
 20429  045F  0AF2               	incf	??_TMR0_ISR,f
 20430  0460  1903               	skipnz
 20431  0461  0AF3               	incf	??_TMR0_ISR+1,f
 20432  0462  0872               	movf	??_TMR0_ISR,w
 20433  0463  3E78               	addlw	120
 20434  0464  00F4               	movwf	??_TMR0_ISR+2
 20435  0465  3000               	movlw	0
 20436  0466  3D73               	addwfc	??_TMR0_ISR+1,w
 20437  0467  00F5               	movwf	??_TMR0_ISR+3
 20438  0468  0878               	movf	_DimmerLights11,w
 20439  0469  3E08               	addlw	8
 20440  046A  0086               	movwf	6
 20441  046B  3001               	movlw	1	; select bank2/3
 20442  046C  0087               	movwf	7
 20443  046D  0875               	movf	??_TMR0_ISR+3,w
 20444  046E  3A80               	xorlw	128
 20445  046F  3C80               	sublw	128
 20446  0470  1D03               	skipz
 20447  0471  2C74               	goto	u687_25
 20448  0472  0874               	movf	??_TMR0_ISR+2,w
 20449  0473  0201               	subwf	1,w
 20450  0474                     u687_25:	
 20451  0474  1C03               	skipc
 20452  0475  2C7F               	goto	i1l7556
 20453  0476  0878               	movf	_DimmerLights11,w
 20454  0477  3E08               	addlw	8
 20455  0478  0086               	movwf	6
 20456  0479  3001               	movlw	1	; select bank2/3
 20457  047A  0087               	movwf	7
 20458  047B  0181               	clrf	1
 20459  047C  0020               	movlb	0	; select bank0
 20460  047D  138C               	bcf	12,7	;volatile
 20461  047E  120D               	bcf	13,4	;volatile
 20462  047F                     i1l7556:	
 20463                           
 20464                           ;MCU_B1.c: 148: Timer0->Count++;
 20465  047F  0021               	movlb	1	; select bank1
 20466  0480  0A6C               	incf	_Timer0^(0+128),w
 20467  0481  0086               	movwf	6
 20468  0482  0187               	clrf	7
 20469  0483  3001               	movlw	1
 20470  0484  0781               	addwf	1,f
 20471  0485  3141               	addfsr 1,1
 20472  0486  1803               	skipnc
 20473  0487  0A81               	incf	1,f
 20474                           
 20475                           ;MCU_B1.c: 149: if (Timer0->Count == 200) {
 20476  0488  0A6C               	incf	_Timer0^(0+128),w
 20477  0489  0086               	movwf	6
 20478  048A  0187               	clrf	7
 20479  048B  3F40               	moviw [0]fsr1
 20480  048C  3AC8               	xorlw	200
 20481  048D  1D03               	skipz
 20482  048E  2C91               	goto	u688_25
 20483  048F  3F41               	moviw [1]fsr1
 20484  0490  3A00               	xorlw	0
 20485  0491                     u688_25:	
 20486  0491  1D03               	skipz
 20487  0492  2C9E               	goto	i1l1317
 20488                           
 20489                           ;MCU_B1.c: 150: Timer0->Count = 0;
 20490  0493  0A6C               	incf	_Timer0^(0+128),w
 20491  0494  0086               	movwf	6
 20492  0495  0187               	clrf	7
 20493  0496  3000               	movlw	0
 20494  0497  3FC0               	movwi [0]fsr1
 20495  0498  3FC1               	movwi [1]fsr1
 20496                           
 20497                           ;MCU_B1.c: 151: TMain->T0_Timerout = 1;
 20498  0499  086B               	movf	_TMain^(0+128),w
 20499  049A  0086               	movwf	6
 20500  049B  3001               	movlw	1	; select bank2/3
 20501  049C  0087               	movwf	7
 20502  049D  1481               	bsf	1,1
 20503  049E                     i1l1317:	
 20504                           
 20505                           ;MCU_B1.c: 152: }
 20506                           ;MCU_B1.c: 155: if (Buz->GO) {
 20507  049E  0837               	movf	_Buz^(0+128),w
 20508  049F  0086               	movwf	6
 20509  04A0  3001               	movlw	1	; select bank2/3
 20510  04A1  0087               	movwf	7
 20511  04A2  1C81               	btfss	1,1
 20512  04A3  0008               	return
 20513                           
 20514                           ;MCU_B1.c: 156: Buz->Time++;
 20515  04A4  0A37               	incf	_Buz^(0+128),w
 20516  04A5  0086               	movwf	6
 20517  04A6  3001               	movlw	1	; select bank2/3
 20518  04A7  0087               	movwf	7
 20519  04A8  3001               	movlw	1
 20520  04A9  0781               	addwf	1,f
 20521  04AA  3141               	addfsr 1,1
 20522  04AB  1803               	skipnc
 20523  04AC  0A81               	incf	1,f
 20524  04AD  0008               	return
 20525  04AE                     __end_of_TMR0_ISR:	
 20526                           
 20527                           	psect	text140
 20528  1BE7                     __ptext140:	
 20529 ;; *************** function i1_setLoad_StatusOff *****************
 20530 ;; Defined at:
 20531 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 20532 ;; Parameters:    Size  Location     Type
 20533 ;;  lights          1    wreg     unsigned char 
 20534 ;;  command         1    0[COMMON] unsigned char 
 20535 ;; Auto vars:     Size  Location     Type
 20536 ;;  lights          1    1[COMMON] unsigned char 
 20537 ;; Return value:  Size  Location     Type
 20538 ;;		None               void
 20539 ;; Registers used:
 20540 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20541 ;; Tracked objects:
 20542 ;;		On entry : 0/0
 20543 ;;		On exit  : 0/0
 20544 ;;		Unchanged: 0/0
 20545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20546 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20549 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20550 ;;Total ram usage:        2 bytes
 20551 ;; Hardware stack levels used:    1
 20552 ;; This function calls:
 20553 ;;		Nothing
 20554 ;; This function is called by:
 20555 ;;		_TMR0_ISR
 20556 ;; This function uses a non-reentrant model
 20557 ;;
 20558                           
 20559                           
 20560                           ;psect for function i1_setLoad_StatusOff
 20561  1BE7                     i1_setLoad_StatusOff:	
 20562                           
 20563                           ;incstack = 0
 20564                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20565                           ;i1setLoad_StatusOff@lights stored from wreg
 20566  1BE7  00F1               	movwf	i1setLoad_StatusOff@lights
 20567                           
 20568                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20569  1BE8  087B               	movf	_Load,w
 20570  1BE9  3E46               	addlw	70
 20571  1BEA  0086               	movwf	6
 20572  1BEB  3002               	movlw	2	; select bank4/5
 20573  1BEC  0087               	movwf	7
 20574  1BED  0870               	movf	i1setLoad_StatusOff@command,w
 20575  1BEE  1081               	bcf	1,1
 20576  1BEF  1D03               	skipz
 20577  1BF0  1481               	bsf	1,1
 20578                           
 20579                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20580  1BF1  087B               	movf	_Load,w
 20581  1BF2  3E42               	addlw	66
 20582  1BF3  0086               	movwf	6
 20583  1BF4  3002               	movlw	2	; select bank4/5
 20584  1BF5  0087               	movwf	7
 20585  1BF6  3002               	movlw	2
 20586  1BF7  0281               	subwf	1,f
 20587                           
 20588                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20589  1BF8  0871               	movf	i1setLoad_StatusOff@lights,w
 20590  1BF9  3A01               	xorlw	1
 20591  1BFA  1D03               	skipz
 20592  1BFB  2C02               	goto	i1l7370
 20593                           
 20594                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20595  1BFC  087B               	movf	_Load,w
 20596  1BFD  3E43               	addlw	67
 20597  1BFE  0086               	movwf	6
 20598  1BFF  3002               	movlw	2	; select bank4/5
 20599  1C00  0087               	movwf	7
 20600  1C01  0181               	clrf	1
 20601  1C02                     i1l7370:	
 20602                           
 20603                           ;OverLoad_B1.c: 289: }
 20604                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20605  1C02  0871               	movf	i1setLoad_StatusOff@lights,w
 20606  1C03  3A02               	xorlw	2
 20607  1C04  1D03               	skipz
 20608  1C05  2C0C               	goto	i1l7374
 20609                           
 20610                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20611  1C06  087B               	movf	_Load,w
 20612  1C07  3E44               	addlw	68
 20613  1C08  0086               	movwf	6
 20614  1C09  3002               	movlw	2	; select bank4/5
 20615  1C0A  0087               	movwf	7
 20616  1C0B  0181               	clrf	1
 20617  1C0C                     i1l7374:	
 20618                           
 20619                           ;OverLoad_B1.c: 292: }
 20620                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20621  1C0C  0871               	movf	i1setLoad_StatusOff@lights,w
 20622  1C0D  3A03               	xorlw	3
 20623  1C0E  1D03               	skipz
 20624  1C0F  0008               	return
 20625                           
 20626                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20627  1C10  087B               	movf	_Load,w
 20628  1C11  3E45               	addlw	69
 20629  1C12  0086               	movwf	6
 20630  1C13  3002               	movlw	2	; select bank4/5
 20631  1C14  0087               	movwf	7
 20632  1C15  0181               	clrf	1
 20633  1C16  0008               	return
 20634  1C17                     __end_ofi1_setLoad_StatusOff:	
 20635                           
 20636                           	psect	text141
 20637  1A98                     __ptext141:	
 20638 ;; *************** function _IOC_ISR *****************
 20639 ;; Defined at:
 20640 ;;		line 328 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20641 ;; Parameters:    Size  Location     Type
 20642 ;;		None
 20643 ;; Auto vars:     Size  Location     Type
 20644 ;;		None
 20645 ;; Return value:  Size  Location     Type
 20646 ;;		None               void
 20647 ;; Registers used:
 20648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20649 ;; Tracked objects:
 20650 ;;		On entry : 0/0
 20651 ;;		On exit  : 0/0
 20652 ;;		Unchanged: 0/0
 20653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20658 ;;Total ram usage:        1 bytes
 20659 ;; Hardware stack levels used:    1
 20660 ;; Hardware stack levels required when called:    1
 20661 ;; This function calls:
 20662 ;;		_setDimmerReClock
 20663 ;; This function is called by:
 20664 ;;		_ISR
 20665 ;; This function uses a non-reentrant model
 20666 ;;
 20667                           
 20668                           
 20669                           ;psect for function _IOC_ISR
 20670  1A98                     _IOC_ISR:	
 20671                           
 20672                           ;MCU_B1.c: 329: if (IOCIE && IOCBF2) {
 20673                           
 20674                           ;incstack = 0
 20675                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20676  1A98  1D8B               	btfss	11,3	;volatile
 20677  1A99  0008               	return
 20678  1A9A  0027               	movlb	7	; select bank7
 20679  1A9B  1D16               	btfss	22,2	;volatile
 20680  1A9C  0008               	return
 20681                           
 20682                           ;MCU_B1.c: 330: IOCBF2 = 0;
 20683  1A9D  1116               	bcf	22,2	;volatile
 20684                           
 20685                           ;MCU_B1.c: 331: IOCIF = 0;
 20686  1A9E  100B               	bcf	11,0	;volatile
 20687                           
 20688                           ;MCU_B1.c: 332: if (TMain->PowerON) {
 20689  1A9F  0021               	movlb	1	; select bank1
 20690  1AA0  086B               	movf	_TMain^(0+128),w
 20691  1AA1  0086               	movwf	6
 20692  1AA2  3001               	movlw	1	; select bank2/3
 20693  1AA3  0087               	movwf	7
 20694  1AA4  1C01               	btfss	1,0
 20695  1AA5  0008               	return
 20696                           
 20697                           ;MCU_B1.c: 336: setDimmerReClock();
 20698  1AA6  31A7  2704  319A   	fcall	_setDimmerReClock
 20699                           
 20700                           ;MCU_B1.c: 337: if (RB2) {
 20701  1AA9  0020               	movlb	0	; select bank0
 20702  1AAA  1D0D               	btfss	13,2	;volatile
 20703  1AAB  2AB3               	goto	i1l7462
 20704                           
 20705                           ;MCU_B1.c: 338: Dimmer->Correction = 0;
 20706  1AAC  0021               	movlb	1	; select bank1
 20707  1AAD  083A               	movf	_Dimmer^(0+128),w
 20708  1AAE  3E02               	addlw	2
 20709  1AAF  0086               	movwf	6
 20710  1AB0  0187               	clrf	7
 20711  1AB1  0181               	clrf	1
 20712                           
 20713                           ;MCU_B1.c: 339: } else {
 20714  1AB2  0008               	return
 20715  1AB3                     i1l7462:	
 20716                           
 20717                           ;MCU_B1.c: 340: Dimmer->Correction = 8;
 20718  1AB3  3008               	movlw	8
 20719  1AB4  00F0               	movwf	??_IOC_ISR
 20720  1AB5  0021               	movlb	1	; select bank1
 20721  1AB6  083A               	movf	_Dimmer^(0+128),w
 20722  1AB7  3E02               	addlw	2
 20723  1AB8  0086               	movwf	6
 20724  1AB9  0187               	clrf	7
 20725  1ABA  0870               	movf	??_IOC_ISR,w
 20726  1ABB  0081               	movwf	1
 20727  1ABC  0008               	return
 20728  1ABD                     __end_of_IOC_ISR:	
 20729                           
 20730                           	psect	text142
 20731  2704                     __ptext142:	
 20732 ;; *************** function _setDimmerReClock *****************
 20733 ;; Defined at:
 20734 ;;		line 165 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20735 ;; Parameters:    Size  Location     Type
 20736 ;;		None
 20737 ;; Auto vars:     Size  Location     Type
 20738 ;;		None
 20739 ;; Return value:  Size  Location     Type
 20740 ;;		None               void
 20741 ;; Registers used:
 20742 ;;		wreg, fsr1l, fsr1h
 20743 ;; Tracked objects:
 20744 ;;		On entry : 0/0
 20745 ;;		On exit  : 0/0
 20746 ;;		Unchanged: 0/0
 20747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20752 ;;Total ram usage:        0 bytes
 20753 ;; Hardware stack levels used:    1
 20754 ;; This function calls:
 20755 ;;		Nothing
 20756 ;; This function is called by:
 20757 ;;		_IOC_ISR
 20758 ;; This function uses a non-reentrant model
 20759 ;;
 20760                           
 20761                           
 20762                           ;psect for function _setDimmerReClock
 20763  2704                     _setDimmerReClock:	
 20764                           
 20765                           ;MCU_B1.c: 166: TMR0 = 255;
 20766                           
 20767                           ;incstack = 0
 20768                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20769  2704  30FF               	movlw	255
 20770  2705  0020               	movlb	0	; select bank0
 20771  2706  0095               	movwf	21	;volatile
 20772                           
 20773                           ;MCU_B1.c: 171: if (!DimmerLights11->GO) {
 20774  2707  0878               	movf	_DimmerLights11,w
 20775  2708  0086               	movwf	6
 20776  2709  3001               	movlw	1	; select bank2/3
 20777  270A  0087               	movwf	7
 20778  270B  1801               	btfsc	1,0
 20779  270C  0008               	return
 20780                           
 20781                           ;MCU_B1.c: 172: DimmerLights11->GO = 1;
 20782  270D  0878               	movf	_DimmerLights11,w
 20783  270E  0086               	movwf	6
 20784  270F  3001               	movlw	1	; select bank2/3
 20785  2710  0087               	movwf	7
 20786  2711  1401               	bsf	1,0
 20787  2712  0008               	return
 20788  2713                     __end_of_setDimmerReClock:	
 20789                           
 20790                           	psect	text143
 20791  2658                     __ptext143:	
 20792 ;; *************** function _INT_ISR *****************
 20793 ;; Defined at:
 20794 ;;		line 281 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20795 ;; Parameters:    Size  Location     Type
 20796 ;;		None
 20797 ;; Auto vars:     Size  Location     Type
 20798 ;;		None
 20799 ;; Return value:  Size  Location     Type
 20800 ;;		None               void
 20801 ;; Registers used:
 20802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20803 ;; Tracked objects:
 20804 ;;		On entry : 0/0
 20805 ;;		On exit  : 0/0
 20806 ;;		Unchanged: 0/0
 20807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20812 ;;Total ram usage:        0 bytes
 20813 ;; Hardware stack levels used:    1
 20814 ;; Hardware stack levels required when called:    2
 20815 ;; This function calls:
 20816 ;;		_setRF_ReceiveGO
 20817 ;; This function is called by:
 20818 ;;		_ISR
 20819 ;; This function uses a non-reentrant model
 20820 ;;
 20821                           
 20822                           
 20823                           ;psect for function _INT_ISR
 20824  2658                     _INT_ISR:	
 20825                           
 20826                           ;MCU_B1.c: 282: if (INTE && INTF) {
 20827                           
 20828                           ;incstack = 0
 20829                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20830  2658  1E0B               	btfss	11,4	;volatile
 20831  2659  0008               	return
 20832  265A  1C8B               	btfss	11,1	;volatile
 20833  265B  0008               	return
 20834                           
 20835                           ;MCU_B1.c: 283: INTF = 0;
 20836  265C  108B               	bcf	11,1	;volatile
 20837                           
 20838                           ;MCU_B1.c: 284: INTE = 0;
 20839  265D  120B               	bcf	11,4	;volatile
 20840                           
 20841                           ;MCU_B1.c: 285: setRF_ReceiveGO(1, 1);
 20842  265E  01F2               	clrf	setRF_ReceiveGO@command
 20843  265F  0AF2               	incf	setRF_ReceiveGO@command,f
 20844  2660  3001               	movlw	1
 20845  2661  31A6  26D0         	fcall	_setRF_ReceiveGO
 20846  2663  0008               	return
 20847  2664                     __end_of_INT_ISR:	
 20848                           
 20849                           	psect	text144
 20850  26D0                     __ptext144:	
 20851 ;; *************** function _setRF_ReceiveGO *****************
 20852 ;; Defined at:
 20853 ;;		line 36 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 20854 ;; Parameters:    Size  Location     Type
 20855 ;;  rf              1    wreg     unsigned char 
 20856 ;;  command         1    2[COMMON] unsigned char 
 20857 ;; Auto vars:     Size  Location     Type
 20858 ;;  rf              1    3[COMMON] unsigned char 
 20859 ;; Return value:  Size  Location     Type
 20860 ;;		None               void
 20861 ;; Registers used:
 20862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20863 ;; Tracked objects:
 20864 ;;		On entry : 0/0
 20865 ;;		On exit  : 0/0
 20866 ;;		Unchanged: 0/0
 20867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20868 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20871 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20872 ;;Total ram usage:        2 bytes
 20873 ;; Hardware stack levels used:    1
 20874 ;; Hardware stack levels required when called:    1
 20875 ;; This function calls:
 20876 ;;		i1_RfPointSelect
 20877 ;; This function is called by:
 20878 ;;		_INT_ISR
 20879 ;; This function uses a non-reentrant model
 20880 ;;
 20881                           
 20882                           
 20883                           ;psect for function _setRF_ReceiveGO
 20884  26D0                     _setRF_ReceiveGO:	
 20885                           
 20886                           ;incstack = 0
 20887                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20888                           ;setRF_ReceiveGO@rf stored from wreg
 20889  26D0  00F3               	movwf	setRF_ReceiveGO@rf
 20890                           
 20891                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 20892  26D1  0873               	movf	setRF_ReceiveGO@rf,w
 20893  26D2  31A6  2600         	fcall	i1_RfPointSelect
 20894                           
 20895                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 20896  26D4  0021               	movlb	1	; select bank1
 20897  26D5  083E               	movf	_RF^(0+128),w
 20898  26D6  0086               	movwf	6
 20899  26D7  0187               	clrf	7
 20900  26D8  0872               	movf	setRF_ReceiveGO@command,w
 20901  26D9  1081               	bcf	1,1
 20902  26DA  1D03               	skipz
 20903  26DB  1481               	bsf	1,1
 20904  26DC  0008               	return
 20905  26DD                     __end_of_setRF_ReceiveGO:	
 20906                           
 20907                           	psect	text145
 20908  2600                     __ptext145:	
 20909 ;; *************** function i1_RfPointSelect *****************
 20910 ;; Defined at:
 20911 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 20912 ;; Parameters:    Size  Location     Type
 20913 ;;  rf              1    wreg     unsigned char 
 20914 ;; Auto vars:     Size  Location     Type
 20915 ;;  rf              1    1[COMMON] unsigned char 
 20916 ;; Return value:  Size  Location     Type
 20917 ;;		None               void
 20918 ;; Registers used:
 20919 ;;		wreg
 20920 ;; Tracked objects:
 20921 ;;		On entry : 0/0
 20922 ;;		On exit  : 0/0
 20923 ;;		Unchanged: 0/0
 20924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20929 ;;Total ram usage:        2 bytes
 20930 ;; Hardware stack levels used:    1
 20931 ;; This function calls:
 20932 ;;		Nothing
 20933 ;; This function is called by:
 20934 ;;		_setRF_ReceiveGO
 20935 ;; This function uses a non-reentrant model
 20936 ;;
 20937                           
 20938                           
 20939                           ;psect for function i1_RfPointSelect
 20940  2600                     i1_RfPointSelect:	
 20941                           
 20942                           ;incstack = 0
 20943                           ; Regs used in i1_RfPointSelect: [wreg]
 20944                           ;i1RfPointSelect@rf stored from wreg
 20945  2600  00F1               	movwf	i1RfPointSelect@rf
 20946                           
 20947                           ;RF_Control_B1.c: 9: if (rf == 1) {
 20948  2601  0871               	movf	i1RfPointSelect@rf,w
 20949  2602  3A01               	xorlw	1
 20950  2603  1D03               	skipz
 20951  2604  0008               	return
 20952                           
 20953                           ;RF_Control_B1.c: 10: RF = &RF1;
 20954  2605  30E4               	movlw	_RF1& (0+255)
 20955  2606  00F0               	movwf	??i1_RfPointSelect
 20956  2607  0870               	movf	??i1_RfPointSelect,w
 20957  2608  0021               	movlb	1	; select bank1
 20958  2609  00BE               	movwf	_RF^(0+128)
 20959  260A  0008               	return
 20960  260B                     __end_ofi1_RfPointSelect:	
 20961  007E                     btemp	set	126	;btemp
 20962  007E                     pic14e$flags	set	126
 20963  007E                     wtemp	set	126
 20964  007E                     wtemp0	set	126
 20965  0080                     wtemp1	set	128
 20966  0082                     wtemp2	set	130
 20967  0084                     wtemp3	set	132
 20968  0086                     wtemp4	set	134
 20969  0088                     wtemp5	set	136
 20970  007F                     wtemp6	set	127
 20971  007E                     ttemp	set	126
 20972  007E                     ttemp0	set	126
 20973  0081                     ttemp1	set	129
 20974  0084                     ttemp2	set	132
 20975  0087                     ttemp3	set	135
 20976  007F                     ttemp4	set	127
 20977  007E                     ltemp	set	126
 20978  007E                     ltemp0	set	126
 20979  0082                     ltemp1	set	130
 20980  0086                     ltemp2	set	134
 20981  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     80      80
    BANK1            80      0      78
    BANK2            80      0      74
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 17
		 -> NULL(NULL[0]), VarTMain(BANK2[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  109493
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21707
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21707
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     182      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     182      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 03 17:12:00 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _PF 00BD                                       _RD 0CA8  
                                     _RF 00BE                  __end_of_CC2500_WriteREG 1910  
                                     _WR 0CA9                                       _Sw 0079  
     __end_of_getDimmerLights_StatusFlag 26B8               _getDimmerLights_StatusFlag 26AC  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 1254  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1C78  
                   _setDimmerLights_Main 160D                             ___ftadd@sign 0048  
                                    l304 1C3B                                      l307 1C41  
                                    l271 1E12                                      l280 1E44  
                                    l337 18EA                                      l361 2766  
                                    l338 18EC                                      l291 1326  
                                    l276 1E3C                                      l373 1AC2  
                                    l349 18FF                                      l277 1E41  
                                    l367 1968                                      l287 1315  
                                    l628 1BE5                                      l818 1174  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000C                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0162  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BC  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E4                                      _ISR 0004  
                                    _WDT 00ED          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0159                                      _Buz 00B7  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 18F7  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2664  
                        __end_of_ADC_Set 25D5                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 09C6                    _setDimmerLights_ERROR 1092  
                  _setDimmerLights_AdjRF 1A76                    _setDimmerLights_AdjGo 27BE  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 278E  
                                   ?_ISR 0070                          _PowerFault_Main 2579  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1ABD  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2022 0FF7                                     l2026 102B  
               ?_DimmerLightsPointSelect 0070                                     l3052 12E5  
                                   l1349 18BA                                     l1375 1CA2  
                                   l2248 1F1B                                     l1561 1F9B  
                                   l3081 0D94                                     l3058 12FC  
                                   l2275 1DB1                          __end_of_IOC_Set 26F7  
                                   l2537 25A2                                     l1762 1F51  
                                   l6060 123A                                     l6054 1227  
                                   l6064 1246                                     l6154 1CE8  
                                   l6306 1D9F                                     l6058 122D  
                                   l2891 19BC                                     l8004 085A  
                                   l8100 129C                                     l6190 19A6  
                                   l5710 0D6A                                     l5702 0D4D  
                                   l8008 087E                                     l5640 12CC  
                                   l8104 12A2                                     l6192 19AC  
                                   l5720 0D86                                     l5712 0D6F  
                                   l9000 04F9                                     l7402 07B5  
                                   l5650 12F2                                     l5642 12D1  
                                   l5634 12BB                                     l8122 1CCF  
                                   l6450 1E24                                     l5730 0DB8  
                                   l5722 0D90                                     l5714 0D73  
                                   l5810 0CA9                                     l9010 052B  
                                   l7404 07BB                                     l8036 13D2  
                                   l8108 12A8                                     l5740 0DD3  
                                   l5708 0D60                                     l5900 1BC5  
                                   l8212 08F9                                     l5638 12C2  
                                   l5750 0BAF                                     l8070 1264  
                                   l8118 1CC4                                     l8054 1C63  
                                   l5726 0DA6                                     l5822 0CC5  
                                   l5814 0CB1                                     l7408 07C3  
                                   l5648 12EA                                     l8160 0A30  
                                   l5680 0D1D                                     l5912 1BD7  
                                   l5904 1BCB                                     l8208 08E3  
                                   l9024 0570                                     l5770 0C06  
                                   l5842 1792                                     l8074 126A  
                                   l8058 1C6D                                     l7354 1D37  
                                   l7346 1D19                                     l8242 116B  
                                   l9210 007A                                     l5690 0D33  
                                   l5826 0CCD                                     l9034 05A3  
                                   l5668 1A1B                                     l5756 0BC5  
                                   l5860 17C2                                     l8084 127A  
                                   l8092 1286                                     l9108 0E64  
                                   l7348 1D25                                     l8244 1170  
                                   l5684 0D24                                     l5916 1BDD  
                                   l5908 1BD1                                     l8324 1518  
                                   l5870 17E6                                     l5862 17D0  
                                   l5942 1A3E                                     l8078 1270  
                                   l7358 1D40                                     l8238 1158  
                                   l8318 14FD                                     l5872 17E9  
                                   l8088 1280                                     l9152 1E8C  
                                   l9304 02A2                                     l9232 00F5  
                                   l5792 0C58                                     l8328 1521  
                                   l9400 15D8                                     l5778 0C1F  
                                   l5946 1A49                                     l8418 1C86  
                                   l6922 1D79                                     l9226 00C7  
                                   l8370 1369                                     l7396 0789  
                                   l5876 17F7                                     l5868 17DD  
                                   l9252 01A6                                     l8356 1338  
                                   l9180 0AAE                                     l8382 1AD3  
                                   l6926 1D80                                     l9270 020E  
                                   l9246 018A                                     l9254 01BE  
                                   l8358 1350                                     l5798 0C6E  
                                   l8198 08BF                                     l8462 1F48  
                                   l9174 0A7D                                     l9334 1425  
                                   l8384 1ADE                                     l9264 01F5  
                                   l8552 112F                                     l9184 0AB6  
                                   l8394 1DDC                                     l9282 023E  
                                   l9290 0277                                     l8802 063B  
                                   l9292 027A                                     l9380 1747  
                                   l8900 0FEB                                     l8804 0644  
                                   l9196 0AED                                     l8486 105C  
                                   l8680 164D                                     l8760 146D  
                                   l8682 1656                                     l8674 163A  
                                   l8754 1454                                     l9298 0290  
                                   l8498 1072                                     l8922 0950  
                                   l8586 1576                                     l8842 06E9  
                                   l8826 06AA                                     l8692 167C  
                                   l8764 14B4                                     l9388 1773  
                                   l8932 0970                                     l8836 06D8  
                                   l9396 15C2                                     l8918 0947  
                                   l8838 06DE                                     l7984 19B6  
                                   l8864 0F2B                                     l8960 09BB  
                                   l8944 098C                                     _CFGS 0CAE  
                                   l8890 0FC8                                     l8866 0F36  
                                   l8946 0990                                     l8886 0FA5  
                                   l8984 04C4                                     l8898 0FE5  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 2664  
                                   _LATC 010E                                     u4025 0D74  
                                   u4125 0BD7                                     u4205 0C7A  
                                   u4135 0BE7                                     u4055 0D87  
                                   u4215 0C8A                                     u4145 0C07  
                                   u4155 0C16                                     u4315 1799  
                                   u4235 0CB2                                     u4165 0C20  
                                   u4245 0CB8                                     u4345 17C3  
                                   u4275 0CCE                                     _PEIE 005E  
                                   u4285 0CD4                                     _INTE 005C  
                                   _INTF 0059                                     u3815 12ED  
                                   u4375 17DE                                     u3845 1303  
                                   u3775 12C7                                     u6505 1D30  
                                   u3795 12E0                                     u6515 1D38  
                                   u8045 1AC8                                     u3965 0D4E  
                                   u7505 19BD                                     u7515 19C2  
                                   u9115 1E73                                     u6475 1D1C  
                                   u3995 0D61                                     u9205 0AD9  
                                   u6495 1D26                                     u6585 0745  
                                   u7570 1381                                     u7810 25F5  
                                   u9165 0A98                                     u7575 137F  
                                   u9335 01D6                                     u9505 1716  
                                   u9515 175D                                     u9285 0141  
                                   u9455 1414                                     u9465 143D  
                                   u9485 1FEE                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 25AD                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 014D  
                                   __WDT 00E7                                     _Load 007B  
                                   _Temp 007A                                     _main 159B  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 2579  
                    __end_of_DlyOff_Main 16FC                          __end_of_RF_Main 259E  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 18DE  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 2704                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1000                      DelayTimejudge@value 0022  
                          _RfPointSelect 2694               __end_of_setRFSW_AdjControl 1DC7  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 011D  
                                  ??_ISR 0076                             ___fttol@exp1 0058  
                           ___fttol@lval 0054                         __end_of_LED_Main 1872  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 0023  
                  __end_of_setLoad_Count 18B0                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 0DEB  
                        __end_of___ftdiv 0C41                          __end_of___ftmul 0CF5  
                        __end_of___fttol 1800             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                          __end_of___lwdiv 1D47  
                 _setDimmerLights_Switch 276E            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E9                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E             __size_ofi1_setLoad_StatusOff 0030  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                                    _TMain 00EB  
                          setRF_Learn@rf 0023                                    _MainT 16FC  
                                  _Load1 0220                            __CFG_WRT$HALF 0000  
                                  _Temp1 013F                         __end_of_TMR0_ISR 04AE  
           __size_of_CC2500_WriteCommand 0010                         __end_of_TMR0_Set 2704  
                                  _getAD 18B0                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 119D            DimmerLights_Exceptions@status 002A  
                          ___ftpack@sign 0024                           _setLoad_Enable 279E  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1996              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E0  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 27EF                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 1377  
            __size_of_Flash_Memory_Write 0031                   ??_MainT_Initialization 0020  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
               setLoad_StatusOff@command 0020         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0070                setDimmerLights_Main@clear 0065  
                  setLoad_Enable@command 0020                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 119D                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                     __end_of_getLoad_Safe 264D  
                      ??_setPercentValue 0059                             __end_of_main 160D  
                    ?_setRF_DimmerLights 005D                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0A5C  
                   _setSw_Initialization 27AE               __size_of_setLoad_StatusOff 0031  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 14BC  
                 ?_Buzzer_Initialization 0070                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 257C                               _Receive_OK 03E0  
                              ??_IOC_ISR 0070                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 2621  
                                 ?_MainT 0070                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                   ?_setDimmerLights_Clear 0022  
                ??_Switch_Initialization 0025                   __end_of_setLoad_Enable 27AE  
                   __end_of_getTemp_Safe 25CE                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 1683                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
             i1setLoad_StatusOff@command 0070                        ?_getPowerFault_AD 0070  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 1A32                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1313                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 277E                                   i1l1317 049E  
                                 i1l7510 03A6                                   i1l7504 038D  
                                 i1l7512 03AC                                   i1l7370 1C02  
                                 i1l7522 03DF                                   i1l7506 0393  
                                 i1l7532 040E                                   i1l7462 1AB3  
                                 i1l7374 1C0C                                   i1l7534 0414  
                                 i1l7518 03C8                                   i1l7526 03F3  
                                 i1l7546 0449                                   i1l7556 047F  
                                 i1l7486 0343                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                       __size_of_Load_Main 029D  
                                 u670_25 0326                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   u687_25 0474  
                                 _IO_Set 0800                                   u688_25 0491  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                             _VarProduct 01C5                    _Dimmer_Initialization 25B9  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 189B  
                                 _Dimmer 00BA                                   _DlySw1 00D0  
            __size_of_setLoad_Exceptions 004A               __end_of_Mcu_Initialization 195F  
                    __end_of_Buzzer_Main 07D4                                   _Memory 00EA  
                                 _Timer0 00EC       __end_of_setDimmerLights_TriggerAdj 27DE  
             _setDimmerLights_TriggerAdj 27CE            setDimmerLights_Switch@command 0022  
                                 ___wmul 19B3                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000C                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                              ??___lwdiv 0024                          i1_RfPointSelect 2600  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C5                                   _s_data 00C6  
                                 _setLED 1254                         _DimmerLightsIntr 00BB  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 0819                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 26EA         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 262C                          ?_setLoad_Enable 0070  
                getPowerFault_AD@channel 0028                            ?_setRF_Enable 0022  
                         _setTemp_Enable 2637                          _RfSWPointSelect 2688  
           __size_of_Flash_Memory_Modify 006E              __size_of_DimmerLights_Close 001B  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 25A2  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 11F8  
       __end_of_CC2500_registers_address 182F     __end_of_setPowerFault_Initialization 2800  
  __size_of_setPowerFault_Initialization 0011             _setPowerFault_Initialization 27EF  
                __end_of__initialization 0049              ??_PowerFault_Initialization 0021  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                            __end_of_MainT 1779  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 19F0  
                          __end_of_getAD 18C6                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070                   setLoad_AH_AL_Restore@i 0021  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 26C4  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 005B  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                        __end_of_Load_Main 02EA  
                       ?_PowerFault_Main 0070                 __end_of_setDimmerReClock 2713  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 2642                        ?_CC2500_WriteByte 0070  
                                ??_MainT 002A                           ??_setRF_Enable 0023  
                         _DimmerLights11 0078                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 257C                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002B             setDimmerLights_Switch@lights 0023  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                            _Buzzer_Main 071B                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 2582                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                _DelayOff_Initialization 258E                               __pnvCOMMON 007D  
                  __size_of_getLoad_Safe 000B            ?_setPowerFault_Initialization 0070  
                             _getPF_Safe 25E5                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0077  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 260B  
                    i1_setLoad_StatusOff 1BE7                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 000F  
                            setBuz@count 0029                               __pmaintext 159B  
                    _CC2500_WriteCommand 275E                     ?_Temp_Initialization 0070  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0072                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0A5C  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A6  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 25CE                _PowerFault_Initialization 2576  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13E2  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 25DC  
                  __size_of_getTemp_Safe 0007                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1D87                  __end_of_RfSWPointSelect 2694  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0070  
                                _IOC_ISR 1A98                          ?_setTemp_Enable 0070  
                                _IOC_Set 26EA                     __size_of_setLog_Code 0048  
                                _INT_ISR 2658                                  _INT_Set 25A7  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1E4F  
                      _Flash_Memory_Read 1910                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 2642  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 259A                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 18C6  
        __end_of_setControl_Lights_Table 152A                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 10E9                          _setPercentValue 1E94  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0070                                  _Dimmer1 00E1  
           __end_of_CC2500_FrequencyCabr 267C                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D9                                  _VarLED2 00DD  
                      __end_of_getRxData 1092               __end_of_setPowerFault_Main 1000  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 278E  
                                _Product 007D                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 25C7                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 277E                                  ___ftadd 0CF5  
                         ??_setSw_Enable 0022                                  ___ftdiv 0B98  
                        __size_of___wmul 001E                                  ___ftmul 0C41  
                                ___fttol 1779                      __end_of_Switch_Main 25A2  
                                ___lwdiv 1D10                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0089                           ??_setSw_Status 0023  
                                __ptext1 13E2                                  __ptext2 1FB5  
                                __ptext3 0A5C                                  __ptext4 18B0  
                                __ptext5 197A                                  __ptext6 0002  
                                __ptext7 257F                                  __ptext8 05F8  
                                __ptext9 1F22                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0071                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1E94                __end_of_Flash_Memory_Read 1929  
                             _setRF_Main 0932                            _DelayOff_Main 2592  
                      _DimmerLights_Main 25C0                        __end_of_setINT_GO 25F7  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 2616                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 2586                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 258A            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                         _LedPointSelect 1A32                      _DelayOffPointSelect 267C  
                                clrloop0 25B4           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 2600                     end_of_initialization 0049  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 262C  
                      _CC2500_InitSetREG 1B0B                            _DelayTime_1us 1ABD  
                      __end_of_setTxData 0B98               __end_of_Flash_Memory_Write 1CA9  
                                init_ram 25AD                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 25AE                               _setSw_Main 04AE  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 195F  
                            ?_getPF_Safe 0070                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 27DE  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 0014  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 1313  
                          _CC2500_TxData 1E0B                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B8C           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 004B  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 144E                  _DimmerLights_Exceptions 1142  
                            ?_getLoad_AD 0070                             __pstringtext 1800  
                    _Flash_Memory_Unlock 25DC                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070                         _setLoad_StatusOn 1CA9  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 25C7  
                     _Mcu_Initialization 1944                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4539 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1A54  
                __end_of_Sw_DimmerOnFunc 1142                  __end_of_setPercentValue 1EDA  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1B35  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 1045  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1DC7  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 197A  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 1FB5  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 0819  
                   _setRF_Initialization 25D5                              _Switch_Main 259E  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 2616                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1886                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 002C  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 19D1  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0076                           __end_of_setLED 12B2  
                         __end_of_setBuz 08A2                            _setLoad_Count 189B  
                   _CC2500_FrequencyCabr 2670                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 08A2                        __size_of_WDT_Main 001C  
                    __size_of_getPF_Safe 0009                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1CDB  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1944  
                              _Load_Main 004D                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0070                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 19F0          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 071B                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 2740  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D5                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 2731  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 26A0  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00C7  
                              _Temp_Main 257F                ??_DimmerLights_Exceptions 002A  
          setOverTemp_Exceptions@command 002C                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C1                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C3  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 258A               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1D10                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$3951 006B  
                            __pbssCOMMON 0077                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1F22  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0131                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002C  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1A76  
                __size_of_setRF_RxStatus 000F                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00EA              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 0094                         ___lwdiv@dividend 0022  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0026  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 264D                         _getPowerFault_AD 1FB5  
      __size_of_setPowerFault_Exceptions 0045      __end_of_Flash_Memory_Initialization 0EE3  
            _Flash_Memory_Initialization 0DEB                ?_setPowerFault_Exceptions 0070  
                              __ptext100 1B8C                                __ptext101 25B9  
                              __ptext110 1779                                __ptext102 2592  
                              __ptext111 0B98                                __ptext103 1683  
                              __ptext120 19B3                                __ptext112 1A10  
                              __ptext104 0AF2                                __ptext121 258E  
                              __ptext113 12B2                                __ptext105 2694  
                              __ptext130 2670                                __ptext122 260B  
                              __ptext114 2713                                __ptext106 2722  
                              __ptext131 1ABD                                __ptext123 267C  
                              __ptext115 2688                                __ptext107 2621  
                              __ptext140 1BE7                                __ptext132 2586  
                              __ptext124 1886                                __ptext116 277E  
                              __ptext108 1377                                __ptext141 1A98  
                              __ptext133 2582                                __ptext125 258A  
                              __ptext117 276E                                __ptext109 1E94  
                               ?___ftadd 003E                                __ptext142 2704  
                              __ptext134 275E                                __ptext126 1C17  
                              __ptext118 2616                                __ptext143 2658  
                              __ptext135 18DE                                __ptext127 1B0B  
                              __ptext119 0819                                __ptext144 26D0  
                              __ptext136 071B                                __ptext128 19D1  
                              __ptext145 2600                                __ptext137 2664  
                              __ptext129 18F7                                __ptext139 02EA  
                              _getRxData 1045                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 0932  
                        _setRF_ReceiveGO 26D0                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 2670                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002A  
                     __end_of_TouchPower 25A7                       _setPowerFault_Main 0EE3  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0021  
                    __size_of_setSw_Main 014A            __end_of_setDimmerLights_ERROR 10E9  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1A98  
          __end_of_setDimmerLights_AdjGo 27CE                   CC2500_WriteByte@loop_a 0021  
         __size_of_setDimmerLights_Clear 0010            __end_of_setDimmerLights_Clear 279E  
                         __size_of_MainT 007D                                _r_address 00C4  
           __end_of_CC2500_patable_vaule 1866                         __CFG_WDTE$SWDTEN 0000  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0016  
                           _setRF_Enable 1B60                         ___lwdiv@quotient 0025  
                __size_of_DelayTimejudge 002E                            _SwPointSelect 2621  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 25EE  
                    __end_of_setLED_Main 1D87                 __end_of_setLoad_StatusOn 1CDB  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 257F  
                      _CC2500_rfSettings 182F                           ___wmul@product 0024  
                               _LED_Main 1866                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 25B3  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0AF2  
    __end_of_DimmerLights_Initialization 26AC              _DimmerLights_Initialization 26A0  
                     _CC2500_ClearRXFIFO 2582                       _CC2500_ClearTXFIFO 2586  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 275E  
                   ??_setPowerFault_Main 002D                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                       _Flash_Memory_Write 1C78  
                             ?_getRxData 0070                                 _TMR0_ISR 02EA  
                           ??_getLoad_AD 0024                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027              __end_ofi1_setLoad_StatusOff 1C17  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 26F7  
                       _Sw_DimmerAdjFunc 07D4                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                          ??_setLoad_Count 0020  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 1B0B                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 276E                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 197A                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 152A                    __size_of_setTemp_Main 0123  
           __end_of_MainT_Initialization 1886                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 000F                                 _DelayOff 00B9  
                           setSw_Main@sw 0068                              ??_Load_Main 002D  
                     __end_of_getPF_Safe 25EE                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 26C4  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 1F22  
                  _DlyOff_Initialization 260B                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0070                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 185E  
                       __size_of_RF_Main 0004                         __size_of_WDT_Set 0018  
                 setLoad_StatusOn@lights 0021                       __end_of_getLoad_AD 0AF2  
                  _Switch_Initialization 25F7                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 2713  
                   __size_of_Buzzer_Main 00B9                       __end_of_getTemp_AD 144E  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
                       _CC2500_WriteByte 18DE                                 _VarTMain 0120  
                      getLoad_AD@channel 0029             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 26DD                              ??_Temp_Main 0030  
                      ??_PowerFault_Main 002F                        setRFSW_Control@sw 0063  
                    _Load_Initialization 26DD                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1B60    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 1B35                             _setTemp_Main 05F8  
                     _setLoad_Exceptions 1F6B                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 2731                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000B                                 ___awtoft 1A10  
                       ??_LedPointSelect 0020                                 ___ftpack 12B2  
                           _setSw_Status 2722                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1D47                      ?_setLoad_Exceptions 0070  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 13E2  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 0027  
                        ___lwdiv@divisor 0020                     ?_Load_Initialization 0070  
                        ___lwdiv@counter 0027                                 __ptext10 257C  
                               __ptext11 264D                                 __ptext20 25F7  
                               __ptext12 259E                                 __ptext21 27AE  
                               __ptext13 04AE                                 __ptext30 1BB9  
                               __ptext22 25A2                                 __ptext14 274F  
                               __ptext31 1D87                                 __ptext23 259A  
                               __ptext15 10E9                                 __ptext40 2740  
                               __ptext32 1CDB                                 __ptext24 0932  
                               __ptext16 152A                                 __ptext41 195F  
                               __ptext33 1A76                                 __ptext25 1045  
                               __ptext17 07D4                                 __ptext50 27EF  
                               __ptext42 1996                                 __ptext34 119D  
                               __ptext26 1EDA                                 __ptext18 27CE  
                               __ptext51 1944                                 __ptext43 2596  
                               __ptext35 0C41                                 __ptext27 14BC  
                               __ptext19 27BE                                 __ptext60 2637  
                               __ptext52 18C6                                 __ptext44 25D5  
                               __ptext36 0CF5                                 __ptext28 08A2  
                               __ptext61 279E                                 __ptext53 26F7  
                               __ptext45 2579                                 __ptext37 1AE3  
                               __ptext29 11F8                                 __ptext70 278E  
                               __ptext62 004D                                 __ptext54 0800  
                               __ptext46 0EE3                                 __ptext38 1E0B  
                               __ptext71 25C7                                 __ptext63 1F6B  
                               __ptext55 26EA                                 __ptext47 1000  
                               __ptext39 1313                                 __ptext80 1E4F  
                               __ptext72 25E5                                 __ptext64 2731  
                               __ptext56 25A7                                 __ptext48 2642  
                               __ptext81 144E                                 __ptext73 1D10  
                               __ptext65 1B60                                 __ptext57 25CE  
                               __ptext49 2576                                 __ptext90 1C47  
                               __ptext82 26B8                                 __ptext74 26DD  
                               __ptext66 25EE                                 __ptext58 1872  
                               __ptext91 09C6                                 __ptext83 0DEB  
                               __ptext75 1A54                                 __ptext67 1142  
                               __ptext59 16FC                                 __ptext92 1CA9  
                               __ptext84 1C78                                 __ptext76 1866  
                               __ptext68 1B35                                 __ptext93 189B  
                               __ptext85 25DC                                 __ptext77 1D47  
                               __ptext69 1092                                 __ptext94 1254  
                               __ptext86 1910                                 __ptext78 26C4  
                               __ptext95 1A32                                 __ptext87 25C0  
                               __ptext79 27DE                                 __ptext96 1929  
                               __ptext88 160D                                 __ptext97 262C  
                               __ptext89 1DC7                                 __ptext98 26AC  
                               __ptext99 26A0                             ??_setLoad_GO 0020  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 2722  
          __end_of_Dimmer_Initialization 25C0             __end_of_setDimmerLights_Main 1683  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0072  
                            _setRF_Learn 274F                 __end_of_CC2500_SIDLEMode 258E  
                         _setRF_RxStatus 2740               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 2688               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1929                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000F                     ??_setLoad_Exceptions 002B  
                        _CC2500_ReadByte 1996                       _CC2500_InitPATable 19D1  
    __size_of_getDimmerLights_StatusFlag 000C            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 09C6              __size_of_Mcu_Initialization 001B  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006C            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1C17                       __end_of_setLoad_GO 2637  
            __end_of_Flash_Memory_Modify 14BC                        ??_getPercentValue 0059  
                            _setLog_Code 1EDA                    setRF_RxStatus@command 0022  
            __end_of_Flash_Memory_Unlock 25E5                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 18F7                       __end_of_setSw_Main 05F8  
                      setLoad_GO@command 0020                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E1                     setLoad_Count@command 0021  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1BB9                            ?_getLoad_Safe 0070  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 2000  
                   ??_DimmerLights_Close 0021                              ??_setINT_GO 0020  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                __size_of_setLoad_Enable 0010                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 274F                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 1BB9  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1B8C  
            __end_of_setDimmerLights_Adj 1E0B                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0022                         ?_setRF_ReceiveGO 0072  
                 CC2500_InitPATable@temp 0026                     _MainT_Initialization 1872  
                  __size_of_RF_RxDisable 0028                        _RF_Initialization 2596  
                            getLoad_AD@i 002B                              getLoad_AD@j 002A  
                          ?_getTemp_Safe 0070                     _Flash_Memory_Erasing 26B8  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
        __end_of_DelayOff_Initialization 2592                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 2596  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 11F8         __size_of_setControl_Lights_Table 006E  
                      _setLoad_StatusOff 1C47                   __end_of_DelayTimejudge 1BE7  
         __end_of_setOverTemp_Exceptions 1F6B                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0070                           ??_getLoad_Safe 0020  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0062  
                     ?_setLoad_StatusOff 0020                    __end_of_DelayTime_1us 1AE3  
               __end_of_Sw_DimmerAdjFunc 0800                  __end_of_CC2500_ReadByte 19B3  
           __end_of_setSw_Initialization 27BE                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 1AE3  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 26D0  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0020  
         __end_of_setTemp_Initialization 2658                 __size_of_Sw_DimmerOnFunc 0059  
                    ??_setLoad_StatusOff 0021                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 259A                 __end_of_Sw_DimmerOffFunc 159B  
                     ??_setLoad_StatusOn 0021          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    ?_MainT_Initialization 0070  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 1377  
                  __end_of_CC2500_TxData 1E4F                           ??_getTemp_Safe 0020  
                  _setLoad_AH_AL_Restore 1A54                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1C47  
