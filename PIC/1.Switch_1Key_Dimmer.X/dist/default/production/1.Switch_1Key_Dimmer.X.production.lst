

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Oct 03 10:31:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,delta=2
   150                           	psect	text128,local,class=CODE,merge=1,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,delta=2
   158                           	psect	text136,local,class=CODE,merge=1,delta=2
   159                           	psect	text137,local,class=CODE,merge=1,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text139,local,class=CODE,merge=1,delta=2
   162                           	psect	text140,local,class=CODE,merge=1,delta=2
   163                           	psect	text141,local,class=CODE,merge=1,delta=2
   164                           	psect	text142,local,class=CODE,merge=1,delta=2
   165                           	psect	text143,local,class=CODE,merge=1,delta=2
   166                           	psect	text144,local,class=CODE,merge=1,delta=2
   167                           	psect	text145,local,class=CODE,merge=1,delta=2
   168                           	dabs	1,0x7E,2
   169  0000                     	;# 
   170  0001                     	;# 
   171  0002                     	;# 
   172  0003                     	;# 
   173  0004                     	;# 
   174  0005                     	;# 
   175  0006                     	;# 
   176  0007                     	;# 
   177  0008                     	;# 
   178  0009                     	;# 
   179  000A                     	;# 
   180  000B                     	;# 
   181  000C                     	;# 
   182  000D                     	;# 
   183  000E                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  008C                     	;# 
   197  008D                     	;# 
   198  008E                     	;# 
   199  0090                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  0116                     	;# 
   216  0117                     	;# 
   217  011D                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0194                     	;# 
   227  0195                     	;# 
   228  0196                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020D                     	;# 
   242  0210                     	;# 
   243  0211                     	;# 
   244  0211                     	;# 
   245  0212                     	;# 
   246  0212                     	;# 
   247  0213                     	;# 
   248  0213                     	;# 
   249  0214                     	;# 
   250  0214                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0216                     	;# 
   255  0216                     	;# 
   256  0217                     	;# 
   257  0217                     	;# 
   258  0291                     	;# 
   259  0291                     	;# 
   260  0292                     	;# 
   261  0293                     	;# 
   262  0298                     	;# 
   263  0298                     	;# 
   264  0299                     	;# 
   265  029A                     	;# 
   266  0394                     	;# 
   267  0395                     	;# 
   268  0396                     	;# 
   269  0FE4                     	;# 
   270  0FE5                     	;# 
   271  0FE6                     	;# 
   272  0FE7                     	;# 
   273  0FE8                     	;# 
   274  0FE9                     	;# 
   275  0FEA                     	;# 
   276  0FEB                     	;# 
   277  0FED                     	;# 
   278  0FEE                     	;# 
   279  0FEF                     	;# 
   280  0000                     	;# 
   281  0001                     	;# 
   282  0002                     	;# 
   283  0003                     	;# 
   284  0004                     	;# 
   285  0005                     	;# 
   286  0006                     	;# 
   287  0007                     	;# 
   288  0008                     	;# 
   289  0009                     	;# 
   290  000A                     	;# 
   291  000B                     	;# 
   292  000C                     	;# 
   293  000D                     	;# 
   294  000E                     	;# 
   295  0010                     	;# 
   296  0011                     	;# 
   297  0012                     	;# 
   298  0015                     	;# 
   299  0016                     	;# 
   300  0016                     	;# 
   301  0017                     	;# 
   302  0018                     	;# 
   303  0019                     	;# 
   304  001A                     	;# 
   305  001B                     	;# 
   306  001C                     	;# 
   307  008C                     	;# 
   308  008D                     	;# 
   309  008E                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  0116                     	;# 
   327  0117                     	;# 
   328  011D                     	;# 
   329  018C                     	;# 
   330  018D                     	;# 
   331  018E                     	;# 
   332  0191                     	;# 
   333  0191                     	;# 
   334  0192                     	;# 
   335  0193                     	;# 
   336  0193                     	;# 
   337  0194                     	;# 
   338  0195                     	;# 
   339  0196                     	;# 
   340  0197                     	;# 
   341  0199                     	;# 
   342  019A                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019C                     	;# 
   348  019C                     	;# 
   349  019D                     	;# 
   350  019E                     	;# 
   351  019F                     	;# 
   352  020D                     	;# 
   353  0210                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0216                     	;# 
   366  0216                     	;# 
   367  0217                     	;# 
   368  0217                     	;# 
   369  0291                     	;# 
   370  0291                     	;# 
   371  0292                     	;# 
   372  0293                     	;# 
   373  0298                     	;# 
   374  0298                     	;# 
   375  0299                     	;# 
   376  029A                     	;# 
   377  0394                     	;# 
   378  0395                     	;# 
   379  0396                     	;# 
   380  0FE4                     	;# 
   381  0FE5                     	;# 
   382  0FE6                     	;# 
   383  0FE7                     	;# 
   384  0FE8                     	;# 
   385  0FE9                     	;# 
   386  0FEA                     	;# 
   387  0FEB                     	;# 
   388  0FED                     	;# 
   389  0FEE                     	;# 
   390  0FEF                     	;# 
   391  0000                     	;# 
   392  0001                     	;# 
   393  0002                     	;# 
   394  0003                     	;# 
   395  0004                     	;# 
   396  0005                     	;# 
   397  0006                     	;# 
   398  0007                     	;# 
   399  0008                     	;# 
   400  0009                     	;# 
   401  000A                     	;# 
   402  000B                     	;# 
   403  000C                     	;# 
   404  000D                     	;# 
   405  000E                     	;# 
   406  0010                     	;# 
   407  0011                     	;# 
   408  0012                     	;# 
   409  0015                     	;# 
   410  0016                     	;# 
   411  0016                     	;# 
   412  0017                     	;# 
   413  0018                     	;# 
   414  0019                     	;# 
   415  001A                     	;# 
   416  001B                     	;# 
   417  001C                     	;# 
   418  008C                     	;# 
   419  008D                     	;# 
   420  008E                     	;# 
   421  0090                     	;# 
   422  0091                     	;# 
   423  0092                     	;# 
   424  0095                     	;# 
   425  0096                     	;# 
   426  0097                     	;# 
   427  0099                     	;# 
   428  009A                     	;# 
   429  009B                     	;# 
   430  009B                     	;# 
   431  009C                     	;# 
   432  009D                     	;# 
   433  009E                     	;# 
   434  010C                     	;# 
   435  010D                     	;# 
   436  010E                     	;# 
   437  0116                     	;# 
   438  0117                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  018E                     	;# 
   443  0191                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0197                     	;# 
   452  0199                     	;# 
   453  019A                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019B                     	;# 
   458  019C                     	;# 
   459  019C                     	;# 
   460  019D                     	;# 
   461  019E                     	;# 
   462  019F                     	;# 
   463  020D                     	;# 
   464  0210                     	;# 
   465  0211                     	;# 
   466  0211                     	;# 
   467  0212                     	;# 
   468  0212                     	;# 
   469  0213                     	;# 
   470  0213                     	;# 
   471  0214                     	;# 
   472  0214                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0215                     	;# 
   476  0216                     	;# 
   477  0216                     	;# 
   478  0217                     	;# 
   479  0217                     	;# 
   480  0291                     	;# 
   481  0291                     	;# 
   482  0292                     	;# 
   483  0293                     	;# 
   484  0298                     	;# 
   485  0298                     	;# 
   486  0299                     	;# 
   487  029A                     	;# 
   488  0394                     	;# 
   489  0395                     	;# 
   490  0396                     	;# 
   491  0FE4                     	;# 
   492  0FE5                     	;# 
   493  0FE6                     	;# 
   494  0FE7                     	;# 
   495  0FE8                     	;# 
   496  0FE9                     	;# 
   497  0FEA                     	;# 
   498  0FEB                     	;# 
   499  0FED                     	;# 
   500  0FEE                     	;# 
   501  0FEF                     	;# 
   502  0000                     	;# 
   503  0001                     	;# 
   504  0002                     	;# 
   505  0003                     	;# 
   506  0004                     	;# 
   507  0005                     	;# 
   508  0006                     	;# 
   509  0007                     	;# 
   510  0008                     	;# 
   511  0009                     	;# 
   512  000A                     	;# 
   513  000B                     	;# 
   514  000C                     	;# 
   515  000D                     	;# 
   516  000E                     	;# 
   517  0010                     	;# 
   518  0011                     	;# 
   519  0012                     	;# 
   520  0015                     	;# 
   521  0016                     	;# 
   522  0016                     	;# 
   523  0017                     	;# 
   524  0018                     	;# 
   525  0019                     	;# 
   526  001A                     	;# 
   527  001B                     	;# 
   528  001C                     	;# 
   529  008C                     	;# 
   530  008D                     	;# 
   531  008E                     	;# 
   532  0090                     	;# 
   533  0091                     	;# 
   534  0092                     	;# 
   535  0095                     	;# 
   536  0096                     	;# 
   537  0097                     	;# 
   538  0099                     	;# 
   539  009A                     	;# 
   540  009B                     	;# 
   541  009B                     	;# 
   542  009C                     	;# 
   543  009D                     	;# 
   544  009E                     	;# 
   545  010C                     	;# 
   546  010D                     	;# 
   547  010E                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  011D                     	;# 
   551  018C                     	;# 
   552  018D                     	;# 
   553  018E                     	;# 
   554  0191                     	;# 
   555  0191                     	;# 
   556  0192                     	;# 
   557  0193                     	;# 
   558  0193                     	;# 
   559  0194                     	;# 
   560  0195                     	;# 
   561  0196                     	;# 
   562  0197                     	;# 
   563  0199                     	;# 
   564  019A                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019B                     	;# 
   569  019C                     	;# 
   570  019C                     	;# 
   571  019D                     	;# 
   572  019E                     	;# 
   573  019F                     	;# 
   574  020D                     	;# 
   575  0210                     	;# 
   576  0211                     	;# 
   577  0211                     	;# 
   578  0212                     	;# 
   579  0212                     	;# 
   580  0213                     	;# 
   581  0213                     	;# 
   582  0214                     	;# 
   583  0214                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0215                     	;# 
   587  0216                     	;# 
   588  0216                     	;# 
   589  0217                     	;# 
   590  0217                     	;# 
   591  0291                     	;# 
   592  0291                     	;# 
   593  0292                     	;# 
   594  0293                     	;# 
   595  0298                     	;# 
   596  0298                     	;# 
   597  0299                     	;# 
   598  029A                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  0FE4                     	;# 
   603  0FE5                     	;# 
   604  0FE6                     	;# 
   605  0FE7                     	;# 
   606  0FE8                     	;# 
   607  0FE9                     	;# 
   608  0FEA                     	;# 
   609  0FEB                     	;# 
   610  0FED                     	;# 
   611  0FEE                     	;# 
   612  0FEF                     	;# 
   613  0000                     	;# 
   614  0001                     	;# 
   615  0002                     	;# 
   616  0003                     	;# 
   617  0004                     	;# 
   618  0005                     	;# 
   619  0006                     	;# 
   620  0007                     	;# 
   621  0008                     	;# 
   622  0009                     	;# 
   623  000A                     	;# 
   624  000B                     	;# 
   625  000C                     	;# 
   626  000D                     	;# 
   627  000E                     	;# 
   628  0010                     	;# 
   629  0011                     	;# 
   630  0012                     	;# 
   631  0015                     	;# 
   632  0016                     	;# 
   633  0016                     	;# 
   634  0017                     	;# 
   635  0018                     	;# 
   636  0019                     	;# 
   637  001A                     	;# 
   638  001B                     	;# 
   639  001C                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  0090                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0095                     	;# 
   647  0096                     	;# 
   648  0097                     	;# 
   649  0099                     	;# 
   650  009A                     	;# 
   651  009B                     	;# 
   652  009B                     	;# 
   653  009C                     	;# 
   654  009D                     	;# 
   655  009E                     	;# 
   656  010C                     	;# 
   657  010D                     	;# 
   658  010E                     	;# 
   659  0116                     	;# 
   660  0117                     	;# 
   661  011D                     	;# 
   662  018C                     	;# 
   663  018D                     	;# 
   664  018E                     	;# 
   665  0191                     	;# 
   666  0191                     	;# 
   667  0192                     	;# 
   668  0193                     	;# 
   669  0193                     	;# 
   670  0194                     	;# 
   671  0195                     	;# 
   672  0196                     	;# 
   673  0197                     	;# 
   674  0199                     	;# 
   675  019A                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019B                     	;# 
   680  019C                     	;# 
   681  019C                     	;# 
   682  019D                     	;# 
   683  019E                     	;# 
   684  019F                     	;# 
   685  020D                     	;# 
   686  0210                     	;# 
   687  0211                     	;# 
   688  0211                     	;# 
   689  0212                     	;# 
   690  0212                     	;# 
   691  0213                     	;# 
   692  0213                     	;# 
   693  0214                     	;# 
   694  0214                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0215                     	;# 
   698  0216                     	;# 
   699  0216                     	;# 
   700  0217                     	;# 
   701  0217                     	;# 
   702  0291                     	;# 
   703  0291                     	;# 
   704  0292                     	;# 
   705  0293                     	;# 
   706  0298                     	;# 
   707  0298                     	;# 
   708  0299                     	;# 
   709  029A                     	;# 
   710  0394                     	;# 
   711  0395                     	;# 
   712  0396                     	;# 
   713  0FE4                     	;# 
   714  0FE5                     	;# 
   715  0FE6                     	;# 
   716  0FE7                     	;# 
   717  0FE8                     	;# 
   718  0FE9                     	;# 
   719  0FEA                     	;# 
   720  0FEB                     	;# 
   721  0FED                     	;# 
   722  0FEE                     	;# 
   723  0FEF                     	;# 
   724  0000                     	;# 
   725  0001                     	;# 
   726  0002                     	;# 
   727  0003                     	;# 
   728  0004                     	;# 
   729  0005                     	;# 
   730  0006                     	;# 
   731  0007                     	;# 
   732  0008                     	;# 
   733  0009                     	;# 
   734  000A                     	;# 
   735  000B                     	;# 
   736  000C                     	;# 
   737  000D                     	;# 
   738  000E                     	;# 
   739  0010                     	;# 
   740  0011                     	;# 
   741  0012                     	;# 
   742  0015                     	;# 
   743  0016                     	;# 
   744  0016                     	;# 
   745  0017                     	;# 
   746  0018                     	;# 
   747  0019                     	;# 
   748  001A                     	;# 
   749  001B                     	;# 
   750  001C                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  0090                     	;# 
   755  0091                     	;# 
   756  0092                     	;# 
   757  0095                     	;# 
   758  0096                     	;# 
   759  0097                     	;# 
   760  0099                     	;# 
   761  009A                     	;# 
   762  009B                     	;# 
   763  009B                     	;# 
   764  009C                     	;# 
   765  009D                     	;# 
   766  009E                     	;# 
   767  010C                     	;# 
   768  010D                     	;# 
   769  010E                     	;# 
   770  0116                     	;# 
   771  0117                     	;# 
   772  011D                     	;# 
   773  018C                     	;# 
   774  018D                     	;# 
   775  018E                     	;# 
   776  0191                     	;# 
   777  0191                     	;# 
   778  0192                     	;# 
   779  0193                     	;# 
   780  0193                     	;# 
   781  0194                     	;# 
   782  0195                     	;# 
   783  0196                     	;# 
   784  0197                     	;# 
   785  0199                     	;# 
   786  019A                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019B                     	;# 
   791  019C                     	;# 
   792  019C                     	;# 
   793  019D                     	;# 
   794  019E                     	;# 
   795  019F                     	;# 
   796  020D                     	;# 
   797  0210                     	;# 
   798  0211                     	;# 
   799  0211                     	;# 
   800  0212                     	;# 
   801  0212                     	;# 
   802  0213                     	;# 
   803  0213                     	;# 
   804  0214                     	;# 
   805  0214                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0215                     	;# 
   809  0216                     	;# 
   810  0216                     	;# 
   811  0217                     	;# 
   812  0217                     	;# 
   813  0291                     	;# 
   814  0291                     	;# 
   815  0292                     	;# 
   816  0293                     	;# 
   817  0298                     	;# 
   818  0298                     	;# 
   819  0299                     	;# 
   820  029A                     	;# 
   821  0394                     	;# 
   822  0395                     	;# 
   823  0396                     	;# 
   824  0FE4                     	;# 
   825  0FE5                     	;# 
   826  0FE6                     	;# 
   827  0FE7                     	;# 
   828  0FE8                     	;# 
   829  0FE9                     	;# 
   830  0FEA                     	;# 
   831  0FEB                     	;# 
   832  0FED                     	;# 
   833  0FEE                     	;# 
   834  0FEF                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0008                     	;# 
   844  0009                     	;# 
   845  000A                     	;# 
   846  000B                     	;# 
   847  000C                     	;# 
   848  000D                     	;# 
   849  000E                     	;# 
   850  0010                     	;# 
   851  0011                     	;# 
   852  0012                     	;# 
   853  0015                     	;# 
   854  0016                     	;# 
   855  0016                     	;# 
   856  0017                     	;# 
   857  0018                     	;# 
   858  0019                     	;# 
   859  001A                     	;# 
   860  001B                     	;# 
   861  001C                     	;# 
   862  008C                     	;# 
   863  008D                     	;# 
   864  008E                     	;# 
   865  0090                     	;# 
   866  0091                     	;# 
   867  0092                     	;# 
   868  0095                     	;# 
   869  0096                     	;# 
   870  0097                     	;# 
   871  0099                     	;# 
   872  009A                     	;# 
   873  009B                     	;# 
   874  009B                     	;# 
   875  009C                     	;# 
   876  009D                     	;# 
   877  009E                     	;# 
   878  010C                     	;# 
   879  010D                     	;# 
   880  010E                     	;# 
   881  0116                     	;# 
   882  0117                     	;# 
   883  011D                     	;# 
   884  018C                     	;# 
   885  018D                     	;# 
   886  018E                     	;# 
   887  0191                     	;# 
   888  0191                     	;# 
   889  0192                     	;# 
   890  0193                     	;# 
   891  0193                     	;# 
   892  0194                     	;# 
   893  0195                     	;# 
   894  0196                     	;# 
   895  0197                     	;# 
   896  0199                     	;# 
   897  019A                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019B                     	;# 
   902  019C                     	;# 
   903  019C                     	;# 
   904  019D                     	;# 
   905  019E                     	;# 
   906  019F                     	;# 
   907  020D                     	;# 
   908  0210                     	;# 
   909  0211                     	;# 
   910  0211                     	;# 
   911  0212                     	;# 
   912  0212                     	;# 
   913  0213                     	;# 
   914  0213                     	;# 
   915  0214                     	;# 
   916  0214                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0215                     	;# 
   920  0216                     	;# 
   921  0216                     	;# 
   922  0217                     	;# 
   923  0217                     	;# 
   924  0291                     	;# 
   925  0291                     	;# 
   926  0292                     	;# 
   927  0293                     	;# 
   928  0298                     	;# 
   929  0298                     	;# 
   930  0299                     	;# 
   931  029A                     	;# 
   932  0394                     	;# 
   933  0395                     	;# 
   934  0396                     	;# 
   935  0FE4                     	;# 
   936  0FE5                     	;# 
   937  0FE6                     	;# 
   938  0FE7                     	;# 
   939  0FE8                     	;# 
   940  0FE9                     	;# 
   941  0FEA                     	;# 
   942  0FEB                     	;# 
   943  0FED                     	;# 
   944  0FEE                     	;# 
   945  0FEF                     	;# 
   946  0000                     	;# 
   947  0001                     	;# 
   948  0002                     	;# 
   949  0003                     	;# 
   950  0004                     	;# 
   951  0005                     	;# 
   952  0006                     	;# 
   953  0007                     	;# 
   954  0008                     	;# 
   955  0009                     	;# 
   956  000A                     	;# 
   957  000B                     	;# 
   958  000C                     	;# 
   959  000D                     	;# 
   960  000E                     	;# 
   961  0010                     	;# 
   962  0011                     	;# 
   963  0012                     	;# 
   964  0015                     	;# 
   965  0016                     	;# 
   966  0016                     	;# 
   967  0017                     	;# 
   968  0018                     	;# 
   969  0019                     	;# 
   970  001A                     	;# 
   971  001B                     	;# 
   972  001C                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0090                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0095                     	;# 
   980  0096                     	;# 
   981  0097                     	;# 
   982  0099                     	;# 
   983  009A                     	;# 
   984  009B                     	;# 
   985  009B                     	;# 
   986  009C                     	;# 
   987  009D                     	;# 
   988  009E                     	;# 
   989  010C                     	;# 
   990  010D                     	;# 
   991  010E                     	;# 
   992  0116                     	;# 
   993  0117                     	;# 
   994  011D                     	;# 
   995  018C                     	;# 
   996  018D                     	;# 
   997  018E                     	;# 
   998  0191                     	;# 
   999  0191                     	;# 
  1000  0192                     	;# 
  1001  0193                     	;# 
  1002  0193                     	;# 
  1003  0194                     	;# 
  1004  0195                     	;# 
  1005  0196                     	;# 
  1006  0197                     	;# 
  1007  0199                     	;# 
  1008  019A                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019B                     	;# 
  1013  019C                     	;# 
  1014  019C                     	;# 
  1015  019D                     	;# 
  1016  019E                     	;# 
  1017  019F                     	;# 
  1018  020D                     	;# 
  1019  0210                     	;# 
  1020  0211                     	;# 
  1021  0211                     	;# 
  1022  0212                     	;# 
  1023  0212                     	;# 
  1024  0213                     	;# 
  1025  0213                     	;# 
  1026  0214                     	;# 
  1027  0214                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0215                     	;# 
  1031  0216                     	;# 
  1032  0216                     	;# 
  1033  0217                     	;# 
  1034  0217                     	;# 
  1035  0291                     	;# 
  1036  0291                     	;# 
  1037  0292                     	;# 
  1038  0293                     	;# 
  1039  0298                     	;# 
  1040  0298                     	;# 
  1041  0299                     	;# 
  1042  029A                     	;# 
  1043  0394                     	;# 
  1044  0395                     	;# 
  1045  0396                     	;# 
  1046  0FE4                     	;# 
  1047  0FE5                     	;# 
  1048  0FE6                     	;# 
  1049  0FE7                     	;# 
  1050  0FE8                     	;# 
  1051  0FE9                     	;# 
  1052  0FEA                     	;# 
  1053  0FEB                     	;# 
  1054  0FED                     	;# 
  1055  0FEE                     	;# 
  1056  0FEF                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0008                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000D                     	;# 
  1071  000E                     	;# 
  1072  0010                     	;# 
  1073  0011                     	;# 
  1074  0012                     	;# 
  1075  0015                     	;# 
  1076  0016                     	;# 
  1077  0016                     	;# 
  1078  0017                     	;# 
  1079  0018                     	;# 
  1080  0019                     	;# 
  1081  001A                     	;# 
  1082  001B                     	;# 
  1083  001C                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  0090                     	;# 
  1088  0091                     	;# 
  1089  0092                     	;# 
  1090  0095                     	;# 
  1091  0096                     	;# 
  1092  0097                     	;# 
  1093  0099                     	;# 
  1094  009A                     	;# 
  1095  009B                     	;# 
  1096  009B                     	;# 
  1097  009C                     	;# 
  1098  009D                     	;# 
  1099  009E                     	;# 
  1100  010C                     	;# 
  1101  010D                     	;# 
  1102  010E                     	;# 
  1103  0116                     	;# 
  1104  0117                     	;# 
  1105  011D                     	;# 
  1106  018C                     	;# 
  1107  018D                     	;# 
  1108  018E                     	;# 
  1109  0191                     	;# 
  1110  0191                     	;# 
  1111  0192                     	;# 
  1112  0193                     	;# 
  1113  0193                     	;# 
  1114  0194                     	;# 
  1115  0195                     	;# 
  1116  0196                     	;# 
  1117  0197                     	;# 
  1118  0199                     	;# 
  1119  019A                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019C                     	;# 
  1125  019C                     	;# 
  1126  019D                     	;# 
  1127  019E                     	;# 
  1128  019F                     	;# 
  1129  020D                     	;# 
  1130  0210                     	;# 
  1131  0211                     	;# 
  1132  0211                     	;# 
  1133  0212                     	;# 
  1134  0212                     	;# 
  1135  0213                     	;# 
  1136  0213                     	;# 
  1137  0214                     	;# 
  1138  0214                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0215                     	;# 
  1142  0216                     	;# 
  1143  0216                     	;# 
  1144  0217                     	;# 
  1145  0217                     	;# 
  1146  0291                     	;# 
  1147  0291                     	;# 
  1148  0292                     	;# 
  1149  0293                     	;# 
  1150  0298                     	;# 
  1151  0298                     	;# 
  1152  0299                     	;# 
  1153  029A                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0FE4                     	;# 
  1158  0FE5                     	;# 
  1159  0FE6                     	;# 
  1160  0FE7                     	;# 
  1161  0FE8                     	;# 
  1162  0FE9                     	;# 
  1163  0FEA                     	;# 
  1164  0FEB                     	;# 
  1165  0FED                     	;# 
  1166  0FEE                     	;# 
  1167  0FEF                     	;# 
  1168  0000                     	;# 
  1169  0001                     	;# 
  1170  0002                     	;# 
  1171  0003                     	;# 
  1172  0004                     	;# 
  1173  0005                     	;# 
  1174  0006                     	;# 
  1175  0007                     	;# 
  1176  0008                     	;# 
  1177  0009                     	;# 
  1178  000A                     	;# 
  1179  000B                     	;# 
  1180  000C                     	;# 
  1181  000D                     	;# 
  1182  000E                     	;# 
  1183  0010                     	;# 
  1184  0011                     	;# 
  1185  0012                     	;# 
  1186  0015                     	;# 
  1187  0016                     	;# 
  1188  0016                     	;# 
  1189  0017                     	;# 
  1190  0018                     	;# 
  1191  0019                     	;# 
  1192  001A                     	;# 
  1193  001B                     	;# 
  1194  001C                     	;# 
  1195  008C                     	;# 
  1196  008D                     	;# 
  1197  008E                     	;# 
  1198  0090                     	;# 
  1199  0091                     	;# 
  1200  0092                     	;# 
  1201  0095                     	;# 
  1202  0096                     	;# 
  1203  0097                     	;# 
  1204  0099                     	;# 
  1205  009A                     	;# 
  1206  009B                     	;# 
  1207  009B                     	;# 
  1208  009C                     	;# 
  1209  009D                     	;# 
  1210  009E                     	;# 
  1211  010C                     	;# 
  1212  010D                     	;# 
  1213  010E                     	;# 
  1214  0116                     	;# 
  1215  0117                     	;# 
  1216  011D                     	;# 
  1217  018C                     	;# 
  1218  018D                     	;# 
  1219  018E                     	;# 
  1220  0191                     	;# 
  1221  0191                     	;# 
  1222  0192                     	;# 
  1223  0193                     	;# 
  1224  0193                     	;# 
  1225  0194                     	;# 
  1226  0195                     	;# 
  1227  0196                     	;# 
  1228  0197                     	;# 
  1229  0199                     	;# 
  1230  019A                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019B                     	;# 
  1235  019C                     	;# 
  1236  019C                     	;# 
  1237  019D                     	;# 
  1238  019E                     	;# 
  1239  019F                     	;# 
  1240  020D                     	;# 
  1241  0210                     	;# 
  1242  0211                     	;# 
  1243  0211                     	;# 
  1244  0212                     	;# 
  1245  0212                     	;# 
  1246  0213                     	;# 
  1247  0213                     	;# 
  1248  0214                     	;# 
  1249  0214                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0215                     	;# 
  1253  0216                     	;# 
  1254  0216                     	;# 
  1255  0217                     	;# 
  1256  0217                     	;# 
  1257  0291                     	;# 
  1258  0291                     	;# 
  1259  0292                     	;# 
  1260  0293                     	;# 
  1261  0298                     	;# 
  1262  0298                     	;# 
  1263  0299                     	;# 
  1264  029A                     	;# 
  1265  0394                     	;# 
  1266  0395                     	;# 
  1267  0396                     	;# 
  1268  0FE4                     	;# 
  1269  0FE5                     	;# 
  1270  0FE6                     	;# 
  1271  0FE7                     	;# 
  1272  0FE8                     	;# 
  1273  0FE9                     	;# 
  1274  0FEA                     	;# 
  1275  0FEB                     	;# 
  1276  0FED                     	;# 
  1277  0FEE                     	;# 
  1278  0FEF                     	;# 
  1279  0000                     	;# 
  1280  0001                     	;# 
  1281  0002                     	;# 
  1282  0003                     	;# 
  1283  0004                     	;# 
  1284  0005                     	;# 
  1285  0006                     	;# 
  1286  0007                     	;# 
  1287  0008                     	;# 
  1288  0009                     	;# 
  1289  000A                     	;# 
  1290  000B                     	;# 
  1291  000C                     	;# 
  1292  000D                     	;# 
  1293  000E                     	;# 
  1294  0010                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0015                     	;# 
  1298  0016                     	;# 
  1299  0016                     	;# 
  1300  0017                     	;# 
  1301  0018                     	;# 
  1302  0019                     	;# 
  1303  001A                     	;# 
  1304  001B                     	;# 
  1305  001C                     	;# 
  1306  008C                     	;# 
  1307  008D                     	;# 
  1308  008E                     	;# 
  1309  0090                     	;# 
  1310  0091                     	;# 
  1311  0092                     	;# 
  1312  0095                     	;# 
  1313  0096                     	;# 
  1314  0097                     	;# 
  1315  0099                     	;# 
  1316  009A                     	;# 
  1317  009B                     	;# 
  1318  009B                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009E                     	;# 
  1322  010C                     	;# 
  1323  010D                     	;# 
  1324  010E                     	;# 
  1325  0116                     	;# 
  1326  0117                     	;# 
  1327  011D                     	;# 
  1328  018C                     	;# 
  1329  018D                     	;# 
  1330  018E                     	;# 
  1331  0191                     	;# 
  1332  0191                     	;# 
  1333  0192                     	;# 
  1334  0193                     	;# 
  1335  0193                     	;# 
  1336  0194                     	;# 
  1337  0195                     	;# 
  1338  0196                     	;# 
  1339  0197                     	;# 
  1340  0199                     	;# 
  1341  019A                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019B                     	;# 
  1346  019C                     	;# 
  1347  019C                     	;# 
  1348  019D                     	;# 
  1349  019E                     	;# 
  1350  019F                     	;# 
  1351  020D                     	;# 
  1352  0210                     	;# 
  1353  0211                     	;# 
  1354  0211                     	;# 
  1355  0212                     	;# 
  1356  0212                     	;# 
  1357  0213                     	;# 
  1358  0213                     	;# 
  1359  0214                     	;# 
  1360  0214                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0215                     	;# 
  1364  0216                     	;# 
  1365  0216                     	;# 
  1366  0217                     	;# 
  1367  0217                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0298                     	;# 
  1373  0298                     	;# 
  1374  0299                     	;# 
  1375  029A                     	;# 
  1376  0394                     	;# 
  1377  0395                     	;# 
  1378  0396                     	;# 
  1379  0FE4                     	;# 
  1380  0FE5                     	;# 
  1381  0FE6                     	;# 
  1382  0FE7                     	;# 
  1383  0FE8                     	;# 
  1384  0FE9                     	;# 
  1385  0FEA                     	;# 
  1386  0FEB                     	;# 
  1387  0FED                     	;# 
  1388  0FEE                     	;# 
  1389  0FEF                     	;# 
  1390  0000                     	;# 
  1391  0001                     	;# 
  1392  0002                     	;# 
  1393  0003                     	;# 
  1394  0004                     	;# 
  1395  0005                     	;# 
  1396  0006                     	;# 
  1397  0007                     	;# 
  1398  0008                     	;# 
  1399  0009                     	;# 
  1400  000A                     	;# 
  1401  000B                     	;# 
  1402  000C                     	;# 
  1403  000D                     	;# 
  1404  000E                     	;# 
  1405  0010                     	;# 
  1406  0011                     	;# 
  1407  0012                     	;# 
  1408  0015                     	;# 
  1409  0016                     	;# 
  1410  0016                     	;# 
  1411  0017                     	;# 
  1412  0018                     	;# 
  1413  0019                     	;# 
  1414  001A                     	;# 
  1415  001B                     	;# 
  1416  001C                     	;# 
  1417  008C                     	;# 
  1418  008D                     	;# 
  1419  008E                     	;# 
  1420  0090                     	;# 
  1421  0091                     	;# 
  1422  0092                     	;# 
  1423  0095                     	;# 
  1424  0096                     	;# 
  1425  0097                     	;# 
  1426  0099                     	;# 
  1427  009A                     	;# 
  1428  009B                     	;# 
  1429  009B                     	;# 
  1430  009C                     	;# 
  1431  009D                     	;# 
  1432  009E                     	;# 
  1433  010C                     	;# 
  1434  010D                     	;# 
  1435  010E                     	;# 
  1436  0116                     	;# 
  1437  0117                     	;# 
  1438  011D                     	;# 
  1439  018C                     	;# 
  1440  018D                     	;# 
  1441  018E                     	;# 
  1442  0191                     	;# 
  1443  0191                     	;# 
  1444  0192                     	;# 
  1445  0193                     	;# 
  1446  0193                     	;# 
  1447  0194                     	;# 
  1448  0195                     	;# 
  1449  0196                     	;# 
  1450  0197                     	;# 
  1451  0199                     	;# 
  1452  019A                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019B                     	;# 
  1457  019C                     	;# 
  1458  019C                     	;# 
  1459  019D                     	;# 
  1460  019E                     	;# 
  1461  019F                     	;# 
  1462  020D                     	;# 
  1463  0210                     	;# 
  1464  0211                     	;# 
  1465  0211                     	;# 
  1466  0212                     	;# 
  1467  0212                     	;# 
  1468  0213                     	;# 
  1469  0213                     	;# 
  1470  0214                     	;# 
  1471  0214                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0215                     	;# 
  1475  0216                     	;# 
  1476  0216                     	;# 
  1477  0217                     	;# 
  1478  0217                     	;# 
  1479  0291                     	;# 
  1480  0291                     	;# 
  1481  0292                     	;# 
  1482  0293                     	;# 
  1483  0298                     	;# 
  1484  0298                     	;# 
  1485  0299                     	;# 
  1486  029A                     	;# 
  1487  0394                     	;# 
  1488  0395                     	;# 
  1489  0396                     	;# 
  1490  0FE4                     	;# 
  1491  0FE5                     	;# 
  1492  0FE6                     	;# 
  1493  0FE7                     	;# 
  1494  0FE8                     	;# 
  1495  0FE9                     	;# 
  1496  0FEA                     	;# 
  1497  0FEB                     	;# 
  1498  0FED                     	;# 
  1499  0FEE                     	;# 
  1500  0FEF                     	;# 
  1501  0000                     	;# 
  1502  0001                     	;# 
  1503  0002                     	;# 
  1504  0003                     	;# 
  1505  0004                     	;# 
  1506  0005                     	;# 
  1507  0006                     	;# 
  1508  0007                     	;# 
  1509  0008                     	;# 
  1510  0009                     	;# 
  1511  000A                     	;# 
  1512  000B                     	;# 
  1513  000C                     	;# 
  1514  000D                     	;# 
  1515  000E                     	;# 
  1516  0010                     	;# 
  1517  0011                     	;# 
  1518  0012                     	;# 
  1519  0015                     	;# 
  1520  0016                     	;# 
  1521  0016                     	;# 
  1522  0017                     	;# 
  1523  0018                     	;# 
  1524  0019                     	;# 
  1525  001A                     	;# 
  1526  001B                     	;# 
  1527  001C                     	;# 
  1528  008C                     	;# 
  1529  008D                     	;# 
  1530  008E                     	;# 
  1531  0090                     	;# 
  1532  0091                     	;# 
  1533  0092                     	;# 
  1534  0095                     	;# 
  1535  0096                     	;# 
  1536  0097                     	;# 
  1537  0099                     	;# 
  1538  009A                     	;# 
  1539  009B                     	;# 
  1540  009B                     	;# 
  1541  009C                     	;# 
  1542  009D                     	;# 
  1543  009E                     	;# 
  1544  010C                     	;# 
  1545  010D                     	;# 
  1546  010E                     	;# 
  1547  0116                     	;# 
  1548  0117                     	;# 
  1549  011D                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0191                     	;# 
  1554  0191                     	;# 
  1555  0192                     	;# 
  1556  0193                     	;# 
  1557  0193                     	;# 
  1558  0194                     	;# 
  1559  0195                     	;# 
  1560  0196                     	;# 
  1561  0197                     	;# 
  1562  0199                     	;# 
  1563  019A                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019B                     	;# 
  1568  019C                     	;# 
  1569  019C                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019F                     	;# 
  1573  020D                     	;# 
  1574  0210                     	;# 
  1575  0211                     	;# 
  1576  0211                     	;# 
  1577  0212                     	;# 
  1578  0212                     	;# 
  1579  0213                     	;# 
  1580  0213                     	;# 
  1581  0214                     	;# 
  1582  0214                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0215                     	;# 
  1586  0216                     	;# 
  1587  0216                     	;# 
  1588  0217                     	;# 
  1589  0217                     	;# 
  1590  0291                     	;# 
  1591  0291                     	;# 
  1592  0292                     	;# 
  1593  0293                     	;# 
  1594  0298                     	;# 
  1595  0298                     	;# 
  1596  0299                     	;# 
  1597  029A                     	;# 
  1598  0394                     	;# 
  1599  0395                     	;# 
  1600  0396                     	;# 
  1601  0FE4                     	;# 
  1602  0FE5                     	;# 
  1603  0FE6                     	;# 
  1604  0FE7                     	;# 
  1605  0FE8                     	;# 
  1606  0FE9                     	;# 
  1607  0FEA                     	;# 
  1608  0FEB                     	;# 
  1609  0FED                     	;# 
  1610  0FEE                     	;# 
  1611  0FEF                     	;# 
  1612  0000                     	;# 
  1613  0001                     	;# 
  1614  0002                     	;# 
  1615  0003                     	;# 
  1616  0004                     	;# 
  1617  0005                     	;# 
  1618  0006                     	;# 
  1619  0007                     	;# 
  1620  0008                     	;# 
  1621  0009                     	;# 
  1622  000A                     	;# 
  1623  000B                     	;# 
  1624  000C                     	;# 
  1625  000D                     	;# 
  1626  000E                     	;# 
  1627  0010                     	;# 
  1628  0011                     	;# 
  1629  0012                     	;# 
  1630  0015                     	;# 
  1631  0016                     	;# 
  1632  0016                     	;# 
  1633  0017                     	;# 
  1634  0018                     	;# 
  1635  0019                     	;# 
  1636  001A                     	;# 
  1637  001B                     	;# 
  1638  001C                     	;# 
  1639  008C                     	;# 
  1640  008D                     	;# 
  1641  008E                     	;# 
  1642  0090                     	;# 
  1643  0091                     	;# 
  1644  0092                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0099                     	;# 
  1649  009A                     	;# 
  1650  009B                     	;# 
  1651  009B                     	;# 
  1652  009C                     	;# 
  1653  009D                     	;# 
  1654  009E                     	;# 
  1655  010C                     	;# 
  1656  010D                     	;# 
  1657  010E                     	;# 
  1658  0116                     	;# 
  1659  0117                     	;# 
  1660  011D                     	;# 
  1661  018C                     	;# 
  1662  018D                     	;# 
  1663  018E                     	;# 
  1664  0191                     	;# 
  1665  0191                     	;# 
  1666  0192                     	;# 
  1667  0193                     	;# 
  1668  0193                     	;# 
  1669  0194                     	;# 
  1670  0195                     	;# 
  1671  0196                     	;# 
  1672  0197                     	;# 
  1673  0199                     	;# 
  1674  019A                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  019C                     	;# 
  1681  019D                     	;# 
  1682  019E                     	;# 
  1683  019F                     	;# 
  1684  020D                     	;# 
  1685  0210                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0216                     	;# 
  1698  0216                     	;# 
  1699  0217                     	;# 
  1700  0217                     	;# 
  1701  0291                     	;# 
  1702  0291                     	;# 
  1703  0292                     	;# 
  1704  0293                     	;# 
  1705  0298                     	;# 
  1706  0298                     	;# 
  1707  0299                     	;# 
  1708  029A                     	;# 
  1709  0394                     	;# 
  1710  0395                     	;# 
  1711  0396                     	;# 
  1712  0FE4                     	;# 
  1713  0FE5                     	;# 
  1714  0FE6                     	;# 
  1715  0FE7                     	;# 
  1716  0FE8                     	;# 
  1717  0FE9                     	;# 
  1718  0FEA                     	;# 
  1719  0FEB                     	;# 
  1720  0FED                     	;# 
  1721  0FEE                     	;# 
  1722  0FEF                     	;# 
  1723  0000                     	;# 
  1724  0001                     	;# 
  1725  0002                     	;# 
  1726  0003                     	;# 
  1727  0004                     	;# 
  1728  0005                     	;# 
  1729  0006                     	;# 
  1730  0007                     	;# 
  1731  0008                     	;# 
  1732  0009                     	;# 
  1733  000A                     	;# 
  1734  000B                     	;# 
  1735  000C                     	;# 
  1736  000D                     	;# 
  1737  000E                     	;# 
  1738  0010                     	;# 
  1739  0011                     	;# 
  1740  0012                     	;# 
  1741  0015                     	;# 
  1742  0016                     	;# 
  1743  0016                     	;# 
  1744  0017                     	;# 
  1745  0018                     	;# 
  1746  0019                     	;# 
  1747  001A                     	;# 
  1748  001B                     	;# 
  1749  001C                     	;# 
  1750  008C                     	;# 
  1751  008D                     	;# 
  1752  008E                     	;# 
  1753  0090                     	;# 
  1754  0091                     	;# 
  1755  0092                     	;# 
  1756  0095                     	;# 
  1757  0096                     	;# 
  1758  0097                     	;# 
  1759  0099                     	;# 
  1760  009A                     	;# 
  1761  009B                     	;# 
  1762  009B                     	;# 
  1763  009C                     	;# 
  1764  009D                     	;# 
  1765  009E                     	;# 
  1766  010C                     	;# 
  1767  010D                     	;# 
  1768  010E                     	;# 
  1769  0116                     	;# 
  1770  0117                     	;# 
  1771  011D                     	;# 
  1772  018C                     	;# 
  1773  018D                     	;# 
  1774  018E                     	;# 
  1775  0191                     	;# 
  1776  0191                     	;# 
  1777  0192                     	;# 
  1778  0193                     	;# 
  1779  0193                     	;# 
  1780  0194                     	;# 
  1781  0195                     	;# 
  1782  0196                     	;# 
  1783  0197                     	;# 
  1784  0199                     	;# 
  1785  019A                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019B                     	;# 
  1790  019C                     	;# 
  1791  019C                     	;# 
  1792  019D                     	;# 
  1793  019E                     	;# 
  1794  019F                     	;# 
  1795  020D                     	;# 
  1796  0210                     	;# 
  1797  0211                     	;# 
  1798  0211                     	;# 
  1799  0212                     	;# 
  1800  0212                     	;# 
  1801  0213                     	;# 
  1802  0213                     	;# 
  1803  0214                     	;# 
  1804  0214                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0215                     	;# 
  1808  0216                     	;# 
  1809  0216                     	;# 
  1810  0217                     	;# 
  1811  0217                     	;# 
  1812  0291                     	;# 
  1813  0291                     	;# 
  1814  0292                     	;# 
  1815  0293                     	;# 
  1816  0298                     	;# 
  1817  0298                     	;# 
  1818  0299                     	;# 
  1819  029A                     	;# 
  1820  0394                     	;# 
  1821  0395                     	;# 
  1822  0396                     	;# 
  1823  0FE4                     	;# 
  1824  0FE5                     	;# 
  1825  0FE6                     	;# 
  1826  0FE7                     	;# 
  1827  0FE8                     	;# 
  1828  0FE9                     	;# 
  1829  0FEA                     	;# 
  1830  0FEB                     	;# 
  1831  0FED                     	;# 
  1832  0FEE                     	;# 
  1833  0FEF                     	;# 
  1834  0000                     	;# 
  1835  0001                     	;# 
  1836  0002                     	;# 
  1837  0003                     	;# 
  1838  0004                     	;# 
  1839  0005                     	;# 
  1840  0006                     	;# 
  1841  0007                     	;# 
  1842  0008                     	;# 
  1843  0009                     	;# 
  1844  000A                     	;# 
  1845  000B                     	;# 
  1846  000C                     	;# 
  1847  000D                     	;# 
  1848  000E                     	;# 
  1849  0010                     	;# 
  1850  0011                     	;# 
  1851  0012                     	;# 
  1852  0015                     	;# 
  1853  0016                     	;# 
  1854  0016                     	;# 
  1855  0017                     	;# 
  1856  0018                     	;# 
  1857  0019                     	;# 
  1858  001A                     	;# 
  1859  001B                     	;# 
  1860  001C                     	;# 
  1861  008C                     	;# 
  1862  008D                     	;# 
  1863  008E                     	;# 
  1864  0090                     	;# 
  1865  0091                     	;# 
  1866  0092                     	;# 
  1867  0095                     	;# 
  1868  0096                     	;# 
  1869  0097                     	;# 
  1870  0099                     	;# 
  1871  009A                     	;# 
  1872  009B                     	;# 
  1873  009B                     	;# 
  1874  009C                     	;# 
  1875  009D                     	;# 
  1876  009E                     	;# 
  1877  010C                     	;# 
  1878  010D                     	;# 
  1879  010E                     	;# 
  1880  0116                     	;# 
  1881  0117                     	;# 
  1882  011D                     	;# 
  1883  018C                     	;# 
  1884  018D                     	;# 
  1885  018E                     	;# 
  1886  0191                     	;# 
  1887  0191                     	;# 
  1888  0192                     	;# 
  1889  0193                     	;# 
  1890  0193                     	;# 
  1891  0194                     	;# 
  1892  0195                     	;# 
  1893  0196                     	;# 
  1894  0197                     	;# 
  1895  0199                     	;# 
  1896  019A                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019B                     	;# 
  1901  019C                     	;# 
  1902  019C                     	;# 
  1903  019D                     	;# 
  1904  019E                     	;# 
  1905  019F                     	;# 
  1906  020D                     	;# 
  1907  0210                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0213                     	;# 
  1914  0214                     	;# 
  1915  0214                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0216                     	;# 
  1920  0216                     	;# 
  1921  0217                     	;# 
  1922  0217                     	;# 
  1923  0291                     	;# 
  1924  0291                     	;# 
  1925  0292                     	;# 
  1926  0293                     	;# 
  1927  0298                     	;# 
  1928  0298                     	;# 
  1929  0299                     	;# 
  1930  029A                     	;# 
  1931  0394                     	;# 
  1932  0395                     	;# 
  1933  0396                     	;# 
  1934  0FE4                     	;# 
  1935  0FE5                     	;# 
  1936  0FE6                     	;# 
  1937  0FE7                     	;# 
  1938  0FE8                     	;# 
  1939  0FE9                     	;# 
  1940  0FEA                     	;# 
  1941  0FEB                     	;# 
  1942  0FED                     	;# 
  1943  0FEE                     	;# 
  1944  0FEF                     	;# 
  1945                           
  1946                           	psect	idataBANK3
  1947  1A0D                     __pidataBANK3:	
  1948                           
  1949                           ;initializer for _VarProduct
  1950  1A0D  3463               	retlw	99
  1951  1A0E  3402               	retlw	2
  1952  1A0F  3400               	retlw	0
  1953  1A10  3400               	retlw	0
  1954  1A11  3400               	retlw	0
  1955  1A12  3400               	retlw	0
  1956  1A13  3400               	retlw	0
  1957  1A14  3400               	retlw	0
  1958  1A15  3400               	retlw	0
  1959  1A16  3400               	retlw	0
  1960  1A17  3400               	retlw	0
  1961  1A18  3400               	retlw	0
  1962  1A19  34FF               	retlw	255
  1963  1A1A  34FF               	retlw	255
  1964  1A1B  34FF               	retlw	255
  1965  1A1C  3400               	retlw	0
  1966  1A1D  3400               	retlw	0
  1967  1A1E  3400               	retlw	0
  1968  1A1F  3400               	retlw	0
  1969  1A20  3400               	retlw	0
  1970  1A21  3400               	retlw	0
  1971  1A22  3400               	retlw	0
  1972  1A23  3400               	retlw	0
  1973  1A24  3400               	retlw	0
  1974  1A25  3400               	retlw	0
  1975  1A26  3400               	retlw	0
  1976  1A27  3400               	retlw	0
  1977  1A28  3400               	retlw	0
  1978  1A29  3400               	retlw	0
  1979  1A2A  3400               	retlw	0
  1980  1A2B  3400               	retlw	0
  1981  1A2C  3400               	retlw	0
  1982                           
  1983                           	psect	stringtext
  1984  1800                     __pstringtext:	
  1985  1800                     _CC2500_registers_address:	
  1986  1800  3403               	retlw	3
  1987  1801  3416               	retlw	22
  1988  1802  3417               	retlw	23
  1989  1803  341E               	retlw	30
  1990  1804  341F               	retlw	31
  1991  1805  3420               	retlw	32
  1992  1806  342A               	retlw	42
  1993  1807  342B               	retlw	43
  1994  1808  340B               	retlw	11
  1995  1809  340C               	retlw	12
  1996  180A  340D               	retlw	13
  1997  180B  340E               	retlw	14
  1998  180C  340F               	retlw	15
  1999  180D  3410               	retlw	16
  2000  180E  3411               	retlw	17
  2001  180F  3412               	retlw	18
  2002  1810  3413               	retlw	19
  2003  1811  3414               	retlw	20
  2004  1812  340A               	retlw	10
  2005  1813  3415               	retlw	21
  2006  1814  3421               	retlw	33
  2007  1815  3422               	retlw	34
  2008  1816  3418               	retlw	24
  2009  1817  3419               	retlw	25
  2010  1818  341A               	retlw	26
  2011  1819  341B               	retlw	27
  2012  181A  341C               	retlw	28
  2013  181B  341D               	retlw	29
  2014  181C  3423               	retlw	35
  2015  181D  3424               	retlw	36
  2016  181E  3425               	retlw	37
  2017  181F  3426               	retlw	38
  2018  1820  3429               	retlw	41
  2019  1821  342C               	retlw	44
  2020  1822  342D               	retlw	45
  2021  1823  342E               	retlw	46
  2022  1824  3400               	retlw	0
  2023  1825  3401               	retlw	1
  2024  1826  3402               	retlw	2
  2025  1827  3407               	retlw	7
  2026  1828  3408               	retlw	8
  2027  1829  3409               	retlw	9
  2028  182A  3406               	retlw	6
  2029  182B  3404               	retlw	4
  2030  182C  3405               	retlw	5
  2031  182D  3427               	retlw	39
  2032  182E  3428               	retlw	40
  2033  182F                     __end_of_CC2500_registers_address:	
  2034  182F                     _CC2500_rfSettings:	
  2035  182F  3407               	retlw	7
  2036  1830  3407               	retlw	7
  2037  1831  3430               	retlw	48
  2038  1832  3487               	retlw	135
  2039  1833  346B               	retlw	107
  2040  1834  34F8               	retlw	248
  2041  1835  347F               	retlw	127
  2042  1836  343F               	retlw	63
  2043  1837  3409               	retlw	9
  2044  1838  3400               	retlw	0
  2045  1839  345C               	retlw	92
  2046  183A  34A7               	retlw	167
  2047  183B  3462               	retlw	98
  2048  183C  3486               	retlw	134
  2049  183D  3483               	retlw	131
  2050  183E  3403               	retlw	3
  2051  183F  3422               	retlw	34
  2052  1840  34F8               	retlw	248
  2053  1841  3400               	retlw	0
  2054  1842  3444               	retlw	68
  2055  1843  34B6               	retlw	182
  2056  1844  3410               	retlw	16
  2057  1845  3418               	retlw	24
  2058  1846  341D               	retlw	29
  2059  1847  341C               	retlw	28
  2060  1848  34C7               	retlw	199
  2061  1849  3400               	retlw	0
  2062  184A  34B2               	retlw	178
  2063  184B  34EA               	retlw	234
  2064  184C  340A               	retlw	10
  2065  184D  3400               	retlw	0
  2066  184E  3411               	retlw	17
  2067  184F  3459               	retlw	89
  2068  1850  3488               	retlw	136
  2069  1851  3431               	retlw	49
  2070  1852  340B               	retlw	11
  2071  1853  342F               	retlw	47
  2072  1854  342E               	retlw	46
  2073  1855  3406               	retlw	6
  2074  1856  3404               	retlw	4
  2075  1857  3405               	retlw	5
  2076  1858  3400               	retlw	0
  2077  1859  3430               	retlw	48
  2078  185A  34D3               	retlw	211
  2079  185B  3491               	retlw	145
  2080  185C  3441               	retlw	65
  2081  185D  3400               	retlw	0
  2082  185E                     __end_of_CC2500_rfSettings:	
  2083  185E                     _CC2500_patable_vaule:	
  2084  185E  34FE               	retlw	254
  2085  185F  34FE               	retlw	254
  2086  1860  34FE               	retlw	254
  2087  1861  34FE               	retlw	254
  2088  1862  34FE               	retlw	254
  2089  1863  34FE               	retlw	254
  2090  1864  34FE               	retlw	254
  2091  1865  34FE               	retlw	254
  2092  1866                     __end_of_CC2500_patable_vaule:	
  2093                           
  2094                           	psect	nvCOMMON
  2095  007D                     __pnvCOMMON:	
  2096  007D                     _TMain:	
  2097  007D                     	ds	1
  2098                           
  2099                           	psect	nvBANK0
  2100  006F                     __pnvBANK0:	
  2101  006F                     _Product:	
  2102  006F                     	ds	1
  2103                           
  2104                           	psect	nvBANK1
  2105  00E7                     __pnvBANK1:	
  2106  00E7                     _Memory:	
  2107  00E7                     	ds	1
  2108  00E8                     _Timer0:	
  2109  00E8                     	ds	1
  2110  00E9                     _WDT:	
  2111  00E9                     	ds	1
  2112  000C                     _PORTA	set	12
  2113  000D                     _PORTB	set	13
  2114  000E                     _PORTC	set	14
  2115  0015                     _TMR0	set	21
  2116  005F                     _GIE	set	95
  2117  005C                     _INTE	set	92
  2118  0059                     _INTF	set	89
  2119  005B                     _IOCIE	set	91
  2120  0058                     _IOCIF	set	88
  2121  005E                     _PEIE	set	94
  2122  0060                     _RA0	set	96
  2123  0063                     _RA3	set	99
  2124  0064                     _RA4	set	100
  2125  0066                     _RA6	set	102
  2126  0067                     _RA7	set	103
  2127  0068                     _RB0	set	104
  2128  0069                     _RB1	set	105
  2129  006A                     _RB2	set	106
  2130  006B                     _RB3	set	107
  2131  006C                     _RB4	set	108
  2132  006D                     _RB5	set	109
  2133  0070                     _RC0	set	112
  2134  0071                     _RC1	set	113
  2135  0072                     _RC2	set	114
  2136  0074                     _RC4	set	116
  2137  0075                     _RC5	set	117
  2138  0077                     _RC7	set	119
  2139  005D                     _TMR0IE	set	93
  2140  005A                     _TMR0IF	set	90
  2141  009D                     _ADCON0	set	157
  2142  009E                     _ADCON1	set	158
  2143  009C                     _ADRESH	set	156
  2144  009B                     _ADRESL	set	155
  2145  0095                     _OPTION_REG	set	149
  2146  0099                     _OSCCON	set	153
  2147  008C                     _TRISA	set	140
  2148  008D                     _TRISB	set	141
  2149  008E                     _TRISC	set	142
  2150  0097                     _WDTCON	set	151
  2151  04E9                     _GO_nDONE	set	1257
  2152  0117                     _FVRCON	set	279
  2153  010C                     _LATA	set	268
  2154  010D                     _LATB	set	269
  2155  010E                     _LATC	set	270
  2156  018C                     _ANSELA	set	396
  2157  018D                     _ANSELB	set	397
  2158  018E                     _ANSELC	set	398
  2159  0192                     _PMADRH	set	402
  2160  0191                     _PMADRL	set	401
  2161  0196                     _PMCON2	set	406
  2162  0194                     _PMDATH	set	404
  2163  0193                     _PMDATL	set	403
  2164  0CAE                     _CFGS	set	3246
  2165  0CAC                     _FREE	set	3244
  2166  0CAD                     _LWLO	set	3245
  2167  0CA8                     _RD	set	3240
  2168  0CA9                     _WR	set	3241
  2169  0CAA                     _WREN	set	3242
  2170  1068                     _WPUB0	set	4200
  2171  1069                     _WPUB1	set	4201
  2172  106A                     _WPUB2	set	4202
  2173  0396                     _IOCBF	set	918
  2174  0395                     _IOCBN	set	917
  2175  0394                     _IOCBP	set	916
  2176  1CB2                     _IOCBF2	set	7346
  2177                           
  2178                           ; #config settings
  2179  0000                     
  2180                           	psect	cinit
  2181  0018                     start_initialization:	
  2182  0018                     __initialization:	
  2183                           
  2184                           ; Clear objects allocated to BITCOMMON
  2185  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2186                           
  2187                           ; Clear objects allocated to COMMON
  2188  0019  01F7               	clrf	__pbssCOMMON& (0+127)
  2189  001A  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
  2190  001B  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
  2191  001C  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
  2192  001D  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
  2193                           
  2194                           ; Clear objects allocated to BANK0
  2195  001E  01EC               	clrf	__pbssBANK0& (0+127)
  2196  001F  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2197  0020  01EE               	clrf	(__pbssBANK0+2)& (0+127)
  2198                           
  2199                           ; Clear objects allocated to BANK1
  2200  0021  30A0               	movlw	low __pbssBANK1
  2201  0022  0084               	movwf	4
  2202  0023  3000               	movlw	high __pbssBANK1
  2203  0024  0085               	movwf	5
  2204  0025  3047               	movlw	71
  2205  0026  31A5  25E9  3180   	fcall	clear_ram0
  2206                           
  2207                           ; Clear objects allocated to BANK2
  2208  0029  3020               	movlw	low __pbssBANK2
  2209  002A  0084               	movwf	4
  2210  002B  3001               	movlw	high __pbssBANK2
  2211  002C  0085               	movwf	5
  2212  002D  304A               	movlw	74
  2213  002E  31A5  25E9  3180   	fcall	clear_ram0
  2214                           
  2215                           ; Clear objects allocated to BANK3
  2216  0031  30A0               	movlw	low __pbssBANK3
  2217  0032  0084               	movwf	4
  2218  0033  3001               	movlw	high __pbssBANK3
  2219  0034  0085               	movwf	5
  2220  0035  3025               	movlw	37
  2221  0036  31A5  25E9  3180   	fcall	clear_ram0
  2222                           
  2223                           ; Clear objects allocated to BANK4
  2224  0039  3020               	movlw	low __pbssBANK4
  2225  003A  0084               	movwf	4
  2226  003B  3002               	movlw	high __pbssBANK4
  2227  003C  0085               	movwf	5
  2228  003D  3047               	movlw	71
  2229  003E  31A5  25E9  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Initialize objects allocated to BANK3
  2232  0041  300D               	movlw	low __pidataBANK3
  2233  0042  0084               	movwf	4
  2234  0043  309A               	movlw	(high __pidataBANK3)| (0+128)
  2235  0044  0085               	movwf	5
  2236  0045  30C5               	movlw	low __pdataBANK3
  2237  0046  0086               	movwf	6
  2238  0047  3001               	movlw	high __pdataBANK3
  2239  0048  0087               	movwf	7
  2240  0049  3020               	movlw	32
  2241  004A  31A5  25E3         	fcall	init_ram
  2242  004C                     end_of_initialization:	
  2243                           ;End of C runtime variable initialization code
  2244                           
  2245  004C                     __end_of__initialization:	
  2246  004C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2247  004D  0020               	movlb	0
  2248  004E  3195  2D44         	ljmp	_main	;jump to C main() function
  2249                           
  2250                           	psect	bitbssCOMMON
  2251  03E0                     __pbitbssCOMMON:	
  2252  03E0                     _Receive_OK:	
  2253  03E0                     	ds	1
  2254  03E1                     _Transceive_OK:	
  2255  03E1                     	ds	1
  2256                           
  2257                           	psect	bssCOMMON
  2258  0077                     __pbssCOMMON:	
  2259  0077                     _Buz:	
  2260  0077                     	ds	1
  2261  0078                     _DimmerLights11:	
  2262  0078                     	ds	1
  2263  0079                     _PF:	
  2264  0079                     	ds	1
  2265  007A                     _RF:	
  2266  007A                     	ds	1
  2267  007B                     _Temp:	
  2268  007B                     	ds	1
  2269                           
  2270                           	psect	bssBANK0
  2271  006C                     __pbssBANK0:	
  2272  006C                     _DimmerLights:	
  2273  006C                     	ds	1
  2274  006D                     _Sw:	
  2275  006D                     	ds	1
  2276  006E                     _Load:	
  2277  006E                     	ds	1
  2278                           
  2279                           	psect	bssBANK1
  2280  00A0                     __pbssBANK1:	
  2281  00A0                     _RF_Data:	
  2282  00A0                     	ds	21
  2283  00B5                     _RF_Count:	
  2284  00B5                     	ds	2
  2285  00B7                     _CRC:	
  2286  00B7                     	ds	1
  2287  00B8                     _DelayOff:	
  2288  00B8                     	ds	1
  2289  00B9                     _Dimmer:	
  2290  00B9                     	ds	1
  2291  00BA                     _DimmerLightsIntr:	
  2292  00BA                     	ds	1
  2293  00BB                     _LED:	
  2294  00BB                     	ds	1
  2295  00BC                     _RFSW:	
  2296  00BC                     	ds	1
  2297  00BD                     _RSSI:	
  2298  00BD                     	ds	1
  2299  00BE                     _Rx_Length:	
  2300  00BE                     	ds	1
  2301  00BF                     _SPI0Buffer:	
  2302  00BF                     	ds	1
  2303  00C0                     _Tx_Length:	
  2304  00C0                     	ds	1
  2305  00C1                     _r_address:	
  2306  00C1                     	ds	1
  2307  00C2                     _r_data:	
  2308  00C2                     	ds	1
  2309  00C3                     _s_data:	
  2310  00C3                     	ds	1
  2311  00C4                     _VarTimer0:	
  2312  00C4                     	ds	9
  2313  00CD                     _DlySw1:	
  2314  00CD                     	ds	5
  2315  00D2                     _VarErrLED:	
  2316  00D2                     	ds	4
  2317  00D6                     _VarLED1:	
  2318  00D6                     	ds	4
  2319  00DA                     _VarLED2:	
  2320  00DA                     	ds	4
  2321  00DE                     _Dimmer1:	
  2322  00DE                     	ds	3
  2323  00E1                     _RF1:	
  2324  00E1                     	ds	3
  2325  00E4                     __WDT:	
  2326  00E4                     	ds	2
  2327  00E6                     _RFSW1:	
  2328  00E6                     	ds	1
  2329                           
  2330                           	psect	bssBANK2
  2331  0120                     __pbssBANK2:	
  2332  0120                     _VarTMain:	
  2333  0120                     	ds	17
  2334  0131                     _DimmerLights1:	
  2335  0131                     	ds	14
  2336  013F                     _Temp1:	
  2337  013F                     	ds	14
  2338  014D                     _Buz1:	
  2339  014D                     	ds	12
  2340  0159                     _Sw1:	
  2341  0159                     	ds	9
  2342  0162                     _PF1:	
  2343  0162                     	ds	8
  2344                           
  2345                           	psect	bssBANK3
  2346  01A0                     __pbssBANK3:	
  2347  01A0                     _VarMemory:	
  2348  01A0                     	ds	37
  2349                           
  2350                           	psect	dataBANK3
  2351  01C5                     __pdataBANK3:	
  2352  01C5                     _VarProduct:	
  2353  01C5                     	ds	32
  2354                           
  2355                           	psect	bssBANK4
  2356  0220                     __pbssBANK4:	
  2357  0220                     _Load1:	
  2358  0220                     	ds	71
  2359                           
  2360                           	psect	clrtext
  2361  25E9                     clear_ram0:	
  2362                           ;	Called with FSR0 containing the base address, and
  2363                           ;	WREG with the size to clear
  2364                           
  2365  25E9  0064               	clrwdt	;clear the watchdog before getting into this loop
  2366  25EA                     clrloop0:	
  2367  25EA  0180               	clrf	0	;clear RAM location pointed to by FSR
  2368  25EB  3101               	addfsr 0,1
  2369  25EC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2370  25ED  2DEA               	goto	clrloop0	;have we reached the end yet?
  2371  25EE  3400               	retlw	0	;all done for this memory range, return
  2372                           
  2373                           	psect	inittext
  2374  25E3                     init_ram:	
  2375  25E3  00FE               	movwf	126
  2376  25E4                     initloop:	
  2377  25E4  0012               	moviw fsr0++
  2378  25E5  001E               	movwi fsr1++
  2379  25E6  0BFE               	decfsz	126,f
  2380  25E7  2DE4               	goto	initloop
  2381  25E8  3400               	retlw	0
  2382                           
  2383                           	psect	cstackCOMMON
  2384  0070                     __pcstackCOMMON:	
  2385  0070                     ?_CC2500_WriteByte:	
  2386  0070                     ?_CC2500_WriteCommand:	
  2387                           ; 0 bytes @ 0x0
  2388                           
  2389  0070                     ?_CC2500_ReadStatus:	
  2390                           ; 0 bytes @ 0x0
  2391                           
  2392  0070                     ?_CC2500_ReadByte:	
  2393                           ; 0 bytes @ 0x0
  2394                           
  2395  0070                     ?_CC2500_PowerRST:	
  2396                           ; 0 bytes @ 0x0
  2397                           
  2398  0070                     ?_CC2500_InitSetREG:	
  2399                           ; 0 bytes @ 0x0
  2400                           
  2401  0070                     ?_CC2500_InitPATable:	
  2402                           ; 0 bytes @ 0x0
  2403                           
  2404  0070                     ?_CC2500_ClearTXFIFO:	
  2405                           ; 0 bytes @ 0x0
  2406                           
  2407  0070                     ?_CC2500_ClearRXFIFO:	
  2408                           ; 0 bytes @ 0x0
  2409                           
  2410  0070                     ?_CC2500_FrequencyCabr:	
  2411                           ; 0 bytes @ 0x0
  2412                           
  2413  0070                     ?_CC2500_SIDLEMode:	
  2414                           ; 0 bytes @ 0x0
  2415                           
  2416  0070                     ?_DlyOff_Initialization:	
  2417                           ; 0 bytes @ 0x0
  2418                           
  2419  0070                     ?_DlyOff_Main:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0070                     ?_setTxData:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0070                     ?_setDimmerLights_Initialization:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0070                     ?_Dimmer_Initialization:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0070                     ?_setLoad_GO:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0070                     ?_setDimmerLights_Main:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0070                     ?_setDimmerLights_ERROR:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0070                     ?_setLoad_Count:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0070                     ?_setLED_Initialization:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0070                     ?_setLED_Main:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0070                     ?_IO_Set:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0070                     ?_TMR0_Set:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_ADC_Set:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     ?_INT_Set:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_IOC_Set:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_WDT_Set:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_IOC_ISR:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ??_IOC_ISR:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_TMR0_ISR:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_INT_ISR:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_Flash_Memory_Write:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_Flash_Memory_Modify:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_WDT_Clearing:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_setLoad_AH_AL_Restore:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_setLoad_Exceptions:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_setSw_Enable:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_setTemp_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_setTemp_Main:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setOverTemp_Exceptions:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setPowerFault_Initialization:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setPowerFault_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setPowerFault_Exceptions:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setRF_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setRF_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_getRxData:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_RF_RxDisable:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_setLog_Code:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_setControl_Lights_Table:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_setRFSW_Control:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_setRFSW_AdjControl:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_setRF_DimmerValue:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_setSw_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_setSw_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Sw_DimmerOnFunc:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Sw_DimmerAdjFunc:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_Sw_DimmerOffFunc:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_MainT_Initialization:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_MainT:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_Buzzer_Initialization:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_Buzzer_Main:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_CC2500_TxData:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_CC2500_RxData:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_CC2500_PowerOnInitial:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_DelayOffPointSelect:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_DelayOff_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_DelayOff_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_DimmerLightsPointSelect:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_DimmerLights_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_DimmerLights_Close:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_DimmerLights_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_DimmerLights_Exceptions:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setDimmerLights_AdjRF:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_LedPointSelect:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_LED_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_LED_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_Mcu_Initialization:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_ISR:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setDimmerReClock:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ??_setDimmerReClock:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setINT_GO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_Flash_Memory_Initialization:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Flash_Memory_Main:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_Flash_Memory_Unlock:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Flash_Memory_Erasing:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_WDT_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_Load_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_getLoad_AD:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_Load_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setLoad_Enable:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_Temp_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setTemp_Enable:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_getTemp_AD:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Temp_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_PowerFault_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_PowerFault_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_getPowerFault_AD:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_RfPointSelect:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_RF_Initialization:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_RF_Main:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_RfSWPointSelect:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TouchPower:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_SwPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Switch_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Switch_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?i1_setLoad_StatusOff:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?i1_RfPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ??i1_RfPointSelect:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_DelayTimejudge:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_getDimmerLights_StatusFlag:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     ?_getPercentValue:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Read:	
  2723                           ; 1 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_Safe:	
  2726                           ; 1 bytes @ 0x0
  2727                           
  2728  0070                     ?_getPF_Safe:	
  2729                           ; 1 bytes @ 0x0
  2730                           
  2731  0070                     ?_setPercentValue:	
  2732                           ; 1 bytes @ 0x0
  2733                           
  2734  0070                     ?_getLoad_Safe:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0070                     setRF_Initialization@rf:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0070                     i1setLoad_StatusOff@command:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743                           
  2744                           ; 1 bytes @ 0x0
  2745  0070                     	ds	1
  2746  0071                     ??i1_setLoad_StatusOff:	
  2747  0071                     i1setLoad_StatusOff@lights:	
  2748                           ; 0 bytes @ 0x1
  2749                           
  2750  0071                     i1RfPointSelect@rf:	
  2751                           ; 1 bytes @ 0x1
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x1
  2755  0071                     	ds	1
  2756  0072                     ??_TMR0_ISR:	
  2757  0072                     ?_setRF_ReceiveGO:	
  2758                           ; 0 bytes @ 0x2
  2759                           
  2760  0072                     setRF_ReceiveGO@command:	
  2761                           ; 0 bytes @ 0x2
  2762                           
  2763                           
  2764                           ; 1 bytes @ 0x2
  2765  0072                     	ds	1
  2766  0073                     ??_setRF_ReceiveGO:	
  2767  0073                     setRF_ReceiveGO@rf:	
  2768                           ; 0 bytes @ 0x3
  2769                           
  2770                           
  2771                           ; 1 bytes @ 0x3
  2772  0073                     	ds	1
  2773  0074                     ??_INT_ISR:	
  2774                           
  2775                           ; 0 bytes @ 0x4
  2776  0074                     	ds	2
  2777  0076                     ??_ISR:	
  2778                           
  2779                           ; 0 bytes @ 0x6
  2780  0076                     	ds	1
  2781                           
  2782                           	psect	cstackBANK0
  2783  0020                     __pcstackBANK0:	
  2784  0020                     ??_CC2500_WriteByte:	
  2785  0020                     ??_CC2500_ReadByte:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0020                     ?_DelayTime_1us:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0020                     ??_DelayTimejudge:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0020                     ??_Dimmer_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ??_getDimmerLights_StatusFlag:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_setLoad_GO:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ?_setLoad_StatusOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_setLoad_Count:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ?_setLoad_StatusOn:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_IO_Set:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_TMR0_Set:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_ADC_Set:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_INT_Set:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_IOC_Set:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_WDT_Set:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_Flash_Memory_Read:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_Flash_Memory_Write:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_WDT_Clearing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setLoad_AH_AL_Restore:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_getTemp_Safe:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_getPF_Safe:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_setTemp_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_setPowerFault_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_setRF_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_MainT_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_Buzzer_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_Buzzer_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_DelayOffPointSelect:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_DimmerLightsPointSelect:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_setINT_GO:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_Flash_Memory_Unlock:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_Flash_Memory_Erasing:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_WDT_Main:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_setLoad_Enable:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_getLoad_Safe:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_setTemp_Enable:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_RfPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_RfSWPointSelect:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_TouchPower:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_SwPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ?_getAD:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ?___wmul:	
  2912                           ; 2 bytes @ 0x0
  2913                           
  2914  0020                     ?___lwdiv:	
  2915                           ; 2 bytes @ 0x0
  2916                           
  2917  0020                     ?___ftpack:	
  2918                           ; 2 bytes @ 0x0
  2919                           
  2920  0020                     getDimmerLights_StatusFlag@Status:	
  2921                           ; 3 bytes @ 0x0
  2922                           
  2923  0020                     setINT_GO@command:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0020                     getAD@adcon1:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0020                     setLoad_Enable@command:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0020                     setLoad_GO@command:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0020                     setLoad_StatusOn@command:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0020                     setLoad_StatusOff@command:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0020                     setTemp_Enable@command:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0020                     DelayTime_1us@count:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0020                     ___wmul@multiplier:	
  2948                           ; 2 bytes @ 0x0
  2949                           
  2950  0020                     ___lwdiv@divisor:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     ___ftpack@arg:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956                           
  2957                           ; 3 bytes @ 0x0
  2958  0020                     	ds	1
  2959  0021                     ??_setLoad_StatusOff:	
  2960  0021                     ??_setLoad_StatusOn:	
  2961                           ; 0 bytes @ 0x1
  2962                           
  2963  0021                     ??_DimmerLights_Close:	
  2964                           ; 0 bytes @ 0x1
  2965                           
  2966  0021                     ??_Mcu_Initialization:	
  2967                           ; 0 bytes @ 0x1
  2968                           
  2969  0021                     ??_Temp_Initialization:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972  0021                     ??_PowerFault_Initialization:	
  2973                           ; 0 bytes @ 0x1
  2974                           
  2975  0021                     ??_RF_Initialization:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978  0021                     CC2500_WriteByte@loop_a:	
  2979                           ; 0 bytes @ 0x1
  2980                           
  2981  0021                     CC2500_ReadByte@loop_b:	
  2982                           ; 1 bytes @ 0x1
  2983                           
  2984  0021                     DelayOffPointSelect@sw:	
  2985                           ; 1 bytes @ 0x1
  2986                           
  2987  0021                     DelayTimejudge@i:	
  2988                           ; 1 bytes @ 0x1
  2989                           
  2990  0021                     DimmerLightsPointSelect@lights:	
  2991                           ; 1 bytes @ 0x1
  2992                           
  2993  0021                     LedPointSelect@led:	
  2994                           ; 1 bytes @ 0x1
  2995                           
  2996  0021                     Flash_Memory_Read@i:	
  2997                           ; 1 bytes @ 0x1
  2998                           
  2999  0021                     Flash_Memory_Write@i:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002  0021                     setLoad_Count@command:	
  3003                           ; 1 bytes @ 0x1
  3004                           
  3005  0021                     setLoad_StatusOn@lights:	
  3006                           ; 1 bytes @ 0x1
  3007                           
  3008  0021                     setLoad_StatusOff@lights:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     setLoad_AH_AL_Restore@i:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     RfPointSelect@rf:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     RfSWPointSelect@sw:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     SwPointSelect@sw:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023                           
  3024                           ; 1 bytes @ 0x1
  3025  0021                     	ds	1
  3026  0022                     ??_CC2500_WriteCommand:	
  3027  0022                     ??_CC2500_ReadStatus:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0022                     ?_setRF_RxStatus:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0022                     ??_DelayTime_1us:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0022                     ?_CC2500_WriteREG:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ??_DlyOff_Initialization:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ?_setSw_Status:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_setRFSW_Status:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ?_setDimmerLights_Trigger:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setDimmerLights_Switch:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ??_setTxData:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ??_setDimmerLights_Initialization:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setDimmerLights_TriggerERROR:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ?_setLED:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ??_setLED_Main:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ??_setSw_Enable:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ?_setRF_Enable:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ?_setDimmerLights_AdjGo:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ?_setDimmerLights_TriggerAdj:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_Clear:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ??_Load_Initialization:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     ?_setRF_Learn:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     CC2500_WriteREG@value:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0022                     DlyOff_Initialization@sw:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     DelayTimejudge@value:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     setDimmerLights_TriggerERROR@command:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setDimmerLights_Switch@command:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setDimmerLights_AdjGo@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     setDimmerLights_Trigger@command:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setDimmerLights_TriggerAdj@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setDimmerLights_Clear@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setLED@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     Flash_Memory_Read@address:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setRF_Learn@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     setRF_RxStatus@command:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     setRF_Enable@command:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     setRFSW_Status@command:	
  3133                           ; 1 bytes @ 0x2
  3134                           
  3135  0022                     setSw_Enable@command:	
  3136                           ; 1 bytes @ 0x2
  3137                           
  3138  0022                     setSw_Status@command:	
  3139                           ; 1 bytes @ 0x2
  3140                           
  3141  0022                     DelayTime_1us@i:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0022                     ___wmul@multiplicand:	
  3145                           ; 2 bytes @ 0x2
  3146                           
  3147  0022                     ___lwdiv@dividend:	
  3148                           ; 2 bytes @ 0x2
  3149                           
  3150                           
  3151                           ; 2 bytes @ 0x2
  3152  0022                     	ds	1
  3153  0023                     ??_setRF_RxStatus:	
  3154  0023                     ??_CC2500_WriteREG:	
  3155                           ; 0 bytes @ 0x3
  3156                           
  3157  0023                     ??_setSw_Status:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_setRFSW_Status:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_setDimmerLights_Trigger:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_setDimmerLights_Switch:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setDimmerLights_TriggerERROR:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_setLED:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     ??_setRF_Enable:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     ??_DelayOff_Initialization:	
  3179                           ; 0 bytes @ 0x3
  3180                           
  3181  0023                     ?_setDelayOff_GO:	
  3182                           ; 0 bytes @ 0x3
  3183                           
  3184  0023                     ??_setDimmerLights_AdjGo:	
  3185                           ; 0 bytes @ 0x3
  3186                           
  3187  0023                     ??_setDimmerLights_TriggerAdj:	
  3188                           ; 0 bytes @ 0x3
  3189                           
  3190  0023                     ??_setDimmerLights_Clear:	
  3191                           ; 0 bytes @ 0x3
  3192                           
  3193  0023                     ??_getAD:	
  3194                           ; 0 bytes @ 0x3
  3195                           
  3196  0023                     ??_setRF_Learn:	
  3197                           ; 0 bytes @ 0x3
  3198                           
  3199  0023                     CC2500_WriteCommand@command:	
  3200                           ; 0 bytes @ 0x3
  3201                           
  3202  0023                     CC2500_ReadStatus@status_addr:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     setDelayOff_GO@command:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     setDimmerLights_Initialization@lights:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setDimmerLights_TriggerERROR@lights:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     setDimmerLights_Switch@lights:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     setDimmerLights_AdjGo@lights:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220  0023                     setDimmerLights_Trigger@lights:	
  3221                           ; 1 bytes @ 0x3
  3222                           
  3223  0023                     setDimmerLights_TriggerAdj@lights:	
  3224                           ; 1 bytes @ 0x3
  3225                           
  3226  0023                     setDimmerLights_Clear@lights:	
  3227                           ; 1 bytes @ 0x3
  3228                           
  3229  0023                     setLED@led:	
  3230                           ; 1 bytes @ 0x3
  3231                           
  3232  0023                     getAD@adcon0:	
  3233                           ; 1 bytes @ 0x3
  3234                           
  3235  0023                     Flash_Memory_Read@ret:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0023                     setRF_Learn@rf:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0023                     setRF_RxStatus@rf:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0023                     setTxData@rf:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0023                     setRF_Enable@rf:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0023                     setRFSW_Status@sw:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0023                     setSw_Status@sw:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0023                     ___ftpack@exp:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259                           
  3260                           ; 1 bytes @ 0x3
  3261  0023                     	ds	1
  3262  0024                     ??_CC2500_ClearTXFIFO:	
  3263  0024                     ??_CC2500_ClearRXFIFO:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??_CC2500_SIDLEMode:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     ?_setDimmerLights:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     ??_setDimmerLights_ERROR:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     ??_setLED_Initialization:	
  3276                           ; 0 bytes @ 0x4
  3277                           
  3278  0024                     ??_Flash_Memory_Modify:	
  3279                           ; 0 bytes @ 0x4
  3280                           
  3281  0024                     ??_RF_RxDisable:	
  3282                           ; 0 bytes @ 0x4
  3283                           
  3284  0024                     ??_setSw_Initialization:	
  3285                           ; 0 bytes @ 0x4
  3286                           
  3287  0024                     ??_Sw_DimmerAdjFunc:	
  3288                           ; 0 bytes @ 0x4
  3289                           
  3290  0024                     ??_CC2500_TxData:	
  3291                           ; 0 bytes @ 0x4
  3292                           
  3293  0024                     ??_CC2500_RxData:	
  3294                           ; 0 bytes @ 0x4
  3295                           
  3296  0024                     ??_DimmerLights_Initialization:	
  3297                           ; 0 bytes @ 0x4
  3298                           
  3299  0024                     ??_getLoad_AD:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0024                     ??_getTemp_AD:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0024                     ??_getPowerFault_AD:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0024                     ??___wmul:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0024                     ??___lwdiv:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0024                     CC2500_WriteREG@w_addr:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0024                     setDelayOff_GO@value:	
  3318                           ; 1 bytes @ 0x4
  3319                           
  3320  0024                     setDimmerLights@status:	
  3321                           ; 1 bytes @ 0x4
  3322                           
  3323  0024                     setLED_Initialization@led:	
  3324                           ; 1 bytes @ 0x4
  3325                           
  3326  0024                     setLED_Main@led:	
  3327                           ; 1 bytes @ 0x4
  3328                           
  3329  0024                     RF_RxDisable@rf:	
  3330                           ; 1 bytes @ 0x4
  3331                           
  3332  0024                     setSw_Initialization@sw:	
  3333                           ; 1 bytes @ 0x4
  3334                           
  3335  0024                     Sw_DimmerAdjFunc@Idle:	
  3336                           ; 1 bytes @ 0x4
  3337                           
  3338  0024                     ___ftpack@sign:	
  3339                           ; 1 bytes @ 0x4
  3340                           
  3341  0024                     DelayTime_1us@j:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0024                     ___wmul@product:	
  3345                           ; 2 bytes @ 0x4
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x4
  3349  0024                     	ds	1
  3350  0025                     ??_CC2500_InitSetREG:	
  3351  0025                     ??_CC2500_InitPATable:	
  3352                           ; 0 bytes @ 0x5
  3353                           
  3354  0025                     ??_setDimmerLights:	
  3355                           ; 0 bytes @ 0x5
  3356                           
  3357  0025                     ??___ftpack:	
  3358                           ; 0 bytes @ 0x5
  3359                           
  3360  0025                     ??_setDelayOff_GO:	
  3361                           ; 0 bytes @ 0x5
  3362                           
  3363  0025                     ??_LED_Initialization:	
  3364                           ; 0 bytes @ 0x5
  3365                           
  3366  0025                     ??_LED_Main:	
  3367                           ; 0 bytes @ 0x5
  3368                           
  3369  0025                     ??_Switch_Initialization:	
  3370                           ; 0 bytes @ 0x5
  3371                           
  3372  0025                     CC2500_TxData@loop_e:	
  3373                           ; 0 bytes @ 0x5
  3374                           
  3375  0025                     CC2500_RxData@loop_f:	
  3376                           ; 1 bytes @ 0x5
  3377                           
  3378  0025                     setDimmerLights_ERROR@lights:	
  3379                           ; 1 bytes @ 0x5
  3380                           
  3381  0025                     Sw_DimmerAdjFunc@sw:	
  3382                           ; 1 bytes @ 0x5
  3383                           
  3384  0025                     ___lwdiv@quotient:	
  3385                           ; 1 bytes @ 0x5
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x5
  3389  0025                     	ds	1
  3390  0026                     ??_CC2500_PowerRST:	
  3391  0026                     ??_CC2500_FrequencyCabr:	
  3392                           ; 0 bytes @ 0x6
  3393                           
  3394  0026                     ?_setBuz:	
  3395                           ; 0 bytes @ 0x6
  3396                           
  3397  0026                     CC2500_InitSetREG@temp1:	
  3398                           ; 0 bytes @ 0x6
  3399                           
  3400  0026                     CC2500_InitPATable@temp:	
  3401                           ; 1 bytes @ 0x6
  3402                           
  3403  0026                     setDimmerLights@lights:	
  3404                           ; 1 bytes @ 0x6
  3405                           
  3406  0026                     Flash_Memory_Modify@i:	
  3407                           ; 1 bytes @ 0x6
  3408                           
  3409  0026                     setBuz@time:	
  3410                           ; 1 bytes @ 0x6
  3411                           
  3412                           
  3413                           ; 2 bytes @ 0x6
  3414  0026                     	ds	1
  3415  0027                     ??_Flash_Memory_Main:	
  3416  0027                     CC2500_InitSetREG@temp2:	
  3417                           ; 0 bytes @ 0x7
  3418                           
  3419  0027                     CC2500_InitPATable@loop_d:	
  3420                           ; 1 bytes @ 0x7
  3421                           
  3422  0027                     setDelayOff_GO@sw:	
  3423                           ; 1 bytes @ 0x7
  3424                           
  3425  0027                     ___lwdiv@counter:	
  3426                           ; 1 bytes @ 0x7
  3427                           
  3428                           
  3429                           ; 1 bytes @ 0x7
  3430  0027                     	ds	1
  3431  0028                     ??_setBuz:	
  3432  0028                     ?___awtoft:	
  3433                           ; 0 bytes @ 0x8
  3434                           
  3435  0028                     CC2500_InitSetREG@loop_c:	
  3436                           ; 3 bytes @ 0x8
  3437                           
  3438  0028                     getTemp_AD@channel:	
  3439                           ; 1 bytes @ 0x8
  3440                           
  3441  0028                     getPowerFault_AD@channel:	
  3442                           ; 1 bytes @ 0x8
  3443                           
  3444  0028                     ___awtoft@c:	
  3445                           ; 1 bytes @ 0x8
  3446                           
  3447                           
  3448                           ; 2 bytes @ 0x8
  3449  0028                     	ds	1
  3450  0029                     ??_CC2500_PowerOnInitial:	
  3451  0029                     setBuz@count:	
  3452                           ; 0 bytes @ 0x9
  3453                           
  3454  0029                     getLoad_AD@channel:	
  3455                           ; 1 bytes @ 0x9
  3456                           
  3457                           
  3458                           ; 1 bytes @ 0x9
  3459  0029                     	ds	1
  3460  002A                     ??_setLog_Code:	
  3461  002A                     ??_MainT:	
  3462                           ; 0 bytes @ 0xA
  3463                           
  3464  002A                     ??_DimmerLights_Exceptions:	
  3465                           ; 0 bytes @ 0xA
  3466                           
  3467  002A                     DimmerLights_Exceptions@status:	
  3468                           ; 0 bytes @ 0xA
  3469                           
  3470  002A                     getLoad_AD@j:	
  3471                           ; 1 bytes @ 0xA
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0xA
  3475  002A                     	ds	1
  3476  002B                     ??_setLoad_Exceptions:	
  3477  002B                     ??_setOverTemp_Exceptions:	
  3478                           ; 0 bytes @ 0xB
  3479                           
  3480  002B                     ??_setPowerFault_Exceptions:	
  3481                           ; 0 bytes @ 0xB
  3482                           
  3483  002B                     ??___awtoft:	
  3484                           ; 0 bytes @ 0xB
  3485                           
  3486  002B                     getLoad_AD@i:	
  3487                           ; 0 bytes @ 0xB
  3488                           
  3489  002B                     setLog_Code@rf:	
  3490                           ; 1 bytes @ 0xB
  3491                           
  3492                           
  3493                           ; 1 bytes @ 0xB
  3494  002B                     	ds	1
  3495  002C                     setLoad_Exceptions@command:	
  3496  002C                     setOverTemp_Exceptions@command:	
  3497                           ; 1 bytes @ 0xC
  3498                           
  3499  002C                     setPowerFault_Exceptions@command:	
  3500                           ; 1 bytes @ 0xC
  3501                           
  3502                           
  3503                           ; 1 bytes @ 0xC
  3504  002C                     	ds	1
  3505  002D                     ??_setTemp_Main:	
  3506  002D                     ??_setPowerFault_Main:	
  3507                           ; 0 bytes @ 0xD
  3508                           
  3509  002D                     ??_Load_Main:	
  3510                           ; 0 bytes @ 0xD
  3511                           
  3512  002D                     ___awtoft@sign:	
  3513                           ; 0 bytes @ 0xD
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0xD
  3517  002D                     	ds	1
  3518  002E                     ?___ftdiv:	
  3519  002E                     ?___ftmul:	
  3520                           ; 3 bytes @ 0xE
  3521                           
  3522  002E                     ___ftdiv@f2:	
  3523                           ; 3 bytes @ 0xE
  3524                           
  3525  002E                     ___ftmul@f1:	
  3526                           ; 3 bytes @ 0xE
  3527                           
  3528                           
  3529                           ; 3 bytes @ 0xE
  3530  002E                     	ds	1
  3531  002F                     ??_PowerFault_Main:	
  3532                           
  3533                           ; 0 bytes @ 0xF
  3534  002F                     	ds	1
  3535  0030                     ??_Temp_Main:	
  3536                           
  3537                           ; 0 bytes @ 0x10
  3538  0030                     	ds	1
  3539  0031                     Load_Main@i:	
  3540  0031                     ___ftdiv@f1:	
  3541                           ; 1 bytes @ 0x11
  3542                           
  3543  0031                     ___ftmul@f2:	
  3544                           ; 3 bytes @ 0x11
  3545                           
  3546                           
  3547                           ; 3 bytes @ 0x11
  3548  0031                     	ds	3
  3549  0034                     ??___ftdiv:	
  3550  0034                     ??___ftmul:	
  3551                           ; 0 bytes @ 0x14
  3552                           
  3553                           
  3554                           ; 0 bytes @ 0x14
  3555  0034                     	ds	4
  3556  0038                     ___ftdiv@cntr:	
  3557  0038                     ___ftmul@exp:	
  3558                           ; 1 bytes @ 0x18
  3559                           
  3560                           
  3561                           ; 1 bytes @ 0x18
  3562  0038                     	ds	1
  3563  0039                     ___ftdiv@f3:	
  3564  0039                     ___ftmul@f3_as_product:	
  3565                           ; 3 bytes @ 0x19
  3566                           
  3567                           
  3568                           ; 3 bytes @ 0x19
  3569  0039                     	ds	3
  3570  003C                     ___ftdiv@exp:	
  3571  003C                     ___ftmul@cntr:	
  3572                           ; 1 bytes @ 0x1C
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x1C
  3576  003C                     	ds	1
  3577  003D                     ___ftdiv@sign:	
  3578  003D                     ___ftmul@sign:	
  3579                           ; 1 bytes @ 0x1D
  3580                           
  3581                           
  3582                           ; 1 bytes @ 0x1D
  3583  003D                     	ds	1
  3584  003E                     ?___ftadd:	
  3585  003E                     ___ftadd@f1:	
  3586                           ; 3 bytes @ 0x1E
  3587                           
  3588                           
  3589                           ; 3 bytes @ 0x1E
  3590  003E                     	ds	3
  3591  0041                     ___ftadd@f2:	
  3592                           
  3593                           ; 3 bytes @ 0x21
  3594  0041                     	ds	3
  3595  0044                     ??___ftadd:	
  3596                           
  3597                           ; 0 bytes @ 0x24
  3598  0044                     	ds	4
  3599  0048                     ___ftadd@sign:	
  3600                           
  3601                           ; 1 bytes @ 0x28
  3602  0048                     	ds	1
  3603  0049                     ___ftadd@exp2:	
  3604                           
  3605                           ; 1 bytes @ 0x29
  3606  0049                     	ds	1
  3607  004A                     ___ftadd@exp1:	
  3608                           
  3609                           ; 1 bytes @ 0x2A
  3610  004A                     	ds	1
  3611  004B                     ?___fttol:	
  3612  004B                     ___fttol@f1:	
  3613                           ; 4 bytes @ 0x2B
  3614                           
  3615                           
  3616                           ; 3 bytes @ 0x2B
  3617  004B                     	ds	4
  3618  004F                     ??___fttol:	
  3619                           
  3620                           ; 0 bytes @ 0x2F
  3621  004F                     	ds	4
  3622  0053                     ___fttol@sign1:	
  3623                           
  3624                           ; 1 bytes @ 0x33
  3625  0053                     	ds	1
  3626  0054                     ___fttol@lval:	
  3627                           
  3628                           ; 4 bytes @ 0x34
  3629  0054                     	ds	4
  3630  0058                     ___fttol@exp1:	
  3631                           
  3632                           ; 1 bytes @ 0x38
  3633  0058                     	ds	1
  3634  0059                     ??_getPercentValue:	
  3635  0059                     ??_setPercentValue:	
  3636                           ; 0 bytes @ 0x39
  3637                           
  3638  0059                     setPercentValue@value:	
  3639                           ; 0 bytes @ 0x39
  3640                           
  3641                           
  3642                           ; 1 bytes @ 0x39
  3643  0059                     	ds	1
  3644  005A                     setPercentValue@i:	
  3645                           
  3646                           ; 3 bytes @ 0x3A
  3647  005A                     	ds	1
  3648  005B                     getPercentValue@value:	
  3649                           
  3650                           ; 1 bytes @ 0x3B
  3651  005B                     	ds	1
  3652  005C                     getPercentValue@i:	
  3653                           
  3654                           ; 3 bytes @ 0x3C
  3655  005C                     	ds	1
  3656  005D                     ?_setRF_DimmerLights:	
  3657  005D                     ??_Flash_Memory_Initialization:	
  3658                           ; 0 bytes @ 0x3D
  3659                           
  3660  005D                     setRF_DimmerLights@on:	
  3661                           ; 0 bytes @ 0x3D
  3662                           
  3663                           
  3664                           ; 1 bytes @ 0x3D
  3665  005D                     	ds	1
  3666  005E                     ??_setRF_DimmerLights:	
  3667  005E                     Flash_Memory_Initialization@i:	
  3668                           ; 0 bytes @ 0x3E
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x3E
  3672  005E                     	ds	1
  3673  005F                     ??_setDimmerLights_AdjRF:	
  3674                           
  3675                           ; 0 bytes @ 0x3F
  3676  005F                     	ds	1
  3677  0060                     setDimmerLights_AdjRF@lights:	
  3678  0060                     setRF_DimmerLights@status:	
  3679                           ; 1 bytes @ 0x40
  3680                           
  3681                           
  3682                           ; 1 bytes @ 0x40
  3683  0060                     	ds	1
  3684  0061                     ??_setRF_DimmerValue:	
  3685  0061                     setRF_DimmerLights@lights:	
  3686                           ; 0 bytes @ 0x41
  3687                           
  3688                           
  3689                           ; 1 bytes @ 0x41
  3690  0061                     	ds	1
  3691  0062                     ??_DlyOff_Main:	
  3692  0062                     ?_setDimmerLights_Adj:	
  3693                           ; 0 bytes @ 0x42
  3694                           
  3695  0062                     ??_setRFSW_Control:	
  3696                           ; 0 bytes @ 0x42
  3697                           
  3698  0062                     ??_Sw_DimmerOnFunc:	
  3699                           ; 0 bytes @ 0x42
  3700                           
  3701  0062                     ??_Sw_DimmerOffFunc:	
  3702                           ; 0 bytes @ 0x42
  3703                           
  3704  0062                     setDimmerLights_Adj@status:	
  3705                           ; 0 bytes @ 0x42
  3706                           
  3707  0062                     Sw_DimmerOnFunc@Idle:	
  3708                           ; 1 bytes @ 0x42
  3709                           
  3710                           
  3711                           ; 1 bytes @ 0x42
  3712  0062                     	ds	1
  3713  0063                     ??_setDimmerLights_Adj:	
  3714  0063                     setRFSW_Control@sw:	
  3715                           ; 0 bytes @ 0x43
  3716                           
  3717  0063                     setRF_DimmerValue@lights:	
  3718                           ; 1 bytes @ 0x43
  3719                           
  3720  0063                     Sw_DimmerOnFunc@sw:	
  3721                           ; 1 bytes @ 0x43
  3722                           
  3723                           
  3724                           ; 1 bytes @ 0x43
  3725  0063                     	ds	1
  3726  0064                     ??_setRFSW_AdjControl:	
  3727  0064                     DlyOff_Main@sw:	
  3728                           ; 0 bytes @ 0x44
  3729                           
  3730  0064                     setDimmerLights_Adj@lights:	
  3731                           ; 1 bytes @ 0x44
  3732                           
  3733  0064                     Sw_DimmerOffFunc@sw:	
  3734                           ; 1 bytes @ 0x44
  3735                           
  3736                           
  3737                           ; 1 bytes @ 0x44
  3738  0064                     	ds	1
  3739  0065                     ??_setDimmerLights_Main:	
  3740  0065                     ??_setSw_Main:	
  3741                           ; 0 bytes @ 0x45
  3742                           
  3743  0065                     ??_DelayOff_Main:	
  3744                           ; 0 bytes @ 0x45
  3745                           
  3746  0065                     setDimmerLights_Main@clear:	
  3747                           ; 0 bytes @ 0x45
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x45
  3751  0065                     	ds	1
  3752  0066                     setDimmerLights_Main@lights:	
  3753  0066                     setRFSW_AdjControl@sw:	
  3754                           ; 1 bytes @ 0x46
  3755                           
  3756                           
  3757                           ; 1 bytes @ 0x46
  3758  0066                     	ds	1
  3759  0067                     ??_setControl_Lights_Table:	
  3760  0067                     ??_DimmerLights_Main:	
  3761                           ; 0 bytes @ 0x47
  3762                           
  3763  0067                     setControl_Lights_Table@rf:	
  3764                           ; 0 bytes @ 0x47
  3765                           
  3766  0067                     _setSw_Main$4539:	
  3767                           ; 1 bytes @ 0x47
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0x47
  3771  0067                     	ds	1
  3772  0068                     ??_getRxData:	
  3773  0068                     getRxData@rf:	
  3774                           ; 0 bytes @ 0x48
  3775                           
  3776  0068                     setSw_Main@sw:	
  3777                           ; 1 bytes @ 0x48
  3778                           
  3779                           
  3780                           ; 1 bytes @ 0x48
  3781  0068                     	ds	1
  3782  0069                     ??_setRF_Main:	
  3783  0069                     ??_Switch_Main:	
  3784                           ; 0 bytes @ 0x49
  3785                           
  3786                           
  3787                           ; 0 bytes @ 0x49
  3788  0069                     	ds	1
  3789  006A                     setRF_Main@rf:	
  3790                           
  3791                           ; 1 bytes @ 0x4A
  3792  006A                     	ds	1
  3793  006B                     _setRF_Main$3951:	
  3794                           
  3795                           ; 1 bytes @ 0x4B
  3796  006B                     	ds	1
  3797  006C                     ??_RF_Main:	
  3798  006C                     ??_main:	
  3799                           ; 0 bytes @ 0x4C
  3800                           
  3801                           
  3802                           	psect	maintext
  3803  1544                     __pmaintext:	
  3804                           ; 0 bytes @ 0x4C
  3805 ;;
  3806 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3807 ;;
  3808 ;; *************** function _main *****************
  3809 ;; Defined at:
  3810 ;;		line 8 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;		None
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;		None
  3815 ;; Return value:  Size  Location     Type
  3816 ;;		None               void
  3817 ;; Registers used:
  3818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3819 ;; Tracked objects:
  3820 ;;		On entry : 17F/0
  3821 ;;		On exit  : 0/0
  3822 ;;		Unchanged: 0/0
  3823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3828 ;;Total ram usage:        0 bytes
  3829 ;; Hardware stack levels required when called:   14
  3830 ;; This function calls:
  3831 ;;		_Buzzer_Initialization
  3832 ;;		_Buzzer_Main
  3833 ;;		_CC2500_PowerOnInitial
  3834 ;;		_DelayOff_Initialization
  3835 ;;		_DelayOff_Main
  3836 ;;		_DimmerLights_Initialization
  3837 ;;		_DimmerLights_Main
  3838 ;;		_Flash_Memory_Initialization
  3839 ;;		_Flash_Memory_Main
  3840 ;;		_LED_Initialization
  3841 ;;		_LED_Main
  3842 ;;		_Load_Initialization
  3843 ;;		_Load_Main
  3844 ;;		_MainT
  3845 ;;		_MainT_Initialization
  3846 ;;		_Mcu_Initialization
  3847 ;;		_PowerFault_Initialization
  3848 ;;		_PowerFault_Main
  3849 ;;		_RF_Initialization
  3850 ;;		_RF_Main
  3851 ;;		_Switch_Initialization
  3852 ;;		_Switch_Main
  3853 ;;		_Temp_Initialization
  3854 ;;		_Temp_Main
  3855 ;;		_WDT_Main
  3856 ;;		_getLoad_AD
  3857 ;;		_getPowerFault_AD
  3858 ;;		_getTemp_AD
  3859 ;; This function is called by:
  3860 ;;		Startup code after reset
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           
  3865                           ;psect for function _main
  3866  1544                     _main:	
  3867                           
  3868                           ;main_B1.c: 9: MainT_Initialization();
  3869                           
  3870                           ;incstack = 0
  3871                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3872  1544  3198  2090  3195   	fcall	_MainT_Initialization
  3873                           
  3874                           ;main_B1.c: 10: Mcu_Initialization();
  3875  1547  3199  2161  3195   	fcall	_Mcu_Initialization
  3876                           
  3877                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3878  154A  318D  2508  3195   	fcall	_Flash_Memory_Initialization
  3879                           
  3880                           ;main_B1.c: 12: LED_Initialization();
  3881  154D  31A6  26F9  3195   	fcall	_LED_Initialization
  3882                           
  3883                           ;main_B1.c: 13: Buzzer_Initialization();
  3884  1550  31A6  2636  3195   	fcall	_Buzzer_Initialization
  3885                           
  3886                           ;main_B1.c: 15: ;;
  3887                           ;main_B1.c: 16: Temp_Initialization();
  3888  1553  31A5  25B2  3195   	fcall	_Temp_Initialization
  3889                           
  3890                           ;main_B1.c: 17: Load_Initialization();
  3891  1556  31A7  2711  3195   	fcall	_Load_Initialization
  3892                           
  3893                           ;main_B1.c: 18: PowerFault_Initialization();
  3894  1559  31A5  25AC  3195   	fcall	_PowerFault_Initialization
  3895                           
  3896                           ;main_B1.c: 19: DelayOff_Initialization();
  3897  155C  31A5  25C4  3195   	fcall	_DelayOff_Initialization
  3898                           
  3899                           ;main_B1.c: 21: DimmerLights_Initialization();
  3900  155F  31A6  26D5  3195   	fcall	_DimmerLights_Initialization
  3901                           
  3902                           ;main_B1.c: 22: ;;
  3903                           ;main_B1.c: 23: ;;
  3904                           ;main_B1.c: 24: ;;
  3905                           ;main_B1.c: 26: Switch_Initialization();
  3906  1562  3198  2066  3195   	fcall	_Switch_Initialization
  3907                           
  3908                           ;main_B1.c: 27: RF_Initialization();
  3909  1565  31A5  25CC  3195   	fcall	_RF_Initialization
  3910                           
  3911                           ;main_B1.c: 28: CC2500_PowerOnInitial();
  3912  1568  3198  20A3  3195   	fcall	_CC2500_PowerOnInitial
  3913  156B                     l9396:	
  3914                           ;main_B1.c: 30: while (1) {
  3915                           
  3916                           
  3917                           ;main_B1.c: 31: if (TMain->PowerON) {
  3918  156B  087D               	movf	_TMain,w
  3919  156C  0086               	movwf	6
  3920  156D  3001               	movlw	1	; select bank2/3
  3921  156E  0087               	movwf	7
  3922  156F  1C01               	btfss	1,0
  3923  1570  2D80               	goto	l9400
  3924                           
  3925                           ;main_B1.c: 33: ;;
  3926                           ;main_B1.c: 37: getLoad_AD(0x05);
  3927  1571  3005               	movlw	5
  3928  1572  318A  226D  3195   	fcall	_getLoad_AD
  3929                           
  3930                           ;main_B1.c: 41: getTemp_AD(0x09);
  3931  1575  3009               	movlw	9
  3932  1576  3193  23FB  3195   	fcall	_getTemp_AD
  3933                           
  3934                           ;main_B1.c: 45: getPowerFault_AD(0x11);
  3935  1579  3011               	movlw	17
  3936  157A  319E  2618  3195   	fcall	_getPowerFault_AD
  3937                           
  3938                           ;main_B1.c: 57: Buzzer_Main();
  3939  157D  318B  2303  3195   	fcall	_Buzzer_Main
  3940  1580                     l9400:	
  3941                           
  3942                           ;main_B1.c: 59: }
  3943                           ;main_B1.c: 61: if (TMain->T0_Timerout)
  3944  1580  087D               	movf	_TMain,w
  3945  1581  0086               	movwf	6
  3946  1582  3001               	movlw	1	; select bank2/3
  3947  1583  0087               	movwf	7
  3948  1584  1C81               	btfss	1,1
  3949  1585  2D6B               	goto	l9396
  3950                           
  3951                           ;main_B1.c: 62: {
  3952                           ;main_B1.c: 63: TMain->T0_Timerout = 0;
  3953  1586  087D               	movf	_TMain,w
  3954  1587  0086               	movwf	6
  3955  1588  3001               	movlw	1	; select bank2/3
  3956  1589  0087               	movwf	7
  3957  158A  1081               	bcf	1,1
  3958                           
  3959                           ;main_B1.c: 64: MainT();
  3960  158B  3197  2786  3195   	fcall	_MainT
  3961                           
  3962                           ;main_B1.c: 65: WDT_Main();
  3963  158E  3199  2197  3195   	fcall	_WDT_Main
  3964                           
  3965                           ;main_B1.c: 66: if (TMain->PowerON) {
  3966  1591  087D               	movf	_TMain,w
  3967  1592  0086               	movwf	6
  3968  1593  3001               	movlw	1	; select bank2/3
  3969  1594  0087               	movwf	7
  3970  1595  1C01               	btfss	1,0
  3971  1596  2D6B               	goto	l9396
  3972                           
  3973                           ;main_B1.c: 67: Flash_Memory_Main();
  3974  1597  319E  26E3  3195   	fcall	_Flash_Memory_Main
  3975                           
  3976                           ;main_B1.c: 69: LED_Main();
  3977  159A  31A7  2705  3195   	fcall	_LED_Main
  3978                           
  3979                           ;main_B1.c: 71: ;;
  3980                           ;main_B1.c: 72: Temp_Main();
  3981  159D  31A5  25B5  3195   	fcall	_Temp_Main
  3982                           
  3983                           ;main_B1.c: 73: Load_Main();
  3984  15A0  3180  2050  3195   	fcall	_Load_Main
  3985                           
  3986                           ;main_B1.c: 74: PowerFault_Main();
  3987  15A3  31A5  25AF  3195   	fcall	_PowerFault_Main
  3988                           
  3989                           ;main_B1.c: 76: ;;
  3990                           ;main_B1.c: 77: DimmerLights_Main();
  3991  15A6  31A5  25F6  3195   	fcall	_DimmerLights_Main
  3992                           
  3993                           ;main_B1.c: 78: Switch_Main();
  3994  15A9  31A5  25D4  3195   	fcall	_Switch_Main
  3995                           
  3996                           ;main_B1.c: 79: ;;
  3997                           ;main_B1.c: 80: ;;
  3998                           ;main_B1.c: 82: RF_Main();
  3999  15AC  31A5  25D0  3195   	fcall	_RF_Main
  4000                           
  4001                           ;main_B1.c: 83: DelayOff_Main();
  4002  15AF  31A5  25C8  3195   	fcall	_DelayOff_Main
  4003  15B2  2D6B               	goto	l9396
  4004  15B3                     __end_of_main:	
  4005                           
  4006                           	psect	text1
  4007  13FB                     __ptext1:	
  4008 ;; *************** function _getTemp_AD *****************
  4009 ;; Defined at:
  4010 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  channel         1    wreg     unsigned char 
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;  channel         1    8[BANK0 ] unsigned char 
  4015 ;; Return value:  Size  Location     Type
  4016 ;;		None               void
  4017 ;; Registers used:
  4018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;Total ram usage:        5 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    5
  4031 ;; This function calls:
  4032 ;;		_getAD
  4033 ;; This function is called by:
  4034 ;;		_main
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _getTemp_AD
  4040  13FB                     _getTemp_AD:	
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4044                           ;getTemp_AD@channel stored from wreg
  4045  13FB  0020               	movlb	0	; select bank0
  4046  13FC  00A8               	movwf	getTemp_AD@channel
  4047                           
  4048                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4049  13FD  087B               	movf	_Temp,w
  4050  13FE  0086               	movwf	6
  4051  13FF  3001               	movlw	1	; select bank2/3
  4052  1400  0087               	movwf	7
  4053  1401  1D01               	btfss	1,2
  4054  1402  0008               	return
  4055                           
  4056                           ;OverTemperature_B1.c: 38: {
  4057                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4058  1403  30F0               	movlw	240
  4059  1404  00A4               	movwf	??_getTemp_AD
  4060  1405  0824               	movf	??_getTemp_AD,w
  4061  1406  00A0               	movwf	getAD@adcon1
  4062  1407  0828               	movf	getTemp_AD@channel,w
  4063  1408  3198  20CD  3193   	fcall	_getAD
  4064  140B  087B               	movf	_Temp,w
  4065  140C  3E0C               	addlw	12
  4066  140D  0086               	movwf	6
  4067  140E  3001               	movlw	1	; select bank2/3
  4068  140F  0087               	movwf	7
  4069  1410  0020               	movlb	0	; select bank0
  4070  1411  0820               	movf	?_getAD,w
  4071  1412  3FC0               	movwi [0]fsr1
  4072  1413  0821               	movf	?_getAD+1,w
  4073  1414  3FC1               	movwi [1]fsr1
  4074                           
  4075                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4076  1415  087B               	movf	_Temp,w
  4077  1416  3E0C               	addlw	12
  4078  1417  0086               	movwf	6
  4079  1418  3001               	movlw	1	; select bank2/3
  4080  1419  0087               	movwf	7
  4081  141A  3F40               	moviw [0]fsr1
  4082  141B  00A4               	movwf	??_getTemp_AD
  4083  141C  3F41               	moviw [1]fsr1
  4084  141D  00A5               	movwf	??_getTemp_AD+1
  4085  141E  087B               	movf	_Temp,w
  4086  141F  3E08               	addlw	8
  4087  1420  0086               	movwf	6
  4088  1421  3001               	movlw	1	; select bank2/3
  4089  1422  0087               	movwf	7
  4090  1423  3F40               	moviw [0]fsr1
  4091  1424  00A6               	movwf	??_getTemp_AD+2
  4092  1425  3F41               	moviw [1]fsr1
  4093  1426  00A7               	movwf	??_getTemp_AD+3
  4094  1427  0825               	movf	??_getTemp_AD+1,w
  4095  1428  0227               	subwf	??_getTemp_AD+3,w
  4096  1429  1D03               	skipz
  4097  142A  2C2D               	goto	u9455
  4098  142B  0824               	movf	??_getTemp_AD,w
  4099  142C  0226               	subwf	??_getTemp_AD+2,w
  4100  142D                     u9455:	
  4101  142D  1803               	skipnc
  4102  142E  2C3E               	goto	l9334
  4103                           
  4104                           ;OverTemperature_B1.c: 41: {
  4105                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4106  142F  087B               	movf	_Temp,w
  4107  1430  3E0C               	addlw	12
  4108  1431  0086               	movwf	6
  4109  1432  3001               	movlw	1	; select bank2/3
  4110  1433  0087               	movwf	7
  4111  1434  087B               	movf	_Temp,w
  4112  1435  3E08               	addlw	8
  4113  1436  0084               	movwf	4
  4114  1437  3001               	movlw	1	; select bank2/3
  4115  1438  0085               	movwf	5
  4116  1439  3F40               	moviw [0]fsr1
  4117  143A  3F80               	movwi [0]fsr0
  4118  143B  3F41               	moviw [1]fsr1
  4119  143C  3F81               	movwi [1]fsr0
  4120                           
  4121                           ;OverTemperature_B1.c: 43: }
  4122  143D  0008               	return
  4123  143E                     l9334:	
  4124                           
  4125                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4126  143E  087B               	movf	_Temp,w
  4127  143F  3E0C               	addlw	12
  4128  1440  0086               	movwf	6
  4129  1441  3001               	movlw	1	; select bank2/3
  4130  1442  0087               	movwf	7
  4131  1443  3F40               	moviw [0]fsr1
  4132  1444  00A4               	movwf	??_getTemp_AD
  4133  1445  3F41               	moviw [1]fsr1
  4134  1446  00A5               	movwf	??_getTemp_AD+1
  4135  1447  087B               	movf	_Temp,w
  4136  1448  3E0A               	addlw	10
  4137  1449  0086               	movwf	6
  4138  144A  3001               	movlw	1	; select bank2/3
  4139  144B  0087               	movwf	7
  4140  144C  3F40               	moviw [0]fsr1
  4141  144D  00A6               	movwf	??_getTemp_AD+2
  4142  144E  3F41               	moviw [1]fsr1
  4143  144F  00A7               	movwf	??_getTemp_AD+3
  4144  1450  0825               	movf	??_getTemp_AD+1,w
  4145  1451  0227               	subwf	??_getTemp_AD+3,w
  4146  1452  1D03               	skipz
  4147  1453  2C56               	goto	u9465
  4148  1454  0824               	movf	??_getTemp_AD,w
  4149  1455  0226               	subwf	??_getTemp_AD+2,w
  4150  1456                     u9465:	
  4151  1456  1803               	skipnc
  4152  1457  0008               	return
  4153                           
  4154                           ;OverTemperature_B1.c: 45: {
  4155                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4156  1458  087B               	movf	_Temp,w
  4157  1459  3E0C               	addlw	12
  4158  145A  0086               	movwf	6
  4159  145B  3001               	movlw	1	; select bank2/3
  4160  145C  0087               	movwf	7
  4161  145D  087B               	movf	_Temp,w
  4162  145E  3E0A               	addlw	10
  4163  145F  0084               	movwf	4
  4164  1460  3001               	movlw	1	; select bank2/3
  4165  1461  0085               	movwf	5
  4166  1462  3F40               	moviw [0]fsr1
  4167  1463  3F80               	movwi [0]fsr0
  4168  1464  3F41               	moviw [1]fsr1
  4169  1465  3F81               	movwi [1]fsr0
  4170  1466  0008               	return
  4171  1467                     __end_of_getTemp_AD:	
  4172                           
  4173                           	psect	text2
  4174  1E18                     __ptext2:	
  4175 ;; *************** function _getPowerFault_AD *****************
  4176 ;; Defined at:
  4177 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;  channel         1    wreg     unsigned char 
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;  channel         1    8[BANK0 ] unsigned char 
  4182 ;; Return value:  Size  Location     Type
  4183 ;;		None               void
  4184 ;; Registers used:
  4185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4186 ;; Tracked objects:
  4187 ;;		On entry : 0/0
  4188 ;;		On exit  : 0/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4195 ;;Total ram usage:        5 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    5
  4198 ;; This function calls:
  4199 ;;		_getAD
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           
  4206                           ;psect for function _getPowerFault_AD
  4207  1E18                     _getPowerFault_AD:	
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4211                           ;getPowerFault_AD@channel stored from wreg
  4212  1E18  0020               	movlb	0	; select bank0
  4213  1E19  00A8               	movwf	getPowerFault_AD@channel
  4214                           
  4215                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4216  1E1A  0879               	movf	_PF,w
  4217  1E1B  0086               	movwf	6
  4218  1E1C  3001               	movlw	1	; select bank2/3
  4219  1E1D  0087               	movwf	7
  4220  1E1E  1D81               	btfss	1,3
  4221  1E1F  0008               	return
  4222                           
  4223                           ;PowerFault_B1.c: 52: {
  4224                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4225  1E20  30F0               	movlw	240
  4226  1E21  00A4               	movwf	??_getPowerFault_AD
  4227  1E22  0824               	movf	??_getPowerFault_AD,w
  4228  1E23  00A0               	movwf	getAD@adcon1
  4229  1E24  0828               	movf	getPowerFault_AD@channel,w
  4230  1E25  3198  20CD  319E   	fcall	_getAD
  4231  1E28  0879               	movf	_PF,w
  4232  1E29  3E06               	addlw	6
  4233  1E2A  0086               	movwf	6
  4234  1E2B  3001               	movlw	1	; select bank2/3
  4235  1E2C  0087               	movwf	7
  4236  1E2D  0020               	movlb	0	; select bank0
  4237  1E2E  0820               	movf	?_getAD,w
  4238  1E2F  3FC0               	movwi [0]fsr1
  4239  1E30  0821               	movf	?_getAD+1,w
  4240  1E31  3FC1               	movwi [1]fsr1
  4241                           
  4242                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4243  1E32  0879               	movf	_PF,w
  4244  1E33  3E06               	addlw	6
  4245  1E34  0086               	movwf	6
  4246  1E35  3001               	movlw	1	; select bank2/3
  4247  1E36  0087               	movwf	7
  4248  1E37  3F40               	moviw [0]fsr1
  4249  1E38  00A4               	movwf	??_getPowerFault_AD
  4250  1E39  3F41               	moviw [1]fsr1
  4251  1E3A  00A5               	movwf	??_getPowerFault_AD+1
  4252  1E3B  0879               	movf	_PF,w
  4253  1E3C  3E04               	addlw	4
  4254  1E3D  0086               	movwf	6
  4255  1E3E  3001               	movlw	1	; select bank2/3
  4256  1E3F  0087               	movwf	7
  4257  1E40  3F40               	moviw [0]fsr1
  4258  1E41  00A6               	movwf	??_getPowerFault_AD+2
  4259  1E42  3F41               	moviw [1]fsr1
  4260  1E43  00A7               	movwf	??_getPowerFault_AD+3
  4261  1E44  0825               	movf	??_getPowerFault_AD+1,w
  4262  1E45  0227               	subwf	??_getPowerFault_AD+3,w
  4263  1E46  1D03               	skipz
  4264  1E47  2E4A               	goto	u9485
  4265  1E48  0824               	movf	??_getPowerFault_AD,w
  4266  1E49  0226               	subwf	??_getPowerFault_AD+2,w
  4267  1E4A                     u9485:	
  4268  1E4A  1803               	skipnc
  4269  1E4B  0008               	return
  4270                           
  4271                           ;PowerFault_B1.c: 55: {
  4272                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4273  1E4C  0879               	movf	_PF,w
  4274  1E4D  3E06               	addlw	6
  4275  1E4E  0086               	movwf	6
  4276  1E4F  3001               	movlw	1	; select bank2/3
  4277  1E50  0087               	movwf	7
  4278  1E51  0879               	movf	_PF,w
  4279  1E52  3E04               	addlw	4
  4280  1E53  0084               	movwf	4
  4281  1E54  3001               	movlw	1	; select bank2/3
  4282  1E55  0085               	movwf	5
  4283  1E56  3F40               	moviw [0]fsr1
  4284  1E57  3F80               	movwi [0]fsr0
  4285  1E58  3F41               	moviw [1]fsr1
  4286  1E59  3F81               	movwi [1]fsr0
  4287  1E5A  0008               	return
  4288  1E5B                     __end_of_getPowerFault_AD:	
  4289                           
  4290                           	psect	text3
  4291  0A6D                     __ptext3:	
  4292 ;; *************** function _getLoad_AD *****************
  4293 ;; Defined at:
  4294 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  channel         1    wreg     unsigned char 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  channel         1    9[BANK0 ] unsigned char 
  4299 ;;  i               1   11[BANK0 ] unsigned char 
  4300 ;;  j               1   10[BANK0 ] unsigned char 
  4301 ;; Return value:  Size  Location     Type
  4302 ;;		None               void
  4303 ;; Registers used:
  4304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4305 ;; Tracked objects:
  4306 ;;		On entry : 0/0
  4307 ;;		On exit  : 0/0
  4308 ;;		Unchanged: 0/0
  4309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4314 ;;Total ram usage:        8 bytes
  4315 ;; Hardware stack levels used:    1
  4316 ;; Hardware stack levels required when called:    5
  4317 ;; This function calls:
  4318 ;;		_getAD
  4319 ;; This function is called by:
  4320 ;;		_main
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _getLoad_AD
  4326  0A6D                     _getLoad_AD:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4330                           ;getLoad_AD@channel stored from wreg
  4331  0A6D  0020               	movlb	0	; select bank0
  4332  0A6E  00A9               	movwf	getLoad_AD@channel
  4333                           
  4334                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4335  0A6F  01AB               	clrf	getLoad_AD@i
  4336  0A70  01AA               	clrf	getLoad_AD@j
  4337                           
  4338                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4339  0A71  086E               	movf	_Load,w
  4340  0A72  0086               	movwf	6
  4341  0A73  3002               	movlw	2	; select bank4/5
  4342  0A74  0087               	movwf	7
  4343  0A75  1E01               	btfss	1,4
  4344  0A76  0008               	return
  4345                           
  4346                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4347  0A77  30C0               	movlw	192
  4348  0A78  00A4               	movwf	??_getLoad_AD
  4349  0A79  0824               	movf	??_getLoad_AD,w
  4350  0A7A  00A0               	movwf	getAD@adcon1
  4351  0A7B  0829               	movf	getLoad_AD@channel,w
  4352  0A7C  3198  20CD  318A   	fcall	_getAD
  4353  0A7F  0020               	movlb	0	; select bank0
  4354  0A80  086E               	movf	_Load,w
  4355  0A81  3E32               	addlw	50
  4356  0A82  0086               	movwf	6
  4357  0A83  3002               	movlw	2	; select bank4/5
  4358  0A84  0087               	movwf	7
  4359  0A85  0820               	movf	?_getAD,w
  4360  0A86  3FC0               	movwi [0]fsr1
  4361  0A87  0821               	movf	?_getAD+1,w
  4362  0A88  3FC1               	movwi [1]fsr1
  4363                           
  4364                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4365  0A89  01AB               	clrf	getLoad_AD@i
  4366  0A8A  3005               	movlw	5
  4367  0A8B  022B               	subwf	getLoad_AD@i,w
  4368  0A8C  1803               	btfsc	3,0
  4369  0A8D  2AC7               	goto	l9184
  4370  0A8E                     l9174:	
  4371                           
  4372                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4373  0A8E  086E               	movf	_Load,w
  4374  0A8F  3E32               	addlw	50
  4375  0A90  0086               	movwf	6
  4376  0A91  3002               	movlw	2	; select bank4/5
  4377  0A92  0087               	movwf	7
  4378  0A93  3F40               	moviw [0]fsr1
  4379  0A94  00A4               	movwf	??_getLoad_AD
  4380  0A95  3F41               	moviw [1]fsr1
  4381  0A96  00A5               	movwf	??_getLoad_AD+1
  4382  0A97  352B               	lslf	getLoad_AD@i,w
  4383  0A98  3E08               	addlw	8
  4384  0A99  076E               	addwf	_Load,w
  4385  0A9A  00A6               	movwf	??_getLoad_AD+2
  4386  0A9B  0826               	movf	??_getLoad_AD+2,w
  4387  0A9C  0086               	movwf	6
  4388  0A9D  3002               	movlw	2	; select bank4/5
  4389  0A9E  0087               	movwf	7
  4390  0A9F  3F40               	moviw [0]fsr1
  4391  0AA0  00A7               	movwf	??_getLoad_AD+3
  4392  0AA1  3F41               	moviw [1]fsr1
  4393  0AA2  00A8               	movwf	??_getLoad_AD+4
  4394  0AA3  0825               	movf	??_getLoad_AD+1,w
  4395  0AA4  0228               	subwf	??_getLoad_AD+4,w
  4396  0AA5  1D03               	skipz
  4397  0AA6  2AA9               	goto	u9165
  4398  0AA7  0824               	movf	??_getLoad_AD,w
  4399  0AA8  0227               	subwf	??_getLoad_AD+3,w
  4400  0AA9                     u9165:	
  4401  0AA9  1803               	skipnc
  4402  0AAA  2ABF               	goto	l9180
  4403                           
  4404                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4405  0AAB  086E               	movf	_Load,w
  4406  0AAC  3E32               	addlw	50
  4407  0AAD  0086               	movwf	6
  4408  0AAE  3002               	movlw	2	; select bank4/5
  4409  0AAF  0087               	movwf	7
  4410  0AB0  352B               	lslf	getLoad_AD@i,w
  4411  0AB1  3E08               	addlw	8
  4412  0AB2  076E               	addwf	_Load,w
  4413  0AB3  00A4               	movwf	??_getLoad_AD
  4414  0AB4  0824               	movf	??_getLoad_AD,w
  4415  0AB5  0084               	movwf	4
  4416  0AB6  3002               	movlw	2	; select bank4/5
  4417  0AB7  0085               	movwf	5
  4418  0AB8  3F40               	moviw [0]fsr1
  4419  0AB9  3F80               	movwi [0]fsr0
  4420  0ABA  3F41               	moviw [1]fsr1
  4421  0ABB  3F81               	movwi [1]fsr0
  4422                           
  4423                           ;OverLoad_B1.c: 24: j = 1;
  4424  0ABC  01AA               	clrf	getLoad_AD@j
  4425  0ABD  0AAA               	incf	getLoad_AD@j,f
  4426                           
  4427                           ;OverLoad_B1.c: 25: break;
  4428  0ABE  2AC7               	goto	l9184
  4429  0ABF                     l9180:	
  4430  0ABF  3001               	movlw	1
  4431  0AC0  00A4               	movwf	??_getLoad_AD
  4432  0AC1  0824               	movf	??_getLoad_AD,w
  4433  0AC2  07AB               	addwf	getLoad_AD@i,f
  4434  0AC3  3005               	movlw	5
  4435  0AC4  022B               	subwf	getLoad_AD@i,w
  4436  0AC5  1C03               	skipc
  4437  0AC6  2A8E               	goto	l9174
  4438  0AC7                     l9184:	
  4439                           
  4440                           ;OverLoad_B1.c: 26: }
  4441                           ;OverLoad_B1.c: 27: }
  4442                           ;OverLoad_B1.c: 28: if (!j) {
  4443  0AC7  08AA               	movf	getLoad_AD@j,f
  4444  0AC8  1D03               	skipz
  4445  0AC9  0008               	return
  4446                           
  4447                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4448  0ACA  01AB               	clrf	getLoad_AD@i
  4449  0ACB                     L1:	
  4450  0ACB  3005               	movlw	5
  4451  0ACC  022B               	subwf	getLoad_AD@i,w
  4452  0ACD  1803               	btfsc	3,0
  4453  0ACE  0008               	return
  4454                           
  4455                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4456  0ACF  352B               	lslf	getLoad_AD@i,w
  4457  0AD0  3E1A               	addlw	26
  4458  0AD1  076E               	addwf	_Load,w
  4459  0AD2  00A4               	movwf	??_getLoad_AD
  4460  0AD3  0824               	movf	??_getLoad_AD,w
  4461  0AD4  0086               	movwf	6
  4462  0AD5  3002               	movlw	2	; select bank4/5
  4463  0AD6  0087               	movwf	7
  4464  0AD7  3F40               	moviw [0]fsr1
  4465  0AD8  00A5               	movwf	??_getLoad_AD+1
  4466  0AD9  3F41               	moviw [1]fsr1
  4467  0ADA  00A6               	movwf	??_getLoad_AD+2
  4468  0ADB  086E               	movf	_Load,w
  4469  0ADC  3E32               	addlw	50
  4470  0ADD  0086               	movwf	6
  4471  0ADE  3002               	movlw	2	; select bank4/5
  4472  0ADF  0087               	movwf	7
  4473  0AE0  3F40               	moviw [0]fsr1
  4474  0AE1  00A7               	movwf	??_getLoad_AD+3
  4475  0AE2  3F41               	moviw [1]fsr1
  4476  0AE3  00A8               	movwf	??_getLoad_AD+4
  4477  0AE4  0826               	movf	??_getLoad_AD+2,w
  4478  0AE5  0228               	subwf	??_getLoad_AD+4,w
  4479  0AE6  1D03               	skipz
  4480  0AE7  2AEA               	goto	u9205
  4481  0AE8  0825               	movf	??_getLoad_AD+1,w
  4482  0AE9  0227               	subwf	??_getLoad_AD+3,w
  4483  0AEA                     u9205:	
  4484  0AEA  1803               	skipnc
  4485  0AEB  2AFE               	goto	l9196
  4486                           
  4487                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  4488  0AEC  086E               	movf	_Load,w
  4489  0AED  3E32               	addlw	50
  4490  0AEE  0086               	movwf	6
  4491  0AEF  3002               	movlw	2	; select bank4/5
  4492  0AF0  0087               	movwf	7
  4493  0AF1  352B               	lslf	getLoad_AD@i,w
  4494  0AF2  3E1A               	addlw	26
  4495  0AF3  076E               	addwf	_Load,w
  4496  0AF4  00A4               	movwf	??_getLoad_AD
  4497  0AF5  0824               	movf	??_getLoad_AD,w
  4498  0AF6  0084               	movwf	4
  4499  0AF7  3002               	movlw	2	; select bank4/5
  4500  0AF8  0085               	movwf	5
  4501  0AF9  3F40               	moviw [0]fsr1
  4502  0AFA  3F80               	movwi [0]fsr0
  4503  0AFB  3F41               	moviw [1]fsr1
  4504  0AFC  3F81               	movwi [1]fsr0
  4505                           
  4506                           ;OverLoad_B1.c: 32: break;
  4507  0AFD  0008               	return
  4508  0AFE                     l9196:	
  4509  0AFE  3001               	movlw	1
  4510  0AFF  00A4               	movwf	??_getLoad_AD
  4511  0B00  0824               	movf	??_getLoad_AD,w
  4512  0B01  07AB               	addwf	getLoad_AD@i,f
  4513  0B02  2ACB               	goto	L1
  4514  0B03                     __end_of_getLoad_AD:	
  4515                           
  4516                           	psect	text4
  4517  18CD                     __ptext4:	
  4518 ;; *************** function _getAD *****************
  4519 ;; Defined at:
  4520 ;;		line 386 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  adcon0          1    wreg     unsigned char 
  4523 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  2    0[BANK0 ] int 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4535 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;Total ram usage:        4 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    4
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_getLoad_AD
  4546 ;;		_getTemp_AD
  4547 ;;		_getPowerFault_AD
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           
  4552                           ;psect for function _getAD
  4553  18CD                     _getAD:	
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4557                           ;getAD@adcon0 stored from wreg
  4558  18CD  0020               	movlb	0	; select bank0
  4559  18CE  00A3               	movwf	getAD@adcon0
  4560                           
  4561                           ;MCU_B1.c: 387: ADCON0 = adcon0;
  4562  18CF  0823               	movf	getAD@adcon0,w
  4563  18D0  0021               	movlb	1	; select bank1
  4564  18D1  009D               	movwf	29	;volatile
  4565                           
  4566                           ;MCU_B1.c: 388: ADCON1 = adcon1;
  4567  18D2  0020               	movlb	0	; select bank0
  4568  18D3  0820               	movf	getAD@adcon1,w
  4569  18D4  0021               	movlb	1	; select bank1
  4570  18D5  009E               	movwf	30	;volatile
  4571                           
  4572                           ;MCU_B1.c: 389: GO_nDONE = 1;
  4573  18D6  149D               	bsf	29,1	;volatile
  4574  18D7                     l1349:	
  4575                           ;MCU_B1.c: 390: while (GO_nDONE);
  4576                           
  4577  18D7  189D               	btfsc	29,1	;volatile
  4578  18D8  28D7               	goto	l1349
  4579                           
  4580                           ;MCU_B1.c: 391: return ((ADRESH*256)+ADRESL);
  4581  18D9  081C               	movf	28,w	;volatile
  4582  18DA  0020               	movlb	0	; select bank0
  4583  18DB  01A1               	clrf	?_getAD+1
  4584  18DC  07A1               	addwf	?_getAD+1,f
  4585  18DD  0021               	movlb	1	; select bank1
  4586  18DE  081B               	movf	27,w	;volatile
  4587  18DF  0020               	movlb	0	; select bank0
  4588  18E0  01A0               	clrf	?_getAD
  4589  18E1  07A0               	addwf	?_getAD,f
  4590  18E2  0008               	return
  4591  18E3                     __end_of_getAD:	
  4592                           
  4593                           	psect	text5
  4594  1997                     __ptext5:	
  4595 ;; *************** function _WDT_Main *****************
  4596 ;; Defined at:
  4597 ;;		line 944 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;		None
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;		None
  4602 ;; Return value:  Size  Location     Type
  4603 ;;		None               void
  4604 ;; Registers used:
  4605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4614 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;Total ram usage:        1 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    5
  4618 ;; This function calls:
  4619 ;;		_WDT_Clearing
  4620 ;; This function is called by:
  4621 ;;		_main
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           
  4626                           ;psect for function _WDT_Main
  4627  1997                     _WDT_Main:	
  4628                           
  4629                           ;MCU_B1.c: 945: if (WDT->Enable) {
  4630                           
  4631                           ;incstack = 0
  4632                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4633  1997  0021               	movlb	1	; select bank1
  4634  1998  0869               	movf	_WDT^(0+128),w
  4635  1999  0086               	movwf	6
  4636  199A  0187               	clrf	7
  4637  199B  1C01               	btfss	1,0
  4638  199C  0008               	return
  4639                           
  4640                           ;MCU_B1.c: 946: if (WDT->Count-- > 0) {
  4641  199D  0A69               	incf	_WDT^(0+128),w
  4642  199E  0086               	movwf	6
  4643  199F  0187               	clrf	7
  4644  19A0  3001               	movlw	1
  4645  19A1  0281               	subwf	1,f
  4646  19A2  0801               	movf	1,w
  4647  19A3  3AFF               	xorlw	255
  4648  19A4  1903               	skipnz
  4649  19A5  0008               	return
  4650                           
  4651                           ;MCU_B1.c: 947: WDT->Count = 10;
  4652  19A6  300A               	movlw	10
  4653  19A7  0020               	movlb	0	; select bank0
  4654  19A8  00A0               	movwf	??_WDT_Main
  4655  19A9  0021               	movlb	1	; select bank1
  4656  19AA  0A69               	incf	_WDT^(0+128),w
  4657  19AB  0086               	movwf	6
  4658  19AC  0187               	clrf	7
  4659  19AD  0020               	movlb	0	; select bank0
  4660  19AE  0820               	movf	??_WDT_Main,w
  4661  19AF  0081               	movwf	1
  4662                           
  4663                           ;MCU_B1.c: 948: WDT_Clearing();
  4664  19B0  3180  2002         	fcall	_WDT_Clearing
  4665  19B2  0008               	return
  4666  19B3                     __end_of_WDT_Main:	
  4667                           
  4668                           	psect	text6
  4669  0002                     __ptext6:	
  4670 ;; *************** function _WDT_Clearing *****************
  4671 ;; Defined at:
  4672 ;;		line 954 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;		None               void
  4679 ;; Registers used:
  4680 ;;		None
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; Hardware stack levels required when called:    4
  4693 ;; This function calls:
  4694 ;;		Nothing
  4695 ;; This function is called by:
  4696 ;;		_WDT_Main
  4697 ;; This function uses a non-reentrant model
  4698 ;;
  4699                           
  4700                           
  4701                           ;psect for function _WDT_Clearing
  4702  0002                     _WDT_Clearing:	
  4703                           
  4704                           ;incstack = 0
  4705                           ; Regs used in _WDT_Clearing: []
  4706  0002  0064               	clrwdt	;# 
  4707  0003  0008               	return
  4708  0004                     __end_of_WDT_Clearing:	
  4709                           
  4710                           	psect	text7
  4711  25B5                     __ptext7:	
  4712 ;; *************** function _Temp_Main *****************
  4713 ;; Defined at:
  4714 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;		None
  4719 ;; Return value:  Size  Location     Type
  4720 ;;		None               void
  4721 ;; Registers used:
  4722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;Total ram usage:        0 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; Hardware stack levels required when called:   10
  4735 ;; This function calls:
  4736 ;;		_setTemp_Main
  4737 ;; This function is called by:
  4738 ;;		_main
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _Temp_Main
  4744  25B5                     _Temp_Main:	
  4745                           
  4746                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4747                           
  4748                           ;incstack = 0
  4749                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4750  25B5  3185  25FB         	fcall	_setTemp_Main
  4751  25B7  0008               	return
  4752  25B8                     __end_of_Temp_Main:	
  4753                           
  4754                           	psect	text8
  4755  05FB                     __ptext8:	
  4756 ;; *************** function _setTemp_Main *****************
  4757 ;; Defined at:
  4758 ;;		line 64 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;		None               void
  4765 ;; Registers used:
  4766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4774 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4776 ;;Total ram usage:        3 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    9
  4779 ;; This function calls:
  4780 ;;		_getLoad_Safe
  4781 ;;		_getPF_Safe
  4782 ;;		_setOverTemp_Exceptions
  4783 ;; This function is called by:
  4784 ;;		_Temp_Main
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           
  4789                           ;psect for function _setTemp_Main
  4790  05FB                     _setTemp_Main:	
  4791                           
  4792                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4793                           
  4794                           ;incstack = 0
  4795                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4796  05FB  087B               	movf	_Temp,w
  4797  05FC  0086               	movwf	6
  4798  05FD  3001               	movlw	1	; select bank2/3
  4799  05FE  0087               	movwf	7
  4800  05FF  1C01               	btfss	1,0
  4801  0600  0008               	return
  4802                           
  4803                           ;OverTemperature_B1.c: 67: {
  4804                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4805  0601  087B               	movf	_Temp,w
  4806  0602  0086               	movwf	6
  4807  0603  3001               	movlw	1	; select bank2/3
  4808  0604  0087               	movwf	7
  4809  0605  1901               	btfsc	1,2
  4810  0606  2E47               	goto	l8804
  4811                           
  4812                           ;OverTemperature_B1.c: 69: {
  4813                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4814  0607  0A7B               	incf	_Temp,w
  4815  0608  0086               	movwf	6
  4816  0609  3001               	movlw	1	; select bank2/3
  4817  060A  0087               	movwf	7
  4818  060B  3001               	movlw	1
  4819  060C  0781               	addwf	1,f
  4820  060D  3141               	addfsr 1,1
  4821  060E  1803               	skipnc
  4822  060F  0A81               	incf	1,f
  4823                           
  4824                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  4825  0610  0A7B               	incf	_Temp,w
  4826  0611  0086               	movwf	6
  4827  0612  3001               	movlw	1	; select bank2/3
  4828  0613  0087               	movwf	7
  4829  0614  3F40               	moviw [0]fsr1
  4830  0615  0020               	movlb	0	; select bank0
  4831  0616  00AD               	movwf	??_setTemp_Main
  4832  0617  3F41               	moviw [1]fsr1
  4833  0618  00AE               	movwf	??_setTemp_Main+1
  4834  0619  3001               	movlw	1
  4835  061A  022E               	subwf	??_setTemp_Main+1,w
  4836  061B  30F4               	movlw	244
  4837  061C  1903               	skipnz
  4838  061D  022D               	subwf	??_setTemp_Main,w
  4839  061E  1C03               	skipc
  4840  061F  0008               	return
  4841                           
  4842                           ;OverTemperature_B1.c: 72: {
  4843                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  4844  0620  31A6  2683  3185   	fcall	_getLoad_Safe
  4845  0623  3A00               	xorlw	0
  4846  0624  1903               	skipnz
  4847  0625  2E3E               	goto	l8802
  4848  0626  31A6  2612  3185   	fcall	_getPF_Safe
  4849  0629  3A00               	xorlw	0
  4850  062A  1903               	skipnz
  4851  062B  2E3E               	goto	l8802
  4852                           
  4853                           ;OverTemperature_B1.c: 74: {
  4854                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4855  062C  0A7B               	incf	_Temp,w
  4856  062D  0086               	movwf	6
  4857  062E  3001               	movlw	1	; select bank2/3
  4858  062F  0087               	movwf	7
  4859  0630  3000               	movlw	0
  4860  0631  3FC0               	movwi [0]fsr1
  4861  0632  3FC1               	movwi [1]fsr1
  4862                           
  4863                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4864  0633  087B               	movf	_Temp,w
  4865  0634  0086               	movwf	6
  4866  0635  3001               	movlw	1	; select bank2/3
  4867  0636  0087               	movwf	7
  4868  0637  1501               	bsf	1,2
  4869                           
  4870                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4871  0638  087B               	movf	_Temp,w
  4872  0639  0086               	movwf	6
  4873  063A  3001               	movlw	1	; select bank2/3
  4874  063B  0087               	movwf	7
  4875  063C  1201               	bcf	1,4
  4876                           
  4877                           ;OverTemperature_B1.c: 78: }
  4878  063D  0008               	return
  4879  063E                     l8802:	
  4880                           
  4881                           ;OverTemperature_B1.c: 79: else
  4882                           ;OverTemperature_B1.c: 80: {
  4883                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4884  063E  0A7B               	incf	_Temp,w
  4885  063F  0086               	movwf	6
  4886  0640  3001               	movlw	1	; select bank2/3
  4887  0641  0087               	movwf	7
  4888  0642  30E8               	movlw	232
  4889  0643  3FC0               	movwi [0]fsr1
  4890  0644  3003               	movlw	3
  4891  0645  3FC1               	movwi [1]fsr1
  4892                           
  4893                           ;OverTemperature_B1.c: 82: }
  4894                           ;OverTemperature_B1.c: 83: }
  4895                           ;OverTemperature_B1.c: 84: }
  4896  0646  0008               	return
  4897  0647                     l8804:	
  4898                           
  4899                           ;OverTemperature_B1.c: 85: else
  4900                           ;OverTemperature_B1.c: 86: {
  4901                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4902  0647  0A7B               	incf	_Temp,w
  4903  0648  0086               	movwf	6
  4904  0649  3001               	movlw	1	; select bank2/3
  4905  064A  0087               	movwf	7
  4906  064B  3001               	movlw	1
  4907  064C  0781               	addwf	1,f
  4908  064D  3141               	addfsr 1,1
  4909  064E  1803               	skipnc
  4910  064F  0A81               	incf	1,f
  4911                           
  4912                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4913  0650  0A7B               	incf	_Temp,w
  4914  0651  0086               	movwf	6
  4915  0652  3001               	movlw	1	; select bank2/3
  4916  0653  0087               	movwf	7
  4917  0654  3F40               	moviw [0]fsr1
  4918  0655  0020               	movlb	0	; select bank0
  4919  0656  00AD               	movwf	??_setTemp_Main
  4920  0657  3F41               	moviw [1]fsr1
  4921  0658  00AE               	movwf	??_setTemp_Main+1
  4922  0659  3000               	movlw	0
  4923  065A  022E               	subwf	??_setTemp_Main+1,w
  4924  065B  3004               	movlw	4
  4925  065C  1903               	skipnz
  4926  065D  022D               	subwf	??_setTemp_Main,w
  4927  065E  1C03               	skipc
  4928  065F  0008               	return
  4929                           
  4930                           ;OverTemperature_B1.c: 89: {
  4931                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4932  0660  0A7B               	incf	_Temp,w
  4933  0661  0086               	movwf	6
  4934  0662  3001               	movlw	1	; select bank2/3
  4935  0663  0087               	movwf	7
  4936  0664  3000               	movlw	0
  4937  0665  3FC0               	movwi [0]fsr1
  4938  0666  3FC1               	movwi [1]fsr1
  4939                           
  4940                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4941  0667  087B               	movf	_Temp,w
  4942  0668  0086               	movwf	6
  4943  0669  3001               	movlw	1	; select bank2/3
  4944  066A  0087               	movwf	7
  4945  066B  1101               	bcf	1,2
  4946                           
  4947                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4948  066C  087B               	movf	_Temp,w
  4949  066D  3E0A               	addlw	10
  4950  066E  0086               	movwf	6
  4951  066F  3001               	movlw	1	; select bank2/3
  4952  0670  0087               	movwf	7
  4953  0671  087B               	movf	_Temp,w
  4954  0672  3E06               	addlw	6
  4955  0673  0084               	movwf	4
  4956  0674  3001               	movlw	1	; select bank2/3
  4957  0675  0085               	movwf	5
  4958  0676  3F40               	moviw [0]fsr1
  4959  0677  3F80               	movwi [0]fsr0
  4960  0678  3F41               	moviw [1]fsr1
  4961  0679  3F81               	movwi [1]fsr0
  4962                           
  4963                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4964  067A  087B               	movf	_Temp,w
  4965  067B  0086               	movwf	6
  4966  067C  3001               	movlw	1	; select bank2/3
  4967  067D  0087               	movwf	7
  4968  067E  1C81               	btfss	1,1
  4969  067F  2EAD               	goto	l8826
  4970                           
  4971                           ;OverTemperature_B1.c: 94: {
  4972                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4973  0680  087B               	movf	_Temp,w
  4974  0681  3E06               	addlw	6
  4975  0682  0086               	movwf	6
  4976  0683  3001               	movlw	1	; select bank2/3
  4977  0684  0087               	movwf	7
  4978  0685  3F40               	moviw [0]fsr1
  4979  0686  00AD               	movwf	??_setTemp_Main
  4980  0687  3F41               	moviw [1]fsr1
  4981  0688  00AE               	movwf	??_setTemp_Main+1
  4982  0689  3002               	movlw	2
  4983  068A  022E               	subwf	??_setTemp_Main+1,w
  4984  068B  3058               	movlw	88
  4985  068C  1903               	skipnz
  4986  068D  022D               	subwf	??_setTemp_Main,w
  4987  068E  1C03               	skipc
  4988  068F  2EDB               	goto	l8836
  4989                           
  4990                           ;OverTemperature_B1.c: 96: {
  4991                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4992  0690  3001               	movlw	1
  4993  0691  00AD               	movwf	??_setTemp_Main
  4994  0692  087B               	movf	_Temp,w
  4995  0693  3E03               	addlw	3
  4996  0694  0086               	movwf	6
  4997  0695  3001               	movlw	1	; select bank2/3
  4998  0696  0087               	movwf	7
  4999  0697  082D               	movf	??_setTemp_Main,w
  5000  0698  0781               	addwf	1,f
  5001                           
  5002                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5003  0699  087B               	movf	_Temp,w
  5004  069A  3E03               	addlw	3
  5005  069B  0086               	movwf	6
  5006  069C  3001               	movlw	1	; select bank2/3
  5007  069D  0087               	movwf	7
  5008  069E  3003               	movlw	3
  5009  069F  0201               	subwf	1,w
  5010  06A0  1C03               	skipc
  5011  06A1  2EE1               	goto	l8838
  5012                           
  5013                           ;OverTemperature_B1.c: 99: {
  5014                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5015  06A2  087B               	movf	_Temp,w
  5016  06A3  3E03               	addlw	3
  5017  06A4  0086               	movwf	6
  5018  06A5  3001               	movlw	1	; select bank2/3
  5019  06A6  0087               	movwf	7
  5020  06A7  0181               	clrf	1
  5021                           
  5022                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5023  06A8  3000               	movlw	0
  5024  06A9  319F  27B7  3185   	fcall	_setOverTemp_Exceptions
  5025                           
  5026                           ;OverTemperature_B1.c: 102: }
  5027                           ;OverTemperature_B1.c: 103: }
  5028  06AC  2EE1               	goto	l8838
  5029  06AD                     l8826:	
  5030                           ;OverTemperature_B1.c: 107: }
  5031                           ;OverTemperature_B1.c: 108: }
  5032                           
  5033                           ;OverTemperature_B1.c: 104: else
  5034                           ;OverTemperature_B1.c: 105: {
  5035                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5036                           
  5037                           
  5038                           ;OverTemperature_B1.c: 109: else
  5039                           ;OverTemperature_B1.c: 110: {
  5040                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5041  06AD  087B               	movf	_Temp,w
  5042  06AE  3E06               	addlw	6
  5043  06AF  0086               	movwf	6
  5044  06B0  3001               	movlw	1	; select bank2/3
  5045  06B1  0087               	movwf	7
  5046  06B2  3F40               	moviw [0]fsr1
  5047  06B3  0020               	movlb	0	; select bank0
  5048  06B4  00AD               	movwf	??_setTemp_Main
  5049  06B5  3F41               	moviw [1]fsr1
  5050  06B6  00AE               	movwf	??_setTemp_Main+1
  5051  06B7  3002               	movlw	2
  5052  06B8  022E               	subwf	??_setTemp_Main+1,w
  5053  06B9  3027               	movlw	39
  5054  06BA  1903               	skipnz
  5055  06BB  022D               	subwf	??_setTemp_Main,w
  5056  06BC  1803               	skipnc
  5057  06BD  2EDB               	goto	l8836
  5058                           
  5059                           ;OverTemperature_B1.c: 112: {
  5060                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5061  06BE  3001               	movlw	1
  5062  06BF  00AD               	movwf	??_setTemp_Main
  5063  06C0  087B               	movf	_Temp,w
  5064  06C1  3E03               	addlw	3
  5065  06C2  0086               	movwf	6
  5066  06C3  3001               	movlw	1	; select bank2/3
  5067  06C4  0087               	movwf	7
  5068  06C5  082D               	movf	??_setTemp_Main,w
  5069  06C6  0781               	addwf	1,f
  5070                           
  5071                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5072  06C7  087B               	movf	_Temp,w
  5073  06C8  3E03               	addlw	3
  5074  06C9  0086               	movwf	6
  5075  06CA  3001               	movlw	1	; select bank2/3
  5076  06CB  0087               	movwf	7
  5077  06CC  3003               	movlw	3
  5078  06CD  0201               	subwf	1,w
  5079  06CE  1C03               	skipc
  5080  06CF  2EE1               	goto	l8838
  5081                           
  5082                           ;OverTemperature_B1.c: 115: {
  5083                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5084  06D0  087B               	movf	_Temp,w
  5085  06D1  3E03               	addlw	3
  5086  06D2  0086               	movwf	6
  5087  06D3  3001               	movlw	1	; select bank2/3
  5088  06D4  0087               	movwf	7
  5089  06D5  0181               	clrf	1
  5090                           
  5091                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5092  06D6  3001               	movlw	1
  5093  06D7  319F  27B7  3185   	fcall	_setOverTemp_Exceptions
  5094                           
  5095                           ;OverTemperature_B1.c: 118: }
  5096                           ;OverTemperature_B1.c: 119: }
  5097  06DA  2EE1               	goto	l8838
  5098  06DB                     l8836:	
  5099                           
  5100                           ;OverTemperature_B1.c: 120: else
  5101                           ;OverTemperature_B1.c: 121: {
  5102                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5103  06DB  087B               	movf	_Temp,w
  5104  06DC  3E03               	addlw	3
  5105  06DD  0086               	movwf	6
  5106  06DE  3001               	movlw	1	; select bank2/3
  5107  06DF  0087               	movwf	7
  5108  06E0  0181               	clrf	1
  5109  06E1                     l8838:	
  5110                           
  5111                           ;OverTemperature_B1.c: 123: }
  5112                           ;OverTemperature_B1.c: 124: }
  5113                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5114  06E1  087B               	movf	_Temp,w
  5115  06E2  0086               	movwf	6
  5116  06E3  3001               	movlw	1	; select bank2/3
  5117  06E4  0087               	movwf	7
  5118  06E5  1881               	btfsc	1,1
  5119  06E6  2EEC               	goto	l8842
  5120                           
  5121                           ;OverTemperature_B1.c: 126: {
  5122                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5123  06E7  087B               	movf	_Temp,w
  5124  06E8  0086               	movwf	6
  5125  06E9  3001               	movlw	1	; select bank2/3
  5126  06EA  0087               	movwf	7
  5127  06EB  1601               	bsf	1,4
  5128  06EC                     l8842:	
  5129                           
  5130                           ;OverTemperature_B1.c: 128: }
  5131                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5132  06EC  087B               	movf	_Temp,w
  5133  06ED  3E06               	addlw	6
  5134  06EE  0086               	movwf	6
  5135  06EF  3001               	movlw	1	; select bank2/3
  5136  06F0  0087               	movwf	7
  5137  06F1  3F40               	moviw [0]fsr1
  5138  06F2  0020               	movlb	0	; select bank0
  5139  06F3  00AD               	movwf	??_setTemp_Main
  5140  06F4  3F41               	moviw [1]fsr1
  5141  06F5  00AE               	movwf	??_setTemp_Main+1
  5142  06F6  082E               	movf	??_setTemp_Main+1,w
  5143  06F7  00AF               	movwf	??_setTemp_Main+2
  5144  06F8  086F               	movf	_Product,w
  5145  06F9  3E18               	addlw	24
  5146  06FA  0086               	movwf	6
  5147  06FB  3001               	movlw	1	; select bank2/3
  5148  06FC  0087               	movwf	7
  5149  06FD  082F               	movf	??_setTemp_Main+2,w
  5150  06FE  0081               	movwf	1
  5151                           
  5152                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5153  06FF  087B               	movf	_Temp,w
  5154  0700  3E06               	addlw	6
  5155  0701  0086               	movwf	6
  5156  0702  3001               	movlw	1	; select bank2/3
  5157  0703  0087               	movwf	7
  5158  0704  0801               	movf	1,w
  5159  0705  00AD               	movwf	??_setTemp_Main
  5160  0706  086F               	movf	_Product,w
  5161  0707  3E19               	addlw	25
  5162  0708  0086               	movwf	6
  5163  0709  3001               	movlw	1	; select bank2/3
  5164  070A  0087               	movwf	7
  5165  070B  082D               	movf	??_setTemp_Main,w
  5166  070C  0081               	movwf	1
  5167                           
  5168                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5169  070D  087B               	movf	_Temp,w
  5170  070E  3E08               	addlw	8
  5171  070F  0086               	movwf	6
  5172  0710  3001               	movlw	1	; select bank2/3
  5173  0711  0087               	movwf	7
  5174  0712  3000               	movlw	0
  5175  0713  3FC0               	movwi [0]fsr1
  5176  0714  3FC1               	movwi [1]fsr1
  5177                           
  5178                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5179  0715  087B               	movf	_Temp,w
  5180  0716  3E0A               	addlw	10
  5181  0717  0086               	movwf	6
  5182  0718  3001               	movlw	1	; select bank2/3
  5183  0719  0087               	movwf	7
  5184  071A  3000               	movlw	0
  5185  071B  3FC0               	movwi [0]fsr1
  5186  071C  3FC1               	movwi [1]fsr1
  5187  071D  0008               	return
  5188  071E                     __end_of_setTemp_Main:	
  5189                           
  5190                           	psect	text9
  5191  1FB7                     __ptext9:	
  5192 ;; *************** function _setOverTemp_Exceptions *****************
  5193 ;; Defined at:
  5194 ;;		line 138 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  command         1    wreg     unsigned char 
  5197 ;; Auto vars:     Size  Location     Type
  5198 ;;  command         1   12[BANK0 ] unsigned char 
  5199 ;; Return value:  Size  Location     Type
  5200 ;;		None               void
  5201 ;; Registers used:
  5202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5203 ;; Tracked objects:
  5204 ;;		On entry : 0/0
  5205 ;;		On exit  : 0/0
  5206 ;;		Unchanged: 0/0
  5207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;Total ram usage:        2 bytes
  5213 ;; Hardware stack levels used:    1
  5214 ;; Hardware stack levels required when called:    8
  5215 ;; This function calls:
  5216 ;;		_DimmerLights_Exceptions
  5217 ;;		_setBuz
  5218 ;;		_setLED
  5219 ;;		_setRF_Enable
  5220 ;;		_setSw_Enable
  5221 ;; This function is called by:
  5222 ;;		_setTemp_Main
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           
  5227                           ;psect for function _setOverTemp_Exceptions
  5228  1FB7                     _setOverTemp_Exceptions:	
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5232                           ;setOverTemp_Exceptions@command stored from wreg
  5233  1FB7  0020               	movlb	0	; select bank0
  5234  1FB8  00AC               	movwf	setOverTemp_Exceptions@command
  5235                           
  5236                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5237  1FB9  087B               	movf	_Temp,w
  5238  1FBA  0086               	movwf	6
  5239  1FBB  3001               	movlw	1	; select bank2/3
  5240  1FBC  0087               	movwf	7
  5241  1FBD  082C               	movf	setOverTemp_Exceptions@command,w
  5242  1FBE  1081               	bcf	1,1
  5243  1FBF  1D03               	skipz
  5244  1FC0  1481               	bsf	1,1
  5245                           
  5246                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5247  1FC1  092C               	comf	setOverTemp_Exceptions@command,w
  5248  1FC2  3901               	andlw	1
  5249  1FC3  00AB               	movwf	??_setOverTemp_Exceptions
  5250  1FC4  087B               	movf	_Temp,w
  5251  1FC5  0086               	movwf	6
  5252  1FC6  3001               	movlw	1	; select bank2/3
  5253  1FC7  0087               	movwf	7
  5254  1FC8  0EAB               	swapf	??_setOverTemp_Exceptions,f
  5255  1FC9  0801               	movf	1,w
  5256  1FCA  062B               	xorwf	??_setOverTemp_Exceptions,w
  5257  1FCB  39EF               	andlw	-17
  5258  1FCC  062B               	xorwf	??_setOverTemp_Exceptions,w
  5259  1FCD  0081               	movwf	1
  5260                           
  5261                           ;OverTemperature_B1.c: 142: if(command)
  5262  1FCE  082C               	movf	setOverTemp_Exceptions@command,w
  5263  1FCF  1903               	btfsc	3,2
  5264  1FD0  2FDD               	goto	l8462
  5265                           
  5266                           ;OverTemperature_B1.c: 143: {
  5267                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5268  1FD1  3001               	movlw	1
  5269  1FD2  3191  215C  319F   	fcall	_DimmerLights_Exceptions
  5270                           
  5271                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5272  1FD5  0020               	movlb	0	; select bank0
  5273  1FD6  01A2               	clrf	setLED@command
  5274  1FD7  0AA2               	incf	setLED@command,f
  5275  1FD8  3002               	movlw	2
  5276  1FD9  3192  226D  319F   	fcall	_setLED
  5277                           
  5278                           ;OverTemperature_B1.c: 148: }
  5279  1FDC  2FE6               	goto	l1762
  5280  1FDD                     l8462:	
  5281                           
  5282                           ;OverTemperature_B1.c: 149: else
  5283                           ;OverTemperature_B1.c: 150: {
  5284                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5285  1FDD  3064               	movlw	100
  5286  1FDE  0020               	movlb	0	; select bank0
  5287  1FDF  00A6               	movwf	setBuz@time
  5288  1FE0  3000               	movlw	0
  5289  1FE1  00A7               	movwf	setBuz@time+1
  5290  1FE2  3002               	movlw	2
  5291  1FE3  3196  2696  319F   	fcall	_setBuz
  5292  1FE6                     l1762:	
  5293                           
  5294                           ;OverTemperature_B1.c: 152: }
  5295                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5296  1FE6  0020               	movlb	0	; select bank0
  5297  1FE7  082C               	movf	setOverTemp_Exceptions@command,w
  5298  1FE8  3E0A               	addlw	10
  5299  1FE9  00AB               	movwf	??_setOverTemp_Exceptions
  5300  1FEA  082B               	movf	??_setOverTemp_Exceptions,w
  5301  1FEB  00A2               	movwf	setLED@command
  5302  1FEC  3063               	movlw	99
  5303  1FED  3192  226D  319F   	fcall	_setLED
  5304                           
  5305                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5306  1FF0  0020               	movlb	0	; select bank0
  5307  1FF1  092C               	comf	setOverTemp_Exceptions@command,w
  5308  1FF2  3901               	andlw	1
  5309  1FF3  31A7  2781  319F   	fcall	_setSw_Enable
  5310                           
  5311                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5312  1FF6  0020               	movlb	0	; select bank0
  5313  1FF7  092C               	comf	setOverTemp_Exceptions@command,w
  5314  1FF8  3901               	andlw	1
  5315  1FF9  00AB               	movwf	??_setOverTemp_Exceptions
  5316  1FFA  082B               	movf	??_setOverTemp_Exceptions,w
  5317  1FFB  00A2               	movwf	setRF_Enable@command
  5318  1FFC  3001               	movlw	1
  5319  1FFD  319B  2351         	fcall	_setRF_Enable
  5320  1FFF  0008               	return
  5321  2000                     __end_of_setOverTemp_Exceptions:	
  5322                           
  5323                           	psect	text10
  5324  25B2                     __ptext10:	
  5325 ;; *************** function _Temp_Initialization *****************
  5326 ;; Defined at:
  5327 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;Total ram usage:        0 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    5
  5348 ;; This function calls:
  5349 ;;		_setTemp_Initialization
  5350 ;; This function is called by:
  5351 ;;		_main
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _Temp_Initialization
  5357  25B2                     _Temp_Initialization:	
  5358                           
  5359                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5363  25B2  31A6  268E         	fcall	_setTemp_Initialization
  5364  25B4  0008               	return
  5365  25B5                     __end_of_Temp_Initialization:	
  5366                           
  5367                           	psect	text11
  5368  268E                     __ptext11:	
  5369 ;; *************** function _setTemp_Initialization *****************
  5370 ;; Defined at:
  5371 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;		None
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;		None               void
  5378 ;; Registers used:
  5379 ;;		wreg, fsr1l, fsr1h
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;Total ram usage:        1 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    4
  5392 ;; This function calls:
  5393 ;;		Nothing
  5394 ;; This function is called by:
  5395 ;;		_Temp_Initialization
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function _setTemp_Initialization
  5401  268E                     _setTemp_Initialization:	
  5402                           
  5403                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5404                           
  5405                           ;incstack = 0
  5406                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5407  268E  303F               	movlw	_Temp1& (0+255)
  5408  268F  0020               	movlb	0	; select bank0
  5409  2690  00A0               	movwf	??_setTemp_Initialization
  5410  2691  0820               	movf	??_setTemp_Initialization,w
  5411  2692  00FB               	movwf	_Temp
  5412                           
  5413                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5414  2693  087B               	movf	_Temp,w
  5415  2694  0086               	movwf	6
  5416  2695  3001               	movlw	1	; select bank2/3
  5417  2696  0087               	movwf	7
  5418  2697  1601               	bsf	1,4
  5419  2698  0008               	return
  5420  2699                     __end_of_setTemp_Initialization:	
  5421                           
  5422                           	psect	text12
  5423  25D4                     __ptext12:	
  5424 ;; *************** function _Switch_Main *****************
  5425 ;; Defined at:
  5426 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;		None
  5429 ;; Auto vars:     Size  Location     Type
  5430 ;;		None
  5431 ;; Return value:  Size  Location     Type
  5432 ;;		None               void
  5433 ;; Registers used:
  5434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5435 ;; Tracked objects:
  5436 ;;		On entry : 0/0
  5437 ;;		On exit  : 0/0
  5438 ;;		Unchanged: 0/0
  5439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;Total ram usage:        0 bytes
  5445 ;; Hardware stack levels used:    1
  5446 ;; Hardware stack levels required when called:   10
  5447 ;; This function calls:
  5448 ;;		_setSw_Main
  5449 ;; This function is called by:
  5450 ;;		_main
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _Switch_Main
  5456  25D4                     _Switch_Main:	
  5457                           
  5458                           ;Switch_B1.c: 63: setSw_Main(1);
  5459                           
  5460                           ;incstack = 0
  5461                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5462  25D4  3001               	movlw	1
  5463  25D5  3184  24B2         	fcall	_setSw_Main
  5464  25D7  0008               	return
  5465  25D8                     __end_of_Switch_Main:	
  5466                           
  5467                           	psect	text13
  5468  04B2                     __ptext13:	
  5469 ;; *************** function _setSw_Main *****************
  5470 ;; Defined at:
  5471 ;;		line 111 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  sw              1    wreg     unsigned char 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  sw              1   72[BANK0 ] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;		None               void
  5478 ;; Registers used:
  5479 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;Total ram usage:        4 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    9
  5492 ;; This function calls:
  5493 ;;		_SwPointSelect
  5494 ;;		_Sw_DimmerAdjFunc
  5495 ;;		_Sw_DimmerOffFunc
  5496 ;;		_Sw_DimmerOnFunc
  5497 ;;		_setBuz
  5498 ;;		_setRF_Learn
  5499 ;; This function is called by:
  5500 ;;		_Switch_Main
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function _setSw_Main
  5506  04B2                     _setSw_Main:	
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5510                           ;setSw_Main@sw stored from wreg
  5511  04B2  0020               	movlb	0	; select bank0
  5512  04B3  00E8               	movwf	setSw_Main@sw
  5513                           
  5514                           ;Switch_B1.c: 112: if (Sw->Enable) {
  5515  04B4  086D               	movf	_Sw,w
  5516  04B5  0086               	movwf	6
  5517  04B6  3001               	movlw	1	; select bank2/3
  5518  04B7  0087               	movwf	7
  5519  04B8  1C01               	btfss	1,0
  5520  04B9  0008               	return
  5521                           
  5522                           ;Switch_B1.c: 113: SwPointSelect(sw);
  5523  04BA  0868               	movf	setSw_Main@sw,w
  5524  04BB  31A6  2657  3184   	fcall	_SwPointSelect
  5525                           
  5526                           ;Switch_B1.c: 133: Sw->Touch = (RA6 || RA4 || RA0 || RB1) ? 1 : 0;
  5527  04BE  0020               	movlb	0	; select bank0
  5528  04BF  01E7               	clrf	_setSw_Main$4539
  5529  04C0  0AE7               	incf	_setSw_Main$4539,f
  5530  04C1  1F0C               	btfss	12,6	;volatile
  5531  04C2  1A0C               	btfsc	12,4	;volatile
  5532  04C3  2CC8               	goto	l8984
  5533  04C4  1C0C               	btfss	12,0	;volatile
  5534  04C5  188D               	btfsc	13,1	;volatile
  5535  04C6  2CC8               	goto	l8984
  5536  04C7  01E7               	clrf	_setSw_Main$4539
  5537  04C8                     l8984:	
  5538  04C8  086D               	movf	_Sw,w
  5539  04C9  0086               	movwf	6
  5540  04CA  3001               	movlw	1	; select bank2/3
  5541  04CB  0087               	movwf	7
  5542  04CC  0867               	movf	_setSw_Main$4539,w
  5543  04CD  1081               	bcf	1,1
  5544  04CE  1D03               	skipz
  5545  04CF  1481               	bsf	1,1
  5546                           
  5547                           ;Switch_B1.c: 137: if (Sw->Touch) {
  5548  04D0  086D               	movf	_Sw,w
  5549  04D1  0086               	movwf	6
  5550  04D2  3001               	movlw	1	; select bank2/3
  5551  04D3  0087               	movwf	7
  5552  04D4  1C81               	btfss	1,1
  5553  04D5  2DA6               	goto	l9034
  5554                           
  5555                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  5556  04D6  086D               	movf	_Sw,w
  5557  04D7  0086               	movwf	6
  5558  04D8  3001               	movlw	1	; select bank2/3
  5559  04D9  0087               	movwf	7
  5560  04DA  1901               	btfsc	1,2
  5561  04DB  2CFD               	goto	l9000
  5562                           
  5563                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5564  04DC  3001               	movlw	1
  5565  04DD  00E5               	movwf	??_setSw_Main
  5566  04DE  086D               	movf	_Sw,w
  5567  04DF  3E02               	addlw	2
  5568  04E0  0086               	movwf	6
  5569  04E1  3001               	movlw	1	; select bank2/3
  5570  04E2  0087               	movwf	7
  5571  04E3  0865               	movf	??_setSw_Main,w
  5572  04E4  0781               	addwf	1,f
  5573                           
  5574                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5575  04E5  086D               	movf	_Sw,w
  5576  04E6  3E02               	addlw	2
  5577  04E7  0086               	movwf	6
  5578  04E8  3001               	movlw	1	; select bank2/3
  5579  04E9  0087               	movwf	7
  5580  04EA  3005               	movlw	5
  5581  04EB  0201               	subwf	1,w
  5582  04EC  1C03               	skipc
  5583  04ED  0008               	return
  5584                           
  5585                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5586  04EE  086D               	movf	_Sw,w
  5587  04EF  3E02               	addlw	2
  5588  04F0  0086               	movwf	6
  5589  04F1  3001               	movlw	1	; select bank2/3
  5590  04F2  0087               	movwf	7
  5591  04F3  0181               	clrf	1
  5592                           
  5593                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5594  04F4  086D               	movf	_Sw,w
  5595  04F5  0086               	movwf	6
  5596  04F6  3001               	movlw	1	; select bank2/3
  5597  04F7  0087               	movwf	7
  5598  04F8  1501               	bsf	1,2
  5599                           
  5600                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  5601  04F9  0868               	movf	setSw_Main@sw,w
  5602  04FA  3191  2103         	fcall	_Sw_DimmerOnFunc
  5603                           
  5604                           ;Switch_B1.c: 148: }
  5605                           ;Switch_B1.c: 149: } else {
  5606  04FC  0008               	return
  5607  04FD                     l9000:	
  5608                           
  5609                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  5610  04FD  0020               	movlb	0	; select bank0
  5611  04FE  086D               	movf	_Sw,w
  5612  04FF  0086               	movwf	6
  5613  0500  3001               	movlw	1	; select bank2/3
  5614  0501  0087               	movwf	7
  5615  0502  1981               	btfsc	1,3
  5616  0503  2D2F               	goto	l9010
  5617                           
  5618                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5619  0504  086D               	movf	_Sw,w
  5620  0505  3E03               	addlw	3
  5621  0506  0086               	movwf	6
  5622  0507  3001               	movlw	1	; select bank2/3
  5623  0508  0087               	movwf	7
  5624  0509  3001               	movlw	1
  5625  050A  0781               	addwf	1,f
  5626  050B  3141               	addfsr 1,1
  5627  050C  1803               	skipnc
  5628  050D  0A81               	incf	1,f
  5629                           
  5630                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5631  050E  086D               	movf	_Sw,w
  5632  050F  3E03               	addlw	3
  5633  0510  0086               	movwf	6
  5634  0511  3001               	movlw	1	; select bank2/3
  5635  0512  0087               	movwf	7
  5636  0513  3F40               	moviw [0]fsr1
  5637  0514  00E5               	movwf	??_setSw_Main
  5638  0515  3F41               	moviw [1]fsr1
  5639  0516  00E6               	movwf	??_setSw_Main+1
  5640  0517  3000               	movlw	0
  5641  0518  0266               	subwf	??_setSw_Main+1,w
  5642  0519  3096               	movlw	150
  5643  051A  1903               	skipnz
  5644  051B  0265               	subwf	??_setSw_Main,w
  5645  051C  1C03               	skipc
  5646  051D  0008               	return
  5647                           
  5648                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5649  051E  086D               	movf	_Sw,w
  5650  051F  3E03               	addlw	3
  5651  0520  0086               	movwf	6
  5652  0521  3001               	movlw	1	; select bank2/3
  5653  0522  0087               	movwf	7
  5654  0523  3000               	movlw	0
  5655  0524  3FC0               	movwi [0]fsr1
  5656  0525  3FC1               	movwi [1]fsr1
  5657                           
  5658                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  5659  0526  086D               	movf	_Sw,w
  5660  0527  0086               	movwf	6
  5661  0528  3001               	movlw	1	; select bank2/3
  5662  0529  0087               	movwf	7
  5663  052A  1581               	bsf	1,3
  5664                           
  5665                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5666  052B  0868               	movf	setSw_Main@sw,w
  5667  052C  319B  23A6         	fcall	_Sw_DimmerAdjFunc
  5668                           
  5669                           ;Switch_B1.c: 160: }
  5670                           ;Switch_B1.c: 161: } else {
  5671  052E  0008               	return
  5672  052F                     l9010:	
  5673                           
  5674                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  5675  052F  0020               	movlb	0	; select bank0
  5676  0530  086D               	movf	_Sw,w
  5677  0531  0086               	movwf	6
  5678  0532  3001               	movlw	1	; select bank2/3
  5679  0533  0087               	movwf	7
  5680  0534  1A01               	btfsc	1,4
  5681  0535  2D73               	goto	l9024
  5682                           
  5683                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5684  0536  086D               	movf	_Sw,w
  5685  0537  3E05               	addlw	5
  5686  0538  0086               	movwf	6
  5687  0539  3001               	movlw	1	; select bank2/3
  5688  053A  0087               	movwf	7
  5689  053B  3001               	movlw	1
  5690  053C  0781               	addwf	1,f
  5691  053D  3141               	addfsr 1,1
  5692  053E  1803               	skipnc
  5693  053F  0A81               	incf	1,f
  5694                           
  5695                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5696  0540  086D               	movf	_Sw,w
  5697  0541  3E05               	addlw	5
  5698  0542  0086               	movwf	6
  5699  0543  3001               	movlw	1	; select bank2/3
  5700  0544  0087               	movwf	7
  5701  0545  3F40               	moviw [0]fsr1
  5702  0546  00E5               	movwf	??_setSw_Main
  5703  0547  3F41               	moviw [1]fsr1
  5704  0548  00E6               	movwf	??_setSw_Main+1
  5705  0549  3000               	movlw	0
  5706  054A  0266               	subwf	??_setSw_Main+1,w
  5707  054B  3096               	movlw	150
  5708  054C  1903               	skipnz
  5709  054D  0265               	subwf	??_setSw_Main,w
  5710  054E  1C03               	skipc
  5711  054F  0008               	return
  5712                           
  5713                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5714  0550  086D               	movf	_Sw,w
  5715  0551  3E05               	addlw	5
  5716  0552  0086               	movwf	6
  5717  0553  3001               	movlw	1	; select bank2/3
  5718  0554  0087               	movwf	7
  5719  0555  3000               	movlw	0
  5720  0556  3FC0               	movwi [0]fsr1
  5721  0557  3FC1               	movwi [1]fsr1
  5722                           
  5723                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5724  0558  086D               	movf	_Sw,w
  5725  0559  0086               	movwf	6
  5726  055A  3001               	movlw	1	; select bank2/3
  5727  055B  0087               	movwf	7
  5728  055C  1601               	bsf	1,4
  5729                           
  5730                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  5731  055D  01A2               	clrf	setRF_Learn@command
  5732  055E  0AA2               	incf	setRF_Learn@command,f
  5733  055F  3001               	movlw	1
  5734  0560  31A7  2746  3184   	fcall	_setRF_Learn
  5735                           
  5736                           ;Switch_B1.c: 172: if (TMain->First) {
  5737  0563  087D               	movf	_TMain,w
  5738  0564  3E03               	addlw	3
  5739  0565  0086               	movwf	6
  5740  0566  3001               	movlw	1	; select bank2/3
  5741  0567  0087               	movwf	7
  5742  0568  1C81               	btfss	1,1
  5743  0569  0008               	return
  5744                           
  5745                           ;Switch_B1.c: 173: setBuz(2, 100);
  5746  056A  3064               	movlw	100
  5747  056B  0020               	movlb	0	; select bank0
  5748  056C  00A6               	movwf	setBuz@time
  5749  056D  3000               	movlw	0
  5750  056E  00A7               	movwf	setBuz@time+1
  5751  056F  3002               	movlw	2
  5752  0570  3196  2696         	fcall	_setBuz
  5753                           
  5754                           ;Switch_B1.c: 174: }
  5755                           ;Switch_B1.c: 176: }
  5756                           ;Switch_B1.c: 177: } else {
  5757  0572  0008               	return
  5758  0573                     l9024:	
  5759                           
  5760                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  5761  0573  0020               	movlb	0	; select bank0
  5762  0574  086D               	movf	_Sw,w
  5763  0575  0086               	movwf	6
  5764  0576  3001               	movlw	1	; select bank2/3
  5765  0577  0087               	movwf	7
  5766  0578  1A81               	btfsc	1,5
  5767  0579  0008               	return
  5768                           
  5769                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5770  057A  086D               	movf	_Sw,w
  5771  057B  3E07               	addlw	7
  5772  057C  0086               	movwf	6
  5773  057D  3001               	movlw	1	; select bank2/3
  5774  057E  0087               	movwf	7
  5775  057F  3001               	movlw	1
  5776  0580  0781               	addwf	1,f
  5777  0581  3141               	addfsr 1,1
  5778  0582  1803               	skipnc
  5779  0583  0A81               	incf	1,f
  5780                           
  5781                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  5782  0584  086D               	movf	_Sw,w
  5783  0585  3E07               	addlw	7
  5784  0586  0086               	movwf	6
  5785  0587  3001               	movlw	1	; select bank2/3
  5786  0588  0087               	movwf	7
  5787  0589  3F40               	moviw [0]fsr1
  5788  058A  00E5               	movwf	??_setSw_Main
  5789  058B  3F41               	moviw [1]fsr1
  5790  058C  00E6               	movwf	??_setSw_Main+1
  5791  058D  3001               	movlw	1
  5792  058E  0266               	subwf	??_setSw_Main+1,w
  5793  058F  302C               	movlw	44
  5794  0590  1903               	skipnz
  5795  0591  0265               	subwf	??_setSw_Main,w
  5796  0592  1C03               	skipc
  5797  0593  0008               	return
  5798                           
  5799                           ;Switch_B1.c: 181: {
  5800                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  5801  0594  086D               	movf	_Sw,w
  5802  0595  3E07               	addlw	7
  5803  0596  0086               	movwf	6
  5804  0597  3001               	movlw	1	; select bank2/3
  5805  0598  0087               	movwf	7
  5806  0599  3000               	movlw	0
  5807  059A  3FC0               	movwi [0]fsr1
  5808  059B  3FC1               	movwi [1]fsr1
  5809                           
  5810                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  5811  059C  086D               	movf	_Sw,w
  5812  059D  0086               	movwf	6
  5813  059E  3001               	movlw	1	; select bank2/3
  5814  059F  0087               	movwf	7
  5815  05A0  1681               	bsf	1,5
  5816                           
  5817                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  5818  05A1  01A2               	clrf	setRF_Learn@command
  5819  05A2  3001               	movlw	1
  5820  05A3  31A7  2746         	fcall	_setRF_Learn
  5821                           
  5822                           ;Switch_B1.c: 189: }
  5823                           ;Switch_B1.c: 190: }
  5824                           ;Switch_B1.c: 191: }
  5825                           ;Switch_B1.c: 192: }
  5826                           ;Switch_B1.c: 193: }
  5827                           ;Switch_B1.c: 194: } else {
  5828  05A5  0008               	return
  5829  05A6                     l9034:	
  5830                           
  5831                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  5832  05A6  0020               	movlb	0	; select bank0
  5833  05A7  086D               	movf	_Sw,w
  5834  05A8  0086               	movwf	6
  5835  05A9  3001               	movlw	1	; select bank2/3
  5836  05AA  0087               	movwf	7
  5837  05AB  1D01               	btfss	1,2
  5838  05AC  0008               	return
  5839                           
  5840                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  5841  05AD  3001               	movlw	1
  5842  05AE  00E5               	movwf	??_setSw_Main
  5843  05AF  086D               	movf	_Sw,w
  5844  05B0  3E02               	addlw	2
  5845  05B1  0086               	movwf	6
  5846  05B2  3001               	movlw	1	; select bank2/3
  5847  05B3  0087               	movwf	7
  5848  05B4  0865               	movf	??_setSw_Main,w
  5849  05B5  0781               	addwf	1,f
  5850                           
  5851                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  5852  05B6  086D               	movf	_Sw,w
  5853  05B7  3E02               	addlw	2
  5854  05B8  0086               	movwf	6
  5855  05B9  3001               	movlw	1	; select bank2/3
  5856  05BA  0087               	movwf	7
  5857  05BB  3005               	movlw	5
  5858  05BC  0201               	subwf	1,w
  5859  05BD  1C03               	skipc
  5860  05BE  0008               	return
  5861                           
  5862                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  5863  05BF  086D               	movf	_Sw,w
  5864  05C0  3E02               	addlw	2
  5865  05C1  0086               	movwf	6
  5866  05C2  3001               	movlw	1	; select bank2/3
  5867  05C3  0087               	movwf	7
  5868  05C4  0181               	clrf	1
  5869                           
  5870                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  5871  05C5  086D               	movf	_Sw,w
  5872  05C6  0086               	movwf	6
  5873  05C7  3001               	movlw	1	; select bank2/3
  5874  05C8  0087               	movwf	7
  5875  05C9  1101               	bcf	1,2
  5876                           
  5877                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  5878  05CA  086D               	movf	_Sw,w
  5879  05CB  3E03               	addlw	3
  5880  05CC  0086               	movwf	6
  5881  05CD  3001               	movlw	1	; select bank2/3
  5882  05CE  0087               	movwf	7
  5883  05CF  3000               	movlw	0
  5884  05D0  3FC0               	movwi [0]fsr1
  5885  05D1  3FC1               	movwi [1]fsr1
  5886                           
  5887                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  5888  05D2  086D               	movf	_Sw,w
  5889  05D3  0086               	movwf	6
  5890  05D4  3001               	movlw	1	; select bank2/3
  5891  05D5  0087               	movwf	7
  5892  05D6  1181               	bcf	1,3
  5893                           
  5894                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  5895  05D7  086D               	movf	_Sw,w
  5896  05D8  3E05               	addlw	5
  5897  05D9  0086               	movwf	6
  5898  05DA  3001               	movlw	1	; select bank2/3
  5899  05DB  0087               	movwf	7
  5900  05DC  3000               	movlw	0
  5901  05DD  3FC0               	movwi [0]fsr1
  5902  05DE  3FC1               	movwi [1]fsr1
  5903                           
  5904                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  5905  05DF  086D               	movf	_Sw,w
  5906  05E0  0086               	movwf	6
  5907  05E1  3001               	movlw	1	; select bank2/3
  5908  05E2  0087               	movwf	7
  5909  05E3  1201               	bcf	1,4
  5910                           
  5911                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5912  05E4  086D               	movf	_Sw,w
  5913  05E5  3E07               	addlw	7
  5914  05E6  0086               	movwf	6
  5915  05E7  3001               	movlw	1	; select bank2/3
  5916  05E8  0087               	movwf	7
  5917  05E9  3000               	movlw	0
  5918  05EA  3FC0               	movwi [0]fsr1
  5919  05EB  3FC1               	movwi [1]fsr1
  5920                           
  5921                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  5922  05EC  086D               	movf	_Sw,w
  5923  05ED  0086               	movwf	6
  5924  05EE  3001               	movlw	1	; select bank2/3
  5925  05EF  0087               	movwf	7
  5926  05F0  1281               	bcf	1,5
  5927                           
  5928                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  5929  05F1  0868               	movf	setSw_Main@sw,w
  5930  05F2  3195  25B3  3184   	fcall	_Sw_DimmerOffFunc
  5931                           
  5932                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  5933  05F5  0020               	movlb	0	; select bank0
  5934  05F6  01A2               	clrf	setRF_Learn@command
  5935  05F7  3001               	movlw	1
  5936  05F8  31A7  2746         	fcall	_setRF_Learn
  5937  05FA  0008               	return
  5938  05FB                     __end_of_setSw_Main:	
  5939                           
  5940                           	psect	text14
  5941  2746                     __ptext14:	
  5942 ;; *************** function _setRF_Learn *****************
  5943 ;; Defined at:
  5944 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  rf              1    wreg     unsigned char 
  5947 ;;  command         1    2[BANK0 ] unsigned char 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  rf              1    3[BANK0 ] unsigned char 
  5950 ;; Return value:  Size  Location     Type
  5951 ;;		None               void
  5952 ;; Registers used:
  5953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5959 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;Total ram usage:        2 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    5
  5966 ;; This function calls:
  5967 ;;		_RfPointSelect
  5968 ;; This function is called by:
  5969 ;;		_setSw_Main
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           
  5974                           ;psect for function _setRF_Learn
  5975  2746                     _setRF_Learn:	
  5976                           
  5977                           ;incstack = 0
  5978                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5979                           ;setRF_Learn@rf stored from wreg
  5980  2746  0020               	movlb	0	; select bank0
  5981  2747  00A3               	movwf	setRF_Learn@rf
  5982                           
  5983                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  5984  2748  0823               	movf	setRF_Learn@rf,w
  5985  2749  31A6  2662         	fcall	_RfPointSelect
  5986                           
  5987                           ;RF_Control_B1.c: 32: RF->Learn = command;
  5988  274B  087A               	movf	_RF,w
  5989  274C  0086               	movwf	6
  5990  274D  0187               	clrf	7
  5991  274E  0020               	movlb	0	; select bank0
  5992  274F  0822               	movf	setRF_Learn@command,w
  5993  2750  1301               	bcf	1,6
  5994  2751  1D03               	skipz
  5995  2752  1701               	bsf	1,6
  5996  2753  0008               	return
  5997  2754                     __end_of_setRF_Learn:	
  5998                           
  5999                           	psect	text15
  6000  1103                     __ptext15:	
  6001 ;; *************** function _Sw_DimmerOnFunc *****************
  6002 ;; Defined at:
  6003 ;;		line 222 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;  sw              1    wreg     unsigned char 
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;  sw              1   67[BANK0 ] unsigned char 
  6008 ;;  Idle            1   66[BANK0 ] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;		None               void
  6011 ;; Registers used:
  6012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6019 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6022 ;;Total ram usage:        2 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    8
  6025 ;; This function calls:
  6026 ;;		_setBuz
  6027 ;;		_setDimmerLights_Switch
  6028 ;;		_setDimmerLights_Trigger
  6029 ;;		_setRFSW_Status
  6030 ;;		_setRF_DimmerLights
  6031 ;;		_setTxData
  6032 ;; This function is called by:
  6033 ;;		_setSw_Main
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _Sw_DimmerOnFunc
  6039  1103                     _Sw_DimmerOnFunc:	
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6043                           ;Sw_DimmerOnFunc@sw stored from wreg
  6044  1103  0020               	movlb	0	; select bank0
  6045  1104  00E3               	movwf	Sw_DimmerOnFunc@sw
  6046                           
  6047                           ;Switch_B1.c: 223: char Idle = 1;
  6048  1105  01E2               	clrf	Sw_DimmerOnFunc@Idle
  6049  1106  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  6050                           
  6051                           ;Switch_B1.c: 242: if (Idle) {
  6052  1107  0862               	movf	Sw_DimmerOnFunc@Idle,w
  6053  1108  1903               	btfsc	3,2
  6054  1109  0008               	return
  6055                           
  6056                           ;Switch_B1.c: 243: Sw->Flag = 1;
  6057  110A  086D               	movf	_Sw,w
  6058  110B  0086               	movwf	6
  6059  110C  3001               	movlw	1	; select bank2/3
  6060  110D  0087               	movwf	7
  6061  110E  1781               	bsf	1,7
  6062                           
  6063                           ;Switch_B1.c: 244: setBuz(1, 100);
  6064  110F  3064               	movlw	100
  6065  1110  00A6               	movwf	setBuz@time
  6066  1111  3000               	movlw	0
  6067  1112  00A7               	movwf	setBuz@time+1
  6068  1113  3001               	movlw	1
  6069  1114  3196  2696  3191   	fcall	_setBuz
  6070                           
  6071                           ;Switch_B1.c: 245: if (!Sw->Status) {
  6072  1117  0020               	movlb	0	; select bank0
  6073  1118  086D               	movf	_Sw,w
  6074  1119  0086               	movwf	6
  6075  111A  3001               	movlw	1	; select bank2/3
  6076  111B  0087               	movwf	7
  6077  111C  1B01               	btfsc	1,6
  6078  111D  2949               	goto	l8552
  6079                           
  6080                           ;Switch_B1.c: 246: Sw->Status = 1;
  6081  111E  086D               	movf	_Sw,w
  6082  111F  0086               	movwf	6
  6083  1120  3001               	movlw	1	; select bank2/3
  6084  1121  0087               	movwf	7
  6085  1122  1701               	bsf	1,6
  6086                           
  6087                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  6088  1123  01A2               	clrf	setRFSW_Status@command
  6089  1124  0AA2               	incf	setRFSW_Status@command,f
  6090  1125  0863               	movf	Sw_DimmerOnFunc@sw,w
  6091  1126  31A7  2763  3191   	fcall	_setRFSW_Status
  6092                           
  6093                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  6094  1129  0020               	movlb	0	; select bank0
  6095  112A  01A2               	clrf	setDimmerLights_Trigger@command
  6096  112B  0AA2               	incf	setDimmerLights_Trigger@command,f
  6097  112C  0863               	movf	Sw_DimmerOnFunc@sw,w
  6098  112D  31A7  27B0  3191   	fcall	_setDimmerLights_Trigger
  6099                           
  6100                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  6101  1130  0020               	movlb	0	; select bank0
  6102  1131  01A2               	clrf	setDimmerLights_Switch@command
  6103  1132  0AA2               	incf	setDimmerLights_Switch@command,f
  6104  1133  0863               	movf	Sw_DimmerOnFunc@sw,w
  6105  1134  31A7  27A0  3191   	fcall	_setDimmerLights_Switch
  6106                           
  6107                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  6108  1137  0020               	movlb	0	; select bank0
  6109  1138  086D               	movf	_Sw,w
  6110  1139  0086               	movwf	6
  6111  113A  3001               	movlw	1	; select bank2/3
  6112  113B  0087               	movwf	7
  6113  113C  3000               	movlw	0
  6114  113D  1B01               	btfsc	1,6
  6115  113E  3001               	movlw	1
  6116  113F  00DD               	movwf	setRF_DimmerLights@on
  6117  1140  0863               	movf	Sw_DimmerOnFunc@sw,w
  6118  1141  3193  2390  3191   	fcall	_setRF_DimmerLights
  6119                           
  6120                           ;Switch_B1.c: 253: setTxData(1);
  6121  1144  3001               	movlw	1
  6122  1145  3187  271E         	fcall	_setTxData
  6123                           
  6124                           ;Switch_B1.c: 255: } else {
  6125  1147  0020               	movlb	0	; select bank0
  6126  1148  0008               	return
  6127  1149                     l8552:	
  6128                           
  6129                           ;Switch_B1.c: 256: Sw->Status = 0;
  6130  1149  0020               	movlb	0	; select bank0
  6131  114A  086D               	movf	_Sw,w
  6132  114B  0086               	movwf	6
  6133  114C  3001               	movlw	1	; select bank2/3
  6134  114D  0087               	movwf	7
  6135  114E  1301               	bcf	1,6
  6136                           
  6137                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  6138  114F  086D               	movf	_Sw,w
  6139  1150  0086               	movwf	6
  6140  1151  3001               	movlw	1	; select bank2/3
  6141  1152  0087               	movwf	7
  6142  1153  3000               	movlw	0
  6143  1154  1B01               	btfsc	1,6
  6144  1155  3001               	movlw	1
  6145  1156  00A2               	movwf	setRFSW_Status@command
  6146  1157  0863               	movf	Sw_DimmerOnFunc@sw,w
  6147  1158  31A7  2763         	fcall	_setRFSW_Status
  6148  115A  0020               	movlb	0	; select bank0
  6149  115B  0008               	return
  6150  115C                     __end_of_Sw_DimmerOnFunc:	
  6151                           
  6152                           	psect	text16
  6153  15B3                     __ptext16:	
  6154 ;; *************** function _Sw_DimmerOffFunc *****************
  6155 ;; Defined at:
  6156 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  sw              1    wreg     unsigned char 
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;  sw              1   68[BANK0 ] unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;		None               void
  6163 ;; Registers used:
  6164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;Total ram usage:        3 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    8
  6177 ;; This function calls:
  6178 ;;		_setDelayOff_GO
  6179 ;;		_setDimmerLights_AdjGo
  6180 ;;		_setDimmerLights_Switch
  6181 ;;		_setDimmerLights_Trigger
  6182 ;;		_setDimmerLights_TriggerAdj
  6183 ;;		_setRF_DimmerLights
  6184 ;;		_setTxData
  6185 ;; This function is called by:
  6186 ;;		_setSw_Main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _Sw_DimmerOffFunc
  6192  15B3                     _Sw_DimmerOffFunc:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6196                           ;Sw_DimmerOffFunc@sw stored from wreg
  6197  15B3  0020               	movlb	0	; select bank0
  6198  15B4  00E4               	movwf	Sw_DimmerOffFunc@sw
  6199                           
  6200                           ;Switch_B1.c: 264: if (Sw->Flag) {
  6201  15B5  086D               	movf	_Sw,w
  6202  15B6  0086               	movwf	6
  6203  15B7  3001               	movlw	1	; select bank2/3
  6204  15B8  0087               	movwf	7
  6205  15B9  1F81               	btfss	1,7
  6206  15BA  0008               	return
  6207                           
  6208                           ;Switch_B1.c: 265: Sw->Flag = 0;
  6209  15BB  086D               	movf	_Sw,w
  6210  15BC  0086               	movwf	6
  6211  15BD  3001               	movlw	1	; select bank2/3
  6212  15BE  0087               	movwf	7
  6213  15BF  1381               	bcf	1,7
  6214                           
  6215                           ;Switch_B1.c: 266: if (Sw->Status) {
  6216  15C0  086D               	movf	_Sw,w
  6217  15C1  0086               	movwf	6
  6218  15C2  3001               	movlw	1	; select bank2/3
  6219  15C3  0087               	movwf	7
  6220  15C4  1F01               	btfss	1,6
  6221  15C5  2DFF               	goto	l8586
  6222                           
  6223                           ;Switch_B1.c: 267: if (Sw->Adj) {
  6224  15C6  0A6D               	incf	_Sw,w
  6225  15C7  0086               	movwf	6
  6226  15C8  3001               	movlw	1	; select bank2/3
  6227  15C9  0087               	movwf	7
  6228  15CA  1C01               	btfss	1,0
  6229  15CB  0008               	return
  6230                           
  6231                           ;Switch_B1.c: 268: Sw->Adj = 0;
  6232  15CC  0A6D               	incf	_Sw,w
  6233  15CD  0086               	movwf	6
  6234  15CE  3001               	movlw	1	; select bank2/3
  6235  15CF  0087               	movwf	7
  6236  15D0  1001               	bcf	1,0
  6237                           
  6238                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  6239  15D1  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6240  15D2  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6241  15D3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6242  15D4  3190  2000  3195   	fcall	_setDimmerLights_TriggerAdj
  6243                           
  6244                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  6245  15D7  0020               	movlb	0	; select bank0
  6246  15D8  01A2               	clrf	setDimmerLights_AdjGo@command
  6247  15D9  0864               	movf	Sw_DimmerOffFunc@sw,w
  6248  15DA  3198  206F  3195   	fcall	_setDimmerLights_AdjGo
  6249                           
  6250                           ;Switch_B1.c: 272: Product->Data[17]=Product->Data[26 + sw];
  6251  15DD  0020               	movlb	0	; select bank0
  6252  15DE  0864               	movf	Sw_DimmerOffFunc@sw,w
  6253  15DF  3E1A               	addlw	26
  6254  15E0  076F               	addwf	_Product,w
  6255  15E1  00E2               	movwf	??_Sw_DimmerOffFunc
  6256  15E2  0862               	movf	??_Sw_DimmerOffFunc,w
  6257  15E3  0086               	movwf	6
  6258  15E4  3001               	movlw	1	; select bank2/3
  6259  15E5  0087               	movwf	7
  6260  15E6  0801               	movf	1,w
  6261  15E7  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6262  15E8  086F               	movf	_Product,w
  6263  15E9  3E11               	addlw	17
  6264  15EA  0086               	movwf	6
  6265  15EB  3001               	movlw	1	; select bank2/3
  6266  15EC  0087               	movwf	7
  6267  15ED  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6268  15EE  0081               	movwf	1
  6269                           
  6270                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6271  15EF  086D               	movf	_Sw,w
  6272  15F0  0086               	movwf	6
  6273  15F1  3001               	movlw	1	; select bank2/3
  6274  15F2  0087               	movwf	7
  6275  15F3  3000               	movlw	0
  6276  15F4  1B01               	btfsc	1,6
  6277  15F5  3001               	movlw	1
  6278  15F6  00DD               	movwf	setRF_DimmerLights@on
  6279  15F7  0864               	movf	Sw_DimmerOffFunc@sw,w
  6280  15F8  3193  2390  3195   	fcall	_setRF_DimmerLights
  6281                           
  6282                           ;Switch_B1.c: 274: setTxData(1);
  6283  15FB  3001               	movlw	1
  6284  15FC  3187  271E         	fcall	_setTxData
  6285                           
  6286                           ;Switch_B1.c: 276: }
  6287                           ;Switch_B1.c: 277: } else {
  6288  15FE  0008               	return
  6289  15FF                     l8586:	
  6290                           
  6291                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  6292  15FF  0020               	movlb	0	; select bank0
  6293  1600  01A2               	clrf	setDimmerLights_Trigger@command
  6294  1601  0AA2               	incf	setDimmerLights_Trigger@command,f
  6295  1602  0864               	movf	Sw_DimmerOffFunc@sw,w
  6296  1603  31A7  27B0  3195   	fcall	_setDimmerLights_Trigger
  6297                           
  6298                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  6299  1606  0020               	movlb	0	; select bank0
  6300  1607  01A2               	clrf	setDimmerLights_Switch@command
  6301  1608  0864               	movf	Sw_DimmerOffFunc@sw,w
  6302  1609  31A7  27A0  3195   	fcall	_setDimmerLights_Switch
  6303                           
  6304                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  6305  160C  0020               	movlb	0	; select bank0
  6306  160D  01A3               	clrf	setDelayOff_GO@command
  6307  160E  01A4               	clrf	setDelayOff_GO@value
  6308  160F  0864               	movf	Sw_DimmerOffFunc@sw,w
  6309  1610  3192  2211  3195   	fcall	_setDelayOff_GO
  6310                           
  6311                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  6312  1613  0020               	movlb	0	; select bank0
  6313  1614  086D               	movf	_Sw,w
  6314  1615  0086               	movwf	6
  6315  1616  3001               	movlw	1	; select bank2/3
  6316  1617  0087               	movwf	7
  6317  1618  3000               	movlw	0
  6318  1619  1B01               	btfsc	1,6
  6319  161A  3001               	movlw	1
  6320  161B  00DD               	movwf	setRF_DimmerLights@on
  6321  161C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6322  161D  3193  2390  3195   	fcall	_setRF_DimmerLights
  6323                           
  6324                           ;Switch_B1.c: 283: setTxData(1);
  6325  1620  3001               	movlw	1
  6326  1621  3187  271E         	fcall	_setTxData
  6327  1623  0008               	return
  6328  1624                     __end_of_Sw_DimmerOffFunc:	
  6329                           
  6330                           	psect	text17
  6331  1BA6                     __ptext17:	
  6332 ;; *************** function _Sw_DimmerAdjFunc *****************
  6333 ;; Defined at:
  6334 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;  sw              1    wreg     unsigned char 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  sw              1    5[BANK0 ] unsigned char 
  6339 ;;  Idle            1    4[BANK0 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;		None               void
  6342 ;; Registers used:
  6343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        2 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    6
  6356 ;; This function calls:
  6357 ;;		_setDimmerLights_AdjGo
  6358 ;;		_setDimmerLights_TriggerAdj
  6359 ;;		_setRFSW_Status
  6360 ;; This function is called by:
  6361 ;;		_setSw_Main
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           
  6366                           ;psect for function _Sw_DimmerAdjFunc
  6367  1BA6                     _Sw_DimmerAdjFunc:	
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6371                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6372  1BA6  0020               	movlb	0	; select bank0
  6373  1BA7  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6374                           
  6375                           ;Switch_B1.c: 291: char Idle = 1;
  6376  1BA8  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6377  1BA9  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6378                           
  6379                           ;Switch_B1.c: 310: if (Idle) {
  6380  1BAA  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6381  1BAB  1903               	btfsc	3,2
  6382  1BAC  0008               	return
  6383                           
  6384                           ;Switch_B1.c: 311: if (Sw->Flag) {
  6385  1BAD  086D               	movf	_Sw,w
  6386  1BAE  0086               	movwf	6
  6387  1BAF  3001               	movlw	1	; select bank2/3
  6388  1BB0  0087               	movwf	7
  6389  1BB1  1F81               	btfss	1,7
  6390  1BB2  0008               	return
  6391                           
  6392                           ;Switch_B1.c: 312: Sw->Adj = 1;
  6393  1BB3  0A6D               	incf	_Sw,w
  6394  1BB4  0086               	movwf	6
  6395  1BB5  3001               	movlw	1	; select bank2/3
  6396  1BB6  0087               	movwf	7
  6397  1BB7  1401               	bsf	1,0
  6398                           
  6399                           ;Switch_B1.c: 313: Sw->Status = 1;
  6400  1BB8  086D               	movf	_Sw,w
  6401  1BB9  0086               	movwf	6
  6402  1BBA  3001               	movlw	1	; select bank2/3
  6403  1BBB  0087               	movwf	7
  6404  1BBC  1701               	bsf	1,6
  6405                           
  6406                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  6407  1BBD  01A2               	clrf	setRFSW_Status@command
  6408  1BBE  0AA2               	incf	setRFSW_Status@command,f
  6409  1BBF  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6410  1BC0  31A7  2763  319B   	fcall	_setRFSW_Status
  6411                           
  6412                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  6413  1BC3  0020               	movlb	0	; select bank0
  6414  1BC4  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6415  1BC5  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6416  1BC6  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6417  1BC7  3190  2000  319B   	fcall	_setDimmerLights_TriggerAdj
  6418                           
  6419                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  6420  1BCA  0020               	movlb	0	; select bank0
  6421  1BCB  01A2               	clrf	setDimmerLights_AdjGo@command
  6422  1BCC  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6423  1BCD  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6424  1BCE  3198  206F         	fcall	_setDimmerLights_AdjGo
  6425  1BD0  0020               	movlb	0	; select bank0
  6426  1BD1  0008               	return
  6427  1BD2                     __end_of_Sw_DimmerAdjFunc:	
  6428                           
  6429                           	psect	text18
  6430  1000                     __ptext18:	
  6431 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6432 ;; Defined at:
  6433 ;;		line 450 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  lights          1    wreg     unsigned char 
  6436 ;;  command         1    2[BANK0 ] unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  lights          1    3[BANK0 ] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;		None               void
  6441 ;; Registers used:
  6442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        2 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    5
  6455 ;; This function calls:
  6456 ;;		_DimmerLightsPointSelect
  6457 ;; This function is called by:
  6458 ;;		_Sw_DimmerOffFunc
  6459 ;;		_Sw_DimmerAdjFunc
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _setDimmerLights_TriggerAdj
  6465  1000                     _setDimmerLights_TriggerAdj:	
  6466                           
  6467                           ;incstack = 0
  6468                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6469                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6470  1000  0020               	movlb	0	; select bank0
  6471  1001  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6472                           
  6473                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6474  1002  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6475  1003  31A6  264C         	fcall	_DimmerLightsPointSelect
  6476                           
  6477                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6478  1005  0020               	movlb	0	; select bank0
  6479  1006  086C               	movf	_DimmerLights,w
  6480  1007  3E09               	addlw	9
  6481  1008  0086               	movwf	6
  6482  1009  3001               	movlw	1	; select bank2/3
  6483  100A  0087               	movwf	7
  6484  100B  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6485  100C  1181               	bcf	1,3
  6486  100D  1D03               	skipz
  6487  100E  1581               	bsf	1,3
  6488  100F  0008               	return
  6489  1010                     __end_of_setDimmerLights_TriggerAdj:	
  6490                           
  6491                           	psect	text19
  6492  186F                     __ptext19:	
  6493 ;; *************** function _setDimmerLights_AdjGo *****************
  6494 ;; Defined at:
  6495 ;;		line 440 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  6496 ;; Parameters:    Size  Location     Type
  6497 ;;  lights          1    wreg     unsigned char 
  6498 ;;  command         1    2[BANK0 ] unsigned char 
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;  lights          1    3[BANK0 ] unsigned char 
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : 0/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6510 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6513 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;Total ram usage:        2 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:    5
  6517 ;; This function calls:
  6518 ;;		_DimmerLightsPointSelect
  6519 ;; This function is called by:
  6520 ;;		_Sw_DimmerOffFunc
  6521 ;;		_Sw_DimmerAdjFunc
  6522 ;; This function uses a non-reentrant model
  6523 ;;
  6524                           
  6525                           
  6526                           ;psect for function _setDimmerLights_AdjGo
  6527  186F                     _setDimmerLights_AdjGo:	
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6531                           ;setDimmerLights_AdjGo@lights stored from wreg
  6532  186F  0020               	movlb	0	; select bank0
  6533  1870  00A3               	movwf	setDimmerLights_AdjGo@lights
  6534                           
  6535                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  6536  1871  0823               	movf	setDimmerLights_AdjGo@lights,w
  6537  1872  31A6  264C         	fcall	_DimmerLightsPointSelect
  6538                           
  6539                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  6540  1874  0020               	movlb	0	; select bank0
  6541  1875  086C               	movf	_DimmerLights,w
  6542  1876  3E09               	addlw	9
  6543  1877  0086               	movwf	6
  6544  1878  3001               	movlw	1	; select bank2/3
  6545  1879  0087               	movwf	7
  6546  187A  0822               	movf	setDimmerLights_AdjGo@command,w
  6547  187B  1101               	bcf	1,2
  6548  187C  1D03               	skipz
  6549  187D  1501               	bsf	1,2
  6550  187E  0008               	return
  6551  187F                     __end_of_setDimmerLights_AdjGo:	
  6552                           
  6553                           	psect	text20
  6554  1866                     __ptext20:	
  6555 ;; *************** function _Switch_Initialization *****************
  6556 ;; Defined at:
  6557 ;;		line 37 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;		None
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;		None               void
  6564 ;; Registers used:
  6565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;Total ram usage:        0 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    7
  6578 ;; This function calls:
  6579 ;;		_TouchPower
  6580 ;;		_setSw_Initialization
  6581 ;; This function is called by:
  6582 ;;		_main
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _Switch_Initialization
  6588  1866                     _Switch_Initialization:	
  6589                           
  6590                           ;Switch_B1.c: 38: TouchPower();
  6591                           
  6592                           ;incstack = 0
  6593                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6594  1866  31A5  25D8  3198   	fcall	_TouchPower
  6595                           
  6596                           ;Switch_B1.c: 40: WPUB1 = 0;
  6597  1869  0024               	movlb	4	; select bank4
  6598  186A  108D               	bcf	13,1	;volatile
  6599                           
  6600                           ;Switch_B1.c: 49: setSw_Initialization(1);
  6601  186B  3001               	movlw	1
  6602  186C  31A7  27F0         	fcall	_setSw_Initialization
  6603  186E  0008               	return
  6604  186F                     __end_of_Switch_Initialization:	
  6605                           
  6606                           	psect	text21
  6607  27F0                     __ptext21:	
  6608 ;; *************** function _setSw_Initialization *****************
  6609 ;; Defined at:
  6610 ;;		line 77 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  sw              1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  sw              1    4[BANK0 ] unsigned char 
  6615 ;; Return value:  Size  Location     Type
  6616 ;;		None               void
  6617 ;; Registers used:
  6618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6619 ;; Tracked objects:
  6620 ;;		On entry : 0/0
  6621 ;;		On exit  : 0/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;Total ram usage:        1 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:    6
  6631 ;; This function calls:
  6632 ;;		_setLED
  6633 ;; This function is called by:
  6634 ;;		_Switch_Initialization
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function _setSw_Initialization
  6640  27F0                     _setSw_Initialization:	
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6644                           ;setSw_Initialization@sw stored from wreg
  6645  27F0  0020               	movlb	0	; select bank0
  6646  27F1  00A4               	movwf	setSw_Initialization@sw
  6647                           
  6648                           ;Switch_B1.c: 78: setLED(sw, 1);
  6649  27F2  01A2               	clrf	setLED@command
  6650  27F3  0AA2               	incf	setLED@command,f
  6651  27F4  0824               	movf	setSw_Initialization@sw,w
  6652  27F5  3192  226D  31A7   	fcall	_setLED
  6653                           
  6654                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  6655  27F8  0020               	movlb	0	; select bank0
  6656  27F9  01A2               	clrf	setLED@command
  6657  27FA  0AA2               	incf	setLED@command,f
  6658  27FB  0824               	movf	setSw_Initialization@sw,w
  6659  27FC  3E01               	addlw	1
  6660  27FD  3192  226D         	fcall	_setLED
  6661  27FF  0008               	return
  6662  2800                     __end_of_setSw_Initialization:	
  6663                           
  6664                           	psect	text22
  6665  25D8                     __ptext22:	
  6666 ;; *************** function _TouchPower *****************
  6667 ;; Defined at:
  6668 ;;		line 10 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;		None               void
  6675 ;; Registers used:
  6676 ;;		None
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    4
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_Switch_Initialization
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           
  6697                           ;psect for function _TouchPower
  6698  25D8                     _TouchPower:	
  6699  25D8                     l2537:	
  6700                           ;Switch_B1.c: 11: while (!RC5)
  6701                           
  6702                           ;incstack = 0
  6703                           ; Regs used in _TouchPower: []
  6704                           
  6705  25D8  0020               	movlb	0	; select bank0
  6706  25D9  1A8E               	btfsc	14,5	;volatile
  6707  25DA  0008               	return
  6708                           
  6709                           ;Switch_B1.c: 12: RC5 = 1;
  6710  25DB  168E               	bsf	14,5	;volatile
  6711  25DC  2DD8               	goto	l2537
  6712  25DD                     __end_of_TouchPower:	
  6713                           
  6714                           	psect	text23
  6715  25D0                     __ptext23:	
  6716 ;; *************** function _RF_Main *****************
  6717 ;; Defined at:
  6718 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6719 ;; Parameters:    Size  Location     Type
  6720 ;;		None
  6721 ;; Auto vars:     Size  Location     Type
  6722 ;;		None
  6723 ;; Return value:  Size  Location     Type
  6724 ;;		None               void
  6725 ;; Registers used:
  6726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6727 ;; Tracked objects:
  6728 ;;		On entry : 0/0
  6729 ;;		On exit  : 0/0
  6730 ;;		Unchanged: 0/0
  6731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;Total ram usage:        0 bytes
  6737 ;; Hardware stack levels used:    1
  6738 ;; Hardware stack levels required when called:   13
  6739 ;; This function calls:
  6740 ;;		_setRF_Main
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           
  6747                           ;psect for function _RF_Main
  6748  25D0                     _RF_Main:	
  6749                           
  6750                           ;RF_Control_B1.c: 25: setRF_Main(1);
  6751                           
  6752                           ;incstack = 0
  6753                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6754  25D0  3001               	movlw	1
  6755  25D1  3188  20BF         	fcall	_setRF_Main
  6756  25D3  0008               	return
  6757  25D4                     __end_of_RF_Main:	
  6758                           
  6759                           	psect	text24
  6760  08BF                     __ptext24:	
  6761 ;; *************** function _setRF_Main *****************
  6762 ;; Defined at:
  6763 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;  rf              1    wreg     unsigned char 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  rf              1   74[BANK0 ] unsigned char 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;		None               void
  6770 ;; Registers used:
  6771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;Total ram usage:        3 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:   12
  6784 ;; This function calls:
  6785 ;;		_CC2500_RxData
  6786 ;;		_CC2500_TxData
  6787 ;;		_CC2500_WriteCommand
  6788 ;;		_RF_RxDisable
  6789 ;;		_RfPointSelect
  6790 ;;		_getRxData
  6791 ;;		_setINT_GO
  6792 ;; This function is called by:
  6793 ;;		_RF_Main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _setRF_Main
  6799  08BF                     _setRF_Main:	
  6800                           
  6801                           ;incstack = 0
  6802                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6803                           ;setRF_Main@rf stored from wreg
  6804  08BF  0020               	movlb	0	; select bank0
  6805  08C0  00EA               	movwf	setRF_Main@rf
  6806                           
  6807                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  6808  08C1  086A               	movf	setRF_Main@rf,w
  6809  08C2  31A6  2662  3188   	fcall	_RfPointSelect
  6810                           
  6811                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  6812  08C5  087A               	movf	_RF,w
  6813  08C6  0086               	movwf	6
  6814  08C7  0187               	clrf	7
  6815  08C8  1C01               	btfss	1,0
  6816  08C9  0008               	return
  6817                           
  6818                           ;RF_Control_B1.c: 70: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  6819  08CA  0020               	movlb	0	; select bank0
  6820  08CB  01EB               	clrf	_setRF_Main$3951
  6821  08CC  1F0C               	btfss	12,6	;volatile
  6822  08CD  1A0C               	btfsc	12,4	;volatile
  6823  08CE  28D3               	goto	l8918
  6824  08CF  180C               	btfsc	12,0	;volatile
  6825  08D0  28D3               	goto	l8918
  6826  08D1  1C8D               	btfss	13,1	;volatile
  6827  08D2  28DA               	goto	l8922
  6828  08D3                     l8918:	
  6829  08D3  087A               	movf	_RF,w
  6830  08D4  0086               	movwf	6
  6831  08D5  0187               	clrf	7
  6832  08D6  1B01               	btfsc	1,6
  6833  08D7  28DA               	goto	l8922
  6834  08D8  01EB               	clrf	_setRF_Main$3951
  6835  08D9  0AEB               	incf	_setRF_Main$3951,f
  6836  08DA                     l8922:	
  6837  08DA  087A               	movf	_RF,w
  6838  08DB  0086               	movwf	6
  6839  08DC  0187               	clrf	7
  6840  08DD  086B               	movf	_setRF_Main$3951,w
  6841  08DE  1381               	bcf	1,7
  6842  08DF  1D03               	skipz
  6843  08E0  1781               	bsf	1,7
  6844                           
  6845                           ;RF_Control_B1.c: 74: if (!RF->Key) {
  6846  08E1  087A               	movf	_RF,w
  6847  08E2  0086               	movwf	6
  6848  08E3  0187               	clrf	7
  6849  08E4  1B81               	btfsc	1,7
  6850  08E5  2912               	goto	l8944
  6851                           
  6852                           ;RF_Control_B1.c: 75: if (RF->ReceiveGO)
  6853  08E6  087A               	movf	_RF,w
  6854  08E7  0086               	movwf	6
  6855  08E8  0187               	clrf	7
  6856  08E9  1C81               	btfss	1,1
  6857  08EA  28F7               	goto	l8932
  6858                           
  6859                           ;RF_Control_B1.c: 76: {
  6860                           ;RF_Control_B1.c: 77: RF->ReceiveGO = 0;
  6861  08EB  087A               	movf	_RF,w
  6862  08EC  0086               	movwf	6
  6863  08ED  0187               	clrf	7
  6864  08EE  1081               	bcf	1,1
  6865                           
  6866                           ;RF_Control_B1.c: 78: CC2500_RxData();
  6867  08EF  3193  232C  3188   	fcall	_CC2500_RxData
  6868                           
  6869                           ;RF_Control_B1.c: 85: getRxData(1);
  6870  08F2  3001               	movlw	1
  6871  08F3  3190  205A  3188   	fcall	_getRxData
  6872                           
  6873                           ;RF_Control_B1.c: 88: } else {
  6874  08F6  2916               	goto	l8946
  6875  08F7                     l8932:	
  6876                           
  6877                           ;RF_Control_B1.c: 89: if (!RF->TransceiveGO) {
  6878  08F7  087A               	movf	_RF,w
  6879  08F8  0086               	movwf	6
  6880  08F9  0187               	clrf	7
  6881  08FA  1901               	btfsc	1,2
  6882  08FB  2916               	goto	l8946
  6883                           
  6884                           ;RF_Control_B1.c: 91: if (!RF->RxStatus)
  6885  08FC  087A               	movf	_RF,w
  6886  08FD  0086               	movwf	6
  6887  08FE  0187               	clrf	7
  6888  08FF  1981               	btfsc	1,3
  6889  0900  2916               	goto	l8946
  6890                           
  6891                           ;RF_Control_B1.c: 92: {
  6892                           ;RF_Control_B1.c: 93: RF->RxStatus = 1;
  6893  0901  087A               	movf	_RF,w
  6894  0902  0086               	movwf	6
  6895  0903  0187               	clrf	7
  6896  0904  1581               	bsf	1,3
  6897                           
  6898                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6899  0905  3036               	movlw	54
  6900  0906  31A7  2790  3188   	fcall	_CC2500_WriteCommand
  6901                           
  6902                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x34);
  6903  0909  3034               	movlw	52
  6904  090A  31A7  2790  3188   	fcall	_CC2500_WriteCommand
  6905                           
  6906                           ;RF_Control_B1.c: 96: setINT_GO(1);
  6907  090D  3001               	movlw	1
  6908  090E  31A6  2623  3188   	fcall	_setINT_GO
  6909                           
  6910                           ;RF_Control_B1.c: 97: }
  6911                           ;RF_Control_B1.c: 99: }
  6912                           ;RF_Control_B1.c: 100: }
  6913                           ;RF_Control_B1.c: 101: } else {
  6914  0911  2916               	goto	l8946
  6915  0912                     l8944:	
  6916                           
  6917                           ;RF_Control_B1.c: 102: RF_RxDisable(1);
  6918  0912  3001               	movlw	1
  6919  0913  319B  2300  3188   	fcall	_RF_RxDisable
  6920  0916                     l8946:	
  6921                           
  6922                           ;RF_Control_B1.c: 103: }
  6923                           ;RF_Control_B1.c: 104: if (RF->TransceiveGO)
  6924  0916  087A               	movf	_RF,w
  6925  0917  0086               	movwf	6
  6926  0918  0187               	clrf	7
  6927  0919  1D01               	btfss	1,2
  6928  091A  0008               	return
  6929                           
  6930                           ;RF_Control_B1.c: 105: {
  6931                           ;RF_Control_B1.c: 106: RF_RxDisable(1);
  6932  091B  3001               	movlw	1
  6933  091C  319B  2300  3188   	fcall	_RF_RxDisable
  6934                           
  6935                           ;RF_Control_B1.c: 107: if (!RF->Debounce) {
  6936  091F  087A               	movf	_RF,w
  6937  0920  0086               	movwf	6
  6938  0921  0187               	clrf	7
  6939  0922  1A81               	btfsc	1,5
  6940  0923  293C               	goto	l8960
  6941                           
  6942                           ;RF_Control_B1.c: 108: RF->DebounceTime++;
  6943  0924  3001               	movlw	1
  6944  0925  0020               	movlb	0	; select bank0
  6945  0926  00E9               	movwf	??_setRF_Main
  6946  0927  0A7A               	incf	_RF,w
  6947  0928  0086               	movwf	6
  6948  0929  0187               	clrf	7
  6949  092A  0869               	movf	??_setRF_Main,w
  6950  092B  0781               	addwf	1,f
  6951                           
  6952                           ;RF_Control_B1.c: 109: if (RF->DebounceTime == 25)
  6953  092C  0A7A               	incf	_RF,w
  6954  092D  0086               	movwf	6
  6955  092E  0187               	clrf	7
  6956  092F  0801               	movf	1,w
  6957  0930  3A19               	xorlw	25
  6958  0931  1D03               	skipz
  6959  0932  0008               	return
  6960                           
  6961                           ;RF_Control_B1.c: 110: {
  6962                           ;RF_Control_B1.c: 111: RF->DebounceTime = 0;
  6963  0933  0A7A               	incf	_RF,w
  6964  0934  0086               	movwf	6
  6965  0935  0187               	clrf	7
  6966  0936  0181               	clrf	1
  6967                           
  6968                           ;RF_Control_B1.c: 112: RF->Debounce = 1;
  6969  0937  087A               	movf	_RF,w
  6970  0938  0086               	movwf	6
  6971  0939  0187               	clrf	7
  6972  093A  1681               	bsf	1,5
  6973                           
  6974                           ;RF_Control_B1.c: 113: }
  6975                           ;RF_Control_B1.c: 114: } else {
  6976  093B  0008               	return
  6977  093C                     l8960:	
  6978                           
  6979                           ;RF_Control_B1.c: 115: RF->Debounce = 0;
  6980  093C  087A               	movf	_RF,w
  6981  093D  0086               	movwf	6
  6982  093E  0187               	clrf	7
  6983  093F  1281               	bcf	1,5
  6984                           
  6985                           ;RF_Control_B1.c: 116: RF->TransceiveGO = 0;
  6986  0940  087A               	movf	_RF,w
  6987  0941  0086               	movwf	6
  6988  0942  0187               	clrf	7
  6989  0943  1101               	bcf	1,2
  6990                           
  6991                           ;RF_Control_B1.c: 117: CC2500_TxData();
  6992  0944  319E  269F         	fcall	_CC2500_TxData
  6993  0946  0008               	return
  6994  0947                     __end_of_setRF_Main:	
  6995                           
  6996                           	psect	text25
  6997  105A                     __ptext25:	
  6998 ;; *************** function _getRxData *****************
  6999 ;; Defined at:
  7000 ;;		line 201 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  rf              1    wreg     unsigned char 
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;  rf              1   72[BANK0 ] unsigned char 
  7005 ;;  i               1    0        unsigned char 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;		None               void
  7008 ;; Registers used:
  7009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;Total ram usage:        1 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; Hardware stack levels required when called:   11
  7022 ;; This function calls:
  7023 ;;		_RfPointSelect
  7024 ;;		_setControl_Lights_Table
  7025 ;;		_setLog_Code
  7026 ;; This function is called by:
  7027 ;;		_setRF_Main
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           
  7032                           ;psect for function _getRxData
  7033  105A                     _getRxData:	
  7034                           
  7035                           ;incstack = 0
  7036                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7037                           ;getRxData@rf stored from wreg
  7038  105A  0020               	movlb	0	; select bank0
  7039  105B  00E8               	movwf	getRxData@rf
  7040                           
  7041                           ;RF_Control_B1.c: 202: unsigned char i;
  7042                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  7043  105C  0868               	movf	getRxData@rf,w
  7044  105D  31A6  2662  3190   	fcall	_RfPointSelect
  7045                           
  7046                           ;RF_Control_B1.c: 204: if (RF->Learn) {
  7047  1060  087A               	movf	_RF,w
  7048  1061  0086               	movwf	6
  7049  1062  0187               	clrf	7
  7050  1063  1F01               	btfss	1,6
  7051  1064  2871               	goto	l8486
  7052                           
  7053                           ;RF_Control_B1.c: 205: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7054  1065  0021               	movlb	1	; select bank1
  7055  1066  08A0               	movf	_RF_Data^(0+128),f
  7056  1067  1D03               	skipz
  7057  1068  0008               	return
  7058  1069  0821               	movf	(_RF_Data^(0+128)+1),w
  7059  106A  3A64               	xorlw	100
  7060  106B  1D03               	skipz
  7061  106C  0008               	return
  7062                           
  7063                           ;RF_Control_B1.c: 206: {
  7064                           ;RF_Control_B1.c: 207: setLog_Code(1);
  7065  106D  3001               	movlw	1
  7066  106E  319F  276E         	fcall	_setLog_Code
  7067                           
  7068                           ;RF_Control_B1.c: 208: }
  7069                           ;RF_Control_B1.c: 209: } else {
  7070  1070  0008               	return
  7071  1071                     l8486:	
  7072                           
  7073                           ;RF_Control_B1.c: 210: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7074  1071  0021               	movlb	1	; select bank1
  7075  1072  08A0               	movf	_RF_Data^(0+128),f
  7076  1073  1D03               	skipz
  7077  1074  0008               	return
  7078  1075  0821               	movf	(_RF_Data^(0+128)+1),w
  7079  1076  3A02               	xorlw	2
  7080  1077  1D03               	skipz
  7081  1078  0008               	return
  7082                           
  7083                           ;RF_Control_B1.c: 211: {
  7084                           ;RF_Control_B1.c: 212: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7085  1079  082C               	movf	(_RF_Data^(0+128)+12),w
  7086  107A  3AFF               	xorlw	255
  7087  107B  1D03               	skipz
  7088  107C  2887               	goto	l8498
  7089  107D  082D               	movf	(_RF_Data^(0+128)+13),w
  7090  107E  3AFF               	xorlw	255
  7091  107F  1D03               	skipz
  7092  1080  2887               	goto	l8498
  7093  1081  082E               	movf	(_RF_Data^(0+128)+14),w
  7094  1082  3AFF               	xorlw	255
  7095  1083  1D03               	skipz
  7096  1084  2887               	goto	l8498
  7097                           
  7098                           ;RF_Control_B1.c: 213: __nop();
  7099  1085  0000               	nop
  7100                           
  7101                           ;RF_Control_B1.c: 214: } else {
  7102  1086  0008               	return
  7103  1087                     l8498:	
  7104                           
  7105                           ;RF_Control_B1.c: 215: if (RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->D
      +                          ata[13] && RF_Data[14] == Product->Data[14]) {
  7106  1087  0020               	movlb	0	; select bank0
  7107  1088  086F               	movf	_Product,w
  7108  1089  3E0C               	addlw	12
  7109  108A  0086               	movwf	6
  7110  108B  3001               	movlw	1	; select bank2/3
  7111  108C  0087               	movwf	7
  7112  108D  0021               	movlb	1	; select bank1
  7113  108E  082C               	movf	(_RF_Data^(0+128)+12),w
  7114  108F  0601               	xorwf	1,w
  7115  1090  1D03               	skipz
  7116  1091  0008               	return
  7117  1092  0020               	movlb	0	; select bank0
  7118  1093  086F               	movf	_Product,w
  7119  1094  3E0D               	addlw	13
  7120  1095  0086               	movwf	6
  7121  1096  3001               	movlw	1	; select bank2/3
  7122  1097  0087               	movwf	7
  7123  1098  0021               	movlb	1	; select bank1
  7124  1099  082D               	movf	(_RF_Data^(0+128)+13),w
  7125  109A  0601               	xorwf	1,w
  7126  109B  1D03               	skipz
  7127  109C  0008               	return
  7128  109D  0020               	movlb	0	; select bank0
  7129  109E  086F               	movf	_Product,w
  7130  109F  3E0E               	addlw	14
  7131  10A0  0086               	movwf	6
  7132  10A1  3001               	movlw	1	; select bank2/3
  7133  10A2  0087               	movwf	7
  7134  10A3  0021               	movlb	1	; select bank1
  7135  10A4  082E               	movf	(_RF_Data^(0+128)+14),w
  7136  10A5  0601               	xorwf	1,w
  7137  10A6  1D03               	skipz
  7138  10A7  0008               	return
  7139                           
  7140                           ;RF_Control_B1.c: 216: setControl_Lights_Table(1);
  7141  10A8  3001               	movlw	1
  7142  10A9  3194  24D5         	fcall	_setControl_Lights_Table
  7143                           
  7144                           ;RF_Control_B1.c: 223: {
  7145                           ;RF_Control_B1.c: 224: ;
  7146                           
  7147                           ;RF_Control_B1.c: 220: {
  7148                           ;RF_Control_B1.c: 221: ;
  7149                           ;RF_Control_B1.c: 222: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7150                           
  7151                           ;RF_Control_B1.c: 217: }
  7152                           ;RF_Control_B1.c: 218: }
  7153                           ;RF_Control_B1.c: 219: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7154  10AB  0008               	return
  7155  10AC                     __end_of_getRxData:	
  7156                           
  7157                           	psect	text26
  7158  1F6E                     __ptext26:	
  7159 ;; *************** function _setLog_Code *****************
  7160 ;; Defined at:
  7161 ;;		line 234 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  rf              1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  rf              1   11[BANK0 ] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;		None               void
  7168 ;; Registers used:
  7169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;Total ram usage:        2 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    6
  7182 ;; This function calls:
  7183 ;;		_RfPointSelect
  7184 ;;		_setBuz
  7185 ;; This function is called by:
  7186 ;;		_getRxData
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           
  7191                           ;psect for function _setLog_Code
  7192  1F6E                     _setLog_Code:	
  7193                           
  7194                           ;incstack = 0
  7195                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7196                           ;setLog_Code@rf stored from wreg
  7197  1F6E  0020               	movlb	0	; select bank0
  7198  1F6F  00AB               	movwf	setLog_Code@rf
  7199                           
  7200                           ;RF_Control_B1.c: 235: RfPointSelect(rf);
  7201  1F70  082B               	movf	setLog_Code@rf,w
  7202  1F71  31A6  2662  319F   	fcall	_RfPointSelect
  7203                           
  7204                           ;RF_Control_B1.c: 236: Product->Data[12]=RF_Data[12];
  7205  1F74  0021               	movlb	1	; select bank1
  7206  1F75  082C               	movf	(_RF_Data^(0+128)+12),w
  7207  1F76  0020               	movlb	0	; select bank0
  7208  1F77  00AA               	movwf	??_setLog_Code
  7209  1F78  086F               	movf	_Product,w
  7210  1F79  3E0C               	addlw	12
  7211  1F7A  0086               	movwf	6
  7212  1F7B  3001               	movlw	1	; select bank2/3
  7213  1F7C  0087               	movwf	7
  7214  1F7D  082A               	movf	??_setLog_Code,w
  7215  1F7E  0081               	movwf	1
  7216                           
  7217                           ;RF_Control_B1.c: 237: Product->Data[13]=RF_Data[13];
  7218  1F7F  0021               	movlb	1	; select bank1
  7219  1F80  082D               	movf	(_RF_Data^(0+128)+13),w
  7220  1F81  0020               	movlb	0	; select bank0
  7221  1F82  00AA               	movwf	??_setLog_Code
  7222  1F83  086F               	movf	_Product,w
  7223  1F84  3E0D               	addlw	13
  7224  1F85  0086               	movwf	6
  7225  1F86  3001               	movlw	1	; select bank2/3
  7226  1F87  0087               	movwf	7
  7227  1F88  082A               	movf	??_setLog_Code,w
  7228  1F89  0081               	movwf	1
  7229                           
  7230                           ;RF_Control_B1.c: 238: Product->Data[14]=RF_Data[14];
  7231  1F8A  0021               	movlb	1	; select bank1
  7232  1F8B  082E               	movf	(_RF_Data^(0+128)+14),w
  7233  1F8C  0020               	movlb	0	; select bank0
  7234  1F8D  00AA               	movwf	??_setLog_Code
  7235  1F8E  086F               	movf	_Product,w
  7236  1F8F  3E0E               	addlw	14
  7237  1F90  0086               	movwf	6
  7238  1F91  3001               	movlw	1	; select bank2/3
  7239  1F92  0087               	movwf	7
  7240  1F93  082A               	movf	??_setLog_Code,w
  7241  1F94  0081               	movwf	1
  7242                           
  7243                           ;RF_Control_B1.c: 239: setBuz(1, 100);
  7244  1F95  3064               	movlw	100
  7245  1F96  00A6               	movwf	setBuz@time
  7246  1F97  3000               	movlw	0
  7247  1F98  00A7               	movwf	setBuz@time+1
  7248  1F99  3001               	movlw	1
  7249  1F9A  3196  2696  319F   	fcall	_setBuz
  7250                           
  7251                           ;RF_Control_B1.c: 240: RF->Learn = 0;
  7252  1F9D  087A               	movf	_RF,w
  7253  1F9E  0086               	movwf	6
  7254  1F9F  0187               	clrf	7
  7255  1FA0  1301               	bcf	1,6
  7256                           
  7257                           ;RF_Control_B1.c: 241: if (TMain->First) {
  7258  1FA1  087D               	movf	_TMain,w
  7259  1FA2  3E03               	addlw	3
  7260  1FA3  0086               	movwf	6
  7261  1FA4  3001               	movlw	1	; select bank2/3
  7262  1FA5  0087               	movwf	7
  7263  1FA6  1C81               	btfss	1,1
  7264  1FA7  2FAF               	goto	l2248
  7265                           
  7266                           ;RF_Control_B1.c: 242: Memory->LoopSave=1;
  7267  1FA8  0021               	movlb	1	; select bank1
  7268  1FA9  0867               	movf	_Memory^(0+128),w
  7269  1FAA  3E22               	addlw	34
  7270  1FAB  0086               	movwf	6
  7271  1FAC  3001               	movlw	1	; select bank2/3
  7272  1FAD  0087               	movwf	7
  7273  1FAE  1501               	bsf	1,2
  7274  1FAF                     l2248:	
  7275                           
  7276                           ;RF_Control_B1.c: 243: }
  7277                           ;RF_Control_B1.c: 244: Memory->Modify=1;
  7278  1FAF  0021               	movlb	1	; select bank1
  7279  1FB0  0867               	movf	_Memory^(0+128),w
  7280  1FB1  3E22               	addlw	34
  7281  1FB2  0086               	movwf	6
  7282  1FB3  3001               	movlw	1	; select bank2/3
  7283  1FB4  0087               	movwf	7
  7284  1FB5  1401               	bsf	1,0
  7285  1FB6  0008               	return
  7286  1FB7                     __end_of_setLog_Code:	
  7287                           
  7288                           	psect	text27
  7289  14D5                     __ptext27:	
  7290 ;; *************** function _setControl_Lights_Table *****************
  7291 ;; Defined at:
  7292 ;;		line 248 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;  rf              1    wreg     unsigned char 
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  rf              1   71[BANK0 ] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;		None               void
  7299 ;; Registers used:
  7300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;Total ram usage:        1 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:   10
  7313 ;; This function calls:
  7314 ;;		_RfPointSelect
  7315 ;;		_setBuz
  7316 ;;		_setDimmerLights
  7317 ;;		_setRFSW_AdjControl
  7318 ;;		_setRFSW_Control
  7319 ;;		_setRFSW_Status
  7320 ;;		_setSw_Status
  7321 ;;		_setTxData
  7322 ;; This function is called by:
  7323 ;;		_getRxData
  7324 ;; This function uses a non-reentrant model
  7325 ;;
  7326                           
  7327                           
  7328                           ;psect for function _setControl_Lights_Table
  7329  14D5                     _setControl_Lights_Table:	
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7333                           ;setControl_Lights_Table@rf stored from wreg
  7334  14D5  0020               	movlb	0	; select bank0
  7335  14D6  00E7               	movwf	setControl_Lights_Table@rf
  7336                           
  7337                           ;RF_Control_B1.c: 249: RfPointSelect(rf);
  7338  14D7  0867               	movf	setControl_Lights_Table@rf,w
  7339  14D8  31A6  2662  3194   	fcall	_RfPointSelect
  7340                           
  7341                           ;RF_Control_B1.c: 250: if (RF_Data[15] == 0x00) {
  7342  14DB  0021               	movlb	1	; select bank1
  7343  14DC  08AF               	movf	(_RF_Data^(0+128)+15),f
  7344  14DD  1D03               	skipz
  7345  14DE  2D16               	goto	l8318
  7346                           
  7347                           ;RF_Control_B1.c: 252: setDimmerLights(1, 0);
  7348  14DF  0020               	movlb	0	; select bank0
  7349  14E0  01A4               	clrf	setDimmerLights@status
  7350  14E1  3001               	movlw	1
  7351  14E2  3189  21D7  3194   	fcall	_setDimmerLights
  7352                           
  7353                           ;RF_Control_B1.c: 253: setRFSW_Status(1, 0);
  7354  14E5  0020               	movlb	0	; select bank0
  7355  14E6  01A2               	clrf	setRFSW_Status@command
  7356  14E7  3001               	movlw	1
  7357  14E8  31A7  2763  3194   	fcall	_setRFSW_Status
  7358                           
  7359                           ;RF_Control_B1.c: 254: setSw_Status(1, 0);
  7360  14EB  0020               	movlb	0	; select bank0
  7361  14EC  01A2               	clrf	setSw_Status@command
  7362  14ED  3001               	movlw	1
  7363  14EE  31A7  2772  3194   	fcall	_setSw_Status
  7364                           
  7365                           ;RF_Control_B1.c: 267: Product->Data[9]=0;
  7366  14F1  0020               	movlb	0	; select bank0
  7367  14F2  086F               	movf	_Product,w
  7368  14F3  3E09               	addlw	9
  7369  14F4  0086               	movwf	6
  7370  14F5  3001               	movlw	1	; select bank2/3
  7371  14F6  0087               	movwf	7
  7372  14F7  0181               	clrf	1
  7373                           
  7374                           ;RF_Control_B1.c: 268: Product->Data[11]=0;
  7375  14F8  086F               	movf	_Product,w
  7376  14F9  3E0B               	addlw	11
  7377  14FA  0086               	movwf	6
  7378  14FB  3001               	movlw	1	; select bank2/3
  7379  14FC  0087               	movwf	7
  7380  14FD  0181               	clrf	1
  7381                           
  7382                           ;RF_Control_B1.c: 269: Product->Data[15]=0;
  7383  14FE  086F               	movf	_Product,w
  7384  14FF  3E0F               	addlw	15
  7385  1500  0086               	movwf	6
  7386  1501  3001               	movlw	1	; select bank2/3
  7387  1502  0087               	movwf	7
  7388  1503  0181               	clrf	1
  7389                           
  7390                           ;RF_Control_B1.c: 270: Product->Data[17]=0;
  7391  1504  086F               	movf	_Product,w
  7392  1505  3E11               	addlw	17
  7393  1506  0086               	movwf	6
  7394  1507  3001               	movlw	1	; select bank2/3
  7395  1508  0087               	movwf	7
  7396  1509  0181               	clrf	1
  7397                           
  7398                           ;RF_Control_B1.c: 271: setBuz(1, 100);
  7399  150A  3064               	movlw	100
  7400  150B  00A6               	movwf	setBuz@time
  7401  150C  3000               	movlw	0
  7402  150D  00A7               	movwf	setBuz@time+1
  7403  150E  3001               	movlw	1
  7404  150F  3196  2696  3194   	fcall	_setBuz
  7405                           
  7406                           ;RF_Control_B1.c: 272: setTxData(1);
  7407  1512  3001               	movlw	1
  7408  1513  3187  271E         	fcall	_setTxData
  7409                           
  7410                           ;RF_Control_B1.c: 273: } else if (RF_Data[15] == 0x20) {
  7411  1515  0008               	return
  7412  1516                     l8318:	
  7413  1516  0021               	movlb	1	; select bank1
  7414  1517  082F               	movf	(_RF_Data^(0+128)+15),w
  7415  1518  3A20               	xorlw	32
  7416  1519  1D03               	skipz
  7417  151A  2D32               	goto	l8324
  7418                           
  7419                           ;RF_Control_B1.c: 274: Product->Data[9]=0;
  7420  151B  0020               	movlb	0	; select bank0
  7421  151C  086F               	movf	_Product,w
  7422  151D  3E09               	addlw	9
  7423  151E  0086               	movwf	6
  7424  151F  3001               	movlw	1	; select bank2/3
  7425  1520  0087               	movwf	7
  7426  1521  0181               	clrf	1
  7427                           
  7428                           ;RF_Control_B1.c: 275: Product->Data[11]=0;
  7429  1522  086F               	movf	_Product,w
  7430  1523  3E0B               	addlw	11
  7431  1524  0086               	movwf	6
  7432  1525  3001               	movlw	1	; select bank2/3
  7433  1526  0087               	movwf	7
  7434  1527  0181               	clrf	1
  7435                           
  7436                           ;RF_Control_B1.c: 276: Product->Data[17]=0;
  7437  1528  086F               	movf	_Product,w
  7438  1529  3E11               	addlw	17
  7439  152A  0086               	movwf	6
  7440  152B  3001               	movlw	1	; select bank2/3
  7441  152C  0087               	movwf	7
  7442  152D  0181               	clrf	1
  7443                           
  7444                           ;RF_Control_B1.c: 277: setTxData(1);
  7445  152E  3001               	movlw	1
  7446  152F  3187  271E         	fcall	_setTxData
  7447                           
  7448                           ;RF_Control_B1.c: 278: }
  7449  1531  0008               	return
  7450  1532                     l8324:	
  7451                           
  7452                           ;RF_Control_B1.c: 280: else if (RF_Data[15] == 0x01) {
  7453  1532  0021               	movlb	1	; select bank1
  7454  1533  082F               	movf	(_RF_Data^(0+128)+15),w
  7455  1534  3A01               	xorlw	1
  7456  1535  1D03               	skipz
  7457  1536  2D3B               	goto	l8328
  7458                           
  7459                           ;RF_Control_B1.c: 281: setRFSW_Control(1);
  7460  1537  3001               	movlw	1
  7461  1538  3189  2147         	fcall	_setRFSW_Control
  7462                           
  7463                           ;RF_Control_B1.c: 282: }
  7464  153A  0008               	return
  7465  153B                     l8328:	
  7466                           
  7467                           ;RF_Control_B1.c: 284: else if (RF_Data[15] == 0x11) {
  7468  153B  0021               	movlb	1	; select bank1
  7469  153C  082F               	movf	(_RF_Data^(0+128)+15),w
  7470  153D  3A11               	xorlw	17
  7471  153E  1D03               	skipz
  7472  153F  0008               	return
  7473                           
  7474                           ;RF_Control_B1.c: 285: setRFSW_AdjControl(1);
  7475  1540  3001               	movlw	1
  7476  1541  319D  2597         	fcall	_setRFSW_AdjControl
  7477  1543  0008               	return
  7478  1544                     __end_of_setControl_Lights_Table:	
  7479                           
  7480                           	psect	text28
  7481  0947                     __ptext28:	
  7482 ;; *************** function _setRFSW_Control *****************
  7483 ;; Defined at:
  7484 ;;		line 333 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  sw              1    wreg     unsigned char 
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;  sw              1   67[BANK0 ] unsigned char 
  7489 ;; Return value:  Size  Location     Type
  7490 ;;		None               void
  7491 ;; Registers used:
  7492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7502 ;;Total ram usage:        2 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    8
  7505 ;; This function calls:
  7506 ;;		_RfSWPointSelect
  7507 ;;		_setBuz
  7508 ;;		_setDelayOff_GO
  7509 ;;		_setDimmerLights_Switch
  7510 ;;		_setDimmerLights_Trigger
  7511 ;;		_setRF_DimmerLights
  7512 ;;		_setSw_Status
  7513 ;;		_setTxData
  7514 ;; This function is called by:
  7515 ;;		_setControl_Lights_Table
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _setRFSW_Control
  7521  0947                     _setRFSW_Control:	
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7525                           ;setRFSW_Control@sw stored from wreg
  7526  0947  0020               	movlb	0	; select bank0
  7527  0948  00E3               	movwf	setRFSW_Control@sw
  7528                           
  7529                           ;RF_Control_B1.c: 334: RfSWPointSelect(sw);
  7530  0949  0863               	movf	setRFSW_Control@sw,w
  7531  094A  31A6  26C9  3189   	fcall	_RfSWPointSelect
  7532                           
  7533                           ;RF_Control_B1.c: 335: if (!RFSW->Status) {
  7534  094D  0021               	movlb	1	; select bank1
  7535  094E  083C               	movf	_RFSW^(0+128),w
  7536  094F  0086               	movwf	6
  7537  0950  0187               	clrf	7
  7538  0951  1801               	btfsc	1,0
  7539  0952  2988               	goto	l8208
  7540                           
  7541                           ;RF_Control_B1.c: 336: if (RF_Data[16] == 0x80) {
  7542  0953  0830               	movf	(_RF_Data^(0+128)+16),w
  7543  0954  3A80               	xorlw	128
  7544  0955  1D03               	skipz
  7545  0956  2964               	goto	l8198
  7546                           
  7547                           ;RF_Control_B1.c: 337: setDelayOff_GO(sw, 1, RF_Data[17]);
  7548  0957  0020               	movlb	0	; select bank0
  7549  0958  01A3               	clrf	setDelayOff_GO@command
  7550  0959  0AA3               	incf	setDelayOff_GO@command,f
  7551  095A  0021               	movlb	1	; select bank1
  7552  095B  0831               	movf	(_RF_Data^(0+128)+17),w
  7553  095C  0020               	movlb	0	; select bank0
  7554  095D  00E2               	movwf	??_setRFSW_Control
  7555  095E  0862               	movf	??_setRFSW_Control,w
  7556  095F  00A4               	movwf	setDelayOff_GO@value
  7557  0960  0863               	movf	setRFSW_Control@sw,w
  7558  0961  3192  2211  3189   	fcall	_setDelayOff_GO
  7559  0964                     l8198:	
  7560                           
  7561                           ;RF_Control_B1.c: 338: }
  7562                           ;RF_Control_B1.c: 339: RFSW->Status = 1;
  7563  0964  0021               	movlb	1	; select bank1
  7564  0965  083C               	movf	_RFSW^(0+128),w
  7565  0966  0086               	movwf	6
  7566  0967  0187               	clrf	7
  7567  0968  1401               	bsf	1,0
  7568                           
  7569                           ;RF_Control_B1.c: 340: setSw_Status(sw, 1);
  7570  0969  0020               	movlb	0	; select bank0
  7571  096A  01A2               	clrf	setSw_Status@command
  7572  096B  0AA2               	incf	setSw_Status@command,f
  7573  096C  0863               	movf	setRFSW_Control@sw,w
  7574  096D  31A7  2772  3189   	fcall	_setSw_Status
  7575                           
  7576                           ;RF_Control_B1.c: 342: setDimmerLights_Trigger(sw, 1);
  7577  0970  0020               	movlb	0	; select bank0
  7578  0971  01A2               	clrf	setDimmerLights_Trigger@command
  7579  0972  0AA2               	incf	setDimmerLights_Trigger@command,f
  7580  0973  0863               	movf	setRFSW_Control@sw,w
  7581  0974  31A7  27B0  3189   	fcall	_setDimmerLights_Trigger
  7582                           
  7583                           ;RF_Control_B1.c: 343: setDimmerLights_Switch(sw, 1);
  7584  0977  0020               	movlb	0	; select bank0
  7585  0978  01A2               	clrf	setDimmerLights_Switch@command
  7586  0979  0AA2               	incf	setDimmerLights_Switch@command,f
  7587  097A  0863               	movf	setRFSW_Control@sw,w
  7588  097B  31A7  27A0  3189   	fcall	_setDimmerLights_Switch
  7589                           
  7590                           ;RF_Control_B1.c: 345: setRF_DimmerLights(sw, RFSW->Status);
  7591  097E  0021               	movlb	1	; select bank1
  7592  097F  083C               	movf	_RFSW^(0+128),w
  7593  0980  0086               	movwf	6
  7594  0981  0187               	clrf	7
  7595  0982  3000               	movlw	0
  7596  0983  1801               	btfsc	1,0
  7597  0984  3001               	movlw	1
  7598  0985  0020               	movlb	0	; select bank0
  7599  0986  00DD               	movwf	setRF_DimmerLights@on
  7600  0987  29C6               	goto	L2
  7601  0988                     l8208:	
  7602                           ;RF_Control_B1.c: 346: } else {
  7603                           
  7604                           
  7605                           ;RF_Control_B1.c: 347: if (RF_Data[16] == 0x80) {
  7606  0988  0021               	movlb	1	; select bank1
  7607  0989  0830               	movf	(_RF_Data^(0+128)+16),w
  7608  098A  3A80               	xorlw	128
  7609  098B  1D03               	skipz
  7610  098C  299E               	goto	l8212
  7611                           
  7612                           ;RF_Control_B1.c: 348: setDelayOff_GO(sw, 1, RF_Data[17]);
  7613  098D  0020               	movlb	0	; select bank0
  7614  098E  01A3               	clrf	setDelayOff_GO@command
  7615  098F  0AA3               	incf	setDelayOff_GO@command,f
  7616  0990  0021               	movlb	1	; select bank1
  7617  0991  0831               	movf	(_RF_Data^(0+128)+17),w
  7618  0992  0020               	movlb	0	; select bank0
  7619  0993  00E2               	movwf	??_setRFSW_Control
  7620  0994  0862               	movf	??_setRFSW_Control,w
  7621  0995  00A4               	movwf	setDelayOff_GO@value
  7622  0996  0863               	movf	setRFSW_Control@sw,w
  7623  0997  3192  2211  3189   	fcall	_setDelayOff_GO
  7624                           
  7625                           ;RF_Control_B1.c: 349: setRF_DimmerLights(sw, 1);
  7626  099A  0020               	movlb	0	; select bank0
  7627  099B  01DD               	clrf	setRF_DimmerLights@on
  7628  099C  0ADD               	incf	setRF_DimmerLights@on,f
  7629  099D  29C6               	goto	L2
  7630  099E                     l8212:	
  7631                           ;RF_Control_B1.c: 350: } else {
  7632                           
  7633                           
  7634                           ;RF_Control_B1.c: 351: RFSW->Status = 0;
  7635  099E  0021               	movlb	1	; select bank1
  7636  099F  083C               	movf	_RFSW^(0+128),w
  7637  09A0  0086               	movwf	6
  7638  09A1  0187               	clrf	7
  7639  09A2  1001               	bcf	1,0
  7640                           
  7641                           ;RF_Control_B1.c: 352: setSw_Status(sw, 0);
  7642  09A3  0020               	movlb	0	; select bank0
  7643  09A4  01A2               	clrf	setSw_Status@command
  7644  09A5  0863               	movf	setRFSW_Control@sw,w
  7645  09A6  31A7  2772  3189   	fcall	_setSw_Status
  7646                           
  7647                           ;RF_Control_B1.c: 354: setDimmerLights_Trigger(sw, 1);
  7648  09A9  0020               	movlb	0	; select bank0
  7649  09AA  01A2               	clrf	setDimmerLights_Trigger@command
  7650  09AB  0AA2               	incf	setDimmerLights_Trigger@command,f
  7651  09AC  0863               	movf	setRFSW_Control@sw,w
  7652  09AD  31A7  27B0  3189   	fcall	_setDimmerLights_Trigger
  7653                           
  7654                           ;RF_Control_B1.c: 355: setDimmerLights_Switch(sw, RFSW->Status);
  7655  09B0  0021               	movlb	1	; select bank1
  7656  09B1  083C               	movf	_RFSW^(0+128),w
  7657  09B2  0086               	movwf	6
  7658  09B3  0187               	clrf	7
  7659  09B4  3000               	movlw	0
  7660  09B5  1801               	btfsc	1,0
  7661  09B6  3001               	movlw	1
  7662  09B7  0020               	movlb	0	; select bank0
  7663  09B8  00A2               	movwf	setDimmerLights_Switch@command
  7664  09B9  0863               	movf	setRFSW_Control@sw,w
  7665  09BA  31A7  27A0  3189   	fcall	_setDimmerLights_Switch
  7666                           
  7667                           ;RF_Control_B1.c: 357: setDelayOff_GO(sw, 0, 0);
  7668  09BD  0020               	movlb	0	; select bank0
  7669  09BE  01A3               	clrf	setDelayOff_GO@command
  7670  09BF  01A4               	clrf	setDelayOff_GO@value
  7671  09C0  0863               	movf	setRFSW_Control@sw,w
  7672  09C1  3192  2211  3189   	fcall	_setDelayOff_GO
  7673                           
  7674                           ;RF_Control_B1.c: 358: setRF_DimmerLights(sw, 0);
  7675  09C4  0020               	movlb	0	; select bank0
  7676  09C5  01DD               	clrf	setRF_DimmerLights@on
  7677  09C6                     L2:	
  7678  09C6  0863               	movf	setRFSW_Control@sw,w
  7679  09C7  3193  2390  3189   	fcall	_setRF_DimmerLights
  7680                           
  7681                           ;RF_Control_B1.c: 359: }
  7682                           ;RF_Control_B1.c: 360: }
  7683                           ;RF_Control_B1.c: 361: setBuz(1, 100);
  7684  09CA  3064               	movlw	100
  7685  09CB  0020               	movlb	0	; select bank0
  7686  09CC  00A6               	movwf	setBuz@time
  7687  09CD  3000               	movlw	0
  7688  09CE  00A7               	movwf	setBuz@time+1
  7689  09CF  3001               	movlw	1
  7690  09D0  3196  2696  3189   	fcall	_setBuz
  7691                           
  7692                           ;RF_Control_B1.c: 362: setTxData(1);
  7693  09D3  3001               	movlw	1
  7694  09D4  3187  271E         	fcall	_setTxData
  7695  09D6  0008               	return
  7696  09D7                     __end_of_setRFSW_Control:	
  7697                           
  7698                           	psect	text29
  7699  1211                     __ptext29:	
  7700 ;; *************** function _setDelayOff_GO *****************
  7701 ;; Defined at:
  7702 ;;		line 92 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;  sw              1    wreg     unsigned char 
  7705 ;;  command         1    3[BANK0 ] unsigned char 
  7706 ;;  value           1    4[BANK0 ] unsigned char 
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;  sw              1    7[BANK0 ] unsigned char 
  7709 ;; Return value:  Size  Location     Type
  7710 ;;		None               void
  7711 ;; Registers used:
  7712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7718 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;Total ram usage:        5 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    5
  7725 ;; This function calls:
  7726 ;;		_DelayOffPointSelect
  7727 ;;		_DelayTimejudge
  7728 ;; This function is called by:
  7729 ;;		_setRFSW_Control
  7730 ;;		_Sw_DimmerOffFunc
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           
  7735                           ;psect for function _setDelayOff_GO
  7736  1211                     _setDelayOff_GO:	
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7740                           ;setDelayOff_GO@sw stored from wreg
  7741  1211  0020               	movlb	0	; select bank0
  7742  1212  00A7               	movwf	setDelayOff_GO@sw
  7743                           
  7744                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  7745  1213  0827               	movf	setDelayOff_GO@sw,w
  7746  1214  31A6  26BD  3192   	fcall	_DelayOffPointSelect
  7747                           
  7748                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  7749  1217  0021               	movlb	1	; select bank1
  7750  1218  0838               	movf	_DelayOff^(0+128),w
  7751  1219  0086               	movwf	6
  7752  121A  0187               	clrf	7
  7753  121B  1C01               	btfss	1,0
  7754  121C  0008               	return
  7755                           
  7756                           ;DelayOff_B1.c: 96: {
  7757                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  7758  121D  0838               	movf	_DelayOff^(0+128),w
  7759  121E  0086               	movwf	6
  7760  121F  0187               	clrf	7
  7761  1220  0020               	movlb	0	; select bank0
  7762  1221  0823               	movf	setDelayOff_GO@command,w
  7763  1222  1081               	bcf	1,1
  7764  1223  1D03               	skipz
  7765  1224  1481               	bsf	1,1
  7766                           
  7767                           ;DelayOff_B1.c: 98: if(command)
  7768  1225  0823               	movf	setDelayOff_GO@command,w
  7769  1226  1903               	btfsc	3,2
  7770  1227  2A53               	goto	l6060
  7771                           
  7772                           ;DelayOff_B1.c: 99: {
  7773                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  7774  1228  0824               	movf	setDelayOff_GO@value,w
  7775  1229  319B  23FF  3192   	fcall	_DelayTimejudge
  7776  122C  0020               	movlb	0	; select bank0
  7777  122D  00A5               	movwf	??_setDelayOff_GO
  7778  122E  0021               	movlb	1	; select bank1
  7779  122F  0A38               	incf	_DelayOff^(0+128),w
  7780  1230  0086               	movwf	6
  7781  1231  0187               	clrf	7
  7782  1232  0020               	movlb	0	; select bank0
  7783  1233  0825               	movf	??_setDelayOff_GO,w
  7784  1234  0081               	movwf	1
  7785                           
  7786                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  7787  1235  300F               	movlw	15
  7788  1236  0524               	andwf	setDelayOff_GO@value,w
  7789  1237  00A5               	movwf	??_setDelayOff_GO
  7790  1238  0825               	movf	??_setDelayOff_GO,w
  7791  1239  3A05               	xorlw	5
  7792  123A  1903               	skipnz
  7793  123B  2A40               	goto	l6054
  7794  123C  0824               	movf	setDelayOff_GO@value,w
  7795  123D  390F               	andlw	15
  7796  123E  1D03               	btfss	3,2
  7797  123F  2A46               	goto	l6058
  7798  1240                     l6054:	
  7799  1240  3026               	movlw	38
  7800  1241  0224               	subwf	setDelayOff_GO@value,w
  7801  1242  1803               	skipnc
  7802  1243  2A46               	goto	l6058
  7803                           
  7804                           ;DelayOff_B1.c: 102: {
  7805                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  7806  1244  0824               	movf	setDelayOff_GO@value,w
  7807  1245  2A47               	goto	L3
  7808  1246                     l6058:	
  7809                           ;DelayOff_B1.c: 104: }
  7810                           
  7811                           
  7812                           ;DelayOff_B1.c: 105: else
  7813                           ;DelayOff_B1.c: 106: {
  7814                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  7815  1246  3005               	movlw	5
  7816  1247                     L3:	
  7817  1247  00A5               	movwf	??_setDelayOff_GO
  7818  1248  0827               	movf	setDelayOff_GO@sw,w
  7819  1249  3E1A               	addlw	26
  7820  124A  076F               	addwf	_Product,w
  7821  124B  00A6               	movwf	??_setDelayOff_GO+1
  7822  124C  0826               	movf	??_setDelayOff_GO+1,w
  7823  124D  0086               	movwf	6
  7824  124E  3001               	movlw	1	; select bank2/3
  7825  124F  0087               	movwf	7
  7826  1250  0825               	movf	??_setDelayOff_GO,w
  7827  1251  0081               	movwf	1
  7828                           
  7829                           ;DelayOff_B1.c: 108: }
  7830                           ;DelayOff_B1.c: 109: }
  7831  1252  2A5F               	goto	l6064
  7832  1253                     l6060:	
  7833                           
  7834                           ;DelayOff_B1.c: 110: else if(!command)
  7835  1253  08A3               	movf	setDelayOff_GO@command,f
  7836  1254  1D03               	skipz
  7837  1255  2A5F               	goto	l6064
  7838                           
  7839                           ;DelayOff_B1.c: 111: {
  7840                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  7841  1256  0827               	movf	setDelayOff_GO@sw,w
  7842  1257  3E1A               	addlw	26
  7843  1258  076F               	addwf	_Product,w
  7844  1259  00A5               	movwf	??_setDelayOff_GO
  7845  125A  0825               	movf	??_setDelayOff_GO,w
  7846  125B  0086               	movwf	6
  7847  125C  3001               	movlw	1	; select bank2/3
  7848  125D  0087               	movwf	7
  7849  125E  0181               	clrf	1
  7850  125F                     l6064:	
  7851                           
  7852                           ;DelayOff_B1.c: 113: }
  7853                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  7854  125F  0021               	movlb	1	; select bank1
  7855  1260  0838               	movf	_DelayOff^(0+128),w
  7856  1261  3E02               	addlw	2
  7857  1262  0086               	movwf	6
  7858  1263  0187               	clrf	7
  7859  1264  3000               	movlw	0
  7860  1265  3FC0               	movwi [0]fsr1
  7861  1266  3FC1               	movwi [1]fsr1
  7862                           
  7863                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  7864  1267  0838               	movf	_DelayOff^(0+128),w
  7865  1268  3E04               	addlw	4
  7866  1269  0086               	movwf	6
  7867  126A  0187               	clrf	7
  7868  126B  0181               	clrf	1
  7869  126C  0008               	return
  7870  126D                     __end_of_setDelayOff_GO:	
  7871                           
  7872                           	psect	text30
  7873  1BFF                     __ptext30:	
  7874 ;; *************** function _DelayTimejudge *****************
  7875 ;; Defined at:
  7876 ;;		line 119 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  value           1    wreg     unsigned char 
  7879 ;; Auto vars:     Size  Location     Type
  7880 ;;  value           1    2[BANK0 ] unsigned char 
  7881 ;;  i               1    1[BANK0 ] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;                  1    wreg      unsigned char 
  7884 ;; Registers used:
  7885 ;;		wreg
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;Total ram usage:        3 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; Hardware stack levels required when called:    4
  7898 ;; This function calls:
  7899 ;;		Nothing
  7900 ;; This function is called by:
  7901 ;;		_setDelayOff_GO
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           
  7906                           ;psect for function _DelayTimejudge
  7907  1BFF                     _DelayTimejudge:	
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _DelayTimejudge: [wreg]
  7911                           ;DelayTimejudge@value stored from wreg
  7912  1BFF  0020               	movlb	0	; select bank0
  7913  1C00  00A2               	movwf	DelayTimejudge@value
  7914                           
  7915                           ;DelayOff_B1.c: 121: char i=5;
  7916  1C01  3005               	movlw	5
  7917  1C02  00A0               	movwf	??_DelayTimejudge
  7918  1C03  0820               	movf	??_DelayTimejudge,w
  7919  1C04  00A1               	movwf	DelayTimejudge@i
  7920                           
  7921                           ;DelayOff_B1.c: 122: if(value == 0x05)
  7922  1C05  0822               	movf	DelayTimejudge@value,w
  7923  1C06  3A05               	xorlw	5
  7924  1C07  1D03               	skipz
  7925  1C08  2C0B               	goto	l5900
  7926                           
  7927                           ;DelayOff_B1.c: 123: {
  7928                           ;DelayOff_B1.c: 124: i=5;
  7929  1C09  3005               	movlw	5
  7930  1C0A  2C28               	goto	L8
  7931  1C0B                     l5900:	
  7932                           ;DelayOff_B1.c: 125: }
  7933                           
  7934                           
  7935                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  7936  1C0B  0822               	movf	DelayTimejudge@value,w
  7937  1C0C  3A10               	xorlw	16
  7938  1C0D  1D03               	skipz
  7939  1C0E  2C11               	goto	l5904
  7940                           
  7941                           ;DelayOff_B1.c: 127: {
  7942                           ;DelayOff_B1.c: 128: i=10;
  7943  1C0F  300A               	movlw	10
  7944  1C10  2C28               	goto	L8
  7945  1C11                     l5904:	
  7946                           ;DelayOff_B1.c: 129: }
  7947                           
  7948                           
  7949                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  7950  1C11  0822               	movf	DelayTimejudge@value,w
  7951  1C12  3A15               	xorlw	21
  7952  1C13  1D03               	skipz
  7953  1C14  2C17               	goto	l5908
  7954                           
  7955                           ;DelayOff_B1.c: 131: {
  7956                           ;DelayOff_B1.c: 132: i=15;
  7957  1C15  300F               	movlw	15
  7958  1C16  2C28               	goto	L8
  7959  1C17                     l5908:	
  7960                           ;DelayOff_B1.c: 133: }
  7961                           
  7962                           
  7963                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  7964  1C17  0822               	movf	DelayTimejudge@value,w
  7965  1C18  3A20               	xorlw	32
  7966  1C19  1D03               	skipz
  7967  1C1A  2C1D               	goto	l5912
  7968                           
  7969                           ;DelayOff_B1.c: 135: {
  7970                           ;DelayOff_B1.c: 136: i=20;
  7971  1C1B  3014               	movlw	20
  7972  1C1C  2C28               	goto	L8
  7973  1C1D                     l5912:	
  7974                           ;DelayOff_B1.c: 137: }
  7975                           
  7976                           
  7977                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  7978  1C1D  0822               	movf	DelayTimejudge@value,w
  7979  1C1E  3A25               	xorlw	37
  7980  1C1F  1D03               	skipz
  7981  1C20  2C23               	goto	l5916
  7982                           
  7983                           ;DelayOff_B1.c: 139: {
  7984                           ;DelayOff_B1.c: 140: i=25;
  7985  1C21  3019               	movlw	25
  7986  1C22  2C28               	goto	L8
  7987  1C23                     l5916:	
  7988                           ;DelayOff_B1.c: 141: }
  7989                           
  7990                           
  7991                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  7992  1C23  0822               	movf	DelayTimejudge@value,w
  7993  1C24  3A30               	xorlw	48
  7994  1C25  1D03               	skipz
  7995  1C26  2C2B               	goto	l628
  7996                           
  7997                           ;DelayOff_B1.c: 143: {
  7998                           ;DelayOff_B1.c: 144: i=30;
  7999  1C27  301E               	movlw	30
  8000  1C28                     L8:	
  8001  1C28  00A0               	movwf	??_DelayTimejudge
  8002  1C29  0820               	movf	??_DelayTimejudge,w
  8003  1C2A  00A1               	movwf	DelayTimejudge@i
  8004  1C2B                     l628:	
  8005                           
  8006                           ;DelayOff_B1.c: 145: }
  8007                           ;DelayOff_B1.c: 146: return i;
  8008  1C2B  0821               	movf	DelayTimejudge@i,w
  8009  1C2C  0008               	return
  8010  1C2D                     __end_of_DelayTimejudge:	
  8011                           
  8012                           	psect	text31
  8013  1D97                     __ptext31:	
  8014 ;; *************** function _setRFSW_AdjControl *****************
  8015 ;; Defined at:
  8016 ;;		line 366 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  sw              1    wreg     unsigned char 
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  sw              1   70[BANK0 ] unsigned char 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;		None               void
  8023 ;; Registers used:
  8024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;Total ram usage:        3 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    9
  8037 ;; This function calls:
  8038 ;;		_RfSWPointSelect
  8039 ;;		_setRF_DimmerValue
  8040 ;;		_setTxData
  8041 ;; This function is called by:
  8042 ;;		_setControl_Lights_Table
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           
  8047                           ;psect for function _setRFSW_AdjControl
  8048  1D97                     _setRFSW_AdjControl:	
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8052                           ;setRFSW_AdjControl@sw stored from wreg
  8053  1D97  0020               	movlb	0	; select bank0
  8054  1D98  00E6               	movwf	setRFSW_AdjControl@sw
  8055                           
  8056                           ;RF_Control_B1.c: 367: RfSWPointSelect(sw);
  8057  1D99  0866               	movf	setRFSW_AdjControl@sw,w
  8058  1D9A  31A6  26C9  319D   	fcall	_RfSWPointSelect
  8059                           
  8060                           ;RF_Control_B1.c: 368: if (RFSW->Status) {
  8061  1D9D  0021               	movlb	1	; select bank1
  8062  1D9E  083C               	movf	_RFSW^(0+128),w
  8063  1D9F  0086               	movwf	6
  8064  1DA0  0187               	clrf	7
  8065  1DA1  1C01               	btfss	1,0
  8066  1DA2  2DAF               	goto	l6306
  8067                           
  8068                           ;RF_Control_B1.c: 369: Memory->Modify=1;
  8069  1DA3  0867               	movf	_Memory^(0+128),w
  8070  1DA4  3E22               	addlw	34
  8071  1DA5  0086               	movwf	6
  8072  1DA6  3001               	movlw	1	; select bank2/3
  8073  1DA7  0087               	movwf	7
  8074  1DA8  1401               	bsf	1,0
  8075                           
  8076                           ;RF_Control_B1.c: 370: setRF_DimmerValue(sw);
  8077  1DA9  0020               	movlb	0	; select bank0
  8078  1DAA  0866               	movf	setRFSW_AdjControl@sw,w
  8079  1DAB  319D  2522  319D   	fcall	_setRF_DimmerValue
  8080                           
  8081                           ;RF_Control_B1.c: 371: } else {
  8082  1DAE  2DC1               	goto	l2275
  8083  1DAF                     l6306:	
  8084                           
  8085                           ;RF_Control_B1.c: 372: Product->Data[9]=Product->Data[20 + sw];
  8086  1DAF  0020               	movlb	0	; select bank0
  8087  1DB0  0866               	movf	setRFSW_AdjControl@sw,w
  8088  1DB1  3E14               	addlw	20
  8089  1DB2  076F               	addwf	_Product,w
  8090  1DB3  00E4               	movwf	??_setRFSW_AdjControl
  8091  1DB4  0864               	movf	??_setRFSW_AdjControl,w
  8092  1DB5  0086               	movwf	6
  8093  1DB6  3001               	movlw	1	; select bank2/3
  8094  1DB7  0087               	movwf	7
  8095  1DB8  0801               	movf	1,w
  8096  1DB9  00E5               	movwf	??_setRFSW_AdjControl+1
  8097  1DBA  086F               	movf	_Product,w
  8098  1DBB  3E09               	addlw	9
  8099  1DBC  0086               	movwf	6
  8100  1DBD  3001               	movlw	1	; select bank2/3
  8101  1DBE  0087               	movwf	7
  8102  1DBF  0865               	movf	??_setRFSW_AdjControl+1,w
  8103  1DC0  0081               	movwf	1
  8104  1DC1                     l2275:	
  8105                           
  8106                           ;RF_Control_B1.c: 373: }
  8107                           ;RF_Control_B1.c: 374: Product->Data[17]=Product->Data[26 + sw];
  8108  1DC1  0020               	movlb	0	; select bank0
  8109  1DC2  0866               	movf	setRFSW_AdjControl@sw,w
  8110  1DC3  3E1A               	addlw	26
  8111  1DC4  076F               	addwf	_Product,w
  8112  1DC5  00E4               	movwf	??_setRFSW_AdjControl
  8113  1DC6  0864               	movf	??_setRFSW_AdjControl,w
  8114  1DC7  0086               	movwf	6
  8115  1DC8  3001               	movlw	1	; select bank2/3
  8116  1DC9  0087               	movwf	7
  8117  1DCA  0801               	movf	1,w
  8118  1DCB  00E5               	movwf	??_setRFSW_AdjControl+1
  8119  1DCC  086F               	movf	_Product,w
  8120  1DCD  3E11               	addlw	17
  8121  1DCE  0086               	movwf	6
  8122  1DCF  3001               	movlw	1	; select bank2/3
  8123  1DD0  0087               	movwf	7
  8124  1DD1  0865               	movf	??_setRFSW_AdjControl+1,w
  8125  1DD2  0081               	movwf	1
  8126                           
  8127                           ;RF_Control_B1.c: 375: setTxData(1);
  8128  1DD3  3001               	movlw	1
  8129  1DD4  3187  271E         	fcall	_setTxData
  8130  1DD6  0008               	return
  8131  1DD7                     __end_of_setRFSW_AdjControl:	
  8132                           
  8133                           	psect	text32
  8134  1D22                     __ptext32:	
  8135 ;; *************** function _setRF_DimmerValue *****************
  8136 ;; Defined at:
  8137 ;;		line 386 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  lights          1    wreg     unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  lights          1   67[BANK0 ] unsigned char 
  8142 ;; Return value:  Size  Location     Type
  8143 ;;		None               void
  8144 ;; Registers used:
  8145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 0/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;Total ram usage:        3 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    8
  8158 ;; This function calls:
  8159 ;;		_setDimmerLights_AdjRF
  8160 ;; This function is called by:
  8161 ;;		_setRFSW_AdjControl
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _setRF_DimmerValue
  8167  1D22                     _setRF_DimmerValue:	
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8171                           ;setRF_DimmerValue@lights stored from wreg
  8172  1D22  0020               	movlb	0	; select bank0
  8173  1D23  00E3               	movwf	setRF_DimmerValue@lights
  8174                           
  8175                           ;RF_Control_B1.c: 387: if (RF_Data[9] > 0x64) {
  8176  1D24  3065               	movlw	101
  8177  1D25  0021               	movlb	1	; select bank1
  8178  1D26  0229               	subwf	(_RF_Data^(0+128)+9),w
  8179  1D27  1C03               	skipc
  8180  1D28  2D2F               	goto	l6154
  8181                           
  8182                           ;RF_Control_B1.c: 388: RF_Data[9] = 0x64;
  8183  1D29  3064               	movlw	100
  8184  1D2A  0020               	movlb	0	; select bank0
  8185  1D2B  00E1               	movwf	??_setRF_DimmerValue
  8186  1D2C  0861               	movf	??_setRF_DimmerValue,w
  8187  1D2D  0021               	movlb	1	; select bank1
  8188  1D2E  00A9               	movwf	(_RF_Data^(0+128)+9)
  8189  1D2F                     l6154:	
  8190                           
  8191                           ;RF_Control_B1.c: 389: }
  8192                           ;RF_Control_B1.c: 390: Product->Data[9]=RF_Data[9];
  8193  1D2F  0829               	movf	(_RF_Data^(0+128)+9),w
  8194  1D30  0020               	movlb	0	; select bank0
  8195  1D31  00E1               	movwf	??_setRF_DimmerValue
  8196  1D32  086F               	movf	_Product,w
  8197  1D33  3E09               	addlw	9
  8198  1D34  0086               	movwf	6
  8199  1D35  3001               	movlw	1	; select bank2/3
  8200  1D36  0087               	movwf	7
  8201  1D37  0861               	movf	??_setRF_DimmerValue,w
  8202  1D38  0081               	movwf	1
  8203                           
  8204                           ;RF_Control_B1.c: 391: Product->Data[11]=lights;
  8205  1D39  0863               	movf	setRF_DimmerValue@lights,w
  8206  1D3A  00E1               	movwf	??_setRF_DimmerValue
  8207  1D3B  086F               	movf	_Product,w
  8208  1D3C  3E0B               	addlw	11
  8209  1D3D  0086               	movwf	6
  8210  1D3E  3001               	movlw	1	; select bank2/3
  8211  1D3F  0087               	movwf	7
  8212  1D40  0861               	movf	??_setRF_DimmerValue,w
  8213  1D41  0081               	movwf	1
  8214                           
  8215                           ;RF_Control_B1.c: 392: Product->Data[(20 + lights)]=Product->Data[9];
  8216  1D42  086F               	movf	_Product,w
  8217  1D43  3E09               	addlw	9
  8218  1D44  0086               	movwf	6
  8219  1D45  3001               	movlw	1	; select bank2/3
  8220  1D46  0087               	movwf	7
  8221  1D47  0801               	movf	1,w
  8222  1D48  00E1               	movwf	??_setRF_DimmerValue
  8223  1D49  0863               	movf	setRF_DimmerValue@lights,w
  8224  1D4A  3E14               	addlw	20
  8225  1D4B  076F               	addwf	_Product,w
  8226  1D4C  00E2               	movwf	??_setRF_DimmerValue+1
  8227  1D4D  0862               	movf	??_setRF_DimmerValue+1,w
  8228  1D4E  0086               	movwf	6
  8229  1D4F  3001               	movlw	1	; select bank2/3
  8230  1D50  0087               	movwf	7
  8231  1D51  0861               	movf	??_setRF_DimmerValue,w
  8232  1D52  0081               	movwf	1
  8233                           
  8234                           ;RF_Control_B1.c: 393: setDimmerLights_AdjRF(lights);
  8235  1D53  0863               	movf	setRF_DimmerValue@lights,w
  8236  1D54  319A  2293         	fcall	_setDimmerLights_AdjRF
  8237  1D56  0008               	return
  8238  1D57                     __end_of_setRF_DimmerValue:	
  8239                           
  8240                           	psect	text33
  8241  1A93                     __ptext33:	
  8242 ;; *************** function _setDimmerLights_AdjRF *****************
  8243 ;; Defined at:
  8244 ;;		line 423 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  lights          1    wreg     unsigned char 
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;  lights          1   64[BANK0 ] unsigned char 
  8249 ;; Return value:  Size  Location     Type
  8250 ;;		None               void
  8251 ;; Registers used:
  8252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8253 ;; Tracked objects:
  8254 ;;		On entry : 0/0
  8255 ;;		On exit  : 0/0
  8256 ;;		Unchanged: 0/0
  8257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;Total ram usage:        2 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    7
  8265 ;; This function calls:
  8266 ;;		_DimmerLightsPointSelect
  8267 ;;		_getPercentValue
  8268 ;; This function is called by:
  8269 ;;		_setRF_DimmerValue
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           
  8274                           ;psect for function _setDimmerLights_AdjRF
  8275  1A93                     _setDimmerLights_AdjRF:	
  8276                           
  8277                           ;incstack = 0
  8278                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8279                           ;setDimmerLights_AdjRF@lights stored from wreg
  8280  1A93  0020               	movlb	0	; select bank0
  8281  1A94  00E0               	movwf	setDimmerLights_AdjRF@lights
  8282                           
  8283                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8284  1A95  0860               	movf	setDimmerLights_AdjRF@lights,w
  8285  1A96  31A6  264C  319A   	fcall	_DimmerLightsPointSelect
  8286                           
  8287                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8288  1A99  0020               	movlb	0	; select bank0
  8289  1A9A  086C               	movf	_DimmerLights,w
  8290  1A9B  0086               	movwf	6
  8291  1A9C  3001               	movlw	1	; select bank2/3
  8292  1A9D  0087               	movwf	7
  8293  1A9E  1501               	bsf	1,2
  8294                           
  8295                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8296  1A9F  086C               	movf	_DimmerLights,w
  8297  1AA0  0086               	movwf	6
  8298  1AA1  3001               	movlw	1	; select bank2/3
  8299  1AA2  0087               	movwf	7
  8300  1AA3  1481               	bsf	1,1
  8301                           
  8302                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8303  1AA4  086F               	movf	_Product,w
  8304  1AA5  3E09               	addlw	9
  8305  1AA6  0086               	movwf	6
  8306  1AA7  3001               	movlw	1	; select bank2/3
  8307  1AA8  0087               	movwf	7
  8308  1AA9  0801               	movf	1,w
  8309  1AAA  3191  21B6         	fcall	_getPercentValue
  8310  1AAC  0020               	movlb	0	; select bank0
  8311  1AAD  00DF               	movwf	??_setDimmerLights_AdjRF
  8312  1AAE  086C               	movf	_DimmerLights,w
  8313  1AAF  3E05               	addlw	5
  8314  1AB0  0086               	movwf	6
  8315  1AB1  3001               	movlw	1	; select bank2/3
  8316  1AB2  0087               	movwf	7
  8317  1AB3  085F               	movf	??_setDimmerLights_AdjRF,w
  8318  1AB4  0081               	movwf	1
  8319  1AB5  0008               	return
  8320  1AB6                     __end_of_setDimmerLights_AdjRF:	
  8321                           
  8322                           	psect	text34
  8323  11B6                     __ptext34:	
  8324 ;; *************** function _getPercentValue *****************
  8325 ;; Defined at:
  8326 ;;		line 490 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  value           1    wreg     unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  value           1   59[BANK0 ] unsigned char 
  8331 ;;  i               3   60[BANK0 ] float 
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      unsigned char 
  8334 ;; Registers used:
  8335 ;;		wreg, status,2, status,0, pclath, cstack
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;Total ram usage:        6 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    6
  8348 ;; This function calls:
  8349 ;;		___awtoft
  8350 ;;		___ftadd
  8351 ;;		___ftdiv
  8352 ;;		___ftmul
  8353 ;;		___fttol
  8354 ;; This function is called by:
  8355 ;;		_setDimmerLights_AdjRF
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _getPercentValue
  8361  11B6                     _getPercentValue:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8365                           ;getPercentValue@value stored from wreg
  8366  11B6  0020               	movlb	0	; select bank0
  8367  11B7  00DB               	movwf	getPercentValue@value
  8368                           
  8369                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8370  11B8  3000               	movlw	0
  8371  11B9  00DC               	movwf	getPercentValue@i
  8372  11BA  3054               	movlw	84
  8373  11BB  00DD               	movwf	getPercentValue@i+1
  8374  11BC  3042               	movlw	66
  8375  11BD  00DE               	movwf	getPercentValue@i+2
  8376                           
  8377                           ;Dimmer_B1.c: 494: i/=100;
  8378  11BE  3000               	movlw	0
  8379  11BF  00AE               	movwf	___ftdiv@f2
  8380  11C0  30C8               	movlw	200
  8381  11C1  00AF               	movwf	___ftdiv@f2+1
  8382  11C2  3042               	movlw	66
  8383  11C3  00B0               	movwf	___ftdiv@f2+2
  8384  11C4  085C               	movf	getPercentValue@i,w
  8385  11C5  00B1               	movwf	___ftdiv@f1
  8386  11C6  085D               	movf	getPercentValue@i+1,w
  8387  11C7  00B2               	movwf	___ftdiv@f1+1
  8388  11C8  085E               	movf	getPercentValue@i+2,w
  8389  11C9  00B3               	movwf	___ftdiv@f1+2
  8390  11CA  318B  23AB  3191   	fcall	___ftdiv
  8391  11CD  0020               	movlb	0	; select bank0
  8392  11CE  082E               	movf	?___ftdiv,w
  8393  11CF  00DC               	movwf	getPercentValue@i
  8394  11D0  082F               	movf	?___ftdiv+1,w
  8395  11D1  00DD               	movwf	getPercentValue@i+1
  8396  11D2  0830               	movf	?___ftdiv+2,w
  8397  11D3  00DE               	movwf	getPercentValue@i+2
  8398                           
  8399                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8400  11D4  085B               	movf	getPercentValue@value,w
  8401  11D5  00D9               	movwf	??_getPercentValue
  8402  11D6  01DA               	clrf	??_getPercentValue+1
  8403  11D7  09D9               	comf	??_getPercentValue,f
  8404  11D8  09DA               	comf	??_getPercentValue+1,f
  8405  11D9  0AD9               	incf	??_getPercentValue,f
  8406  11DA  1903               	skipnz
  8407  11DB  0ADA               	incf	??_getPercentValue+1,f
  8408  11DC  0859               	movf	??_getPercentValue,w
  8409  11DD  3E64               	addlw	100
  8410  11DE  00A8               	movwf	___awtoft@c
  8411  11DF  3000               	movlw	0
  8412  11E0  3D5A               	addwfc	??_getPercentValue+1,w
  8413  11E1  00A9               	movwf	___awtoft@c+1
  8414  11E2  319A  222D  3191   	fcall	___awtoft
  8415  11E5  0020               	movlb	0	; select bank0
  8416  11E6  0828               	movf	?___awtoft,w
  8417  11E7  00B1               	movwf	___ftmul@f2
  8418  11E8  0829               	movf	?___awtoft+1,w
  8419  11E9  00B2               	movwf	___ftmul@f2+1
  8420  11EA  082A               	movf	?___awtoft+2,w
  8421  11EB  00B3               	movwf	___ftmul@f2+2
  8422  11EC  085C               	movf	getPercentValue@i,w
  8423  11ED  00AE               	movwf	___ftmul@f1
  8424  11EE  085D               	movf	getPercentValue@i+1,w
  8425  11EF  00AF               	movwf	___ftmul@f1+1
  8426  11F0  085E               	movf	getPercentValue@i+2,w
  8427  11F1  00B0               	movwf	___ftmul@f1+2
  8428  11F2  318C  2454  3191   	fcall	___ftmul
  8429  11F5  0020               	movlb	0	; select bank0
  8430  11F6  082E               	movf	?___ftmul,w
  8431  11F7  00C1               	movwf	___ftadd@f2
  8432  11F8  082F               	movf	?___ftmul+1,w
  8433  11F9  00C2               	movwf	___ftadd@f2+1
  8434  11FA  0830               	movf	?___ftmul+2,w
  8435  11FB  00C3               	movwf	___ftadd@f2+2
  8436  11FC  3000               	movlw	0
  8437  11FD  00BE               	movwf	___ftadd@f1
  8438  11FE  3086               	movlw	134
  8439  11FF  00BF               	movwf	___ftadd@f1+1
  8440  1200  3042               	movlw	66
  8441  1201  00C0               	movwf	___ftadd@f1+2
  8442  1202  318D  25FE  3191   	fcall	___ftadd
  8443  1205  0020               	movlb	0	; select bank0
  8444  1206  083E               	movf	?___ftadd,w
  8445  1207  00CB               	movwf	___fttol@f1
  8446  1208  083F               	movf	?___ftadd+1,w
  8447  1209  00CC               	movwf	___fttol@f1+1
  8448  120A  0840               	movf	?___ftadd+2,w
  8449  120B  00CD               	movwf	___fttol@f1+2
  8450  120C  3188  2038         	fcall	___fttol
  8451  120E  0020               	movlb	0	; select bank0
  8452  120F  084B               	movf	?___fttol,w
  8453  1210  0008               	return
  8454  1211                     __end_of_getPercentValue:	
  8455                           
  8456                           	psect	text35
  8457  0C54                     __ptext35:	
  8458 ;; *************** function ___ftmul *****************
  8459 ;; Defined at:
  8460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  f1              3   14[BANK0 ] float 
  8463 ;;  f2              3   17[BANK0 ] float 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8466 ;;  sign            1   29[BANK0 ] unsigned char 
  8467 ;;  cntr            1   28[BANK0 ] unsigned char 
  8468 ;;  exp             1   24[BANK0 ] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  3   14[BANK0 ] float 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0, pclath, cstack
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8478 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;Total ram usage:       16 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    5
  8485 ;; This function calls:
  8486 ;;		___ftpack
  8487 ;; This function is called by:
  8488 ;;		_getPercentValue
  8489 ;; This function uses a non-reentrant model
  8490 ;;
  8491                           
  8492                           
  8493                           ;psect for function ___ftmul
  8494  0C54                     ___ftmul:	
  8495                           
  8496                           ;incstack = 0
  8497                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8498  0C54  0020               	movlb	0	; select bank0
  8499  0C55  082E               	movf	___ftmul@f1,w
  8500  0C56  00B4               	movwf	??___ftmul
  8501  0C57  082F               	movf	___ftmul@f1+1,w
  8502  0C58  00B5               	movwf	??___ftmul+1
  8503  0C59  0830               	movf	___ftmul@f1+2,w
  8504  0C5A  00B6               	movwf	??___ftmul+2
  8505  0C5B  1003               	clrc
  8506  0C5C  0D35               	rlf	??___ftmul+1,w
  8507  0C5D  0D36               	rlf	??___ftmul+2,w
  8508  0C5E  00B7               	movwf	??___ftmul+3
  8509  0C5F  0837               	movf	??___ftmul+3,w
  8510  0C60  00B8               	movwf	___ftmul@exp
  8511  0C61  08B8               	movf	___ftmul@exp,f
  8512  0C62  1D03               	skipz
  8513  0C63  2C6B               	goto	l5792
  8514  0C64  3000               	movlw	0
  8515  0C65  00AE               	movwf	?___ftmul
  8516  0C66  3000               	movlw	0
  8517  0C67  00AF               	movwf	?___ftmul+1
  8518  0C68  3000               	movlw	0
  8519  0C69  00B0               	movwf	?___ftmul+2
  8520  0C6A  0008               	return
  8521  0C6B                     l5792:	
  8522  0C6B  0831               	movf	___ftmul@f2,w
  8523  0C6C  00B4               	movwf	??___ftmul
  8524  0C6D  0832               	movf	___ftmul@f2+1,w
  8525  0C6E  00B5               	movwf	??___ftmul+1
  8526  0C6F  0833               	movf	___ftmul@f2+2,w
  8527  0C70  00B6               	movwf	??___ftmul+2
  8528  0C71  1003               	clrc
  8529  0C72  0D35               	rlf	??___ftmul+1,w
  8530  0C73  0D36               	rlf	??___ftmul+2,w
  8531  0C74  00B7               	movwf	??___ftmul+3
  8532  0C75  0837               	movf	??___ftmul+3,w
  8533  0C76  00BD               	movwf	___ftmul@sign
  8534  0C77  08BD               	movf	___ftmul@sign,f
  8535  0C78  1D03               	skipz
  8536  0C79  2C81               	goto	l5798
  8537  0C7A  3000               	movlw	0
  8538  0C7B  00AE               	movwf	?___ftmul
  8539  0C7C  3000               	movlw	0
  8540  0C7D  00AF               	movwf	?___ftmul+1
  8541  0C7E  3000               	movlw	0
  8542  0C7F  00B0               	movwf	?___ftmul+2
  8543  0C80  0008               	return
  8544  0C81                     l5798:	
  8545  0C81  083D               	movf	___ftmul@sign,w
  8546  0C82  3E7B               	addlw	123
  8547  0C83  00B4               	movwf	??___ftmul
  8548  0C84  0834               	movf	??___ftmul,w
  8549  0C85  07B8               	addwf	___ftmul@exp,f
  8550  0C86  082E               	movf	___ftmul@f1,w
  8551  0C87  00B4               	movwf	??___ftmul
  8552  0C88  082F               	movf	___ftmul@f1+1,w
  8553  0C89  00B5               	movwf	??___ftmul+1
  8554  0C8A  0830               	movf	___ftmul@f1+2,w
  8555  0C8B  00B6               	movwf	??___ftmul+2
  8556  0C8C  3010               	movlw	16
  8557  0C8D                     u4205:	
  8558  0C8D  36B6               	lsrf	??___ftmul+2,f
  8559  0C8E  0CB5               	rrf	??___ftmul+1,f
  8560  0C8F  0CB4               	rrf	??___ftmul,f
  8561  0C90  0B89               	decfsz	9,f
  8562  0C91  2C8D               	goto	u4205
  8563  0C92  0834               	movf	??___ftmul,w
  8564  0C93  00B7               	movwf	??___ftmul+3
  8565  0C94  0837               	movf	??___ftmul+3,w
  8566  0C95  00BD               	movwf	___ftmul@sign
  8567  0C96  0831               	movf	___ftmul@f2,w
  8568  0C97  00B4               	movwf	??___ftmul
  8569  0C98  0832               	movf	___ftmul@f2+1,w
  8570  0C99  00B5               	movwf	??___ftmul+1
  8571  0C9A  0833               	movf	___ftmul@f2+2,w
  8572  0C9B  00B6               	movwf	??___ftmul+2
  8573  0C9C  3010               	movlw	16
  8574  0C9D                     u4215:	
  8575  0C9D  36B6               	lsrf	??___ftmul+2,f
  8576  0C9E  0CB5               	rrf	??___ftmul+1,f
  8577  0C9F  0CB4               	rrf	??___ftmul,f
  8578  0CA0  0B89               	decfsz	9,f
  8579  0CA1  2C9D               	goto	u4215
  8580  0CA2  0834               	movf	??___ftmul,w
  8581  0CA3  00B7               	movwf	??___ftmul+3
  8582  0CA4  0837               	movf	??___ftmul+3,w
  8583  0CA5  06BD               	xorwf	___ftmul@sign,f
  8584  0CA6  3080               	movlw	128
  8585  0CA7  00B4               	movwf	??___ftmul
  8586  0CA8  0834               	movf	??___ftmul,w
  8587  0CA9  05BD               	andwf	___ftmul@sign,f
  8588  0CAA  17AF               	bsf	___ftmul@f1+1,7
  8589  0CAB  17B2               	bsf	___ftmul@f2+1,7
  8590  0CAC  30FF               	movlw	255
  8591  0CAD  05B1               	andwf	___ftmul@f2,f
  8592  0CAE  30FF               	movlw	255
  8593  0CAF  05B2               	andwf	___ftmul@f2+1,f
  8594  0CB0  3000               	movlw	0
  8595  0CB1  05B3               	andwf	___ftmul@f2+2,f
  8596  0CB2  3000               	movlw	0
  8597  0CB3  00B9               	movwf	___ftmul@f3_as_product
  8598  0CB4  3000               	movlw	0
  8599  0CB5  00BA               	movwf	___ftmul@f3_as_product+1
  8600  0CB6  3000               	movlw	0
  8601  0CB7  00BB               	movwf	___ftmul@f3_as_product+2
  8602  0CB8  3007               	movlw	7
  8603  0CB9  00B4               	movwf	??___ftmul
  8604  0CBA  0834               	movf	??___ftmul,w
  8605  0CBB  00BC               	movwf	___ftmul@cntr
  8606  0CBC                     l5810:	
  8607  0CBC  1C2E               	btfss	___ftmul@f1,0
  8608  0CBD  2CC4               	goto	l5814
  8609  0CBE  0831               	movf	___ftmul@f2,w
  8610  0CBF  07B9               	addwf	___ftmul@f3_as_product,f
  8611  0CC0  0832               	movf	___ftmul@f2+1,w
  8612  0CC1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8613  0CC2  0833               	movf	___ftmul@f2+2,w
  8614  0CC3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8615  0CC4                     l5814:	
  8616  0CC4  3001               	movlw	1
  8617  0CC5                     u4235:	
  8618  0CC5  36B0               	lsrf	___ftmul@f1+2,f
  8619  0CC6  0CAF               	rrf	___ftmul@f1+1,f
  8620  0CC7  0CAE               	rrf	___ftmul@f1,f
  8621  0CC8  0B89               	decfsz	9,f
  8622  0CC9  2CC5               	goto	u4235
  8623  0CCA  3001               	movlw	1
  8624  0CCB                     u4245:	
  8625  0CCB  35B1               	lslf	___ftmul@f2,f
  8626  0CCC  0DB2               	rlf	___ftmul@f2+1,f
  8627  0CCD  0DB3               	rlf	___ftmul@f2+2,f
  8628  0CCE  0B89               	decfsz	9,f
  8629  0CCF  2CCB               	goto	u4245
  8630  0CD0  3001               	movlw	1
  8631  0CD1  02BC               	subwf	___ftmul@cntr,f
  8632  0CD2  1D03               	btfss	3,2
  8633  0CD3  2CBC               	goto	l5810
  8634  0CD4  3009               	movlw	9
  8635  0CD5  00B4               	movwf	??___ftmul
  8636  0CD6  0834               	movf	??___ftmul,w
  8637  0CD7  00BC               	movwf	___ftmul@cntr
  8638  0CD8                     l5822:	
  8639  0CD8  1C2E               	btfss	___ftmul@f1,0
  8640  0CD9  2CE0               	goto	l5826
  8641  0CDA  0831               	movf	___ftmul@f2,w
  8642  0CDB  07B9               	addwf	___ftmul@f3_as_product,f
  8643  0CDC  0832               	movf	___ftmul@f2+1,w
  8644  0CDD  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8645  0CDE  0833               	movf	___ftmul@f2+2,w
  8646  0CDF  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8647  0CE0                     l5826:	
  8648  0CE0  3001               	movlw	1
  8649  0CE1                     u4275:	
  8650  0CE1  36B0               	lsrf	___ftmul@f1+2,f
  8651  0CE2  0CAF               	rrf	___ftmul@f1+1,f
  8652  0CE3  0CAE               	rrf	___ftmul@f1,f
  8653  0CE4  0B89               	decfsz	9,f
  8654  0CE5  2CE1               	goto	u4275
  8655  0CE6  3001               	movlw	1
  8656  0CE7                     u4285:	
  8657  0CE7  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8658  0CE8  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8659  0CE9  0CB9               	rrf	___ftmul@f3_as_product,f
  8660  0CEA  0B89               	decfsz	9,f
  8661  0CEB  2CE7               	goto	u4285
  8662  0CEC  3001               	movlw	1
  8663  0CED  02BC               	subwf	___ftmul@cntr,f
  8664  0CEE  1D03               	btfss	3,2
  8665  0CEF  2CD8               	goto	l5822
  8666  0CF0  0839               	movf	___ftmul@f3_as_product,w
  8667  0CF1  00A0               	movwf	___ftpack@arg
  8668  0CF2  083A               	movf	___ftmul@f3_as_product+1,w
  8669  0CF3  00A1               	movwf	___ftpack@arg+1
  8670  0CF4  083B               	movf	___ftmul@f3_as_product+2,w
  8671  0CF5  00A2               	movwf	___ftpack@arg+2
  8672  0CF6  0838               	movf	___ftmul@exp,w
  8673  0CF7  00B4               	movwf	??___ftmul
  8674  0CF8  0834               	movf	??___ftmul,w
  8675  0CF9  00A3               	movwf	___ftpack@exp
  8676  0CFA  083D               	movf	___ftmul@sign,w
  8677  0CFB  00B5               	movwf	??___ftmul+1
  8678  0CFC  0835               	movf	??___ftmul+1,w
  8679  0CFD  00A4               	movwf	___ftpack@sign
  8680  0CFE  3192  22CB         	fcall	___ftpack
  8681  0D00  0020               	movlb	0	; select bank0
  8682  0D01  0820               	movf	?___ftpack,w
  8683  0D02  00AE               	movwf	?___ftmul
  8684  0D03  0821               	movf	?___ftpack+1,w
  8685  0D04  00AF               	movwf	?___ftmul+1
  8686  0D05  0822               	movf	?___ftpack+2,w
  8687  0D06  00B0               	movwf	?___ftmul+2
  8688  0D07  0008               	return
  8689  0D08                     __end_of___ftmul:	
  8690                           
  8691                           	psect	text36
  8692  0DFE                     __ptext36:	
  8693 ;; *************** function ___ftadd *****************
  8694 ;; Defined at:
  8695 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;  f1              3   30[BANK0 ] float 
  8698 ;;  f2              3   33[BANK0 ] float 
  8699 ;; Auto vars:     Size  Location     Type
  8700 ;;  exp1            1   42[BANK0 ] unsigned char 
  8701 ;;  exp2            1   41[BANK0 ] unsigned char 
  8702 ;;  sign            1   40[BANK0 ] unsigned char 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;                  3   30[BANK0 ] float 
  8705 ;; Registers used:
  8706 ;;		wreg, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8712 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;Total ram usage:       13 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    5
  8719 ;; This function calls:
  8720 ;;		___ftpack
  8721 ;; This function is called by:
  8722 ;;		_getPercentValue
  8723 ;; This function uses a non-reentrant model
  8724 ;;
  8725                           
  8726                           
  8727                           ;psect for function ___ftadd
  8728  0DFE                     ___ftadd:	
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8732  0DFE  0020               	movlb	0	; select bank0
  8733  0DFF  083E               	movf	___ftadd@f1,w
  8734  0E00  00C4               	movwf	??___ftadd
  8735  0E01  083F               	movf	___ftadd@f1+1,w
  8736  0E02  00C5               	movwf	??___ftadd+1
  8737  0E03  0840               	movf	___ftadd@f1+2,w
  8738  0E04  00C6               	movwf	??___ftadd+2
  8739  0E05  1003               	clrc
  8740  0E06  0D45               	rlf	??___ftadd+1,w
  8741  0E07  0D46               	rlf	??___ftadd+2,w
  8742  0E08  00C7               	movwf	??___ftadd+3
  8743  0E09  0847               	movf	??___ftadd+3,w
  8744  0E0A  00CA               	movwf	___ftadd@exp1
  8745  0E0B  0841               	movf	___ftadd@f2,w
  8746  0E0C  00C4               	movwf	??___ftadd
  8747  0E0D  0842               	movf	___ftadd@f2+1,w
  8748  0E0E  00C5               	movwf	??___ftadd+1
  8749  0E0F  0843               	movf	___ftadd@f2+2,w
  8750  0E10  00C6               	movwf	??___ftadd+2
  8751  0E11  1003               	clrc
  8752  0E12  0D45               	rlf	??___ftadd+1,w
  8753  0E13  0D46               	rlf	??___ftadd+2,w
  8754  0E14  00C7               	movwf	??___ftadd+3
  8755  0E15  0847               	movf	??___ftadd+3,w
  8756  0E16  00C9               	movwf	___ftadd@exp2
  8757  0E17  084A               	movf	___ftadd@exp1,w
  8758  0E18  1903               	btfsc	3,2
  8759  0E19  2E26               	goto	l5680
  8760  0E1A  0849               	movf	___ftadd@exp2,w
  8761  0E1B  024A               	subwf	___ftadd@exp1,w
  8762  0E1C  1803               	skipnc
  8763  0E1D  2E2D               	goto	l5684
  8764  0E1E  034A               	decf	___ftadd@exp1,w
  8765  0E1F  3AFF               	xorlw	255
  8766  0E20  0749               	addwf	___ftadd@exp2,w
  8767  0E21  00C4               	movwf	??___ftadd
  8768  0E22  3019               	movlw	25
  8769  0E23  0244               	subwf	??___ftadd,w
  8770  0E24  1C03               	skipc
  8771  0E25  2E2D               	goto	l5684
  8772  0E26                     l5680:	
  8773  0E26  0841               	movf	___ftadd@f2,w
  8774  0E27  00BE               	movwf	?___ftadd
  8775  0E28  0842               	movf	___ftadd@f2+1,w
  8776  0E29  00BF               	movwf	?___ftadd+1
  8777  0E2A  0843               	movf	___ftadd@f2+2,w
  8778  0E2B  00C0               	movwf	?___ftadd+2
  8779  0E2C  0008               	return
  8780  0E2D                     l5684:	
  8781  0E2D  0849               	movf	___ftadd@exp2,w
  8782  0E2E  1903               	btfsc	3,2
  8783  0E2F  0008               	return
  8784  0E30  084A               	movf	___ftadd@exp1,w
  8785  0E31  0249               	subwf	___ftadd@exp2,w
  8786  0E32  1803               	skipnc
  8787  0E33  2E3C               	goto	l5690
  8788  0E34  0349               	decf	___ftadd@exp2,w
  8789  0E35  3AFF               	xorlw	255
  8790  0E36  074A               	addwf	___ftadd@exp1,w
  8791  0E37  00C4               	movwf	??___ftadd
  8792  0E38  3019               	movlw	25
  8793  0E39  0244               	subwf	??___ftadd,w
  8794  0E3A  1803               	btfsc	3,0
  8795  0E3B  0008               	return
  8796  0E3C                     l5690:	
  8797  0E3C  3006               	movlw	6
  8798  0E3D  00C4               	movwf	??___ftadd
  8799  0E3E  0844               	movf	??___ftadd,w
  8800  0E3F  00C8               	movwf	___ftadd@sign
  8801  0E40  1BC0               	btfsc	___ftadd@f1+2,7
  8802  0E41  17C8               	bsf	___ftadd@sign,7
  8803  0E42  1BC3               	btfsc	___ftadd@f2+2,7
  8804  0E43  1748               	bsf	___ftadd@sign,6
  8805  0E44  17BF               	bsf	___ftadd@f1+1,7
  8806  0E45  30FF               	movlw	255
  8807  0E46  05BE               	andwf	___ftadd@f1,f
  8808  0E47  30FF               	movlw	255
  8809  0E48  05BF               	andwf	___ftadd@f1+1,f
  8810  0E49  3000               	movlw	0
  8811  0E4A  05C0               	andwf	___ftadd@f1+2,f
  8812  0E4B  17C2               	bsf	___ftadd@f2+1,7
  8813  0E4C  30FF               	movlw	255
  8814  0E4D  05C1               	andwf	___ftadd@f2,f
  8815  0E4E  30FF               	movlw	255
  8816  0E4F  05C2               	andwf	___ftadd@f2+1,f
  8817  0E50  3000               	movlw	0
  8818  0E51  05C3               	andwf	___ftadd@f2+2,f
  8819  0E52  0849               	movf	___ftadd@exp2,w
  8820  0E53  024A               	subwf	___ftadd@exp1,w
  8821  0E54  1803               	skipnc
  8822  0E55  2E78               	goto	l5712
  8823  0E56                     l5702:	
  8824  0E56  3001               	movlw	1
  8825  0E57                     u3965:	
  8826  0E57  35C1               	lslf	___ftadd@f2,f
  8827  0E58  0DC2               	rlf	___ftadd@f2+1,f
  8828  0E59  0DC3               	rlf	___ftadd@f2+2,f
  8829  0E5A  0B89               	decfsz	9,f
  8830  0E5B  2E57               	goto	u3965
  8831  0E5C  3001               	movlw	1
  8832  0E5D  02C9               	subwf	___ftadd@exp2,f
  8833  0E5E  0849               	movf	___ftadd@exp2,w
  8834  0E5F  064A               	xorwf	___ftadd@exp1,w
  8835  0E60  1903               	skipnz
  8836  0E61  2E73               	goto	l5710
  8837  0E62  3001               	movlw	1
  8838  0E63  02C8               	subwf	___ftadd@sign,f
  8839  0E64  0848               	movf	___ftadd@sign,w
  8840  0E65  3907               	andlw	7
  8841  0E66  1903               	btfsc	3,2
  8842  0E67  2E73               	goto	l5710
  8843  0E68  2E56               	goto	l5702
  8844  0E69                     l5708:	
  8845  0E69  3001               	movlw	1
  8846  0E6A                     u3995:	
  8847  0E6A  36C0               	lsrf	___ftadd@f1+2,f
  8848  0E6B  0CBF               	rrf	___ftadd@f1+1,f
  8849  0E6C  0CBE               	rrf	___ftadd@f1,f
  8850  0E6D  0B89               	decfsz	9,f
  8851  0E6E  2E6A               	goto	u3995
  8852  0E6F  3001               	movlw	1
  8853  0E70  00C4               	movwf	??___ftadd
  8854  0E71  0844               	movf	??___ftadd,w
  8855  0E72  07CA               	addwf	___ftadd@exp1,f
  8856  0E73                     l5710:	
  8857  0E73  084A               	movf	___ftadd@exp1,w
  8858  0E74  0649               	xorwf	___ftadd@exp2,w
  8859  0E75  1903               	btfsc	3,2
  8860  0E76  2E9D               	goto	l3081
  8861  0E77  2E69               	goto	l5708
  8862  0E78                     l5712:	
  8863  0E78  084A               	movf	___ftadd@exp1,w
  8864  0E79  0249               	subwf	___ftadd@exp2,w
  8865  0E7A  1803               	skipnc
  8866  0E7B  2E9D               	goto	l3081
  8867  0E7C                     l5714:	
  8868  0E7C  3001               	movlw	1
  8869  0E7D                     u4025:	
  8870  0E7D  35BE               	lslf	___ftadd@f1,f
  8871  0E7E  0DBF               	rlf	___ftadd@f1+1,f
  8872  0E7F  0DC0               	rlf	___ftadd@f1+2,f
  8873  0E80  0B89               	decfsz	9,f
  8874  0E81  2E7D               	goto	u4025
  8875  0E82  3001               	movlw	1
  8876  0E83  02CA               	subwf	___ftadd@exp1,f
  8877  0E84  0849               	movf	___ftadd@exp2,w
  8878  0E85  064A               	xorwf	___ftadd@exp1,w
  8879  0E86  1903               	skipnz
  8880  0E87  2E99               	goto	l5722
  8881  0E88  3001               	movlw	1
  8882  0E89  02C8               	subwf	___ftadd@sign,f
  8883  0E8A  0848               	movf	___ftadd@sign,w
  8884  0E8B  3907               	andlw	7
  8885  0E8C  1903               	btfsc	3,2
  8886  0E8D  2E99               	goto	l5722
  8887  0E8E  2E7C               	goto	l5714
  8888  0E8F                     l5720:	
  8889  0E8F  3001               	movlw	1
  8890  0E90                     u4055:	
  8891  0E90  36C3               	lsrf	___ftadd@f2+2,f
  8892  0E91  0CC2               	rrf	___ftadd@f2+1,f
  8893  0E92  0CC1               	rrf	___ftadd@f2,f
  8894  0E93  0B89               	decfsz	9,f
  8895  0E94  2E90               	goto	u4055
  8896  0E95  3001               	movlw	1
  8897  0E96  00C4               	movwf	??___ftadd
  8898  0E97  0844               	movf	??___ftadd,w
  8899  0E98  07C9               	addwf	___ftadd@exp2,f
  8900  0E99                     l5722:	
  8901  0E99  084A               	movf	___ftadd@exp1,w
  8902  0E9A  0649               	xorwf	___ftadd@exp2,w
  8903  0E9B  1D03               	skipz
  8904  0E9C  2E8F               	goto	l5720
  8905  0E9D                     l3081:	
  8906  0E9D  1FC8               	btfss	___ftadd@sign,7
  8907  0E9E  2EAF               	goto	l5726
  8908  0E9F  30FF               	movlw	255
  8909  0EA0  06BE               	xorwf	___ftadd@f1,f
  8910  0EA1  30FF               	movlw	255
  8911  0EA2  06BF               	xorwf	___ftadd@f1+1,f
  8912  0EA3  30FF               	movlw	255
  8913  0EA4  06C0               	xorwf	___ftadd@f1+2,f
  8914  0EA5  3001               	movlw	1
  8915  0EA6  07BE               	addwf	___ftadd@f1,f
  8916  0EA7  3000               	movlw	0
  8917  0EA8  1803               	skipnc
  8918  0EA9  3001               	movlw	1
  8919  0EAA  07BF               	addwf	___ftadd@f1+1,f
  8920  0EAB  3000               	movlw	0
  8921  0EAC  1803               	skipnc
  8922  0EAD  3001               	movlw	1
  8923  0EAE  07C0               	addwf	___ftadd@f1+2,f
  8924  0EAF                     l5726:	
  8925  0EAF  1F48               	btfss	___ftadd@sign,6
  8926  0EB0  2EC1               	goto	l5730
  8927  0EB1  30FF               	movlw	255
  8928  0EB2  06C1               	xorwf	___ftadd@f2,f
  8929  0EB3  30FF               	movlw	255
  8930  0EB4  06C2               	xorwf	___ftadd@f2+1,f
  8931  0EB5  30FF               	movlw	255
  8932  0EB6  06C3               	xorwf	___ftadd@f2+2,f
  8933  0EB7  3001               	movlw	1
  8934  0EB8  07C1               	addwf	___ftadd@f2,f
  8935  0EB9  3000               	movlw	0
  8936  0EBA  1803               	skipnc
  8937  0EBB  3001               	movlw	1
  8938  0EBC  07C2               	addwf	___ftadd@f2+1,f
  8939  0EBD  3000               	movlw	0
  8940  0EBE  1803               	skipnc
  8941  0EBF  3001               	movlw	1
  8942  0EC0  07C3               	addwf	___ftadd@f2+2,f
  8943  0EC1                     l5730:	
  8944  0EC1  01C8               	clrf	___ftadd@sign
  8945  0EC2  083E               	movf	___ftadd@f1,w
  8946  0EC3  07C1               	addwf	___ftadd@f2,f
  8947  0EC4  083F               	movf	___ftadd@f1+1,w
  8948  0EC5  3DC2               	addwfc	___ftadd@f2+1,f
  8949  0EC6  0840               	movf	___ftadd@f1+2,w
  8950  0EC7  3DC3               	addwfc	___ftadd@f2+2,f
  8951  0EC8  1FC3               	btfss	___ftadd@f2+2,7
  8952  0EC9  2EDC               	goto	l5740
  8953  0ECA  30FF               	movlw	255
  8954  0ECB  06C1               	xorwf	___ftadd@f2,f
  8955  0ECC  30FF               	movlw	255
  8956  0ECD  06C2               	xorwf	___ftadd@f2+1,f
  8957  0ECE  30FF               	movlw	255
  8958  0ECF  06C3               	xorwf	___ftadd@f2+2,f
  8959  0ED0  3001               	movlw	1
  8960  0ED1  07C1               	addwf	___ftadd@f2,f
  8961  0ED2  3000               	movlw	0
  8962  0ED3  1803               	skipnc
  8963  0ED4  3001               	movlw	1
  8964  0ED5  07C2               	addwf	___ftadd@f2+1,f
  8965  0ED6  3000               	movlw	0
  8966  0ED7  1803               	skipnc
  8967  0ED8  3001               	movlw	1
  8968  0ED9  07C3               	addwf	___ftadd@f2+2,f
  8969  0EDA  01C8               	clrf	___ftadd@sign
  8970  0EDB  0AC8               	incf	___ftadd@sign,f
  8971  0EDC                     l5740:	
  8972  0EDC  0841               	movf	___ftadd@f2,w
  8973  0EDD  00A0               	movwf	___ftpack@arg
  8974  0EDE  0842               	movf	___ftadd@f2+1,w
  8975  0EDF  00A1               	movwf	___ftpack@arg+1
  8976  0EE0  0843               	movf	___ftadd@f2+2,w
  8977  0EE1  00A2               	movwf	___ftpack@arg+2
  8978  0EE2  084A               	movf	___ftadd@exp1,w
  8979  0EE3  00C4               	movwf	??___ftadd
  8980  0EE4  0844               	movf	??___ftadd,w
  8981  0EE5  00A3               	movwf	___ftpack@exp
  8982  0EE6  0848               	movf	___ftadd@sign,w
  8983  0EE7  00C5               	movwf	??___ftadd+1
  8984  0EE8  0845               	movf	??___ftadd+1,w
  8985  0EE9  00A4               	movwf	___ftpack@sign
  8986  0EEA  3192  22CB         	fcall	___ftpack
  8987  0EEC  0020               	movlb	0	; select bank0
  8988  0EED  0820               	movf	?___ftpack,w
  8989  0EEE  00BE               	movwf	?___ftadd
  8990  0EEF  0821               	movf	?___ftpack+1,w
  8991  0EF0  00BF               	movwf	?___ftadd+1
  8992  0EF1  0822               	movf	?___ftpack+2,w
  8993  0EF2  00C0               	movwf	?___ftadd+2
  8994  0EF3  0008               	return
  8995  0EF4                     __end_of___ftadd:	
  8996                           
  8997                           	psect	text37
  8998  1B00                     __ptext37:	
  8999 ;; *************** function _RF_RxDisable *****************
  9000 ;; Defined at:
  9001 ;;		line 186 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  rf              1    wreg     unsigned char 
  9004 ;; Auto vars:     Size  Location     Type
  9005 ;;  rf              1    4[BANK0 ] unsigned char 
  9006 ;; Return value:  Size  Location     Type
  9007 ;;		None               void
  9008 ;; Registers used:
  9009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9010 ;; Tracked objects:
  9011 ;;		On entry : 0/0
  9012 ;;		On exit  : 0/0
  9013 ;;		Unchanged: 0/0
  9014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;Total ram usage:        1 bytes
  9020 ;; Hardware stack levels used:    1
  9021 ;; Hardware stack levels required when called:    6
  9022 ;; This function calls:
  9023 ;;		_CC2500_WriteCommand
  9024 ;;		_RfPointSelect
  9025 ;;		_setINT_GO
  9026 ;; This function is called by:
  9027 ;;		_setRF_Main
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           
  9032                           ;psect for function _RF_RxDisable
  9033  1B00                     _RF_RxDisable:	
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9037                           ;RF_RxDisable@rf stored from wreg
  9038  1B00  0020               	movlb	0	; select bank0
  9039  1B01  00A4               	movwf	RF_RxDisable@rf
  9040                           
  9041                           ;RF_Control_B1.c: 187: RfPointSelect(rf);
  9042  1B02  0824               	movf	RF_RxDisable@rf,w
  9043  1B03  31A6  2662  319B   	fcall	_RfPointSelect
  9044                           
  9045                           ;RF_Control_B1.c: 189: if (RF->RxStatus) {
  9046  1B06  087A               	movf	_RF,w
  9047  1B07  0086               	movwf	6
  9048  1B08  0187               	clrf	7
  9049  1B09  1D81               	btfss	1,3
  9050  1B0A  0008               	return
  9051                           
  9052                           ;RF_Control_B1.c: 190: RF->RxStatus = 0;
  9053  1B0B  087A               	movf	_RF,w
  9054  1B0C  0086               	movwf	6
  9055  1B0D  0187               	clrf	7
  9056  1B0E  1181               	bcf	1,3
  9057                           
  9058                           ;RF_Control_B1.c: 191: RF->ReceiveGO = 0;
  9059  1B0F  087A               	movf	_RF,w
  9060  1B10  0086               	movwf	6
  9061  1B11  0187               	clrf	7
  9062  1B12  1081               	bcf	1,1
  9063                           
  9064                           ;RF_Control_B1.c: 192: RF->DebounceTime = 0;
  9065  1B13  0A7A               	incf	_RF,w
  9066  1B14  0086               	movwf	6
  9067  1B15  0187               	clrf	7
  9068  1B16  0181               	clrf	1
  9069                           
  9070                           ;RF_Control_B1.c: 193: RF->Debounce = 0;
  9071  1B17  087A               	movf	_RF,w
  9072  1B18  0086               	movwf	6
  9073  1B19  0187               	clrf	7
  9074  1B1A  1281               	bcf	1,5
  9075                           
  9076                           ;RF_Control_B1.c: 194: CC2500_WriteCommand(0x36);
  9077  1B1B  3036               	movlw	54
  9078  1B1C  31A7  2790  319B   	fcall	_CC2500_WriteCommand
  9079                           
  9080                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x3A);
  9081  1B1F  303A               	movlw	58
  9082  1B20  31A7  2790  319B   	fcall	_CC2500_WriteCommand
  9083                           
  9084                           ;RF_Control_B1.c: 196: setINT_GO(0);
  9085  1B23  3000               	movlw	0
  9086  1B24  31A6  2623         	fcall	_setINT_GO
  9087  1B26  0008               	return
  9088  1B27                     __end_of_RF_RxDisable:	
  9089                           
  9090                           	psect	text38
  9091  1E9F                     __ptext38:	
  9092 ;; *************** function _CC2500_TxData *****************
  9093 ;; Defined at:
  9094 ;;		line 32 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;		None               void
  9101 ;; Registers used:
  9102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9112 ;;Total ram usage:        2 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    6
  9115 ;; This function calls:
  9116 ;;		_CC2500_WriteByte
  9117 ;;		_CC2500_WriteCommand
  9118 ;; This function is called by:
  9119 ;;		_setRF_Main
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function _CC2500_TxData
  9125  1E9F                     _CC2500_TxData:	
  9126                           
  9127                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9128                           ;CC2500_B1.c: 35: RC4 = 0;
  9129                           
  9130                           ;incstack = 0
  9131                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9132  1E9F  0020               	movlb	0	; select bank0
  9133  1EA0  120E               	bcf	14,4	;volatile
  9134                           
  9135                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9136  1EA1  307F               	movlw	127
  9137  1EA2  00A4               	movwf	??_CC2500_TxData
  9138  1EA3  0824               	movf	??_CC2500_TxData,w
  9139  1EA4  0021               	movlb	1	; select bank1
  9140  1EA5  00BF               	movwf	_SPI0Buffer^(0+128)
  9141  1EA6                     l271:	
  9142                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9143                           
  9144  1EA6  0020               	movlb	0	; select bank0
  9145  1EA7  190E               	btfsc	14,2	;volatile
  9146  1EA8  2EA6               	goto	l271
  9147                           
  9148                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9149  1EA9  3198  20FB  319E   	fcall	_CC2500_WriteByte
  9150                           
  9151                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9152  1EAC  0021               	movlb	1	; select bank1
  9153  1EAD  0840               	movf	_Tx_Length^(0+128),w
  9154  1EAE  0020               	movlb	0	; select bank0
  9155  1EAF  00A4               	movwf	??_CC2500_TxData
  9156  1EB0  0824               	movf	??_CC2500_TxData,w
  9157  1EB1  0021               	movlb	1	; select bank1
  9158  1EB2  00BF               	movwf	_SPI0Buffer^(0+128)
  9159                           
  9160                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9161  1EB3  3198  20FB  319E   	fcall	_CC2500_WriteByte
  9162                           
  9163                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9164  1EB6  0020               	movlb	0	; select bank0
  9165  1EB7  01A5               	clrf	CC2500_TxData@loop_e
  9166  1EB8                     l6450:	
  9167  1EB8  0021               	movlb	1	; select bank1
  9168  1EB9  0840               	movf	_Tx_Length^(0+128),w
  9169  1EBA  0020               	movlb	0	; select bank0
  9170  1EBB  0225               	subwf	CC2500_TxData@loop_e,w
  9171  1EBC  1803               	btfsc	3,0
  9172  1EBD  2ED0               	goto	l276
  9173                           
  9174                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9175  1EBE  0825               	movf	CC2500_TxData@loop_e,w
  9176  1EBF  3EA0               	addlw	_RF_Data& (0+255)
  9177  1EC0  0086               	movwf	6
  9178  1EC1  0187               	clrf	7
  9179  1EC2  0801               	movf	1,w
  9180  1EC3  00A4               	movwf	??_CC2500_TxData
  9181  1EC4  0824               	movf	??_CC2500_TxData,w
  9182  1EC5  0021               	movlb	1	; select bank1
  9183  1EC6  00BF               	movwf	_SPI0Buffer^(0+128)
  9184                           
  9185                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9186  1EC7  3198  20FB  319E   	fcall	_CC2500_WriteByte
  9187  1ECA  3001               	movlw	1
  9188  1ECB  0020               	movlb	0	; select bank0
  9189  1ECC  00A4               	movwf	??_CC2500_TxData
  9190  1ECD  0824               	movf	??_CC2500_TxData,w
  9191  1ECE  07A5               	addwf	CC2500_TxData@loop_e,f
  9192  1ECF  2EB8               	goto	l6450
  9193  1ED0                     l276:	
  9194                           
  9195                           ;CC2500_B1.c: 44: }
  9196                           ;CC2500_B1.c: 45: RC4 = 1;
  9197  1ED0  160E               	bsf	14,4	;volatile
  9198                           
  9199                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9200  1ED1  3035               	movlw	53
  9201  1ED2  31A7  2790  319E   	fcall	_CC2500_WriteCommand
  9202  1ED5                     l277:	
  9203                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9204                           
  9205  1ED5  0020               	movlb	0	; select bank0
  9206  1ED6  1C0D               	btfss	13,0	;volatile
  9207  1ED7  2ED5               	goto	l277
  9208  1ED8                     l280:	
  9209                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9210                           
  9211  1ED8  180D               	btfsc	13,0	;volatile
  9212  1ED9  2ED8               	goto	l280
  9213                           
  9214                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9215  1EDA  3036               	movlw	54
  9216  1EDB  31A7  2790  319E   	fcall	_CC2500_WriteCommand
  9217                           
  9218                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9219  1EDE  303B               	movlw	59
  9220  1EDF  31A7  2790         	fcall	_CC2500_WriteCommand
  9221                           
  9222                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9223  1EE1  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9224  1EE2  0008               	return
  9225  1EE3                     __end_of_CC2500_TxData:	
  9226                           
  9227                           	psect	text39
  9228  132C                     __ptext39:	
  9229 ;; *************** function _CC2500_RxData *****************
  9230 ;; Defined at:
  9231 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        2 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    6
  9252 ;; This function calls:
  9253 ;;		_CC2500_ReadByte
  9254 ;;		_CC2500_ReadStatus
  9255 ;;		_CC2500_WriteByte
  9256 ;;		_CC2500_WriteCommand
  9257 ;;		_setRF_RxStatus
  9258 ;; This function is called by:
  9259 ;;		_setRF_Main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           
  9264                           ;psect for function _CC2500_RxData
  9265  132C                     _CC2500_RxData:	
  9266                           
  9267                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9268                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9269                           
  9270                           ;incstack = 0
  9271                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9272  132C  0020               	movlb	0	; select bank0
  9273  132D  180D               	btfsc	13,0	;volatile
  9274  132E                     l287:	
  9275                           ;CC2500_B1.c: 63: {
  9276                           ;CC2500_B1.c: 64: while (RB0 == 1);
  9277                           
  9278  132E  180D               	btfsc	13,0	;volatile
  9279  132F  2B2E               	goto	l287
  9280                           
  9281                           ;CC2500_B1.c: 65: }
  9282                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9283  1330  303B               	movlw	59
  9284  1331  3199  217C  3193   	fcall	_CC2500_ReadStatus
  9285                           
  9286                           ;CC2500_B1.c: 67: if (s_data != 0)
  9287  1334  0021               	movlb	1	; select bank1
  9288  1335  0843               	movf	_s_data^(0+128),w
  9289  1336  1903               	btfsc	3,2
  9290  1337  2B82               	goto	l8370
  9291                           
  9292                           ;CC2500_B1.c: 69: {
  9293                           ;CC2500_B1.c: 70: RC4 = 0;
  9294  1338  0020               	movlb	0	; select bank0
  9295  1339  120E               	bcf	14,4	;volatile
  9296                           
  9297                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  9298  133A  30FF               	movlw	255
  9299  133B  00A4               	movwf	??_CC2500_RxData
  9300  133C  0824               	movf	??_CC2500_RxData,w
  9301  133D  0021               	movlb	1	; select bank1
  9302  133E  00BF               	movwf	_SPI0Buffer^(0+128)
  9303  133F                     l291:	
  9304                           ;CC2500_B1.c: 72: while (RC2 == 1);
  9305                           
  9306  133F  0020               	movlb	0	; select bank0
  9307  1340  190E               	btfsc	14,2	;volatile
  9308  1341  2B3F               	goto	l291
  9309                           
  9310                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9311  1342  3198  20FB  3193   	fcall	_CC2500_WriteByte
  9312                           
  9313                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9314  1345  3199  21B3  3193   	fcall	_CC2500_ReadByte
  9315                           
  9316                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  9317  1348  0021               	movlb	1	; select bank1
  9318  1349  083F               	movf	_SPI0Buffer^(0+128),w
  9319  134A  0020               	movlb	0	; select bank0
  9320  134B  00A4               	movwf	??_CC2500_RxData
  9321  134C  0824               	movf	??_CC2500_RxData,w
  9322  134D  0021               	movlb	1	; select bank1
  9323  134E  00BE               	movwf	_Rx_Length^(0+128)
  9324                           
  9325                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9326  134F  0020               	movlb	0	; select bank0
  9327  1350  01A5               	clrf	CC2500_RxData@loop_f
  9328  1351                     l8356:	
  9329  1351  0021               	movlb	1	; select bank1
  9330  1352  083E               	movf	_Rx_Length^(0+128),w
  9331  1353  0020               	movlb	0	; select bank0
  9332  1354  0225               	subwf	CC2500_RxData@loop_f,w
  9333  1355  1803               	btfsc	3,0
  9334  1356  2B69               	goto	l8358
  9335                           
  9336                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  9337  1357  3199  21B3  3193   	fcall	_CC2500_ReadByte
  9338                           
  9339                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  9340  135A  0021               	movlb	1	; select bank1
  9341  135B  083F               	movf	_SPI0Buffer^(0+128),w
  9342  135C  0020               	movlb	0	; select bank0
  9343  135D  00A4               	movwf	??_CC2500_RxData
  9344  135E  0825               	movf	CC2500_RxData@loop_f,w
  9345  135F  3EA0               	addlw	_RF_Data& (0+255)
  9346  1360  0086               	movwf	6
  9347  1361  0187               	clrf	7
  9348  1362  0824               	movf	??_CC2500_RxData,w
  9349  1363  0081               	movwf	1
  9350  1364  3001               	movlw	1
  9351  1365  00A4               	movwf	??_CC2500_RxData
  9352  1366  0824               	movf	??_CC2500_RxData,w
  9353  1367  07A5               	addwf	CC2500_RxData@loop_f,f
  9354  1368  2B51               	goto	l8356
  9355  1369                     l8358:	
  9356                           
  9357                           ;CC2500_B1.c: 80: }
  9358                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  9359  1369  3199  21B3  3193   	fcall	_CC2500_ReadByte
  9360                           
  9361                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  9362  136C  0021               	movlb	1	; select bank1
  9363  136D  083F               	movf	_SPI0Buffer^(0+128),w
  9364  136E  0020               	movlb	0	; select bank0
  9365  136F  00A4               	movwf	??_CC2500_RxData
  9366  1370  0824               	movf	??_CC2500_RxData,w
  9367  1371  0021               	movlb	1	; select bank1
  9368  1372  00BD               	movwf	_RSSI^(0+128)
  9369                           
  9370                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  9371  1373  3199  21B3  3193   	fcall	_CC2500_ReadByte
  9372                           
  9373                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  9374  1376  0021               	movlb	1	; select bank1
  9375  1377  083F               	movf	_SPI0Buffer^(0+128),w
  9376  1378  0020               	movlb	0	; select bank0
  9377  1379  00A4               	movwf	??_CC2500_RxData
  9378  137A  0824               	movf	??_CC2500_RxData,w
  9379  137B  0021               	movlb	1	; select bank1
  9380  137C  00B7               	movwf	_CRC^(0+128)
  9381                           
  9382                           ;CC2500_B1.c: 85: RC4 = 1;
  9383  137D  0020               	movlb	0	; select bank0
  9384  137E  160E               	bsf	14,4	;volatile
  9385                           
  9386                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  9387  137F  0021               	movlb	1	; select bank1
  9388  1380  1BB7               	btfsc	_CRC^(0+128),7
  9389                           
  9390                           ;CC2500_B1.c: 87: Receive_OK = 1;
  9391  1381  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9392  1382                     l8370:	
  9393                           
  9394                           ;CC2500_B1.c: 88: }
  9395                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  9396  1382  3036               	movlw	54
  9397  1383  31A7  2790  3193   	fcall	_CC2500_WriteCommand
  9398                           
  9399                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  9400  1386  303A               	movlw	58
  9401  1387  31A7  2790  3193   	fcall	_CC2500_WriteCommand
  9402                           
  9403                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  9404  138A  0020               	movlb	0	; select bank0
  9405  138B  01A2               	clrf	setRF_RxStatus@command
  9406  138C  3001               	movlw	1
  9407  138D  31A7  2738         	fcall	_setRF_RxStatus
  9408  138F  0008               	return
  9409  1390                     __end_of_CC2500_RxData:	
  9410                           
  9411                           	psect	text40
  9412  2738                     __ptext40:	
  9413 ;; *************** function _setRF_RxStatus *****************
  9414 ;; Defined at:
  9415 ;;		line 42 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;  rf              1    wreg     unsigned char 
  9418 ;;  command         1    2[BANK0 ] unsigned char 
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;  rf              1    3[BANK0 ] unsigned char 
  9421 ;; Return value:  Size  Location     Type
  9422 ;;		None               void
  9423 ;; Registers used:
  9424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9430 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;Total ram usage:        2 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    5
  9437 ;; This function calls:
  9438 ;;		_RfPointSelect
  9439 ;; This function is called by:
  9440 ;;		_CC2500_RxData
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function _setRF_RxStatus
  9446  2738                     _setRF_RxStatus:	
  9447                           
  9448                           ;incstack = 0
  9449                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9450                           ;setRF_RxStatus@rf stored from wreg
  9451  2738  0020               	movlb	0	; select bank0
  9452  2739  00A3               	movwf	setRF_RxStatus@rf
  9453                           
  9454                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  9455  273A  0823               	movf	setRF_RxStatus@rf,w
  9456  273B  31A6  2662         	fcall	_RfPointSelect
  9457                           
  9458                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  9459  273D  087A               	movf	_RF,w
  9460  273E  0086               	movwf	6
  9461  273F  0187               	clrf	7
  9462  2740  0020               	movlb	0	; select bank0
  9463  2741  0822               	movf	setRF_RxStatus@command,w
  9464  2742  1181               	bcf	1,3
  9465  2743  1D03               	skipz
  9466  2744  1581               	bsf	1,3
  9467  2745  0008               	return
  9468  2746                     __end_of_setRF_RxStatus:	
  9469                           
  9470                           	psect	text41
  9471  197C                     __ptext41:	
  9472 ;; *************** function _CC2500_ReadStatus *****************
  9473 ;; Defined at:
  9474 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;  status_addr     1    wreg     unsigned char 
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9479 ;; Return value:  Size  Location     Type
  9480 ;;		None               void
  9481 ;; Registers used:
  9482 ;;		wreg, status,2, status,0, pclath, cstack
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;Total ram usage:        2 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; Hardware stack levels required when called:    5
  9495 ;; This function calls:
  9496 ;;		_CC2500_ReadByte
  9497 ;;		_CC2500_WriteByte
  9498 ;; This function is called by:
  9499 ;;		_CC2500_RxData
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _CC2500_ReadStatus
  9505  197C                     _CC2500_ReadStatus:	
  9506                           
  9507                           ;incstack = 0
  9508                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  9509                           ;CC2500_ReadStatus@status_addr stored from wreg
  9510  197C  0020               	movlb	0	; select bank0
  9511  197D  00A3               	movwf	CC2500_ReadStatus@status_addr
  9512                           
  9513                           ;CC2500_B1.c: 264: RC4 = 0;
  9514  197E  120E               	bcf	14,4	;volatile
  9515                           
  9516                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  9517  197F  0823               	movf	CC2500_ReadStatus@status_addr,w
  9518  1980  3EC0               	addlw	192
  9519  1981  00A2               	movwf	??_CC2500_ReadStatus
  9520  1982  0822               	movf	??_CC2500_ReadStatus,w
  9521  1983  0021               	movlb	1	; select bank1
  9522  1984  00BF               	movwf	_SPI0Buffer^(0+128)
  9523  1985                     l367:	
  9524                           ;CC2500_B1.c: 267: while (RC2 == 1);
  9525                           
  9526  1985  0020               	movlb	0	; select bank0
  9527  1986  190E               	btfsc	14,2	;volatile
  9528  1987  2985               	goto	l367
  9529                           
  9530                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  9531  1988  3198  20FB  3199   	fcall	_CC2500_WriteByte
  9532                           
  9533                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  9534  198B  3199  21B3         	fcall	_CC2500_ReadByte
  9535                           
  9536                           ;CC2500_B1.c: 271: RC4 = 1;
  9537  198D  0020               	movlb	0	; select bank0
  9538  198E  160E               	bsf	14,4	;volatile
  9539                           
  9540                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  9541  198F  0021               	movlb	1	; select bank1
  9542  1990  083F               	movf	_SPI0Buffer^(0+128),w
  9543  1991  0020               	movlb	0	; select bank0
  9544  1992  00A2               	movwf	??_CC2500_ReadStatus
  9545  1993  0822               	movf	??_CC2500_ReadStatus,w
  9546  1994  0021               	movlb	1	; select bank1
  9547  1995  00C3               	movwf	_s_data^(0+128)
  9548  1996  0008               	return
  9549  1997                     __end_of_CC2500_ReadStatus:	
  9550                           
  9551                           	psect	text42
  9552  19B3                     __ptext42:	
  9553 ;; *************** function _CC2500_ReadByte *****************
  9554 ;; Defined at:
  9555 ;;		line 207 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;		None
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;		None               void
  9562 ;; Registers used:
  9563 ;;		wreg, status,2, status,0
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:        2 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    4
  9576 ;; This function calls:
  9577 ;;		Nothing
  9578 ;; This function is called by:
  9579 ;;		_CC2500_RxData
  9580 ;;		_CC2500_ReadStatus
  9581 ;;		_CC2500_ReadREG
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           
  9586                           ;psect for function _CC2500_ReadByte
  9587  19B3                     _CC2500_ReadByte:	
  9588                           
  9589                           ;CC2500_B1.c: 208: unsigned char loop_b;
  9590                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  9591                           
  9592                           ;incstack = 0
  9593                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9594  19B3  0020               	movlb	0	; select bank0
  9595  19B4  01A1               	clrf	CC2500_ReadByte@loop_b
  9596  19B5                     L9:	
  9597  19B5  3008               	movlw	8
  9598  19B6  0221               	subwf	CC2500_ReadByte@loop_b,w
  9599  19B7  1803               	btfsc	3,0
  9600  19B8  0008               	return
  9601                           
  9602                           ;CC2500_B1.c: 210: RC1 = 1;
  9603  19B9  148E               	bsf	14,1	;volatile
  9604                           
  9605                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  9606  19BA  1003               	clrc
  9607  19BB  0021               	movlb	1	; select bank1
  9608  19BC  0DBF               	rlf	_SPI0Buffer^(0+128),f
  9609                           
  9610                           ;CC2500_B1.c: 212: if (RC2 == 1)
  9611  19BD  0020               	movlb	0	; select bank0
  9612  19BE  1D0E               	btfss	14,2	;volatile
  9613  19BF  29C3               	goto	l6190
  9614                           
  9615                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  9616  19C0  0021               	movlb	1	; select bank1
  9617  19C1  143F               	bsf	_SPI0Buffer^(0+128),0
  9618  19C2  29C9               	goto	l6192
  9619  19C3                     l6190:	
  9620                           
  9621                           ;CC2500_B1.c: 214: else
  9622                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  9623  19C3  30FE               	movlw	254
  9624  19C4  0020               	movlb	0	; select bank0
  9625  19C5  00A0               	movwf	??_CC2500_ReadByte
  9626  19C6  0820               	movf	??_CC2500_ReadByte,w
  9627  19C7  0021               	movlb	1	; select bank1
  9628  19C8  05BF               	andwf	_SPI0Buffer^(0+128),f
  9629  19C9                     l6192:	
  9630                           
  9631                           ;CC2500_B1.c: 216: RC1 = 0;
  9632  19C9  0020               	movlb	0	; select bank0
  9633  19CA  108E               	bcf	14,1	;volatile
  9634  19CB  3001               	movlw	1
  9635  19CC  00A0               	movwf	??_CC2500_ReadByte
  9636  19CD  0820               	movf	??_CC2500_ReadByte,w
  9637  19CE  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9638  19CF  29B5               	goto	L9
  9639  19D0                     __end_of_CC2500_ReadByte:	
  9640                           
  9641                           	psect	text43
  9642  25CC                     __ptext43:	
  9643 ;; *************** function _RF_Initialization *****************
  9644 ;; Defined at:
  9645 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9646 ;; Parameters:    Size  Location     Type
  9647 ;;		None
  9648 ;; Auto vars:     Size  Location     Type
  9649 ;;		None
  9650 ;; Return value:  Size  Location     Type
  9651 ;;		None               void
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0, pclath, cstack
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;Total ram usage:        0 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    5
  9666 ;; This function calls:
  9667 ;;		_setRF_Initialization
  9668 ;; This function is called by:
  9669 ;;		_main
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _RF_Initialization
  9675  25CC                     _RF_Initialization:	
  9676                           
  9677                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  9678                           
  9679                           ;incstack = 0
  9680                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9681  25CC  3001               	movlw	1
  9682  25CD  31A6  260B         	fcall	_setRF_Initialization
  9683  25CF  0008               	return
  9684  25D0                     __end_of_RF_Initialization:	
  9685                           
  9686                           	psect	text44
  9687  260B                     __ptext44:	
  9688 ;; *************** function _setRF_Initialization *****************
  9689 ;; Defined at:
  9690 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  rf              1    wreg     unsigned char 
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;  rf              1    0[COMMON] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;		None               void
  9697 ;; Registers used:
  9698 ;;		wreg
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;Total ram usage:        1 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    4
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_RF_Initialization
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           
  9719                           ;psect for function _setRF_Initialization
  9720  260B                     _setRF_Initialization:	
  9721                           
  9722                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _setRF_Initialization: [wreg]
  9726  260B  3015               	movlw	21
  9727  260C  0020               	movlb	0	; select bank0
  9728  260D  00A0               	movwf	??_setRF_Initialization
  9729  260E  0820               	movf	??_setRF_Initialization,w
  9730  260F  0021               	movlb	1	; select bank1
  9731  2610  00C0               	movwf	_Tx_Length^(0+128)
  9732  2611  0008               	return
  9733  2612                     __end_of_setRF_Initialization:	
  9734                           
  9735                           	psect	text45
  9736  25AF                     __ptext45:	
  9737 ;; *************** function _PowerFault_Main *****************
  9738 ;; Defined at:
  9739 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  9740 ;; Parameters:    Size  Location     Type
  9741 ;;		None
  9742 ;; Auto vars:     Size  Location     Type
  9743 ;;		None
  9744 ;; Return value:  Size  Location     Type
  9745 ;;		None               void
  9746 ;; Registers used:
  9747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9748 ;; Tracked objects:
  9749 ;;		On entry : 0/0
  9750 ;;		On exit  : 0/0
  9751 ;;		Unchanged: 0/0
  9752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;Total ram usage:        0 bytes
  9758 ;; Hardware stack levels used:    1
  9759 ;; Hardware stack levels required when called:   10
  9760 ;; This function calls:
  9761 ;;		_setPowerFault_Main
  9762 ;; This function is called by:
  9763 ;;		_main
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           
  9768                           ;psect for function _PowerFault_Main
  9769  25AF                     _PowerFault_Main:	
  9770                           
  9771                           ;PowerFault_B1.c: 25: setPowerFault_Main();
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9775  25AF  318E  26F4         	fcall	_setPowerFault_Main
  9776  25B1  0008               	return
  9777  25B2                     __end_of_PowerFault_Main:	
  9778                           
  9779                           	psect	text46
  9780  0EF4                     __ptext46:	
  9781 ;; *************** function _setPowerFault_Main *****************
  9782 ;; Defined at:
  9783 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;		None               void
  9790 ;; Registers used:
  9791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;Total ram usage:        2 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:    9
  9804 ;; This function calls:
  9805 ;;		_getLoad_Safe
  9806 ;;		_getTemp_Safe
  9807 ;;		_setPowerFault_Exceptions
  9808 ;; This function is called by:
  9809 ;;		_PowerFault_Main
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           
  9814                           ;psect for function _setPowerFault_Main
  9815  0EF4                     _setPowerFault_Main:	
  9816                           
  9817                           ;PowerFault_B1.c: 63: if(PF->Enable)
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9821  0EF4  0879               	movf	_PF,w
  9822  0EF5  0086               	movwf	6
  9823  0EF6  3001               	movlw	1	; select bank2/3
  9824  0EF7  0087               	movwf	7
  9825  0EF8  1C01               	btfss	1,0
  9826  0EF9  0008               	return
  9827                           
  9828                           ;PowerFault_B1.c: 64: {
  9829                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
  9830  0EFA  0879               	movf	_PF,w
  9831  0EFB  0086               	movwf	6
  9832  0EFC  3001               	movlw	1	; select bank2/3
  9833  0EFD  0087               	movwf	7
  9834  0EFE  1981               	btfsc	1,3
  9835  0EFF  2F44               	goto	l8866
  9836                           
  9837                           ;PowerFault_B1.c: 66: {
  9838                           ;PowerFault_B1.c: 67: PF->Time++;
  9839  0F00  0879               	movf	_PF,w
  9840  0F01  3E02               	addlw	2
  9841  0F02  0086               	movwf	6
  9842  0F03  3001               	movlw	1	; select bank2/3
  9843  0F04  0087               	movwf	7
  9844  0F05  3001               	movlw	1
  9845  0F06  0781               	addwf	1,f
  9846  0F07  3141               	addfsr 1,1
  9847  0F08  1803               	skipnc
  9848  0F09  0A81               	incf	1,f
  9849                           
  9850                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
  9851  0F0A  0879               	movf	_PF,w
  9852  0F0B  3E02               	addlw	2
  9853  0F0C  0086               	movwf	6
  9854  0F0D  3001               	movlw	1	; select bank2/3
  9855  0F0E  0087               	movwf	7
  9856  0F0F  3F40               	moviw [0]fsr1
  9857  0F10  0020               	movlb	0	; select bank0
  9858  0F11  00AD               	movwf	??_setPowerFault_Main
  9859  0F12  3F41               	moviw [1]fsr1
  9860  0F13  00AE               	movwf	??_setPowerFault_Main+1
  9861  0F14  3002               	movlw	2
  9862  0F15  022E               	subwf	??_setPowerFault_Main+1,w
  9863  0F16  30BC               	movlw	188
  9864  0F17  1903               	skipnz
  9865  0F18  022D               	subwf	??_setPowerFault_Main,w
  9866  0F19  1C03               	skipc
  9867  0F1A  0008               	return
  9868                           
  9869                           ;PowerFault_B1.c: 69: {
  9870                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
  9871  0F1B  31A6  2683  318E   	fcall	_getLoad_Safe
  9872  0F1E  3A00               	xorlw	0
  9873  0F1F  1903               	skipnz
  9874  0F20  2F3A               	goto	l8864
  9875  0F21  31A5  25FD  318E   	fcall	_getTemp_Safe
  9876  0F24  3A00               	xorlw	0
  9877  0F25  1903               	skipnz
  9878  0F26  2F3A               	goto	l8864
  9879                           
  9880                           ;PowerFault_B1.c: 71: {
  9881                           ;PowerFault_B1.c: 72: PF->Time=0;
  9882  0F27  0879               	movf	_PF,w
  9883  0F28  3E02               	addlw	2
  9884  0F29  0086               	movwf	6
  9885  0F2A  3001               	movlw	1	; select bank2/3
  9886  0F2B  0087               	movwf	7
  9887  0F2C  3000               	movlw	0
  9888  0F2D  3FC0               	movwi [0]fsr1
  9889  0F2E  3FC1               	movwi [1]fsr1
  9890                           
  9891                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
  9892  0F2F  0879               	movf	_PF,w
  9893  0F30  0086               	movwf	6
  9894  0F31  3001               	movlw	1	; select bank2/3
  9895  0F32  0087               	movwf	7
  9896  0F33  1581               	bsf	1,3
  9897                           
  9898                           ;PowerFault_B1.c: 74: PF->Safe=0;
  9899  0F34  0879               	movf	_PF,w
  9900  0F35  0086               	movwf	6
  9901  0F36  3001               	movlw	1	; select bank2/3
  9902  0F37  0087               	movwf	7
  9903  0F38  1101               	bcf	1,2
  9904                           
  9905                           ;PowerFault_B1.c: 75: }
  9906  0F39  0008               	return
  9907  0F3A                     l8864:	
  9908                           
  9909                           ;PowerFault_B1.c: 76: else
  9910                           ;PowerFault_B1.c: 77: {
  9911                           ;PowerFault_B1.c: 78: PF->Time=700;
  9912  0F3A  0879               	movf	_PF,w
  9913  0F3B  3E02               	addlw	2
  9914  0F3C  0086               	movwf	6
  9915  0F3D  3001               	movlw	1	; select bank2/3
  9916  0F3E  0087               	movwf	7
  9917  0F3F  30BC               	movlw	188
  9918  0F40  3FC0               	movwi [0]fsr1
  9919  0F41  3002               	movlw	2
  9920  0F42  3FC1               	movwi [1]fsr1
  9921                           
  9922                           ;PowerFault_B1.c: 79: }
  9923                           ;PowerFault_B1.c: 80: }
  9924                           ;PowerFault_B1.c: 81: }
  9925  0F43  0008               	return
  9926  0F44                     l8866:	
  9927                           
  9928                           ;PowerFault_B1.c: 82: else
  9929                           ;PowerFault_B1.c: 83: {
  9930                           ;PowerFault_B1.c: 84: PF->Time++;
  9931  0F44  0879               	movf	_PF,w
  9932  0F45  3E02               	addlw	2
  9933  0F46  0086               	movwf	6
  9934  0F47  3001               	movlw	1	; select bank2/3
  9935  0F48  0087               	movwf	7
  9936  0F49  3001               	movlw	1
  9937  0F4A  0781               	addwf	1,f
  9938  0F4B  3141               	addfsr 1,1
  9939  0F4C  1803               	skipnc
  9940  0F4D  0A81               	incf	1,f
  9941                           
  9942                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
  9943  0F4E  0879               	movf	_PF,w
  9944  0F4F  3E02               	addlw	2
  9945  0F50  0086               	movwf	6
  9946  0F51  3001               	movlw	1	; select bank2/3
  9947  0F52  0087               	movwf	7
  9948  0F53  3F40               	moviw [0]fsr1
  9949  0F54  0020               	movlb	0	; select bank0
  9950  0F55  00AD               	movwf	??_setPowerFault_Main
  9951  0F56  3F41               	moviw [1]fsr1
  9952  0F57  00AE               	movwf	??_setPowerFault_Main+1
  9953  0F58  3000               	movlw	0
  9954  0F59  022E               	subwf	??_setPowerFault_Main+1,w
  9955  0F5A  3002               	movlw	2
  9956  0F5B  1903               	skipnz
  9957  0F5C  022D               	subwf	??_setPowerFault_Main,w
  9958  0F5D  1C03               	skipc
  9959  0F5E  0008               	return
  9960                           
  9961                           ;PowerFault_B1.c: 86: {
  9962                           ;PowerFault_B1.c: 87: PF->Time=0;
  9963  0F5F  0879               	movf	_PF,w
  9964  0F60  3E02               	addlw	2
  9965  0F61  0086               	movwf	6
  9966  0F62  3001               	movlw	1	; select bank2/3
  9967  0F63  0087               	movwf	7
  9968  0F64  3000               	movlw	0
  9969  0F65  3FC0               	movwi [0]fsr1
  9970  0F66  3FC1               	movwi [1]fsr1
  9971                           
  9972                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
  9973  0F67  0879               	movf	_PF,w
  9974  0F68  0086               	movwf	6
  9975  0F69  3001               	movlw	1	; select bank2/3
  9976  0F6A  0087               	movwf	7
  9977  0F6B  1181               	bcf	1,3
  9978                           
  9979                           ;PowerFault_B1.c: 90: if(PF->ERROR)
  9980  0F6C  0879               	movf	_PF,w
  9981  0F6D  0086               	movwf	6
  9982  0F6E  3001               	movlw	1	; select bank2/3
  9983  0F6F  0087               	movwf	7
  9984  0F70  1C81               	btfss	1,1
  9985  0F71  2FAC               	goto	l8886
  9986                           
  9987                           ;PowerFault_B1.c: 91: {
  9988                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
  9989  0F72  0879               	movf	_PF,w
  9990  0F73  3E04               	addlw	4
  9991  0F74  0086               	movwf	6
  9992  0F75  3001               	movlw	1	; select bank2/3
  9993  0F76  0087               	movwf	7
  9994  0F77  3F40               	moviw [0]fsr1
  9995  0F78  00AD               	movwf	??_setPowerFault_Main
  9996  0F79  3F41               	moviw [1]fsr1
  9997  0F7A  00AE               	movwf	??_setPowerFault_Main+1
  9998  0F7B  3001               	movlw	1
  9999  0F7C  022E               	subwf	??_setPowerFault_Main+1,w
 10000  0F7D  3091               	movlw	145
 10001  0F7E  1903               	skipnz
 10002  0F7F  022D               	subwf	??_setPowerFault_Main,w
 10003  0F80  1803               	skipnc
 10004  0F81  2FE7               	goto	l8898
 10005  0F82  0879               	movf	_PF,w
 10006  0F83  3E04               	addlw	4
 10007  0F84  0086               	movwf	6
 10008  0F85  3001               	movlw	1	; select bank2/3
 10009  0F86  0087               	movwf	7
 10010  0F87  3F40               	moviw [0]fsr1
 10011  0F88  00AD               	movwf	??_setPowerFault_Main
 10012  0F89  3F41               	moviw [1]fsr1
 10013  0F8A  00AE               	movwf	??_setPowerFault_Main+1
 10014  0F8B  3000               	movlw	0
 10015  0F8C  022E               	subwf	??_setPowerFault_Main+1,w
 10016  0F8D  30C8               	movlw	200
 10017  0F8E  1903               	skipnz
 10018  0F8F  022D               	subwf	??_setPowerFault_Main,w
 10019  0F90  1C03               	skipc
 10020  0F91  2FE7               	goto	l8898
 10021                           
 10022                           ;PowerFault_B1.c: 93: {
 10023                           ;PowerFault_B1.c: 94: PF->Count++;
 10024  0F92  3001               	movlw	1
 10025  0F93  00AD               	movwf	??_setPowerFault_Main
 10026  0F94  0A79               	incf	_PF,w
 10027  0F95  0086               	movwf	6
 10028  0F96  3001               	movlw	1	; select bank2/3
 10029  0F97  0087               	movwf	7
 10030  0F98  082D               	movf	??_setPowerFault_Main,w
 10031  0F99  0781               	addwf	1,f
 10032                           
 10033                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10034  0F9A  0A79               	incf	_PF,w
 10035  0F9B  0086               	movwf	6
 10036  0F9C  3001               	movlw	1	; select bank2/3
 10037  0F9D  0087               	movwf	7
 10038  0F9E  3002               	movlw	2
 10039  0F9F  0201               	subwf	1,w
 10040  0FA0  1C03               	skipc
 10041  0FA1  2FEC               	goto	l8900
 10042                           
 10043                           ;PowerFault_B1.c: 96: {
 10044                           ;PowerFault_B1.c: 97: PF->Count=0;
 10045  0FA2  0A79               	incf	_PF,w
 10046  0FA3  0086               	movwf	6
 10047  0FA4  3001               	movlw	1	; select bank2/3
 10048  0FA5  0087               	movwf	7
 10049  0FA6  0181               	clrf	1
 10050                           
 10051                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10052  0FA7  3000               	movlw	0
 10053  0FA8  319D  25D7  318E   	fcall	_setPowerFault_Exceptions
 10054                           
 10055                           ;PowerFault_B1.c: 99: }
 10056                           ;PowerFault_B1.c: 100: }
 10057  0FAB  2FEC               	goto	l8900
 10058  0FAC                     l8886:	
 10059                           ;PowerFault_B1.c: 104: }
 10060                           ;PowerFault_B1.c: 105: }
 10061                           
 10062                           ;PowerFault_B1.c: 101: else
 10063                           ;PowerFault_B1.c: 102: {
 10064                           ;PowerFault_B1.c: 103: PF->Count=0;
 10065                           
 10066                           
 10067                           ;PowerFault_B1.c: 106: else
 10068                           ;PowerFault_B1.c: 107: {
 10069                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10070  0FAC  0879               	movf	_PF,w
 10071  0FAD  3E04               	addlw	4
 10072  0FAE  0086               	movwf	6
 10073  0FAF  3001               	movlw	1	; select bank2/3
 10074  0FB0  0087               	movwf	7
 10075  0FB1  3F40               	moviw [0]fsr1
 10076  0FB2  0020               	movlb	0	; select bank0
 10077  0FB3  00AD               	movwf	??_setPowerFault_Main
 10078  0FB4  3F41               	moviw [1]fsr1
 10079  0FB5  00AE               	movwf	??_setPowerFault_Main+1
 10080  0FB6  3001               	movlw	1
 10081  0FB7  022E               	subwf	??_setPowerFault_Main+1,w
 10082  0FB8  3090               	movlw	144
 10083  0FB9  1903               	skipnz
 10084  0FBA  022D               	subwf	??_setPowerFault_Main,w
 10085  0FBB  1803               	skipnc
 10086  0FBC  2FCD               	goto	l8890
 10087  0FBD  0879               	movf	_PF,w
 10088  0FBE  3E04               	addlw	4
 10089  0FBF  0086               	movwf	6
 10090  0FC0  3001               	movlw	1	; select bank2/3
 10091  0FC1  0087               	movwf	7
 10092  0FC2  3F40               	moviw [0]fsr1
 10093  0FC3  00AD               	movwf	??_setPowerFault_Main
 10094  0FC4  3F41               	moviw [1]fsr1
 10095  0FC5  00AE               	movwf	??_setPowerFault_Main+1
 10096  0FC6  3000               	movlw	0
 10097  0FC7  022E               	subwf	??_setPowerFault_Main+1,w
 10098  0FC8  30D3               	movlw	211
 10099  0FC9  1903               	skipnz
 10100  0FCA  022D               	subwf	??_setPowerFault_Main,w
 10101  0FCB  1803               	skipnc
 10102  0FCC  2FE7               	goto	l8898
 10103  0FCD                     l8890:	
 10104                           
 10105                           ;PowerFault_B1.c: 109: {
 10106                           ;PowerFault_B1.c: 110: PF->Count++;
 10107  0FCD  3001               	movlw	1
 10108  0FCE  00AD               	movwf	??_setPowerFault_Main
 10109  0FCF  0A79               	incf	_PF,w
 10110  0FD0  0086               	movwf	6
 10111  0FD1  3001               	movlw	1	; select bank2/3
 10112  0FD2  0087               	movwf	7
 10113  0FD3  082D               	movf	??_setPowerFault_Main,w
 10114  0FD4  0781               	addwf	1,f
 10115                           
 10116                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10117  0FD5  0A79               	incf	_PF,w
 10118  0FD6  0086               	movwf	6
 10119  0FD7  3001               	movlw	1	; select bank2/3
 10120  0FD8  0087               	movwf	7
 10121  0FD9  3002               	movlw	2
 10122  0FDA  0201               	subwf	1,w
 10123  0FDB  1C03               	skipc
 10124  0FDC  2FEC               	goto	l8900
 10125                           
 10126                           ;PowerFault_B1.c: 112: {
 10127                           ;PowerFault_B1.c: 113: PF->Count=0;
 10128  0FDD  0A79               	incf	_PF,w
 10129  0FDE  0086               	movwf	6
 10130  0FDF  3001               	movlw	1	; select bank2/3
 10131  0FE0  0087               	movwf	7
 10132  0FE1  0181               	clrf	1
 10133                           
 10134                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10135  0FE2  3001               	movlw	1
 10136  0FE3  319D  25D7  318E   	fcall	_setPowerFault_Exceptions
 10137                           
 10138                           ;PowerFault_B1.c: 115: }
 10139                           ;PowerFault_B1.c: 116: }
 10140  0FE6  2FEC               	goto	l8900
 10141  0FE7                     l8898:	
 10142                           
 10143                           ;PowerFault_B1.c: 117: else
 10144                           ;PowerFault_B1.c: 118: {
 10145                           ;PowerFault_B1.c: 119: PF->Count=0;
 10146  0FE7  0A79               	incf	_PF,w
 10147  0FE8  0086               	movwf	6
 10148  0FE9  3001               	movlw	1	; select bank2/3
 10149  0FEA  0087               	movwf	7
 10150  0FEB  0181               	clrf	1
 10151  0FEC                     l8900:	
 10152                           
 10153                           ;PowerFault_B1.c: 120: }
 10154                           ;PowerFault_B1.c: 122: }
 10155                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10156  0FEC  0879               	movf	_PF,w
 10157  0FED  0086               	movwf	6
 10158  0FEE  3001               	movlw	1	; select bank2/3
 10159  0FEF  0087               	movwf	7
 10160  0FF0  1881               	btfsc	1,1
 10161  0FF1  2FF7               	goto	l2022
 10162                           
 10163                           ;PowerFault_B1.c: 124: {
 10164                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10165  0FF2  0879               	movf	_PF,w
 10166  0FF3  0086               	movwf	6
 10167  0FF4  3001               	movlw	1	; select bank2/3
 10168  0FF5  0087               	movwf	7
 10169  0FF6  1501               	bsf	1,2
 10170  0FF7                     l2022:	
 10171                           
 10172                           ;PowerFault_B1.c: 126: }
 10173                           ;PowerFault_B1.c: 127: PF->AD=0;
 10174  0FF7  0879               	movf	_PF,w
 10175  0FF8  3E04               	addlw	4
 10176  0FF9  0086               	movwf	6
 10177  0FFA  3001               	movlw	1	; select bank2/3
 10178  0FFB  0087               	movwf	7
 10179  0FFC  3000               	movlw	0
 10180  0FFD  3FC0               	movwi [0]fsr1
 10181  0FFE  3FC1               	movwi [1]fsr1
 10182  0FFF  0008               	return
 10183  1000                     __end_of_setPowerFault_Main:	
 10184                           
 10185                           	psect	text47
 10186  1DD7                     __ptext47:	
 10187 ;; *************** function _setPowerFault_Exceptions *****************
 10188 ;; Defined at:
 10189 ;;		line 133 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;  command         1    wreg     unsigned char 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  command         1   12[BANK0 ] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        2 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    8
 10210 ;; This function calls:
 10211 ;;		_DimmerLights_Exceptions
 10212 ;;		_setLED
 10213 ;;		_setRF_Enable
 10214 ;;		_setSw_Enable
 10215 ;; This function is called by:
 10216 ;;		_setPowerFault_Main
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           
 10221                           ;psect for function _setPowerFault_Exceptions
 10222  1DD7                     _setPowerFault_Exceptions:	
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10226                           ;setPowerFault_Exceptions@command stored from wreg
 10227  1DD7  0020               	movlb	0	; select bank0
 10228  1DD8  00AC               	movwf	setPowerFault_Exceptions@command
 10229                           
 10230                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10231  1DD9  0879               	movf	_PF,w
 10232  1DDA  0086               	movwf	6
 10233  1DDB  3001               	movlw	1	; select bank2/3
 10234  1DDC  0087               	movwf	7
 10235  1DDD  082C               	movf	setPowerFault_Exceptions@command,w
 10236  1DDE  1081               	bcf	1,1
 10237  1DDF  1D03               	skipz
 10238  1DE0  1481               	bsf	1,1
 10239                           
 10240                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10241  1DE1  092C               	comf	setPowerFault_Exceptions@command,w
 10242  1DE2  3901               	andlw	1
 10243  1DE3  00AB               	movwf	??_setPowerFault_Exceptions
 10244  1DE4  0879               	movf	_PF,w
 10245  1DE5  0086               	movwf	6
 10246  1DE6  3001               	movlw	1	; select bank2/3
 10247  1DE7  0087               	movwf	7
 10248  1DE8  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10249  1DE9  0DAB               	rlf	??_setPowerFault_Exceptions,f
 10250  1DEA  0801               	movf	1,w
 10251  1DEB  062B               	xorwf	??_setPowerFault_Exceptions,w
 10252  1DEC  39FB               	andlw	-5
 10253  1DED  062B               	xorwf	??_setPowerFault_Exceptions,w
 10254  1DEE  0081               	movwf	1
 10255                           
 10256                           ;PowerFault_B1.c: 137: if(command == 1)
 10257  1DEF  082C               	movf	setPowerFault_Exceptions@command,w
 10258  1DF0  3A01               	xorlw	1
 10259  1DF1  1D03               	skipz
 10260  1DF2  2DFE               	goto	l2026
 10261                           
 10262                           ;PowerFault_B1.c: 138: {
 10263                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10264  1DF3  3003               	movlw	3
 10265  1DF4  3191  215C  319D   	fcall	_DimmerLights_Exceptions
 10266                           
 10267                           ;PowerFault_B1.c: 141: setLED(2,1);
 10268  1DF7  0020               	movlb	0	; select bank0
 10269  1DF8  01A2               	clrf	setLED@command
 10270  1DF9  0AA2               	incf	setLED@command,f
 10271  1DFA  3002               	movlw	2
 10272  1DFB  3192  226D  319D   	fcall	_setLED
 10273  1DFE                     l2026:	
 10274                           
 10275                           ;PowerFault_B1.c: 143: }
 10276                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10277  1DFE  0020               	movlb	0	; select bank0
 10278  1DFF  082C               	movf	setPowerFault_Exceptions@command,w
 10279  1E00  3E0A               	addlw	10
 10280  1E01  00AB               	movwf	??_setPowerFault_Exceptions
 10281  1E02  082B               	movf	??_setPowerFault_Exceptions,w
 10282  1E03  00A2               	movwf	setLED@command
 10283  1E04  3063               	movlw	99
 10284  1E05  3192  226D  319D   	fcall	_setLED
 10285                           
 10286                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10287  1E08  0020               	movlb	0	; select bank0
 10288  1E09  092C               	comf	setPowerFault_Exceptions@command,w
 10289  1E0A  3901               	andlw	1
 10290  1E0B  31A7  2781  319D   	fcall	_setSw_Enable
 10291                           
 10292                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10293  1E0E  0020               	movlb	0	; select bank0
 10294  1E0F  092C               	comf	setPowerFault_Exceptions@command,w
 10295  1E10  3901               	andlw	1
 10296  1E11  00AB               	movwf	??_setPowerFault_Exceptions
 10297  1E12  082B               	movf	??_setPowerFault_Exceptions,w
 10298  1E13  00A2               	movwf	setRF_Enable@command
 10299  1E14  3001               	movlw	1
 10300  1E15  319B  2351         	fcall	_setRF_Enable
 10301  1E17  0008               	return
 10302  1E18                     __end_of_setPowerFault_Exceptions:	
 10303                           
 10304                           	psect	text48
 10305  2683                     __ptext48:	
 10306 ;; *************** function _getLoad_Safe *****************
 10307 ;; Defined at:
 10308 ;;		line 298 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 10309 ;; Parameters:    Size  Location     Type
 10310 ;;		None
 10311 ;; Auto vars:     Size  Location     Type
 10312 ;;		None
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  1    wreg      unsigned char 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10317 ;; Tracked objects:
 10318 ;;		On entry : 0/0
 10319 ;;		On exit  : 0/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;Total ram usage:        1 bytes
 10327 ;; Hardware stack levels used:    1
 10328 ;; Hardware stack levels required when called:    4
 10329 ;; This function calls:
 10330 ;;		Nothing
 10331 ;; This function is called by:
 10332 ;;		_setTemp_Main
 10333 ;;		_setPowerFault_Main
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           
 10338                           ;psect for function _getLoad_Safe
 10339  2683                     _getLoad_Safe:	
 10340                           
 10341                           ;OverLoad_B1.c: 299: return Load->Safe;
 10342                           
 10343                           ;incstack = 0
 10344                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10345  2683  0020               	movlb	0	; select bank0
 10346  2684  086E               	movf	_Load,w
 10347  2685  0086               	movwf	6
 10348  2686  3002               	movlw	2	; select bank4/5
 10349  2687  0087               	movwf	7
 10350  2688  0C01               	rrf	1,w
 10351  2689  00A0               	movwf	??_getLoad_Safe
 10352  268A  0CA0               	rrf	??_getLoad_Safe,f
 10353  268B  0C20               	rrf	??_getLoad_Safe,w
 10354  268C  3901               	andlw	1
 10355  268D  0008               	return
 10356  268E                     __end_of_getLoad_Safe:	
 10357                           
 10358                           	psect	text49
 10359  25AC                     __ptext49:	
 10360 ;; *************** function _PowerFault_Initialization *****************
 10361 ;; Defined at:
 10362 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10363 ;; Parameters:    Size  Location     Type
 10364 ;;		None
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;		None
 10367 ;; Return value:  Size  Location     Type
 10368 ;;		None               void
 10369 ;; Registers used:
 10370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        0 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    5
 10383 ;; This function calls:
 10384 ;;		_setPowerFault_Initialization
 10385 ;; This function is called by:
 10386 ;;		_main
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _PowerFault_Initialization
 10392  25AC                     _PowerFault_Initialization:	
 10393                           
 10394                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10398  25AC  31A7  27E0         	fcall	_setPowerFault_Initialization
 10399  25AE  0008               	return
 10400  25AF                     __end_of_PowerFault_Initialization:	
 10401                           
 10402                           	psect	text50
 10403  27E0                     __ptext50:	
 10404 ;; *************** function _setPowerFault_Initialization *****************
 10405 ;; Defined at:
 10406 ;;		line 29 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;		None
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;		None
 10411 ;; Return value:  Size  Location     Type
 10412 ;;		None               void
 10413 ;; Registers used:
 10414 ;;		wreg, fsr1l, fsr1h
 10415 ;; Tracked objects:
 10416 ;;		On entry : 0/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;Total ram usage:        1 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; Hardware stack levels required when called:    4
 10427 ;; This function calls:
 10428 ;;		Nothing
 10429 ;; This function is called by:
 10430 ;;		_PowerFault_Initialization
 10431 ;; This function uses a non-reentrant model
 10432 ;;
 10433                           
 10434                           
 10435                           ;psect for function _setPowerFault_Initialization
 10436  27E0                     _setPowerFault_Initialization:	
 10437                           
 10438                           ;PowerFault_B1.c: 31: PF=&PF1;
 10439                           
 10440                           ;incstack = 0
 10441                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10442  27E0  3062               	movlw	_PF1& (0+255)
 10443  27E1  0020               	movlb	0	; select bank0
 10444  27E2  00A0               	movwf	??_setPowerFault_Initialization
 10445  27E3  0820               	movf	??_setPowerFault_Initialization,w
 10446  27E4  00F9               	movwf	_PF
 10447                           
 10448                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10449  27E5  0879               	movf	_PF,w
 10450  27E6  0086               	movwf	6
 10451  27E7  3001               	movlw	1	; select bank2/3
 10452  27E8  0087               	movwf	7
 10453  27E9  1401               	bsf	1,0
 10454                           
 10455                           ;PowerFault_B1.c: 33: PF->Safe=1;
 10456  27EA  0879               	movf	_PF,w
 10457  27EB  0086               	movwf	6
 10458  27EC  3001               	movlw	1	; select bank2/3
 10459  27ED  0087               	movwf	7
 10460  27EE  1501               	bsf	1,2
 10461  27EF  0008               	return
 10462  27F0                     __end_of_setPowerFault_Initialization:	
 10463                           
 10464                           	psect	text51
 10465  1961                     __ptext51:	
 10466 ;; *************** function _Mcu_Initialization *****************
 10467 ;; Defined at:
 10468 ;;		line 24 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10469 ;; Parameters:    Size  Location     Type
 10470 ;;		None
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;		None
 10473 ;; Return value:  Size  Location     Type
 10474 ;;		None               void
 10475 ;; Registers used:
 10476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10477 ;; Tracked objects:
 10478 ;;		On entry : 0/0
 10479 ;;		On exit  : 0/0
 10480 ;;		Unchanged: 0/0
 10481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;Total ram usage:        1 bytes
 10487 ;; Hardware stack levels used:    1
 10488 ;; Hardware stack levels required when called:    5
 10489 ;; This function calls:
 10490 ;;		_ADC_Set
 10491 ;;		_INT_Set
 10492 ;;		_IOC_Set
 10493 ;;		_IO_Set
 10494 ;;		_TMR0_Set
 10495 ;;		_WDT_Set
 10496 ;; This function is called by:
 10497 ;;		_main
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           
 10502                           ;psect for function _Mcu_Initialization
 10503  1961                     _Mcu_Initialization:	
 10504                           
 10505                           ;MCU_B1.c: 26: OSCCON=0x78; ;;
 10506                           
 10507                           ;incstack = 0
 10508                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10509  1961  3078               	movlw	120
 10510  1962  0021               	movlb	1	; select bank1
 10511  1963  0099               	movwf	25	;volatile
 10512                           
 10513                           ;MCU_B1.c: 28: IO_Set();
 10514  1964  3187  27E7  3199   	fcall	_IO_Set
 10515                           
 10516                           ;MCU_B1.c: 30: TMR0_Set();
 10517  1967  31A7  272B  3199   	fcall	_TMR0_Set
 10518                           
 10519                           ;MCU_B1.c: 32: ;;
 10520                           ;MCU_B1.c: 34: ADC_Set();
 10521  196A  31A6  2604  3199   	fcall	_ADC_Set
 10522                           
 10523                           ;MCU_B1.c: 38: INT_Set();
 10524  196D  31A5  25DD  3199   	fcall	_INT_Set
 10525                           
 10526                           ;MCU_B1.c: 40: IOC_Set();
 10527  1970  31A7  271E  3199   	fcall	_IOC_Set
 10528                           
 10529                           ;MCU_B1.c: 42: ;;
 10530                           ;MCU_B1.c: 44: ;;
 10531                           ;MCU_B1.c: 46: Memory=&VarMemory;
 10532  1973  30A0               	movlw	_VarMemory& (0+255)
 10533  1974  0020               	movlb	0	; select bank0
 10534  1975  00A1               	movwf	??_Mcu_Initialization
 10535  1976  0821               	movf	??_Mcu_Initialization,w
 10536  1977  0021               	movlb	1	; select bank1
 10537  1978  00E7               	movwf	_Memory^(0+128)
 10538                           
 10539                           ;MCU_B1.c: 48: WDT_Set();
 10540  1979  3198  20E3         	fcall	_WDT_Set
 10541  197B  0008               	return
 10542  197C                     __end_of_Mcu_Initialization:	
 10543                           
 10544                           	psect	text52
 10545  18E3                     __ptext52:	
 10546 ;; *************** function _WDT_Set *****************
 10547 ;; Defined at:
 10548 ;;		line 936 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;		None
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;		None               void
 10555 ;; Registers used:
 10556 ;;		wreg, fsr1l, fsr1h
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;Total ram usage:        1 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    4
 10569 ;; This function calls:
 10570 ;;		Nothing
 10571 ;; This function is called by:
 10572 ;;		_Mcu_Initialization
 10573 ;; This function uses a non-reentrant model
 10574 ;;
 10575                           
 10576                           
 10577                           ;psect for function _WDT_Set
 10578  18E3                     _WDT_Set:	
 10579                           
 10580                           ;MCU_B1.c: 937: WDTCON = 0b00010111;;
 10581                           
 10582                           ;incstack = 0
 10583                           ; Regs used in _WDT_Set: [wregfsr1]
 10584  18E3  3017               	movlw	23
 10585  18E4  0021               	movlb	1	; select bank1
 10586  18E5  0097               	movwf	23	;volatile
 10587                           
 10588                           ;MCU_B1.c: 938: WDT = &_WDT;
 10589  18E6  30E4               	movlw	__WDT& (0+255)
 10590  18E7  0020               	movlb	0	; select bank0
 10591  18E8  00A0               	movwf	??_WDT_Set
 10592  18E9  0820               	movf	??_WDT_Set,w
 10593  18EA  0021               	movlb	1	; select bank1
 10594  18EB  00E9               	movwf	_WDT^(0+128)
 10595                           
 10596                           ;MCU_B1.c: 939: WDT->Enable = 1;
 10597  18EC  0869               	movf	_WDT^(0+128),w
 10598  18ED  0086               	movwf	6
 10599  18EE  0187               	clrf	7
 10600  18EF  1401               	bsf	1,0
 10601                           
 10602                           ;MCU_B1.c: 940: WDT->Count = 10;
 10603  18F0  300A               	movlw	10
 10604  18F1  0020               	movlb	0	; select bank0
 10605  18F2  00A0               	movwf	??_WDT_Set
 10606  18F3  0021               	movlb	1	; select bank1
 10607  18F4  0A69               	incf	_WDT^(0+128),w
 10608  18F5  0086               	movwf	6
 10609  18F6  0187               	clrf	7
 10610  18F7  0020               	movlb	0	; select bank0
 10611  18F8  0820               	movf	??_WDT_Set,w
 10612  18F9  0081               	movwf	1
 10613  18FA  0008               	return
 10614  18FB                     __end_of_WDT_Set:	
 10615                           
 10616                           	psect	text53
 10617  272B                     __ptext53:	
 10618 ;; *************** function _TMR0_Set *****************
 10619 ;; Defined at:
 10620 ;;		line 118 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;		None
 10625 ;; Return value:  Size  Location     Type
 10626 ;;		None               void
 10627 ;; Registers used:
 10628 ;;		wreg, status,2
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;Total ram usage:        1 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    4
 10641 ;; This function calls:
 10642 ;;		Nothing
 10643 ;; This function is called by:
 10644 ;;		_Mcu_Initialization
 10645 ;; This function uses a non-reentrant model
 10646 ;;
 10647                           
 10648                           
 10649                           ;psect for function _TMR0_Set
 10650  272B                     _TMR0_Set:	
 10651                           
 10652                           ;MCU_B1.c: 119: Timer0 = &VarTimer0;
 10653                           
 10654                           ;incstack = 0
 10655                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10656  272B  30C4               	movlw	_VarTimer0& (0+255)
 10657  272C  0020               	movlb	0	; select bank0
 10658  272D  00A0               	movwf	??_TMR0_Set
 10659  272E  0820               	movf	??_TMR0_Set,w
 10660  272F  0021               	movlb	1	; select bank1
 10661  2730  00E8               	movwf	_Timer0^(0+128)
 10662                           
 10663                           ;MCU_B1.c: 120: OPTION_REG = 0x00;
 10664  2731  0195               	clrf	21	;volatile
 10665                           
 10666                           ;MCU_B1.c: 121: TMR0 = (256-90);
 10667  2732  30A6               	movlw	166
 10668  2733  0020               	movlb	0	; select bank0
 10669  2734  0095               	movwf	21	;volatile
 10670                           
 10671                           ;MCU_B1.c: 122: TMR0IE = 1;
 10672  2735  168B               	bsf	11,5	;volatile
 10673                           
 10674                           ;MCU_B1.c: 123: GIE = 1;
 10675  2736  178B               	bsf	11,7	;volatile
 10676  2737  0008               	return
 10677  2738                     __end_of_TMR0_Set:	
 10678                           
 10679                           	psect	text54
 10680  07E7                     __ptext54:	
 10681 ;; *************** function _IO_Set *****************
 10682 ;; Defined at:
 10683 ;;		line 52 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, status,2
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    4
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_Mcu_Initialization
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _IO_Set
 10713  07E7                     _IO_Set:	
 10714                           
 10715                           ;MCU_B1.c: 80: TRISA = 0b01110111;;
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _IO_Set: [wreg+status,2]
 10719  07E7  3077               	movlw	119
 10720  07E8  0021               	movlb	1	; select bank1
 10721  07E9  008C               	movwf	12	;volatile
 10722                           
 10723                           ;MCU_B1.c: 81: TRISB = 0b00000111;;
 10724  07EA  3007               	movlw	7
 10725  07EB  008D               	movwf	13	;volatile
 10726                           
 10727                           ;MCU_B1.c: 82: TRISC = 0b00001100;;
 10728  07EC  300C               	movlw	12
 10729  07ED  008E               	movwf	14	;volatile
 10730                           
 10731                           ;MCU_B1.c: 83: LATA = 0b00000000;;
 10732  07EE  0022               	movlb	2	; select bank2
 10733  07EF  018C               	clrf	12	;volatile
 10734                           
 10735                           ;MCU_B1.c: 84: LATB = 0b00000010;;
 10736  07F0  3002               	movlw	2
 10737  07F1  008D               	movwf	13	;volatile
 10738                           
 10739                           ;MCU_B1.c: 85: LATC = 0b00000000;;
 10740  07F2  018E               	clrf	14	;volatile
 10741                           
 10742                           ;MCU_B1.c: 86: ANSELA = 0b00100010;;
 10743  07F3  3022               	movlw	34
 10744  07F4  0023               	movlb	3	; select bank3
 10745  07F5  008C               	movwf	12	;volatile
 10746                           
 10747                           ;MCU_B1.c: 87: ANSELB = 0b00000000;;
 10748  07F6  018D               	clrf	13	;volatile
 10749                           
 10750                           ;MCU_B1.c: 88: ANSELC = 0b00000000;;
 10751  07F7  018E               	clrf	14	;volatile
 10752                           
 10753                           ;MCU_B1.c: 89: PORTA = 0b01110111;;
 10754  07F8  3077               	movlw	119
 10755  07F9  0020               	movlb	0	; select bank0
 10756  07FA  008C               	movwf	12	;volatile
 10757                           
 10758                           ;MCU_B1.c: 90: PORTB = 0b00000111;;
 10759  07FB  3007               	movlw	7
 10760  07FC  008D               	movwf	13	;volatile
 10761                           
 10762                           ;MCU_B1.c: 91: PORTC = 0b00001100;;
 10763  07FD  300C               	movlw	12
 10764  07FE  008E               	movwf	14	;volatile
 10765  07FF  0008               	return
 10766  0800                     __end_of_IO_Set:	
 10767                           
 10768                           	psect	text55
 10769  271E                     __ptext55:	
 10770 ;; *************** function _IOC_Set *****************
 10771 ;; Defined at:
 10772 ;;		line 300 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;		None
 10775 ;; Auto vars:     Size  Location     Type
 10776 ;;		None
 10777 ;; Return value:  Size  Location     Type
 10778 ;;		None               void
 10779 ;; Registers used:
 10780 ;;		wreg, status,2
 10781 ;; Tracked objects:
 10782 ;;		On entry : 0/0
 10783 ;;		On exit  : 0/0
 10784 ;;		Unchanged: 0/0
 10785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;Total ram usage:        0 bytes
 10791 ;; Hardware stack levels used:    1
 10792 ;; Hardware stack levels required when called:    4
 10793 ;; This function calls:
 10794 ;;		Nothing
 10795 ;; This function is called by:
 10796 ;;		_Mcu_Initialization
 10797 ;; This function uses a non-reentrant model
 10798 ;;
 10799                           
 10800                           
 10801                           ;psect for function _IOC_Set
 10802  271E                     _IOC_Set:	
 10803                           
 10804                           ;MCU_B1.c: 301: WPUB2 = 0;
 10805                           
 10806                           ;incstack = 0
 10807                           ; Regs used in _IOC_Set: [wreg+status,2]
 10808  271E  0024               	movlb	4	; select bank4
 10809  271F  110D               	bcf	13,2	;volatile
 10810                           
 10811                           ;MCU_B1.c: 303: IOCBP = 0b00000100;
 10812  2720  3004               	movlw	4
 10813  2721  0027               	movlb	7	; select bank7
 10814  2722  0094               	movwf	20	;volatile
 10815                           
 10816                           ;MCU_B1.c: 304: IOCBN = 0b00000100;
 10817  2723  3004               	movlw	4
 10818  2724  0095               	movwf	21	;volatile
 10819                           
 10820                           ;MCU_B1.c: 319: IOCBF = 0b00000000;
 10821  2725  0196               	clrf	22	;volatile
 10822                           
 10823                           ;MCU_B1.c: 321: IOCIE = 1;
 10824  2726  158B               	bsf	11,3	;volatile
 10825                           
 10826                           ;MCU_B1.c: 322: IOCIF = 0;
 10827  2727  100B               	bcf	11,0	;volatile
 10828                           
 10829                           ;MCU_B1.c: 323: PEIE = 1;
 10830  2728  170B               	bsf	11,6	;volatile
 10831                           
 10832                           ;MCU_B1.c: 324: GIE = 1;
 10833  2729  178B               	bsf	11,7	;volatile
 10834  272A  0008               	return
 10835  272B                     __end_of_IOC_Set:	
 10836                           
 10837                           	psect	text56
 10838  25DD                     __ptext56:	
 10839 ;; *************** function _INT_Set *****************
 10840 ;; Defined at:
 10841 ;;		line 273 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10842 ;; Parameters:    Size  Location     Type
 10843 ;;		None
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;		None
 10846 ;; Return value:  Size  Location     Type
 10847 ;;		None               void
 10848 ;; Registers used:
 10849 ;;		None
 10850 ;; Tracked objects:
 10851 ;;		On entry : 0/0
 10852 ;;		On exit  : 0/0
 10853 ;;		Unchanged: 0/0
 10854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10859 ;;Total ram usage:        0 bytes
 10860 ;; Hardware stack levels used:    1
 10861 ;; Hardware stack levels required when called:    4
 10862 ;; This function calls:
 10863 ;;		Nothing
 10864 ;; This function is called by:
 10865 ;;		_Mcu_Initialization
 10866 ;; This function uses a non-reentrant model
 10867 ;;
 10868                           
 10869                           
 10870                           ;psect for function _INT_Set
 10871  25DD                     _INT_Set:	
 10872                           
 10873                           ;MCU_B1.c: 274: WPUB0 = 0;
 10874                           
 10875                           ;incstack = 0
 10876                           ; Regs used in _INT_Set: []
 10877  25DD  0024               	movlb	4	; select bank4
 10878  25DE  100D               	bcf	13,0	;volatile
 10879                           
 10880                           ;MCU_B1.c: 275: INTE = 1;
 10881  25DF  160B               	bsf	11,4	;volatile
 10882                           
 10883                           ;MCU_B1.c: 276: PEIE = 1;
 10884  25E0  170B               	bsf	11,6	;volatile
 10885                           
 10886                           ;MCU_B1.c: 277: GIE = 1;
 10887  25E1  178B               	bsf	11,7	;volatile
 10888  25E2  0008               	return
 10889  25E3                     __end_of_INT_Set:	
 10890                           
 10891                           	psect	text57
 10892  2604                     __ptext57:	
 10893 ;; *************** function _ADC_Set *****************
 10894 ;; Defined at:
 10895 ;;		line 359 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;		None
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;		None
 10900 ;; Return value:  Size  Location     Type
 10901 ;;		None               void
 10902 ;; Registers used:
 10903 ;;		wreg
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;Total ram usage:        0 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    4
 10916 ;; This function calls:
 10917 ;;		Nothing
 10918 ;; This function is called by:
 10919 ;;		_Mcu_Initialization
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function _ADC_Set
 10925  2604                     _ADC_Set:	
 10926                           
 10927                           ;MCU_B1.c: 360: ADCON1 = 0xf2;
 10928                           
 10929                           ;incstack = 0
 10930                           ; Regs used in _ADC_Set: [wreg]
 10931  2604  30F2               	movlw	242
 10932  2605  0021               	movlb	1	; select bank1
 10933  2606  009E               	movwf	30	;volatile
 10934                           
 10935                           ;MCU_B1.c: 361: FVRCON = 0xc0;
 10936  2607  30C0               	movlw	192
 10937  2608  0022               	movlb	2	; select bank2
 10938  2609  0097               	movwf	23	;volatile
 10939  260A  0008               	return
 10940  260B                     __end_of_ADC_Set:	
 10941                           
 10942                           	psect	text58
 10943  1890                     __ptext58:	
 10944 ;; *************** function _MainT_Initialization *****************
 10945 ;; Defined at:
 10946 ;;		line 91 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;		None
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;		None
 10951 ;; Return value:  Size  Location     Type
 10952 ;;		None               void
 10953 ;; Registers used:
 10954 ;;		wreg, fsr1l, fsr1h
 10955 ;; Tracked objects:
 10956 ;;		On entry : 0/0
 10957 ;;		On exit  : 0/0
 10958 ;;		Unchanged: 0/0
 10959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;Total ram usage:        1 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    4
 10967 ;; This function calls:
 10968 ;;		Nothing
 10969 ;; This function is called by:
 10970 ;;		_main
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           
 10975                           ;psect for function _MainT_Initialization
 10976  1890                     _MainT_Initialization:	
 10977                           
 10978                           ;main_B1.c: 93: Product = &VarProduct;
 10979                           
 10980                           ;incstack = 0
 10981                           ; Regs used in _MainT_Initialization: [wregfsr1]
 10982  1890  30C5               	movlw	_VarProduct& (0+255)
 10983  1891  0020               	movlb	0	; select bank0
 10984  1892  00A0               	movwf	??_MainT_Initialization
 10985  1893  0820               	movf	??_MainT_Initialization,w
 10986  1894  00EF               	movwf	_Product
 10987                           
 10988                           ;main_B1.c: 94: Product->Data[20] = 209;
 10989  1895  30D1               	movlw	209
 10990  1896  00A0               	movwf	??_MainT_Initialization
 10991  1897  086F               	movf	_Product,w
 10992  1898  3E14               	addlw	20
 10993  1899  0086               	movwf	6
 10994  189A  3001               	movlw	1	; select bank2/3
 10995  189B  0087               	movwf	7
 10996  189C  0820               	movf	??_MainT_Initialization,w
 10997  189D  0081               	movwf	1
 10998                           
 10999                           ;main_B1.c: 97: TMain = &VarTMain;
 11000  189E  3020               	movlw	_VarTMain& (0+255)
 11001  189F  00A0               	movwf	??_MainT_Initialization
 11002  18A0  0820               	movf	??_MainT_Initialization,w
 11003  18A1  00FD               	movwf	_TMain
 11004  18A2  0008               	return
 11005  18A3                     __end_of_MainT_Initialization:	
 11006                           
 11007                           	psect	text59
 11008  1786                     __ptext59:	
 11009 ;; *************** function _MainT *****************
 11010 ;; Defined at:
 11011 ;;		line 103 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/main_B1.c"
 11012 ;; Parameters:    Size  Location     Type
 11013 ;;		None
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;		None
 11016 ;; Return value:  Size  Location     Type
 11017 ;;		None               void
 11018 ;; Registers used:
 11019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/0
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11029 ;;Total ram usage:        0 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:    6
 11032 ;; This function calls:
 11033 ;;		_setBuz
 11034 ;;		_setLoad_Enable
 11035 ;;		_setRF_Enable
 11036 ;;		_setSw_Enable
 11037 ;;		_setTemp_Enable
 11038 ;; This function is called by:
 11039 ;;		_main
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           
 11044                           ;psect for function _MainT
 11045  1786                     _MainT:	
 11046                           
 11047                           ;main_B1.c: 105: if (!TMain->PowerON) {
 11048                           
 11049                           ;incstack = 0
 11050                           ; Regs used in _MainT: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11051  1786  087D               	movf	_TMain,w
 11052  1787  0086               	movwf	6
 11053  1788  3001               	movlw	1	; select bank2/3
 11054  1789  0087               	movwf	7
 11055  178A  1801               	btfsc	1,0
 11056  178B  2FCF               	goto	l9380
 11057                           
 11058                           ;main_B1.c: 106: TMain->PowerCount++;
 11059  178C  0A7D               	incf	_TMain,w
 11060  178D  0086               	movwf	6
 11061  178E  3001               	movlw	1	; select bank2/3
 11062  178F  0087               	movwf	7
 11063  1790  3001               	movlw	1
 11064  1791  0781               	addwf	1,f
 11065  1792  3141               	addfsr 1,1
 11066  1793  1803               	skipnc
 11067  1794  0A81               	incf	1,f
 11068                           
 11069                           ;main_B1.c: 107: if (TMain->PowerCount == 150)
 11070  1795  0A7D               	incf	_TMain,w
 11071  1796  0086               	movwf	6
 11072  1797  3001               	movlw	1	; select bank2/3
 11073  1798  0087               	movwf	7
 11074  1799  3F40               	moviw [0]fsr1
 11075  179A  3A96               	xorlw	150
 11076  179B  1D03               	skipz
 11077  179C  2F9F               	goto	u9505
 11078  179D  3F41               	moviw [1]fsr1
 11079  179E  3A00               	xorlw	0
 11080  179F                     u9505:	
 11081  179F  1D03               	skipz
 11082  17A0  0008               	return
 11083                           
 11084                           ;main_B1.c: 108: {
 11085                           ;main_B1.c: 109: TMain->PowerCount = 0;
 11086  17A1  0A7D               	incf	_TMain,w
 11087  17A2  0086               	movwf	6
 11088  17A3  3001               	movlw	1	; select bank2/3
 11089  17A4  0087               	movwf	7
 11090  17A5  3000               	movlw	0
 11091  17A6  3FC0               	movwi [0]fsr1
 11092  17A7  3FC1               	movwi [1]fsr1
 11093                           
 11094                           ;main_B1.c: 110: TMain->PowerON = 1;
 11095  17A8  087D               	movf	_TMain,w
 11096  17A9  0086               	movwf	6
 11097  17AA  3001               	movlw	1	; select bank2/3
 11098  17AB  0087               	movwf	7
 11099  17AC  1401               	bsf	1,0
 11100                           
 11101                           ;main_B1.c: 113: setTemp_Enable(1);
 11102  17AD  3001               	movlw	1
 11103  17AE  31A6  2678  3197   	fcall	_setTemp_Enable
 11104                           
 11105                           ;main_B1.c: 117: setLoad_Enable(1);
 11106  17B1  3001               	movlw	1
 11107  17B2  31A7  27D0  3197   	fcall	_setLoad_Enable
 11108                           
 11109                           ;main_B1.c: 123: setBuz(3, 50);
 11110  17B5  3032               	movlw	50
 11111  17B6  0020               	movlb	0	; select bank0
 11112  17B7  00A6               	movwf	setBuz@time
 11113  17B8  3000               	movlw	0
 11114  17B9  00A7               	movwf	setBuz@time+1
 11115  17BA  3003               	movlw	3
 11116  17BB  3196  2696  3197   	fcall	_setBuz
 11117                           
 11118                           ;main_B1.c: 124: TMain->SelfTest = 1;
 11119  17BE  087D               	movf	_TMain,w
 11120  17BF  3E03               	addlw	3
 11121  17C0  0086               	movwf	6
 11122  17C1  3001               	movlw	1	; select bank2/3
 11123  17C2  0087               	movwf	7
 11124  17C3  1401               	bsf	1,0
 11125                           
 11126                           ;main_B1.c: 126: setSw_Enable(1);
 11127  17C4  3001               	movlw	1
 11128  17C5  31A7  2781  3197   	fcall	_setSw_Enable
 11129                           
 11130                           ;main_B1.c: 129: setRF_Enable(1, 1);
 11131  17C8  0020               	movlb	0	; select bank0
 11132  17C9  01A2               	clrf	setRF_Enable@command
 11133  17CA  0AA2               	incf	setRF_Enable@command,f
 11134  17CB  3001               	movlw	1
 11135  17CC  319B  2351         	fcall	_setRF_Enable
 11136                           
 11137                           ;main_B1.c: 133: }
 11138                           ;main_B1.c: 134: } else {
 11139  17CE  0008               	return
 11140  17CF                     l9380:	
 11141                           
 11142                           ;main_B1.c: 142: TMain->Count1++;
 11143  17CF  087D               	movf	_TMain,w
 11144  17D0  3E06               	addlw	6
 11145  17D1  0086               	movwf	6
 11146  17D2  3001               	movlw	1	; select bank2/3
 11147  17D3  0087               	movwf	7
 11148  17D4  3001               	movlw	1
 11149  17D5  0781               	addwf	1,f
 11150  17D6  3141               	addfsr 1,1
 11151  17D7  1803               	skipnc
 11152  17D8  0A81               	incf	1,f
 11153                           
 11154                           ;main_B1.c: 143: if (TMain->Count1 == 100)
 11155  17D9  087D               	movf	_TMain,w
 11156  17DA  3E06               	addlw	6
 11157  17DB  0086               	movwf	6
 11158  17DC  3001               	movlw	1	; select bank2/3
 11159  17DD  0087               	movwf	7
 11160  17DE  3F40               	moviw [0]fsr1
 11161  17DF  3A64               	xorlw	100
 11162  17E0  1D03               	skipz
 11163  17E1  2FE4               	goto	u9515
 11164  17E2  3F41               	moviw [1]fsr1
 11165  17E3  3A00               	xorlw	0
 11166  17E4                     u9515:	
 11167  17E4  1D03               	skipz
 11168  17E5  0008               	return
 11169                           
 11170                           ;main_B1.c: 144: {
 11171                           ;main_B1.c: 145: TMain->Count1 = 0;
 11172  17E6  087D               	movf	_TMain,w
 11173  17E7  3E06               	addlw	6
 11174  17E8  0086               	movwf	6
 11175  17E9  3001               	movlw	1	; select bank2/3
 11176  17EA  0087               	movwf	7
 11177  17EB  3000               	movlw	0
 11178  17EC  3FC0               	movwi [0]fsr1
 11179  17ED  3FC1               	movwi [1]fsr1
 11180                           
 11181                           ;main_B1.c: 158: if (TMain->Flag) {
 11182  17EE  087D               	movf	_TMain,w
 11183  17EF  0086               	movwf	6
 11184  17F0  3001               	movlw	1	; select bank2/3
 11185  17F1  0087               	movwf	7
 11186  17F2  1D81               	btfss	1,3
 11187  17F3  2FFA               	goto	l9388
 11188                           
 11189                           ;main_B1.c: 159: TMain->Flag = 0;
 11190  17F4  087D               	movf	_TMain,w
 11191  17F5  0086               	movwf	6
 11192  17F6  3001               	movlw	1	; select bank2/3
 11193  17F7  0087               	movwf	7
 11194  17F8  1181               	bcf	1,3
 11195                           
 11196                           ;main_B1.c: 168: } else {
 11197  17F9  0008               	return
 11198  17FA                     l9388:	
 11199                           
 11200                           ;main_B1.c: 169: TMain->Flag = 1;
 11201  17FA  087D               	movf	_TMain,w
 11202  17FB  0086               	movwf	6
 11203  17FC  3001               	movlw	1	; select bank2/3
 11204  17FD  0087               	movwf	7
 11205  17FE  1581               	bsf	1,3
 11206  17FF  0008               	return
 11207  1800                     __end_of_MainT:	
 11208                           
 11209                           	psect	text60
 11210  2678                     __ptext60:	
 11211 ;; *************** function _setTemp_Enable *****************
 11212 ;; Defined at:
 11213 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  command         1    wreg     unsigned char 
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;  command         1    0[BANK0 ] unsigned char 
 11218 ;; Return value:  Size  Location     Type
 11219 ;;		None               void
 11220 ;; Registers used:
 11221 ;;		wreg, fsr1l, fsr1h
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;Total ram usage:        1 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    4
 11234 ;; This function calls:
 11235 ;;		Nothing
 11236 ;; This function is called by:
 11237 ;;		_MainT
 11238 ;; This function uses a non-reentrant model
 11239 ;;
 11240                           
 11241                           
 11242                           ;psect for function _setTemp_Enable
 11243  2678                     _setTemp_Enable:	
 11244                           
 11245                           ;incstack = 0
 11246                           ; Regs used in _setTemp_Enable: [wregfsr1]
 11247                           ;setTemp_Enable@command stored from wreg
 11248  2678  0020               	movlb	0	; select bank0
 11249  2679  00A0               	movwf	setTemp_Enable@command
 11250                           
 11251                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
 11252  267A  087B               	movf	_Temp,w
 11253  267B  0086               	movwf	6
 11254  267C  3001               	movlw	1	; select bank2/3
 11255  267D  0087               	movwf	7
 11256  267E  0820               	movf	setTemp_Enable@command,w
 11257  267F  1001               	bcf	1,0
 11258  2680  1D03               	skipz
 11259  2681  1401               	bsf	1,0
 11260  2682  0008               	return
 11261  2683                     __end_of_setTemp_Enable:	
 11262                           
 11263                           	psect	text61
 11264  27D0                     __ptext61:	
 11265 ;; *************** function _setLoad_Enable *****************
 11266 ;; Defined at:
 11267 ;;		line 260 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  command         1    wreg     unsigned char 
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  command         1    0[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;		None               void
 11274 ;; Registers used:
 11275 ;;		wreg, fsr1l, fsr1h
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        1 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    4
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_MainT
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _setLoad_Enable
 11297  27D0                     _setLoad_Enable:	
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _setLoad_Enable: [wregfsr1]
 11301                           ;setLoad_Enable@command stored from wreg
 11302  27D0  0020               	movlb	0	; select bank0
 11303  27D1  00A0               	movwf	setLoad_Enable@command
 11304                           
 11305                           ;OverLoad_B1.c: 261: Load->Enable = command;
 11306  27D2  086E               	movf	_Load,w
 11307  27D3  0086               	movwf	6
 11308  27D4  3002               	movlw	2	; select bank4/5
 11309  27D5  0087               	movwf	7
 11310  27D6  0820               	movf	setLoad_Enable@command,w
 11311  27D7  1001               	bcf	1,0
 11312  27D8  1D03               	skipz
 11313  27D9  1401               	bsf	1,0
 11314                           
 11315                           ;OverLoad_B1.c: 262: Load->GO = 0;
 11316  27DA  086E               	movf	_Load,w
 11317  27DB  0086               	movwf	6
 11318  27DC  3002               	movlw	2	; select bank4/5
 11319  27DD  0087               	movwf	7
 11320  27DE  1081               	bcf	1,1
 11321  27DF  0008               	return
 11322  27E0                     __end_of_setLoad_Enable:	
 11323                           
 11324                           	psect	text62
 11325  0050                     __ptext62:	
 11326 ;; *************** function _Load_Main *****************
 11327 ;; Defined at:
 11328 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;		None
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;  i               1   17[BANK0 ] unsigned char 
 11333 ;; Return value:  Size  Location     Type
 11334 ;;		None               void
 11335 ;; Registers used:
 11336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11344 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;Total ram usage:        5 bytes
 11347 ;; Hardware stack levels used:    1
 11348 ;; Hardware stack levels required when called:    9
 11349 ;; This function calls:
 11350 ;;		___lwdiv
 11351 ;;		___wmul
 11352 ;;		_getPF_Safe
 11353 ;;		_getTemp_Safe
 11354 ;;		_setDimmerLights_Clear
 11355 ;;		_setLoad_AH_AL_Restore
 11356 ;;		_setLoad_Exceptions
 11357 ;; This function is called by:
 11358 ;;		_main
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           
 11363                           ;psect for function _Load_Main
 11364  0050                     _Load_Main:	
 11365                           
 11366                           ;OverLoad_B1.c: 41: char i;
 11367                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 11368                           
 11369                           ;incstack = 0
 11370                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11371  0050  0020               	movlb	0	; select bank0
 11372  0051  086E               	movf	_Load,w
 11373  0052  0086               	movwf	6
 11374  0053  3002               	movlw	2	; select bank4/5
 11375  0054  0087               	movwf	7
 11376  0055  1E81               	btfss	1,5
 11377  0056  287D               	goto	l9210
 11378                           
 11379                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 11380  0057  086E               	movf	_Load,w
 11381  0058  3E03               	addlw	3
 11382  0059  0086               	movwf	6
 11383  005A  3002               	movlw	2	; select bank4/5
 11384  005B  0087               	movwf	7
 11385  005C  3001               	movlw	1
 11386  005D  0781               	addwf	1,f
 11387  005E  3141               	addfsr 1,1
 11388  005F  1803               	skipnc
 11389  0060  0A81               	incf	1,f
 11390                           
 11391                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 11392  0061  086E               	movf	_Load,w
 11393  0062  3E03               	addlw	3
 11394  0063  0086               	movwf	6
 11395  0064  3002               	movlw	2	; select bank4/5
 11396  0065  0087               	movwf	7
 11397  0066  3F40               	moviw [0]fsr1
 11398  0067  00AD               	movwf	??_Load_Main
 11399  0068  3F41               	moviw [1]fsr1
 11400  0069  00AE               	movwf	??_Load_Main+1
 11401  006A  3003               	movlw	3
 11402  006B  022E               	subwf	??_Load_Main+1,w
 11403  006C  30E8               	movlw	232
 11404  006D  1903               	skipnz
 11405  006E  022D               	subwf	??_Load_Main,w
 11406  006F  1C03               	skipc
 11407  0070  0008               	return
 11408                           
 11409                           ;OverLoad_B1.c: 45: {
 11410                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 11411  0071  086E               	movf	_Load,w
 11412  0072  3E03               	addlw	3
 11413  0073  0086               	movwf	6
 11414  0074  3002               	movlw	2	; select bank4/5
 11415  0075  0087               	movwf	7
 11416  0076  3000               	movlw	0
 11417  0077  3FC0               	movwi [0]fsr1
 11418  0078  3FC1               	movwi [1]fsr1
 11419                           
 11420                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11421  0079  3000               	movlw	0
 11422  007A  3190  2010         	fcall	_setLoad_Exceptions
 11423                           
 11424                           ;OverLoad_B1.c: 48: }
 11425                           ;OverLoad_B1.c: 49: } else {
 11426  007C  0008               	return
 11427  007D                     l9210:	
 11428                           
 11429                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11430  007D  0020               	movlb	0	; select bank0
 11431  007E  086E               	movf	_Load,w
 11432  007F  0086               	movwf	6
 11433  0080  3002               	movlw	2	; select bank4/5
 11434  0081  0087               	movwf	7
 11435  0082  1E01               	btfss	1,4
 11436  0083  2A7C               	goto	l9292
 11437                           
 11438                           ;OverLoad_B1.c: 51: Load->Time++;
 11439  0084  0A6E               	incf	_Load,w
 11440  0085  0086               	movwf	6
 11441  0086  3002               	movlw	2	; select bank4/5
 11442  0087  0087               	movwf	7
 11443  0088  3001               	movlw	1
 11444  0089  0781               	addwf	1,f
 11445  008A  3141               	addfsr 1,1
 11446  008B  1803               	skipnc
 11447  008C  0A81               	incf	1,f
 11448                           
 11449                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11450  008D  0A6E               	incf	_Load,w
 11451  008E  0086               	movwf	6
 11452  008F  3002               	movlw	2	; select bank4/5
 11453  0090  0087               	movwf	7
 11454  0091  3F40               	moviw [0]fsr1
 11455  0092  00AD               	movwf	??_Load_Main
 11456  0093  3F41               	moviw [1]fsr1
 11457  0094  00AE               	movwf	??_Load_Main+1
 11458  0095  3000               	movlw	0
 11459  0096  022E               	subwf	??_Load_Main+1,w
 11460  0097  3005               	movlw	5
 11461  0098  1903               	skipnz
 11462  0099  022D               	subwf	??_Load_Main,w
 11463  009A  1C03               	skipc
 11464  009B  0008               	return
 11465                           
 11466                           ;OverLoad_B1.c: 53: {
 11467                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11468  009C  0A6E               	incf	_Load,w
 11469  009D  0086               	movwf	6
 11470  009E  3002               	movlw	2	; select bank4/5
 11471  009F  0087               	movwf	7
 11472  00A0  3000               	movlw	0
 11473  00A1  3FC0               	movwi [0]fsr1
 11474  00A2  3FC1               	movwi [1]fsr1
 11475                           
 11476                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11477  00A3  086E               	movf	_Load,w
 11478  00A4  0086               	movwf	6
 11479  00A5  3002               	movlw	2	; select bank4/5
 11480  00A6  0087               	movwf	7
 11481  00A7  1201               	bcf	1,4
 11482                           
 11483                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11484  00A8  086E               	movf	_Load,w
 11485  00A9  3E45               	addlw	69
 11486  00AA  0086               	movwf	6
 11487  00AB  3002               	movlw	2	; select bank4/5
 11488  00AC  0087               	movwf	7
 11489  00AD  086E               	movf	_Load,w
 11490  00AE  3E44               	addlw	68
 11491  00AF  0084               	movwf	4
 11492  00B0  3002               	movlw	2	; select bank4/5
 11493  00B1  0085               	movwf	5
 11494  00B2  0800               	movf	0,w
 11495  00B3  00AD               	movwf	??_Load_Main
 11496  00B4  086E               	movf	_Load,w
 11497  00B5  3E43               	addlw	67
 11498  00B6  0084               	movwf	4
 11499  00B7  3002               	movlw	2	; select bank4/5
 11500  00B8  0085               	movwf	5
 11501  00B9  0800               	movf	0,w
 11502  00BA  072D               	addwf	??_Load_Main,w
 11503  00BB  0701               	addwf	1,w
 11504  00BC  00AE               	movwf	??_Load_Main+1
 11505  00BD  086E               	movf	_Load,w
 11506  00BE  3E3E               	addlw	62
 11507  00BF  0086               	movwf	6
 11508  00C0  3002               	movlw	2	; select bank4/5
 11509  00C1  0087               	movwf	7
 11510  00C2  082E               	movf	??_Load_Main+1,w
 11511  00C3  0081               	movwf	1
 11512                           
 11513                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11514  00C4  01B1               	clrf	Load_Main@i
 11515  00C5  0AB1               	incf	Load_Main@i,f
 11516  00C6  3004               	movlw	4
 11517  00C7  0231               	subwf	Load_Main@i,w
 11518  00C8  1803               	btfsc	3,0
 11519  00C9  28F8               	goto	l9232
 11520  00CA                     l9226:	
 11521                           
 11522                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11523  00CA  3531               	lslf	Load_Main@i,w
 11524  00CB  3E08               	addlw	8
 11525  00CC  076E               	addwf	_Load,w
 11526  00CD  00AD               	movwf	??_Load_Main
 11527  00CE  082D               	movf	??_Load_Main,w
 11528  00CF  0086               	movwf	6
 11529  00D0  3002               	movlw	2	; select bank4/5
 11530  00D1  0087               	movwf	7
 11531  00D2  086E               	movf	_Load,w
 11532  00D3  3E2E               	addlw	46
 11533  00D4  0084               	movwf	4
 11534  00D5  3002               	movlw	2	; select bank4/5
 11535  00D6  0085               	movwf	5
 11536  00D7  3F40               	moviw [0]fsr1
 11537  00D8  0780               	addwf	0,f
 11538  00D9  3101               	addfsr 0,1
 11539  00DA  3F41               	moviw [1]fsr1
 11540  00DB  3D80               	addwfc	0,f
 11541  00DC  313F               	addfsr 0,-1
 11542                           
 11543                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11544  00DD  3531               	lslf	Load_Main@i,w
 11545  00DE  3E1A               	addlw	26
 11546  00DF  076E               	addwf	_Load,w
 11547  00E0  00AD               	movwf	??_Load_Main
 11548  00E1  082D               	movf	??_Load_Main,w
 11549  00E2  0086               	movwf	6
 11550  00E3  3002               	movlw	2	; select bank4/5
 11551  00E4  0087               	movwf	7
 11552  00E5  086E               	movf	_Load,w
 11553  00E6  3E30               	addlw	48
 11554  00E7  0084               	movwf	4
 11555  00E8  3002               	movlw	2	; select bank4/5
 11556  00E9  0085               	movwf	5
 11557  00EA  3F40               	moviw [0]fsr1
 11558  00EB  0780               	addwf	0,f
 11559  00EC  3101               	addfsr 0,1
 11560  00ED  3F41               	moviw [1]fsr1
 11561  00EE  3D80               	addwfc	0,f
 11562  00EF  313F               	addfsr 0,-1
 11563  00F0  3001               	movlw	1
 11564  00F1  00AD               	movwf	??_Load_Main
 11565  00F2  082D               	movf	??_Load_Main,w
 11566  00F3  07B1               	addwf	Load_Main@i,f
 11567  00F4  3004               	movlw	4
 11568  00F5  0231               	subwf	Load_Main@i,w
 11569  00F6  1C03               	skipc
 11570  00F7  28CA               	goto	l9226
 11571  00F8                     l9232:	
 11572                           
 11573                           ;OverLoad_B1.c: 60: }
 11574                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11575  00F8  3003               	movlw	3
 11576  00F9  00A0               	movwf	___lwdiv@divisor
 11577  00FA  3000               	movlw	0
 11578  00FB  00A1               	movwf	___lwdiv@divisor+1
 11579  00FC  086E               	movf	_Load,w
 11580  00FD  3E2E               	addlw	46
 11581  00FE  0086               	movwf	6
 11582  00FF  3002               	movlw	2	; select bank4/5
 11583  0100  0087               	movwf	7
 11584  0101  3F40               	moviw [0]fsr1
 11585  0102  00A2               	movwf	___lwdiv@dividend
 11586  0103  3F41               	moviw [1]fsr1
 11587  0104  00A3               	movwf	___lwdiv@dividend+1
 11588  0105  3188  2001  3180   	fcall	___lwdiv
 11589  0108  0020               	movlb	0	; select bank0
 11590  0109  086E               	movf	_Load,w
 11591  010A  3E2E               	addlw	46
 11592  010B  0086               	movwf	6
 11593  010C  3002               	movlw	2	; select bank4/5
 11594  010D  0087               	movwf	7
 11595  010E  0820               	movf	?___lwdiv,w
 11596  010F  3FC0               	movwi [0]fsr1
 11597  0110  0821               	movf	?___lwdiv+1,w
 11598  0111  3FC1               	movwi [1]fsr1
 11599                           
 11600                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11601  0112  3003               	movlw	3
 11602  0113  00A0               	movwf	___lwdiv@divisor
 11603  0114  3000               	movlw	0
 11604  0115  00A1               	movwf	___lwdiv@divisor+1
 11605  0116  086E               	movf	_Load,w
 11606  0117  3E30               	addlw	48
 11607  0118  0086               	movwf	6
 11608  0119  3002               	movlw	2	; select bank4/5
 11609  011A  0087               	movwf	7
 11610  011B  3F40               	moviw [0]fsr1
 11611  011C  00A2               	movwf	___lwdiv@dividend
 11612  011D  3F41               	moviw [1]fsr1
 11613  011E  00A3               	movwf	___lwdiv@dividend+1
 11614  011F  3188  2001  3180   	fcall	___lwdiv
 11615  0122  0020               	movlb	0	; select bank0
 11616  0123  086E               	movf	_Load,w
 11617  0124  3E30               	addlw	48
 11618  0125  0086               	movwf	6
 11619  0126  3002               	movlw	2	; select bank4/5
 11620  0127  0087               	movwf	7
 11621  0128  0820               	movf	?___lwdiv,w
 11622  0129  3FC0               	movwi [0]fsr1
 11623  012A  0821               	movf	?___lwdiv+1,w
 11624  012B  3FC1               	movwi [1]fsr1
 11625                           
 11626                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11627  012C  086E               	movf	_Load,w
 11628  012D  3E2E               	addlw	46
 11629  012E  0086               	movwf	6
 11630  012F  3002               	movlw	2	; select bank4/5
 11631  0130  0087               	movwf	7
 11632  0131  3F40               	moviw [0]fsr1
 11633  0132  00AD               	movwf	??_Load_Main
 11634  0133  3F41               	moviw [1]fsr1
 11635  0134  00AE               	movwf	??_Load_Main+1
 11636  0135  086E               	movf	_Load,w
 11637  0136  3E30               	addlw	48
 11638  0137  0086               	movwf	6
 11639  0138  3002               	movlw	2	; select bank4/5
 11640  0139  0087               	movwf	7
 11641  013A  3F40               	moviw [0]fsr1
 11642  013B  00AF               	movwf	??_Load_Main+2
 11643  013C  3F41               	moviw [1]fsr1
 11644  013D  00B0               	movwf	??_Load_Main+3
 11645  013E  082E               	movf	??_Load_Main+1,w
 11646  013F  0230               	subwf	??_Load_Main+3,w
 11647  0140  1D03               	skipz
 11648  0141  2944               	goto	u9285
 11649  0142  082D               	movf	??_Load_Main,w
 11650  0143  022F               	subwf	??_Load_Main+2,w
 11651  0144                     u9285:	
 11652  0144  1803               	skipnc
 11653  0145  2A79               	goto	l9290
 11654                           
 11655                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11656  0146  086E               	movf	_Load,w
 11657  0147  3E2E               	addlw	46
 11658  0148  0086               	movwf	6
 11659  0149  3002               	movlw	2	; select bank4/5
 11660  014A  0087               	movwf	7
 11661  014B  086E               	movf	_Load,w
 11662  014C  3E30               	addlw	48
 11663  014D  0084               	movwf	4
 11664  014E  3002               	movlw	2	; select bank4/5
 11665  014F  0085               	movwf	5
 11666  0150  3F00               	moviw [0]fsr0
 11667  0151  00AD               	movwf	??_Load_Main
 11668  0152  3F01               	moviw [1]fsr0
 11669  0153  00AE               	movwf	??_Load_Main+1
 11670  0154  09AD               	comf	??_Load_Main,f
 11671  0155  09AE               	comf	??_Load_Main+1,f
 11672  0156  0AAD               	incf	??_Load_Main,f
 11673  0157  1903               	skipnz
 11674  0158  0AAE               	incf	??_Load_Main+1,f
 11675  0159  3F40               	moviw [0]fsr1
 11676  015A  072D               	addwf	??_Load_Main,w
 11677  015B  00AF               	movwf	??_Load_Main+2
 11678  015C  3F41               	moviw [1]fsr1
 11679  015D  3D2E               	addwfc	??_Load_Main+1,w
 11680  015E  00B0               	movwf	??_Load_Main+3
 11681  015F  086E               	movf	_Load,w
 11682  0160  3E2C               	addlw	44
 11683  0161  0086               	movwf	6
 11684  0162  3002               	movlw	2	; select bank4/5
 11685  0163  0087               	movwf	7
 11686  0164  082F               	movf	??_Load_Main+2,w
 11687  0165  3FC0               	movwi [0]fsr1
 11688  0166  0830               	movf	??_Load_Main+3,w
 11689  0167  3FC1               	movwi [1]fsr1
 11690                           
 11691                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11692  0168  086E               	movf	_Load,w
 11693  0169  3E3A               	addlw	58
 11694  016A  0086               	movwf	6
 11695  016B  3002               	movlw	2	; select bank4/5
 11696  016C  0087               	movwf	7
 11697  016D  3002               	movlw	2
 11698  016E  0201               	subwf	1,w
 11699  016F  1803               	skipnc
 11700  0170  29C1               	goto	l9254
 11701                           
 11702                           ;OverLoad_B1.c: 67: Load->Count++;
 11703  0171  3001               	movlw	1
 11704  0172  00AD               	movwf	??_Load_Main
 11705  0173  086E               	movf	_Load,w
 11706  0174  3E3A               	addlw	58
 11707  0175  0086               	movwf	6
 11708  0176  3002               	movlw	2	; select bank4/5
 11709  0177  0087               	movwf	7
 11710  0178  082D               	movf	??_Load_Main,w
 11711  0179  0781               	addwf	1,f
 11712                           
 11713                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11714  017A  086E               	movf	_Load,w
 11715  017B  3E3A               	addlw	58
 11716  017C  0086               	movwf	6
 11717  017D  3002               	movlw	2	; select bank4/5
 11718  017E  0087               	movwf	7
 11719  017F  0801               	movf	1,w
 11720  0180  3A01               	xorlw	1
 11721  0181  1D03               	skipz
 11722  0182  298D               	goto	l9246
 11723                           
 11724                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11725  0183  086E               	movf	_Load,w
 11726  0184  3E36               	addlw	54
 11727  0185  0086               	movwf	6
 11728  0186  3002               	movlw	2	; select bank4/5
 11729  0187  0087               	movwf	7
 11730  0188  30F4               	movlw	244
 11731  0189  3FC0               	movwi [0]fsr1
 11732  018A  3001               	movlw	1
 11733  018B  3FC1               	movwi [1]fsr1
 11734                           
 11735                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11736  018C  29C1               	goto	l9254
 11737  018D                     l9246:	
 11738  018D  086E               	movf	_Load,w
 11739  018E  3E3A               	addlw	58
 11740  018F  0086               	movwf	6
 11741  0190  3002               	movlw	2	; select bank4/5
 11742  0191  0087               	movwf	7
 11743  0192  0801               	movf	1,w
 11744  0193  3A02               	xorlw	2
 11745  0194  1D03               	skipz
 11746  0195  29C1               	goto	l9254
 11747                           
 11748                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11749  0196  086E               	movf	_Load,w
 11750  0197  3E3E               	addlw	62
 11751  0198  0086               	movwf	6
 11752  0199  3002               	movlw	2	; select bank4/5
 11753  019A  0087               	movwf	7
 11754  019B  0801               	movf	1,w
 11755  019C  3A01               	xorlw	1
 11756  019D  1D03               	skipz
 11757  019E  29A9               	goto	l9252
 11758                           
 11759                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x42;
 11760  019F  086E               	movf	_Load,w
 11761  01A0  3E36               	addlw	54
 11762  01A1  0086               	movwf	6
 11763  01A2  3002               	movlw	2	; select bank4/5
 11764  01A3  0087               	movwf	7
 11765  01A4  3042               	movlw	66
 11766  01A5  3FC0               	movwi [0]fsr1
 11767  01A6  3000               	movlw	0
 11768  01A7  3FC1               	movwi [1]fsr1
 11769                           
 11770                           ;OverLoad_B1.c: 73: } else {
 11771  01A8  29C1               	goto	l9254
 11772  01A9                     l9252:	
 11773                           
 11774                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x42 + Load->TotalLoad) - 0x08;
 11775  01A9  086E               	movf	_Load,w
 11776  01AA  3E06               	addlw	6
 11777  01AB  0086               	movwf	6
 11778  01AC  3002               	movlw	2	; select bank4/5
 11779  01AD  0087               	movwf	7
 11780  01AE  3F40               	moviw [0]fsr1
 11781  01AF  00AD               	movwf	??_Load_Main
 11782  01B0  3F41               	moviw [1]fsr1
 11783  01B1  00AE               	movwf	??_Load_Main+1
 11784  01B2  082D               	movf	??_Load_Main,w
 11785  01B3  3E3A               	addlw	58
 11786  01B4  00AF               	movwf	??_Load_Main+2
 11787  01B5  3000               	movlw	0
 11788  01B6  3D2E               	addwfc	??_Load_Main+1,w
 11789  01B7  00B0               	movwf	??_Load_Main+3
 11790  01B8  086E               	movf	_Load,w
 11791  01B9  3E36               	addlw	54
 11792  01BA  0086               	movwf	6
 11793  01BB  3002               	movlw	2	; select bank4/5
 11794  01BC  0087               	movwf	7
 11795  01BD  082F               	movf	??_Load_Main+2,w
 11796  01BE  3FC0               	movwi [0]fsr1
 11797  01BF  0830               	movf	??_Load_Main+3,w
 11798  01C0  3FC1               	movwi [1]fsr1
 11799  01C1                     l9254:	
 11800                           
 11801                           ;OverLoad_B1.c: 75: }
 11802                           ;OverLoad_B1.c: 76: }
 11803                           ;OverLoad_B1.c: 77: }
 11804                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 11805  01C1  086E               	movf	_Load,w
 11806  01C2  3E36               	addlw	54
 11807  01C3  0086               	movwf	6
 11808  01C4  3002               	movlw	2	; select bank4/5
 11809  01C5  0087               	movwf	7
 11810  01C6  3F40               	moviw [0]fsr1
 11811  01C7  00AD               	movwf	??_Load_Main
 11812  01C8  3F41               	moviw [1]fsr1
 11813  01C9  00AE               	movwf	??_Load_Main+1
 11814  01CA  086E               	movf	_Load,w
 11815  01CB  3E2C               	addlw	44
 11816  01CC  0086               	movwf	6
 11817  01CD  3002               	movlw	2	; select bank4/5
 11818  01CE  0087               	movwf	7
 11819  01CF  3F40               	moviw [0]fsr1
 11820  01D0  00AF               	movwf	??_Load_Main+2
 11821  01D1  3F41               	moviw [1]fsr1
 11822  01D2  00B0               	movwf	??_Load_Main+3
 11823  01D3  082E               	movf	??_Load_Main+1,w
 11824  01D4  0230               	subwf	??_Load_Main+3,w
 11825  01D5  1D03               	skipz
 11826  01D6  29D9               	goto	u9335
 11827  01D7  082D               	movf	??_Load_Main,w
 11828  01D8  022F               	subwf	??_Load_Main+2,w
 11829  01D9                     u9335:	
 11830  01D9  1C03               	skipc
 11831  01DA  29F8               	goto	l9264
 11832                           
 11833                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 11834  01DB  3001               	movlw	1
 11835  01DC  00AD               	movwf	??_Load_Main
 11836  01DD  086E               	movf	_Load,w
 11837  01DE  3E3C               	addlw	60
 11838  01DF  0086               	movwf	6
 11839  01E0  3002               	movlw	2	; select bank4/5
 11840  01E1  0087               	movwf	7
 11841  01E2  082D               	movf	??_Load_Main,w
 11842  01E3  0781               	addwf	1,f
 11843                           
 11844                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 11845  01E4  086E               	movf	_Load,w
 11846  01E5  3E3C               	addlw	60
 11847  01E6  0086               	movwf	6
 11848  01E7  3002               	movlw	2	; select bank4/5
 11849  01E8  0087               	movwf	7
 11850  01E9  3003               	movlw	3
 11851  01EA  0201               	subwf	1,w
 11852  01EB  1C03               	skipc
 11853  01EC  2A79               	goto	l9290
 11854                           
 11855                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 11856  01ED  086E               	movf	_Load,w
 11857  01EE  3E3C               	addlw	60
 11858  01EF  0086               	movwf	6
 11859  01F0  3002               	movlw	2	; select bank4/5
 11860  01F1  0087               	movwf	7
 11861  01F2  0181               	clrf	1
 11862                           
 11863                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 11864  01F3  3001               	movlw	1
 11865  01F4  3190  2010  3180   	fcall	_setLoad_Exceptions
 11866                           
 11867                           ;OverLoad_B1.c: 92: }
 11868                           ;OverLoad_B1.c: 93: } else {
 11869  01F7  2A79               	goto	l9290
 11870  01F8                     l9264:	
 11871                           
 11872                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 11873  01F8  0020               	movlb	0	; select bank0
 11874  01F9  086E               	movf	_Load,w
 11875  01FA  3E3C               	addlw	60
 11876  01FB  0086               	movwf	6
 11877  01FC  3002               	movlw	2	; select bank4/5
 11878  01FD  0087               	movwf	7
 11879  01FE  0181               	clrf	1
 11880                           
 11881                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 11882  01FF  086E               	movf	_Load,w
 11883  0200  3E42               	addlw	66
 11884  0201  0086               	movwf	6
 11885  0202  3002               	movlw	2	; select bank4/5
 11886  0203  0087               	movwf	7
 11887  0204  300A               	movlw	10
 11888  0205  0201               	subwf	1,w
 11889  0206  1803               	skipnc
 11890  0207  2A11               	goto	l9270
 11891                           
 11892                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 11893  0208  3001               	movlw	1
 11894  0209  00AD               	movwf	??_Load_Main
 11895  020A  086E               	movf	_Load,w
 11896  020B  3E42               	addlw	66
 11897  020C  0086               	movwf	6
 11898  020D  3002               	movlw	2	; select bank4/5
 11899  020E  0087               	movwf	7
 11900  020F  082D               	movf	??_Load_Main,w
 11901  0210  0781               	addwf	1,f
 11902  0211                     l9270:	
 11903                           
 11904                           ;OverLoad_B1.c: 97: }
 11905                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 11906  0211  086E               	movf	_Load,w
 11907  0212  3E42               	addlw	66
 11908  0213  0086               	movwf	6
 11909  0214  3002               	movlw	2	; select bank4/5
 11910  0215  0087               	movwf	7
 11911  0216  300A               	movlw	10
 11912  0217  0201               	subwf	1,w
 11913  0218  1C03               	skipc
 11914  0219  2A79               	goto	l9290
 11915                           
 11916                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 11917  021A  086E               	movf	_Load,w
 11918  021B  0086               	movwf	6
 11919  021C  3002               	movlw	2	; select bank4/5
 11920  021D  0087               	movwf	7
 11921  021E  1581               	bsf	1,3
 11922                           
 11923                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 11924  021F  01A2               	clrf	setDimmerLights_Clear@command
 11925  0220  0AA2               	incf	setDimmerLights_Clear@command,f
 11926  0221  3001               	movlw	1
 11927  0222  31A7  27C0  3180   	fcall	_setDimmerLights_Clear
 11928                           
 11929                           ;OverLoad_B1.c: 107: ;;
 11930                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 11931  0225  0020               	movlb	0	; select bank0
 11932  0226  086E               	movf	_Load,w
 11933  0227  3E46               	addlw	70
 11934  0228  0086               	movwf	6
 11935  0229  3002               	movlw	2	; select bank4/5
 11936  022A  0087               	movwf	7
 11937  022B  1C01               	btfss	1,0
 11938  022C  2A41               	goto	l9282
 11939                           
 11940                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 11941  022D  086E               	movf	_Load,w
 11942  022E  3E46               	addlw	70
 11943  022F  0086               	movwf	6
 11944  0230  3002               	movlw	2	; select bank4/5
 11945  0231  0087               	movwf	7
 11946  0232  1001               	bcf	1,0
 11947                           
 11948                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 11949  0233  086E               	movf	_Load,w
 11950  0234  3E2C               	addlw	44
 11951  0235  0086               	movwf	6
 11952  0236  3002               	movlw	2	; select bank4/5
 11953  0237  0087               	movwf	7
 11954  0238  086E               	movf	_Load,w
 11955  0239  3E06               	addlw	6
 11956  023A  0084               	movwf	4
 11957  023B  3002               	movlw	2	; select bank4/5
 11958  023C  0085               	movwf	5
 11959  023D  3F40               	moviw [0]fsr1
 11960  023E  3F80               	movwi [0]fsr0
 11961  023F  3F41               	moviw [1]fsr1
 11962  0240  3F81               	movwi [1]fsr0
 11963  0241                     l9282:	
 11964                           
 11965                           ;OverLoad_B1.c: 136: }
 11966                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 11967  0241  086E               	movf	_Load,w
 11968  0242  3E46               	addlw	70
 11969  0243  0086               	movwf	6
 11970  0244  3002               	movlw	2	; select bank4/5
 11971  0245  0087               	movwf	7
 11972  0246  1C81               	btfss	1,1
 11973  0247  2A79               	goto	l9290
 11974                           
 11975                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 11976  0248  086E               	movf	_Load,w
 11977  0249  3E46               	addlw	70
 11978  024A  0086               	movwf	6
 11979  024B  3002               	movlw	2	; select bank4/5
 11980  024C  0087               	movwf	7
 11981  024D  1081               	bcf	1,1
 11982                           
 11983                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 11984  024E  086E               	movf	_Load,w
 11985  024F  3E2C               	addlw	44
 11986  0250  0086               	movwf	6
 11987  0251  3002               	movlw	2	; select bank4/5
 11988  0252  0087               	movwf	7
 11989  0253  086E               	movf	_Load,w
 11990  0254  3E06               	addlw	6
 11991  0255  0084               	movwf	4
 11992  0256  3002               	movlw	2	; select bank4/5
 11993  0257  0085               	movwf	5
 11994  0258  3F40               	moviw [0]fsr1
 11995  0259  3F80               	movwi [0]fsr0
 11996  025A  3F41               	moviw [1]fsr1
 11997  025B  3F81               	movwi [1]fsr0
 11998                           
 11999                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x42 * Load->LightsCount;
 12000  025C  086E               	movf	_Load,w
 12001  025D  3E3E               	addlw	62
 12002  025E  0086               	movwf	6
 12003  025F  3002               	movlw	2	; select bank4/5
 12004  0260  0087               	movwf	7
 12005  0261  0801               	movf	1,w
 12006  0262  00AD               	movwf	??_Load_Main
 12007  0263  01AE               	clrf	??_Load_Main+1
 12008  0264  082D               	movf	??_Load_Main,w
 12009  0265  00A0               	movwf	___wmul@multiplier
 12010  0266  082E               	movf	??_Load_Main+1,w
 12011  0267  00A1               	movwf	___wmul@multiplier+1
 12012  0268  3042               	movlw	66
 12013  0269  00A2               	movwf	___wmul@multiplicand
 12014  026A  3000               	movlw	0
 12015  026B  00A3               	movwf	___wmul@multiplicand+1
 12016  026C  3199  21D0  3180   	fcall	___wmul
 12017  026F  0020               	movlb	0	; select bank0
 12018  0270  086E               	movf	_Load,w
 12019  0271  3E36               	addlw	54
 12020  0272  0086               	movwf	6
 12021  0273  3002               	movlw	2	; select bank4/5
 12022  0274  0087               	movwf	7
 12023  0275  0820               	movf	?___wmul,w
 12024  0276  3FC0               	movwi [0]fsr1
 12025  0277  0821               	movf	?___wmul+1,w
 12026  0278  3FC1               	movwi [1]fsr1
 12027  0279                     l9290:	
 12028                           
 12029                           ;OverLoad_B1.c: 142: }
 12030                           ;OverLoad_B1.c: 143: }
 12031                           ;OverLoad_B1.c: 144: }
 12032                           ;OverLoad_B1.c: 145: }
 12033                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 12034  0279  319A  2271         	fcall	_setLoad_AH_AL_Restore
 12035                           
 12036                           ;OverLoad_B1.c: 158: }
 12037                           ;OverLoad_B1.c: 159: } else {
 12038  027B  0008               	return
 12039  027C                     l9292:	
 12040                           
 12041                           ;OverLoad_B1.c: 160: if (Load->GO) {
 12042  027C  0020               	movlb	0	; select bank0
 12043  027D  086E               	movf	_Load,w
 12044  027E  0086               	movwf	6
 12045  027F  3002               	movlw	2	; select bank4/5
 12046  0280  0087               	movwf	7
 12047  0281  1C81               	btfss	1,1
 12048  0282  2AA6               	goto	l9304
 12049                           
 12050                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 12051  0283  086E               	movf	_Load,w
 12052  0284  0086               	movwf	6
 12053  0285  3002               	movlw	2	; select bank4/5
 12054  0286  0087               	movwf	7
 12055  0287  1901               	btfsc	1,2
 12056  0288  2A93               	goto	l9298
 12057                           
 12058                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 12059  0289  086E               	movf	_Load,w
 12060  028A  0086               	movwf	6
 12061  028B  3002               	movlw	2	; select bank4/5
 12062  028C  0087               	movwf	7
 12063  028D  1501               	bsf	1,2
 12064                           
 12065                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 12066  028E  086E               	movf	_Load,w
 12067  028F  0086               	movwf	6
 12068  0290  3002               	movlw	2	; select bank4/5
 12069  0291  0087               	movwf	7
 12070  0292  1181               	bcf	1,3
 12071  0293                     l9298:	
 12072                           
 12073                           ;OverLoad_B1.c: 164: }
 12074                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && getPF_Safe()) {
 12075  0293  31A5  25FD  3180   	fcall	_getTemp_Safe
 12076  0296  3A00               	xorlw	0
 12077  0297  1903               	skipnz
 12078  0298  0008               	return
 12079  0299  31A6  2612  3180   	fcall	_getPF_Safe
 12080  029C  3A00               	xorlw	0
 12081  029D  1903               	skipnz
 12082  029E  0008               	return
 12083                           
 12084                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 12085  029F  0020               	movlb	0	; select bank0
 12086  02A0  086E               	movf	_Load,w
 12087  02A1  0086               	movwf	6
 12088  02A2  3002               	movlw	2	; select bank4/5
 12089  02A3  0087               	movwf	7
 12090  02A4  1601               	bsf	1,4
 12091                           
 12092                           ;OverLoad_B1.c: 167: }
 12093                           ;OverLoad_B1.c: 168: } else {
 12094  02A5  0008               	return
 12095  02A6                     l9304:	
 12096                           
 12097                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 12098  02A6  086E               	movf	_Load,w
 12099  02A7  0086               	movwf	6
 12100  02A8  3002               	movlw	2	; select bank4/5
 12101  02A9  0087               	movwf	7
 12102  02AA  1D01               	btfss	1,2
 12103  02AB  0008               	return
 12104                           
 12105                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 12106  02AC  086E               	movf	_Load,w
 12107  02AD  0086               	movwf	6
 12108  02AE  3002               	movlw	2	; select bank4/5
 12109  02AF  0087               	movwf	7
 12110  02B0  1101               	bcf	1,2
 12111                           
 12112                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 12113  02B1  086E               	movf	_Load,w
 12114  02B2  0086               	movwf	6
 12115  02B3  3002               	movlw	2	; select bank4/5
 12116  02B4  0087               	movwf	7
 12117  02B5  1581               	bsf	1,3
 12118                           
 12119                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 12120  02B6  086E               	movf	_Load,w
 12121  02B7  3E3C               	addlw	60
 12122  02B8  0086               	movwf	6
 12123  02B9  3002               	movlw	2	; select bank4/5
 12124  02BA  0087               	movwf	7
 12125  02BB  0181               	clrf	1
 12126                           
 12127                           ;OverLoad_B1.c: 173: Load->Count = 0;
 12128  02BC  086E               	movf	_Load,w
 12129  02BD  3E3A               	addlw	58
 12130  02BE  0086               	movwf	6
 12131  02BF  3002               	movlw	2	; select bank4/5
 12132  02C0  0087               	movwf	7
 12133  02C1  0181               	clrf	1
 12134                           
 12135                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 12136  02C2  086E               	movf	_Load,w
 12137  02C3  3E06               	addlw	6
 12138  02C4  0086               	movwf	6
 12139  02C5  3002               	movlw	2	; select bank4/5
 12140  02C6  0087               	movwf	7
 12141  02C7  3000               	movlw	0
 12142  02C8  3FC0               	movwi [0]fsr1
 12143  02C9  3FC1               	movwi [1]fsr1
 12144                           
 12145                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 12146  02CA  086E               	movf	_Load,w
 12147  02CB  3E3F               	addlw	63
 12148  02CC  0086               	movwf	6
 12149  02CD  3002               	movlw	2	; select bank4/5
 12150  02CE  0087               	movwf	7
 12151  02CF  0181               	clrf	1
 12152                           
 12153                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 12154  02D0  086E               	movf	_Load,w
 12155  02D1  3E46               	addlw	70
 12156  02D2  0086               	movwf	6
 12157  02D3  3002               	movlw	2	; select bank4/5
 12158  02D4  0087               	movwf	7
 12159  02D5  1001               	bcf	1,0
 12160                           
 12161                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 12162  02D6  086E               	movf	_Load,w
 12163  02D7  3E46               	addlw	70
 12164  02D8  0086               	movwf	6
 12165  02D9  3002               	movlw	2	; select bank4/5
 12166  02DA  0087               	movwf	7
 12167  02DB  1081               	bcf	1,1
 12168                           
 12169                           ;OverLoad_B1.c: 178: Load->AD = 0;
 12170  02DC  086E               	movf	_Load,w
 12171  02DD  3E2C               	addlw	44
 12172  02DE  0086               	movwf	6
 12173  02DF  3002               	movlw	2	; select bank4/5
 12174  02E0  0087               	movwf	7
 12175  02E1  3000               	movlw	0
 12176  02E2  3FC0               	movwi [0]fsr1
 12177  02E3  3FC1               	movwi [1]fsr1
 12178                           
 12179                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 12180  02E4  319A  2271  3180   	fcall	_setLoad_AH_AL_Restore
 12181                           
 12182                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 12183  02E7  0020               	movlb	0	; select bank0
 12184  02E8  01A2               	clrf	setDimmerLights_Clear@command
 12185  02E9  0AA2               	incf	setDimmerLights_Clear@command,f
 12186  02EA  3001               	movlw	1
 12187  02EB  31A7  27C0         	fcall	_setDimmerLights_Clear
 12188                           
 12189                           ;OverLoad_B1.c: 187: ;;
 12190  02ED  0008               	return
 12191  02EE                     __end_of_Load_Main:	
 12192                           
 12193                           	psect	text63
 12194  1010                     __ptext63:	
 12195 ;; *************** function _setLoad_Exceptions *****************
 12196 ;; Defined at:
 12197 ;;		line 232 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;  command         1    wreg     unsigned char 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  command         1   12[BANK0 ] unsigned char 
 12202 ;; Return value:  Size  Location     Type
 12203 ;;		None               void
 12204 ;; Registers used:
 12205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12206 ;; Tracked objects:
 12207 ;;		On entry : 0/0
 12208 ;;		On exit  : 0/0
 12209 ;;		Unchanged: 0/0
 12210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;Total ram usage:        2 bytes
 12216 ;; Hardware stack levels used:    1
 12217 ;; Hardware stack levels required when called:    8
 12218 ;; This function calls:
 12219 ;;		_DimmerLights_Exceptions
 12220 ;;		_setLED
 12221 ;;		_setRF_Enable
 12222 ;;		_setSw_Enable
 12223 ;; This function is called by:
 12224 ;;		_Load_Main
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function _setLoad_Exceptions
 12230  1010                     _setLoad_Exceptions:	
 12231                           
 12232                           ;incstack = 0
 12233                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12234                           ;setLoad_Exceptions@command stored from wreg
 12235  1010  0020               	movlb	0	; select bank0
 12236  1011  00AC               	movwf	setLoad_Exceptions@command
 12237                           
 12238                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 12239  1012  086E               	movf	_Load,w
 12240  1013  0086               	movwf	6
 12241  1014  3002               	movlw	2	; select bank4/5
 12242  1015  0087               	movwf	7
 12243  1016  082C               	movf	setLoad_Exceptions@command,w
 12244  1017  1281               	bcf	1,5
 12245  1018  1D03               	skipz
 12246  1019  1681               	bsf	1,5
 12247                           
 12248                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 12249  101A  092C               	comf	setLoad_Exceptions@command,w
 12250  101B  3901               	andlw	1
 12251  101C  00AB               	movwf	??_setLoad_Exceptions
 12252  101D  086E               	movf	_Load,w
 12253  101E  0086               	movwf	6
 12254  101F  3002               	movlw	2	; select bank4/5
 12255  1020  0087               	movwf	7
 12256  1021  0DAB               	rlf	??_setLoad_Exceptions,f
 12257  1022  0DAB               	rlf	??_setLoad_Exceptions,f
 12258  1023  0DAB               	rlf	??_setLoad_Exceptions,f
 12259  1024  0801               	movf	1,w
 12260  1025  062B               	xorwf	??_setLoad_Exceptions,w
 12261  1026  39F7               	andlw	-9
 12262  1027  062B               	xorwf	??_setLoad_Exceptions,w
 12263  1028  0081               	movwf	1
 12264                           
 12265                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 12266  1029  082C               	movf	setLoad_Exceptions@command,w
 12267  102A  00AB               	movwf	??_setLoad_Exceptions
 12268  102B  086E               	movf	_Load,w
 12269  102C  3E05               	addlw	5
 12270  102D  0086               	movwf	6
 12271  102E  3002               	movlw	2	; select bank4/5
 12272  102F  0087               	movwf	7
 12273  1030  082B               	movf	??_setLoad_Exceptions,w
 12274  1031  0081               	movwf	1
 12275                           
 12276                           ;OverLoad_B1.c: 237: if (command) {
 12277  1032  082C               	movf	setLoad_Exceptions@command,w
 12278  1033  1903               	btfsc	3,2
 12279  1034  2840               	goto	l1561
 12280                           
 12281                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 12282  1035  3002               	movlw	2
 12283  1036  3191  215C  3190   	fcall	_DimmerLights_Exceptions
 12284                           
 12285                           ;OverLoad_B1.c: 240: setLED(2, 1);
 12286  1039  0020               	movlb	0	; select bank0
 12287  103A  01A2               	clrf	setLED@command
 12288  103B  0AA2               	incf	setLED@command,f
 12289  103C  3002               	movlw	2
 12290  103D  3192  226D  3190   	fcall	_setLED
 12291  1040                     l1561:	
 12292                           
 12293                           ;OverLoad_B1.c: 242: }
 12294                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 12295  1040  0020               	movlb	0	; select bank0
 12296  1041  082C               	movf	setLoad_Exceptions@command,w
 12297  1042  3E0A               	addlw	10
 12298  1043  00AB               	movwf	??_setLoad_Exceptions
 12299  1044  082B               	movf	??_setLoad_Exceptions,w
 12300  1045  00A2               	movwf	setLED@command
 12301  1046  3063               	movlw	99
 12302  1047  3192  226D  3190   	fcall	_setLED
 12303                           
 12304                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 12305  104A  0020               	movlb	0	; select bank0
 12306  104B  092C               	comf	setLoad_Exceptions@command,w
 12307  104C  3901               	andlw	1
 12308  104D  31A7  2781  3190   	fcall	_setSw_Enable
 12309                           
 12310                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 12311  1050  0020               	movlb	0	; select bank0
 12312  1051  092C               	comf	setLoad_Exceptions@command,w
 12313  1052  3901               	andlw	1
 12314  1053  00AB               	movwf	??_setLoad_Exceptions
 12315  1054  082B               	movf	??_setLoad_Exceptions,w
 12316  1055  00A2               	movwf	setRF_Enable@command
 12317  1056  3001               	movlw	1
 12318  1057  319B  2351         	fcall	_setRF_Enable
 12319  1059  0008               	return
 12320  105A                     __end_of_setLoad_Exceptions:	
 12321                           
 12322                           	psect	text64
 12323  2781                     __ptext64:	
 12324 ;; *************** function _setSw_Enable *****************
 12325 ;; Defined at:
 12326 ;;		line 85 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 12327 ;; Parameters:    Size  Location     Type
 12328 ;;  command         1    wreg     unsigned char 
 12329 ;; Auto vars:     Size  Location     Type
 12330 ;;  command         1    2[BANK0 ] unsigned char 
 12331 ;; Return value:  Size  Location     Type
 12332 ;;		None               void
 12333 ;; Registers used:
 12334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12335 ;; Tracked objects:
 12336 ;;		On entry : 0/0
 12337 ;;		On exit  : 0/0
 12338 ;;		Unchanged: 0/0
 12339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;Total ram usage:        1 bytes
 12345 ;; Hardware stack levels used:    1
 12346 ;; Hardware stack levels required when called:    5
 12347 ;; This function calls:
 12348 ;;		_SwPointSelect
 12349 ;; This function is called by:
 12350 ;;		_setLoad_Exceptions
 12351 ;;		_setOverTemp_Exceptions
 12352 ;;		_setPowerFault_Exceptions
 12353 ;;		_MainT
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           
 12358                           ;psect for function _setSw_Enable
 12359  2781                     _setSw_Enable:	
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12363                           ;setSw_Enable@command stored from wreg
 12364  2781  0020               	movlb	0	; select bank0
 12365  2782  00A2               	movwf	setSw_Enable@command
 12366                           
 12367                           ;Switch_B1.c: 88: SwPointSelect(1);
 12368  2783  3001               	movlw	1
 12369  2784  31A6  2657         	fcall	_SwPointSelect
 12370                           
 12371                           ;Switch_B1.c: 89: Sw->Enable = command;
 12372  2786  0020               	movlb	0	; select bank0
 12373  2787  086D               	movf	_Sw,w
 12374  2788  0086               	movwf	6
 12375  2789  3001               	movlw	1	; select bank2/3
 12376  278A  0087               	movwf	7
 12377  278B  0822               	movf	setSw_Enable@command,w
 12378  278C  1001               	bcf	1,0
 12379  278D  1D03               	skipz
 12380  278E  1401               	bsf	1,0
 12381  278F  0008               	return
 12382  2790                     __end_of_setSw_Enable:	
 12383                           
 12384                           	psect	text65
 12385  1B51                     __ptext65:	
 12386 ;; *************** function _setRF_Enable *****************
 12387 ;; Defined at:
 12388 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  rf              1    wreg     unsigned char 
 12391 ;;  command         1    2[BANK0 ] unsigned char 
 12392 ;; Auto vars:     Size  Location     Type
 12393 ;;  rf              1    3[BANK0 ] unsigned char 
 12394 ;; Return value:  Size  Location     Type
 12395 ;;		None               void
 12396 ;; Registers used:
 12397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12398 ;; Tracked objects:
 12399 ;;		On entry : 0/0
 12400 ;;		On exit  : 0/0
 12401 ;;		Unchanged: 0/0
 12402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12403 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;Total ram usage:        2 bytes
 12408 ;; Hardware stack levels used:    1
 12409 ;; Hardware stack levels required when called:    5
 12410 ;; This function calls:
 12411 ;;		_RfPointSelect
 12412 ;;		_setINT_GO
 12413 ;; This function is called by:
 12414 ;;		_setLoad_Exceptions
 12415 ;;		_setOverTemp_Exceptions
 12416 ;;		_setPowerFault_Exceptions
 12417 ;;		_MainT
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           
 12422                           ;psect for function _setRF_Enable
 12423  1B51                     _setRF_Enable:	
 12424                           
 12425                           ;incstack = 0
 12426                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12427                           ;setRF_Enable@rf stored from wreg
 12428  1B51  0020               	movlb	0	; select bank0
 12429  1B52  00A3               	movwf	setRF_Enable@rf
 12430                           
 12431                           ;RF_Control_B1.c: 174: RfPointSelect(rf);
 12432  1B53  0823               	movf	setRF_Enable@rf,w
 12433  1B54  31A6  2662  319B   	fcall	_RfPointSelect
 12434                           
 12435                           ;RF_Control_B1.c: 175: RF->Enable = command;
 12436  1B57  087A               	movf	_RF,w
 12437  1B58  0086               	movwf	6
 12438  1B59  0187               	clrf	7
 12439  1B5A  0020               	movlb	0	; select bank0
 12440  1B5B  0822               	movf	setRF_Enable@command,w
 12441  1B5C  1001               	bcf	1,0
 12442  1B5D  1D03               	skipz
 12443  1B5E  1401               	bsf	1,0
 12444                           
 12445                           ;RF_Control_B1.c: 176: RF->Learn = 0;
 12446  1B5F  087A               	movf	_RF,w
 12447  1B60  0086               	movwf	6
 12448  1B61  0187               	clrf	7
 12449  1B62  1301               	bcf	1,6
 12450                           
 12451                           ;RF_Control_B1.c: 177: RF->TransceiveGO = 0;
 12452  1B63  087A               	movf	_RF,w
 12453  1B64  0086               	movwf	6
 12454  1B65  0187               	clrf	7
 12455  1B66  1101               	bcf	1,2
 12456                           
 12457                           ;RF_Control_B1.c: 178: RF->RxStatus = 0;
 12458  1B67  087A               	movf	_RF,w
 12459  1B68  0086               	movwf	6
 12460  1B69  0187               	clrf	7
 12461  1B6A  1181               	bcf	1,3
 12462                           
 12463                           ;RF_Control_B1.c: 179: RF->ReceiveGO = 0;
 12464  1B6B  087A               	movf	_RF,w
 12465  1B6C  0086               	movwf	6
 12466  1B6D  0187               	clrf	7
 12467  1B6E  1081               	bcf	1,1
 12468                           
 12469                           ;RF_Control_B1.c: 180: RF->DebounceTime = 0;
 12470  1B6F  0A7A               	incf	_RF,w
 12471  1B70  0086               	movwf	6
 12472  1B71  0187               	clrf	7
 12473  1B72  0181               	clrf	1
 12474                           
 12475                           ;RF_Control_B1.c: 181: RF->Debounce = 0;
 12476  1B73  087A               	movf	_RF,w
 12477  1B74  0086               	movwf	6
 12478  1B75  0187               	clrf	7
 12479  1B76  1281               	bcf	1,5
 12480                           
 12481                           ;RF_Control_B1.c: 182: setINT_GO(0);
 12482  1B77  3000               	movlw	0
 12483  1B78  31A6  2623         	fcall	_setINT_GO
 12484  1B7A  0008               	return
 12485  1B7B                     __end_of_setRF_Enable:	
 12486                           
 12487                           	psect	text66
 12488  2623                     __ptext66:	
 12489 ;; *************** function _setINT_GO *****************
 12490 ;; Defined at:
 12491 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;  command         1    wreg     unsigned char 
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  command         1    0[BANK0 ] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;		None               void
 12498 ;; Registers used:
 12499 ;;		wreg
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        1 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    4
 12512 ;; This function calls:
 12513 ;;		Nothing
 12514 ;; This function is called by:
 12515 ;;		_setRF_Main
 12516 ;;		_setRF_Enable
 12517 ;;		_RF_RxDisable
 12518 ;; This function uses a non-reentrant model
 12519 ;;
 12520                           
 12521                           
 12522                           ;psect for function _setINT_GO
 12523  2623                     _setINT_GO:	
 12524                           
 12525                           ;incstack = 0
 12526                           ; Regs used in _setINT_GO: [wreg]
 12527                           ;setINT_GO@command stored from wreg
 12528  2623  0020               	movlb	0	; select bank0
 12529  2624  00A0               	movwf	setINT_GO@command
 12530                           
 12531                           ;MCU_B1.c: 291: INTF = 0;
 12532  2625  108B               	bcf	11,1	;volatile
 12533                           
 12534                           ;MCU_B1.c: 292: INTE = command;
 12535  2626  1C20               	btfss	setINT_GO@command,0
 12536  2627  2E2A               	goto	u7810
 12537  2628  160B               	bsf	11,4	;volatile
 12538  2629  0008               	return
 12539  262A                     u7810:	
 12540  262A  120B               	bcf	11,4	;volatile
 12541  262B  0008               	return
 12542  262C                     __end_of_setINT_GO:	
 12543                           
 12544                           	psect	text67
 12545  115C                     __ptext67:	
 12546 ;; *************** function _DimmerLights_Exceptions *****************
 12547 ;; Defined at:
 12548 ;;		line 246 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12549 ;; Parameters:    Size  Location     Type
 12550 ;;  status          1    wreg     unsigned char 
 12551 ;; Auto vars:     Size  Location     Type
 12552 ;;  status          1   10[BANK0 ] unsigned char 
 12553 ;; Return value:  Size  Location     Type
 12554 ;;		None               void
 12555 ;; Registers used:
 12556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12557 ;; Tracked objects:
 12558 ;;		On entry : 0/0
 12559 ;;		On exit  : 0/0
 12560 ;;		Unchanged: 0/0
 12561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;Total ram usage:        1 bytes
 12567 ;; Hardware stack levels used:    1
 12568 ;; Hardware stack levels required when called:    7
 12569 ;; This function calls:
 12570 ;;		_getDimmerLights_StatusFlag
 12571 ;;		_setBuz
 12572 ;;		_setDimmerLights_ERROR
 12573 ;;		_setDimmerLights_TriggerERROR
 12574 ;; This function is called by:
 12575 ;;		_setLoad_Exceptions
 12576 ;;		_setOverTemp_Exceptions
 12577 ;;		_setPowerFault_Exceptions
 12578 ;; This function uses a non-reentrant model
 12579 ;;
 12580                           
 12581                           
 12582                           ;psect for function _DimmerLights_Exceptions
 12583  115C                     _DimmerLights_Exceptions:	
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12587                           ;DimmerLights_Exceptions@status stored from wreg
 12588  115C  0020               	movlb	0	; select bank0
 12589  115D  00AA               	movwf	DimmerLights_Exceptions@status
 12590                           
 12591                           ;Dimmer_B1.c: 248: if(status == 1)
 12592  115E  082A               	movf	DimmerLights_Exceptions@status,w
 12593  115F  3A01               	xorlw	1
 12594  1160  1D03               	skipz
 12595  1161  2972               	goto	l8238
 12596                           
 12597                           ;Dimmer_B1.c: 249: {
 12598                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 12599  1162  31A6  26E1  3191   	fcall	_getDimmerLights_StatusFlag
 12600  1165  3A00               	xorlw	0
 12601  1166  1903               	skipnz
 12602  1167  298A               	goto	l8244
 12603                           
 12604                           ;Dimmer_B1.c: 251: {
 12605                           ;Dimmer_B1.c: 252: setBuz(10,300);
 12606  1168  302C               	movlw	44
 12607  1169  0020               	movlb	0	; select bank0
 12608  116A  00A6               	movwf	setBuz@time
 12609  116B  3001               	movlw	1
 12610  116C  00A7               	movwf	setBuz@time+1
 12611  116D  300A               	movlw	10
 12612  116E  3196  2696  3191   	fcall	_setBuz
 12613  1171  298A               	goto	l8244
 12614  1172                     l8238:	
 12615                           ;Dimmer_B1.c: 264: }
 12616                           
 12617                           ;Dimmer_B1.c: 253: }
 12618                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 12619                           
 12620                           
 12621                           ;Dimmer_B1.c: 265: else if(status == 2)
 12622  1172  0020               	movlb	0	; select bank0
 12623  1173  082A               	movf	DimmerLights_Exceptions@status,w
 12624  1174  3A02               	xorlw	2
 12625  1175  1D03               	skipz
 12626  1176  2985               	goto	l8242
 12627                           
 12628                           ;Dimmer_B1.c: 266: {
 12629                           ;Dimmer_B1.c: 267: setBuz(5,300);
 12630  1177  302C               	movlw	44
 12631  1178  00A6               	movwf	setBuz@time
 12632  1179  3001               	movlw	1
 12633  117A  00A7               	movwf	setBuz@time+1
 12634  117B  3005               	movlw	5
 12635  117C  3196  2696  3191   	fcall	_setBuz
 12636                           
 12637                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 12638  117F  0021               	movlb	1	; select bank1
 12639  1180  0A39               	incf	_Dimmer^(0+128),w
 12640  1181  0086               	movwf	6
 12641  1182  0187               	clrf	7
 12642  1183  0801               	movf	1,w
 12643  1184  298B               	goto	L10
 12644  1185                     l8242:	
 12645                           ;Dimmer_B1.c: 269: }
 12646                           
 12647                           
 12648                           ;Dimmer_B1.c: 270: else if(status == 3)
 12649  1185  0020               	movlb	0	; select bank0
 12650  1186  082A               	movf	DimmerLights_Exceptions@status,w
 12651  1187  3A03               	xorlw	3
 12652  1188  1D03               	skipz
 12653  1189  298E               	goto	l818
 12654  118A                     l8244:	
 12655                           
 12656                           ;Dimmer_B1.c: 271: {
 12657                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 12658  118A  3001               	movlw	1
 12659  118B                     L10:	
 12660  118B  3190  20AC  3191   	fcall	_setDimmerLights_ERROR
 12661  118E                     l818:	
 12662                           
 12663                           ;Dimmer_B1.c: 281: }
 12664                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 12665  118E  0020               	movlb	0	; select bank0
 12666  118F  01A2               	clrf	setDimmerLights_TriggerERROR@command
 12667  1190  3001               	movlw	1
 12668  1191  319B  237B  3191   	fcall	_setDimmerLights_TriggerERROR
 12669                           
 12670                           ;Dimmer_B1.c: 293: if(TMain->SelfTest == 0)
 12671  1194  087D               	movf	_TMain,w
 12672  1195  3E03               	addlw	3
 12673  1196  0086               	movwf	6
 12674  1197  3001               	movlw	1	; select bank2/3
 12675  1198  0087               	movwf	7
 12676  1199  1801               	btfsc	1,0
 12677  119A  0008               	return
 12678                           
 12679                           ;Dimmer_B1.c: 294: {
 12680                           ;Dimmer_B1.c: 295: TMain->i=0;
 12681  119B  087D               	movf	_TMain,w
 12682  119C  3E0F               	addlw	15
 12683  119D  0086               	movwf	6
 12684  119E  3001               	movlw	1	; select bank2/3
 12685  119F  0087               	movwf	7
 12686  11A0  1001               	bcf	1,0
 12687                           
 12688                           ;Dimmer_B1.c: 296: TMain->j=0;
 12689  11A1  087D               	movf	_TMain,w
 12690  11A2  3E0F               	addlw	15
 12691  11A3  0086               	movwf	6
 12692  11A4  3001               	movlw	1	; select bank2/3
 12693  11A5  0087               	movwf	7
 12694  11A6  1081               	bcf	1,1
 12695                           
 12696                           ;Dimmer_B1.c: 297: TMain->k=1;
 12697  11A7  087D               	movf	_TMain,w
 12698  11A8  3E0F               	addlw	15
 12699  11A9  0086               	movwf	6
 12700  11AA  3001               	movlw	1	; select bank2/3
 12701  11AB  0087               	movwf	7
 12702  11AC  1501               	bsf	1,2
 12703                           
 12704                           ;Dimmer_B1.c: 298: TMain->Count2=0;
 12705  11AD  087D               	movf	_TMain,w
 12706  11AE  3E08               	addlw	8
 12707  11AF  0086               	movwf	6
 12708  11B0  3001               	movlw	1	; select bank2/3
 12709  11B1  0087               	movwf	7
 12710  11B2  3000               	movlw	0
 12711  11B3  3FC0               	movwi [0]fsr1
 12712  11B4  3FC1               	movwi [1]fsr1
 12713  11B5  0008               	return
 12714  11B6                     __end_of_DimmerLights_Exceptions:	
 12715                           
 12716                           	psect	text68
 12717  1B7B                     __ptext68:	
 12718 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12719 ;; Defined at:
 12720 ;;		line 320 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;  lights          1    wreg     unsigned char 
 12723 ;;  command         1    2[BANK0 ] unsigned char 
 12724 ;; Auto vars:     Size  Location     Type
 12725 ;;  lights          1    3[BANK0 ] unsigned char 
 12726 ;; Return value:  Size  Location     Type
 12727 ;;		None               void
 12728 ;; Registers used:
 12729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12730 ;; Tracked objects:
 12731 ;;		On entry : 0/0
 12732 ;;		On exit  : 0/0
 12733 ;;		Unchanged: 0/0
 12734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;Total ram usage:        2 bytes
 12740 ;; Hardware stack levels used:    1
 12741 ;; Hardware stack levels required when called:    5
 12742 ;; This function calls:
 12743 ;;		_DimmerLightsPointSelect
 12744 ;; This function is called by:
 12745 ;;		_DimmerLights_Exceptions
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           
 12750                           ;psect for function _setDimmerLights_TriggerERROR
 12751  1B7B                     _setDimmerLights_TriggerERROR:	
 12752                           
 12753                           ;incstack = 0
 12754                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12755                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12756  1B7B  0020               	movlb	0	; select bank0
 12757  1B7C  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 12758                           
 12759                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 12760  1B7D  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 12761  1B7E  31A6  264C         	fcall	_DimmerLightsPointSelect
 12762                           
 12763                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 12764  1B80  0020               	movlb	0	; select bank0
 12765  1B81  086C               	movf	_DimmerLights,w
 12766  1B82  3E09               	addlw	9
 12767  1B83  0086               	movwf	6
 12768  1B84  3001               	movlw	1	; select bank2/3
 12769  1B85  0087               	movwf	7
 12770  1B86  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12771  1B87  1081               	bcf	1,1
 12772  1B88  1D03               	skipz
 12773  1B89  1481               	bsf	1,1
 12774                           
 12775                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 12776  1B8A  086C               	movf	_DimmerLights,w
 12777  1B8B  3E09               	addlw	9
 12778  1B8C  0086               	movwf	6
 12779  1B8D  3001               	movlw	1	; select bank2/3
 12780  1B8E  0087               	movwf	7
 12781  1B8F  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12782  1B90  1001               	bcf	1,0
 12783  1B91  1D03               	skipz
 12784  1B92  1401               	bsf	1,0
 12785                           
 12786                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 12787  1B93  086C               	movf	_DimmerLights,w
 12788  1B94  3E09               	addlw	9
 12789  1B95  0086               	movwf	6
 12790  1B96  3001               	movlw	1	; select bank2/3
 12791  1B97  0087               	movwf	7
 12792  1B98  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12793  1B99  1181               	bcf	1,3
 12794  1B9A  1D03               	skipz
 12795  1B9B  1581               	bsf	1,3
 12796                           
 12797                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 12798  1B9C  086C               	movf	_DimmerLights,w
 12799  1B9D  3E09               	addlw	9
 12800  1B9E  0086               	movwf	6
 12801  1B9F  3001               	movlw	1	; select bank2/3
 12802  1BA0  0087               	movwf	7
 12803  1BA1  0822               	movf	setDimmerLights_TriggerERROR@command,w
 12804  1BA2  1101               	bcf	1,2
 12805  1BA3  1D03               	skipz
 12806  1BA4  1501               	bsf	1,2
 12807  1BA5  0008               	return
 12808  1BA6                     __end_of_setDimmerLights_TriggerERROR:	
 12809                           
 12810                           	psect	text69
 12811  10AC                     __ptext69:	
 12812 ;; *************** function _setDimmerLights_ERROR *****************
 12813 ;; Defined at:
 12814 ;;		line 302 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  lights          1    wreg     unsigned char 
 12817 ;; Auto vars:     Size  Location     Type
 12818 ;;  lights          1    5[BANK0 ] unsigned char 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;		None               void
 12821 ;; Registers used:
 12822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;Total ram usage:        2 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    6
 12835 ;; This function calls:
 12836 ;;		_DimmerLightsPointSelect
 12837 ;;		_setLED
 12838 ;;		_setLoad_StatusOff
 12839 ;;		_setRFSW_Status
 12840 ;;		_setSw_Status
 12841 ;; This function is called by:
 12842 ;;		_DimmerLights_Exceptions
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           
 12847                           ;psect for function _setDimmerLights_ERROR
 12848  10AC                     _setDimmerLights_ERROR:	
 12849                           
 12850                           ;incstack = 0
 12851                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12852                           ;setDimmerLights_ERROR@lights stored from wreg
 12853  10AC  0020               	movlb	0	; select bank0
 12854  10AD  00A5               	movwf	setDimmerLights_ERROR@lights
 12855                           
 12856                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 12857  10AE  0825               	movf	setDimmerLights_ERROR@lights,w
 12858  10AF  31A6  264C  3190   	fcall	_DimmerLightsPointSelect
 12859                           
 12860                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 12861  10B2  0020               	movlb	0	; select bank0
 12862  10B3  086C               	movf	_DimmerLights,w
 12863  10B4  0086               	movwf	6
 12864  10B5  3001               	movlw	1	; select bank2/3
 12865  10B6  0087               	movwf	7
 12866  10B7  1E81               	btfss	1,5
 12867  10B8  0008               	return
 12868                           
 12869                           ;Dimmer_B1.c: 306: {
 12870                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 12871  10B9  086C               	movf	_DimmerLights,w
 12872  10BA  0086               	movwf	6
 12873  10BB  3001               	movlw	1	; select bank2/3
 12874  10BC  0087               	movwf	7
 12875  10BD  1081               	bcf	1,1
 12876                           
 12877                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 12878  10BE  086C               	movf	_DimmerLights,w
 12879  10BF  0086               	movwf	6
 12880  10C0  3001               	movlw	1	; select bank2/3
 12881  10C1  0087               	movwf	7
 12882  10C2  1181               	bcf	1,3
 12883                           
 12884                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 12885  10C3  086C               	movf	_DimmerLights,w
 12886  10C4  0086               	movwf	6
 12887  10C5  3001               	movlw	1	; select bank2/3
 12888  10C6  0087               	movwf	7
 12889  10C7  1201               	bcf	1,4
 12890                           
 12891                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 12892  10C8  086C               	movf	_DimmerLights,w
 12893  10C9  0086               	movwf	6
 12894  10CA  3001               	movlw	1	; select bank2/3
 12895  10CB  0087               	movwf	7
 12896  10CC  1301               	bcf	1,6
 12897                           
 12898                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 12899  10CD  3003               	movlw	3
 12900  10CE  00A4               	movwf	??_setDimmerLights_ERROR
 12901  10CF  086C               	movf	_DimmerLights,w
 12902  10D0  3E02               	addlw	2
 12903  10D1  0086               	movwf	6
 12904  10D2  3001               	movlw	1	; select bank2/3
 12905  10D3  0087               	movwf	7
 12906  10D4  0824               	movf	??_setDimmerLights_ERROR,w
 12907  10D5  0081               	movwf	1
 12908                           
 12909                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 12910  10D6  086C               	movf	_DimmerLights,w
 12911  10D7  3E06               	addlw	6
 12912  10D8  0086               	movwf	6
 12913  10D9  3001               	movlw	1	; select bank2/3
 12914  10DA  0087               	movwf	7
 12915  10DB  0801               	movf	1,w
 12916  10DC  00A4               	movwf	??_setDimmerLights_ERROR
 12917  10DD  086C               	movf	_DimmerLights,w
 12918  10DE  3E04               	addlw	4
 12919  10DF  0086               	movwf	6
 12920  10E0  3001               	movlw	1	; select bank2/3
 12921  10E1  0087               	movwf	7
 12922  10E2  0824               	movf	??_setDimmerLights_ERROR,w
 12923  10E3  0081               	movwf	1
 12924                           
 12925                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 12926  10E4  0021               	movlb	1	; select bank1
 12927  10E5  0839               	movf	_Dimmer^(0+128),w
 12928  10E6  0086               	movwf	6
 12929  10E7  0187               	clrf	7
 12930  10E8  1401               	bsf	1,0
 12931                           
 12932                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 12933  10E9  0020               	movlb	0	; select bank0
 12934  10EA  01A0               	clrf	setLoad_StatusOff@command
 12935  10EB  0AA0               	incf	setLoad_StatusOff@command,f
 12936  10EC  0825               	movf	setDimmerLights_ERROR@lights,w
 12937  10ED  319C  248E  3190   	fcall	_setLoad_StatusOff
 12938                           
 12939                           ;Dimmer_B1.c: 315: setLED(lights,1);
 12940  10F0  0020               	movlb	0	; select bank0
 12941  10F1  01A2               	clrf	setLED@command
 12942  10F2  0AA2               	incf	setLED@command,f
 12943  10F3  0825               	movf	setDimmerLights_ERROR@lights,w
 12944  10F4  3192  226D  3190   	fcall	_setLED
 12945                           
 12946                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 12947  10F7  0020               	movlb	0	; select bank0
 12948  10F8  01A2               	clrf	setSw_Status@command
 12949  10F9  0825               	movf	setDimmerLights_ERROR@lights,w
 12950  10FA  31A7  2772  3190   	fcall	_setSw_Status
 12951                           
 12952                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 12953  10FD  0020               	movlb	0	; select bank0
 12954  10FE  01A2               	clrf	setRFSW_Status@command
 12955  10FF  0825               	movf	setDimmerLights_ERROR@lights,w
 12956  1100  31A7  2763         	fcall	_setRFSW_Status
 12957  1102  0008               	return
 12958  1103                     __end_of_setDimmerLights_ERROR:	
 12959                           
 12960                           	psect	text70
 12961  27C0                     __ptext70:	
 12962 ;; *************** function _setDimmerLights_Clear *****************
 12963 ;; Defined at:
 12964 ;;		line 456 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;  lights          1    wreg     unsigned char 
 12967 ;;  command         1    2[BANK0 ] unsigned char 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  lights          1    3[BANK0 ] unsigned char 
 12970 ;; Return value:  Size  Location     Type
 12971 ;;		None               void
 12972 ;; Registers used:
 12973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12974 ;; Tracked objects:
 12975 ;;		On entry : 0/0
 12976 ;;		On exit  : 0/0
 12977 ;;		Unchanged: 0/0
 12978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12979 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;Total ram usage:        2 bytes
 12984 ;; Hardware stack levels used:    1
 12985 ;; Hardware stack levels required when called:    5
 12986 ;; This function calls:
 12987 ;;		_DimmerLightsPointSelect
 12988 ;; This function is called by:
 12989 ;;		_Load_Main
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           
 12994                           ;psect for function _setDimmerLights_Clear
 12995  27C0                     _setDimmerLights_Clear:	
 12996                           
 12997                           ;incstack = 0
 12998                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12999                           ;setDimmerLights_Clear@lights stored from wreg
 13000  27C0  0020               	movlb	0	; select bank0
 13001  27C1  00A3               	movwf	setDimmerLights_Clear@lights
 13002                           
 13003                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13004  27C2  0823               	movf	setDimmerLights_Clear@lights,w
 13005  27C3  31A6  264C         	fcall	_DimmerLightsPointSelect
 13006                           
 13007                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13008  27C5  0020               	movlb	0	; select bank0
 13009  27C6  086C               	movf	_DimmerLights,w
 13010  27C7  3E0C               	addlw	12
 13011  27C8  0086               	movwf	6
 13012  27C9  3001               	movlw	1	; select bank2/3
 13013  27CA  0087               	movwf	7
 13014  27CB  0822               	movf	setDimmerLights_Clear@command,w
 13015  27CC  1001               	bcf	1,0
 13016  27CD  1D03               	skipz
 13017  27CE  1401               	bsf	1,0
 13018  27CF  0008               	return
 13019  27D0                     __end_of_setDimmerLights_Clear:	
 13020                           
 13021                           	psect	text71
 13022  25FD                     __ptext71:	
 13023 ;; *************** function _getTemp_Safe *****************
 13024 ;; Defined at:
 13025 ;;		line 26 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
 13026 ;; Parameters:    Size  Location     Type
 13027 ;;		None
 13028 ;; Auto vars:     Size  Location     Type
 13029 ;;		None
 13030 ;; Return value:  Size  Location     Type
 13031 ;;                  1    wreg      unsigned char 
 13032 ;; Registers used:
 13033 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13034 ;; Tracked objects:
 13035 ;;		On entry : 0/0
 13036 ;;		On exit  : 0/0
 13037 ;;		Unchanged: 0/0
 13038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13043 ;;Total ram usage:        0 bytes
 13044 ;; Hardware stack levels used:    1
 13045 ;; Hardware stack levels required when called:    4
 13046 ;; This function calls:
 13047 ;;		Nothing
 13048 ;; This function is called by:
 13049 ;;		_Load_Main
 13050 ;;		_setPowerFault_Main
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           
 13055                           ;psect for function _getTemp_Safe
 13056  25FD                     _getTemp_Safe:	
 13057                           
 13058                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13059                           
 13060                           ;incstack = 0
 13061                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13062  25FD  087B               	movf	_Temp,w
 13063  25FE  0086               	movwf	6
 13064  25FF  3001               	movlw	1	; select bank2/3
 13065  2600  0087               	movwf	7
 13066  2601  0E01               	swapf	1,w
 13067  2602  3901               	andlw	1
 13068  2603  0008               	return
 13069  2604                     __end_of_getTemp_Safe:	
 13070                           
 13071                           	psect	text72
 13072  2612                     __ptext72:	
 13073 ;; *************** function _getPF_Safe *****************
 13074 ;; Defined at:
 13075 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 13076 ;; Parameters:    Size  Location     Type
 13077 ;;		None
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;		None
 13080 ;; Return value:  Size  Location     Type
 13081 ;;                  1    wreg      unsigned char 
 13082 ;; Registers used:
 13083 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13084 ;; Tracked objects:
 13085 ;;		On entry : 0/0
 13086 ;;		On exit  : 0/0
 13087 ;;		Unchanged: 0/0
 13088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;Total ram usage:        0 bytes
 13094 ;; Hardware stack levels used:    1
 13095 ;; Hardware stack levels required when called:    4
 13096 ;; This function calls:
 13097 ;;		Nothing
 13098 ;; This function is called by:
 13099 ;;		_Load_Main
 13100 ;;		_setTemp_Main
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           
 13105                           ;psect for function _getPF_Safe
 13106  2612                     _getPF_Safe:	
 13107                           
 13108                           ;PowerFault_B1.c: 42: return PF->Safe;
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13112  2612  0879               	movf	_PF,w
 13113  2613  0086               	movwf	6
 13114  2614  3001               	movlw	1	; select bank2/3
 13115  2615  0087               	movwf	7
 13116  2616  0C01               	rrf	1,w
 13117  2617  0C89               	rrf	9,f
 13118  2618  3901               	andlw	1
 13119  2619  0008               	return
 13120  261A                     __end_of_getPF_Safe:	
 13121                           
 13122                           	psect	text73
 13123  0801                     __ptext73:	
 13124 ;; *************** function ___lwdiv *****************
 13125 ;; Defined at:
 13126 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;  divisor         2    0[BANK0 ] unsigned int 
 13129 ;;  dividend        2    2[BANK0 ] unsigned int 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;  quotient        2    5[BANK0 ] unsigned int 
 13132 ;;  counter         1    7[BANK0 ] unsigned char 
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  2    0[BANK0 ] unsigned int 
 13135 ;; Registers used:
 13136 ;;		wreg, status,2, status,0
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;Total ram usage:        8 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    4
 13149 ;; This function calls:
 13150 ;;		Nothing
 13151 ;; This function is called by:
 13152 ;;		_Load_Main
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           
 13157                           ;psect for function ___lwdiv
 13158  0801                     ___lwdiv:	
 13159                           
 13160                           ;incstack = 0
 13161                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13162  0801  0020               	movlb	0	; select bank0
 13163  0802  01A5               	clrf	___lwdiv@quotient
 13164  0803  01A6               	clrf	___lwdiv@quotient+1
 13165  0804  0821               	movf	___lwdiv@divisor+1,w
 13166  0805  0420               	iorwf	___lwdiv@divisor,w
 13167  0806  1903               	skipnz
 13168  0807  2831               	goto	l7358
 13169  0808  01A7               	clrf	___lwdiv@counter
 13170  0809  0AA7               	incf	___lwdiv@counter,f
 13171  080A                     l7346:	
 13172  080A  1BA1               	btfsc	___lwdiv@divisor+1,7
 13173  080B  2816               	goto	l7348
 13174  080C  3001               	movlw	1
 13175  080D                     u6475:	
 13176  080D  35A0               	lslf	___lwdiv@divisor,f
 13177  080E  0DA1               	rlf	___lwdiv@divisor+1,f
 13178  080F  0B89               	decfsz	9,f
 13179  0810  280D               	goto	u6475
 13180  0811  3001               	movlw	1
 13181  0812  00A4               	movwf	??___lwdiv
 13182  0813  0824               	movf	??___lwdiv,w
 13183  0814  07A7               	addwf	___lwdiv@counter,f
 13184  0815  280A               	goto	l7346
 13185  0816                     l7348:	
 13186  0816  3001               	movlw	1
 13187  0817                     u6495:	
 13188  0817  35A5               	lslf	___lwdiv@quotient,f
 13189  0818  0DA6               	rlf	___lwdiv@quotient+1,f
 13190  0819  0B89               	decfsz	9,f
 13191  081A  2817               	goto	u6495
 13192  081B  0821               	movf	___lwdiv@divisor+1,w
 13193  081C  0223               	subwf	___lwdiv@dividend+1,w
 13194  081D  1D03               	skipz
 13195  081E  2821               	goto	u6505
 13196  081F  0820               	movf	___lwdiv@divisor,w
 13197  0820  0222               	subwf	___lwdiv@dividend,w
 13198  0821                     u6505:	
 13199  0821  1C03               	skipc
 13200  0822  2828               	goto	l7354
 13201  0823  0820               	movf	___lwdiv@divisor,w
 13202  0824  02A2               	subwf	___lwdiv@dividend,f
 13203  0825  0821               	movf	___lwdiv@divisor+1,w
 13204  0826  3BA3               	subwfb	___lwdiv@dividend+1,f
 13205  0827  1425               	bsf	___lwdiv@quotient,0
 13206  0828                     l7354:	
 13207  0828  3001               	movlw	1
 13208  0829                     u6515:	
 13209  0829  36A1               	lsrf	___lwdiv@divisor+1,f
 13210  082A  0CA0               	rrf	___lwdiv@divisor,f
 13211  082B  0B89               	decfsz	9,f
 13212  082C  2829               	goto	u6515
 13213  082D  3001               	movlw	1
 13214  082E  02A7               	subwf	___lwdiv@counter,f
 13215  082F  1D03               	btfss	3,2
 13216  0830  2816               	goto	l7348
 13217  0831                     l7358:	
 13218  0831  0826               	movf	___lwdiv@quotient+1,w
 13219  0832  01A1               	clrf	?___lwdiv+1
 13220  0833  07A1               	addwf	?___lwdiv+1,f
 13221  0834  0825               	movf	___lwdiv@quotient,w
 13222  0835  01A0               	clrf	?___lwdiv
 13223  0836  07A0               	addwf	?___lwdiv,f
 13224  0837  0008               	return
 13225  0838                     __end_of___lwdiv:	
 13226                           
 13227                           	psect	text74
 13228  2711                     __ptext74:	
 13229 ;; *************** function _Load_Initialization *****************
 13230 ;; Defined at:
 13231 ;;		line 9 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;		None
 13234 ;; Auto vars:     Size  Location     Type
 13235 ;;		None
 13236 ;; Return value:  Size  Location     Type
 13237 ;;		None               void
 13238 ;; Registers used:
 13239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13240 ;; Tracked objects:
 13241 ;;		On entry : 0/0
 13242 ;;		On exit  : 0/0
 13243 ;;		Unchanged: 0/0
 13244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;Total ram usage:        1 bytes
 13250 ;; Hardware stack levels used:    1
 13251 ;; Hardware stack levels required when called:    5
 13252 ;; This function calls:
 13253 ;;		_setLoad_AH_AL_Restore
 13254 ;; This function is called by:
 13255 ;;		_main
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           
 13260                           ;psect for function _Load_Initialization
 13261  2711                     _Load_Initialization:	
 13262                           
 13263                           ;OverLoad_B1.c: 10: Load = &Load1;
 13264                           
 13265                           ;incstack = 0
 13266                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13267  2711  3020               	movlw	_Load1& (0+255)
 13268  2712  0020               	movlb	0	; select bank0
 13269  2713  00A2               	movwf	??_Load_Initialization
 13270  2714  0822               	movf	??_Load_Initialization,w
 13271  2715  00EE               	movwf	_Load
 13272                           
 13273                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 13274  2716  086E               	movf	_Load,w
 13275  2717  0086               	movwf	6
 13276  2718  3002               	movlw	2	; select bank4/5
 13277  2719  0087               	movwf	7
 13278  271A  1581               	bsf	1,3
 13279                           
 13280                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13281  271B  319A  2271         	fcall	_setLoad_AH_AL_Restore
 13282  271D  0008               	return
 13283  271E                     __end_of_Load_Initialization:	
 13284                           
 13285                           	psect	text75
 13286  1A71                     __ptext75:	
 13287 ;; *************** function _setLoad_AH_AL_Restore *****************
 13288 ;; Defined at:
 13289 ;;		line 307 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13290 ;; Parameters:    Size  Location     Type
 13291 ;;		None
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  i               1    1[BANK0 ] unsigned char 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;		None               void
 13296 ;; Registers used:
 13297 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;Total ram usage:        2 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:    4
 13310 ;; This function calls:
 13311 ;;		Nothing
 13312 ;; This function is called by:
 13313 ;;		_Load_Initialization
 13314 ;;		_Load_Main
 13315 ;; This function uses a non-reentrant model
 13316 ;;
 13317                           
 13318                           
 13319                           ;psect for function _setLoad_AH_AL_Restore
 13320  1A71                     _setLoad_AH_AL_Restore:	
 13321                           
 13322                           ;OverLoad_B1.c: 308: char i;
 13323                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 13324                           
 13325                           ;incstack = 0
 13326                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13327  1A71  0020               	movlb	0	; select bank0
 13328  1A72  01A1               	clrf	setLoad_AH_AL_Restore@i
 13329  1A73                     L11:	
 13330  1A73  3005               	movlw	5
 13331  1A74  0221               	subwf	setLoad_AH_AL_Restore@i,w
 13332  1A75  1803               	btfsc	3,0
 13333  1A76  0008               	return
 13334                           
 13335                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 13336  1A77  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13337  1A78  3E08               	addlw	8
 13338  1A79  076E               	addwf	_Load,w
 13339  1A7A  00A0               	movwf	??_setLoad_AH_AL_Restore
 13340  1A7B  0820               	movf	??_setLoad_AH_AL_Restore,w
 13341  1A7C  0086               	movwf	6
 13342  1A7D  3002               	movlw	2	; select bank4/5
 13343  1A7E  0087               	movwf	7
 13344  1A7F  3000               	movlw	0
 13345  1A80  3FC0               	movwi [0]fsr1
 13346  1A81  3FC1               	movwi [1]fsr1
 13347                           
 13348                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 13349  1A82  3521               	lslf	setLoad_AH_AL_Restore@i,w
 13350  1A83  3E1A               	addlw	26
 13351  1A84  076E               	addwf	_Load,w
 13352  1A85  00A0               	movwf	??_setLoad_AH_AL_Restore
 13353  1A86  0820               	movf	??_setLoad_AH_AL_Restore,w
 13354  1A87  0086               	movwf	6
 13355  1A88  3002               	movlw	2	; select bank4/5
 13356  1A89  0087               	movwf	7
 13357  1A8A  30FF               	movlw	255
 13358  1A8B  3FC0               	movwi [0]fsr1
 13359  1A8C  30FF               	movlw	255
 13360  1A8D  3FC1               	movwi [1]fsr1
 13361  1A8E  3001               	movlw	1
 13362  1A8F  00A0               	movwf	??_setLoad_AH_AL_Restore
 13363  1A90  0820               	movf	??_setLoad_AH_AL_Restore,w
 13364  1A91  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 13365  1A92  2A73               	goto	L11
 13366  1A93                     __end_of_setLoad_AH_AL_Restore:	
 13367                           
 13368                           	psect	text76
 13369  2705                     __ptext76:	
 13370 ;; *************** function _LED_Main *****************
 13371 ;; Defined at:
 13372 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;		None
 13377 ;; Return value:  Size  Location     Type
 13378 ;;		None               void
 13379 ;; Registers used:
 13380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13381 ;; Tracked objects:
 13382 ;;		On entry : 0/0
 13383 ;;		On exit  : 0/0
 13384 ;;		Unchanged: 0/0
 13385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;Total ram usage:        0 bytes
 13391 ;; Hardware stack levels used:    1
 13392 ;; Hardware stack levels required when called:    6
 13393 ;; This function calls:
 13394 ;;		_setLED_Main
 13395 ;; This function is called by:
 13396 ;;		_main
 13397 ;; This function uses a non-reentrant model
 13398 ;;
 13399                           
 13400                           
 13401                           ;psect for function _LED_Main
 13402  2705                     _LED_Main:	
 13403                           
 13404                           ;LED_B1.c: 54: setLED_Main(1);
 13405                           
 13406                           ;incstack = 0
 13407                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13408  2705  3001               	movlw	1
 13409  2706  319D  2557  31A7   	fcall	_setLED_Main
 13410                           
 13411                           ;LED_B1.c: 57: setLED_Main(2);
 13412  2709  3002               	movlw	2
 13413  270A  319D  2557  31A7   	fcall	_setLED_Main
 13414                           
 13415                           ;LED_B1.c: 63: setLED_Main(99);
 13416  270D  3063               	movlw	99
 13417  270E  319D  2557         	fcall	_setLED_Main
 13418  2710  0008               	return
 13419  2711                     __end_of_LED_Main:	
 13420                           
 13421                           	psect	text77
 13422  1D57                     __ptext77:	
 13423 ;; *************** function _setLED_Main *****************
 13424 ;; Defined at:
 13425 ;;		line 214 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;  led             1    wreg     unsigned char 
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  led             1    4[BANK0 ] unsigned char 
 13430 ;; Return value:  Size  Location     Type
 13431 ;;		None               void
 13432 ;; Registers used:
 13433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13434 ;; Tracked objects:
 13435 ;;		On entry : 0/0
 13436 ;;		On exit  : 0/0
 13437 ;;		Unchanged: 0/0
 13438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13443 ;;Total ram usage:        3 bytes
 13444 ;; Hardware stack levels used:    1
 13445 ;; Hardware stack levels required when called:    5
 13446 ;; This function calls:
 13447 ;;		_LedPointSelect
 13448 ;; This function is called by:
 13449 ;;		_LED_Main
 13450 ;; This function uses a non-reentrant model
 13451 ;;
 13452                           
 13453                           
 13454                           ;psect for function _setLED_Main
 13455  1D57                     _setLED_Main:	
 13456                           
 13457                           ;incstack = 0
 13458                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13459                           ;setLED_Main@led stored from wreg
 13460  1D57  0020               	movlb	0	; select bank0
 13461  1D58  00A4               	movwf	setLED_Main@led
 13462                           
 13463                           ;LED_B1.c: 216: LedPointSelect(led);
 13464  1D59  0824               	movf	setLED_Main@led,w
 13465  1D5A  319A  224F  319D   	fcall	_LedPointSelect
 13466                           
 13467                           ;LED_B1.c: 217: if(LED->GO)
 13468  1D5D  0021               	movlb	1	; select bank1
 13469  1D5E  083B               	movf	_LED^(0+128),w
 13470  1D5F  0086               	movwf	6
 13471  1D60  0187               	clrf	7
 13472  1D61  1C81               	btfss	1,1
 13473  1D62  0008               	return
 13474                           
 13475                           ;LED_B1.c: 218: {
 13476                           ;LED_B1.c: 219: LED->Time++;
 13477  1D63  0A3B               	incf	_LED^(0+128),w
 13478  1D64  0086               	movwf	6
 13479  1D65  0187               	clrf	7
 13480  1D66  3001               	movlw	1
 13481  1D67  0781               	addwf	1,f
 13482  1D68  3141               	addfsr 1,1
 13483  1D69  1803               	skipnc
 13484  1D6A  0A81               	incf	1,f
 13485                           
 13486                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13487  1D6B  0A3B               	incf	_LED^(0+128),w
 13488  1D6C  0086               	movwf	6
 13489  1D6D  0187               	clrf	7
 13490  1D6E  3F40               	moviw [0]fsr1
 13491  1D6F  0020               	movlb	0	; select bank0
 13492  1D70  00A2               	movwf	??_setLED_Main
 13493  1D71  3F41               	moviw [1]fsr1
 13494  1D72  00A3               	movwf	??_setLED_Main+1
 13495  1D73  3000               	movlw	0
 13496  1D74  0223               	subwf	??_setLED_Main+1,w
 13497  1D75  3032               	movlw	50
 13498  1D76  1903               	skipnz
 13499  1D77  0222               	subwf	??_setLED_Main,w
 13500  1D78  1C03               	skipc
 13501  1D79  0008               	return
 13502                           
 13503                           ;LED_B1.c: 221: {
 13504                           ;LED_B1.c: 222: LED->Time=0;
 13505  1D7A  0021               	movlb	1	; select bank1
 13506  1D7B  0A3B               	incf	_LED^(0+128),w
 13507  1D7C  0086               	movwf	6
 13508  1D7D  0187               	clrf	7
 13509  1D7E  3000               	movlw	0
 13510  1D7F  3FC0               	movwi [0]fsr1
 13511  1D80  3FC1               	movwi [1]fsr1
 13512                           
 13513                           ;LED_B1.c: 224: if(led == 1)
 13514  1D81  0020               	movlb	0	; select bank0
 13515  1D82  0824               	movf	setLED_Main@led,w
 13516  1D83  3A01               	xorlw	1
 13517  1D84  1D03               	skipz
 13518  1D85  2D89               	goto	l6922
 13519                           
 13520                           ;LED_B1.c: 225: {
 13521                           ;LED_B1.c: 226: RA3=~RA3;
 13522  1D86  3008               	movlw	8
 13523  1D87  068C               	xorwf	12,f
 13524                           
 13525                           ;LED_B1.c: 227: }
 13526  1D88  0008               	return
 13527  1D89                     l6922:	
 13528                           
 13529                           ;LED_B1.c: 230: else if(led == 2)
 13530  1D89  0824               	movf	setLED_Main@led,w
 13531  1D8A  3A02               	xorlw	2
 13532  1D8B  1D03               	skipz
 13533  1D8C  2D90               	goto	l6926
 13534                           
 13535                           ;LED_B1.c: 231: {
 13536                           ;LED_B1.c: 232: RC7=~RC7;
 13537  1D8D  3080               	movlw	128
 13538  1D8E  068E               	xorwf	14,f
 13539                           
 13540                           ;LED_B1.c: 233: }
 13541  1D8F  0008               	return
 13542  1D90                     l6926:	
 13543                           
 13544                           ;LED_B1.c: 242: else if(led == 99)
 13545  1D90  0824               	movf	setLED_Main@led,w
 13546  1D91  3A63               	xorlw	99
 13547  1D92  1D03               	skipz
 13548  1D93  0008               	return
 13549                           
 13550                           ;LED_B1.c: 243: {
 13551                           ;LED_B1.c: 244: RB5=~RB5;
 13552  1D94  3020               	movlw	32
 13553  1D95  068D               	xorwf	13,f
 13554  1D96  0008               	return
 13555  1D97                     __end_of_setLED_Main:	
 13556                           
 13557                           	psect	text78
 13558  26F9                     __ptext78:	
 13559 ;; *************** function _LED_Initialization *****************
 13560 ;; Defined at:
 13561 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13562 ;; Parameters:    Size  Location     Type
 13563 ;;		None
 13564 ;; Auto vars:     Size  Location     Type
 13565 ;;		None
 13566 ;; Return value:  Size  Location     Type
 13567 ;;		None               void
 13568 ;; Registers used:
 13569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13570 ;; Tracked objects:
 13571 ;;		On entry : 0/0
 13572 ;;		On exit  : 0/0
 13573 ;;		Unchanged: 0/0
 13574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;Total ram usage:        0 bytes
 13580 ;; Hardware stack levels used:    1
 13581 ;; Hardware stack levels required when called:    7
 13582 ;; This function calls:
 13583 ;;		_setLED_Initialization
 13584 ;; This function is called by:
 13585 ;;		_main
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           
 13590                           ;psect for function _LED_Initialization
 13591  26F9                     _LED_Initialization:	
 13592                           
 13593                           ;LED_B1.c: 38: setLED_Initialization(1);
 13594                           
 13595                           ;incstack = 0
 13596                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13597  26F9  3001               	movlw	1
 13598  26FA  3198  207F  31A6   	fcall	_setLED_Initialization
 13599                           
 13600                           ;LED_B1.c: 41: setLED_Initialization(2);
 13601  26FD  3002               	movlw	2
 13602  26FE  3198  207F  31A6   	fcall	_setLED_Initialization
 13603                           
 13604                           ;LED_B1.c: 47: setLED_Initialization(99);
 13605  2701  3063               	movlw	99
 13606  2702  3198  207F         	fcall	_setLED_Initialization
 13607  2704  0008               	return
 13608  2705                     __end_of_LED_Initialization:	
 13609                           
 13610                           	psect	text79
 13611  187F                     __ptext79:	
 13612 ;; *************** function _setLED_Initialization *****************
 13613 ;; Defined at:
 13614 ;;		line 67 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;  led             1    wreg     unsigned char 
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  led             1    4[BANK0 ] unsigned char 
 13619 ;; Return value:  Size  Location     Type
 13620 ;;		None               void
 13621 ;; Registers used:
 13622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13623 ;; Tracked objects:
 13624 ;;		On entry : 0/0
 13625 ;;		On exit  : 0/0
 13626 ;;		Unchanged: 0/0
 13627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;Total ram usage:        1 bytes
 13633 ;; Hardware stack levels used:    1
 13634 ;; Hardware stack levels required when called:    6
 13635 ;; This function calls:
 13636 ;;		_LedPointSelect
 13637 ;;		_setLED
 13638 ;; This function is called by:
 13639 ;;		_LED_Initialization
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           
 13644                           ;psect for function _setLED_Initialization
 13645  187F                     _setLED_Initialization:	
 13646                           
 13647                           ;incstack = 0
 13648                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13649                           ;setLED_Initialization@led stored from wreg
 13650  187F  0020               	movlb	0	; select bank0
 13651  1880  00A4               	movwf	setLED_Initialization@led
 13652                           
 13653                           ;LED_B1.c: 69: LedPointSelect(led);
 13654  1881  0824               	movf	setLED_Initialization@led,w
 13655  1882  319A  224F  3198   	fcall	_LedPointSelect
 13656                           
 13657                           ;LED_B1.c: 70: LED->Enable=1;
 13658  1885  0021               	movlb	1	; select bank1
 13659  1886  083B               	movf	_LED^(0+128),w
 13660  1887  0086               	movwf	6
 13661  1888  0187               	clrf	7
 13662  1889  1401               	bsf	1,0
 13663                           
 13664                           ;LED_B1.c: 71: setLED(led,0);
 13665  188A  0020               	movlb	0	; select bank0
 13666  188B  01A2               	clrf	setLED@command
 13667  188C  0824               	movf	setLED_Initialization@led,w
 13668  188D  3192  226D         	fcall	_setLED
 13669  188F  0008               	return
 13670  1890                     __end_of_setLED_Initialization:	
 13671                           
 13672                           	psect	text80
 13673  1EE3                     __ptext80:	
 13674 ;; *************** function _Flash_Memory_Main *****************
 13675 ;; Defined at:
 13676 ;;		line 838 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13677 ;; Parameters:    Size  Location     Type
 13678 ;;		None
 13679 ;; Auto vars:     Size  Location     Type
 13680 ;;		None
 13681 ;; Return value:  Size  Location     Type
 13682 ;;		None               void
 13683 ;; Registers used:
 13684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13685 ;; Tracked objects:
 13686 ;;		On entry : 0/0
 13687 ;;		On exit  : 0/0
 13688 ;;		Unchanged: 0/0
 13689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13694 ;;Total ram usage:        0 bytes
 13695 ;; Hardware stack levels used:    1
 13696 ;; Hardware stack levels required when called:    7
 13697 ;; This function calls:
 13698 ;;		_Flash_Memory_Modify
 13699 ;; This function is called by:
 13700 ;;		_main
 13701 ;; This function uses a non-reentrant model
 13702 ;;
 13703                           
 13704                           
 13705                           ;psect for function _Flash_Memory_Main
 13706  1EE3                     _Flash_Memory_Main:	
 13707                           
 13708                           ;MCU_B1.c: 839: if (Memory->GO) {
 13709                           
 13710                           ;incstack = 0
 13711                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13712  1EE3  0021               	movlb	1	; select bank1
 13713  1EE4  0867               	movf	_Memory^(0+128),w
 13714  1EE5  3E22               	addlw	34
 13715  1EE6  0086               	movwf	6
 13716  1EE7  3001               	movlw	1	; select bank2/3
 13717  1EE8  0087               	movwf	7
 13718  1EE9  1C81               	btfss	1,1
 13719  1EEA  0008               	return
 13720                           
 13721                           ;MCU_B1.c: 840: if (Memory->Modify) {
 13722  1EEB  0867               	movf	_Memory^(0+128),w
 13723  1EEC  3E22               	addlw	34
 13724  1EED  0086               	movwf	6
 13725  1EEE  3001               	movlw	1	; select bank2/3
 13726  1EEF  0087               	movwf	7
 13727  1EF0  1C01               	btfss	1,0
 13728  1EF1  2F20               	goto	l9152
 13729                           
 13730                           ;MCU_B1.c: 841: Memory->Time++;
 13731  1EF2  0867               	movf	_Memory^(0+128),w
 13732  1EF3  3E23               	addlw	35
 13733  1EF4  0086               	movwf	6
 13734  1EF5  3001               	movlw	1	; select bank2/3
 13735  1EF6  0087               	movwf	7
 13736  1EF7  3001               	movlw	1
 13737  1EF8  0781               	addwf	1,f
 13738  1EF9  3141               	addfsr 1,1
 13739  1EFA  1803               	skipnc
 13740  1EFB  0A81               	incf	1,f
 13741                           
 13742                           ;MCU_B1.c: 842: if (Memory->Time == 25)
 13743  1EFC  0867               	movf	_Memory^(0+128),w
 13744  1EFD  3E23               	addlw	35
 13745  1EFE  0086               	movwf	6
 13746  1EFF  3001               	movlw	1	; select bank2/3
 13747  1F00  0087               	movwf	7
 13748  1F01  3F40               	moviw [0]fsr1
 13749  1F02  3A19               	xorlw	25
 13750  1F03  1D03               	skipz
 13751  1F04  2F07               	goto	u9115
 13752  1F05  3F41               	moviw [1]fsr1
 13753  1F06  3A00               	xorlw	0
 13754  1F07                     u9115:	
 13755  1F07  1D03               	skipz
 13756  1F08  0008               	return
 13757                           
 13758                           ;MCU_B1.c: 843: {
 13759                           ;MCU_B1.c: 844: Memory->Time = 0;
 13760  1F09  0867               	movf	_Memory^(0+128),w
 13761  1F0A  3E23               	addlw	35
 13762  1F0B  0086               	movwf	6
 13763  1F0C  3001               	movlw	1	; select bank2/3
 13764  1F0D  0087               	movwf	7
 13765  1F0E  3000               	movlw	0
 13766  1F0F  3FC0               	movwi [0]fsr1
 13767  1F10  3FC1               	movwi [1]fsr1
 13768                           
 13769                           ;MCU_B1.c: 845: Memory->Modify = 0;
 13770  1F11  0867               	movf	_Memory^(0+128),w
 13771  1F12  3E22               	addlw	34
 13772  1F13  0086               	movwf	6
 13773  1F14  3001               	movlw	1	; select bank2/3
 13774  1F15  0087               	movwf	7
 13775  1F16  1001               	bcf	1,0
 13776                           
 13777                           ;MCU_B1.c: 846: Memory->GO = 0;
 13778  1F17  0867               	movf	_Memory^(0+128),w
 13779  1F18  3E22               	addlw	34
 13780  1F19  0086               	movwf	6
 13781  1F1A  3001               	movlw	1	; select bank2/3
 13782  1F1B  0087               	movwf	7
 13783  1F1C  1081               	bcf	1,1
 13784                           
 13785                           ;MCU_B1.c: 847: Flash_Memory_Modify();
 13786  1F1D  3194  2467         	fcall	_Flash_Memory_Modify
 13787                           
 13788                           ;MCU_B1.c: 849: }
 13789                           ;MCU_B1.c: 850: } else {
 13790  1F1F  0008               	return
 13791  1F20                     l9152:	
 13792                           
 13793                           ;MCU_B1.c: 851: Memory->GO = 0;
 13794  1F20  0021               	movlb	1	; select bank1
 13795  1F21  0867               	movf	_Memory^(0+128),w
 13796  1F22  3E22               	addlw	34
 13797  1F23  0086               	movwf	6
 13798  1F24  3001               	movlw	1	; select bank2/3
 13799  1F25  0087               	movwf	7
 13800  1F26  1081               	bcf	1,1
 13801  1F27  0008               	return
 13802  1F28                     __end_of_Flash_Memory_Main:	
 13803                           
 13804                           	psect	text81
 13805  1467                     __ptext81:	
 13806 ;; *************** function _Flash_Memory_Modify *****************
 13807 ;; Defined at:
 13808 ;;		line 908 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;		None
 13811 ;; Auto vars:     Size  Location     Type
 13812 ;;  i               1    6[BANK0 ] unsigned char 
 13813 ;; Return value:  Size  Location     Type
 13814 ;;		None               void
 13815 ;; Registers used:
 13816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;Total ram usage:        3 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:    6
 13829 ;; This function calls:
 13830 ;;		_Flash_Memory_Erasing
 13831 ;;		_Flash_Memory_Read
 13832 ;;		_Flash_Memory_Write
 13833 ;; This function is called by:
 13834 ;;		_Flash_Memory_Main
 13835 ;; This function uses a non-reentrant model
 13836 ;;
 13837                           
 13838                           
 13839                           ;psect for function _Flash_Memory_Modify
 13840  1467                     _Flash_Memory_Modify:	
 13841                           
 13842                           ;MCU_B1.c: 909: char i;
 13843                           ;MCU_B1.c: 910: for (i = 0; i < 32; i++) {
 13844                           
 13845                           ;incstack = 0
 13846                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13847  1467  0020               	movlb	0	; select bank0
 13848  1468  01A6               	clrf	Flash_Memory_Modify@i
 13849  1469  3020               	movlw	32
 13850  146A  0226               	subwf	Flash_Memory_Modify@i,w
 13851  146B  1803               	btfsc	3,0
 13852  146C  2C86               	goto	l8760
 13853  146D                     l8754:	
 13854                           
 13855                           ;MCU_B1.c: 911: Memory->Data[i] = Flash_Memory_Read(i);
 13856  146D  0826               	movf	Flash_Memory_Modify@i,w
 13857  146E  3199  212D  3194   	fcall	_Flash_Memory_Read
 13858  1471  0020               	movlb	0	; select bank0
 13859  1472  00A4               	movwf	??_Flash_Memory_Modify
 13860  1473  0826               	movf	Flash_Memory_Modify@i,w
 13861  1474  0021               	movlb	1	; select bank1
 13862  1475  0767               	addwf	_Memory^(0+128),w
 13863  1476  0020               	movlb	0	; select bank0
 13864  1477  00A5               	movwf	??_Flash_Memory_Modify+1
 13865  1478  0825               	movf	??_Flash_Memory_Modify+1,w
 13866  1479  0086               	movwf	6
 13867  147A  3001               	movlw	1	; select bank2/3
 13868  147B  0087               	movwf	7
 13869  147C  0824               	movf	??_Flash_Memory_Modify,w
 13870  147D  0081               	movwf	1
 13871  147E  3001               	movlw	1
 13872  147F  00A4               	movwf	??_Flash_Memory_Modify
 13873  1480  0824               	movf	??_Flash_Memory_Modify,w
 13874  1481  07A6               	addwf	Flash_Memory_Modify@i,f
 13875  1482  3020               	movlw	32
 13876  1483  0226               	subwf	Flash_Memory_Modify@i,w
 13877  1484  1C03               	skipc
 13878  1485  2C6D               	goto	l8754
 13879  1486                     l8760:	
 13880                           
 13881                           ;MCU_B1.c: 912: }
 13882                           ;MCU_B1.c: 913: Memory->Data[0]=Product->Data[12];
 13883  1486  086F               	movf	_Product,w
 13884  1487  3E0C               	addlw	12
 13885  1488  0086               	movwf	6
 13886  1489  3001               	movlw	1	; select bank2/3
 13887  148A  0087               	movwf	7
 13888  148B  0801               	movf	1,w
 13889  148C  00A4               	movwf	??_Flash_Memory_Modify
 13890  148D  0021               	movlb	1	; select bank1
 13891  148E  0867               	movf	_Memory^(0+128),w
 13892  148F  0086               	movwf	6
 13893  1490  3001               	movlw	1	; select bank2/3
 13894  1491  0087               	movwf	7
 13895  1492  0020               	movlb	0	; select bank0
 13896  1493  0824               	movf	??_Flash_Memory_Modify,w
 13897  1494  0081               	movwf	1
 13898                           
 13899                           ;MCU_B1.c: 914: Memory->Data[1]=Product->Data[13];
 13900  1495  086F               	movf	_Product,w
 13901  1496  3E0D               	addlw	13
 13902  1497  0086               	movwf	6
 13903  1498  3001               	movlw	1	; select bank2/3
 13904  1499  0087               	movwf	7
 13905  149A  0801               	movf	1,w
 13906  149B  00A4               	movwf	??_Flash_Memory_Modify
 13907  149C  0021               	movlb	1	; select bank1
 13908  149D  0A67               	incf	_Memory^(0+128),w
 13909  149E  0086               	movwf	6
 13910  149F  3001               	movlw	1	; select bank2/3
 13911  14A0  0087               	movwf	7
 13912  14A1  0020               	movlb	0	; select bank0
 13913  14A2  0824               	movf	??_Flash_Memory_Modify,w
 13914  14A3  0081               	movwf	1
 13915                           
 13916                           ;MCU_B1.c: 915: Memory->Data[2]=Product->Data[14];
 13917  14A4  086F               	movf	_Product,w
 13918  14A5  3E0E               	addlw	14
 13919  14A6  0086               	movwf	6
 13920  14A7  3001               	movlw	1	; select bank2/3
 13921  14A8  0087               	movwf	7
 13922  14A9  0801               	movf	1,w
 13923  14AA  00A4               	movwf	??_Flash_Memory_Modify
 13924  14AB  0021               	movlb	1	; select bank1
 13925  14AC  0867               	movf	_Memory^(0+128),w
 13926  14AD  3E02               	addlw	2
 13927  14AE  0086               	movwf	6
 13928  14AF  3001               	movlw	1	; select bank2/3
 13929  14B0  0087               	movwf	7
 13930  14B1  0020               	movlb	0	; select bank0
 13931  14B2  0824               	movf	??_Flash_Memory_Modify,w
 13932  14B3  0081               	movwf	1
 13933                           
 13934                           ;MCU_B1.c: 921: if (Memory->LoopSave) {
 13935  14B4  0021               	movlb	1	; select bank1
 13936  14B5  0867               	movf	_Memory^(0+128),w
 13937  14B6  3E22               	addlw	34
 13938  14B7  0086               	movwf	6
 13939  14B8  3001               	movlw	1	; select bank2/3
 13940  14B9  0087               	movwf	7
 13941  14BA  1D01               	btfss	1,2
 13942  14BB  2CCD               	goto	l8764
 13943                           
 13944                           ;MCU_B1.c: 922: Memory->LoopSave = 0;
 13945  14BC  0867               	movf	_Memory^(0+128),w
 13946  14BD  3E22               	addlw	34
 13947  14BE  0086               	movwf	6
 13948  14BF  3001               	movlw	1	; select bank2/3
 13949  14C0  0087               	movwf	7
 13950  14C1  1101               	bcf	1,2
 13951                           
 13952                           ;MCU_B1.c: 923: TMain->FirstOpen = 0;
 13953  14C2  087D               	movf	_TMain,w
 13954  14C3  0086               	movwf	6
 13955  14C4  3001               	movlw	1	; select bank2/3
 13956  14C5  0087               	movwf	7
 13957  14C6  1281               	bcf	1,5
 13958                           
 13959                           ;MCU_B1.c: 924: TMain->First = 0;
 13960  14C7  087D               	movf	_TMain,w
 13961  14C8  3E03               	addlw	3
 13962  14C9  0086               	movwf	6
 13963  14CA  3001               	movlw	1	; select bank2/3
 13964  14CB  0087               	movwf	7
 13965  14CC  1081               	bcf	1,1
 13966  14CD                     l8764:	
 13967                           
 13968                           ;MCU_B1.c: 926: }
 13969                           ;MCU_B1.c: 927: GIE = 0;
 13970  14CD  138B               	bcf	11,7	;volatile
 13971                           
 13972                           ;MCU_B1.c: 928: Flash_Memory_Erasing();
 13973  14CE  31A6  26ED  3194   	fcall	_Flash_Memory_Erasing
 13974                           
 13975                           ;MCU_B1.c: 929: Flash_Memory_Write();
 13976  14D1  319C  24BF         	fcall	_Flash_Memory_Write
 13977                           
 13978                           ;MCU_B1.c: 930: GIE = 1;
 13979  14D3  178B               	bsf	11,7	;volatile
 13980  14D4  0008               	return
 13981  14D5                     __end_of_Flash_Memory_Modify:	
 13982                           
 13983                           	psect	text82
 13984  26ED                     __ptext82:	
 13985 ;; *************** function _Flash_Memory_Erasing *****************
 13986 ;; Defined at:
 13987 ;;		line 897 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13988 ;; Parameters:    Size  Location     Type
 13989 ;;		None
 13990 ;; Auto vars:     Size  Location     Type
 13991 ;;		None
 13992 ;; Return value:  Size  Location     Type
 13993 ;;		None               void
 13994 ;; Registers used:
 13995 ;;		wreg, status,2, status,0, pclath, cstack
 13996 ;; Tracked objects:
 13997 ;;		On entry : 0/0
 13998 ;;		On exit  : 0/0
 13999 ;;		Unchanged: 0/0
 14000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;Total ram usage:        0 bytes
 14006 ;; Hardware stack levels used:    1
 14007 ;; Hardware stack levels required when called:    5
 14008 ;; This function calls:
 14009 ;;		_Flash_Memory_Unlock
 14010 ;; This function is called by:
 14011 ;;		_Flash_Memory_Modify
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           
 14016                           ;psect for function _Flash_Memory_Erasing
 14017  26ED                     _Flash_Memory_Erasing:	
 14018                           
 14019                           ;MCU_B1.c: 898: CFGS = 0;
 14020                           
 14021                           ;incstack = 0
 14022                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14023  26ED  0023               	movlb	3	; select bank3
 14024  26EE  1315               	bcf	21,6	;volatile
 14025                           
 14026                           ;MCU_B1.c: 899: PMADRH = 0x30;
 14027  26EF  3030               	movlw	48
 14028  26F0  0092               	movwf	18	;volatile
 14029                           
 14030                           ;MCU_B1.c: 900: PMADRL = 0x00;
 14031  26F1  0191               	clrf	17	;volatile
 14032                           
 14033                           ;MCU_B1.c: 901: FREE = 1;
 14034  26F2  1615               	bsf	21,4	;volatile
 14035                           
 14036                           ;MCU_B1.c: 902: WREN = 1;
 14037  26F3  1515               	bsf	21,2	;volatile
 14038                           
 14039                           ;MCU_B1.c: 903: Flash_Memory_Unlock();
 14040  26F4  31A6  261A         	fcall	_Flash_Memory_Unlock
 14041                           
 14042                           ;MCU_B1.c: 904: WREN = 0;
 14043  26F6  0023               	movlb	3	; select bank3
 14044  26F7  1115               	bcf	21,2	;volatile
 14045  26F8  0008               	return
 14046  26F9                     __end_of_Flash_Memory_Erasing:	
 14047                           
 14048                           	psect	text83
 14049  0D08                     __ptext83:	
 14050 ;; *************** function _Flash_Memory_Initialization *****************
 14051 ;; Defined at:
 14052 ;;		line 797 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;		None
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  i               1   62[BANK0 ] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;Total ram usage:        2 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    7
 14073 ;; This function calls:
 14074 ;;		_Flash_Memory_Read
 14075 ;;		_Flash_Memory_Write
 14076 ;;		_setPercentValue
 14077 ;; This function is called by:
 14078 ;;		_main
 14079 ;; This function uses a non-reentrant model
 14080 ;;
 14081                           
 14082                           
 14083                           ;psect for function _Flash_Memory_Initialization
 14084  0D08                     _Flash_Memory_Initialization:	
 14085                           
 14086                           ;MCU_B1.c: 798: char i;
 14087                           ;MCU_B1.c: 799: if (Flash_Memory_Read(31) == 0xaa) {
 14088                           
 14089                           ;incstack = 0
 14090                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14091  0D08  301F               	movlw	31
 14092  0D09  3199  212D  318D   	fcall	_Flash_Memory_Read
 14093  0D0C  3AAA               	xorlw	170
 14094  0D0D  1D03               	skipz
 14095  0D0E  2D80               	goto	l9108
 14096                           
 14097                           ;MCU_B1.c: 800: Product->Data[12] = Flash_Memory_Read(0);
 14098  0D0F  3000               	movlw	0
 14099  0D10  3199  212D  318D   	fcall	_Flash_Memory_Read
 14100  0D13  0020               	movlb	0	; select bank0
 14101  0D14  00DD               	movwf	??_Flash_Memory_Initialization
 14102  0D15  086F               	movf	_Product,w
 14103  0D16  3E0C               	addlw	12
 14104  0D17  0086               	movwf	6
 14105  0D18  3001               	movlw	1	; select bank2/3
 14106  0D19  0087               	movwf	7
 14107  0D1A  085D               	movf	??_Flash_Memory_Initialization,w
 14108  0D1B  0081               	movwf	1
 14109                           
 14110                           ;MCU_B1.c: 801: Product->Data[13] = Flash_Memory_Read(1);
 14111  0D1C  3001               	movlw	1
 14112  0D1D  3199  212D  318D   	fcall	_Flash_Memory_Read
 14113  0D20  0020               	movlb	0	; select bank0
 14114  0D21  00DD               	movwf	??_Flash_Memory_Initialization
 14115  0D22  086F               	movf	_Product,w
 14116  0D23  3E0D               	addlw	13
 14117  0D24  0086               	movwf	6
 14118  0D25  3001               	movlw	1	; select bank2/3
 14119  0D26  0087               	movwf	7
 14120  0D27  085D               	movf	??_Flash_Memory_Initialization,w
 14121  0D28  0081               	movwf	1
 14122                           
 14123                           ;MCU_B1.c: 802: Product->Data[14] = Flash_Memory_Read(2);
 14124  0D29  3002               	movlw	2
 14125  0D2A  3199  212D  318D   	fcall	_Flash_Memory_Read
 14126  0D2D  0020               	movlb	0	; select bank0
 14127  0D2E  00DD               	movwf	??_Flash_Memory_Initialization
 14128  0D2F  086F               	movf	_Product,w
 14129  0D30  3E0E               	addlw	14
 14130  0D31  0086               	movwf	6
 14131  0D32  3001               	movlw	1	; select bank2/3
 14132  0D33  0087               	movwf	7
 14133  0D34  085D               	movf	??_Flash_Memory_Initialization,w
 14134  0D35  0081               	movwf	1
 14135                           
 14136                           ;MCU_B1.c: 808: i = setPercentValue(((char)((100-55)*1.5)));
 14137  0D36  3043               	movlw	67
 14138  0D37  319F  2728  318D   	fcall	_setPercentValue
 14139  0D3A  0020               	movlb	0	; select bank0
 14140  0D3B  00DD               	movwf	??_Flash_Memory_Initialization
 14141  0D3C  085D               	movf	??_Flash_Memory_Initialization,w
 14142  0D3D  00DE               	movwf	Flash_Memory_Initialization@i
 14143                           
 14144                           ;MCU_B1.c: 809: Product->Data[21] = i;
 14145  0D3E  085E               	movf	Flash_Memory_Initialization@i,w
 14146  0D3F  00DD               	movwf	??_Flash_Memory_Initialization
 14147  0D40  086F               	movf	_Product,w
 14148  0D41  3E15               	addlw	21
 14149  0D42  0086               	movwf	6
 14150  0D43  3001               	movlw	1	; select bank2/3
 14151  0D44  0087               	movwf	7
 14152  0D45  085D               	movf	??_Flash_Memory_Initialization,w
 14153  0D46  0081               	movwf	1
 14154                           
 14155                           ;MCU_B1.c: 810: Product->Data[22] = i;
 14156  0D47  085E               	movf	Flash_Memory_Initialization@i,w
 14157  0D48  00DD               	movwf	??_Flash_Memory_Initialization
 14158  0D49  086F               	movf	_Product,w
 14159  0D4A  3E16               	addlw	22
 14160  0D4B  0086               	movwf	6
 14161  0D4C  3001               	movlw	1	; select bank2/3
 14162  0D4D  0087               	movwf	7
 14163  0D4E  085D               	movf	??_Flash_Memory_Initialization,w
 14164  0D4F  0081               	movwf	1
 14165                           
 14166                           ;MCU_B1.c: 811: Product->Data[23] = i;
 14167  0D50  085E               	movf	Flash_Memory_Initialization@i,w
 14168  0D51  00DD               	movwf	??_Flash_Memory_Initialization
 14169  0D52  086F               	movf	_Product,w
 14170  0D53  3E17               	addlw	23
 14171  0D54  0086               	movwf	6
 14172  0D55  3001               	movlw	1	; select bank2/3
 14173  0D56  0087               	movwf	7
 14174  0D57  085D               	movf	??_Flash_Memory_Initialization,w
 14175  0D58  0081               	movwf	1
 14176                           
 14177                           ;MCU_B1.c: 813: if (Product->Data[12] == 0xff && Product->Data[13] == 0xff && Product->D
      +                          ata[14] == 0xff) {
 14178  0D59  086F               	movf	_Product,w
 14179  0D5A  3E0C               	addlw	12
 14180  0D5B  0086               	movwf	6
 14181  0D5C  3001               	movlw	1	; select bank2/3
 14182  0D5D  0087               	movwf	7
 14183  0D5E  0801               	movf	1,w
 14184  0D5F  3AFF               	xorlw	255
 14185  0D60  1D03               	skipz
 14186  0D61  0008               	return
 14187  0D62  086F               	movf	_Product,w
 14188  0D63  3E0D               	addlw	13
 14189  0D64  0086               	movwf	6
 14190  0D65  3001               	movlw	1	; select bank2/3
 14191  0D66  0087               	movwf	7
 14192  0D67  0801               	movf	1,w
 14193  0D68  3AFF               	xorlw	255
 14194  0D69  1D03               	skipz
 14195  0D6A  0008               	return
 14196  0D6B  086F               	movf	_Product,w
 14197  0D6C  3E0E               	addlw	14
 14198  0D6D  0086               	movwf	6
 14199  0D6E  3001               	movlw	1	; select bank2/3
 14200  0D6F  0087               	movwf	7
 14201  0D70  0801               	movf	1,w
 14202  0D71  3AFF               	xorlw	255
 14203  0D72  1D03               	skipz
 14204  0D73  0008               	return
 14205                           
 14206                           ;MCU_B1.c: 814: TMain->FirstOpen = 1;
 14207  0D74  087D               	movf	_TMain,w
 14208  0D75  0086               	movwf	6
 14209  0D76  3001               	movlw	1	; select bank2/3
 14210  0D77  0087               	movwf	7
 14211  0D78  1681               	bsf	1,5
 14212                           
 14213                           ;MCU_B1.c: 815: TMain->First = 1;
 14214  0D79  087D               	movf	_TMain,w
 14215  0D7A  3E03               	addlw	3
 14216  0D7B  0086               	movwf	6
 14217  0D7C  3001               	movlw	1	; select bank2/3
 14218  0D7D  0087               	movwf	7
 14219  0D7E  1481               	bsf	1,1
 14220                           
 14221                           ;MCU_B1.c: 816: }
 14222                           ;MCU_B1.c: 817: } else {
 14223  0D7F  0008               	return
 14224  0D80                     l9108:	
 14225                           
 14226                           ;MCU_B1.c: 818: i = setPercentValue(((char)((100-55)*1.5)));
 14227  0D80  3043               	movlw	67
 14228  0D81  319F  2728  318D   	fcall	_setPercentValue
 14229  0D84  0020               	movlb	0	; select bank0
 14230  0D85  00DD               	movwf	??_Flash_Memory_Initialization
 14231  0D86  085D               	movf	??_Flash_Memory_Initialization,w
 14232  0D87  00DE               	movwf	Flash_Memory_Initialization@i
 14233                           
 14234                           ;MCU_B1.c: 819: Memory->Data[0]=0xff;
 14235  0D88  30FF               	movlw	255
 14236  0D89  00DD               	movwf	??_Flash_Memory_Initialization
 14237  0D8A  0021               	movlb	1	; select bank1
 14238  0D8B  0867               	movf	_Memory^(0+128),w
 14239  0D8C  0086               	movwf	6
 14240  0D8D  3001               	movlw	1	; select bank2/3
 14241  0D8E  0087               	movwf	7
 14242  0D8F  0020               	movlb	0	; select bank0
 14243  0D90  085D               	movf	??_Flash_Memory_Initialization,w
 14244  0D91  0081               	movwf	1
 14245                           
 14246                           ;MCU_B1.c: 820: Memory->Data[1]=0xff;
 14247  0D92  30FF               	movlw	255
 14248  0D93  00DD               	movwf	??_Flash_Memory_Initialization
 14249  0D94  0021               	movlb	1	; select bank1
 14250  0D95  0A67               	incf	_Memory^(0+128),w
 14251  0D96  0086               	movwf	6
 14252  0D97  3001               	movlw	1	; select bank2/3
 14253  0D98  0087               	movwf	7
 14254  0D99  0020               	movlb	0	; select bank0
 14255  0D9A  085D               	movf	??_Flash_Memory_Initialization,w
 14256  0D9B  0081               	movwf	1
 14257                           
 14258                           ;MCU_B1.c: 821: Memory->Data[2]=0xff;
 14259  0D9C  30FF               	movlw	255
 14260  0D9D  00DD               	movwf	??_Flash_Memory_Initialization
 14261  0D9E  0021               	movlb	1	; select bank1
 14262  0D9F  0867               	movf	_Memory^(0+128),w
 14263  0DA0  3E02               	addlw	2
 14264  0DA1  0086               	movwf	6
 14265  0DA2  3001               	movlw	1	; select bank2/3
 14266  0DA3  0087               	movwf	7
 14267  0DA4  0020               	movlb	0	; select bank0
 14268  0DA5  085D               	movf	??_Flash_Memory_Initialization,w
 14269  0DA6  0081               	movwf	1
 14270                           
 14271                           ;MCU_B1.c: 822: Memory->Data[3]=0xff;
 14272  0DA7  30FF               	movlw	255
 14273  0DA8  00DD               	movwf	??_Flash_Memory_Initialization
 14274  0DA9  0021               	movlb	1	; select bank1
 14275  0DAA  0867               	movf	_Memory^(0+128),w
 14276  0DAB  3E03               	addlw	3
 14277  0DAC  0086               	movwf	6
 14278  0DAD  3001               	movlw	1	; select bank2/3
 14279  0DAE  0087               	movwf	7
 14280  0DAF  0020               	movlb	0	; select bank0
 14281  0DB0  085D               	movf	??_Flash_Memory_Initialization,w
 14282  0DB1  0081               	movwf	1
 14283                           
 14284                           ;MCU_B1.c: 823: Memory->Data[4]=0xff;
 14285  0DB2  30FF               	movlw	255
 14286  0DB3  00DD               	movwf	??_Flash_Memory_Initialization
 14287  0DB4  0021               	movlb	1	; select bank1
 14288  0DB5  0867               	movf	_Memory^(0+128),w
 14289  0DB6  3E04               	addlw	4
 14290  0DB7  0086               	movwf	6
 14291  0DB8  3001               	movlw	1	; select bank2/3
 14292  0DB9  0087               	movwf	7
 14293  0DBA  0020               	movlb	0	; select bank0
 14294  0DBB  085D               	movf	??_Flash_Memory_Initialization,w
 14295  0DBC  0081               	movwf	1
 14296                           
 14297                           ;MCU_B1.c: 824: Memory->Data[5]=0xff;
 14298  0DBD  30FF               	movlw	255
 14299  0DBE  00DD               	movwf	??_Flash_Memory_Initialization
 14300  0DBF  0021               	movlb	1	; select bank1
 14301  0DC0  0867               	movf	_Memory^(0+128),w
 14302  0DC1  3E05               	addlw	5
 14303  0DC2  0086               	movwf	6
 14304  0DC3  3001               	movlw	1	; select bank2/3
 14305  0DC4  0087               	movwf	7
 14306  0DC5  0020               	movlb	0	; select bank0
 14307  0DC6  085D               	movf	??_Flash_Memory_Initialization,w
 14308  0DC7  0081               	movwf	1
 14309                           
 14310                           ;MCU_B1.c: 825: Memory->Data[31]=0xaa;
 14311  0DC8  30AA               	movlw	170
 14312  0DC9  00DD               	movwf	??_Flash_Memory_Initialization
 14313  0DCA  0021               	movlb	1	; select bank1
 14314  0DCB  0867               	movf	_Memory^(0+128),w
 14315  0DCC  3E1F               	addlw	31
 14316  0DCD  0086               	movwf	6
 14317  0DCE  3001               	movlw	1	; select bank2/3
 14318  0DCF  0087               	movwf	7
 14319  0DD0  0020               	movlb	0	; select bank0
 14320  0DD1  085D               	movf	??_Flash_Memory_Initialization,w
 14321  0DD2  0081               	movwf	1
 14322                           
 14323                           ;MCU_B1.c: 826: Product->Data[21] = i;
 14324  0DD3  085E               	movf	Flash_Memory_Initialization@i,w
 14325  0DD4  00DD               	movwf	??_Flash_Memory_Initialization
 14326  0DD5  086F               	movf	_Product,w
 14327  0DD6  3E15               	addlw	21
 14328  0DD7  0086               	movwf	6
 14329  0DD8  3001               	movlw	1	; select bank2/3
 14330  0DD9  0087               	movwf	7
 14331  0DDA  085D               	movf	??_Flash_Memory_Initialization,w
 14332  0DDB  0081               	movwf	1
 14333                           
 14334                           ;MCU_B1.c: 827: Product->Data[22] = i;
 14335  0DDC  085E               	movf	Flash_Memory_Initialization@i,w
 14336  0DDD  00DD               	movwf	??_Flash_Memory_Initialization
 14337  0DDE  086F               	movf	_Product,w
 14338  0DDF  3E16               	addlw	22
 14339  0DE0  0086               	movwf	6
 14340  0DE1  3001               	movlw	1	; select bank2/3
 14341  0DE2  0087               	movwf	7
 14342  0DE3  085D               	movf	??_Flash_Memory_Initialization,w
 14343  0DE4  0081               	movwf	1
 14344                           
 14345                           ;MCU_B1.c: 828: Product->Data[23] = i;
 14346  0DE5  085E               	movf	Flash_Memory_Initialization@i,w
 14347  0DE6  00DD               	movwf	??_Flash_Memory_Initialization
 14348  0DE7  086F               	movf	_Product,w
 14349  0DE8  3E17               	addlw	23
 14350  0DE9  0086               	movwf	6
 14351  0DEA  3001               	movlw	1	; select bank2/3
 14352  0DEB  0087               	movwf	7
 14353  0DEC  085D               	movf	??_Flash_Memory_Initialization,w
 14354  0DED  0081               	movwf	1
 14355                           
 14356                           ;MCU_B1.c: 829: GIE = 0;
 14357  0DEE  138B               	bcf	11,7	;volatile
 14358                           
 14359                           ;MCU_B1.c: 830: Flash_Memory_Write();
 14360  0DEF  319C  24BF         	fcall	_Flash_Memory_Write
 14361                           
 14362                           ;MCU_B1.c: 831: GIE = 1;
 14363  0DF1  178B               	bsf	11,7	;volatile
 14364                           
 14365                           ;MCU_B1.c: 832: TMain->FirstOpen = 1;
 14366  0DF2  087D               	movf	_TMain,w
 14367  0DF3  0086               	movwf	6
 14368  0DF4  3001               	movlw	1	; select bank2/3
 14369  0DF5  0087               	movwf	7
 14370  0DF6  1681               	bsf	1,5
 14371                           
 14372                           ;MCU_B1.c: 833: TMain->First = 1;
 14373  0DF7  087D               	movf	_TMain,w
 14374  0DF8  3E03               	addlw	3
 14375  0DF9  0086               	movwf	6
 14376  0DFA  3001               	movlw	1	; select bank2/3
 14377  0DFB  0087               	movwf	7
 14378  0DFC  1481               	bsf	1,1
 14379  0DFD  0008               	return
 14380  0DFE                     __end_of_Flash_Memory_Initialization:	
 14381                           
 14382                           	psect	text84
 14383  1CBF                     __ptext84:	
 14384 ;; *************** function _Flash_Memory_Write *****************
 14385 ;; Defined at:
 14386 ;;		line 878 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14387 ;; Parameters:    Size  Location     Type
 14388 ;;		None
 14389 ;; Auto vars:     Size  Location     Type
 14390 ;;  i               1    1[BANK0 ] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;		None               void
 14393 ;; Registers used:
 14394 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;Total ram usage:        2 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; Hardware stack levels required when called:    5
 14407 ;; This function calls:
 14408 ;;		_Flash_Memory_Unlock
 14409 ;; This function is called by:
 14410 ;;		_Flash_Memory_Initialization
 14411 ;;		_Flash_Memory_Modify
 14412 ;; This function uses a non-reentrant model
 14413 ;;
 14414                           
 14415                           
 14416                           ;psect for function _Flash_Memory_Write
 14417  1CBF                     _Flash_Memory_Write:	
 14418                           
 14419                           ;MCU_B1.c: 879: char i;
 14420                           ;MCU_B1.c: 880: CFGS = 0;
 14421                           
 14422                           ;incstack = 0
 14423                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14424  1CBF  0023               	movlb	3	; select bank3
 14425  1CC0  1315               	bcf	21,6	;volatile
 14426                           
 14427                           ;MCU_B1.c: 881: PMADRH = 0x30;
 14428  1CC1  3030               	movlw	48
 14429  1CC2  0092               	movwf	18	;volatile
 14430                           
 14431                           ;MCU_B1.c: 882: PMDATH = 0;
 14432  1CC3  0194               	clrf	20	;volatile
 14433                           
 14434                           ;MCU_B1.c: 883: FREE = 0;
 14435  1CC4  1215               	bcf	21,4	;volatile
 14436                           
 14437                           ;MCU_B1.c: 884: LWLO = 1;
 14438  1CC5  1695               	bsf	21,5	;volatile
 14439                           
 14440                           ;MCU_B1.c: 885: WREN = 1;
 14441  1CC6  1515               	bsf	21,2	;volatile
 14442                           
 14443                           ;MCU_B1.c: 886: for (i = 0; i < 32; i++) {
 14444  1CC7  0020               	movlb	0	; select bank0
 14445  1CC8  01A1               	clrf	Flash_Memory_Write@i
 14446  1CC9  3020               	movlw	32
 14447  1CCA  0221               	subwf	Flash_Memory_Write@i,w
 14448  1CCB  1803               	btfsc	3,0
 14449  1CCC  2CE9               	goto	l1375
 14450  1CCD                     l8418:	
 14451                           
 14452                           ;MCU_B1.c: 887: PMADRL = i;
 14453  1CCD  0821               	movf	Flash_Memory_Write@i,w
 14454  1CCE  0023               	movlb	3	; select bank3
 14455  1CCF  0091               	movwf	17	;volatile
 14456                           
 14457                           ;MCU_B1.c: 888: PMDATL = Memory->Data[i];
 14458  1CD0  0020               	movlb	0	; select bank0
 14459  1CD1  0821               	movf	Flash_Memory_Write@i,w
 14460  1CD2  0021               	movlb	1	; select bank1
 14461  1CD3  0767               	addwf	_Memory^(0+128),w
 14462  1CD4  0020               	movlb	0	; select bank0
 14463  1CD5  00A0               	movwf	??_Flash_Memory_Write
 14464  1CD6  0820               	movf	??_Flash_Memory_Write,w
 14465  1CD7  0086               	movwf	6
 14466  1CD8  3001               	movlw	1	; select bank2/3
 14467  1CD9  0087               	movwf	7
 14468  1CDA  0801               	movf	1,w
 14469  1CDB  0023               	movlb	3	; select bank3
 14470  1CDC  0093               	movwf	19	;volatile
 14471                           
 14472                           ;MCU_B1.c: 889: Flash_Memory_Unlock();
 14473  1CDD  31A6  261A  319C   	fcall	_Flash_Memory_Unlock
 14474  1CE0  3001               	movlw	1
 14475  1CE1  0020               	movlb	0	; select bank0
 14476  1CE2  00A0               	movwf	??_Flash_Memory_Write
 14477  1CE3  0820               	movf	??_Flash_Memory_Write,w
 14478  1CE4  07A1               	addwf	Flash_Memory_Write@i,f
 14479  1CE5  3020               	movlw	32
 14480  1CE6  0221               	subwf	Flash_Memory_Write@i,w
 14481  1CE7  1C03               	skipc
 14482  1CE8  2CCD               	goto	l8418
 14483  1CE9                     l1375:	
 14484                           
 14485                           ;MCU_B1.c: 890: }
 14486                           ;MCU_B1.c: 891: LWLO = 0;
 14487  1CE9  0023               	movlb	3	; select bank3
 14488  1CEA  1295               	bcf	21,5	;volatile
 14489                           
 14490                           ;MCU_B1.c: 892: Flash_Memory_Unlock();
 14491  1CEB  31A6  261A         	fcall	_Flash_Memory_Unlock
 14492                           
 14493                           ;MCU_B1.c: 893: WREN = 0;
 14494  1CED  0023               	movlb	3	; select bank3
 14495  1CEE  1115               	bcf	21,2	;volatile
 14496  1CEF  0008               	return
 14497  1CF0                     __end_of_Flash_Memory_Write:	
 14498                           
 14499                           	psect	text85
 14500  261A                     __ptext85:	
 14501 ;; *************** function _Flash_Memory_Unlock *****************
 14502 ;; Defined at:
 14503 ;;		line 857 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;		None
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;		None
 14508 ;; Return value:  Size  Location     Type
 14509 ;;		None               void
 14510 ;; Registers used:
 14511 ;;		wreg
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;Total ram usage:        0 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; Hardware stack levels required when called:    4
 14524 ;; This function calls:
 14525 ;;		Nothing
 14526 ;; This function is called by:
 14527 ;;		_Flash_Memory_Write
 14528 ;;		_Flash_Memory_Erasing
 14529 ;; This function uses a non-reentrant model
 14530 ;;
 14531                           
 14532                           
 14533                           ;psect for function _Flash_Memory_Unlock
 14534  261A                     _Flash_Memory_Unlock:	
 14535                           
 14536                           ;MCU_B1.c: 858: PMCON2 = 0x55;
 14537                           
 14538                           ;incstack = 0
 14539                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14540  261A  3055               	movlw	85
 14541  261B  0023               	movlb	3	; select bank3
 14542  261C  0096               	movwf	22	;volatile
 14543                           
 14544                           ;MCU_B1.c: 859: PMCON2 = 0xaa;
 14545  261D  30AA               	movlw	170
 14546  261E  0096               	movwf	22	;volatile
 14547                           
 14548                           ;MCU_B1.c: 860: WR = 1;
 14549  261F  1495               	bsf	21,1	;volatile
 14550                           
 14551                           ;MCU_B1.c: 861: __nop();
 14552  2620  0000               	nop
 14553                           
 14554                           ;MCU_B1.c: 862: __nop();
 14555  2621  0000               	nop
 14556  2622  0008               	return
 14557  2623                     __end_of_Flash_Memory_Unlock:	
 14558                           
 14559                           	psect	text86
 14560  192D                     __ptext86:	
 14561 ;; *************** function _Flash_Memory_Read *****************
 14562 ;; Defined at:
 14563 ;;		line 866 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;  address         1    wreg     unsigned char 
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;  address         1    2[BANK0 ] unsigned char 
 14568 ;;  ret             1    3[BANK0 ] unsigned char 
 14569 ;;  i               1    1[BANK0 ] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;                  1    wreg      unsigned char 
 14572 ;; Registers used:
 14573 ;;		wreg, status,2
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;Total ram usage:        4 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    4
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_Flash_Memory_Initialization
 14590 ;;		_Flash_Memory_Modify
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           
 14595                           ;psect for function _Flash_Memory_Read
 14596  192D                     _Flash_Memory_Read:	
 14597                           
 14598                           ;incstack = 0
 14599                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14600                           ;Flash_Memory_Read@address stored from wreg
 14601  192D  0020               	movlb	0	; select bank0
 14602  192E  00A2               	movwf	Flash_Memory_Read@address
 14603                           
 14604                           ;MCU_B1.c: 867: char i, ret = 0;
 14605  192F  01A3               	clrf	Flash_Memory_Read@ret
 14606                           
 14607                           ;MCU_B1.c: 868: PMADRH = 0x30;
 14608  1930  3030               	movlw	48
 14609  1931  0023               	movlb	3	; select bank3
 14610  1932  0092               	movwf	18	;volatile
 14611                           
 14612                           ;MCU_B1.c: 869: PMADRL = address;
 14613  1933  0020               	movlb	0	; select bank0
 14614  1934  0822               	movf	Flash_Memory_Read@address,w
 14615  1935  0023               	movlb	3	; select bank3
 14616  1936  0091               	movwf	17	;volatile
 14617                           
 14618                           ;MCU_B1.c: 870: CFGS = 0;
 14619  1937  1315               	bcf	21,6	;volatile
 14620                           
 14621                           ;MCU_B1.c: 871: RD = 1;
 14622  1938  1415               	bsf	21,0	;volatile
 14623                           
 14624                           ;MCU_B1.c: 872: i = PMDATH;
 14625  1939  0814               	movf	20,w	;volatile
 14626  193A  0020               	movlb	0	; select bank0
 14627  193B  00A0               	movwf	??_Flash_Memory_Read
 14628  193C  0820               	movf	??_Flash_Memory_Read,w
 14629  193D  00A1               	movwf	Flash_Memory_Read@i
 14630                           
 14631                           ;MCU_B1.c: 873: ret = PMDATL;
 14632  193E  0023               	movlb	3	; select bank3
 14633  193F  0813               	movf	19,w	;volatile
 14634  1940  0020               	movlb	0	; select bank0
 14635  1941  00A0               	movwf	??_Flash_Memory_Read
 14636  1942  0820               	movf	??_Flash_Memory_Read,w
 14637  1943  00A3               	movwf	Flash_Memory_Read@ret
 14638                           
 14639                           ;MCU_B1.c: 874: return ret;
 14640  1944  0823               	movf	Flash_Memory_Read@ret,w
 14641  1945  0008               	return
 14642  1946                     __end_of_Flash_Memory_Read:	
 14643                           
 14644                           	psect	text87
 14645  25F6                     __ptext87:	
 14646 ;; *************** function _DimmerLights_Main *****************
 14647 ;; Defined at:
 14648 ;;		line 114 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14649 ;; Parameters:    Size  Location     Type
 14650 ;;		None
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;		None
 14653 ;; Return value:  Size  Location     Type
 14654 ;;		None               void
 14655 ;; Registers used:
 14656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;Total ram usage:        0 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:   10
 14669 ;; This function calls:
 14670 ;;		_DimmerLights_Close
 14671 ;;		_setDimmerLights_Main
 14672 ;; This function is called by:
 14673 ;;		_main
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           
 14678                           ;psect for function _DimmerLights_Main
 14679  25F6                     _DimmerLights_Main:	
 14680                           
 14681                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14685  25F6  3001               	movlw	1
 14686  25F7  3196  2624  31A5   	fcall	_setDimmerLights_Main
 14687                           
 14688                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 14689  25FA  3199  2146         	fcall	_DimmerLights_Close
 14690  25FC  0008               	return
 14691  25FD                     __end_of_DimmerLights_Main:	
 14692                           
 14693                           	psect	text88
 14694  1624                     __ptext88:	
 14695 ;; *************** function _setDimmerLights_Main *****************
 14696 ;; Defined at:
 14697 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14698 ;; Parameters:    Size  Location     Type
 14699 ;;  lights          1    wreg     unsigned char 
 14700 ;; Auto vars:     Size  Location     Type
 14701 ;;  lights          1   70[BANK0 ] unsigned char 
 14702 ;;  clear           1   69[BANK0 ] unsigned char 
 14703 ;; Return value:  Size  Location     Type
 14704 ;;		None               void
 14705 ;; Registers used:
 14706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14707 ;; Tracked objects:
 14708 ;;		On entry : 0/0
 14709 ;;		On exit  : 0/0
 14710 ;;		Unchanged: 0/0
 14711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;Total ram usage:        2 bytes
 14717 ;; Hardware stack levels used:    1
 14718 ;; Hardware stack levels required when called:    9
 14719 ;; This function calls:
 14720 ;;		_DimmerLightsPointSelect
 14721 ;;		_setBuz
 14722 ;;		_setDimmerLights
 14723 ;;		_setDimmerLights_Adj
 14724 ;; This function is called by:
 14725 ;;		_DimmerLights_Main
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _setDimmerLights_Main
 14731  1624                     _setDimmerLights_Main:	
 14732                           
 14733                           ;incstack = 0
 14734                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14735                           ;setDimmerLights_Main@lights stored from wreg
 14736  1624  0020               	movlb	0	; select bank0
 14737  1625  00E6               	movwf	setDimmerLights_Main@lights
 14738                           
 14739                           ;Dimmer_B1.c: 133: char clear=1;
 14740  1626  01E5               	clrf	setDimmerLights_Main@clear
 14741  1627  0AE5               	incf	setDimmerLights_Main@clear,f
 14742                           
 14743                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 14744  1628  0866               	movf	setDimmerLights_Main@lights,w
 14745  1629  31A6  264C  3196   	fcall	_DimmerLightsPointSelect
 14746                           
 14747                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 14748  162C  0020               	movlb	0	; select bank0
 14749  162D  086C               	movf	_DimmerLights,w
 14750  162E  3E09               	addlw	9
 14751  162F  0086               	movwf	6
 14752  1630  3001               	movlw	1	; select bank2/3
 14753  1631  0087               	movwf	7
 14754  1632  1C81               	btfss	1,1
 14755  1633  2E63               	goto	l8680
 14756                           
 14757                           ;Dimmer_B1.c: 163: {
 14758                           ;Dimmer_B1.c: 164: if(clear)
 14759  1634  0865               	movf	setDimmerLights_Main@clear,w
 14760  1635  1903               	btfsc	3,2
 14761  1636  0008               	return
 14762                           
 14763                           ;Dimmer_B1.c: 165: {
 14764                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 14765  1637  086C               	movf	_DimmerLights,w
 14766  1638  3E09               	addlw	9
 14767  1639  0086               	movwf	6
 14768  163A  3001               	movlw	1	; select bank2/3
 14769  163B  0087               	movwf	7
 14770  163C  1C01               	btfss	1,0
 14771  163D  2E51               	goto	l8674
 14772                           
 14773                           ;Dimmer_B1.c: 167: {
 14774                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 14775  163E  086C               	movf	_DimmerLights,w
 14776  163F  3E09               	addlw	9
 14777  1640  0086               	movwf	6
 14778  1641  3001               	movlw	1	; select bank2/3
 14779  1642  0087               	movwf	7
 14780  1643  1081               	bcf	1,1
 14781                           
 14782                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 14783  1644  01A4               	clrf	setDimmerLights@status
 14784  1645  0AA4               	incf	setDimmerLights@status,f
 14785  1646  0866               	movf	setDimmerLights_Main@lights,w
 14786  1647  3189  21D7         	fcall	_setDimmerLights
 14787                           
 14788                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 14789  1649  0020               	movlb	0	; select bank0
 14790  164A  086C               	movf	_DimmerLights,w
 14791  164B  3E0C               	addlw	12
 14792  164C  0086               	movwf	6
 14793  164D  3001               	movlw	1	; select bank2/3
 14794  164E  0087               	movwf	7
 14795  164F  1001               	bcf	1,0
 14796                           
 14797                           ;Dimmer_B1.c: 174: }
 14798  1650  0008               	return
 14799  1651                     l8674:	
 14800                           
 14801                           ;Dimmer_B1.c: 175: else
 14802                           ;Dimmer_B1.c: 176: {
 14803                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 14804  1651  086C               	movf	_DimmerLights,w
 14805  1652  3E09               	addlw	9
 14806  1653  0086               	movwf	6
 14807  1654  3001               	movlw	1	; select bank2/3
 14808  1655  0087               	movwf	7
 14809  1656  1081               	bcf	1,1
 14810                           
 14811                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 14812  1657  01A4               	clrf	setDimmerLights@status
 14813  1658  0866               	movf	setDimmerLights_Main@lights,w
 14814  1659  3189  21D7         	fcall	_setDimmerLights
 14815                           
 14816                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 14817  165B  0020               	movlb	0	; select bank0
 14818  165C  086C               	movf	_DimmerLights,w
 14819  165D  3E0C               	addlw	12
 14820  165E  0086               	movwf	6
 14821  165F  3001               	movlw	1	; select bank2/3
 14822  1660  0087               	movwf	7
 14823  1661  1001               	bcf	1,0
 14824                           
 14825                           ;Dimmer_B1.c: 183: }
 14826                           ;Dimmer_B1.c: 184: }
 14827                           ;Dimmer_B1.c: 185: }
 14828  1662  0008               	return
 14829  1663                     l8680:	
 14830                           
 14831                           ;Dimmer_B1.c: 186: else
 14832                           ;Dimmer_B1.c: 187: {
 14833                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 14834  1663  086C               	movf	_DimmerLights,w
 14835  1664  3E09               	addlw	9
 14836  1665  0086               	movwf	6
 14837  1666  3001               	movlw	1	; select bank2/3
 14838  1667  0087               	movwf	7
 14839  1668  1D81               	btfss	1,3
 14840  1669  0008               	return
 14841                           
 14842                           ;Dimmer_B1.c: 189: {
 14843                           ;Dimmer_B1.c: 190: if(clear)
 14844  166A  0865               	movf	setDimmerLights_Main@clear,w
 14845  166B  1903               	btfsc	3,2
 14846  166C  0008               	return
 14847                           
 14848                           ;Dimmer_B1.c: 191: {
 14849                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 14850  166D  0866               	movf	setDimmerLights_Main@lights,w
 14851  166E  31A6  264C  3196   	fcall	_DimmerLightsPointSelect
 14852                           
 14853                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 14854  1671  0020               	movlb	0	; select bank0
 14855  1672  086C               	movf	_DimmerLights,w
 14856  1673  3E09               	addlw	9
 14857  1674  0086               	movwf	6
 14858  1675  3001               	movlw	1	; select bank2/3
 14859  1676  0087               	movwf	7
 14860  1677  1181               	bcf	1,3
 14861                           
 14862                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 14863  1678  086C               	movf	_DimmerLights,w
 14864  1679  3E09               	addlw	9
 14865  167A  0086               	movwf	6
 14866  167B  3001               	movlw	1	; select bank2/3
 14867  167C  0087               	movwf	7
 14868  167D  1D01               	btfss	1,2
 14869  167E  2E8F               	goto	l8692
 14870                           
 14871                           ;Dimmer_B1.c: 195: {
 14872                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 14873  167F  01E2               	clrf	setDimmerLights_Adj@status
 14874  1680  0AE2               	incf	setDimmerLights_Adj@status,f
 14875  1681  0866               	movf	setDimmerLights_Main@lights,w
 14876  1682  319E  265B  3196   	fcall	_setDimmerLights_Adj
 14877                           
 14878                           ;Dimmer_B1.c: 197: setBuz(1,100);
 14879  1685  3064               	movlw	100
 14880  1686  0020               	movlb	0	; select bank0
 14881  1687  00A6               	movwf	setBuz@time
 14882  1688  3000               	movlw	0
 14883  1689  00A7               	movwf	setBuz@time+1
 14884  168A  3001               	movlw	1
 14885  168B  3196  2696         	fcall	_setBuz
 14886                           
 14887                           ;Dimmer_B1.c: 198: }
 14888  168D  0020               	movlb	0	; select bank0
 14889  168E  0008               	return
 14890  168F                     l8692:	
 14891                           
 14892                           ;Dimmer_B1.c: 199: else
 14893                           ;Dimmer_B1.c: 200: {
 14894                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 14895  168F  0020               	movlb	0	; select bank0
 14896  1690  01E2               	clrf	setDimmerLights_Adj@status
 14897  1691  0866               	movf	setDimmerLights_Main@lights,w
 14898  1692  319E  265B         	fcall	_setDimmerLights_Adj
 14899  1694  0020               	movlb	0	; select bank0
 14900  1695  0008               	return
 14901  1696                     __end_of_setDimmerLights_Main:	
 14902                           
 14903                           	psect	text89
 14904  1E5B                     __ptext89:	
 14905 ;; *************** function _setDimmerLights_Adj *****************
 14906 ;; Defined at:
 14907 ;;		line 388 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;  lights          1    wreg     unsigned char 
 14910 ;;  status          1   66[BANK0 ] unsigned char 
 14911 ;; Auto vars:     Size  Location     Type
 14912 ;;  lights          1   68[BANK0 ] unsigned char 
 14913 ;; Return value:  Size  Location     Type
 14914 ;;		None               void
 14915 ;; Registers used:
 14916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14922 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;Total ram usage:        3 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; Hardware stack levels required when called:    8
 14929 ;; This function calls:
 14930 ;;		_DimmerLightsPointSelect
 14931 ;;		_setLoad_StatusOff
 14932 ;;		_setRF_DimmerLights
 14933 ;;		_setTxData
 14934 ;; This function is called by:
 14935 ;;		_setDimmerLights_Main
 14936 ;; This function uses a non-reentrant model
 14937 ;;
 14938                           
 14939                           
 14940                           ;psect for function _setDimmerLights_Adj
 14941  1E5B                     _setDimmerLights_Adj:	
 14942                           
 14943                           ;incstack = 0
 14944                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14945                           ;setDimmerLights_Adj@lights stored from wreg
 14946  1E5B  0020               	movlb	0	; select bank0
 14947  1E5C  00E4               	movwf	setDimmerLights_Adj@lights
 14948                           
 14949                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 14950  1E5D  0864               	movf	setDimmerLights_Adj@lights,w
 14951  1E5E  31A6  264C  319E   	fcall	_DimmerLightsPointSelect
 14952                           
 14953                           ;Dimmer_B1.c: 391: if(status)
 14954  1E61  0020               	movlb	0	; select bank0
 14955  1E62  0862               	movf	setDimmerLights_Adj@status,w
 14956  1E63  1903               	btfsc	3,2
 14957  1E64  2E70               	goto	l8394
 14958                           
 14959                           ;Dimmer_B1.c: 392: {
 14960                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 14961  1E65  086C               	movf	_DimmerLights,w
 14962  1E66  0086               	movwf	6
 14963  1E67  3001               	movlw	1	; select bank2/3
 14964  1E68  0087               	movwf	7
 14965  1E69  1581               	bsf	1,3
 14966                           
 14967                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 14968  1E6A  086C               	movf	_DimmerLights,w
 14969  1E6B  0086               	movwf	6
 14970  1E6C  3001               	movlw	1	; select bank2/3
 14971  1E6D  0087               	movwf	7
 14972  1E6E  1481               	bsf	1,1
 14973                           
 14974                           ;Dimmer_B1.c: 395: }
 14975  1E6F  0008               	return
 14976  1E70                     l8394:	
 14977                           
 14978                           ;Dimmer_B1.c: 396: else
 14979                           ;Dimmer_B1.c: 397: {
 14980                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 14981  1E70  086C               	movf	_DimmerLights,w
 14982  1E71  0086               	movwf	6
 14983  1E72  3001               	movlw	1	; select bank2/3
 14984  1E73  0087               	movwf	7
 14985  1E74  1D81               	btfss	1,3
 14986  1E75  0008               	return
 14987                           
 14988                           ;Dimmer_B1.c: 399: {
 14989                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 14990  1E76  086C               	movf	_DimmerLights,w
 14991  1E77  0086               	movwf	6
 14992  1E78  3001               	movlw	1	; select bank2/3
 14993  1E79  0087               	movwf	7
 14994  1E7A  1081               	bcf	1,1
 14995                           
 14996                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 14997  1E7B  086C               	movf	_DimmerLights,w
 14998  1E7C  0086               	movwf	6
 14999  1E7D  3001               	movlw	1	; select bank2/3
 15000  1E7E  0087               	movwf	7
 15001  1E7F  1181               	bcf	1,3
 15002                           
 15003                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15004  1E80  01A0               	clrf	setLoad_StatusOff@command
 15005  1E81  0AA0               	incf	setLoad_StatusOff@command,f
 15006  1E82  3000               	movlw	0
 15007  1E83  319C  248E  319E   	fcall	_setLoad_StatusOff
 15008                           
 15009                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15010  1E86  0020               	movlb	0	; select bank0
 15011  1E87  086C               	movf	_DimmerLights,w
 15012  1E88  3E04               	addlw	4
 15013  1E89  0086               	movwf	6
 15014  1E8A  3001               	movlw	1	; select bank2/3
 15015  1E8B  0087               	movwf	7
 15016  1E8C  0801               	movf	1,w
 15017  1E8D  00E3               	movwf	??_setDimmerLights_Adj
 15018  1E8E  086C               	movf	_DimmerLights,w
 15019  1E8F  3E05               	addlw	5
 15020  1E90  0086               	movwf	6
 15021  1E91  3001               	movlw	1	; select bank2/3
 15022  1E92  0087               	movwf	7
 15023  1E93  0863               	movf	??_setDimmerLights_Adj,w
 15024  1E94  0081               	movwf	1
 15025                           
 15026                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15027  1E95  01DD               	clrf	setRF_DimmerLights@on
 15028  1E96  0ADD               	incf	setRF_DimmerLights@on,f
 15029  1E97  0864               	movf	setDimmerLights_Adj@lights,w
 15030  1E98  3193  2390  319E   	fcall	_setRF_DimmerLights
 15031                           
 15032                           ;Dimmer_B1.c: 412: setTxData(1);
 15033  1E9B  3001               	movlw	1
 15034  1E9C  3187  271E         	fcall	_setTxData
 15035  1E9E  0008               	return
 15036  1E9F                     __end_of_setDimmerLights_Adj:	
 15037                           
 15038                           	psect	text90
 15039  1C8E                     __ptext90:	
 15040 ;; *************** function _setLoad_StatusOff *****************
 15041 ;; Defined at:
 15042 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15043 ;; Parameters:    Size  Location     Type
 15044 ;;  lights          1    wreg     unsigned char 
 15045 ;;  command         1    0[BANK0 ] unsigned char 
 15046 ;; Auto vars:     Size  Location     Type
 15047 ;;  lights          1    1[BANK0 ] unsigned char 
 15048 ;; Return value:  Size  Location     Type
 15049 ;;		None               void
 15050 ;; Registers used:
 15051 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15052 ;; Tracked objects:
 15053 ;;		On entry : 0/0
 15054 ;;		On exit  : 0/0
 15055 ;;		Unchanged: 0/0
 15056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15057 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;Total ram usage:        2 bytes
 15062 ;; Hardware stack levels used:    1
 15063 ;; Hardware stack levels required when called:    4
 15064 ;; This function calls:
 15065 ;;		Nothing
 15066 ;; This function is called by:
 15067 ;;		_setDimmerLights_ERROR
 15068 ;;		_setDimmerLights_Adj
 15069 ;; This function uses a non-reentrant model
 15070 ;;
 15071                           
 15072                           
 15073                           ;psect for function _setLoad_StatusOff
 15074  1C8E                     _setLoad_StatusOff:	
 15075                           
 15076                           ;incstack = 0
 15077                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15078                           ;setLoad_StatusOff@lights stored from wreg
 15079  1C8E  0020               	movlb	0	; select bank0
 15080  1C8F  00A1               	movwf	setLoad_StatusOff@lights
 15081                           
 15082                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 15083  1C90  086E               	movf	_Load,w
 15084  1C91  3E46               	addlw	70
 15085  1C92  0086               	movwf	6
 15086  1C93  3002               	movlw	2	; select bank4/5
 15087  1C94  0087               	movwf	7
 15088  1C95  0820               	movf	setLoad_StatusOff@command,w
 15089  1C96  1081               	bcf	1,1
 15090  1C97  1D03               	skipz
 15091  1C98  1481               	bsf	1,1
 15092                           
 15093                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 15094  1C99  086E               	movf	_Load,w
 15095  1C9A  3E42               	addlw	66
 15096  1C9B  0086               	movwf	6
 15097  1C9C  3002               	movlw	2	; select bank4/5
 15098  1C9D  0087               	movwf	7
 15099  1C9E  3002               	movlw	2
 15100  1C9F  0281               	subwf	1,f
 15101                           
 15102                           ;OverLoad_B1.c: 287: if (lights == 1) {
 15103  1CA0  0821               	movf	setLoad_StatusOff@lights,w
 15104  1CA1  3A01               	xorlw	1
 15105  1CA2  1D03               	skipz
 15106  1CA3  2CAA               	goto	l8054
 15107                           
 15108                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 15109  1CA4  086E               	movf	_Load,w
 15110  1CA5  3E43               	addlw	67
 15111  1CA6  0086               	movwf	6
 15112  1CA7  3002               	movlw	2	; select bank4/5
 15113  1CA8  0087               	movwf	7
 15114  1CA9  0181               	clrf	1
 15115  1CAA                     l8054:	
 15116                           
 15117                           ;OverLoad_B1.c: 289: }
 15118                           ;OverLoad_B1.c: 290: if (lights == 2) {
 15119  1CAA  0821               	movf	setLoad_StatusOff@lights,w
 15120  1CAB  3A02               	xorlw	2
 15121  1CAC  1D03               	skipz
 15122  1CAD  2CB4               	goto	l8058
 15123                           
 15124                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 15125  1CAE  086E               	movf	_Load,w
 15126  1CAF  3E44               	addlw	68
 15127  1CB0  0086               	movwf	6
 15128  1CB1  3002               	movlw	2	; select bank4/5
 15129  1CB2  0087               	movwf	7
 15130  1CB3  0181               	clrf	1
 15131  1CB4                     l8058:	
 15132                           
 15133                           ;OverLoad_B1.c: 292: }
 15134                           ;OverLoad_B1.c: 293: if (lights == 3) {
 15135  1CB4  0821               	movf	setLoad_StatusOff@lights,w
 15136  1CB5  3A03               	xorlw	3
 15137  1CB6  1D03               	skipz
 15138  1CB7  0008               	return
 15139                           
 15140                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 15141  1CB8  086E               	movf	_Load,w
 15142  1CB9  3E45               	addlw	69
 15143  1CBA  0086               	movwf	6
 15144  1CBB  3002               	movlw	2	; select bank4/5
 15145  1CBC  0087               	movwf	7
 15146  1CBD  0181               	clrf	1
 15147  1CBE  0008               	return
 15148  1CBF                     __end_of_setLoad_StatusOff:	
 15149                           
 15150                           	psect	text91
 15151  09D7                     __ptext91:	
 15152 ;; *************** function _setDimmerLights *****************
 15153 ;; Defined at:
 15154 ;;		line 330 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15155 ;; Parameters:    Size  Location     Type
 15156 ;;  lights          1    wreg     unsigned char 
 15157 ;;  status          1    4[BANK0 ] unsigned char 
 15158 ;; Auto vars:     Size  Location     Type
 15159 ;;  lights          1    6[BANK0 ] unsigned char 
 15160 ;; Return value:  Size  Location     Type
 15161 ;;		None               void
 15162 ;; Registers used:
 15163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15164 ;; Tracked objects:
 15165 ;;		On entry : 0/0
 15166 ;;		On exit  : 0/0
 15167 ;;		Unchanged: 0/0
 15168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15169 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;Total ram usage:        3 bytes
 15174 ;; Hardware stack levels used:    1
 15175 ;; Hardware stack levels required when called:    6
 15176 ;; This function calls:
 15177 ;;		_DimmerLightsPointSelect
 15178 ;;		_setLED
 15179 ;;		_setLoad_Count
 15180 ;;		_setLoad_StatusOn
 15181 ;; This function is called by:
 15182 ;;		_setDimmerLights_Main
 15183 ;;		_setControl_Lights_Table
 15184 ;; This function uses a non-reentrant model
 15185 ;;
 15186                           
 15187                           
 15188                           ;psect for function _setDimmerLights
 15189  09D7                     _setDimmerLights:	
 15190                           
 15191                           ;incstack = 0
 15192                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15193                           ;setDimmerLights@lights stored from wreg
 15194  09D7  0020               	movlb	0	; select bank0
 15195  09D8  00A6               	movwf	setDimmerLights@lights
 15196                           
 15197                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15198  09D9  0826               	movf	setDimmerLights@lights,w
 15199  09DA  31A6  264C  3189   	fcall	_DimmerLightsPointSelect
 15200                           
 15201                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15202  09DD  0020               	movlb	0	; select bank0
 15203  09DE  0826               	movf	setDimmerLights@lights,w
 15204  09DF  00A5               	movwf	??_setDimmerLights
 15205  09E0  0021               	movlb	1	; select bank1
 15206  09E1  0A39               	incf	_Dimmer^(0+128),w
 15207  09E2  0086               	movwf	6
 15208  09E3  0187               	clrf	7
 15209  09E4  0020               	movlb	0	; select bank0
 15210  09E5  0825               	movf	??_setDimmerLights,w
 15211  09E6  0081               	movwf	1
 15212                           
 15213                           ;Dimmer_B1.c: 334: if(status)
 15214  09E7  0824               	movf	setDimmerLights@status,w
 15215  09E8  1903               	btfsc	3,2
 15216  09E9  2A41               	goto	l8160
 15217                           
 15218                           ;Dimmer_B1.c: 335: {
 15219                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15220  09EA  086C               	movf	_DimmerLights,w
 15221  09EB  0086               	movwf	6
 15222  09EC  3001               	movlw	1	; select bank2/3
 15223  09ED  0087               	movwf	7
 15224  09EE  1681               	bsf	1,5
 15225                           
 15226                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15227  09EF  01A2               	clrf	setLED@command
 15228  09F0  0826               	movf	setDimmerLights@lights,w
 15229  09F1  3192  226D  3189   	fcall	_setLED
 15230                           
 15231                           ;Dimmer_B1.c: 338: RC7=!0;
 15232  09F4  0020               	movlb	0	; select bank0
 15233  09F5  178E               	bsf	14,7	;volatile
 15234                           
 15235                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15236  09F6  3000               	movlw	0
 15237  09F7  3198  20B8  3189   	fcall	_setLoad_Count
 15238                           
 15239                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15240  09FA  0020               	movlb	0	; select bank0
 15241  09FB  086C               	movf	_DimmerLights,w
 15242  09FC  0086               	movwf	6
 15243  09FD  3001               	movlw	1	; select bank2/3
 15244  09FE  0087               	movwf	7
 15245  09FF  1481               	bsf	1,1
 15246                           
 15247                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15248  0A00  3003               	movlw	3
 15249  0A01  00A5               	movwf	??_setDimmerLights
 15250  0A02  086C               	movf	_DimmerLights,w
 15251  0A03  3E02               	addlw	2
 15252  0A04  0086               	movwf	6
 15253  0A05  3001               	movlw	1	; select bank2/3
 15254  0A06  0087               	movwf	7
 15255  0A07  0825               	movf	??_setDimmerLights,w
 15256  0A08  0081               	movwf	1
 15257                           
 15258                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15259  0A09  086C               	movf	_DimmerLights,w
 15260  0A0A  0086               	movwf	6
 15261  0A0B  3001               	movlw	1	; select bank2/3
 15262  0A0C  0087               	movwf	7
 15263  0A0D  1B01               	btfsc	1,6
 15264  0A0E  0008               	return
 15265                           
 15266                           ;Dimmer_B1.c: 345: {
 15267                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15268  0A0F  086C               	movf	_DimmerLights,w
 15269  0A10  0086               	movwf	6
 15270  0A11  3001               	movlw	1	; select bank2/3
 15271  0A12  0087               	movwf	7
 15272  0A13  1701               	bsf	1,6
 15273                           
 15274                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15275  0A14  01A0               	clrf	setLoad_StatusOn@command
 15276  0A15  0AA0               	incf	setLoad_StatusOn@command,f
 15277  0A16  0826               	movf	setDimmerLights@lights,w
 15278  0A17  319C  24F0         	fcall	_setLoad_StatusOn
 15279                           
 15280                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15281  0A19  0021               	movlb	1	; select bank1
 15282  0A1A  0867               	movf	_Memory^(0+128),w
 15283  0A1B  3E22               	addlw	34
 15284  0A1C  0086               	movwf	6
 15285  0A1D  3001               	movlw	1	; select bank2/3
 15286  0A1E  0087               	movwf	7
 15287  0A1F  1081               	bcf	1,1
 15288  0A20  0867               	movf	_Memory^(0+128),w
 15289  0A21  3E23               	addlw	35
 15290  0A22  0086               	movwf	6
 15291  0A23  3001               	movlw	1	; select bank2/3
 15292  0A24  0087               	movwf	7
 15293  0A25  3000               	movlw	0
 15294  0A26  3FC0               	movwi [0]fsr1
 15295  0A27  3FC1               	movwi [1]fsr1
 15296                           
 15297                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15298  0A28  0020               	movlb	0	; select bank0
 15299  0A29  086C               	movf	_DimmerLights,w
 15300  0A2A  3E05               	addlw	5
 15301  0A2B  0086               	movwf	6
 15302  0A2C  3001               	movlw	1	; select bank2/3
 15303  0A2D  0087               	movwf	7
 15304  0A2E  0801               	movf	1,w
 15305  0A2F  00A5               	movwf	??_setDimmerLights
 15306  0A30  086C               	movf	_DimmerLights,w
 15307  0A31  3E04               	addlw	4
 15308  0A32  0086               	movwf	6
 15309  0A33  3001               	movlw	1	; select bank2/3
 15310  0A34  0087               	movwf	7
 15311  0A35  0825               	movf	??_setDimmerLights,w
 15312  0A36  0081               	movwf	1
 15313                           
 15314                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15315  0A37  3043               	movlw	67
 15316  0A38  00A5               	movwf	??_setDimmerLights
 15317  0A39  086C               	movf	_DimmerLights,w
 15318  0A3A  3E04               	addlw	4
 15319  0A3B  0086               	movwf	6
 15320  0A3C  3001               	movlw	1	; select bank2/3
 15321  0A3D  0087               	movwf	7
 15322  0A3E  0825               	movf	??_setDimmerLights,w
 15323  0A3F  0081               	movwf	1
 15324                           
 15325                           ;Dimmer_B1.c: 357: }
 15326                           ;Dimmer_B1.c: 358: }
 15327  0A40  0008               	return
 15328  0A41                     l8160:	
 15329                           
 15330                           ;Dimmer_B1.c: 359: else
 15331                           ;Dimmer_B1.c: 360: {
 15332                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15333  0A41  086C               	movf	_DimmerLights,w
 15334  0A42  0086               	movwf	6
 15335  0A43  3001               	movlw	1	; select bank2/3
 15336  0A44  0087               	movwf	7
 15337  0A45  1281               	bcf	1,5
 15338                           
 15339                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15340  0A46  086C               	movf	_DimmerLights,w
 15341  0A47  3E06               	addlw	6
 15342  0A48  0086               	movwf	6
 15343  0A49  3001               	movlw	1	; select bank2/3
 15344  0A4A  0087               	movwf	7
 15345  0A4B  0801               	movf	1,w
 15346  0A4C  00A5               	movwf	??_setDimmerLights
 15347  0A4D  086C               	movf	_DimmerLights,w
 15348  0A4E  3E04               	addlw	4
 15349  0A4F  0086               	movwf	6
 15350  0A50  3001               	movlw	1	; select bank2/3
 15351  0A51  0087               	movwf	7
 15352  0A52  0825               	movf	??_setDimmerLights,w
 15353  0A53  0081               	movwf	1
 15354                           
 15355                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15356  0A54  086C               	movf	_DimmerLights,w
 15357  0A55  0086               	movwf	6
 15358  0A56  3001               	movlw	1	; select bank2/3
 15359  0A57  0087               	movwf	7
 15360  0A58  1481               	bsf	1,1
 15361                           
 15362                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15363  0A59  086C               	movf	_DimmerLights,w
 15364  0A5A  0086               	movwf	6
 15365  0A5B  3001               	movlw	1	; select bank2/3
 15366  0A5C  0087               	movwf	7
 15367  0A5D  1181               	bcf	1,3
 15368                           
 15369                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15370  0A5E  086C               	movf	_DimmerLights,w
 15371  0A5F  0086               	movwf	6
 15372  0A60  3001               	movlw	1	; select bank2/3
 15373  0A61  0087               	movwf	7
 15374  0A62  1201               	bcf	1,4
 15375                           
 15376                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15377  0A63  3003               	movlw	3
 15378  0A64  00A5               	movwf	??_setDimmerLights
 15379  0A65  086C               	movf	_DimmerLights,w
 15380  0A66  3E02               	addlw	2
 15381  0A67  0086               	movwf	6
 15382  0A68  3001               	movlw	1	; select bank2/3
 15383  0A69  0087               	movwf	7
 15384  0A6A  0825               	movf	??_setDimmerLights,w
 15385  0A6B  0081               	movwf	1
 15386  0A6C  0008               	return
 15387  0A6D                     __end_of_setDimmerLights:	
 15388                           
 15389                           	psect	text92
 15390  1CF0                     __ptext92:	
 15391 ;; *************** function _setLoad_StatusOn *****************
 15392 ;; Defined at:
 15393 ;;		line 269 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;  lights          1    wreg     unsigned char 
 15396 ;;  command         1    0[BANK0 ] unsigned char 
 15397 ;; Auto vars:     Size  Location     Type
 15398 ;;  lights          1    1[BANK0 ] unsigned char 
 15399 ;; Return value:  Size  Location     Type
 15400 ;;		None               void
 15401 ;; Registers used:
 15402 ;;		wreg, fsr1l, fsr1h
 15403 ;; Tracked objects:
 15404 ;;		On entry : 0/0
 15405 ;;		On exit  : 0/0
 15406 ;;		Unchanged: 0/0
 15407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15408 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;Total ram usage:        2 bytes
 15413 ;; Hardware stack levels used:    1
 15414 ;; Hardware stack levels required when called:    4
 15415 ;; This function calls:
 15416 ;;		Nothing
 15417 ;; This function is called by:
 15418 ;;		_setDimmerLights
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           
 15423                           ;psect for function _setLoad_StatusOn
 15424  1CF0                     _setLoad_StatusOn:	
 15425                           
 15426                           ;incstack = 0
 15427                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15428                           ;setLoad_StatusOn@lights stored from wreg
 15429  1CF0  0020               	movlb	0	; select bank0
 15430  1CF1  00A1               	movwf	setLoad_StatusOn@lights
 15431                           
 15432                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15433  1CF2  086E               	movf	_Load,w
 15434  1CF3  0086               	movwf	6
 15435  1CF4  3002               	movlw	2	; select bank4/5
 15436  1CF5  0087               	movwf	7
 15437  1CF6  1481               	bsf	1,1
 15438                           
 15439                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15440  1CF7  086E               	movf	_Load,w
 15441  1CF8  3E46               	addlw	70
 15442  1CF9  0086               	movwf	6
 15443  1CFA  3002               	movlw	2	; select bank4/5
 15444  1CFB  0087               	movwf	7
 15445  1CFC  0820               	movf	setLoad_StatusOn@command,w
 15446  1CFD  1001               	bcf	1,0
 15447  1CFE  1D03               	skipz
 15448  1CFF  1401               	bsf	1,0
 15449                           
 15450                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15451  1D00  0821               	movf	setLoad_StatusOn@lights,w
 15452  1D01  3A01               	xorlw	1
 15453  1D02  1D03               	skipz
 15454  1D03  2D0B               	goto	l8118
 15455                           
 15456                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15457  1D04  086E               	movf	_Load,w
 15458  1D05  3E43               	addlw	67
 15459  1D06  0086               	movwf	6
 15460  1D07  3002               	movlw	2	; select bank4/5
 15461  1D08  0087               	movwf	7
 15462  1D09  0181               	clrf	1
 15463  1D0A  0A81               	incf	1,f
 15464  1D0B                     l8118:	
 15465                           
 15466                           ;OverLoad_B1.c: 275: }
 15467                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15468  1D0B  0821               	movf	setLoad_StatusOn@lights,w
 15469  1D0C  3A02               	xorlw	2
 15470  1D0D  1D03               	skipz
 15471  1D0E  2D16               	goto	l8122
 15472                           
 15473                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15474  1D0F  086E               	movf	_Load,w
 15475  1D10  3E44               	addlw	68
 15476  1D11  0086               	movwf	6
 15477  1D12  3002               	movlw	2	; select bank4/5
 15478  1D13  0087               	movwf	7
 15479  1D14  0181               	clrf	1
 15480  1D15  0A81               	incf	1,f
 15481  1D16                     l8122:	
 15482                           
 15483                           ;OverLoad_B1.c: 278: }
 15484                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15485  1D16  0821               	movf	setLoad_StatusOn@lights,w
 15486  1D17  3A03               	xorlw	3
 15487  1D18  1D03               	skipz
 15488  1D19  0008               	return
 15489                           
 15490                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15491  1D1A  086E               	movf	_Load,w
 15492  1D1B  3E45               	addlw	69
 15493  1D1C  0086               	movwf	6
 15494  1D1D  3002               	movlw	2	; select bank4/5
 15495  1D1E  0087               	movwf	7
 15496  1D1F  0181               	clrf	1
 15497  1D20  0A81               	incf	1,f
 15498  1D21  0008               	return
 15499  1D22                     __end_of_setLoad_StatusOn:	
 15500                           
 15501                           	psect	text93
 15502  18B8                     __ptext93:	
 15503 ;; *************** function _setLoad_Count *****************
 15504 ;; Defined at:
 15505 ;;		line 254 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;  command         1    wreg     unsigned char 
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;  command         1    1[BANK0 ] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;		None               void
 15512 ;; Registers used:
 15513 ;;		wreg, fsr1l, fsr1h
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;Total ram usage:        2 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    4
 15526 ;; This function calls:
 15527 ;;		Nothing
 15528 ;; This function is called by:
 15529 ;;		_setDimmerLights
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           
 15534                           ;psect for function _setLoad_Count
 15535  18B8                     _setLoad_Count:	
 15536                           
 15537                           ;incstack = 0
 15538                           ; Regs used in _setLoad_Count: [wregfsr1]
 15539                           ;setLoad_Count@command stored from wreg
 15540  18B8  0020               	movlb	0	; select bank0
 15541  18B9  00A1               	movwf	setLoad_Count@command
 15542                           
 15543                           ;OverLoad_B1.c: 255: Load->Count = command;
 15544  18BA  0821               	movf	setLoad_Count@command,w
 15545  18BB  00A0               	movwf	??_setLoad_Count
 15546  18BC  086E               	movf	_Load,w
 15547  18BD  3E3A               	addlw	58
 15548  18BE  0086               	movwf	6
 15549  18BF  3002               	movlw	2	; select bank4/5
 15550  18C0  0087               	movwf	7
 15551  18C1  0820               	movf	??_setLoad_Count,w
 15552  18C2  0081               	movwf	1
 15553                           
 15554                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15555  18C3  0821               	movf	setLoad_Count@command,w
 15556  18C4  00A0               	movwf	??_setLoad_Count
 15557  18C5  086E               	movf	_Load,w
 15558  18C6  3E42               	addlw	66
 15559  18C7  0086               	movwf	6
 15560  18C8  3002               	movlw	2	; select bank4/5
 15561  18C9  0087               	movwf	7
 15562  18CA  0820               	movf	??_setLoad_Count,w
 15563  18CB  0081               	movwf	1
 15564  18CC  0008               	return
 15565  18CD                     __end_of_setLoad_Count:	
 15566                           
 15567                           	psect	text94
 15568  126D                     __ptext94:	
 15569 ;; *************** function _setLED *****************
 15570 ;; Defined at:
 15571 ;;		line 74 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 15572 ;; Parameters:    Size  Location     Type
 15573 ;;  led             1    wreg     unsigned char 
 15574 ;;  command         1    2[BANK0 ] unsigned char 
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;  led             1    3[BANK0 ] unsigned char 
 15577 ;; Return value:  Size  Location     Type
 15578 ;;		None               void
 15579 ;; Registers used:
 15580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15586 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;Total ram usage:        2 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:    5
 15593 ;; This function calls:
 15594 ;;		_LedPointSelect
 15595 ;; This function is called by:
 15596 ;;		_setDimmerLights_ERROR
 15597 ;;		_setDimmerLights
 15598 ;;		_setLED_Initialization
 15599 ;;		_setLoad_Exceptions
 15600 ;;		_setOverTemp_Exceptions
 15601 ;;		_setPowerFault_Exceptions
 15602 ;;		_setSw_Initialization
 15603 ;; This function uses a non-reentrant model
 15604 ;;
 15605                           
 15606                           
 15607                           ;psect for function _setLED
 15608  126D                     _setLED:	
 15609                           
 15610                           ;incstack = 0
 15611                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15612                           ;setLED@led stored from wreg
 15613  126D  0020               	movlb	0	; select bank0
 15614  126E  00A3               	movwf	setLED@led
 15615                           
 15616                           ;LED_B1.c: 76: LedPointSelect(led);
 15617  126F  0823               	movf	setLED@led,w
 15618  1270  319A  224F  3192   	fcall	_LedPointSelect
 15619                           
 15620                           ;LED_B1.c: 77: if(command == 0)
 15621  1273  0020               	movlb	0	; select bank0
 15622  1274  08A2               	movf	setLED@command,f
 15623  1275  1D03               	skipz
 15624  1276  2A89               	goto	l8078
 15625                           
 15626                           ;LED_B1.c: 78: {
 15627                           ;LED_B1.c: 80: if(led == 1)
 15628  1277  0823               	movf	setLED@led,w
 15629  1278  3A01               	xorlw	1
 15630  1279  1D03               	skipz
 15631  127A  2A7D               	goto	l8070
 15632                           
 15633                           ;LED_B1.c: 81: {
 15634                           ;LED_B1.c: 85: RA3=1;
 15635  127B  158C               	bsf	12,3	;volatile
 15636                           
 15637                           ;LED_B1.c: 87: }
 15638  127C  0008               	return
 15639  127D                     l8070:	
 15640                           
 15641                           ;LED_B1.c: 90: else if(led == 2)
 15642  127D  0823               	movf	setLED@led,w
 15643  127E  3A02               	xorlw	2
 15644  127F  1D03               	skipz
 15645  1280  2A83               	goto	l8074
 15646                           
 15647                           ;LED_B1.c: 91: {
 15648                           ;LED_B1.c: 95: RC7=1;
 15649  1281  178E               	bsf	14,7	;volatile
 15650                           
 15651                           ;LED_B1.c: 97: }
 15652  1282  0008               	return
 15653  1283                     l8074:	
 15654                           
 15655                           ;LED_B1.c: 110: else if(led == 99)
 15656  1283  0823               	movf	setLED@led,w
 15657  1284  3A63               	xorlw	99
 15658  1285  1D03               	skipz
 15659  1286  0008               	return
 15660                           
 15661                           ;LED_B1.c: 111: {
 15662                           ;LED_B1.c: 115: RB5=1;
 15663  1287  168D               	bsf	13,5	;volatile
 15664                           
 15665                           ;LED_B1.c: 117: }
 15666                           ;LED_B1.c: 119: }
 15667  1288  0008               	return
 15668  1289                     l8078:	
 15669                           
 15670                           ;LED_B1.c: 120: else if(command == 1)
 15671  1289  0822               	movf	setLED@command,w
 15672  128A  3A01               	xorlw	1
 15673  128B  1D03               	skipz
 15674  128C  2A9F               	goto	l8092
 15675                           
 15676                           ;LED_B1.c: 121: {
 15677                           ;LED_B1.c: 123: if(led == 1)
 15678  128D  0823               	movf	setLED@led,w
 15679  128E  3A01               	xorlw	1
 15680  128F  1D03               	skipz
 15681  1290  2A93               	goto	l8084
 15682                           
 15683                           ;LED_B1.c: 124: {
 15684                           ;LED_B1.c: 128: RA3=0;
 15685  1291  118C               	bcf	12,3	;volatile
 15686                           
 15687                           ;LED_B1.c: 130: }
 15688  1292  0008               	return
 15689  1293                     l8084:	
 15690                           
 15691                           ;LED_B1.c: 133: else if(led == 2)
 15692  1293  0823               	movf	setLED@led,w
 15693  1294  3A02               	xorlw	2
 15694  1295  1D03               	skipz
 15695  1296  2A99               	goto	l8088
 15696                           
 15697                           ;LED_B1.c: 134: {
 15698                           ;LED_B1.c: 138: RC7=0;
 15699  1297  138E               	bcf	14,7	;volatile
 15700                           
 15701                           ;LED_B1.c: 140: }
 15702  1298  0008               	return
 15703  1299                     l8088:	
 15704                           
 15705                           ;LED_B1.c: 153: else if(led == 99)
 15706  1299  0823               	movf	setLED@led,w
 15707  129A  3A63               	xorlw	99
 15708  129B  1D03               	skipz
 15709  129C  0008               	return
 15710                           
 15711                           ;LED_B1.c: 154: {
 15712                           ;LED_B1.c: 158: RB5=0;
 15713  129D  128D               	bcf	13,5	;volatile
 15714                           
 15715                           ;LED_B1.c: 160: }
 15716                           ;LED_B1.c: 162: }
 15717  129E  0008               	return
 15718  129F                     l8092:	
 15719                           
 15720                           ;LED_B1.c: 163: else if(command == 10)
 15721  129F  0822               	movf	setLED@command,w
 15722  12A0  3A0A               	xorlw	10
 15723  12A1  1D03               	skipz
 15724  12A2  2AC1               	goto	l8108
 15725                           
 15726                           ;LED_B1.c: 164: {
 15727                           ;LED_B1.c: 165: LED->GO=0;
 15728  12A3  0021               	movlb	1	; select bank1
 15729  12A4  083B               	movf	_LED^(0+128),w
 15730  12A5  0086               	movwf	6
 15731  12A6  0187               	clrf	7
 15732  12A7  1081               	bcf	1,1
 15733                           
 15734                           ;LED_B1.c: 166: LED->Time=0;
 15735  12A8  0A3B               	incf	_LED^(0+128),w
 15736  12A9  0086               	movwf	6
 15737  12AA  0187               	clrf	7
 15738  12AB  3000               	movlw	0
 15739  12AC  3FC0               	movwi [0]fsr1
 15740  12AD  3FC1               	movwi [1]fsr1
 15741                           
 15742                           ;LED_B1.c: 168: if(led == 1)
 15743  12AE  0020               	movlb	0	; select bank0
 15744  12AF  0823               	movf	setLED@led,w
 15745  12B0  3A01               	xorlw	1
 15746  12B1  1D03               	skipz
 15747  12B2  2AB5               	goto	l8100
 15748                           
 15749                           ;LED_B1.c: 169: {
 15750                           ;LED_B1.c: 173: RA3=1;
 15751  12B3  158C               	bsf	12,3	;volatile
 15752                           
 15753                           ;LED_B1.c: 175: }
 15754  12B4  0008               	return
 15755  12B5                     l8100:	
 15756                           
 15757                           ;LED_B1.c: 178: else if(led == 2)
 15758  12B5  0823               	movf	setLED@led,w
 15759  12B6  3A02               	xorlw	2
 15760  12B7  1D03               	skipz
 15761  12B8  2ABB               	goto	l8104
 15762                           
 15763                           ;LED_B1.c: 179: {
 15764                           ;LED_B1.c: 183: RC7=1;
 15765  12B9  178E               	bsf	14,7	;volatile
 15766                           
 15767                           ;LED_B1.c: 185: }
 15768  12BA  0008               	return
 15769  12BB                     l8104:	
 15770                           
 15771                           ;LED_B1.c: 198: else if(led == 99)
 15772  12BB  0823               	movf	setLED@led,w
 15773  12BC  3A63               	xorlw	99
 15774  12BD  1D03               	skipz
 15775  12BE  0008               	return
 15776                           
 15777                           ;LED_B1.c: 199: {
 15778                           ;LED_B1.c: 203: RB5=1;
 15779  12BF  168D               	bsf	13,5	;volatile
 15780                           
 15781                           ;LED_B1.c: 205: }
 15782                           ;LED_B1.c: 207: }
 15783  12C0  0008               	return
 15784  12C1                     l8108:	
 15785                           
 15786                           ;LED_B1.c: 208: else if(command == 11)
 15787  12C1  0822               	movf	setLED@command,w
 15788  12C2  3A0B               	xorlw	11
 15789  12C3  1D03               	skipz
 15790  12C4  0008               	return
 15791                           
 15792                           ;LED_B1.c: 209: {
 15793                           ;LED_B1.c: 210: LED->GO=1;
 15794  12C5  0021               	movlb	1	; select bank1
 15795  12C6  083B               	movf	_LED^(0+128),w
 15796  12C7  0086               	movwf	6
 15797  12C8  0187               	clrf	7
 15798  12C9  1481               	bsf	1,1
 15799  12CA  0008               	return
 15800  12CB                     __end_of_setLED:	
 15801                           
 15802                           	psect	text95
 15803  1A4F                     __ptext95:	
 15804 ;; *************** function _LedPointSelect *****************
 15805 ;; Defined at:
 15806 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 15807 ;; Parameters:    Size  Location     Type
 15808 ;;  led             1    wreg     unsigned char 
 15809 ;; Auto vars:     Size  Location     Type
 15810 ;;  led             1    1[BANK0 ] unsigned char 
 15811 ;; Return value:  Size  Location     Type
 15812 ;;		None               void
 15813 ;; Registers used:
 15814 ;;		wreg
 15815 ;; Tracked objects:
 15816 ;;		On entry : 0/0
 15817 ;;		On exit  : 0/0
 15818 ;;		Unchanged: 0/0
 15819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15824 ;;Total ram usage:        2 bytes
 15825 ;; Hardware stack levels used:    1
 15826 ;; Hardware stack levels required when called:    4
 15827 ;; This function calls:
 15828 ;;		Nothing
 15829 ;; This function is called by:
 15830 ;;		_setLED_Initialization
 15831 ;;		_setLED
 15832 ;;		_setLED_Main
 15833 ;; This function uses a non-reentrant model
 15834 ;;
 15835                           
 15836                           
 15837                           ;psect for function _LedPointSelect
 15838  1A4F                     _LedPointSelect:	
 15839                           
 15840                           ;incstack = 0
 15841                           ; Regs used in _LedPointSelect: [wreg]
 15842                           ;LedPointSelect@led stored from wreg
 15843  1A4F  0020               	movlb	0	; select bank0
 15844  1A50  00A1               	movwf	LedPointSelect@led
 15845                           
 15846                           ;LED_B1.c: 10: if(led == 1)
 15847  1A51  0821               	movf	LedPointSelect@led,w
 15848  1A52  3A01               	xorlw	1
 15849  1A53  1D03               	skipz
 15850  1A54  2A5B               	goto	l5942
 15851                           
 15852                           ;LED_B1.c: 11: {
 15853                           ;LED_B1.c: 12: LED=&VarLED1;
 15854  1A55  30D6               	movlw	_VarLED1& (0+255)
 15855  1A56  00A0               	movwf	??_LedPointSelect
 15856  1A57  0820               	movf	??_LedPointSelect,w
 15857  1A58  0021               	movlb	1	; select bank1
 15858  1A59  00BB               	movwf	_LED^(0+128)
 15859                           
 15860                           ;LED_B1.c: 13: }
 15861  1A5A  0008               	return
 15862  1A5B                     l5942:	
 15863                           
 15864                           ;LED_B1.c: 16: else if(led == 2)
 15865  1A5B  0020               	movlb	0	; select bank0
 15866  1A5C  0821               	movf	LedPointSelect@led,w
 15867  1A5D  3A02               	xorlw	2
 15868  1A5E  1D03               	skipz
 15869  1A5F  2A66               	goto	l5946
 15870                           
 15871                           ;LED_B1.c: 17: {
 15872                           ;LED_B1.c: 18: LED=&VarLED2;
 15873  1A60  30DA               	movlw	_VarLED2& (0+255)
 15874  1A61  00A0               	movwf	??_LedPointSelect
 15875  1A62  0820               	movf	??_LedPointSelect,w
 15876  1A63  0021               	movlb	1	; select bank1
 15877  1A64  00BB               	movwf	_LED^(0+128)
 15878                           
 15879                           ;LED_B1.c: 19: }
 15880  1A65  0008               	return
 15881  1A66                     l5946:	
 15882                           
 15883                           ;LED_B1.c: 28: else if(led == 99)
 15884  1A66  0020               	movlb	0	; select bank0
 15885  1A67  0821               	movf	LedPointSelect@led,w
 15886  1A68  3A63               	xorlw	99
 15887  1A69  1D03               	skipz
 15888  1A6A  0008               	return
 15889                           
 15890                           ;LED_B1.c: 29: {
 15891                           ;LED_B1.c: 30: LED=&VarErrLED;
 15892  1A6B  30D2               	movlw	_VarErrLED& (0+255)
 15893  1A6C  00A0               	movwf	??_LedPointSelect
 15894  1A6D  0820               	movf	??_LedPointSelect,w
 15895  1A6E  0021               	movlb	1	; select bank1
 15896  1A6F  00BB               	movwf	_LED^(0+128)
 15897  1A70  0008               	return
 15898  1A71                     __end_of_LedPointSelect:	
 15899                           
 15900                           	psect	text96
 15901  1946                     __ptext96:	
 15902 ;; *************** function _DimmerLights_Close *****************
 15903 ;; Defined at:
 15904 ;;		line 101 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15905 ;; Parameters:    Size  Location     Type
 15906 ;;		None
 15907 ;; Auto vars:     Size  Location     Type
 15908 ;;		None
 15909 ;; Return value:  Size  Location     Type
 15910 ;;		None               void
 15911 ;; Registers used:
 15912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15913 ;; Tracked objects:
 15914 ;;		On entry : 0/0
 15915 ;;		On exit  : 0/0
 15916 ;;		Unchanged: 0/0
 15917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;Total ram usage:        0 bytes
 15923 ;; Hardware stack levels used:    1
 15924 ;; Hardware stack levels required when called:    5
 15925 ;; This function calls:
 15926 ;;		_getDimmerLights_StatusFlag
 15927 ;;		_setLoad_GO
 15928 ;; This function is called by:
 15929 ;;		_DimmerLights_Main
 15930 ;; This function uses a non-reentrant model
 15931 ;;
 15932                           
 15933                           
 15934                           ;psect for function _DimmerLights_Close
 15935  1946                     _DimmerLights_Close:	
 15936                           
 15937                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 15938                           
 15939                           ;incstack = 0
 15940                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15941  1946  0021               	movlb	1	; select bank1
 15942  1947  0839               	movf	_Dimmer^(0+128),w
 15943  1948  0086               	movwf	6
 15944  1949  0187               	clrf	7
 15945  194A  1C01               	btfss	1,0
 15946  194B  0008               	return
 15947                           
 15948                           ;Dimmer_B1.c: 104: {
 15949                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 15950  194C  0839               	movf	_Dimmer^(0+128),w
 15951  194D  0086               	movwf	6
 15952  194E  0187               	clrf	7
 15953  194F  1001               	bcf	1,0
 15954                           
 15955                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 15956  1950  31A6  26E1  3199   	fcall	_getDimmerLights_StatusFlag
 15957  1953  3800               	iorlw	0
 15958  1954  1D03               	skipz
 15959  1955  0008               	return
 15960                           
 15961                           ;Dimmer_B1.c: 107: {
 15962                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 15963  1956  3000               	movlw	0
 15964  1957  31A6  266D         	fcall	_setLoad_GO
 15965                           
 15966                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 15967  1959  0021               	movlb	1	; select bank1
 15968  195A  0867               	movf	_Memory^(0+128),w
 15969  195B  3E22               	addlw	34
 15970  195C  0086               	movwf	6
 15971  195D  3001               	movlw	1	; select bank2/3
 15972  195E  0087               	movwf	7
 15973  195F  1481               	bsf	1,1
 15974  1960  0008               	return
 15975  1961                     __end_of_DimmerLights_Close:	
 15976                           
 15977                           	psect	text97
 15978  266D                     __ptext97:	
 15979 ;; *************** function _setLoad_GO *****************
 15980 ;; Defined at:
 15981 ;;		line 265 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15982 ;; Parameters:    Size  Location     Type
 15983 ;;  command         1    wreg     unsigned char 
 15984 ;; Auto vars:     Size  Location     Type
 15985 ;;  command         1    0[BANK0 ] unsigned char 
 15986 ;; Return value:  Size  Location     Type
 15987 ;;		None               void
 15988 ;; Registers used:
 15989 ;;		wreg, fsr1l, fsr1h
 15990 ;; Tracked objects:
 15991 ;;		On entry : 0/0
 15992 ;;		On exit  : 0/0
 15993 ;;		Unchanged: 0/0
 15994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;Total ram usage:        1 bytes
 16000 ;; Hardware stack levels used:    1
 16001 ;; Hardware stack levels required when called:    4
 16002 ;; This function calls:
 16003 ;;		Nothing
 16004 ;; This function is called by:
 16005 ;;		_DimmerLights_Close
 16006 ;; This function uses a non-reentrant model
 16007 ;;
 16008                           
 16009                           
 16010                           ;psect for function _setLoad_GO
 16011  266D                     _setLoad_GO:	
 16012                           
 16013                           ;incstack = 0
 16014                           ; Regs used in _setLoad_GO: [wregfsr1]
 16015                           ;setLoad_GO@command stored from wreg
 16016  266D  0020               	movlb	0	; select bank0
 16017  266E  00A0               	movwf	setLoad_GO@command
 16018                           
 16019                           ;OverLoad_B1.c: 266: Load->GO = command;
 16020  266F  086E               	movf	_Load,w
 16021  2670  0086               	movwf	6
 16022  2671  3002               	movlw	2	; select bank4/5
 16023  2672  0087               	movwf	7
 16024  2673  0820               	movf	setLoad_GO@command,w
 16025  2674  1081               	bcf	1,1
 16026  2675  1D03               	skipz
 16027  2676  1481               	bsf	1,1
 16028  2677  0008               	return
 16029  2678                     __end_of_setLoad_GO:	
 16030                           
 16031                           	psect	text98
 16032  26E1                     __ptext98:	
 16033 ;; *************** function _getDimmerLights_StatusFlag *****************
 16034 ;; Defined at:
 16035 ;;		line 208 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16036 ;; Parameters:    Size  Location     Type
 16037 ;;		None
 16038 ;; Auto vars:     Size  Location     Type
 16039 ;;  Status          1    0[BANK0 ] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  1    wreg      unsigned char 
 16042 ;; Registers used:
 16043 ;;		wreg, fsr1l, fsr1h, status,2
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16052 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16053 ;;Total ram usage:        1 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    4
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_DimmerLights_Close
 16060 ;;		_DimmerLights_Exceptions
 16061 ;; This function uses a non-reentrant model
 16062 ;;
 16063                           
 16064                           
 16065                           ;psect for function _getDimmerLights_StatusFlag
 16066  26E1                     _getDimmerLights_StatusFlag:	
 16067                           
 16068                           ;Dimmer_B1.c: 210: char Status=0;
 16069                           
 16070                           ;incstack = 0
 16071                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16072  26E1  0020               	movlb	0	; select bank0
 16073  26E2  01A0               	clrf	getDimmerLights_StatusFlag@Status
 16074                           
 16075                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16076  26E3  0878               	movf	_DimmerLights11,w
 16077  26E4  0086               	movwf	6
 16078  26E5  3001               	movlw	1	; select bank2/3
 16079  26E6  0087               	movwf	7
 16080  26E7  3000               	movlw	0
 16081  26E8  1B01               	btfsc	1,6
 16082  26E9  3001               	movlw	1
 16083  26EA  00A0               	movwf	getDimmerLights_StatusFlag@Status
 16084                           
 16085                           ;Dimmer_B1.c: 224: return Status;
 16086  26EB  0820               	movf	getDimmerLights_StatusFlag@Status,w
 16087  26EC  0008               	return
 16088  26ED                     __end_of_getDimmerLights_StatusFlag:	
 16089                           
 16090                           	psect	text99
 16091  26D5                     __ptext99:	
 16092 ;; *************** function _DimmerLights_Initialization *****************
 16093 ;; Defined at:
 16094 ;;		line 41 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16095 ;; Parameters:    Size  Location     Type
 16096 ;;		None
 16097 ;; Auto vars:     Size  Location     Type
 16098 ;;		None
 16099 ;; Return value:  Size  Location     Type
 16100 ;;		None               void
 16101 ;; Registers used:
 16102 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16103 ;; Tracked objects:
 16104 ;;		On entry : 0/0
 16105 ;;		On exit  : 0/0
 16106 ;;		Unchanged: 0/0
 16107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;Total ram usage:        1 bytes
 16113 ;; Hardware stack levels used:    1
 16114 ;; Hardware stack levels required when called:    6
 16115 ;; This function calls:
 16116 ;;		_Dimmer_Initialization
 16117 ;;		_setDimmerLights_Initialization
 16118 ;; This function is called by:
 16119 ;;		_main
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           
 16124                           ;psect for function _DimmerLights_Initialization
 16125  26D5                     _DimmerLights_Initialization:	
 16126                           
 16127                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16131  26D5  3031               	movlw	_DimmerLights1& (0+255)
 16132  26D6  0020               	movlb	0	; select bank0
 16133  26D7  00A4               	movwf	??_DimmerLights_Initialization
 16134  26D8  0824               	movf	??_DimmerLights_Initialization,w
 16135  26D9  00F8               	movwf	_DimmerLights11
 16136                           
 16137                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16138  26DA  3001               	movlw	1
 16139  26DB  319B  23D2  31A6   	fcall	_setDimmerLights_Initialization
 16140                           
 16141                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16142  26DE  31A5  25EF         	fcall	_Dimmer_Initialization
 16143  26E0  0008               	return
 16144  26E1                     __end_of_DimmerLights_Initialization:	
 16145                           
 16146                           	psect	text100
 16147  1BD2                     __ptext100:	
 16148 ;; *************** function _setDimmerLights_Initialization *****************
 16149 ;; Defined at:
 16150 ;;		line 63 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16151 ;; Parameters:    Size  Location     Type
 16152 ;;  lights          1    wreg     unsigned char 
 16153 ;; Auto vars:     Size  Location     Type
 16154 ;;  lights          1    3[BANK0 ] unsigned char 
 16155 ;; Return value:  Size  Location     Type
 16156 ;;		None               void
 16157 ;; Registers used:
 16158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16159 ;; Tracked objects:
 16160 ;;		On entry : 0/0
 16161 ;;		On exit  : 0/0
 16162 ;;		Unchanged: 0/0
 16163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;Total ram usage:        2 bytes
 16169 ;; Hardware stack levels used:    1
 16170 ;; Hardware stack levels required when called:    5
 16171 ;; This function calls:
 16172 ;;		_DimmerLightsPointSelect
 16173 ;; This function is called by:
 16174 ;;		_DimmerLights_Initialization
 16175 ;; This function uses a non-reentrant model
 16176 ;;
 16177                           
 16178                           
 16179                           ;psect for function _setDimmerLights_Initialization
 16180  1BD2                     _setDimmerLights_Initialization:	
 16181                           
 16182                           ;incstack = 0
 16183                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16184                           ;setDimmerLights_Initialization@lights stored from wreg
 16185  1BD2  0020               	movlb	0	; select bank0
 16186  1BD3  00A3               	movwf	setDimmerLights_Initialization@lights
 16187                           
 16188                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16189  1BD4  0823               	movf	setDimmerLights_Initialization@lights,w
 16190  1BD5  31A6  264C         	fcall	_DimmerLightsPointSelect
 16191                           
 16192                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16193  1BD7  0020               	movlb	0	; select bank0
 16194  1BD8  086C               	movf	_DimmerLights,w
 16195  1BD9  3E0C               	addlw	12
 16196  1BDA  0086               	movwf	6
 16197  1BDB  3001               	movlw	1	; select bank2/3
 16198  1BDC  0087               	movwf	7
 16199  1BDD  1401               	bsf	1,0
 16200                           
 16201                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16202  1BDE  3043               	movlw	67
 16203  1BDF  00A2               	movwf	??_setDimmerLights_Initialization
 16204  1BE0  086C               	movf	_DimmerLights,w
 16205  1BE1  3E05               	addlw	5
 16206  1BE2  0086               	movwf	6
 16207  1BE3  3001               	movlw	1	; select bank2/3
 16208  1BE4  0087               	movwf	7
 16209  1BE5  0822               	movf	??_setDimmerLights_Initialization,w
 16210  1BE6  0081               	movwf	1
 16211                           
 16212                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16213  1BE7  3078               	movlw	120
 16214  1BE8  00A2               	movwf	??_setDimmerLights_Initialization
 16215  1BE9  086C               	movf	_DimmerLights,w
 16216  1BEA  3E06               	addlw	6
 16217  1BEB  0086               	movwf	6
 16218  1BEC  3001               	movlw	1	; select bank2/3
 16219  1BED  0087               	movwf	7
 16220  1BEE  0822               	movf	??_setDimmerLights_Initialization,w
 16221  1BEF  0081               	movwf	1
 16222                           
 16223                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16224  1BF0  086C               	movf	_DimmerLights,w
 16225  1BF1  3E06               	addlw	6
 16226  1BF2  0086               	movwf	6
 16227  1BF3  3001               	movlw	1	; select bank2/3
 16228  1BF4  0087               	movwf	7
 16229  1BF5  0801               	movf	1,w
 16230  1BF6  00A2               	movwf	??_setDimmerLights_Initialization
 16231  1BF7  086C               	movf	_DimmerLights,w
 16232  1BF8  3E04               	addlw	4
 16233  1BF9  0086               	movwf	6
 16234  1BFA  3001               	movlw	1	; select bank2/3
 16235  1BFB  0087               	movwf	7
 16236  1BFC  0822               	movf	??_setDimmerLights_Initialization,w
 16237  1BFD  0081               	movwf	1
 16238  1BFE  0008               	return
 16239  1BFF                     __end_of_setDimmerLights_Initialization:	
 16240                           
 16241                           	psect	text101
 16242  25EF                     __ptext101:	
 16243 ;; *************** function _Dimmer_Initialization *****************
 16244 ;; Defined at:
 16245 ;;		line 520 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16246 ;; Parameters:    Size  Location     Type
 16247 ;;		None
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;		None
 16250 ;; Return value:  Size  Location     Type
 16251 ;;		None               void
 16252 ;; Registers used:
 16253 ;;		wreg
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;Total ram usage:        1 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    4
 16266 ;; This function calls:
 16267 ;;		Nothing
 16268 ;; This function is called by:
 16269 ;;		_DimmerLights_Initialization
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           
 16274                           ;psect for function _Dimmer_Initialization
 16275  25EF                     _Dimmer_Initialization:	
 16276                           
 16277                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16278                           
 16279                           ;incstack = 0
 16280                           ; Regs used in _Dimmer_Initialization: [wreg]
 16281  25EF  30DE               	movlw	_Dimmer1& (0+255)
 16282  25F0  0020               	movlb	0	; select bank0
 16283  25F1  00A0               	movwf	??_Dimmer_Initialization
 16284  25F2  0820               	movf	??_Dimmer_Initialization,w
 16285  25F3  0021               	movlb	1	; select bank1
 16286  25F4  00B9               	movwf	_Dimmer^(0+128)
 16287  25F5  0008               	return
 16288  25F6                     __end_of_Dimmer_Initialization:	
 16289                           
 16290                           	psect	text102
 16291  25C8                     __ptext102:	
 16292 ;; *************** function _DelayOff_Main *****************
 16293 ;; Defined at:
 16294 ;;		line 45 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16295 ;; Parameters:    Size  Location     Type
 16296 ;;		None
 16297 ;; Auto vars:     Size  Location     Type
 16298 ;;		None
 16299 ;; Return value:  Size  Location     Type
 16300 ;;		None               void
 16301 ;; Registers used:
 16302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16303 ;; Tracked objects:
 16304 ;;		On entry : 0/0
 16305 ;;		On exit  : 0/0
 16306 ;;		Unchanged: 0/0
 16307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;Total ram usage:        0 bytes
 16313 ;; Hardware stack levels used:    1
 16314 ;; Hardware stack levels required when called:    9
 16315 ;; This function calls:
 16316 ;;		_DlyOff_Main
 16317 ;; This function is called by:
 16318 ;;		_main
 16319 ;; This function uses a non-reentrant model
 16320 ;;
 16321                           
 16322                           
 16323                           ;psect for function _DelayOff_Main
 16324  25C8                     _DelayOff_Main:	
 16325                           
 16326                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16327                           
 16328                           ;incstack = 0
 16329                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16330  25C8  3001               	movlw	1
 16331  25C9  3197  270D         	fcall	_DlyOff_Main
 16332  25CB  0008               	return
 16333  25CC                     __end_of_DelayOff_Main:	
 16334                           
 16335                           	psect	text103
 16336  170D                     __ptext103:	
 16337 ;; *************** function _DlyOff_Main *****************
 16338 ;; Defined at:
 16339 ;;		line 66 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16340 ;; Parameters:    Size  Location     Type
 16341 ;;  sw              1    wreg     unsigned char 
 16342 ;; Auto vars:     Size  Location     Type
 16343 ;;  sw              1   68[BANK0 ] unsigned char 
 16344 ;; Return value:  Size  Location     Type
 16345 ;;		None               void
 16346 ;; Registers used:
 16347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16348 ;; Tracked objects:
 16349 ;;		On entry : 0/0
 16350 ;;		On exit  : 0/0
 16351 ;;		Unchanged: 0/0
 16352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;Total ram usage:        3 bytes
 16358 ;; Hardware stack levels used:    1
 16359 ;; Hardware stack levels required when called:    8
 16360 ;; This function calls:
 16361 ;;		_DelayOffPointSelect
 16362 ;;		_setBuz
 16363 ;;		_setDimmerLights_Switch
 16364 ;;		_setDimmerLights_Trigger
 16365 ;;		_setRFSW_Status
 16366 ;;		_setRF_DimmerLights
 16367 ;;		_setSw_Status
 16368 ;;		_setTxData
 16369 ;; This function is called by:
 16370 ;;		_DelayOff_Main
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           
 16375                           ;psect for function _DlyOff_Main
 16376  170D                     _DlyOff_Main:	
 16377                           
 16378                           ;incstack = 0
 16379                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16380                           ;DlyOff_Main@sw stored from wreg
 16381  170D  0020               	movlb	0	; select bank0
 16382  170E  00E4               	movwf	DlyOff_Main@sw
 16383                           
 16384                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16385  170F  0864               	movf	DlyOff_Main@sw,w
 16386  1710  31A6  26BD  3197   	fcall	_DelayOffPointSelect
 16387                           
 16388                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16389  1713  0021               	movlb	1	; select bank1
 16390  1714  0838               	movf	_DelayOff^(0+128),w
 16391  1715  0086               	movwf	6
 16392  1716  0187               	clrf	7
 16393  1717  1C81               	btfss	1,1
 16394  1718  0008               	return
 16395                           
 16396                           ;DelayOff_B1.c: 70: {
 16397                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16398  1719  0838               	movf	_DelayOff^(0+128),w
 16399  171A  3E02               	addlw	2
 16400  171B  0086               	movwf	6
 16401  171C  0187               	clrf	7
 16402  171D  3001               	movlw	1
 16403  171E  0781               	addwf	1,f
 16404  171F  3141               	addfsr 1,1
 16405  1720  1803               	skipnc
 16406  1721  0A81               	incf	1,f
 16407                           
 16408                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16409  1722  0838               	movf	_DelayOff^(0+128),w
 16410  1723  3E02               	addlw	2
 16411  1724  0086               	movwf	6
 16412  1725  0187               	clrf	7
 16413  1726  3F40               	moviw [0]fsr1
 16414  1727  0020               	movlb	0	; select bank0
 16415  1728  00E2               	movwf	??_DlyOff_Main
 16416  1729  3F41               	moviw [1]fsr1
 16417  172A  00E3               	movwf	??_DlyOff_Main+1
 16418  172B  3015               	movlw	21
 16419  172C  0263               	subwf	??_DlyOff_Main+1,w
 16420  172D  30E0               	movlw	224
 16421  172E  1903               	skipnz
 16422  172F  0262               	subwf	??_DlyOff_Main,w
 16423  1730  1C03               	skipc
 16424  1731  0008               	return
 16425                           
 16426                           ;DelayOff_B1.c: 73: {
 16427                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16428  1732  0021               	movlb	1	; select bank1
 16429  1733  0838               	movf	_DelayOff^(0+128),w
 16430  1734  3E02               	addlw	2
 16431  1735  0086               	movwf	6
 16432  1736  0187               	clrf	7
 16433  1737  3000               	movlw	0
 16434  1738  3FC0               	movwi [0]fsr1
 16435  1739  3FC1               	movwi [1]fsr1
 16436                           
 16437                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16438  173A  3001               	movlw	1
 16439  173B  0020               	movlb	0	; select bank0
 16440  173C  00E2               	movwf	??_DlyOff_Main
 16441  173D  0021               	movlb	1	; select bank1
 16442  173E  0838               	movf	_DelayOff^(0+128),w
 16443  173F  3E04               	addlw	4
 16444  1740  0086               	movwf	6
 16445  1741  0187               	clrf	7
 16446  1742  0020               	movlb	0	; select bank0
 16447  1743  0862               	movf	??_DlyOff_Main,w
 16448  1744  0781               	addwf	1,f
 16449                           
 16450                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16451  1745  0021               	movlb	1	; select bank1
 16452  1746  0838               	movf	_DelayOff^(0+128),w
 16453  1747  3E04               	addlw	4
 16454  1748  0086               	movwf	6
 16455  1749  0187               	clrf	7
 16456  174A  0A38               	incf	_DelayOff^(0+128),w
 16457  174B  0084               	movwf	4
 16458  174C  0185               	clrf	5
 16459  174D  0800               	movf	0,w
 16460  174E  0201               	subwf	1,w
 16461  174F  1C03               	skipc
 16462  1750  0008               	return
 16463                           
 16464                           ;DelayOff_B1.c: 77: {
 16465                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16466  1751  0838               	movf	_DelayOff^(0+128),w
 16467  1752  3E04               	addlw	4
 16468  1753  0086               	movwf	6
 16469  1754  0187               	clrf	7
 16470  1755  0181               	clrf	1
 16471                           
 16472                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16473  1756  0838               	movf	_DelayOff^(0+128),w
 16474  1757  0086               	movwf	6
 16475  1758  0187               	clrf	7
 16476  1759  1081               	bcf	1,1
 16477                           
 16478                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16479  175A  0020               	movlb	0	; select bank0
 16480  175B  01A2               	clrf	setSw_Status@command
 16481  175C  0864               	movf	DlyOff_Main@sw,w
 16482  175D  31A7  2772  3197   	fcall	_setSw_Status
 16483                           
 16484                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16485  1760  0020               	movlb	0	; select bank0
 16486  1761  01A2               	clrf	setRFSW_Status@command
 16487  1762  0864               	movf	DlyOff_Main@sw,w
 16488  1763  31A7  2763  3197   	fcall	_setRFSW_Status
 16489                           
 16490                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16491  1766  0020               	movlb	0	; select bank0
 16492  1767  01DD               	clrf	setRF_DimmerLights@on
 16493  1768  0864               	movf	DlyOff_Main@sw,w
 16494  1769  3193  2390  3197   	fcall	_setRF_DimmerLights
 16495                           
 16496                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16497  176C  0020               	movlb	0	; select bank0
 16498  176D  01A2               	clrf	setDimmerLights_Trigger@command
 16499  176E  0AA2               	incf	setDimmerLights_Trigger@command,f
 16500  176F  0864               	movf	DlyOff_Main@sw,w
 16501  1770  31A7  27B0  3197   	fcall	_setDimmerLights_Trigger
 16502                           
 16503                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16504  1773  0020               	movlb	0	; select bank0
 16505  1774  01A2               	clrf	setDimmerLights_Switch@command
 16506  1775  0864               	movf	DlyOff_Main@sw,w
 16507  1776  31A7  27A0  3197   	fcall	_setDimmerLights_Switch
 16508                           
 16509                           ;DelayOff_B1.c: 85: setTxData(1);
 16510  1779  3001               	movlw	1
 16511  177A  3187  271E  3197   	fcall	_setTxData
 16512                           
 16513                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16514  177D  3064               	movlw	100
 16515  177E  0020               	movlb	0	; select bank0
 16516  177F  00A6               	movwf	setBuz@time
 16517  1780  3000               	movlw	0
 16518  1781  00A7               	movwf	setBuz@time+1
 16519  1782  3001               	movlw	1
 16520  1783  3196  2696         	fcall	_setBuz
 16521  1785  0008               	return
 16522  1786                     __end_of_DlyOff_Main:	
 16523                           
 16524                           	psect	text104
 16525  071E                     __ptext104:	
 16526 ;; *************** function _setTxData *****************
 16527 ;; Defined at:
 16528 ;;		line 130 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16529 ;; Parameters:    Size  Location     Type
 16530 ;;  rf              1    wreg     unsigned char 
 16531 ;; Auto vars:     Size  Location     Type
 16532 ;;  rf              1    3[BANK0 ] unsigned char 
 16533 ;;  i               1    0        unsigned char 
 16534 ;; Return value:  Size  Location     Type
 16535 ;;		None               void
 16536 ;; Registers used:
 16537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16538 ;; Tracked objects:
 16539 ;;		On entry : 0/0
 16540 ;;		On exit  : 0/0
 16541 ;;		Unchanged: 0/0
 16542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;Total ram usage:        2 bytes
 16548 ;; Hardware stack levels used:    1
 16549 ;; Hardware stack levels required when called:    5
 16550 ;; This function calls:
 16551 ;;		_RfPointSelect
 16552 ;; This function is called by:
 16553 ;;		_DlyOff_Main
 16554 ;;		_setDimmerLights_Adj
 16555 ;;		_setControl_Lights_Table
 16556 ;;		_setRFSW_Control
 16557 ;;		_setRFSW_AdjControl
 16558 ;;		_Sw_DimmerOnFunc
 16559 ;;		_Sw_DimmerOffFunc
 16560 ;; This function uses a non-reentrant model
 16561 ;;
 16562                           
 16563                           
 16564                           ;psect for function _setTxData
 16565  071E                     _setTxData:	
 16566                           
 16567                           ;incstack = 0
 16568                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16569                           ;setTxData@rf stored from wreg
 16570  071E  0020               	movlb	0	; select bank0
 16571  071F  00A3               	movwf	setTxData@rf
 16572                           
 16573                           ;RF_Control_B1.c: 131: char i;
 16574                           ;RF_Control_B1.c: 132: RfPointSelect(rf);
 16575  0720  0823               	movf	setTxData@rf,w
 16576  0721  31A6  2662  3187   	fcall	_RfPointSelect
 16577                           
 16578                           ;RF_Control_B1.c: 133: if (RF->Enable) {
 16579  0724  087A               	movf	_RF,w
 16580  0725  0086               	movwf	6
 16581  0726  0187               	clrf	7
 16582  0727  1C01               	btfss	1,0
 16583  0728  0008               	return
 16584                           
 16585                           ;RF_Control_B1.c: 135: if (!RF->TransceiveGO) {
 16586  0729  087A               	movf	_RF,w
 16587  072A  0086               	movwf	6
 16588  072B  0187               	clrf	7
 16589  072C  1901               	btfsc	1,2
 16590  072D  0008               	return
 16591                           
 16592                           ;RF_Control_B1.c: 136: RF->TransceiveGO = 1;
 16593  072E  087A               	movf	_RF,w
 16594  072F  0086               	movwf	6
 16595  0730  0187               	clrf	7
 16596  0731  1501               	bsf	1,2
 16597                           
 16598                           ;RF_Control_B1.c: 145: RF_Data[0] = 0x63;
 16599  0732  3063               	movlw	99
 16600  0733  0020               	movlb	0	; select bank0
 16601  0734  00A2               	movwf	??_setTxData
 16602  0735  0822               	movf	??_setTxData,w
 16603  0736  0021               	movlb	1	; select bank1
 16604  0737  00A0               	movwf	_RF_Data^(0+128)
 16605                           
 16606                           ;RF_Control_B1.c: 146: RF_Data[1] = 0x02;
 16607  0738  3002               	movlw	2
 16608  0739  0020               	movlb	0	; select bank0
 16609  073A  00A2               	movwf	??_setTxData
 16610  073B  0822               	movf	??_setTxData,w
 16611  073C  0021               	movlb	1	; select bank1
 16612  073D  00A1               	movwf	(_RF_Data^(0+128)+1)
 16613                           
 16614                           ;RF_Control_B1.c: 147: RF_Data[2] = Product->Data[2];
 16615  073E  0020               	movlb	0	; select bank0
 16616  073F  086F               	movf	_Product,w
 16617  0740  0086               	movwf	6
 16618  0741  3001               	movlw	1	; select bank2/3
 16619  0742  0087               	movwf	7
 16620  0743  3001               	movlw	1	; select bank2/3
 16621  0744  3F42               	moviw [2]fsr1
 16622  0745  0021               	movlb	1	; select bank1
 16623  0746  00A2               	movwf	(_RF_Data^(0+128)+2)
 16624                           
 16625                           ;RF_Control_B1.c: 148: RF_Data[3] = Product->Data[3];
 16626  0747  0020               	movlb	0	; select bank0
 16627  0748  086F               	movf	_Product,w
 16628  0749  0086               	movwf	6
 16629  074A  3001               	movlw	1	; select bank2/3
 16630  074B  0087               	movwf	7
 16631  074C  3001               	movlw	1	; select bank2/3
 16632  074D  3F43               	moviw [3]fsr1
 16633  074E  0021               	movlb	1	; select bank1
 16634  074F  00A3               	movwf	(_RF_Data^(0+128)+3)
 16635                           
 16636                           ;RF_Control_B1.c: 149: RF_Data[4] = Product->Data[4];
 16637  0750  0020               	movlb	0	; select bank0
 16638  0751  086F               	movf	_Product,w
 16639  0752  0086               	movwf	6
 16640  0753  3001               	movlw	1	; select bank2/3
 16641  0754  0087               	movwf	7
 16642  0755  3001               	movlw	1	; select bank2/3
 16643  0756  3F44               	moviw [4]fsr1
 16644  0757  0021               	movlb	1	; select bank1
 16645  0758  00A4               	movwf	(_RF_Data^(0+128)+4)
 16646                           
 16647                           ;RF_Control_B1.c: 150: RF_Data[5] = Product->Data[5];
 16648  0759  0020               	movlb	0	; select bank0
 16649  075A  086F               	movf	_Product,w
 16650  075B  0086               	movwf	6
 16651  075C  3001               	movlw	1	; select bank2/3
 16652  075D  0087               	movwf	7
 16653  075E  3001               	movlw	1	; select bank2/3
 16654  075F  3F45               	moviw [5]fsr1
 16655  0760  0021               	movlb	1	; select bank1
 16656  0761  00A5               	movwf	(_RF_Data^(0+128)+5)
 16657                           
 16658                           ;RF_Control_B1.c: 151: RF_Data[6] = Product->Data[6];
 16659  0762  0020               	movlb	0	; select bank0
 16660  0763  086F               	movf	_Product,w
 16661  0764  0086               	movwf	6
 16662  0765  3001               	movlw	1	; select bank2/3
 16663  0766  0087               	movwf	7
 16664  0767  3001               	movlw	1	; select bank2/3
 16665  0768  3F46               	moviw [6]fsr1
 16666  0769  0021               	movlb	1	; select bank1
 16667  076A  00A6               	movwf	(_RF_Data^(0+128)+6)
 16668                           
 16669                           ;RF_Control_B1.c: 152: RF_Data[7] = Product->Data[7];
 16670  076B  0020               	movlb	0	; select bank0
 16671  076C  086F               	movf	_Product,w
 16672  076D  0086               	movwf	6
 16673  076E  3001               	movlw	1	; select bank2/3
 16674  076F  0087               	movwf	7
 16675  0770  3001               	movlw	1	; select bank2/3
 16676  0771  3F47               	moviw [7]fsr1
 16677  0772  0021               	movlb	1	; select bank1
 16678  0773  00A7               	movwf	(_RF_Data^(0+128)+7)
 16679                           
 16680                           ;RF_Control_B1.c: 153: RF_Data[8] = Product->Data[8];
 16681  0774  0020               	movlb	0	; select bank0
 16682  0775  086F               	movf	_Product,w
 16683  0776  0086               	movwf	6
 16684  0777  3001               	movlw	1	; select bank2/3
 16685  0778  0087               	movwf	7
 16686  0779  3001               	movlw	1	; select bank2/3
 16687  077A  3F48               	moviw [8]fsr1
 16688  077B  0021               	movlb	1	; select bank1
 16689  077C  00A8               	movwf	(_RF_Data^(0+128)+8)
 16690                           
 16691                           ;RF_Control_B1.c: 154: RF_Data[9] = Product->Data[9];
 16692  077D  0020               	movlb	0	; select bank0
 16693  077E  086F               	movf	_Product,w
 16694  077F  0086               	movwf	6
 16695  0780  3001               	movlw	1	; select bank2/3
 16696  0781  0087               	movwf	7
 16697  0782  3001               	movlw	1	; select bank2/3
 16698  0783  3F49               	moviw [9]fsr1
 16699  0784  0021               	movlb	1	; select bank1
 16700  0785  00A9               	movwf	(_RF_Data^(0+128)+9)
 16701                           
 16702                           ;RF_Control_B1.c: 155: RF_Data[10] = Product->Data[10];
 16703  0786  0020               	movlb	0	; select bank0
 16704  0787  086F               	movf	_Product,w
 16705  0788  0086               	movwf	6
 16706  0789  3001               	movlw	1	; select bank2/3
 16707  078A  0087               	movwf	7
 16708  078B  3001               	movlw	1	; select bank2/3
 16709  078C  3F4A               	moviw [10]fsr1
 16710  078D  0021               	movlb	1	; select bank1
 16711  078E  00AA               	movwf	(_RF_Data^(0+128)+10)
 16712                           
 16713                           ;RF_Control_B1.c: 156: RF_Data[11] = Product->Data[11];
 16714  078F  0020               	movlb	0	; select bank0
 16715  0790  086F               	movf	_Product,w
 16716  0791  0086               	movwf	6
 16717  0792  3001               	movlw	1	; select bank2/3
 16718  0793  0087               	movwf	7
 16719  0794  3001               	movlw	1	; select bank2/3
 16720  0795  3F4B               	moviw [11]fsr1
 16721  0796  0021               	movlb	1	; select bank1
 16722  0797  00AB               	movwf	(_RF_Data^(0+128)+11)
 16723                           
 16724                           ;RF_Control_B1.c: 157: RF_Data[12] = Product->Data[12];
 16725  0798  0020               	movlb	0	; select bank0
 16726  0799  086F               	movf	_Product,w
 16727  079A  0086               	movwf	6
 16728  079B  3001               	movlw	1	; select bank2/3
 16729  079C  0087               	movwf	7
 16730  079D  3001               	movlw	1	; select bank2/3
 16731  079E  3F4C               	moviw [12]fsr1
 16732  079F  0021               	movlb	1	; select bank1
 16733  07A0  00AC               	movwf	(_RF_Data^(0+128)+12)
 16734                           
 16735                           ;RF_Control_B1.c: 158: RF_Data[13] = Product->Data[13];
 16736  07A1  0020               	movlb	0	; select bank0
 16737  07A2  086F               	movf	_Product,w
 16738  07A3  0086               	movwf	6
 16739  07A4  3001               	movlw	1	; select bank2/3
 16740  07A5  0087               	movwf	7
 16741  07A6  3001               	movlw	1	; select bank2/3
 16742  07A7  3F4D               	moviw [13]fsr1
 16743  07A8  0021               	movlb	1	; select bank1
 16744  07A9  00AD               	movwf	(_RF_Data^(0+128)+13)
 16745                           
 16746                           ;RF_Control_B1.c: 159: RF_Data[14] = Product->Data[14];
 16747  07AA  0020               	movlb	0	; select bank0
 16748  07AB  086F               	movf	_Product,w
 16749  07AC  0086               	movwf	6
 16750  07AD  3001               	movlw	1	; select bank2/3
 16751  07AE  0087               	movwf	7
 16752  07AF  3001               	movlw	1	; select bank2/3
 16753  07B0  3F4E               	moviw [14]fsr1
 16754  07B1  0021               	movlb	1	; select bank1
 16755  07B2  00AE               	movwf	(_RF_Data^(0+128)+14)
 16756                           
 16757                           ;RF_Control_B1.c: 160: RF_Data[15] = Product->Data[15];
 16758  07B3  0020               	movlb	0	; select bank0
 16759  07B4  086F               	movf	_Product,w
 16760  07B5  0086               	movwf	6
 16761  07B6  3001               	movlw	1	; select bank2/3
 16762  07B7  0087               	movwf	7
 16763  07B8  3001               	movlw	1	; select bank2/3
 16764  07B9  3F4F               	moviw [15]fsr1
 16765  07BA  0021               	movlb	1	; select bank1
 16766  07BB  00AF               	movwf	(_RF_Data^(0+128)+15)
 16767                           
 16768                           ;RF_Control_B1.c: 161: RF_Data[16] = Product->Data[16];
 16769  07BC  0020               	movlb	0	; select bank0
 16770  07BD  086F               	movf	_Product,w
 16771  07BE  0086               	movwf	6
 16772  07BF  3001               	movlw	1	; select bank2/3
 16773  07C0  0087               	movwf	7
 16774  07C1  3001               	movlw	1	; select bank2/3
 16775  07C2  3F50               	moviw [16]fsr1
 16776  07C3  0021               	movlb	1	; select bank1
 16777  07C4  00B0               	movwf	(_RF_Data^(0+128)+16)
 16778                           
 16779                           ;RF_Control_B1.c: 162: RF_Data[17] = Product->Data[17];
 16780  07C5  0020               	movlb	0	; select bank0
 16781  07C6  086F               	movf	_Product,w
 16782  07C7  0086               	movwf	6
 16783  07C8  3001               	movlw	1	; select bank2/3
 16784  07C9  0087               	movwf	7
 16785  07CA  3001               	movlw	1	; select bank2/3
 16786  07CB  3F51               	moviw [17]fsr1
 16787  07CC  0021               	movlb	1	; select bank1
 16788  07CD  00B1               	movwf	(_RF_Data^(0+128)+17)
 16789                           
 16790                           ;RF_Control_B1.c: 163: RF_Data[18] = Product->Data[18];
 16791  07CE  0020               	movlb	0	; select bank0
 16792  07CF  086F               	movf	_Product,w
 16793  07D0  0086               	movwf	6
 16794  07D1  3001               	movlw	1	; select bank2/3
 16795  07D2  0087               	movwf	7
 16796  07D3  3001               	movlw	1	; select bank2/3
 16797  07D4  3F52               	moviw [18]fsr1
 16798  07D5  0021               	movlb	1	; select bank1
 16799  07D6  00B2               	movwf	(_RF_Data^(0+128)+18)
 16800                           
 16801                           ;RF_Control_B1.c: 164: RF_Data[19] = Product->Data[19];
 16802  07D7  0020               	movlb	0	; select bank0
 16803  07D8  086F               	movf	_Product,w
 16804  07D9  0086               	movwf	6
 16805  07DA  3001               	movlw	1	; select bank2/3
 16806  07DB  0087               	movwf	7
 16807  07DC  3001               	movlw	1	; select bank2/3
 16808  07DD  3F53               	moviw [19]fsr1
 16809  07DE  0021               	movlb	1	; select bank1
 16810  07DF  00B3               	movwf	(_RF_Data^(0+128)+19)
 16811                           
 16812                           ;RF_Control_B1.c: 165: RF_Data[20] = 209;
 16813  07E0  30D1               	movlw	209
 16814  07E1  0020               	movlb	0	; select bank0
 16815  07E2  00A2               	movwf	??_setTxData
 16816  07E3  0822               	movf	??_setTxData,w
 16817  07E4  0021               	movlb	1	; select bank1
 16818  07E5  00B4               	movwf	(_RF_Data^(0+128)+20)
 16819  07E6  0008               	return
 16820  07E7                     __end_of_setTxData:	
 16821                           
 16822                           	psect	text105
 16823  2662                     __ptext105:	
 16824 ;; *************** function _RfPointSelect *****************
 16825 ;; Defined at:
 16826 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;  rf              1    wreg     unsigned char 
 16829 ;; Auto vars:     Size  Location     Type
 16830 ;;  rf              1    1[BANK0 ] unsigned char 
 16831 ;; Return value:  Size  Location     Type
 16832 ;;		None               void
 16833 ;; Registers used:
 16834 ;;		wreg
 16835 ;; Tracked objects:
 16836 ;;		On entry : 0/0
 16837 ;;		On exit  : 0/0
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16843 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16844 ;;Total ram usage:        2 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; Hardware stack levels required when called:    4
 16847 ;; This function calls:
 16848 ;;		Nothing
 16849 ;; This function is called by:
 16850 ;;		_setRF_Learn
 16851 ;;		_setRF_RxStatus
 16852 ;;		_setRF_Main
 16853 ;;		_setTxData
 16854 ;;		_setRF_Enable
 16855 ;;		_RF_RxDisable
 16856 ;;		_getRxData
 16857 ;;		_setLog_Code
 16858 ;;		_setControl_Lights_Table
 16859 ;; This function uses a non-reentrant model
 16860 ;;
 16861                           
 16862                           
 16863                           ;psect for function _RfPointSelect
 16864  2662                     _RfPointSelect:	
 16865                           
 16866                           ;incstack = 0
 16867                           ; Regs used in _RfPointSelect: [wreg]
 16868                           ;RfPointSelect@rf stored from wreg
 16869  2662  0020               	movlb	0	; select bank0
 16870  2663  00A1               	movwf	RfPointSelect@rf
 16871                           
 16872                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16873  2664  0821               	movf	RfPointSelect@rf,w
 16874  2665  3A01               	xorlw	1
 16875  2666  1D03               	skipz
 16876  2667  0008               	return
 16877                           
 16878                           ;RF_Control_B1.c: 10: RF = &RF1;
 16879  2668  30E1               	movlw	_RF1& (0+255)
 16880  2669  00A0               	movwf	??_RfPointSelect
 16881  266A  0820               	movf	??_RfPointSelect,w
 16882  266B  00FA               	movwf	_RF
 16883  266C  0008               	return
 16884  266D                     __end_of_RfPointSelect:	
 16885                           
 16886                           	psect	text106
 16887  2772                     __ptext106:	
 16888 ;; *************** function _setSw_Status *****************
 16889 ;; Defined at:
 16890 ;;		line 105 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 16891 ;; Parameters:    Size  Location     Type
 16892 ;;  sw              1    wreg     unsigned char 
 16893 ;;  command         1    2[BANK0 ] unsigned char 
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;  sw              1    3[BANK0 ] unsigned char 
 16896 ;; Return value:  Size  Location     Type
 16897 ;;		None               void
 16898 ;; Registers used:
 16899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16900 ;; Tracked objects:
 16901 ;;		On entry : 0/0
 16902 ;;		On exit  : 0/0
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;Total ram usage:        2 bytes
 16910 ;; Hardware stack levels used:    1
 16911 ;; Hardware stack levels required when called:    5
 16912 ;; This function calls:
 16913 ;;		_SwPointSelect
 16914 ;; This function is called by:
 16915 ;;		_DlyOff_Main
 16916 ;;		_setDimmerLights_ERROR
 16917 ;;		_setControl_Lights_Table
 16918 ;;		_setRFSW_Control
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922                           
 16923                           ;psect for function _setSw_Status
 16924  2772                     _setSw_Status:	
 16925                           
 16926                           ;incstack = 0
 16927                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16928                           ;setSw_Status@sw stored from wreg
 16929  2772  0020               	movlb	0	; select bank0
 16930  2773  00A3               	movwf	setSw_Status@sw
 16931                           
 16932                           ;Switch_B1.c: 106: SwPointSelect(sw);
 16933  2774  0823               	movf	setSw_Status@sw,w
 16934  2775  31A6  2657         	fcall	_SwPointSelect
 16935                           
 16936                           ;Switch_B1.c: 107: Sw->Status = command;
 16937  2777  0020               	movlb	0	; select bank0
 16938  2778  086D               	movf	_Sw,w
 16939  2779  0086               	movwf	6
 16940  277A  3001               	movlw	1	; select bank2/3
 16941  277B  0087               	movwf	7
 16942  277C  0822               	movf	setSw_Status@command,w
 16943  277D  1301               	bcf	1,6
 16944  277E  1D03               	skipz
 16945  277F  1701               	bsf	1,6
 16946  2780  0008               	return
 16947  2781                     __end_of_setSw_Status:	
 16948                           
 16949                           	psect	text107
 16950  2657                     __ptext107:	
 16951 ;; *************** function _SwPointSelect *****************
 16952 ;; Defined at:
 16953 ;;		line 17 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 16954 ;; Parameters:    Size  Location     Type
 16955 ;;  sw              1    wreg     unsigned char 
 16956 ;; Auto vars:     Size  Location     Type
 16957 ;;  sw              1    1[BANK0 ] unsigned char 
 16958 ;; Return value:  Size  Location     Type
 16959 ;;		None               void
 16960 ;; Registers used:
 16961 ;;		wreg
 16962 ;; Tracked objects:
 16963 ;;		On entry : 0/0
 16964 ;;		On exit  : 0/0
 16965 ;;		Unchanged: 0/0
 16966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16968 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16969 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;Total ram usage:        2 bytes
 16972 ;; Hardware stack levels used:    1
 16973 ;; Hardware stack levels required when called:    4
 16974 ;; This function calls:
 16975 ;;		Nothing
 16976 ;; This function is called by:
 16977 ;;		_setSw_Enable
 16978 ;;		_setSw_Status
 16979 ;;		_setSw_Main
 16980 ;;		_Sw_Detect
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           
 16985                           ;psect for function _SwPointSelect
 16986  2657                     _SwPointSelect:	
 16987                           
 16988                           ;incstack = 0
 16989                           ; Regs used in _SwPointSelect: [wreg]
 16990                           ;SwPointSelect@sw stored from wreg
 16991  2657  0020               	movlb	0	; select bank0
 16992  2658  00A1               	movwf	SwPointSelect@sw
 16993                           
 16994                           ;Switch_B1.c: 20: if (sw == 1) {
 16995  2659  0821               	movf	SwPointSelect@sw,w
 16996  265A  3A01               	xorlw	1
 16997  265B  1D03               	skipz
 16998  265C  0008               	return
 16999                           
 17000                           ;Switch_B1.c: 21: Sw = &Sw1;
 17001  265D  3059               	movlw	_Sw1& (0+255)
 17002  265E  00A0               	movwf	??_SwPointSelect
 17003  265F  0820               	movf	??_SwPointSelect,w
 17004  2660  00ED               	movwf	_Sw
 17005  2661  0008               	return
 17006  2662                     __end_of_SwPointSelect:	
 17007                           
 17008                           	psect	text108
 17009  1390                     __ptext108:	
 17010 ;; *************** function _setRF_DimmerLights *****************
 17011 ;; Defined at:
 17012 ;;		line 397 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;  lights          1    wreg     unsigned char 
 17015 ;;  on              1   61[BANK0 ] unsigned char 
 17016 ;; Auto vars:     Size  Location     Type
 17017 ;;  lights          1   65[BANK0 ] unsigned char 
 17018 ;;  status          1   64[BANK0 ] unsigned char 
 17019 ;; Return value:  Size  Location     Type
 17020 ;;		None               void
 17021 ;; Registers used:
 17022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17023 ;; Tracked objects:
 17024 ;;		On entry : 0/0
 17025 ;;		On exit  : 0/0
 17026 ;;		Unchanged: 0/0
 17027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17028 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;Total ram usage:        5 bytes
 17033 ;; Hardware stack levels used:    1
 17034 ;; Hardware stack levels required when called:    7
 17035 ;; This function calls:
 17036 ;;		_setPercentValue
 17037 ;; This function is called by:
 17038 ;;		_DlyOff_Main
 17039 ;;		_setDimmerLights_Adj
 17040 ;;		_setRFSW_Control
 17041 ;;		_Sw_DimmerOnFunc
 17042 ;;		_Sw_DimmerOffFunc
 17043 ;; This function uses a non-reentrant model
 17044 ;;
 17045                           
 17046                           
 17047                           ;psect for function _setRF_DimmerLights
 17048  1390                     _setRF_DimmerLights:	
 17049                           
 17050                           ;incstack = 0
 17051                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17052                           ;setRF_DimmerLights@lights stored from wreg
 17053  1390  0020               	movlb	0	; select bank0
 17054  1391  00E1               	movwf	setRF_DimmerLights@lights
 17055                           
 17056                           ;RF_Control_B1.c: 398: char status;
 17057                           ;RF_Control_B1.c: 399: status = 1;
 17058  1392  01E0               	clrf	setRF_DimmerLights@status
 17059  1393  0AE0               	incf	setRF_DimmerLights@status,f
 17060                           
 17061                           ;RF_Control_B1.c: 400: status <<= (lights - 1);
 17062  1394  0861               	movf	setRF_DimmerLights@lights,w
 17063  1395  3EFF               	addlw	-1
 17064  1396  0A89               	incf	9,f
 17065  1397  2B9A               	goto	u7570
 17066  1398                     u7575:	
 17067  1398  1003               	clrc
 17068  1399  0DE0               	rlf	setRF_DimmerLights@status,f
 17069  139A                     u7570:	
 17070  139A  3EFF               	addlw	-1
 17071  139B  1D03               	skipz
 17072  139C  2B98               	goto	u7575
 17073                           
 17074                           ;RF_Control_B1.c: 401: Product->Data[11]=lights;
 17075  139D  0861               	movf	setRF_DimmerLights@lights,w
 17076  139E  00DE               	movwf	??_setRF_DimmerLights
 17077  139F  086F               	movf	_Product,w
 17078  13A0  3E0B               	addlw	11
 17079  13A1  0086               	movwf	6
 17080  13A2  3001               	movlw	1	; select bank2/3
 17081  13A3  0087               	movwf	7
 17082  13A4  085E               	movf	??_setRF_DimmerLights,w
 17083  13A5  0081               	movwf	1
 17084                           
 17085                           ;RF_Control_B1.c: 404: Product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 17086  13A6  3043               	movlw	67
 17087  13A7  319F  2728  3193   	fcall	_setPercentValue
 17088  13AA  0020               	movlb	0	; select bank0
 17089  13AB  00DE               	movwf	??_setRF_DimmerLights
 17090  13AC  0861               	movf	setRF_DimmerLights@lights,w
 17091  13AD  3E14               	addlw	20
 17092  13AE  076F               	addwf	_Product,w
 17093  13AF  00DF               	movwf	??_setRF_DimmerLights+1
 17094  13B0  085F               	movf	??_setRF_DimmerLights+1,w
 17095  13B1  0086               	movwf	6
 17096  13B2  3001               	movlw	1	; select bank2/3
 17097  13B3  0087               	movwf	7
 17098  13B4  085E               	movf	??_setRF_DimmerLights,w
 17099  13B5  0081               	movwf	1
 17100                           
 17101                           ;RF_Control_B1.c: 407: Product->Data[9]=Product->Data[20 + lights];
 17102  13B6  0861               	movf	setRF_DimmerLights@lights,w
 17103  13B7  3E14               	addlw	20
 17104  13B8  076F               	addwf	_Product,w
 17105  13B9  00DE               	movwf	??_setRF_DimmerLights
 17106  13BA  085E               	movf	??_setRF_DimmerLights,w
 17107  13BB  0086               	movwf	6
 17108  13BC  3001               	movlw	1	; select bank2/3
 17109  13BD  0087               	movwf	7
 17110  13BE  0801               	movf	1,w
 17111  13BF  00DF               	movwf	??_setRF_DimmerLights+1
 17112  13C0  086F               	movf	_Product,w
 17113  13C1  3E09               	addlw	9
 17114  13C2  0086               	movwf	6
 17115  13C3  3001               	movlw	1	; select bank2/3
 17116  13C4  0087               	movwf	7
 17117  13C5  085F               	movf	??_setRF_DimmerLights+1,w
 17118  13C6  0081               	movwf	1
 17119                           
 17120                           ;RF_Control_B1.c: 408: Product->Data[17]=Product->Data[26 + lights];
 17121  13C7  0861               	movf	setRF_DimmerLights@lights,w
 17122  13C8  3E1A               	addlw	26
 17123  13C9  076F               	addwf	_Product,w
 17124  13CA  00DE               	movwf	??_setRF_DimmerLights
 17125  13CB  085E               	movf	??_setRF_DimmerLights,w
 17126  13CC  0086               	movwf	6
 17127  13CD  3001               	movlw	1	; select bank2/3
 17128  13CE  0087               	movwf	7
 17129  13CF  0801               	movf	1,w
 17130  13D0  00DF               	movwf	??_setRF_DimmerLights+1
 17131  13D1  086F               	movf	_Product,w
 17132  13D2  3E11               	addlw	17
 17133  13D3  0086               	movwf	6
 17134  13D4  3001               	movlw	1	; select bank2/3
 17135  13D5  0087               	movwf	7
 17136  13D6  085F               	movf	??_setRF_DimmerLights+1,w
 17137  13D7  0081               	movwf	1
 17138                           
 17139                           ;RF_Control_B1.c: 409: if (on) {
 17140  13D8  085D               	movf	setRF_DimmerLights@on,w
 17141  13D9  1903               	btfsc	3,2
 17142  13DA  2BEB               	goto	l8036
 17143                           
 17144                           ;RF_Control_B1.c: 410: Product->Data[15]=(Product->Data[15] | status);
 17145  13DB  086F               	movf	_Product,w
 17146  13DC  3E0F               	addlw	15
 17147  13DD  0086               	movwf	6
 17148  13DE  3001               	movlw	1	; select bank2/3
 17149  13DF  0087               	movwf	7
 17150  13E0  0801               	movf	1,w
 17151  13E1  0460               	iorwf	setRF_DimmerLights@status,w
 17152  13E2  00DE               	movwf	??_setRF_DimmerLights
 17153  13E3  086F               	movf	_Product,w
 17154  13E4  3E0F               	addlw	15
 17155  13E5  0086               	movwf	6
 17156  13E6  3001               	movlw	1	; select bank2/3
 17157  13E7  0087               	movwf	7
 17158  13E8  085E               	movf	??_setRF_DimmerLights,w
 17159  13E9  0081               	movwf	1
 17160                           
 17161                           ;RF_Control_B1.c: 411: } else {
 17162  13EA  0008               	return
 17163  13EB                     l8036:	
 17164                           
 17165                           ;RF_Control_B1.c: 412: Product->Data[15]=(Product->Data[15]&(~status));
 17166  13EB  086F               	movf	_Product,w
 17167  13EC  3E0F               	addlw	15
 17168  13ED  0086               	movwf	6
 17169  13EE  3001               	movlw	1	; select bank2/3
 17170  13EF  0087               	movwf	7
 17171  13F0  0960               	comf	setRF_DimmerLights@status,w
 17172  13F1  0501               	andwf	1,w
 17173  13F2  00DE               	movwf	??_setRF_DimmerLights
 17174  13F3  086F               	movf	_Product,w
 17175  13F4  3E0F               	addlw	15
 17176  13F5  0086               	movwf	6
 17177  13F6  3001               	movlw	1	; select bank2/3
 17178  13F7  0087               	movwf	7
 17179  13F8  085E               	movf	??_setRF_DimmerLights,w
 17180  13F9  0081               	movwf	1
 17181  13FA  0008               	return
 17182  13FB                     __end_of_setRF_DimmerLights:	
 17183                           
 17184                           	psect	text109
 17185  1F28                     __ptext109:	
 17186 ;; *************** function _setPercentValue *****************
 17187 ;; Defined at:
 17188 ;;		line 505 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 17189 ;; Parameters:    Size  Location     Type
 17190 ;;  value           1    wreg     unsigned char 
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;  value           1   57[BANK0 ] unsigned char 
 17193 ;;  i               3   58[BANK0 ] float 
 17194 ;; Return value:  Size  Location     Type
 17195 ;;                  1    wreg      unsigned char 
 17196 ;; Registers used:
 17197 ;;		wreg, status,2, status,0, pclath, cstack
 17198 ;; Tracked objects:
 17199 ;;		On entry : 0/0
 17200 ;;		On exit  : 0/0
 17201 ;;		Unchanged: 0/0
 17202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;Total ram usage:        4 bytes
 17208 ;; Hardware stack levels used:    1
 17209 ;; Hardware stack levels required when called:    6
 17210 ;; This function calls:
 17211 ;;		___awtoft
 17212 ;;		___ftdiv
 17213 ;;		___fttol
 17214 ;; This function is called by:
 17215 ;;		_Flash_Memory_Initialization
 17216 ;;		_setRF_DimmerLights
 17217 ;; This function uses a non-reentrant model
 17218 ;;
 17219                           
 17220                           
 17221                           ;psect for function _setPercentValue
 17222  1F28                     _setPercentValue:	
 17223                           
 17224                           ;incstack = 0
 17225                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17226                           ;setPercentValue@value stored from wreg
 17227  1F28  0020               	movlb	0	; select bank0
 17228  1F29  00D9               	movwf	setPercentValue@value
 17229                           
 17230                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17231  1F2A  3000               	movlw	0
 17232  1F2B  00DA               	movwf	setPercentValue@i
 17233  1F2C  3054               	movlw	84
 17234  1F2D  00DB               	movwf	setPercentValue@i+1
 17235  1F2E  3042               	movlw	66
 17236  1F2F  00DC               	movwf	setPercentValue@i+2
 17237                           
 17238                           ;Dimmer_B1.c: 509: i/=100;
 17239  1F30  3000               	movlw	0
 17240  1F31  00AE               	movwf	___ftdiv@f2
 17241  1F32  30C8               	movlw	200
 17242  1F33  00AF               	movwf	___ftdiv@f2+1
 17243  1F34  3042               	movlw	66
 17244  1F35  00B0               	movwf	___ftdiv@f2+2
 17245  1F36  085A               	movf	setPercentValue@i,w
 17246  1F37  00B1               	movwf	___ftdiv@f1
 17247  1F38  085B               	movf	setPercentValue@i+1,w
 17248  1F39  00B2               	movwf	___ftdiv@f1+1
 17249  1F3A  085C               	movf	setPercentValue@i+2,w
 17250  1F3B  00B3               	movwf	___ftdiv@f1+2
 17251  1F3C  318B  23AB  319F   	fcall	___ftdiv
 17252  1F3F  0020               	movlb	0	; select bank0
 17253  1F40  082E               	movf	?___ftdiv,w
 17254  1F41  00DA               	movwf	setPercentValue@i
 17255  1F42  082F               	movf	?___ftdiv+1,w
 17256  1F43  00DB               	movwf	setPercentValue@i+1
 17257  1F44  0830               	movf	?___ftdiv+2,w
 17258  1F45  00DC               	movwf	setPercentValue@i+2
 17259                           
 17260                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17261  1F46  0859               	movf	setPercentValue@value,w
 17262  1F47  3EBD               	addlw	189
 17263  1F48  00A8               	movwf	___awtoft@c
 17264  1F49  30FF               	movlw	255
 17265  1F4A  1803               	skipnc
 17266  1F4B  3000               	movlw	0
 17267  1F4C  00A9               	movwf	___awtoft@c+1
 17268  1F4D  319A  222D  319F   	fcall	___awtoft
 17269  1F50  0020               	movlb	0	; select bank0
 17270  1F51  0828               	movf	?___awtoft,w
 17271  1F52  00B1               	movwf	___ftdiv@f1
 17272  1F53  0829               	movf	?___awtoft+1,w
 17273  1F54  00B2               	movwf	___ftdiv@f1+1
 17274  1F55  082A               	movf	?___awtoft+2,w
 17275  1F56  00B3               	movwf	___ftdiv@f1+2
 17276  1F57  085A               	movf	setPercentValue@i,w
 17277  1F58  00AE               	movwf	___ftdiv@f2
 17278  1F59  085B               	movf	setPercentValue@i+1,w
 17279  1F5A  00AF               	movwf	___ftdiv@f2+1
 17280  1F5B  085C               	movf	setPercentValue@i+2,w
 17281  1F5C  00B0               	movwf	___ftdiv@f2+2
 17282  1F5D  318B  23AB  319F   	fcall	___ftdiv
 17283  1F60  0020               	movlb	0	; select bank0
 17284  1F61  082E               	movf	?___ftdiv,w
 17285  1F62  00CB               	movwf	___fttol@f1
 17286  1F63  082F               	movf	?___ftdiv+1,w
 17287  1F64  00CC               	movwf	___fttol@f1+1
 17288  1F65  0830               	movf	?___ftdiv+2,w
 17289  1F66  00CD               	movwf	___fttol@f1+2
 17290  1F67  3188  2038         	fcall	___fttol
 17291  1F69  0020               	movlb	0	; select bank0
 17292  1F6A  034B               	decf	?___fttol,w
 17293  1F6B  3AFF               	xorlw	255
 17294  1F6C  3E64               	addlw	100
 17295  1F6D  0008               	return
 17296  1F6E                     __end_of_setPercentValue:	
 17297                           
 17298                           	psect	text110
 17299  0838                     __ptext110:	
 17300 ;; *************** function ___fttol *****************
 17301 ;; Defined at:
 17302 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17303 ;; Parameters:    Size  Location     Type
 17304 ;;  f1              3   43[BANK0 ] float 
 17305 ;; Auto vars:     Size  Location     Type
 17306 ;;  lval            4   52[BANK0 ] unsigned long 
 17307 ;;  exp1            1   56[BANK0 ] unsigned char 
 17308 ;;  sign1           1   51[BANK0 ] unsigned char 
 17309 ;; Return value:  Size  Location     Type
 17310 ;;                  4   43[BANK0 ] long 
 17311 ;; Registers used:
 17312 ;;		wreg, status,2, status,0
 17313 ;; Tracked objects:
 17314 ;;		On entry : 0/0
 17315 ;;		On exit  : 0/0
 17316 ;;		Unchanged: 0/0
 17317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17318 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;Total ram usage:       14 bytes
 17323 ;; Hardware stack levels used:    1
 17324 ;; Hardware stack levels required when called:    4
 17325 ;; This function calls:
 17326 ;;		Nothing
 17327 ;; This function is called by:
 17328 ;;		_getPercentValue
 17329 ;;		_setPercentValue
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           
 17334                           ;psect for function ___fttol
 17335  0838                     ___fttol:	
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17339  0838  0020               	movlb	0	; select bank0
 17340  0839  084B               	movf	___fttol@f1,w
 17341  083A  00CF               	movwf	??___fttol
 17342  083B  084C               	movf	___fttol@f1+1,w
 17343  083C  00D0               	movwf	??___fttol+1
 17344  083D  084D               	movf	___fttol@f1+2,w
 17345  083E  00D1               	movwf	??___fttol+2
 17346  083F  1003               	clrc
 17347  0840  0D50               	rlf	??___fttol+1,w
 17348  0841  0D51               	rlf	??___fttol+2,w
 17349  0842  00D2               	movwf	??___fttol+3
 17350  0843  0852               	movf	??___fttol+3,w
 17351  0844  00D8               	movwf	___fttol@exp1
 17352  0845  08D8               	movf	___fttol@exp1,f
 17353  0846  1D03               	skipz
 17354  0847  2851               	goto	l5842
 17355  0848  3000               	movlw	0
 17356  0849  00CE               	movwf	?___fttol+3
 17357  084A  3000               	movlw	0
 17358  084B  00CD               	movwf	?___fttol+2
 17359  084C  3000               	movlw	0
 17360  084D  00CC               	movwf	?___fttol+1
 17361  084E  3000               	movlw	0
 17362  084F  00CB               	movwf	?___fttol
 17363  0850  0008               	return
 17364  0851                     l5842:	
 17365  0851  084B               	movf	___fttol@f1,w
 17366  0852  00CF               	movwf	??___fttol
 17367  0853  084C               	movf	___fttol@f1+1,w
 17368  0854  00D0               	movwf	??___fttol+1
 17369  0855  084D               	movf	___fttol@f1+2,w
 17370  0856  00D1               	movwf	??___fttol+2
 17371  0857  3017               	movlw	23
 17372  0858                     u4315:	
 17373  0858  36D1               	lsrf	??___fttol+2,f
 17374  0859  0CD0               	rrf	??___fttol+1,f
 17375  085A  0CCF               	rrf	??___fttol,f
 17376  085B  0B89               	decfsz	9,f
 17377  085C  2858               	goto	u4315
 17378  085D  084F               	movf	??___fttol,w
 17379  085E  00D2               	movwf	??___fttol+3
 17380  085F  0852               	movf	??___fttol+3,w
 17381  0860  00D3               	movwf	___fttol@sign1
 17382  0861  17CC               	bsf	___fttol@f1+1,7
 17383  0862  30FF               	movlw	255
 17384  0863  05CB               	andwf	___fttol@f1,f
 17385  0864  30FF               	movlw	255
 17386  0865  05CC               	andwf	___fttol@f1+1,f
 17387  0866  3000               	movlw	0
 17388  0867  05CD               	andwf	___fttol@f1+2,f
 17389  0868  084B               	movf	___fttol@f1,w
 17390  0869  00D4               	movwf	___fttol@lval
 17391  086A  084C               	movf	___fttol@f1+1,w
 17392  086B  00D5               	movwf	___fttol@lval+1
 17393  086C  084D               	movf	___fttol@f1+2,w
 17394  086D  00D6               	movwf	___fttol@lval+2
 17395  086E  01D7               	clrf	___fttol@lval+3
 17396  086F  308E               	movlw	142
 17397  0870  02D8               	subwf	___fttol@exp1,f
 17398  0871  1FD8               	btfss	___fttol@exp1,7
 17399  0872  288F               	goto	l5862
 17400  0873  0858               	movf	___fttol@exp1,w
 17401  0874  3A80               	xorlw	128
 17402  0875  3E8F               	addlw	143
 17403  0876  1803               	skipnc
 17404  0877  2881               	goto	l5860
 17405  0878  3000               	movlw	0
 17406  0879  00CE               	movwf	?___fttol+3
 17407  087A  3000               	movlw	0
 17408  087B  00CD               	movwf	?___fttol+2
 17409  087C  3000               	movlw	0
 17410  087D  00CC               	movwf	?___fttol+1
 17411  087E  3000               	movlw	0
 17412  087F  00CB               	movwf	?___fttol
 17413  0880  0008               	return
 17414  0881                     l5860:	
 17415  0881  3001               	movlw	1
 17416  0882                     u4345:	
 17417  0882  36D7               	lsrf	___fttol@lval+3,f
 17418  0883  0CD6               	rrf	___fttol@lval+2,f
 17419  0884  0CD5               	rrf	___fttol@lval+1,f
 17420  0885  0CD4               	rrf	___fttol@lval,f
 17421  0886  0B89               	decfsz	9,f
 17422  0887  2882               	goto	u4345
 17423  0888  3001               	movlw	1
 17424  0889  00CF               	movwf	??___fttol
 17425  088A  084F               	movf	??___fttol,w
 17426  088B  07D8               	addwf	___fttol@exp1,f
 17427  088C  1903               	btfsc	3,2
 17428  088D  28A8               	goto	l5872
 17429  088E  2881               	goto	l5860
 17430  088F                     l5862:	
 17431  088F  3018               	movlw	24
 17432  0890  0258               	subwf	___fttol@exp1,w
 17433  0891  1C03               	skipc
 17434  0892  28A5               	goto	l5870
 17435  0893  3000               	movlw	0
 17436  0894  00CE               	movwf	?___fttol+3
 17437  0895  3000               	movlw	0
 17438  0896  00CD               	movwf	?___fttol+2
 17439  0897  3000               	movlw	0
 17440  0898  00CC               	movwf	?___fttol+1
 17441  0899  3000               	movlw	0
 17442  089A  00CB               	movwf	?___fttol
 17443  089B  0008               	return
 17444  089C                     l5868:	
 17445  089C  3001               	movlw	1
 17446  089D                     u4375:	
 17447  089D  35D4               	lslf	___fttol@lval,f
 17448  089E  0DD5               	rlf	___fttol@lval+1,f
 17449  089F  0DD6               	rlf	___fttol@lval+2,f
 17450  08A0  0DD7               	rlf	___fttol@lval+3,f
 17451  08A1  0B89               	decfsz	9,f
 17452  08A2  289D               	goto	u4375
 17453  08A3  3001               	movlw	1
 17454  08A4  02D8               	subwf	___fttol@exp1,f
 17455  08A5                     l5870:	
 17456  08A5  08D8               	movf	___fttol@exp1,f
 17457  08A6  1D03               	skipz
 17458  08A7  289C               	goto	l5868
 17459  08A8                     l5872:	
 17460  08A8  0853               	movf	___fttol@sign1,w
 17461  08A9  1903               	btfsc	3,2
 17462  08AA  28B6               	goto	l5876
 17463  08AB  09D4               	comf	___fttol@lval,f
 17464  08AC  09D5               	comf	___fttol@lval+1,f
 17465  08AD  09D6               	comf	___fttol@lval+2,f
 17466  08AE  09D7               	comf	___fttol@lval+3,f
 17467  08AF  0AD4               	incf	___fttol@lval,f
 17468  08B0  1903               	skipnz
 17469  08B1  0AD5               	incf	___fttol@lval+1,f
 17470  08B2  1903               	skipnz
 17471  08B3  0AD6               	incf	___fttol@lval+2,f
 17472  08B4  1903               	skipnz
 17473  08B5  0AD7               	incf	___fttol@lval+3,f
 17474  08B6                     l5876:	
 17475  08B6  0857               	movf	___fttol@lval+3,w
 17476  08B7  00CE               	movwf	?___fttol+3
 17477  08B8  0856               	movf	___fttol@lval+2,w
 17478  08B9  00CD               	movwf	?___fttol+2
 17479  08BA  0855               	movf	___fttol@lval+1,w
 17480  08BB  00CC               	movwf	?___fttol+1
 17481  08BC  0854               	movf	___fttol@lval,w
 17482  08BD  00CB               	movwf	?___fttol
 17483  08BE  0008               	return
 17484  08BF                     __end_of___fttol:	
 17485                           
 17486                           	psect	text111
 17487  0BAB                     __ptext111:	
 17488 ;; *************** function ___ftdiv *****************
 17489 ;; Defined at:
 17490 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17491 ;; Parameters:    Size  Location     Type
 17492 ;;  f2              3   14[BANK0 ] float 
 17493 ;;  f1              3   17[BANK0 ] float 
 17494 ;; Auto vars:     Size  Location     Type
 17495 ;;  f3              3   25[BANK0 ] float 
 17496 ;;  sign            1   29[BANK0 ] unsigned char 
 17497 ;;  exp             1   28[BANK0 ] unsigned char 
 17498 ;;  cntr            1   24[BANK0 ] unsigned char 
 17499 ;; Return value:  Size  Location     Type
 17500 ;;                  3   14[BANK0 ] float 
 17501 ;; Registers used:
 17502 ;;		wreg, status,2, status,0, pclath, cstack
 17503 ;; Tracked objects:
 17504 ;;		On entry : 0/0
 17505 ;;		On exit  : 0/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17508 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17510 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17511 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;Total ram usage:       16 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    5
 17515 ;; This function calls:
 17516 ;;		___ftpack
 17517 ;; This function is called by:
 17518 ;;		_getPercentValue
 17519 ;;		_setPercentValue
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           
 17524                           ;psect for function ___ftdiv
 17525  0BAB                     ___ftdiv:	
 17526                           
 17527                           ;incstack = 0
 17528                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17529  0BAB  0020               	movlb	0	; select bank0
 17530  0BAC  0831               	movf	___ftdiv@f1,w
 17531  0BAD  00B4               	movwf	??___ftdiv
 17532  0BAE  0832               	movf	___ftdiv@f1+1,w
 17533  0BAF  00B5               	movwf	??___ftdiv+1
 17534  0BB0  0833               	movf	___ftdiv@f1+2,w
 17535  0BB1  00B6               	movwf	??___ftdiv+2
 17536  0BB2  1003               	clrc
 17537  0BB3  0D35               	rlf	??___ftdiv+1,w
 17538  0BB4  0D36               	rlf	??___ftdiv+2,w
 17539  0BB5  00B7               	movwf	??___ftdiv+3
 17540  0BB6  0837               	movf	??___ftdiv+3,w
 17541  0BB7  00BC               	movwf	___ftdiv@exp
 17542  0BB8  08BC               	movf	___ftdiv@exp,f
 17543  0BB9  1D03               	skipz
 17544  0BBA  2BC2               	goto	l5750
 17545  0BBB  3000               	movlw	0
 17546  0BBC  00AE               	movwf	?___ftdiv
 17547  0BBD  3000               	movlw	0
 17548  0BBE  00AF               	movwf	?___ftdiv+1
 17549  0BBF  3000               	movlw	0
 17550  0BC0  00B0               	movwf	?___ftdiv+2
 17551  0BC1  0008               	return
 17552  0BC2                     l5750:	
 17553  0BC2  082E               	movf	___ftdiv@f2,w
 17554  0BC3  00B4               	movwf	??___ftdiv
 17555  0BC4  082F               	movf	___ftdiv@f2+1,w
 17556  0BC5  00B5               	movwf	??___ftdiv+1
 17557  0BC6  0830               	movf	___ftdiv@f2+2,w
 17558  0BC7  00B6               	movwf	??___ftdiv+2
 17559  0BC8  1003               	clrc
 17560  0BC9  0D35               	rlf	??___ftdiv+1,w
 17561  0BCA  0D36               	rlf	??___ftdiv+2,w
 17562  0BCB  00B7               	movwf	??___ftdiv+3
 17563  0BCC  0837               	movf	??___ftdiv+3,w
 17564  0BCD  00BD               	movwf	___ftdiv@sign
 17565  0BCE  08BD               	movf	___ftdiv@sign,f
 17566  0BCF  1D03               	skipz
 17567  0BD0  2BD8               	goto	l5756
 17568  0BD1  3000               	movlw	0
 17569  0BD2  00AE               	movwf	?___ftdiv
 17570  0BD3  3000               	movlw	0
 17571  0BD4  00AF               	movwf	?___ftdiv+1
 17572  0BD5  3000               	movlw	0
 17573  0BD6  00B0               	movwf	?___ftdiv+2
 17574  0BD7  0008               	return
 17575  0BD8                     l5756:	
 17576  0BD8  3000               	movlw	0
 17577  0BD9  00B9               	movwf	___ftdiv@f3
 17578  0BDA  3000               	movlw	0
 17579  0BDB  00BA               	movwf	___ftdiv@f3+1
 17580  0BDC  3000               	movlw	0
 17581  0BDD  00BB               	movwf	___ftdiv@f3+2
 17582  0BDE  3089               	movlw	137
 17583  0BDF  073D               	addwf	___ftdiv@sign,w
 17584  0BE0  00B4               	movwf	??___ftdiv
 17585  0BE1  0834               	movf	??___ftdiv,w
 17586  0BE2  02BC               	subwf	___ftdiv@exp,f
 17587  0BE3  0831               	movf	___ftdiv@f1,w
 17588  0BE4  00B4               	movwf	??___ftdiv
 17589  0BE5  0832               	movf	___ftdiv@f1+1,w
 17590  0BE6  00B5               	movwf	??___ftdiv+1
 17591  0BE7  0833               	movf	___ftdiv@f1+2,w
 17592  0BE8  00B6               	movwf	??___ftdiv+2
 17593  0BE9  3010               	movlw	16
 17594  0BEA                     u4125:	
 17595  0BEA  36B6               	lsrf	??___ftdiv+2,f
 17596  0BEB  0CB5               	rrf	??___ftdiv+1,f
 17597  0BEC  0CB4               	rrf	??___ftdiv,f
 17598  0BED  0B89               	decfsz	9,f
 17599  0BEE  2BEA               	goto	u4125
 17600  0BEF  0834               	movf	??___ftdiv,w
 17601  0BF0  00B7               	movwf	??___ftdiv+3
 17602  0BF1  0837               	movf	??___ftdiv+3,w
 17603  0BF2  00BD               	movwf	___ftdiv@sign
 17604  0BF3  082E               	movf	___ftdiv@f2,w
 17605  0BF4  00B4               	movwf	??___ftdiv
 17606  0BF5  082F               	movf	___ftdiv@f2+1,w
 17607  0BF6  00B5               	movwf	??___ftdiv+1
 17608  0BF7  0830               	movf	___ftdiv@f2+2,w
 17609  0BF8  00B6               	movwf	??___ftdiv+2
 17610  0BF9  3010               	movlw	16
 17611  0BFA                     u4135:	
 17612  0BFA  36B6               	lsrf	??___ftdiv+2,f
 17613  0BFB  0CB5               	rrf	??___ftdiv+1,f
 17614  0BFC  0CB4               	rrf	??___ftdiv,f
 17615  0BFD  0B89               	decfsz	9,f
 17616  0BFE  2BFA               	goto	u4135
 17617  0BFF  0834               	movf	??___ftdiv,w
 17618  0C00  00B7               	movwf	??___ftdiv+3
 17619  0C01  0837               	movf	??___ftdiv+3,w
 17620  0C02  06BD               	xorwf	___ftdiv@sign,f
 17621  0C03  3080               	movlw	128
 17622  0C04  00B4               	movwf	??___ftdiv
 17623  0C05  0834               	movf	??___ftdiv,w
 17624  0C06  05BD               	andwf	___ftdiv@sign,f
 17625  0C07  17B2               	bsf	___ftdiv@f1+1,7
 17626  0C08  30FF               	movlw	255
 17627  0C09  05B1               	andwf	___ftdiv@f1,f
 17628  0C0A  30FF               	movlw	255
 17629  0C0B  05B2               	andwf	___ftdiv@f1+1,f
 17630  0C0C  3000               	movlw	0
 17631  0C0D  05B3               	andwf	___ftdiv@f1+2,f
 17632  0C0E  17AF               	bsf	___ftdiv@f2+1,7
 17633  0C0F  30FF               	movlw	255
 17634  0C10  05AE               	andwf	___ftdiv@f2,f
 17635  0C11  30FF               	movlw	255
 17636  0C12  05AF               	andwf	___ftdiv@f2+1,f
 17637  0C13  3000               	movlw	0
 17638  0C14  05B0               	andwf	___ftdiv@f2+2,f
 17639  0C15  3018               	movlw	24
 17640  0C16  00B4               	movwf	??___ftdiv
 17641  0C17  0834               	movf	??___ftdiv,w
 17642  0C18  00B8               	movwf	___ftdiv@cntr
 17643  0C19                     l5770:	
 17644  0C19  3001               	movlw	1
 17645  0C1A                     u4145:	
 17646  0C1A  35B9               	lslf	___ftdiv@f3,f
 17647  0C1B  0DBA               	rlf	___ftdiv@f3+1,f
 17648  0C1C  0DBB               	rlf	___ftdiv@f3+2,f
 17649  0C1D  0B89               	decfsz	9,f
 17650  0C1E  2C1A               	goto	u4145
 17651  0C1F  0830               	movf	___ftdiv@f2+2,w
 17652  0C20  0233               	subwf	___ftdiv@f1+2,w
 17653  0C21  1D03               	skipz
 17654  0C22  2C29               	goto	u4155
 17655  0C23  082F               	movf	___ftdiv@f2+1,w
 17656  0C24  0232               	subwf	___ftdiv@f1+1,w
 17657  0C25  1D03               	skipz
 17658  0C26  2C29               	goto	u4155
 17659  0C27  082E               	movf	___ftdiv@f2,w
 17660  0C28  0231               	subwf	___ftdiv@f1,w
 17661  0C29                     u4155:	
 17662  0C29  1C03               	skipc
 17663  0C2A  2C32               	goto	l5778
 17664  0C2B  082E               	movf	___ftdiv@f2,w
 17665  0C2C  02B1               	subwf	___ftdiv@f1,f
 17666  0C2D  082F               	movf	___ftdiv@f2+1,w
 17667  0C2E  3BB2               	subwfb	___ftdiv@f1+1,f
 17668  0C2F  0830               	movf	___ftdiv@f2+2,w
 17669  0C30  3BB3               	subwfb	___ftdiv@f1+2,f
 17670  0C31  1439               	bsf	___ftdiv@f3,0
 17671  0C32                     l5778:	
 17672  0C32  3001               	movlw	1
 17673  0C33                     u4165:	
 17674  0C33  35B1               	lslf	___ftdiv@f1,f
 17675  0C34  0DB2               	rlf	___ftdiv@f1+1,f
 17676  0C35  0DB3               	rlf	___ftdiv@f1+2,f
 17677  0C36  0B89               	decfsz	9,f
 17678  0C37  2C33               	goto	u4165
 17679  0C38  3001               	movlw	1
 17680  0C39  02B8               	subwf	___ftdiv@cntr,f
 17681  0C3A  1D03               	btfss	3,2
 17682  0C3B  2C19               	goto	l5770
 17683  0C3C  0839               	movf	___ftdiv@f3,w
 17684  0C3D  00A0               	movwf	___ftpack@arg
 17685  0C3E  083A               	movf	___ftdiv@f3+1,w
 17686  0C3F  00A1               	movwf	___ftpack@arg+1
 17687  0C40  083B               	movf	___ftdiv@f3+2,w
 17688  0C41  00A2               	movwf	___ftpack@arg+2
 17689  0C42  083C               	movf	___ftdiv@exp,w
 17690  0C43  00B4               	movwf	??___ftdiv
 17691  0C44  0834               	movf	??___ftdiv,w
 17692  0C45  00A3               	movwf	___ftpack@exp
 17693  0C46  083D               	movf	___ftdiv@sign,w
 17694  0C47  00B5               	movwf	??___ftdiv+1
 17695  0C48  0835               	movf	??___ftdiv+1,w
 17696  0C49  00A4               	movwf	___ftpack@sign
 17697  0C4A  3192  22CB         	fcall	___ftpack
 17698  0C4C  0020               	movlb	0	; select bank0
 17699  0C4D  0820               	movf	?___ftpack,w
 17700  0C4E  00AE               	movwf	?___ftdiv
 17701  0C4F  0821               	movf	?___ftpack+1,w
 17702  0C50  00AF               	movwf	?___ftdiv+1
 17703  0C51  0822               	movf	?___ftpack+2,w
 17704  0C52  00B0               	movwf	?___ftdiv+2
 17705  0C53  0008               	return
 17706  0C54                     __end_of___ftdiv:	
 17707                           
 17708                           	psect	text112
 17709  1A2D                     __ptext112:	
 17710 ;; *************** function ___awtoft *****************
 17711 ;; Defined at:
 17712 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;  c               2    8[BANK0 ] int 
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;  sign            1   13[BANK0 ] unsigned char 
 17717 ;; Return value:  Size  Location     Type
 17718 ;;                  3    8[BANK0 ] float 
 17719 ;; Registers used:
 17720 ;;		wreg, status,2, status,0, pclath, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17726 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;Total ram usage:        6 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:    5
 17733 ;; This function calls:
 17734 ;;		___ftpack
 17735 ;; This function is called by:
 17736 ;;		_getPercentValue
 17737 ;;		_setPercentValue
 17738 ;; This function uses a non-reentrant model
 17739 ;;
 17740                           
 17741                           
 17742                           ;psect for function ___awtoft
 17743  1A2D                     ___awtoft:	
 17744                           
 17745                           ;incstack = 0
 17746                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17747  1A2D  0020               	movlb	0	; select bank0
 17748  1A2E  01AD               	clrf	___awtoft@sign
 17749  1A2F  1FA9               	btfss	___awtoft@c+1,7
 17750  1A30  2A38               	goto	l5668
 17751  1A31  09A8               	comf	___awtoft@c,f
 17752  1A32  09A9               	comf	___awtoft@c+1,f
 17753  1A33  0AA8               	incf	___awtoft@c,f
 17754  1A34  1903               	skipnz
 17755  1A35  0AA9               	incf	___awtoft@c+1,f
 17756  1A36  01AD               	clrf	___awtoft@sign
 17757  1A37  0AAD               	incf	___awtoft@sign,f
 17758  1A38                     l5668:	
 17759  1A38  0828               	movf	___awtoft@c,w
 17760  1A39  00A0               	movwf	___ftpack@arg
 17761  1A3A  0829               	movf	___awtoft@c+1,w
 17762  1A3B  00A1               	movwf	___ftpack@arg+1
 17763  1A3C  01A2               	clrf	___ftpack@arg+2
 17764  1A3D  308E               	movlw	142
 17765  1A3E  00AB               	movwf	??___awtoft
 17766  1A3F  082B               	movf	??___awtoft,w
 17767  1A40  00A3               	movwf	___ftpack@exp
 17768  1A41  082D               	movf	___awtoft@sign,w
 17769  1A42  00AC               	movwf	??___awtoft+1
 17770  1A43  082C               	movf	??___awtoft+1,w
 17771  1A44  00A4               	movwf	___ftpack@sign
 17772  1A45  3192  22CB         	fcall	___ftpack
 17773  1A47  0020               	movlb	0	; select bank0
 17774  1A48  0820               	movf	?___ftpack,w
 17775  1A49  00A8               	movwf	?___awtoft
 17776  1A4A  0821               	movf	?___ftpack+1,w
 17777  1A4B  00A9               	movwf	?___awtoft+1
 17778  1A4C  0822               	movf	?___ftpack+2,w
 17779  1A4D  00AA               	movwf	?___awtoft+2
 17780  1A4E  0008               	return
 17781  1A4F                     __end_of___awtoft:	
 17782                           
 17783                           	psect	text113
 17784  12CB                     __ptext113:	
 17785 ;; *************** function ___ftpack *****************
 17786 ;; Defined at:
 17787 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17788 ;; Parameters:    Size  Location     Type
 17789 ;;  arg             3    0[BANK0 ] unsigned um
 17790 ;;  exp             1    3[BANK0 ] unsigned char 
 17791 ;;  sign            1    4[BANK0 ] unsigned char 
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;		None
 17794 ;; Return value:  Size  Location     Type
 17795 ;;                  3    0[BANK0 ] float 
 17796 ;; Registers used:
 17797 ;;		wreg, status,2, status,0
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17803 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;Total ram usage:        8 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    4
 17810 ;; This function calls:
 17811 ;;		Nothing
 17812 ;; This function is called by:
 17813 ;;		___awtoft
 17814 ;;		___ftadd
 17815 ;;		___ftdiv
 17816 ;;		___ftmul
 17817 ;; This function uses a non-reentrant model
 17818 ;;
 17819                           
 17820                           
 17821                           ;psect for function ___ftpack
 17822  12CB                     ___ftpack:	
 17823                           
 17824                           ;incstack = 0
 17825                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17826  12CB  0020               	movlb	0	; select bank0
 17827  12CC  0823               	movf	___ftpack@exp,w
 17828  12CD  1903               	btfsc	3,2
 17829  12CE  2AD4               	goto	l5634
 17830  12CF  0822               	movf	___ftpack@arg+2,w
 17831  12D0  0421               	iorwf	___ftpack@arg+1,w
 17832  12D1  0420               	iorwf	___ftpack@arg,w
 17833  12D2  1D03               	skipz
 17834  12D3  2AE5               	goto	l5640
 17835  12D4                     l5634:	
 17836  12D4  3000               	movlw	0
 17837  12D5  00A0               	movwf	?___ftpack
 17838  12D6  3000               	movlw	0
 17839  12D7  00A1               	movwf	?___ftpack+1
 17840  12D8  3000               	movlw	0
 17841  12D9  00A2               	movwf	?___ftpack+2
 17842  12DA  0008               	return
 17843  12DB                     l5638:	
 17844  12DB  3001               	movlw	1
 17845  12DC  00A5               	movwf	??___ftpack
 17846  12DD  0825               	movf	??___ftpack,w
 17847  12DE  07A3               	addwf	___ftpack@exp,f
 17848  12DF  3001               	movlw	1
 17849  12E0                     u3775:	
 17850  12E0  36A2               	lsrf	___ftpack@arg+2,f
 17851  12E1  0CA1               	rrf	___ftpack@arg+1,f
 17852  12E2  0CA0               	rrf	___ftpack@arg,f
 17853  12E3  0B89               	decfsz	9,f
 17854  12E4  2AE0               	goto	u3775
 17855  12E5                     l5640:	
 17856  12E5  30FE               	movlw	254
 17857  12E6  0522               	andwf	___ftpack@arg+2,w
 17858  12E7  1903               	btfsc	3,2
 17859  12E8  2AFE               	goto	l3052
 17860  12E9  2ADB               	goto	l5638
 17861  12EA                     l5642:	
 17862  12EA  3001               	movlw	1
 17863  12EB  00A5               	movwf	??___ftpack
 17864  12EC  0825               	movf	??___ftpack,w
 17865  12ED  07A3               	addwf	___ftpack@exp,f
 17866  12EE  3001               	movlw	1
 17867  12EF  07A0               	addwf	___ftpack@arg,f
 17868  12F0  3000               	movlw	0
 17869  12F1  1803               	skipnc
 17870  12F2  3001               	movlw	1
 17871  12F3  07A1               	addwf	___ftpack@arg+1,f
 17872  12F4  3000               	movlw	0
 17873  12F5  1803               	skipnc
 17874  12F6  3001               	movlw	1
 17875  12F7  07A2               	addwf	___ftpack@arg+2,f
 17876  12F8  3001               	movlw	1
 17877  12F9                     u3795:	
 17878  12F9  36A2               	lsrf	___ftpack@arg+2,f
 17879  12FA  0CA1               	rrf	___ftpack@arg+1,f
 17880  12FB  0CA0               	rrf	___ftpack@arg,f
 17881  12FC  0B89               	decfsz	9,f
 17882  12FD  2AF9               	goto	u3795
 17883  12FE                     l3052:	
 17884  12FE  30FF               	movlw	255
 17885  12FF  0522               	andwf	___ftpack@arg+2,w
 17886  1300  1903               	btfsc	3,2
 17887  1301  2B0B               	goto	l5650
 17888  1302  2AEA               	goto	l5642
 17889  1303                     l5648:	
 17890  1303  3001               	movlw	1
 17891  1304  02A3               	subwf	___ftpack@exp,f
 17892  1305  3001               	movlw	1
 17893  1306                     u3815:	
 17894  1306  35A0               	lslf	___ftpack@arg,f
 17895  1307  0DA1               	rlf	___ftpack@arg+1,f
 17896  1308  0DA2               	rlf	___ftpack@arg+2,f
 17897  1309  0B89               	decfsz	9,f
 17898  130A  2B06               	goto	u3815
 17899  130B                     l5650:	
 17900  130B  1FA1               	btfss	___ftpack@arg+1,7
 17901  130C  2B03               	goto	l5648
 17902  130D  1823               	btfsc	___ftpack@exp,0
 17903  130E  2B15               	goto	l3058
 17904  130F  30FF               	movlw	255
 17905  1310  05A0               	andwf	___ftpack@arg,f
 17906  1311  307F               	movlw	127
 17907  1312  05A1               	andwf	___ftpack@arg+1,f
 17908  1313  30FF               	movlw	255
 17909  1314  05A2               	andwf	___ftpack@arg+2,f
 17910  1315                     l3058:	
 17911  1315  1003               	clrc
 17912  1316  0CA3               	rrf	___ftpack@exp,f
 17913  1317  0823               	movf	___ftpack@exp,w
 17914  1318  00A5               	movwf	??___ftpack
 17915  1319  01A6               	clrf	??___ftpack+1
 17916  131A  01A7               	clrf	??___ftpack+2
 17917  131B  3010               	movlw	16
 17918  131C                     u3845:	
 17919  131C  35A5               	lslf	??___ftpack,f
 17920  131D  0DA6               	rlf	??___ftpack+1,f
 17921  131E  0DA7               	rlf	??___ftpack+2,f
 17922  131F  0B89               	decfsz	9,f
 17923  1320  2B1C               	goto	u3845
 17924  1321  0825               	movf	??___ftpack,w
 17925  1322  04A0               	iorwf	___ftpack@arg,f
 17926  1323  0826               	movf	??___ftpack+1,w
 17927  1324  04A1               	iorwf	___ftpack@arg+1,f
 17928  1325  0827               	movf	??___ftpack+2,w
 17929  1326  04A2               	iorwf	___ftpack@arg+2,f
 17930  1327  0824               	movf	___ftpack@sign,w
 17931  1328  1903               	btfsc	3,2
 17932  1329  0008               	return
 17933  132A  17A2               	bsf	___ftpack@arg+2,7
 17934  132B  0008               	return
 17935  132C                     __end_of___ftpack:	
 17936                           
 17937                           	psect	text114
 17938  2763                     __ptext114:	
 17939 ;; *************** function _setRFSW_Status *****************
 17940 ;; Defined at:
 17941 ;;		line 379 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  sw              1    wreg     unsigned char 
 17944 ;;  command         1    2[BANK0 ] unsigned char 
 17945 ;; Auto vars:     Size  Location     Type
 17946 ;;  sw              1    3[BANK0 ] unsigned char 
 17947 ;; Return value:  Size  Location     Type
 17948 ;;		None               void
 17949 ;; Registers used:
 17950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17951 ;; Tracked objects:
 17952 ;;		On entry : 0/0
 17953 ;;		On exit  : 0/0
 17954 ;;		Unchanged: 0/0
 17955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17956 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;Total ram usage:        2 bytes
 17961 ;; Hardware stack levels used:    1
 17962 ;; Hardware stack levels required when called:    5
 17963 ;; This function calls:
 17964 ;;		_RfSWPointSelect
 17965 ;; This function is called by:
 17966 ;;		_DlyOff_Main
 17967 ;;		_setDimmerLights_ERROR
 17968 ;;		_setControl_Lights_Table
 17969 ;;		_Sw_DimmerOnFunc
 17970 ;;		_Sw_DimmerAdjFunc
 17971 ;; This function uses a non-reentrant model
 17972 ;;
 17973                           
 17974                           
 17975                           ;psect for function _setRFSW_Status
 17976  2763                     _setRFSW_Status:	
 17977                           
 17978                           ;incstack = 0
 17979                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17980                           ;setRFSW_Status@sw stored from wreg
 17981  2763  0020               	movlb	0	; select bank0
 17982  2764  00A3               	movwf	setRFSW_Status@sw
 17983                           
 17984                           ;RF_Control_B1.c: 380: RfSWPointSelect(sw);
 17985  2765  0823               	movf	setRFSW_Status@sw,w
 17986  2766  31A6  26C9         	fcall	_RfSWPointSelect
 17987                           
 17988                           ;RF_Control_B1.c: 381: RFSW->Status = command;
 17989  2768  0021               	movlb	1	; select bank1
 17990  2769  083C               	movf	_RFSW^(0+128),w
 17991  276A  0086               	movwf	6
 17992  276B  0187               	clrf	7
 17993  276C  0020               	movlb	0	; select bank0
 17994  276D  0822               	movf	setRFSW_Status@command,w
 17995  276E  1001               	bcf	1,0
 17996  276F  1D03               	skipz
 17997  2770  1401               	bsf	1,0
 17998  2771  0008               	return
 17999  2772                     __end_of_setRFSW_Status:	
 18000                           
 18001                           	psect	text115
 18002  26C9                     __ptext115:	
 18003 ;; *************** function _RfSWPointSelect *****************
 18004 ;; Defined at:
 18005 ;;		line 314 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 18006 ;; Parameters:    Size  Location     Type
 18007 ;;  sw              1    wreg     unsigned char 
 18008 ;; Auto vars:     Size  Location     Type
 18009 ;;  sw              1    1[BANK0 ] unsigned char 
 18010 ;; Return value:  Size  Location     Type
 18011 ;;		None               void
 18012 ;; Registers used:
 18013 ;;		wreg
 18014 ;; Tracked objects:
 18015 ;;		On entry : 0/0
 18016 ;;		On exit  : 0/0
 18017 ;;		Unchanged: 0/0
 18018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18023 ;;Total ram usage:        2 bytes
 18024 ;; Hardware stack levels used:    1
 18025 ;; Hardware stack levels required when called:    4
 18026 ;; This function calls:
 18027 ;;		Nothing
 18028 ;; This function is called by:
 18029 ;;		_setRFSW_Control
 18030 ;;		_setRFSW_AdjControl
 18031 ;;		_setRFSW_Status
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           
 18036                           ;psect for function _RfSWPointSelect
 18037  26C9                     _RfSWPointSelect:	
 18038                           
 18039                           ;incstack = 0
 18040                           ; Regs used in _RfSWPointSelect: [wreg]
 18041                           ;RfSWPointSelect@sw stored from wreg
 18042  26C9  0020               	movlb	0	; select bank0
 18043  26CA  00A1               	movwf	RfSWPointSelect@sw
 18044                           
 18045                           ;RF_Control_B1.c: 316: if (sw == 1) {
 18046  26CB  0821               	movf	RfSWPointSelect@sw,w
 18047  26CC  3A01               	xorlw	1
 18048  26CD  1D03               	skipz
 18049  26CE  0008               	return
 18050                           
 18051                           ;RF_Control_B1.c: 317: RFSW = &RFSW1;
 18052  26CF  30E6               	movlw	_RFSW1& (0+255)
 18053  26D0  00A0               	movwf	??_RfSWPointSelect
 18054  26D1  0820               	movf	??_RfSWPointSelect,w
 18055  26D2  0021               	movlb	1	; select bank1
 18056  26D3  00BC               	movwf	_RFSW^(0+128)
 18057  26D4  0008               	return
 18058  26D5                     __end_of_RfSWPointSelect:	
 18059                           
 18060                           	psect	text116
 18061  27B0                     __ptext116:	
 18062 ;; *************** function _setDimmerLights_Trigger *****************
 18063 ;; Defined at:
 18064 ;;		line 445 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;  lights          1    wreg     unsigned char 
 18067 ;;  command         1    2[BANK0 ] unsigned char 
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;  lights          1    3[BANK0 ] unsigned char 
 18070 ;; Return value:  Size  Location     Type
 18071 ;;		None               void
 18072 ;; Registers used:
 18073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18079 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;Total ram usage:        2 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:    5
 18086 ;; This function calls:
 18087 ;;		_DimmerLightsPointSelect
 18088 ;; This function is called by:
 18089 ;;		_DlyOff_Main
 18090 ;;		_setRFSW_Control
 18091 ;;		_Sw_DimmerOnFunc
 18092 ;;		_Sw_DimmerOffFunc
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           
 18097                           ;psect for function _setDimmerLights_Trigger
 18098  27B0                     _setDimmerLights_Trigger:	
 18099                           
 18100                           ;incstack = 0
 18101                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18102                           ;setDimmerLights_Trigger@lights stored from wreg
 18103  27B0  0020               	movlb	0	; select bank0
 18104  27B1  00A3               	movwf	setDimmerLights_Trigger@lights
 18105                           
 18106                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18107  27B2  0823               	movf	setDimmerLights_Trigger@lights,w
 18108  27B3  31A6  264C         	fcall	_DimmerLightsPointSelect
 18109                           
 18110                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18111  27B5  0020               	movlb	0	; select bank0
 18112  27B6  086C               	movf	_DimmerLights,w
 18113  27B7  3E09               	addlw	9
 18114  27B8  0086               	movwf	6
 18115  27B9  3001               	movlw	1	; select bank2/3
 18116  27BA  0087               	movwf	7
 18117  27BB  0822               	movf	setDimmerLights_Trigger@command,w
 18118  27BC  1081               	bcf	1,1
 18119  27BD  1D03               	skipz
 18120  27BE  1481               	bsf	1,1
 18121  27BF  0008               	return
 18122  27C0                     __end_of_setDimmerLights_Trigger:	
 18123                           
 18124                           	psect	text117
 18125  27A0                     __ptext117:	
 18126 ;; *************** function _setDimmerLights_Switch *****************
 18127 ;; Defined at:
 18128 ;;		line 435 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18129 ;; Parameters:    Size  Location     Type
 18130 ;;  lights          1    wreg     unsigned char 
 18131 ;;  command         1    2[BANK0 ] unsigned char 
 18132 ;; Auto vars:     Size  Location     Type
 18133 ;;  lights          1    3[BANK0 ] unsigned char 
 18134 ;; Return value:  Size  Location     Type
 18135 ;;		None               void
 18136 ;; Registers used:
 18137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18138 ;; Tracked objects:
 18139 ;;		On entry : 0/0
 18140 ;;		On exit  : 0/0
 18141 ;;		Unchanged: 0/0
 18142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18143 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18147 ;;Total ram usage:        2 bytes
 18148 ;; Hardware stack levels used:    1
 18149 ;; Hardware stack levels required when called:    5
 18150 ;; This function calls:
 18151 ;;		_DimmerLightsPointSelect
 18152 ;; This function is called by:
 18153 ;;		_DlyOff_Main
 18154 ;;		_setRFSW_Control
 18155 ;;		_Sw_DimmerOnFunc
 18156 ;;		_Sw_DimmerOffFunc
 18157 ;; This function uses a non-reentrant model
 18158 ;;
 18159                           
 18160                           
 18161                           ;psect for function _setDimmerLights_Switch
 18162  27A0                     _setDimmerLights_Switch:	
 18163                           
 18164                           ;incstack = 0
 18165                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18166                           ;setDimmerLights_Switch@lights stored from wreg
 18167  27A0  0020               	movlb	0	; select bank0
 18168  27A1  00A3               	movwf	setDimmerLights_Switch@lights
 18169                           
 18170                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18171  27A2  0823               	movf	setDimmerLights_Switch@lights,w
 18172  27A3  31A6  264C         	fcall	_DimmerLightsPointSelect
 18173                           
 18174                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18175  27A5  0020               	movlb	0	; select bank0
 18176  27A6  086C               	movf	_DimmerLights,w
 18177  27A7  3E09               	addlw	9
 18178  27A8  0086               	movwf	6
 18179  27A9  3001               	movlw	1	; select bank2/3
 18180  27AA  0087               	movwf	7
 18181  27AB  0822               	movf	setDimmerLights_Switch@command,w
 18182  27AC  1001               	bcf	1,0
 18183  27AD  1D03               	skipz
 18184  27AE  1401               	bsf	1,0
 18185  27AF  0008               	return
 18186  27B0                     __end_of_setDimmerLights_Switch:	
 18187                           
 18188                           	psect	text118
 18189  264C                     __ptext118:	
 18190 ;; *************** function _DimmerLightsPointSelect *****************
 18191 ;; Defined at:
 18192 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18193 ;; Parameters:    Size  Location     Type
 18194 ;;  lights          1    wreg     unsigned char 
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;  lights          1    1[BANK0 ] unsigned char 
 18197 ;; Return value:  Size  Location     Type
 18198 ;;		None               void
 18199 ;; Registers used:
 18200 ;;		wreg
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18210 ;;Total ram usage:        2 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:    4
 18213 ;; This function calls:
 18214 ;;		Nothing
 18215 ;; This function is called by:
 18216 ;;		_setDimmerLights_Initialization
 18217 ;;		_setDimmerLights_Main
 18218 ;;		_setDimmerLights_ERROR
 18219 ;;		_setDimmerLights_TriggerERROR
 18220 ;;		_setDimmerLights
 18221 ;;		_setDimmerLights_Adj
 18222 ;;		_setDimmerLights_AdjRF
 18223 ;;		_setDimmerLights_Switch
 18224 ;;		_setDimmerLights_AdjGo
 18225 ;;		_setDimmerLights_Trigger
 18226 ;;		_setDimmerLights_TriggerAdj
 18227 ;;		_setDimmerLights_Clear
 18228 ;;		_setDimmerLights_GO
 18229 ;;		_setDimmerLights_MaxmumValue
 18230 ;; This function uses a non-reentrant model
 18231 ;;
 18232                           
 18233                           
 18234                           ;psect for function _DimmerLightsPointSelect
 18235  264C                     _DimmerLightsPointSelect:	
 18236                           
 18237                           ;incstack = 0
 18238                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18239                           ;DimmerLightsPointSelect@lights stored from wreg
 18240  264C  0020               	movlb	0	; select bank0
 18241  264D  00A1               	movwf	DimmerLightsPointSelect@lights
 18242                           
 18243                           ;Dimmer_B1.c: 10: if(lights == 1)
 18244  264E  0821               	movf	DimmerLightsPointSelect@lights,w
 18245  264F  3A01               	xorlw	1
 18246  2650  1D03               	skipz
 18247  2651  0008               	return
 18248                           
 18249                           ;Dimmer_B1.c: 11: {
 18250                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18251  2652  3031               	movlw	_DimmerLights1& (0+255)
 18252  2653  00A0               	movwf	??_DimmerLightsPointSelect
 18253  2654  0820               	movf	??_DimmerLightsPointSelect,w
 18254  2655  00EC               	movwf	_DimmerLights
 18255  2656  0008               	return
 18256  2657                     __end_of_DimmerLightsPointSelect:	
 18257                           
 18258                           	psect	text119
 18259  1696                     __ptext119:	
 18260 ;; *************** function _setBuz *****************
 18261 ;; Defined at:
 18262 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  count           1    wreg     unsigned char 
 18265 ;;  time            2    6[BANK0 ] int 
 18266 ;; Auto vars:     Size  Location     Type
 18267 ;;  count           1    9[BANK0 ] unsigned char 
 18268 ;; Return value:  Size  Location     Type
 18269 ;;		None               void
 18270 ;; Registers used:
 18271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18272 ;; Tracked objects:
 18273 ;;		On entry : 0/0
 18274 ;;		On exit  : 0/0
 18275 ;;		Unchanged: 0/0
 18276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18277 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;Total ram usage:        4 bytes
 18282 ;; Hardware stack levels used:    1
 18283 ;; Hardware stack levels required when called:    5
 18284 ;; This function calls:
 18285 ;;		___wmul
 18286 ;; This function is called by:
 18287 ;;		_DlyOff_Main
 18288 ;;		_setDimmerLights_Main
 18289 ;;		_DimmerLights_Exceptions
 18290 ;;		_setOverTemp_Exceptions
 18291 ;;		_setLog_Code
 18292 ;;		_setControl_Lights_Table
 18293 ;;		_setRFSW_Control
 18294 ;;		_setSw_Main
 18295 ;;		_Sw_DimmerOnFunc
 18296 ;;		_MainT
 18297 ;; This function uses a non-reentrant model
 18298 ;;
 18299                           
 18300                           
 18301                           ;psect for function _setBuz
 18302  1696                     _setBuz:	
 18303                           
 18304                           ;incstack = 0
 18305                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18306                           ;setBuz@count stored from wreg
 18307  1696  0020               	movlb	0	; select bank0
 18308  1697  00A9               	movwf	setBuz@count
 18309                           
 18310                           ;Buzzer_B1.c: 24: time *= 20;
 18311  1698  3014               	movlw	20
 18312  1699  00A0               	movwf	___wmul@multiplier
 18313  169A  3000               	movlw	0
 18314  169B  00A1               	movwf	___wmul@multiplier+1
 18315  169C  0827               	movf	setBuz@time+1,w
 18316  169D  01A3               	clrf	___wmul@multiplicand+1
 18317  169E  07A3               	addwf	___wmul@multiplicand+1,f
 18318  169F  0826               	movf	setBuz@time,w
 18319  16A0  01A2               	clrf	___wmul@multiplicand
 18320  16A1  07A2               	addwf	___wmul@multiplicand,f
 18321  16A2  3199  21D0  3196   	fcall	___wmul
 18322  16A5  0020               	movlb	0	; select bank0
 18323  16A6  0821               	movf	?___wmul+1,w
 18324  16A7  01A7               	clrf	setBuz@time+1
 18325  16A8  07A7               	addwf	setBuz@time+1,f
 18326  16A9  0820               	movf	?___wmul,w
 18327  16AA  01A6               	clrf	setBuz@time
 18328  16AB  07A6               	addwf	setBuz@time,f
 18329                           
 18330                           ;Buzzer_B1.c: 25: if (Buz->Enable) {
 18331  16AC  0877               	movf	_Buz,w
 18332  16AD  0086               	movwf	6
 18333  16AE  3001               	movlw	1	; select bank2/3
 18334  16AF  0087               	movwf	7
 18335  16B0  1C01               	btfss	1,0
 18336  16B1  0008               	return
 18337                           
 18338                           ;Buzzer_B1.c: 26: if (!Buz->GO) {
 18339  16B2  0877               	movf	_Buz,w
 18340  16B3  0086               	movwf	6
 18341  16B4  3001               	movlw	1	; select bank2/3
 18342  16B5  0087               	movwf	7
 18343  16B6  1881               	btfsc	1,1
 18344  16B7  2ED1               	goto	l8004
 18345                           
 18346                           ;Buzzer_B1.c: 27: Buz->GO = 1;
 18347  16B8  0877               	movf	_Buz,w
 18348  16B9  0086               	movwf	6
 18349  16BA  3001               	movlw	1	; select bank2/3
 18350  16BB  0087               	movwf	7
 18351  16BC  1481               	bsf	1,1
 18352                           
 18353                           ;Buzzer_B1.c: 28: Buz->Count = count;
 18354  16BD  0829               	movf	setBuz@count,w
 18355  16BE  00A8               	movwf	??_setBuz
 18356  16BF  0877               	movf	_Buz,w
 18357  16C0  3E03               	addlw	3
 18358  16C1  0086               	movwf	6
 18359  16C2  3001               	movlw	1	; select bank2/3
 18360  16C3  0087               	movwf	7
 18361  16C4  0828               	movf	??_setBuz,w
 18362  16C5  0081               	movwf	1
 18363                           
 18364                           ;Buzzer_B1.c: 29: Buz->TimeValue = time;
 18365  16C6  0877               	movf	_Buz,w
 18366  16C7  3E06               	addlw	6
 18367  16C8  0086               	movwf	6
 18368  16C9  3001               	movlw	1	; select bank2/3
 18369  16CA  0087               	movwf	7
 18370  16CB  0826               	movf	setBuz@time,w
 18371  16CC  3FC0               	movwi [0]fsr1
 18372  16CD  0827               	movf	setBuz@time+1,w
 18373  16CE  3FC1               	movwi [1]fsr1
 18374                           
 18375                           ;Buzzer_B1.c: 31: RB3 = 1;
 18376  16CF  158D               	bsf	13,3	;volatile
 18377                           
 18378                           ;Buzzer_B1.c: 32: } else {
 18379  16D0  0008               	return
 18380  16D1                     l8004:	
 18381                           
 18382                           ;Buzzer_B1.c: 33: if (!Buz->BufferStatus1) {
 18383  16D1  0877               	movf	_Buz,w
 18384  16D2  0086               	movwf	6
 18385  16D3  3001               	movlw	1	; select bank2/3
 18386  16D4  0087               	movwf	7
 18387  16D5  1981               	btfsc	1,3
 18388  16D6  2EEF               	goto	l8008
 18389                           
 18390                           ;Buzzer_B1.c: 34: Buz->BufferStatus1 = 1;
 18391  16D7  0877               	movf	_Buz,w
 18392  16D8  0086               	movwf	6
 18393  16D9  3001               	movlw	1	; select bank2/3
 18394  16DA  0087               	movwf	7
 18395  16DB  1581               	bsf	1,3
 18396                           
 18397                           ;Buzzer_B1.c: 35: Buz->CountBuffer1 = count;
 18398  16DC  0829               	movf	setBuz@count,w
 18399  16DD  00A8               	movwf	??_setBuz
 18400  16DE  0877               	movf	_Buz,w
 18401  16DF  3E04               	addlw	4
 18402  16E0  0086               	movwf	6
 18403  16E1  3001               	movlw	1	; select bank2/3
 18404  16E2  0087               	movwf	7
 18405  16E3  0828               	movf	??_setBuz,w
 18406  16E4  0081               	movwf	1
 18407                           
 18408                           ;Buzzer_B1.c: 36: Buz->TimeValueBuffer1 = time;
 18409  16E5  0877               	movf	_Buz,w
 18410  16E6  3E08               	addlw	8
 18411  16E7  0086               	movwf	6
 18412  16E8  3001               	movlw	1	; select bank2/3
 18413  16E9  0087               	movwf	7
 18414  16EA  0826               	movf	setBuz@time,w
 18415  16EB  3FC0               	movwi [0]fsr1
 18416  16EC  0827               	movf	setBuz@time+1,w
 18417  16ED  3FC1               	movwi [1]fsr1
 18418                           
 18419                           ;Buzzer_B1.c: 37: } else if (!Buz->BufferStatus2) {
 18420  16EE  0008               	return
 18421  16EF                     l8008:	
 18422  16EF  0877               	movf	_Buz,w
 18423  16F0  0086               	movwf	6
 18424  16F1  3001               	movlw	1	; select bank2/3
 18425  16F2  0087               	movwf	7
 18426  16F3  1A01               	btfsc	1,4
 18427  16F4  0008               	return
 18428                           
 18429                           ;Buzzer_B1.c: 38: Buz->BufferStatus2 = 1;
 18430  16F5  0877               	movf	_Buz,w
 18431  16F6  0086               	movwf	6
 18432  16F7  3001               	movlw	1	; select bank2/3
 18433  16F8  0087               	movwf	7
 18434  16F9  1601               	bsf	1,4
 18435                           
 18436                           ;Buzzer_B1.c: 39: Buz->CountBuffer2 = count;
 18437  16FA  0829               	movf	setBuz@count,w
 18438  16FB  00A8               	movwf	??_setBuz
 18439  16FC  0877               	movf	_Buz,w
 18440  16FD  3E05               	addlw	5
 18441  16FE  0086               	movwf	6
 18442  16FF  3001               	movlw	1	; select bank2/3
 18443  1700  0087               	movwf	7
 18444  1701  0828               	movf	??_setBuz,w
 18445  1702  0081               	movwf	1
 18446                           
 18447                           ;Buzzer_B1.c: 40: Buz->TimeValueBuffer2 = time;
 18448  1703  0877               	movf	_Buz,w
 18449  1704  3E0A               	addlw	10
 18450  1705  0086               	movwf	6
 18451  1706  3001               	movlw	1	; select bank2/3
 18452  1707  0087               	movwf	7
 18453  1708  0826               	movf	setBuz@time,w
 18454  1709  3FC0               	movwi [0]fsr1
 18455  170A  0827               	movf	setBuz@time+1,w
 18456  170B  3FC1               	movwi [1]fsr1
 18457  170C  0008               	return
 18458  170D                     __end_of_setBuz:	
 18459                           
 18460                           	psect	text120
 18461  19D0                     __ptext120:	
 18462 ;; *************** function ___wmul *****************
 18463 ;; Defined at:
 18464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18467 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;  product         2    4[BANK0 ] unsigned int 
 18470 ;; Return value:  Size  Location     Type
 18471 ;;                  2    0[BANK0 ] unsigned int 
 18472 ;; Registers used:
 18473 ;;		wreg, status,2, status,0
 18474 ;; Tracked objects:
 18475 ;;		On entry : 0/0
 18476 ;;		On exit  : 0/0
 18477 ;;		Unchanged: 0/0
 18478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18479 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18482 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18483 ;;Total ram usage:        6 bytes
 18484 ;; Hardware stack levels used:    1
 18485 ;; Hardware stack levels required when called:    4
 18486 ;; This function calls:
 18487 ;;		Nothing
 18488 ;; This function is called by:
 18489 ;;		_setBuz
 18490 ;;		_Load_Main
 18491 ;; This function uses a non-reentrant model
 18492 ;;
 18493                           
 18494                           
 18495                           ;psect for function ___wmul
 18496  19D0                     ___wmul:	
 18497                           
 18498                           ;incstack = 0
 18499                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18500  19D0  0020               	movlb	0	; select bank0
 18501  19D1  01A4               	clrf	___wmul@product
 18502  19D2  01A5               	clrf	___wmul@product+1
 18503  19D3                     l7984:	
 18504  19D3  1C20               	btfss	___wmul@multiplier,0
 18505  19D4  29D9               	goto	l2891
 18506  19D5  0822               	movf	___wmul@multiplicand,w
 18507  19D6  07A4               	addwf	___wmul@product,f
 18508  19D7  0823               	movf	___wmul@multiplicand+1,w
 18509  19D8  3DA5               	addwfc	___wmul@product+1,f
 18510  19D9                     l2891:	
 18511  19D9  3001               	movlw	1
 18512  19DA                     u7505:	
 18513  19DA  35A2               	lslf	___wmul@multiplicand,f
 18514  19DB  0DA3               	rlf	___wmul@multiplicand+1,f
 18515  19DC  0B89               	decfsz	9,f
 18516  19DD  29DA               	goto	u7505
 18517  19DE  3001               	movlw	1
 18518  19DF                     u7515:	
 18519  19DF  36A1               	lsrf	___wmul@multiplier+1,f
 18520  19E0  0CA0               	rrf	___wmul@multiplier,f
 18521  19E1  0B89               	decfsz	9,f
 18522  19E2  29DF               	goto	u7515
 18523  19E3  0821               	movf	___wmul@multiplier+1,w
 18524  19E4  0420               	iorwf	___wmul@multiplier,w
 18525  19E5  1D03               	skipz
 18526  19E6  29D3               	goto	l7984
 18527  19E7  0825               	movf	___wmul@product+1,w
 18528  19E8  01A1               	clrf	?___wmul+1
 18529  19E9  07A1               	addwf	?___wmul+1,f
 18530  19EA  0824               	movf	___wmul@product,w
 18531  19EB  01A0               	clrf	?___wmul
 18532  19EC  07A0               	addwf	?___wmul,f
 18533  19ED  0008               	return
 18534  19EE                     __end_of___wmul:	
 18535                           
 18536                           	psect	text121
 18537  25C4                     __ptext121:	
 18538 ;; *************** function _DelayOff_Initialization *****************
 18539 ;; Defined at:
 18540 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18541 ;; Parameters:    Size  Location     Type
 18542 ;;		None
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;		None
 18545 ;; Return value:  Size  Location     Type
 18546 ;;		None               void
 18547 ;; Registers used:
 18548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18549 ;; Tracked objects:
 18550 ;;		On entry : 0/0
 18551 ;;		On exit  : 0/0
 18552 ;;		Unchanged: 0/0
 18553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;Total ram usage:        0 bytes
 18559 ;; Hardware stack levels used:    1
 18560 ;; Hardware stack levels required when called:    6
 18561 ;; This function calls:
 18562 ;;		_DlyOff_Initialization
 18563 ;; This function is called by:
 18564 ;;		_main
 18565 ;; This function uses a non-reentrant model
 18566 ;;
 18567                           
 18568                           
 18569                           ;psect for function _DelayOff_Initialization
 18570  25C4                     _DelayOff_Initialization:	
 18571                           
 18572                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18573                           
 18574                           ;incstack = 0
 18575                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18576  25C4  3001               	movlw	1
 18577  25C5  31A6  2641         	fcall	_DlyOff_Initialization
 18578  25C7  0008               	return
 18579  25C8                     __end_of_DelayOff_Initialization:	
 18580                           
 18581                           	psect	text122
 18582  2641                     __ptext122:	
 18583 ;; *************** function _DlyOff_Initialization *****************
 18584 ;; Defined at:
 18585 ;;		line 60 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18586 ;; Parameters:    Size  Location     Type
 18587 ;;  sw              1    wreg     unsigned char 
 18588 ;; Auto vars:     Size  Location     Type
 18589 ;;  sw              1    2[BANK0 ] unsigned char 
 18590 ;; Return value:  Size  Location     Type
 18591 ;;		None               void
 18592 ;; Registers used:
 18593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18594 ;; Tracked objects:
 18595 ;;		On entry : 0/0
 18596 ;;		On exit  : 0/0
 18597 ;;		Unchanged: 0/0
 18598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18603 ;;Total ram usage:        1 bytes
 18604 ;; Hardware stack levels used:    1
 18605 ;; Hardware stack levels required when called:    5
 18606 ;; This function calls:
 18607 ;;		_DelayOffPointSelect
 18608 ;; This function is called by:
 18609 ;;		_DelayOff_Initialization
 18610 ;; This function uses a non-reentrant model
 18611 ;;
 18612                           
 18613                           
 18614                           ;psect for function _DlyOff_Initialization
 18615  2641                     _DlyOff_Initialization:	
 18616                           
 18617                           ;incstack = 0
 18618                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18619                           ;DlyOff_Initialization@sw stored from wreg
 18620  2641  0020               	movlb	0	; select bank0
 18621  2642  00A2               	movwf	DlyOff_Initialization@sw
 18622                           
 18623                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18624  2643  0822               	movf	DlyOff_Initialization@sw,w
 18625  2644  31A6  26BD         	fcall	_DelayOffPointSelect
 18626                           
 18627                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18628  2646  0021               	movlb	1	; select bank1
 18629  2647  0838               	movf	_DelayOff^(0+128),w
 18630  2648  0086               	movwf	6
 18631  2649  0187               	clrf	7
 18632  264A  1401               	bsf	1,0
 18633  264B  0008               	return
 18634  264C                     __end_of_DlyOff_Initialization:	
 18635                           
 18636                           	psect	text123
 18637  26BD                     __ptext123:	
 18638 ;; *************** function _DelayOffPointSelect *****************
 18639 ;; Defined at:
 18640 ;;		line 8 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18641 ;; Parameters:    Size  Location     Type
 18642 ;;  sw              1    wreg     unsigned char 
 18643 ;; Auto vars:     Size  Location     Type
 18644 ;;  sw              1    1[BANK0 ] unsigned char 
 18645 ;; Return value:  Size  Location     Type
 18646 ;;		None               void
 18647 ;; Registers used:
 18648 ;;		wreg
 18649 ;; Tracked objects:
 18650 ;;		On entry : 0/0
 18651 ;;		On exit  : 0/0
 18652 ;;		Unchanged: 0/0
 18653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18658 ;;Total ram usage:        2 bytes
 18659 ;; Hardware stack levels used:    1
 18660 ;; Hardware stack levels required when called:    4
 18661 ;; This function calls:
 18662 ;;		Nothing
 18663 ;; This function is called by:
 18664 ;;		_DlyOff_Initialization
 18665 ;;		_DlyOff_Main
 18666 ;;		_setDelayOff_GO
 18667 ;; This function uses a non-reentrant model
 18668 ;;
 18669                           
 18670                           
 18671                           ;psect for function _DelayOffPointSelect
 18672  26BD                     _DelayOffPointSelect:	
 18673                           
 18674                           ;incstack = 0
 18675                           ; Regs used in _DelayOffPointSelect: [wreg]
 18676                           ;DelayOffPointSelect@sw stored from wreg
 18677  26BD  0020               	movlb	0	; select bank0
 18678  26BE  00A1               	movwf	DelayOffPointSelect@sw
 18679                           
 18680                           ;DelayOff_B1.c: 11: if(sw == 1)
 18681  26BF  0821               	movf	DelayOffPointSelect@sw,w
 18682  26C0  3A01               	xorlw	1
 18683  26C1  1D03               	skipz
 18684  26C2  0008               	return
 18685                           
 18686                           ;DelayOff_B1.c: 12: {
 18687                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18688  26C3  30CD               	movlw	_DlySw1& (0+255)
 18689  26C4  00A0               	movwf	??_DelayOffPointSelect
 18690  26C5  0820               	movf	??_DelayOffPointSelect,w
 18691  26C6  0021               	movlb	1	; select bank1
 18692  26C7  00B8               	movwf	_DelayOff^(0+128)
 18693  26C8  0008               	return
 18694  26C9                     __end_of_DelayOffPointSelect:	
 18695                           
 18696                           	psect	text124
 18697  18A3                     __ptext124:	
 18698 ;; *************** function _CC2500_PowerOnInitial *****************
 18699 ;; Defined at:
 18700 ;;		line 97 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;		None
 18703 ;; Auto vars:     Size  Location     Type
 18704 ;;		None
 18705 ;; Return value:  Size  Location     Type
 18706 ;;		None               void
 18707 ;; Registers used:
 18708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18709 ;; Tracked objects:
 18710 ;;		On entry : 0/0
 18711 ;;		On exit  : 0/0
 18712 ;;		Unchanged: 0/0
 18713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;Total ram usage:        0 bytes
 18719 ;; Hardware stack levels used:    1
 18720 ;; Hardware stack levels required when called:    7
 18721 ;; This function calls:
 18722 ;;		_CC2500_ClearRXFIFO
 18723 ;;		_CC2500_ClearTXFIFO
 18724 ;;		_CC2500_FrequencyCabr
 18725 ;;		_CC2500_InitPATable
 18726 ;;		_CC2500_InitSetREG
 18727 ;;		_CC2500_PowerRST
 18728 ;;		_CC2500_SIDLEMode
 18729 ;; This function is called by:
 18730 ;;		_main
 18731 ;; This function uses a non-reentrant model
 18732 ;;
 18733                           
 18734                           
 18735                           ;psect for function _CC2500_PowerOnInitial
 18736  18A3                     _CC2500_PowerOnInitial:	
 18737                           
 18738                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 18739                           
 18740                           ;incstack = 0
 18741                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18742  18A3  319C  242D  3198   	fcall	_CC2500_PowerRST
 18743                           
 18744                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 18745  18A6  319B  2327  3198   	fcall	_CC2500_InitSetREG
 18746                           
 18747                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 18748  18A9  3199  21EE  3198   	fcall	_CC2500_InitPATable
 18749                           
 18750                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 18751  18AC  31A5  25BC  3198   	fcall	_CC2500_ClearTXFIFO
 18752                           
 18753                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 18754  18AF  31A5  25B8  3198   	fcall	_CC2500_ClearRXFIFO
 18755                           
 18756                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 18757  18B2  31A6  26B1  3198   	fcall	_CC2500_FrequencyCabr
 18758                           
 18759                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 18760  18B5  31A5  25C0         	fcall	_CC2500_SIDLEMode
 18761  18B7  0008               	return
 18762  18B8                     __end_of_CC2500_PowerOnInitial:	
 18763                           
 18764                           	psect	text125
 18765  25C0                     __ptext125:	
 18766 ;; *************** function _CC2500_SIDLEMode *****************
 18767 ;; Defined at:
 18768 ;;		line 181 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18769 ;; Parameters:    Size  Location     Type
 18770 ;;		None
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;		None
 18773 ;; Return value:  Size  Location     Type
 18774 ;;		None               void
 18775 ;; Registers used:
 18776 ;;		wreg, status,2, status,0, pclath, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/0
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18786 ;;Total ram usage:        0 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    6
 18789 ;; This function calls:
 18790 ;;		_CC2500_WriteCommand
 18791 ;; This function is called by:
 18792 ;;		_CC2500_PowerOnInitial
 18793 ;; This function uses a non-reentrant model
 18794 ;;
 18795                           
 18796                           
 18797                           ;psect for function _CC2500_SIDLEMode
 18798  25C0                     _CC2500_SIDLEMode:	
 18799                           
 18800                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 18801                           
 18802                           ;incstack = 0
 18803                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 18804  25C0  3036               	movlw	54
 18805  25C1  31A7  2790         	fcall	_CC2500_WriteCommand
 18806  25C3  0008               	return
 18807  25C4                     __end_of_CC2500_SIDLEMode:	
 18808                           
 18809                           	psect	text126
 18810  1C2D                     __ptext126:	
 18811 ;; *************** function _CC2500_PowerRST *****************
 18812 ;; Defined at:
 18813 ;;		line 110 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18814 ;; Parameters:    Size  Location     Type
 18815 ;;		None
 18816 ;; Auto vars:     Size  Location     Type
 18817 ;;		None
 18818 ;; Return value:  Size  Location     Type
 18819 ;;		None               void
 18820 ;; Registers used:
 18821 ;;		wreg, status,2, status,0, pclath, cstack
 18822 ;; Tracked objects:
 18823 ;;		On entry : 0/0
 18824 ;;		On exit  : 0/0
 18825 ;;		Unchanged: 0/0
 18826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;Total ram usage:        1 bytes
 18832 ;; Hardware stack levels used:    1
 18833 ;; Hardware stack levels required when called:    5
 18834 ;; This function calls:
 18835 ;;		_CC2500_WriteByte
 18836 ;;		_DelayTime_1us
 18837 ;; This function is called by:
 18838 ;;		_CC2500_PowerOnInitial
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           
 18843                           ;psect for function _CC2500_PowerRST
 18844  1C2D                     _CC2500_PowerRST:	
 18845                           
 18846                           ;CC2500_B1.c: 111: RC1 = 0;
 18847                           
 18848                           ;incstack = 0
 18849                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 18850  1C2D  0020               	movlb	0	; select bank0
 18851  1C2E  108E               	bcf	14,1	;volatile
 18852                           
 18853                           ;CC2500_B1.c: 112: RC0 = 0;
 18854  1C2F  100E               	bcf	14,0	;volatile
 18855                           
 18856                           ;CC2500_B1.c: 113: RC4 = 1;
 18857  1C30  160E               	bsf	14,4	;volatile
 18858                           
 18859                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 18860  1C31  300A               	movlw	10
 18861  1C32  00A0               	movwf	DelayTime_1us@count
 18862  1C33  3000               	movlw	0
 18863  1C34  00A1               	movwf	DelayTime_1us@count+1
 18864  1C35  319A  22DA  319C   	fcall	_DelayTime_1us
 18865                           
 18866                           ;CC2500_B1.c: 115: RC4 = 0;
 18867  1C38  0020               	movlb	0	; select bank0
 18868  1C39  120E               	bcf	14,4	;volatile
 18869                           
 18870                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 18871  1C3A  300A               	movlw	10
 18872  1C3B  00A0               	movwf	DelayTime_1us@count
 18873  1C3C  3000               	movlw	0
 18874  1C3D  00A1               	movwf	DelayTime_1us@count+1
 18875  1C3E  319A  22DA  319C   	fcall	_DelayTime_1us
 18876                           
 18877                           ;CC2500_B1.c: 117: RC4 = 1;
 18878  1C41  0020               	movlb	0	; select bank0
 18879  1C42  160E               	bsf	14,4	;volatile
 18880                           
 18881                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 18882  1C43  3028               	movlw	40
 18883  1C44  00A0               	movwf	DelayTime_1us@count
 18884  1C45  3000               	movlw	0
 18885  1C46  00A1               	movwf	DelayTime_1us@count+1
 18886  1C47  319A  22DA  319C   	fcall	_DelayTime_1us
 18887                           
 18888                           ;CC2500_B1.c: 119: RC4 = 0;
 18889  1C4A  0020               	movlb	0	; select bank0
 18890  1C4B  120E               	bcf	14,4	;volatile
 18891                           
 18892                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 18893  1C4C  3030               	movlw	48
 18894  1C4D  00A6               	movwf	??_CC2500_PowerRST
 18895  1C4E  0826               	movf	??_CC2500_PowerRST,w
 18896  1C4F  0021               	movlb	1	; select bank1
 18897  1C50  00BF               	movwf	_SPI0Buffer^(0+128)
 18898  1C51                     l304:	
 18899                           ;CC2500_B1.c: 121: while (RC2 == 1);
 18900                           
 18901  1C51  0020               	movlb	0	; select bank0
 18902  1C52  190E               	btfsc	14,2	;volatile
 18903  1C53  2C51               	goto	l304
 18904                           
 18905                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 18906  1C54  3198  20FB  319C   	fcall	_CC2500_WriteByte
 18907  1C57                     l307:	
 18908                           ;CC2500_B1.c: 123: while (RC2 == 1);
 18909                           
 18910  1C57  0020               	movlb	0	; select bank0
 18911  1C58  190E               	btfsc	14,2	;volatile
 18912  1C59  2C57               	goto	l307
 18913                           
 18914                           ;CC2500_B1.c: 124: RC0 = 0;
 18915  1C5A  100E               	bcf	14,0	;volatile
 18916                           
 18917                           ;CC2500_B1.c: 125: RC4 = 1;
 18918  1C5B  160E               	bsf	14,4	;volatile
 18919  1C5C  0008               	return
 18920  1C5D                     __end_of_CC2500_PowerRST:	
 18921                           
 18922                           	psect	text127
 18923  1B27                     __ptext127:	
 18924 ;; *************** function _CC2500_InitSetREG *****************
 18925 ;; Defined at:
 18926 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18927 ;; Parameters:    Size  Location     Type
 18928 ;;		None
 18929 ;; Auto vars:     Size  Location     Type
 18930 ;;  loop_c          1    8[BANK0 ] unsigned char 
 18931 ;;  temp2           1    7[BANK0 ] unsigned char 
 18932 ;;  temp1           1    6[BANK0 ] unsigned char 
 18933 ;; Return value:  Size  Location     Type
 18934 ;;		None               void
 18935 ;; Registers used:
 18936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18937 ;; Tracked objects:
 18938 ;;		On entry : 0/0
 18939 ;;		On exit  : 0/0
 18940 ;;		Unchanged: 0/0
 18941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18945 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18946 ;;Total ram usage:        4 bytes
 18947 ;; Hardware stack levels used:    1
 18948 ;; Hardware stack levels required when called:    6
 18949 ;; This function calls:
 18950 ;;		_CC2500_WriteREG
 18951 ;; This function is called by:
 18952 ;;		_CC2500_PowerOnInitial
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           
 18957                           ;psect for function _CC2500_InitSetREG
 18958  1B27                     _CC2500_InitSetREG:	
 18959                           
 18960                           ;CC2500_B1.c: 132: unsigned char loop_c;
 18961                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 18962                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 18963                           
 18964                           ;incstack = 0
 18965                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18966  1B27  0020               	movlb	0	; select bank0
 18967  1B28  01A8               	clrf	CC2500_InitSetREG@loop_c
 18968  1B29                     L12:	
 18969  1B29  302F               	movlw	47
 18970  1B2A  0228               	subwf	CC2500_InitSetREG@loop_c,w
 18971  1B2B  1803               	btfsc	3,0
 18972  1B2C  0008               	return
 18973                           
 18974                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 18975  1B2D  0828               	movf	CC2500_InitSetREG@loop_c,w
 18976  1B2E  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 18977  1B2F  0084               	movwf	4
 18978  1B30  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 18979  1B31  1803               	skipnc
 18980  1B32  3E01               	addlw	1
 18981  1B33  0085               	movwf	5
 18982  1B34  0800               	movf	0,w	;code access
 18983  1B35  00A5               	movwf	??_CC2500_InitSetREG
 18984  1B36  0825               	movf	??_CC2500_InitSetREG,w
 18985  1B37  00A6               	movwf	CC2500_InitSetREG@temp1
 18986                           
 18987                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 18988  1B38  0828               	movf	CC2500_InitSetREG@loop_c,w
 18989  1B39  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 18990  1B3A  0084               	movwf	4
 18991  1B3B  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 18992  1B3C  1803               	skipnc
 18993  1B3D  3E01               	addlw	1
 18994  1B3E  0085               	movwf	5
 18995  1B3F  0800               	movf	0,w	;code access
 18996  1B40  00A5               	movwf	??_CC2500_InitSetREG
 18997  1B41  0825               	movf	??_CC2500_InitSetREG,w
 18998  1B42  00A7               	movwf	CC2500_InitSetREG@temp2
 18999                           
 19000                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 19001  1B43  0827               	movf	CC2500_InitSetREG@temp2,w
 19002  1B44  00A5               	movwf	??_CC2500_InitSetREG
 19003  1B45  0825               	movf	??_CC2500_InitSetREG,w
 19004  1B46  00A2               	movwf	CC2500_WriteREG@value
 19005  1B47  0826               	movf	CC2500_InitSetREG@temp1,w
 19006  1B48  3199  2114  319B   	fcall	_CC2500_WriteREG
 19007  1B4B  3001               	movlw	1
 19008  1B4C  0020               	movlb	0	; select bank0
 19009  1B4D  00A5               	movwf	??_CC2500_InitSetREG
 19010  1B4E  0825               	movf	??_CC2500_InitSetREG,w
 19011  1B4F  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 19012  1B50  2B29               	goto	L12
 19013  1B51                     __end_of_CC2500_InitSetREG:	
 19014                           
 19015                           	psect	text128
 19016  19EE                     __ptext128:	
 19017 ;; *************** function _CC2500_InitPATable *****************
 19018 ;; Defined at:
 19019 ;;		line 146 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19020 ;; Parameters:    Size  Location     Type
 19021 ;;		None
 19022 ;; Auto vars:     Size  Location     Type
 19023 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19024 ;;  temp            1    6[BANK0 ] unsigned char 
 19025 ;; Return value:  Size  Location     Type
 19026 ;;		None               void
 19027 ;; Registers used:
 19028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19029 ;; Tracked objects:
 19030 ;;		On entry : 0/0
 19031 ;;		On exit  : 0/0
 19032 ;;		Unchanged: 0/0
 19033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19035 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19036 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19037 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19038 ;;Total ram usage:        3 bytes
 19039 ;; Hardware stack levels used:    1
 19040 ;; Hardware stack levels required when called:    6
 19041 ;; This function calls:
 19042 ;;		_CC2500_WriteREG
 19043 ;; This function is called by:
 19044 ;;		_CC2500_PowerOnInitial
 19045 ;; This function uses a non-reentrant model
 19046 ;;
 19047                           
 19048                           
 19049                           ;psect for function _CC2500_InitPATable
 19050  19EE                     _CC2500_InitPATable:	
 19051                           
 19052                           ;CC2500_B1.c: 147: unsigned char loop_d;
 19053                           ;CC2500_B1.c: 148: unsigned char temp;
 19054                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 19055                           
 19056                           ;incstack = 0
 19057                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19058  19EE  0020               	movlb	0	; select bank0
 19059  19EF  01A7               	clrf	CC2500_InitPATable@loop_d
 19060  19F0                     L13:	
 19061  19F0  3008               	movlw	8
 19062  19F1  0227               	subwf	CC2500_InitPATable@loop_d,w
 19063  19F2  1803               	btfsc	3,0
 19064  19F3  0008               	return
 19065                           
 19066                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 19067  19F4  0827               	movf	CC2500_InitPATable@loop_d,w
 19068  19F5  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 19069  19F6  0084               	movwf	4
 19070  19F7  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 19071  19F8  1803               	skipnc
 19072  19F9  3E01               	addlw	1
 19073  19FA  0085               	movwf	5
 19074  19FB  0800               	movf	0,w	;code access
 19075  19FC  00A5               	movwf	??_CC2500_InitPATable
 19076  19FD  0825               	movf	??_CC2500_InitPATable,w
 19077  19FE  00A6               	movwf	CC2500_InitPATable@temp
 19078                           
 19079                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 19080  19FF  0826               	movf	CC2500_InitPATable@temp,w
 19081  1A00  00A5               	movwf	??_CC2500_InitPATable
 19082  1A01  0825               	movf	??_CC2500_InitPATable,w
 19083  1A02  00A2               	movwf	CC2500_WriteREG@value
 19084  1A03  303E               	movlw	62
 19085  1A04  3199  2114  3199   	fcall	_CC2500_WriteREG
 19086  1A07  3001               	movlw	1
 19087  1A08  0020               	movlb	0	; select bank0
 19088  1A09  00A5               	movwf	??_CC2500_InitPATable
 19089  1A0A  0825               	movf	??_CC2500_InitPATable,w
 19090  1A0B  07A7               	addwf	CC2500_InitPATable@loop_d,f
 19091  1A0C  29F0               	goto	L13
 19092  1A0D                     __end_of_CC2500_InitPATable:	
 19093                           
 19094                           	psect	text129
 19095  1914                     __ptext129:	
 19096 ;; *************** function _CC2500_WriteREG *****************
 19097 ;; Defined at:
 19098 ;;		line 223 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19099 ;; Parameters:    Size  Location     Type
 19100 ;;  w_addr          1    wreg     unsigned char 
 19101 ;;  value           1    2[BANK0 ] unsigned char 
 19102 ;; Auto vars:     Size  Location     Type
 19103 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19104 ;; Return value:  Size  Location     Type
 19105 ;;		None               void
 19106 ;; Registers used:
 19107 ;;		wreg, status,2, status,0, pclath, cstack
 19108 ;; Tracked objects:
 19109 ;;		On entry : 0/0
 19110 ;;		On exit  : 0/0
 19111 ;;		Unchanged: 0/0
 19112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19113 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19117 ;;Total ram usage:        3 bytes
 19118 ;; Hardware stack levels used:    1
 19119 ;; Hardware stack levels required when called:    5
 19120 ;; This function calls:
 19121 ;;		_CC2500_WriteByte
 19122 ;; This function is called by:
 19123 ;;		_CC2500_InitSetREG
 19124 ;;		_CC2500_InitPATable
 19125 ;; This function uses a non-reentrant model
 19126 ;;
 19127                           
 19128                           
 19129                           ;psect for function _CC2500_WriteREG
 19130  1914                     _CC2500_WriteREG:	
 19131                           
 19132                           ;incstack = 0
 19133                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19134                           ;CC2500_WriteREG@w_addr stored from wreg
 19135  1914  0020               	movlb	0	; select bank0
 19136  1915  00A4               	movwf	CC2500_WriteREG@w_addr
 19137                           
 19138                           ;CC2500_B1.c: 224: RC4 = 0;
 19139  1916  120E               	bcf	14,4	;volatile
 19140                           
 19141                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 19142  1917  0824               	movf	CC2500_WriteREG@w_addr,w
 19143  1918  00A3               	movwf	??_CC2500_WriteREG
 19144  1919  0823               	movf	??_CC2500_WriteREG,w
 19145  191A  0021               	movlb	1	; select bank1
 19146  191B  00BF               	movwf	_SPI0Buffer^(0+128)
 19147  191C                     l349:	
 19148                           ;CC2500_B1.c: 226: while (RC2 == 1);
 19149                           
 19150  191C  0020               	movlb	0	; select bank0
 19151  191D  190E               	btfsc	14,2	;volatile
 19152  191E  291C               	goto	l349
 19153                           
 19154                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 19155  191F  3198  20FB  3199   	fcall	_CC2500_WriteByte
 19156                           
 19157                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 19158  1922  0020               	movlb	0	; select bank0
 19159  1923  0822               	movf	CC2500_WriteREG@value,w
 19160  1924  00A3               	movwf	??_CC2500_WriteREG
 19161  1925  0823               	movf	??_CC2500_WriteREG,w
 19162  1926  0021               	movlb	1	; select bank1
 19163  1927  00BF               	movwf	_SPI0Buffer^(0+128)
 19164                           
 19165                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 19166  1928  3198  20FB         	fcall	_CC2500_WriteByte
 19167                           
 19168                           ;CC2500_B1.c: 230: RC4 = 1;
 19169  192A  0020               	movlb	0	; select bank0
 19170  192B  160E               	bsf	14,4	;volatile
 19171  192C  0008               	return
 19172  192D                     __end_of_CC2500_WriteREG:	
 19173                           
 19174                           	psect	text130
 19175  26B1                     __ptext130:	
 19176 ;; *************** function _CC2500_FrequencyCabr *****************
 19177 ;; Defined at:
 19178 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19179 ;; Parameters:    Size  Location     Type
 19180 ;;		None
 19181 ;; Auto vars:     Size  Location     Type
 19182 ;;		None
 19183 ;; Return value:  Size  Location     Type
 19184 ;;		None               void
 19185 ;; Registers used:
 19186 ;;		wreg, status,2, status,0, pclath, cstack
 19187 ;; Tracked objects:
 19188 ;;		On entry : 0/0
 19189 ;;		On exit  : 0/0
 19190 ;;		Unchanged: 0/0
 19191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19196 ;;Total ram usage:        0 bytes
 19197 ;; Hardware stack levels used:    1
 19198 ;; Hardware stack levels required when called:    6
 19199 ;; This function calls:
 19200 ;;		_CC2500_WriteCommand
 19201 ;;		_DelayTime_1us
 19202 ;; This function is called by:
 19203 ;;		_CC2500_PowerOnInitial
 19204 ;; This function uses a non-reentrant model
 19205 ;;
 19206                           
 19207                           
 19208                           ;psect for function _CC2500_FrequencyCabr
 19209  26B1                     _CC2500_FrequencyCabr:	
 19210                           
 19211                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 19212                           
 19213                           ;incstack = 0
 19214                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19215  26B1  3033               	movlw	51
 19216  26B2  31A7  2790  31A6   	fcall	_CC2500_WriteCommand
 19217                           
 19218                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 19219  26B5  30E8               	movlw	232
 19220  26B6  0020               	movlb	0	; select bank0
 19221  26B7  00A0               	movwf	DelayTime_1us@count
 19222  26B8  3003               	movlw	3
 19223  26B9  00A1               	movwf	DelayTime_1us@count+1
 19224  26BA  319A  22DA         	fcall	_DelayTime_1us
 19225  26BC  0008               	return
 19226  26BD                     __end_of_CC2500_FrequencyCabr:	
 19227                           
 19228                           	psect	text131
 19229  1ADA                     __ptext131:	
 19230 ;; *************** function _DelayTime_1us *****************
 19231 ;; Defined at:
 19232 ;;		line 279 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19233 ;; Parameters:    Size  Location     Type
 19234 ;;  count           2    0[BANK0 ] int 
 19235 ;; Auto vars:     Size  Location     Type
 19236 ;;  j               2    4[BANK0 ] unsigned int 
 19237 ;;  i               2    2[BANK0 ] unsigned int 
 19238 ;; Return value:  Size  Location     Type
 19239 ;;		None               void
 19240 ;; Registers used:
 19241 ;;		wreg, status,2
 19242 ;; Tracked objects:
 19243 ;;		On entry : 0/0
 19244 ;;		On exit  : 0/0
 19245 ;;		Unchanged: 0/0
 19246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19247 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19248 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19251 ;;Total ram usage:        6 bytes
 19252 ;; Hardware stack levels used:    1
 19253 ;; Hardware stack levels required when called:    4
 19254 ;; This function calls:
 19255 ;;		Nothing
 19256 ;; This function is called by:
 19257 ;;		_CC2500_PowerRST
 19258 ;;		_CC2500_FrequencyCabr
 19259 ;; This function uses a non-reentrant model
 19260 ;;
 19261                           
 19262                           
 19263                           ;psect for function _DelayTime_1us
 19264  1ADA                     _DelayTime_1us:	
 19265                           
 19266                           ;CC2500_B1.c: 280: unsigned int i, j;
 19267                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 19268                           
 19269                           ;incstack = 0
 19270                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19271  1ADA  3001               	movlw	1
 19272  1ADB  0020               	movlb	0	; select bank0
 19273  1ADC  00A2               	movwf	DelayTime_1us@i
 19274  1ADD  3000               	movlw	0
 19275  1ADE  00A3               	movwf	DelayTime_1us@i+1
 19276  1ADF                     l373:	
 19277  1ADF  0821               	movf	DelayTime_1us@count+1,w
 19278  1AE0  0223               	subwf	DelayTime_1us@i+1,w
 19279  1AE1  1D03               	skipz
 19280  1AE2  2AE5               	goto	u8045
 19281  1AE3  0820               	movf	DelayTime_1us@count,w
 19282  1AE4  0222               	subwf	DelayTime_1us@i,w
 19283  1AE5                     u8045:	
 19284  1AE5  1803               	btfsc	3,0
 19285  1AE6  0008               	return
 19286                           
 19287                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 19288  1AE7  01A4               	clrf	DelayTime_1us@j
 19289  1AE8  01A5               	clrf	DelayTime_1us@j+1
 19290  1AE9  3000               	movlw	0
 19291  1AEA  0225               	subwf	DelayTime_1us@j+1,w
 19292  1AEB  3002               	movlw	2
 19293  1AEC  1903               	skipnz
 19294  1AED  0224               	subwf	DelayTime_1us@j,w
 19295  1AEE  1803               	btfsc	3,0
 19296  1AEF  2AFB               	goto	l8384
 19297  1AF0                     l8382:	
 19298  1AF0  3001               	movlw	1
 19299  1AF1  07A4               	addwf	DelayTime_1us@j,f
 19300  1AF2  3000               	movlw	0
 19301  1AF3  3DA5               	addwfc	DelayTime_1us@j+1,f
 19302  1AF4  3000               	movlw	0
 19303  1AF5  0225               	subwf	DelayTime_1us@j+1,w
 19304  1AF6  3002               	movlw	2
 19305  1AF7  1903               	skipnz
 19306  1AF8  0224               	subwf	DelayTime_1us@j,w
 19307  1AF9  1C03               	skipc
 19308  1AFA  2AF0               	goto	l8382
 19309  1AFB                     l8384:	
 19310  1AFB  3001               	movlw	1
 19311  1AFC  07A2               	addwf	DelayTime_1us@i,f
 19312  1AFD  3000               	movlw	0
 19313  1AFE  3DA3               	addwfc	DelayTime_1us@i+1,f
 19314  1AFF  2ADF               	goto	l373
 19315  1B00                     __end_of_DelayTime_1us:	
 19316                           
 19317                           	psect	text132
 19318  25BC                     __ptext132:	
 19319 ;; *************** function _CC2500_ClearTXFIFO *****************
 19320 ;; Defined at:
 19321 ;;		line 159 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;		None
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;		None
 19326 ;; Return value:  Size  Location     Type
 19327 ;;		None               void
 19328 ;; Registers used:
 19329 ;;		wreg, status,2, status,0, pclath, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;Total ram usage:        0 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    6
 19342 ;; This function calls:
 19343 ;;		_CC2500_WriteCommand
 19344 ;; This function is called by:
 19345 ;;		_CC2500_PowerOnInitial
 19346 ;; This function uses a non-reentrant model
 19347 ;;
 19348                           
 19349                           
 19350                           ;psect for function _CC2500_ClearTXFIFO
 19351  25BC                     _CC2500_ClearTXFIFO:	
 19352                           
 19353                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 19354                           
 19355                           ;incstack = 0
 19356                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19357  25BC  303B               	movlw	59
 19358  25BD  31A7  2790         	fcall	_CC2500_WriteCommand
 19359  25BF  0008               	return
 19360  25C0                     __end_of_CC2500_ClearTXFIFO:	
 19361                           
 19362                           	psect	text133
 19363  25B8                     __ptext133:	
 19364 ;; *************** function _CC2500_ClearRXFIFO *****************
 19365 ;; Defined at:
 19366 ;;		line 166 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19367 ;; Parameters:    Size  Location     Type
 19368 ;;		None
 19369 ;; Auto vars:     Size  Location     Type
 19370 ;;		None
 19371 ;; Return value:  Size  Location     Type
 19372 ;;		None               void
 19373 ;; Registers used:
 19374 ;;		wreg, status,2, status,0, pclath, cstack
 19375 ;; Tracked objects:
 19376 ;;		On entry : 0/0
 19377 ;;		On exit  : 0/0
 19378 ;;		Unchanged: 0/0
 19379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19384 ;;Total ram usage:        0 bytes
 19385 ;; Hardware stack levels used:    1
 19386 ;; Hardware stack levels required when called:    6
 19387 ;; This function calls:
 19388 ;;		_CC2500_WriteCommand
 19389 ;; This function is called by:
 19390 ;;		_CC2500_PowerOnInitial
 19391 ;; This function uses a non-reentrant model
 19392 ;;
 19393                           
 19394                           
 19395                           ;psect for function _CC2500_ClearRXFIFO
 19396  25B8                     _CC2500_ClearRXFIFO:	
 19397                           
 19398                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 19399                           
 19400                           ;incstack = 0
 19401                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19402  25B8  303A               	movlw	58
 19403  25B9  31A7  2790         	fcall	_CC2500_WriteCommand
 19404  25BB  0008               	return
 19405  25BC                     __end_of_CC2500_ClearRXFIFO:	
 19406                           
 19407                           	psect	text134
 19408  2790                     __ptext134:	
 19409 ;; *************** function _CC2500_WriteCommand *****************
 19410 ;; Defined at:
 19411 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19412 ;; Parameters:    Size  Location     Type
 19413 ;;  command         1    wreg     unsigned char 
 19414 ;; Auto vars:     Size  Location     Type
 19415 ;;  command         1    3[BANK0 ] unsigned char 
 19416 ;; Return value:  Size  Location     Type
 19417 ;;		None               void
 19418 ;; Registers used:
 19419 ;;		wreg, status,2, status,0, pclath, cstack
 19420 ;; Tracked objects:
 19421 ;;		On entry : 0/0
 19422 ;;		On exit  : 0/0
 19423 ;;		Unchanged: 0/0
 19424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19429 ;;Total ram usage:        2 bytes
 19430 ;; Hardware stack levels used:    1
 19431 ;; Hardware stack levels required when called:    5
 19432 ;; This function calls:
 19433 ;;		_CC2500_WriteByte
 19434 ;; This function is called by:
 19435 ;;		_CC2500_TxData
 19436 ;;		_CC2500_RxData
 19437 ;;		_CC2500_ClearTXFIFO
 19438 ;;		_CC2500_ClearRXFIFO
 19439 ;;		_CC2500_FrequencyCabr
 19440 ;;		_CC2500_SIDLEMode
 19441 ;;		_setRF_Main
 19442 ;;		_RF_RxDisable
 19443 ;; This function uses a non-reentrant model
 19444 ;;
 19445                           
 19446                           
 19447                           ;psect for function _CC2500_WriteCommand
 19448  2790                     _CC2500_WriteCommand:	
 19449                           
 19450                           ;incstack = 0
 19451                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19452                           ;CC2500_WriteCommand@command stored from wreg
 19453  2790  0020               	movlb	0	; select bank0
 19454  2791  00A3               	movwf	CC2500_WriteCommand@command
 19455                           
 19456                           ;CC2500_B1.c: 250: RC4 = 0;
 19457  2792  120E               	bcf	14,4	;volatile
 19458                           
 19459                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 19460  2793  0823               	movf	CC2500_WriteCommand@command,w
 19461  2794  00A2               	movwf	??_CC2500_WriteCommand
 19462  2795  0822               	movf	??_CC2500_WriteCommand,w
 19463  2796  0021               	movlb	1	; select bank1
 19464  2797  00BF               	movwf	_SPI0Buffer^(0+128)
 19465  2798                     l361:	
 19466                           ;CC2500_B1.c: 253: while (RC2 == 1);
 19467                           
 19468  2798  0020               	movlb	0	; select bank0
 19469  2799  190E               	btfsc	14,2	;volatile
 19470  279A  2F98               	goto	l361
 19471                           
 19472                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 19473  279B  3198  20FB         	fcall	_CC2500_WriteByte
 19474                           
 19475                           ;CC2500_B1.c: 256: RC4 = 1;
 19476  279D  0020               	movlb	0	; select bank0
 19477  279E  160E               	bsf	14,4	;volatile
 19478  279F  0008               	return
 19479  27A0                     __end_of_CC2500_WriteCommand:	
 19480                           
 19481                           	psect	text135
 19482  18FB                     __ptext135:	
 19483 ;; *************** function _CC2500_WriteByte *****************
 19484 ;; Defined at:
 19485 ;;		line 191 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19486 ;; Parameters:    Size  Location     Type
 19487 ;;		None
 19488 ;; Auto vars:     Size  Location     Type
 19489 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19490 ;; Return value:  Size  Location     Type
 19491 ;;		None               void
 19492 ;; Registers used:
 19493 ;;		wreg, status,2, status,0
 19494 ;; Tracked objects:
 19495 ;;		On entry : 0/0
 19496 ;;		On exit  : 0/0
 19497 ;;		Unchanged: 0/0
 19498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19501 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19502 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19503 ;;Total ram usage:        2 bytes
 19504 ;; Hardware stack levels used:    1
 19505 ;; Hardware stack levels required when called:    4
 19506 ;; This function calls:
 19507 ;;		Nothing
 19508 ;; This function is called by:
 19509 ;;		_CC2500_TxData
 19510 ;;		_CC2500_RxData
 19511 ;;		_CC2500_PowerRST
 19512 ;;		_CC2500_WriteREG
 19513 ;;		_CC2500_WriteCommand
 19514 ;;		_CC2500_ReadStatus
 19515 ;;		_CC2500_ReadREG
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           
 19520                           ;psect for function _CC2500_WriteByte
 19521  18FB                     _CC2500_WriteByte:	
 19522                           
 19523                           ;CC2500_B1.c: 192: unsigned char loop_a;
 19524                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 19525                           
 19526                           ;incstack = 0
 19527                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19528  18FB  0020               	movlb	0	; select bank0
 19529  18FC  01A1               	clrf	CC2500_WriteByte@loop_a
 19530  18FD                     L14:	
 19531  18FD  3008               	movlw	8
 19532  18FE  0221               	subwf	CC2500_WriteByte@loop_a,w
 19533  18FF  1803               	btfsc	3,0
 19534  1900  0008               	return
 19535                           
 19536                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 19537  1901  0021               	movlb	1	; select bank1
 19538  1902  1FBF               	btfss	_SPI0Buffer^(0+128),7
 19539  1903  2907               	goto	l337
 19540                           
 19541                           ;CC2500_B1.c: 195: RC0 = 1;
 19542  1904  0020               	movlb	0	; select bank0
 19543  1905  140E               	bsf	14,0	;volatile
 19544  1906  2909               	goto	l338
 19545  1907                     l337:	
 19546                           
 19547                           ;CC2500_B1.c: 196: else
 19548                           ;CC2500_B1.c: 197: RC0 = 0;
 19549  1907  0020               	movlb	0	; select bank0
 19550  1908  100E               	bcf	14,0	;volatile
 19551  1909                     l338:	
 19552                           
 19553                           ;CC2500_B1.c: 198: RC1 = 1;
 19554  1909  148E               	bsf	14,1	;volatile
 19555                           
 19556                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 19557  190A  1003               	clrc
 19558  190B  0021               	movlb	1	; select bank1
 19559  190C  0DBF               	rlf	_SPI0Buffer^(0+128),f
 19560                           
 19561                           ;CC2500_B1.c: 200: RC1 = 0;
 19562  190D  0020               	movlb	0	; select bank0
 19563  190E  108E               	bcf	14,1	;volatile
 19564  190F  3001               	movlw	1
 19565  1910  00A0               	movwf	??_CC2500_WriteByte
 19566  1911  0820               	movf	??_CC2500_WriteByte,w
 19567  1912  07A1               	addwf	CC2500_WriteByte@loop_a,f
 19568  1913  28FD               	goto	L14
 19569  1914                     __end_of_CC2500_WriteByte:	
 19570                           
 19571                           	psect	text136
 19572  0B03                     __ptext136:	
 19573 ;; *************** function _Buzzer_Main *****************
 19574 ;; Defined at:
 19575 ;;		line 47 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 19576 ;; Parameters:    Size  Location     Type
 19577 ;;		None
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;		None
 19580 ;; Return value:  Size  Location     Type
 19581 ;;		None               void
 19582 ;; Registers used:
 19583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19591 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19593 ;;Total ram usage:        4 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    4
 19596 ;; This function calls:
 19597 ;;		Nothing
 19598 ;; This function is called by:
 19599 ;;		_main
 19600 ;; This function uses a non-reentrant model
 19601 ;;
 19602                           
 19603                           
 19604                           ;psect for function _Buzzer_Main
 19605  0B03                     _Buzzer_Main:	
 19606                           
 19607                           ;Buzzer_B1.c: 48: Buz->Switch = (RB3) ? 1 : 0;
 19608                           
 19609                           ;incstack = 0
 19610                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19611  0B03  0877               	movf	_Buz,w
 19612  0B04  0086               	movwf	6
 19613  0B05  3001               	movlw	1	; select bank2/3
 19614  0B06  0087               	movwf	7
 19615  0B07  1281               	bcf	1,5
 19616  0B08  0020               	movlb	0	; select bank0
 19617  0B09  198D               	btfsc	13,3	;volatile
 19618  0B0A  1681               	bsf	1,5
 19619                           
 19620                           ;Buzzer_B1.c: 50: if (Buz->GO) {
 19621  0B0B  0877               	movf	_Buz,w
 19622  0B0C  0086               	movwf	6
 19623  0B0D  3001               	movlw	1	; select bank2/3
 19624  0B0E  0087               	movwf	7
 19625  0B0F  1C81               	btfss	1,1
 19626  0B10  0008               	return
 19627                           
 19628                           ;Buzzer_B1.c: 52: if (Buz->Time >= Buz->TimeValue) {
 19629  0B11  0877               	movf	_Buz,w
 19630  0B12  3E06               	addlw	6
 19631  0B13  0086               	movwf	6
 19632  0B14  3001               	movlw	1	; select bank2/3
 19633  0B15  0087               	movwf	7
 19634  0B16  3F40               	moviw [0]fsr1
 19635  0B17  0020               	movlb	0	; select bank0
 19636  0B18  00A0               	movwf	??_Buzzer_Main
 19637  0B19  3F41               	moviw [1]fsr1
 19638  0B1A  00A1               	movwf	??_Buzzer_Main+1
 19639  0B1B  0A77               	incf	_Buz,w
 19640  0B1C  0086               	movwf	6
 19641  0B1D  3001               	movlw	1	; select bank2/3
 19642  0B1E  0087               	movwf	7
 19643  0B1F  3F40               	moviw [0]fsr1
 19644  0B20  00A2               	movwf	??_Buzzer_Main+2
 19645  0B21  3F41               	moviw [1]fsr1
 19646  0B22  00A3               	movwf	??_Buzzer_Main+3
 19647  0B23  0821               	movf	??_Buzzer_Main+1,w
 19648  0B24  0223               	subwf	??_Buzzer_Main+3,w
 19649  0B25  1D03               	skipz
 19650  0B26  2B29               	goto	u6585
 19651  0B27  0820               	movf	??_Buzzer_Main,w
 19652  0B28  0222               	subwf	??_Buzzer_Main+2,w
 19653  0B29                     u6585:	
 19654  0B29  1C03               	skipc
 19655  0B2A  0008               	return
 19656                           
 19657                           ;Buzzer_B1.c: 53: Buz->Time = 0;
 19658  0B2B  0A77               	incf	_Buz,w
 19659  0B2C  0086               	movwf	6
 19660  0B2D  3001               	movlw	1	; select bank2/3
 19661  0B2E  0087               	movwf	7
 19662  0B2F  3000               	movlw	0
 19663  0B30  3FC0               	movwi [0]fsr1
 19664  0B31  3FC1               	movwi [1]fsr1
 19665                           
 19666                           ;Buzzer_B1.c: 54: if (!Buz->Switch) {
 19667  0B32  0877               	movf	_Buz,w
 19668  0B33  0086               	movwf	6
 19669  0B34  3001               	movlw	1	; select bank2/3
 19670  0B35  0087               	movwf	7
 19671  0B36  1A81               	btfsc	1,5
 19672  0B37  2B9D               	goto	l7408
 19673                           
 19674                           ;Buzzer_B1.c: 55: if (Buz->Count == 0) {
 19675  0B38  0877               	movf	_Buz,w
 19676  0B39  3E03               	addlw	3
 19677  0B3A  0086               	movwf	6
 19678  0B3B  3001               	movlw	1	; select bank2/3
 19679  0B3C  0087               	movwf	7
 19680  0B3D  0881               	movf	1,f
 19681  0B3E  1D03               	skipz
 19682  0B3F  2B96               	goto	l7404
 19683                           
 19684                           ;Buzzer_B1.c: 56: if (Buz->BufferStatus1) {
 19685  0B40  0877               	movf	_Buz,w
 19686  0B41  0086               	movwf	6
 19687  0B42  3001               	movlw	1	; select bank2/3
 19688  0B43  0087               	movwf	7
 19689  0B44  1D81               	btfss	1,3
 19690  0B45  2B68               	goto	l7396
 19691                           
 19692                           ;Buzzer_B1.c: 57: Buz->BufferStatus1 = 0;
 19693  0B46  0877               	movf	_Buz,w
 19694  0B47  0086               	movwf	6
 19695  0B48  3001               	movlw	1	; select bank2/3
 19696  0B49  0087               	movwf	7
 19697  0B4A  1181               	bcf	1,3
 19698                           
 19699                           ;Buzzer_B1.c: 58: Buz->Count = Buz->CountBuffer1;
 19700  0B4B  0877               	movf	_Buz,w
 19701  0B4C  3E04               	addlw	4
 19702  0B4D  0086               	movwf	6
 19703  0B4E  3001               	movlw	1	; select bank2/3
 19704  0B4F  0087               	movwf	7
 19705  0B50  0801               	movf	1,w
 19706  0B51  00A0               	movwf	??_Buzzer_Main
 19707  0B52  0877               	movf	_Buz,w
 19708  0B53  3E03               	addlw	3
 19709  0B54  0086               	movwf	6
 19710  0B55  3001               	movlw	1	; select bank2/3
 19711  0B56  0087               	movwf	7
 19712  0B57  0820               	movf	??_Buzzer_Main,w
 19713  0B58  0081               	movwf	1
 19714                           
 19715                           ;Buzzer_B1.c: 59: Buz->TimeValue = Buz->TimeValueBuffer1;
 19716  0B59  0877               	movf	_Buz,w
 19717  0B5A  3E08               	addlw	8
 19718  0B5B  0086               	movwf	6
 19719  0B5C  3001               	movlw	1	; select bank2/3
 19720  0B5D  0087               	movwf	7
 19721  0B5E  0877               	movf	_Buz,w
 19722  0B5F  3E06               	addlw	6
 19723  0B60  0084               	movwf	4
 19724  0B61  3001               	movlw	1	; select bank2/3
 19725  0B62  0085               	movwf	5
 19726  0B63  3F40               	moviw [0]fsr1
 19727  0B64  3F80               	movwi [0]fsr0
 19728  0B65  3F41               	moviw [1]fsr1
 19729  0B66  3F81               	movwi [1]fsr0
 19730                           
 19731                           ;Buzzer_B1.c: 60: } else if (Buz->BufferStatus2) {
 19732  0B67  0008               	return
 19733  0B68                     l7396:	
 19734  0B68  0877               	movf	_Buz,w
 19735  0B69  0086               	movwf	6
 19736  0B6A  3001               	movlw	1	; select bank2/3
 19737  0B6B  0087               	movwf	7
 19738  0B6C  1E01               	btfss	1,4
 19739  0B6D  2B90               	goto	l7402
 19740                           
 19741                           ;Buzzer_B1.c: 61: Buz->BufferStatus2 = 0;
 19742  0B6E  0877               	movf	_Buz,w
 19743  0B6F  0086               	movwf	6
 19744  0B70  3001               	movlw	1	; select bank2/3
 19745  0B71  0087               	movwf	7
 19746  0B72  1201               	bcf	1,4
 19747                           
 19748                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer2;
 19749  0B73  0877               	movf	_Buz,w
 19750  0B74  3E05               	addlw	5
 19751  0B75  0086               	movwf	6
 19752  0B76  3001               	movlw	1	; select bank2/3
 19753  0B77  0087               	movwf	7
 19754  0B78  0801               	movf	1,w
 19755  0B79  00A0               	movwf	??_Buzzer_Main
 19756  0B7A  0877               	movf	_Buz,w
 19757  0B7B  3E03               	addlw	3
 19758  0B7C  0086               	movwf	6
 19759  0B7D  3001               	movlw	1	; select bank2/3
 19760  0B7E  0087               	movwf	7
 19761  0B7F  0820               	movf	??_Buzzer_Main,w
 19762  0B80  0081               	movwf	1
 19763                           
 19764                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer2;
 19765  0B81  0877               	movf	_Buz,w
 19766  0B82  3E0A               	addlw	10
 19767  0B83  0086               	movwf	6
 19768  0B84  3001               	movlw	1	; select bank2/3
 19769  0B85  0087               	movwf	7
 19770  0B86  0877               	movf	_Buz,w
 19771  0B87  3E06               	addlw	6
 19772  0B88  0084               	movwf	4
 19773  0B89  3001               	movlw	1	; select bank2/3
 19774  0B8A  0085               	movwf	5
 19775  0B8B  3F40               	moviw [0]fsr1
 19776  0B8C  3F80               	movwi [0]fsr0
 19777  0B8D  3F41               	moviw [1]fsr1
 19778  0B8E  3F81               	movwi [1]fsr0
 19779                           
 19780                           ;Buzzer_B1.c: 64: } else {
 19781  0B8F  0008               	return
 19782  0B90                     l7402:	
 19783                           
 19784                           ;Buzzer_B1.c: 65: Buz->GO = 0;
 19785  0B90  0877               	movf	_Buz,w
 19786  0B91  0086               	movwf	6
 19787  0B92  3001               	movlw	1	; select bank2/3
 19788  0B93  0087               	movwf	7
 19789  0B94  1081               	bcf	1,1
 19790                           
 19791                           ;Buzzer_B1.c: 66: }
 19792                           ;Buzzer_B1.c: 67: } else {
 19793  0B95  0008               	return
 19794  0B96                     l7404:	
 19795                           
 19796                           ;Buzzer_B1.c: 68: Buz->Switch = 1;
 19797  0B96  0877               	movf	_Buz,w
 19798  0B97  0086               	movwf	6
 19799  0B98  3001               	movlw	1	; select bank2/3
 19800  0B99  0087               	movwf	7
 19801  0B9A  1681               	bsf	1,5
 19802                           
 19803                           ;Buzzer_B1.c: 70: RB3 = 1;
 19804  0B9B  158D               	bsf	13,3	;volatile
 19805                           
 19806                           ;Buzzer_B1.c: 71: }
 19807                           ;Buzzer_B1.c: 72: } else {
 19808  0B9C  0008               	return
 19809  0B9D                     l7408:	
 19810                           
 19811                           ;Buzzer_B1.c: 73: Buz->Switch = 0;
 19812  0B9D  0877               	movf	_Buz,w
 19813  0B9E  0086               	movwf	6
 19814  0B9F  3001               	movlw	1	; select bank2/3
 19815  0BA0  0087               	movwf	7
 19816  0BA1  1281               	bcf	1,5
 19817                           
 19818                           ;Buzzer_B1.c: 75: RB3 = 0;
 19819  0BA2  118D               	bcf	13,3	;volatile
 19820                           
 19821                           ;Buzzer_B1.c: 77: Buz->Count--;
 19822  0BA3  0877               	movf	_Buz,w
 19823  0BA4  3E03               	addlw	3
 19824  0BA5  0086               	movwf	6
 19825  0BA6  3001               	movlw	1	; select bank2/3
 19826  0BA7  0087               	movwf	7
 19827  0BA8  3001               	movlw	1
 19828  0BA9  0281               	subwf	1,f
 19829  0BAA  0008               	return
 19830  0BAB                     __end_of_Buzzer_Main:	
 19831                           
 19832                           	psect	text137
 19833  2636                     __ptext137:	
 19834 ;; *************** function _Buzzer_Initialization *****************
 19835 ;; Defined at:
 19836 ;;		line 11 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;		None
 19841 ;; Return value:  Size  Location     Type
 19842 ;;		None               void
 19843 ;; Registers used:
 19844 ;;		wreg, fsr1l, fsr1h
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19854 ;;Total ram usage:        1 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    4
 19857 ;; This function calls:
 19858 ;;		Nothing
 19859 ;; This function is called by:
 19860 ;;		_main
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           
 19865                           ;psect for function _Buzzer_Initialization
 19866  2636                     _Buzzer_Initialization:	
 19867                           
 19868                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 19869                           
 19870                           ;incstack = 0
 19871                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 19872  2636  304D               	movlw	_Buz1& (0+255)
 19873  2637  0020               	movlb	0	; select bank0
 19874  2638  00A0               	movwf	??_Buzzer_Initialization
 19875  2639  0820               	movf	??_Buzzer_Initialization,w
 19876  263A  00F7               	movwf	_Buz
 19877                           
 19878                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 19879  263B  0877               	movf	_Buz,w
 19880  263C  0086               	movwf	6
 19881  263D  3001               	movlw	1	; select bank2/3
 19882  263E  0087               	movwf	7
 19883  263F  1401               	bsf	1,0
 19884  2640  0008               	return
 19885  2641                     __end_of_Buzzer_Initialization:	
 19886                           
 19887                           	psect	intentry
 19888  0004                     __pintentry:	
 19889 ;; *************** function _ISR *****************
 19890 ;; Defined at:
 19891 ;;		line 99 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19892 ;; Parameters:    Size  Location     Type
 19893 ;;		None
 19894 ;; Auto vars:     Size  Location     Type
 19895 ;;		None
 19896 ;; Return value:  Size  Location     Type
 19897 ;;		None               void
 19898 ;; Registers used:
 19899 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19900 ;; Tracked objects:
 19901 ;;		On entry : 0/0
 19902 ;;		On exit  : 0/0
 19903 ;;		Unchanged: 0/0
 19904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19909 ;;Total ram usage:        1 bytes
 19910 ;; Hardware stack levels used:    1
 19911 ;; Hardware stack levels required when called:    3
 19912 ;; This function calls:
 19913 ;;		_INT_ISR
 19914 ;;		_IOC_ISR
 19915 ;;		_TMR0_ISR
 19916 ;; This function is called by:
 19917 ;;		Interrupt level 1
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921  0004                     _ISR:	
 19922                           
 19923                           ;incstack = 0
 19924                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19925  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19926  0005  3180               	pagesel	$
 19927  0006  0020               	movlb	0	; select bank0
 19928  0007  087F               	movf	127,w
 19929  0008  00F6               	movwf	??_ISR
 19930                           
 19931                           ;MCU_B1.c: 101: IOC_ISR();
 19932  0009  319A  22B6  3180   	fcall	_IOC_ISR
 19933                           
 19934                           ;MCU_B1.c: 103: TMR0_ISR();
 19935  000C  3182  22EE  3180   	fcall	_TMR0_ISR
 19936                           
 19937                           ;MCU_B1.c: 105: ;;
 19938                           ;MCU_B1.c: 109: INT_ISR();
 19939  000F  31A6  26A5         	fcall	_INT_ISR
 19940  0011  0876               	movf	??_ISR,w
 19941  0012  0020               	movlb	0	; select bank0
 19942  0013  00FF               	movwf	127
 19943  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 19944  0015  0009               	retfie
 19945  0016                     __end_of_ISR:	
 19946                           
 19947                           	psect	text139
 19948  02EE                     __ptext139:	
 19949 ;; *************** function _TMR0_ISR *****************
 19950 ;; Defined at:
 19951 ;;		line 127 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 19952 ;; Parameters:    Size  Location     Type
 19953 ;;		None
 19954 ;; Auto vars:     Size  Location     Type
 19955 ;;		None
 19956 ;; Return value:  Size  Location     Type
 19957 ;;		None               void
 19958 ;; Registers used:
 19959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19960 ;; Tracked objects:
 19961 ;;		On entry : 0/0
 19962 ;;		On exit  : 0/0
 19963 ;;		Unchanged: 0/0
 19964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19967 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19968 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19969 ;;Total ram usage:        4 bytes
 19970 ;; Hardware stack levels used:    1
 19971 ;; Hardware stack levels required when called:    1
 19972 ;; This function calls:
 19973 ;;		i1_setLoad_StatusOff
 19974 ;; This function is called by:
 19975 ;;		_ISR
 19976 ;; This function uses a non-reentrant model
 19977 ;;
 19978                           
 19979                           
 19980                           ;psect for function _TMR0_ISR
 19981  02EE                     _TMR0_ISR:	
 19982                           
 19983                           ;MCU_B1.c: 128: if (TMR0IE && TMR0IF) {
 19984                           
 19985                           ;incstack = 0
 19986                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19987  02EE  1E8B               	btfss	11,5	;volatile
 19988  02EF  0008               	return
 19989  02F0  1D0B               	btfss	11,2	;volatile
 19990  02F1  0008               	return
 19991                           
 19992                           ;MCU_B1.c: 129: TMR0 = (256-90);
 19993  02F2  30A6               	movlw	166
 19994  02F3  0020               	movlb	0	; select bank0
 19995  02F4  0095               	movwf	21	;volatile
 19996                           
 19997                           ;MCU_B1.c: 130: TMR0IF = 0;
 19998  02F5  110B               	bcf	11,2	;volatile
 19999                           
 20000                           ;MCU_B1.c: 135: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20001  02F6  0878               	movf	_DimmerLights11,w
 20002  02F7  0086               	movwf	6
 20003  02F8  3001               	movlw	1	; select bank2/3
 20004  02F9  0087               	movwf	7
 20005  02FA  1C01               	btfss	1,0
 20006  02FB  2B47               	goto	i1l7486
 20007  02FC  3001               	movlw	1
 20008  02FD  00F2               	movwf	??_TMR0_ISR
 20009  02FE  0878               	movf	_DimmerLights11,w
 20010  02FF  3E03               	addlw	3
 20011  0300  0086               	movwf	6
 20012  0301  3001               	movlw	1	; select bank2/3
 20013  0302  0087               	movwf	7
 20014  0303  0872               	movf	??_TMR0_ISR,w
 20015  0304  0781               	addwf	1,f
 20016  0305  0021               	movlb	1	; select bank1
 20017  0306  0839               	movf	_Dimmer^(0+128),w
 20018  0307  3E02               	addlw	2
 20019  0308  0086               	movwf	6
 20020  0309  0187               	clrf	7
 20021  030A  0801               	movf	1,w
 20022  030B  00F2               	movwf	??_TMR0_ISR
 20023  030C  01F3               	clrf	??_TMR0_ISR+1
 20024  030D  09F2               	comf	??_TMR0_ISR,f
 20025  030E  09F3               	comf	??_TMR0_ISR+1,f
 20026  030F  0AF2               	incf	??_TMR0_ISR,f
 20027  0310  1903               	skipnz
 20028  0311  0AF3               	incf	??_TMR0_ISR+1,f
 20029  0312  0878               	movf	_DimmerLights11,w
 20030  0313  3E04               	addlw	4
 20031  0314  0086               	movwf	6
 20032  0315  3001               	movlw	1	; select bank2/3
 20033  0316  0087               	movwf	7
 20034  0317  0801               	movf	1,w
 20035  0318  0772               	addwf	??_TMR0_ISR,w
 20036  0319  00F4               	movwf	??_TMR0_ISR+2
 20037  031A  0873               	movf	??_TMR0_ISR+1,w
 20038  031B  1803               	skipnc
 20039  031C  0A73               	incf	??_TMR0_ISR+1,w
 20040  031D  00F5               	movwf	??_TMR0_ISR+3
 20041  031E  0878               	movf	_DimmerLights11,w
 20042  031F  3E03               	addlw	3
 20043  0320  0086               	movwf	6
 20044  0321  3001               	movlw	1	; select bank2/3
 20045  0322  0087               	movwf	7
 20046  0323  0875               	movf	??_TMR0_ISR+3,w
 20047  0324  3A80               	xorlw	128
 20048  0325  3C80               	sublw	128
 20049  0326  1D03               	skipz
 20050  0327  2B2A               	goto	u670_25
 20051  0328  0874               	movf	??_TMR0_ISR+2,w
 20052  0329  0201               	subwf	1,w
 20053  032A                     u670_25:	
 20054  032A  1C03               	skipc
 20055  032B  2C83               	goto	i1l7556
 20056  032C  0878               	movf	_DimmerLights11,w
 20057  032D  3E03               	addlw	3
 20058  032E  0086               	movwf	6
 20059  032F  3001               	movlw	1	; select bank2/3
 20060  0330  0087               	movwf	7
 20061  0331  0181               	clrf	1
 20062  0332  0878               	movf	_DimmerLights11,w
 20063  0333  0086               	movwf	6
 20064  0334  3001               	movlw	1	; select bank2/3
 20065  0335  0087               	movwf	7
 20066  0336  1001               	bcf	1,0
 20067  0337  0878               	movf	_DimmerLights11,w
 20068  0338  3E07               	addlw	7
 20069  0339  0086               	movwf	6
 20070  033A  3001               	movlw	1	; select bank2/3
 20071  033B  0087               	movwf	7
 20072  033C  1401               	bsf	1,0
 20073  033D  0878               	movf	_DimmerLights11,w
 20074  033E  0086               	movwf	6
 20075  033F  3001               	movlw	1	; select bank2/3
 20076  0340  0087               	movwf	7
 20077  0341  1F01               	btfss	1,6
 20078  0342  2C83               	goto	i1l7556
 20079  0343  0020               	movlb	0	; select bank0
 20080  0344  178C               	bsf	12,7	;volatile
 20081  0345  160D               	bsf	13,4	;volatile
 20082  0346  2C83               	goto	i1l7556
 20083  0347                     i1l7486:	
 20084  0347  0878               	movf	_DimmerLights11,w
 20085  0348  3E07               	addlw	7
 20086  0349  0086               	movwf	6
 20087  034A  3001               	movlw	1	; select bank2/3
 20088  034B  0087               	movwf	7
 20089  034C  1C01               	btfss	1,0
 20090  034D  2C4D               	goto	i1l7546
 20091  034E  0878               	movf	_DimmerLights11,w
 20092  034F  3E07               	addlw	7
 20093  0350  0086               	movwf	6
 20094  0351  3001               	movlw	1	; select bank2/3
 20095  0352  0087               	movwf	7
 20096  0353  1001               	bcf	1,0
 20097  0354  0878               	movf	_DimmerLights11,w
 20098  0355  0086               	movwf	6
 20099  0356  3001               	movlw	1	; select bank2/3
 20100  0357  0087               	movwf	7
 20101  0358  1C81               	btfss	1,1
 20102  0359  2C4D               	goto	i1l7546
 20103  035A  3001               	movlw	1
 20104  035B  00F2               	movwf	??_TMR0_ISR
 20105  035C  0A78               	incf	_DimmerLights11,w
 20106  035D  0086               	movwf	6
 20107  035E  3001               	movlw	1	; select bank2/3
 20108  035F  0087               	movwf	7
 20109  0360  0872               	movf	??_TMR0_ISR,w
 20110  0361  0781               	addwf	1,f
 20111  0362  0A78               	incf	_DimmerLights11,w
 20112  0363  0086               	movwf	6
 20113  0364  3001               	movlw	1	; select bank2/3
 20114  0365  0087               	movwf	7
 20115  0366  0878               	movf	_DimmerLights11,w
 20116  0367  3E02               	addlw	2
 20117  0368  0084               	movwf	4
 20118  0369  3001               	movlw	1	; select bank2/3
 20119  036A  0085               	movwf	5
 20120  036B  0800               	movf	0,w
 20121  036C  0201               	subwf	1,w
 20122  036D  1C03               	skipc
 20123  036E  2C4D               	goto	i1l7546
 20124  036F  0A78               	incf	_DimmerLights11,w
 20125  0370  0086               	movwf	6
 20126  0371  3001               	movlw	1	; select bank2/3
 20127  0372  0087               	movwf	7
 20128  0373  0181               	clrf	1
 20129  0374  0878               	movf	_DimmerLights11,w
 20130  0375  0086               	movwf	6
 20131  0376  3001               	movlw	1	; select bank2/3
 20132  0377  0087               	movwf	7
 20133  0378  1D81               	btfss	1,3
 20134  0379  2BB0               	goto	i1l7512
 20135  037A  0878               	movf	_DimmerLights11,w
 20136  037B  0086               	movwf	6
 20137  037C  3001               	movlw	1	; select bank2/3
 20138  037D  0087               	movwf	7
 20139  037E  1A01               	btfsc	1,4
 20140  037F  2B97               	goto	i1l7506
 20141  0380  0878               	movf	_DimmerLights11,w
 20142  0381  3E04               	addlw	4
 20143  0382  0086               	movwf	6
 20144  0383  3001               	movlw	1	; select bank2/3
 20145  0384  0087               	movwf	7
 20146  0385  3044               	movlw	68
 20147  0386  0201               	subwf	1,w
 20148  0387  1C03               	skipc
 20149  0388  2B91               	goto	i1l7504
 20150  0389  0878               	movf	_DimmerLights11,w
 20151  038A  3E04               	addlw	4
 20152  038B  0086               	movwf	6
 20153  038C  3001               	movlw	1	; select bank2/3
 20154  038D  0087               	movwf	7
 20155  038E  3001               	movlw	1
 20156  038F  0281               	subwf	1,f
 20157  0390  2C4D               	goto	i1l7546
 20158  0391                     i1l7504:	
 20159  0391  0878               	movf	_DimmerLights11,w
 20160  0392  0086               	movwf	6
 20161  0393  3001               	movlw	1	; select bank2/3
 20162  0394  0087               	movwf	7
 20163  0395  1601               	bsf	1,4
 20164  0396  2C4D               	goto	i1l7546
 20165  0397                     i1l7506:	
 20166  0397  0878               	movf	_DimmerLights11,w
 20167  0398  3E04               	addlw	4
 20168  0399  0086               	movwf	6
 20169  039A  3001               	movlw	1	; select bank2/3
 20170  039B  0087               	movwf	7
 20171  039C  3078               	movlw	120
 20172  039D  0201               	subwf	1,w
 20173  039E  1803               	skipnc
 20174  039F  2BAA               	goto	i1l7510
 20175  03A0  3001               	movlw	1
 20176  03A1  00F2               	movwf	??_TMR0_ISR
 20177  03A2  0878               	movf	_DimmerLights11,w
 20178  03A3  3E04               	addlw	4
 20179  03A4  0086               	movwf	6
 20180  03A5  3001               	movlw	1	; select bank2/3
 20181  03A6  0087               	movwf	7
 20182  03A7  0872               	movf	??_TMR0_ISR,w
 20183  03A8  0781               	addwf	1,f
 20184  03A9  2C4D               	goto	i1l7546
 20185  03AA                     i1l7510:	
 20186  03AA  0878               	movf	_DimmerLights11,w
 20187  03AB  0086               	movwf	6
 20188  03AC  3001               	movlw	1	; select bank2/3
 20189  03AD  0087               	movwf	7
 20190  03AE  1201               	bcf	1,4
 20191  03AF  2C4D               	goto	i1l7546
 20192  03B0                     i1l7512:	
 20193  03B0  0878               	movf	_DimmerLights11,w
 20194  03B1  0086               	movwf	6
 20195  03B2  3001               	movlw	1	; select bank2/3
 20196  03B3  0087               	movwf	7
 20197  03B4  1D01               	btfss	1,2
 20198  03B5  2BF7               	goto	i1l7526
 20199  03B6  0878               	movf	_DimmerLights11,w
 20200  03B7  3E05               	addlw	5
 20201  03B8  0086               	movwf	6
 20202  03B9  3001               	movlw	1	; select bank2/3
 20203  03BA  0087               	movwf	7
 20204  03BB  0878               	movf	_DimmerLights11,w
 20205  03BC  3E04               	addlw	4
 20206  03BD  0084               	movwf	4
 20207  03BE  3001               	movlw	1	; select bank2/3
 20208  03BF  0085               	movwf	5
 20209  03C0  0800               	movf	0,w
 20210  03C1  0201               	subwf	1,w
 20211  03C2  1803               	skipnc
 20212  03C3  2BCC               	goto	i1l7518
 20213  03C4  0878               	movf	_DimmerLights11,w
 20214  03C5  3E04               	addlw	4
 20215  03C6  0086               	movwf	6
 20216  03C7  3001               	movlw	1	; select bank2/3
 20217  03C8  0087               	movwf	7
 20218  03C9  3001               	movlw	1
 20219  03CA  0281               	subwf	1,f
 20220  03CB  2BE3               	goto	i1l7522
 20221  03CC                     i1l7518:	
 20222  03CC  0878               	movf	_DimmerLights11,w
 20223  03CD  3E04               	addlw	4
 20224  03CE  0086               	movwf	6
 20225  03CF  3001               	movlw	1	; select bank2/3
 20226  03D0  0087               	movwf	7
 20227  03D1  0878               	movf	_DimmerLights11,w
 20228  03D2  3E05               	addlw	5
 20229  03D3  0084               	movwf	4
 20230  03D4  3001               	movlw	1	; select bank2/3
 20231  03D5  0085               	movwf	5
 20232  03D6  0800               	movf	0,w
 20233  03D7  0201               	subwf	1,w
 20234  03D8  1803               	skipnc
 20235  03D9  2BE3               	goto	i1l7522
 20236  03DA  3001               	movlw	1
 20237  03DB  00F2               	movwf	??_TMR0_ISR
 20238  03DC  0878               	movf	_DimmerLights11,w
 20239  03DD  3E04               	addlw	4
 20240  03DE  0086               	movwf	6
 20241  03DF  3001               	movlw	1	; select bank2/3
 20242  03E0  0087               	movwf	7
 20243  03E1  0872               	movf	??_TMR0_ISR,w
 20244  03E2  0781               	addwf	1,f
 20245  03E3                     i1l7522:	
 20246  03E3  0878               	movf	_DimmerLights11,w
 20247  03E4  3E05               	addlw	5
 20248  03E5  0086               	movwf	6
 20249  03E6  3001               	movlw	1	; select bank2/3
 20250  03E7  0087               	movwf	7
 20251  03E8  0878               	movf	_DimmerLights11,w
 20252  03E9  3E04               	addlw	4
 20253  03EA  0084               	movwf	4
 20254  03EB  3001               	movlw	1	; select bank2/3
 20255  03EC  0085               	movwf	5
 20256  03ED  0800               	movf	0,w
 20257  03EE  0601               	xorwf	1,w
 20258  03EF  1D03               	skipz
 20259  03F0  2C4D               	goto	i1l7546
 20260  03F1  0878               	movf	_DimmerLights11,w
 20261  03F2  0086               	movwf	6
 20262  03F3  3001               	movlw	1	; select bank2/3
 20263  03F4  0087               	movwf	7
 20264  03F5  1101               	bcf	1,2
 20265  03F6  2C12               	goto	i1l7532
 20266  03F7                     i1l7526:	
 20267  03F7  0878               	movf	_DimmerLights11,w
 20268  03F8  0086               	movwf	6
 20269  03F9  3001               	movlw	1	; select bank2/3
 20270  03FA  0087               	movwf	7
 20271  03FB  1E81               	btfss	1,5
 20272  03FC  2C18               	goto	i1l7534
 20273  03FD  0878               	movf	_DimmerLights11,w
 20274  03FE  3E04               	addlw	4
 20275  03FF  0086               	movwf	6
 20276  0400  3001               	movlw	1	; select bank2/3
 20277  0401  0087               	movwf	7
 20278  0402  3001               	movlw	1
 20279  0403  0281               	subwf	1,f
 20280  0404  0878               	movf	_DimmerLights11,w
 20281  0405  3E05               	addlw	5
 20282  0406  0086               	movwf	6
 20283  0407  3001               	movlw	1	; select bank2/3
 20284  0408  0087               	movwf	7
 20285  0409  0878               	movf	_DimmerLights11,w
 20286  040A  3E04               	addlw	4
 20287  040B  0084               	movwf	4
 20288  040C  3001               	movlw	1	; select bank2/3
 20289  040D  0085               	movwf	5
 20290  040E  0800               	movf	0,w
 20291  040F  0201               	subwf	1,w
 20292  0410  1C03               	skipc
 20293  0411  2C4D               	goto	i1l7546
 20294  0412                     i1l7532:	
 20295  0412  0878               	movf	_DimmerLights11,w
 20296  0413  0086               	movwf	6
 20297  0414  3001               	movlw	1	; select bank2/3
 20298  0415  0087               	movwf	7
 20299  0416  1081               	bcf	1,1
 20300  0417  2C4D               	goto	i1l7546
 20301  0418                     i1l7534:	
 20302  0418  3001               	movlw	1
 20303  0419  00F2               	movwf	??_TMR0_ISR
 20304  041A  0878               	movf	_DimmerLights11,w
 20305  041B  3E04               	addlw	4
 20306  041C  0086               	movwf	6
 20307  041D  3001               	movlw	1	; select bank2/3
 20308  041E  0087               	movwf	7
 20309  041F  0872               	movf	??_TMR0_ISR,w
 20310  0420  0781               	addwf	1,f
 20311  0421  0878               	movf	_DimmerLights11,w
 20312  0422  3E04               	addlw	4
 20313  0423  0086               	movwf	6
 20314  0424  3001               	movlw	1	; select bank2/3
 20315  0425  0087               	movwf	7
 20316  0426  0878               	movf	_DimmerLights11,w
 20317  0427  3E06               	addlw	6
 20318  0428  0084               	movwf	4
 20319  0429  3001               	movlw	1	; select bank2/3
 20320  042A  0085               	movwf	5
 20321  042B  0800               	movf	0,w
 20322  042C  0201               	subwf	1,w
 20323  042D  1C03               	skipc
 20324  042E  2C4D               	goto	i1l7546
 20325  042F  0878               	movf	_DimmerLights11,w
 20326  0430  0086               	movwf	6
 20327  0431  3001               	movlw	1	; select bank2/3
 20328  0432  0087               	movwf	7
 20329  0433  1081               	bcf	1,1
 20330  0434  0878               	movf	_DimmerLights11,w
 20331  0435  0086               	movwf	6
 20332  0436  3001               	movlw	1	; select bank2/3
 20333  0437  0087               	movwf	7
 20334  0438  1301               	bcf	1,6
 20335  0439  0878               	movf	_DimmerLights11,w
 20336  043A  3E0C               	addlw	12
 20337  043B  0086               	movwf	6
 20338  043C  3001               	movlw	1	; select bank2/3
 20339  043D  0087               	movwf	7
 20340  043E  1401               	bsf	1,0
 20341  043F  0021               	movlb	1	; select bank1
 20342  0440  0839               	movf	_Dimmer^(0+128),w
 20343  0441  0086               	movwf	6
 20344  0442  0187               	clrf	7
 20345  0443  1401               	bsf	1,0
 20346  0444  0020               	movlb	0	; select bank0
 20347  0445  118C               	bcf	12,3	;volatile
 20348  0446  138E               	bcf	14,7	;volatile
 20349  0447  01F0               	clrf	i1setLoad_StatusOff@command
 20350  0448  0AF0               	incf	i1setLoad_StatusOff@command,f
 20351  0449  3001               	movlw	1
 20352  044A  319C  245D  3182   	fcall	i1_setLoad_StatusOff
 20353  044D                     i1l7546:	
 20354  044D  0020               	movlb	0	; select bank0
 20355  044E  1F8C               	btfss	12,7	;volatile
 20356  044F  2C83               	goto	i1l7556
 20357  0450  3001               	movlw	1
 20358  0451  00F2               	movwf	??_TMR0_ISR
 20359  0452  0878               	movf	_DimmerLights11,w
 20360  0453  3E08               	addlw	8
 20361  0454  0086               	movwf	6
 20362  0455  3001               	movlw	1	; select bank2/3
 20363  0456  0087               	movwf	7
 20364  0457  0872               	movf	??_TMR0_ISR,w
 20365  0458  0781               	addwf	1,f
 20366  0459  0878               	movf	_DimmerLights11,w
 20367  045A  3E04               	addlw	4
 20368  045B  0086               	movwf	6
 20369  045C  3001               	movlw	1	; select bank2/3
 20370  045D  0087               	movwf	7
 20371  045E  0801               	movf	1,w
 20372  045F  00F2               	movwf	??_TMR0_ISR
 20373  0460  01F3               	clrf	??_TMR0_ISR+1
 20374  0461  09F2               	comf	??_TMR0_ISR,f
 20375  0462  09F3               	comf	??_TMR0_ISR+1,f
 20376  0463  0AF2               	incf	??_TMR0_ISR,f
 20377  0464  1903               	skipnz
 20378  0465  0AF3               	incf	??_TMR0_ISR+1,f
 20379  0466  0872               	movf	??_TMR0_ISR,w
 20380  0467  3E78               	addlw	120
 20381  0468  00F4               	movwf	??_TMR0_ISR+2
 20382  0469  3000               	movlw	0
 20383  046A  3D73               	addwfc	??_TMR0_ISR+1,w
 20384  046B  00F5               	movwf	??_TMR0_ISR+3
 20385  046C  0878               	movf	_DimmerLights11,w
 20386  046D  3E08               	addlw	8
 20387  046E  0086               	movwf	6
 20388  046F  3001               	movlw	1	; select bank2/3
 20389  0470  0087               	movwf	7
 20390  0471  0875               	movf	??_TMR0_ISR+3,w
 20391  0472  3A80               	xorlw	128
 20392  0473  3C80               	sublw	128
 20393  0474  1D03               	skipz
 20394  0475  2C78               	goto	u687_25
 20395  0476  0874               	movf	??_TMR0_ISR+2,w
 20396  0477  0201               	subwf	1,w
 20397  0478                     u687_25:	
 20398  0478  1C03               	skipc
 20399  0479  2C83               	goto	i1l7556
 20400  047A  0878               	movf	_DimmerLights11,w
 20401  047B  3E08               	addlw	8
 20402  047C  0086               	movwf	6
 20403  047D  3001               	movlw	1	; select bank2/3
 20404  047E  0087               	movwf	7
 20405  047F  0181               	clrf	1
 20406  0480  0020               	movlb	0	; select bank0
 20407  0481  138C               	bcf	12,7	;volatile
 20408  0482  120D               	bcf	13,4	;volatile
 20409  0483                     i1l7556:	
 20410                           
 20411                           ;MCU_B1.c: 148: Timer0->Count++;
 20412  0483  0021               	movlb	1	; select bank1
 20413  0484  0A68               	incf	_Timer0^(0+128),w
 20414  0485  0086               	movwf	6
 20415  0486  0187               	clrf	7
 20416  0487  3001               	movlw	1
 20417  0488  0781               	addwf	1,f
 20418  0489  3141               	addfsr 1,1
 20419  048A  1803               	skipnc
 20420  048B  0A81               	incf	1,f
 20421                           
 20422                           ;MCU_B1.c: 149: if (Timer0->Count == 200) {
 20423  048C  0A68               	incf	_Timer0^(0+128),w
 20424  048D  0086               	movwf	6
 20425  048E  0187               	clrf	7
 20426  048F  3F40               	moviw [0]fsr1
 20427  0490  3AC8               	xorlw	200
 20428  0491  1D03               	skipz
 20429  0492  2C95               	goto	u688_25
 20430  0493  3F41               	moviw [1]fsr1
 20431  0494  3A00               	xorlw	0
 20432  0495                     u688_25:	
 20433  0495  1D03               	skipz
 20434  0496  2CA2               	goto	i1l1317
 20435                           
 20436                           ;MCU_B1.c: 150: Timer0->Count = 0;
 20437  0497  0A68               	incf	_Timer0^(0+128),w
 20438  0498  0086               	movwf	6
 20439  0499  0187               	clrf	7
 20440  049A  3000               	movlw	0
 20441  049B  3FC0               	movwi [0]fsr1
 20442  049C  3FC1               	movwi [1]fsr1
 20443                           
 20444                           ;MCU_B1.c: 151: TMain->T0_Timerout = 1;
 20445  049D  087D               	movf	_TMain,w
 20446  049E  0086               	movwf	6
 20447  049F  3001               	movlw	1	; select bank2/3
 20448  04A0  0087               	movwf	7
 20449  04A1  1481               	bsf	1,1
 20450  04A2                     i1l1317:	
 20451                           
 20452                           ;MCU_B1.c: 152: }
 20453                           ;MCU_B1.c: 155: if (Buz->GO) {
 20454  04A2  0877               	movf	_Buz,w
 20455  04A3  0086               	movwf	6
 20456  04A4  3001               	movlw	1	; select bank2/3
 20457  04A5  0087               	movwf	7
 20458  04A6  1C81               	btfss	1,1
 20459  04A7  0008               	return
 20460                           
 20461                           ;MCU_B1.c: 156: Buz->Time++;
 20462  04A8  0A77               	incf	_Buz,w
 20463  04A9  0086               	movwf	6
 20464  04AA  3001               	movlw	1	; select bank2/3
 20465  04AB  0087               	movwf	7
 20466  04AC  3001               	movlw	1
 20467  04AD  0781               	addwf	1,f
 20468  04AE  3141               	addfsr 1,1
 20469  04AF  1803               	skipnc
 20470  04B0  0A81               	incf	1,f
 20471  04B1  0008               	return
 20472  04B2                     __end_of_TMR0_ISR:	
 20473                           
 20474                           	psect	text140
 20475  1C5D                     __ptext140:	
 20476 ;; *************** function i1_setLoad_StatusOff *****************
 20477 ;; Defined at:
 20478 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 20479 ;; Parameters:    Size  Location     Type
 20480 ;;  lights          1    wreg     unsigned char 
 20481 ;;  command         1    0[COMMON] unsigned char 
 20482 ;; Auto vars:     Size  Location     Type
 20483 ;;  lights          1    1[COMMON] unsigned char 
 20484 ;; Return value:  Size  Location     Type
 20485 ;;		None               void
 20486 ;; Registers used:
 20487 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20488 ;; Tracked objects:
 20489 ;;		On entry : 0/0
 20490 ;;		On exit  : 0/0
 20491 ;;		Unchanged: 0/0
 20492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20493 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20497 ;;Total ram usage:        2 bytes
 20498 ;; Hardware stack levels used:    1
 20499 ;; This function calls:
 20500 ;;		Nothing
 20501 ;; This function is called by:
 20502 ;;		_TMR0_ISR
 20503 ;; This function uses a non-reentrant model
 20504 ;;
 20505                           
 20506                           
 20507                           ;psect for function i1_setLoad_StatusOff
 20508  1C5D                     i1_setLoad_StatusOff:	
 20509                           
 20510                           ;incstack = 0
 20511                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20512                           ;i1setLoad_StatusOff@lights stored from wreg
 20513  1C5D  00F1               	movwf	i1setLoad_StatusOff@lights
 20514                           
 20515                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20516  1C5E  0020               	movlb	0	; select bank0
 20517  1C5F  086E               	movf	_Load,w
 20518  1C60  3E46               	addlw	70
 20519  1C61  0086               	movwf	6
 20520  1C62  3002               	movlw	2	; select bank4/5
 20521  1C63  0087               	movwf	7
 20522  1C64  0870               	movf	i1setLoad_StatusOff@command,w
 20523  1C65  1081               	bcf	1,1
 20524  1C66  1D03               	skipz
 20525  1C67  1481               	bsf	1,1
 20526                           
 20527                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20528  1C68  086E               	movf	_Load,w
 20529  1C69  3E42               	addlw	66
 20530  1C6A  0086               	movwf	6
 20531  1C6B  3002               	movlw	2	; select bank4/5
 20532  1C6C  0087               	movwf	7
 20533  1C6D  3002               	movlw	2
 20534  1C6E  0281               	subwf	1,f
 20535                           
 20536                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20537  1C6F  0871               	movf	i1setLoad_StatusOff@lights,w
 20538  1C70  3A01               	xorlw	1
 20539  1C71  1D03               	skipz
 20540  1C72  2C79               	goto	i1l7370
 20541                           
 20542                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20543  1C73  086E               	movf	_Load,w
 20544  1C74  3E43               	addlw	67
 20545  1C75  0086               	movwf	6
 20546  1C76  3002               	movlw	2	; select bank4/5
 20547  1C77  0087               	movwf	7
 20548  1C78  0181               	clrf	1
 20549  1C79                     i1l7370:	
 20550                           
 20551                           ;OverLoad_B1.c: 289: }
 20552                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20553  1C79  0871               	movf	i1setLoad_StatusOff@lights,w
 20554  1C7A  3A02               	xorlw	2
 20555  1C7B  1D03               	skipz
 20556  1C7C  2C83               	goto	i1l7374
 20557                           
 20558                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20559  1C7D  086E               	movf	_Load,w
 20560  1C7E  3E44               	addlw	68
 20561  1C7F  0086               	movwf	6
 20562  1C80  3002               	movlw	2	; select bank4/5
 20563  1C81  0087               	movwf	7
 20564  1C82  0181               	clrf	1
 20565  1C83                     i1l7374:	
 20566                           
 20567                           ;OverLoad_B1.c: 292: }
 20568                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20569  1C83  0871               	movf	i1setLoad_StatusOff@lights,w
 20570  1C84  3A03               	xorlw	3
 20571  1C85  1D03               	skipz
 20572  1C86  0008               	return
 20573                           
 20574                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20575  1C87  086E               	movf	_Load,w
 20576  1C88  3E45               	addlw	69
 20577  1C89  0086               	movwf	6
 20578  1C8A  3002               	movlw	2	; select bank4/5
 20579  1C8B  0087               	movwf	7
 20580  1C8C  0181               	clrf	1
 20581  1C8D  0008               	return
 20582  1C8E                     __end_ofi1_setLoad_StatusOff:	
 20583                           
 20584                           	psect	text141
 20585  1AB6                     __ptext141:	
 20586 ;; *************** function _IOC_ISR *****************
 20587 ;; Defined at:
 20588 ;;		line 328 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;		None
 20591 ;; Auto vars:     Size  Location     Type
 20592 ;;		None
 20593 ;; Return value:  Size  Location     Type
 20594 ;;		None               void
 20595 ;; Registers used:
 20596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20597 ;; Tracked objects:
 20598 ;;		On entry : 0/0
 20599 ;;		On exit  : 0/0
 20600 ;;		Unchanged: 0/0
 20601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20606 ;;Total ram usage:        1 bytes
 20607 ;; Hardware stack levels used:    1
 20608 ;; Hardware stack levels required when called:    1
 20609 ;; This function calls:
 20610 ;;		_setDimmerReClock
 20611 ;; This function is called by:
 20612 ;;		_ISR
 20613 ;; This function uses a non-reentrant model
 20614 ;;
 20615                           
 20616                           
 20617                           ;psect for function _IOC_ISR
 20618  1AB6                     _IOC_ISR:	
 20619                           
 20620                           ;MCU_B1.c: 329: if (IOCIE && IOCBF2) {
 20621                           
 20622                           ;incstack = 0
 20623                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20624  1AB6  1D8B               	btfss	11,3	;volatile
 20625  1AB7  0008               	return
 20626  1AB8  0027               	movlb	7	; select bank7
 20627  1AB9  1D16               	btfss	22,2	;volatile
 20628  1ABA  0008               	return
 20629                           
 20630                           ;MCU_B1.c: 330: IOCBF2 = 0;
 20631  1ABB  1116               	bcf	22,2	;volatile
 20632                           
 20633                           ;MCU_B1.c: 331: IOCIF = 0;
 20634  1ABC  100B               	bcf	11,0	;volatile
 20635                           
 20636                           ;MCU_B1.c: 332: if (TMain->PowerON) {
 20637  1ABD  087D               	movf	_TMain,w
 20638  1ABE  0086               	movwf	6
 20639  1ABF  3001               	movlw	1	; select bank2/3
 20640  1AC0  0087               	movwf	7
 20641  1AC1  1C01               	btfss	1,0
 20642  1AC2  0008               	return
 20643                           
 20644                           ;MCU_B1.c: 336: setDimmerReClock();
 20645  1AC3  31A7  2754  319A   	fcall	_setDimmerReClock
 20646                           
 20647                           ;MCU_B1.c: 337: if (RB2) {
 20648  1AC6  0020               	movlb	0	; select bank0
 20649  1AC7  1D0D               	btfss	13,2	;volatile
 20650  1AC8  2AD0               	goto	i1l7462
 20651                           
 20652                           ;MCU_B1.c: 338: Dimmer->Correction = 0;
 20653  1AC9  0021               	movlb	1	; select bank1
 20654  1ACA  0839               	movf	_Dimmer^(0+128),w
 20655  1ACB  3E02               	addlw	2
 20656  1ACC  0086               	movwf	6
 20657  1ACD  0187               	clrf	7
 20658  1ACE  0181               	clrf	1
 20659                           
 20660                           ;MCU_B1.c: 339: } else {
 20661  1ACF  0008               	return
 20662  1AD0                     i1l7462:	
 20663                           
 20664                           ;MCU_B1.c: 340: Dimmer->Correction = 8;
 20665  1AD0  3008               	movlw	8
 20666  1AD1  00F0               	movwf	??_IOC_ISR
 20667  1AD2  0021               	movlb	1	; select bank1
 20668  1AD3  0839               	movf	_Dimmer^(0+128),w
 20669  1AD4  3E02               	addlw	2
 20670  1AD5  0086               	movwf	6
 20671  1AD6  0187               	clrf	7
 20672  1AD7  0870               	movf	??_IOC_ISR,w
 20673  1AD8  0081               	movwf	1
 20674  1AD9  0008               	return
 20675  1ADA                     __end_of_IOC_ISR:	
 20676                           
 20677                           	psect	text142
 20678  2754                     __ptext142:	
 20679 ;; *************** function _setDimmerReClock *****************
 20680 ;; Defined at:
 20681 ;;		line 165 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20682 ;; Parameters:    Size  Location     Type
 20683 ;;		None
 20684 ;; Auto vars:     Size  Location     Type
 20685 ;;		None
 20686 ;; Return value:  Size  Location     Type
 20687 ;;		None               void
 20688 ;; Registers used:
 20689 ;;		wreg, fsr1l, fsr1h
 20690 ;; Tracked objects:
 20691 ;;		On entry : 0/0
 20692 ;;		On exit  : 0/0
 20693 ;;		Unchanged: 0/0
 20694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20699 ;;Total ram usage:        0 bytes
 20700 ;; Hardware stack levels used:    1
 20701 ;; This function calls:
 20702 ;;		Nothing
 20703 ;; This function is called by:
 20704 ;;		_IOC_ISR
 20705 ;; This function uses a non-reentrant model
 20706 ;;
 20707                           
 20708                           
 20709                           ;psect for function _setDimmerReClock
 20710  2754                     _setDimmerReClock:	
 20711                           
 20712                           ;MCU_B1.c: 166: TMR0 = 255;
 20713                           
 20714                           ;incstack = 0
 20715                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20716  2754  30FF               	movlw	255
 20717  2755  0020               	movlb	0	; select bank0
 20718  2756  0095               	movwf	21	;volatile
 20719                           
 20720                           ;MCU_B1.c: 171: if (!DimmerLights11->GO) {
 20721  2757  0878               	movf	_DimmerLights11,w
 20722  2758  0086               	movwf	6
 20723  2759  3001               	movlw	1	; select bank2/3
 20724  275A  0087               	movwf	7
 20725  275B  1801               	btfsc	1,0
 20726  275C  0008               	return
 20727                           
 20728                           ;MCU_B1.c: 172: DimmerLights11->GO = 1;
 20729  275D  0878               	movf	_DimmerLights11,w
 20730  275E  0086               	movwf	6
 20731  275F  3001               	movlw	1	; select bank2/3
 20732  2760  0087               	movwf	7
 20733  2761  1401               	bsf	1,0
 20734  2762  0008               	return
 20735  2763                     __end_of_setDimmerReClock:	
 20736                           
 20737                           	psect	text143
 20738  26A5                     __ptext143:	
 20739 ;; *************** function _INT_ISR *****************
 20740 ;; Defined at:
 20741 ;;		line 281 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20742 ;; Parameters:    Size  Location     Type
 20743 ;;		None
 20744 ;; Auto vars:     Size  Location     Type
 20745 ;;		None
 20746 ;; Return value:  Size  Location     Type
 20747 ;;		None               void
 20748 ;; Registers used:
 20749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20750 ;; Tracked objects:
 20751 ;;		On entry : 0/0
 20752 ;;		On exit  : 0/0
 20753 ;;		Unchanged: 0/0
 20754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20759 ;;Total ram usage:        0 bytes
 20760 ;; Hardware stack levels used:    1
 20761 ;; Hardware stack levels required when called:    2
 20762 ;; This function calls:
 20763 ;;		_setRF_ReceiveGO
 20764 ;; This function is called by:
 20765 ;;		_ISR
 20766 ;; This function uses a non-reentrant model
 20767 ;;
 20768                           
 20769                           
 20770                           ;psect for function _INT_ISR
 20771  26A5                     _INT_ISR:	
 20772                           
 20773                           ;MCU_B1.c: 282: if (INTE && INTF) {
 20774                           
 20775                           ;incstack = 0
 20776                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20777  26A5  1E0B               	btfss	11,4	;volatile
 20778  26A6  0008               	return
 20779  26A7  1C8B               	btfss	11,1	;volatile
 20780  26A8  0008               	return
 20781                           
 20782                           ;MCU_B1.c: 283: INTF = 0;
 20783  26A9  108B               	bcf	11,1	;volatile
 20784                           
 20785                           ;MCU_B1.c: 284: INTE = 0;
 20786  26AA  120B               	bcf	11,4	;volatile
 20787                           
 20788                           ;MCU_B1.c: 285: setRF_ReceiveGO(1, 1);
 20789  26AB  01F2               	clrf	setRF_ReceiveGO@command
 20790  26AC  0AF2               	incf	setRF_ReceiveGO@command,f
 20791  26AD  3001               	movlw	1
 20792  26AE  31A6  2699         	fcall	_setRF_ReceiveGO
 20793  26B0  0008               	return
 20794  26B1                     __end_of_INT_ISR:	
 20795                           
 20796                           	psect	text144
 20797  2699                     __ptext144:	
 20798 ;; *************** function _setRF_ReceiveGO *****************
 20799 ;; Defined at:
 20800 ;;		line 36 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 20801 ;; Parameters:    Size  Location     Type
 20802 ;;  rf              1    wreg     unsigned char 
 20803 ;;  command         1    2[COMMON] unsigned char 
 20804 ;; Auto vars:     Size  Location     Type
 20805 ;;  rf              1    3[COMMON] unsigned char 
 20806 ;; Return value:  Size  Location     Type
 20807 ;;		None               void
 20808 ;; Registers used:
 20809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20810 ;; Tracked objects:
 20811 ;;		On entry : 0/0
 20812 ;;		On exit  : 0/0
 20813 ;;		Unchanged: 0/0
 20814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20815 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20819 ;;Total ram usage:        2 bytes
 20820 ;; Hardware stack levels used:    1
 20821 ;; Hardware stack levels required when called:    1
 20822 ;; This function calls:
 20823 ;;		i1_RfPointSelect
 20824 ;; This function is called by:
 20825 ;;		_INT_ISR
 20826 ;; This function uses a non-reentrant model
 20827 ;;
 20828                           
 20829                           
 20830                           ;psect for function _setRF_ReceiveGO
 20831  2699                     _setRF_ReceiveGO:	
 20832                           
 20833                           ;incstack = 0
 20834                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20835                           ;setRF_ReceiveGO@rf stored from wreg
 20836  2699  00F3               	movwf	setRF_ReceiveGO@rf
 20837                           
 20838                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 20839  269A  0873               	movf	setRF_ReceiveGO@rf,w
 20840  269B  31A6  262C         	fcall	i1_RfPointSelect
 20841                           
 20842                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 20843  269D  087A               	movf	_RF,w
 20844  269E  0086               	movwf	6
 20845  269F  0187               	clrf	7
 20846  26A0  0872               	movf	setRF_ReceiveGO@command,w
 20847  26A1  1081               	bcf	1,1
 20848  26A2  1D03               	skipz
 20849  26A3  1481               	bsf	1,1
 20850  26A4  0008               	return
 20851  26A5                     __end_of_setRF_ReceiveGO:	
 20852                           
 20853                           	psect	text145
 20854  262C                     __ptext145:	
 20855 ;; *************** function i1_RfPointSelect *****************
 20856 ;; Defined at:
 20857 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 20858 ;; Parameters:    Size  Location     Type
 20859 ;;  rf              1    wreg     unsigned char 
 20860 ;; Auto vars:     Size  Location     Type
 20861 ;;  rf              1    1[COMMON] unsigned char 
 20862 ;; Return value:  Size  Location     Type
 20863 ;;		None               void
 20864 ;; Registers used:
 20865 ;;		wreg
 20866 ;; Tracked objects:
 20867 ;;		On entry : 0/0
 20868 ;;		On exit  : 0/0
 20869 ;;		Unchanged: 0/0
 20870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20875 ;;Total ram usage:        2 bytes
 20876 ;; Hardware stack levels used:    1
 20877 ;; This function calls:
 20878 ;;		Nothing
 20879 ;; This function is called by:
 20880 ;;		_setRF_ReceiveGO
 20881 ;; This function uses a non-reentrant model
 20882 ;;
 20883                           
 20884                           
 20885                           ;psect for function i1_RfPointSelect
 20886  262C                     i1_RfPointSelect:	
 20887                           
 20888                           ;incstack = 0
 20889                           ; Regs used in i1_RfPointSelect: [wreg]
 20890                           ;i1RfPointSelect@rf stored from wreg
 20891  262C  00F1               	movwf	i1RfPointSelect@rf
 20892                           
 20893                           ;RF_Control_B1.c: 9: if (rf == 1) {
 20894  262D  0871               	movf	i1RfPointSelect@rf,w
 20895  262E  3A01               	xorlw	1
 20896  262F  1D03               	skipz
 20897  2630  0008               	return
 20898                           
 20899                           ;RF_Control_B1.c: 10: RF = &RF1;
 20900  2631  30E1               	movlw	_RF1& (0+255)
 20901  2632  00F0               	movwf	??i1_RfPointSelect
 20902  2633  0870               	movf	??i1_RfPointSelect,w
 20903  2634  00FA               	movwf	_RF
 20904  2635  0008               	return
 20905  2636                     __end_ofi1_RfPointSelect:	
 20906  007E                     btemp	set	126	;btemp
 20907  007E                     pic14e$flags	set	126
 20908  007E                     wtemp	set	126
 20909  007E                     wtemp0	set	126
 20910  0080                     wtemp1	set	128
 20911  0082                     wtemp2	set	130
 20912  0084                     wtemp3	set	132
 20913  0086                     wtemp4	set	134
 20914  0088                     wtemp5	set	136
 20915  007F                     wtemp6	set	127
 20916  007E                     ttemp	set	126
 20917  007E                     ttemp0	set	126
 20918  0081                     ttemp1	set	129
 20919  0084                     ttemp2	set	132
 20920  0087                     ttemp3	set	135
 20921  007F                     ttemp4	set	127
 20922  007E                     ltemp	set	126
 20923  007E                     ltemp0	set	126
 20924  0082                     ltemp1	set	130
 20925  0086                     ltemp2	set	134
 20926  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     76      80
    BANK1            80      0      74
    BANK2            80      0      74
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    TMain	PTR struct TMain size(1) Largest target is 17
		 -> NULL(NULL[0]), VarTMain(BANK2[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _MainT->_setBuz
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  109493
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                              _MainT
               _MainT_Initialization
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21707
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21707
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MainT_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MainT                                                0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (4) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (4) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (5) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (5) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _MainT
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _MainT_Initialization
   _Mcu_Initialization
     _ADC_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      47      13       88.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Oct 03 10:31:16 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _PF 0079                                       _RD 0CA8  
                                     _RF 007A                  __end_of_CC2500_WriteREG 192D  
                                     _WR 0CA9                                       _Sw 006D  
     __end_of_getDimmerLights_StatusFlag 26ED               _getDimmerLights_StatusFlag 26E1  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 126D  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                __end_of_setLoad_StatusOff 1CBF  
                   _setDimmerLights_Main 1624                             ___ftadd@sign 0048  
                                    l304 1C51                                      l307 1C57  
                                    l271 1EA6                                      l280 1ED8  
                                    l337 1907                                      l361 2798  
                                    l338 1909                                      l291 133F  
                                    l276 1ED0                                      l373 1ADF  
                                    l349 191C                                      l277 1ED5  
                                    l367 1985                                      l287 132E  
                                    l628 1C2B                                      l818 118E  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000C                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0162  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00BB  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00E1                                      _ISR 0004  
                                    _WDT 00E9          setPowerFault_Exceptions@command 002C  
                                    _Sw1 0159                                      _Buz 0077  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1914  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 2636  
                        __end_of_ADC_Set 260B                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 09D7                    _setDimmerLights_ERROR 10AC  
                  _setDimmerLights_AdjRF 1A93                    _setDimmerLights_AdjGo 186F  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 27C0  
                                   ?_ISR 0070                          _PowerFault_Main 25AF  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1ADA  
                             Load_Main@i 0031                             ___ftdiv@sign 003D  
                                   l2022 0FF7                                     l2026 1DFE  
               ?_DimmerLightsPointSelect 0070                                     l3052 12FE  
                                   l1349 18D7                                     l1375 1CE9  
                                   l2248 1FAF                                     l1561 1040  
                                   l3081 0E9D                                     l3058 1315  
                                   l2275 1DC1                          __end_of_IOC_Set 272B  
                                   l2537 25D8                                     l1762 1FE6  
                                   l6060 1253                                     l6054 1240  
                                   l6064 125F                                     l6154 1D2F  
                                   l6306 1DAF                                     l6058 1246  
                                   l2891 19D9                                     l8004 16D1  
                                   l8100 12B5                                     l6190 19C3  
                                   l5710 0E73                                     l5702 0E56  
                                   l8008 16EF                                     l5640 12E5  
                                   l8104 12BB                                     l6192 19C9  
                                   l5720 0E8F                                     l5712 0E78  
                                   l9000 04FD                                     l7402 0B90  
                                   l5650 130B                                     l5642 12EA  
                                   l5634 12D4                                     l8122 1D16  
                                   l6450 1EB8                                     l5730 0EC1  
                                   l5722 0E99                                     l5714 0E7C  
                                   l5810 0CBC                                     l9010 052F  
                                   l7404 0B96                                     l8036 13EB  
                                   l8108 12C1                                     l5740 0EDC  
                                   l5708 0E69                                     l5900 1C0B  
                                   l8212 099E                                     l5638 12DB  
                                   l5750 0BC2                                     l8070 127D  
                                   l8118 1D0B                                     l8054 1CAA  
                                   l5726 0EAF                                     l5822 0CD8  
                                   l5814 0CC4                                     l7408 0B9D  
                                   l5648 1303                                     l8160 0A41  
                                   l5680 0E26                                     l5912 1C1D  
                                   l5904 1C11                                     l8208 0988  
                                   l9024 0573                                     l5770 0C19  
                                   l5842 0851                                     l8074 1283  
                                   l8058 1CB4                                     l7354 0828  
                                   l7346 080A                                     l8242 1185  
                                   l9210 007D                                     l5690 0E3C  
                                   l5826 0CE0                                     l9034 05A6  
                                   l5668 1A38                                     l5756 0BD8  
                                   l5860 0881                                     l8084 1293  
                                   l8092 129F                                     l9108 0D80  
                                   l7348 0816                                     l8244 118A  
                                   l5684 0E2D                                     l5916 1C23  
                                   l5908 1C17                                     l8324 1532  
                                   l5870 08A5                                     l5862 088F  
                                   l5942 1A5B                                     l8078 1289  
                                   l7358 0831                                     l8238 1172  
                                   l8318 1516                                     l5872 08A8  
                                   l8088 1299                                     l9152 1F20  
                                   l9304 02A6                                     l9232 00F8  
                                   l5792 0C6B                                     l8328 153B  
                                   l9400 1580                                     l5778 0C32  
                                   l5946 1A66                                     l8418 1CCD  
                                   l6922 1D89                                     l9226 00CA  
                                   l8370 1382                                     l7396 0B68  
                                   l5876 08B6                                     l5868 089C  
                                   l9252 01A9                                     l8356 1351  
                                   l9180 0ABF                                     l8382 1AF0  
                                   l6926 1D90                                     l9270 0211  
                                   l9246 018D                                     l9254 01C1  
                                   l8358 1369                                     l5798 0C81  
                                   l8198 0964                                     l8462 1FDD  
                                   l9174 0A8E                                     l9334 143E  
                                   l8384 1AFB                                     l9264 01F8  
                                   l8552 1149                                     l9184 0AC7  
                                   l8394 1E70                                     l9282 0241  
                                   l9290 0279                                     l8802 063E  
                                   l9292 027C                                     l9380 17CF  
                                   l8900 0FEC                                     l8804 0647  
                                   l9196 0AFE                                     l8486 1071  
                                   l8680 1663                                     l8760 1486  
                                   l8674 1651                                     l8754 146D  
                                   l9298 0293                                     l8498 1087  
                                   l8922 08DA                                     l8586 15FF  
                                   l8842 06EC                                     l8826 06AD  
                                   l8692 168F                                     l8764 14CD  
                                   l9388 17FA                                     l8932 08F7  
                                   l8836 06DB                                     l9396 156B  
                                   l8918 08D3                                     l8838 06E1  
                                   l7984 19D3                                     l8864 0F3A  
                                   l8960 093C                                     l8944 0912  
                                   _CFGS 0CAE                                     l8890 0FCD  
                                   l8866 0F44                                     l8946 0916  
                                   l8886 0FAC                                     l8984 04C8  
                                   l8898 0FE7                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 26B1                                     _LATC 010E  
                                   u4025 0E7D                                     u4125 0BEA  
                                   u4205 0C8D                                     u4135 0BFA  
                                   u4055 0E90                                     u4215 0C9D  
                                   u4145 0C1A                                     u4155 0C29  
                                   u4315 0858                                     u4235 0CC5  
                                   u4165 0C33                                     u4245 0CCB  
                                   u4345 0882                                     u4275 0CE1  
                                   _PEIE 005E                                     u4285 0CE7  
                                   _INTE 005C                                     _INTF 0059  
                                   u3815 1306                                     u4375 089D  
                                   u3845 131C                                     u3775 12E0  
                                   u6505 0821                                     u3795 12F9  
                                   u6515 0829                                     u8045 1AE5  
                                   u3965 0E57                                     u7505 19DA  
                                   u7515 19DF                                     u9115 1F07  
                                   u6475 080D                                     u3995 0E6A  
                                   u9205 0AEA                                     u6495 0817  
                                   u6585 0B29                                     u7570 139A  
                                   u7810 262A                                     u9165 0AA9  
                                   u7575 1398                                     u9335 01D9  
                                   u9505 179F                                     u9515 17E4  
                                   u9285 0144                                     u9455 142D  
                                   u9465 1456                                     u9485 1E4A  
                                   _LWLO 0CAD                                     _RFSW 00BC  
                                   _TMR0 0015                          __end_of_INT_Set 25E3  
                                   _RSSI 00BD                                     _WREN 0CAA  
                                   _Buz1 014D                                     __WDT 00E4  
                                   _Load 006E                                     _Temp 007B  
                                   _main 1544                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 25AF                      __end_of_DlyOff_Main 1786  
                        __end_of_RF_Main 25D4                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 18FB                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 2754  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 1DD7  
                    DelayTimejudge@value 0022                            _RfPointSelect 2662  
             __end_of_setRFSW_AdjControl 1DD7                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 010C                                    ??_ISR 0076  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
                       __end_of_LED_Main 2711                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                    __end_of_setLoad_Count 18CD  
                                  ?_main 0070                setControl_Lights_Table@rf 0067  
                        __end_of___ftadd 0EF4                          __end_of___ftdiv 0C54  
                        __end_of___ftmul 0D08                          __end_of___fttol 08BF  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 0838                   _setDimmerLights_Switch 27A0  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E6  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0031                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                                  _TMain 007D                            setRF_Learn@rf 0023  
                                  _MainT 1786                                    _Load1 0220  
                          __CFG_WRT$HALF 0000                                    _Temp1 013F  
                       __end_of_TMR0_ISR 04B2             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 2738                                    _getAD 18CD  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 11B6  
          DimmerLights_Exceptions@status 002A                            ___ftpack@sign 0024  
                         _setLoad_Enable 27D0              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 19B3  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1890  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 1390              __size_of_Flash_Memory_Write 0031  
                 ??_MainT_Initialization 0020                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                 setLoad_StatusOff@command 0020  
       __size_of_DelayOff_Initialization 0004                   ?_setLoad_AH_AL_Restore 0070  
              setDimmerLights_Main@clear 0065                    setLoad_Enable@command 0020  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 11B6  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                   __end_of_getLoad_Safe 268E                        ??_setPercentValue 0059  
                           __end_of_main 15B3                      ?_setRF_DimmerLights 005D  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0A6D                     _setSw_Initialization 27F0  
             __size_of_setLoad_StatusOff 0031                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 14D5                   ?_Buzzer_Initialization 0070  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 25B2  
                             _Receive_OK 03E0                                ??_IOC_ISR 0070  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 2657                                   ?_MainT 0070  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                 ?_setDimmerLights_Clear 0022                  ??_Switch_Initialization 0025  
                 __end_of_setLoad_Enable 27E0                     __end_of_getTemp_Safe 2604  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 170D  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0070  
                      ?_getPowerFault_AD 0070                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1A4F  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 132C  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 27B0  
                                 i1l1317 04A2                                   i1l7510 03AA  
                                 i1l7504 0391                                   i1l7512 03B0  
                                 i1l7370 1C79                                   i1l7522 03E3  
                                 i1l7506 0397                                   i1l7532 0412  
                                 i1l7462 1AD0                                   i1l7374 1C83  
                                 i1l7534 0418                                   i1l7518 03CC  
                                 i1l7526 03F7                                   i1l7546 044D  
                                 i1l7556 0483                                   i1l7486 0347  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                     __size_of_Load_Main 029E                                   u670_25 032A  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u687_25 0478                                   _IO_Set 07E7  
                                 u688_25 0495                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                               _VarProduct 01C5  
                  _Dimmer_Initialization 25EF           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 18B8                                   _Dimmer 00B9  
                                 _DlySw1 00CD              __size_of_setLoad_Exceptions 004A  
             __end_of_Mcu_Initialization 197C                      __end_of_Buzzer_Main 0BAB  
                                 _Memory 00E7                                   _Timer0 00E8  
     __end_of_setDimmerLights_TriggerAdj 1010               _setDimmerLights_TriggerAdj 1000  
          setDimmerLights_Switch@command 0022                                   ___wmul 19D0  
                              ??___ftadd 0044             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                                ??___lwdiv 0024  
                        i1_RfPointSelect 262C              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C2  
                                 _s_data 00C3                                   _setLED 126D  
                       _DimmerLightsIntr 00BA                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                                   _setBuz 1696  
                     __size_of_Temp_Main 0003              __end_of_Load_Initialization 271E  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0023                    __end_of_SwPointSelect 2662  
                        ?_setLoad_Enable 0070                  getPowerFault_AD@channel 0028  
                          ?_setRF_Enable 0022                           _setTemp_Enable 2678  
                        _RfSWPointSelect 26C9             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 25D8                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1211         __end_of_CC2500_registers_address 182F  
   __end_of_setPowerFault_Initialization 27F0    __size_of_setPowerFault_Initialization 0010  
           _setPowerFault_Initialization 27E0                  __end_of__initialization 004C  
            ??_PowerFault_Initialization 0021                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                          __end_of_MainT 1800                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1A0D                            __end_of_getAD 18E3  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
                 setLoad_AH_AL_Restore@i 0021             __size_of_setDimmerLights_Adj 0044  
                     _LED_Initialization 26F9                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 005A                         ??_DelayTimejudge 0020  
            ?_getDimmerLights_StatusFlag 0070                __size_of_setLoad_StatusOn 0032  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000C  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
                      __end_of_Load_Main 02EE                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 2763                       __size_of_getRxData 0052  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 2683  
                      ?_CC2500_WriteByte 0070                                  ??_MainT 002A  
                         ??_setRF_Enable 0023                           _DimmerLights11 0078  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 25B2  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002B  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 006C  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                               __pbssBANK4 0220  
                            _Buzzer_Main 0B03                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 25B8                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                _DelayOff_Initialization 25C4                               __pnvCOMMON 007D  
                  __size_of_getLoad_Safe 000B            ?_setPowerFault_Initialization 0070  
                             _getPF_Safe 2612                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 006C  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 2636  
                    i1_setLoad_StatusOff 1C5D                       __size_of_setINT_GO 0009  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 000E  
                            setBuz@count 0029                               __pmaintext 1544  
                    _CC2500_WriteCommand 2790                     ?_Temp_Initialization 0070  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                                  ?___wmul 0020  
                             ??_TMR0_ISR 0072                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               _getLoad_AD 0A6D  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00C9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 2604                _PowerFault_Initialization 25AC  
                                ?_setBuz 0026                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13FB  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 2612  
                  __size_of_getTemp_Safe 0007                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1D97                  __end_of_RfSWPointSelect 26D5  
                      Sw_DimmerOnFunc@sw 0063                     ?i1_setLoad_StatusOff 0070  
                                _IOC_ISR 1AB6                          ?_setTemp_Enable 0070  
                                _IOC_Set 271E                     __size_of_setLog_Code 0049  
                                _INT_ISR 26A5                                  _INT_Set 25DD  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 1EE3  
                      _Flash_Memory_Read 192D                   __size_of_CC2500_RxData 0064  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                             _getLoad_Safe 2683  
                            setTxData@rf 0023                                  _RF_Data 00A0  
                                _RF_Main 25D0                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 18E3  
        __end_of_setControl_Lights_Table 1544                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 1103                          _setPercentValue 1F28  
                ??_setLoad_AH_AL_Restore 0020                            setLog_Code@rf 002B  
                       ?_getPercentValue 0070                                  _Dimmer1 00DE  
           __end_of_CC2500_FrequencyCabr 26BD                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D6                                  _VarLED2 00DA  
                      __end_of_getRxData 10AC               __end_of_setPowerFault_Main 1000  
               _CC2500_registers_address 1800                           RF_RxDisable@rf 0024  
                  ??_Temp_Initialization 0021          __end_of_setDimmerLights_Trigger 27C0  
                                _Product 006F                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 25FD                           ??_setTemp_Main 002D  
         __end_of_setDimmerLights_Switch 27B0                                  ___ftadd 0DFE  
                         ??_setSw_Enable 0022                                  ___ftdiv 0BAB  
                        __size_of___wmul 001E                                  ___ftmul 0C54  
                                ___fttol 0838                      __end_of_Switch_Main 25D8  
                                ___lwdiv 0801                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002B                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005E  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0077                           ??_setSw_Status 0023  
                                __ptext1 13FB                                  __ptext2 1E18  
                                __ptext3 0A6D                                  __ptext4 18CD  
                                __ptext5 1997                                  __ptext6 0002  
                                __ptext7 25B5                                  __ptext8 05FB  
                                __ptext9 1FB7                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                ??_setDimmerLights_Clear 0023                      Sw_DimmerOnFunc@Idle 0062  
                  ??i1_setLoad_StatusOff 0071                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1F28                __end_of_Flash_Memory_Read 1946  
                             _setRF_Main 08BF                            _DelayOff_Main 25C8  
                      _DimmerLights_Main 25F6                        __end_of_setINT_GO 262C  
         __size_of_DlyOff_Initialization 000B                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 264C                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 25BC                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 25C0            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                         _LedPointSelect 1A4F                      _DelayOffPointSelect 26BD  
                                clrloop0 25EA           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 186F                     end_of_initialization 004C  
              ??_DelayOff_Initialization 0023                               _setLoad_GO 266D  
                      _CC2500_InitSetREG 1B27                            _DelayTime_1us 1ADA  
                      __end_of_setTxData 07E7               __end_of_Flash_Memory_Write 1CF0  
                                init_ram 25E3                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 25E4                               _setSw_Main 04B2  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 197C  
                            ?_getPF_Safe 0070                   __size_of_setLoad_Count 0015  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 187F  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023            __size_of_MainT_Initialization 0013  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 132C  
                          _CC2500_TxData 1E9F                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1B7B           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0043  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 1467                  _DimmerLights_Exceptions 115C  
                            ?_getLoad_AD 0070                             __pstringtext 1800  
                    _Flash_Memory_Unlock 261A                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070                         _setLoad_StatusOn 1CF0  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                setLoad_Exceptions@command 002C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 25FD  
                     _Mcu_Initialization 1961                         ??_setLoad_Enable 0020  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$4539 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1A71  
                __end_of_Sw_DimmerOnFunc 115C                  __end_of_setPercentValue 1F6E  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 1B51  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 1E18  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1E5B  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1997  
                          ?_RF_RxDisable 0070               __end_of_setLoad_Exceptions 105A  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 0800  
                   _setRF_Initialization 260B                              _Switch_Main 25D4  
            setDimmerLights_Clear@lights 0023                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 264C                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 18A3                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 002C  
                   setRF_DimmerLights@on 005D                           __end_of___wmul 19EE  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0072                           __end_of_setLED 12CB  
                         __end_of_setBuz 170D                            _setLoad_Count 18B8  
                   _CC2500_FrequencyCabr 26B1                  setLoad_StatusOn@command 0020  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0947                        __size_of_WDT_Main 001C  
                    __size_of_getPF_Safe 0008                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1D22  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1961  
                              _Load_Main 0050                  setLoad_StatusOff@lights 0021  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0070                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1A0D          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 071E                              ?_setLoad_GO 0070  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 2790  
                        RfPointSelect@rf 0021                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D2                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 2781  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
              i1setLoad_StatusOff@lights 0071                                _VarMemory 01A0  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 266D  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 00C4  
                              _Temp_Main 25B5                ??_DimmerLights_Exceptions 002A  
          setOverTemp_Exceptions@command 002C                           ??_WDT_Clearing 0020  
                              _Rx_Length 00BE                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00C0  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 0028                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                           ?_setLoad_Count 0070  
                       _CC2500_SIDLEMode 25C0               __size_of_DimmerLights_Main 0007  
              __end_of_setRF_DimmerValue 1D57                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$3951 006B  
                            __pbssCOMMON 0077                                 ?_IOC_Set 0070  
                              ___latbits 0003                               ?_Load_Main 0070  
                  setTemp_Enable@command 0020                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0096  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
           setDimmerLights_Clear@command 0022                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                   _setOverTemp_Exceptions 1FB7  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0131                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 0022                    __size_of_setRF_Enable 002A  
                        ??_CC2500_RxData 0024            __end_of_setLoad_AH_AL_Restore 1A93  
                __size_of_setRF_RxStatus 000E                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006F                                __pnvBANK1 00E7  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0088  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0026                      setDelayOff_GO@value 0024  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 268E  
                       _getPowerFault_AD 1E18        __size_of_setPowerFault_Exceptions 0041  
    __end_of_Flash_Memory_Initialization 0DFE              _Flash_Memory_Initialization 0D08  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1BD2  
                              __ptext101 25EF                                __ptext110 0838  
                              __ptext102 25C8                                __ptext111 0BAB  
                              __ptext103 170D                                __ptext120 19D0  
                              __ptext112 1A2D                                __ptext104 071E  
                              __ptext121 25C4                                __ptext113 12CB  
                              __ptext105 2662                                __ptext130 26B1  
                              __ptext122 2641                                __ptext114 2763  
                              __ptext106 2772                                __ptext131 1ADA  
                              __ptext123 26BD                                __ptext115 26C9  
                              __ptext107 2657                                __ptext140 1C5D  
                              __ptext132 25BC                                __ptext124 18A3  
                              __ptext116 27B0                                __ptext108 1390  
                              __ptext141 1AB6                                __ptext133 25B8  
                              __ptext125 25C0                                __ptext117 27A0  
                              __ptext109 1F28                                 ?___ftadd 003E  
                              __ptext142 2754                                __ptext134 2790  
                              __ptext126 1C2D                                __ptext118 264C  
                              __ptext143 26A5                                __ptext135 18FB  
                              __ptext127 1B27                                __ptext119 1696  
                              __ptext144 2699                                __ptext136 0B03  
                              __ptext128 19EE                                __ptext145 262C  
                              __ptext137 2636                                __ptext129 1914  
                              __ptext139 02EE                                _getRxData 105A  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                                 ?___lwdiv 0020  
                __end_of_setRFSW_Control 09D7                          _setRF_ReceiveGO 2699  
                    __size_of_setLoad_GO 000B            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 2641  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002A                       __end_of_TouchPower 25DD  
                     _setPowerFault_Main 0EF4       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0057                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0021                      __size_of_setSw_Main 0149  
          __end_of_setDimmerLights_ERROR 1103             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 1AB6            __end_of_setDimmerLights_AdjGo 187F  
                 CC2500_WriteByte@loop_a 0021           __size_of_setDimmerLights_Clear 0010  
          __end_of_setDimmerLights_Clear 27D0                           __size_of_MainT 007A  
                              _r_address 00C1             __end_of_CC2500_patable_vaule 1866  
                       __CFG_WDTE$SWDTEN 0000                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0016                             _setRF_Enable 1B51  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 2657                       Sw_DimmerOffFunc@sw 0064  
                              _setINT_GO 2623                      __end_of_setLED_Main 1D97  
               __end_of_setLoad_StatusOn 1D22                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 25B5                        _CC2500_rfSettings 182F  
                         ___wmul@product 0024                                 _LED_Main 2705  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 25E9                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 071E      __end_of_DimmerLights_Initialization 26E1  
            _DimmerLights_Initialization 26D5                       _CC2500_ClearRXFIFO 25B8  
                     _CC2500_ClearTXFIFO 25BC           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 2754                     ??_setPowerFault_Main 002D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1CBF                               ?_getRxData 0070  
                               _TMR0_ISR 02EE                             ??_getLoad_AD 0024  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
            __end_ofi1_setLoad_StatusOff 1C8E                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 272B                         _Sw_DimmerAdjFunc 1BA6  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                        ??_setLoad_Count 0020        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1B27  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 27A0  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1997  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0020               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 15B3  
                  __size_of_setTemp_Main 0123             __end_of_MainT_Initialization 18A3  
                __size_of_setDelayOff_GO 005C                    __size_of_setSw_Enable 000F  
                               _DelayOff 00B8                             setSw_Main@sw 0068  
                            ??_Load_Main 002D                       __end_of_getPF_Safe 261A  
                       __size_of_IOC_ISR 0024                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 26F9                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 1FB7                    _DlyOff_Initialization 2641  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                       __size_of_WDT_Set 0018                   setLoad_StatusOn@lights 0021  
                     __end_of_getLoad_AD 0B03                    _Switch_Initialization 1866  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 2763                     __size_of_Buzzer_Main 00A8  
                     __end_of_getTemp_AD 1467                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 18FB  
                               _VarTMain 0120                        getLoad_AD@channel 0029  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 26A5  
                            ??_Temp_Main 0030                        ??_PowerFault_Main 002F  
                      setRFSW_Control@sw 0063                      _Load_Initialization 2711  
                              setLED@led 0023     __end_of_setDimmerLights_TriggerERROR 1BA6  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1B7B  
                           _setTemp_Main 05FB                       _setLoad_Exceptions 1010  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 2781  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                       __size_of___lwdiv 0037                 __size_ofi1_RfPointSelect 000A  
                               ___awtoft 1A2D                         ??_LedPointSelect 0020  
                               ___ftpack 12CB                             _setSw_Status 2772  
                      getTemp_AD@channel 0028                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 1D57  
                    ?_setLoad_Exceptions 0070                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 13FB                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                          ___lwdiv@divisor 0020  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 25B2                                 __ptext11 268E  
                               __ptext20 1866                                 __ptext12 25D4  
                               __ptext21 27F0                                 __ptext13 04B2  
                               __ptext30 1BFF                                 __ptext22 25D8  
                               __ptext14 2746                                 __ptext31 1D97  
                               __ptext23 25D0                                 __ptext15 1103  
                               __ptext40 2738                                 __ptext32 1D22  
                               __ptext24 08BF                                 __ptext16 15B3  
                               __ptext41 197C                                 __ptext33 1A93  
                               __ptext25 105A                                 __ptext17 1BA6  
                               __ptext50 27E0                                 __ptext42 19B3  
                               __ptext34 11B6                                 __ptext26 1F6E  
                               __ptext18 1000                                 __ptext51 1961  
                               __ptext43 25CC                                 __ptext35 0C54  
                               __ptext27 14D5                                 __ptext19 186F  
                               __ptext60 2678                                 __ptext52 18E3  
                               __ptext44 260B                                 __ptext36 0DFE  
                               __ptext28 0947                                 __ptext61 27D0  
                               __ptext53 272B                                 __ptext45 25AF  
                               __ptext37 1B00                                 __ptext29 1211  
                               __ptext70 27C0                                 __ptext62 0050  
                               __ptext54 07E7                                 __ptext46 0EF4  
                               __ptext38 1E9F                                 __ptext71 25FD  
                               __ptext63 1010                                 __ptext55 271E  
                               __ptext47 1DD7                                 __ptext39 132C  
                               __ptext80 1EE3                                 __ptext72 2612  
                               __ptext64 2781                                 __ptext56 25DD  
                               __ptext48 2683                                 __ptext81 1467  
                               __ptext73 0801                                 __ptext65 1B51  
                               __ptext57 2604                                 __ptext49 25AC  
                               __ptext90 1C8E                                 __ptext82 26ED  
                               __ptext74 2711                                 __ptext66 2623  
                               __ptext58 1890                                 __ptext91 09D7  
                               __ptext83 0D08                                 __ptext75 1A71  
                               __ptext67 115C                                 __ptext59 1786  
                               __ptext92 1CF0                                 __ptext84 1CBF  
                               __ptext76 2705                                 __ptext68 1B7B  
                               __ptext93 18B8                                 __ptext85 261A  
                               __ptext77 1D57                                 __ptext69 10AC  
                               __ptext94 126D                                 __ptext86 192D  
                               __ptext78 26F9                                 __ptext95 1A4F  
                               __ptext87 25F6                                 __ptext79 187F  
                               __ptext96 1946                                 __ptext88 1624  
                               __ptext97 266D                                 __ptext89 1E5B  
                               __ptext98 26E1                                 __ptext99 26D5  
                           ??_setLoad_GO 0020                  ??_setLED_Initialization 0024  
               __size_of_RfSWPointSelect 000C           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 2772            __end_of_Dimmer_Initialization 25F6  
           __end_of_setDimmerLights_Main 1696              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0022  
                          __size_of_main 006F                              _setRF_Learn 2746  
               __end_of_CC2500_SIDLEMode 25C4                           _setRF_RxStatus 2738  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 26C9  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1946  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                   ??_setLoad_Exceptions 002B                          _CC2500_ReadByte 19B3  
                     _CC2500_InitPATable 19EE      __size_of_getDimmerLights_StatusFlag 000C  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0947  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 185E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023            ?_setDimmerLights_TriggerERROR 0022  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1C2D  
                     __end_of_setLoad_GO 2678              __end_of_Flash_Memory_Modify 14D5  
                      ??_getPercentValue 0059                              _setLog_Code 1F6E  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 2623  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1914  
                     __end_of_setSw_Main 05FB                        setLoad_GO@command 0020  
                  ??_Load_Initialization 0022                            _Transceive_OK 03E1  
                   setLoad_Count@command 0021                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1BFF  
                          ?_getLoad_Safe 0070                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1E5B                     ??_DimmerLights_Close 0021  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0070                   __end_of_setRF_RxStatus 2746  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 1BFF  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1BD2              __end_of_setDimmerLights_Adj 1E9F  
                ?_setTemp_Initialization 0070                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                   _MainT_Initialization 1890                    __size_of_RF_RxDisable 0027  
                      _RF_Initialization 25CC                              getLoad_AD@i 002B  
                            getLoad_AD@j 002A                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 26ED                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00BF          __end_of_DelayOff_Initialization 25C8  
                             _OPTION_REG 0095                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 25CC                      ??_RF_Initialization 0021  
                            getRxData@rf 0068                           _setDelayOff_GO 1211  
       __size_of_setControl_Lights_Table 006F                        _setLoad_StatusOff 1C8E  
                 __end_of_DelayTimejudge 1C2D           __end_of_setOverTemp_Exceptions 2000  
                 __size_of_RfPointSelect 000B                        ??i1_RfPointSelect 0070  
                         ??_getLoad_Safe 0020     __size_of_Flash_Memory_Initialization 00F6  
                          ??_DlyOff_Main 0062                       ?_setLoad_StatusOff 0020  
                  __end_of_DelayTime_1us 1B00                 __end_of_Sw_DimmerAdjFunc 1BD2  
                __end_of_CC2500_ReadByte 19D0             __end_of_setSw_Initialization 2800  
                        ?_setRF_RxStatus 0022                     getPercentValue@value 005B  
                           _RF_RxDisable 1B00               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 2705         __size_of_setDimmerLights_Trigger 0010  
                      ?_setLoad_StatusOn 0020           __end_of_setTemp_Initialization 2699  
               __size_of_Sw_DimmerOnFunc 0059                      ??_setLoad_StatusOff 0021  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 25D0  
               __end_of_Sw_DimmerOffFunc 1624                       ??_setLoad_StatusOn 0021  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  ?_MainT_Initialization 0070                         setRF_RxStatus@rf 0023  
                  __end_of_CC2500_RxData 1390                    __end_of_CC2500_TxData 1EE3  
                         ??_getTemp_Safe 0020                    _setLoad_AH_AL_Restore 1A71  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1C5D  
