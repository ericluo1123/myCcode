

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 08 10:30:36 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	intentry,global,class=CODE,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	dabs	1,0x7E,2
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0090                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0095                     	;# 
   172  0096                     	;# 
   173  0097                     	;# 
   174  0099                     	;# 
   175  009A                     	;# 
   176  009B                     	;# 
   177  009B                     	;# 
   178  009C                     	;# 
   179  009D                     	;# 
   180  009E                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  0116                     	;# 
   185  0117                     	;# 
   186  011D                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0194                     	;# 
   196  0195                     	;# 
   197  0196                     	;# 
   198  0197                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019B                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019E                     	;# 
   209  019F                     	;# 
   210  020D                     	;# 
   211  0210                     	;# 
   212  0211                     	;# 
   213  0211                     	;# 
   214  0212                     	;# 
   215  0212                     	;# 
   216  0213                     	;# 
   217  0213                     	;# 
   218  0214                     	;# 
   219  0214                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0215                     	;# 
   223  0216                     	;# 
   224  0216                     	;# 
   225  0217                     	;# 
   226  0217                     	;# 
   227  0291                     	;# 
   228  0291                     	;# 
   229  0292                     	;# 
   230  0293                     	;# 
   231  0298                     	;# 
   232  0298                     	;# 
   233  0299                     	;# 
   234  029A                     	;# 
   235  0394                     	;# 
   236  0395                     	;# 
   237  0396                     	;# 
   238  0FE4                     	;# 
   239  0FE5                     	;# 
   240  0FE6                     	;# 
   241  0FE7                     	;# 
   242  0FE8                     	;# 
   243  0FE9                     	;# 
   244  0FEA                     	;# 
   245  0FEB                     	;# 
   246  0FED                     	;# 
   247  0FEE                     	;# 
   248  0FEF                     	;# 
   249  0000                     	;# 
   250  0001                     	;# 
   251  0002                     	;# 
   252  0003                     	;# 
   253  0004                     	;# 
   254  0005                     	;# 
   255  0006                     	;# 
   256  0007                     	;# 
   257  0008                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  0010                     	;# 
   265  0011                     	;# 
   266  0012                     	;# 
   267  0015                     	;# 
   268  0016                     	;# 
   269  0016                     	;# 
   270  0017                     	;# 
   271  0018                     	;# 
   272  0019                     	;# 
   273  001A                     	;# 
   274  001B                     	;# 
   275  001C                     	;# 
   276  008C                     	;# 
   277  008D                     	;# 
   278  008E                     	;# 
   279  0090                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0095                     	;# 
   283  0096                     	;# 
   284  0097                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009B                     	;# 
   289  009C                     	;# 
   290  009D                     	;# 
   291  009E                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  0116                     	;# 
   296  0117                     	;# 
   297  011D                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  018E                     	;# 
   301  0191                     	;# 
   302  0191                     	;# 
   303  0192                     	;# 
   304  0193                     	;# 
   305  0193                     	;# 
   306  0194                     	;# 
   307  0195                     	;# 
   308  0196                     	;# 
   309  0197                     	;# 
   310  0199                     	;# 
   311  019A                     	;# 
   312  019B                     	;# 
   313  019B                     	;# 
   314  019B                     	;# 
   315  019B                     	;# 
   316  019C                     	;# 
   317  019C                     	;# 
   318  019D                     	;# 
   319  019E                     	;# 
   320  019F                     	;# 
   321  020D                     	;# 
   322  0210                     	;# 
   323  0211                     	;# 
   324  0211                     	;# 
   325  0212                     	;# 
   326  0212                     	;# 
   327  0213                     	;# 
   328  0213                     	;# 
   329  0214                     	;# 
   330  0214                     	;# 
   331  0215                     	;# 
   332  0215                     	;# 
   333  0215                     	;# 
   334  0216                     	;# 
   335  0216                     	;# 
   336  0217                     	;# 
   337  0217                     	;# 
   338  0291                     	;# 
   339  0291                     	;# 
   340  0292                     	;# 
   341  0293                     	;# 
   342  0298                     	;# 
   343  0298                     	;# 
   344  0299                     	;# 
   345  029A                     	;# 
   346  0394                     	;# 
   347  0395                     	;# 
   348  0396                     	;# 
   349  0FE4                     	;# 
   350  0FE5                     	;# 
   351  0FE6                     	;# 
   352  0FE7                     	;# 
   353  0FE8                     	;# 
   354  0FE9                     	;# 
   355  0FEA                     	;# 
   356  0FEB                     	;# 
   357  0FED                     	;# 
   358  0FEE                     	;# 
   359  0FEF                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  0010                     	;# 
   376  0011                     	;# 
   377  0012                     	;# 
   378  0015                     	;# 
   379  0016                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001C                     	;# 
   387  008C                     	;# 
   388  008D                     	;# 
   389  008E                     	;# 
   390  0090                     	;# 
   391  0091                     	;# 
   392  0092                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0099                     	;# 
   397  009A                     	;# 
   398  009B                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  0116                     	;# 
   407  0117                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019B                     	;# 
   426  019B                     	;# 
   427  019C                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020D                     	;# 
   433  0210                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0291                     	;# 
   450  0291                     	;# 
   451  0292                     	;# 
   452  0293                     	;# 
   453  0298                     	;# 
   454  0298                     	;# 
   455  0299                     	;# 
   456  029A                     	;# 
   457  0394                     	;# 
   458  0395                     	;# 
   459  0396                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0010                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0090                     	;# 
   502  0091                     	;# 
   503  0092                     	;# 
   504  0095                     	;# 
   505  0096                     	;# 
   506  0097                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0197                     	;# 
   532  0199                     	;# 
   533  019A                     	;# 
   534  019B                     	;# 
   535  019B                     	;# 
   536  019B                     	;# 
   537  019B                     	;# 
   538  019C                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020D                     	;# 
   544  0210                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0298                     	;# 
   565  0298                     	;# 
   566  0299                     	;# 
   567  029A                     	;# 
   568  0394                     	;# 
   569  0395                     	;# 
   570  0396                     	;# 
   571  0FE4                     	;# 
   572  0FE5                     	;# 
   573  0FE6                     	;# 
   574  0FE7                     	;# 
   575  0FE8                     	;# 
   576  0FE9                     	;# 
   577  0FEA                     	;# 
   578  0FEB                     	;# 
   579  0FED                     	;# 
   580  0FEE                     	;# 
   581  0FEF                     	;# 
   582  0000                     	;# 
   583  0001                     	;# 
   584  0002                     	;# 
   585  0003                     	;# 
   586  0004                     	;# 
   587  0005                     	;# 
   588  0006                     	;# 
   589  0007                     	;# 
   590  0008                     	;# 
   591  0009                     	;# 
   592  000A                     	;# 
   593  000B                     	;# 
   594  000C                     	;# 
   595  000D                     	;# 
   596  000E                     	;# 
   597  0010                     	;# 
   598  0011                     	;# 
   599  0012                     	;# 
   600  0015                     	;# 
   601  0016                     	;# 
   602  0016                     	;# 
   603  0017                     	;# 
   604  0018                     	;# 
   605  0019                     	;# 
   606  001A                     	;# 
   607  001B                     	;# 
   608  001C                     	;# 
   609  008C                     	;# 
   610  008D                     	;# 
   611  008E                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0095                     	;# 
   616  0096                     	;# 
   617  0097                     	;# 
   618  0099                     	;# 
   619  009A                     	;# 
   620  009B                     	;# 
   621  009B                     	;# 
   622  009C                     	;# 
   623  009D                     	;# 
   624  009E                     	;# 
   625  010C                     	;# 
   626  010D                     	;# 
   627  010E                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  011D                     	;# 
   631  018C                     	;# 
   632  018D                     	;# 
   633  018E                     	;# 
   634  0191                     	;# 
   635  0191                     	;# 
   636  0192                     	;# 
   637  0193                     	;# 
   638  0193                     	;# 
   639  0194                     	;# 
   640  0195                     	;# 
   641  0196                     	;# 
   642  0197                     	;# 
   643  0199                     	;# 
   644  019A                     	;# 
   645  019B                     	;# 
   646  019B                     	;# 
   647  019B                     	;# 
   648  019B                     	;# 
   649  019C                     	;# 
   650  019C                     	;# 
   651  019D                     	;# 
   652  019E                     	;# 
   653  019F                     	;# 
   654  020D                     	;# 
   655  0210                     	;# 
   656  0211                     	;# 
   657  0211                     	;# 
   658  0212                     	;# 
   659  0212                     	;# 
   660  0213                     	;# 
   661  0213                     	;# 
   662  0214                     	;# 
   663  0214                     	;# 
   664  0215                     	;# 
   665  0215                     	;# 
   666  0215                     	;# 
   667  0216                     	;# 
   668  0216                     	;# 
   669  0217                     	;# 
   670  0217                     	;# 
   671  0291                     	;# 
   672  0291                     	;# 
   673  0292                     	;# 
   674  0293                     	;# 
   675  0298                     	;# 
   676  0298                     	;# 
   677  0299                     	;# 
   678  029A                     	;# 
   679  0394                     	;# 
   680  0395                     	;# 
   681  0396                     	;# 
   682  0FE4                     	;# 
   683  0FE5                     	;# 
   684  0FE6                     	;# 
   685  0FE7                     	;# 
   686  0FE8                     	;# 
   687  0FE9                     	;# 
   688  0FEA                     	;# 
   689  0FEB                     	;# 
   690  0FED                     	;# 
   691  0FEE                     	;# 
   692  0FEF                     	;# 
   693  0000                     	;# 
   694  0001                     	;# 
   695  0002                     	;# 
   696  0003                     	;# 
   697  0004                     	;# 
   698  0005                     	;# 
   699  0006                     	;# 
   700  0007                     	;# 
   701  0008                     	;# 
   702  0009                     	;# 
   703  000A                     	;# 
   704  000B                     	;# 
   705  000C                     	;# 
   706  000D                     	;# 
   707  000E                     	;# 
   708  0010                     	;# 
   709  0011                     	;# 
   710  0012                     	;# 
   711  0015                     	;# 
   712  0016                     	;# 
   713  0016                     	;# 
   714  0017                     	;# 
   715  0018                     	;# 
   716  0019                     	;# 
   717  001A                     	;# 
   718  001B                     	;# 
   719  001C                     	;# 
   720  008C                     	;# 
   721  008D                     	;# 
   722  008E                     	;# 
   723  0090                     	;# 
   724  0091                     	;# 
   725  0092                     	;# 
   726  0095                     	;# 
   727  0096                     	;# 
   728  0097                     	;# 
   729  0099                     	;# 
   730  009A                     	;# 
   731  009B                     	;# 
   732  009B                     	;# 
   733  009C                     	;# 
   734  009D                     	;# 
   735  009E                     	;# 
   736  010C                     	;# 
   737  010D                     	;# 
   738  010E                     	;# 
   739  0116                     	;# 
   740  0117                     	;# 
   741  011D                     	;# 
   742  018C                     	;# 
   743  018D                     	;# 
   744  018E                     	;# 
   745  0191                     	;# 
   746  0191                     	;# 
   747  0192                     	;# 
   748  0193                     	;# 
   749  0193                     	;# 
   750  0194                     	;# 
   751  0195                     	;# 
   752  0196                     	;# 
   753  0197                     	;# 
   754  0199                     	;# 
   755  019A                     	;# 
   756  019B                     	;# 
   757  019B                     	;# 
   758  019B                     	;# 
   759  019B                     	;# 
   760  019C                     	;# 
   761  019C                     	;# 
   762  019D                     	;# 
   763  019E                     	;# 
   764  019F                     	;# 
   765  020D                     	;# 
   766  0210                     	;# 
   767  0211                     	;# 
   768  0211                     	;# 
   769  0212                     	;# 
   770  0212                     	;# 
   771  0213                     	;# 
   772  0213                     	;# 
   773  0214                     	;# 
   774  0214                     	;# 
   775  0215                     	;# 
   776  0215                     	;# 
   777  0215                     	;# 
   778  0216                     	;# 
   779  0216                     	;# 
   780  0217                     	;# 
   781  0217                     	;# 
   782  0291                     	;# 
   783  0291                     	;# 
   784  0292                     	;# 
   785  0293                     	;# 
   786  0298                     	;# 
   787  0298                     	;# 
   788  0299                     	;# 
   789  029A                     	;# 
   790  0394                     	;# 
   791  0395                     	;# 
   792  0396                     	;# 
   793  0FE4                     	;# 
   794  0FE5                     	;# 
   795  0FE6                     	;# 
   796  0FE7                     	;# 
   797  0FE8                     	;# 
   798  0FE9                     	;# 
   799  0FEA                     	;# 
   800  0FEB                     	;# 
   801  0FED                     	;# 
   802  0FEE                     	;# 
   803  0FEF                     	;# 
   804  0000                     	;# 
   805  0001                     	;# 
   806  0002                     	;# 
   807  0003                     	;# 
   808  0004                     	;# 
   809  0005                     	;# 
   810  0006                     	;# 
   811  0007                     	;# 
   812  0008                     	;# 
   813  0009                     	;# 
   814  000A                     	;# 
   815  000B                     	;# 
   816  000C                     	;# 
   817  000D                     	;# 
   818  000E                     	;# 
   819  0010                     	;# 
   820  0011                     	;# 
   821  0012                     	;# 
   822  0015                     	;# 
   823  0016                     	;# 
   824  0016                     	;# 
   825  0017                     	;# 
   826  0018                     	;# 
   827  0019                     	;# 
   828  001A                     	;# 
   829  001B                     	;# 
   830  001C                     	;# 
   831  008C                     	;# 
   832  008D                     	;# 
   833  008E                     	;# 
   834  0090                     	;# 
   835  0091                     	;# 
   836  0092                     	;# 
   837  0095                     	;# 
   838  0096                     	;# 
   839  0097                     	;# 
   840  0099                     	;# 
   841  009A                     	;# 
   842  009B                     	;# 
   843  009B                     	;# 
   844  009C                     	;# 
   845  009D                     	;# 
   846  009E                     	;# 
   847  010C                     	;# 
   848  010D                     	;# 
   849  010E                     	;# 
   850  0116                     	;# 
   851  0117                     	;# 
   852  011D                     	;# 
   853  018C                     	;# 
   854  018D                     	;# 
   855  018E                     	;# 
   856  0191                     	;# 
   857  0191                     	;# 
   858  0192                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0197                     	;# 
   865  0199                     	;# 
   866  019A                     	;# 
   867  019B                     	;# 
   868  019B                     	;# 
   869  019B                     	;# 
   870  019B                     	;# 
   871  019C                     	;# 
   872  019C                     	;# 
   873  019D                     	;# 
   874  019E                     	;# 
   875  019F                     	;# 
   876  020D                     	;# 
   877  0210                     	;# 
   878  0211                     	;# 
   879  0211                     	;# 
   880  0212                     	;# 
   881  0212                     	;# 
   882  0213                     	;# 
   883  0213                     	;# 
   884  0214                     	;# 
   885  0214                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  0291                     	;# 
   894  0291                     	;# 
   895  0292                     	;# 
   896  0293                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  0394                     	;# 
   902  0395                     	;# 
   903  0396                     	;# 
   904  0FE4                     	;# 
   905  0FE5                     	;# 
   906  0FE6                     	;# 
   907  0FE7                     	;# 
   908  0FE8                     	;# 
   909  0FE9                     	;# 
   910  0FEA                     	;# 
   911  0FEB                     	;# 
   912  0FED                     	;# 
   913  0FEE                     	;# 
   914  0FEF                     	;# 
   915  0000                     	;# 
   916  0001                     	;# 
   917  0002                     	;# 
   918  0003                     	;# 
   919  0004                     	;# 
   920  0005                     	;# 
   921  0006                     	;# 
   922  0007                     	;# 
   923  0008                     	;# 
   924  0009                     	;# 
   925  000A                     	;# 
   926  000B                     	;# 
   927  000C                     	;# 
   928  000D                     	;# 
   929  000E                     	;# 
   930  0010                     	;# 
   931  0011                     	;# 
   932  0012                     	;# 
   933  0015                     	;# 
   934  0016                     	;# 
   935  0016                     	;# 
   936  0017                     	;# 
   937  0018                     	;# 
   938  0019                     	;# 
   939  001A                     	;# 
   940  001B                     	;# 
   941  001C                     	;# 
   942  008C                     	;# 
   943  008D                     	;# 
   944  008E                     	;# 
   945  0090                     	;# 
   946  0091                     	;# 
   947  0092                     	;# 
   948  0095                     	;# 
   949  0096                     	;# 
   950  0097                     	;# 
   951  0099                     	;# 
   952  009A                     	;# 
   953  009B                     	;# 
   954  009B                     	;# 
   955  009C                     	;# 
   956  009D                     	;# 
   957  009E                     	;# 
   958  010C                     	;# 
   959  010D                     	;# 
   960  010E                     	;# 
   961  0116                     	;# 
   962  0117                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019B                     	;# 
   981  019B                     	;# 
   982  019C                     	;# 
   983  019C                     	;# 
   984  019D                     	;# 
   985  019E                     	;# 
   986  019F                     	;# 
   987  020D                     	;# 
   988  0210                     	;# 
   989  0211                     	;# 
   990  0211                     	;# 
   991  0212                     	;# 
   992  0212                     	;# 
   993  0213                     	;# 
   994  0213                     	;# 
   995  0214                     	;# 
   996  0214                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0298                     	;# 
  1009  0298                     	;# 
  1010  0299                     	;# 
  1011  029A                     	;# 
  1012  0394                     	;# 
  1013  0395                     	;# 
  1014  0396                     	;# 
  1015  0FE4                     	;# 
  1016  0FE5                     	;# 
  1017  0FE6                     	;# 
  1018  0FE7                     	;# 
  1019  0FE8                     	;# 
  1020  0FE9                     	;# 
  1021  0FEA                     	;# 
  1022  0FEB                     	;# 
  1023  0FED                     	;# 
  1024  0FEE                     	;# 
  1025  0FEF                     	;# 
  1026  0000                     	;# 
  1027  0001                     	;# 
  1028  0002                     	;# 
  1029  0003                     	;# 
  1030  0004                     	;# 
  1031  0005                     	;# 
  1032  0006                     	;# 
  1033  0007                     	;# 
  1034  0008                     	;# 
  1035  0009                     	;# 
  1036  000A                     	;# 
  1037  000B                     	;# 
  1038  000C                     	;# 
  1039  000D                     	;# 
  1040  000E                     	;# 
  1041  0010                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0090                     	;# 
  1057  0091                     	;# 
  1058  0092                     	;# 
  1059  0095                     	;# 
  1060  0096                     	;# 
  1061  0097                     	;# 
  1062  0099                     	;# 
  1063  009A                     	;# 
  1064  009B                     	;# 
  1065  009B                     	;# 
  1066  009C                     	;# 
  1067  009D                     	;# 
  1068  009E                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0197                     	;# 
  1087  0199                     	;# 
  1088  019A                     	;# 
  1089  019B                     	;# 
  1090  019B                     	;# 
  1091  019B                     	;# 
  1092  019B                     	;# 
  1093  019C                     	;# 
  1094  019C                     	;# 
  1095  019D                     	;# 
  1096  019E                     	;# 
  1097  019F                     	;# 
  1098  020D                     	;# 
  1099  0210                     	;# 
  1100  0211                     	;# 
  1101  0211                     	;# 
  1102  0212                     	;# 
  1103  0212                     	;# 
  1104  0213                     	;# 
  1105  0213                     	;# 
  1106  0214                     	;# 
  1107  0214                     	;# 
  1108  0215                     	;# 
  1109  0215                     	;# 
  1110  0215                     	;# 
  1111  0216                     	;# 
  1112  0216                     	;# 
  1113  0217                     	;# 
  1114  0217                     	;# 
  1115  0291                     	;# 
  1116  0291                     	;# 
  1117  0292                     	;# 
  1118  0293                     	;# 
  1119  0298                     	;# 
  1120  0298                     	;# 
  1121  0299                     	;# 
  1122  029A                     	;# 
  1123  0394                     	;# 
  1124  0395                     	;# 
  1125  0396                     	;# 
  1126  0FE4                     	;# 
  1127  0FE5                     	;# 
  1128  0FE6                     	;# 
  1129  0FE7                     	;# 
  1130  0FE8                     	;# 
  1131  0FE9                     	;# 
  1132  0FEA                     	;# 
  1133  0FEB                     	;# 
  1134  0FED                     	;# 
  1135  0FEE                     	;# 
  1136  0FEF                     	;# 
  1137  0000                     	;# 
  1138  0001                     	;# 
  1139  0002                     	;# 
  1140  0003                     	;# 
  1141  0004                     	;# 
  1142  0005                     	;# 
  1143  0006                     	;# 
  1144  0007                     	;# 
  1145  0008                     	;# 
  1146  0009                     	;# 
  1147  000A                     	;# 
  1148  000B                     	;# 
  1149  000C                     	;# 
  1150  000D                     	;# 
  1151  000E                     	;# 
  1152  0010                     	;# 
  1153  0011                     	;# 
  1154  0012                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  008C                     	;# 
  1165  008D                     	;# 
  1166  008E                     	;# 
  1167  0090                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0095                     	;# 
  1171  0096                     	;# 
  1172  0097                     	;# 
  1173  0099                     	;# 
  1174  009A                     	;# 
  1175  009B                     	;# 
  1176  009B                     	;# 
  1177  009C                     	;# 
  1178  009D                     	;# 
  1179  009E                     	;# 
  1180  010C                     	;# 
  1181  010D                     	;# 
  1182  010E                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  011D                     	;# 
  1186  018C                     	;# 
  1187  018D                     	;# 
  1188  018E                     	;# 
  1189  0191                     	;# 
  1190  0191                     	;# 
  1191  0192                     	;# 
  1192  0193                     	;# 
  1193  0193                     	;# 
  1194  0194                     	;# 
  1195  0195                     	;# 
  1196  0196                     	;# 
  1197  0197                     	;# 
  1198  0199                     	;# 
  1199  019A                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019B                     	;# 
  1203  019B                     	;# 
  1204  019C                     	;# 
  1205  019C                     	;# 
  1206  019D                     	;# 
  1207  019E                     	;# 
  1208  019F                     	;# 
  1209  020D                     	;# 
  1210  0210                     	;# 
  1211  0211                     	;# 
  1212  0211                     	;# 
  1213  0212                     	;# 
  1214  0212                     	;# 
  1215  0213                     	;# 
  1216  0213                     	;# 
  1217  0214                     	;# 
  1218  0214                     	;# 
  1219  0215                     	;# 
  1220  0215                     	;# 
  1221  0215                     	;# 
  1222  0216                     	;# 
  1223  0216                     	;# 
  1224  0217                     	;# 
  1225  0217                     	;# 
  1226  0291                     	;# 
  1227  0291                     	;# 
  1228  0292                     	;# 
  1229  0293                     	;# 
  1230  0298                     	;# 
  1231  0298                     	;# 
  1232  0299                     	;# 
  1233  029A                     	;# 
  1234  0394                     	;# 
  1235  0395                     	;# 
  1236  0396                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0015                     	;# 
  1267  0016                     	;# 
  1268  0016                     	;# 
  1269  0017                     	;# 
  1270  0018                     	;# 
  1271  0019                     	;# 
  1272  001A                     	;# 
  1273  001B                     	;# 
  1274  001C                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0095                     	;# 
  1282  0096                     	;# 
  1283  0097                     	;# 
  1284  0099                     	;# 
  1285  009A                     	;# 
  1286  009B                     	;# 
  1287  009B                     	;# 
  1288  009C                     	;# 
  1289  009D                     	;# 
  1290  009E                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  011D                     	;# 
  1297  018C                     	;# 
  1298  018D                     	;# 
  1299  018E                     	;# 
  1300  0191                     	;# 
  1301  0191                     	;# 
  1302  0192                     	;# 
  1303  0193                     	;# 
  1304  0193                     	;# 
  1305  0194                     	;# 
  1306  0195                     	;# 
  1307  0196                     	;# 
  1308  0197                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019C                     	;# 
  1316  019C                     	;# 
  1317  019D                     	;# 
  1318  019E                     	;# 
  1319  019F                     	;# 
  1320  020D                     	;# 
  1321  0210                     	;# 
  1322  0211                     	;# 
  1323  0211                     	;# 
  1324  0212                     	;# 
  1325  0212                     	;# 
  1326  0213                     	;# 
  1327  0213                     	;# 
  1328  0214                     	;# 
  1329  0214                     	;# 
  1330  0215                     	;# 
  1331  0215                     	;# 
  1332  0215                     	;# 
  1333  0216                     	;# 
  1334  0216                     	;# 
  1335  0217                     	;# 
  1336  0217                     	;# 
  1337  0291                     	;# 
  1338  0291                     	;# 
  1339  0292                     	;# 
  1340  0293                     	;# 
  1341  0298                     	;# 
  1342  0298                     	;# 
  1343  0299                     	;# 
  1344  029A                     	;# 
  1345  0394                     	;# 
  1346  0395                     	;# 
  1347  0396                     	;# 
  1348  0FE4                     	;# 
  1349  0FE5                     	;# 
  1350  0FE6                     	;# 
  1351  0FE7                     	;# 
  1352  0FE8                     	;# 
  1353  0FE9                     	;# 
  1354  0FEA                     	;# 
  1355  0FEB                     	;# 
  1356  0FED                     	;# 
  1357  0FEE                     	;# 
  1358  0FEF                     	;# 
  1359  0000                     	;# 
  1360  0001                     	;# 
  1361  0002                     	;# 
  1362  0003                     	;# 
  1363  0004                     	;# 
  1364  0005                     	;# 
  1365  0006                     	;# 
  1366  0007                     	;# 
  1367  0008                     	;# 
  1368  0009                     	;# 
  1369  000A                     	;# 
  1370  000B                     	;# 
  1371  000C                     	;# 
  1372  000D                     	;# 
  1373  000E                     	;# 
  1374  0010                     	;# 
  1375  0011                     	;# 
  1376  0012                     	;# 
  1377  0015                     	;# 
  1378  0016                     	;# 
  1379  0016                     	;# 
  1380  0017                     	;# 
  1381  0018                     	;# 
  1382  0019                     	;# 
  1383  001A                     	;# 
  1384  001B                     	;# 
  1385  001C                     	;# 
  1386  008C                     	;# 
  1387  008D                     	;# 
  1388  008E                     	;# 
  1389  0090                     	;# 
  1390  0091                     	;# 
  1391  0092                     	;# 
  1392  0095                     	;# 
  1393  0096                     	;# 
  1394  0097                     	;# 
  1395  0099                     	;# 
  1396  009A                     	;# 
  1397  009B                     	;# 
  1398  009B                     	;# 
  1399  009C                     	;# 
  1400  009D                     	;# 
  1401  009E                     	;# 
  1402  010C                     	;# 
  1403  010D                     	;# 
  1404  010E                     	;# 
  1405  0116                     	;# 
  1406  0117                     	;# 
  1407  011D                     	;# 
  1408  018C                     	;# 
  1409  018D                     	;# 
  1410  018E                     	;# 
  1411  0191                     	;# 
  1412  0191                     	;# 
  1413  0192                     	;# 
  1414  0193                     	;# 
  1415  0193                     	;# 
  1416  0194                     	;# 
  1417  0195                     	;# 
  1418  0196                     	;# 
  1419  0197                     	;# 
  1420  0199                     	;# 
  1421  019A                     	;# 
  1422  019B                     	;# 
  1423  019B                     	;# 
  1424  019B                     	;# 
  1425  019B                     	;# 
  1426  019C                     	;# 
  1427  019C                     	;# 
  1428  019D                     	;# 
  1429  019E                     	;# 
  1430  019F                     	;# 
  1431  020D                     	;# 
  1432  0210                     	;# 
  1433  0211                     	;# 
  1434  0211                     	;# 
  1435  0212                     	;# 
  1436  0212                     	;# 
  1437  0213                     	;# 
  1438  0213                     	;# 
  1439  0214                     	;# 
  1440  0214                     	;# 
  1441  0215                     	;# 
  1442  0215                     	;# 
  1443  0215                     	;# 
  1444  0216                     	;# 
  1445  0216                     	;# 
  1446  0217                     	;# 
  1447  0217                     	;# 
  1448  0291                     	;# 
  1449  0291                     	;# 
  1450  0292                     	;# 
  1451  0293                     	;# 
  1452  0298                     	;# 
  1453  0298                     	;# 
  1454  0299                     	;# 
  1455  029A                     	;# 
  1456  0394                     	;# 
  1457  0395                     	;# 
  1458  0396                     	;# 
  1459  0FE4                     	;# 
  1460  0FE5                     	;# 
  1461  0FE6                     	;# 
  1462  0FE7                     	;# 
  1463  0FE8                     	;# 
  1464  0FE9                     	;# 
  1465  0FEA                     	;# 
  1466  0FEB                     	;# 
  1467  0FED                     	;# 
  1468  0FEE                     	;# 
  1469  0FEF                     	;# 
  1470  0000                     	;# 
  1471  0001                     	;# 
  1472  0002                     	;# 
  1473  0003                     	;# 
  1474  0004                     	;# 
  1475  0005                     	;# 
  1476  0006                     	;# 
  1477  0007                     	;# 
  1478  0008                     	;# 
  1479  0009                     	;# 
  1480  000A                     	;# 
  1481  000B                     	;# 
  1482  000C                     	;# 
  1483  000D                     	;# 
  1484  000E                     	;# 
  1485  0010                     	;# 
  1486  0011                     	;# 
  1487  0012                     	;# 
  1488  0015                     	;# 
  1489  0016                     	;# 
  1490  0016                     	;# 
  1491  0017                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  001B                     	;# 
  1496  001C                     	;# 
  1497  008C                     	;# 
  1498  008D                     	;# 
  1499  008E                     	;# 
  1500  0090                     	;# 
  1501  0091                     	;# 
  1502  0092                     	;# 
  1503  0095                     	;# 
  1504  0096                     	;# 
  1505  0097                     	;# 
  1506  0099                     	;# 
  1507  009A                     	;# 
  1508  009B                     	;# 
  1509  009B                     	;# 
  1510  009C                     	;# 
  1511  009D                     	;# 
  1512  009E                     	;# 
  1513  010C                     	;# 
  1514  010D                     	;# 
  1515  010E                     	;# 
  1516  0116                     	;# 
  1517  0117                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019B                     	;# 
  1536  019B                     	;# 
  1537  019C                     	;# 
  1538  019C                     	;# 
  1539  019D                     	;# 
  1540  019E                     	;# 
  1541  019F                     	;# 
  1542  020D                     	;# 
  1543  0210                     	;# 
  1544  0211                     	;# 
  1545  0211                     	;# 
  1546  0212                     	;# 
  1547  0212                     	;# 
  1548  0213                     	;# 
  1549  0213                     	;# 
  1550  0214                     	;# 
  1551  0214                     	;# 
  1552  0215                     	;# 
  1553  0215                     	;# 
  1554  0215                     	;# 
  1555  0216                     	;# 
  1556  0216                     	;# 
  1557  0217                     	;# 
  1558  0217                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0298                     	;# 
  1564  0298                     	;# 
  1565  0299                     	;# 
  1566  029A                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  0FE4                     	;# 
  1571  0FE5                     	;# 
  1572  0FE6                     	;# 
  1573  0FE7                     	;# 
  1574  0FE8                     	;# 
  1575  0FE9                     	;# 
  1576  0FEA                     	;# 
  1577  0FEB                     	;# 
  1578  0FED                     	;# 
  1579  0FEE                     	;# 
  1580  0FEF                     	;# 
  1581  0000                     	;# 
  1582  0001                     	;# 
  1583  0002                     	;# 
  1584  0003                     	;# 
  1585  0004                     	;# 
  1586  0005                     	;# 
  1587  0006                     	;# 
  1588  0007                     	;# 
  1589  0008                     	;# 
  1590  0009                     	;# 
  1591  000A                     	;# 
  1592  000B                     	;# 
  1593  000C                     	;# 
  1594  000D                     	;# 
  1595  000E                     	;# 
  1596  0010                     	;# 
  1597  0011                     	;# 
  1598  0012                     	;# 
  1599  0015                     	;# 
  1600  0016                     	;# 
  1601  0016                     	;# 
  1602  0017                     	;# 
  1603  0018                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  008C                     	;# 
  1609  008D                     	;# 
  1610  008E                     	;# 
  1611  0090                     	;# 
  1612  0091                     	;# 
  1613  0092                     	;# 
  1614  0095                     	;# 
  1615  0096                     	;# 
  1616  0097                     	;# 
  1617  0099                     	;# 
  1618  009A                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  010C                     	;# 
  1625  010D                     	;# 
  1626  010E                     	;# 
  1627  0116                     	;# 
  1628  0117                     	;# 
  1629  011D                     	;# 
  1630  018C                     	;# 
  1631  018D                     	;# 
  1632  018E                     	;# 
  1633  0191                     	;# 
  1634  0191                     	;# 
  1635  0192                     	;# 
  1636  0193                     	;# 
  1637  0193                     	;# 
  1638  0194                     	;# 
  1639  0195                     	;# 
  1640  0196                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019C                     	;# 
  1649  019C                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  020D                     	;# 
  1654  0210                     	;# 
  1655  0211                     	;# 
  1656  0211                     	;# 
  1657  0212                     	;# 
  1658  0212                     	;# 
  1659  0213                     	;# 
  1660  0213                     	;# 
  1661  0214                     	;# 
  1662  0214                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0215                     	;# 
  1666  0216                     	;# 
  1667  0216                     	;# 
  1668  0217                     	;# 
  1669  0217                     	;# 
  1670  0291                     	;# 
  1671  0291                     	;# 
  1672  0292                     	;# 
  1673  0293                     	;# 
  1674  0298                     	;# 
  1675  0298                     	;# 
  1676  0299                     	;# 
  1677  029A                     	;# 
  1678  0394                     	;# 
  1679  0395                     	;# 
  1680  0396                     	;# 
  1681  0FE4                     	;# 
  1682  0FE5                     	;# 
  1683  0FE6                     	;# 
  1684  0FE7                     	;# 
  1685  0FE8                     	;# 
  1686  0FE9                     	;# 
  1687  0FEA                     	;# 
  1688  0FEB                     	;# 
  1689  0FED                     	;# 
  1690  0FEE                     	;# 
  1691  0FEF                     	;# 
  1692  0000                     	;# 
  1693  0001                     	;# 
  1694  0002                     	;# 
  1695  0003                     	;# 
  1696  0004                     	;# 
  1697  0005                     	;# 
  1698  0006                     	;# 
  1699  0007                     	;# 
  1700  0008                     	;# 
  1701  0009                     	;# 
  1702  000A                     	;# 
  1703  000B                     	;# 
  1704  000C                     	;# 
  1705  000D                     	;# 
  1706  000E                     	;# 
  1707  0010                     	;# 
  1708  0011                     	;# 
  1709  0012                     	;# 
  1710  0015                     	;# 
  1711  0016                     	;# 
  1712  0016                     	;# 
  1713  0017                     	;# 
  1714  0018                     	;# 
  1715  0019                     	;# 
  1716  001A                     	;# 
  1717  001B                     	;# 
  1718  001C                     	;# 
  1719  008C                     	;# 
  1720  008D                     	;# 
  1721  008E                     	;# 
  1722  0090                     	;# 
  1723  0091                     	;# 
  1724  0092                     	;# 
  1725  0095                     	;# 
  1726  0096                     	;# 
  1727  0097                     	;# 
  1728  0099                     	;# 
  1729  009A                     	;# 
  1730  009B                     	;# 
  1731  009B                     	;# 
  1732  009C                     	;# 
  1733  009D                     	;# 
  1734  009E                     	;# 
  1735  010C                     	;# 
  1736  010D                     	;# 
  1737  010E                     	;# 
  1738  0116                     	;# 
  1739  0117                     	;# 
  1740  011D                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  018E                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0197                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020D                     	;# 
  1765  0210                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0291                     	;# 
  1782  0291                     	;# 
  1783  0292                     	;# 
  1784  0293                     	;# 
  1785  0298                     	;# 
  1786  0298                     	;# 
  1787  0299                     	;# 
  1788  029A                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  0FE4                     	;# 
  1793  0FE5                     	;# 
  1794  0FE6                     	;# 
  1795  0FE7                     	;# 
  1796  0FE8                     	;# 
  1797  0FE9                     	;# 
  1798  0FEA                     	;# 
  1799  0FEB                     	;# 
  1800  0FED                     	;# 
  1801  0FEE                     	;# 
  1802  0FEF                     	;# 
  1803  0000                     	;# 
  1804  0001                     	;# 
  1805  0002                     	;# 
  1806  0003                     	;# 
  1807  0004                     	;# 
  1808  0005                     	;# 
  1809  0006                     	;# 
  1810  0007                     	;# 
  1811  0008                     	;# 
  1812  0009                     	;# 
  1813  000A                     	;# 
  1814  000B                     	;# 
  1815  000C                     	;# 
  1816  000D                     	;# 
  1817  000E                     	;# 
  1818  0010                     	;# 
  1819  0011                     	;# 
  1820  0012                     	;# 
  1821  0015                     	;# 
  1822  0016                     	;# 
  1823  0016                     	;# 
  1824  0017                     	;# 
  1825  0018                     	;# 
  1826  0019                     	;# 
  1827  001A                     	;# 
  1828  001B                     	;# 
  1829  001C                     	;# 
  1830  008C                     	;# 
  1831  008D                     	;# 
  1832  008E                     	;# 
  1833  0090                     	;# 
  1834  0091                     	;# 
  1835  0092                     	;# 
  1836  0095                     	;# 
  1837  0096                     	;# 
  1838  0097                     	;# 
  1839  0099                     	;# 
  1840  009A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  010C                     	;# 
  1847  010D                     	;# 
  1848  010E                     	;# 
  1849  0116                     	;# 
  1850  0117                     	;# 
  1851  011D                     	;# 
  1852  018C                     	;# 
  1853  018D                     	;# 
  1854  018E                     	;# 
  1855  0191                     	;# 
  1856  0191                     	;# 
  1857  0192                     	;# 
  1858  0193                     	;# 
  1859  0193                     	;# 
  1860  0194                     	;# 
  1861  0195                     	;# 
  1862  0196                     	;# 
  1863  0197                     	;# 
  1864  0199                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019C                     	;# 
  1871  019C                     	;# 
  1872  019D                     	;# 
  1873  019E                     	;# 
  1874  019F                     	;# 
  1875  020D                     	;# 
  1876  0210                     	;# 
  1877  0211                     	;# 
  1878  0211                     	;# 
  1879  0212                     	;# 
  1880  0212                     	;# 
  1881  0213                     	;# 
  1882  0213                     	;# 
  1883  0214                     	;# 
  1884  0214                     	;# 
  1885  0215                     	;# 
  1886  0215                     	;# 
  1887  0215                     	;# 
  1888  0216                     	;# 
  1889  0216                     	;# 
  1890  0217                     	;# 
  1891  0217                     	;# 
  1892  0291                     	;# 
  1893  0291                     	;# 
  1894  0292                     	;# 
  1895  0293                     	;# 
  1896  0298                     	;# 
  1897  0298                     	;# 
  1898  0299                     	;# 
  1899  029A                     	;# 
  1900  0394                     	;# 
  1901  0395                     	;# 
  1902  0396                     	;# 
  1903  0FE4                     	;# 
  1904  0FE5                     	;# 
  1905  0FE6                     	;# 
  1906  0FE7                     	;# 
  1907  0FE8                     	;# 
  1908  0FE9                     	;# 
  1909  0FEA                     	;# 
  1910  0FEB                     	;# 
  1911  0FED                     	;# 
  1912  0FEE                     	;# 
  1913  0FEF                     	;# 
  1914  0000                     	;# 
  1915  0001                     	;# 
  1916  0002                     	;# 
  1917  0003                     	;# 
  1918  0004                     	;# 
  1919  0005                     	;# 
  1920  0006                     	;# 
  1921  0007                     	;# 
  1922  0008                     	;# 
  1923  0009                     	;# 
  1924  000A                     	;# 
  1925  000B                     	;# 
  1926  000C                     	;# 
  1927  000D                     	;# 
  1928  000E                     	;# 
  1929  0010                     	;# 
  1930  0011                     	;# 
  1931  0012                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  008C                     	;# 
  1942  008D                     	;# 
  1943  008E                     	;# 
  1944  0090                     	;# 
  1945  0091                     	;# 
  1946  0092                     	;# 
  1947  0095                     	;# 
  1948  0096                     	;# 
  1949  0097                     	;# 
  1950  0099                     	;# 
  1951  009A                     	;# 
  1952  009B                     	;# 
  1953  009B                     	;# 
  1954  009C                     	;# 
  1955  009D                     	;# 
  1956  009E                     	;# 
  1957  010C                     	;# 
  1958  010D                     	;# 
  1959  010E                     	;# 
  1960  0116                     	;# 
  1961  0117                     	;# 
  1962  011D                     	;# 
  1963  018C                     	;# 
  1964  018D                     	;# 
  1965  018E                     	;# 
  1966  0191                     	;# 
  1967  0191                     	;# 
  1968  0192                     	;# 
  1969  0193                     	;# 
  1970  0193                     	;# 
  1971  0194                     	;# 
  1972  0195                     	;# 
  1973  0196                     	;# 
  1974  0197                     	;# 
  1975  0199                     	;# 
  1976  019A                     	;# 
  1977  019B                     	;# 
  1978  019B                     	;# 
  1979  019B                     	;# 
  1980  019B                     	;# 
  1981  019C                     	;# 
  1982  019C                     	;# 
  1983  019D                     	;# 
  1984  019E                     	;# 
  1985  019F                     	;# 
  1986  020D                     	;# 
  1987  0210                     	;# 
  1988  0211                     	;# 
  1989  0211                     	;# 
  1990  0212                     	;# 
  1991  0212                     	;# 
  1992  0213                     	;# 
  1993  0213                     	;# 
  1994  0214                     	;# 
  1995  0214                     	;# 
  1996  0215                     	;# 
  1997  0215                     	;# 
  1998  0215                     	;# 
  1999  0216                     	;# 
  2000  0216                     	;# 
  2001  0217                     	;# 
  2002  0217                     	;# 
  2003  0291                     	;# 
  2004  0291                     	;# 
  2005  0292                     	;# 
  2006  0293                     	;# 
  2007  0298                     	;# 
  2008  0298                     	;# 
  2009  0299                     	;# 
  2010  029A                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  0FE4                     	;# 
  2015  0FE5                     	;# 
  2016  0FE6                     	;# 
  2017  0FE7                     	;# 
  2018  0FE8                     	;# 
  2019  0FE9                     	;# 
  2020  0FEA                     	;# 
  2021  0FEB                     	;# 
  2022  0FED                     	;# 
  2023  0FEE                     	;# 
  2024  0FEF                     	;# 
  2025                           
  2026                           	psect	idataBANK3
  2027  12F9                     __pidataBANK3:	
  2028                           
  2029                           ;initializer for __product
  2030  12F9  3463               	retlw	99
  2031  12FA  3402               	retlw	2
  2032  12FB  3400               	retlw	0
  2033  12FC  3400               	retlw	0
  2034  12FD  3400               	retlw	0
  2035  12FE  3400               	retlw	0
  2036  12FF  3400               	retlw	0
  2037  1300  3400               	retlw	0
  2038  1301  3400               	retlw	0
  2039  1302  3400               	retlw	0
  2040  1303  3400               	retlw	0
  2041  1304  3400               	retlw	0
  2042  1305  34FF               	retlw	255
  2043  1306  34FF               	retlw	255
  2044  1307  34FF               	retlw	255
  2045  1308  3400               	retlw	0
  2046  1309  3400               	retlw	0
  2047  130A  3400               	retlw	0
  2048  130B  3400               	retlw	0
  2049  130C  3400               	retlw	0
  2050  130D  3400               	retlw	0
  2051  130E  3400               	retlw	0
  2052  130F  3400               	retlw	0
  2053  1310  3400               	retlw	0
  2054  1311  3400               	retlw	0
  2055  1312  3400               	retlw	0
  2056  1313  3400               	retlw	0
  2057  1314  3400               	retlw	0
  2058  1315  3400               	retlw	0
  2059  1316  3400               	retlw	0
  2060  1317  3400               	retlw	0
  2061  1318  3400               	retlw	0
  2062                           
  2063                           	psect	stringtext
  2064  1000                     __pstringtext:	
  2065  1000                     _CC2500_registers_address:	
  2066  1000  3403               	retlw	3
  2067  1001  3416               	retlw	22
  2068  1002  3417               	retlw	23
  2069  1003  341E               	retlw	30
  2070  1004  341F               	retlw	31
  2071  1005  3420               	retlw	32
  2072  1006  342A               	retlw	42
  2073  1007  342B               	retlw	43
  2074  1008  340B               	retlw	11
  2075  1009  340C               	retlw	12
  2076  100A  340D               	retlw	13
  2077  100B  340E               	retlw	14
  2078  100C  340F               	retlw	15
  2079  100D  3410               	retlw	16
  2080  100E  3411               	retlw	17
  2081  100F  3412               	retlw	18
  2082  1010  3413               	retlw	19
  2083  1011  3414               	retlw	20
  2084  1012  340A               	retlw	10
  2085  1013  3415               	retlw	21
  2086  1014  3421               	retlw	33
  2087  1015  3422               	retlw	34
  2088  1016  3418               	retlw	24
  2089  1017  3419               	retlw	25
  2090  1018  341A               	retlw	26
  2091  1019  341B               	retlw	27
  2092  101A  341C               	retlw	28
  2093  101B  341D               	retlw	29
  2094  101C  3423               	retlw	35
  2095  101D  3424               	retlw	36
  2096  101E  3425               	retlw	37
  2097  101F  3426               	retlw	38
  2098  1020  3429               	retlw	41
  2099  1021  342C               	retlw	44
  2100  1022  342D               	retlw	45
  2101  1023  342E               	retlw	46
  2102  1024  3400               	retlw	0
  2103  1025  3401               	retlw	1
  2104  1026  3402               	retlw	2
  2105  1027  3407               	retlw	7
  2106  1028  3408               	retlw	8
  2107  1029  3409               	retlw	9
  2108  102A  3406               	retlw	6
  2109  102B  3404               	retlw	4
  2110  102C  3405               	retlw	5
  2111  102D  3427               	retlw	39
  2112  102E  3428               	retlw	40
  2113  102F                     __end_of_CC2500_registers_address:	
  2114  102F                     _CC2500_rfSettings:	
  2115  102F  3407               	retlw	7
  2116  1030  3407               	retlw	7
  2117  1031  3430               	retlw	48
  2118  1032  3487               	retlw	135
  2119  1033  346B               	retlw	107
  2120  1034  34F8               	retlw	248
  2121  1035  347F               	retlw	127
  2122  1036  343F               	retlw	63
  2123  1037  3409               	retlw	9
  2124  1038  3400               	retlw	0
  2125  1039  345C               	retlw	92
  2126  103A  34A7               	retlw	167
  2127  103B  3462               	retlw	98
  2128  103C  3486               	retlw	134
  2129  103D  3483               	retlw	131
  2130  103E  3403               	retlw	3
  2131  103F  3422               	retlw	34
  2132  1040  34F8               	retlw	248
  2133  1041  3400               	retlw	0
  2134  1042  3444               	retlw	68
  2135  1043  34B6               	retlw	182
  2136  1044  3410               	retlw	16
  2137  1045  3418               	retlw	24
  2138  1046  341D               	retlw	29
  2139  1047  341C               	retlw	28
  2140  1048  34C7               	retlw	199
  2141  1049  3400               	retlw	0
  2142  104A  34B2               	retlw	178
  2143  104B  34EA               	retlw	234
  2144  104C  340A               	retlw	10
  2145  104D  3400               	retlw	0
  2146  104E  3411               	retlw	17
  2147  104F  3459               	retlw	89
  2148  1050  3488               	retlw	136
  2149  1051  3431               	retlw	49
  2150  1052  340B               	retlw	11
  2151  1053  342F               	retlw	47
  2152  1054  342E               	retlw	46
  2153  1055  3406               	retlw	6
  2154  1056  3404               	retlw	4
  2155  1057  3405               	retlw	5
  2156  1058  3400               	retlw	0
  2157  1059  3430               	retlw	48
  2158  105A  34D3               	retlw	211
  2159  105B  3491               	retlw	145
  2160  105C  3441               	retlw	65
  2161  105D  3400               	retlw	0
  2162  105E                     __end_of_CC2500_rfSettings:	
  2163  105E                     _CC2500_patable_vaule:	
  2164  105E  34FE               	retlw	254
  2165  105F  34FE               	retlw	254
  2166  1060  34FE               	retlw	254
  2167  1061  34FE               	retlw	254
  2168  1062  34FE               	retlw	254
  2169  1063  34FE               	retlw	254
  2170  1064  34FE               	retlw	254
  2171  1065  34FE               	retlw	254
  2172  1066                     __end_of_CC2500_patable_vaule:	
  2173                           
  2174                           	psect	nvCOMMON
  2175  007D                     __pnvCOMMON:	
  2176  007D                     _product:	
  2177  007D                     	ds	1
  2178                           
  2179                           	psect	nvBANK1
  2180  00E6                     __pnvBANK1:	
  2181  00E6                     _Memory:	
  2182  00E6                     	ds	1
  2183  00E7                     _Timer0:	
  2184  00E7                     	ds	1
  2185  00E8                     _WDT:	
  2186  00E8                     	ds	1
  2187  00E9                     _myMain:	
  2188  00E9                     	ds	1
  2189  000C                     _PORTA	set	12
  2190  000D                     _PORTB	set	13
  2191  000E                     _PORTC	set	14
  2192  0015                     _TMR0	set	21
  2193  005F                     _GIE	set	95
  2194  005C                     _INTE	set	92
  2195  0059                     _INTF	set	89
  2196  005B                     _IOCIE	set	91
  2197  0058                     _IOCIF	set	88
  2198  005E                     _PEIE	set	94
  2199  0060                     _RA0	set	96
  2200  0063                     _RA3	set	99
  2201  0064                     _RA4	set	100
  2202  0066                     _RA6	set	102
  2203  0067                     _RA7	set	103
  2204  0068                     _RB0	set	104
  2205  0069                     _RB1	set	105
  2206  006B                     _RB3	set	107
  2207  006C                     _RB4	set	108
  2208  006D                     _RB5	set	109
  2209  0070                     _RC0	set	112
  2210  0071                     _RC1	set	113
  2211  0072                     _RC2	set	114
  2212  0074                     _RC4	set	116
  2213  0075                     _RC5	set	117
  2214  0077                     _RC7	set	119
  2215  005D                     _TMR0IE	set	93
  2216  005A                     _TMR0IF	set	90
  2217  009D                     _ADCON0	set	157
  2218  009E                     _ADCON1	set	158
  2219  009C                     _ADRESH	set	156
  2220  009B                     _ADRESL	set	155
  2221  0095                     _OPTION_REG	set	149
  2222  0099                     _OSCCON	set	153
  2223  008C                     _TRISA	set	140
  2224  008D                     _TRISB	set	141
  2225  008E                     _TRISC	set	142
  2226  0097                     _WDTCON	set	151
  2227  04E9                     _GO_nDONE	set	1257
  2228  0117                     _FVRCON	set	279
  2229  010C                     _LATA	set	268
  2230  010D                     _LATB	set	269
  2231  010E                     _LATC	set	270
  2232  018C                     _ANSELA	set	396
  2233  018D                     _ANSELB	set	397
  2234  018E                     _ANSELC	set	398
  2235  0192                     _PMADRH	set	402
  2236  0191                     _PMADRL	set	401
  2237  0196                     _PMCON2	set	406
  2238  0194                     _PMDATH	set	404
  2239  0193                     _PMDATL	set	403
  2240  0CAE                     _CFGS	set	3246
  2241  0CAC                     _FREE	set	3244
  2242  0CAD                     _LWLO	set	3245
  2243  0CA8                     _RD	set	3240
  2244  0CA9                     _WR	set	3241
  2245  0CAA                     _WREN	set	3242
  2246  1068                     _WPUB0	set	4200
  2247  1069                     _WPUB1	set	4201
  2248  106A                     _WPUB2	set	4202
  2249  0396                     _IOCBF	set	918
  2250  0395                     _IOCBN	set	917
  2251  0394                     _IOCBP	set	916
  2252  1CB2                     _IOCBF2	set	7346
  2253                           
  2254                           ; #config settings
  2255  0000                     
  2256                           	psect	cinit
  2257  0018                     start_initialization:	
  2258  0018                     __initialization:	
  2259                           
  2260                           ; Clear objects allocated to BITCOMMON
  2261  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2262                           
  2263                           ; Clear objects allocated to COMMON
  2264  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2265  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2266  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2267  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2268                           
  2269                           ; Clear objects allocated to BANK1
  2270  001D  30A0               	movlw	low __pbssBANK1
  2271  001E  0084               	movwf	4
  2272  001F  3000               	movlw	high __pbssBANK1
  2273  0020  0085               	movwf	5
  2274  0021  3046               	movlw	70
  2275  0022  319E  26D3  3180   	fcall	clear_ram0
  2276                           
  2277                           ; Clear objects allocated to BANK2
  2278  0025  3020               	movlw	low __pbssBANK2
  2279  0026  0084               	movwf	4
  2280  0027  3001               	movlw	high __pbssBANK2
  2281  0028  0085               	movwf	5
  2282  0029  3043               	movlw	67
  2283  002A  319E  26D3  3180   	fcall	clear_ram0
  2284                           
  2285                           ; Clear objects allocated to BANK3
  2286  002D  30C0               	movlw	low __pbssBANK3
  2287  002E  0084               	movwf	4
  2288  002F  3001               	movlw	high __pbssBANK3
  2289  0030  0085               	movwf	5
  2290  0031  3011               	movlw	17
  2291  0032  319E  26D3  3180   	fcall	clear_ram0
  2292                           
  2293                           ; Clear objects allocated to BANK4
  2294  0035  3020               	movlw	low __pbssBANK4
  2295  0036  0084               	movwf	4
  2296  0037  3002               	movlw	high __pbssBANK4
  2297  0038  0085               	movwf	5
  2298  0039  3025               	movlw	37
  2299  003A  319E  26D3  3180   	fcall	clear_ram0
  2300                           
  2301                           ; Initialize objects allocated to BANK3
  2302  003D  30F9               	movlw	low __pidataBANK3
  2303  003E  0084               	movwf	4
  2304  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2305  0040  0085               	movwf	5
  2306  0041  30A0               	movlw	low __pdataBANK3
  2307  0042  0086               	movwf	6
  2308  0043  3001               	movlw	high __pdataBANK3
  2309  0044  0087               	movwf	7
  2310  0045  3020               	movlw	32
  2311  0046  319E  26CD         	fcall	init_ram
  2312  0048                     end_of_initialization:	
  2313                           ;End of C runtime variable initialization code
  2314                           
  2315  0048                     __end_of__initialization:	
  2316  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2317  0049  0020               	movlb	0
  2318  004A  3197  2FAC         	ljmp	_main	;jump to C main() function
  2319                           
  2320                           	psect	bitbssCOMMON
  2321  03E0                     __pbitbssCOMMON:	
  2322  03E0                     _Receive_OK:	
  2323  03E0                     	ds	1
  2324  03E1                     _Transceive_OK:	
  2325  03E1                     	ds	1
  2326                           
  2327                           	psect	bssCOMMON
  2328  0078                     __pbssCOMMON:	
  2329  0078                     _Buz:	
  2330  0078                     	ds	1
  2331  0079                     _DimmerLights:	
  2332  0079                     	ds	1
  2333  007A                     _DimmerLightsIntr:	
  2334  007A                     	ds	1
  2335  007B                     _Sw:	
  2336  007B                     	ds	1
  2337                           
  2338                           	psect	bssBANK1
  2339  00A0                     __pbssBANK1:	
  2340  00A0                     _RF_Data:	
  2341  00A0                     	ds	21
  2342  00B5                     _RF_Count:	
  2343  00B5                     	ds	2
  2344  00B7                     _CRC:	
  2345  00B7                     	ds	1
  2346  00B8                     _DelayOff:	
  2347  00B8                     	ds	1
  2348  00B9                     _Dimmer:	
  2349  00B9                     	ds	1
  2350  00BA                     _DimmerLights11:	
  2351  00BA                     	ds	1
  2352  00BB                     _DimmerLights22:	
  2353  00BB                     	ds	1
  2354  00BC                     _LED:	
  2355  00BC                     	ds	1
  2356  00BD                     _RF:	
  2357  00BD                     	ds	1
  2358  00BE                     _RFSW:	
  2359  00BE                     	ds	1
  2360  00BF                     _RSSI:	
  2361  00BF                     	ds	1
  2362  00C0                     _Rx_Length:	
  2363  00C0                     	ds	1
  2364  00C1                     _SPI0Buffer:	
  2365  00C1                     	ds	1
  2366  00C2                     _Tx_Length:	
  2367  00C2                     	ds	1
  2368  00C3                     _r_address:	
  2369  00C3                     	ds	1
  2370  00C4                     _r_data:	
  2371  00C4                     	ds	1
  2372  00C5                     _s_data:	
  2373  00C5                     	ds	1
  2374  00C6                     _DlySw1:	
  2375  00C6                     	ds	5
  2376  00CB                     _DlySw2:	
  2377  00CB                     	ds	5
  2378  00D0                     _VarErrLED:	
  2379  00D0                     	ds	4
  2380  00D4                     _VarLED1:	
  2381  00D4                     	ds	4
  2382  00D8                     _VarLED2:	
  2383  00D8                     	ds	4
  2384  00DC                     _Dimmer1:	
  2385  00DC                     	ds	3
  2386  00DF                     _RF1:	
  2387  00DF                     	ds	3
  2388  00E2                     __WDT:	
  2389  00E2                     	ds	2
  2390  00E4                     _RFSW1:	
  2391  00E4                     	ds	1
  2392  00E5                     _RFSW2:	
  2393  00E5                     	ds	1
  2394                           
  2395                           	psect	bssBANK2
  2396  0120                     __pbssBANK2:	
  2397  0120                     _DimmerLights1:	
  2398  0120                     	ds	14
  2399  012E                     _DimmerLights2:	
  2400  012E                     	ds	14
  2401  013C                     _Buz1:	
  2402  013C                     	ds	12
  2403  0148                     _Sw1:	
  2404  0148                     	ds	9
  2405  0151                     _Sw2:	
  2406  0151                     	ds	9
  2407  015A                     _VarTimer0:	
  2408  015A                     	ds	9
  2409                           
  2410                           	psect	bssBANK3
  2411  01C0                     __pbssBANK3:	
  2412  01C0                     __myMain:	
  2413  01C0                     	ds	17
  2414                           
  2415                           	psect	dataBANK3
  2416  01A0                     __pdataBANK3:	
  2417  01A0                     __product:	
  2418  01A0                     	ds	32
  2419                           
  2420                           	psect	bssBANK4
  2421  0220                     __pbssBANK4:	
  2422  0220                     _VarMemory:	
  2423  0220                     	ds	37
  2424                           
  2425                           	psect	clrtext
  2426  1ED3                     clear_ram0:	
  2427                           ;	Called with FSR0 containing the base address, and
  2428                           ;	WREG with the size to clear
  2429                           
  2430  1ED3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2431  1ED4                     clrloop0:	
  2432  1ED4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2433  1ED5  3101               	addfsr 0,1
  2434  1ED6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2435  1ED7  2ED4               	goto	clrloop0	;have we reached the end yet?
  2436  1ED8  3400               	retlw	0	;all done for this memory range, return
  2437                           
  2438                           	psect	inittext
  2439  1ECD                     init_ram:	
  2440  1ECD  00FE               	movwf	126
  2441  1ECE                     initloop:	
  2442  1ECE  0012               	moviw fsr0++
  2443  1ECF  001E               	movwi fsr1++
  2444  1ED0  0BFE               	decfsz	126,f
  2445  1ED1  2ECE               	goto	initloop
  2446  1ED2  3400               	retlw	0
  2447                           
  2448                           	psect	cstackCOMMON
  2449  0070                     __pcstackCOMMON:	
  2450  0070                     ?_CC2500_WriteByte:	
  2451  0070                     ?_CC2500_WriteCommand:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_CC2500_ReadStatus:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_CC2500_ReadByte:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_CC2500_PowerRST:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_InitSetREG:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_InitPATable:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_ClearTXFIFO:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_CC2500_ClearRXFIFO:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_CC2500_FrequencyCabr:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_CC2500_SIDLEMode:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_DlyOff_Initialization:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_DlyOff_Main:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_setTxData:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setDimmerLights_Initialization:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_Dimmer_Initialization:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setDimmerLights_Main:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setLED_Initialization:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_setLED_Main:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_Fosc_Set:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_IO_Set:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_TMR0_Set:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_ADC_Set:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_INT_Set:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_IOC_Set:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_WDT_Set:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_IOC_ISR:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_TMR0_ISR:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_INT_ISR:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_Flash_Memory_Write:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_Flash_Memory_Modify:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_WDT_Clearing:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setRF_Initialization:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setRF_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_getRxData:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_RF_RxDisable:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setLog_Code:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_setControl_Lights_Table:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_setRFSW_Control:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setRFSW_AdjControl:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setRF_DimmerValue:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_setSw_Initialization:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setSw_Main:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_Sw_DimmerOnFunc:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_Sw_DimmerAdjFunc:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_Sw_DimmerOffFunc:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_myMain_Initialization:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_my_Main:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Buzzer_Initialization:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_Buz_Counter:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ??_Buz_Counter:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Buzzer_Main:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_CC2500_TxData:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_RxData:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_PowerOnInitial:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_DelayOffPointSelect:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DelayOff_Initialization:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_DelayOff_Main:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_DimmerIntrPointSelect:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ??_DimmerIntrPointSelect:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_setDimmerLights_IntrControl:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_IntrGO:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DimmerLightsPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_DimmerLights_Initialization:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_DimmerLights_Close:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_DimmerLights_Main:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setDimmerLights_AdjRF:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_LedPointSelect:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_LED_Initialization:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_LED_Main:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_Mcu_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_ISR:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerReClock:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setINT_GO:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Flash_Memory_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_Flash_Memory_Main:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_Flash_Memory_Unlock:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Erasing:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_WDT_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_RfPointSelect:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_RF_Initialization:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_RF_Main:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_RfSWPointSelect:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_TouchPower:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_SwPointSelect:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_Switch_Initialization:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Switch_Main:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_setSw_Enable:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?i1_RfPointSelect:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ??i1_RfPointSelect:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_DelayTimejudge:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_getDimmerLights_StatusFlag:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_getPercentValue:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Read:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_setPercentValue:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     setRF_Initialization@rf:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x0
  2738  0070                     	ds	1
  2739  0071                     DimmerIntrPointSelect@lights:	
  2740  0071                     i1RfPointSelect@rf:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743                           
  2744                           ; 1 bytes @ 0x1
  2745  0071                     	ds	1
  2746  0072                     ?_setRF_ReceiveGO:	
  2747  0072                     ??_setDimmerLights_IntrControl:	
  2748                           ; 0 bytes @ 0x2
  2749                           
  2750  0072                     ??_setDimmerLights_IntrGO:	
  2751                           ; 0 bytes @ 0x2
  2752                           
  2753  0072                     setDimmerLights_IntrGO@lights:	
  2754                           ; 0 bytes @ 0x2
  2755                           
  2756  0072                     setRF_ReceiveGO@command:	
  2757                           ; 1 bytes @ 0x2
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x2
  2761  0072                     	ds	1
  2762  0073                     ??_IOC_ISR:	
  2763  0073                     ??_setRF_ReceiveGO:	
  2764                           ; 0 bytes @ 0x3
  2765                           
  2766  0073                     ??_setDimmerReClock:	
  2767                           ; 0 bytes @ 0x3
  2768                           
  2769  0073                     setRF_ReceiveGO@rf:	
  2770                           ; 0 bytes @ 0x3
  2771                           
  2772                           
  2773                           ; 1 bytes @ 0x3
  2774  0073                     	ds	1
  2775  0074                     ??_INT_ISR:	
  2776                           
  2777                           ; 0 bytes @ 0x4
  2778  0074                     	ds	2
  2779  0076                     setDimmerLights_IntrControl@lights:	
  2780                           
  2781                           ; 1 bytes @ 0x6
  2782  0076                     	ds	1
  2783  0077                     ??_TMR0_ISR:	
  2784  0077                     ??_ISR:	
  2785                           ; 0 bytes @ 0x7
  2786                           
  2787                           
  2788                           ; 0 bytes @ 0x7
  2789  0077                     	ds	1
  2790                           
  2791                           	psect	cstackBANK0
  2792  0020                     __pcstackBANK0:	
  2793  0020                     ??_CC2500_WriteByte:	
  2794  0020                     ??_CC2500_ReadByte:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0020                     ?_DelayTime_1us:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0020                     ??_DelayTimejudge:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0020                     ??_Dimmer_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0020                     ??_getDimmerLights_StatusFlag:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0020                     ??_Fosc_Set:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0020                     ??_IO_Set:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0020                     ??_TMR0_Set:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0020                     ??_ADC_Set:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0020                     ??_INT_Set:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0020                     ??_IOC_Set:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0020                     ??_WDT_Set:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_Flash_Memory_Read:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_Flash_Memory_Write:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_WDT_Clearing:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setRF_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_myMain_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_Buzzer_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ?_setBuz:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Buzzer_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_DelayOffPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_DimmerLightsPointSelect:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_LedPointSelect:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_setINT_GO:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_Flash_Memory_Unlock:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_Flash_Memory_Erasing:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_WDT_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_RfPointSelect:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_RfSWPointSelect:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_TouchPower:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_SwPointSelect:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ?___ftpack:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     setINT_GO@command:	
  2891                           ; 3 bytes @ 0x0
  2892                           
  2893  0020                     setBuz@time:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0020                     DelayTime_1us@count:	
  2897                           ; 2 bytes @ 0x0
  2898                           
  2899  0020                     ___ftpack@arg:	
  2900                           ; 2 bytes @ 0x0
  2901                           
  2902                           
  2903                           ; 3 bytes @ 0x0
  2904  0020                     	ds	1
  2905  0021                     ??_Mcu_Initialization:	
  2906  0021                     ??_RF_Initialization:	
  2907                           ; 0 bytes @ 0x1
  2908                           
  2909  0021                     CC2500_WriteByte@loop_a:	
  2910                           ; 0 bytes @ 0x1
  2911                           
  2912  0021                     CC2500_ReadByte@loop_b:	
  2913                           ; 1 bytes @ 0x1
  2914                           
  2915  0021                     DelayOffPointSelect@sw:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918  0021                     DelayTimejudge@value:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921  0021                     DimmerLightsPointSelect@lights:	
  2922                           ; 1 bytes @ 0x1
  2923                           
  2924  0021                     getDimmerLights_StatusFlag@Status:	
  2925                           ; 1 bytes @ 0x1
  2926                           
  2927  0021                     LedPointSelect@led:	
  2928                           ; 1 bytes @ 0x1
  2929                           
  2930  0021                     Flash_Memory_Read@i:	
  2931                           ; 1 bytes @ 0x1
  2932                           
  2933  0021                     Flash_Memory_Write@i:	
  2934                           ; 1 bytes @ 0x1
  2935                           
  2936  0021                     RfPointSelect@rf:	
  2937                           ; 1 bytes @ 0x1
  2938                           
  2939  0021                     RfSWPointSelect@sw:	
  2940                           ; 1 bytes @ 0x1
  2941                           
  2942  0021                     SwPointSelect@sw:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x1
  2947  0021                     	ds	1
  2948  0022                     ??_CC2500_WriteCommand:	
  2949  0022                     ??_CC2500_ReadStatus:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0022                     ?_setRF_RxStatus:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955  0022                     ??_DelayTime_1us:	
  2956                           ; 0 bytes @ 0x2
  2957                           
  2958  0022                     ?_CC2500_WriteREG:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0022                     ??_DlyOff_Initialization:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0022                     ?_setSw_Status:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0022                     ?_setRFSW_Status:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0022                     ?_setDimmerLights_Trigger:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0022                     ?_setDimmerLights_Switch:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0022                     ??_setTxData:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0022                     ??_setDimmerLights_Initialization:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0022                     ?_setLED:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0022                     ??_setLED_Main:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0022                     ??_setBuz:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0022                     ?_setDimmerLights_AdjGo:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0022                     ?_setDimmerLights_TriggerAdj:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0022                     ?_setRF_Learn:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0022                     ?_setRF_Enable:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0022                     ??_setSw_Enable:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0022                     CC2500_WriteREG@value:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0022                     DlyOff_Initialization@sw:	
  3010                           ; 1 bytes @ 0x2
  3011                           
  3012  0022                     DelayTimejudge@i:	
  3013                           ; 1 bytes @ 0x2
  3014                           
  3015  0022                     _getDimmerLights_StatusFlag$1665:	
  3016                           ; 1 bytes @ 0x2
  3017                           
  3018  0022                     setDimmerLights_Switch@command:	
  3019                           ; 1 bytes @ 0x2
  3020                           
  3021  0022                     setDimmerLights_AdjGo@command:	
  3022                           ; 1 bytes @ 0x2
  3023                           
  3024  0022                     setDimmerLights_Trigger@command:	
  3025                           ; 1 bytes @ 0x2
  3026                           
  3027  0022                     setDimmerLights_TriggerAdj@command:	
  3028                           ; 1 bytes @ 0x2
  3029                           
  3030  0022                     setLED@command:	
  3031                           ; 1 bytes @ 0x2
  3032                           
  3033  0022                     Flash_Memory_Read@address:	
  3034                           ; 1 bytes @ 0x2
  3035                           
  3036  0022                     setRF_Learn@command:	
  3037                           ; 1 bytes @ 0x2
  3038                           
  3039  0022                     setRF_RxStatus@command:	
  3040                           ; 1 bytes @ 0x2
  3041                           
  3042  0022                     setRF_Enable@command:	
  3043                           ; 1 bytes @ 0x2
  3044                           
  3045  0022                     setRFSW_Status@command:	
  3046                           ; 1 bytes @ 0x2
  3047                           
  3048  0022                     setSw_Enable@command:	
  3049                           ; 1 bytes @ 0x2
  3050                           
  3051  0022                     setSw_Status@command:	
  3052                           ; 1 bytes @ 0x2
  3053                           
  3054  0022                     DelayTime_1us@i:	
  3055                           ; 1 bytes @ 0x2
  3056                           
  3057                           
  3058                           ; 2 bytes @ 0x2
  3059  0022                     	ds	1
  3060  0023                     ??_setRF_RxStatus:	
  3061  0023                     ??_CC2500_WriteREG:	
  3062                           ; 0 bytes @ 0x3
  3063                           
  3064  0023                     ??_setSw_Status:	
  3065                           ; 0 bytes @ 0x3
  3066                           
  3067  0023                     ??_setRFSW_Status:	
  3068                           ; 0 bytes @ 0x3
  3069                           
  3070  0023                     ??_setDimmerLights_Trigger:	
  3071                           ; 0 bytes @ 0x3
  3072                           
  3073  0023                     ??_setDimmerLights_Switch:	
  3074                           ; 0 bytes @ 0x3
  3075                           
  3076  0023                     ??_setLED:	
  3077                           ; 0 bytes @ 0x3
  3078                           
  3079  0023                     ??_DelayOff_Initialization:	
  3080                           ; 0 bytes @ 0x3
  3081                           
  3082  0023                     ?_setDelayOff_GO:	
  3083                           ; 0 bytes @ 0x3
  3084                           
  3085  0023                     ??_DimmerLights_Close:	
  3086                           ; 0 bytes @ 0x3
  3087                           
  3088  0023                     ??_setDimmerLights_AdjGo:	
  3089                           ; 0 bytes @ 0x3
  3090                           
  3091  0023                     ??_setDimmerLights_TriggerAdj:	
  3092                           ; 0 bytes @ 0x3
  3093                           
  3094  0023                     ??_setRF_Learn:	
  3095                           ; 0 bytes @ 0x3
  3096                           
  3097  0023                     ??_setRF_Enable:	
  3098                           ; 0 bytes @ 0x3
  3099                           
  3100  0023                     setBuz@count:	
  3101                           ; 0 bytes @ 0x3
  3102                           
  3103  0023                     CC2500_WriteCommand@command:	
  3104                           ; 1 bytes @ 0x3
  3105                           
  3106  0023                     CC2500_ReadStatus@status_addr:	
  3107                           ; 1 bytes @ 0x3
  3108                           
  3109  0023                     setDelayOff_GO@command:	
  3110                           ; 1 bytes @ 0x3
  3111                           
  3112  0023                     setDimmerLights_Initialization@lights:	
  3113                           ; 1 bytes @ 0x3
  3114                           
  3115  0023                     setDimmerLights_Switch@lights:	
  3116                           ; 1 bytes @ 0x3
  3117                           
  3118  0023                     setDimmerLights_AdjGo@lights:	
  3119                           ; 1 bytes @ 0x3
  3120                           
  3121  0023                     setDimmerLights_Trigger@lights:	
  3122                           ; 1 bytes @ 0x3
  3123                           
  3124  0023                     setDimmerLights_TriggerAdj@lights:	
  3125                           ; 1 bytes @ 0x3
  3126                           
  3127  0023                     setLED@led:	
  3128                           ; 1 bytes @ 0x3
  3129                           
  3130  0023                     Flash_Memory_Read@ret:	
  3131                           ; 1 bytes @ 0x3
  3132                           
  3133  0023                     setRF_Learn@rf:	
  3134                           ; 1 bytes @ 0x3
  3135                           
  3136  0023                     setRF_RxStatus@rf:	
  3137                           ; 1 bytes @ 0x3
  3138                           
  3139  0023                     setTxData@rf:	
  3140                           ; 1 bytes @ 0x3
  3141                           
  3142  0023                     setRF_Enable@rf:	
  3143                           ; 1 bytes @ 0x3
  3144                           
  3145  0023                     setRFSW_Status@sw:	
  3146                           ; 1 bytes @ 0x3
  3147                           
  3148  0023                     setSw_Status@sw:	
  3149                           ; 1 bytes @ 0x3
  3150                           
  3151  0023                     ___ftpack@exp:	
  3152                           ; 1 bytes @ 0x3
  3153                           
  3154                           
  3155                           ; 1 bytes @ 0x3
  3156  0023                     	ds	1
  3157  0024                     ??_CC2500_ClearTXFIFO:	
  3158  0024                     ??_CC2500_ClearRXFIFO:	
  3159                           ; 0 bytes @ 0x4
  3160                           
  3161  0024                     ??_CC2500_SIDLEMode:	
  3162                           ; 0 bytes @ 0x4
  3163                           
  3164  0024                     ?_setDimmerLights:	
  3165                           ; 0 bytes @ 0x4
  3166                           
  3167  0024                     ??_setLED_Initialization:	
  3168                           ; 0 bytes @ 0x4
  3169                           
  3170  0024                     ??_Flash_Memory_Modify:	
  3171                           ; 0 bytes @ 0x4
  3172                           
  3173  0024                     ??_RF_RxDisable:	
  3174                           ; 0 bytes @ 0x4
  3175                           
  3176  0024                     ??_setLog_Code:	
  3177                           ; 0 bytes @ 0x4
  3178                           
  3179  0024                     ??_setSw_Initialization:	
  3180                           ; 0 bytes @ 0x4
  3181                           
  3182  0024                     ??_Sw_DimmerAdjFunc:	
  3183                           ; 0 bytes @ 0x4
  3184                           
  3185  0024                     ??_my_Main:	
  3186                           ; 0 bytes @ 0x4
  3187                           
  3188  0024                     ??_CC2500_TxData:	
  3189                           ; 0 bytes @ 0x4
  3190                           
  3191  0024                     ??_CC2500_RxData:	
  3192                           ; 0 bytes @ 0x4
  3193                           
  3194  0024                     ??_DimmerLights_Initialization:	
  3195                           ; 0 bytes @ 0x4
  3196                           
  3197  0024                     CC2500_WriteREG@w_addr:	
  3198                           ; 0 bytes @ 0x4
  3199                           
  3200  0024                     setDelayOff_GO@value:	
  3201                           ; 1 bytes @ 0x4
  3202                           
  3203  0024                     setDimmerLights@status:	
  3204                           ; 1 bytes @ 0x4
  3205                           
  3206  0024                     setLED_Initialization@led:	
  3207                           ; 1 bytes @ 0x4
  3208                           
  3209  0024                     setLED_Main@led:	
  3210                           ; 1 bytes @ 0x4
  3211                           
  3212  0024                     RF_RxDisable@rf:	
  3213                           ; 1 bytes @ 0x4
  3214                           
  3215  0024                     setSw_Initialization@sw:	
  3216                           ; 1 bytes @ 0x4
  3217                           
  3218  0024                     Sw_DimmerAdjFunc@Idle:	
  3219                           ; 1 bytes @ 0x4
  3220                           
  3221  0024                     ___ftpack@sign:	
  3222                           ; 1 bytes @ 0x4
  3223                           
  3224  0024                     DelayTime_1us@j:	
  3225                           ; 1 bytes @ 0x4
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0x4
  3229  0024                     	ds	1
  3230  0025                     ??_CC2500_InitSetREG:	
  3231  0025                     ??_CC2500_InitPATable:	
  3232                           ; 0 bytes @ 0x5
  3233                           
  3234  0025                     ??_setDimmerLights:	
  3235                           ; 0 bytes @ 0x5
  3236                           
  3237  0025                     ??___ftpack:	
  3238                           ; 0 bytes @ 0x5
  3239                           
  3240  0025                     ??_setDelayOff_GO:	
  3241                           ; 0 bytes @ 0x5
  3242                           
  3243  0025                     ??_LED_Initialization:	
  3244                           ; 0 bytes @ 0x5
  3245                           
  3246  0025                     ??_LED_Main:	
  3247                           ; 0 bytes @ 0x5
  3248                           
  3249  0025                     ??_Switch_Initialization:	
  3250                           ; 0 bytes @ 0x5
  3251                           
  3252  0025                     CC2500_TxData@loop_e:	
  3253                           ; 0 bytes @ 0x5
  3254                           
  3255  0025                     CC2500_RxData@loop_f:	
  3256                           ; 1 bytes @ 0x5
  3257                           
  3258  0025                     setLog_Code@rf:	
  3259                           ; 1 bytes @ 0x5
  3260                           
  3261  0025                     Sw_DimmerAdjFunc@sw:	
  3262                           ; 1 bytes @ 0x5
  3263                           
  3264                           
  3265                           ; 1 bytes @ 0x5
  3266  0025                     	ds	1
  3267  0026                     ??_CC2500_PowerRST:	
  3268  0026                     ??_CC2500_FrequencyCabr:	
  3269                           ; 0 bytes @ 0x6
  3270                           
  3271  0026                     CC2500_InitSetREG@temp1:	
  3272                           ; 0 bytes @ 0x6
  3273                           
  3274  0026                     CC2500_InitPATable@temp:	
  3275                           ; 1 bytes @ 0x6
  3276                           
  3277  0026                     setDimmerLights@lights:	
  3278                           ; 1 bytes @ 0x6
  3279                           
  3280  0026                     Flash_Memory_Modify@i:	
  3281                           ; 1 bytes @ 0x6
  3282                           
  3283                           
  3284                           ; 1 bytes @ 0x6
  3285  0026                     	ds	1
  3286  0027                     ??_Flash_Memory_Main:	
  3287  0027                     CC2500_InitSetREG@temp2:	
  3288                           ; 0 bytes @ 0x7
  3289                           
  3290  0027                     CC2500_InitPATable@loop_d:	
  3291                           ; 1 bytes @ 0x7
  3292                           
  3293  0027                     setDelayOff_GO@sw:	
  3294                           ; 1 bytes @ 0x7
  3295                           
  3296                           
  3297                           ; 1 bytes @ 0x7
  3298  0027                     	ds	1
  3299  0028                     ?___awtoft:	
  3300  0028                     CC2500_InitSetREG@loop_c:	
  3301                           ; 3 bytes @ 0x8
  3302                           
  3303  0028                     ___awtoft@c:	
  3304                           ; 1 bytes @ 0x8
  3305                           
  3306                           
  3307                           ; 2 bytes @ 0x8
  3308  0028                     	ds	1
  3309  0029                     ??_CC2500_PowerOnInitial:	
  3310                           
  3311                           ; 0 bytes @ 0x9
  3312  0029                     	ds	2
  3313  002B                     ??___awtoft:	
  3314                           
  3315                           ; 0 bytes @ 0xB
  3316  002B                     	ds	2
  3317  002D                     ___awtoft@sign:	
  3318                           
  3319                           ; 1 bytes @ 0xD
  3320  002D                     	ds	1
  3321  002E                     ?___ftdiv:	
  3322  002E                     ?___ftmul:	
  3323                           ; 3 bytes @ 0xE
  3324                           
  3325  002E                     ___ftdiv@f2:	
  3326                           ; 3 bytes @ 0xE
  3327                           
  3328  002E                     ___ftmul@f1:	
  3329                           ; 3 bytes @ 0xE
  3330                           
  3331                           
  3332                           ; 3 bytes @ 0xE
  3333  002E                     	ds	3
  3334  0031                     ___ftdiv@f1:	
  3335  0031                     ___ftmul@f2:	
  3336                           ; 3 bytes @ 0x11
  3337                           
  3338                           
  3339                           ; 3 bytes @ 0x11
  3340  0031                     	ds	3
  3341  0034                     ??___ftdiv:	
  3342  0034                     ??___ftmul:	
  3343                           ; 0 bytes @ 0x14
  3344                           
  3345                           
  3346                           ; 0 bytes @ 0x14
  3347  0034                     	ds	4
  3348  0038                     ___ftdiv@cntr:	
  3349  0038                     ___ftmul@exp:	
  3350                           ; 1 bytes @ 0x18
  3351                           
  3352                           
  3353                           ; 1 bytes @ 0x18
  3354  0038                     	ds	1
  3355  0039                     ___ftdiv@f3:	
  3356  0039                     ___ftmul@f3_as_product:	
  3357                           ; 3 bytes @ 0x19
  3358                           
  3359                           
  3360                           ; 3 bytes @ 0x19
  3361  0039                     	ds	3
  3362  003C                     ___ftdiv@exp:	
  3363  003C                     ___ftmul@cntr:	
  3364                           ; 1 bytes @ 0x1C
  3365                           
  3366                           
  3367                           ; 1 bytes @ 0x1C
  3368  003C                     	ds	1
  3369  003D                     ___ftdiv@sign:	
  3370  003D                     ___ftmul@sign:	
  3371                           ; 1 bytes @ 0x1D
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x1D
  3375  003D                     	ds	1
  3376  003E                     ?___ftadd:	
  3377  003E                     ___ftadd@f1:	
  3378                           ; 3 bytes @ 0x1E
  3379                           
  3380                           
  3381                           ; 3 bytes @ 0x1E
  3382  003E                     	ds	3
  3383  0041                     ___ftadd@f2:	
  3384                           
  3385                           ; 3 bytes @ 0x21
  3386  0041                     	ds	3
  3387  0044                     ??___ftadd:	
  3388                           
  3389                           ; 0 bytes @ 0x24
  3390  0044                     	ds	4
  3391  0048                     ___ftadd@sign:	
  3392                           
  3393                           ; 1 bytes @ 0x28
  3394  0048                     	ds	1
  3395  0049                     ___ftadd@exp2:	
  3396                           
  3397                           ; 1 bytes @ 0x29
  3398  0049                     	ds	1
  3399  004A                     ___ftadd@exp1:	
  3400                           
  3401                           ; 1 bytes @ 0x2A
  3402  004A                     	ds	1
  3403  004B                     ?___fttol:	
  3404  004B                     ___fttol@f1:	
  3405                           ; 4 bytes @ 0x2B
  3406                           
  3407                           
  3408                           ; 3 bytes @ 0x2B
  3409  004B                     	ds	4
  3410  004F                     ??___fttol:	
  3411                           
  3412                           ; 0 bytes @ 0x2F
  3413  004F                     	ds	4
  3414  0053                     ___fttol@sign1:	
  3415                           
  3416                           ; 1 bytes @ 0x33
  3417  0053                     	ds	1
  3418  0054                     ___fttol@lval:	
  3419                           
  3420                           ; 4 bytes @ 0x34
  3421  0054                     	ds	4
  3422  0058                     ___fttol@exp1:	
  3423                           
  3424                           ; 1 bytes @ 0x38
  3425  0058                     	ds	1
  3426  0059                     ??_getPercentValue:	
  3427  0059                     ??_setPercentValue:	
  3428                           ; 0 bytes @ 0x39
  3429                           
  3430  0059                     setPercentValue@value:	
  3431                           ; 0 bytes @ 0x39
  3432                           
  3433                           
  3434                           ; 1 bytes @ 0x39
  3435  0059                     	ds	1
  3436  005A                     setPercentValue@i:	
  3437                           
  3438                           ; 3 bytes @ 0x3A
  3439  005A                     	ds	1
  3440  005B                     getPercentValue@value:	
  3441                           
  3442                           ; 1 bytes @ 0x3B
  3443  005B                     	ds	1
  3444  005C                     getPercentValue@i:	
  3445                           
  3446                           ; 3 bytes @ 0x3C
  3447  005C                     	ds	1
  3448  005D                     ?_setRF_DimmerLights:	
  3449  005D                     ??_Flash_Memory_Initialization:	
  3450                           ; 0 bytes @ 0x3D
  3451                           
  3452  005D                     setRF_DimmerLights@on:	
  3453                           ; 0 bytes @ 0x3D
  3454                           
  3455                           
  3456                           ; 1 bytes @ 0x3D
  3457  005D                     	ds	1
  3458  005E                     ??_setRF_DimmerLights:	
  3459  005E                     Flash_Memory_Initialization@i:	
  3460                           ; 0 bytes @ 0x3E
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x3E
  3464  005E                     	ds	1
  3465  005F                     ??_setDimmerLights_AdjRF:	
  3466                           
  3467                           ; 0 bytes @ 0x3F
  3468  005F                     	ds	1
  3469  0060                     setDimmerLights_AdjRF@lights:	
  3470  0060                     setRF_DimmerLights@status:	
  3471                           ; 1 bytes @ 0x40
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x40
  3475  0060                     	ds	1
  3476  0061                     ??_setRF_DimmerValue:	
  3477  0061                     setRF_DimmerLights@lights:	
  3478                           ; 0 bytes @ 0x41
  3479                           
  3480                           
  3481                           ; 1 bytes @ 0x41
  3482  0061                     	ds	1
  3483  0062                     ??_DlyOff_Main:	
  3484  0062                     ?_setDimmerLights_Adj:	
  3485                           ; 0 bytes @ 0x42
  3486                           
  3487  0062                     ??_setRFSW_Control:	
  3488                           ; 0 bytes @ 0x42
  3489                           
  3490  0062                     ??_Sw_DimmerOnFunc:	
  3491                           ; 0 bytes @ 0x42
  3492                           
  3493  0062                     ??_Sw_DimmerOffFunc:	
  3494                           ; 0 bytes @ 0x42
  3495                           
  3496  0062                     setDimmerLights_Adj@status:	
  3497                           ; 0 bytes @ 0x42
  3498                           
  3499  0062                     Sw_DimmerOnFunc@Idle:	
  3500                           ; 1 bytes @ 0x42
  3501                           
  3502                           
  3503                           ; 1 bytes @ 0x42
  3504  0062                     	ds	1
  3505  0063                     ??_setDimmerLights_Adj:	
  3506  0063                     setRFSW_Control@sw:	
  3507                           ; 0 bytes @ 0x43
  3508                           
  3509  0063                     setRF_DimmerValue@lights:	
  3510                           ; 1 bytes @ 0x43
  3511                           
  3512  0063                     Sw_DimmerOnFunc@sw:	
  3513                           ; 1 bytes @ 0x43
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x43
  3517  0063                     	ds	1
  3518  0064                     ??_setRFSW_AdjControl:	
  3519  0064                     DlyOff_Main@sw:	
  3520                           ; 0 bytes @ 0x44
  3521                           
  3522  0064                     setDimmerLights_Adj@lights:	
  3523                           ; 1 bytes @ 0x44
  3524                           
  3525  0064                     Sw_DimmerOffFunc@sw:	
  3526                           ; 1 bytes @ 0x44
  3527                           
  3528                           
  3529                           ; 1 bytes @ 0x44
  3530  0064                     	ds	1
  3531  0065                     ??_setDimmerLights_Main:	
  3532  0065                     ??_setSw_Main:	
  3533                           ; 0 bytes @ 0x45
  3534                           
  3535  0065                     ??_DelayOff_Main:	
  3536                           ; 0 bytes @ 0x45
  3537                           
  3538  0065                     setDimmerLights_Main@clear:	
  3539                           ; 0 bytes @ 0x45
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x45
  3543  0065                     	ds	1
  3544  0066                     setDimmerLights_Main@lights:	
  3545  0066                     setRFSW_AdjControl@sw:	
  3546                           ; 1 bytes @ 0x46
  3547                           
  3548                           
  3549                           ; 1 bytes @ 0x46
  3550  0066                     	ds	1
  3551  0067                     ??_setControl_Lights_Table:	
  3552  0067                     ??_DimmerLights_Main:	
  3553                           ; 0 bytes @ 0x47
  3554                           
  3555  0067                     setControl_Lights_Table@rf:	
  3556                           ; 0 bytes @ 0x47
  3557                           
  3558  0067                     _setSw_Main$4140:	
  3559                           ; 1 bytes @ 0x47
  3560                           
  3561                           
  3562                           ; 1 bytes @ 0x47
  3563  0067                     	ds	1
  3564  0068                     ??_getRxData:	
  3565  0068                     getRxData@rf:	
  3566                           ; 0 bytes @ 0x48
  3567                           
  3568  0068                     _setSw_Main$4141:	
  3569                           ; 1 bytes @ 0x48
  3570                           
  3571                           
  3572                           ; 1 bytes @ 0x48
  3573  0068                     	ds	1
  3574  0069                     ??_setRF_Main:	
  3575  0069                     setSw_Main@sw:	
  3576                           ; 0 bytes @ 0x49
  3577                           
  3578                           
  3579                           ; 1 bytes @ 0x49
  3580  0069                     	ds	1
  3581  006A                     ??_Switch_Main:	
  3582  006A                     setRF_Main@rf:	
  3583                           ; 0 bytes @ 0x4A
  3584                           
  3585                           
  3586                           ; 1 bytes @ 0x4A
  3587  006A                     	ds	1
  3588  006B                     _setRF_Main$3431:	
  3589                           
  3590                           ; 1 bytes @ 0x4B
  3591  006B                     	ds	1
  3592  006C                     ??_RF_Main:	
  3593  006C                     ?_main:	
  3594                           ; 0 bytes @ 0x4C
  3595                           
  3596  006C                     main@argc:	
  3597                           ; 2 bytes @ 0x4C
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x4C
  3601  006C                     	ds	2
  3602  006E                     main@argv:	
  3603                           
  3604                           ; 2 bytes @ 0x4E
  3605  006E                     	ds	2
  3606  0070                     ??_main:	
  3607                           
  3608                           	psect	maintext
  3609  17AC                     __pmaintext:	
  3610                           ; 0 bytes @ 0x50
  3611 ;;
  3612 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3613 ;;
  3614 ;; *************** function _main *****************
  3615 ;; Defined at:
  3616 ;;		line 7 in file "../src/main_B1.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;  argc            2   76[BANK0 ] int 
  3619 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3620 ;; Auto vars:     Size  Location     Type
  3621 ;;		None
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  2   76[BANK0 ] int 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3626 ;; Tracked objects:
  3627 ;;		On entry : 17F/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3635 ;;Total ram usage:        4 bytes
  3636 ;; Hardware stack levels required when called:   15
  3637 ;; This function calls:
  3638 ;;		_Buzzer_Initialization
  3639 ;;		_Buzzer_Main
  3640 ;;		_CC2500_PowerOnInitial
  3641 ;;		_DelayOff_Initialization
  3642 ;;		_DelayOff_Main
  3643 ;;		_DimmerLights_Initialization
  3644 ;;		_DimmerLights_Main
  3645 ;;		_Flash_Memory_Initialization
  3646 ;;		_Flash_Memory_Main
  3647 ;;		_LED_Initialization
  3648 ;;		_LED_Main
  3649 ;;		_Mcu_Initialization
  3650 ;;		_RF_Initialization
  3651 ;;		_RF_Main
  3652 ;;		_Switch_Initialization
  3653 ;;		_Switch_Main
  3654 ;;		_WDT_Main
  3655 ;;		_myMain_Initialization
  3656 ;;		_my_Main
  3657 ;; This function is called by:
  3658 ;;		Startup code after reset
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function _main
  3664  17AC                     _main:	
  3665                           
  3666                           ;main_B1.c: 9: myMain_Initialization();
  3667                           
  3668                           ;incstack = 0
  3669                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3670  17AC  3191  2134  3197   	fcall	_myMain_Initialization
  3671                           
  3672                           ;main_B1.c: 10: Mcu_Initialization();
  3673  17AF  3192  224F  3197   	fcall	_Mcu_Initialization
  3674                           
  3675                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3676  17B2  3183  230B  3197   	fcall	_Flash_Memory_Initialization
  3677                           
  3678                           ;main_B1.c: 12: LED_Initialization();
  3679  17B5  319F  2787  3197   	fcall	_LED_Initialization
  3680                           
  3681                           ;main_B1.c: 13: Buzzer_Initialization();
  3682  17B8  319F  2736  3197   	fcall	_Buzzer_Initialization
  3683                           
  3684                           ;main_B1.c: 15: ;;
  3685                           ;main_B1.c: 16: ;;
  3686                           ;main_B1.c: 17: ;;
  3687                           ;main_B1.c: 18: ;;
  3688                           ;main_B1.c: 19: DelayOff_Initialization();
  3689  17BB  319E  26EE  3197   	fcall	_DelayOff_Initialization
  3690                           
  3691                           ;main_B1.c: 21: DimmerLights_Initialization();
  3692  17BE  3191  218A  3197   	fcall	_DimmerLights_Initialization
  3693                           
  3694                           ;main_B1.c: 22: ;;
  3695                           ;main_B1.c: 23: ;;
  3696                           ;main_B1.c: 24: ;;
  3697                           ;main_B1.c: 26: Switch_Initialization();
  3698  17C1  319F  27C6  3197   	fcall	_Switch_Initialization
  3699                           
  3700                           ;main_B1.c: 27: RF_Initialization();
  3701  17C4  319E  26BE  3197   	fcall	_RF_Initialization
  3702                           
  3703                           ;main_B1.c: 28: CC2500_PowerOnInitial();
  3704  17C7  3191  2148  3197   	fcall	_CC2500_PowerOnInitial
  3705  17CA                     l6995:	
  3706                           ;main_B1.c: 29: ;;
  3707                           ;main_B1.c: 32: while (1) {
  3708                           
  3709                           
  3710                           ;main_B1.c: 33: if (myMain->PowerON) {
  3711  17CA  0021               	movlb	1	; select bank1
  3712  17CB  0869               	movf	_myMain^(0+128),w
  3713  17CC  0086               	movwf	6
  3714  17CD  3001               	movlw	1	; select bank2/3
  3715  17CE  0087               	movwf	7
  3716  17CF  1C01               	btfss	1,0
  3717  17D0  2FD4               	goto	l6999
  3718                           
  3719                           ;main_B1.c: 35: ;;
  3720                           ;main_B1.c: 39: ;;
  3721                           ;main_B1.c: 43: ;;
  3722                           ;main_B1.c: 47: ;;
  3723                           ;main_B1.c: 59: Buzzer_Main();
  3724  17D1  3186  26FC  3197   	fcall	_Buzzer_Main
  3725  17D4                     l6999:	
  3726                           
  3727                           ;main_B1.c: 61: }
  3728                           ;main_B1.c: 64: if (myMain->T0_Timerout) {
  3729  17D4  0021               	movlb	1	; select bank1
  3730  17D5  0869               	movf	_myMain^(0+128),w
  3731  17D6  0086               	movwf	6
  3732  17D7  3001               	movlw	1	; select bank2/3
  3733  17D8  0087               	movwf	7
  3734  17D9  1C81               	btfss	1,1
  3735  17DA  2FCA               	goto	l6995
  3736                           
  3737                           ;main_B1.c: 65: myMain->T0_Timerout = 0;
  3738  17DB  0869               	movf	_myMain^(0+128),w
  3739  17DC  0086               	movwf	6
  3740  17DD  3001               	movlw	1	; select bank2/3
  3741  17DE  0087               	movwf	7
  3742  17DF  1081               	bcf	1,1
  3743                           
  3744                           ;main_B1.c: 66: my_Main();
  3745  17E0  318B  23C4  3197   	fcall	_my_Main
  3746                           
  3747                           ;main_B1.c: 67: WDT_Main();
  3748  17E3  3192  2285  3197   	fcall	_WDT_Main
  3749                           
  3750                           ;main_B1.c: 68: ;;
  3751                           ;main_B1.c: 69: ;;
  3752                           ;main_B1.c: 70: if (myMain->PowerON) {
  3753  17E6  0021               	movlb	1	; select bank1
  3754  17E7  0869               	movf	_myMain^(0+128),w
  3755  17E8  0086               	movwf	6
  3756  17E9  3001               	movlw	1	; select bank2/3
  3757  17EA  0087               	movwf	7
  3758  17EB  1C01               	btfss	1,0
  3759  17EC  2FCA               	goto	l6995
  3760                           
  3761                           ;main_B1.c: 71: Flash_Memory_Main();
  3762  17ED  3196  2647  3197   	fcall	_Flash_Memory_Main
  3763                           
  3764                           ;main_B1.c: 73: LED_Main();
  3765  17F0  319F  2793  3197   	fcall	_LED_Main
  3766                           
  3767                           ;main_B1.c: 75: ;;
  3768                           ;main_B1.c: 76: ;;
  3769                           ;main_B1.c: 77: ;;
  3770                           ;main_B1.c: 78: ;;
  3771                           ;main_B1.c: 80: ;;
  3772                           ;main_B1.c: 81: DimmerLights_Main();
  3773  17F3  319F  274C  3197   	fcall	_DimmerLights_Main
  3774                           
  3775                           ;main_B1.c: 82: Switch_Main();
  3776  17F6  319F  2706  3197   	fcall	_Switch_Main
  3777                           
  3778                           ;main_B1.c: 83: ;;
  3779                           ;main_B1.c: 84: ;;
  3780                           ;main_B1.c: 86: RF_Main();
  3781  17F9  3190  2066  3197   	fcall	_RF_Main
  3782                           
  3783                           ;main_B1.c: 87: DelayOff_Main();
  3784  17FC  319E  26F6  3197   	fcall	_DelayOff_Main
  3785                           
  3786                           ;main_B1.c: 88: ;;
  3787  17FF  2FCA               	goto	l6995
  3788  1800                     __end_of_main:	
  3789                           
  3790                           	psect	text1
  3791  0BC4                     __ptext1:	
  3792 ;; *************** function _my_Main *****************
  3793 ;; Defined at:
  3794 ;;		line 125 in file "../src/main_B1.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;		None
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;		None
  3799 ;; Return value:  Size  Location     Type
  3800 ;;		None               void
  3801 ;; Registers used:
  3802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3803 ;; Tracked objects:
  3804 ;;		On entry : 0/0
  3805 ;;		On exit  : 0/0
  3806 ;;		Unchanged: 0/0
  3807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3812 ;;Total ram usage:        0 bytes
  3813 ;; Hardware stack levels used:    1
  3814 ;; Hardware stack levels required when called:    7
  3815 ;; This function calls:
  3816 ;;		_setBuz
  3817 ;;		_setRF_Enable
  3818 ;;		_setSw_Enable
  3819 ;; This function is called by:
  3820 ;;		_main
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           
  3825                           ;psect for function _my_Main
  3826  0BC4                     _my_Main:	
  3827                           
  3828                           ;main_B1.c: 127: if (myMain->PowerON == 0) {
  3829                           
  3830                           ;incstack = 0
  3831                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3832  0BC4  0021               	movlb	1	; select bank1
  3833  0BC5  0869               	movf	_myMain^(0+128),w
  3834  0BC6  0086               	movwf	6
  3835  0BC7  3001               	movlw	1	; select bank2/3
  3836  0BC8  0087               	movwf	7
  3837  0BC9  1801               	btfsc	1,0
  3838  0BCA  2C07               	goto	l6881
  3839                           
  3840                           ;main_B1.c: 128: myMain->PowerCount++;
  3841  0BCB  0A69               	incf	_myMain^(0+128),w
  3842  0BCC  0086               	movwf	6
  3843  0BCD  3001               	movlw	1	; select bank2/3
  3844  0BCE  0087               	movwf	7
  3845  0BCF  3001               	movlw	1
  3846  0BD0  0781               	addwf	1,f
  3847  0BD1  3141               	addfsr 1,1
  3848  0BD2  1803               	skipnc
  3849  0BD3  0A81               	incf	1,f
  3850                           
  3851                           ;main_B1.c: 129: if (myMain->PowerCount == 150)
  3852  0BD4  0A69               	incf	_myMain^(0+128),w
  3853  0BD5  0086               	movwf	6
  3854  0BD6  3001               	movlw	1	; select bank2/3
  3855  0BD7  0087               	movwf	7
  3856  0BD8  3F40               	moviw [0]fsr1
  3857  0BD9  3A96               	xorlw	150
  3858  0BDA  1D03               	skipz
  3859  0BDB  2BDE               	goto	u5885
  3860  0BDC  3F41               	moviw [1]fsr1
  3861  0BDD  3A00               	xorlw	0
  3862  0BDE                     u5885:	
  3863  0BDE  1D03               	skipz
  3864  0BDF  0008               	return
  3865                           
  3866                           ;main_B1.c: 130: {
  3867                           ;main_B1.c: 131: myMain->PowerCount = 0;
  3868  0BE0  0A69               	incf	_myMain^(0+128),w
  3869  0BE1  0086               	movwf	6
  3870  0BE2  3001               	movlw	1	; select bank2/3
  3871  0BE3  0087               	movwf	7
  3872  0BE4  3000               	movlw	0
  3873  0BE5  3FC0               	movwi [0]fsr1
  3874  0BE6  3FC1               	movwi [1]fsr1
  3875                           
  3876                           ;main_B1.c: 132: myMain->PowerON = 1;
  3877  0BE7  0869               	movf	_myMain^(0+128),w
  3878  0BE8  0086               	movwf	6
  3879  0BE9  3001               	movlw	1	; select bank2/3
  3880  0BEA  0087               	movwf	7
  3881  0BEB  1401               	bsf	1,0
  3882                           
  3883                           ;main_B1.c: 135: ;;
  3884                           ;main_B1.c: 139: ;;
  3885                           ;main_B1.c: 145: setBuz(3, 50);
  3886  0BEC  3032               	movlw	50
  3887  0BED  0020               	movlb	0	; select bank0
  3888  0BEE  00A0               	movwf	setBuz@time
  3889  0BEF  3000               	movlw	0
  3890  0BF0  00A1               	movwf	setBuz@time+1
  3891  0BF1  3003               	movlw	3
  3892  0BF2  3189  2141  318B   	fcall	_setBuz
  3893                           
  3894                           ;main_B1.c: 146: myMain->SelfTest = 1;
  3895  0BF5  0021               	movlb	1	; select bank1
  3896  0BF6  0869               	movf	_myMain^(0+128),w
  3897  0BF7  3E03               	addlw	3
  3898  0BF8  0086               	movwf	6
  3899  0BF9  3001               	movlw	1	; select bank2/3
  3900  0BFA  0087               	movwf	7
  3901  0BFB  1401               	bsf	1,0
  3902                           
  3903                           ;main_B1.c: 148: setSw_Enable(1);
  3904  0BFC  3001               	movlw	1
  3905  0BFD  3192  22A1  318B   	fcall	_setSw_Enable
  3906                           
  3907                           ;main_B1.c: 151: setRF_Enable(1, 1);
  3908  0C00  0020               	movlb	0	; select bank0
  3909  0C01  01A2               	clrf	setRF_Enable@command
  3910  0C02  0AA2               	incf	setRF_Enable@command,f
  3911  0C03  3001               	movlw	1
  3912  0C04  3194  2422         	fcall	_setRF_Enable
  3913                           
  3914                           ;main_B1.c: 155: }
  3915                           ;main_B1.c: 156: } else {
  3916  0C06  0008               	return
  3917  0C07                     l6881:	
  3918                           
  3919                           ;main_B1.c: 164: myMain->Count1++;
  3920  0C07  0021               	movlb	1	; select bank1
  3921  0C08  0869               	movf	_myMain^(0+128),w
  3922  0C09  3E06               	addlw	6
  3923  0C0A  0086               	movwf	6
  3924  0C0B  3001               	movlw	1	; select bank2/3
  3925  0C0C  0087               	movwf	7
  3926  0C0D  3001               	movlw	1
  3927  0C0E  0781               	addwf	1,f
  3928  0C0F  3141               	addfsr 1,1
  3929  0C10  1803               	skipnc
  3930  0C11  0A81               	incf	1,f
  3931                           
  3932                           ;main_B1.c: 165: if (myMain->Count1 == 100)
  3933  0C12  0869               	movf	_myMain^(0+128),w
  3934  0C13  3E06               	addlw	6
  3935  0C14  0086               	movwf	6
  3936  0C15  3001               	movlw	1	; select bank2/3
  3937  0C16  0087               	movwf	7
  3938  0C17  3F40               	moviw [0]fsr1
  3939  0C18  3A64               	xorlw	100
  3940  0C19  1D03               	skipz
  3941  0C1A  2C1D               	goto	u5895
  3942  0C1B  3F41               	moviw [1]fsr1
  3943  0C1C  3A00               	xorlw	0
  3944  0C1D                     u5895:	
  3945  0C1D  1D03               	skipz
  3946  0C1E  0008               	return
  3947                           
  3948                           ;main_B1.c: 166: {
  3949                           ;main_B1.c: 167: myMain->Count1 = 0;
  3950  0C1F  0869               	movf	_myMain^(0+128),w
  3951  0C20  3E06               	addlw	6
  3952  0C21  0086               	movwf	6
  3953  0C22  3001               	movlw	1	; select bank2/3
  3954  0C23  0087               	movwf	7
  3955  0C24  3000               	movlw	0
  3956  0C25  3FC0               	movwi [0]fsr1
  3957  0C26  3FC1               	movwi [1]fsr1
  3958                           
  3959                           ;main_B1.c: 180: if (myMain->Flag) {
  3960  0C27  0869               	movf	_myMain^(0+128),w
  3961  0C28  0086               	movwf	6
  3962  0C29  3001               	movlw	1	; select bank2/3
  3963  0C2A  0087               	movwf	7
  3964  0C2B  1D81               	btfss	1,3
  3965  0C2C  2C33               	goto	l6889
  3966                           
  3967                           ;main_B1.c: 181: myMain->Flag = 0;
  3968  0C2D  0869               	movf	_myMain^(0+128),w
  3969  0C2E  0086               	movwf	6
  3970  0C2F  3001               	movlw	1	; select bank2/3
  3971  0C30  0087               	movwf	7
  3972  0C31  1181               	bcf	1,3
  3973                           
  3974                           ;main_B1.c: 190: } else {
  3975  0C32  0008               	return
  3976  0C33                     l6889:	
  3977                           
  3978                           ;main_B1.c: 191: myMain->Flag = 1;
  3979  0C33  0869               	movf	_myMain^(0+128),w
  3980  0C34  0086               	movwf	6
  3981  0C35  3001               	movlw	1	; select bank2/3
  3982  0C36  0087               	movwf	7
  3983  0C37  1581               	bsf	1,3
  3984  0C38  0008               	return
  3985  0C39                     __end_of_my_Main:	
  3986                           
  3987                           	psect	text2
  3988  12A1                     __ptext2:	
  3989 ;; *************** function _setSw_Enable *****************
  3990 ;; Defined at:
  3991 ;;		line 85 in file "../src/Switch_B1.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  command         1    wreg     unsigned char 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  command         1    2[BANK0 ] unsigned char 
  3996 ;; Return value:  Size  Location     Type
  3997 ;;		None               void
  3998 ;; Registers used:
  3999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;Total ram usage:        1 bytes
  4010 ;; Hardware stack levels used:    1
  4011 ;; Hardware stack levels required when called:    6
  4012 ;; This function calls:
  4013 ;;		_SwPointSelect
  4014 ;; This function is called by:
  4015 ;;		_my_Main
  4016 ;; This function uses a non-reentrant model
  4017 ;;
  4018                           
  4019                           
  4020                           ;psect for function _setSw_Enable
  4021  12A1                     _setSw_Enable:	
  4022                           
  4023                           ;incstack = 0
  4024                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4025                           ;setSw_Enable@command stored from wreg
  4026  12A1  0020               	movlb	0	; select bank0
  4027  12A2  00A2               	movwf	setSw_Enable@command
  4028                           
  4029                           ;Switch_B1.c: 88: SwPointSelect(1);
  4030  12A3  3001               	movlw	1
  4031  12A4  3191  2120  3192   	fcall	_SwPointSelect
  4032                           
  4033                           ;Switch_B1.c: 89: Sw->Enable = command;
  4034  12A7  087B               	movf	_Sw,w
  4035  12A8  0086               	movwf	6
  4036  12A9  3001               	movlw	1	; select bank2/3
  4037  12AA  0087               	movwf	7
  4038  12AB  0020               	movlb	0	; select bank0
  4039  12AC  0822               	movf	setSw_Enable@command,w
  4040  12AD  1001               	bcf	1,0
  4041  12AE  1D03               	skipz
  4042  12AF  1401               	bsf	1,0
  4043                           
  4044                           ;Switch_B1.c: 93: SwPointSelect(2);
  4045  12B0  3002               	movlw	2
  4046  12B1  3191  2120         	fcall	_SwPointSelect
  4047                           
  4048                           ;Switch_B1.c: 94: Sw->Enable = command;
  4049  12B3  087B               	movf	_Sw,w
  4050  12B4  0086               	movwf	6
  4051  12B5  3001               	movlw	1	; select bank2/3
  4052  12B6  0087               	movwf	7
  4053  12B7  0020               	movlb	0	; select bank0
  4054  12B8  0822               	movf	setSw_Enable@command,w
  4055  12B9  1001               	bcf	1,0
  4056  12BA  1D03               	skipz
  4057  12BB  1401               	bsf	1,0
  4058  12BC  0008               	return
  4059  12BD                     __end_of_setSw_Enable:	
  4060                           
  4061                           	psect	text3
  4062  1422                     __ptext3:	
  4063 ;; *************** function _setRF_Enable *****************
  4064 ;; Defined at:
  4065 ;;		line 174 in file "../src/RF_Control_B1.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  rf              1    wreg     unsigned char 
  4068 ;;  command         1    2[BANK0 ] unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  rf              1    3[BANK0 ] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;		None               void
  4073 ;; Registers used:
  4074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4080 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;Total ram usage:        2 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    6
  4087 ;; This function calls:
  4088 ;;		_RfPointSelect
  4089 ;;		_setINT_GO
  4090 ;; This function is called by:
  4091 ;;		_my_Main
  4092 ;; This function uses a non-reentrant model
  4093 ;;
  4094                           
  4095                           
  4096                           ;psect for function _setRF_Enable
  4097  1422                     _setRF_Enable:	
  4098                           
  4099                           ;incstack = 0
  4100                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4101                           ;setRF_Enable@rf stored from wreg
  4102  1422  0020               	movlb	0	; select bank0
  4103  1423  00A3               	movwf	setRF_Enable@rf
  4104                           
  4105                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
  4106  1424  0823               	movf	setRF_Enable@rf,w
  4107  1425  319F  276F  3194   	fcall	_RfPointSelect
  4108                           
  4109                           ;RF_Control_B1.c: 176: RF->Enable = command;
  4110  1428  0021               	movlb	1	; select bank1
  4111  1429  083D               	movf	_RF^(0+128),w
  4112  142A  0086               	movwf	6
  4113  142B  0187               	clrf	7
  4114  142C  0020               	movlb	0	; select bank0
  4115  142D  0822               	movf	setRF_Enable@command,w
  4116  142E  1001               	bcf	1,0
  4117  142F  1D03               	skipz
  4118  1430  1401               	bsf	1,0
  4119                           
  4120                           ;RF_Control_B1.c: 177: RF->Learn = 0;
  4121  1431  0021               	movlb	1	; select bank1
  4122  1432  083D               	movf	_RF^(0+128),w
  4123  1433  0086               	movwf	6
  4124  1434  0187               	clrf	7
  4125  1435  1301               	bcf	1,6
  4126                           
  4127                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
  4128  1436  083D               	movf	_RF^(0+128),w
  4129  1437  0086               	movwf	6
  4130  1438  0187               	clrf	7
  4131  1439  1101               	bcf	1,2
  4132                           
  4133                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
  4134  143A  083D               	movf	_RF^(0+128),w
  4135  143B  0086               	movwf	6
  4136  143C  0187               	clrf	7
  4137  143D  1181               	bcf	1,3
  4138                           
  4139                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
  4140  143E  083D               	movf	_RF^(0+128),w
  4141  143F  0086               	movwf	6
  4142  1440  0187               	clrf	7
  4143  1441  1081               	bcf	1,1
  4144                           
  4145                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
  4146  1442  0A3D               	incf	_RF^(0+128),w
  4147  1443  0086               	movwf	6
  4148  1444  0187               	clrf	7
  4149  1445  0181               	clrf	1
  4150                           
  4151                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
  4152  1446  083D               	movf	_RF^(0+128),w
  4153  1447  0086               	movwf	6
  4154  1448  0187               	clrf	7
  4155  1449  1281               	bcf	1,5
  4156                           
  4157                           ;RF_Control_B1.c: 183: setINT_GO(0);
  4158  144A  3000               	movlw	0
  4159  144B  319F  2717         	fcall	_setINT_GO
  4160  144D  0008               	return
  4161  144E                     __end_of_setRF_Enable:	
  4162                           
  4163                           	psect	text4
  4164  1134                     __ptext4:	
  4165 ;; *************** function _myMain_Initialization *****************
  4166 ;; Defined at:
  4167 ;;		line 113 in file "../src/main_B1.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;		None               void
  4174 ;; Registers used:
  4175 ;;		wreg, fsr1l, fsr1h
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    5
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _myMain_Initialization
  4197  1134                     _myMain_Initialization:	
  4198                           
  4199                           ;main_B1.c: 115: product = &_product;
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4203  1134  30A0               	movlw	__product& (0+255)
  4204  1135  0020               	movlb	0	; select bank0
  4205  1136  00A0               	movwf	??_myMain_Initialization
  4206  1137  0820               	movf	??_myMain_Initialization,w
  4207  1138  00FD               	movwf	_product
  4208                           
  4209                           ;main_B1.c: 116: product->Data[20] = 210;
  4210  1139  30D2               	movlw	210
  4211  113A  00A0               	movwf	??_myMain_Initialization
  4212  113B  087D               	movf	_product,w
  4213  113C  3E14               	addlw	20
  4214  113D  0086               	movwf	6
  4215  113E  3001               	movlw	1	; select bank2/3
  4216  113F  0087               	movwf	7
  4217  1140  0820               	movf	??_myMain_Initialization,w
  4218  1141  0081               	movwf	1
  4219                           
  4220                           ;main_B1.c: 119: myMain = &_myMain;
  4221  1142  30C0               	movlw	__myMain& (0+255)
  4222  1143  00A0               	movwf	??_myMain_Initialization
  4223  1144  0820               	movf	??_myMain_Initialization,w
  4224  1145  0021               	movlb	1	; select bank1
  4225  1146  00E9               	movwf	_myMain^(0+128)
  4226  1147  0008               	return
  4227  1148                     __end_of_myMain_Initialization:	
  4228                           
  4229                           	psect	text5
  4230  1285                     __ptext5:	
  4231 ;; *************** function _WDT_Main *****************
  4232 ;; Defined at:
  4233 ;;		line 898 in file "../src/MCU_B1.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;		None
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;		None               void
  4240 ;; Registers used:
  4241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4251 ;;Total ram usage:        1 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    6
  4254 ;; This function calls:
  4255 ;;		_WDT_Clearing
  4256 ;; This function is called by:
  4257 ;;		_main
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           
  4262                           ;psect for function _WDT_Main
  4263  1285                     _WDT_Main:	
  4264                           
  4265                           ;MCU_B1.c: 899: if (WDT->Enable) {
  4266                           
  4267                           ;incstack = 0
  4268                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4269  1285  0021               	movlb	1	; select bank1
  4270  1286  0868               	movf	_WDT^(0+128),w
  4271  1287  0086               	movwf	6
  4272  1288  0187               	clrf	7
  4273  1289  1C01               	btfss	1,0
  4274  128A  0008               	return
  4275                           
  4276                           ;MCU_B1.c: 900: if (WDT->Count-- > 0) {
  4277  128B  0A68               	incf	_WDT^(0+128),w
  4278  128C  0086               	movwf	6
  4279  128D  0187               	clrf	7
  4280  128E  3001               	movlw	1
  4281  128F  0281               	subwf	1,f
  4282  1290  0801               	movf	1,w
  4283  1291  3AFF               	xorlw	255
  4284  1292  1903               	skipnz
  4285  1293  0008               	return
  4286                           
  4287                           ;MCU_B1.c: 901: WDT->Count = 10;
  4288  1294  300A               	movlw	10
  4289  1295  0020               	movlb	0	; select bank0
  4290  1296  00A0               	movwf	??_WDT_Main
  4291  1297  0021               	movlb	1	; select bank1
  4292  1298  0A68               	incf	_WDT^(0+128),w
  4293  1299  0086               	movwf	6
  4294  129A  0187               	clrf	7
  4295  129B  0020               	movlb	0	; select bank0
  4296  129C  0820               	movf	??_WDT_Main,w
  4297  129D  0081               	movwf	1
  4298                           
  4299                           ;MCU_B1.c: 902: WDT_Clearing();
  4300  129E  3180  2002         	fcall	_WDT_Clearing
  4301  12A0  0008               	return
  4302  12A1                     __end_of_WDT_Main:	
  4303                           
  4304                           	psect	text6
  4305  0002                     __ptext6:	
  4306 ;; *************** function _WDT_Clearing *****************
  4307 ;; Defined at:
  4308 ;;		line 908 in file "../src/MCU_B1.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;		None
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;		None               void
  4315 ;; Registers used:
  4316 ;;		None
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;Total ram usage:        0 bytes
  4327 ;; Hardware stack levels used:    1
  4328 ;; Hardware stack levels required when called:    5
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_WDT_Main
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           
  4337                           ;psect for function _WDT_Clearing
  4338  0002                     _WDT_Clearing:	
  4339                           
  4340                           ;incstack = 0
  4341                           ; Regs used in _WDT_Clearing: []
  4342  0002  0064               	clrwdt	;# 
  4343  0003  0008               	return
  4344  0004                     __end_of_WDT_Clearing:	
  4345                           
  4346                           	psect	text7
  4347  1F06                     __ptext7:	
  4348 ;; *************** function _Switch_Main *****************
  4349 ;; Defined at:
  4350 ;;		line 61 in file "../src/Switch_B1.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;		None
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;		None
  4355 ;; Return value:  Size  Location     Type
  4356 ;;		None               void
  4357 ;; Registers used:
  4358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;Total ram usage:        0 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:   11
  4371 ;; This function calls:
  4372 ;;		_setSw_Main
  4373 ;; This function is called by:
  4374 ;;		_main
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           
  4379                           ;psect for function _Switch_Main
  4380  1F06                     _Switch_Main:	
  4381                           
  4382                           ;Switch_B1.c: 63: setSw_Main(1);
  4383                           
  4384                           ;incstack = 0
  4385                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4386  1F06  3001               	movlw	1
  4387  1F07  3181  21B0  319F   	fcall	_setSw_Main
  4388                           
  4389                           ;Switch_B1.c: 67: setSw_Main(2);
  4390  1F0A  3002               	movlw	2
  4391  1F0B  3181  21B0         	fcall	_setSw_Main
  4392  1F0D  0008               	return
  4393  1F0E                     __end_of_Switch_Main:	
  4394                           
  4395                           	psect	text8
  4396  01B0                     __ptext8:	
  4397 ;; *************** function _setSw_Main *****************
  4398 ;; Defined at:
  4399 ;;		line 111 in file "../src/Switch_B1.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  sw              1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  sw              1   73[BANK0 ] unsigned char 
  4404 ;; Return value:  Size  Location     Type
  4405 ;;		None               void
  4406 ;; Registers used:
  4407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4408 ;; Tracked objects:
  4409 ;;		On entry : 0/0
  4410 ;;		On exit  : 0/0
  4411 ;;		Unchanged: 0/0
  4412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;Total ram usage:        5 bytes
  4418 ;; Hardware stack levels used:    1
  4419 ;; Hardware stack levels required when called:   10
  4420 ;; This function calls:
  4421 ;;		_SwPointSelect
  4422 ;;		_Sw_DimmerAdjFunc
  4423 ;;		_Sw_DimmerOffFunc
  4424 ;;		_Sw_DimmerOnFunc
  4425 ;;		_setBuz
  4426 ;;		_setRF_Learn
  4427 ;; This function is called by:
  4428 ;;		_Switch_Main
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           
  4433                           ;psect for function _setSw_Main
  4434  01B0                     _setSw_Main:	
  4435                           
  4436                           ;incstack = 0
  4437                           ; Regs used in _setSw_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4438                           ;setSw_Main@sw stored from wreg
  4439  01B0  0020               	movlb	0	; select bank0
  4440  01B1  00E9               	movwf	setSw_Main@sw
  4441                           
  4442                           ;Switch_B1.c: 112: if (Sw->Enable) {
  4443  01B2  087B               	movf	_Sw,w
  4444  01B3  0086               	movwf	6
  4445  01B4  3001               	movlw	1	; select bank2/3
  4446  01B5  0087               	movwf	7
  4447  01B6  1C01               	btfss	1,0
  4448  01B7  0008               	return
  4449                           
  4450                           ;Switch_B1.c: 113: SwPointSelect(sw);
  4451  01B8  0869               	movf	setSw_Main@sw,w
  4452  01B9  3191  2120  3181   	fcall	_SwPointSelect
  4453                           
  4454                           ;Switch_B1.c: 125: if (sw == 1) {
  4455  01BC  0020               	movlb	0	; select bank0
  4456  01BD  0869               	movf	setSw_Main@sw,w
  4457  01BE  3A01               	xorlw	1
  4458  01BF  1D03               	skipz
  4459  01C0  29CD               	goto	l6579
  4460                           
  4461                           ;Switch_B1.c: 126: Sw->Touch = (RA6 || RA4) ? 1 : 0;
  4462  01C1  01E7               	clrf	_setSw_Main$4140
  4463  01C2  0AE7               	incf	_setSw_Main$4140,f
  4464  01C3  1F0C               	btfss	12,6	;volatile
  4465  01C4  1A0C               	btfsc	12,4	;volatile
  4466  01C5  29C7               	goto	l6577
  4467  01C6  01E7               	clrf	_setSw_Main$4140
  4468  01C7                     l6577:	
  4469  01C7  087B               	movf	_Sw,w
  4470  01C8  0086               	movwf	6
  4471  01C9  3001               	movlw	1	; select bank2/3
  4472  01CA  0087               	movwf	7
  4473  01CB  0867               	movf	_setSw_Main$4140,w
  4474  01CC  29DC               	goto	L1
  4475  01CD                     l6579:	
  4476                           ;Switch_B1.c: 127: } else if (sw == 2) {
  4477                           
  4478  01CD  0869               	movf	setSw_Main@sw,w
  4479  01CE  3A02               	xorlw	2
  4480  01CF  1D03               	skipz
  4481  01D0  29DF               	goto	l6589
  4482                           
  4483                           ;Switch_B1.c: 128: Sw->Touch = (RA0 || RB1) ? 1 : 0;
  4484  01D1  01E8               	clrf	_setSw_Main$4141
  4485  01D2  0AE8               	incf	_setSw_Main$4141,f
  4486  01D3  1C0C               	btfss	12,0	;volatile
  4487  01D4  188D               	btfsc	13,1	;volatile
  4488  01D5  29D7               	goto	l6587
  4489  01D6  01E8               	clrf	_setSw_Main$4141
  4490  01D7                     l6587:	
  4491  01D7  087B               	movf	_Sw,w
  4492  01D8  0086               	movwf	6
  4493  01D9  3001               	movlw	1	; select bank2/3
  4494  01DA  0087               	movwf	7
  4495  01DB  0868               	movf	_setSw_Main$4141,w
  4496  01DC                     L1:	
  4497  01DC  1081               	bcf	1,1
  4498  01DD  1D03               	skipz
  4499  01DE  1481               	bsf	1,1
  4500  01DF                     l6589:	
  4501                           
  4502                           ;Switch_B1.c: 129: }
  4503                           ;Switch_B1.c: 137: if (Sw->Touch) {
  4504  01DF  087B               	movf	_Sw,w
  4505  01E0  0086               	movwf	6
  4506  01E1  3001               	movlw	1	; select bank2/3
  4507  01E2  0087               	movwf	7
  4508  01E3  1C81               	btfss	1,1
  4509  01E4  2AB6               	goto	l6637
  4510                           
  4511                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  4512  01E5  087B               	movf	_Sw,w
  4513  01E6  0086               	movwf	6
  4514  01E7  3001               	movlw	1	; select bank2/3
  4515  01E8  0087               	movwf	7
  4516  01E9  1901               	btfsc	1,2
  4517  01EA  2A0C               	goto	l6603
  4518                           
  4519                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4520  01EB  3001               	movlw	1
  4521  01EC  00E5               	movwf	??_setSw_Main
  4522  01ED  087B               	movf	_Sw,w
  4523  01EE  3E02               	addlw	2
  4524  01EF  0086               	movwf	6
  4525  01F0  3001               	movlw	1	; select bank2/3
  4526  01F1  0087               	movwf	7
  4527  01F2  0865               	movf	??_setSw_Main,w
  4528  01F3  0781               	addwf	1,f
  4529                           
  4530                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  4531  01F4  087B               	movf	_Sw,w
  4532  01F5  3E02               	addlw	2
  4533  01F6  0086               	movwf	6
  4534  01F7  3001               	movlw	1	; select bank2/3
  4535  01F8  0087               	movwf	7
  4536  01F9  3005               	movlw	5
  4537  01FA  0201               	subwf	1,w
  4538  01FB  1C03               	skipc
  4539  01FC  0008               	return
  4540                           
  4541                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  4542  01FD  087B               	movf	_Sw,w
  4543  01FE  3E02               	addlw	2
  4544  01FF  0086               	movwf	6
  4545  0200  3001               	movlw	1	; select bank2/3
  4546  0201  0087               	movwf	7
  4547  0202  0181               	clrf	1
  4548                           
  4549                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  4550  0203  087B               	movf	_Sw,w
  4551  0204  0086               	movwf	6
  4552  0205  3001               	movlw	1	; select bank2/3
  4553  0206  0087               	movwf	7
  4554  0207  1501               	bsf	1,2
  4555                           
  4556                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  4557  0208  0869               	movf	setSw_Main@sw,w
  4558  0209  318B  2352         	fcall	_Sw_DimmerOnFunc
  4559                           
  4560                           ;Switch_B1.c: 148: }
  4561                           ;Switch_B1.c: 149: } else {
  4562  020B  0008               	return
  4563  020C                     l6603:	
  4564                           
  4565                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  4566  020C  087B               	movf	_Sw,w
  4567  020D  0086               	movwf	6
  4568  020E  3001               	movlw	1	; select bank2/3
  4569  020F  0087               	movwf	7
  4570  0210  1981               	btfsc	1,3
  4571  0211  2A3E               	goto	l6613
  4572                           
  4573                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  4574  0212  087B               	movf	_Sw,w
  4575  0213  3E03               	addlw	3
  4576  0214  0086               	movwf	6
  4577  0215  3001               	movlw	1	; select bank2/3
  4578  0216  0087               	movwf	7
  4579  0217  3001               	movlw	1
  4580  0218  0781               	addwf	1,f
  4581  0219  3141               	addfsr 1,1
  4582  021A  1803               	skipnc
  4583  021B  0A81               	incf	1,f
  4584                           
  4585                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  4586  021C  087B               	movf	_Sw,w
  4587  021D  3E03               	addlw	3
  4588  021E  0086               	movwf	6
  4589  021F  3001               	movlw	1	; select bank2/3
  4590  0220  0087               	movwf	7
  4591  0221  3F40               	moviw [0]fsr1
  4592  0222  0020               	movlb	0	; select bank0
  4593  0223  00E5               	movwf	??_setSw_Main
  4594  0224  3F41               	moviw [1]fsr1
  4595  0225  00E6               	movwf	??_setSw_Main+1
  4596  0226  3000               	movlw	0
  4597  0227  0266               	subwf	??_setSw_Main+1,w
  4598  0228  3096               	movlw	150
  4599  0229  1903               	skipnz
  4600  022A  0265               	subwf	??_setSw_Main,w
  4601  022B  1C03               	skipc
  4602  022C  0008               	return
  4603                           
  4604                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  4605  022D  087B               	movf	_Sw,w
  4606  022E  3E03               	addlw	3
  4607  022F  0086               	movwf	6
  4608  0230  3001               	movlw	1	; select bank2/3
  4609  0231  0087               	movwf	7
  4610  0232  3000               	movlw	0
  4611  0233  3FC0               	movwi [0]fsr1
  4612  0234  3FC1               	movwi [1]fsr1
  4613                           
  4614                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  4615  0235  087B               	movf	_Sw,w
  4616  0236  0086               	movwf	6
  4617  0237  3001               	movlw	1	; select bank2/3
  4618  0238  0087               	movwf	7
  4619  0239  1581               	bsf	1,3
  4620                           
  4621                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  4622  023A  0869               	movf	setSw_Main@sw,w
  4623  023B  3196  268C         	fcall	_Sw_DimmerAdjFunc
  4624                           
  4625                           ;Switch_B1.c: 160: }
  4626                           ;Switch_B1.c: 161: } else {
  4627  023D  0008               	return
  4628  023E                     l6613:	
  4629                           
  4630                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  4631  023E  087B               	movf	_Sw,w
  4632  023F  0086               	movwf	6
  4633  0240  3001               	movlw	1	; select bank2/3
  4634  0241  0087               	movwf	7
  4635  0242  1A01               	btfsc	1,4
  4636  0243  2A83               	goto	l6627
  4637                           
  4638                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  4639  0244  087B               	movf	_Sw,w
  4640  0245  3E05               	addlw	5
  4641  0246  0086               	movwf	6
  4642  0247  3001               	movlw	1	; select bank2/3
  4643  0248  0087               	movwf	7
  4644  0249  3001               	movlw	1
  4645  024A  0781               	addwf	1,f
  4646  024B  3141               	addfsr 1,1
  4647  024C  1803               	skipnc
  4648  024D  0A81               	incf	1,f
  4649                           
  4650                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  4651  024E  087B               	movf	_Sw,w
  4652  024F  3E05               	addlw	5
  4653  0250  0086               	movwf	6
  4654  0251  3001               	movlw	1	; select bank2/3
  4655  0252  0087               	movwf	7
  4656  0253  3F40               	moviw [0]fsr1
  4657  0254  0020               	movlb	0	; select bank0
  4658  0255  00E5               	movwf	??_setSw_Main
  4659  0256  3F41               	moviw [1]fsr1
  4660  0257  00E6               	movwf	??_setSw_Main+1
  4661  0258  3000               	movlw	0
  4662  0259  0266               	subwf	??_setSw_Main+1,w
  4663  025A  3096               	movlw	150
  4664  025B  1903               	skipnz
  4665  025C  0265               	subwf	??_setSw_Main,w
  4666  025D  1C03               	skipc
  4667  025E  0008               	return
  4668                           
  4669                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  4670  025F  087B               	movf	_Sw,w
  4671  0260  3E05               	addlw	5
  4672  0261  0086               	movwf	6
  4673  0262  3001               	movlw	1	; select bank2/3
  4674  0263  0087               	movwf	7
  4675  0264  3000               	movlw	0
  4676  0265  3FC0               	movwi [0]fsr1
  4677  0266  3FC1               	movwi [1]fsr1
  4678                           
  4679                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  4680  0267  087B               	movf	_Sw,w
  4681  0268  0086               	movwf	6
  4682  0269  3001               	movlw	1	; select bank2/3
  4683  026A  0087               	movwf	7
  4684  026B  1601               	bsf	1,4
  4685                           
  4686                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  4687  026C  01A2               	clrf	setRF_Learn@command
  4688  026D  0AA2               	incf	setRF_Learn@command,f
  4689  026E  3001               	movlw	1
  4690  026F  3190  206A  3181   	fcall	_setRF_Learn
  4691                           
  4692                           ;Switch_B1.c: 172: if (myMain->First) {
  4693  0272  0021               	movlb	1	; select bank1
  4694  0273  0869               	movf	_myMain^(0+128),w
  4695  0274  3E03               	addlw	3
  4696  0275  0086               	movwf	6
  4697  0276  3001               	movlw	1	; select bank2/3
  4698  0277  0087               	movwf	7
  4699  0278  1C81               	btfss	1,1
  4700  0279  0008               	return
  4701                           
  4702                           ;Switch_B1.c: 173: setBuz(2, 100);
  4703  027A  3064               	movlw	100
  4704  027B  0020               	movlb	0	; select bank0
  4705  027C  00A0               	movwf	setBuz@time
  4706  027D  3000               	movlw	0
  4707  027E  00A1               	movwf	setBuz@time+1
  4708  027F  3002               	movlw	2
  4709  0280  3189  2141         	fcall	_setBuz
  4710                           
  4711                           ;Switch_B1.c: 174: }
  4712                           ;Switch_B1.c: 176: }
  4713                           ;Switch_B1.c: 177: } else {
  4714  0282  0008               	return
  4715  0283                     l6627:	
  4716                           
  4717                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  4718  0283  087B               	movf	_Sw,w
  4719  0284  0086               	movwf	6
  4720  0285  3001               	movlw	1	; select bank2/3
  4721  0286  0087               	movwf	7
  4722  0287  1A81               	btfsc	1,5
  4723  0288  0008               	return
  4724                           
  4725                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  4726  0289  087B               	movf	_Sw,w
  4727  028A  3E07               	addlw	7
  4728  028B  0086               	movwf	6
  4729  028C  3001               	movlw	1	; select bank2/3
  4730  028D  0087               	movwf	7
  4731  028E  3001               	movlw	1
  4732  028F  0781               	addwf	1,f
  4733  0290  3141               	addfsr 1,1
  4734  0291  1803               	skipnc
  4735  0292  0A81               	incf	1,f
  4736                           
  4737                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  4738  0293  087B               	movf	_Sw,w
  4739  0294  3E07               	addlw	7
  4740  0295  0086               	movwf	6
  4741  0296  3001               	movlw	1	; select bank2/3
  4742  0297  0087               	movwf	7
  4743  0298  3F40               	moviw [0]fsr1
  4744  0299  0020               	movlb	0	; select bank0
  4745  029A  00E5               	movwf	??_setSw_Main
  4746  029B  3F41               	moviw [1]fsr1
  4747  029C  00E6               	movwf	??_setSw_Main+1
  4748  029D  3001               	movlw	1
  4749  029E  0266               	subwf	??_setSw_Main+1,w
  4750  029F  302C               	movlw	44
  4751  02A0  1903               	skipnz
  4752  02A1  0265               	subwf	??_setSw_Main,w
  4753  02A2  1C03               	skipc
  4754  02A3  0008               	return
  4755                           
  4756                           ;Switch_B1.c: 181: {
  4757                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  4758  02A4  087B               	movf	_Sw,w
  4759  02A5  3E07               	addlw	7
  4760  02A6  0086               	movwf	6
  4761  02A7  3001               	movlw	1	; select bank2/3
  4762  02A8  0087               	movwf	7
  4763  02A9  3000               	movlw	0
  4764  02AA  3FC0               	movwi [0]fsr1
  4765  02AB  3FC1               	movwi [1]fsr1
  4766                           
  4767                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  4768  02AC  087B               	movf	_Sw,w
  4769  02AD  0086               	movwf	6
  4770  02AE  3001               	movlw	1	; select bank2/3
  4771  02AF  0087               	movwf	7
  4772  02B0  1681               	bsf	1,5
  4773                           
  4774                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  4775  02B1  01A2               	clrf	setRF_Learn@command
  4776  02B2  3001               	movlw	1
  4777  02B3  3190  206A         	fcall	_setRF_Learn
  4778                           
  4779                           ;Switch_B1.c: 189: }
  4780                           ;Switch_B1.c: 190: }
  4781                           ;Switch_B1.c: 191: }
  4782                           ;Switch_B1.c: 192: }
  4783                           ;Switch_B1.c: 193: }
  4784                           ;Switch_B1.c: 194: } else {
  4785  02B5  0008               	return
  4786  02B6                     l6637:	
  4787                           
  4788                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  4789  02B6  087B               	movf	_Sw,w
  4790  02B7  0086               	movwf	6
  4791  02B8  3001               	movlw	1	; select bank2/3
  4792  02B9  0087               	movwf	7
  4793  02BA  1D01               	btfss	1,2
  4794  02BB  0008               	return
  4795                           
  4796                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  4797  02BC  3001               	movlw	1
  4798  02BD  0020               	movlb	0	; select bank0
  4799  02BE  00E5               	movwf	??_setSw_Main
  4800  02BF  087B               	movf	_Sw,w
  4801  02C0  3E02               	addlw	2
  4802  02C1  0086               	movwf	6
  4803  02C2  3001               	movlw	1	; select bank2/3
  4804  02C3  0087               	movwf	7
  4805  02C4  0865               	movf	??_setSw_Main,w
  4806  02C5  0781               	addwf	1,f
  4807                           
  4808                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  4809  02C6  087B               	movf	_Sw,w
  4810  02C7  3E02               	addlw	2
  4811  02C8  0086               	movwf	6
  4812  02C9  3001               	movlw	1	; select bank2/3
  4813  02CA  0087               	movwf	7
  4814  02CB  3005               	movlw	5
  4815  02CC  0201               	subwf	1,w
  4816  02CD  1C03               	skipc
  4817  02CE  0008               	return
  4818                           
  4819                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  4820  02CF  087B               	movf	_Sw,w
  4821  02D0  3E02               	addlw	2
  4822  02D1  0086               	movwf	6
  4823  02D2  3001               	movlw	1	; select bank2/3
  4824  02D3  0087               	movwf	7
  4825  02D4  0181               	clrf	1
  4826                           
  4827                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  4828  02D5  087B               	movf	_Sw,w
  4829  02D6  0086               	movwf	6
  4830  02D7  3001               	movlw	1	; select bank2/3
  4831  02D8  0087               	movwf	7
  4832  02D9  1101               	bcf	1,2
  4833                           
  4834                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  4835  02DA  087B               	movf	_Sw,w
  4836  02DB  3E03               	addlw	3
  4837  02DC  0086               	movwf	6
  4838  02DD  3001               	movlw	1	; select bank2/3
  4839  02DE  0087               	movwf	7
  4840  02DF  3000               	movlw	0
  4841  02E0  3FC0               	movwi [0]fsr1
  4842  02E1  3FC1               	movwi [1]fsr1
  4843                           
  4844                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  4845  02E2  087B               	movf	_Sw,w
  4846  02E3  0086               	movwf	6
  4847  02E4  3001               	movlw	1	; select bank2/3
  4848  02E5  0087               	movwf	7
  4849  02E6  1181               	bcf	1,3
  4850                           
  4851                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  4852  02E7  087B               	movf	_Sw,w
  4853  02E8  3E05               	addlw	5
  4854  02E9  0086               	movwf	6
  4855  02EA  3001               	movlw	1	; select bank2/3
  4856  02EB  0087               	movwf	7
  4857  02EC  3000               	movlw	0
  4858  02ED  3FC0               	movwi [0]fsr1
  4859  02EE  3FC1               	movwi [1]fsr1
  4860                           
  4861                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  4862  02EF  087B               	movf	_Sw,w
  4863  02F0  0086               	movwf	6
  4864  02F1  3001               	movlw	1	; select bank2/3
  4865  02F2  0087               	movwf	7
  4866  02F3  1201               	bcf	1,4
  4867                           
  4868                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  4869  02F4  087B               	movf	_Sw,w
  4870  02F5  3E07               	addlw	7
  4871  02F6  0086               	movwf	6
  4872  02F7  3001               	movlw	1	; select bank2/3
  4873  02F8  0087               	movwf	7
  4874  02F9  3000               	movlw	0
  4875  02FA  3FC0               	movwi [0]fsr1
  4876  02FB  3FC1               	movwi [1]fsr1
  4877                           
  4878                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  4879  02FC  087B               	movf	_Sw,w
  4880  02FD  0086               	movwf	6
  4881  02FE  3001               	movlw	1	; select bank2/3
  4882  02FF  0087               	movwf	7
  4883  0300  1281               	bcf	1,5
  4884                           
  4885                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  4886  0301  0869               	movf	setSw_Main@sw,w
  4887  0302  318A  22E1  3181   	fcall	_Sw_DimmerOffFunc
  4888                           
  4889                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  4890  0305  0020               	movlb	0	; select bank0
  4891  0306  01A2               	clrf	setRF_Learn@command
  4892  0307  3001               	movlw	1
  4893  0308  3190  206A         	fcall	_setRF_Learn
  4894  030A  0008               	return
  4895  030B                     __end_of_setSw_Main:	
  4896                           
  4897                           	psect	text9
  4898  106A                     __ptext9:	
  4899 ;; *************** function _setRF_Learn *****************
  4900 ;; Defined at:
  4901 ;;		line 30 in file "../src/RF_Control_B1.c"
  4902 ;; Parameters:    Size  Location     Type
  4903 ;;  rf              1    wreg     unsigned char 
  4904 ;;  command         1    2[BANK0 ] unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  rf              1    3[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:        2 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    6
  4923 ;; This function calls:
  4924 ;;		_RfPointSelect
  4925 ;; This function is called by:
  4926 ;;		_setSw_Main
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _setRF_Learn
  4932  106A                     _setRF_Learn:	
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4936                           ;setRF_Learn@rf stored from wreg
  4937  106A  0020               	movlb	0	; select bank0
  4938  106B  00A3               	movwf	setRF_Learn@rf
  4939                           
  4940                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  4941  106C  0823               	movf	setRF_Learn@rf,w
  4942  106D  319F  276F         	fcall	_RfPointSelect
  4943                           
  4944                           ;RF_Control_B1.c: 32: RF->Learn = command;
  4945  106F  0021               	movlb	1	; select bank1
  4946  1070  083D               	movf	_RF^(0+128),w
  4947  1071  0086               	movwf	6
  4948  1072  0187               	clrf	7
  4949  1073  0020               	movlb	0	; select bank0
  4950  1074  0822               	movf	setRF_Learn@command,w
  4951  1075  1301               	bcf	1,6
  4952  1076  1D03               	skipz
  4953  1077  1701               	bsf	1,6
  4954  1078  0008               	return
  4955  1079                     __end_of_setRF_Learn:	
  4956                           
  4957                           	psect	text10
  4958  0B52                     __ptext10:	
  4959 ;; *************** function _Sw_DimmerOnFunc *****************
  4960 ;; Defined at:
  4961 ;;		line 222 in file "../src/Switch_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;  sw              1    wreg     unsigned char 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  sw              1   67[BANK0 ] unsigned char 
  4966 ;;  Idle            1   66[BANK0 ] unsigned char 
  4967 ;; Return value:  Size  Location     Type
  4968 ;;		None               void
  4969 ;; Registers used:
  4970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;Total ram usage:        2 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:    9
  4983 ;; This function calls:
  4984 ;;		_setBuz
  4985 ;;		_setDimmerLights_Switch
  4986 ;;		_setDimmerLights_Trigger
  4987 ;;		_setRFSW_Status
  4988 ;;		_setRF_DimmerLights
  4989 ;;		_setTxData
  4990 ;; This function is called by:
  4991 ;;		_setSw_Main
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           
  4996                           ;psect for function _Sw_DimmerOnFunc
  4997  0B52                     _Sw_DimmerOnFunc:	
  4998                           
  4999                           ;incstack = 0
  5000                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5001                           ;Sw_DimmerOnFunc@sw stored from wreg
  5002  0B52  0020               	movlb	0	; select bank0
  5003  0B53  00E3               	movwf	Sw_DimmerOnFunc@sw
  5004                           
  5005                           ;Switch_B1.c: 223: char Idle = 1;
  5006  0B54  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5007  0B55  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5008                           
  5009                           ;Switch_B1.c: 235: if (sw == 1) {
  5010  0B56  0863               	movf	Sw_DimmerOnFunc@sw,w
  5011  0B57  3A01               	xorlw	1
  5012  0B58  1D03               	skipz
  5013  0B59  2B5D               	goto	l6043
  5014                           
  5015                           ;Switch_B1.c: 236: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5016  0B5A  0021               	movlb	1	; select bank1
  5017  0B5B  083B               	movf	_DimmerLights22^(0+128),w
  5018  0B5C  2B63               	goto	L2
  5019  0B5D                     l6043:	
  5020                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5021                           
  5022  0B5D  0863               	movf	Sw_DimmerOnFunc@sw,w
  5023  0B5E  3A02               	xorlw	2
  5024  0B5F  1D03               	skipz
  5025  0B60  2B6F               	goto	l6047
  5026                           
  5027                           ;Switch_B1.c: 238: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5028  0B61  0021               	movlb	1	; select bank1
  5029  0B62  083A               	movf	_DimmerLights11^(0+128),w
  5030  0B63                     L2:	
  5031  0B63  3E08               	addlw	8
  5032  0B64  0086               	movwf	6
  5033  0B65  3001               	movlw	1	; select bank2/3
  5034  0B66  0087               	movwf	7
  5035  0B67  1003               	clrc
  5036  0B68  1D81               	btfss	1,3
  5037  0B69  1403               	setc
  5038  0B6A  3000               	movlw	0
  5039  0B6B  1803               	btfsc	3,0
  5040  0B6C  3001               	movlw	1
  5041  0B6D  0020               	movlb	0	; select bank0
  5042  0B6E  00E2               	movwf	Sw_DimmerOnFunc@Idle
  5043  0B6F                     l6047:	
  5044                           
  5045                           ;Switch_B1.c: 239: }
  5046                           ;Switch_B1.c: 242: if (Idle) {
  5047  0B6F  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5048  0B70  1903               	btfsc	3,2
  5049  0B71  0008               	return
  5050                           
  5051                           ;Switch_B1.c: 243: Sw->Flag = 1;
  5052  0B72  087B               	movf	_Sw,w
  5053  0B73  0086               	movwf	6
  5054  0B74  3001               	movlw	1	; select bank2/3
  5055  0B75  0087               	movwf	7
  5056  0B76  1781               	bsf	1,7
  5057                           
  5058                           ;Switch_B1.c: 244: setBuz(1, 100);
  5059  0B77  3064               	movlw	100
  5060  0B78  00A0               	movwf	setBuz@time
  5061  0B79  3000               	movlw	0
  5062  0B7A  00A1               	movwf	setBuz@time+1
  5063  0B7B  3001               	movlw	1
  5064  0B7C  3189  2141  318B   	fcall	_setBuz
  5065                           
  5066                           ;Switch_B1.c: 245: if (!Sw->Status) {
  5067  0B7F  087B               	movf	_Sw,w
  5068  0B80  0086               	movwf	6
  5069  0B81  3001               	movlw	1	; select bank2/3
  5070  0B82  0087               	movwf	7
  5071  0B83  1B01               	btfsc	1,6
  5072  0B84  2BB1               	goto	l6067
  5073                           
  5074                           ;Switch_B1.c: 246: Sw->Status = 1;
  5075  0B85  087B               	movf	_Sw,w
  5076  0B86  0086               	movwf	6
  5077  0B87  3001               	movlw	1	; select bank2/3
  5078  0B88  0087               	movwf	7
  5079  0B89  1701               	bsf	1,6
  5080                           
  5081                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  5082  0B8A  0020               	movlb	0	; select bank0
  5083  0B8B  01A2               	clrf	setRFSW_Status@command
  5084  0B8C  0AA2               	incf	setRFSW_Status@command,f
  5085  0B8D  0863               	movf	Sw_DimmerOnFunc@sw,w
  5086  0B8E  319F  27D3  318B   	fcall	_setRFSW_Status
  5087                           
  5088                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  5089  0B91  0020               	movlb	0	; select bank0
  5090  0B92  01A2               	clrf	setDimmerLights_Trigger@command
  5091  0B93  0AA2               	incf	setDimmerLights_Trigger@command,f
  5092  0B94  0863               	movf	Sw_DimmerOnFunc@sw,w
  5093  0B95  3190  20A9  318B   	fcall	_setDimmerLights_Trigger
  5094                           
  5095                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  5096  0B98  0020               	movlb	0	; select bank0
  5097  0B99  01A2               	clrf	setDimmerLights_Switch@command
  5098  0B9A  0AA2               	incf	setDimmerLights_Switch@command,f
  5099  0B9B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5100  0B9C  3190  2099  318B   	fcall	_setDimmerLights_Switch
  5101                           
  5102                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  5103  0B9F  087B               	movf	_Sw,w
  5104  0BA0  0086               	movwf	6
  5105  0BA1  3001               	movlw	1	; select bank2/3
  5106  0BA2  0087               	movwf	7
  5107  0BA3  3000               	movlw	0
  5108  0BA4  1B01               	btfsc	1,6
  5109  0BA5  3001               	movlw	1
  5110  0BA6  0020               	movlb	0	; select bank0
  5111  0BA7  00DD               	movwf	setRF_DimmerLights@on
  5112  0BA8  0863               	movf	Sw_DimmerOnFunc@sw,w
  5113  0BA9  318A  2208  318B   	fcall	_setRF_DimmerLights
  5114                           
  5115                           ;Switch_B1.c: 253: setTxData(1);
  5116  0BAC  3001               	movlw	1
  5117  0BAD  3186  2656         	fcall	_setTxData
  5118                           
  5119                           ;Switch_B1.c: 255: } else {
  5120  0BAF  0020               	movlb	0	; select bank0
  5121  0BB0  0008               	return
  5122  0BB1                     l6067:	
  5123                           
  5124                           ;Switch_B1.c: 256: Sw->Status = 0;
  5125  0BB1  087B               	movf	_Sw,w
  5126  0BB2  0086               	movwf	6
  5127  0BB3  3001               	movlw	1	; select bank2/3
  5128  0BB4  0087               	movwf	7
  5129  0BB5  1301               	bcf	1,6
  5130                           
  5131                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  5132  0BB6  087B               	movf	_Sw,w
  5133  0BB7  0086               	movwf	6
  5134  0BB8  3001               	movlw	1	; select bank2/3
  5135  0BB9  0087               	movwf	7
  5136  0BBA  3000               	movlw	0
  5137  0BBB  1B01               	btfsc	1,6
  5138  0BBC  3001               	movlw	1
  5139  0BBD  0020               	movlb	0	; select bank0
  5140  0BBE  00A2               	movwf	setRFSW_Status@command
  5141  0BBF  0863               	movf	Sw_DimmerOnFunc@sw,w
  5142  0BC0  319F  27D3         	fcall	_setRFSW_Status
  5143  0BC2  0020               	movlb	0	; select bank0
  5144  0BC3  0008               	return
  5145  0BC4                     __end_of_Sw_DimmerOnFunc:	
  5146                           
  5147                           	psect	text11
  5148  0AE1                     __ptext11:	
  5149 ;; *************** function _Sw_DimmerOffFunc *****************
  5150 ;; Defined at:
  5151 ;;		line 263 in file "../src/Switch_B1.c"
  5152 ;; Parameters:    Size  Location     Type
  5153 ;;  sw              1    wreg     unsigned char 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  sw              1   68[BANK0 ] unsigned char 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;		None               void
  5158 ;; Registers used:
  5159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5160 ;; Tracked objects:
  5161 ;;		On entry : 0/0
  5162 ;;		On exit  : 0/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5169 ;;Total ram usage:        3 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    9
  5172 ;; This function calls:
  5173 ;;		_setDelayOff_GO
  5174 ;;		_setDimmerLights_AdjGo
  5175 ;;		_setDimmerLights_Switch
  5176 ;;		_setDimmerLights_Trigger
  5177 ;;		_setDimmerLights_TriggerAdj
  5178 ;;		_setRF_DimmerLights
  5179 ;;		_setTxData
  5180 ;; This function is called by:
  5181 ;;		_setSw_Main
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           
  5186                           ;psect for function _Sw_DimmerOffFunc
  5187  0AE1                     _Sw_DimmerOffFunc:	
  5188                           
  5189                           ;incstack = 0
  5190                           ; Regs used in _Sw_DimmerOffFunc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5191                           ;Sw_DimmerOffFunc@sw stored from wreg
  5192  0AE1  0020               	movlb	0	; select bank0
  5193  0AE2  00E4               	movwf	Sw_DimmerOffFunc@sw
  5194                           
  5195                           ;Switch_B1.c: 264: if (Sw->Flag) {
  5196  0AE3  087B               	movf	_Sw,w
  5197  0AE4  0086               	movwf	6
  5198  0AE5  3001               	movlw	1	; select bank2/3
  5199  0AE6  0087               	movwf	7
  5200  0AE7  1F81               	btfss	1,7
  5201  0AE8  0008               	return
  5202                           
  5203                           ;Switch_B1.c: 265: Sw->Flag = 0;
  5204  0AE9  087B               	movf	_Sw,w
  5205  0AEA  0086               	movwf	6
  5206  0AEB  3001               	movlw	1	; select bank2/3
  5207  0AEC  0087               	movwf	7
  5208  0AED  1381               	bcf	1,7
  5209                           
  5210                           ;Switch_B1.c: 266: if (Sw->Status) {
  5211  0AEE  087B               	movf	_Sw,w
  5212  0AEF  0086               	movwf	6
  5213  0AF0  3001               	movlw	1	; select bank2/3
  5214  0AF1  0087               	movwf	7
  5215  0AF2  1F01               	btfss	1,6
  5216  0AF3  2B2D               	goto	l6111
  5217                           
  5218                           ;Switch_B1.c: 267: if (Sw->Adj) {
  5219  0AF4  0A7B               	incf	_Sw,w
  5220  0AF5  0086               	movwf	6
  5221  0AF6  3001               	movlw	1	; select bank2/3
  5222  0AF7  0087               	movwf	7
  5223  0AF8  1C01               	btfss	1,0
  5224  0AF9  0008               	return
  5225                           
  5226                           ;Switch_B1.c: 268: Sw->Adj = 0;
  5227  0AFA  0A7B               	incf	_Sw,w
  5228  0AFB  0086               	movwf	6
  5229  0AFC  3001               	movlw	1	; select bank2/3
  5230  0AFD  0087               	movwf	7
  5231  0AFE  1001               	bcf	1,0
  5232                           
  5233                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  5234  0AFF  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5235  0B00  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5236  0B01  0864               	movf	Sw_DimmerOffFunc@sw,w
  5237  0B02  3190  20C9  318A   	fcall	_setDimmerLights_TriggerAdj
  5238                           
  5239                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  5240  0B05  0020               	movlb	0	; select bank0
  5241  0B06  01A2               	clrf	setDimmerLights_AdjGo@command
  5242  0B07  0864               	movf	Sw_DimmerOffFunc@sw,w
  5243  0B08  3190  20B9  318A   	fcall	_setDimmerLights_AdjGo
  5244                           
  5245                           ;Switch_B1.c: 272: product->Data[17]=product->Data[26 + sw];
  5246  0B0B  0020               	movlb	0	; select bank0
  5247  0B0C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5248  0B0D  3E1A               	addlw	26
  5249  0B0E  077D               	addwf	_product,w
  5250  0B0F  00E2               	movwf	??_Sw_DimmerOffFunc
  5251  0B10  0862               	movf	??_Sw_DimmerOffFunc,w
  5252  0B11  0086               	movwf	6
  5253  0B12  3001               	movlw	1	; select bank2/3
  5254  0B13  0087               	movwf	7
  5255  0B14  0801               	movf	1,w
  5256  0B15  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5257  0B16  087D               	movf	_product,w
  5258  0B17  3E11               	addlw	17
  5259  0B18  0086               	movwf	6
  5260  0B19  3001               	movlw	1	; select bank2/3
  5261  0B1A  0087               	movwf	7
  5262  0B1B  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5263  0B1C  0081               	movwf	1
  5264                           
  5265                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5266  0B1D  087B               	movf	_Sw,w
  5267  0B1E  0086               	movwf	6
  5268  0B1F  3001               	movlw	1	; select bank2/3
  5269  0B20  0087               	movwf	7
  5270  0B21  3000               	movlw	0
  5271  0B22  1B01               	btfsc	1,6
  5272  0B23  3001               	movlw	1
  5273  0B24  00DD               	movwf	setRF_DimmerLights@on
  5274  0B25  0864               	movf	Sw_DimmerOffFunc@sw,w
  5275  0B26  318A  2208  318A   	fcall	_setRF_DimmerLights
  5276                           
  5277                           ;Switch_B1.c: 274: setTxData(1);
  5278  0B29  3001               	movlw	1
  5279  0B2A  3186  2656         	fcall	_setTxData
  5280                           
  5281                           ;Switch_B1.c: 276: }
  5282                           ;Switch_B1.c: 277: } else {
  5283  0B2C  0008               	return
  5284  0B2D                     l6111:	
  5285                           
  5286                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  5287  0B2D  0020               	movlb	0	; select bank0
  5288  0B2E  01A2               	clrf	setDimmerLights_Trigger@command
  5289  0B2F  0AA2               	incf	setDimmerLights_Trigger@command,f
  5290  0B30  0864               	movf	Sw_DimmerOffFunc@sw,w
  5291  0B31  3190  20A9  318A   	fcall	_setDimmerLights_Trigger
  5292                           
  5293                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  5294  0B34  0020               	movlb	0	; select bank0
  5295  0B35  01A2               	clrf	setDimmerLights_Switch@command
  5296  0B36  0864               	movf	Sw_DimmerOffFunc@sw,w
  5297  0B37  3190  2099  318A   	fcall	_setDimmerLights_Switch
  5298                           
  5299                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  5300  0B3A  0020               	movlb	0	; select bank0
  5301  0B3B  01A3               	clrf	setDelayOff_GO@command
  5302  0B3C  01A4               	clrf	setDelayOff_GO@value
  5303  0B3D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5304  0B3E  3188  2086  318A   	fcall	_setDelayOff_GO
  5305                           
  5306                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  5307  0B41  087B               	movf	_Sw,w
  5308  0B42  0086               	movwf	6
  5309  0B43  3001               	movlw	1	; select bank2/3
  5310  0B44  0087               	movwf	7
  5311  0B45  3000               	movlw	0
  5312  0B46  1B01               	btfsc	1,6
  5313  0B47  3001               	movlw	1
  5314  0B48  0020               	movlb	0	; select bank0
  5315  0B49  00DD               	movwf	setRF_DimmerLights@on
  5316  0B4A  0864               	movf	Sw_DimmerOffFunc@sw,w
  5317  0B4B  318A  2208  318A   	fcall	_setRF_DimmerLights
  5318                           
  5319                           ;Switch_B1.c: 283: setTxData(1);
  5320  0B4E  3001               	movlw	1
  5321  0B4F  3186  2656         	fcall	_setTxData
  5322  0B51  0008               	return
  5323  0B52                     __end_of_Sw_DimmerOffFunc:	
  5324                           
  5325                           	psect	text12
  5326  168C                     __ptext12:	
  5327 ;; *************** function _Sw_DimmerAdjFunc *****************
  5328 ;; Defined at:
  5329 ;;		line 290 in file "../src/Switch_B1.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  sw              1    wreg     unsigned char 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  sw              1    5[BANK0 ] unsigned char 
  5334 ;;  Idle            1    4[BANK0 ] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    7
  5351 ;; This function calls:
  5352 ;;		_setDimmerLights_AdjGo
  5353 ;;		_setDimmerLights_TriggerAdj
  5354 ;;		_setRFSW_Status
  5355 ;; This function is called by:
  5356 ;;		_setSw_Main
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           
  5361                           ;psect for function _Sw_DimmerAdjFunc
  5362  168C                     _Sw_DimmerAdjFunc:	
  5363                           
  5364                           ;incstack = 0
  5365                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5366                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5367  168C  0020               	movlb	0	; select bank0
  5368  168D  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5369                           
  5370                           ;Switch_B1.c: 291: char Idle = 1;
  5371  168E  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5372  168F  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5373                           
  5374                           ;Switch_B1.c: 303: if (sw == 1) {
  5375  1690  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5376  1691  3A01               	xorlw	1
  5377  1692  1D03               	skipz
  5378  1693  2E97               	goto	l6077
  5379                           
  5380                           ;Switch_B1.c: 304: Idle = (DimmerLights22->AdjGo) ? 0 : 1;
  5381  1694  0021               	movlb	1	; select bank1
  5382  1695  083B               	movf	_DimmerLights22^(0+128),w
  5383  1696  2E9D               	goto	L3
  5384  1697                     l6077:	
  5385                           ;Switch_B1.c: 305: } else if (sw == 2) {
  5386                           
  5387  1697  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5388  1698  3A02               	xorlw	2
  5389  1699  1D03               	skipz
  5390  169A  2EA9               	goto	l6081
  5391                           
  5392                           ;Switch_B1.c: 306: Idle = (DimmerLights11->AdjGo) ? 0 : 1;
  5393  169B  0021               	movlb	1	; select bank1
  5394  169C  083A               	movf	_DimmerLights11^(0+128),w
  5395  169D                     L3:	
  5396  169D  3E08               	addlw	8
  5397  169E  0086               	movwf	6
  5398  169F  3001               	movlw	1	; select bank2/3
  5399  16A0  0087               	movwf	7
  5400  16A1  1003               	clrc
  5401  16A2  1D81               	btfss	1,3
  5402  16A3  1403               	setc
  5403  16A4  3000               	movlw	0
  5404  16A5  1803               	btfsc	3,0
  5405  16A6  3001               	movlw	1
  5406  16A7  0020               	movlb	0	; select bank0
  5407  16A8  00A4               	movwf	Sw_DimmerAdjFunc@Idle
  5408  16A9                     l6081:	
  5409                           
  5410                           ;Switch_B1.c: 307: }
  5411                           ;Switch_B1.c: 310: if (Idle) {
  5412  16A9  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5413  16AA  1903               	btfsc	3,2
  5414  16AB  0008               	return
  5415                           
  5416                           ;Switch_B1.c: 311: if (Sw->Flag) {
  5417  16AC  087B               	movf	_Sw,w
  5418  16AD  0086               	movwf	6
  5419  16AE  3001               	movlw	1	; select bank2/3
  5420  16AF  0087               	movwf	7
  5421  16B0  1F81               	btfss	1,7
  5422  16B1  0008               	return
  5423                           
  5424                           ;Switch_B1.c: 312: Sw->Adj = 1;
  5425  16B2  0A7B               	incf	_Sw,w
  5426  16B3  0086               	movwf	6
  5427  16B4  3001               	movlw	1	; select bank2/3
  5428  16B5  0087               	movwf	7
  5429  16B6  1401               	bsf	1,0
  5430                           
  5431                           ;Switch_B1.c: 313: Sw->Status = 1;
  5432  16B7  087B               	movf	_Sw,w
  5433  16B8  0086               	movwf	6
  5434  16B9  3001               	movlw	1	; select bank2/3
  5435  16BA  0087               	movwf	7
  5436  16BB  1701               	bsf	1,6
  5437                           
  5438                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  5439  16BC  01A2               	clrf	setRFSW_Status@command
  5440  16BD  0AA2               	incf	setRFSW_Status@command,f
  5441  16BE  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5442  16BF  319F  27D3  3196   	fcall	_setRFSW_Status
  5443                           
  5444                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  5445  16C2  0020               	movlb	0	; select bank0
  5446  16C3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5447  16C4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5448  16C5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5449  16C6  3190  20C9  3196   	fcall	_setDimmerLights_TriggerAdj
  5450                           
  5451                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  5452  16C9  0020               	movlb	0	; select bank0
  5453  16CA  01A2               	clrf	setDimmerLights_AdjGo@command
  5454  16CB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5455  16CC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5456  16CD  3190  20B9         	fcall	_setDimmerLights_AdjGo
  5457  16CF  0020               	movlb	0	; select bank0
  5458  16D0  0008               	return
  5459  16D1                     __end_of_Sw_DimmerAdjFunc:	
  5460                           
  5461                           	psect	text13
  5462  10C9                     __ptext13:	
  5463 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5464 ;; Defined at:
  5465 ;;		line 556 in file "../src/Dimmer_B1.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  lights          1    wreg     unsigned char 
  5468 ;;  command         1    2[BANK0 ] unsigned char 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  lights          1    3[BANK0 ] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        2 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    6
  5487 ;; This function calls:
  5488 ;;		_DimmerLightsPointSelect
  5489 ;; This function is called by:
  5490 ;;		_Sw_DimmerOffFunc
  5491 ;;		_Sw_DimmerAdjFunc
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           
  5496                           ;psect for function _setDimmerLights_TriggerAdj
  5497  10C9                     _setDimmerLights_TriggerAdj:	
  5498                           
  5499                           ;incstack = 0
  5500                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5501                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5502  10C9  0020               	movlb	0	; select bank0
  5503  10CA  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5504                           
  5505                           ;Dimmer_B1.c: 557: DimmerLightsPointSelect(lights);
  5506  10CB  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5507  10CC  3191  210D         	fcall	_DimmerLightsPointSelect
  5508                           
  5509                           ;Dimmer_B1.c: 558: DimmerLights->TriggerAdj = command;
  5510  10CE  0879               	movf	_DimmerLights,w
  5511  10CF  3E08               	addlw	8
  5512  10D0  0086               	movwf	6
  5513  10D1  3001               	movlw	1	; select bank2/3
  5514  10D2  0087               	movwf	7
  5515  10D3  0020               	movlb	0	; select bank0
  5516  10D4  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5517  10D5  1201               	bcf	1,4
  5518  10D6  1D03               	skipz
  5519  10D7  1601               	bsf	1,4
  5520  10D8  0008               	return
  5521  10D9                     __end_of_setDimmerLights_TriggerAdj:	
  5522                           
  5523                           	psect	text14
  5524  10B9                     __ptext14:	
  5525 ;; *************** function _setDimmerLights_AdjGo *****************
  5526 ;; Defined at:
  5527 ;;		line 546 in file "../src/Dimmer_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  lights          1    wreg     unsigned char 
  5530 ;;  command         1    2[BANK0 ] unsigned char 
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;  lights          1    3[BANK0 ] unsigned char 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;		None               void
  5535 ;; Registers used:
  5536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5542 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;Total ram usage:        2 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:    6
  5549 ;; This function calls:
  5550 ;;		_DimmerLightsPointSelect
  5551 ;; This function is called by:
  5552 ;;		_Sw_DimmerOffFunc
  5553 ;;		_Sw_DimmerAdjFunc
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           
  5558                           ;psect for function _setDimmerLights_AdjGo
  5559  10B9                     _setDimmerLights_AdjGo:	
  5560                           
  5561                           ;incstack = 0
  5562                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5563                           ;setDimmerLights_AdjGo@lights stored from wreg
  5564  10B9  0020               	movlb	0	; select bank0
  5565  10BA  00A3               	movwf	setDimmerLights_AdjGo@lights
  5566                           
  5567                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(lights);
  5568  10BB  0823               	movf	setDimmerLights_AdjGo@lights,w
  5569  10BC  3191  210D         	fcall	_DimmerLightsPointSelect
  5570                           
  5571                           ;Dimmer_B1.c: 548: DimmerLights->AdjGo = command;
  5572  10BE  0879               	movf	_DimmerLights,w
  5573  10BF  3E08               	addlw	8
  5574  10C0  0086               	movwf	6
  5575  10C1  3001               	movlw	1	; select bank2/3
  5576  10C2  0087               	movwf	7
  5577  10C3  0020               	movlb	0	; select bank0
  5578  10C4  0822               	movf	setDimmerLights_AdjGo@command,w
  5579  10C5  1181               	bcf	1,3
  5580  10C6  1D03               	skipz
  5581  10C7  1581               	bsf	1,3
  5582  10C8  0008               	return
  5583  10C9                     __end_of_setDimmerLights_AdjGo:	
  5584                           
  5585                           	psect	text15
  5586  1FC6                     __ptext15:	
  5587 ;; *************** function _Switch_Initialization *****************
  5588 ;; Defined at:
  5589 ;;		line 37 in file "../src/Switch_B1.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;		None               void
  5596 ;; Registers used:
  5597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    8
  5610 ;; This function calls:
  5611 ;;		_TouchPower
  5612 ;;		_setSw_Initialization
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           
  5619                           ;psect for function _Switch_Initialization
  5620  1FC6                     _Switch_Initialization:	
  5621                           
  5622                           ;Switch_B1.c: 38: TouchPower();
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5626  1FC6  319E  26C2  319F   	fcall	_TouchPower
  5627                           
  5628                           ;Switch_B1.c: 40: WPUB1 = 0;
  5629  1FC9  0024               	movlb	4	; select bank4
  5630  1FCA  108D               	bcf	13,1	;volatile
  5631                           
  5632                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5633  1FCB  3001               	movlw	1
  5634  1FCC  319E  26FE  319F   	fcall	_setSw_Initialization
  5635                           
  5636                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5637  1FCF  3002               	movlw	2
  5638  1FD0  319E  26FE         	fcall	_setSw_Initialization
  5639  1FD2  0008               	return
  5640  1FD3                     __end_of_Switch_Initialization:	
  5641                           
  5642                           	psect	text16
  5643  1EFE                     __ptext16:	
  5644 ;; *************** function _setSw_Initialization *****************
  5645 ;; Defined at:
  5646 ;;		line 77 in file "../src/Switch_B1.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  sw              1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  sw              1    4[BANK0 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;		None               void
  5653 ;; Registers used:
  5654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        1 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    7
  5667 ;; This function calls:
  5668 ;;		_setLED
  5669 ;; This function is called by:
  5670 ;;		_Switch_Initialization
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           
  5675                           ;psect for function _setSw_Initialization
  5676  1EFE                     _setSw_Initialization:	
  5677                           
  5678                           ;incstack = 0
  5679                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5680                           ;setSw_Initialization@sw stored from wreg
  5681  1EFE  0020               	movlb	0	; select bank0
  5682  1EFF  00A4               	movwf	setSw_Initialization@sw
  5683                           
  5684                           ;Switch_B1.c: 78: setLED(sw, 1);
  5685  1F00  01A2               	clrf	setLED@command
  5686  1F01  0AA2               	incf	setLED@command,f
  5687  1F02  0824               	movf	setSw_Initialization@sw,w
  5688  1F03  3188  20E3         	fcall	_setLED
  5689  1F05  0008               	return
  5690  1F06                     __end_of_setSw_Initialization:	
  5691                           
  5692                           	psect	text17
  5693  1EC2                     __ptext17:	
  5694 ;; *************** function _TouchPower *****************
  5695 ;; Defined at:
  5696 ;;		line 10 in file "../src/Switch_B1.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;		None
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;		None
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		None
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;Total ram usage:        0 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    5
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_Switch_Initialization
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           
  5725                           ;psect for function _TouchPower
  5726  1EC2                     _TouchPower:	
  5727  1EC2                     l2386:	
  5728                           ;Switch_B1.c: 11: while (!RC5)
  5729                           
  5730                           ;incstack = 0
  5731                           ; Regs used in _TouchPower: []
  5732                           
  5733  1EC2  0020               	movlb	0	; select bank0
  5734  1EC3  1A8E               	btfsc	14,5	;volatile
  5735  1EC4  0008               	return
  5736                           
  5737                           ;Switch_B1.c: 12: RC5 = 1;
  5738  1EC5  168E               	bsf	14,5	;volatile
  5739  1EC6  2EC2               	goto	l2386
  5740  1EC7                     __end_of_TouchPower:	
  5741                           
  5742                           	psect	text18
  5743  1066                     __ptext18:	
  5744 ;; *************** function _RF_Main *****************
  5745 ;; Defined at:
  5746 ;;		line 23 in file "../src/RF_Control_B1.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;		None               void
  5753 ;; Registers used:
  5754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:   14
  5767 ;; This function calls:
  5768 ;;		_setRF_Main
  5769 ;; This function is called by:
  5770 ;;		_main
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _RF_Main
  5776  1066                     _RF_Main:	
  5777                           
  5778                           ;RF_Control_B1.c: 25: setRF_Main(1);
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5782  1066  3001               	movlw	1
  5783  1067  318F  276C         	fcall	_setRF_Main
  5784  1069  0008               	return
  5785  106A                     __end_of_RF_Main:	
  5786                           
  5787                           	psect	text19
  5788  0F6C                     __ptext19:	
  5789 ;; *************** function _setRF_Main *****************
  5790 ;; Defined at:
  5791 ;;		line 57 in file "../src/RF_Control_B1.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  rf              1    wreg     unsigned char 
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;  rf              1   74[BANK0 ] unsigned char 
  5796 ;; Return value:  Size  Location     Type
  5797 ;;		None               void
  5798 ;; Registers used:
  5799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;Total ram usage:        3 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:   13
  5812 ;; This function calls:
  5813 ;;		_CC2500_RxData
  5814 ;;		_CC2500_TxData
  5815 ;;		_CC2500_WriteCommand
  5816 ;;		_RF_RxDisable
  5817 ;;		_RfPointSelect
  5818 ;;		_getRxData
  5819 ;;		_setINT_GO
  5820 ;; This function is called by:
  5821 ;;		_RF_Main
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _setRF_Main
  5827  0F6C                     _setRF_Main:	
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5831                           ;setRF_Main@rf stored from wreg
  5832  0F6C  0020               	movlb	0	; select bank0
  5833  0F6D  00EA               	movwf	setRF_Main@rf
  5834                           
  5835                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  5836  0F6E  086A               	movf	setRF_Main@rf,w
  5837  0F6F  319F  276F  318F   	fcall	_RfPointSelect
  5838                           
  5839                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  5840  0F72  0021               	movlb	1	; select bank1
  5841  0F73  083D               	movf	_RF^(0+128),w
  5842  0F74  0086               	movwf	6
  5843  0F75  0187               	clrf	7
  5844  0F76  1C01               	btfss	1,0
  5845  0F77  0008               	return
  5846                           
  5847                           ;RF_Control_B1.c: 67: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  5848  0F78  0020               	movlb	0	; select bank0
  5849  0F79  01EB               	clrf	_setRF_Main$3431
  5850  0F7A  1F0C               	btfss	12,6	;volatile
  5851  0F7B  1A0C               	btfsc	12,4	;volatile
  5852  0F7C  2F81               	goto	l6497
  5853  0F7D  180C               	btfsc	12,0	;volatile
  5854  0F7E  2F81               	goto	l6497
  5855  0F7F  1C8D               	btfss	13,1	;volatile
  5856  0F80  2F8A               	goto	l6501
  5857  0F81                     l6497:	
  5858  0F81  0021               	movlb	1	; select bank1
  5859  0F82  083D               	movf	_RF^(0+128),w
  5860  0F83  0086               	movwf	6
  5861  0F84  0187               	clrf	7
  5862  0F85  1B01               	btfsc	1,6
  5863  0F86  2F8A               	goto	l6501
  5864  0F87  0020               	movlb	0	; select bank0
  5865  0F88  01EB               	clrf	_setRF_Main$3431
  5866  0F89  0AEB               	incf	_setRF_Main$3431,f
  5867  0F8A                     l6501:	
  5868  0F8A  0021               	movlb	1	; select bank1
  5869  0F8B  083D               	movf	_RF^(0+128),w
  5870  0F8C  0086               	movwf	6
  5871  0F8D  0187               	clrf	7
  5872  0F8E  0020               	movlb	0	; select bank0
  5873  0F8F  086B               	movf	_setRF_Main$3431,w
  5874  0F90  1381               	bcf	1,7
  5875  0F91  1D03               	skipz
  5876  0F92  1781               	bsf	1,7
  5877                           
  5878                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  5879  0F93  0021               	movlb	1	; select bank1
  5880  0F94  083D               	movf	_RF^(0+128),w
  5881  0F95  0086               	movwf	6
  5882  0F96  0187               	clrf	7
  5883  0F97  1B81               	btfsc	1,7
  5884  0F98  2FC6               	goto	l6523
  5885                           
  5886                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  5887  0F99  083D               	movf	_RF^(0+128),w
  5888  0F9A  0086               	movwf	6
  5889  0F9B  0187               	clrf	7
  5890  0F9C  1C81               	btfss	1,1
  5891  0F9D  2FAA               	goto	l6511
  5892                           
  5893                           ;RF_Control_B1.c: 77: {
  5894                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  5895  0F9E  083D               	movf	_RF^(0+128),w
  5896  0F9F  0086               	movwf	6
  5897  0FA0  0187               	clrf	7
  5898  0FA1  1081               	bcf	1,1
  5899                           
  5900                           ;RF_Control_B1.c: 79: CC2500_RxData();
  5901  0FA2  3189  21A4  318F   	fcall	_CC2500_RxData
  5902                           
  5903                           ;RF_Control_B1.c: 86: getRxData(1);
  5904  0FA5  3001               	movlw	1
  5905  0FA6  3197  275F  318F   	fcall	_getRxData
  5906                           
  5907                           ;RF_Control_B1.c: 89: } else {
  5908  0FA9  2FCA               	goto	l6525
  5909  0FAA                     l6511:	
  5910                           
  5911                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  5912  0FAA  0021               	movlb	1	; select bank1
  5913  0FAB  083D               	movf	_RF^(0+128),w
  5914  0FAC  0086               	movwf	6
  5915  0FAD  0187               	clrf	7
  5916  0FAE  1901               	btfsc	1,2
  5917  0FAF  2FCA               	goto	l6525
  5918                           
  5919                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  5920  0FB0  083D               	movf	_RF^(0+128),w
  5921  0FB1  0086               	movwf	6
  5922  0FB2  0187               	clrf	7
  5923  0FB3  1981               	btfsc	1,3
  5924  0FB4  2FCA               	goto	l6525
  5925                           
  5926                           ;RF_Control_B1.c: 93: {
  5927                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  5928  0FB5  083D               	movf	_RF^(0+128),w
  5929  0FB6  0086               	movwf	6
  5930  0FB7  0187               	clrf	7
  5931  0FB8  1581               	bsf	1,3
  5932                           
  5933                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  5934  0FB9  3036               	movlw	54
  5935  0FBA  3190  2089  318F   	fcall	_CC2500_WriteCommand
  5936                           
  5937                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  5938  0FBD  3034               	movlw	52
  5939  0FBE  3190  2089  318F   	fcall	_CC2500_WriteCommand
  5940                           
  5941                           ;RF_Control_B1.c: 97: setINT_GO(1);
  5942  0FC1  3001               	movlw	1
  5943  0FC2  319F  2717  318F   	fcall	_setINT_GO
  5944                           
  5945                           ;RF_Control_B1.c: 98: }
  5946                           ;RF_Control_B1.c: 100: }
  5947                           ;RF_Control_B1.c: 101: }
  5948                           ;RF_Control_B1.c: 102: } else {
  5949  0FC5  2FCA               	goto	l6525
  5950  0FC6                     l6523:	
  5951                           
  5952                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  5953  0FC6  3001               	movlw	1
  5954  0FC7  3193  23A5  318F   	fcall	_RF_RxDisable
  5955  0FCA                     l6525:	
  5956                           
  5957                           ;RF_Control_B1.c: 104: }
  5958                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  5959  0FCA  0021               	movlb	1	; select bank1
  5960  0FCB  083D               	movf	_RF^(0+128),w
  5961  0FCC  0086               	movwf	6
  5962  0FCD  0187               	clrf	7
  5963  0FCE  1D01               	btfss	1,2
  5964  0FCF  0008               	return
  5965                           
  5966                           ;RF_Control_B1.c: 106: {
  5967                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  5968  0FD0  3001               	movlw	1
  5969  0FD1  3193  23A5  318F   	fcall	_RF_RxDisable
  5970                           
  5971                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  5972  0FD4  0021               	movlb	1	; select bank1
  5973  0FD5  083D               	movf	_RF^(0+128),w
  5974  0FD6  0086               	movwf	6
  5975  0FD7  0187               	clrf	7
  5976  0FD8  1A81               	btfsc	1,5
  5977  0FD9  2FF5               	goto	l6539
  5978                           
  5979                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  5980  0FDA  3001               	movlw	1
  5981  0FDB  0020               	movlb	0	; select bank0
  5982  0FDC  00E9               	movwf	??_setRF_Main
  5983  0FDD  0021               	movlb	1	; select bank1
  5984  0FDE  0A3D               	incf	_RF^(0+128),w
  5985  0FDF  0086               	movwf	6
  5986  0FE0  0187               	clrf	7
  5987  0FE1  0020               	movlb	0	; select bank0
  5988  0FE2  0869               	movf	??_setRF_Main,w
  5989  0FE3  0781               	addwf	1,f
  5990                           
  5991                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  5992  0FE4  0021               	movlb	1	; select bank1
  5993  0FE5  0A3D               	incf	_RF^(0+128),w
  5994  0FE6  0086               	movwf	6
  5995  0FE7  0187               	clrf	7
  5996  0FE8  0801               	movf	1,w
  5997  0FE9  3A19               	xorlw	25
  5998  0FEA  1D03               	skipz
  5999  0FEB  0008               	return
  6000                           
  6001                           ;RF_Control_B1.c: 111: {
  6002                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  6003  0FEC  0A3D               	incf	_RF^(0+128),w
  6004  0FED  0086               	movwf	6
  6005  0FEE  0187               	clrf	7
  6006  0FEF  0181               	clrf	1
  6007                           
  6008                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  6009  0FF0  083D               	movf	_RF^(0+128),w
  6010  0FF1  0086               	movwf	6
  6011  0FF2  0187               	clrf	7
  6012  0FF3  1681               	bsf	1,5
  6013                           
  6014                           ;RF_Control_B1.c: 114: }
  6015                           ;RF_Control_B1.c: 115: } else {
  6016  0FF4  0008               	return
  6017  0FF5                     l6539:	
  6018                           
  6019                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  6020  0FF5  083D               	movf	_RF^(0+128),w
  6021  0FF6  0086               	movwf	6
  6022  0FF7  0187               	clrf	7
  6023  0FF8  1281               	bcf	1,5
  6024                           
  6025                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  6026  0FF9  083D               	movf	_RF^(0+128),w
  6027  0FFA  0086               	movwf	6
  6028  0FFB  0187               	clrf	7
  6029  0FFC  1101               	bcf	1,2
  6030                           
  6031                           ;RF_Control_B1.c: 118: CC2500_TxData();
  6032  0FFD  3196  2603         	fcall	_CC2500_TxData
  6033  0FFF  0008               	return
  6034  1000                     __end_of_setRF_Main:	
  6035                           
  6036                           	psect	text20
  6037  175F                     __ptext20:	
  6038 ;; *************** function _getRxData *****************
  6039 ;; Defined at:
  6040 ;;		line 202 in file "../src/RF_Control_B1.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  rf              1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  rf              1   72[BANK0 ] unsigned char 
  6045 ;;  i               1    0        unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6056 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;Total ram usage:        1 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:   12
  6062 ;; This function calls:
  6063 ;;		_RfPointSelect
  6064 ;;		_setControl_Lights_Table
  6065 ;;		_setLog_Code
  6066 ;; This function is called by:
  6067 ;;		_setRF_Main
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _getRxData
  6073  175F                     _getRxData:	
  6074                           
  6075                           ;incstack = 0
  6076                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6077                           ;getRxData@rf stored from wreg
  6078  175F  0020               	movlb	0	; select bank0
  6079  1760  00E8               	movwf	getRxData@rf
  6080                           
  6081                           ;RF_Control_B1.c: 203: unsigned char i;
  6082                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  6083  1761  0868               	movf	getRxData@rf,w
  6084  1762  319F  276F  3197   	fcall	_RfPointSelect
  6085                           
  6086                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  6087  1765  0021               	movlb	1	; select bank1
  6088  1766  083D               	movf	_RF^(0+128),w
  6089  1767  0086               	movwf	6
  6090  1768  0187               	clrf	7
  6091  1769  1F01               	btfss	1,6
  6092  176A  2F76               	goto	l5991
  6093                           
  6094                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6095  176B  08A0               	movf	_RF_Data^(0+128),f
  6096  176C  1D03               	skipz
  6097  176D  0008               	return
  6098  176E  0821               	movf	(_RF_Data^(0+128)+1),w
  6099  176F  3A64               	xorlw	100
  6100  1770  1D03               	skipz
  6101  1771  0008               	return
  6102                           
  6103                           ;RF_Control_B1.c: 207: {
  6104                           ;RF_Control_B1.c: 208: setLog_Code(1);
  6105  1772  3001               	movlw	1
  6106  1773  3197  2717         	fcall	_setLog_Code
  6107                           
  6108                           ;RF_Control_B1.c: 209: }
  6109                           ;RF_Control_B1.c: 210: } else {
  6110  1775  0008               	return
  6111  1776                     l5991:	
  6112                           
  6113                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6114  1776  0021               	movlb	1	; select bank1
  6115  1777  08A0               	movf	_RF_Data^(0+128),f
  6116  1778  1D03               	skipz
  6117  1779  0008               	return
  6118  177A  0821               	movf	(_RF_Data^(0+128)+1),w
  6119  177B  3A02               	xorlw	2
  6120  177C  1D03               	skipz
  6121  177D  0008               	return
  6122                           
  6123                           ;RF_Control_B1.c: 212: {
  6124                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6125  177E  082C               	movf	(_RF_Data^(0+128)+12),w
  6126  177F  3AFF               	xorlw	255
  6127  1780  1D03               	skipz
  6128  1781  2F8C               	goto	l6003
  6129  1782  082D               	movf	(_RF_Data^(0+128)+13),w
  6130  1783  3AFF               	xorlw	255
  6131  1784  1D03               	skipz
  6132  1785  2F8C               	goto	l6003
  6133  1786  082E               	movf	(_RF_Data^(0+128)+14),w
  6134  1787  3AFF               	xorlw	255
  6135  1788  1D03               	skipz
  6136  1789  2F8C               	goto	l6003
  6137                           
  6138                           ;RF_Control_B1.c: 214: __nop();
  6139  178A  0000               	nop
  6140                           
  6141                           ;RF_Control_B1.c: 215: } else {
  6142  178B  0008               	return
  6143  178C                     l6003:	
  6144                           
  6145                           ;RF_Control_B1.c: 216: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6146  178C  087D               	movf	_product,w
  6147  178D  3E0C               	addlw	12
  6148  178E  0086               	movwf	6
  6149  178F  3001               	movlw	1	; select bank2/3
  6150  1790  0087               	movwf	7
  6151  1791  0021               	movlb	1	; select bank1
  6152  1792  082C               	movf	(_RF_Data^(0+128)+12),w
  6153  1793  0601               	xorwf	1,w
  6154  1794  1D03               	skipz
  6155  1795  0008               	return
  6156  1796  087D               	movf	_product,w
  6157  1797  3E0D               	addlw	13
  6158  1798  0086               	movwf	6
  6159  1799  3001               	movlw	1	; select bank2/3
  6160  179A  0087               	movwf	7
  6161  179B  082D               	movf	(_RF_Data^(0+128)+13),w
  6162  179C  0601               	xorwf	1,w
  6163  179D  1D03               	skipz
  6164  179E  0008               	return
  6165  179F  087D               	movf	_product,w
  6166  17A0  3E0E               	addlw	14
  6167  17A1  0086               	movwf	6
  6168  17A2  3001               	movlw	1	; select bank2/3
  6169  17A3  0087               	movwf	7
  6170  17A4  082E               	movf	(_RF_Data^(0+128)+14),w
  6171  17A5  0601               	xorwf	1,w
  6172  17A6  1D03               	skipz
  6173  17A7  0008               	return
  6174                           
  6175                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  6176  17A8  3001               	movlw	1
  6177  17A9  318E  26DA         	fcall	_setControl_Lights_Table
  6178                           
  6179                           ;RF_Control_B1.c: 224: {
  6180                           ;RF_Control_B1.c: 225: ;
  6181                           
  6182                           ;RF_Control_B1.c: 221: {
  6183                           ;RF_Control_B1.c: 222: ;
  6184                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6185                           
  6186                           ;RF_Control_B1.c: 218: }
  6187                           ;RF_Control_B1.c: 219: }
  6188                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6189  17AB  0008               	return
  6190  17AC                     __end_of_getRxData:	
  6191                           
  6192                           	psect	text21
  6193  1717                     __ptext21:	
  6194 ;; *************** function _setLog_Code *****************
  6195 ;; Defined at:
  6196 ;;		line 235 in file "../src/RF_Control_B1.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  rf              1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  rf              1    5[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        2 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    6
  6217 ;; This function calls:
  6218 ;;		_RfPointSelect
  6219 ;;		_setBuz
  6220 ;; This function is called by:
  6221 ;;		_getRxData
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           
  6226                           ;psect for function _setLog_Code
  6227  1717                     _setLog_Code:	
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6231                           ;setLog_Code@rf stored from wreg
  6232  1717  0020               	movlb	0	; select bank0
  6233  1718  00A5               	movwf	setLog_Code@rf
  6234                           
  6235                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  6236  1719  0825               	movf	setLog_Code@rf,w
  6237  171A  319F  276F  3197   	fcall	_RfPointSelect
  6238                           
  6239                           ;RF_Control_B1.c: 237: product->Data[12]=RF_Data[12];
  6240  171D  0021               	movlb	1	; select bank1
  6241  171E  082C               	movf	(_RF_Data^(0+128)+12),w
  6242  171F  0020               	movlb	0	; select bank0
  6243  1720  00A4               	movwf	??_setLog_Code
  6244  1721  087D               	movf	_product,w
  6245  1722  3E0C               	addlw	12
  6246  1723  0086               	movwf	6
  6247  1724  3001               	movlw	1	; select bank2/3
  6248  1725  0087               	movwf	7
  6249  1726  0824               	movf	??_setLog_Code,w
  6250  1727  0081               	movwf	1
  6251                           
  6252                           ;RF_Control_B1.c: 238: product->Data[13]=RF_Data[13];
  6253  1728  0021               	movlb	1	; select bank1
  6254  1729  082D               	movf	(_RF_Data^(0+128)+13),w
  6255  172A  0020               	movlb	0	; select bank0
  6256  172B  00A4               	movwf	??_setLog_Code
  6257  172C  087D               	movf	_product,w
  6258  172D  3E0D               	addlw	13
  6259  172E  0086               	movwf	6
  6260  172F  3001               	movlw	1	; select bank2/3
  6261  1730  0087               	movwf	7
  6262  1731  0824               	movf	??_setLog_Code,w
  6263  1732  0081               	movwf	1
  6264                           
  6265                           ;RF_Control_B1.c: 239: product->Data[14]=RF_Data[14];
  6266  1733  0021               	movlb	1	; select bank1
  6267  1734  082E               	movf	(_RF_Data^(0+128)+14),w
  6268  1735  0020               	movlb	0	; select bank0
  6269  1736  00A4               	movwf	??_setLog_Code
  6270  1737  087D               	movf	_product,w
  6271  1738  3E0E               	addlw	14
  6272  1739  0086               	movwf	6
  6273  173A  3001               	movlw	1	; select bank2/3
  6274  173B  0087               	movwf	7
  6275  173C  0824               	movf	??_setLog_Code,w
  6276  173D  0081               	movwf	1
  6277                           
  6278                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  6279  173E  3064               	movlw	100
  6280  173F  00A0               	movwf	setBuz@time
  6281  1740  3000               	movlw	0
  6282  1741  00A1               	movwf	setBuz@time+1
  6283  1742  3001               	movlw	1
  6284  1743  3189  2141  3197   	fcall	_setBuz
  6285                           
  6286                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  6287  1746  0021               	movlb	1	; select bank1
  6288  1747  083D               	movf	_RF^(0+128),w
  6289  1748  0086               	movwf	6
  6290  1749  0187               	clrf	7
  6291  174A  1301               	bcf	1,6
  6292                           
  6293                           ;RF_Control_B1.c: 242: if (myMain->First) {
  6294  174B  0869               	movf	_myMain^(0+128),w
  6295  174C  3E03               	addlw	3
  6296  174D  0086               	movwf	6
  6297  174E  3001               	movlw	1	; select bank2/3
  6298  174F  0087               	movwf	7
  6299  1750  1C81               	btfss	1,1
  6300  1751  2F58               	goto	l2006
  6301                           
  6302                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  6303  1752  0866               	movf	_Memory^(0+128),w
  6304  1753  3E22               	addlw	34
  6305  1754  0086               	movwf	6
  6306  1755  3002               	movlw	2	; select bank4/5
  6307  1756  0087               	movwf	7
  6308  1757  1501               	bsf	1,2
  6309  1758                     l2006:	
  6310                           
  6311                           ;RF_Control_B1.c: 244: }
  6312                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  6313  1758  0866               	movf	_Memory^(0+128),w
  6314  1759  3E22               	addlw	34
  6315  175A  0086               	movwf	6
  6316  175B  3002               	movlw	2	; select bank4/5
  6317  175C  0087               	movwf	7
  6318  175D  1401               	bsf	1,0
  6319  175E  0008               	return
  6320  175F                     __end_of_setLog_Code:	
  6321                           
  6322                           	psect	text22
  6323  0EDA                     __ptext22:	
  6324 ;; *************** function _setControl_Lights_Table *****************
  6325 ;; Defined at:
  6326 ;;		line 249 in file "../src/RF_Control_B1.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  rf              1    wreg     unsigned char 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  rf              1   71[BANK0 ] unsigned char 
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6344 ;;Total ram usage:        1 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:   11
  6347 ;; This function calls:
  6348 ;;		_RfPointSelect
  6349 ;;		_setBuz
  6350 ;;		_setDimmerLights
  6351 ;;		_setRFSW_AdjControl
  6352 ;;		_setRFSW_Control
  6353 ;;		_setRFSW_Status
  6354 ;;		_setSw_Status
  6355 ;;		_setTxData
  6356 ;; This function is called by:
  6357 ;;		_getRxData
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _setControl_Lights_Table
  6363  0EDA                     _setControl_Lights_Table:	
  6364                           
  6365                           ;incstack = 0
  6366                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6367                           ;setControl_Lights_Table@rf stored from wreg
  6368  0EDA  0020               	movlb	0	; select bank0
  6369  0EDB  00E7               	movwf	setControl_Lights_Table@rf
  6370                           
  6371                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  6372  0EDC  0867               	movf	setControl_Lights_Table@rf,w
  6373  0EDD  319F  276F  318E   	fcall	_RfPointSelect
  6374                           
  6375                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  6376  0EE0  0021               	movlb	1	; select bank1
  6377  0EE1  08AF               	movf	(_RF_Data^(0+128)+15),f
  6378  0EE2  1D03               	skipz
  6379  0EE3  2F2D               	goto	l5755
  6380                           
  6381                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  6382  0EE4  0020               	movlb	0	; select bank0
  6383  0EE5  01A4               	clrf	setDimmerLights@status
  6384  0EE6  3001               	movlw	1
  6385  0EE7  318E  2649  318E   	fcall	_setDimmerLights
  6386                           
  6387                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  6388  0EEA  0020               	movlb	0	; select bank0
  6389  0EEB  01A2               	clrf	setRFSW_Status@command
  6390  0EEC  3001               	movlw	1
  6391  0EED  319F  27D3  318E   	fcall	_setRFSW_Status
  6392                           
  6393                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  6394  0EF0  0020               	movlb	0	; select bank0
  6395  0EF1  01A2               	clrf	setSw_Status@command
  6396  0EF2  3001               	movlw	1
  6397  0EF3  319F  27E2  318E   	fcall	_setSw_Status
  6398                           
  6399                           ;RF_Control_B1.c: 258: setDimmerLights(2, 0);
  6400  0EF6  0020               	movlb	0	; select bank0
  6401  0EF7  01A4               	clrf	setDimmerLights@status
  6402  0EF8  3002               	movlw	2
  6403  0EF9  318E  2649  318E   	fcall	_setDimmerLights
  6404                           
  6405                           ;RF_Control_B1.c: 259: setRFSW_Status(2, 0);
  6406  0EFC  0020               	movlb	0	; select bank0
  6407  0EFD  01A2               	clrf	setRFSW_Status@command
  6408  0EFE  3002               	movlw	2
  6409  0EFF  319F  27D3  318E   	fcall	_setRFSW_Status
  6410                           
  6411                           ;RF_Control_B1.c: 260: setSw_Status(2, 0);
  6412  0F02  0020               	movlb	0	; select bank0
  6413  0F03  01A2               	clrf	setSw_Status@command
  6414  0F04  3002               	movlw	2
  6415  0F05  319F  27E2  318E   	fcall	_setSw_Status
  6416                           
  6417                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6418  0F08  087D               	movf	_product,w
  6419  0F09  3E09               	addlw	9
  6420  0F0A  0086               	movwf	6
  6421  0F0B  3001               	movlw	1	; select bank2/3
  6422  0F0C  0087               	movwf	7
  6423  0F0D  0181               	clrf	1
  6424                           
  6425                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6426  0F0E  087D               	movf	_product,w
  6427  0F0F  3E0B               	addlw	11
  6428  0F10  0086               	movwf	6
  6429  0F11  3001               	movlw	1	; select bank2/3
  6430  0F12  0087               	movwf	7
  6431  0F13  0181               	clrf	1
  6432                           
  6433                           ;RF_Control_B1.c: 270: product->Data[15]=0;
  6434  0F14  087D               	movf	_product,w
  6435  0F15  3E0F               	addlw	15
  6436  0F16  0086               	movwf	6
  6437  0F17  3001               	movlw	1	; select bank2/3
  6438  0F18  0087               	movwf	7
  6439  0F19  0181               	clrf	1
  6440                           
  6441                           ;RF_Control_B1.c: 271: product->Data[17]=0;
  6442  0F1A  087D               	movf	_product,w
  6443  0F1B  3E11               	addlw	17
  6444  0F1C  0086               	movwf	6
  6445  0F1D  3001               	movlw	1	; select bank2/3
  6446  0F1E  0087               	movwf	7
  6447  0F1F  0181               	clrf	1
  6448                           
  6449                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  6450  0F20  3064               	movlw	100
  6451  0F21  0020               	movlb	0	; select bank0
  6452  0F22  00A0               	movwf	setBuz@time
  6453  0F23  3000               	movlw	0
  6454  0F24  00A1               	movwf	setBuz@time+1
  6455  0F25  3001               	movlw	1
  6456  0F26  3189  2141  318E   	fcall	_setBuz
  6457                           
  6458                           ;RF_Control_B1.c: 273: setTxData(1);
  6459  0F29  3001               	movlw	1
  6460  0F2A  3186  2656         	fcall	_setTxData
  6461                           
  6462                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  6463  0F2C  0008               	return
  6464  0F2D                     l5755:	
  6465  0F2D  0021               	movlb	1	; select bank1
  6466  0F2E  082F               	movf	(_RF_Data^(0+128)+15),w
  6467  0F2F  3A20               	xorlw	32
  6468  0F30  1D03               	skipz
  6469  0F31  2F48               	goto	l5761
  6470                           
  6471                           ;RF_Control_B1.c: 275: product->Data[9]=0;
  6472  0F32  087D               	movf	_product,w
  6473  0F33  3E09               	addlw	9
  6474  0F34  0086               	movwf	6
  6475  0F35  3001               	movlw	1	; select bank2/3
  6476  0F36  0087               	movwf	7
  6477  0F37  0181               	clrf	1
  6478                           
  6479                           ;RF_Control_B1.c: 276: product->Data[11]=0;
  6480  0F38  087D               	movf	_product,w
  6481  0F39  3E0B               	addlw	11
  6482  0F3A  0086               	movwf	6
  6483  0F3B  3001               	movlw	1	; select bank2/3
  6484  0F3C  0087               	movwf	7
  6485  0F3D  0181               	clrf	1
  6486                           
  6487                           ;RF_Control_B1.c: 277: product->Data[17]=0;
  6488  0F3E  087D               	movf	_product,w
  6489  0F3F  3E11               	addlw	17
  6490  0F40  0086               	movwf	6
  6491  0F41  3001               	movlw	1	; select bank2/3
  6492  0F42  0087               	movwf	7
  6493  0F43  0181               	clrf	1
  6494                           
  6495                           ;RF_Control_B1.c: 278: setTxData(1);
  6496  0F44  3001               	movlw	1
  6497  0F45  3186  2656         	fcall	_setTxData
  6498                           
  6499                           ;RF_Control_B1.c: 279: }
  6500  0F47  0008               	return
  6501  0F48                     l5761:	
  6502                           
  6503                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  6504  0F48  0021               	movlb	1	; select bank1
  6505  0F49  082F               	movf	(_RF_Data^(0+128)+15),w
  6506  0F4A  3A01               	xorlw	1
  6507  0F4B  1D03               	skipz
  6508  0F4C  2F51               	goto	l5765
  6509                           
  6510                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  6511  0F4D  3001               	movlw	1
  6512  0F4E  318D  25B9         	fcall	_setRFSW_Control
  6513                           
  6514                           ;RF_Control_B1.c: 283: }
  6515  0F50  0008               	return
  6516  0F51                     l5765:	
  6517                           
  6518                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  6519  0F51  0021               	movlb	1	; select bank1
  6520  0F52  082F               	movf	(_RF_Data^(0+128)+15),w
  6521  0F53  3A11               	xorlw	17
  6522  0F54  1D03               	skipz
  6523  0F55  2F5A               	goto	l5769
  6524                           
  6525                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  6526  0F56  3001               	movlw	1
  6527  0F57  3195  25C3         	fcall	_setRFSW_AdjControl
  6528                           
  6529                           ;RF_Control_B1.c: 287: }
  6530  0F59  0008               	return
  6531  0F5A                     l5769:	
  6532                           
  6533                           ;RF_Control_B1.c: 292: else if (RF_Data[15] == 0x02) {
  6534  0F5A  0021               	movlb	1	; select bank1
  6535  0F5B  082F               	movf	(_RF_Data^(0+128)+15),w
  6536  0F5C  3A02               	xorlw	2
  6537  0F5D  1D03               	skipz
  6538  0F5E  2F63               	goto	l5773
  6539                           
  6540                           ;RF_Control_B1.c: 293: setRFSW_Control(2);
  6541  0F5F  3002               	movlw	2
  6542  0F60  318D  25B9         	fcall	_setRFSW_Control
  6543                           
  6544                           ;RF_Control_B1.c: 294: }
  6545  0F62  0008               	return
  6546  0F63                     l5773:	
  6547                           
  6548                           ;RF_Control_B1.c: 296: else if (RF_Data[15] == 0x21) {
  6549  0F63  0021               	movlb	1	; select bank1
  6550  0F64  082F               	movf	(_RF_Data^(0+128)+15),w
  6551  0F65  3A21               	xorlw	33
  6552  0F66  1D03               	skipz
  6553  0F67  0008               	return
  6554                           
  6555                           ;RF_Control_B1.c: 297: setRFSW_AdjControl(2);
  6556  0F68  3002               	movlw	2
  6557  0F69  3195  25C3         	fcall	_setRFSW_AdjControl
  6558  0F6B  0008               	return
  6559  0F6C                     __end_of_setControl_Lights_Table:	
  6560                           
  6561                           	psect	text23
  6562  0DB9                     __ptext23:	
  6563 ;; *************** function _setRFSW_Control *****************
  6564 ;; Defined at:
  6565 ;;		line 334 in file "../src/RF_Control_B1.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  sw              1    wreg     unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  sw              1   67[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;Total ram usage:        2 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    9
  6586 ;; This function calls:
  6587 ;;		_RfSWPointSelect
  6588 ;;		_setBuz
  6589 ;;		_setDelayOff_GO
  6590 ;;		_setDimmerLights_Switch
  6591 ;;		_setDimmerLights_Trigger
  6592 ;;		_setRF_DimmerLights
  6593 ;;		_setSw_Status
  6594 ;;		_setTxData
  6595 ;; This function is called by:
  6596 ;;		_setControl_Lights_Table
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           
  6601                           ;psect for function _setRFSW_Control
  6602  0DB9                     _setRFSW_Control:	
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6606                           ;setRFSW_Control@sw stored from wreg
  6607  0DB9  0020               	movlb	0	; select bank0
  6608  0DBA  00E3               	movwf	setRFSW_Control@sw
  6609                           
  6610                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  6611  0DBB  0863               	movf	setRFSW_Control@sw,w
  6612  0DBC  3191  215D  318D   	fcall	_RfSWPointSelect
  6613                           
  6614                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  6615  0DBF  0021               	movlb	1	; select bank1
  6616  0DC0  083E               	movf	_RFSW^(0+128),w
  6617  0DC1  0086               	movwf	6
  6618  0DC2  0187               	clrf	7
  6619  0DC3  1801               	btfsc	1,0
  6620  0DC4  2DFA               	goto	l5643
  6621                           
  6622                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  6623  0DC5  0830               	movf	(_RF_Data^(0+128)+16),w
  6624  0DC6  3A80               	xorlw	128
  6625  0DC7  1D03               	skipz
  6626  0DC8  2DD6               	goto	l5633
  6627                           
  6628                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  6629  0DC9  0020               	movlb	0	; select bank0
  6630  0DCA  01A3               	clrf	setDelayOff_GO@command
  6631  0DCB  0AA3               	incf	setDelayOff_GO@command,f
  6632  0DCC  0021               	movlb	1	; select bank1
  6633  0DCD  0831               	movf	(_RF_Data^(0+128)+17),w
  6634  0DCE  0020               	movlb	0	; select bank0
  6635  0DCF  00E2               	movwf	??_setRFSW_Control
  6636  0DD0  0862               	movf	??_setRFSW_Control,w
  6637  0DD1  00A4               	movwf	setDelayOff_GO@value
  6638  0DD2  0863               	movf	setRFSW_Control@sw,w
  6639  0DD3  3188  2086  318D   	fcall	_setDelayOff_GO
  6640  0DD6                     l5633:	
  6641                           
  6642                           ;RF_Control_B1.c: 339: }
  6643                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  6644  0DD6  0021               	movlb	1	; select bank1
  6645  0DD7  083E               	movf	_RFSW^(0+128),w
  6646  0DD8  0086               	movwf	6
  6647  0DD9  0187               	clrf	7
  6648  0DDA  1401               	bsf	1,0
  6649                           
  6650                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  6651  0DDB  0020               	movlb	0	; select bank0
  6652  0DDC  01A2               	clrf	setSw_Status@command
  6653  0DDD  0AA2               	incf	setSw_Status@command,f
  6654  0DDE  0863               	movf	setRFSW_Control@sw,w
  6655  0DDF  319F  27E2  318D   	fcall	_setSw_Status
  6656                           
  6657                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  6658  0DE2  0020               	movlb	0	; select bank0
  6659  0DE3  01A2               	clrf	setDimmerLights_Trigger@command
  6660  0DE4  0AA2               	incf	setDimmerLights_Trigger@command,f
  6661  0DE5  0863               	movf	setRFSW_Control@sw,w
  6662  0DE6  3190  20A9  318D   	fcall	_setDimmerLights_Trigger
  6663                           
  6664                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  6665  0DE9  0020               	movlb	0	; select bank0
  6666  0DEA  01A2               	clrf	setDimmerLights_Switch@command
  6667  0DEB  0AA2               	incf	setDimmerLights_Switch@command,f
  6668  0DEC  0863               	movf	setRFSW_Control@sw,w
  6669  0DED  3190  2099  318D   	fcall	_setDimmerLights_Switch
  6670                           
  6671                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  6672  0DF0  0021               	movlb	1	; select bank1
  6673  0DF1  083E               	movf	_RFSW^(0+128),w
  6674  0DF2  0086               	movwf	6
  6675  0DF3  0187               	clrf	7
  6676  0DF4  3000               	movlw	0
  6677  0DF5  1801               	btfsc	1,0
  6678  0DF6  3001               	movlw	1
  6679  0DF7  0020               	movlb	0	; select bank0
  6680  0DF8  00DD               	movwf	setRF_DimmerLights@on
  6681  0DF9  2E38               	goto	L4
  6682  0DFA                     l5643:	
  6683                           ;RF_Control_B1.c: 347: } else {
  6684                           
  6685                           
  6686                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  6687  0DFA  0021               	movlb	1	; select bank1
  6688  0DFB  0830               	movf	(_RF_Data^(0+128)+16),w
  6689  0DFC  3A80               	xorlw	128
  6690  0DFD  1D03               	skipz
  6691  0DFE  2E10               	goto	l5649
  6692                           
  6693                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  6694  0DFF  0020               	movlb	0	; select bank0
  6695  0E00  01A3               	clrf	setDelayOff_GO@command
  6696  0E01  0AA3               	incf	setDelayOff_GO@command,f
  6697  0E02  0021               	movlb	1	; select bank1
  6698  0E03  0831               	movf	(_RF_Data^(0+128)+17),w
  6699  0E04  0020               	movlb	0	; select bank0
  6700  0E05  00E2               	movwf	??_setRFSW_Control
  6701  0E06  0862               	movf	??_setRFSW_Control,w
  6702  0E07  00A4               	movwf	setDelayOff_GO@value
  6703  0E08  0863               	movf	setRFSW_Control@sw,w
  6704  0E09  3188  2086  318D   	fcall	_setDelayOff_GO
  6705                           
  6706                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  6707  0E0C  0020               	movlb	0	; select bank0
  6708  0E0D  01DD               	clrf	setRF_DimmerLights@on
  6709  0E0E  0ADD               	incf	setRF_DimmerLights@on,f
  6710  0E0F  2E38               	goto	L4
  6711  0E10                     l5649:	
  6712                           ;RF_Control_B1.c: 351: } else {
  6713                           
  6714                           
  6715                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  6716  0E10  0021               	movlb	1	; select bank1
  6717  0E11  083E               	movf	_RFSW^(0+128),w
  6718  0E12  0086               	movwf	6
  6719  0E13  0187               	clrf	7
  6720  0E14  1001               	bcf	1,0
  6721                           
  6722                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  6723  0E15  0020               	movlb	0	; select bank0
  6724  0E16  01A2               	clrf	setSw_Status@command
  6725  0E17  0863               	movf	setRFSW_Control@sw,w
  6726  0E18  319F  27E2  318D   	fcall	_setSw_Status
  6727                           
  6728                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  6729  0E1B  0020               	movlb	0	; select bank0
  6730  0E1C  01A2               	clrf	setDimmerLights_Trigger@command
  6731  0E1D  0AA2               	incf	setDimmerLights_Trigger@command,f
  6732  0E1E  0863               	movf	setRFSW_Control@sw,w
  6733  0E1F  3190  20A9  318D   	fcall	_setDimmerLights_Trigger
  6734                           
  6735                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  6736  0E22  0021               	movlb	1	; select bank1
  6737  0E23  083E               	movf	_RFSW^(0+128),w
  6738  0E24  0086               	movwf	6
  6739  0E25  0187               	clrf	7
  6740  0E26  3000               	movlw	0
  6741  0E27  1801               	btfsc	1,0
  6742  0E28  3001               	movlw	1
  6743  0E29  0020               	movlb	0	; select bank0
  6744  0E2A  00A2               	movwf	setDimmerLights_Switch@command
  6745  0E2B  0863               	movf	setRFSW_Control@sw,w
  6746  0E2C  3190  2099  318D   	fcall	_setDimmerLights_Switch
  6747                           
  6748                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  6749  0E2F  0020               	movlb	0	; select bank0
  6750  0E30  01A3               	clrf	setDelayOff_GO@command
  6751  0E31  01A4               	clrf	setDelayOff_GO@value
  6752  0E32  0863               	movf	setRFSW_Control@sw,w
  6753  0E33  3188  2086  318D   	fcall	_setDelayOff_GO
  6754                           
  6755                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  6756  0E36  0020               	movlb	0	; select bank0
  6757  0E37  01DD               	clrf	setRF_DimmerLights@on
  6758  0E38                     L4:	
  6759  0E38  0863               	movf	setRFSW_Control@sw,w
  6760  0E39  318A  2208  318D   	fcall	_setRF_DimmerLights
  6761                           
  6762                           ;RF_Control_B1.c: 360: }
  6763                           ;RF_Control_B1.c: 361: }
  6764                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  6765  0E3C  3064               	movlw	100
  6766  0E3D  0020               	movlb	0	; select bank0
  6767  0E3E  00A0               	movwf	setBuz@time
  6768  0E3F  3000               	movlw	0
  6769  0E40  00A1               	movwf	setBuz@time+1
  6770  0E41  3001               	movlw	1
  6771  0E42  3189  2141  318D   	fcall	_setBuz
  6772                           
  6773                           ;RF_Control_B1.c: 363: setTxData(1);
  6774  0E45  3001               	movlw	1
  6775  0E46  3186  2656         	fcall	_setTxData
  6776  0E48  0008               	return
  6777  0E49                     __end_of_setRFSW_Control:	
  6778                           
  6779                           	psect	text24
  6780  0886                     __ptext24:	
  6781 ;; *************** function _setDelayOff_GO *****************
  6782 ;; Defined at:
  6783 ;;		line 85 in file "../src/DelayOff_B1.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  sw              1    wreg     unsigned char 
  6786 ;;  command         1    3[BANK0 ] unsigned char 
  6787 ;;  value           1    4[BANK0 ] unsigned char 
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  sw              1    7[BANK0 ] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6799 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6802 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;Total ram usage:        5 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    6
  6806 ;; This function calls:
  6807 ;;		_DelayOffPointSelect
  6808 ;;		_DelayTimejudge
  6809 ;; This function is called by:
  6810 ;;		_setRFSW_Control
  6811 ;;		_Sw_DimmerOffFunc
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _setDelayOff_GO
  6817  0886                     _setDelayOff_GO:	
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _setDelayOff_GO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6821                           ;setDelayOff_GO@sw stored from wreg
  6822  0886  0020               	movlb	0	; select bank0
  6823  0887  00A7               	movwf	setDelayOff_GO@sw
  6824                           
  6825                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
  6826  0888  0827               	movf	setDelayOff_GO@sw,w
  6827  0889  3191  2173  3188   	fcall	_DelayOffPointSelect
  6828                           
  6829                           ;DelayOff_B1.c: 87: if (DelayOff->Enable) {
  6830  088C  0021               	movlb	1	; select bank1
  6831  088D  0838               	movf	_DelayOff^(0+128),w
  6832  088E  0086               	movwf	6
  6833  088F  0187               	clrf	7
  6834  0890  1C01               	btfss	1,0
  6835  0891  0008               	return
  6836                           
  6837                           ;DelayOff_B1.c: 88: DelayOff->GO = command;
  6838  0892  0838               	movf	_DelayOff^(0+128),w
  6839  0893  0086               	movwf	6
  6840  0894  0187               	clrf	7
  6841  0895  0020               	movlb	0	; select bank0
  6842  0896  0823               	movf	setDelayOff_GO@command,w
  6843  0897  1081               	bcf	1,1
  6844  0898  1D03               	skipz
  6845  0899  1481               	bsf	1,1
  6846                           
  6847                           ;DelayOff_B1.c: 89: if (command == 1) {
  6848  089A  0823               	movf	setDelayOff_GO@command,w
  6849  089B  3A01               	xorlw	1
  6850  089C  1D03               	skipz
  6851  089D  28C9               	goto	l5491
  6852                           
  6853                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
  6854  089E  0824               	movf	setDelayOff_GO@value,w
  6855  089F  3193  23F6  3188   	fcall	_DelayTimejudge
  6856  08A2  0020               	movlb	0	; select bank0
  6857  08A3  00A5               	movwf	??_setDelayOff_GO
  6858  08A4  0021               	movlb	1	; select bank1
  6859  08A5  0A38               	incf	_DelayOff^(0+128),w
  6860  08A6  0086               	movwf	6
  6861  08A7  0187               	clrf	7
  6862  08A8  0020               	movlb	0	; select bank0
  6863  08A9  0825               	movf	??_setDelayOff_GO,w
  6864  08AA  0081               	movwf	1
  6865                           
  6866                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || !(value % 16)) && value <= 0x25) {
  6867  08AB  300F               	movlw	15
  6868  08AC  0524               	andwf	setDelayOff_GO@value,w
  6869  08AD  00A5               	movwf	??_setDelayOff_GO
  6870  08AE  0825               	movf	??_setDelayOff_GO,w
  6871  08AF  3A05               	xorlw	5
  6872  08B0  1903               	skipnz
  6873  08B1  28B6               	goto	l5485
  6874  08B2  0824               	movf	setDelayOff_GO@value,w
  6875  08B3  390F               	andlw	15
  6876  08B4  1D03               	btfss	3,2
  6877  08B5  28BC               	goto	l5489
  6878  08B6                     l5485:	
  6879  08B6  3026               	movlw	38
  6880  08B7  0224               	subwf	setDelayOff_GO@value,w
  6881  08B8  1803               	skipnc
  6882  08B9  28BC               	goto	l5489
  6883                           
  6884                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
  6885  08BA  0824               	movf	setDelayOff_GO@value,w
  6886  08BB  28BD               	goto	L5
  6887  08BC                     l5489:	
  6888                           ;DelayOff_B1.c: 93: } else {
  6889                           
  6890                           
  6891                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
  6892  08BC  3005               	movlw	5
  6893  08BD                     L5:	
  6894  08BD  00A5               	movwf	??_setDelayOff_GO
  6895  08BE  0827               	movf	setDelayOff_GO@sw,w
  6896  08BF  3E1A               	addlw	26
  6897  08C0  077D               	addwf	_product,w
  6898  08C1  00A6               	movwf	??_setDelayOff_GO+1
  6899  08C2  0826               	movf	??_setDelayOff_GO+1,w
  6900  08C3  0086               	movwf	6
  6901  08C4  3001               	movlw	1	; select bank2/3
  6902  08C5  0087               	movwf	7
  6903  08C6  0825               	movf	??_setDelayOff_GO,w
  6904  08C7  0081               	movwf	1
  6905                           
  6906                           ;DelayOff_B1.c: 95: }
  6907                           ;DelayOff_B1.c: 96: } else if (command == 0) {
  6908  08C8  28D5               	goto	l5495
  6909  08C9                     l5491:	
  6910  08C9  08A3               	movf	setDelayOff_GO@command,f
  6911  08CA  1D03               	skipz
  6912  08CB  28D5               	goto	l5495
  6913                           
  6914                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
  6915  08CC  0827               	movf	setDelayOff_GO@sw,w
  6916  08CD  3E1A               	addlw	26
  6917  08CE  077D               	addwf	_product,w
  6918  08CF  00A5               	movwf	??_setDelayOff_GO
  6919  08D0  0825               	movf	??_setDelayOff_GO,w
  6920  08D1  0086               	movwf	6
  6921  08D2  3001               	movlw	1	; select bank2/3
  6922  08D3  0087               	movwf	7
  6923  08D4  0181               	clrf	1
  6924  08D5                     l5495:	
  6925                           
  6926                           ;DelayOff_B1.c: 98: }
  6927                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
  6928  08D5  0021               	movlb	1	; select bank1
  6929  08D6  0838               	movf	_DelayOff^(0+128),w
  6930  08D7  3E02               	addlw	2
  6931  08D8  0086               	movwf	6
  6932  08D9  0187               	clrf	7
  6933  08DA  3000               	movlw	0
  6934  08DB  3FC0               	movwi [0]fsr1
  6935  08DC  3FC1               	movwi [1]fsr1
  6936                           
  6937                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
  6938  08DD  0838               	movf	_DelayOff^(0+128),w
  6939  08DE  3E04               	addlw	4
  6940  08DF  0086               	movwf	6
  6941  08E0  0187               	clrf	7
  6942  08E1  0181               	clrf	1
  6943  08E2  0008               	return
  6944  08E3                     __end_of_setDelayOff_GO:	
  6945                           
  6946                           	psect	text25
  6947  13F6                     __ptext25:	
  6948 ;; *************** function _DelayTimejudge *****************
  6949 ;; Defined at:
  6950 ;;		line 105 in file "../src/DelayOff_B1.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  value           1    wreg     unsigned char 
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  value           1    1[BANK0 ] unsigned char 
  6955 ;;  i               1    2[BANK0 ] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      unsigned char 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;Total ram usage:        3 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		Nothing
  6974 ;; This function is called by:
  6975 ;;		_setDelayOff_GO
  6976 ;; This function uses a non-reentrant model
  6977 ;;
  6978                           
  6979                           
  6980                           ;psect for function _DelayTimejudge
  6981  13F6                     _DelayTimejudge:	
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _DelayTimejudge: [wreg-fsr0h+status,2+status,0]
  6985                           ;DelayTimejudge@value stored from wreg
  6986  13F6  0020               	movlb	0	; select bank0
  6987  13F7  00A1               	movwf	DelayTimejudge@value
  6988                           
  6989                           ;DelayOff_B1.c: 106: char i = 5;
  6990  13F8  3005               	movlw	5
  6991  13F9  00A0               	movwf	??_DelayTimejudge
  6992  13FA  0820               	movf	??_DelayTimejudge,w
  6993  13FB  00A2               	movwf	DelayTimejudge@i
  6994                           
  6995                           ;DelayOff_B1.c: 107: switch (value) {
  6996  13FC  2C0C               	goto	l5365
  6997  13FD                     l5351:	
  6998                           ;DelayOff_B1.c: 108: case 0x05:
  6999                           
  7000                           
  7001                           ;DelayOff_B1.c: 109: i = 5;
  7002  13FD  3005               	movlw	5
  7003  13FE  2C08               	goto	L10
  7004  13FF                     l5353:	
  7005                           ;DelayOff_B1.c: 111: case 0x10:
  7006                           
  7007                           ;DelayOff_B1.c: 110: break;
  7008                           
  7009                           
  7010                           ;DelayOff_B1.c: 112: i = 10;
  7011  13FF  300A               	movlw	10
  7012  1400  2C08               	goto	L10
  7013  1401                     l5355:	
  7014                           ;DelayOff_B1.c: 114: case 0x15:
  7015                           
  7016                           ;DelayOff_B1.c: 113: break;
  7017                           
  7018                           
  7019                           ;DelayOff_B1.c: 115: i = 15;
  7020  1401  300F               	movlw	15
  7021  1402  2C08               	goto	L10
  7022  1403                     l5357:	
  7023                           ;DelayOff_B1.c: 117: case 0x20:
  7024                           
  7025                           ;DelayOff_B1.c: 116: break;
  7026                           
  7027                           
  7028                           ;DelayOff_B1.c: 118: i = 20;
  7029  1403  3014               	movlw	20
  7030  1404  2C08               	goto	L10
  7031  1405                     l5359:	
  7032                           ;DelayOff_B1.c: 120: case 0x25:
  7033                           
  7034                           ;DelayOff_B1.c: 119: break;
  7035                           
  7036                           
  7037                           ;DelayOff_B1.c: 121: i = 25;
  7038  1405  3019               	movlw	25
  7039  1406  2C08               	goto	L10
  7040  1407                     l5361:	
  7041                           ;DelayOff_B1.c: 123: case 0x30:
  7042                           
  7043                           ;DelayOff_B1.c: 122: break;
  7044                           
  7045                           
  7046                           ;DelayOff_B1.c: 124: i = 30;
  7047  1407  301E               	movlw	30
  7048  1408                     L10:	
  7049  1408  00A0               	movwf	??_DelayTimejudge
  7050  1409  0820               	movf	??_DelayTimejudge,w
  7051  140A  00A2               	movwf	DelayTimejudge@i
  7052                           
  7053                           ;DelayOff_B1.c: 126: }
  7054                           
  7055                           ;DelayOff_B1.c: 125: break;
  7056  140B  2C20               	goto	l5367
  7057  140C                     l5365:	
  7058  140C  0821               	movf	DelayTimejudge@value,w
  7059                           
  7060                           ; Switch size 1, requested type "space"
  7061                           ; Number of cases is 6, Range of values is 5 to 48
  7062                           ; switch strategies available:
  7063                           ; Name         Instructions Cycles
  7064                           ; simple_byte           19    10 (average)
  7065                           ; direct_byte           97     9 (fixed)
  7066                           ; jumptable            263     9 (fixed)
  7067                           ;	Chosen strategy is simple_byte
  7068  140D  3A05               	xorlw	5	; case 5
  7069  140E  1903               	skipnz
  7070  140F  2BFD               	goto	l5351
  7071  1410  3A15               	xorlw	21	; case 16
  7072  1411  1903               	skipnz
  7073  1412  2BFF               	goto	l5353
  7074  1413  3A05               	xorlw	5	; case 21
  7075  1414  1903               	skipnz
  7076  1415  2C01               	goto	l5355
  7077  1416  3A35               	xorlw	53	; case 32
  7078  1417  1903               	skipnz
  7079  1418  2C03               	goto	l5357
  7080  1419  3A05               	xorlw	5	; case 37
  7081  141A  1903               	skipnz
  7082  141B  2C05               	goto	l5359
  7083  141C  3A15               	xorlw	21	; case 48
  7084  141D  1903               	skipnz
  7085  141E  2C07               	goto	l5361
  7086  141F  2C20               	goto	l5367
  7087  1420                     l5367:	
  7088                           
  7089                           ;DelayOff_B1.c: 127: return i;
  7090  1420  0822               	movf	DelayTimejudge@i,w
  7091  1421  0008               	return
  7092  1422                     __end_of_DelayTimejudge:	
  7093                           
  7094                           	psect	text26
  7095  15C3                     __ptext26:	
  7096 ;; *************** function _setRFSW_AdjControl *****************
  7097 ;; Defined at:
  7098 ;;		line 367 in file "../src/RF_Control_B1.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;  sw              1    wreg     unsigned char 
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;  sw              1   70[BANK0 ] unsigned char 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;		None               void
  7105 ;; Registers used:
  7106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;Total ram usage:        3 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:   10
  7119 ;; This function calls:
  7120 ;;		_RfSWPointSelect
  7121 ;;		_setRF_DimmerValue
  7122 ;;		_setTxData
  7123 ;; This function is called by:
  7124 ;;		_setControl_Lights_Table
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function _setRFSW_AdjControl
  7130  15C3                     _setRFSW_AdjControl:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7134                           ;setRFSW_AdjControl@sw stored from wreg
  7135  15C3  0020               	movlb	0	; select bank0
  7136  15C4  00E6               	movwf	setRFSW_AdjControl@sw
  7137                           
  7138                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  7139  15C5  0866               	movf	setRFSW_AdjControl@sw,w
  7140  15C6  3191  215D  3195   	fcall	_RfSWPointSelect
  7141                           
  7142                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  7143  15C9  0021               	movlb	1	; select bank1
  7144  15CA  083E               	movf	_RFSW^(0+128),w
  7145  15CB  0086               	movwf	6
  7146  15CC  0187               	clrf	7
  7147  15CD  1C01               	btfss	1,0
  7148  15CE  2DDB               	goto	l5673
  7149                           
  7150                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  7151  15CF  0866               	movf	_Memory^(0+128),w
  7152  15D0  3E22               	addlw	34
  7153  15D1  0086               	movwf	6
  7154  15D2  3002               	movlw	2	; select bank4/5
  7155  15D3  0087               	movwf	7
  7156  15D4  1401               	bsf	1,0
  7157                           
  7158                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  7159  15D5  0020               	movlb	0	; select bank0
  7160  15D6  0866               	movf	setRFSW_AdjControl@sw,w
  7161  15D7  3195  2511  3195   	fcall	_setRF_DimmerValue
  7162                           
  7163                           ;RF_Control_B1.c: 372: } else {
  7164  15DA  2DED               	goto	l2038
  7165  15DB                     l5673:	
  7166                           
  7167                           ;RF_Control_B1.c: 373: product->Data[9]=product->Data[20 + sw];
  7168  15DB  0020               	movlb	0	; select bank0
  7169  15DC  0866               	movf	setRFSW_AdjControl@sw,w
  7170  15DD  3E14               	addlw	20
  7171  15DE  077D               	addwf	_product,w
  7172  15DF  00E4               	movwf	??_setRFSW_AdjControl
  7173  15E0  0864               	movf	??_setRFSW_AdjControl,w
  7174  15E1  0086               	movwf	6
  7175  15E2  3001               	movlw	1	; select bank2/3
  7176  15E3  0087               	movwf	7
  7177  15E4  0801               	movf	1,w
  7178  15E5  00E5               	movwf	??_setRFSW_AdjControl+1
  7179  15E6  087D               	movf	_product,w
  7180  15E7  3E09               	addlw	9
  7181  15E8  0086               	movwf	6
  7182  15E9  3001               	movlw	1	; select bank2/3
  7183  15EA  0087               	movwf	7
  7184  15EB  0865               	movf	??_setRFSW_AdjControl+1,w
  7185  15EC  0081               	movwf	1
  7186  15ED                     l2038:	
  7187                           
  7188                           ;RF_Control_B1.c: 374: }
  7189                           ;RF_Control_B1.c: 375: product->Data[17]=product->Data[26 + sw];
  7190  15ED  0020               	movlb	0	; select bank0
  7191  15EE  0866               	movf	setRFSW_AdjControl@sw,w
  7192  15EF  3E1A               	addlw	26
  7193  15F0  077D               	addwf	_product,w
  7194  15F1  00E4               	movwf	??_setRFSW_AdjControl
  7195  15F2  0864               	movf	??_setRFSW_AdjControl,w
  7196  15F3  0086               	movwf	6
  7197  15F4  3001               	movlw	1	; select bank2/3
  7198  15F5  0087               	movwf	7
  7199  15F6  0801               	movf	1,w
  7200  15F7  00E5               	movwf	??_setRFSW_AdjControl+1
  7201  15F8  087D               	movf	_product,w
  7202  15F9  3E11               	addlw	17
  7203  15FA  0086               	movwf	6
  7204  15FB  3001               	movlw	1	; select bank2/3
  7205  15FC  0087               	movwf	7
  7206  15FD  0865               	movf	??_setRFSW_AdjControl+1,w
  7207  15FE  0081               	movwf	1
  7208                           
  7209                           ;RF_Control_B1.c: 376: setTxData(1);
  7210  15FF  3001               	movlw	1
  7211  1600  3186  2656         	fcall	_setTxData
  7212  1602  0008               	return
  7213  1603                     __end_of_setRFSW_AdjControl:	
  7214                           
  7215                           	psect	text27
  7216  1511                     __ptext27:	
  7217 ;; *************** function _setRF_DimmerValue *****************
  7218 ;; Defined at:
  7219 ;;		line 387 in file "../src/RF_Control_B1.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  lights          1    wreg     unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  lights          1   67[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        3 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    9
  7240 ;; This function calls:
  7241 ;;		_setDimmerLights_AdjRF
  7242 ;; This function is called by:
  7243 ;;		_setRFSW_AdjControl
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setRF_DimmerValue
  7249  1511                     _setRF_DimmerValue:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7253                           ;setRF_DimmerValue@lights stored from wreg
  7254  1511  0020               	movlb	0	; select bank0
  7255  1512  00E3               	movwf	setRF_DimmerValue@lights
  7256                           
  7257                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  7258  1513  3065               	movlw	101
  7259  1514  0021               	movlb	1	; select bank1
  7260  1515  0229               	subwf	(_RF_Data^(0+128)+9),w
  7261  1516  1C03               	skipc
  7262  1517  2D1E               	goto	l5559
  7263                           
  7264                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  7265  1518  3064               	movlw	100
  7266  1519  0020               	movlb	0	; select bank0
  7267  151A  00E1               	movwf	??_setRF_DimmerValue
  7268  151B  0861               	movf	??_setRF_DimmerValue,w
  7269  151C  0021               	movlb	1	; select bank1
  7270  151D  00A9               	movwf	(_RF_Data^(0+128)+9)
  7271  151E                     l5559:	
  7272                           
  7273                           ;RF_Control_B1.c: 390: }
  7274                           ;RF_Control_B1.c: 391: product->Data[9]=RF_Data[9];
  7275  151E  0829               	movf	(_RF_Data^(0+128)+9),w
  7276  151F  0020               	movlb	0	; select bank0
  7277  1520  00E1               	movwf	??_setRF_DimmerValue
  7278  1521  087D               	movf	_product,w
  7279  1522  3E09               	addlw	9
  7280  1523  0086               	movwf	6
  7281  1524  3001               	movlw	1	; select bank2/3
  7282  1525  0087               	movwf	7
  7283  1526  0861               	movf	??_setRF_DimmerValue,w
  7284  1527  0081               	movwf	1
  7285                           
  7286                           ;RF_Control_B1.c: 392: product->Data[11]=lights;
  7287  1528  0863               	movf	setRF_DimmerValue@lights,w
  7288  1529  00E1               	movwf	??_setRF_DimmerValue
  7289  152A  087D               	movf	_product,w
  7290  152B  3E0B               	addlw	11
  7291  152C  0086               	movwf	6
  7292  152D  3001               	movlw	1	; select bank2/3
  7293  152E  0087               	movwf	7
  7294  152F  0861               	movf	??_setRF_DimmerValue,w
  7295  1530  0081               	movwf	1
  7296                           
  7297                           ;RF_Control_B1.c: 393: product->Data[(20 + lights)]=product->Data[9];
  7298  1531  087D               	movf	_product,w
  7299  1532  3E09               	addlw	9
  7300  1533  0086               	movwf	6
  7301  1534  3001               	movlw	1	; select bank2/3
  7302  1535  0087               	movwf	7
  7303  1536  0801               	movf	1,w
  7304  1537  00E1               	movwf	??_setRF_DimmerValue
  7305  1538  0863               	movf	setRF_DimmerValue@lights,w
  7306  1539  3E14               	addlw	20
  7307  153A  077D               	addwf	_product,w
  7308  153B  00E2               	movwf	??_setRF_DimmerValue+1
  7309  153C  0862               	movf	??_setRF_DimmerValue+1,w
  7310  153D  0086               	movwf	6
  7311  153E  3001               	movlw	1	; select bank2/3
  7312  153F  0087               	movwf	7
  7313  1540  0861               	movf	??_setRF_DimmerValue,w
  7314  1541  0081               	movwf	1
  7315                           
  7316                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  7317  1542  0863               	movf	setRF_DimmerValue@lights,w
  7318  1543  3193  235D         	fcall	_setDimmerLights_AdjRF
  7319  1545  0008               	return
  7320  1546                     __end_of_setRF_DimmerValue:	
  7321                           
  7322                           	psect	text28
  7323  135D                     __ptext28:	
  7324 ;; *************** function _setDimmerLights_AdjRF *****************
  7325 ;; Defined at:
  7326 ;;		line 529 in file "../src/Dimmer_B1.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  lights          1    wreg     unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  lights          1   64[BANK0 ] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;Total ram usage:        2 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    8
  7347 ;; This function calls:
  7348 ;;		_DimmerLightsPointSelect
  7349 ;;		_getPercentValue
  7350 ;; This function is called by:
  7351 ;;		_setRF_DimmerValue
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           
  7356                           ;psect for function _setDimmerLights_AdjRF
  7357  135D                     _setDimmerLights_AdjRF:	
  7358                           
  7359                           ;incstack = 0
  7360                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7361                           ;setDimmerLights_AdjRF@lights stored from wreg
  7362  135D  0020               	movlb	0	; select bank0
  7363  135E  00E0               	movwf	setDimmerLights_AdjRF@lights
  7364                           
  7365                           ;Dimmer_B1.c: 530: DimmerLightsPointSelect(lights);
  7366  135F  0860               	movf	setDimmerLights_AdjRF@lights,w
  7367  1360  3191  210D  3193   	fcall	_DimmerLightsPointSelect
  7368                           
  7369                           ;Dimmer_B1.c: 531: DimmerLights->AdjRF = 1;
  7370  1363  0879               	movf	_DimmerLights,w
  7371  1364  0086               	movwf	6
  7372  1365  3001               	movlw	1	; select bank2/3
  7373  1366  0087               	movwf	7
  7374  1367  1501               	bsf	1,2
  7375                           
  7376                           ;Dimmer_B1.c: 532: DimmerLights->Signal = 1;
  7377  1368  0879               	movf	_DimmerLights,w
  7378  1369  0086               	movwf	6
  7379  136A  3001               	movlw	1	; select bank2/3
  7380  136B  0087               	movwf	7
  7381  136C  1481               	bsf	1,1
  7382                           
  7383                           ;Dimmer_B1.c: 533: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7384  136D  087D               	movf	_product,w
  7385  136E  3E09               	addlw	9
  7386  136F  0086               	movwf	6
  7387  1370  3001               	movlw	1	; select bank2/3
  7388  1371  0087               	movwf	7
  7389  1372  0801               	movf	1,w
  7390  1373  3188  202B         	fcall	_getPercentValue
  7391  1375  0020               	movlb	0	; select bank0
  7392  1376  00DF               	movwf	??_setDimmerLights_AdjRF
  7393  1377  0879               	movf	_DimmerLights,w
  7394  1378  3E05               	addlw	5
  7395  1379  0086               	movwf	6
  7396  137A  3001               	movlw	1	; select bank2/3
  7397  137B  0087               	movwf	7
  7398  137C  085F               	movf	??_setDimmerLights_AdjRF,w
  7399  137D  0081               	movwf	1
  7400  137E  0008               	return
  7401  137F                     __end_of_setDimmerLights_AdjRF:	
  7402                           
  7403                           	psect	text29
  7404  082B                     __ptext29:	
  7405 ;; *************** function _getPercentValue *****************
  7406 ;; Defined at:
  7407 ;;		line 595 in file "../src/Dimmer_B1.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  value           1    wreg     unsigned char 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  value           1   59[BANK0 ] unsigned char 
  7412 ;;  i               3   60[BANK0 ] float 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      unsigned char 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2, status,0, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;Total ram usage:        6 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    7
  7429 ;; This function calls:
  7430 ;;		___awtoft
  7431 ;;		___ftadd
  7432 ;;		___ftdiv
  7433 ;;		___ftmul
  7434 ;;		___fttol
  7435 ;; This function is called by:
  7436 ;;		_setDimmerLights_AdjRF
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           
  7441                           ;psect for function _getPercentValue
  7442  082B                     _getPercentValue:	
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7446                           ;getPercentValue@value stored from wreg
  7447  082B  0020               	movlb	0	; select bank0
  7448  082C  00DB               	movwf	getPercentValue@value
  7449                           
  7450                           ;Dimmer_B1.c: 603: float i = ((char)(65*1.5)) - ((char)(20*1.5));
  7451  082D  3000               	movlw	0
  7452  082E  00DC               	movwf	getPercentValue@i
  7453  082F  3086               	movlw	134
  7454  0830  00DD               	movwf	getPercentValue@i+1
  7455  0831  3042               	movlw	66
  7456  0832  00DE               	movwf	getPercentValue@i+2
  7457                           
  7458                           ;Dimmer_B1.c: 604: i /= 100;
  7459  0833  3000               	movlw	0
  7460  0834  00AE               	movwf	___ftdiv@f2
  7461  0835  30C8               	movlw	200
  7462  0836  00AF               	movwf	___ftdiv@f2+1
  7463  0837  3042               	movlw	66
  7464  0838  00B0               	movwf	___ftdiv@f2+2
  7465  0839  085C               	movf	getPercentValue@i,w
  7466  083A  00B1               	movwf	___ftdiv@f1
  7467  083B  085D               	movf	getPercentValue@i+1,w
  7468  083C  00B2               	movwf	___ftdiv@f1+1
  7469  083D  085E               	movf	getPercentValue@i+2,w
  7470  083E  00B3               	movwf	___ftdiv@f1+2
  7471  083F  3185  25AD  3188   	fcall	___ftdiv
  7472  0842  0020               	movlb	0	; select bank0
  7473  0843  082E               	movf	?___ftdiv,w
  7474  0844  00DC               	movwf	getPercentValue@i
  7475  0845  082F               	movf	?___ftdiv+1,w
  7476  0846  00DD               	movwf	getPercentValue@i+1
  7477  0847  0830               	movf	?___ftdiv+2,w
  7478  0848  00DE               	movwf	getPercentValue@i+2
  7479                           
  7480                           ;Dimmer_B1.c: 605: return (char) (((100 - value) * i) + ((char)(65*1.5)));
  7481  0849  085B               	movf	getPercentValue@value,w
  7482  084A  00D9               	movwf	??_getPercentValue
  7483  084B  01DA               	clrf	??_getPercentValue+1
  7484  084C  09D9               	comf	??_getPercentValue,f
  7485  084D  09DA               	comf	??_getPercentValue+1,f
  7486  084E  0AD9               	incf	??_getPercentValue,f
  7487  084F  1903               	skipnz
  7488  0850  0ADA               	incf	??_getPercentValue+1,f
  7489  0851  0859               	movf	??_getPercentValue,w
  7490  0852  3E64               	addlw	100
  7491  0853  00A8               	movwf	___awtoft@c
  7492  0854  3000               	movlw	0
  7493  0855  3D5A               	addwfc	??_getPercentValue+1,w
  7494  0856  00A9               	movwf	___awtoft@c+1
  7495  0857  3193  2319  3188   	fcall	___awtoft
  7496  085A  0020               	movlb	0	; select bank0
  7497  085B  0828               	movf	?___awtoft,w
  7498  085C  00B1               	movwf	___ftmul@f2
  7499  085D  0829               	movf	?___awtoft+1,w
  7500  085E  00B2               	movwf	___ftmul@f2+1
  7501  085F  082A               	movf	?___awtoft+2,w
  7502  0860  00B3               	movwf	___ftmul@f2+2
  7503  0861  085C               	movf	getPercentValue@i,w
  7504  0862  00AE               	movwf	___ftmul@f1
  7505  0863  085D               	movf	getPercentValue@i+1,w
  7506  0864  00AF               	movwf	___ftmul@f1+1
  7507  0865  085E               	movf	getPercentValue@i+2,w
  7508  0866  00B0               	movwf	___ftmul@f1+2
  7509  0867  3184  24F9  3188   	fcall	___ftmul
  7510  086A  0020               	movlb	0	; select bank0
  7511  086B  082E               	movf	?___ftmul,w
  7512  086C  00C1               	movwf	___ftadd@f2
  7513  086D  082F               	movf	?___ftmul+1,w
  7514  086E  00C2               	movwf	___ftadd@f2+1
  7515  086F  0830               	movf	?___ftmul+2,w
  7516  0870  00C3               	movwf	___ftadd@f2+2
  7517  0871  3000               	movlw	0
  7518  0872  00BE               	movwf	___ftadd@f1
  7519  0873  30C2               	movlw	194
  7520  0874  00BF               	movwf	___ftadd@f1+1
  7521  0875  3042               	movlw	66
  7522  0876  00C0               	movwf	___ftadd@f1+2
  7523  0877  3184  2403  3188   	fcall	___ftadd
  7524  087A  0020               	movlb	0	; select bank0
  7525  087B  083E               	movf	?___ftadd,w
  7526  087C  00CB               	movwf	___fttol@f1
  7527  087D  083F               	movf	?___ftadd+1,w
  7528  087E  00CC               	movwf	___fttol@f1+1
  7529  087F  0840               	movf	?___ftadd+2,w
  7530  0880  00CD               	movwf	___fttol@f1+2
  7531  0881  318D  2532         	fcall	___fttol
  7532  0883  0020               	movlb	0	; select bank0
  7533  0884  084B               	movf	?___fttol,w
  7534  0885  0008               	return
  7535  0886                     __end_of_getPercentValue:	
  7536                           
  7537                           	psect	text30
  7538  04F9                     __ptext30:	
  7539 ;; *************** function ___ftmul *****************
  7540 ;; Defined at:
  7541 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  f1              3   14[BANK0 ] float 
  7544 ;;  f2              3   17[BANK0 ] float 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7547 ;;  sign            1   29[BANK0 ] unsigned char 
  7548 ;;  cntr            1   28[BANK0 ] unsigned char 
  7549 ;;  exp             1   24[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;                  3   14[BANK0 ] float 
  7552 ;; Registers used:
  7553 ;;		wreg, status,2, status,0, pclath, cstack
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7559 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;Total ram usage:       16 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    6
  7566 ;; This function calls:
  7567 ;;		___ftpack
  7568 ;; This function is called by:
  7569 ;;		_getPercentValue
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           
  7574                           ;psect for function ___ftmul
  7575  04F9                     ___ftmul:	
  7576                           
  7577                           ;incstack = 0
  7578                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7579  04F9  0020               	movlb	0	; select bank0
  7580  04FA  082E               	movf	___ftmul@f1,w
  7581  04FB  00B4               	movwf	??___ftmul
  7582  04FC  082F               	movf	___ftmul@f1+1,w
  7583  04FD  00B5               	movwf	??___ftmul+1
  7584  04FE  0830               	movf	___ftmul@f1+2,w
  7585  04FF  00B6               	movwf	??___ftmul+2
  7586  0500  1003               	clrc
  7587  0501  0D35               	rlf	??___ftmul+1,w
  7588  0502  0D36               	rlf	??___ftmul+2,w
  7589  0503  00B7               	movwf	??___ftmul+3
  7590  0504  0837               	movf	??___ftmul+3,w
  7591  0505  00B8               	movwf	___ftmul@exp
  7592  0506  08B8               	movf	___ftmul@exp,f
  7593  0507  1D03               	skipz
  7594  0508  2D10               	goto	l5239
  7595  0509  3000               	movlw	0
  7596  050A  00AE               	movwf	?___ftmul
  7597  050B  3000               	movlw	0
  7598  050C  00AF               	movwf	?___ftmul+1
  7599  050D  3000               	movlw	0
  7600  050E  00B0               	movwf	?___ftmul+2
  7601  050F  0008               	return
  7602  0510                     l5239:	
  7603  0510  0831               	movf	___ftmul@f2,w
  7604  0511  00B4               	movwf	??___ftmul
  7605  0512  0832               	movf	___ftmul@f2+1,w
  7606  0513  00B5               	movwf	??___ftmul+1
  7607  0514  0833               	movf	___ftmul@f2+2,w
  7608  0515  00B6               	movwf	??___ftmul+2
  7609  0516  1003               	clrc
  7610  0517  0D35               	rlf	??___ftmul+1,w
  7611  0518  0D36               	rlf	??___ftmul+2,w
  7612  0519  00B7               	movwf	??___ftmul+3
  7613  051A  0837               	movf	??___ftmul+3,w
  7614  051B  00BD               	movwf	___ftmul@sign
  7615  051C  08BD               	movf	___ftmul@sign,f
  7616  051D  1D03               	skipz
  7617  051E  2D26               	goto	l5245
  7618  051F  3000               	movlw	0
  7619  0520  00AE               	movwf	?___ftmul
  7620  0521  3000               	movlw	0
  7621  0522  00AF               	movwf	?___ftmul+1
  7622  0523  3000               	movlw	0
  7623  0524  00B0               	movwf	?___ftmul+2
  7624  0525  0008               	return
  7625  0526                     l5245:	
  7626  0526  083D               	movf	___ftmul@sign,w
  7627  0527  3E7B               	addlw	123
  7628  0528  00B4               	movwf	??___ftmul
  7629  0529  0834               	movf	??___ftmul,w
  7630  052A  07B8               	addwf	___ftmul@exp,f
  7631  052B  082E               	movf	___ftmul@f1,w
  7632  052C  00B4               	movwf	??___ftmul
  7633  052D  082F               	movf	___ftmul@f1+1,w
  7634  052E  00B5               	movwf	??___ftmul+1
  7635  052F  0830               	movf	___ftmul@f1+2,w
  7636  0530  00B6               	movwf	??___ftmul+2
  7637  0531  3010               	movlw	16
  7638  0532                     u3495:	
  7639  0532  36B6               	lsrf	??___ftmul+2,f
  7640  0533  0CB5               	rrf	??___ftmul+1,f
  7641  0534  0CB4               	rrf	??___ftmul,f
  7642  0535  0B89               	decfsz	9,f
  7643  0536  2D32               	goto	u3495
  7644  0537  0834               	movf	??___ftmul,w
  7645  0538  00B7               	movwf	??___ftmul+3
  7646  0539  0837               	movf	??___ftmul+3,w
  7647  053A  00BD               	movwf	___ftmul@sign
  7648  053B  0831               	movf	___ftmul@f2,w
  7649  053C  00B4               	movwf	??___ftmul
  7650  053D  0832               	movf	___ftmul@f2+1,w
  7651  053E  00B5               	movwf	??___ftmul+1
  7652  053F  0833               	movf	___ftmul@f2+2,w
  7653  0540  00B6               	movwf	??___ftmul+2
  7654  0541  3010               	movlw	16
  7655  0542                     u3505:	
  7656  0542  36B6               	lsrf	??___ftmul+2,f
  7657  0543  0CB5               	rrf	??___ftmul+1,f
  7658  0544  0CB4               	rrf	??___ftmul,f
  7659  0545  0B89               	decfsz	9,f
  7660  0546  2D42               	goto	u3505
  7661  0547  0834               	movf	??___ftmul,w
  7662  0548  00B7               	movwf	??___ftmul+3
  7663  0549  0837               	movf	??___ftmul+3,w
  7664  054A  06BD               	xorwf	___ftmul@sign,f
  7665  054B  3080               	movlw	128
  7666  054C  00B4               	movwf	??___ftmul
  7667  054D  0834               	movf	??___ftmul,w
  7668  054E  05BD               	andwf	___ftmul@sign,f
  7669  054F  17AF               	bsf	___ftmul@f1+1,7
  7670  0550  17B2               	bsf	___ftmul@f2+1,7
  7671  0551  30FF               	movlw	255
  7672  0552  05B1               	andwf	___ftmul@f2,f
  7673  0553  30FF               	movlw	255
  7674  0554  05B2               	andwf	___ftmul@f2+1,f
  7675  0555  3000               	movlw	0
  7676  0556  05B3               	andwf	___ftmul@f2+2,f
  7677  0557  3000               	movlw	0
  7678  0558  00B9               	movwf	___ftmul@f3_as_product
  7679  0559  3000               	movlw	0
  7680  055A  00BA               	movwf	___ftmul@f3_as_product+1
  7681  055B  3000               	movlw	0
  7682  055C  00BB               	movwf	___ftmul@f3_as_product+2
  7683  055D  3007               	movlw	7
  7684  055E  00B4               	movwf	??___ftmul
  7685  055F  0834               	movf	??___ftmul,w
  7686  0560  00BC               	movwf	___ftmul@cntr
  7687  0561                     l5257:	
  7688  0561  1C2E               	btfss	___ftmul@f1,0
  7689  0562  2D69               	goto	l5261
  7690  0563  0831               	movf	___ftmul@f2,w
  7691  0564  07B9               	addwf	___ftmul@f3_as_product,f
  7692  0565  0832               	movf	___ftmul@f2+1,w
  7693  0566  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7694  0567  0833               	movf	___ftmul@f2+2,w
  7695  0568  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7696  0569                     l5261:	
  7697  0569  3001               	movlw	1
  7698  056A                     u3525:	
  7699  056A  36B0               	lsrf	___ftmul@f1+2,f
  7700  056B  0CAF               	rrf	___ftmul@f1+1,f
  7701  056C  0CAE               	rrf	___ftmul@f1,f
  7702  056D  0B89               	decfsz	9,f
  7703  056E  2D6A               	goto	u3525
  7704  056F  3001               	movlw	1
  7705  0570                     u3535:	
  7706  0570  35B1               	lslf	___ftmul@f2,f
  7707  0571  0DB2               	rlf	___ftmul@f2+1,f
  7708  0572  0DB3               	rlf	___ftmul@f2+2,f
  7709  0573  0B89               	decfsz	9,f
  7710  0574  2D70               	goto	u3535
  7711  0575  3001               	movlw	1
  7712  0576  02BC               	subwf	___ftmul@cntr,f
  7713  0577  1D03               	btfss	3,2
  7714  0578  2D61               	goto	l5257
  7715  0579  3009               	movlw	9
  7716  057A  00B4               	movwf	??___ftmul
  7717  057B  0834               	movf	??___ftmul,w
  7718  057C  00BC               	movwf	___ftmul@cntr
  7719  057D                     l5269:	
  7720  057D  1C2E               	btfss	___ftmul@f1,0
  7721  057E  2D85               	goto	l5273
  7722  057F  0831               	movf	___ftmul@f2,w
  7723  0580  07B9               	addwf	___ftmul@f3_as_product,f
  7724  0581  0832               	movf	___ftmul@f2+1,w
  7725  0582  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7726  0583  0833               	movf	___ftmul@f2+2,w
  7727  0584  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7728  0585                     l5273:	
  7729  0585  3001               	movlw	1
  7730  0586                     u3565:	
  7731  0586  36B0               	lsrf	___ftmul@f1+2,f
  7732  0587  0CAF               	rrf	___ftmul@f1+1,f
  7733  0588  0CAE               	rrf	___ftmul@f1,f
  7734  0589  0B89               	decfsz	9,f
  7735  058A  2D86               	goto	u3565
  7736  058B  3001               	movlw	1
  7737  058C                     u3575:	
  7738  058C  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7739  058D  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7740  058E  0CB9               	rrf	___ftmul@f3_as_product,f
  7741  058F  0B89               	decfsz	9,f
  7742  0590  2D8C               	goto	u3575
  7743  0591  3001               	movlw	1
  7744  0592  02BC               	subwf	___ftmul@cntr,f
  7745  0593  1D03               	btfss	3,2
  7746  0594  2D7D               	goto	l5269
  7747  0595  0839               	movf	___ftmul@f3_as_product,w
  7748  0596  00A0               	movwf	___ftpack@arg
  7749  0597  083A               	movf	___ftmul@f3_as_product+1,w
  7750  0598  00A1               	movwf	___ftpack@arg+1
  7751  0599  083B               	movf	___ftmul@f3_as_product+2,w
  7752  059A  00A2               	movwf	___ftpack@arg+2
  7753  059B  0838               	movf	___ftmul@exp,w
  7754  059C  00B4               	movwf	??___ftmul
  7755  059D  0834               	movf	??___ftmul,w
  7756  059E  00A3               	movwf	___ftpack@exp
  7757  059F  083D               	movf	___ftmul@sign,w
  7758  05A0  00B5               	movwf	??___ftmul+1
  7759  05A1  0835               	movf	??___ftmul+1,w
  7760  05A2  00A4               	movwf	___ftpack@sign
  7761  05A3  3187  279E         	fcall	___ftpack
  7762  05A5  0020               	movlb	0	; select bank0
  7763  05A6  0820               	movf	?___ftpack,w
  7764  05A7  00AE               	movwf	?___ftmul
  7765  05A8  0821               	movf	?___ftpack+1,w
  7766  05A9  00AF               	movwf	?___ftmul+1
  7767  05AA  0822               	movf	?___ftpack+2,w
  7768  05AB  00B0               	movwf	?___ftmul+2
  7769  05AC  0008               	return
  7770  05AD                     __end_of___ftmul:	
  7771                           
  7772                           	psect	text31
  7773  0403                     __ptext31:	
  7774 ;; *************** function ___ftadd *****************
  7775 ;; Defined at:
  7776 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  f1              3   30[BANK0 ] float 
  7779 ;;  f2              3   33[BANK0 ] float 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  exp1            1   42[BANK0 ] unsigned char 
  7782 ;;  exp2            1   41[BANK0 ] unsigned char 
  7783 ;;  sign            1   40[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  3   30[BANK0 ] float 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, pclath, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:       13 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    6
  7800 ;; This function calls:
  7801 ;;		___ftpack
  7802 ;; This function is called by:
  7803 ;;		_getPercentValue
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function ___ftadd
  7809  0403                     ___ftadd:	
  7810                           
  7811                           ;incstack = 0
  7812                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7813  0403  0020               	movlb	0	; select bank0
  7814  0404  083E               	movf	___ftadd@f1,w
  7815  0405  00C4               	movwf	??___ftadd
  7816  0406  083F               	movf	___ftadd@f1+1,w
  7817  0407  00C5               	movwf	??___ftadd+1
  7818  0408  0840               	movf	___ftadd@f1+2,w
  7819  0409  00C6               	movwf	??___ftadd+2
  7820  040A  1003               	clrc
  7821  040B  0D45               	rlf	??___ftadd+1,w
  7822  040C  0D46               	rlf	??___ftadd+2,w
  7823  040D  00C7               	movwf	??___ftadd+3
  7824  040E  0847               	movf	??___ftadd+3,w
  7825  040F  00CA               	movwf	___ftadd@exp1
  7826  0410  0841               	movf	___ftadd@f2,w
  7827  0411  00C4               	movwf	??___ftadd
  7828  0412  0842               	movf	___ftadd@f2+1,w
  7829  0413  00C5               	movwf	??___ftadd+1
  7830  0414  0843               	movf	___ftadd@f2+2,w
  7831  0415  00C6               	movwf	??___ftadd+2
  7832  0416  1003               	clrc
  7833  0417  0D45               	rlf	??___ftadd+1,w
  7834  0418  0D46               	rlf	??___ftadd+2,w
  7835  0419  00C7               	movwf	??___ftadd+3
  7836  041A  0847               	movf	??___ftadd+3,w
  7837  041B  00C9               	movwf	___ftadd@exp2
  7838  041C  084A               	movf	___ftadd@exp1,w
  7839  041D  1903               	btfsc	3,2
  7840  041E  2C2B               	goto	l5127
  7841  041F  0849               	movf	___ftadd@exp2,w
  7842  0420  024A               	subwf	___ftadd@exp1,w
  7843  0421  1803               	skipnc
  7844  0422  2C32               	goto	l5131
  7845  0423  034A               	decf	___ftadd@exp1,w
  7846  0424  3AFF               	xorlw	255
  7847  0425  0749               	addwf	___ftadd@exp2,w
  7848  0426  00C4               	movwf	??___ftadd
  7849  0427  3019               	movlw	25
  7850  0428  0244               	subwf	??___ftadd,w
  7851  0429  1C03               	skipc
  7852  042A  2C32               	goto	l5131
  7853  042B                     l5127:	
  7854  042B  0841               	movf	___ftadd@f2,w
  7855  042C  00BE               	movwf	?___ftadd
  7856  042D  0842               	movf	___ftadd@f2+1,w
  7857  042E  00BF               	movwf	?___ftadd+1
  7858  042F  0843               	movf	___ftadd@f2+2,w
  7859  0430  00C0               	movwf	?___ftadd+2
  7860  0431  0008               	return
  7861  0432                     l5131:	
  7862  0432  0849               	movf	___ftadd@exp2,w
  7863  0433  1903               	btfsc	3,2
  7864  0434  0008               	return
  7865  0435  084A               	movf	___ftadd@exp1,w
  7866  0436  0249               	subwf	___ftadd@exp2,w
  7867  0437  1803               	skipnc
  7868  0438  2C41               	goto	l5137
  7869  0439  0349               	decf	___ftadd@exp2,w
  7870  043A  3AFF               	xorlw	255
  7871  043B  074A               	addwf	___ftadd@exp1,w
  7872  043C  00C4               	movwf	??___ftadd
  7873  043D  3019               	movlw	25
  7874  043E  0244               	subwf	??___ftadd,w
  7875  043F  1803               	btfsc	3,0
  7876  0440  0008               	return
  7877  0441                     l5137:	
  7878  0441  3006               	movlw	6
  7879  0442  00C4               	movwf	??___ftadd
  7880  0443  0844               	movf	??___ftadd,w
  7881  0444  00C8               	movwf	___ftadd@sign
  7882  0445  1BC0               	btfsc	___ftadd@f1+2,7
  7883  0446  17C8               	bsf	___ftadd@sign,7
  7884  0447  1BC3               	btfsc	___ftadd@f2+2,7
  7885  0448  1748               	bsf	___ftadd@sign,6
  7886  0449  17BF               	bsf	___ftadd@f1+1,7
  7887  044A  30FF               	movlw	255
  7888  044B  05BE               	andwf	___ftadd@f1,f
  7889  044C  30FF               	movlw	255
  7890  044D  05BF               	andwf	___ftadd@f1+1,f
  7891  044E  3000               	movlw	0
  7892  044F  05C0               	andwf	___ftadd@f1+2,f
  7893  0450  17C2               	bsf	___ftadd@f2+1,7
  7894  0451  30FF               	movlw	255
  7895  0452  05C1               	andwf	___ftadd@f2,f
  7896  0453  30FF               	movlw	255
  7897  0454  05C2               	andwf	___ftadd@f2+1,f
  7898  0455  3000               	movlw	0
  7899  0456  05C3               	andwf	___ftadd@f2+2,f
  7900  0457  0849               	movf	___ftadd@exp2,w
  7901  0458  024A               	subwf	___ftadd@exp1,w
  7902  0459  1803               	skipnc
  7903  045A  2C7D               	goto	l5159
  7904  045B                     l5149:	
  7905  045B  3001               	movlw	1
  7906  045C                     u3255:	
  7907  045C  35C1               	lslf	___ftadd@f2,f
  7908  045D  0DC2               	rlf	___ftadd@f2+1,f
  7909  045E  0DC3               	rlf	___ftadd@f2+2,f
  7910  045F  0B89               	decfsz	9,f
  7911  0460  2C5C               	goto	u3255
  7912  0461  3001               	movlw	1
  7913  0462  02C9               	subwf	___ftadd@exp2,f
  7914  0463  0849               	movf	___ftadd@exp2,w
  7915  0464  064A               	xorwf	___ftadd@exp1,w
  7916  0465  1903               	skipnz
  7917  0466  2C78               	goto	l5157
  7918  0467  3001               	movlw	1
  7919  0468  02C8               	subwf	___ftadd@sign,f
  7920  0469  0848               	movf	___ftadd@sign,w
  7921  046A  3907               	andlw	7
  7922  046B  1903               	btfsc	3,2
  7923  046C  2C78               	goto	l5157
  7924  046D  2C5B               	goto	l5149
  7925  046E                     l5155:	
  7926  046E  3001               	movlw	1
  7927  046F                     u3285:	
  7928  046F  36C0               	lsrf	___ftadd@f1+2,f
  7929  0470  0CBF               	rrf	___ftadd@f1+1,f
  7930  0471  0CBE               	rrf	___ftadd@f1,f
  7931  0472  0B89               	decfsz	9,f
  7932  0473  2C6F               	goto	u3285
  7933  0474  3001               	movlw	1
  7934  0475  00C4               	movwf	??___ftadd
  7935  0476  0844               	movf	??___ftadd,w
  7936  0477  07CA               	addwf	___ftadd@exp1,f
  7937  0478                     l5157:	
  7938  0478  084A               	movf	___ftadd@exp1,w
  7939  0479  0649               	xorwf	___ftadd@exp2,w
  7940  047A  1903               	btfsc	3,2
  7941  047B  2CA2               	goto	l2918
  7942  047C  2C6E               	goto	l5155
  7943  047D                     l5159:	
  7944  047D  084A               	movf	___ftadd@exp1,w
  7945  047E  0249               	subwf	___ftadd@exp2,w
  7946  047F  1803               	skipnc
  7947  0480  2CA2               	goto	l2918
  7948  0481                     l5161:	
  7949  0481  3001               	movlw	1
  7950  0482                     u3315:	
  7951  0482  35BE               	lslf	___ftadd@f1,f
  7952  0483  0DBF               	rlf	___ftadd@f1+1,f
  7953  0484  0DC0               	rlf	___ftadd@f1+2,f
  7954  0485  0B89               	decfsz	9,f
  7955  0486  2C82               	goto	u3315
  7956  0487  3001               	movlw	1
  7957  0488  02CA               	subwf	___ftadd@exp1,f
  7958  0489  0849               	movf	___ftadd@exp2,w
  7959  048A  064A               	xorwf	___ftadd@exp1,w
  7960  048B  1903               	skipnz
  7961  048C  2C9E               	goto	l5169
  7962  048D  3001               	movlw	1
  7963  048E  02C8               	subwf	___ftadd@sign,f
  7964  048F  0848               	movf	___ftadd@sign,w
  7965  0490  3907               	andlw	7
  7966  0491  1903               	btfsc	3,2
  7967  0492  2C9E               	goto	l5169
  7968  0493  2C81               	goto	l5161
  7969  0494                     l5167:	
  7970  0494  3001               	movlw	1
  7971  0495                     u3345:	
  7972  0495  36C3               	lsrf	___ftadd@f2+2,f
  7973  0496  0CC2               	rrf	___ftadd@f2+1,f
  7974  0497  0CC1               	rrf	___ftadd@f2,f
  7975  0498  0B89               	decfsz	9,f
  7976  0499  2C95               	goto	u3345
  7977  049A  3001               	movlw	1
  7978  049B  00C4               	movwf	??___ftadd
  7979  049C  0844               	movf	??___ftadd,w
  7980  049D  07C9               	addwf	___ftadd@exp2,f
  7981  049E                     l5169:	
  7982  049E  084A               	movf	___ftadd@exp1,w
  7983  049F  0649               	xorwf	___ftadd@exp2,w
  7984  04A0  1D03               	skipz
  7985  04A1  2C94               	goto	l5167
  7986  04A2                     l2918:	
  7987  04A2  1FC8               	btfss	___ftadd@sign,7
  7988  04A3  2CB4               	goto	l5173
  7989  04A4  30FF               	movlw	255
  7990  04A5  06BE               	xorwf	___ftadd@f1,f
  7991  04A6  30FF               	movlw	255
  7992  04A7  06BF               	xorwf	___ftadd@f1+1,f
  7993  04A8  30FF               	movlw	255
  7994  04A9  06C0               	xorwf	___ftadd@f1+2,f
  7995  04AA  3001               	movlw	1
  7996  04AB  07BE               	addwf	___ftadd@f1,f
  7997  04AC  3000               	movlw	0
  7998  04AD  1803               	skipnc
  7999  04AE  3001               	movlw	1
  8000  04AF  07BF               	addwf	___ftadd@f1+1,f
  8001  04B0  3000               	movlw	0
  8002  04B1  1803               	skipnc
  8003  04B2  3001               	movlw	1
  8004  04B3  07C0               	addwf	___ftadd@f1+2,f
  8005  04B4                     l5173:	
  8006  04B4  1F48               	btfss	___ftadd@sign,6
  8007  04B5  2CC6               	goto	l5177
  8008  04B6  30FF               	movlw	255
  8009  04B7  06C1               	xorwf	___ftadd@f2,f
  8010  04B8  30FF               	movlw	255
  8011  04B9  06C2               	xorwf	___ftadd@f2+1,f
  8012  04BA  30FF               	movlw	255
  8013  04BB  06C3               	xorwf	___ftadd@f2+2,f
  8014  04BC  3001               	movlw	1
  8015  04BD  07C1               	addwf	___ftadd@f2,f
  8016  04BE  3000               	movlw	0
  8017  04BF  1803               	skipnc
  8018  04C0  3001               	movlw	1
  8019  04C1  07C2               	addwf	___ftadd@f2+1,f
  8020  04C2  3000               	movlw	0
  8021  04C3  1803               	skipnc
  8022  04C4  3001               	movlw	1
  8023  04C5  07C3               	addwf	___ftadd@f2+2,f
  8024  04C6                     l5177:	
  8025  04C6  01C8               	clrf	___ftadd@sign
  8026  04C7  083E               	movf	___ftadd@f1,w
  8027  04C8  07C1               	addwf	___ftadd@f2,f
  8028  04C9  083F               	movf	___ftadd@f1+1,w
  8029  04CA  3DC2               	addwfc	___ftadd@f2+1,f
  8030  04CB  0840               	movf	___ftadd@f1+2,w
  8031  04CC  3DC3               	addwfc	___ftadd@f2+2,f
  8032  04CD  1FC3               	btfss	___ftadd@f2+2,7
  8033  04CE  2CE1               	goto	l5187
  8034  04CF  30FF               	movlw	255
  8035  04D0  06C1               	xorwf	___ftadd@f2,f
  8036  04D1  30FF               	movlw	255
  8037  04D2  06C2               	xorwf	___ftadd@f2+1,f
  8038  04D3  30FF               	movlw	255
  8039  04D4  06C3               	xorwf	___ftadd@f2+2,f
  8040  04D5  3001               	movlw	1
  8041  04D6  07C1               	addwf	___ftadd@f2,f
  8042  04D7  3000               	movlw	0
  8043  04D8  1803               	skipnc
  8044  04D9  3001               	movlw	1
  8045  04DA  07C2               	addwf	___ftadd@f2+1,f
  8046  04DB  3000               	movlw	0
  8047  04DC  1803               	skipnc
  8048  04DD  3001               	movlw	1
  8049  04DE  07C3               	addwf	___ftadd@f2+2,f
  8050  04DF  01C8               	clrf	___ftadd@sign
  8051  04E0  0AC8               	incf	___ftadd@sign,f
  8052  04E1                     l5187:	
  8053  04E1  0841               	movf	___ftadd@f2,w
  8054  04E2  00A0               	movwf	___ftpack@arg
  8055  04E3  0842               	movf	___ftadd@f2+1,w
  8056  04E4  00A1               	movwf	___ftpack@arg+1
  8057  04E5  0843               	movf	___ftadd@f2+2,w
  8058  04E6  00A2               	movwf	___ftpack@arg+2
  8059  04E7  084A               	movf	___ftadd@exp1,w
  8060  04E8  00C4               	movwf	??___ftadd
  8061  04E9  0844               	movf	??___ftadd,w
  8062  04EA  00A3               	movwf	___ftpack@exp
  8063  04EB  0848               	movf	___ftadd@sign,w
  8064  04EC  00C5               	movwf	??___ftadd+1
  8065  04ED  0845               	movf	??___ftadd+1,w
  8066  04EE  00A4               	movwf	___ftpack@sign
  8067  04EF  3187  279E         	fcall	___ftpack
  8068  04F1  0020               	movlb	0	; select bank0
  8069  04F2  0820               	movf	?___ftpack,w
  8070  04F3  00BE               	movwf	?___ftadd
  8071  04F4  0821               	movf	?___ftpack+1,w
  8072  04F5  00BF               	movwf	?___ftadd+1
  8073  04F6  0822               	movf	?___ftpack+2,w
  8074  04F7  00C0               	movwf	?___ftadd+2
  8075  04F8  0008               	return
  8076  04F9                     __end_of___ftadd:	
  8077                           
  8078                           	psect	text32
  8079  13A5                     __ptext32:	
  8080 ;; *************** function _RF_RxDisable *****************
  8081 ;; Defined at:
  8082 ;;		line 187 in file "../src/RF_Control_B1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  rf              1    wreg     unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  rf              1    4[BANK0 ] unsigned char 
  8087 ;; Return value:  Size  Location     Type
  8088 ;;		None               void
  8089 ;; Registers used:
  8090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;Total ram usage:        1 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    7
  8103 ;; This function calls:
  8104 ;;		_CC2500_WriteCommand
  8105 ;;		_RfPointSelect
  8106 ;;		_setINT_GO
  8107 ;; This function is called by:
  8108 ;;		_setRF_Main
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _RF_RxDisable
  8114  13A5                     _RF_RxDisable:	
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8118                           ;RF_RxDisable@rf stored from wreg
  8119  13A5  0020               	movlb	0	; select bank0
  8120  13A6  00A4               	movwf	RF_RxDisable@rf
  8121                           
  8122                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  8123  13A7  0824               	movf	RF_RxDisable@rf,w
  8124  13A8  319F  276F  3193   	fcall	_RfPointSelect
  8125                           
  8126                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  8127  13AB  0021               	movlb	1	; select bank1
  8128  13AC  083D               	movf	_RF^(0+128),w
  8129  13AD  0086               	movwf	6
  8130  13AE  0187               	clrf	7
  8131  13AF  1D81               	btfss	1,3
  8132  13B0  0008               	return
  8133                           
  8134                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  8135  13B1  083D               	movf	_RF^(0+128),w
  8136  13B2  0086               	movwf	6
  8137  13B3  0187               	clrf	7
  8138  13B4  1181               	bcf	1,3
  8139                           
  8140                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  8141  13B5  083D               	movf	_RF^(0+128),w
  8142  13B6  0086               	movwf	6
  8143  13B7  0187               	clrf	7
  8144  13B8  1081               	bcf	1,1
  8145                           
  8146                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  8147  13B9  0A3D               	incf	_RF^(0+128),w
  8148  13BA  0086               	movwf	6
  8149  13BB  0187               	clrf	7
  8150  13BC  0181               	clrf	1
  8151                           
  8152                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  8153  13BD  083D               	movf	_RF^(0+128),w
  8154  13BE  0086               	movwf	6
  8155  13BF  0187               	clrf	7
  8156  13C0  1281               	bcf	1,5
  8157                           
  8158                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  8159  13C1  3036               	movlw	54
  8160  13C2  3190  2089  3193   	fcall	_CC2500_WriteCommand
  8161                           
  8162                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  8163  13C5  303A               	movlw	58
  8164  13C6  3190  2089  3193   	fcall	_CC2500_WriteCommand
  8165                           
  8166                           ;RF_Control_B1.c: 197: setINT_GO(0);
  8167  13C9  3000               	movlw	0
  8168  13CA  319F  2717         	fcall	_setINT_GO
  8169  13CC  0008               	return
  8170  13CD                     __end_of_RF_RxDisable:	
  8171                           
  8172                           	psect	text33
  8173  1F17                     __ptext33:	
  8174 ;; *************** function _setINT_GO *****************
  8175 ;; Defined at:
  8176 ;;		line 257 in file "../src/MCU_B1.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;  command         1    wreg     unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  command         1    0[BANK0 ] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:        1 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    5
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		_setRF_Main
  8201 ;;		_setRF_Enable
  8202 ;;		_RF_RxDisable
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           
  8207                           ;psect for function _setINT_GO
  8208  1F17                     _setINT_GO:	
  8209                           
  8210                           ;incstack = 0
  8211                           ; Regs used in _setINT_GO: [wreg]
  8212                           ;setINT_GO@command stored from wreg
  8213  1F17  0020               	movlb	0	; select bank0
  8214  1F18  00A0               	movwf	setINT_GO@command
  8215                           
  8216                           ;MCU_B1.c: 258: INTF = 0;
  8217  1F19  108B               	bcf	11,1	;volatile
  8218                           
  8219                           ;MCU_B1.c: 259: INTE = command;
  8220  1F1A  1C20               	btfss	setINT_GO@command,0
  8221  1F1B  2F1E               	goto	u4250
  8222  1F1C  160B               	bsf	11,4	;volatile
  8223  1F1D  0008               	return
  8224  1F1E                     u4250:	
  8225  1F1E  120B               	bcf	11,4	;volatile
  8226  1F1F  0008               	return
  8227  1F20                     __end_of_setINT_GO:	
  8228                           
  8229                           	psect	text34
  8230  1603                     __ptext34:	
  8231 ;; *************** function _CC2500_TxData *****************
  8232 ;; Defined at:
  8233 ;;		line 32 in file "../src/CC2500_B1.c"
  8234 ;; Parameters:    Size  Location     Type
  8235 ;;		None
  8236 ;; Auto vars:     Size  Location     Type
  8237 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;		None               void
  8240 ;; Registers used:
  8241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:        2 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    7
  8254 ;; This function calls:
  8255 ;;		_CC2500_WriteByte
  8256 ;;		_CC2500_WriteCommand
  8257 ;; This function is called by:
  8258 ;;		_setRF_Main
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _CC2500_TxData
  8264  1603                     _CC2500_TxData:	
  8265                           
  8266                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8267                           ;CC2500_B1.c: 35: RC4 = 0;
  8268                           
  8269                           ;incstack = 0
  8270                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8271  1603  0020               	movlb	0	; select bank0
  8272  1604  120E               	bcf	14,4	;volatile
  8273                           
  8274                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8275  1605  307F               	movlw	127
  8276  1606  00A4               	movwf	??_CC2500_TxData
  8277  1607  0824               	movf	??_CC2500_TxData,w
  8278  1608  0021               	movlb	1	; select bank1
  8279  1609  00C1               	movwf	_SPI0Buffer^(0+128)
  8280  160A                     l270:	
  8281                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8282                           
  8283  160A  0020               	movlb	0	; select bank0
  8284  160B  190E               	btfsc	14,2	;volatile
  8285  160C  2E0A               	goto	l270
  8286                           
  8287                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8288  160D  3191  21D1  3196   	fcall	_CC2500_WriteByte
  8289                           
  8290                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8291  1610  0021               	movlb	1	; select bank1
  8292  1611  0842               	movf	_Tx_Length^(0+128),w
  8293  1612  0020               	movlb	0	; select bank0
  8294  1613  00A4               	movwf	??_CC2500_TxData
  8295  1614  0824               	movf	??_CC2500_TxData,w
  8296  1615  0021               	movlb	1	; select bank1
  8297  1616  00C1               	movwf	_SPI0Buffer^(0+128)
  8298                           
  8299                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8300  1617  3191  21D1  3196   	fcall	_CC2500_WriteByte
  8301                           
  8302                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8303  161A  0020               	movlb	0	; select bank0
  8304  161B  01A5               	clrf	CC2500_TxData@loop_e
  8305  161C                     l5795:	
  8306  161C  0021               	movlb	1	; select bank1
  8307  161D  0842               	movf	_Tx_Length^(0+128),w
  8308  161E  0020               	movlb	0	; select bank0
  8309  161F  0225               	subwf	CC2500_TxData@loop_e,w
  8310  1620  1803               	btfsc	3,0
  8311  1621  2E34               	goto	l275
  8312                           
  8313                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8314  1622  0825               	movf	CC2500_TxData@loop_e,w
  8315  1623  3EA0               	addlw	_RF_Data& (0+255)
  8316  1624  0086               	movwf	6
  8317  1625  0187               	clrf	7
  8318  1626  0801               	movf	1,w
  8319  1627  00A4               	movwf	??_CC2500_TxData
  8320  1628  0824               	movf	??_CC2500_TxData,w
  8321  1629  0021               	movlb	1	; select bank1
  8322  162A  00C1               	movwf	_SPI0Buffer^(0+128)
  8323                           
  8324                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8325  162B  3191  21D1  3196   	fcall	_CC2500_WriteByte
  8326  162E  3001               	movlw	1
  8327  162F  0020               	movlb	0	; select bank0
  8328  1630  00A4               	movwf	??_CC2500_TxData
  8329  1631  0824               	movf	??_CC2500_TxData,w
  8330  1632  07A5               	addwf	CC2500_TxData@loop_e,f
  8331  1633  2E1C               	goto	l5795
  8332  1634                     l275:	
  8333                           
  8334                           ;CC2500_B1.c: 44: }
  8335                           ;CC2500_B1.c: 45: RC4 = 1;
  8336  1634  160E               	bsf	14,4	;volatile
  8337                           
  8338                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8339  1635  3035               	movlw	53
  8340  1636  3190  2089  3196   	fcall	_CC2500_WriteCommand
  8341  1639                     l276:	
  8342                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8343                           
  8344  1639  0020               	movlb	0	; select bank0
  8345  163A  1C0D               	btfss	13,0	;volatile
  8346  163B  2E39               	goto	l276
  8347  163C                     l279:	
  8348                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8349                           
  8350  163C  180D               	btfsc	13,0	;volatile
  8351  163D  2E3C               	goto	l279
  8352                           
  8353                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8354  163E  3036               	movlw	54
  8355  163F  3190  2089  3196   	fcall	_CC2500_WriteCommand
  8356                           
  8357                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8358  1642  303B               	movlw	59
  8359  1643  3190  2089         	fcall	_CC2500_WriteCommand
  8360                           
  8361                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8362  1645  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8363  1646  0008               	return
  8364  1647                     __end_of_CC2500_TxData:	
  8365                           
  8366                           	psect	text35
  8367  09A4                     __ptext35:	
  8368 ;; *************** function _CC2500_RxData *****************
  8369 ;; Defined at:
  8370 ;;		line 57 in file "../src/CC2500_B1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;		None
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:        2 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    7
  8391 ;; This function calls:
  8392 ;;		_CC2500_ReadByte
  8393 ;;		_CC2500_ReadStatus
  8394 ;;		_CC2500_WriteByte
  8395 ;;		_CC2500_WriteCommand
  8396 ;;		_setRF_RxStatus
  8397 ;; This function is called by:
  8398 ;;		_setRF_Main
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _CC2500_RxData
  8404  09A4                     _CC2500_RxData:	
  8405                           
  8406                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8407                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8408                           
  8409                           ;incstack = 0
  8410                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8411  09A4  0020               	movlb	0	; select bank0
  8412  09A5  180D               	btfsc	13,0	;volatile
  8413  09A6                     l286:	
  8414                           ;CC2500_B1.c: 63: {
  8415                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8416                           
  8417  09A6  180D               	btfsc	13,0	;volatile
  8418  09A7  29A6               	goto	l286
  8419                           
  8420                           ;CC2500_B1.c: 65: }
  8421                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  8422  09A8  303B               	movlw	59
  8423  09A9  3192  226A  3189   	fcall	_CC2500_ReadStatus
  8424                           
  8425                           ;CC2500_B1.c: 67: if (s_data != 0)
  8426  09AC  0021               	movlb	1	; select bank1
  8427  09AD  0845               	movf	_s_data^(0+128),w
  8428  09AE  1903               	btfsc	3,2
  8429  09AF  29FA               	goto	l5841
  8430                           
  8431                           ;CC2500_B1.c: 69: {
  8432                           ;CC2500_B1.c: 70: RC4 = 0;
  8433  09B0  0020               	movlb	0	; select bank0
  8434  09B1  120E               	bcf	14,4	;volatile
  8435                           
  8436                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  8437  09B2  30FF               	movlw	255
  8438  09B3  00A4               	movwf	??_CC2500_RxData
  8439  09B4  0824               	movf	??_CC2500_RxData,w
  8440  09B5  0021               	movlb	1	; select bank1
  8441  09B6  00C1               	movwf	_SPI0Buffer^(0+128)
  8442  09B7                     l290:	
  8443                           ;CC2500_B1.c: 72: while (RC2 == 1);
  8444                           
  8445  09B7  0020               	movlb	0	; select bank0
  8446  09B8  190E               	btfsc	14,2	;volatile
  8447  09B9  29B7               	goto	l290
  8448                           
  8449                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  8450  09BA  3191  21D1  3189   	fcall	_CC2500_WriteByte
  8451                           
  8452                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  8453  09BD  3192  22BD  3189   	fcall	_CC2500_ReadByte
  8454                           
  8455                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  8456  09C0  0021               	movlb	1	; select bank1
  8457  09C1  0841               	movf	_SPI0Buffer^(0+128),w
  8458  09C2  0020               	movlb	0	; select bank0
  8459  09C3  00A4               	movwf	??_CC2500_RxData
  8460  09C4  0824               	movf	??_CC2500_RxData,w
  8461  09C5  0021               	movlb	1	; select bank1
  8462  09C6  00C0               	movwf	_Rx_Length^(0+128)
  8463                           
  8464                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8465  09C7  0020               	movlb	0	; select bank0
  8466  09C8  01A5               	clrf	CC2500_RxData@loop_f
  8467  09C9                     l5827:	
  8468  09C9  0021               	movlb	1	; select bank1
  8469  09CA  0840               	movf	_Rx_Length^(0+128),w
  8470  09CB  0020               	movlb	0	; select bank0
  8471  09CC  0225               	subwf	CC2500_RxData@loop_f,w
  8472  09CD  1803               	btfsc	3,0
  8473  09CE  29E1               	goto	l5829
  8474                           
  8475                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  8476  09CF  3192  22BD  3189   	fcall	_CC2500_ReadByte
  8477                           
  8478                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  8479  09D2  0021               	movlb	1	; select bank1
  8480  09D3  0841               	movf	_SPI0Buffer^(0+128),w
  8481  09D4  0020               	movlb	0	; select bank0
  8482  09D5  00A4               	movwf	??_CC2500_RxData
  8483  09D6  0825               	movf	CC2500_RxData@loop_f,w
  8484  09D7  3EA0               	addlw	_RF_Data& (0+255)
  8485  09D8  0086               	movwf	6
  8486  09D9  0187               	clrf	7
  8487  09DA  0824               	movf	??_CC2500_RxData,w
  8488  09DB  0081               	movwf	1
  8489  09DC  3001               	movlw	1
  8490  09DD  00A4               	movwf	??_CC2500_RxData
  8491  09DE  0824               	movf	??_CC2500_RxData,w
  8492  09DF  07A5               	addwf	CC2500_RxData@loop_f,f
  8493  09E0  29C9               	goto	l5827
  8494  09E1                     l5829:	
  8495                           
  8496                           ;CC2500_B1.c: 80: }
  8497                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  8498  09E1  3192  22BD  3189   	fcall	_CC2500_ReadByte
  8499                           
  8500                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  8501  09E4  0021               	movlb	1	; select bank1
  8502  09E5  0841               	movf	_SPI0Buffer^(0+128),w
  8503  09E6  0020               	movlb	0	; select bank0
  8504  09E7  00A4               	movwf	??_CC2500_RxData
  8505  09E8  0824               	movf	??_CC2500_RxData,w
  8506  09E9  0021               	movlb	1	; select bank1
  8507  09EA  00BF               	movwf	_RSSI^(0+128)
  8508                           
  8509                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  8510  09EB  3192  22BD  3189   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  8513  09EE  0021               	movlb	1	; select bank1
  8514  09EF  0841               	movf	_SPI0Buffer^(0+128),w
  8515  09F0  0020               	movlb	0	; select bank0
  8516  09F1  00A4               	movwf	??_CC2500_RxData
  8517  09F2  0824               	movf	??_CC2500_RxData,w
  8518  09F3  0021               	movlb	1	; select bank1
  8519  09F4  00B7               	movwf	_CRC^(0+128)
  8520                           
  8521                           ;CC2500_B1.c: 85: RC4 = 1;
  8522  09F5  0020               	movlb	0	; select bank0
  8523  09F6  160E               	bsf	14,4	;volatile
  8524                           
  8525                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  8526  09F7  0021               	movlb	1	; select bank1
  8527  09F8  1BB7               	btfsc	_CRC^(0+128),7
  8528                           
  8529                           ;CC2500_B1.c: 87: Receive_OK = 1;
  8530  09F9  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8531  09FA                     l5841:	
  8532                           
  8533                           ;CC2500_B1.c: 88: }
  8534                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8535  09FA  3036               	movlw	54
  8536  09FB  3190  2089  3189   	fcall	_CC2500_WriteCommand
  8537                           
  8538                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8539  09FE  303A               	movlw	58
  8540  09FF  3190  2089  3189   	fcall	_CC2500_WriteCommand
  8541                           
  8542                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  8543  0A02  0020               	movlb	0	; select bank0
  8544  0A03  01A2               	clrf	setRF_RxStatus@command
  8545  0A04  3001               	movlw	1
  8546  0A05  319F  27F1         	fcall	_setRF_RxStatus
  8547  0A07  0008               	return
  8548  0A08                     __end_of_CC2500_RxData:	
  8549                           
  8550                           	psect	text36
  8551  1FF1                     __ptext36:	
  8552 ;; *************** function _setRF_RxStatus *****************
  8553 ;; Defined at:
  8554 ;;		line 42 in file "../src/RF_Control_B1.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  rf              1    wreg     unsigned char 
  8557 ;;  command         1    2[BANK0 ] unsigned char 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  rf              1    3[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;		None               void
  8562 ;; Registers used:
  8563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    6
  8576 ;; This function calls:
  8577 ;;		_RfPointSelect
  8578 ;; This function is called by:
  8579 ;;		_CC2500_RxData
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           
  8584                           ;psect for function _setRF_RxStatus
  8585  1FF1                     _setRF_RxStatus:	
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8589                           ;setRF_RxStatus@rf stored from wreg
  8590  1FF1  0020               	movlb	0	; select bank0
  8591  1FF2  00A3               	movwf	setRF_RxStatus@rf
  8592                           
  8593                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  8594  1FF3  0823               	movf	setRF_RxStatus@rf,w
  8595  1FF4  319F  276F         	fcall	_RfPointSelect
  8596                           
  8597                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  8598  1FF6  0021               	movlb	1	; select bank1
  8599  1FF7  083D               	movf	_RF^(0+128),w
  8600  1FF8  0086               	movwf	6
  8601  1FF9  0187               	clrf	7
  8602  1FFA  0020               	movlb	0	; select bank0
  8603  1FFB  0822               	movf	setRF_RxStatus@command,w
  8604  1FFC  1181               	bcf	1,3
  8605  1FFD  1D03               	skipz
  8606  1FFE  1581               	bsf	1,3
  8607  1FFF  0008               	return
  8608  2000                     __end_of_setRF_RxStatus:	
  8609                           
  8610                           	psect	text37
  8611  126A                     __ptext37:	
  8612 ;; *************** function _CC2500_ReadStatus *****************
  8613 ;; Defined at:
  8614 ;;		line 263 in file "../src/CC2500_B1.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  status_addr     1    wreg     unsigned char 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8619 ;; Return value:  Size  Location     Type
  8620 ;;		None               void
  8621 ;; Registers used:
  8622 ;;		wreg, status,2, status,0, pclath, cstack
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;Total ram usage:        2 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    6
  8635 ;; This function calls:
  8636 ;;		_CC2500_ReadByte
  8637 ;;		_CC2500_WriteByte
  8638 ;; This function is called by:
  8639 ;;		_CC2500_RxData
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _CC2500_ReadStatus
  8645  126A                     _CC2500_ReadStatus:	
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8649                           ;CC2500_ReadStatus@status_addr stored from wreg
  8650  126A  0020               	movlb	0	; select bank0
  8651  126B  00A3               	movwf	CC2500_ReadStatus@status_addr
  8652                           
  8653                           ;CC2500_B1.c: 264: RC4 = 0;
  8654  126C  120E               	bcf	14,4	;volatile
  8655                           
  8656                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
  8657  126D  0823               	movf	CC2500_ReadStatus@status_addr,w
  8658  126E  3EC0               	addlw	192
  8659  126F  00A2               	movwf	??_CC2500_ReadStatus
  8660  1270  0822               	movf	??_CC2500_ReadStatus,w
  8661  1271  0021               	movlb	1	; select bank1
  8662  1272  00C1               	movwf	_SPI0Buffer^(0+128)
  8663  1273                     l366:	
  8664                           ;CC2500_B1.c: 267: while (RC2 == 1);
  8665                           
  8666  1273  0020               	movlb	0	; select bank0
  8667  1274  190E               	btfsc	14,2	;volatile
  8668  1275  2A73               	goto	l366
  8669                           
  8670                           ;CC2500_B1.c: 269: CC2500_WriteByte();
  8671  1276  3191  21D1  3192   	fcall	_CC2500_WriteByte
  8672                           
  8673                           ;CC2500_B1.c: 270: CC2500_ReadByte();
  8674  1279  3192  22BD         	fcall	_CC2500_ReadByte
  8675                           
  8676                           ;CC2500_B1.c: 271: RC4 = 1;
  8677  127B  0020               	movlb	0	; select bank0
  8678  127C  160E               	bsf	14,4	;volatile
  8679                           
  8680                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
  8681  127D  0021               	movlb	1	; select bank1
  8682  127E  0841               	movf	_SPI0Buffer^(0+128),w
  8683  127F  0020               	movlb	0	; select bank0
  8684  1280  00A2               	movwf	??_CC2500_ReadStatus
  8685  1281  0822               	movf	??_CC2500_ReadStatus,w
  8686  1282  0021               	movlb	1	; select bank1
  8687  1283  00C5               	movwf	_s_data^(0+128)
  8688  1284  0008               	return
  8689  1285                     __end_of_CC2500_ReadStatus:	
  8690                           
  8691                           	psect	text38
  8692  12BD                     __ptext38:	
  8693 ;; *************** function _CC2500_ReadByte *****************
  8694 ;; Defined at:
  8695 ;;		line 207 in file "../src/CC2500_B1.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8700 ;; Return value:  Size  Location     Type
  8701 ;;		None               void
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        2 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    5
  8716 ;; This function calls:
  8717 ;;		Nothing
  8718 ;; This function is called by:
  8719 ;;		_CC2500_RxData
  8720 ;;		_CC2500_ReadStatus
  8721 ;;		_CC2500_ReadREG
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _CC2500_ReadByte
  8727  12BD                     _CC2500_ReadByte:	
  8728                           
  8729                           ;CC2500_B1.c: 208: unsigned char loop_b;
  8730                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8734  12BD  0020               	movlb	0	; select bank0
  8735  12BE  01A1               	clrf	CC2500_ReadByte@loop_b
  8736  12BF                     L11:	
  8737  12BF  3008               	movlw	8
  8738  12C0  0221               	subwf	CC2500_ReadByte@loop_b,w
  8739  12C1  1803               	btfsc	3,0
  8740  12C2  0008               	return
  8741                           
  8742                           ;CC2500_B1.c: 210: RC1 = 1;
  8743  12C3  148E               	bsf	14,1	;volatile
  8744                           
  8745                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
  8746  12C4  1003               	clrc
  8747  12C5  0021               	movlb	1	; select bank1
  8748  12C6  0DC1               	rlf	_SPI0Buffer^(0+128),f
  8749                           
  8750                           ;CC2500_B1.c: 212: if (RC2 == 1)
  8751  12C7  0020               	movlb	0	; select bank0
  8752  12C8  1D0E               	btfss	14,2	;volatile
  8753  12C9  2ACD               	goto	l5595
  8754                           
  8755                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
  8756  12CA  0021               	movlb	1	; select bank1
  8757  12CB  1441               	bsf	_SPI0Buffer^(0+128),0
  8758  12CC  2AD3               	goto	l5597
  8759  12CD                     l5595:	
  8760                           
  8761                           ;CC2500_B1.c: 214: else
  8762                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
  8763  12CD  30FE               	movlw	254
  8764  12CE  0020               	movlb	0	; select bank0
  8765  12CF  00A0               	movwf	??_CC2500_ReadByte
  8766  12D0  0820               	movf	??_CC2500_ReadByte,w
  8767  12D1  0021               	movlb	1	; select bank1
  8768  12D2  05C1               	andwf	_SPI0Buffer^(0+128),f
  8769  12D3                     l5597:	
  8770                           
  8771                           ;CC2500_B1.c: 216: RC1 = 0;
  8772  12D3  0020               	movlb	0	; select bank0
  8773  12D4  108E               	bcf	14,1	;volatile
  8774  12D5  3001               	movlw	1
  8775  12D6  00A0               	movwf	??_CC2500_ReadByte
  8776  12D7  0820               	movf	??_CC2500_ReadByte,w
  8777  12D8  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8778  12D9  2ABF               	goto	L11
  8779  12DA                     __end_of_CC2500_ReadByte:	
  8780                           
  8781                           	psect	text39
  8782  1EBE                     __ptext39:	
  8783 ;; *************** function _RF_Initialization *****************
  8784 ;; Defined at:
  8785 ;;		line 16 in file "../src/RF_Control_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;		None
  8790 ;; Return value:  Size  Location     Type
  8791 ;;		None               void
  8792 ;; Registers used:
  8793 ;;		wreg, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 0/0
  8796 ;;		On exit  : 0/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        0 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    6
  8806 ;; This function calls:
  8807 ;;		_setRF_Initialization
  8808 ;; This function is called by:
  8809 ;;		_main
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _RF_Initialization
  8815  1EBE                     _RF_Initialization:	
  8816                           
  8817                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8821  1EBE  3001               	movlw	1
  8822  1EBF  319E  26E7         	fcall	_setRF_Initialization
  8823  1EC1  0008               	return
  8824  1EC2                     __end_of_RF_Initialization:	
  8825                           
  8826                           	psect	text40
  8827  1EE7                     __ptext40:	
  8828 ;; *************** function _setRF_Initialization *****************
  8829 ;; Defined at:
  8830 ;;		line 49 in file "../src/RF_Control_B1.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  rf              1    wreg     unsigned char 
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  rf              1    0[COMMON] unsigned char 
  8835 ;; Return value:  Size  Location     Type
  8836 ;;		None               void
  8837 ;; Registers used:
  8838 ;;		wreg
  8839 ;; Tracked objects:
  8840 ;;		On entry : 0/0
  8841 ;;		On exit  : 0/0
  8842 ;;		Unchanged: 0/0
  8843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;Total ram usage:        1 bytes
  8849 ;; Hardware stack levels used:    1
  8850 ;; Hardware stack levels required when called:    5
  8851 ;; This function calls:
  8852 ;;		Nothing
  8853 ;; This function is called by:
  8854 ;;		_RF_Initialization
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _setRF_Initialization
  8860  1EE7                     _setRF_Initialization:	
  8861                           
  8862                           ;RF_Control_B1.c: 52: Tx_Length = 21;
  8863                           
  8864                           ;incstack = 0
  8865                           ; Regs used in _setRF_Initialization: [wreg]
  8866  1EE7  3015               	movlw	21
  8867  1EE8  0020               	movlb	0	; select bank0
  8868  1EE9  00A0               	movwf	??_setRF_Initialization
  8869  1EEA  0820               	movf	??_setRF_Initialization,w
  8870  1EEB  0021               	movlb	1	; select bank1
  8871  1EEC  00C2               	movwf	_Tx_Length^(0+128)
  8872  1EED  0008               	return
  8873  1EEE                     __end_of_setRF_Initialization:	
  8874                           
  8875                           	psect	text41
  8876  124F                     __ptext41:	
  8877 ;; *************** function _Mcu_Initialization *****************
  8878 ;; Defined at:
  8879 ;;		line 30 in file "../src/MCU_B1.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;		None
  8884 ;; Return value:  Size  Location     Type
  8885 ;;		None               void
  8886 ;; Registers used:
  8887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;Total ram usage:        1 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    6
  8900 ;; This function calls:
  8901 ;;		_ADC_Set
  8902 ;;		_Fosc_Set
  8903 ;;		_INT_Set
  8904 ;;		_IOC_Set
  8905 ;;		_IO_Set
  8906 ;;		_TMR0_Set
  8907 ;;		_WDT_Set
  8908 ;; This function is called by:
  8909 ;;		_main
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           
  8914                           ;psect for function _Mcu_Initialization
  8915  124F                     _Mcu_Initialization:	
  8916                           
  8917                           ;MCU_B1.c: 32: Fosc_Set();
  8918                           
  8919                           ;incstack = 0
  8920                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8921  124F  319E  26BA  3192   	fcall	_Fosc_Set
  8922                           
  8923                           ;MCU_B1.c: 34: IO_Set();
  8924  1252  3192  221C  3192   	fcall	_IO_Set
  8925                           
  8926                           ;MCU_B1.c: 36: TMR0_Set();
  8927  1255  319F  27B9  3192   	fcall	_TMR0_Set
  8928                           
  8929                           ;MCU_B1.c: 38: ;;
  8930                           ;MCU_B1.c: 40: ADC_Set();
  8931  1258  319E  26E0  3192   	fcall	_ADC_Set
  8932                           
  8933                           ;MCU_B1.c: 44: INT_Set();
  8934  125B  319E  26C7  3192   	fcall	_INT_Set
  8935                           
  8936                           ;MCU_B1.c: 46: IOC_Set();
  8937  125E  319F  27AC  3192   	fcall	_IOC_Set
  8938                           
  8939                           ;MCU_B1.c: 48: ;;
  8940                           ;MCU_B1.c: 50: ;;
  8941                           ;MCU_B1.c: 52: Memory=&VarMemory;
  8942  1261  3020               	movlw	_VarMemory& (0+255)
  8943  1262  0020               	movlb	0	; select bank0
  8944  1263  00A1               	movwf	??_Mcu_Initialization
  8945  1264  0821               	movf	??_Mcu_Initialization,w
  8946  1265  0021               	movlb	1	; select bank1
  8947  1266  00E6               	movwf	_Memory^(0+128)
  8948                           
  8949                           ;MCU_B1.c: 54: WDT_Set();
  8950  1267  3191  21B9         	fcall	_WDT_Set
  8951  1269  0008               	return
  8952  126A                     __end_of_Mcu_Initialization:	
  8953                           
  8954                           	psect	text42
  8955  11B9                     __ptext42:	
  8956 ;; *************** function _WDT_Set *****************
  8957 ;; Defined at:
  8958 ;;		line 890 in file "../src/MCU_B1.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;		None
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;		None
  8963 ;; Return value:  Size  Location     Type
  8964 ;;		None               void
  8965 ;; Registers used:
  8966 ;;		wreg, fsr1l, fsr1h
  8967 ;; Tracked objects:
  8968 ;;		On entry : 0/0
  8969 ;;		On exit  : 0/0
  8970 ;;		Unchanged: 0/0
  8971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;Total ram usage:        1 bytes
  8977 ;; Hardware stack levels used:    1
  8978 ;; Hardware stack levels required when called:    5
  8979 ;; This function calls:
  8980 ;;		Nothing
  8981 ;; This function is called by:
  8982 ;;		_Mcu_Initialization
  8983 ;; This function uses a non-reentrant model
  8984 ;;
  8985                           
  8986                           
  8987                           ;psect for function _WDT_Set
  8988  11B9                     _WDT_Set:	
  8989                           
  8990                           ;MCU_B1.c: 891: WDTCON = 0b00010111;;
  8991                           
  8992                           ;incstack = 0
  8993                           ; Regs used in _WDT_Set: [wregfsr1]
  8994  11B9  3017               	movlw	23
  8995  11BA  0021               	movlb	1	; select bank1
  8996  11BB  0097               	movwf	23	;volatile
  8997                           
  8998                           ;MCU_B1.c: 892: WDT = &_WDT;
  8999  11BC  30E2               	movlw	__WDT& (0+255)
  9000  11BD  0020               	movlb	0	; select bank0
  9001  11BE  00A0               	movwf	??_WDT_Set
  9002  11BF  0820               	movf	??_WDT_Set,w
  9003  11C0  0021               	movlb	1	; select bank1
  9004  11C1  00E8               	movwf	_WDT^(0+128)
  9005                           
  9006                           ;MCU_B1.c: 893: WDT->Enable = 1;
  9007  11C2  0868               	movf	_WDT^(0+128),w
  9008  11C3  0086               	movwf	6
  9009  11C4  0187               	clrf	7
  9010  11C5  1401               	bsf	1,0
  9011                           
  9012                           ;MCU_B1.c: 894: WDT->Count = 10;
  9013  11C6  300A               	movlw	10
  9014  11C7  0020               	movlb	0	; select bank0
  9015  11C8  00A0               	movwf	??_WDT_Set
  9016  11C9  0021               	movlb	1	; select bank1
  9017  11CA  0A68               	incf	_WDT^(0+128),w
  9018  11CB  0086               	movwf	6
  9019  11CC  0187               	clrf	7
  9020  11CD  0020               	movlb	0	; select bank0
  9021  11CE  0820               	movf	??_WDT_Set,w
  9022  11CF  0081               	movwf	1
  9023  11D0  0008               	return
  9024  11D1                     __end_of_WDT_Set:	
  9025                           
  9026                           	psect	text43
  9027  1FB9                     __ptext43:	
  9028 ;; *************** function _TMR0_Set *****************
  9029 ;; Defined at:
  9030 ;;		line 128 in file "../src/MCU_B1.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;		None
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;		None
  9035 ;; Return value:  Size  Location     Type
  9036 ;;		None               void
  9037 ;; Registers used:
  9038 ;;		wreg, status,2
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;Total ram usage:        1 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    5
  9051 ;; This function calls:
  9052 ;;		Nothing
  9053 ;; This function is called by:
  9054 ;;		_Mcu_Initialization
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           
  9059                           ;psect for function _TMR0_Set
  9060  1FB9                     _TMR0_Set:	
  9061                           
  9062                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9063                           
  9064                           ;incstack = 0
  9065                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9066  1FB9  305A               	movlw	_VarTimer0& (0+255)
  9067  1FBA  0020               	movlb	0	; select bank0
  9068  1FBB  00A0               	movwf	??_TMR0_Set
  9069  1FBC  0820               	movf	??_TMR0_Set,w
  9070  1FBD  0021               	movlb	1	; select bank1
  9071  1FBE  00E7               	movwf	_Timer0^(0+128)
  9072                           
  9073                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9074  1FBF  0195               	clrf	21	;volatile
  9075                           
  9076                           ;MCU_B1.c: 131: TMR0 = (256-90);
  9077  1FC0  30A6               	movlw	166
  9078  1FC1  0020               	movlb	0	; select bank0
  9079  1FC2  0095               	movwf	21	;volatile
  9080                           
  9081                           ;MCU_B1.c: 132: TMR0IE = 1;
  9082  1FC3  168B               	bsf	11,5	;volatile
  9083                           
  9084                           ;MCU_B1.c: 133: GIE = 1;
  9085  1FC4  178B               	bsf	11,7	;volatile
  9086  1FC5  0008               	return
  9087  1FC6                     __end_of_TMR0_Set:	
  9088                           
  9089                           	psect	text44
  9090  121C                     __ptext44:	
  9091 ;; *************** function _IO_Set *****************
  9092 ;; Defined at:
  9093 ;;		line 62 in file "../src/MCU_B1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;		None               void
  9100 ;; Registers used:
  9101 ;;		wreg, status,2
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        0 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    5
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_Mcu_Initialization
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _IO_Set
  9123  121C                     _IO_Set:	
  9124                           
  9125                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _IO_Set: [wreg+status,2]
  9129  121C  3077               	movlw	119
  9130  121D  0021               	movlb	1	; select bank1
  9131  121E  008C               	movwf	12	;volatile
  9132                           
  9133                           ;MCU_B1.c: 91: TRISB = 0b00000111;;
  9134  121F  3007               	movlw	7
  9135  1220  008D               	movwf	13	;volatile
  9136                           
  9137                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9138  1221  300C               	movlw	12
  9139  1222  008E               	movwf	14	;volatile
  9140                           
  9141                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9142  1223  0022               	movlb	2	; select bank2
  9143  1224  018C               	clrf	12	;volatile
  9144                           
  9145                           ;MCU_B1.c: 94: LATB = 0b00000010;;
  9146  1225  3002               	movlw	2
  9147  1226  008D               	movwf	13	;volatile
  9148                           
  9149                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9150  1227  018E               	clrf	14	;volatile
  9151                           
  9152                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
  9153  1228  3022               	movlw	34
  9154  1229  0023               	movlb	3	; select bank3
  9155  122A  008C               	movwf	12	;volatile
  9156                           
  9157                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9158  122B  018D               	clrf	13	;volatile
  9159                           
  9160                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9161  122C  018E               	clrf	14	;volatile
  9162                           
  9163                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9164  122D  3077               	movlw	119
  9165  122E  0020               	movlb	0	; select bank0
  9166  122F  008C               	movwf	12	;volatile
  9167                           
  9168                           ;MCU_B1.c: 100: PORTB = 0b00000111;;
  9169  1230  3007               	movlw	7
  9170  1231  008D               	movwf	13	;volatile
  9171                           
  9172                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9173  1232  300C               	movlw	12
  9174  1233  008E               	movwf	14	;volatile
  9175  1234  0008               	return
  9176  1235                     __end_of_IO_Set:	
  9177                           
  9178                           	psect	text45
  9179  1FAC                     __ptext45:	
  9180 ;; *************** function _IOC_Set *****************
  9181 ;; Defined at:
  9182 ;;		line 267 in file "../src/MCU_B1.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		wreg, status,2
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        0 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    5
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_Mcu_Initialization
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function _IOC_Set
  9212  1FAC                     _IOC_Set:	
  9213                           
  9214                           ;MCU_B1.c: 268: WPUB2 = 0;
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _IOC_Set: [wreg+status,2]
  9218  1FAC  0024               	movlb	4	; select bank4
  9219  1FAD  110D               	bcf	13,2	;volatile
  9220                           
  9221                           ;MCU_B1.c: 276: IOCBP = 0b00000100;
  9222  1FAE  3004               	movlw	4
  9223  1FAF  0027               	movlb	7	; select bank7
  9224  1FB0  0094               	movwf	20	;volatile
  9225                           
  9226                           ;MCU_B1.c: 277: IOCBN = 0b00000100;
  9227  1FB1  3004               	movlw	4
  9228  1FB2  0095               	movwf	21	;volatile
  9229                           
  9230                           ;MCU_B1.c: 286: IOCBF = 0b00000000;
  9231  1FB3  0196               	clrf	22	;volatile
  9232                           
  9233                           ;MCU_B1.c: 288: IOCIE = 1;
  9234  1FB4  158B               	bsf	11,3	;volatile
  9235                           
  9236                           ;MCU_B1.c: 289: IOCIF = 0;
  9237  1FB5  100B               	bcf	11,0	;volatile
  9238                           
  9239                           ;MCU_B1.c: 290: PEIE = 1;
  9240  1FB6  170B               	bsf	11,6	;volatile
  9241                           
  9242                           ;MCU_B1.c: 291: GIE = 1;
  9243  1FB7  178B               	bsf	11,7	;volatile
  9244  1FB8  0008               	return
  9245  1FB9                     __end_of_IOC_Set:	
  9246                           
  9247                           	psect	text46
  9248  1EC7                     __ptext46:	
  9249 ;; *************** function _INT_Set *****************
  9250 ;; Defined at:
  9251 ;;		line 240 in file "../src/MCU_B1.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;		None
  9254 ;; Auto vars:     Size  Location     Type
  9255 ;;		None
  9256 ;; Return value:  Size  Location     Type
  9257 ;;		None               void
  9258 ;; Registers used:
  9259 ;;		None
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;Total ram usage:        0 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    5
  9272 ;; This function calls:
  9273 ;;		Nothing
  9274 ;; This function is called by:
  9275 ;;		_Mcu_Initialization
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _INT_Set
  9281  1EC7                     _INT_Set:	
  9282                           
  9283                           ;MCU_B1.c: 241: WPUB0 = 0;
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in _INT_Set: []
  9287  1EC7  0024               	movlb	4	; select bank4
  9288  1EC8  100D               	bcf	13,0	;volatile
  9289                           
  9290                           ;MCU_B1.c: 242: INTE = 1;
  9291  1EC9  160B               	bsf	11,4	;volatile
  9292                           
  9293                           ;MCU_B1.c: 243: PEIE = 1;
  9294  1ECA  170B               	bsf	11,6	;volatile
  9295                           
  9296                           ;MCU_B1.c: 244: GIE = 1;
  9297  1ECB  178B               	bsf	11,7	;volatile
  9298  1ECC  0008               	return
  9299  1ECD                     __end_of_INT_Set:	
  9300                           
  9301                           	psect	text47
  9302  1EBA                     __ptext47:	
  9303 ;; *************** function _Fosc_Set *****************
  9304 ;; Defined at:
  9305 ;;		line 58 in file "../src/MCU_B1.c"
  9306 ;; Parameters:    Size  Location     Type
  9307 ;;		None
  9308 ;; Auto vars:     Size  Location     Type
  9309 ;;		None
  9310 ;; Return value:  Size  Location     Type
  9311 ;;		None               void
  9312 ;; Registers used:
  9313 ;;		wreg
  9314 ;; Tracked objects:
  9315 ;;		On entry : 0/0
  9316 ;;		On exit  : 0/0
  9317 ;;		Unchanged: 0/0
  9318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;Total ram usage:        0 bytes
  9324 ;; Hardware stack levels used:    1
  9325 ;; Hardware stack levels required when called:    5
  9326 ;; This function calls:
  9327 ;;		Nothing
  9328 ;; This function is called by:
  9329 ;;		_Mcu_Initialization
  9330 ;; This function uses a non-reentrant model
  9331 ;;
  9332                           
  9333                           
  9334                           ;psect for function _Fosc_Set
  9335  1EBA                     _Fosc_Set:	
  9336                           
  9337                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _Fosc_Set: [wreg]
  9341  1EBA  3078               	movlw	120
  9342  1EBB  0021               	movlb	1	; select bank1
  9343  1EBC  0099               	movwf	25	;volatile
  9344  1EBD  0008               	return
  9345  1EBE                     __end_of_Fosc_Set:	
  9346                           
  9347                           	psect	text48
  9348  1EE0                     __ptext48:	
  9349 ;; *************** function _ADC_Set *****************
  9350 ;; Defined at:
  9351 ;;		line 313 in file "../src/MCU_B1.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;		None
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;		None
  9356 ;; Return value:  Size  Location     Type
  9357 ;;		None               void
  9358 ;; Registers used:
  9359 ;;		wreg
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;Total ram usage:        0 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    5
  9372 ;; This function calls:
  9373 ;;		Nothing
  9374 ;; This function is called by:
  9375 ;;		_Mcu_Initialization
  9376 ;; This function uses a non-reentrant model
  9377 ;;
  9378                           
  9379                           
  9380                           ;psect for function _ADC_Set
  9381  1EE0                     _ADC_Set:	
  9382                           
  9383                           ;MCU_B1.c: 314: ADCON1 = 0xf2;
  9384                           
  9385                           ;incstack = 0
  9386                           ; Regs used in _ADC_Set: [wreg]
  9387  1EE0  30F2               	movlw	242
  9388  1EE1  0021               	movlb	1	; select bank1
  9389  1EE2  009E               	movwf	30	;volatile
  9390                           
  9391                           ;MCU_B1.c: 315: FVRCON = 0xc0;
  9392  1EE3  30C0               	movlw	192
  9393  1EE4  0022               	movlb	2	; select bank2
  9394  1EE5  0097               	movwf	23	;volatile
  9395  1EE6  0008               	return
  9396  1EE7                     __end_of_ADC_Set:	
  9397                           
  9398                           	psect	text49
  9399  1F93                     __ptext49:	
  9400 ;; *************** function _LED_Main *****************
  9401 ;; Defined at:
  9402 ;;		line 51 in file "../src/LED_B1.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;		None
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;Total ram usage:        0 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    7
  9423 ;; This function calls:
  9424 ;;		_setLED_Main
  9425 ;; This function is called by:
  9426 ;;		_main
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           
  9431                           ;psect for function _LED_Main
  9432  1F93                     _LED_Main:	
  9433                           
  9434                           ;LED_B1.c: 54: setLED_Main(1);
  9435                           
  9436                           ;incstack = 0
  9437                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9438  1F93  3001               	movlw	1
  9439  1F94  3195  2583  319F   	fcall	_setLED_Main
  9440                           
  9441                           ;LED_B1.c: 57: setLED_Main(2);
  9442  1F97  3002               	movlw	2
  9443  1F98  3195  2583  319F   	fcall	_setLED_Main
  9444                           
  9445                           ;LED_B1.c: 63: setLED_Main(99);
  9446  1F9B  3063               	movlw	99
  9447  1F9C  3195  2583         	fcall	_setLED_Main
  9448  1F9E  0008               	return
  9449  1F9F                     __end_of_LED_Main:	
  9450                           
  9451                           	psect	text50
  9452  1583                     __ptext50:	
  9453 ;; *************** function _setLED_Main *****************
  9454 ;; Defined at:
  9455 ;;		line 214 in file "../src/LED_B1.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  led             1    wreg     unsigned char 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  led             1    4[BANK0 ] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;		None               void
  9462 ;; Registers used:
  9463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;Total ram usage:        3 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    6
  9476 ;; This function calls:
  9477 ;;		_LedPointSelect
  9478 ;; This function is called by:
  9479 ;;		_LED_Main
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _setLED_Main
  9485  1583                     _setLED_Main:	
  9486                           
  9487                           ;incstack = 0
  9488                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9489                           ;setLED_Main@led stored from wreg
  9490  1583  0020               	movlb	0	; select bank0
  9491  1584  00A4               	movwf	setLED_Main@led
  9492                           
  9493                           ;LED_B1.c: 216: LedPointSelect(led);
  9494  1585  0824               	movf	setLED_Main@led,w
  9495  1586  3193  233B  3195   	fcall	_LedPointSelect
  9496                           
  9497                           ;LED_B1.c: 217: if(LED->GO)
  9498  1589  0021               	movlb	1	; select bank1
  9499  158A  083C               	movf	_LED^(0+128),w
  9500  158B  0086               	movwf	6
  9501  158C  0187               	clrf	7
  9502  158D  1C81               	btfss	1,1
  9503  158E  0008               	return
  9504                           
  9505                           ;LED_B1.c: 218: {
  9506                           ;LED_B1.c: 219: LED->Time++;
  9507  158F  0A3C               	incf	_LED^(0+128),w
  9508  1590  0086               	movwf	6
  9509  1591  0187               	clrf	7
  9510  1592  3001               	movlw	1
  9511  1593  0781               	addwf	1,f
  9512  1594  3141               	addfsr 1,1
  9513  1595  1803               	skipnc
  9514  1596  0A81               	incf	1,f
  9515                           
  9516                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
  9517  1597  0A3C               	incf	_LED^(0+128),w
  9518  1598  0086               	movwf	6
  9519  1599  0187               	clrf	7
  9520  159A  3F40               	moviw [0]fsr1
  9521  159B  0020               	movlb	0	; select bank0
  9522  159C  00A2               	movwf	??_setLED_Main
  9523  159D  3F41               	moviw [1]fsr1
  9524  159E  00A3               	movwf	??_setLED_Main+1
  9525  159F  3000               	movlw	0
  9526  15A0  0223               	subwf	??_setLED_Main+1,w
  9527  15A1  3032               	movlw	50
  9528  15A2  1903               	skipnz
  9529  15A3  0222               	subwf	??_setLED_Main,w
  9530  15A4  1C03               	skipc
  9531  15A5  0008               	return
  9532                           
  9533                           ;LED_B1.c: 221: {
  9534                           ;LED_B1.c: 222: LED->Time=0;
  9535  15A6  0021               	movlb	1	; select bank1
  9536  15A7  0A3C               	incf	_LED^(0+128),w
  9537  15A8  0086               	movwf	6
  9538  15A9  0187               	clrf	7
  9539  15AA  3000               	movlw	0
  9540  15AB  3FC0               	movwi [0]fsr1
  9541  15AC  3FC1               	movwi [1]fsr1
  9542                           
  9543                           ;LED_B1.c: 224: if(led == 1)
  9544  15AD  0020               	movlb	0	; select bank0
  9545  15AE  0824               	movf	setLED_Main@led,w
  9546  15AF  3A01               	xorlw	1
  9547  15B0  1D03               	skipz
  9548  15B1  2DB5               	goto	l6383
  9549                           
  9550                           ;LED_B1.c: 225: {
  9551                           ;LED_B1.c: 226: RA3=~RA3;
  9552  15B2  3008               	movlw	8
  9553  15B3  068C               	xorwf	12,f
  9554                           
  9555                           ;LED_B1.c: 227: }
  9556  15B4  0008               	return
  9557  15B5                     l6383:	
  9558                           
  9559                           ;LED_B1.c: 230: else if(led == 2)
  9560  15B5  0824               	movf	setLED_Main@led,w
  9561  15B6  3A02               	xorlw	2
  9562  15B7  1D03               	skipz
  9563  15B8  2DBC               	goto	l6387
  9564                           
  9565                           ;LED_B1.c: 231: {
  9566                           ;LED_B1.c: 232: RC7=~RC7;
  9567  15B9  3080               	movlw	128
  9568  15BA  068E               	xorwf	14,f
  9569                           
  9570                           ;LED_B1.c: 233: }
  9571  15BB  0008               	return
  9572  15BC                     l6387:	
  9573                           
  9574                           ;LED_B1.c: 242: else if(led == 99)
  9575  15BC  0824               	movf	setLED_Main@led,w
  9576  15BD  3A63               	xorlw	99
  9577  15BE  1D03               	skipz
  9578  15BF  0008               	return
  9579                           
  9580                           ;LED_B1.c: 243: {
  9581                           ;LED_B1.c: 244: RB5=~RB5;
  9582  15C0  3020               	movlw	32
  9583  15C1  068D               	xorwf	13,f
  9584  15C2  0008               	return
  9585  15C3                     __end_of_setLED_Main:	
  9586                           
  9587                           	psect	text51
  9588  1F87                     __ptext51:	
  9589 ;; *************** function _LED_Initialization *****************
  9590 ;; Defined at:
  9591 ;;		line 35 in file "../src/LED_B1.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;		None               void
  9598 ;; Registers used:
  9599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    8
  9612 ;; This function calls:
  9613 ;;		_setLED_Initialization
  9614 ;; This function is called by:
  9615 ;;		_main
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           
  9620                           ;psect for function _LED_Initialization
  9621  1F87                     _LED_Initialization:	
  9622                           
  9623                           ;LED_B1.c: 38: setLED_Initialization(1);
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9627  1F87  3001               	movlw	1
  9628  1F88  3190  20EA  319F   	fcall	_setLED_Initialization
  9629                           
  9630                           ;LED_B1.c: 41: setLED_Initialization(2);
  9631  1F8B  3002               	movlw	2
  9632  1F8C  3190  20EA  319F   	fcall	_setLED_Initialization
  9633                           
  9634                           ;LED_B1.c: 47: setLED_Initialization(99);
  9635  1F8F  3063               	movlw	99
  9636  1F90  3190  20EA         	fcall	_setLED_Initialization
  9637  1F92  0008               	return
  9638  1F93                     __end_of_LED_Initialization:	
  9639                           
  9640                           	psect	text52
  9641  10EA                     __ptext52:	
  9642 ;; *************** function _setLED_Initialization *****************
  9643 ;; Defined at:
  9644 ;;		line 67 in file "../src/LED_B1.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;  led             1    wreg     unsigned char 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  led             1    4[BANK0 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        1 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    7
  9665 ;; This function calls:
  9666 ;;		_LedPointSelect
  9667 ;;		_setLED
  9668 ;; This function is called by:
  9669 ;;		_LED_Initialization
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _setLED_Initialization
  9675  10EA                     _setLED_Initialization:	
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9679                           ;setLED_Initialization@led stored from wreg
  9680  10EA  0020               	movlb	0	; select bank0
  9681  10EB  00A4               	movwf	setLED_Initialization@led
  9682                           
  9683                           ;LED_B1.c: 69: LedPointSelect(led);
  9684  10EC  0824               	movf	setLED_Initialization@led,w
  9685  10ED  3193  233B  3190   	fcall	_LedPointSelect
  9686                           
  9687                           ;LED_B1.c: 70: LED->Enable=1;
  9688  10F0  0021               	movlb	1	; select bank1
  9689  10F1  083C               	movf	_LED^(0+128),w
  9690  10F2  0086               	movwf	6
  9691  10F3  0187               	clrf	7
  9692  10F4  1401               	bsf	1,0
  9693                           
  9694                           ;LED_B1.c: 71: setLED(led,0);
  9695  10F5  0020               	movlb	0	; select bank0
  9696  10F6  01A2               	clrf	setLED@command
  9697  10F7  0824               	movf	setLED_Initialization@led,w
  9698  10F8  3188  20E3         	fcall	_setLED
  9699  10FA  0008               	return
  9700  10FB                     __end_of_setLED_Initialization:	
  9701                           
  9702                           	psect	text53
  9703  1647                     __ptext53:	
  9704 ;; *************** function _Flash_Memory_Main *****************
  9705 ;; Defined at:
  9706 ;;		line 792 in file "../src/MCU_B1.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;		None
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;		None
  9711 ;; Return value:  Size  Location     Type
  9712 ;;		None               void
  9713 ;; Registers used:
  9714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;Total ram usage:        0 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    8
  9727 ;; This function calls:
  9728 ;;		_Flash_Memory_Modify
  9729 ;; This function is called by:
  9730 ;;		_main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _Flash_Memory_Main
  9736  1647                     _Flash_Memory_Main:	
  9737                           
  9738                           ;MCU_B1.c: 793: if (Memory->GO) {
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9742  1647  0021               	movlb	1	; select bank1
  9743  1648  0866               	movf	_Memory^(0+128),w
  9744  1649  3E22               	addlw	34
  9745  164A  0086               	movwf	6
  9746  164B  3002               	movlw	2	; select bank4/5
  9747  164C  0087               	movwf	7
  9748  164D  1C81               	btfss	1,1
  9749  164E  0008               	return
  9750                           
  9751                           ;MCU_B1.c: 794: if (Memory->Modify) {
  9752  164F  0866               	movf	_Memory^(0+128),w
  9753  1650  3E22               	addlw	34
  9754  1651  0086               	movwf	6
  9755  1652  3002               	movlw	2	; select bank4/5
  9756  1653  0087               	movwf	7
  9757  1654  1C01               	btfss	1,0
  9758  1655  2E84               	goto	l6839
  9759                           
  9760                           ;MCU_B1.c: 795: Memory->Time++;
  9761  1656  0866               	movf	_Memory^(0+128),w
  9762  1657  3E23               	addlw	35
  9763  1658  0086               	movwf	6
  9764  1659  3002               	movlw	2	; select bank4/5
  9765  165A  0087               	movwf	7
  9766  165B  3001               	movlw	1
  9767  165C  0781               	addwf	1,f
  9768  165D  3141               	addfsr 1,1
  9769  165E  1803               	skipnc
  9770  165F  0A81               	incf	1,f
  9771                           
  9772                           ;MCU_B1.c: 796: if (Memory->Time == 25)
  9773  1660  0866               	movf	_Memory^(0+128),w
  9774  1661  3E23               	addlw	35
  9775  1662  0086               	movwf	6
  9776  1663  3002               	movlw	2	; select bank4/5
  9777  1664  0087               	movwf	7
  9778  1665  3F40               	moviw [0]fsr1
  9779  1666  3A19               	xorlw	25
  9780  1667  1D03               	skipz
  9781  1668  2E6B               	goto	u5845
  9782  1669  3F41               	moviw [1]fsr1
  9783  166A  3A00               	xorlw	0
  9784  166B                     u5845:	
  9785  166B  1D03               	skipz
  9786  166C  0008               	return
  9787                           
  9788                           ;MCU_B1.c: 797: {
  9789                           ;MCU_B1.c: 798: Memory->Time = 0;
  9790  166D  0866               	movf	_Memory^(0+128),w
  9791  166E  3E23               	addlw	35
  9792  166F  0086               	movwf	6
  9793  1670  3002               	movlw	2	; select bank4/5
  9794  1671  0087               	movwf	7
  9795  1672  3000               	movlw	0
  9796  1673  3FC0               	movwi [0]fsr1
  9797  1674  3FC1               	movwi [1]fsr1
  9798                           
  9799                           ;MCU_B1.c: 799: Memory->Modify = 0;
  9800  1675  0866               	movf	_Memory^(0+128),w
  9801  1676  3E22               	addlw	34
  9802  1677  0086               	movwf	6
  9803  1678  3002               	movlw	2	; select bank4/5
  9804  1679  0087               	movwf	7
  9805  167A  1001               	bcf	1,0
  9806                           
  9807                           ;MCU_B1.c: 800: Memory->GO = 0;
  9808  167B  0866               	movf	_Memory^(0+128),w
  9809  167C  3E22               	addlw	34
  9810  167D  0086               	movwf	6
  9811  167E  3002               	movlw	2	; select bank4/5
  9812  167F  0087               	movwf	7
  9813  1680  1081               	bcf	1,1
  9814                           
  9815                           ;MCU_B1.c: 801: Flash_Memory_Modify();
  9816  1681  318A  2273         	fcall	_Flash_Memory_Modify
  9817                           
  9818                           ;MCU_B1.c: 803: }
  9819                           ;MCU_B1.c: 804: } else {
  9820  1683  0008               	return
  9821  1684                     l6839:	
  9822                           
  9823                           ;MCU_B1.c: 805: Memory->GO = 0;
  9824  1684  0021               	movlb	1	; select bank1
  9825  1685  0866               	movf	_Memory^(0+128),w
  9826  1686  3E22               	addlw	34
  9827  1687  0086               	movwf	6
  9828  1688  3002               	movlw	2	; select bank4/5
  9829  1689  0087               	movwf	7
  9830  168A  1081               	bcf	1,1
  9831  168B  0008               	return
  9832  168C                     __end_of_Flash_Memory_Main:	
  9833                           
  9834                           	psect	text54
  9835  0A73                     __ptext54:	
  9836 ;; *************** function _Flash_Memory_Modify *****************
  9837 ;; Defined at:
  9838 ;;		line 862 in file "../src/MCU_B1.c"
  9839 ;; Parameters:    Size  Location     Type
  9840 ;;		None
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  i               1    6[BANK0 ] unsigned char 
  9843 ;; Return value:  Size  Location     Type
  9844 ;;		None               void
  9845 ;; Registers used:
  9846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9855 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9856 ;;Total ram usage:        3 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    7
  9859 ;; This function calls:
  9860 ;;		_Flash_Memory_Erasing
  9861 ;;		_Flash_Memory_Read
  9862 ;;		_Flash_Memory_Write
  9863 ;; This function is called by:
  9864 ;;		_Flash_Memory_Main
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           
  9869                           ;psect for function _Flash_Memory_Modify
  9870  0A73                     _Flash_Memory_Modify:	
  9871                           
  9872                           ;MCU_B1.c: 863: char i;
  9873                           ;MCU_B1.c: 864: for (i = 0; i < 32; i++) {
  9874                           
  9875                           ;incstack = 0
  9876                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9877  0A73  0020               	movlb	0	; select bank0
  9878  0A74  01A6               	clrf	Flash_Memory_Modify@i
  9879  0A75  3020               	movlw	32
  9880  0A76  0226               	subwf	Flash_Memory_Modify@i,w
  9881  0A77  1803               	btfsc	3,0
  9882  0A78  2A92               	goto	l6467
  9883  0A79                     l6461:	
  9884                           
  9885                           ;MCU_B1.c: 865: Memory->Data[i] = Flash_Memory_Read(i);
  9886  0A79  0826               	movf	Flash_Memory_Modify@i,w
  9887  0A7A  3192  2203  318A   	fcall	_Flash_Memory_Read
  9888  0A7D  0020               	movlb	0	; select bank0
  9889  0A7E  00A4               	movwf	??_Flash_Memory_Modify
  9890  0A7F  0826               	movf	Flash_Memory_Modify@i,w
  9891  0A80  0021               	movlb	1	; select bank1
  9892  0A81  0766               	addwf	_Memory^(0+128),w
  9893  0A82  0020               	movlb	0	; select bank0
  9894  0A83  00A5               	movwf	??_Flash_Memory_Modify+1
  9895  0A84  0825               	movf	??_Flash_Memory_Modify+1,w
  9896  0A85  0086               	movwf	6
  9897  0A86  3002               	movlw	2	; select bank4/5
  9898  0A87  0087               	movwf	7
  9899  0A88  0824               	movf	??_Flash_Memory_Modify,w
  9900  0A89  0081               	movwf	1
  9901  0A8A  3001               	movlw	1
  9902  0A8B  00A4               	movwf	??_Flash_Memory_Modify
  9903  0A8C  0824               	movf	??_Flash_Memory_Modify,w
  9904  0A8D  07A6               	addwf	Flash_Memory_Modify@i,f
  9905  0A8E  3020               	movlw	32
  9906  0A8F  0226               	subwf	Flash_Memory_Modify@i,w
  9907  0A90  1C03               	skipc
  9908  0A91  2A79               	goto	l6461
  9909  0A92                     l6467:	
  9910                           
  9911                           ;MCU_B1.c: 866: }
  9912                           ;MCU_B1.c: 867: Memory->Data[0]=product->Data[12];
  9913  0A92  087D               	movf	_product,w
  9914  0A93  3E0C               	addlw	12
  9915  0A94  0086               	movwf	6
  9916  0A95  3001               	movlw	1	; select bank2/3
  9917  0A96  0087               	movwf	7
  9918  0A97  0801               	movf	1,w
  9919  0A98  00A4               	movwf	??_Flash_Memory_Modify
  9920  0A99  0021               	movlb	1	; select bank1
  9921  0A9A  0866               	movf	_Memory^(0+128),w
  9922  0A9B  0086               	movwf	6
  9923  0A9C  3002               	movlw	2	; select bank4/5
  9924  0A9D  0087               	movwf	7
  9925  0A9E  0020               	movlb	0	; select bank0
  9926  0A9F  0824               	movf	??_Flash_Memory_Modify,w
  9927  0AA0  0081               	movwf	1
  9928                           
  9929                           ;MCU_B1.c: 868: Memory->Data[1]=product->Data[13];
  9930  0AA1  087D               	movf	_product,w
  9931  0AA2  3E0D               	addlw	13
  9932  0AA3  0086               	movwf	6
  9933  0AA4  3001               	movlw	1	; select bank2/3
  9934  0AA5  0087               	movwf	7
  9935  0AA6  0801               	movf	1,w
  9936  0AA7  00A4               	movwf	??_Flash_Memory_Modify
  9937  0AA8  0021               	movlb	1	; select bank1
  9938  0AA9  0A66               	incf	_Memory^(0+128),w
  9939  0AAA  0086               	movwf	6
  9940  0AAB  3002               	movlw	2	; select bank4/5
  9941  0AAC  0087               	movwf	7
  9942  0AAD  0020               	movlb	0	; select bank0
  9943  0AAE  0824               	movf	??_Flash_Memory_Modify,w
  9944  0AAF  0081               	movwf	1
  9945                           
  9946                           ;MCU_B1.c: 869: Memory->Data[2]=product->Data[14];
  9947  0AB0  087D               	movf	_product,w
  9948  0AB1  3E0E               	addlw	14
  9949  0AB2  0086               	movwf	6
  9950  0AB3  3001               	movlw	1	; select bank2/3
  9951  0AB4  0087               	movwf	7
  9952  0AB5  0801               	movf	1,w
  9953  0AB6  00A4               	movwf	??_Flash_Memory_Modify
  9954  0AB7  0021               	movlb	1	; select bank1
  9955  0AB8  0866               	movf	_Memory^(0+128),w
  9956  0AB9  3E02               	addlw	2
  9957  0ABA  0086               	movwf	6
  9958  0ABB  3002               	movlw	2	; select bank4/5
  9959  0ABC  0087               	movwf	7
  9960  0ABD  0020               	movlb	0	; select bank0
  9961  0ABE  0824               	movf	??_Flash_Memory_Modify,w
  9962  0ABF  0081               	movwf	1
  9963                           
  9964                           ;MCU_B1.c: 875: if (Memory->LoopSave) {
  9965  0AC0  0021               	movlb	1	; select bank1
  9966  0AC1  0866               	movf	_Memory^(0+128),w
  9967  0AC2  3E22               	addlw	34
  9968  0AC3  0086               	movwf	6
  9969  0AC4  3002               	movlw	2	; select bank4/5
  9970  0AC5  0087               	movwf	7
  9971  0AC6  1D01               	btfss	1,2
  9972  0AC7  2AD9               	goto	l6471
  9973                           
  9974                           ;MCU_B1.c: 876: Memory->LoopSave = 0;
  9975  0AC8  0866               	movf	_Memory^(0+128),w
  9976  0AC9  3E22               	addlw	34
  9977  0ACA  0086               	movwf	6
  9978  0ACB  3002               	movlw	2	; select bank4/5
  9979  0ACC  0087               	movwf	7
  9980  0ACD  1101               	bcf	1,2
  9981                           
  9982                           ;MCU_B1.c: 877: myMain->FirstOpen = 0;
  9983  0ACE  0869               	movf	_myMain^(0+128),w
  9984  0ACF  0086               	movwf	6
  9985  0AD0  3001               	movlw	1	; select bank2/3
  9986  0AD1  0087               	movwf	7
  9987  0AD2  1281               	bcf	1,5
  9988                           
  9989                           ;MCU_B1.c: 878: myMain->First = 0;
  9990  0AD3  0869               	movf	_myMain^(0+128),w
  9991  0AD4  3E03               	addlw	3
  9992  0AD5  0086               	movwf	6
  9993  0AD6  3001               	movlw	1	; select bank2/3
  9994  0AD7  0087               	movwf	7
  9995  0AD8  1081               	bcf	1,1
  9996  0AD9                     l6471:	
  9997                           
  9998                           ;MCU_B1.c: 880: }
  9999                           ;MCU_B1.c: 881: GIE = 0;
 10000  0AD9  138B               	bcf	11,7	;volatile
 10001                           
 10002                           ;MCU_B1.c: 882: Flash_Memory_Erasing();
 10003  0ADA  319F  277B  318A   	fcall	_Flash_Memory_Erasing
 10004                           
 10005                           ;MCU_B1.c: 883: Flash_Memory_Write();
 10006  0ADD  3194  24AB         	fcall	_Flash_Memory_Write
 10007                           
 10008                           ;MCU_B1.c: 884: GIE = 1;
 10009  0ADF  178B               	bsf	11,7	;volatile
 10010  0AE0  0008               	return
 10011  0AE1                     __end_of_Flash_Memory_Modify:	
 10012                           
 10013                           	psect	text55
 10014  1F7B                     __ptext55:	
 10015 ;; *************** function _Flash_Memory_Erasing *****************
 10016 ;; Defined at:
 10017 ;;		line 851 in file "../src/MCU_B1.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;		None
 10020 ;; Auto vars:     Size  Location     Type
 10021 ;;		None
 10022 ;; Return value:  Size  Location     Type
 10023 ;;		None               void
 10024 ;; Registers used:
 10025 ;;		wreg, status,2, status,0, pclath, cstack
 10026 ;; Tracked objects:
 10027 ;;		On entry : 0/0
 10028 ;;		On exit  : 0/0
 10029 ;;		Unchanged: 0/0
 10030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;Total ram usage:        0 bytes
 10036 ;; Hardware stack levels used:    1
 10037 ;; Hardware stack levels required when called:    6
 10038 ;; This function calls:
 10039 ;;		_Flash_Memory_Unlock
 10040 ;; This function is called by:
 10041 ;;		_Flash_Memory_Modify
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function _Flash_Memory_Erasing
 10047  1F7B                     _Flash_Memory_Erasing:	
 10048                           
 10049                           ;MCU_B1.c: 852: CFGS = 0;
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10053  1F7B  0023               	movlb	3	; select bank3
 10054  1F7C  1315               	bcf	21,6	;volatile
 10055                           
 10056                           ;MCU_B1.c: 853: PMADRH = 0x30;
 10057  1F7D  3030               	movlw	48
 10058  1F7E  0092               	movwf	18	;volatile
 10059                           
 10060                           ;MCU_B1.c: 854: PMADRL = 0x00;
 10061  1F7F  0191               	clrf	17	;volatile
 10062                           
 10063                           ;MCU_B1.c: 855: FREE = 1;
 10064  1F80  1615               	bsf	21,4	;volatile
 10065                           
 10066                           ;MCU_B1.c: 856: WREN = 1;
 10067  1F81  1515               	bsf	21,2	;volatile
 10068                           
 10069                           ;MCU_B1.c: 857: Flash_Memory_Unlock();
 10070  1F82  319F  270E         	fcall	_Flash_Memory_Unlock
 10071                           
 10072                           ;MCU_B1.c: 858: WREN = 0;
 10073  1F84  0023               	movlb	3	; select bank3
 10074  1F85  1115               	bcf	21,2	;volatile
 10075  1F86  0008               	return
 10076  1F87                     __end_of_Flash_Memory_Erasing:	
 10077                           
 10078                           	psect	text56
 10079  030B                     __ptext56:	
 10080 ;; *************** function _Flash_Memory_Initialization *****************
 10081 ;; Defined at:
 10082 ;;		line 751 in file "../src/MCU_B1.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;  i               1   62[BANK0 ] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;		None               void
 10089 ;; Registers used:
 10090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        2 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    8
 10103 ;; This function calls:
 10104 ;;		_Flash_Memory_Read
 10105 ;;		_Flash_Memory_Write
 10106 ;;		_setPercentValue
 10107 ;; This function is called by:
 10108 ;;		_main
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _Flash_Memory_Initialization
 10114  030B                     _Flash_Memory_Initialization:	
 10115                           
 10116                           ;MCU_B1.c: 752: char i;
 10117                           ;MCU_B1.c: 753: if (Flash_Memory_Read(31) == 0xaa) {
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10121  030B  301F               	movlw	31
 10122  030C  3192  2203  3183   	fcall	_Flash_Memory_Read
 10123  030F  3AAA               	xorlw	170
 10124  0310  1D03               	skipz
 10125  0311  2B84               	goto	l6795
 10126                           
 10127                           ;MCU_B1.c: 754: product->Data[12] = Flash_Memory_Read(0);
 10128  0312  3000               	movlw	0
 10129  0313  3192  2203  3183   	fcall	_Flash_Memory_Read
 10130  0316  0020               	movlb	0	; select bank0
 10131  0317  00DD               	movwf	??_Flash_Memory_Initialization
 10132  0318  087D               	movf	_product,w
 10133  0319  3E0C               	addlw	12
 10134  031A  0086               	movwf	6
 10135  031B  3001               	movlw	1	; select bank2/3
 10136  031C  0087               	movwf	7
 10137  031D  085D               	movf	??_Flash_Memory_Initialization,w
 10138  031E  0081               	movwf	1
 10139                           
 10140                           ;MCU_B1.c: 755: product->Data[13] = Flash_Memory_Read(1);
 10141  031F  3001               	movlw	1
 10142  0320  3192  2203  3183   	fcall	_Flash_Memory_Read
 10143  0323  0020               	movlb	0	; select bank0
 10144  0324  00DD               	movwf	??_Flash_Memory_Initialization
 10145  0325  087D               	movf	_product,w
 10146  0326  3E0D               	addlw	13
 10147  0327  0086               	movwf	6
 10148  0328  3001               	movlw	1	; select bank2/3
 10149  0329  0087               	movwf	7
 10150  032A  085D               	movf	??_Flash_Memory_Initialization,w
 10151  032B  0081               	movwf	1
 10152                           
 10153                           ;MCU_B1.c: 756: product->Data[14] = Flash_Memory_Read(2);
 10154  032C  3002               	movlw	2
 10155  032D  3192  2203  3183   	fcall	_Flash_Memory_Read
 10156  0330  0020               	movlb	0	; select bank0
 10157  0331  00DD               	movwf	??_Flash_Memory_Initialization
 10158  0332  087D               	movf	_product,w
 10159  0333  3E0E               	addlw	14
 10160  0334  0086               	movwf	6
 10161  0335  3001               	movlw	1	; select bank2/3
 10162  0336  0087               	movwf	7
 10163  0337  085D               	movf	??_Flash_Memory_Initialization,w
 10164  0338  0081               	movwf	1
 10165                           
 10166                           ;MCU_B1.c: 762: i = setPercentValue(((char)(65*1.5)));
 10167  0339  3061               	movlw	97
 10168  033A  3196  26D1  3183   	fcall	_setPercentValue
 10169  033D  0020               	movlb	0	; select bank0
 10170  033E  00DD               	movwf	??_Flash_Memory_Initialization
 10171  033F  085D               	movf	??_Flash_Memory_Initialization,w
 10172  0340  00DE               	movwf	Flash_Memory_Initialization@i
 10173                           
 10174                           ;MCU_B1.c: 763: product->Data[21] = i;
 10175  0341  085E               	movf	Flash_Memory_Initialization@i,w
 10176  0342  00DD               	movwf	??_Flash_Memory_Initialization
 10177  0343  087D               	movf	_product,w
 10178  0344  3E15               	addlw	21
 10179  0345  0086               	movwf	6
 10180  0346  3001               	movlw	1	; select bank2/3
 10181  0347  0087               	movwf	7
 10182  0348  085D               	movf	??_Flash_Memory_Initialization,w
 10183  0349  0081               	movwf	1
 10184                           
 10185                           ;MCU_B1.c: 764: product->Data[22] = i;
 10186  034A  085E               	movf	Flash_Memory_Initialization@i,w
 10187  034B  00DD               	movwf	??_Flash_Memory_Initialization
 10188  034C  087D               	movf	_product,w
 10189  034D  3E16               	addlw	22
 10190  034E  0086               	movwf	6
 10191  034F  3001               	movlw	1	; select bank2/3
 10192  0350  0087               	movwf	7
 10193  0351  085D               	movf	??_Flash_Memory_Initialization,w
 10194  0352  0081               	movwf	1
 10195                           
 10196                           ;MCU_B1.c: 765: product->Data[23] = i;
 10197  0353  085E               	movf	Flash_Memory_Initialization@i,w
 10198  0354  00DD               	movwf	??_Flash_Memory_Initialization
 10199  0355  087D               	movf	_product,w
 10200  0356  3E17               	addlw	23
 10201  0357  0086               	movwf	6
 10202  0358  3001               	movlw	1	; select bank2/3
 10203  0359  0087               	movwf	7
 10204  035A  085D               	movf	??_Flash_Memory_Initialization,w
 10205  035B  0081               	movwf	1
 10206                           
 10207                           ;MCU_B1.c: 767: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10208  035C  087D               	movf	_product,w
 10209  035D  3E0C               	addlw	12
 10210  035E  0086               	movwf	6
 10211  035F  3001               	movlw	1	; select bank2/3
 10212  0360  0087               	movwf	7
 10213  0361  0801               	movf	1,w
 10214  0362  3AFF               	xorlw	255
 10215  0363  1D03               	skipz
 10216  0364  0008               	return
 10217  0365  087D               	movf	_product,w
 10218  0366  3E0D               	addlw	13
 10219  0367  0086               	movwf	6
 10220  0368  3001               	movlw	1	; select bank2/3
 10221  0369  0087               	movwf	7
 10222  036A  0801               	movf	1,w
 10223  036B  3AFF               	xorlw	255
 10224  036C  1D03               	skipz
 10225  036D  0008               	return
 10226  036E  087D               	movf	_product,w
 10227  036F  3E0E               	addlw	14
 10228  0370  0086               	movwf	6
 10229  0371  3001               	movlw	1	; select bank2/3
 10230  0372  0087               	movwf	7
 10231  0373  0801               	movf	1,w
 10232  0374  3AFF               	xorlw	255
 10233  0375  1D03               	skipz
 10234  0376  0008               	return
 10235                           
 10236                           ;MCU_B1.c: 768: myMain->FirstOpen = 1;
 10237  0377  0021               	movlb	1	; select bank1
 10238  0378  0869               	movf	_myMain^(0+128),w
 10239  0379  0086               	movwf	6
 10240  037A  3001               	movlw	1	; select bank2/3
 10241  037B  0087               	movwf	7
 10242  037C  1681               	bsf	1,5
 10243                           
 10244                           ;MCU_B1.c: 769: myMain->First = 1;
 10245  037D  0869               	movf	_myMain^(0+128),w
 10246  037E  3E03               	addlw	3
 10247  037F  0086               	movwf	6
 10248  0380  3001               	movlw	1	; select bank2/3
 10249  0381  0087               	movwf	7
 10250  0382  1481               	bsf	1,1
 10251                           
 10252                           ;MCU_B1.c: 770: }
 10253                           ;MCU_B1.c: 771: } else {
 10254  0383  0008               	return
 10255  0384                     l6795:	
 10256                           
 10257                           ;MCU_B1.c: 772: i = setPercentValue(((char)(65*1.5)));
 10258  0384  3061               	movlw	97
 10259  0385  3196  26D1  3183   	fcall	_setPercentValue
 10260  0388  0020               	movlb	0	; select bank0
 10261  0389  00DD               	movwf	??_Flash_Memory_Initialization
 10262  038A  085D               	movf	??_Flash_Memory_Initialization,w
 10263  038B  00DE               	movwf	Flash_Memory_Initialization@i
 10264                           
 10265                           ;MCU_B1.c: 773: Memory->Data[0]=0xff;
 10266  038C  30FF               	movlw	255
 10267  038D  00DD               	movwf	??_Flash_Memory_Initialization
 10268  038E  0021               	movlb	1	; select bank1
 10269  038F  0866               	movf	_Memory^(0+128),w
 10270  0390  0086               	movwf	6
 10271  0391  3002               	movlw	2	; select bank4/5
 10272  0392  0087               	movwf	7
 10273  0393  0020               	movlb	0	; select bank0
 10274  0394  085D               	movf	??_Flash_Memory_Initialization,w
 10275  0395  0081               	movwf	1
 10276                           
 10277                           ;MCU_B1.c: 774: Memory->Data[1]=0xff;
 10278  0396  30FF               	movlw	255
 10279  0397  00DD               	movwf	??_Flash_Memory_Initialization
 10280  0398  0021               	movlb	1	; select bank1
 10281  0399  0A66               	incf	_Memory^(0+128),w
 10282  039A  0086               	movwf	6
 10283  039B  3002               	movlw	2	; select bank4/5
 10284  039C  0087               	movwf	7
 10285  039D  0020               	movlb	0	; select bank0
 10286  039E  085D               	movf	??_Flash_Memory_Initialization,w
 10287  039F  0081               	movwf	1
 10288                           
 10289                           ;MCU_B1.c: 775: Memory->Data[2]=0xff;
 10290  03A0  30FF               	movlw	255
 10291  03A1  00DD               	movwf	??_Flash_Memory_Initialization
 10292  03A2  0021               	movlb	1	; select bank1
 10293  03A3  0866               	movf	_Memory^(0+128),w
 10294  03A4  3E02               	addlw	2
 10295  03A5  0086               	movwf	6
 10296  03A6  3002               	movlw	2	; select bank4/5
 10297  03A7  0087               	movwf	7
 10298  03A8  0020               	movlb	0	; select bank0
 10299  03A9  085D               	movf	??_Flash_Memory_Initialization,w
 10300  03AA  0081               	movwf	1
 10301                           
 10302                           ;MCU_B1.c: 776: Memory->Data[3]=0xff;
 10303  03AB  30FF               	movlw	255
 10304  03AC  00DD               	movwf	??_Flash_Memory_Initialization
 10305  03AD  0021               	movlb	1	; select bank1
 10306  03AE  0866               	movf	_Memory^(0+128),w
 10307  03AF  3E03               	addlw	3
 10308  03B0  0086               	movwf	6
 10309  03B1  3002               	movlw	2	; select bank4/5
 10310  03B2  0087               	movwf	7
 10311  03B3  0020               	movlb	0	; select bank0
 10312  03B4  085D               	movf	??_Flash_Memory_Initialization,w
 10313  03B5  0081               	movwf	1
 10314                           
 10315                           ;MCU_B1.c: 777: Memory->Data[4]=0xff;
 10316  03B6  30FF               	movlw	255
 10317  03B7  00DD               	movwf	??_Flash_Memory_Initialization
 10318  03B8  0021               	movlb	1	; select bank1
 10319  03B9  0866               	movf	_Memory^(0+128),w
 10320  03BA  3E04               	addlw	4
 10321  03BB  0086               	movwf	6
 10322  03BC  3002               	movlw	2	; select bank4/5
 10323  03BD  0087               	movwf	7
 10324  03BE  0020               	movlb	0	; select bank0
 10325  03BF  085D               	movf	??_Flash_Memory_Initialization,w
 10326  03C0  0081               	movwf	1
 10327                           
 10328                           ;MCU_B1.c: 778: Memory->Data[5]=0xff;
 10329  03C1  30FF               	movlw	255
 10330  03C2  00DD               	movwf	??_Flash_Memory_Initialization
 10331  03C3  0021               	movlb	1	; select bank1
 10332  03C4  0866               	movf	_Memory^(0+128),w
 10333  03C5  3E05               	addlw	5
 10334  03C6  0086               	movwf	6
 10335  03C7  3002               	movlw	2	; select bank4/5
 10336  03C8  0087               	movwf	7
 10337  03C9  0020               	movlb	0	; select bank0
 10338  03CA  085D               	movf	??_Flash_Memory_Initialization,w
 10339  03CB  0081               	movwf	1
 10340                           
 10341                           ;MCU_B1.c: 779: Memory->Data[31]=0xaa;
 10342  03CC  30AA               	movlw	170
 10343  03CD  00DD               	movwf	??_Flash_Memory_Initialization
 10344  03CE  0021               	movlb	1	; select bank1
 10345  03CF  0866               	movf	_Memory^(0+128),w
 10346  03D0  3E1F               	addlw	31
 10347  03D1  0086               	movwf	6
 10348  03D2  3002               	movlw	2	; select bank4/5
 10349  03D3  0087               	movwf	7
 10350  03D4  0020               	movlb	0	; select bank0
 10351  03D5  085D               	movf	??_Flash_Memory_Initialization,w
 10352  03D6  0081               	movwf	1
 10353                           
 10354                           ;MCU_B1.c: 780: product->Data[21] = i;
 10355  03D7  085E               	movf	Flash_Memory_Initialization@i,w
 10356  03D8  00DD               	movwf	??_Flash_Memory_Initialization
 10357  03D9  087D               	movf	_product,w
 10358  03DA  3E15               	addlw	21
 10359  03DB  0086               	movwf	6
 10360  03DC  3001               	movlw	1	; select bank2/3
 10361  03DD  0087               	movwf	7
 10362  03DE  085D               	movf	??_Flash_Memory_Initialization,w
 10363  03DF  0081               	movwf	1
 10364                           
 10365                           ;MCU_B1.c: 781: product->Data[22] = i;
 10366  03E0  085E               	movf	Flash_Memory_Initialization@i,w
 10367  03E1  00DD               	movwf	??_Flash_Memory_Initialization
 10368  03E2  087D               	movf	_product,w
 10369  03E3  3E16               	addlw	22
 10370  03E4  0086               	movwf	6
 10371  03E5  3001               	movlw	1	; select bank2/3
 10372  03E6  0087               	movwf	7
 10373  03E7  085D               	movf	??_Flash_Memory_Initialization,w
 10374  03E8  0081               	movwf	1
 10375                           
 10376                           ;MCU_B1.c: 782: product->Data[23] = i;
 10377  03E9  085E               	movf	Flash_Memory_Initialization@i,w
 10378  03EA  00DD               	movwf	??_Flash_Memory_Initialization
 10379  03EB  087D               	movf	_product,w
 10380  03EC  3E17               	addlw	23
 10381  03ED  0086               	movwf	6
 10382  03EE  3001               	movlw	1	; select bank2/3
 10383  03EF  0087               	movwf	7
 10384  03F0  085D               	movf	??_Flash_Memory_Initialization,w
 10385  03F1  0081               	movwf	1
 10386                           
 10387                           ;MCU_B1.c: 783: GIE = 0;
 10388  03F2  138B               	bcf	11,7	;volatile
 10389                           
 10390                           ;MCU_B1.c: 784: Flash_Memory_Write();
 10391  03F3  3194  24AB         	fcall	_Flash_Memory_Write
 10392                           
 10393                           ;MCU_B1.c: 785: GIE = 1;
 10394  03F5  178B               	bsf	11,7	;volatile
 10395                           
 10396                           ;MCU_B1.c: 786: myMain->FirstOpen = 1;
 10397  03F6  0021               	movlb	1	; select bank1
 10398  03F7  0869               	movf	_myMain^(0+128),w
 10399  03F8  0086               	movwf	6
 10400  03F9  3001               	movlw	1	; select bank2/3
 10401  03FA  0087               	movwf	7
 10402  03FB  1681               	bsf	1,5
 10403                           
 10404                           ;MCU_B1.c: 787: myMain->First = 1;
 10405  03FC  0869               	movf	_myMain^(0+128),w
 10406  03FD  3E03               	addlw	3
 10407  03FE  0086               	movwf	6
 10408  03FF  3001               	movlw	1	; select bank2/3
 10409  0400  0087               	movwf	7
 10410  0401  1481               	bsf	1,1
 10411  0402  0008               	return
 10412  0403                     __end_of_Flash_Memory_Initialization:	
 10413                           
 10414                           	psect	text57
 10415  14AB                     __ptext57:	
 10416 ;; *************** function _Flash_Memory_Write *****************
 10417 ;; Defined at:
 10418 ;;		line 832 in file "../src/MCU_B1.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  i               1    1[BANK0 ] unsigned char 
 10423 ;; Return value:  Size  Location     Type
 10424 ;;		None               void
 10425 ;; Registers used:
 10426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;Total ram usage:        2 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    6
 10439 ;; This function calls:
 10440 ;;		_Flash_Memory_Unlock
 10441 ;; This function is called by:
 10442 ;;		_Flash_Memory_Initialization
 10443 ;;		_Flash_Memory_Modify
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _Flash_Memory_Write
 10449  14AB                     _Flash_Memory_Write:	
 10450                           
 10451                           ;MCU_B1.c: 833: char i;
 10452                           ;MCU_B1.c: 834: CFGS = 0;
 10453                           
 10454                           ;incstack = 0
 10455                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10456  14AB  0023               	movlb	3	; select bank3
 10457  14AC  1315               	bcf	21,6	;volatile
 10458                           
 10459                           ;MCU_B1.c: 835: PMADRH = 0x30;
 10460  14AD  3030               	movlw	48
 10461  14AE  0092               	movwf	18	;volatile
 10462                           
 10463                           ;MCU_B1.c: 836: PMDATH = 0;
 10464  14AF  0194               	clrf	20	;volatile
 10465                           
 10466                           ;MCU_B1.c: 837: FREE = 0;
 10467  14B0  1215               	bcf	21,4	;volatile
 10468                           
 10469                           ;MCU_B1.c: 838: LWLO = 1;
 10470  14B1  1695               	bsf	21,5	;volatile
 10471                           
 10472                           ;MCU_B1.c: 839: WREN = 1;
 10473  14B2  1515               	bsf	21,2	;volatile
 10474                           
 10475                           ;MCU_B1.c: 840: for (i = 0; i < 32; i++) {
 10476  14B3  0020               	movlb	0	; select bank0
 10477  14B4  01A1               	clrf	Flash_Memory_Write@i
 10478  14B5  3020               	movlw	32
 10479  14B6  0221               	subwf	Flash_Memory_Write@i,w
 10480  14B7  1803               	btfsc	3,0
 10481  14B8  2CD5               	goto	l1382
 10482  14B9                     l5949:	
 10483                           
 10484                           ;MCU_B1.c: 841: PMADRL = i;
 10485  14B9  0821               	movf	Flash_Memory_Write@i,w
 10486  14BA  0023               	movlb	3	; select bank3
 10487  14BB  0091               	movwf	17	;volatile
 10488                           
 10489                           ;MCU_B1.c: 842: PMDATL = Memory->Data[i];
 10490  14BC  0020               	movlb	0	; select bank0
 10491  14BD  0821               	movf	Flash_Memory_Write@i,w
 10492  14BE  0021               	movlb	1	; select bank1
 10493  14BF  0766               	addwf	_Memory^(0+128),w
 10494  14C0  0020               	movlb	0	; select bank0
 10495  14C1  00A0               	movwf	??_Flash_Memory_Write
 10496  14C2  0820               	movf	??_Flash_Memory_Write,w
 10497  14C3  0086               	movwf	6
 10498  14C4  3002               	movlw	2	; select bank4/5
 10499  14C5  0087               	movwf	7
 10500  14C6  0801               	movf	1,w
 10501  14C7  0023               	movlb	3	; select bank3
 10502  14C8  0093               	movwf	19	;volatile
 10503                           
 10504                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 10505  14C9  319F  270E  3194   	fcall	_Flash_Memory_Unlock
 10506  14CC  3001               	movlw	1
 10507  14CD  0020               	movlb	0	; select bank0
 10508  14CE  00A0               	movwf	??_Flash_Memory_Write
 10509  14CF  0820               	movf	??_Flash_Memory_Write,w
 10510  14D0  07A1               	addwf	Flash_Memory_Write@i,f
 10511  14D1  3020               	movlw	32
 10512  14D2  0221               	subwf	Flash_Memory_Write@i,w
 10513  14D3  1C03               	skipc
 10514  14D4  2CB9               	goto	l5949
 10515  14D5                     l1382:	
 10516                           
 10517                           ;MCU_B1.c: 844: }
 10518                           ;MCU_B1.c: 845: LWLO = 0;
 10519  14D5  0023               	movlb	3	; select bank3
 10520  14D6  1295               	bcf	21,5	;volatile
 10521                           
 10522                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 10523  14D7  319F  270E         	fcall	_Flash_Memory_Unlock
 10524                           
 10525                           ;MCU_B1.c: 847: WREN = 0;
 10526  14D9  0023               	movlb	3	; select bank3
 10527  14DA  1115               	bcf	21,2	;volatile
 10528  14DB  0008               	return
 10529  14DC                     __end_of_Flash_Memory_Write:	
 10530                           
 10531                           	psect	text58
 10532  1F0E                     __ptext58:	
 10533 ;; *************** function _Flash_Memory_Unlock *****************
 10534 ;; Defined at:
 10535 ;;		line 811 in file "../src/MCU_B1.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;		None
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;		None               void
 10542 ;; Registers used:
 10543 ;;		wreg
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;Total ram usage:        0 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    5
 10556 ;; This function calls:
 10557 ;;		Nothing
 10558 ;; This function is called by:
 10559 ;;		_Flash_Memory_Write
 10560 ;;		_Flash_Memory_Erasing
 10561 ;; This function uses a non-reentrant model
 10562 ;;
 10563                           
 10564                           
 10565                           ;psect for function _Flash_Memory_Unlock
 10566  1F0E                     _Flash_Memory_Unlock:	
 10567                           
 10568                           ;MCU_B1.c: 812: PMCON2 = 0x55;
 10569                           
 10570                           ;incstack = 0
 10571                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10572  1F0E  3055               	movlw	85
 10573  1F0F  0023               	movlb	3	; select bank3
 10574  1F10  0096               	movwf	22	;volatile
 10575                           
 10576                           ;MCU_B1.c: 813: PMCON2 = 0xaa;
 10577  1F11  30AA               	movlw	170
 10578  1F12  0096               	movwf	22	;volatile
 10579                           
 10580                           ;MCU_B1.c: 814: WR = 1;
 10581  1F13  1495               	bsf	21,1	;volatile
 10582                           
 10583                           ;MCU_B1.c: 815: __nop();
 10584  1F14  0000               	nop
 10585                           
 10586                           ;MCU_B1.c: 816: __nop();
 10587  1F15  0000               	nop
 10588  1F16  0008               	return
 10589  1F17                     __end_of_Flash_Memory_Unlock:	
 10590                           
 10591                           	psect	text59
 10592  1203                     __ptext59:	
 10593 ;; *************** function _Flash_Memory_Read *****************
 10594 ;; Defined at:
 10595 ;;		line 820 in file "../src/MCU_B1.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;  address         1    wreg     unsigned char 
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  address         1    2[BANK0 ] unsigned char 
 10600 ;;  ret             1    3[BANK0 ] unsigned char 
 10601 ;;  i               1    1[BANK0 ] unsigned char 
 10602 ;; Return value:  Size  Location     Type
 10603 ;;                  1    wreg      unsigned char 
 10604 ;; Registers used:
 10605 ;;		wreg, status,2
 10606 ;; Tracked objects:
 10607 ;;		On entry : 0/0
 10608 ;;		On exit  : 0/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;Total ram usage:        4 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    5
 10618 ;; This function calls:
 10619 ;;		Nothing
 10620 ;; This function is called by:
 10621 ;;		_Flash_Memory_Initialization
 10622 ;;		_Flash_Memory_Modify
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function _Flash_Memory_Read
 10628  1203                     _Flash_Memory_Read:	
 10629                           
 10630                           ;incstack = 0
 10631                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10632                           ;Flash_Memory_Read@address stored from wreg
 10633  1203  0020               	movlb	0	; select bank0
 10634  1204  00A2               	movwf	Flash_Memory_Read@address
 10635                           
 10636                           ;MCU_B1.c: 821: char i, ret = 0;
 10637  1205  01A3               	clrf	Flash_Memory_Read@ret
 10638                           
 10639                           ;MCU_B1.c: 822: PMADRH = 0x30;
 10640  1206  3030               	movlw	48
 10641  1207  0023               	movlb	3	; select bank3
 10642  1208  0092               	movwf	18	;volatile
 10643                           
 10644                           ;MCU_B1.c: 823: PMADRL = address;
 10645  1209  0020               	movlb	0	; select bank0
 10646  120A  0822               	movf	Flash_Memory_Read@address,w
 10647  120B  0023               	movlb	3	; select bank3
 10648  120C  0091               	movwf	17	;volatile
 10649                           
 10650                           ;MCU_B1.c: 824: CFGS = 0;
 10651  120D  1315               	bcf	21,6	;volatile
 10652                           
 10653                           ;MCU_B1.c: 825: RD = 1;
 10654  120E  1415               	bsf	21,0	;volatile
 10655                           
 10656                           ;MCU_B1.c: 826: i = PMDATH;
 10657  120F  0814               	movf	20,w	;volatile
 10658  1210  0020               	movlb	0	; select bank0
 10659  1211  00A0               	movwf	??_Flash_Memory_Read
 10660  1212  0820               	movf	??_Flash_Memory_Read,w
 10661  1213  00A1               	movwf	Flash_Memory_Read@i
 10662                           
 10663                           ;MCU_B1.c: 827: ret = PMDATL;
 10664  1214  0023               	movlb	3	; select bank3
 10665  1215  0813               	movf	19,w	;volatile
 10666  1216  0020               	movlb	0	; select bank0
 10667  1217  00A0               	movwf	??_Flash_Memory_Read
 10668  1218  0820               	movf	??_Flash_Memory_Read,w
 10669  1219  00A3               	movwf	Flash_Memory_Read@ret
 10670                           
 10671                           ;MCU_B1.c: 828: return ret;
 10672  121A  0823               	movf	Flash_Memory_Read@ret,w
 10673  121B  0008               	return
 10674  121C                     __end_of_Flash_Memory_Read:	
 10675                           
 10676                           	psect	text60
 10677  1F4C                     __ptext60:	
 10678 ;; *************** function _DimmerLights_Main *****************
 10679 ;; Defined at:
 10680 ;;		line 254 in file "../src/Dimmer_B1.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;		None
 10685 ;; Return value:  Size  Location     Type
 10686 ;;		None               void
 10687 ;; Registers used:
 10688 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10689 ;; Tracked objects:
 10690 ;;		On entry : 0/0
 10691 ;;		On exit  : 0/0
 10692 ;;		Unchanged: 0/0
 10693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;Total ram usage:        0 bytes
 10699 ;; Hardware stack levels used:    1
 10700 ;; Hardware stack levels required when called:   11
 10701 ;; This function calls:
 10702 ;;		_DimmerLights_Close
 10703 ;;		_setDimmerLights_Main
 10704 ;; This function is called by:
 10705 ;;		_main
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           
 10710                           ;psect for function _DimmerLights_Main
 10711  1F4C                     _DimmerLights_Main:	
 10712                           
 10713                           ;Dimmer_B1.c: 256: setDimmerLights_Main(1);
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10717  1F4C  3001               	movlw	1
 10718  1F4D  318C  24B2  319F   	fcall	_setDimmerLights_Main
 10719                           
 10720                           ;Dimmer_B1.c: 260: setDimmerLights_Main(2);
 10721  1F50  3002               	movlw	2
 10722  1F51  318C  24B2  319F   	fcall	_setDimmerLights_Main
 10723                           
 10724                           ;Dimmer_B1.c: 267: DimmerLights_Close();
 10725  1F54  3191  21A1         	fcall	_DimmerLights_Close
 10726  1F56  0008               	return
 10727  1F57                     __end_of_DimmerLights_Main:	
 10728                           
 10729                           	psect	text61
 10730  0CB2                     __ptext61:	
 10731 ;; *************** function _setDimmerLights_Main *****************
 10732 ;; Defined at:
 10733 ;;		line 271 in file "../src/Dimmer_B1.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;  lights          1    wreg     unsigned char 
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;  lights          1   70[BANK0 ] unsigned char 
 10738 ;;  clear           1   69[BANK0 ] unsigned char 
 10739 ;; Return value:  Size  Location     Type
 10740 ;;		None               void
 10741 ;; Registers used:
 10742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;Total ram usage:        2 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:   10
 10755 ;; This function calls:
 10756 ;;		_DimmerLightsPointSelect
 10757 ;;		_setBuz
 10758 ;;		_setDimmerLights
 10759 ;;		_setDimmerLights_Adj
 10760 ;; This function is called by:
 10761 ;;		_DimmerLights_Main
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _setDimmerLights_Main
 10767  0CB2                     _setDimmerLights_Main:	
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10771                           ;setDimmerLights_Main@lights stored from wreg
 10772  0CB2  0020               	movlb	0	; select bank0
 10773  0CB3  00E6               	movwf	setDimmerLights_Main@lights
 10774                           
 10775                           ;Dimmer_B1.c: 272: char clear = 1;
 10776  0CB4  01E5               	clrf	setDimmerLights_Main@clear
 10777  0CB5  0AE5               	incf	setDimmerLights_Main@clear,f
 10778                           
 10779                           ;Dimmer_B1.c: 273: DimmerLightsPointSelect(lights);
 10780  0CB6  0866               	movf	setDimmerLights_Main@lights,w
 10781  0CB7  3191  210D  318C   	fcall	_DimmerLightsPointSelect
 10782                           
 10783                           ;Dimmer_B1.c: 286: if (lights == 1) {
 10784  0CBA  0020               	movlb	0	; select bank0
 10785  0CBB  0866               	movf	setDimmerLights_Main@lights,w
 10786  0CBC  3A01               	xorlw	1
 10787  0CBD  1D03               	skipz
 10788  0CBE  2CC2               	goto	l6331
 10789                           
 10790                           ;Dimmer_B1.c: 287: clear = (!DimmerLights22->Clear) ? 0 : 1;
 10791  0CBF  0021               	movlb	1	; select bank1
 10792  0CC0  083B               	movf	_DimmerLights22^(0+128),w
 10793  0CC1  2CC8               	goto	L12
 10794  0CC2                     l6331:	
 10795                           ;Dimmer_B1.c: 288: } else if (lights == 2) {
 10796                           
 10797  0CC2  0866               	movf	setDimmerLights_Main@lights,w
 10798  0CC3  3A02               	xorlw	2
 10799  0CC4  1D03               	skipz
 10800  0CC5  2CD1               	goto	l6335
 10801                           
 10802                           ;Dimmer_B1.c: 289: clear = (!DimmerLights11->Clear) ? 0 : 1;
 10803  0CC6  0021               	movlb	1	; select bank1
 10804  0CC7  083A               	movf	_DimmerLights11^(0+128),w
 10805  0CC8                     L12:	
 10806  0CC8  3E09               	addlw	9
 10807  0CC9  0086               	movwf	6
 10808  0CCA  3001               	movlw	1	; select bank2/3
 10809  0CCB  0087               	movwf	7
 10810  0CCC  3000               	movlw	0
 10811  0CCD  1901               	btfsc	1,2
 10812  0CCE  3001               	movlw	1
 10813  0CCF  0020               	movlb	0	; select bank0
 10814  0CD0  00E5               	movwf	setDimmerLights_Main@clear
 10815  0CD1                     l6335:	
 10816                           
 10817                           ;Dimmer_B1.c: 290: }
 10818                           ;Dimmer_B1.c: 293: if (DimmerLights->Trigger) {
 10819  0CD1  0879               	movf	_DimmerLights,w
 10820  0CD2  3E08               	addlw	8
 10821  0CD3  0086               	movwf	6
 10822  0CD4  3001               	movlw	1	; select bank2/3
 10823  0CD5  0087               	movwf	7
 10824  0CD6  1D01               	btfss	1,2
 10825  0CD7  2CFC               	goto	l6349
 10826                           
 10827                           ;Dimmer_B1.c: 294: if (clear) {
 10828  0CD8  0865               	movf	setDimmerLights_Main@clear,w
 10829  0CD9  1903               	btfsc	3,2
 10830  0CDA  0008               	return
 10831                           
 10832                           ;Dimmer_B1.c: 295: if (DimmerLights->Switch) {
 10833  0CDB  0879               	movf	_DimmerLights,w
 10834  0CDC  3E08               	addlw	8
 10835  0CDD  0086               	movwf	6
 10836  0CDE  3001               	movlw	1	; select bank2/3
 10837  0CDF  0087               	movwf	7
 10838  0CE0  1C81               	btfss	1,1
 10839  0CE1  2CEF               	goto	l6345
 10840                           
 10841                           ;Dimmer_B1.c: 296: DimmerLights->Trigger = 0;
 10842  0CE2  0879               	movf	_DimmerLights,w
 10843  0CE3  3E08               	addlw	8
 10844  0CE4  0086               	movwf	6
 10845  0CE5  3001               	movlw	1	; select bank2/3
 10846  0CE6  0087               	movwf	7
 10847  0CE7  1101               	bcf	1,2
 10848                           
 10849                           ;Dimmer_B1.c: 297: setDimmerLights(lights, 1);
 10850  0CE8  01A4               	clrf	setDimmerLights@status
 10851  0CE9  0AA4               	incf	setDimmerLights@status,f
 10852  0CEA  0866               	movf	setDimmerLights_Main@lights,w
 10853  0CEB  318E  2649         	fcall	_setDimmerLights
 10854                           
 10855                           ;Dimmer_B1.c: 302: } else {
 10856  0CED  0020               	movlb	0	; select bank0
 10857  0CEE  0008               	return
 10858  0CEF                     l6345:	
 10859                           
 10860                           ;Dimmer_B1.c: 303: DimmerLights->Trigger = 0;
 10861  0CEF  0879               	movf	_DimmerLights,w
 10862  0CF0  3E08               	addlw	8
 10863  0CF1  0086               	movwf	6
 10864  0CF2  3001               	movlw	1	; select bank2/3
 10865  0CF3  0087               	movwf	7
 10866  0CF4  1101               	bcf	1,2
 10867                           
 10868                           ;Dimmer_B1.c: 304: setDimmerLights(lights, 0);
 10869  0CF5  0020               	movlb	0	; select bank0
 10870  0CF6  01A4               	clrf	setDimmerLights@status
 10871  0CF7  0866               	movf	setDimmerLights_Main@lights,w
 10872  0CF8  318E  2649         	fcall	_setDimmerLights
 10873  0CFA  0020               	movlb	0	; select bank0
 10874  0CFB  0008               	return
 10875  0CFC                     l6349:	
 10876                           ;Dimmer_B1.c: 309: }
 10877                           ;Dimmer_B1.c: 310: }
 10878                           ;Dimmer_B1.c: 311: } else {
 10879                           
 10880                           
 10881                           ;Dimmer_B1.c: 312: if (DimmerLights->TriggerAdj) {
 10882  0CFC  0879               	movf	_DimmerLights,w
 10883  0CFD  3E08               	addlw	8
 10884  0CFE  0086               	movwf	6
 10885  0CFF  3001               	movlw	1	; select bank2/3
 10886  0D00  0087               	movwf	7
 10887  0D01  1A01               	btfsc	1,4
 10888  0D02  2D05               	goto	l6351
 10889  0D03  0020               	movlb	0	; select bank0
 10890  0D04  0008               	return
 10891  0D05                     l6351:	
 10892                           
 10893                           ;Dimmer_B1.c: 313: if (clear) {
 10894  0D05  0020               	movlb	0	; select bank0
 10895  0D06  0865               	movf	setDimmerLights_Main@clear,w
 10896  0D07  1903               	btfsc	3,2
 10897  0D08  0008               	return
 10898                           
 10899                           ;Dimmer_B1.c: 314: DimmerLightsPointSelect(lights);
 10900  0D09  0866               	movf	setDimmerLights_Main@lights,w
 10901  0D0A  3191  210D  318C   	fcall	_DimmerLightsPointSelect
 10902                           
 10903                           ;Dimmer_B1.c: 315: DimmerLights->TriggerAdj = 0;
 10904  0D0D  0879               	movf	_DimmerLights,w
 10905  0D0E  3E08               	addlw	8
 10906  0D0F  0086               	movwf	6
 10907  0D10  3001               	movlw	1	; select bank2/3
 10908  0D11  0087               	movwf	7
 10909  0D12  1201               	bcf	1,4
 10910                           
 10911                           ;Dimmer_B1.c: 316: if (DimmerLights->AdjGo) {
 10912  0D13  0879               	movf	_DimmerLights,w
 10913  0D14  3E08               	addlw	8
 10914  0D15  0086               	movwf	6
 10915  0D16  3001               	movlw	1	; select bank2/3
 10916  0D17  0087               	movwf	7
 10917  0D18  1D81               	btfss	1,3
 10918  0D19  2D2B               	goto	l6361
 10919                           
 10920                           ;Dimmer_B1.c: 317: setDimmerLights_Adj(lights, 1);
 10921  0D1A  0020               	movlb	0	; select bank0
 10922  0D1B  01E2               	clrf	setDimmerLights_Adj@status
 10923  0D1C  0AE2               	incf	setDimmerLights_Adj@status,f
 10924  0D1D  0866               	movf	setDimmerLights_Main@lights,w
 10925  0D1E  3195  2546  318C   	fcall	_setDimmerLights_Adj
 10926                           
 10927                           ;Dimmer_B1.c: 318: setBuz(1, 100);
 10928  0D21  3064               	movlw	100
 10929  0D22  0020               	movlb	0	; select bank0
 10930  0D23  00A0               	movwf	setBuz@time
 10931  0D24  3000               	movlw	0
 10932  0D25  00A1               	movwf	setBuz@time+1
 10933  0D26  3001               	movlw	1
 10934  0D27  3189  2141         	fcall	_setBuz
 10935                           
 10936                           ;Dimmer_B1.c: 319: } else {
 10937  0D29  0020               	movlb	0	; select bank0
 10938  0D2A  0008               	return
 10939  0D2B                     l6361:	
 10940                           
 10941                           ;Dimmer_B1.c: 320: setDimmerLights_Adj(lights, 0);
 10942  0D2B  0020               	movlb	0	; select bank0
 10943  0D2C  01E2               	clrf	setDimmerLights_Adj@status
 10944  0D2D  0866               	movf	setDimmerLights_Main@lights,w
 10945  0D2E  3195  2546         	fcall	_setDimmerLights_Adj
 10946  0D30  0020               	movlb	0	; select bank0
 10947  0D31  0008               	return
 10948  0D32                     __end_of_setDimmerLights_Main:	
 10949                           
 10950                           	psect	text62
 10951  1546                     __ptext62:	
 10952 ;; *************** function _setDimmerLights_Adj *****************
 10953 ;; Defined at:
 10954 ;;		line 498 in file "../src/Dimmer_B1.c"
 10955 ;; Parameters:    Size  Location     Type
 10956 ;;  lights          1    wreg     unsigned char 
 10957 ;;  status          1   66[BANK0 ] unsigned char 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  lights          1   68[BANK0 ] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;		None               void
 10962 ;; Registers used:
 10963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;Total ram usage:        3 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    9
 10976 ;; This function calls:
 10977 ;;		_DimmerLightsPointSelect
 10978 ;;		_setRF_DimmerLights
 10979 ;;		_setTxData
 10980 ;; This function is called by:
 10981 ;;		_setDimmerLights_Main
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           
 10986                           ;psect for function _setDimmerLights_Adj
 10987  1546                     _setDimmerLights_Adj:	
 10988                           
 10989                           ;incstack = 0
 10990                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10991                           ;setDimmerLights_Adj@lights stored from wreg
 10992  1546  0020               	movlb	0	; select bank0
 10993  1547  00E4               	movwf	setDimmerLights_Adj@lights
 10994                           
 10995                           ;Dimmer_B1.c: 499: DimmerLightsPointSelect(lights);
 10996  1548  0864               	movf	setDimmerLights_Adj@lights,w
 10997  1549  3191  210D  3195   	fcall	_DimmerLightsPointSelect
 10998                           
 10999                           ;Dimmer_B1.c: 500: if (status) {
 11000  154C  0020               	movlb	0	; select bank0
 11001  154D  0862               	movf	setDimmerLights_Adj@status,w
 11002  154E  1903               	btfsc	3,2
 11003  154F  2D5B               	goto	l5907
 11004                           
 11005                           ;Dimmer_B1.c: 501: DimmerLights->AdjFlag = 1;
 11006  1550  0879               	movf	_DimmerLights,w
 11007  1551  0086               	movwf	6
 11008  1552  3001               	movlw	1	; select bank2/3
 11009  1553  0087               	movwf	7
 11010  1554  1581               	bsf	1,3
 11011                           
 11012                           ;Dimmer_B1.c: 502: DimmerLights->Signal = 1;
 11013  1555  0879               	movf	_DimmerLights,w
 11014  1556  0086               	movwf	6
 11015  1557  3001               	movlw	1	; select bank2/3
 11016  1558  0087               	movwf	7
 11017  1559  1481               	bsf	1,1
 11018                           
 11019                           ;Dimmer_B1.c: 503: } else {
 11020  155A  0008               	return
 11021  155B                     l5907:	
 11022                           
 11023                           ;Dimmer_B1.c: 504: if (DimmerLights->AdjFlag) {
 11024  155B  0879               	movf	_DimmerLights,w
 11025  155C  0086               	movwf	6
 11026  155D  3001               	movlw	1	; select bank2/3
 11027  155E  0087               	movwf	7
 11028  155F  1D81               	btfss	1,3
 11029  1560  0008               	return
 11030                           
 11031                           ;Dimmer_B1.c: 505: DimmerLights->Signal = 0;
 11032  1561  0879               	movf	_DimmerLights,w
 11033  1562  0086               	movwf	6
 11034  1563  3001               	movlw	1	; select bank2/3
 11035  1564  0087               	movwf	7
 11036  1565  1081               	bcf	1,1
 11037                           
 11038                           ;Dimmer_B1.c: 506: DimmerLights->AdjFlag = 0;
 11039  1566  0879               	movf	_DimmerLights,w
 11040  1567  0086               	movwf	6
 11041  1568  3001               	movlw	1	; select bank2/3
 11042  1569  0087               	movwf	7
 11043  156A  1181               	bcf	1,3
 11044                           
 11045                           ;Dimmer_B1.c: 507: ;;
 11046                           ;Dimmer_B1.c: 508: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11047  156B  0879               	movf	_DimmerLights,w
 11048  156C  3E04               	addlw	4
 11049  156D  0086               	movwf	6
 11050  156E  3001               	movlw	1	; select bank2/3
 11051  156F  0087               	movwf	7
 11052  1570  0801               	movf	1,w
 11053  1571  00E3               	movwf	??_setDimmerLights_Adj
 11054  1572  0879               	movf	_DimmerLights,w
 11055  1573  3E05               	addlw	5
 11056  1574  0086               	movwf	6
 11057  1575  3001               	movlw	1	; select bank2/3
 11058  1576  0087               	movwf	7
 11059  1577  0863               	movf	??_setDimmerLights_Adj,w
 11060  1578  0081               	movwf	1
 11061                           
 11062                           ;Dimmer_B1.c: 516: setRF_DimmerLights(lights, 1);
 11063  1579  01DD               	clrf	setRF_DimmerLights@on
 11064  157A  0ADD               	incf	setRF_DimmerLights@on,f
 11065  157B  0864               	movf	setDimmerLights_Adj@lights,w
 11066  157C  318A  2208  3195   	fcall	_setRF_DimmerLights
 11067                           
 11068                           ;Dimmer_B1.c: 517: setTxData(1);
 11069  157F  3001               	movlw	1
 11070  1580  3186  2656         	fcall	_setTxData
 11071  1582  0008               	return
 11072  1583                     __end_of_setDimmerLights_Adj:	
 11073                           
 11074                           	psect	text63
 11075  0E49                     __ptext63:	
 11076 ;; *************** function _setDimmerLights *****************
 11077 ;; Defined at:
 11078 ;;		line 445 in file "../src/Dimmer_B1.c"
 11079 ;; Parameters:    Size  Location     Type
 11080 ;;  lights          1    wreg     unsigned char 
 11081 ;;  status          1    4[BANK0 ] unsigned char 
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;  lights          1    6[BANK0 ] unsigned char 
 11084 ;; Return value:  Size  Location     Type
 11085 ;;		None               void
 11086 ;; Registers used:
 11087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11093 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;Total ram usage:        3 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    7
 11100 ;; This function calls:
 11101 ;;		_DimmerLightsPointSelect
 11102 ;;		_setLED
 11103 ;; This function is called by:
 11104 ;;		_setDimmerLights_Main
 11105 ;;		_setControl_Lights_Table
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _setDimmerLights
 11111  0E49                     _setDimmerLights:	
 11112                           
 11113                           ;incstack = 0
 11114                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11115                           ;setDimmerLights@lights stored from wreg
 11116  0E49  0020               	movlb	0	; select bank0
 11117  0E4A  00A6               	movwf	setDimmerLights@lights
 11118                           
 11119                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 11120  0E4B  0826               	movf	setDimmerLights@lights,w
 11121  0E4C  3191  210D  318E   	fcall	_DimmerLightsPointSelect
 11122                           
 11123                           ;Dimmer_B1.c: 447: Dimmer->Load = lights;
 11124  0E4F  0020               	movlb	0	; select bank0
 11125  0E50  0826               	movf	setDimmerLights@lights,w
 11126  0E51  00A5               	movwf	??_setDimmerLights
 11127  0E52  0021               	movlb	1	; select bank1
 11128  0E53  0A39               	incf	_Dimmer^(0+128),w
 11129  0E54  0086               	movwf	6
 11130  0E55  0187               	clrf	7
 11131  0E56  0020               	movlb	0	; select bank0
 11132  0E57  0825               	movf	??_setDimmerLights,w
 11133  0E58  0081               	movwf	1
 11134                           
 11135                           ;Dimmer_B1.c: 448: if (status) {
 11136  0E59  0824               	movf	setDimmerLights@status,w
 11137  0E5A  1903               	btfsc	3,2
 11138  0E5B  2EA8               	goto	l5623
 11139                           
 11140                           ;Dimmer_B1.c: 449: DimmerLights->Status = 1;
 11141  0E5C  0879               	movf	_DimmerLights,w
 11142  0E5D  0086               	movwf	6
 11143  0E5E  3001               	movlw	1	; select bank2/3
 11144  0E5F  0087               	movwf	7
 11145  0E60  1681               	bsf	1,5
 11146                           
 11147                           ;Dimmer_B1.c: 450: setLED(lights, 0);
 11148  0E61  01A2               	clrf	setLED@command
 11149  0E62  0826               	movf	setDimmerLights@lights,w
 11150  0E63  3188  20E3  318E   	fcall	_setLED
 11151                           
 11152                           ;Dimmer_B1.c: 452: ;;
 11153                           ;Dimmer_B1.c: 454: DimmerLights->Signal = 1;
 11154  0E66  0879               	movf	_DimmerLights,w
 11155  0E67  0086               	movwf	6
 11156  0E68  3001               	movlw	1	; select bank2/3
 11157  0E69  0087               	movwf	7
 11158  0E6A  1481               	bsf	1,1
 11159                           
 11160                           ;Dimmer_B1.c: 455: DimmerLights->DimmingTimeValue = 3;
 11161  0E6B  3003               	movlw	3
 11162  0E6C  0020               	movlb	0	; select bank0
 11163  0E6D  00A5               	movwf	??_setDimmerLights
 11164  0E6E  0879               	movf	_DimmerLights,w
 11165  0E6F  3E02               	addlw	2
 11166  0E70  0086               	movwf	6
 11167  0E71  3001               	movlw	1	; select bank2/3
 11168  0E72  0087               	movwf	7
 11169  0E73  0825               	movf	??_setDimmerLights,w
 11170  0E74  0081               	movwf	1
 11171                           
 11172                           ;Dimmer_B1.c: 457: if (!DimmerLights->StatusFlag) {
 11173  0E75  0879               	movf	_DimmerLights,w
 11174  0E76  0086               	movwf	6
 11175  0E77  3001               	movlw	1	; select bank2/3
 11176  0E78  0087               	movwf	7
 11177  0E79  1B01               	btfsc	1,6
 11178  0E7A  0008               	return
 11179                           
 11180                           ;Dimmer_B1.c: 458: DimmerLights->StatusFlag = 1;
 11181  0E7B  0879               	movf	_DimmerLights,w
 11182  0E7C  0086               	movwf	6
 11183  0E7D  3001               	movlw	1	; select bank2/3
 11184  0E7E  0087               	movwf	7
 11185  0E7F  1701               	bsf	1,6
 11186                           
 11187                           ;Dimmer_B1.c: 459: ;;
 11188                           ;Dimmer_B1.c: 460: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 11189  0E80  0021               	movlb	1	; select bank1
 11190  0E81  0866               	movf	_Memory^(0+128),w
 11191  0E82  3E22               	addlw	34
 11192  0E83  0086               	movwf	6
 11193  0E84  3002               	movlw	2	; select bank4/5
 11194  0E85  0087               	movwf	7
 11195  0E86  1081               	bcf	1,1
 11196  0E87  0866               	movf	_Memory^(0+128),w
 11197  0E88  3E23               	addlw	35
 11198  0E89  0086               	movwf	6
 11199  0E8A  3002               	movlw	2	; select bank4/5
 11200  0E8B  0087               	movwf	7
 11201  0E8C  3000               	movlw	0
 11202  0E8D  3FC0               	movwi [0]fsr1
 11203  0E8E  3FC1               	movwi [1]fsr1
 11204                           
 11205                           ;Dimmer_B1.c: 463: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11206  0E8F  0879               	movf	_DimmerLights,w
 11207  0E90  3E05               	addlw	5
 11208  0E91  0086               	movwf	6
 11209  0E92  3001               	movlw	1	; select bank2/3
 11210  0E93  0087               	movwf	7
 11211  0E94  0801               	movf	1,w
 11212  0E95  0020               	movlb	0	; select bank0
 11213  0E96  00A5               	movwf	??_setDimmerLights
 11214  0E97  0879               	movf	_DimmerLights,w
 11215  0E98  3E04               	addlw	4
 11216  0E99  0086               	movwf	6
 11217  0E9A  3001               	movlw	1	; select bank2/3
 11218  0E9B  0087               	movwf	7
 11219  0E9C  0825               	movf	??_setDimmerLights,w
 11220  0E9D  0081               	movwf	1
 11221                           
 11222                           ;Dimmer_B1.c: 467: DimmerLights->DimmingValue = ((char)(65*1.5));
 11223  0E9E  3061               	movlw	97
 11224  0E9F  00A5               	movwf	??_setDimmerLights
 11225  0EA0  0879               	movf	_DimmerLights,w
 11226  0EA1  3E04               	addlw	4
 11227  0EA2  0086               	movwf	6
 11228  0EA3  3001               	movlw	1	; select bank2/3
 11229  0EA4  0087               	movwf	7
 11230  0EA5  0825               	movf	??_setDimmerLights,w
 11231  0EA6  0081               	movwf	1
 11232                           
 11233                           ;Dimmer_B1.c: 469: }
 11234                           ;Dimmer_B1.c: 470: } else {
 11235  0EA7  0008               	return
 11236  0EA8                     l5623:	
 11237                           
 11238                           ;Dimmer_B1.c: 471: DimmerLights->Status = 0;
 11239  0EA8  0879               	movf	_DimmerLights,w
 11240  0EA9  0086               	movwf	6
 11241  0EAA  3001               	movlw	1	; select bank2/3
 11242  0EAB  0087               	movwf	7
 11243  0EAC  1281               	bcf	1,5
 11244                           
 11245                           ;Dimmer_B1.c: 473: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 11246  0EAD  0879               	movf	_DimmerLights,w
 11247  0EAE  3E06               	addlw	6
 11248  0EAF  0086               	movwf	6
 11249  0EB0  3001               	movlw	1	; select bank2/3
 11250  0EB1  0087               	movwf	7
 11251  0EB2  0801               	movf	1,w
 11252  0EB3  00A5               	movwf	??_setDimmerLights
 11253  0EB4  0879               	movf	_DimmerLights,w
 11254  0EB5  3E04               	addlw	4
 11255  0EB6  0086               	movwf	6
 11256  0EB7  3001               	movlw	1	; select bank2/3
 11257  0EB8  0087               	movwf	7
 11258  0EB9  0825               	movf	??_setDimmerLights,w
 11259  0EBA  0081               	movwf	1
 11260                           
 11261                           ;Dimmer_B1.c: 478: DimmerLights->MosfetClose = 1;
 11262  0EBB  0879               	movf	_DimmerLights,w
 11263  0EBC  3E08               	addlw	8
 11264  0EBD  0086               	movwf	6
 11265  0EBE  3001               	movlw	1	; select bank2/3
 11266  0EBF  0087               	movwf	7
 11267  0EC0  1781               	bsf	1,7
 11268                           
 11269                           ;Dimmer_B1.c: 480: DimmerLights->Signal = 1;
 11270  0EC1  0879               	movf	_DimmerLights,w
 11271  0EC2  0086               	movwf	6
 11272  0EC3  3001               	movlw	1	; select bank2/3
 11273  0EC4  0087               	movwf	7
 11274  0EC5  1481               	bsf	1,1
 11275                           
 11276                           ;Dimmer_B1.c: 481: DimmerLights->AdjFlag = 0;
 11277  0EC6  0879               	movf	_DimmerLights,w
 11278  0EC7  0086               	movwf	6
 11279  0EC8  3001               	movlw	1	; select bank2/3
 11280  0EC9  0087               	movwf	7
 11281  0ECA  1181               	bcf	1,3
 11282                           
 11283                           ;Dimmer_B1.c: 482: DimmerLights->AdjStatus = 0;
 11284  0ECB  0879               	movf	_DimmerLights,w
 11285  0ECC  0086               	movwf	6
 11286  0ECD  3001               	movlw	1	; select bank2/3
 11287  0ECE  0087               	movwf	7
 11288  0ECF  1201               	bcf	1,4
 11289                           
 11290                           ;Dimmer_B1.c: 483: DimmerLights->DimmingTimeValue = 3;
 11291  0ED0  3003               	movlw	3
 11292  0ED1  00A5               	movwf	??_setDimmerLights
 11293  0ED2  0879               	movf	_DimmerLights,w
 11294  0ED3  3E02               	addlw	2
 11295  0ED4  0086               	movwf	6
 11296  0ED5  3001               	movlw	1	; select bank2/3
 11297  0ED6  0087               	movwf	7
 11298  0ED7  0825               	movf	??_setDimmerLights,w
 11299  0ED8  0081               	movwf	1
 11300  0ED9  0008               	return
 11301  0EDA                     __end_of_setDimmerLights:	
 11302                           
 11303                           	psect	text64
 11304  08E3                     __ptext64:	
 11305 ;; *************** function _setLED *****************
 11306 ;; Defined at:
 11307 ;;		line 74 in file "../src/LED_B1.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;  led             1    wreg     unsigned char 
 11310 ;;  command         1    2[BANK0 ] unsigned char 
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  led             1    3[BANK0 ] unsigned char 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;		None               void
 11315 ;; Registers used:
 11316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        2 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    6
 11329 ;; This function calls:
 11330 ;;		_LedPointSelect
 11331 ;; This function is called by:
 11332 ;;		_setDimmerLights
 11333 ;;		_setLED_Initialization
 11334 ;;		_setSw_Initialization
 11335 ;;		_setDimmerLights_ERROR
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           
 11340                           ;psect for function _setLED
 11341  08E3                     _setLED:	
 11342                           
 11343                           ;incstack = 0
 11344                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11345                           ;setLED@led stored from wreg
 11346  08E3  0020               	movlb	0	; select bank0
 11347  08E4  00A3               	movwf	setLED@led
 11348                           
 11349                           ;LED_B1.c: 76: LedPointSelect(led);
 11350  08E5  0823               	movf	setLED@led,w
 11351  08E6  3193  233B  3188   	fcall	_LedPointSelect
 11352                           
 11353                           ;LED_B1.c: 77: if(command == 0)
 11354  08E9  0020               	movlb	0	; select bank0
 11355  08EA  08A2               	movf	setLED@command,f
 11356  08EB  1D03               	skipz
 11357  08EC  28FF               	goto	l5515
 11358                           
 11359                           ;LED_B1.c: 78: {
 11360                           ;LED_B1.c: 80: if(led == 1)
 11361  08ED  0823               	movf	setLED@led,w
 11362  08EE  3A01               	xorlw	1
 11363  08EF  1D03               	skipz
 11364  08F0  28F3               	goto	l5507
 11365                           
 11366                           ;LED_B1.c: 81: {
 11367                           ;LED_B1.c: 85: RA3=1;
 11368  08F1  158C               	bsf	12,3	;volatile
 11369                           
 11370                           ;LED_B1.c: 87: }
 11371  08F2  0008               	return
 11372  08F3                     l5507:	
 11373                           
 11374                           ;LED_B1.c: 90: else if(led == 2)
 11375  08F3  0823               	movf	setLED@led,w
 11376  08F4  3A02               	xorlw	2
 11377  08F5  1D03               	skipz
 11378  08F6  28F9               	goto	l5511
 11379                           
 11380                           ;LED_B1.c: 91: {
 11381                           ;LED_B1.c: 95: RC7=1;
 11382  08F7  178E               	bsf	14,7	;volatile
 11383                           
 11384                           ;LED_B1.c: 97: }
 11385  08F8  0008               	return
 11386  08F9                     l5511:	
 11387                           
 11388                           ;LED_B1.c: 110: else if(led == 99)
 11389  08F9  0823               	movf	setLED@led,w
 11390  08FA  3A63               	xorlw	99
 11391  08FB  1D03               	skipz
 11392  08FC  0008               	return
 11393                           
 11394                           ;LED_B1.c: 111: {
 11395                           ;LED_B1.c: 115: RB5=1;
 11396  08FD  168D               	bsf	13,5	;volatile
 11397                           
 11398                           ;LED_B1.c: 117: }
 11399                           ;LED_B1.c: 119: }
 11400  08FE  0008               	return
 11401  08FF                     l5515:	
 11402                           
 11403                           ;LED_B1.c: 120: else if(command == 1)
 11404  08FF  0822               	movf	setLED@command,w
 11405  0900  3A01               	xorlw	1
 11406  0901  1D03               	skipz
 11407  0902  2915               	goto	l5529
 11408                           
 11409                           ;LED_B1.c: 121: {
 11410                           ;LED_B1.c: 123: if(led == 1)
 11411  0903  0823               	movf	setLED@led,w
 11412  0904  3A01               	xorlw	1
 11413  0905  1D03               	skipz
 11414  0906  2909               	goto	l5521
 11415                           
 11416                           ;LED_B1.c: 124: {
 11417                           ;LED_B1.c: 128: RA3=0;
 11418  0907  118C               	bcf	12,3	;volatile
 11419                           
 11420                           ;LED_B1.c: 130: }
 11421  0908  0008               	return
 11422  0909                     l5521:	
 11423                           
 11424                           ;LED_B1.c: 133: else if(led == 2)
 11425  0909  0823               	movf	setLED@led,w
 11426  090A  3A02               	xorlw	2
 11427  090B  1D03               	skipz
 11428  090C  290F               	goto	l5525
 11429                           
 11430                           ;LED_B1.c: 134: {
 11431                           ;LED_B1.c: 138: RC7=0;
 11432  090D  138E               	bcf	14,7	;volatile
 11433                           
 11434                           ;LED_B1.c: 140: }
 11435  090E  0008               	return
 11436  090F                     l5525:	
 11437                           
 11438                           ;LED_B1.c: 153: else if(led == 99)
 11439  090F  0823               	movf	setLED@led,w
 11440  0910  3A63               	xorlw	99
 11441  0911  1D03               	skipz
 11442  0912  0008               	return
 11443                           
 11444                           ;LED_B1.c: 154: {
 11445                           ;LED_B1.c: 158: RB5=0;
 11446  0913  128D               	bcf	13,5	;volatile
 11447                           
 11448                           ;LED_B1.c: 160: }
 11449                           ;LED_B1.c: 162: }
 11450  0914  0008               	return
 11451  0915                     l5529:	
 11452                           
 11453                           ;LED_B1.c: 163: else if(command == 10)
 11454  0915  0822               	movf	setLED@command,w
 11455  0916  3A0A               	xorlw	10
 11456  0917  1D03               	skipz
 11457  0918  2937               	goto	l5545
 11458                           
 11459                           ;LED_B1.c: 164: {
 11460                           ;LED_B1.c: 165: LED->GO=0;
 11461  0919  0021               	movlb	1	; select bank1
 11462  091A  083C               	movf	_LED^(0+128),w
 11463  091B  0086               	movwf	6
 11464  091C  0187               	clrf	7
 11465  091D  1081               	bcf	1,1
 11466                           
 11467                           ;LED_B1.c: 166: LED->Time=0;
 11468  091E  0A3C               	incf	_LED^(0+128),w
 11469  091F  0086               	movwf	6
 11470  0920  0187               	clrf	7
 11471  0921  3000               	movlw	0
 11472  0922  3FC0               	movwi [0]fsr1
 11473  0923  3FC1               	movwi [1]fsr1
 11474                           
 11475                           ;LED_B1.c: 168: if(led == 1)
 11476  0924  0020               	movlb	0	; select bank0
 11477  0925  0823               	movf	setLED@led,w
 11478  0926  3A01               	xorlw	1
 11479  0927  1D03               	skipz
 11480  0928  292B               	goto	l5537
 11481                           
 11482                           ;LED_B1.c: 169: {
 11483                           ;LED_B1.c: 173: RA3=1;
 11484  0929  158C               	bsf	12,3	;volatile
 11485                           
 11486                           ;LED_B1.c: 175: }
 11487  092A  0008               	return
 11488  092B                     l5537:	
 11489                           
 11490                           ;LED_B1.c: 178: else if(led == 2)
 11491  092B  0823               	movf	setLED@led,w
 11492  092C  3A02               	xorlw	2
 11493  092D  1D03               	skipz
 11494  092E  2931               	goto	l5541
 11495                           
 11496                           ;LED_B1.c: 179: {
 11497                           ;LED_B1.c: 183: RC7=1;
 11498  092F  178E               	bsf	14,7	;volatile
 11499                           
 11500                           ;LED_B1.c: 185: }
 11501  0930  0008               	return
 11502  0931                     l5541:	
 11503                           
 11504                           ;LED_B1.c: 198: else if(led == 99)
 11505  0931  0823               	movf	setLED@led,w
 11506  0932  3A63               	xorlw	99
 11507  0933  1D03               	skipz
 11508  0934  0008               	return
 11509                           
 11510                           ;LED_B1.c: 199: {
 11511                           ;LED_B1.c: 203: RB5=1;
 11512  0935  168D               	bsf	13,5	;volatile
 11513                           
 11514                           ;LED_B1.c: 205: }
 11515                           ;LED_B1.c: 207: }
 11516  0936  0008               	return
 11517  0937                     l5545:	
 11518                           
 11519                           ;LED_B1.c: 208: else if(command == 11)
 11520  0937  0822               	movf	setLED@command,w
 11521  0938  3A0B               	xorlw	11
 11522  0939  1D03               	skipz
 11523  093A  0008               	return
 11524                           
 11525                           ;LED_B1.c: 209: {
 11526                           ;LED_B1.c: 210: LED->GO=1;
 11527  093B  0021               	movlb	1	; select bank1
 11528  093C  083C               	movf	_LED^(0+128),w
 11529  093D  0086               	movwf	6
 11530  093E  0187               	clrf	7
 11531  093F  1481               	bsf	1,1
 11532  0940  0008               	return
 11533  0941                     __end_of_setLED:	
 11534                           
 11535                           	psect	text65
 11536  133B                     __ptext65:	
 11537 ;; *************** function _LedPointSelect *****************
 11538 ;; Defined at:
 11539 ;;		line 7 in file "../src/LED_B1.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;  led             1    wreg     unsigned char 
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  led             1    1[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;		None               void
 11546 ;; Registers used:
 11547 ;;		wreg
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        2 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    5
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_setLED_Initialization
 11564 ;;		_setLED
 11565 ;;		_setLED_Main
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           
 11570                           ;psect for function _LedPointSelect
 11571  133B                     _LedPointSelect:	
 11572                           
 11573                           ;incstack = 0
 11574                           ; Regs used in _LedPointSelect: [wreg]
 11575                           ;LedPointSelect@led stored from wreg
 11576  133B  0020               	movlb	0	; select bank0
 11577  133C  00A1               	movwf	LedPointSelect@led
 11578                           
 11579                           ;LED_B1.c: 10: if(led == 1)
 11580  133D  0821               	movf	LedPointSelect@led,w
 11581  133E  3A01               	xorlw	1
 11582  133F  1D03               	skipz
 11583  1340  2B47               	goto	l5391
 11584                           
 11585                           ;LED_B1.c: 11: {
 11586                           ;LED_B1.c: 12: LED=&VarLED1;
 11587  1341  30D4               	movlw	_VarLED1& (0+255)
 11588  1342  00A0               	movwf	??_LedPointSelect
 11589  1343  0820               	movf	??_LedPointSelect,w
 11590  1344  0021               	movlb	1	; select bank1
 11591  1345  00BC               	movwf	_LED^(0+128)
 11592                           
 11593                           ;LED_B1.c: 13: }
 11594  1346  0008               	return
 11595  1347                     l5391:	
 11596                           
 11597                           ;LED_B1.c: 16: else if(led == 2)
 11598  1347  0020               	movlb	0	; select bank0
 11599  1348  0821               	movf	LedPointSelect@led,w
 11600  1349  3A02               	xorlw	2
 11601  134A  1D03               	skipz
 11602  134B  2B52               	goto	l5395
 11603                           
 11604                           ;LED_B1.c: 17: {
 11605                           ;LED_B1.c: 18: LED=&VarLED2;
 11606  134C  30D8               	movlw	_VarLED2& (0+255)
 11607  134D  00A0               	movwf	??_LedPointSelect
 11608  134E  0820               	movf	??_LedPointSelect,w
 11609  134F  0021               	movlb	1	; select bank1
 11610  1350  00BC               	movwf	_LED^(0+128)
 11611                           
 11612                           ;LED_B1.c: 19: }
 11613  1351  0008               	return
 11614  1352                     l5395:	
 11615                           
 11616                           ;LED_B1.c: 28: else if(led == 99)
 11617  1352  0020               	movlb	0	; select bank0
 11618  1353  0821               	movf	LedPointSelect@led,w
 11619  1354  3A63               	xorlw	99
 11620  1355  1D03               	skipz
 11621  1356  0008               	return
 11622                           
 11623                           ;LED_B1.c: 29: {
 11624                           ;LED_B1.c: 30: LED=&VarErrLED;
 11625  1357  30D0               	movlw	_VarErrLED& (0+255)
 11626  1358  00A0               	movwf	??_LedPointSelect
 11627  1359  0820               	movf	??_LedPointSelect,w
 11628  135A  0021               	movlb	1	; select bank1
 11629  135B  00BC               	movwf	_LED^(0+128)
 11630  135C  0008               	return
 11631  135D                     __end_of_LedPointSelect:	
 11632                           
 11633                           	psect	text66
 11634  11A1                     __ptext66:	
 11635 ;; *************** function _DimmerLights_Close *****************
 11636 ;; Defined at:
 11637 ;;		line 243 in file "../src/Dimmer_B1.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;		None
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;		None
 11642 ;; Return value:  Size  Location     Type
 11643 ;;		None               void
 11644 ;; Registers used:
 11645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;Total ram usage:        0 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    6
 11658 ;; This function calls:
 11659 ;;		_getDimmerLights_StatusFlag
 11660 ;; This function is called by:
 11661 ;;		_DimmerLights_Main
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           
 11666                           ;psect for function _DimmerLights_Close
 11667  11A1                     _DimmerLights_Close:	
 11668                           
 11669                           ;Dimmer_B1.c: 244: if (Dimmer->Detect) {
 11670                           
 11671                           ;incstack = 0
 11672                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11673  11A1  0021               	movlb	1	; select bank1
 11674  11A2  0839               	movf	_Dimmer^(0+128),w
 11675  11A3  0086               	movwf	6
 11676  11A4  0187               	clrf	7
 11677  11A5  1C01               	btfss	1,0
 11678  11A6  0008               	return
 11679                           
 11680                           ;Dimmer_B1.c: 245: Dimmer->Detect = 0;
 11681  11A7  0839               	movf	_Dimmer^(0+128),w
 11682  11A8  0086               	movwf	6
 11683  11A9  0187               	clrf	7
 11684  11AA  1001               	bcf	1,0
 11685                           
 11686                           ;Dimmer_B1.c: 246: if (!getDimmerLights_StatusFlag()) {
 11687  11AB  3192  2235  3191   	fcall	_getDimmerLights_StatusFlag
 11688  11AE  3800               	iorlw	0
 11689  11AF  1D03               	skipz
 11690  11B0  0008               	return
 11691                           
 11692                           ;Dimmer_B1.c: 247: ;;
 11693                           ;Dimmer_B1.c: 248: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 11694  11B1  0021               	movlb	1	; select bank1
 11695  11B2  0866               	movf	_Memory^(0+128),w
 11696  11B3  3E22               	addlw	34
 11697  11B4  0086               	movwf	6
 11698  11B5  3002               	movlw	2	; select bank4/5
 11699  11B6  0087               	movwf	7
 11700  11B7  1481               	bsf	1,1
 11701  11B8  0008               	return
 11702  11B9                     __end_of_DimmerLights_Close:	
 11703                           
 11704                           	psect	text67
 11705  1235                     __ptext67:	
 11706 ;; *************** function _getDimmerLights_StatusFlag *****************
 11707 ;; Defined at:
 11708 ;;		line 328 in file "../src/Dimmer_B1.c"
 11709 ;; Parameters:    Size  Location     Type
 11710 ;;		None
 11711 ;; Auto vars:     Size  Location     Type
 11712 ;;  Status          1    1[BANK0 ] unsigned char 
 11713 ;; Return value:  Size  Location     Type
 11714 ;;                  1    wreg      unsigned char 
 11715 ;; Registers used:
 11716 ;;		wreg, fsr1l, fsr1h, status,2
 11717 ;; Tracked objects:
 11718 ;;		On entry : 0/0
 11719 ;;		On exit  : 0/0
 11720 ;;		Unchanged: 0/0
 11721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;Total ram usage:        3 bytes
 11727 ;; Hardware stack levels used:    1
 11728 ;; Hardware stack levels required when called:    5
 11729 ;; This function calls:
 11730 ;;		Nothing
 11731 ;; This function is called by:
 11732 ;;		_DimmerLights_Close
 11733 ;;		_DimmerLights_Exceptions
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           
 11738                           ;psect for function _getDimmerLights_StatusFlag
 11739  1235                     _getDimmerLights_StatusFlag:	
 11740                           
 11741                           ;Dimmer_B1.c: 329: char Status = 0;
 11742                           
 11743                           ;incstack = 0
 11744                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 11745  1235  0020               	movlb	0	; select bank0
 11746  1236  01A1               	clrf	getDimmerLights_StatusFlag@Status
 11747                           
 11748                           ;Dimmer_B1.c: 336: Status = (DimmerLights11->StatusFlag || DimmerLights22->StatusFlag) ?
      +                           1 : 0;
 11749  1237  01A2               	clrf	_getDimmerLights_StatusFlag$1665
 11750  1238  0AA2               	incf	_getDimmerLights_StatusFlag$1665,f
 11751  1239  0021               	movlb	1	; select bank1
 11752  123A  083A               	movf	_DimmerLights11^(0+128),w
 11753  123B  0086               	movwf	6
 11754  123C  3001               	movlw	1	; select bank2/3
 11755  123D  0087               	movwf	7
 11756  123E  1B01               	btfsc	1,6
 11757  123F  2A48               	goto	l5895
 11758  1240  083B               	movf	_DimmerLights22^(0+128),w
 11759  1241  0086               	movwf	6
 11760  1242  3001               	movlw	1	; select bank2/3
 11761  1243  0087               	movwf	7
 11762  1244  1B01               	btfsc	1,6
 11763  1245  2A48               	goto	l5895
 11764  1246  0020               	movlb	0	; select bank0
 11765  1247  01A2               	clrf	_getDimmerLights_StatusFlag$1665
 11766  1248                     l5895:	
 11767  1248  0020               	movlb	0	; select bank0
 11768  1249  0822               	movf	_getDimmerLights_StatusFlag$1665,w
 11769  124A  00A0               	movwf	??_getDimmerLights_StatusFlag
 11770  124B  0820               	movf	??_getDimmerLights_StatusFlag,w
 11771  124C  00A1               	movwf	getDimmerLights_StatusFlag@Status
 11772                           
 11773                           ;Dimmer_B1.c: 343: return Status;
 11774  124D  0821               	movf	getDimmerLights_StatusFlag@Status,w
 11775  124E  0008               	return
 11776  124F                     __end_of_getDimmerLights_StatusFlag:	
 11777                           
 11778                           	psect	text68
 11779  118A                     __ptext68:	
 11780 ;; *************** function _DimmerLights_Initialization *****************
 11781 ;; Defined at:
 11782 ;;		line 183 in file "../src/Dimmer_B1.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;		None
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;		None               void
 11789 ;; Registers used:
 11790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/0
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;Total ram usage:        1 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:    7
 11803 ;; This function calls:
 11804 ;;		_Dimmer_Initialization
 11805 ;;		_setDimmerLights_Initialization
 11806 ;; This function is called by:
 11807 ;;		_main
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           
 11812                           ;psect for function _DimmerLights_Initialization
 11813  118A                     _DimmerLights_Initialization:	
 11814                           
 11815                           ;Dimmer_B1.c: 185: DimmerLights11 = &DimmerLights1;
 11816                           
 11817                           ;incstack = 0
 11818                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11819  118A  3020               	movlw	_DimmerLights1& (0+255)
 11820  118B  0020               	movlb	0	; select bank0
 11821  118C  00A4               	movwf	??_DimmerLights_Initialization
 11822  118D  0824               	movf	??_DimmerLights_Initialization,w
 11823  118E  0021               	movlb	1	; select bank1
 11824  118F  00BA               	movwf	_DimmerLights11^(0+128)
 11825                           
 11826                           ;Dimmer_B1.c: 186: setDimmerLights_Initialization(1);
 11827  1190  3001               	movlw	1
 11828  1191  3194  244E  3191   	fcall	_setDimmerLights_Initialization
 11829                           
 11830                           ;Dimmer_B1.c: 190: DimmerLights22 = &DimmerLights2;
 11831  1194  302E               	movlw	_DimmerLights2& (0+255)
 11832  1195  0020               	movlb	0	; select bank0
 11833  1196  00A4               	movwf	??_DimmerLights_Initialization
 11834  1197  0824               	movf	??_DimmerLights_Initialization,w
 11835  1198  0021               	movlb	1	; select bank1
 11836  1199  00BB               	movwf	_DimmerLights22^(0+128)
 11837                           
 11838                           ;Dimmer_B1.c: 191: setDimmerLights_Initialization(2);
 11839  119A  3002               	movlw	2
 11840  119B  3194  244E  3191   	fcall	_setDimmerLights_Initialization
 11841                           
 11842                           ;Dimmer_B1.c: 200: Dimmer_Initialization();
 11843  119E  319E  26D9         	fcall	_Dimmer_Initialization
 11844  11A0  0008               	return
 11845  11A1                     __end_of_DimmerLights_Initialization:	
 11846                           
 11847                           	psect	text69
 11848  144E                     __ptext69:	
 11849 ;; *************** function _setDimmerLights_Initialization *****************
 11850 ;; Defined at:
 11851 ;;		line 205 in file "../src/Dimmer_B1.c"
 11852 ;; Parameters:    Size  Location     Type
 11853 ;;  lights          1    wreg     unsigned char 
 11854 ;; Auto vars:     Size  Location     Type
 11855 ;;  lights          1    3[BANK0 ] unsigned char 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;		None               void
 11858 ;; Registers used:
 11859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;Total ram usage:        2 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:    6
 11872 ;; This function calls:
 11873 ;;		_DimmerLightsPointSelect
 11874 ;; This function is called by:
 11875 ;;		_DimmerLights_Initialization
 11876 ;; This function uses a non-reentrant model
 11877 ;;
 11878                           
 11879                           
 11880                           ;psect for function _setDimmerLights_Initialization
 11881  144E                     _setDimmerLights_Initialization:	
 11882                           
 11883                           ;incstack = 0
 11884                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 11885                           ;setDimmerLights_Initialization@lights stored from wreg
 11886  144E  0020               	movlb	0	; select bank0
 11887  144F  00A3               	movwf	setDimmerLights_Initialization@lights
 11888                           
 11889                           ;Dimmer_B1.c: 206: DimmerLightsPointSelect(lights);
 11890  1450  0823               	movf	setDimmerLights_Initialization@lights,w
 11891  1451  3191  210D         	fcall	_DimmerLightsPointSelect
 11892                           
 11893                           ;Dimmer_B1.c: 207: DimmerLights->Clear = 1;
 11894  1453  0879               	movf	_DimmerLights,w
 11895  1454  3E09               	addlw	9
 11896  1455  0086               	movwf	6
 11897  1456  3001               	movlw	1	; select bank2/3
 11898  1457  0087               	movwf	7
 11899  1458  1501               	bsf	1,2
 11900                           
 11901                           ;Dimmer_B1.c: 213: DimmerLights->MaxmumValue = ((char)(65*1.5));
 11902  1459  3061               	movlw	97
 11903  145A  0020               	movlb	0	; select bank0
 11904  145B  00A2               	movwf	??_setDimmerLights_Initialization
 11905  145C  0879               	movf	_DimmerLights,w
 11906  145D  3E05               	addlw	5
 11907  145E  0086               	movwf	6
 11908  145F  3001               	movlw	1	; select bank2/3
 11909  1460  0087               	movwf	7
 11910  1461  0822               	movf	??_setDimmerLights_Initialization,w
 11911  1462  0081               	movwf	1
 11912                           
 11913                           ;Dimmer_B1.c: 214: DimmerLights->MinimumValue = ((char)(20*1.5));
 11914  1463  301E               	movlw	30
 11915  1464  00A2               	movwf	??_setDimmerLights_Initialization
 11916  1465  0879               	movf	_DimmerLights,w
 11917  1466  3E06               	addlw	6
 11918  1467  0086               	movwf	6
 11919  1468  3001               	movlw	1	; select bank2/3
 11920  1469  0087               	movwf	7
 11921  146A  0822               	movf	??_setDimmerLights_Initialization,w
 11922  146B  0081               	movwf	1
 11923                           
 11924                           ;Dimmer_B1.c: 228: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 11925  146C  0879               	movf	_DimmerLights,w
 11926  146D  3E05               	addlw	5
 11927  146E  0086               	movwf	6
 11928  146F  3001               	movlw	1	; select bank2/3
 11929  1470  0087               	movwf	7
 11930  1471  0801               	movf	1,w
 11931  1472  00A2               	movwf	??_setDimmerLights_Initialization
 11932  1473  0879               	movf	_DimmerLights,w
 11933  1474  3E04               	addlw	4
 11934  1475  0086               	movwf	6
 11935  1476  3001               	movlw	1	; select bank2/3
 11936  1477  0087               	movwf	7
 11937  1478  0822               	movf	??_setDimmerLights_Initialization,w
 11938  1479  0081               	movwf	1
 11939  147A  0008               	return
 11940  147B                     __end_of_setDimmerLights_Initialization:	
 11941                           
 11942                           	psect	text70
 11943  1ED9                     __ptext70:	
 11944 ;; *************** function _Dimmer_Initialization *****************
 11945 ;; Defined at:
 11946 ;;		line 627 in file "../src/Dimmer_B1.c"
 11947 ;; Parameters:    Size  Location     Type
 11948 ;;		None
 11949 ;; Auto vars:     Size  Location     Type
 11950 ;;		None
 11951 ;; Return value:  Size  Location     Type
 11952 ;;		None               void
 11953 ;; Registers used:
 11954 ;;		wreg
 11955 ;; Tracked objects:
 11956 ;;		On entry : 0/0
 11957 ;;		On exit  : 0/0
 11958 ;;		Unchanged: 0/0
 11959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;Total ram usage:        1 bytes
 11965 ;; Hardware stack levels used:    1
 11966 ;; Hardware stack levels required when called:    5
 11967 ;; This function calls:
 11968 ;;		Nothing
 11969 ;; This function is called by:
 11970 ;;		_DimmerLights_Initialization
 11971 ;; This function uses a non-reentrant model
 11972 ;;
 11973                           
 11974                           
 11975                           ;psect for function _Dimmer_Initialization
 11976  1ED9                     _Dimmer_Initialization:	
 11977                           
 11978                           ;Dimmer_B1.c: 628: Dimmer = &Dimmer1;
 11979                           
 11980                           ;incstack = 0
 11981                           ; Regs used in _Dimmer_Initialization: [wreg]
 11982  1ED9  30DC               	movlw	_Dimmer1& (0+255)
 11983  1EDA  0020               	movlb	0	; select bank0
 11984  1EDB  00A0               	movwf	??_Dimmer_Initialization
 11985  1EDC  0820               	movf	??_Dimmer_Initialization,w
 11986  1EDD  0021               	movlb	1	; select bank1
 11987  1EDE  00B9               	movwf	_Dimmer^(0+128)
 11988  1EDF  0008               	return
 11989  1EE0                     __end_of_Dimmer_Initialization:	
 11990                           
 11991                           	psect	text71
 11992  1EF6                     __ptext71:	
 11993 ;; *************** function _DelayOff_Main *****************
 11994 ;; Defined at:
 11995 ;;		line 41 in file "../src/DelayOff_B1.c"
 11996 ;; Parameters:    Size  Location     Type
 11997 ;;		None
 11998 ;; Auto vars:     Size  Location     Type
 11999 ;;		None
 12000 ;; Return value:  Size  Location     Type
 12001 ;;		None               void
 12002 ;; Registers used:
 12003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12004 ;; Tracked objects:
 12005 ;;		On entry : 0/0
 12006 ;;		On exit  : 0/0
 12007 ;;		Unchanged: 0/0
 12008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;Total ram usage:        0 bytes
 12014 ;; Hardware stack levels used:    1
 12015 ;; Hardware stack levels required when called:   10
 12016 ;; This function calls:
 12017 ;;		_DlyOff_Main
 12018 ;; This function is called by:
 12019 ;;		_main
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           
 12024                           ;psect for function _DelayOff_Main
 12025  1EF6                     _DelayOff_Main:	
 12026                           
 12027                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12031  1EF6  3001               	movlw	1
 12032  1EF7  318C  2439  319E   	fcall	_DlyOff_Main
 12033                           
 12034                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12035  1EFA  3002               	movlw	2
 12036  1EFB  318C  2439         	fcall	_DlyOff_Main
 12037  1EFD  0008               	return
 12038  1EFE                     __end_of_DelayOff_Main:	
 12039                           
 12040                           	psect	text72
 12041  0C39                     __ptext72:	
 12042 ;; *************** function _DlyOff_Main *****************
 12043 ;; Defined at:
 12044 ;;		line 62 in file "../src/DelayOff_B1.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  sw              1    wreg     unsigned char 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  sw              1   68[BANK0 ] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;		None               void
 12051 ;; Registers used:
 12052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;Total ram usage:        3 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    9
 12065 ;; This function calls:
 12066 ;;		_DelayOffPointSelect
 12067 ;;		_setBuz
 12068 ;;		_setDimmerLights_Switch
 12069 ;;		_setDimmerLights_Trigger
 12070 ;;		_setRFSW_Status
 12071 ;;		_setRF_DimmerLights
 12072 ;;		_setSw_Status
 12073 ;;		_setTxData
 12074 ;; This function is called by:
 12075 ;;		_DelayOff_Main
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _DlyOff_Main
 12081  0C39                     _DlyOff_Main:	
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12085                           ;DlyOff_Main@sw stored from wreg
 12086  0C39  0020               	movlb	0	; select bank0
 12087  0C3A  00E4               	movwf	DlyOff_Main@sw
 12088                           
 12089                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12090  0C3B  0864               	movf	DlyOff_Main@sw,w
 12091  0C3C  3191  2173  318C   	fcall	_DelayOffPointSelect
 12092                           
 12093                           ;DelayOff_B1.c: 64: if (DelayOff->GO) {
 12094  0C3F  0021               	movlb	1	; select bank1
 12095  0C40  0838               	movf	_DelayOff^(0+128),w
 12096  0C41  0086               	movwf	6
 12097  0C42  0187               	clrf	7
 12098  0C43  1C81               	btfss	1,1
 12099  0C44  0008               	return
 12100                           
 12101                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12102  0C45  0838               	movf	_DelayOff^(0+128),w
 12103  0C46  3E02               	addlw	2
 12104  0C47  0086               	movwf	6
 12105  0C48  0187               	clrf	7
 12106  0C49  3001               	movlw	1
 12107  0C4A  0781               	addwf	1,f
 12108  0C4B  3141               	addfsr 1,1
 12109  0C4C  1803               	skipnc
 12110  0C4D  0A81               	incf	1,f
 12111                           
 12112                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5650) {
 12113  0C4E  0838               	movf	_DelayOff^(0+128),w
 12114  0C4F  3E02               	addlw	2
 12115  0C50  0086               	movwf	6
 12116  0C51  0187               	clrf	7
 12117  0C52  3F40               	moviw [0]fsr1
 12118  0C53  0020               	movlb	0	; select bank0
 12119  0C54  00E2               	movwf	??_DlyOff_Main
 12120  0C55  3F41               	moviw [1]fsr1
 12121  0C56  00E3               	movwf	??_DlyOff_Main+1
 12122  0C57  3016               	movlw	22
 12123  0C58  0263               	subwf	??_DlyOff_Main+1,w
 12124  0C59  3012               	movlw	18
 12125  0C5A  1903               	skipnz
 12126  0C5B  0262               	subwf	??_DlyOff_Main,w
 12127  0C5C  1C03               	skipc
 12128  0C5D  0008               	return
 12129                           
 12130                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12131  0C5E  0021               	movlb	1	; select bank1
 12132  0C5F  0838               	movf	_DelayOff^(0+128),w
 12133  0C60  3E02               	addlw	2
 12134  0C61  0086               	movwf	6
 12135  0C62  0187               	clrf	7
 12136  0C63  3000               	movlw	0
 12137  0C64  3FC0               	movwi [0]fsr1
 12138  0C65  3FC1               	movwi [1]fsr1
 12139                           
 12140                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12141  0C66  3001               	movlw	1
 12142  0C67  0020               	movlb	0	; select bank0
 12143  0C68  00E2               	movwf	??_DlyOff_Main
 12144  0C69  0021               	movlb	1	; select bank1
 12145  0C6A  0838               	movf	_DelayOff^(0+128),w
 12146  0C6B  3E04               	addlw	4
 12147  0C6C  0086               	movwf	6
 12148  0C6D  0187               	clrf	7
 12149  0C6E  0020               	movlb	0	; select bank0
 12150  0C6F  0862               	movf	??_DlyOff_Main,w
 12151  0C70  0781               	addwf	1,f
 12152                           
 12153                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12154  0C71  0021               	movlb	1	; select bank1
 12155  0C72  0838               	movf	_DelayOff^(0+128),w
 12156  0C73  3E04               	addlw	4
 12157  0C74  0086               	movwf	6
 12158  0C75  0187               	clrf	7
 12159  0C76  0A38               	incf	_DelayOff^(0+128),w
 12160  0C77  0084               	movwf	4
 12161  0C78  0185               	clrf	5
 12162  0C79  0800               	movf	0,w
 12163  0C7A  0201               	subwf	1,w
 12164  0C7B  1C03               	skipc
 12165  0C7C  0008               	return
 12166                           
 12167                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12168  0C7D  0838               	movf	_DelayOff^(0+128),w
 12169  0C7E  3E04               	addlw	4
 12170  0C7F  0086               	movwf	6
 12171  0C80  0187               	clrf	7
 12172  0C81  0181               	clrf	1
 12173                           
 12174                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12175  0C82  0838               	movf	_DelayOff^(0+128),w
 12176  0C83  0086               	movwf	6
 12177  0C84  0187               	clrf	7
 12178  0C85  1081               	bcf	1,1
 12179                           
 12180                           ;DelayOff_B1.c: 72: setSw_Status(sw, 0);
 12181  0C86  0020               	movlb	0	; select bank0
 12182  0C87  01A2               	clrf	setSw_Status@command
 12183  0C88  0864               	movf	DlyOff_Main@sw,w
 12184  0C89  319F  27E2  318C   	fcall	_setSw_Status
 12185                           
 12186                           ;DelayOff_B1.c: 73: setRFSW_Status(sw, 0);
 12187  0C8C  0020               	movlb	0	; select bank0
 12188  0C8D  01A2               	clrf	setRFSW_Status@command
 12189  0C8E  0864               	movf	DlyOff_Main@sw,w
 12190  0C8F  319F  27D3  318C   	fcall	_setRFSW_Status
 12191                           
 12192                           ;DelayOff_B1.c: 74: setRF_DimmerLights(sw, 0);
 12193  0C92  0020               	movlb	0	; select bank0
 12194  0C93  01DD               	clrf	setRF_DimmerLights@on
 12195  0C94  0864               	movf	DlyOff_Main@sw,w
 12196  0C95  318A  2208  318C   	fcall	_setRF_DimmerLights
 12197                           
 12198                           ;DelayOff_B1.c: 75: setDimmerLights_Trigger(sw, 1);
 12199  0C98  0020               	movlb	0	; select bank0
 12200  0C99  01A2               	clrf	setDimmerLights_Trigger@command
 12201  0C9A  0AA2               	incf	setDimmerLights_Trigger@command,f
 12202  0C9B  0864               	movf	DlyOff_Main@sw,w
 12203  0C9C  3190  20A9  318C   	fcall	_setDimmerLights_Trigger
 12204                           
 12205                           ;DelayOff_B1.c: 76: setDimmerLights_Switch(sw, 0);
 12206  0C9F  0020               	movlb	0	; select bank0
 12207  0CA0  01A2               	clrf	setDimmerLights_Switch@command
 12208  0CA1  0864               	movf	DlyOff_Main@sw,w
 12209  0CA2  3190  2099  318C   	fcall	_setDimmerLights_Switch
 12210                           
 12211                           ;DelayOff_B1.c: 77: setTxData(1);
 12212  0CA5  3001               	movlw	1
 12213  0CA6  3186  2656  318C   	fcall	_setTxData
 12214                           
 12215                           ;DelayOff_B1.c: 78: setBuz(1, 100);
 12216  0CA9  3064               	movlw	100
 12217  0CAA  0020               	movlb	0	; select bank0
 12218  0CAB  00A0               	movwf	setBuz@time
 12219  0CAC  3000               	movlw	0
 12220  0CAD  00A1               	movwf	setBuz@time+1
 12221  0CAE  3001               	movlw	1
 12222  0CAF  3189  2141         	fcall	_setBuz
 12223  0CB1  0008               	return
 12224  0CB2                     __end_of_DlyOff_Main:	
 12225                           
 12226                           	psect	text73
 12227  0656                     __ptext73:	
 12228 ;; *************** function _setTxData *****************
 12229 ;; Defined at:
 12230 ;;		line 131 in file "../src/RF_Control_B1.c"
 12231 ;; Parameters:    Size  Location     Type
 12232 ;;  rf              1    wreg     unsigned char 
 12233 ;; Auto vars:     Size  Location     Type
 12234 ;;  rf              1    3[BANK0 ] unsigned char 
 12235 ;;  i               1    0        unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;		None               void
 12238 ;; Registers used:
 12239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;Total ram usage:        2 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    6
 12252 ;; This function calls:
 12253 ;;		_RfPointSelect
 12254 ;; This function is called by:
 12255 ;;		_DlyOff_Main
 12256 ;;		_setDimmerLights_Adj
 12257 ;;		_setControl_Lights_Table
 12258 ;;		_setRFSW_Control
 12259 ;;		_setRFSW_AdjControl
 12260 ;;		_Sw_DimmerOnFunc
 12261 ;;		_Sw_DimmerOffFunc
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function _setTxData
 12267  0656                     _setTxData:	
 12268                           
 12269                           ;incstack = 0
 12270                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12271                           ;setTxData@rf stored from wreg
 12272  0656  0020               	movlb	0	; select bank0
 12273  0657  00A3               	movwf	setTxData@rf
 12274                           
 12275                           ;RF_Control_B1.c: 132: char i;
 12276                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 12277  0658  0823               	movf	setTxData@rf,w
 12278  0659  319F  276F  3186   	fcall	_RfPointSelect
 12279                           
 12280                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 12281  065C  0021               	movlb	1	; select bank1
 12282  065D  083D               	movf	_RF^(0+128),w
 12283  065E  0086               	movwf	6
 12284  065F  0187               	clrf	7
 12285  0660  1C01               	btfss	1,0
 12286  0661  0008               	return
 12287                           
 12288                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 12289  0662  083D               	movf	_RF^(0+128),w
 12290  0663  0086               	movwf	6
 12291  0664  0187               	clrf	7
 12292  0665  1901               	btfsc	1,2
 12293  0666  0008               	return
 12294                           
 12295                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 12296  0667  083D               	movf	_RF^(0+128),w
 12297  0668  0086               	movwf	6
 12298  0669  0187               	clrf	7
 12299  066A  1501               	bsf	1,2
 12300                           
 12301                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 12302  066B  3063               	movlw	99
 12303  066C  0020               	movlb	0	; select bank0
 12304  066D  00A2               	movwf	??_setTxData
 12305  066E  0822               	movf	??_setTxData,w
 12306  066F  0021               	movlb	1	; select bank1
 12307  0670  00A0               	movwf	_RF_Data^(0+128)
 12308                           
 12309                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 12310  0671  3002               	movlw	2
 12311  0672  0020               	movlb	0	; select bank0
 12312  0673  00A2               	movwf	??_setTxData
 12313  0674  0822               	movf	??_setTxData,w
 12314  0675  0021               	movlb	1	; select bank1
 12315  0676  00A1               	movwf	(_RF_Data^(0+128)+1)
 12316                           
 12317                           ;RF_Control_B1.c: 148: RF_Data[2] = product->Data[2];
 12318  0677  087D               	movf	_product,w
 12319  0678  0086               	movwf	6
 12320  0679  3001               	movlw	1	; select bank2/3
 12321  067A  0087               	movwf	7
 12322  067B  3001               	movlw	1	; select bank2/3
 12323  067C  3F42               	moviw [2]fsr1
 12324  067D  00A2               	movwf	(_RF_Data^(0+128)+2)
 12325                           
 12326                           ;RF_Control_B1.c: 149: RF_Data[3] = product->Data[3];
 12327  067E  087D               	movf	_product,w
 12328  067F  0086               	movwf	6
 12329  0680  3001               	movlw	1	; select bank2/3
 12330  0681  0087               	movwf	7
 12331  0682  3001               	movlw	1	; select bank2/3
 12332  0683  3F43               	moviw [3]fsr1
 12333  0684  00A3               	movwf	(_RF_Data^(0+128)+3)
 12334                           
 12335                           ;RF_Control_B1.c: 150: RF_Data[4] = product->Data[4];
 12336  0685  087D               	movf	_product,w
 12337  0686  0086               	movwf	6
 12338  0687  3001               	movlw	1	; select bank2/3
 12339  0688  0087               	movwf	7
 12340  0689  3001               	movlw	1	; select bank2/3
 12341  068A  3F44               	moviw [4]fsr1
 12342  068B  00A4               	movwf	(_RF_Data^(0+128)+4)
 12343                           
 12344                           ;RF_Control_B1.c: 151: RF_Data[5] = product->Data[5];
 12345  068C  087D               	movf	_product,w
 12346  068D  0086               	movwf	6
 12347  068E  3001               	movlw	1	; select bank2/3
 12348  068F  0087               	movwf	7
 12349  0690  3001               	movlw	1	; select bank2/3
 12350  0691  3F45               	moviw [5]fsr1
 12351  0692  00A5               	movwf	(_RF_Data^(0+128)+5)
 12352                           
 12353                           ;RF_Control_B1.c: 152: RF_Data[6] = product->Data[6];
 12354  0693  087D               	movf	_product,w
 12355  0694  0086               	movwf	6
 12356  0695  3001               	movlw	1	; select bank2/3
 12357  0696  0087               	movwf	7
 12358  0697  3001               	movlw	1	; select bank2/3
 12359  0698  3F46               	moviw [6]fsr1
 12360  0699  00A6               	movwf	(_RF_Data^(0+128)+6)
 12361                           
 12362                           ;RF_Control_B1.c: 153: RF_Data[7] = product->Data[7];
 12363  069A  087D               	movf	_product,w
 12364  069B  0086               	movwf	6
 12365  069C  3001               	movlw	1	; select bank2/3
 12366  069D  0087               	movwf	7
 12367  069E  3001               	movlw	1	; select bank2/3
 12368  069F  3F47               	moviw [7]fsr1
 12369  06A0  00A7               	movwf	(_RF_Data^(0+128)+7)
 12370                           
 12371                           ;RF_Control_B1.c: 154: RF_Data[8] = product->Data[8];
 12372  06A1  087D               	movf	_product,w
 12373  06A2  0086               	movwf	6
 12374  06A3  3001               	movlw	1	; select bank2/3
 12375  06A4  0087               	movwf	7
 12376  06A5  3001               	movlw	1	; select bank2/3
 12377  06A6  3F48               	moviw [8]fsr1
 12378  06A7  00A8               	movwf	(_RF_Data^(0+128)+8)
 12379                           
 12380                           ;RF_Control_B1.c: 155: RF_Data[9] = product->Data[9];
 12381  06A8  087D               	movf	_product,w
 12382  06A9  0086               	movwf	6
 12383  06AA  3001               	movlw	1	; select bank2/3
 12384  06AB  0087               	movwf	7
 12385  06AC  3001               	movlw	1	; select bank2/3
 12386  06AD  3F49               	moviw [9]fsr1
 12387  06AE  00A9               	movwf	(_RF_Data^(0+128)+9)
 12388                           
 12389                           ;RF_Control_B1.c: 156: RF_Data[10] = product->Data[10];
 12390  06AF  087D               	movf	_product,w
 12391  06B0  0086               	movwf	6
 12392  06B1  3001               	movlw	1	; select bank2/3
 12393  06B2  0087               	movwf	7
 12394  06B3  3001               	movlw	1	; select bank2/3
 12395  06B4  3F4A               	moviw [10]fsr1
 12396  06B5  00AA               	movwf	(_RF_Data^(0+128)+10)
 12397                           
 12398                           ;RF_Control_B1.c: 157: RF_Data[11] = product->Data[11];
 12399  06B6  087D               	movf	_product,w
 12400  06B7  0086               	movwf	6
 12401  06B8  3001               	movlw	1	; select bank2/3
 12402  06B9  0087               	movwf	7
 12403  06BA  3001               	movlw	1	; select bank2/3
 12404  06BB  3F4B               	moviw [11]fsr1
 12405  06BC  00AB               	movwf	(_RF_Data^(0+128)+11)
 12406                           
 12407                           ;RF_Control_B1.c: 158: RF_Data[12] = product->Data[12];
 12408  06BD  087D               	movf	_product,w
 12409  06BE  0086               	movwf	6
 12410  06BF  3001               	movlw	1	; select bank2/3
 12411  06C0  0087               	movwf	7
 12412  06C1  3001               	movlw	1	; select bank2/3
 12413  06C2  3F4C               	moviw [12]fsr1
 12414  06C3  00AC               	movwf	(_RF_Data^(0+128)+12)
 12415                           
 12416                           ;RF_Control_B1.c: 159: RF_Data[13] = product->Data[13];
 12417  06C4  087D               	movf	_product,w
 12418  06C5  0086               	movwf	6
 12419  06C6  3001               	movlw	1	; select bank2/3
 12420  06C7  0087               	movwf	7
 12421  06C8  3001               	movlw	1	; select bank2/3
 12422  06C9  3F4D               	moviw [13]fsr1
 12423  06CA  00AD               	movwf	(_RF_Data^(0+128)+13)
 12424                           
 12425                           ;RF_Control_B1.c: 160: RF_Data[14] = product->Data[14];
 12426  06CB  087D               	movf	_product,w
 12427  06CC  0086               	movwf	6
 12428  06CD  3001               	movlw	1	; select bank2/3
 12429  06CE  0087               	movwf	7
 12430  06CF  3001               	movlw	1	; select bank2/3
 12431  06D0  3F4E               	moviw [14]fsr1
 12432  06D1  00AE               	movwf	(_RF_Data^(0+128)+14)
 12433                           
 12434                           ;RF_Control_B1.c: 161: RF_Data[15] = product->Data[15];
 12435  06D2  087D               	movf	_product,w
 12436  06D3  0086               	movwf	6
 12437  06D4  3001               	movlw	1	; select bank2/3
 12438  06D5  0087               	movwf	7
 12439  06D6  3001               	movlw	1	; select bank2/3
 12440  06D7  3F4F               	moviw [15]fsr1
 12441  06D8  00AF               	movwf	(_RF_Data^(0+128)+15)
 12442                           
 12443                           ;RF_Control_B1.c: 162: RF_Data[16] = product->Data[16];
 12444  06D9  087D               	movf	_product,w
 12445  06DA  0086               	movwf	6
 12446  06DB  3001               	movlw	1	; select bank2/3
 12447  06DC  0087               	movwf	7
 12448  06DD  3001               	movlw	1	; select bank2/3
 12449  06DE  3F50               	moviw [16]fsr1
 12450  06DF  00B0               	movwf	(_RF_Data^(0+128)+16)
 12451                           
 12452                           ;RF_Control_B1.c: 163: RF_Data[17] = product->Data[17];
 12453  06E0  087D               	movf	_product,w
 12454  06E1  0086               	movwf	6
 12455  06E2  3001               	movlw	1	; select bank2/3
 12456  06E3  0087               	movwf	7
 12457  06E4  3001               	movlw	1	; select bank2/3
 12458  06E5  3F51               	moviw [17]fsr1
 12459  06E6  00B1               	movwf	(_RF_Data^(0+128)+17)
 12460                           
 12461                           ;RF_Control_B1.c: 164: RF_Data[18] = product->Data[18];
 12462  06E7  087D               	movf	_product,w
 12463  06E8  0086               	movwf	6
 12464  06E9  3001               	movlw	1	; select bank2/3
 12465  06EA  0087               	movwf	7
 12466  06EB  3001               	movlw	1	; select bank2/3
 12467  06EC  3F52               	moviw [18]fsr1
 12468  06ED  00B2               	movwf	(_RF_Data^(0+128)+18)
 12469                           
 12470                           ;RF_Control_B1.c: 165: RF_Data[19] = product->Data[19];
 12471  06EE  087D               	movf	_product,w
 12472  06EF  0086               	movwf	6
 12473  06F0  3001               	movlw	1	; select bank2/3
 12474  06F1  0087               	movwf	7
 12475  06F2  3001               	movlw	1	; select bank2/3
 12476  06F3  3F53               	moviw [19]fsr1
 12477  06F4  00B3               	movwf	(_RF_Data^(0+128)+19)
 12478                           
 12479                           ;RF_Control_B1.c: 166: RF_Data[20] = 210;
 12480  06F5  30D2               	movlw	210
 12481  06F6  0020               	movlb	0	; select bank0
 12482  06F7  00A2               	movwf	??_setTxData
 12483  06F8  0822               	movf	??_setTxData,w
 12484  06F9  0021               	movlb	1	; select bank1
 12485  06FA  00B4               	movwf	(_RF_Data^(0+128)+20)
 12486  06FB  0008               	return
 12487  06FC                     __end_of_setTxData:	
 12488                           
 12489                           	psect	text74
 12490  1F6F                     __ptext74:	
 12491 ;; *************** function _RfPointSelect *****************
 12492 ;; Defined at:
 12493 ;;		line 7 in file "../src/RF_Control_B1.c"
 12494 ;; Parameters:    Size  Location     Type
 12495 ;;  rf              1    wreg     unsigned char 
 12496 ;; Auto vars:     Size  Location     Type
 12497 ;;  rf              1    1[BANK0 ] unsigned char 
 12498 ;; Return value:  Size  Location     Type
 12499 ;;		None               void
 12500 ;; Registers used:
 12501 ;;		wreg
 12502 ;; Tracked objects:
 12503 ;;		On entry : 0/0
 12504 ;;		On exit  : 0/0
 12505 ;;		Unchanged: 0/0
 12506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;Total ram usage:        2 bytes
 12512 ;; Hardware stack levels used:    1
 12513 ;; Hardware stack levels required when called:    5
 12514 ;; This function calls:
 12515 ;;		Nothing
 12516 ;; This function is called by:
 12517 ;;		_setRF_Learn
 12518 ;;		_setRF_RxStatus
 12519 ;;		_setRF_Main
 12520 ;;		_setTxData
 12521 ;;		_setRF_Enable
 12522 ;;		_RF_RxDisable
 12523 ;;		_getRxData
 12524 ;;		_setLog_Code
 12525 ;;		_setControl_Lights_Table
 12526 ;; This function uses a non-reentrant model
 12527 ;;
 12528                           
 12529                           
 12530                           ;psect for function _RfPointSelect
 12531  1F6F                     _RfPointSelect:	
 12532                           
 12533                           ;incstack = 0
 12534                           ; Regs used in _RfPointSelect: [wreg]
 12535                           ;RfPointSelect@rf stored from wreg
 12536  1F6F  0020               	movlb	0	; select bank0
 12537  1F70  00A1               	movwf	RfPointSelect@rf
 12538                           
 12539                           ;RF_Control_B1.c: 9: if (rf == 1) {
 12540  1F71  0821               	movf	RfPointSelect@rf,w
 12541  1F72  3A01               	xorlw	1
 12542  1F73  1D03               	skipz
 12543  1F74  0008               	return
 12544                           
 12545                           ;RF_Control_B1.c: 10: RF = &RF1;
 12546  1F75  30DF               	movlw	_RF1& (0+255)
 12547  1F76  00A0               	movwf	??_RfPointSelect
 12548  1F77  0820               	movf	??_RfPointSelect,w
 12549  1F78  0021               	movlb	1	; select bank1
 12550  1F79  00BD               	movwf	_RF^(0+128)
 12551  1F7A  0008               	return
 12552  1F7B                     __end_of_RfPointSelect:	
 12553                           
 12554                           	psect	text75
 12555  1FE2                     __ptext75:	
 12556 ;; *************** function _setSw_Status *****************
 12557 ;; Defined at:
 12558 ;;		line 105 in file "../src/Switch_B1.c"
 12559 ;; Parameters:    Size  Location     Type
 12560 ;;  sw              1    wreg     unsigned char 
 12561 ;;  command         1    2[BANK0 ] unsigned char 
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  sw              1    3[BANK0 ] unsigned char 
 12564 ;; Return value:  Size  Location     Type
 12565 ;;		None               void
 12566 ;; Registers used:
 12567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12573 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12577 ;;Total ram usage:        2 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:    6
 12580 ;; This function calls:
 12581 ;;		_SwPointSelect
 12582 ;; This function is called by:
 12583 ;;		_DlyOff_Main
 12584 ;;		_setControl_Lights_Table
 12585 ;;		_setRFSW_Control
 12586 ;;		_setDimmerLights_ERROR
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           
 12591                           ;psect for function _setSw_Status
 12592  1FE2                     _setSw_Status:	
 12593                           
 12594                           ;incstack = 0
 12595                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12596                           ;setSw_Status@sw stored from wreg
 12597  1FE2  0020               	movlb	0	; select bank0
 12598  1FE3  00A3               	movwf	setSw_Status@sw
 12599                           
 12600                           ;Switch_B1.c: 106: SwPointSelect(sw);
 12601  1FE4  0823               	movf	setSw_Status@sw,w
 12602  1FE5  3191  2120         	fcall	_SwPointSelect
 12603                           
 12604                           ;Switch_B1.c: 107: Sw->Status = command;
 12605  1FE7  087B               	movf	_Sw,w
 12606  1FE8  0086               	movwf	6
 12607  1FE9  3001               	movlw	1	; select bank2/3
 12608  1FEA  0087               	movwf	7
 12609  1FEB  0020               	movlb	0	; select bank0
 12610  1FEC  0822               	movf	setSw_Status@command,w
 12611  1FED  1301               	bcf	1,6
 12612  1FEE  1D03               	skipz
 12613  1FEF  1701               	bsf	1,6
 12614  1FF0  0008               	return
 12615  1FF1                     __end_of_setSw_Status:	
 12616                           
 12617                           	psect	text76
 12618  1120                     __ptext76:	
 12619 ;; *************** function _SwPointSelect *****************
 12620 ;; Defined at:
 12621 ;;		line 17 in file "../src/Switch_B1.c"
 12622 ;; Parameters:    Size  Location     Type
 12623 ;;  sw              1    wreg     unsigned char 
 12624 ;; Auto vars:     Size  Location     Type
 12625 ;;  sw              1    1[BANK0 ] unsigned char 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;		None               void
 12628 ;; Registers used:
 12629 ;;		wreg
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;Total ram usage:        2 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    5
 12642 ;; This function calls:
 12643 ;;		Nothing
 12644 ;; This function is called by:
 12645 ;;		_setSw_Enable
 12646 ;;		_setSw_Status
 12647 ;;		_setSw_Main
 12648 ;;		_Sw_Detect
 12649 ;; This function uses a non-reentrant model
 12650 ;;
 12651                           
 12652                           
 12653                           ;psect for function _SwPointSelect
 12654  1120                     _SwPointSelect:	
 12655                           
 12656                           ;incstack = 0
 12657                           ; Regs used in _SwPointSelect: [wreg]
 12658                           ;SwPointSelect@sw stored from wreg
 12659  1120  0020               	movlb	0	; select bank0
 12660  1121  00A1               	movwf	SwPointSelect@sw
 12661                           
 12662                           ;Switch_B1.c: 20: if (sw == 1) {
 12663  1122  0821               	movf	SwPointSelect@sw,w
 12664  1123  3A01               	xorlw	1
 12665  1124  1D03               	skipz
 12666  1125  292B               	goto	l5407
 12667                           
 12668                           ;Switch_B1.c: 21: Sw = &Sw1;
 12669  1126  3048               	movlw	_Sw1& (0+255)
 12670  1127  00A0               	movwf	??_SwPointSelect
 12671  1128  0820               	movf	??_SwPointSelect,w
 12672  1129  00FB               	movwf	_Sw
 12673                           
 12674                           ;Switch_B1.c: 22: }
 12675  112A  0008               	return
 12676  112B                     l5407:	
 12677                           
 12678                           ;Switch_B1.c: 25: else if (sw == 2) {
 12679  112B  0821               	movf	SwPointSelect@sw,w
 12680  112C  3A02               	xorlw	2
 12681  112D  1D03               	skipz
 12682  112E  0008               	return
 12683                           
 12684                           ;Switch_B1.c: 26: Sw = &Sw2;
 12685  112F  3051               	movlw	_Sw2& (0+255)
 12686  1130  00A0               	movwf	??_SwPointSelect
 12687  1131  0820               	movf	??_SwPointSelect,w
 12688  1132  00FB               	movwf	_Sw
 12689  1133  0008               	return
 12690  1134                     __end_of_SwPointSelect:	
 12691                           
 12692                           	psect	text77
 12693  0A08                     __ptext77:	
 12694 ;; *************** function _setRF_DimmerLights *****************
 12695 ;; Defined at:
 12696 ;;		line 398 in file "../src/RF_Control_B1.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;  lights          1    wreg     unsigned char 
 12699 ;;  on              1   61[BANK0 ] unsigned char 
 12700 ;; Auto vars:     Size  Location     Type
 12701 ;;  lights          1   65[BANK0 ] unsigned char 
 12702 ;;  status          1   64[BANK0 ] unsigned char 
 12703 ;; Return value:  Size  Location     Type
 12704 ;;		None               void
 12705 ;; Registers used:
 12706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12712 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;Total ram usage:        5 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    8
 12719 ;; This function calls:
 12720 ;;		_setPercentValue
 12721 ;; This function is called by:
 12722 ;;		_DlyOff_Main
 12723 ;;		_setDimmerLights_Adj
 12724 ;;		_setRFSW_Control
 12725 ;;		_Sw_DimmerOnFunc
 12726 ;;		_Sw_DimmerOffFunc
 12727 ;; This function uses a non-reentrant model
 12728 ;;
 12729                           
 12730                           
 12731                           ;psect for function _setRF_DimmerLights
 12732  0A08                     _setRF_DimmerLights:	
 12733                           
 12734                           ;incstack = 0
 12735                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12736                           ;setRF_DimmerLights@lights stored from wreg
 12737  0A08  0020               	movlb	0	; select bank0
 12738  0A09  00E1               	movwf	setRF_DimmerLights@lights
 12739                           
 12740                           ;RF_Control_B1.c: 399: char status;
 12741                           ;RF_Control_B1.c: 400: status = 1;
 12742  0A0A  01E0               	clrf	setRF_DimmerLights@status
 12743  0A0B  0AE0               	incf	setRF_DimmerLights@status,f
 12744                           
 12745                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 12746  0A0C  0861               	movf	setRF_DimmerLights@lights,w
 12747  0A0D  3EFF               	addlw	-1
 12748  0A0E  0A89               	incf	9,f
 12749  0A0F  2A12               	goto	u3830
 12750  0A10                     u3835:	
 12751  0A10  1003               	clrc
 12752  0A11  0DE0               	rlf	setRF_DimmerLights@status,f
 12753  0A12                     u3830:	
 12754  0A12  3EFF               	addlw	-1
 12755  0A13  1D03               	skipz
 12756  0A14  2A10               	goto	u3835
 12757                           
 12758                           ;RF_Control_B1.c: 402: product->Data[11]=lights;
 12759  0A15  0861               	movf	setRF_DimmerLights@lights,w
 12760  0A16  00DE               	movwf	??_setRF_DimmerLights
 12761  0A17  087D               	movf	_product,w
 12762  0A18  3E0B               	addlw	11
 12763  0A19  0086               	movwf	6
 12764  0A1A  3001               	movlw	1	; select bank2/3
 12765  0A1B  0087               	movwf	7
 12766  0A1C  085E               	movf	??_setRF_DimmerLights,w
 12767  0A1D  0081               	movwf	1
 12768                           
 12769                           ;RF_Control_B1.c: 405: product->Data[(20 + lights)]=setPercentValue(((char)(65*1.5)));
 12770  0A1E  3061               	movlw	97
 12771  0A1F  3196  26D1  318A   	fcall	_setPercentValue
 12772  0A22  0020               	movlb	0	; select bank0
 12773  0A23  00DE               	movwf	??_setRF_DimmerLights
 12774  0A24  0861               	movf	setRF_DimmerLights@lights,w
 12775  0A25  3E14               	addlw	20
 12776  0A26  077D               	addwf	_product,w
 12777  0A27  00DF               	movwf	??_setRF_DimmerLights+1
 12778  0A28  085F               	movf	??_setRF_DimmerLights+1,w
 12779  0A29  0086               	movwf	6
 12780  0A2A  3001               	movlw	1	; select bank2/3
 12781  0A2B  0087               	movwf	7
 12782  0A2C  085E               	movf	??_setRF_DimmerLights,w
 12783  0A2D  0081               	movwf	1
 12784                           
 12785                           ;RF_Control_B1.c: 408: product->Data[9]=product->Data[20 + lights];
 12786  0A2E  0861               	movf	setRF_DimmerLights@lights,w
 12787  0A2F  3E14               	addlw	20
 12788  0A30  077D               	addwf	_product,w
 12789  0A31  00DE               	movwf	??_setRF_DimmerLights
 12790  0A32  085E               	movf	??_setRF_DimmerLights,w
 12791  0A33  0086               	movwf	6
 12792  0A34  3001               	movlw	1	; select bank2/3
 12793  0A35  0087               	movwf	7
 12794  0A36  0801               	movf	1,w
 12795  0A37  00DF               	movwf	??_setRF_DimmerLights+1
 12796  0A38  087D               	movf	_product,w
 12797  0A39  3E09               	addlw	9
 12798  0A3A  0086               	movwf	6
 12799  0A3B  3001               	movlw	1	; select bank2/3
 12800  0A3C  0087               	movwf	7
 12801  0A3D  085F               	movf	??_setRF_DimmerLights+1,w
 12802  0A3E  0081               	movwf	1
 12803                           
 12804                           ;RF_Control_B1.c: 409: product->Data[17]=product->Data[26 + lights];
 12805  0A3F  0861               	movf	setRF_DimmerLights@lights,w
 12806  0A40  3E1A               	addlw	26
 12807  0A41  077D               	addwf	_product,w
 12808  0A42  00DE               	movwf	??_setRF_DimmerLights
 12809  0A43  085E               	movf	??_setRF_DimmerLights,w
 12810  0A44  0086               	movwf	6
 12811  0A45  3001               	movlw	1	; select bank2/3
 12812  0A46  0087               	movwf	7
 12813  0A47  0801               	movf	1,w
 12814  0A48  00DF               	movwf	??_setRF_DimmerLights+1
 12815  0A49  087D               	movf	_product,w
 12816  0A4A  3E11               	addlw	17
 12817  0A4B  0086               	movwf	6
 12818  0A4C  3001               	movlw	1	; select bank2/3
 12819  0A4D  0087               	movwf	7
 12820  0A4E  085F               	movf	??_setRF_DimmerLights+1,w
 12821  0A4F  0081               	movwf	1
 12822                           
 12823                           ;RF_Control_B1.c: 410: if (on) {
 12824  0A50  085D               	movf	setRF_DimmerLights@on,w
 12825  0A51  1903               	btfsc	3,2
 12826  0A52  2A63               	goto	l5447
 12827                           
 12828                           ;RF_Control_B1.c: 411: product->Data[15]=(product->Data[15] | status);
 12829  0A53  087D               	movf	_product,w
 12830  0A54  3E0F               	addlw	15
 12831  0A55  0086               	movwf	6
 12832  0A56  3001               	movlw	1	; select bank2/3
 12833  0A57  0087               	movwf	7
 12834  0A58  0801               	movf	1,w
 12835  0A59  0460               	iorwf	setRF_DimmerLights@status,w
 12836  0A5A  00DE               	movwf	??_setRF_DimmerLights
 12837  0A5B  087D               	movf	_product,w
 12838  0A5C  3E0F               	addlw	15
 12839  0A5D  0086               	movwf	6
 12840  0A5E  3001               	movlw	1	; select bank2/3
 12841  0A5F  0087               	movwf	7
 12842  0A60  085E               	movf	??_setRF_DimmerLights,w
 12843  0A61  0081               	movwf	1
 12844                           
 12845                           ;RF_Control_B1.c: 412: } else {
 12846  0A62  0008               	return
 12847  0A63                     l5447:	
 12848                           
 12849                           ;RF_Control_B1.c: 413: product->Data[15]=(product->Data[15]&(~status));
 12850  0A63  087D               	movf	_product,w
 12851  0A64  3E0F               	addlw	15
 12852  0A65  0086               	movwf	6
 12853  0A66  3001               	movlw	1	; select bank2/3
 12854  0A67  0087               	movwf	7
 12855  0A68  0960               	comf	setRF_DimmerLights@status,w
 12856  0A69  0501               	andwf	1,w
 12857  0A6A  00DE               	movwf	??_setRF_DimmerLights
 12858  0A6B  087D               	movf	_product,w
 12859  0A6C  3E0F               	addlw	15
 12860  0A6D  0086               	movwf	6
 12861  0A6E  3001               	movlw	1	; select bank2/3
 12862  0A6F  0087               	movwf	7
 12863  0A70  085E               	movf	??_setRF_DimmerLights,w
 12864  0A71  0081               	movwf	1
 12865  0A72  0008               	return
 12866  0A73                     __end_of_setRF_DimmerLights:	
 12867                           
 12868                           	psect	text78
 12869  16D1                     __ptext78:	
 12870 ;; *************** function _setPercentValue *****************
 12871 ;; Defined at:
 12872 ;;		line 610 in file "../src/Dimmer_B1.c"
 12873 ;; Parameters:    Size  Location     Type
 12874 ;;  value           1    wreg     unsigned char 
 12875 ;; Auto vars:     Size  Location     Type
 12876 ;;  value           1   57[BANK0 ] unsigned char 
 12877 ;;  i               3   58[BANK0 ] float 
 12878 ;; Return value:  Size  Location     Type
 12879 ;;                  1    wreg      unsigned char 
 12880 ;; Registers used:
 12881 ;;		wreg, status,2, status,0, pclath, cstack
 12882 ;; Tracked objects:
 12883 ;;		On entry : 0/0
 12884 ;;		On exit  : 0/0
 12885 ;;		Unchanged: 0/0
 12886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;Total ram usage:        4 bytes
 12892 ;; Hardware stack levels used:    1
 12893 ;; Hardware stack levels required when called:    7
 12894 ;; This function calls:
 12895 ;;		___awtoft
 12896 ;;		___ftdiv
 12897 ;;		___fttol
 12898 ;; This function is called by:
 12899 ;;		_Flash_Memory_Initialization
 12900 ;;		_setRF_DimmerLights
 12901 ;; This function uses a non-reentrant model
 12902 ;;
 12903                           
 12904                           
 12905                           ;psect for function _setPercentValue
 12906  16D1                     _setPercentValue:	
 12907                           
 12908                           ;incstack = 0
 12909                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12910                           ;setPercentValue@value stored from wreg
 12911  16D1  0020               	movlb	0	; select bank0
 12912  16D2  00D9               	movwf	setPercentValue@value
 12913                           
 12914                           ;Dimmer_B1.c: 618: float i = ((char)(65*1.5)) - ((char)(20*1.5));
 12915  16D3  3000               	movlw	0
 12916  16D4  00DA               	movwf	setPercentValue@i
 12917  16D5  3086               	movlw	134
 12918  16D6  00DB               	movwf	setPercentValue@i+1
 12919  16D7  3042               	movlw	66
 12920  16D8  00DC               	movwf	setPercentValue@i+2
 12921                           
 12922                           ;Dimmer_B1.c: 619: i /= 100;
 12923  16D9  3000               	movlw	0
 12924  16DA  00AE               	movwf	___ftdiv@f2
 12925  16DB  30C8               	movlw	200
 12926  16DC  00AF               	movwf	___ftdiv@f2+1
 12927  16DD  3042               	movlw	66
 12928  16DE  00B0               	movwf	___ftdiv@f2+2
 12929  16DF  085A               	movf	setPercentValue@i,w
 12930  16E0  00B1               	movwf	___ftdiv@f1
 12931  16E1  085B               	movf	setPercentValue@i+1,w
 12932  16E2  00B2               	movwf	___ftdiv@f1+1
 12933  16E3  085C               	movf	setPercentValue@i+2,w
 12934  16E4  00B3               	movwf	___ftdiv@f1+2
 12935  16E5  3185  25AD  3196   	fcall	___ftdiv
 12936  16E8  0020               	movlb	0	; select bank0
 12937  16E9  082E               	movf	?___ftdiv,w
 12938  16EA  00DA               	movwf	setPercentValue@i
 12939  16EB  082F               	movf	?___ftdiv+1,w
 12940  16EC  00DB               	movwf	setPercentValue@i+1
 12941  16ED  0830               	movf	?___ftdiv+2,w
 12942  16EE  00DC               	movwf	setPercentValue@i+2
 12943                           
 12944                           ;Dimmer_B1.c: 620: return (100 - (char) ((value - ((char)(65*1.5))) / i));
 12945  16EF  0859               	movf	setPercentValue@value,w
 12946  16F0  3E9F               	addlw	159
 12947  16F1  00A8               	movwf	___awtoft@c
 12948  16F2  30FF               	movlw	255
 12949  16F3  1803               	skipnc
 12950  16F4  3000               	movlw	0
 12951  16F5  00A9               	movwf	___awtoft@c+1
 12952  16F6  3193  2319  3196   	fcall	___awtoft
 12953  16F9  0020               	movlb	0	; select bank0
 12954  16FA  0828               	movf	?___awtoft,w
 12955  16FB  00B1               	movwf	___ftdiv@f1
 12956  16FC  0829               	movf	?___awtoft+1,w
 12957  16FD  00B2               	movwf	___ftdiv@f1+1
 12958  16FE  082A               	movf	?___awtoft+2,w
 12959  16FF  00B3               	movwf	___ftdiv@f1+2
 12960  1700  085A               	movf	setPercentValue@i,w
 12961  1701  00AE               	movwf	___ftdiv@f2
 12962  1702  085B               	movf	setPercentValue@i+1,w
 12963  1703  00AF               	movwf	___ftdiv@f2+1
 12964  1704  085C               	movf	setPercentValue@i+2,w
 12965  1705  00B0               	movwf	___ftdiv@f2+2
 12966  1706  3185  25AD  3196   	fcall	___ftdiv
 12967  1709  0020               	movlb	0	; select bank0
 12968  170A  082E               	movf	?___ftdiv,w
 12969  170B  00CB               	movwf	___fttol@f1
 12970  170C  082F               	movf	?___ftdiv+1,w
 12971  170D  00CC               	movwf	___fttol@f1+1
 12972  170E  0830               	movf	?___ftdiv+2,w
 12973  170F  00CD               	movwf	___fttol@f1+2
 12974  1710  318D  2532         	fcall	___fttol
 12975  1712  0020               	movlb	0	; select bank0
 12976  1713  034B               	decf	?___fttol,w
 12977  1714  3AFF               	xorlw	255
 12978  1715  3E64               	addlw	100
 12979  1716  0008               	return
 12980  1717                     __end_of_setPercentValue:	
 12981                           
 12982                           	psect	text79
 12983  0D32                     __ptext79:	
 12984 ;; *************** function ___fttol *****************
 12985 ;; Defined at:
 12986 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  f1              3   43[BANK0 ] float 
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;  lval            4   52[BANK0 ] unsigned long 
 12991 ;;  exp1            1   56[BANK0 ] unsigned char 
 12992 ;;  sign1           1   51[BANK0 ] unsigned char 
 12993 ;; Return value:  Size  Location     Type
 12994 ;;                  4   43[BANK0 ] long 
 12995 ;; Registers used:
 12996 ;;		wreg, status,2, status,0
 12997 ;; Tracked objects:
 12998 ;;		On entry : 0/0
 12999 ;;		On exit  : 0/0
 13000 ;;		Unchanged: 0/0
 13001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;Total ram usage:       14 bytes
 13007 ;; Hardware stack levels used:    1
 13008 ;; Hardware stack levels required when called:    5
 13009 ;; This function calls:
 13010 ;;		Nothing
 13011 ;; This function is called by:
 13012 ;;		_getPercentValue
 13013 ;;		_setPercentValue
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017                           
 13018                           ;psect for function ___fttol
 13019  0D32                     ___fttol:	
 13020                           
 13021                           ;incstack = 0
 13022                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13023  0D32  0020               	movlb	0	; select bank0
 13024  0D33  084B               	movf	___fttol@f1,w
 13025  0D34  00CF               	movwf	??___fttol
 13026  0D35  084C               	movf	___fttol@f1+1,w
 13027  0D36  00D0               	movwf	??___fttol+1
 13028  0D37  084D               	movf	___fttol@f1+2,w
 13029  0D38  00D1               	movwf	??___fttol+2
 13030  0D39  1003               	clrc
 13031  0D3A  0D50               	rlf	??___fttol+1,w
 13032  0D3B  0D51               	rlf	??___fttol+2,w
 13033  0D3C  00D2               	movwf	??___fttol+3
 13034  0D3D  0852               	movf	??___fttol+3,w
 13035  0D3E  00D8               	movwf	___fttol@exp1
 13036  0D3F  08D8               	movf	___fttol@exp1,f
 13037  0D40  1D03               	skipz
 13038  0D41  2D4B               	goto	l5289
 13039  0D42  3000               	movlw	0
 13040  0D43  00CE               	movwf	?___fttol+3
 13041  0D44  3000               	movlw	0
 13042  0D45  00CD               	movwf	?___fttol+2
 13043  0D46  3000               	movlw	0
 13044  0D47  00CC               	movwf	?___fttol+1
 13045  0D48  3000               	movlw	0
 13046  0D49  00CB               	movwf	?___fttol
 13047  0D4A  0008               	return
 13048  0D4B                     l5289:	
 13049  0D4B  084B               	movf	___fttol@f1,w
 13050  0D4C  00CF               	movwf	??___fttol
 13051  0D4D  084C               	movf	___fttol@f1+1,w
 13052  0D4E  00D0               	movwf	??___fttol+1
 13053  0D4F  084D               	movf	___fttol@f1+2,w
 13054  0D50  00D1               	movwf	??___fttol+2
 13055  0D51  3017               	movlw	23
 13056  0D52                     u3605:	
 13057  0D52  36D1               	lsrf	??___fttol+2,f
 13058  0D53  0CD0               	rrf	??___fttol+1,f
 13059  0D54  0CCF               	rrf	??___fttol,f
 13060  0D55  0B89               	decfsz	9,f
 13061  0D56  2D52               	goto	u3605
 13062  0D57  084F               	movf	??___fttol,w
 13063  0D58  00D2               	movwf	??___fttol+3
 13064  0D59  0852               	movf	??___fttol+3,w
 13065  0D5A  00D3               	movwf	___fttol@sign1
 13066  0D5B  17CC               	bsf	___fttol@f1+1,7
 13067  0D5C  30FF               	movlw	255
 13068  0D5D  05CB               	andwf	___fttol@f1,f
 13069  0D5E  30FF               	movlw	255
 13070  0D5F  05CC               	andwf	___fttol@f1+1,f
 13071  0D60  3000               	movlw	0
 13072  0D61  05CD               	andwf	___fttol@f1+2,f
 13073  0D62  084B               	movf	___fttol@f1,w
 13074  0D63  00D4               	movwf	___fttol@lval
 13075  0D64  084C               	movf	___fttol@f1+1,w
 13076  0D65  00D5               	movwf	___fttol@lval+1
 13077  0D66  084D               	movf	___fttol@f1+2,w
 13078  0D67  00D6               	movwf	___fttol@lval+2
 13079  0D68  01D7               	clrf	___fttol@lval+3
 13080  0D69  308E               	movlw	142
 13081  0D6A  02D8               	subwf	___fttol@exp1,f
 13082  0D6B  1FD8               	btfss	___fttol@exp1,7
 13083  0D6C  2D89               	goto	l5309
 13084  0D6D  0858               	movf	___fttol@exp1,w
 13085  0D6E  3A80               	xorlw	128
 13086  0D6F  3E8F               	addlw	143
 13087  0D70  1803               	skipnc
 13088  0D71  2D7B               	goto	l5307
 13089  0D72  3000               	movlw	0
 13090  0D73  00CE               	movwf	?___fttol+3
 13091  0D74  3000               	movlw	0
 13092  0D75  00CD               	movwf	?___fttol+2
 13093  0D76  3000               	movlw	0
 13094  0D77  00CC               	movwf	?___fttol+1
 13095  0D78  3000               	movlw	0
 13096  0D79  00CB               	movwf	?___fttol
 13097  0D7A  0008               	return
 13098  0D7B                     l5307:	
 13099  0D7B  3001               	movlw	1
 13100  0D7C                     u3635:	
 13101  0D7C  36D7               	lsrf	___fttol@lval+3,f
 13102  0D7D  0CD6               	rrf	___fttol@lval+2,f
 13103  0D7E  0CD5               	rrf	___fttol@lval+1,f
 13104  0D7F  0CD4               	rrf	___fttol@lval,f
 13105  0D80  0B89               	decfsz	9,f
 13106  0D81  2D7C               	goto	u3635
 13107  0D82  3001               	movlw	1
 13108  0D83  00CF               	movwf	??___fttol
 13109  0D84  084F               	movf	??___fttol,w
 13110  0D85  07D8               	addwf	___fttol@exp1,f
 13111  0D86  1903               	btfsc	3,2
 13112  0D87  2DA2               	goto	l5319
 13113  0D88  2D7B               	goto	l5307
 13114  0D89                     l5309:	
 13115  0D89  3018               	movlw	24
 13116  0D8A  0258               	subwf	___fttol@exp1,w
 13117  0D8B  1C03               	skipc
 13118  0D8C  2D9F               	goto	l5317
 13119  0D8D  3000               	movlw	0
 13120  0D8E  00CE               	movwf	?___fttol+3
 13121  0D8F  3000               	movlw	0
 13122  0D90  00CD               	movwf	?___fttol+2
 13123  0D91  3000               	movlw	0
 13124  0D92  00CC               	movwf	?___fttol+1
 13125  0D93  3000               	movlw	0
 13126  0D94  00CB               	movwf	?___fttol
 13127  0D95  0008               	return
 13128  0D96                     l5315:	
 13129  0D96  3001               	movlw	1
 13130  0D97                     u3665:	
 13131  0D97  35D4               	lslf	___fttol@lval,f
 13132  0D98  0DD5               	rlf	___fttol@lval+1,f
 13133  0D99  0DD6               	rlf	___fttol@lval+2,f
 13134  0D9A  0DD7               	rlf	___fttol@lval+3,f
 13135  0D9B  0B89               	decfsz	9,f
 13136  0D9C  2D97               	goto	u3665
 13137  0D9D  3001               	movlw	1
 13138  0D9E  02D8               	subwf	___fttol@exp1,f
 13139  0D9F                     l5317:	
 13140  0D9F  08D8               	movf	___fttol@exp1,f
 13141  0DA0  1D03               	skipz
 13142  0DA1  2D96               	goto	l5315
 13143  0DA2                     l5319:	
 13144  0DA2  0853               	movf	___fttol@sign1,w
 13145  0DA3  1903               	btfsc	3,2
 13146  0DA4  2DB0               	goto	l5323
 13147  0DA5  09D4               	comf	___fttol@lval,f
 13148  0DA6  09D5               	comf	___fttol@lval+1,f
 13149  0DA7  09D6               	comf	___fttol@lval+2,f
 13150  0DA8  09D7               	comf	___fttol@lval+3,f
 13151  0DA9  0AD4               	incf	___fttol@lval,f
 13152  0DAA  1903               	skipnz
 13153  0DAB  0AD5               	incf	___fttol@lval+1,f
 13154  0DAC  1903               	skipnz
 13155  0DAD  0AD6               	incf	___fttol@lval+2,f
 13156  0DAE  1903               	skipnz
 13157  0DAF  0AD7               	incf	___fttol@lval+3,f
 13158  0DB0                     l5323:	
 13159  0DB0  0857               	movf	___fttol@lval+3,w
 13160  0DB1  00CE               	movwf	?___fttol+3
 13161  0DB2  0856               	movf	___fttol@lval+2,w
 13162  0DB3  00CD               	movwf	?___fttol+2
 13163  0DB4  0855               	movf	___fttol@lval+1,w
 13164  0DB5  00CC               	movwf	?___fttol+1
 13165  0DB6  0854               	movf	___fttol@lval,w
 13166  0DB7  00CB               	movwf	?___fttol
 13167  0DB8  0008               	return
 13168  0DB9                     __end_of___fttol:	
 13169                           
 13170                           	psect	text80
 13171  05AD                     __ptext80:	
 13172 ;; *************** function ___ftdiv *****************
 13173 ;; Defined at:
 13174 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  f2              3   14[BANK0 ] float 
 13177 ;;  f1              3   17[BANK0 ] float 
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;  f3              3   25[BANK0 ] float 
 13180 ;;  sign            1   29[BANK0 ] unsigned char 
 13181 ;;  exp             1   28[BANK0 ] unsigned char 
 13182 ;;  cntr            1   24[BANK0 ] unsigned char 
 13183 ;; Return value:  Size  Location     Type
 13184 ;;                  3   14[BANK0 ] float 
 13185 ;; Registers used:
 13186 ;;		wreg, status,2, status,0, pclath, cstack
 13187 ;; Tracked objects:
 13188 ;;		On entry : 0/0
 13189 ;;		On exit  : 0/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13192 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;Total ram usage:       16 bytes
 13197 ;; Hardware stack levels used:    1
 13198 ;; Hardware stack levels required when called:    6
 13199 ;; This function calls:
 13200 ;;		___ftpack
 13201 ;; This function is called by:
 13202 ;;		_getPercentValue
 13203 ;;		_setPercentValue
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207                           
 13208                           ;psect for function ___ftdiv
 13209  05AD                     ___ftdiv:	
 13210                           
 13211                           ;incstack = 0
 13212                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13213  05AD  0020               	movlb	0	; select bank0
 13214  05AE  0831               	movf	___ftdiv@f1,w
 13215  05AF  00B4               	movwf	??___ftdiv
 13216  05B0  0832               	movf	___ftdiv@f1+1,w
 13217  05B1  00B5               	movwf	??___ftdiv+1
 13218  05B2  0833               	movf	___ftdiv@f1+2,w
 13219  05B3  00B6               	movwf	??___ftdiv+2
 13220  05B4  1003               	clrc
 13221  05B5  0D35               	rlf	??___ftdiv+1,w
 13222  05B6  0D36               	rlf	??___ftdiv+2,w
 13223  05B7  00B7               	movwf	??___ftdiv+3
 13224  05B8  0837               	movf	??___ftdiv+3,w
 13225  05B9  00BC               	movwf	___ftdiv@exp
 13226  05BA  08BC               	movf	___ftdiv@exp,f
 13227  05BB  1D03               	skipz
 13228  05BC  2DC4               	goto	l5197
 13229  05BD  3000               	movlw	0
 13230  05BE  00AE               	movwf	?___ftdiv
 13231  05BF  3000               	movlw	0
 13232  05C0  00AF               	movwf	?___ftdiv+1
 13233  05C1  3000               	movlw	0
 13234  05C2  00B0               	movwf	?___ftdiv+2
 13235  05C3  0008               	return
 13236  05C4                     l5197:	
 13237  05C4  082E               	movf	___ftdiv@f2,w
 13238  05C5  00B4               	movwf	??___ftdiv
 13239  05C6  082F               	movf	___ftdiv@f2+1,w
 13240  05C7  00B5               	movwf	??___ftdiv+1
 13241  05C8  0830               	movf	___ftdiv@f2+2,w
 13242  05C9  00B6               	movwf	??___ftdiv+2
 13243  05CA  1003               	clrc
 13244  05CB  0D35               	rlf	??___ftdiv+1,w
 13245  05CC  0D36               	rlf	??___ftdiv+2,w
 13246  05CD  00B7               	movwf	??___ftdiv+3
 13247  05CE  0837               	movf	??___ftdiv+3,w
 13248  05CF  00BD               	movwf	___ftdiv@sign
 13249  05D0  08BD               	movf	___ftdiv@sign,f
 13250  05D1  1D03               	skipz
 13251  05D2  2DDA               	goto	l5203
 13252  05D3  3000               	movlw	0
 13253  05D4  00AE               	movwf	?___ftdiv
 13254  05D5  3000               	movlw	0
 13255  05D6  00AF               	movwf	?___ftdiv+1
 13256  05D7  3000               	movlw	0
 13257  05D8  00B0               	movwf	?___ftdiv+2
 13258  05D9  0008               	return
 13259  05DA                     l5203:	
 13260  05DA  3000               	movlw	0
 13261  05DB  00B9               	movwf	___ftdiv@f3
 13262  05DC  3000               	movlw	0
 13263  05DD  00BA               	movwf	___ftdiv@f3+1
 13264  05DE  3000               	movlw	0
 13265  05DF  00BB               	movwf	___ftdiv@f3+2
 13266  05E0  3089               	movlw	137
 13267  05E1  073D               	addwf	___ftdiv@sign,w
 13268  05E2  00B4               	movwf	??___ftdiv
 13269  05E3  0834               	movf	??___ftdiv,w
 13270  05E4  02BC               	subwf	___ftdiv@exp,f
 13271  05E5  0831               	movf	___ftdiv@f1,w
 13272  05E6  00B4               	movwf	??___ftdiv
 13273  05E7  0832               	movf	___ftdiv@f1+1,w
 13274  05E8  00B5               	movwf	??___ftdiv+1
 13275  05E9  0833               	movf	___ftdiv@f1+2,w
 13276  05EA  00B6               	movwf	??___ftdiv+2
 13277  05EB  3010               	movlw	16
 13278  05EC                     u3415:	
 13279  05EC  36B6               	lsrf	??___ftdiv+2,f
 13280  05ED  0CB5               	rrf	??___ftdiv+1,f
 13281  05EE  0CB4               	rrf	??___ftdiv,f
 13282  05EF  0B89               	decfsz	9,f
 13283  05F0  2DEC               	goto	u3415
 13284  05F1  0834               	movf	??___ftdiv,w
 13285  05F2  00B7               	movwf	??___ftdiv+3
 13286  05F3  0837               	movf	??___ftdiv+3,w
 13287  05F4  00BD               	movwf	___ftdiv@sign
 13288  05F5  082E               	movf	___ftdiv@f2,w
 13289  05F6  00B4               	movwf	??___ftdiv
 13290  05F7  082F               	movf	___ftdiv@f2+1,w
 13291  05F8  00B5               	movwf	??___ftdiv+1
 13292  05F9  0830               	movf	___ftdiv@f2+2,w
 13293  05FA  00B6               	movwf	??___ftdiv+2
 13294  05FB  3010               	movlw	16
 13295  05FC                     u3425:	
 13296  05FC  36B6               	lsrf	??___ftdiv+2,f
 13297  05FD  0CB5               	rrf	??___ftdiv+1,f
 13298  05FE  0CB4               	rrf	??___ftdiv,f
 13299  05FF  0B89               	decfsz	9,f
 13300  0600  2DFC               	goto	u3425
 13301  0601  0834               	movf	??___ftdiv,w
 13302  0602  00B7               	movwf	??___ftdiv+3
 13303  0603  0837               	movf	??___ftdiv+3,w
 13304  0604  06BD               	xorwf	___ftdiv@sign,f
 13305  0605  3080               	movlw	128
 13306  0606  00B4               	movwf	??___ftdiv
 13307  0607  0834               	movf	??___ftdiv,w
 13308  0608  05BD               	andwf	___ftdiv@sign,f
 13309  0609  17B2               	bsf	___ftdiv@f1+1,7
 13310  060A  30FF               	movlw	255
 13311  060B  05B1               	andwf	___ftdiv@f1,f
 13312  060C  30FF               	movlw	255
 13313  060D  05B2               	andwf	___ftdiv@f1+1,f
 13314  060E  3000               	movlw	0
 13315  060F  05B3               	andwf	___ftdiv@f1+2,f
 13316  0610  17AF               	bsf	___ftdiv@f2+1,7
 13317  0611  30FF               	movlw	255
 13318  0612  05AE               	andwf	___ftdiv@f2,f
 13319  0613  30FF               	movlw	255
 13320  0614  05AF               	andwf	___ftdiv@f2+1,f
 13321  0615  3000               	movlw	0
 13322  0616  05B0               	andwf	___ftdiv@f2+2,f
 13323  0617  3018               	movlw	24
 13324  0618  00B4               	movwf	??___ftdiv
 13325  0619  0834               	movf	??___ftdiv,w
 13326  061A  00B8               	movwf	___ftdiv@cntr
 13327  061B                     l5217:	
 13328  061B  3001               	movlw	1
 13329  061C                     u3435:	
 13330  061C  35B9               	lslf	___ftdiv@f3,f
 13331  061D  0DBA               	rlf	___ftdiv@f3+1,f
 13332  061E  0DBB               	rlf	___ftdiv@f3+2,f
 13333  061F  0B89               	decfsz	9,f
 13334  0620  2E1C               	goto	u3435
 13335  0621  0830               	movf	___ftdiv@f2+2,w
 13336  0622  0233               	subwf	___ftdiv@f1+2,w
 13337  0623  1D03               	skipz
 13338  0624  2E2B               	goto	u3445
 13339  0625  082F               	movf	___ftdiv@f2+1,w
 13340  0626  0232               	subwf	___ftdiv@f1+1,w
 13341  0627  1D03               	skipz
 13342  0628  2E2B               	goto	u3445
 13343  0629  082E               	movf	___ftdiv@f2,w
 13344  062A  0231               	subwf	___ftdiv@f1,w
 13345  062B                     u3445:	
 13346  062B  1C03               	skipc
 13347  062C  2E34               	goto	l5225
 13348  062D  082E               	movf	___ftdiv@f2,w
 13349  062E  02B1               	subwf	___ftdiv@f1,f
 13350  062F  082F               	movf	___ftdiv@f2+1,w
 13351  0630  3BB2               	subwfb	___ftdiv@f1+1,f
 13352  0631  0830               	movf	___ftdiv@f2+2,w
 13353  0632  3BB3               	subwfb	___ftdiv@f1+2,f
 13354  0633  1439               	bsf	___ftdiv@f3,0
 13355  0634                     l5225:	
 13356  0634  3001               	movlw	1
 13357  0635                     u3455:	
 13358  0635  35B1               	lslf	___ftdiv@f1,f
 13359  0636  0DB2               	rlf	___ftdiv@f1+1,f
 13360  0637  0DB3               	rlf	___ftdiv@f1+2,f
 13361  0638  0B89               	decfsz	9,f
 13362  0639  2E35               	goto	u3455
 13363  063A  3001               	movlw	1
 13364  063B  02B8               	subwf	___ftdiv@cntr,f
 13365  063C  1D03               	btfss	3,2
 13366  063D  2E1B               	goto	l5217
 13367  063E  0839               	movf	___ftdiv@f3,w
 13368  063F  00A0               	movwf	___ftpack@arg
 13369  0640  083A               	movf	___ftdiv@f3+1,w
 13370  0641  00A1               	movwf	___ftpack@arg+1
 13371  0642  083B               	movf	___ftdiv@f3+2,w
 13372  0643  00A2               	movwf	___ftpack@arg+2
 13373  0644  083C               	movf	___ftdiv@exp,w
 13374  0645  00B4               	movwf	??___ftdiv
 13375  0646  0834               	movf	??___ftdiv,w
 13376  0647  00A3               	movwf	___ftpack@exp
 13377  0648  083D               	movf	___ftdiv@sign,w
 13378  0649  00B5               	movwf	??___ftdiv+1
 13379  064A  0835               	movf	??___ftdiv+1,w
 13380  064B  00A4               	movwf	___ftpack@sign
 13381  064C  3187  279E         	fcall	___ftpack
 13382  064E  0020               	movlb	0	; select bank0
 13383  064F  0820               	movf	?___ftpack,w
 13384  0650  00AE               	movwf	?___ftdiv
 13385  0651  0821               	movf	?___ftpack+1,w
 13386  0652  00AF               	movwf	?___ftdiv+1
 13387  0653  0822               	movf	?___ftpack+2,w
 13388  0654  00B0               	movwf	?___ftdiv+2
 13389  0655  0008               	return
 13390  0656                     __end_of___ftdiv:	
 13391                           
 13392                           	psect	text81
 13393  1319                     __ptext81:	
 13394 ;; *************** function ___awtoft *****************
 13395 ;; Defined at:
 13396 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;  c               2    8[BANK0 ] int 
 13399 ;; Auto vars:     Size  Location     Type
 13400 ;;  sign            1   13[BANK0 ] unsigned char 
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  3    8[BANK0 ] float 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2, status,0, pclath, cstack
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:        6 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    6
 13417 ;; This function calls:
 13418 ;;		___ftpack
 13419 ;; This function is called by:
 13420 ;;		_getPercentValue
 13421 ;;		_setPercentValue
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function ___awtoft
 13427  1319                     ___awtoft:	
 13428                           
 13429                           ;incstack = 0
 13430                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13431  1319  0020               	movlb	0	; select bank0
 13432  131A  01AD               	clrf	___awtoft@sign
 13433  131B  1FA9               	btfss	___awtoft@c+1,7
 13434  131C  2B24               	goto	l5115
 13435  131D  09A8               	comf	___awtoft@c,f
 13436  131E  09A9               	comf	___awtoft@c+1,f
 13437  131F  0AA8               	incf	___awtoft@c,f
 13438  1320  1903               	skipnz
 13439  1321  0AA9               	incf	___awtoft@c+1,f
 13440  1322  01AD               	clrf	___awtoft@sign
 13441  1323  0AAD               	incf	___awtoft@sign,f
 13442  1324                     l5115:	
 13443  1324  0828               	movf	___awtoft@c,w
 13444  1325  00A0               	movwf	___ftpack@arg
 13445  1326  0829               	movf	___awtoft@c+1,w
 13446  1327  00A1               	movwf	___ftpack@arg+1
 13447  1328  01A2               	clrf	___ftpack@arg+2
 13448  1329  308E               	movlw	142
 13449  132A  00AB               	movwf	??___awtoft
 13450  132B  082B               	movf	??___awtoft,w
 13451  132C  00A3               	movwf	___ftpack@exp
 13452  132D  082D               	movf	___awtoft@sign,w
 13453  132E  00AC               	movwf	??___awtoft+1
 13454  132F  082C               	movf	??___awtoft+1,w
 13455  1330  00A4               	movwf	___ftpack@sign
 13456  1331  3187  279E         	fcall	___ftpack
 13457  1333  0020               	movlb	0	; select bank0
 13458  1334  0820               	movf	?___ftpack,w
 13459  1335  00A8               	movwf	?___awtoft
 13460  1336  0821               	movf	?___ftpack+1,w
 13461  1337  00A9               	movwf	?___awtoft+1
 13462  1338  0822               	movf	?___ftpack+2,w
 13463  1339  00AA               	movwf	?___awtoft+2
 13464  133A  0008               	return
 13465  133B                     __end_of___awtoft:	
 13466                           
 13467                           	psect	text82
 13468  079E                     __ptext82:	
 13469 ;; *************** function ___ftpack *****************
 13470 ;; Defined at:
 13471 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  arg             3    0[BANK0 ] unsigned um
 13474 ;;  exp             1    3[BANK0 ] unsigned char 
 13475 ;;  sign            1    4[BANK0 ] unsigned char 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;		None
 13478 ;; Return value:  Size  Location     Type
 13479 ;;                  3    0[BANK0 ] float 
 13480 ;; Registers used:
 13481 ;;		wreg, status,2, status,0
 13482 ;; Tracked objects:
 13483 ;;		On entry : 0/0
 13484 ;;		On exit  : 0/0
 13485 ;;		Unchanged: 0/0
 13486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13487 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;Total ram usage:        8 bytes
 13492 ;; Hardware stack levels used:    1
 13493 ;; Hardware stack levels required when called:    5
 13494 ;; This function calls:
 13495 ;;		Nothing
 13496 ;; This function is called by:
 13497 ;;		___awtoft
 13498 ;;		___ftadd
 13499 ;;		___ftdiv
 13500 ;;		___ftmul
 13501 ;; This function uses a non-reentrant model
 13502 ;;
 13503                           
 13504                           
 13505                           ;psect for function ___ftpack
 13506  079E                     ___ftpack:	
 13507                           
 13508                           ;incstack = 0
 13509                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13510  079E  0020               	movlb	0	; select bank0
 13511  079F  0823               	movf	___ftpack@exp,w
 13512  07A0  1903               	btfsc	3,2
 13513  07A1  2FA7               	goto	l5081
 13514  07A2  0822               	movf	___ftpack@arg+2,w
 13515  07A3  0421               	iorwf	___ftpack@arg+1,w
 13516  07A4  0420               	iorwf	___ftpack@arg,w
 13517  07A5  1D03               	skipz
 13518  07A6  2FB8               	goto	l5087
 13519  07A7                     l5081:	
 13520  07A7  3000               	movlw	0
 13521  07A8  00A0               	movwf	?___ftpack
 13522  07A9  3000               	movlw	0
 13523  07AA  00A1               	movwf	?___ftpack+1
 13524  07AB  3000               	movlw	0
 13525  07AC  00A2               	movwf	?___ftpack+2
 13526  07AD  0008               	return
 13527  07AE                     l5085:	
 13528  07AE  3001               	movlw	1
 13529  07AF  00A5               	movwf	??___ftpack
 13530  07B0  0825               	movf	??___ftpack,w
 13531  07B1  07A3               	addwf	___ftpack@exp,f
 13532  07B2  3001               	movlw	1
 13533  07B3                     u3065:	
 13534  07B3  36A2               	lsrf	___ftpack@arg+2,f
 13535  07B4  0CA1               	rrf	___ftpack@arg+1,f
 13536  07B5  0CA0               	rrf	___ftpack@arg,f
 13537  07B6  0B89               	decfsz	9,f
 13538  07B7  2FB3               	goto	u3065
 13539  07B8                     l5087:	
 13540  07B8  30FE               	movlw	254
 13541  07B9  0522               	andwf	___ftpack@arg+2,w
 13542  07BA  1903               	btfsc	3,2
 13543  07BB  2FD1               	goto	l2889
 13544  07BC  2FAE               	goto	l5085
 13545  07BD                     l5089:	
 13546  07BD  3001               	movlw	1
 13547  07BE  00A5               	movwf	??___ftpack
 13548  07BF  0825               	movf	??___ftpack,w
 13549  07C0  07A3               	addwf	___ftpack@exp,f
 13550  07C1  3001               	movlw	1
 13551  07C2  07A0               	addwf	___ftpack@arg,f
 13552  07C3  3000               	movlw	0
 13553  07C4  1803               	skipnc
 13554  07C5  3001               	movlw	1
 13555  07C6  07A1               	addwf	___ftpack@arg+1,f
 13556  07C7  3000               	movlw	0
 13557  07C8  1803               	skipnc
 13558  07C9  3001               	movlw	1
 13559  07CA  07A2               	addwf	___ftpack@arg+2,f
 13560  07CB  3001               	movlw	1
 13561  07CC                     u3085:	
 13562  07CC  36A2               	lsrf	___ftpack@arg+2,f
 13563  07CD  0CA1               	rrf	___ftpack@arg+1,f
 13564  07CE  0CA0               	rrf	___ftpack@arg,f
 13565  07CF  0B89               	decfsz	9,f
 13566  07D0  2FCC               	goto	u3085
 13567  07D1                     l2889:	
 13568  07D1  30FF               	movlw	255
 13569  07D2  0522               	andwf	___ftpack@arg+2,w
 13570  07D3  1903               	btfsc	3,2
 13571  07D4  2FDE               	goto	l5097
 13572  07D5  2FBD               	goto	l5089
 13573  07D6                     l5095:	
 13574  07D6  3001               	movlw	1
 13575  07D7  02A3               	subwf	___ftpack@exp,f
 13576  07D8  3001               	movlw	1
 13577  07D9                     u3105:	
 13578  07D9  35A0               	lslf	___ftpack@arg,f
 13579  07DA  0DA1               	rlf	___ftpack@arg+1,f
 13580  07DB  0DA2               	rlf	___ftpack@arg+2,f
 13581  07DC  0B89               	decfsz	9,f
 13582  07DD  2FD9               	goto	u3105
 13583  07DE                     l5097:	
 13584  07DE  1FA1               	btfss	___ftpack@arg+1,7
 13585  07DF  2FD6               	goto	l5095
 13586  07E0  1823               	btfsc	___ftpack@exp,0
 13587  07E1  2FE8               	goto	l2895
 13588  07E2  30FF               	movlw	255
 13589  07E3  05A0               	andwf	___ftpack@arg,f
 13590  07E4  307F               	movlw	127
 13591  07E5  05A1               	andwf	___ftpack@arg+1,f
 13592  07E6  30FF               	movlw	255
 13593  07E7  05A2               	andwf	___ftpack@arg+2,f
 13594  07E8                     l2895:	
 13595  07E8  1003               	clrc
 13596  07E9  0CA3               	rrf	___ftpack@exp,f
 13597  07EA  0823               	movf	___ftpack@exp,w
 13598  07EB  00A5               	movwf	??___ftpack
 13599  07EC  01A6               	clrf	??___ftpack+1
 13600  07ED  01A7               	clrf	??___ftpack+2
 13601  07EE  3010               	movlw	16
 13602  07EF                     u3135:	
 13603  07EF  35A5               	lslf	??___ftpack,f
 13604  07F0  0DA6               	rlf	??___ftpack+1,f
 13605  07F1  0DA7               	rlf	??___ftpack+2,f
 13606  07F2  0B89               	decfsz	9,f
 13607  07F3  2FEF               	goto	u3135
 13608  07F4  0825               	movf	??___ftpack,w
 13609  07F5  04A0               	iorwf	___ftpack@arg,f
 13610  07F6  0826               	movf	??___ftpack+1,w
 13611  07F7  04A1               	iorwf	___ftpack@arg+1,f
 13612  07F8  0827               	movf	??___ftpack+2,w
 13613  07F9  04A2               	iorwf	___ftpack@arg+2,f
 13614  07FA  0824               	movf	___ftpack@sign,w
 13615  07FB  1903               	btfsc	3,2
 13616  07FC  0008               	return
 13617  07FD  17A2               	bsf	___ftpack@arg+2,7
 13618  07FE  0008               	return
 13619  07FF                     __end_of___ftpack:	
 13620                           
 13621                           	psect	text83
 13622  1FD3                     __ptext83:	
 13623 ;; *************** function _setRFSW_Status *****************
 13624 ;; Defined at:
 13625 ;;		line 380 in file "../src/RF_Control_B1.c"
 13626 ;; Parameters:    Size  Location     Type
 13627 ;;  sw              1    wreg     unsigned char 
 13628 ;;  command         1    2[BANK0 ] unsigned char 
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;  sw              1    3[BANK0 ] unsigned char 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;		None               void
 13633 ;; Registers used:
 13634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13635 ;; Tracked objects:
 13636 ;;		On entry : 0/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13640 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;Total ram usage:        2 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    6
 13647 ;; This function calls:
 13648 ;;		_RfSWPointSelect
 13649 ;; This function is called by:
 13650 ;;		_DlyOff_Main
 13651 ;;		_setControl_Lights_Table
 13652 ;;		_Sw_DimmerOnFunc
 13653 ;;		_Sw_DimmerAdjFunc
 13654 ;;		_setDimmerLights_ERROR
 13655 ;; This function uses a non-reentrant model
 13656 ;;
 13657                           
 13658                           
 13659                           ;psect for function _setRFSW_Status
 13660  1FD3                     _setRFSW_Status:	
 13661                           
 13662                           ;incstack = 0
 13663                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13664                           ;setRFSW_Status@sw stored from wreg
 13665  1FD3  0020               	movlb	0	; select bank0
 13666  1FD4  00A3               	movwf	setRFSW_Status@sw
 13667                           
 13668                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 13669  1FD5  0823               	movf	setRFSW_Status@sw,w
 13670  1FD6  3191  215D         	fcall	_RfSWPointSelect
 13671                           
 13672                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 13673  1FD8  0021               	movlb	1	; select bank1
 13674  1FD9  083E               	movf	_RFSW^(0+128),w
 13675  1FDA  0086               	movwf	6
 13676  1FDB  0187               	clrf	7
 13677  1FDC  0020               	movlb	0	; select bank0
 13678  1FDD  0822               	movf	setRFSW_Status@command,w
 13679  1FDE  1001               	bcf	1,0
 13680  1FDF  1D03               	skipz
 13681  1FE0  1401               	bsf	1,0
 13682  1FE1  0008               	return
 13683  1FE2                     __end_of_setRFSW_Status:	
 13684                           
 13685                           	psect	text84
 13686  115D                     __ptext84:	
 13687 ;; *************** function _RfSWPointSelect *****************
 13688 ;; Defined at:
 13689 ;;		line 315 in file "../src/RF_Control_B1.c"
 13690 ;; Parameters:    Size  Location     Type
 13691 ;;  sw              1    wreg     unsigned char 
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  sw              1    1[BANK0 ] unsigned char 
 13694 ;; Return value:  Size  Location     Type
 13695 ;;		None               void
 13696 ;; Registers used:
 13697 ;;		wreg
 13698 ;; Tracked objects:
 13699 ;;		On entry : 0/0
 13700 ;;		On exit  : 0/0
 13701 ;;		Unchanged: 0/0
 13702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13707 ;;Total ram usage:        2 bytes
 13708 ;; Hardware stack levels used:    1
 13709 ;; Hardware stack levels required when called:    5
 13710 ;; This function calls:
 13711 ;;		Nothing
 13712 ;; This function is called by:
 13713 ;;		_setRFSW_Control
 13714 ;;		_setRFSW_AdjControl
 13715 ;;		_setRFSW_Status
 13716 ;; This function uses a non-reentrant model
 13717 ;;
 13718                           
 13719                           
 13720                           ;psect for function _RfSWPointSelect
 13721  115D                     _RfSWPointSelect:	
 13722                           
 13723                           ;incstack = 0
 13724                           ; Regs used in _RfSWPointSelect: [wreg]
 13725                           ;RfSWPointSelect@sw stored from wreg
 13726  115D  0020               	movlb	0	; select bank0
 13727  115E  00A1               	movwf	RfSWPointSelect@sw
 13728                           
 13729                           ;RF_Control_B1.c: 317: if (sw == 1) {
 13730  115F  0821               	movf	RfSWPointSelect@sw,w
 13731  1160  3A01               	xorlw	1
 13732  1161  1D03               	skipz
 13733  1162  2968               	goto	l2024
 13734                           
 13735                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 13736  1163  30E4               	movlw	_RFSW1& (0+255)
 13737  1164  00A0               	movwf	??_RfSWPointSelect
 13738  1165  0820               	movf	??_RfSWPointSelect,w
 13739  1166  0021               	movlb	1	; select bank1
 13740  1167  00BE               	movwf	_RFSW^(0+128)
 13741  1168                     l2024:	
 13742                           
 13743                           ;RF_Control_B1.c: 319: }
 13744                           ;RF_Control_B1.c: 322: if (sw == 2) {
 13745  1168  0020               	movlb	0	; select bank0
 13746  1169  0821               	movf	RfSWPointSelect@sw,w
 13747  116A  3A02               	xorlw	2
 13748  116B  1D03               	skipz
 13749  116C  0008               	return
 13750                           
 13751                           ;RF_Control_B1.c: 323: RFSW = &RFSW2;
 13752  116D  30E5               	movlw	_RFSW2& (0+255)
 13753  116E  00A0               	movwf	??_RfSWPointSelect
 13754  116F  0820               	movf	??_RfSWPointSelect,w
 13755  1170  0021               	movlb	1	; select bank1
 13756  1171  00BE               	movwf	_RFSW^(0+128)
 13757  1172  0008               	return
 13758  1173                     __end_of_RfSWPointSelect:	
 13759                           
 13760                           	psect	text85
 13761  10A9                     __ptext85:	
 13762 ;; *************** function _setDimmerLights_Trigger *****************
 13763 ;; Defined at:
 13764 ;;		line 551 in file "../src/Dimmer_B1.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  lights          1    wreg     unsigned char 
 13767 ;;  command         1    2[BANK0 ] unsigned char 
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;  lights          1    3[BANK0 ] unsigned char 
 13770 ;; Return value:  Size  Location     Type
 13771 ;;		None               void
 13772 ;; Registers used:
 13773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13779 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;Total ram usage:        2 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    6
 13786 ;; This function calls:
 13787 ;;		_DimmerLightsPointSelect
 13788 ;; This function is called by:
 13789 ;;		_DlyOff_Main
 13790 ;;		_setRFSW_Control
 13791 ;;		_Sw_DimmerOnFunc
 13792 ;;		_Sw_DimmerOffFunc
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           
 13797                           ;psect for function _setDimmerLights_Trigger
 13798  10A9                     _setDimmerLights_Trigger:	
 13799                           
 13800                           ;incstack = 0
 13801                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 13802                           ;setDimmerLights_Trigger@lights stored from wreg
 13803  10A9  0020               	movlb	0	; select bank0
 13804  10AA  00A3               	movwf	setDimmerLights_Trigger@lights
 13805                           
 13806                           ;Dimmer_B1.c: 552: DimmerLightsPointSelect(lights);
 13807  10AB  0823               	movf	setDimmerLights_Trigger@lights,w
 13808  10AC  3191  210D         	fcall	_DimmerLightsPointSelect
 13809                           
 13810                           ;Dimmer_B1.c: 553: DimmerLights->Trigger = command;
 13811  10AE  0879               	movf	_DimmerLights,w
 13812  10AF  3E08               	addlw	8
 13813  10B0  0086               	movwf	6
 13814  10B1  3001               	movlw	1	; select bank2/3
 13815  10B2  0087               	movwf	7
 13816  10B3  0020               	movlb	0	; select bank0
 13817  10B4  0822               	movf	setDimmerLights_Trigger@command,w
 13818  10B5  1101               	bcf	1,2
 13819  10B6  1D03               	skipz
 13820  10B7  1501               	bsf	1,2
 13821  10B8  0008               	return
 13822  10B9                     __end_of_setDimmerLights_Trigger:	
 13823                           
 13824                           	psect	text86
 13825  1099                     __ptext86:	
 13826 ;; *************** function _setDimmerLights_Switch *****************
 13827 ;; Defined at:
 13828 ;;		line 541 in file "../src/Dimmer_B1.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;  lights          1    wreg     unsigned char 
 13831 ;;  command         1    2[BANK0 ] unsigned char 
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  lights          1    3[BANK0 ] unsigned char 
 13834 ;; Return value:  Size  Location     Type
 13835 ;;		None               void
 13836 ;; Registers used:
 13837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13838 ;; Tracked objects:
 13839 ;;		On entry : 0/0
 13840 ;;		On exit  : 0/0
 13841 ;;		Unchanged: 0/0
 13842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13843 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13846 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;Total ram usage:        2 bytes
 13848 ;; Hardware stack levels used:    1
 13849 ;; Hardware stack levels required when called:    6
 13850 ;; This function calls:
 13851 ;;		_DimmerLightsPointSelect
 13852 ;; This function is called by:
 13853 ;;		_DlyOff_Main
 13854 ;;		_setRFSW_Control
 13855 ;;		_Sw_DimmerOnFunc
 13856 ;;		_Sw_DimmerOffFunc
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           
 13861                           ;psect for function _setDimmerLights_Switch
 13862  1099                     _setDimmerLights_Switch:	
 13863                           
 13864                           ;incstack = 0
 13865                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13866                           ;setDimmerLights_Switch@lights stored from wreg
 13867  1099  0020               	movlb	0	; select bank0
 13868  109A  00A3               	movwf	setDimmerLights_Switch@lights
 13869                           
 13870                           ;Dimmer_B1.c: 542: DimmerLightsPointSelect(lights);
 13871  109B  0823               	movf	setDimmerLights_Switch@lights,w
 13872  109C  3191  210D         	fcall	_DimmerLightsPointSelect
 13873                           
 13874                           ;Dimmer_B1.c: 543: DimmerLights->Switch = command;
 13875  109E  0879               	movf	_DimmerLights,w
 13876  109F  3E08               	addlw	8
 13877  10A0  0086               	movwf	6
 13878  10A1  3001               	movlw	1	; select bank2/3
 13879  10A2  0087               	movwf	7
 13880  10A3  0020               	movlb	0	; select bank0
 13881  10A4  0822               	movf	setDimmerLights_Switch@command,w
 13882  10A5  1081               	bcf	1,1
 13883  10A6  1D03               	skipz
 13884  10A7  1481               	bsf	1,1
 13885  10A8  0008               	return
 13886  10A9                     __end_of_setDimmerLights_Switch:	
 13887                           
 13888                           	psect	text87
 13889  110D                     __ptext87:	
 13890 ;; *************** function _DimmerLightsPointSelect *****************
 13891 ;; Defined at:
 13892 ;;		line 153 in file "../src/Dimmer_B1.c"
 13893 ;; Parameters:    Size  Location     Type
 13894 ;;  lights          1    wreg     unsigned char 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;  lights          1    1[BANK0 ] unsigned char 
 13897 ;; Return value:  Size  Location     Type
 13898 ;;		None               void
 13899 ;; Registers used:
 13900 ;;		wreg
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;Total ram usage:        2 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    5
 13913 ;; This function calls:
 13914 ;;		Nothing
 13915 ;; This function is called by:
 13916 ;;		_setDimmerLights_Initialization
 13917 ;;		_setDimmerLights_Main
 13918 ;;		_setDimmerLights
 13919 ;;		_setDimmerLights_Adj
 13920 ;;		_setDimmerLights_AdjRF
 13921 ;;		_setDimmerLights_Switch
 13922 ;;		_setDimmerLights_AdjGo
 13923 ;;		_setDimmerLights_Trigger
 13924 ;;		_setDimmerLights_TriggerAdj
 13925 ;;		_setDimmerLights_ERROR
 13926 ;;		_setDimmerLights_TriggerERROR
 13927 ;;		_setDimmerLights_GO
 13928 ;;		_setDimmerLights_MaxmumValue
 13929 ;;		_setDimmerLights_Clear
 13930 ;; This function uses a non-reentrant model
 13931 ;;
 13932                           
 13933                           
 13934                           ;psect for function _DimmerLightsPointSelect
 13935  110D                     _DimmerLightsPointSelect:	
 13936                           
 13937                           ;incstack = 0
 13938                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13939                           ;DimmerLightsPointSelect@lights stored from wreg
 13940  110D  0020               	movlb	0	; select bank0
 13941  110E  00A1               	movwf	DimmerLightsPointSelect@lights
 13942                           
 13943                           ;Dimmer_B1.c: 155: if (lights == 1) {
 13944  110F  0821               	movf	DimmerLightsPointSelect@lights,w
 13945  1110  3A01               	xorlw	1
 13946  1111  1D03               	skipz
 13947  1112  2917               	goto	l814
 13948                           
 13949                           ;Dimmer_B1.c: 156: DimmerLights = &DimmerLights1;
 13950  1113  3020               	movlw	_DimmerLights1& (0+255)
 13951  1114  00A0               	movwf	??_DimmerLightsPointSelect
 13952  1115  0820               	movf	??_DimmerLightsPointSelect,w
 13953  1116  00F9               	movwf	_DimmerLights
 13954  1117                     l814:	
 13955                           
 13956                           ;Dimmer_B1.c: 157: }
 13957                           ;Dimmer_B1.c: 164: if (lights == 2) {
 13958  1117  0821               	movf	DimmerLightsPointSelect@lights,w
 13959  1118  3A02               	xorlw	2
 13960  1119  1D03               	skipz
 13961  111A  0008               	return
 13962                           
 13963                           ;Dimmer_B1.c: 165: DimmerLights = &DimmerLights2;
 13964  111B  302E               	movlw	_DimmerLights2& (0+255)
 13965  111C  00A0               	movwf	??_DimmerLightsPointSelect
 13966  111D  0820               	movf	??_DimmerLightsPointSelect,w
 13967  111E  00F9               	movwf	_DimmerLights
 13968  111F  0008               	return
 13969  1120                     __end_of_DimmerLightsPointSelect:	
 13970                           
 13971                           	psect	text88
 13972  0941                     __ptext88:	
 13973 ;; *************** function _setBuz *****************
 13974 ;; Defined at:
 13975 ;;		line 30 in file "../src/Buzzer_B1.c"
 13976 ;; Parameters:    Size  Location     Type
 13977 ;;  count           1    wreg     unsigned char 
 13978 ;;  time            2    0[BANK0 ] int 
 13979 ;; Auto vars:     Size  Location     Type
 13980 ;;  count           1    3[BANK0 ] unsigned char 
 13981 ;; Return value:  Size  Location     Type
 13982 ;;		None               void
 13983 ;; Registers used:
 13984 ;;		wreg, fsr1l, fsr1h
 13985 ;; Tracked objects:
 13986 ;;		On entry : 0/0
 13987 ;;		On exit  : 0/0
 13988 ;;		Unchanged: 0/0
 13989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;Total ram usage:        4 bytes
 13995 ;; Hardware stack levels used:    1
 13996 ;; Hardware stack levels required when called:    5
 13997 ;; This function calls:
 13998 ;;		Nothing
 13999 ;; This function is called by:
 14000 ;;		_DlyOff_Main
 14001 ;;		_setDimmerLights_Main
 14002 ;;		_setLog_Code
 14003 ;;		_setControl_Lights_Table
 14004 ;;		_setRFSW_Control
 14005 ;;		_setSw_Main
 14006 ;;		_Sw_DimmerOnFunc
 14007 ;;		_my_Main
 14008 ;;		_DimmerLights_Exceptions
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           
 14013                           ;psect for function _setBuz
 14014  0941                     _setBuz:	
 14015                           
 14016                           ;incstack = 0
 14017                           ; Regs used in _setBuz: [wregfsr1]
 14018                           ;setBuz@count stored from wreg
 14019  0941  0020               	movlb	0	; select bank0
 14020  0942  00A3               	movwf	setBuz@count
 14021                           
 14022                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 14023  0943  0878               	movf	_Buz,w
 14024  0944  0086               	movwf	6
 14025  0945  3001               	movlw	1	; select bank2/3
 14026  0946  0087               	movwf	7
 14027  0947  1C01               	btfss	1,0
 14028  0948  0008               	return
 14029                           
 14030                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 14031  0949  0878               	movf	_Buz,w
 14032  094A  0086               	movwf	6
 14033  094B  3001               	movlw	1	; select bank2/3
 14034  094C  0087               	movwf	7
 14035  094D  1881               	btfsc	1,1
 14036  094E  2968               	goto	l5419
 14037                           
 14038                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 14039  094F  0878               	movf	_Buz,w
 14040  0950  0086               	movwf	6
 14041  0951  3001               	movlw	1	; select bank2/3
 14042  0952  0087               	movwf	7
 14043  0953  1481               	bsf	1,1
 14044                           
 14045                           ;Buzzer_B1.c: 35: Buz->Count = count;
 14046  0954  0823               	movf	setBuz@count,w
 14047  0955  00A2               	movwf	??_setBuz
 14048  0956  0878               	movf	_Buz,w
 14049  0957  3E03               	addlw	3
 14050  0958  0086               	movwf	6
 14051  0959  3001               	movlw	1	; select bank2/3
 14052  095A  0087               	movwf	7
 14053  095B  0822               	movf	??_setBuz,w
 14054  095C  0081               	movwf	1
 14055                           
 14056                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 14057  095D  0878               	movf	_Buz,w
 14058  095E  3E06               	addlw	6
 14059  095F  0086               	movwf	6
 14060  0960  3001               	movlw	1	; select bank2/3
 14061  0961  0087               	movwf	7
 14062  0962  0820               	movf	setBuz@time,w
 14063  0963  3FC0               	movwi [0]fsr1
 14064  0964  0821               	movf	setBuz@time+1,w
 14065  0965  3FC1               	movwi [1]fsr1
 14066                           
 14067                           ;Buzzer_B1.c: 37: RB3 = 1;
 14068  0966  158D               	bsf	13,3	;volatile
 14069                           
 14070                           ;Buzzer_B1.c: 38: } else {
 14071  0967  0008               	return
 14072  0968                     l5419:	
 14073                           
 14074                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 14075  0968  0878               	movf	_Buz,w
 14076  0969  0086               	movwf	6
 14077  096A  3001               	movlw	1	; select bank2/3
 14078  096B  0087               	movwf	7
 14079  096C  1981               	btfsc	1,3
 14080  096D  2986               	goto	l5423
 14081                           
 14082                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 14083  096E  0878               	movf	_Buz,w
 14084  096F  0086               	movwf	6
 14085  0970  3001               	movlw	1	; select bank2/3
 14086  0971  0087               	movwf	7
 14087  0972  1581               	bsf	1,3
 14088                           
 14089                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 14090  0973  0823               	movf	setBuz@count,w
 14091  0974  00A2               	movwf	??_setBuz
 14092  0975  0878               	movf	_Buz,w
 14093  0976  3E04               	addlw	4
 14094  0977  0086               	movwf	6
 14095  0978  3001               	movlw	1	; select bank2/3
 14096  0979  0087               	movwf	7
 14097  097A  0822               	movf	??_setBuz,w
 14098  097B  0081               	movwf	1
 14099                           
 14100                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 14101  097C  0878               	movf	_Buz,w
 14102  097D  3E08               	addlw	8
 14103  097E  0086               	movwf	6
 14104  097F  3001               	movlw	1	; select bank2/3
 14105  0980  0087               	movwf	7
 14106  0981  0820               	movf	setBuz@time,w
 14107  0982  3FC0               	movwi [0]fsr1
 14108  0983  0821               	movf	setBuz@time+1,w
 14109  0984  3FC1               	movwi [1]fsr1
 14110                           
 14111                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 14112  0985  0008               	return
 14113  0986                     l5423:	
 14114  0986  0878               	movf	_Buz,w
 14115  0987  0086               	movwf	6
 14116  0988  3001               	movlw	1	; select bank2/3
 14117  0989  0087               	movwf	7
 14118  098A  1A01               	btfsc	1,4
 14119  098B  0008               	return
 14120                           
 14121                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 14122  098C  0878               	movf	_Buz,w
 14123  098D  0086               	movwf	6
 14124  098E  3001               	movlw	1	; select bank2/3
 14125  098F  0087               	movwf	7
 14126  0990  1601               	bsf	1,4
 14127                           
 14128                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 14129  0991  0823               	movf	setBuz@count,w
 14130  0992  00A2               	movwf	??_setBuz
 14131  0993  0878               	movf	_Buz,w
 14132  0994  3E05               	addlw	5
 14133  0995  0086               	movwf	6
 14134  0996  3001               	movlw	1	; select bank2/3
 14135  0997  0087               	movwf	7
 14136  0998  0822               	movf	??_setBuz,w
 14137  0999  0081               	movwf	1
 14138                           
 14139                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 14140  099A  0878               	movf	_Buz,w
 14141  099B  3E0A               	addlw	10
 14142  099C  0086               	movwf	6
 14143  099D  3001               	movlw	1	; select bank2/3
 14144  099E  0087               	movwf	7
 14145  099F  0820               	movf	setBuz@time,w
 14146  09A0  3FC0               	movwi [0]fsr1
 14147  09A1  0821               	movf	setBuz@time+1,w
 14148  09A2  3FC1               	movwi [1]fsr1
 14149  09A3  0008               	return
 14150  09A4                     __end_of_setBuz:	
 14151                           
 14152                           	psect	text89
 14153  1EEE                     __ptext89:	
 14154 ;; *************** function _DelayOff_Initialization *****************
 14155 ;; Defined at:
 14156 ;;		line 26 in file "../src/DelayOff_B1.c"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;		None
 14159 ;; Auto vars:     Size  Location     Type
 14160 ;;		None
 14161 ;; Return value:  Size  Location     Type
 14162 ;;		None               void
 14163 ;; Registers used:
 14164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14165 ;; Tracked objects:
 14166 ;;		On entry : 0/0
 14167 ;;		On exit  : 0/0
 14168 ;;		Unchanged: 0/0
 14169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;Total ram usage:        0 bytes
 14175 ;; Hardware stack levels used:    1
 14176 ;; Hardware stack levels required when called:    7
 14177 ;; This function calls:
 14178 ;;		_DlyOff_Initialization
 14179 ;; This function is called by:
 14180 ;;		_main
 14181 ;; This function uses a non-reentrant model
 14182 ;;
 14183                           
 14184                           
 14185                           ;psect for function _DelayOff_Initialization
 14186  1EEE                     _DelayOff_Initialization:	
 14187                           
 14188                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 14189                           
 14190                           ;incstack = 0
 14191                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14192  1EEE  3001               	movlw	1
 14193  1EEF  319F  2741  319E   	fcall	_DlyOff_Initialization
 14194                           
 14195                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 14196  1EF2  3002               	movlw	2
 14197  1EF3  319F  2741         	fcall	_DlyOff_Initialization
 14198  1EF5  0008               	return
 14199  1EF6                     __end_of_DelayOff_Initialization:	
 14200                           
 14201                           	psect	text90
 14202  1F41                     __ptext90:	
 14203 ;; *************** function _DlyOff_Initialization *****************
 14204 ;; Defined at:
 14205 ;;		line 56 in file "../src/DelayOff_B1.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;  sw              1    wreg     unsigned char 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;  sw              1    2[BANK0 ] unsigned char 
 14210 ;; Return value:  Size  Location     Type
 14211 ;;		None               void
 14212 ;; Registers used:
 14213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;Total ram usage:        1 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; Hardware stack levels required when called:    6
 14226 ;; This function calls:
 14227 ;;		_DelayOffPointSelect
 14228 ;; This function is called by:
 14229 ;;		_DelayOff_Initialization
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           
 14234                           ;psect for function _DlyOff_Initialization
 14235  1F41                     _DlyOff_Initialization:	
 14236                           
 14237                           ;incstack = 0
 14238                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14239                           ;DlyOff_Initialization@sw stored from wreg
 14240  1F41  0020               	movlb	0	; select bank0
 14241  1F42  00A2               	movwf	DlyOff_Initialization@sw
 14242                           
 14243                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 14244  1F43  0822               	movf	DlyOff_Initialization@sw,w
 14245  1F44  3191  2173         	fcall	_DelayOffPointSelect
 14246                           
 14247                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 14248  1F46  0021               	movlb	1	; select bank1
 14249  1F47  0838               	movf	_DelayOff^(0+128),w
 14250  1F48  0086               	movwf	6
 14251  1F49  0187               	clrf	7
 14252  1F4A  1401               	bsf	1,0
 14253  1F4B  0008               	return
 14254  1F4C                     __end_of_DlyOff_Initialization:	
 14255                           
 14256                           	psect	text91
 14257  1173                     __ptext91:	
 14258 ;; *************** function _DelayOffPointSelect *****************
 14259 ;; Defined at:
 14260 ;;		line 7 in file "../src/DelayOff_B1.c"
 14261 ;; Parameters:    Size  Location     Type
 14262 ;;  sw              1    wreg     unsigned char 
 14263 ;; Auto vars:     Size  Location     Type
 14264 ;;  sw              1    1[BANK0 ] unsigned char 
 14265 ;; Return value:  Size  Location     Type
 14266 ;;		None               void
 14267 ;; Registers used:
 14268 ;;		wreg
 14269 ;; Tracked objects:
 14270 ;;		On entry : 0/0
 14271 ;;		On exit  : 0/0
 14272 ;;		Unchanged: 0/0
 14273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;Total ram usage:        2 bytes
 14279 ;; Hardware stack levels used:    1
 14280 ;; Hardware stack levels required when called:    5
 14281 ;; This function calls:
 14282 ;;		Nothing
 14283 ;; This function is called by:
 14284 ;;		_DlyOff_Initialization
 14285 ;;		_DlyOff_Main
 14286 ;;		_setDelayOff_GO
 14287 ;; This function uses a non-reentrant model
 14288 ;;
 14289                           
 14290                           
 14291                           ;psect for function _DelayOffPointSelect
 14292  1173                     _DelayOffPointSelect:	
 14293                           
 14294                           ;incstack = 0
 14295                           ; Regs used in _DelayOffPointSelect: [wreg]
 14296                           ;DelayOffPointSelect@sw stored from wreg
 14297  1173  0020               	movlb	0	; select bank0
 14298  1174  00A1               	movwf	DelayOffPointSelect@sw
 14299                           
 14300                           ;DelayOff_B1.c: 9: if (sw == 1) {
 14301  1175  0821               	movf	DelayOffPointSelect@sw,w
 14302  1176  3A01               	xorlw	1
 14303  1177  1D03               	skipz
 14304  1178  297F               	goto	l5345
 14305                           
 14306                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 14307  1179  30C6               	movlw	_DlySw1& (0+255)
 14308  117A  00A0               	movwf	??_DelayOffPointSelect
 14309  117B  0820               	movf	??_DelayOffPointSelect,w
 14310  117C  0021               	movlb	1	; select bank1
 14311  117D  00B8               	movwf	_DelayOff^(0+128)
 14312                           
 14313                           ;DelayOff_B1.c: 11: }
 14314  117E  0008               	return
 14315  117F                     l5345:	
 14316                           
 14317                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 14318  117F  0020               	movlb	0	; select bank0
 14319  1180  0821               	movf	DelayOffPointSelect@sw,w
 14320  1181  3A02               	xorlw	2
 14321  1182  1D03               	skipz
 14322  1183  0008               	return
 14323                           
 14324                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 14325  1184  30CB               	movlw	_DlySw2& (0+255)
 14326  1185  00A0               	movwf	??_DelayOffPointSelect
 14327  1186  0820               	movf	??_DelayOffPointSelect,w
 14328  1187  0021               	movlb	1	; select bank1
 14329  1188  00B8               	movwf	_DelayOff^(0+128)
 14330  1189  0008               	return
 14331  118A                     __end_of_DelayOffPointSelect:	
 14332                           
 14333                           	psect	text92
 14334  1148                     __ptext92:	
 14335 ;; *************** function _CC2500_PowerOnInitial *****************
 14336 ;; Defined at:
 14337 ;;		line 97 in file "../src/CC2500_B1.c"
 14338 ;; Parameters:    Size  Location     Type
 14339 ;;		None
 14340 ;; Auto vars:     Size  Location     Type
 14341 ;;		None
 14342 ;; Return value:  Size  Location     Type
 14343 ;;		None               void
 14344 ;; Registers used:
 14345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14346 ;; Tracked objects:
 14347 ;;		On entry : 0/0
 14348 ;;		On exit  : 0/0
 14349 ;;		Unchanged: 0/0
 14350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;Total ram usage:        0 bytes
 14356 ;; Hardware stack levels used:    1
 14357 ;; Hardware stack levels required when called:    8
 14358 ;; This function calls:
 14359 ;;		_CC2500_ClearRXFIFO
 14360 ;;		_CC2500_ClearTXFIFO
 14361 ;;		_CC2500_FrequencyCabr
 14362 ;;		_CC2500_InitPATable
 14363 ;;		_CC2500_InitSetREG
 14364 ;;		_CC2500_PowerRST
 14365 ;;		_CC2500_SIDLEMode
 14366 ;; This function is called by:
 14367 ;;		_main
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           
 14372                           ;psect for function _CC2500_PowerOnInitial
 14373  1148                     _CC2500_PowerOnInitial:	
 14374                           
 14375                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 14376                           
 14377                           ;incstack = 0
 14378                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14379  1148  3194  247B  3191   	fcall	_CC2500_PowerRST
 14380                           
 14381                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 14382  114B  3188  2001  3191   	fcall	_CC2500_InitSetREG
 14383                           
 14384                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 14385  114E  3192  22DA  3191   	fcall	_CC2500_InitPATable
 14386                           
 14387                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 14388  1151  319E  26B2  3191   	fcall	_CC2500_ClearTXFIFO
 14389                           
 14390                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 14391  1154  319E  26AE  3191   	fcall	_CC2500_ClearRXFIFO
 14392                           
 14393                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 14394  1157  319F  2763  3191   	fcall	_CC2500_FrequencyCabr
 14395                           
 14396                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 14397  115A  319E  26B6         	fcall	_CC2500_SIDLEMode
 14398  115C  0008               	return
 14399  115D                     __end_of_CC2500_PowerOnInitial:	
 14400                           
 14401                           	psect	text93
 14402  1EB6                     __ptext93:	
 14403 ;; *************** function _CC2500_SIDLEMode *****************
 14404 ;; Defined at:
 14405 ;;		line 181 in file "../src/CC2500_B1.c"
 14406 ;; Parameters:    Size  Location     Type
 14407 ;;		None
 14408 ;; Auto vars:     Size  Location     Type
 14409 ;;		None
 14410 ;; Return value:  Size  Location     Type
 14411 ;;		None               void
 14412 ;; Registers used:
 14413 ;;		wreg, status,2, status,0, pclath, cstack
 14414 ;; Tracked objects:
 14415 ;;		On entry : 0/0
 14416 ;;		On exit  : 0/0
 14417 ;;		Unchanged: 0/0
 14418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14423 ;;Total ram usage:        0 bytes
 14424 ;; Hardware stack levels used:    1
 14425 ;; Hardware stack levels required when called:    7
 14426 ;; This function calls:
 14427 ;;		_CC2500_WriteCommand
 14428 ;; This function is called by:
 14429 ;;		_CC2500_PowerOnInitial
 14430 ;; This function uses a non-reentrant model
 14431 ;;
 14432                           
 14433                           
 14434                           ;psect for function _CC2500_SIDLEMode
 14435  1EB6                     _CC2500_SIDLEMode:	
 14436                           
 14437                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 14438                           
 14439                           ;incstack = 0
 14440                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14441  1EB6  3036               	movlw	54
 14442  1EB7  3190  2089         	fcall	_CC2500_WriteCommand
 14443  1EB9  0008               	return
 14444  1EBA                     __end_of_CC2500_SIDLEMode:	
 14445                           
 14446                           	psect	text94
 14447  147B                     __ptext94:	
 14448 ;; *************** function _CC2500_PowerRST *****************
 14449 ;; Defined at:
 14450 ;;		line 110 in file "../src/CC2500_B1.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;		None
 14453 ;; Auto vars:     Size  Location     Type
 14454 ;;		None
 14455 ;; Return value:  Size  Location     Type
 14456 ;;		None               void
 14457 ;; Registers used:
 14458 ;;		wreg, status,2, status,0, pclath, cstack
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14468 ;;Total ram usage:        1 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; Hardware stack levels required when called:    6
 14471 ;; This function calls:
 14472 ;;		_CC2500_WriteByte
 14473 ;;		_DelayTime_1us
 14474 ;; This function is called by:
 14475 ;;		_CC2500_PowerOnInitial
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           
 14480                           ;psect for function _CC2500_PowerRST
 14481  147B                     _CC2500_PowerRST:	
 14482                           
 14483                           ;CC2500_B1.c: 111: RC1 = 0;
 14484                           
 14485                           ;incstack = 0
 14486                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14487  147B  0020               	movlb	0	; select bank0
 14488  147C  108E               	bcf	14,1	;volatile
 14489                           
 14490                           ;CC2500_B1.c: 112: RC0 = 0;
 14491  147D  100E               	bcf	14,0	;volatile
 14492                           
 14493                           ;CC2500_B1.c: 113: RC4 = 1;
 14494  147E  160E               	bsf	14,4	;volatile
 14495                           
 14496                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 14497  147F  300A               	movlw	10
 14498  1480  00A0               	movwf	DelayTime_1us@count
 14499  1481  3000               	movlw	0
 14500  1482  00A1               	movwf	DelayTime_1us@count+1
 14501  1483  3193  237F  3194   	fcall	_DelayTime_1us
 14502                           
 14503                           ;CC2500_B1.c: 115: RC4 = 0;
 14504  1486  0020               	movlb	0	; select bank0
 14505  1487  120E               	bcf	14,4	;volatile
 14506                           
 14507                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 14508  1488  300A               	movlw	10
 14509  1489  00A0               	movwf	DelayTime_1us@count
 14510  148A  3000               	movlw	0
 14511  148B  00A1               	movwf	DelayTime_1us@count+1
 14512  148C  3193  237F  3194   	fcall	_DelayTime_1us
 14513                           
 14514                           ;CC2500_B1.c: 117: RC4 = 1;
 14515  148F  0020               	movlb	0	; select bank0
 14516  1490  160E               	bsf	14,4	;volatile
 14517                           
 14518                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 14519  1491  3028               	movlw	40
 14520  1492  00A0               	movwf	DelayTime_1us@count
 14521  1493  3000               	movlw	0
 14522  1494  00A1               	movwf	DelayTime_1us@count+1
 14523  1495  3193  237F  3194   	fcall	_DelayTime_1us
 14524                           
 14525                           ;CC2500_B1.c: 119: RC4 = 0;
 14526  1498  0020               	movlb	0	; select bank0
 14527  1499  120E               	bcf	14,4	;volatile
 14528                           
 14529                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 14530  149A  3030               	movlw	48
 14531  149B  00A6               	movwf	??_CC2500_PowerRST
 14532  149C  0826               	movf	??_CC2500_PowerRST,w
 14533  149D  0021               	movlb	1	; select bank1
 14534  149E  00C1               	movwf	_SPI0Buffer^(0+128)
 14535  149F                     l303:	
 14536                           ;CC2500_B1.c: 121: while (RC2 == 1);
 14537                           
 14538  149F  0020               	movlb	0	; select bank0
 14539  14A0  190E               	btfsc	14,2	;volatile
 14540  14A1  2C9F               	goto	l303
 14541                           
 14542                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 14543  14A2  3191  21D1  3194   	fcall	_CC2500_WriteByte
 14544  14A5                     l306:	
 14545                           ;CC2500_B1.c: 123: while (RC2 == 1);
 14546                           
 14547  14A5  0020               	movlb	0	; select bank0
 14548  14A6  190E               	btfsc	14,2	;volatile
 14549  14A7  2CA5               	goto	l306
 14550                           
 14551                           ;CC2500_B1.c: 124: RC0 = 0;
 14552  14A8  100E               	bcf	14,0	;volatile
 14553                           
 14554                           ;CC2500_B1.c: 125: RC4 = 1;
 14555  14A9  160E               	bsf	14,4	;volatile
 14556  14AA  0008               	return
 14557  14AB                     __end_of_CC2500_PowerRST:	
 14558                           
 14559                           	psect	text95
 14560  0801                     __ptext95:	
 14561 ;; *************** function _CC2500_InitSetREG *****************
 14562 ;; Defined at:
 14563 ;;		line 131 in file "../src/CC2500_B1.c"
 14564 ;; Parameters:    Size  Location     Type
 14565 ;;		None
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14568 ;;  temp2           1    7[BANK0 ] unsigned char 
 14569 ;;  temp1           1    6[BANK0 ] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;		None               void
 14572 ;; Registers used:
 14573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;Total ram usage:        4 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; Hardware stack levels required when called:    7
 14586 ;; This function calls:
 14587 ;;		_CC2500_WriteREG
 14588 ;; This function is called by:
 14589 ;;		_CC2500_PowerOnInitial
 14590 ;; This function uses a non-reentrant model
 14591 ;;
 14592                           
 14593                           
 14594                           ;psect for function _CC2500_InitSetREG
 14595  0801                     _CC2500_InitSetREG:	
 14596                           
 14597                           ;CC2500_B1.c: 132: unsigned char loop_c;
 14598                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 14599                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 14600                           
 14601                           ;incstack = 0
 14602                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14603  0801  0020               	movlb	0	; select bank0
 14604  0802  01A8               	clrf	CC2500_InitSetREG@loop_c
 14605  0803                     L13:	
 14606  0803  302F               	movlw	47
 14607  0804  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14608  0805  1803               	btfsc	3,0
 14609  0806  0008               	return
 14610                           
 14611                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 14612  0807  0828               	movf	CC2500_InitSetREG@loop_c,w
 14613  0808  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14614  0809  0084               	movwf	4
 14615  080A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14616  080B  1803               	skipnc
 14617  080C  3E01               	addlw	1
 14618  080D  0085               	movwf	5
 14619  080E  0800               	movf	0,w	;code access
 14620  080F  00A5               	movwf	??_CC2500_InitSetREG
 14621  0810  0825               	movf	??_CC2500_InitSetREG,w
 14622  0811  00A6               	movwf	CC2500_InitSetREG@temp1
 14623                           
 14624                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 14625  0812  0828               	movf	CC2500_InitSetREG@loop_c,w
 14626  0813  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14627  0814  0084               	movwf	4
 14628  0815  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14629  0816  1803               	skipnc
 14630  0817  3E01               	addlw	1
 14631  0818  0085               	movwf	5
 14632  0819  0800               	movf	0,w	;code access
 14633  081A  00A5               	movwf	??_CC2500_InitSetREG
 14634  081B  0825               	movf	??_CC2500_InitSetREG,w
 14635  081C  00A7               	movwf	CC2500_InitSetREG@temp2
 14636                           
 14637                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 14638  081D  0827               	movf	CC2500_InitSetREG@temp2,w
 14639  081E  00A5               	movwf	??_CC2500_InitSetREG
 14640  081F  0825               	movf	??_CC2500_InitSetREG,w
 14641  0820  00A2               	movwf	CC2500_WriteREG@value
 14642  0821  0826               	movf	CC2500_InitSetREG@temp1,w
 14643  0822  3191  21EA  3188   	fcall	_CC2500_WriteREG
 14644  0825  3001               	movlw	1
 14645  0826  0020               	movlb	0	; select bank0
 14646  0827  00A5               	movwf	??_CC2500_InitSetREG
 14647  0828  0825               	movf	??_CC2500_InitSetREG,w
 14648  0829  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14649  082A  2803               	goto	L13
 14650  082B                     __end_of_CC2500_InitSetREG:	
 14651                           
 14652                           	psect	text96
 14653  12DA                     __ptext96:	
 14654 ;; *************** function _CC2500_InitPATable *****************
 14655 ;; Defined at:
 14656 ;;		line 146 in file "../src/CC2500_B1.c"
 14657 ;; Parameters:    Size  Location     Type
 14658 ;;		None
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14661 ;;  temp            1    6[BANK0 ] unsigned char 
 14662 ;; Return value:  Size  Location     Type
 14663 ;;		None               void
 14664 ;; Registers used:
 14665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14666 ;; Tracked objects:
 14667 ;;		On entry : 0/0
 14668 ;;		On exit  : 0/0
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;Total ram usage:        3 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; Hardware stack levels required when called:    7
 14678 ;; This function calls:
 14679 ;;		_CC2500_WriteREG
 14680 ;; This function is called by:
 14681 ;;		_CC2500_PowerOnInitial
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685                           
 14686                           ;psect for function _CC2500_InitPATable
 14687  12DA                     _CC2500_InitPATable:	
 14688                           
 14689                           ;CC2500_B1.c: 147: unsigned char loop_d;
 14690                           ;CC2500_B1.c: 148: unsigned char temp;
 14691                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 14692                           
 14693                           ;incstack = 0
 14694                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14695  12DA  0020               	movlb	0	; select bank0
 14696  12DB  01A7               	clrf	CC2500_InitPATable@loop_d
 14697  12DC                     L14:	
 14698  12DC  3008               	movlw	8
 14699  12DD  0227               	subwf	CC2500_InitPATable@loop_d,w
 14700  12DE  1803               	btfsc	3,0
 14701  12DF  0008               	return
 14702                           
 14703                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 14704  12E0  0827               	movf	CC2500_InitPATable@loop_d,w
 14705  12E1  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14706  12E2  0084               	movwf	4
 14707  12E3  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14708  12E4  1803               	skipnc
 14709  12E5  3E01               	addlw	1
 14710  12E6  0085               	movwf	5
 14711  12E7  0800               	movf	0,w	;code access
 14712  12E8  00A5               	movwf	??_CC2500_InitPATable
 14713  12E9  0825               	movf	??_CC2500_InitPATable,w
 14714  12EA  00A6               	movwf	CC2500_InitPATable@temp
 14715                           
 14716                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 14717  12EB  0826               	movf	CC2500_InitPATable@temp,w
 14718  12EC  00A5               	movwf	??_CC2500_InitPATable
 14719  12ED  0825               	movf	??_CC2500_InitPATable,w
 14720  12EE  00A2               	movwf	CC2500_WriteREG@value
 14721  12EF  303E               	movlw	62
 14722  12F0  3191  21EA  3192   	fcall	_CC2500_WriteREG
 14723  12F3  3001               	movlw	1
 14724  12F4  0020               	movlb	0	; select bank0
 14725  12F5  00A5               	movwf	??_CC2500_InitPATable
 14726  12F6  0825               	movf	??_CC2500_InitPATable,w
 14727  12F7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14728  12F8  2ADC               	goto	L14
 14729  12F9                     __end_of_CC2500_InitPATable:	
 14730                           
 14731                           	psect	text97
 14732  11EA                     __ptext97:	
 14733 ;; *************** function _CC2500_WriteREG *****************
 14734 ;; Defined at:
 14735 ;;		line 223 in file "../src/CC2500_B1.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  w_addr          1    wreg     unsigned char 
 14738 ;;  value           1    2[BANK0 ] unsigned char 
 14739 ;; Auto vars:     Size  Location     Type
 14740 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14741 ;; Return value:  Size  Location     Type
 14742 ;;		None               void
 14743 ;; Registers used:
 14744 ;;		wreg, status,2, status,0, pclath, cstack
 14745 ;; Tracked objects:
 14746 ;;		On entry : 0/0
 14747 ;;		On exit  : 0/0
 14748 ;;		Unchanged: 0/0
 14749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14750 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14753 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14754 ;;Total ram usage:        3 bytes
 14755 ;; Hardware stack levels used:    1
 14756 ;; Hardware stack levels required when called:    6
 14757 ;; This function calls:
 14758 ;;		_CC2500_WriteByte
 14759 ;; This function is called by:
 14760 ;;		_CC2500_InitSetREG
 14761 ;;		_CC2500_InitPATable
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           
 14766                           ;psect for function _CC2500_WriteREG
 14767  11EA                     _CC2500_WriteREG:	
 14768                           
 14769                           ;incstack = 0
 14770                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14771                           ;CC2500_WriteREG@w_addr stored from wreg
 14772  11EA  0020               	movlb	0	; select bank0
 14773  11EB  00A4               	movwf	CC2500_WriteREG@w_addr
 14774                           
 14775                           ;CC2500_B1.c: 224: RC4 = 0;
 14776  11EC  120E               	bcf	14,4	;volatile
 14777                           
 14778                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 14779  11ED  0824               	movf	CC2500_WriteREG@w_addr,w
 14780  11EE  00A3               	movwf	??_CC2500_WriteREG
 14781  11EF  0823               	movf	??_CC2500_WriteREG,w
 14782  11F0  0021               	movlb	1	; select bank1
 14783  11F1  00C1               	movwf	_SPI0Buffer^(0+128)
 14784  11F2                     l348:	
 14785                           ;CC2500_B1.c: 226: while (RC2 == 1);
 14786                           
 14787  11F2  0020               	movlb	0	; select bank0
 14788  11F3  190E               	btfsc	14,2	;volatile
 14789  11F4  29F2               	goto	l348
 14790                           
 14791                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 14792  11F5  3191  21D1  3191   	fcall	_CC2500_WriteByte
 14793                           
 14794                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 14795  11F8  0020               	movlb	0	; select bank0
 14796  11F9  0822               	movf	CC2500_WriteREG@value,w
 14797  11FA  00A3               	movwf	??_CC2500_WriteREG
 14798  11FB  0823               	movf	??_CC2500_WriteREG,w
 14799  11FC  0021               	movlb	1	; select bank1
 14800  11FD  00C1               	movwf	_SPI0Buffer^(0+128)
 14801                           
 14802                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 14803  11FE  3191  21D1         	fcall	_CC2500_WriteByte
 14804                           
 14805                           ;CC2500_B1.c: 230: RC4 = 1;
 14806  1200  0020               	movlb	0	; select bank0
 14807  1201  160E               	bsf	14,4	;volatile
 14808  1202  0008               	return
 14809  1203                     __end_of_CC2500_WriteREG:	
 14810                           
 14811                           	psect	text98
 14812  1F63                     __ptext98:	
 14813 ;; *************** function _CC2500_FrequencyCabr *****************
 14814 ;; Defined at:
 14815 ;;		line 173 in file "../src/CC2500_B1.c"
 14816 ;; Parameters:    Size  Location     Type
 14817 ;;		None
 14818 ;; Auto vars:     Size  Location     Type
 14819 ;;		None
 14820 ;; Return value:  Size  Location     Type
 14821 ;;		None               void
 14822 ;; Registers used:
 14823 ;;		wreg, status,2, status,0, pclath, cstack
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;Total ram usage:        0 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; Hardware stack levels required when called:    7
 14836 ;; This function calls:
 14837 ;;		_CC2500_WriteCommand
 14838 ;;		_DelayTime_1us
 14839 ;; This function is called by:
 14840 ;;		_CC2500_PowerOnInitial
 14841 ;; This function uses a non-reentrant model
 14842 ;;
 14843                           
 14844                           
 14845                           ;psect for function _CC2500_FrequencyCabr
 14846  1F63                     _CC2500_FrequencyCabr:	
 14847                           
 14848                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 14849                           
 14850                           ;incstack = 0
 14851                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 14852  1F63  3033               	movlw	51
 14853  1F64  3190  2089  319F   	fcall	_CC2500_WriteCommand
 14854                           
 14855                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 14856  1F67  30E8               	movlw	232
 14857  1F68  0020               	movlb	0	; select bank0
 14858  1F69  00A0               	movwf	DelayTime_1us@count
 14859  1F6A  3003               	movlw	3
 14860  1F6B  00A1               	movwf	DelayTime_1us@count+1
 14861  1F6C  3193  237F         	fcall	_DelayTime_1us
 14862  1F6E  0008               	return
 14863  1F6F                     __end_of_CC2500_FrequencyCabr:	
 14864                           
 14865                           	psect	text99
 14866  137F                     __ptext99:	
 14867 ;; *************** function _DelayTime_1us *****************
 14868 ;; Defined at:
 14869 ;;		line 279 in file "../src/CC2500_B1.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;  count           2    0[BANK0 ] int 
 14872 ;; Auto vars:     Size  Location     Type
 14873 ;;  j               2    4[BANK0 ] unsigned int 
 14874 ;;  i               2    2[BANK0 ] unsigned int 
 14875 ;; Return value:  Size  Location     Type
 14876 ;;		None               void
 14877 ;; Registers used:
 14878 ;;		wreg, status,2
 14879 ;; Tracked objects:
 14880 ;;		On entry : 0/0
 14881 ;;		On exit  : 0/0
 14882 ;;		Unchanged: 0/0
 14883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14884 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;Total ram usage:        6 bytes
 14889 ;; Hardware stack levels used:    1
 14890 ;; Hardware stack levels required when called:    5
 14891 ;; This function calls:
 14892 ;;		Nothing
 14893 ;; This function is called by:
 14894 ;;		_CC2500_PowerRST
 14895 ;;		_CC2500_FrequencyCabr
 14896 ;; This function uses a non-reentrant model
 14897 ;;
 14898                           
 14899                           
 14900                           ;psect for function _DelayTime_1us
 14901  137F                     _DelayTime_1us:	
 14902                           
 14903                           ;CC2500_B1.c: 280: unsigned int i, j;
 14904                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 14905                           
 14906                           ;incstack = 0
 14907                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14908  137F  3001               	movlw	1
 14909  1380  0020               	movlb	0	; select bank0
 14910  1381  00A2               	movwf	DelayTime_1us@i
 14911  1382  3000               	movlw	0
 14912  1383  00A3               	movwf	DelayTime_1us@i+1
 14913  1384                     l372:	
 14914  1384  0821               	movf	DelayTime_1us@count+1,w
 14915  1385  0223               	subwf	DelayTime_1us@i+1,w
 14916  1386  1D03               	skipz
 14917  1387  2B8A               	goto	u4465
 14918  1388  0820               	movf	DelayTime_1us@count,w
 14919  1389  0222               	subwf	DelayTime_1us@i,w
 14920  138A                     u4465:	
 14921  138A  1803               	btfsc	3,0
 14922  138B  0008               	return
 14923                           
 14924                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 14925  138C  01A4               	clrf	DelayTime_1us@j
 14926  138D  01A5               	clrf	DelayTime_1us@j+1
 14927  138E  3000               	movlw	0
 14928  138F  0225               	subwf	DelayTime_1us@j+1,w
 14929  1390  3002               	movlw	2
 14930  1391  1903               	skipnz
 14931  1392  0224               	subwf	DelayTime_1us@j,w
 14932  1393  1803               	btfsc	3,0
 14933  1394  2BA0               	goto	l5855
 14934  1395                     l5853:	
 14935  1395  3001               	movlw	1
 14936  1396  07A4               	addwf	DelayTime_1us@j,f
 14937  1397  3000               	movlw	0
 14938  1398  3DA5               	addwfc	DelayTime_1us@j+1,f
 14939  1399  3000               	movlw	0
 14940  139A  0225               	subwf	DelayTime_1us@j+1,w
 14941  139B  3002               	movlw	2
 14942  139C  1903               	skipnz
 14943  139D  0224               	subwf	DelayTime_1us@j,w
 14944  139E  1C03               	skipc
 14945  139F  2B95               	goto	l5853
 14946  13A0                     l5855:	
 14947  13A0  3001               	movlw	1
 14948  13A1  07A2               	addwf	DelayTime_1us@i,f
 14949  13A2  3000               	movlw	0
 14950  13A3  3DA3               	addwfc	DelayTime_1us@i+1,f
 14951  13A4  2B84               	goto	l372
 14952  13A5                     __end_of_DelayTime_1us:	
 14953                           
 14954                           	psect	text100
 14955  1EB2                     __ptext100:	
 14956 ;; *************** function _CC2500_ClearTXFIFO *****************
 14957 ;; Defined at:
 14958 ;;		line 159 in file "../src/CC2500_B1.c"
 14959 ;; Parameters:    Size  Location     Type
 14960 ;;		None
 14961 ;; Auto vars:     Size  Location     Type
 14962 ;;		None
 14963 ;; Return value:  Size  Location     Type
 14964 ;;		None               void
 14965 ;; Registers used:
 14966 ;;		wreg, status,2, status,0, pclath, cstack
 14967 ;; Tracked objects:
 14968 ;;		On entry : 0/0
 14969 ;;		On exit  : 0/0
 14970 ;;		Unchanged: 0/0
 14971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;Total ram usage:        0 bytes
 14977 ;; Hardware stack levels used:    1
 14978 ;; Hardware stack levels required when called:    7
 14979 ;; This function calls:
 14980 ;;		_CC2500_WriteCommand
 14981 ;; This function is called by:
 14982 ;;		_CC2500_PowerOnInitial
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           
 14987                           ;psect for function _CC2500_ClearTXFIFO
 14988  1EB2                     _CC2500_ClearTXFIFO:	
 14989                           
 14990                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 14991                           
 14992                           ;incstack = 0
 14993                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 14994  1EB2  303B               	movlw	59
 14995  1EB3  3190  2089         	fcall	_CC2500_WriteCommand
 14996  1EB5  0008               	return
 14997  1EB6                     __end_of_CC2500_ClearTXFIFO:	
 14998                           
 14999                           	psect	text101
 15000  1EAE                     __ptext101:	
 15001 ;; *************** function _CC2500_ClearRXFIFO *****************
 15002 ;; Defined at:
 15003 ;;		line 166 in file "../src/CC2500_B1.c"
 15004 ;; Parameters:    Size  Location     Type
 15005 ;;		None
 15006 ;; Auto vars:     Size  Location     Type
 15007 ;;		None
 15008 ;; Return value:  Size  Location     Type
 15009 ;;		None               void
 15010 ;; Registers used:
 15011 ;;		wreg, status,2, status,0, pclath, cstack
 15012 ;; Tracked objects:
 15013 ;;		On entry : 0/0
 15014 ;;		On exit  : 0/0
 15015 ;;		Unchanged: 0/0
 15016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15021 ;;Total ram usage:        0 bytes
 15022 ;; Hardware stack levels used:    1
 15023 ;; Hardware stack levels required when called:    7
 15024 ;; This function calls:
 15025 ;;		_CC2500_WriteCommand
 15026 ;; This function is called by:
 15027 ;;		_CC2500_PowerOnInitial
 15028 ;; This function uses a non-reentrant model
 15029 ;;
 15030                           
 15031                           
 15032                           ;psect for function _CC2500_ClearRXFIFO
 15033  1EAE                     _CC2500_ClearRXFIFO:	
 15034                           
 15035                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 15036                           
 15037                           ;incstack = 0
 15038                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 15039  1EAE  303A               	movlw	58
 15040  1EAF  3190  2089         	fcall	_CC2500_WriteCommand
 15041  1EB1  0008               	return
 15042  1EB2                     __end_of_CC2500_ClearRXFIFO:	
 15043                           
 15044                           	psect	text102
 15045  1089                     __ptext102:	
 15046 ;; *************** function _CC2500_WriteCommand *****************
 15047 ;; Defined at:
 15048 ;;		line 249 in file "../src/CC2500_B1.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  command         1    wreg     unsigned char 
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  command         1    3[BANK0 ] unsigned char 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;		None               void
 15055 ;; Registers used:
 15056 ;;		wreg, status,2, status,0, pclath, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;Total ram usage:        2 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    6
 15069 ;; This function calls:
 15070 ;;		_CC2500_WriteByte
 15071 ;; This function is called by:
 15072 ;;		_CC2500_TxData
 15073 ;;		_CC2500_RxData
 15074 ;;		_CC2500_ClearTXFIFO
 15075 ;;		_CC2500_ClearRXFIFO
 15076 ;;		_CC2500_FrequencyCabr
 15077 ;;		_CC2500_SIDLEMode
 15078 ;;		_setRF_Main
 15079 ;;		_RF_RxDisable
 15080 ;; This function uses a non-reentrant model
 15081 ;;
 15082                           
 15083                           
 15084                           ;psect for function _CC2500_WriteCommand
 15085  1089                     _CC2500_WriteCommand:	
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 15089                           ;CC2500_WriteCommand@command stored from wreg
 15090  1089  0020               	movlb	0	; select bank0
 15091  108A  00A3               	movwf	CC2500_WriteCommand@command
 15092                           
 15093                           ;CC2500_B1.c: 250: RC4 = 0;
 15094  108B  120E               	bcf	14,4	;volatile
 15095                           
 15096                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 15097  108C  0823               	movf	CC2500_WriteCommand@command,w
 15098  108D  00A2               	movwf	??_CC2500_WriteCommand
 15099  108E  0822               	movf	??_CC2500_WriteCommand,w
 15100  108F  0021               	movlb	1	; select bank1
 15101  1090  00C1               	movwf	_SPI0Buffer^(0+128)
 15102  1091                     l360:	
 15103                           ;CC2500_B1.c: 253: while (RC2 == 1);
 15104                           
 15105  1091  0020               	movlb	0	; select bank0
 15106  1092  190E               	btfsc	14,2	;volatile
 15107  1093  2891               	goto	l360
 15108                           
 15109                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 15110  1094  3191  21D1         	fcall	_CC2500_WriteByte
 15111                           
 15112                           ;CC2500_B1.c: 256: RC4 = 1;
 15113  1096  0020               	movlb	0	; select bank0
 15114  1097  160E               	bsf	14,4	;volatile
 15115  1098  0008               	return
 15116  1099                     __end_of_CC2500_WriteCommand:	
 15117                           
 15118                           	psect	text103
 15119  11D1                     __ptext103:	
 15120 ;; *************** function _CC2500_WriteByte *****************
 15121 ;; Defined at:
 15122 ;;		line 191 in file "../src/CC2500_B1.c"
 15123 ;; Parameters:    Size  Location     Type
 15124 ;;		None
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  loop_a          1    1[BANK0 ] unsigned char 
 15127 ;; Return value:  Size  Location     Type
 15128 ;;		None               void
 15129 ;; Registers used:
 15130 ;;		wreg, status,2, status,0
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;Total ram usage:        2 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    5
 15143 ;; This function calls:
 15144 ;;		Nothing
 15145 ;; This function is called by:
 15146 ;;		_CC2500_TxData
 15147 ;;		_CC2500_RxData
 15148 ;;		_CC2500_PowerRST
 15149 ;;		_CC2500_WriteREG
 15150 ;;		_CC2500_WriteCommand
 15151 ;;		_CC2500_ReadStatus
 15152 ;;		_CC2500_ReadREG
 15153 ;; This function uses a non-reentrant model
 15154 ;;
 15155                           
 15156                           
 15157                           ;psect for function _CC2500_WriteByte
 15158  11D1                     _CC2500_WriteByte:	
 15159                           
 15160                           ;CC2500_B1.c: 192: unsigned char loop_a;
 15161                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 15162                           
 15163                           ;incstack = 0
 15164                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15165  11D1  0020               	movlb	0	; select bank0
 15166  11D2  01A1               	clrf	CC2500_WriteByte@loop_a
 15167  11D3                     L15:	
 15168  11D3  3008               	movlw	8
 15169  11D4  0221               	subwf	CC2500_WriteByte@loop_a,w
 15170  11D5  1803               	btfsc	3,0
 15171  11D6  0008               	return
 15172                           
 15173                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 15174  11D7  0021               	movlb	1	; select bank1
 15175  11D8  1FC1               	btfss	_SPI0Buffer^(0+128),7
 15176  11D9  29DD               	goto	l336
 15177                           
 15178                           ;CC2500_B1.c: 195: RC0 = 1;
 15179  11DA  0020               	movlb	0	; select bank0
 15180  11DB  140E               	bsf	14,0	;volatile
 15181  11DC  29DF               	goto	l337
 15182  11DD                     l336:	
 15183                           
 15184                           ;CC2500_B1.c: 196: else
 15185                           ;CC2500_B1.c: 197: RC0 = 0;
 15186  11DD  0020               	movlb	0	; select bank0
 15187  11DE  100E               	bcf	14,0	;volatile
 15188  11DF                     l337:	
 15189                           
 15190                           ;CC2500_B1.c: 198: RC1 = 1;
 15191  11DF  148E               	bsf	14,1	;volatile
 15192                           
 15193                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 15194  11E0  1003               	clrc
 15195  11E1  0021               	movlb	1	; select bank1
 15196  11E2  0DC1               	rlf	_SPI0Buffer^(0+128),f
 15197                           
 15198                           ;CC2500_B1.c: 200: RC1 = 0;
 15199  11E3  0020               	movlb	0	; select bank0
 15200  11E4  108E               	bcf	14,1	;volatile
 15201  11E5  3001               	movlw	1
 15202  11E6  00A0               	movwf	??_CC2500_WriteByte
 15203  11E7  0820               	movf	??_CC2500_WriteByte,w
 15204  11E8  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15205  11E9  29D3               	goto	L15
 15206  11EA                     __end_of_CC2500_WriteByte:	
 15207                           
 15208                           	psect	text104
 15209  06FC                     __ptext104:	
 15210 ;; *************** function _Buzzer_Main *****************
 15211 ;; Defined at:
 15212 ;;		line 53 in file "../src/Buzzer_B1.c"
 15213 ;; Parameters:    Size  Location     Type
 15214 ;;		None
 15215 ;; Auto vars:     Size  Location     Type
 15216 ;;		None
 15217 ;; Return value:  Size  Location     Type
 15218 ;;		None               void
 15219 ;; Registers used:
 15220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15221 ;; Tracked objects:
 15222 ;;		On entry : 0/0
 15223 ;;		On exit  : 0/0
 15224 ;;		Unchanged: 0/0
 15225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;Total ram usage:        4 bytes
 15231 ;; Hardware stack levels used:    1
 15232 ;; Hardware stack levels required when called:    5
 15233 ;; This function calls:
 15234 ;;		Nothing
 15235 ;; This function is called by:
 15236 ;;		_main
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           
 15241                           ;psect for function _Buzzer_Main
 15242  06FC                     _Buzzer_Main:	
 15243                           
 15244                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 15245                           
 15246                           ;incstack = 0
 15247                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15248  06FC  0878               	movf	_Buz,w
 15249  06FD  0086               	movwf	6
 15250  06FE  3001               	movlw	1	; select bank2/3
 15251  06FF  0087               	movwf	7
 15252  0700  1281               	bcf	1,5
 15253  0701  0020               	movlb	0	; select bank0
 15254  0702  198D               	btfsc	13,3	;volatile
 15255  0703  1681               	bsf	1,5
 15256                           
 15257                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 15258  0704  0878               	movf	_Buz,w
 15259  0705  3E06               	addlw	6
 15260  0706  0086               	movwf	6
 15261  0707  3001               	movlw	1	; select bank2/3
 15262  0708  0087               	movwf	7
 15263  0709  3F40               	moviw [0]fsr1
 15264  070A  0020               	movlb	0	; select bank0
 15265  070B  00A0               	movwf	??_Buzzer_Main
 15266  070C  3F41               	moviw [1]fsr1
 15267  070D  00A1               	movwf	??_Buzzer_Main+1
 15268  070E  0A78               	incf	_Buz,w
 15269  070F  0086               	movwf	6
 15270  0710  3001               	movlw	1	; select bank2/3
 15271  0711  0087               	movwf	7
 15272  0712  3F40               	moviw [0]fsr1
 15273  0713  00A2               	movwf	??_Buzzer_Main+2
 15274  0714  3F41               	moviw [1]fsr1
 15275  0715  00A3               	movwf	??_Buzzer_Main+3
 15276  0716  0821               	movf	??_Buzzer_Main+1,w
 15277  0717  0223               	subwf	??_Buzzer_Main+3,w
 15278  0718  1D03               	skipz
 15279  0719  2F1C               	goto	u5655
 15280  071A  0820               	movf	??_Buzzer_Main,w
 15281  071B  0222               	subwf	??_Buzzer_Main+2,w
 15282  071C                     u5655:	
 15283  071C  1C03               	skipc
 15284  071D  0008               	return
 15285                           
 15286                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 15287  071E  0A78               	incf	_Buz,w
 15288  071F  0086               	movwf	6
 15289  0720  3001               	movlw	1	; select bank2/3
 15290  0721  0087               	movwf	7
 15291  0722  3000               	movlw	0
 15292  0723  3FC0               	movwi [0]fsr1
 15293  0724  3FC1               	movwi [1]fsr1
 15294                           
 15295                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 15296  0725  0878               	movf	_Buz,w
 15297  0726  0086               	movwf	6
 15298  0727  3001               	movlw	1	; select bank2/3
 15299  0728  0087               	movwf	7
 15300  0729  1A81               	btfsc	1,5
 15301  072A  2F90               	goto	l6697
 15302                           
 15303                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 15304  072B  0878               	movf	_Buz,w
 15305  072C  3E03               	addlw	3
 15306  072D  0086               	movwf	6
 15307  072E  3001               	movlw	1	; select bank2/3
 15308  072F  0087               	movwf	7
 15309  0730  0881               	movf	1,f
 15310  0731  1D03               	skipz
 15311  0732  2F89               	goto	l6693
 15312                           
 15313                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 15314  0733  0878               	movf	_Buz,w
 15315  0734  0086               	movwf	6
 15316  0735  3001               	movlw	1	; select bank2/3
 15317  0736  0087               	movwf	7
 15318  0737  1D81               	btfss	1,3
 15319  0738  2F5B               	goto	l6685
 15320                           
 15321                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 15322  0739  0878               	movf	_Buz,w
 15323  073A  0086               	movwf	6
 15324  073B  3001               	movlw	1	; select bank2/3
 15325  073C  0087               	movwf	7
 15326  073D  1181               	bcf	1,3
 15327                           
 15328                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 15329  073E  0878               	movf	_Buz,w
 15330  073F  3E04               	addlw	4
 15331  0740  0086               	movwf	6
 15332  0741  3001               	movlw	1	; select bank2/3
 15333  0742  0087               	movwf	7
 15334  0743  0801               	movf	1,w
 15335  0744  00A0               	movwf	??_Buzzer_Main
 15336  0745  0878               	movf	_Buz,w
 15337  0746  3E03               	addlw	3
 15338  0747  0086               	movwf	6
 15339  0748  3001               	movlw	1	; select bank2/3
 15340  0749  0087               	movwf	7
 15341  074A  0820               	movf	??_Buzzer_Main,w
 15342  074B  0081               	movwf	1
 15343                           
 15344                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 15345  074C  0878               	movf	_Buz,w
 15346  074D  3E08               	addlw	8
 15347  074E  0086               	movwf	6
 15348  074F  3001               	movlw	1	; select bank2/3
 15349  0750  0087               	movwf	7
 15350  0751  0878               	movf	_Buz,w
 15351  0752  3E06               	addlw	6
 15352  0753  0084               	movwf	4
 15353  0754  3001               	movlw	1	; select bank2/3
 15354  0755  0085               	movwf	5
 15355  0756  3F40               	moviw [0]fsr1
 15356  0757  3F80               	movwi [0]fsr0
 15357  0758  3F41               	moviw [1]fsr1
 15358  0759  3F81               	movwi [1]fsr0
 15359                           
 15360                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15361  075A  0008               	return
 15362  075B                     l6685:	
 15363  075B  0878               	movf	_Buz,w
 15364  075C  0086               	movwf	6
 15365  075D  3001               	movlw	1	; select bank2/3
 15366  075E  0087               	movwf	7
 15367  075F  1E01               	btfss	1,4
 15368  0760  2F83               	goto	l6691
 15369                           
 15370                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15371  0761  0878               	movf	_Buz,w
 15372  0762  0086               	movwf	6
 15373  0763  3001               	movlw	1	; select bank2/3
 15374  0764  0087               	movwf	7
 15375  0765  1201               	bcf	1,4
 15376                           
 15377                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15378  0766  0878               	movf	_Buz,w
 15379  0767  3E05               	addlw	5
 15380  0768  0086               	movwf	6
 15381  0769  3001               	movlw	1	; select bank2/3
 15382  076A  0087               	movwf	7
 15383  076B  0801               	movf	1,w
 15384  076C  00A0               	movwf	??_Buzzer_Main
 15385  076D  0878               	movf	_Buz,w
 15386  076E  3E03               	addlw	3
 15387  076F  0086               	movwf	6
 15388  0770  3001               	movlw	1	; select bank2/3
 15389  0771  0087               	movwf	7
 15390  0772  0820               	movf	??_Buzzer_Main,w
 15391  0773  0081               	movwf	1
 15392                           
 15393                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15394  0774  0878               	movf	_Buz,w
 15395  0775  3E0A               	addlw	10
 15396  0776  0086               	movwf	6
 15397  0777  3001               	movlw	1	; select bank2/3
 15398  0778  0087               	movwf	7
 15399  0779  0878               	movf	_Buz,w
 15400  077A  3E06               	addlw	6
 15401  077B  0084               	movwf	4
 15402  077C  3001               	movlw	1	; select bank2/3
 15403  077D  0085               	movwf	5
 15404  077E  3F40               	moviw [0]fsr1
 15405  077F  3F80               	movwi [0]fsr0
 15406  0780  3F41               	moviw [1]fsr1
 15407  0781  3F81               	movwi [1]fsr0
 15408                           
 15409                           ;Buzzer_B1.c: 68: } else {
 15410  0782  0008               	return
 15411  0783                     l6691:	
 15412                           
 15413                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15414  0783  0878               	movf	_Buz,w
 15415  0784  0086               	movwf	6
 15416  0785  3001               	movlw	1	; select bank2/3
 15417  0786  0087               	movwf	7
 15418  0787  1081               	bcf	1,1
 15419                           
 15420                           ;Buzzer_B1.c: 70: }
 15421                           ;Buzzer_B1.c: 71: } else {
 15422  0788  0008               	return
 15423  0789                     l6693:	
 15424                           
 15425                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15426  0789  0878               	movf	_Buz,w
 15427  078A  0086               	movwf	6
 15428  078B  3001               	movlw	1	; select bank2/3
 15429  078C  0087               	movwf	7
 15430  078D  1681               	bsf	1,5
 15431                           
 15432                           ;Buzzer_B1.c: 74: RB3 = 1;
 15433  078E  158D               	bsf	13,3	;volatile
 15434                           
 15435                           ;Buzzer_B1.c: 75: }
 15436                           ;Buzzer_B1.c: 76: } else {
 15437  078F  0008               	return
 15438  0790                     l6697:	
 15439                           
 15440                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15441  0790  0878               	movf	_Buz,w
 15442  0791  0086               	movwf	6
 15443  0792  3001               	movlw	1	; select bank2/3
 15444  0793  0087               	movwf	7
 15445  0794  1281               	bcf	1,5
 15446                           
 15447                           ;Buzzer_B1.c: 79: RB3 = 0;
 15448  0795  118D               	bcf	13,3	;volatile
 15449                           
 15450                           ;Buzzer_B1.c: 81: Buz->Count--;
 15451  0796  0878               	movf	_Buz,w
 15452  0797  3E03               	addlw	3
 15453  0798  0086               	movwf	6
 15454  0799  3001               	movlw	1	; select bank2/3
 15455  079A  0087               	movwf	7
 15456  079B  3001               	movlw	1
 15457  079C  0281               	subwf	1,f
 15458  079D  0008               	return
 15459  079E                     __end_of_Buzzer_Main:	
 15460                           
 15461                           	psect	text105
 15462  1F36                     __ptext105:	
 15463 ;; *************** function _Buzzer_Initialization *****************
 15464 ;; Defined at:
 15465 ;;		line 11 in file "../src/Buzzer_B1.c"
 15466 ;; Parameters:    Size  Location     Type
 15467 ;;		None
 15468 ;; Auto vars:     Size  Location     Type
 15469 ;;		None
 15470 ;; Return value:  Size  Location     Type
 15471 ;;		None               void
 15472 ;; Registers used:
 15473 ;;		wreg, fsr1l, fsr1h
 15474 ;; Tracked objects:
 15475 ;;		On entry : 0/0
 15476 ;;		On exit  : 0/0
 15477 ;;		Unchanged: 0/0
 15478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;Total ram usage:        1 bytes
 15484 ;; Hardware stack levels used:    1
 15485 ;; Hardware stack levels required when called:    5
 15486 ;; This function calls:
 15487 ;;		Nothing
 15488 ;; This function is called by:
 15489 ;;		_main
 15490 ;; This function uses a non-reentrant model
 15491 ;;
 15492                           
 15493                           
 15494                           ;psect for function _Buzzer_Initialization
 15495  1F36                     _Buzzer_Initialization:	
 15496                           
 15497                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15498                           
 15499                           ;incstack = 0
 15500                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15501  1F36  303C               	movlw	_Buz1& (0+255)
 15502  1F37  0020               	movlb	0	; select bank0
 15503  1F38  00A0               	movwf	??_Buzzer_Initialization
 15504  1F39  0820               	movf	??_Buzzer_Initialization,w
 15505  1F3A  00F8               	movwf	_Buz
 15506                           
 15507                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15508  1F3B  0878               	movf	_Buz,w
 15509  1F3C  0086               	movwf	6
 15510  1F3D  3001               	movlw	1	; select bank2/3
 15511  1F3E  0087               	movwf	7
 15512  1F3F  1401               	bsf	1,0
 15513  1F40  0008               	return
 15514  1F41                     __end_of_Buzzer_Initialization:	
 15515                           
 15516                           	psect	intentry
 15517  0004                     __pintentry:	
 15518 ;; *************** function _ISR *****************
 15519 ;; Defined at:
 15520 ;;		line 109 in file "../src/MCU_B1.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;		None
 15523 ;; Auto vars:     Size  Location     Type
 15524 ;;		None
 15525 ;; Return value:  Size  Location     Type
 15526 ;;		None               void
 15527 ;; Registers used:
 15528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15529 ;; Tracked objects:
 15530 ;;		On entry : 0/0
 15531 ;;		On exit  : 0/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;Total ram usage:        1 bytes
 15539 ;; Hardware stack levels used:    1
 15540 ;; Hardware stack levels required when called:    4
 15541 ;; This function calls:
 15542 ;;		_INT_ISR
 15543 ;;		_IOC_ISR
 15544 ;;		_TMR0_ISR
 15545 ;; This function is called by:
 15546 ;;		Interrupt level 1
 15547 ;; This function uses a non-reentrant model
 15548 ;;
 15549                           
 15550  0004                     _ISR:	
 15551                           
 15552                           ;incstack = 0
 15553                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15554  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15555  0005  3180               	pagesel	$
 15556  0006  0020               	movlb	0	; select bank0
 15557  0007  087F               	movf	127,w
 15558  0008  00F7               	movwf	??_ISR
 15559                           
 15560                           ;MCU_B1.c: 111: IOC_ISR();
 15561  0009  3190  20D9  3180   	fcall	_IOC_ISR
 15562                           
 15563                           ;MCU_B1.c: 113: TMR0_ISR();
 15564  000C  3194  24DC  3180   	fcall	_TMR0_ISR
 15565                           
 15566                           ;MCU_B1.c: 115: ;;
 15567                           ;MCU_B1.c: 119: INT_ISR();
 15568  000F  319F  2757         	fcall	_INT_ISR
 15569  0011  0877               	movf	??_ISR,w
 15570  0012  0020               	movlb	0	; select bank0
 15571  0013  00FF               	movwf	127
 15572  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15573  0015  0009               	retfie
 15574  0016                     __end_of_ISR:	
 15575                           
 15576                           	psect	text107
 15577  14DC                     __ptext107:	
 15578 ;; *************** function _TMR0_ISR *****************
 15579 ;; Defined at:
 15580 ;;		line 137 in file "../src/MCU_B1.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;		None
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;		None
 15585 ;; Return value:  Size  Location     Type
 15586 ;;		None               void
 15587 ;; Registers used:
 15588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;Total ram usage:        0 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; Hardware stack levels required when called:    2
 15601 ;; This function calls:
 15602 ;;		_Buz_Counter
 15603 ;;		_setDimmerLights_IntrControl
 15604 ;; This function is called by:
 15605 ;;		_ISR
 15606 ;; This function uses a non-reentrant model
 15607 ;;
 15608                           
 15609                           
 15610                           ;psect for function _TMR0_ISR
 15611  14DC                     _TMR0_ISR:	
 15612                           
 15613                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15614                           
 15615                           ;incstack = 0
 15616                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15617  14DC  1E8B               	btfss	11,5	;volatile
 15618  14DD  0008               	return
 15619  14DE  1D0B               	btfss	11,2	;volatile
 15620  14DF  0008               	return
 15621                           
 15622                           ;MCU_B1.c: 139: TMR0 = (256-90);
 15623  14E0  30A6               	movlw	166
 15624  14E1  0020               	movlb	0	; select bank0
 15625  14E2  0095               	movwf	21	;volatile
 15626                           
 15627                           ;MCU_B1.c: 140: TMR0IF = 0;
 15628  14E3  110B               	bcf	11,2	;volatile
 15629                           
 15630                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15631  14E4  3001               	movlw	1
 15632  14E5  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15633                           
 15634                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15635  14E8  3002               	movlw	2
 15636  14E9  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15637                           
 15638                           ;MCU_B1.c: 161: Timer0->Count++;
 15639  14EC  0021               	movlb	1	; select bank1
 15640  14ED  0A67               	incf	_Timer0^(0+128),w
 15641  14EE  0086               	movwf	6
 15642  14EF  3001               	movlw	1	; select bank2/3
 15643  14F0  0087               	movwf	7
 15644  14F1  3001               	movlw	1
 15645  14F2  0781               	addwf	1,f
 15646  14F3  3141               	addfsr 1,1
 15647  14F4  1803               	skipnc
 15648  14F5  0A81               	incf	1,f
 15649                           
 15650                           ;MCU_B1.c: 162: if (Timer0->Count == 200) {
 15651  14F6  0A67               	incf	_Timer0^(0+128),w
 15652  14F7  0086               	movwf	6
 15653  14F8  3001               	movlw	1	; select bank2/3
 15654  14F9  0087               	movwf	7
 15655  14FA  3F40               	moviw [0]fsr1
 15656  14FB  3AC8               	xorlw	200
 15657  14FC  1D03               	skipz
 15658  14FD  2D00               	goto	u575_25
 15659  14FE  3F41               	moviw [1]fsr1
 15660  14FF  3A00               	xorlw	0
 15661  1500                     u575_25:	
 15662  1500  1D03               	skipz
 15663  1501  0008               	return
 15664                           
 15665                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15666  1502  0A67               	incf	_Timer0^(0+128),w
 15667  1503  0086               	movwf	6
 15668  1504  3001               	movlw	1	; select bank2/3
 15669  1505  0087               	movwf	7
 15670  1506  3000               	movlw	0
 15671  1507  3FC0               	movwi [0]fsr1
 15672  1508  3FC1               	movwi [1]fsr1
 15673                           
 15674                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15675  1509  0869               	movf	_myMain^(0+128),w
 15676  150A  0086               	movwf	6
 15677  150B  3001               	movlw	1	; select bank2/3
 15678  150C  0087               	movwf	7
 15679  150D  1481               	bsf	1,1
 15680                           
 15681                           ;MCU_B1.c: 167: Buz_Counter();
 15682  150E  3190  2079         	fcall	_Buz_Counter
 15683  1510  0008               	return
 15684  1511                     __end_of_TMR0_ISR:	
 15685                           
 15686                           	psect	text108
 15687  004C                     __ptext108:	
 15688 ;; *************** function _setDimmerLights_IntrControl *****************
 15689 ;; Defined at:
 15690 ;;		line 28 in file "../src/Dimmer_B1.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;  lights          1    wreg     unsigned char 
 15693 ;; Auto vars:     Size  Location     Type
 15694 ;;  lights          1    6[COMMON] unsigned char 
 15695 ;; Return value:  Size  Location     Type
 15696 ;;		None               void
 15697 ;; Registers used:
 15698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15699 ;; Tracked objects:
 15700 ;;		On entry : 0/0
 15701 ;;		On exit  : 0/0
 15702 ;;		Unchanged: 0/0
 15703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;Total ram usage:        5 bytes
 15709 ;; Hardware stack levels used:    1
 15710 ;; Hardware stack levels required when called:    1
 15711 ;; This function calls:
 15712 ;;		_DimmerIntrPointSelect
 15713 ;; This function is called by:
 15714 ;;		_TMR0_ISR
 15715 ;; This function uses a non-reentrant model
 15716 ;;
 15717                           
 15718                           
 15719                           ;psect for function _setDimmerLights_IntrControl
 15720  004C                     _setDimmerLights_IntrControl:	
 15721                           
 15722                           ;incstack = 0
 15723                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15724                           ;setDimmerLights_IntrControl@lights stored from wreg
 15725  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15726                           
 15727                           ;Dimmer_B1.c: 30: DimmerIntrPointSelect(lights);
 15728  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15729  004E  3190  20FB  3180   	fcall	_DimmerIntrPointSelect
 15730                           
 15731                           ;Dimmer_B1.c: 31: if (DimmerLightsIntr->GO == 1) {
 15732  0051  087A               	movf	_DimmerLightsIntr,w
 15733  0052  0086               	movwf	6
 15734  0053  3001               	movlw	1	; select bank2/3
 15735  0054  0087               	movwf	7
 15736  0055  1C01               	btfss	1,0
 15737  0056  28D4               	goto	i1l6249
 15738                           
 15739                           ;Dimmer_B1.c: 32: DimmerLightsIntr->Count++;
 15740  0057  3001               	movlw	1
 15741  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15742  0059  087A               	movf	_DimmerLightsIntr,w
 15743  005A  3E03               	addlw	3
 15744  005B  0086               	movwf	6
 15745  005C  3001               	movlw	1	; select bank2/3
 15746  005D  0087               	movwf	7
 15747  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15748  005F  0781               	addwf	1,f
 15749                           
 15750                           ;Dimmer_B1.c: 33: if (DimmerLightsIntr->Count
 15751                           ;Dimmer_B1.c: 34: >= (DimmerLightsIntr->DimmingValue - Dimmer->Correction)) {
 15752  0060  0021               	movlb	1	; select bank1
 15753  0061  0839               	movf	_Dimmer^(0+128),w
 15754  0062  3E02               	addlw	2
 15755  0063  0086               	movwf	6
 15756  0064  0187               	clrf	7
 15757  0065  0801               	movf	1,w
 15758  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15759  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15760  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15761  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15762  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15763  006B  1903               	skipnz
 15764  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15765  006D  087A               	movf	_DimmerLightsIntr,w
 15766  006E  3E04               	addlw	4
 15767  006F  0086               	movwf	6
 15768  0070  3001               	movlw	1	; select bank2/3
 15769  0071  0087               	movwf	7
 15770  0072  0801               	movf	1,w
 15771  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15772  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15773  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15774  0076  1803               	skipnc
 15775  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15776  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15777  0079  087A               	movf	_DimmerLightsIntr,w
 15778  007A  3E03               	addlw	3
 15779  007B  0086               	movwf	6
 15780  007C  3001               	movlw	1	; select bank2/3
 15781  007D  0087               	movwf	7
 15782  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15783  007F  3A80               	xorlw	128
 15784  0080  3C80               	sublw	128
 15785  0081  1D03               	skipz
 15786  0082  2885               	goto	u493_25
 15787  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15788  0084  0201               	subwf	1,w
 15789  0085                     u493_25:	
 15790  0085  1C03               	skipc
 15791  0086  2988               	goto	i1l784
 15792                           
 15793                           ;Dimmer_B1.c: 35: DimmerLightsIntr->Count = 0;
 15794  0087  087A               	movf	_DimmerLightsIntr,w
 15795  0088  3E03               	addlw	3
 15796  0089  0086               	movwf	6
 15797  008A  3001               	movlw	1	; select bank2/3
 15798  008B  0087               	movwf	7
 15799  008C  0181               	clrf	1
 15800                           
 15801                           ;Dimmer_B1.c: 36: DimmerLightsIntr->GO = 0;
 15802  008D  087A               	movf	_DimmerLightsIntr,w
 15803  008E  0086               	movwf	6
 15804  008F  3001               	movlw	1	; select bank2/3
 15805  0090  0087               	movwf	7
 15806  0091  1001               	bcf	1,0
 15807                           
 15808                           ;Dimmer_B1.c: 37: DimmerLightsIntr->Flag = 1;
 15809  0092  087A               	movf	_DimmerLightsIntr,w
 15810  0093  3E08               	addlw	8
 15811  0094  0086               	movwf	6
 15812  0095  3001               	movlw	1	; select bank2/3
 15813  0096  0087               	movwf	7
 15814  0097  1401               	bsf	1,0
 15815                           
 15816                           ;Dimmer_B1.c: 38: if (DimmerLightsIntr->StatusFlag) {
 15817  0098  087A               	movf	_DimmerLightsIntr,w
 15818  0099  0086               	movwf	6
 15819  009A  3001               	movlw	1	; select bank2/3
 15820  009B  0087               	movwf	7
 15821  009C  1F01               	btfss	1,6
 15822  009D  2988               	goto	i1l784
 15823                           
 15824                           ;Dimmer_B1.c: 40: if (lights == 1) {
 15825  009E  0876               	movf	setDimmerLights_IntrControl@lights,w
 15826  009F  3A01               	xorlw	1
 15827  00A0  1D03               	skipz
 15828  00A1  28A4               	goto	i1l6231
 15829                           
 15830                           ;Dimmer_B1.c: 41: RA7 = 0;
 15831  00A2  0020               	movlb	0	; select bank0
 15832  00A3  138C               	bcf	12,7	;volatile
 15833  00A4                     i1l6231:	
 15834                           ;Dimmer_B1.c: 42: ;;
 15835                           
 15836                           
 15837                           ;Dimmer_B1.c: 43: }
 15838                           ;Dimmer_B1.c: 46: if (lights == 2) {
 15839  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15840  00A5  3A02               	xorlw	2
 15841  00A6  1D03               	skipz
 15842  00A7  28AA               	goto	i1l6235
 15843                           
 15844                           ;Dimmer_B1.c: 47: RB4 = 0;
 15845  00A8  0020               	movlb	0	; select bank0
 15846  00A9  120D               	bcf	13,4	;volatile
 15847  00AA                     i1l6235:	
 15848                           
 15849                           ;Dimmer_B1.c: 48: }
 15850                           ;Dimmer_B1.c: 50: if (DimmerLightsIntr->MosfetClose) {
 15851  00AA  087A               	movf	_DimmerLightsIntr,w
 15852  00AB  3E08               	addlw	8
 15853  00AC  0086               	movwf	6
 15854  00AD  3001               	movlw	1	; select bank2/3
 15855  00AE  0087               	movwf	7
 15856  00AF  1F81               	btfss	1,7
 15857  00B0  2988               	goto	i1l784
 15858                           
 15859                           ;Dimmer_B1.c: 51: DimmerLightsIntr->MosfetClose = 0;
 15860  00B1  087A               	movf	_DimmerLightsIntr,w
 15861  00B2  3E08               	addlw	8
 15862  00B3  0086               	movwf	6
 15863  00B4  3001               	movlw	1	; select bank2/3
 15864  00B5  0087               	movwf	7
 15865  00B6  1381               	bcf	1,7
 15866                           
 15867                           ;Dimmer_B1.c: 52: DimmerLightsIntr->StatusFlag = 0;
 15868  00B7  087A               	movf	_DimmerLightsIntr,w
 15869  00B8  0086               	movwf	6
 15870  00B9  3001               	movlw	1	; select bank2/3
 15871  00BA  0087               	movwf	7
 15872  00BB  1301               	bcf	1,6
 15873                           
 15874                           ;Dimmer_B1.c: 53: DimmerLightsIntr->Clear = 1;
 15875  00BC  087A               	movf	_DimmerLightsIntr,w
 15876  00BD  3E09               	addlw	9
 15877  00BE  0086               	movwf	6
 15878  00BF  3001               	movlw	1	; select bank2/3
 15879  00C0  0087               	movwf	7
 15880  00C1  1501               	bsf	1,2
 15881                           
 15882                           ;Dimmer_B1.c: 55: if (lights == 1) {
 15883  00C2  0876               	movf	setDimmerLights_IntrControl@lights,w
 15884  00C3  3A01               	xorlw	1
 15885  00C4  1D03               	skipz
 15886  00C5  28C8               	goto	i1l6243
 15887                           
 15888                           ;Dimmer_B1.c: 56: RA3 = 0;
 15889  00C6  0020               	movlb	0	; select bank0
 15890  00C7  118C               	bcf	12,3	;volatile
 15891  00C8                     i1l6243:	
 15892                           
 15893                           ;Dimmer_B1.c: 58: }
 15894                           ;Dimmer_B1.c: 61: if (lights == 2) {
 15895  00C8  0876               	movf	setDimmerLights_IntrControl@lights,w
 15896  00C9  3A02               	xorlw	2
 15897  00CA  1D03               	skipz
 15898  00CB  28CE               	goto	i1l6247
 15899                           
 15900                           ;Dimmer_B1.c: 62: RC7 = 0;
 15901  00CC  0020               	movlb	0	; select bank0
 15902  00CD  138E               	bcf	14,7	;volatile
 15903  00CE                     i1l6247:	
 15904                           
 15905                           ;Dimmer_B1.c: 63: }
 15906                           ;Dimmer_B1.c: 65: Dimmer->Detect = 1;
 15907  00CE  0021               	movlb	1	; select bank1
 15908  00CF  0839               	movf	_Dimmer^(0+128),w
 15909  00D0  0086               	movwf	6
 15910  00D1  0187               	clrf	7
 15911  00D2  1401               	bsf	1,0
 15912                           
 15913                           ;Dimmer_B1.c: 67: }
 15914                           ;Dimmer_B1.c: 68: }
 15915                           ;Dimmer_B1.c: 69: }
 15916                           ;Dimmer_B1.c: 70: } else {
 15917                           
 15918                           ;Dimmer_B1.c: 66: ;;
 15919  00D3  2988               	goto	i1l784
 15920  00D4                     i1l6249:	
 15921                           
 15922                           ;Dimmer_B1.c: 71: if (DimmerLightsIntr->Flag == 1) {
 15923  00D4  087A               	movf	_DimmerLightsIntr,w
 15924  00D5  3E08               	addlw	8
 15925  00D6  0086               	movwf	6
 15926  00D7  3001               	movlw	1	; select bank2/3
 15927  00D8  0087               	movwf	7
 15928  00D9  1C01               	btfss	1,0
 15929  00DA  2988               	goto	i1l784
 15930                           
 15931                           ;Dimmer_B1.c: 72: DimmerLightsIntr->Flag = 0;
 15932  00DB  087A               	movf	_DimmerLightsIntr,w
 15933  00DC  3E08               	addlw	8
 15934  00DD  0086               	movwf	6
 15935  00DE  3001               	movlw	1	; select bank2/3
 15936  00DF  0087               	movwf	7
 15937  00E0  1001               	bcf	1,0
 15938                           
 15939                           ;Dimmer_B1.c: 73: if (DimmerLightsIntr->Signal) {
 15940  00E1  087A               	movf	_DimmerLightsIntr,w
 15941  00E2  0086               	movwf	6
 15942  00E3  3001               	movlw	1	; select bank2/3
 15943  00E4  0087               	movwf	7
 15944  00E5  1C81               	btfss	1,1
 15945  00E6  2988               	goto	i1l784
 15946                           
 15947                           ;Dimmer_B1.c: 74: DimmerLightsIntr->DimmingTime++;
 15948  00E7  3001               	movlw	1
 15949  00E8  00F2               	movwf	??_setDimmerLights_IntrControl
 15950  00E9  0A7A               	incf	_DimmerLightsIntr,w
 15951  00EA  0086               	movwf	6
 15952  00EB  3001               	movlw	1	; select bank2/3
 15953  00EC  0087               	movwf	7
 15954  00ED  0872               	movf	??_setDimmerLights_IntrControl,w
 15955  00EE  0781               	addwf	1,f
 15956                           
 15957                           ;Dimmer_B1.c: 75: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeValu
      +                          e) {
 15958  00EF  0A7A               	incf	_DimmerLightsIntr,w
 15959  00F0  0086               	movwf	6
 15960  00F1  3001               	movlw	1	; select bank2/3
 15961  00F2  0087               	movwf	7
 15962  00F3  087A               	movf	_DimmerLightsIntr,w
 15963  00F4  3E02               	addlw	2
 15964  00F5  0084               	movwf	4
 15965  00F6  3001               	movlw	1	; select bank2/3
 15966  00F7  0085               	movwf	5
 15967  00F8  0800               	movf	0,w
 15968  00F9  0201               	subwf	1,w
 15969  00FA  1C03               	skipc
 15970  00FB  2988               	goto	i1l784
 15971                           
 15972                           ;Dimmer_B1.c: 76: DimmerLightsIntr->DimmingTime = 0;
 15973  00FC  0A7A               	incf	_DimmerLightsIntr,w
 15974  00FD  0086               	movwf	6
 15975  00FE  3001               	movlw	1	; select bank2/3
 15976  00FF  0087               	movwf	7
 15977  0100  0181               	clrf	1
 15978                           
 15979                           ;Dimmer_B1.c: 77: if (DimmerLightsIntr->AdjFlag) {
 15980  0101  087A               	movf	_DimmerLightsIntr,w
 15981  0102  0086               	movwf	6
 15982  0103  3001               	movlw	1	; select bank2/3
 15983  0104  0087               	movwf	7
 15984  0105  1D81               	btfss	1,3
 15985  0106  293D               	goto	i1l6275
 15986                           
 15987                           ;Dimmer_B1.c: 78: if (DimmerLightsIntr->AdjStatus == 0) {
 15988  0107  087A               	movf	_DimmerLightsIntr,w
 15989  0108  0086               	movwf	6
 15990  0109  3001               	movlw	1	; select bank2/3
 15991  010A  0087               	movwf	7
 15992  010B  1A01               	btfsc	1,4
 15993  010C  2926               	goto	i1l6269
 15994                           
 15995                           ;Dimmer_B1.c: 79: if (DimmerLightsIntr->DimmingValue < ((char)(65*1.5))) {
 15996  010D  087A               	movf	_DimmerLightsIntr,w
 15997  010E  3E04               	addlw	4
 15998  010F  0086               	movwf	6
 15999  0110  3001               	movlw	1	; select bank2/3
 16000  0111  0087               	movwf	7
 16001  0112  3061               	movlw	97
 16002  0113  0201               	subwf	1,w
 16003  0114  1803               	skipnc
 16004  0115  2920               	goto	i1l6267
 16005                           
 16006                           ;Dimmer_B1.c: 80: DimmerLightsIntr->DimmingValue++;
 16007  0116  3001               	movlw	1
 16008  0117  00F2               	movwf	??_setDimmerLights_IntrControl
 16009  0118  087A               	movf	_DimmerLightsIntr,w
 16010  0119  3E04               	addlw	4
 16011  011A  0086               	movwf	6
 16012  011B  3001               	movlw	1	; select bank2/3
 16013  011C  0087               	movwf	7
 16014  011D  0872               	movf	??_setDimmerLights_IntrControl,w
 16015  011E  0781               	addwf	1,f
 16016                           
 16017                           ;Dimmer_B1.c: 81: } else {
 16018  011F  2988               	goto	i1l784
 16019  0120                     i1l6267:	
 16020                           
 16021                           ;Dimmer_B1.c: 82: DimmerLightsIntr->AdjStatus = 1;
 16022  0120  087A               	movf	_DimmerLightsIntr,w
 16023  0121  0086               	movwf	6
 16024  0122  3001               	movlw	1	; select bank2/3
 16025  0123  0087               	movwf	7
 16026  0124  1601               	bsf	1,4
 16027                           
 16028                           ;Dimmer_B1.c: 83: }
 16029                           ;Dimmer_B1.c: 84: } else {
 16030  0125  2988               	goto	i1l784
 16031  0126                     i1l6269:	
 16032                           
 16033                           ;Dimmer_B1.c: 85: if (DimmerLightsIntr->DimmingValue > ((char)(20*1.5))) {
 16034  0126  087A               	movf	_DimmerLightsIntr,w
 16035  0127  3E04               	addlw	4
 16036  0128  0086               	movwf	6
 16037  0129  3001               	movlw	1	; select bank2/3
 16038  012A  0087               	movwf	7
 16039  012B  301F               	movlw	31
 16040  012C  0201               	subwf	1,w
 16041  012D  1C03               	skipc
 16042  012E  2937               	goto	i1l6273
 16043                           
 16044                           ;Dimmer_B1.c: 86: DimmerLightsIntr->DimmingValue--;
 16045  012F  087A               	movf	_DimmerLightsIntr,w
 16046  0130  3E04               	addlw	4
 16047  0131  0086               	movwf	6
 16048  0132  3001               	movlw	1	; select bank2/3
 16049  0133  0087               	movwf	7
 16050  0134  3001               	movlw	1
 16051  0135  0281               	subwf	1,f
 16052                           
 16053                           ;Dimmer_B1.c: 87: } else {
 16054  0136  2988               	goto	i1l784
 16055  0137                     i1l6273:	
 16056                           
 16057                           ;Dimmer_B1.c: 88: DimmerLightsIntr->AdjStatus = 0;
 16058  0137  087A               	movf	_DimmerLightsIntr,w
 16059  0138  0086               	movwf	6
 16060  0139  3001               	movlw	1	; select bank2/3
 16061  013A  0087               	movwf	7
 16062  013B  1201               	bcf	1,4
 16063                           
 16064                           ;Dimmer_B1.c: 89: }
 16065                           ;Dimmer_B1.c: 90: }
 16066                           ;Dimmer_B1.c: 91: } else if (DimmerLightsIntr->AdjRF) {
 16067  013C  2988               	goto	i1l784
 16068  013D                     i1l6275:	
 16069  013D  087A               	movf	_DimmerLightsIntr,w
 16070  013E  0086               	movwf	6
 16071  013F  3001               	movlw	1	; select bank2/3
 16072  0140  0087               	movwf	7
 16073  0141  1D01               	btfss	1,2
 16074  0142  2983               	goto	i1l6289
 16075                           
 16076                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 16077  0143  087A               	movf	_DimmerLightsIntr,w
 16078  0144  3E04               	addlw	4
 16079  0145  0086               	movwf	6
 16080  0146  3001               	movlw	1	; select bank2/3
 16081  0147  0087               	movwf	7
 16082  0148  087A               	movf	_DimmerLightsIntr,w
 16083  0149  3E05               	addlw	5
 16084  014A  0084               	movwf	4
 16085  014B  3001               	movlw	1	; select bank2/3
 16086  014C  0085               	movwf	5
 16087  014D  0800               	movf	0,w
 16088  014E  0201               	subwf	1,w
 16089  014F  1803               	skipnc
 16090  0150  295B               	goto	i1l6281
 16091                           
 16092                           ;Dimmer_B1.c: 93: DimmerLightsIntr->DimmingValue++;
 16093  0151  3001               	movlw	1
 16094  0152  00F2               	movwf	??_setDimmerLights_IntrControl
 16095  0153  087A               	movf	_DimmerLightsIntr,w
 16096  0154  3E04               	addlw	4
 16097  0155  0086               	movwf	6
 16098  0156  3001               	movlw	1	; select bank2/3
 16099  0157  0087               	movwf	7
 16100  0158  0872               	movf	??_setDimmerLights_IntrControl,w
 16101  0159  0781               	addwf	1,f
 16102                           
 16103                           ;Dimmer_B1.c: 94: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumVa
      +                          lue) {
 16104  015A  2970               	goto	i1l6285
 16105  015B                     i1l6281:	
 16106  015B  087A               	movf	_DimmerLightsIntr,w
 16107  015C  3E05               	addlw	5
 16108  015D  0086               	movwf	6
 16109  015E  3001               	movlw	1	; select bank2/3
 16110  015F  0087               	movwf	7
 16111  0160  087A               	movf	_DimmerLightsIntr,w
 16112  0161  3E04               	addlw	4
 16113  0162  0084               	movwf	4
 16114  0163  3001               	movlw	1	; select bank2/3
 16115  0164  0085               	movwf	5
 16116  0165  0800               	movf	0,w
 16117  0166  0201               	subwf	1,w
 16118  0167  1803               	skipnc
 16119  0168  2970               	goto	i1l6285
 16120                           
 16121                           ;Dimmer_B1.c: 95: DimmerLightsIntr->DimmingValue--;
 16122  0169  087A               	movf	_DimmerLightsIntr,w
 16123  016A  3E04               	addlw	4
 16124  016B  0086               	movwf	6
 16125  016C  3001               	movlw	1	; select bank2/3
 16126  016D  0087               	movwf	7
 16127  016E  3001               	movlw	1
 16128  016F  0281               	subwf	1,f
 16129  0170                     i1l6285:	
 16130                           
 16131                           ;Dimmer_B1.c: 96: }
 16132                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) {
 16133  0170  087A               	movf	_DimmerLightsIntr,w
 16134  0171  3E05               	addlw	5
 16135  0172  0086               	movwf	6
 16136  0173  3001               	movlw	1	; select bank2/3
 16137  0174  0087               	movwf	7
 16138  0175  087A               	movf	_DimmerLightsIntr,w
 16139  0176  3E04               	addlw	4
 16140  0177  0084               	movwf	4
 16141  0178  3001               	movlw	1	; select bank2/3
 16142  0179  0085               	movwf	5
 16143  017A  0800               	movf	0,w
 16144  017B  0601               	xorwf	1,w
 16145  017C  1D03               	skipz
 16146  017D  2988               	goto	i1l784
 16147                           
 16148                           ;Dimmer_B1.c: 98: DimmerLightsIntr->AdjRF = 0;
 16149  017E  087A               	movf	_DimmerLightsIntr,w
 16150  017F  0086               	movwf	6
 16151  0180  3001               	movlw	1	; select bank2/3
 16152  0181  0087               	movwf	7
 16153  0182  1101               	bcf	1,2
 16154  0183                     i1l6289:	
 16155                           ;Dimmer_B1.c: 100: }
 16156                           ;Dimmer_B1.c: 101: } else {
 16157                           
 16158                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Signal = 0;
 16159                           
 16160                           
 16161                           ;Dimmer_B1.c: 102: DimmerLightsIntr->Signal = 0;
 16162  0183  087A               	movf	_DimmerLightsIntr,w
 16163  0184  0086               	movwf	6
 16164  0185  3001               	movlw	1	; select bank2/3
 16165  0186  0087               	movwf	7
 16166  0187  1081               	bcf	1,1
 16167  0188                     i1l784:	
 16168                           
 16169                           ;Dimmer_B1.c: 103: }
 16170                           ;Dimmer_B1.c: 104: }
 16171                           ;Dimmer_B1.c: 105: }
 16172                           ;Dimmer_B1.c: 106: }
 16173                           ;Dimmer_B1.c: 107: }
 16174                           ;Dimmer_B1.c: 108: if (DimmerLightsIntr->MosfetSignal == 1) {
 16175  0188  087A               	movf	_DimmerLightsIntr,w
 16176  0189  3E09               	addlw	9
 16177  018A  0086               	movwf	6
 16178  018B  3001               	movlw	1	; select bank2/3
 16179  018C  0087               	movwf	7
 16180  018D  1D81               	btfss	1,3
 16181  018E  0008               	return
 16182                           
 16183                           ;Dimmer_B1.c: 109: DimmerLightsIntr->MosfetSignalCount++;
 16184  018F  3001               	movlw	1
 16185  0190  00F2               	movwf	??_setDimmerLights_IntrControl
 16186  0191  087A               	movf	_DimmerLightsIntr,w
 16187  0192  3E0B               	addlw	11
 16188  0193  0086               	movwf	6
 16189  0194  3001               	movlw	1	; select bank2/3
 16190  0195  0087               	movwf	7
 16191  0196  0872               	movf	??_setDimmerLights_IntrControl,w
 16192  0197  0781               	addwf	1,f
 16193                           
 16194                           ;Dimmer_B1.c: 110: if (DimmerLightsIntr->MosfetSignalCount == 110) {
 16195  0198  087A               	movf	_DimmerLightsIntr,w
 16196  0199  3E0B               	addlw	11
 16197  019A  0086               	movwf	6
 16198  019B  3001               	movlw	1	; select bank2/3
 16199  019C  0087               	movwf	7
 16200  019D  0801               	movf	1,w
 16201  019E  3A6E               	xorlw	110
 16202  019F  1D03               	skipz
 16203  01A0  0008               	return
 16204                           
 16205                           ;Dimmer_B1.c: 111: DimmerLightsIntr->MosfetSignalCount = 0;
 16206  01A1  087A               	movf	_DimmerLightsIntr,w
 16207  01A2  3E0B               	addlw	11
 16208  01A3  0086               	movwf	6
 16209  01A4  3001               	movlw	1	; select bank2/3
 16210  01A5  0087               	movwf	7
 16211  01A6  0181               	clrf	1
 16212                           
 16213                           ;Dimmer_B1.c: 112: DimmerLightsIntr->MosfetSignal = 0;
 16214  01A7  087A               	movf	_DimmerLightsIntr,w
 16215  01A8  3E09               	addlw	9
 16216  01A9  0086               	movwf	6
 16217  01AA  3001               	movlw	1	; select bank2/3
 16218  01AB  0087               	movwf	7
 16219  01AC  1181               	bcf	1,3
 16220                           
 16221                           ;Dimmer_B1.c: 113: RB5 = 0;
 16222  01AD  0020               	movlb	0	; select bank0
 16223  01AE  128D               	bcf	13,5	;volatile
 16224  01AF  0008               	return
 16225  01B0                     __end_of_setDimmerLights_IntrControl:	
 16226                           
 16227                           	psect	text109
 16228  1079                     __ptext109:	
 16229 ;; *************** function _Buz_Counter *****************
 16230 ;; Defined at:
 16231 ;;		line 23 in file "../src/Buzzer_B1.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;		None
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;		None
 16236 ;; Return value:  Size  Location     Type
 16237 ;;		None               void
 16238 ;; Registers used:
 16239 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16240 ;; Tracked objects:
 16241 ;;		On entry : 0/0
 16242 ;;		On exit  : 0/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;Total ram usage:        0 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; This function calls:
 16252 ;;		Nothing
 16253 ;; This function is called by:
 16254 ;;		_TMR0_ISR
 16255 ;; This function uses a non-reentrant model
 16256 ;;
 16257                           
 16258                           
 16259                           ;psect for function _Buz_Counter
 16260  1079                     _Buz_Counter:	
 16261                           
 16262                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16263                           
 16264                           ;incstack = 0
 16265                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16266  1079  0878               	movf	_Buz,w
 16267  107A  0086               	movwf	6
 16268  107B  3001               	movlw	1	; select bank2/3
 16269  107C  0087               	movwf	7
 16270  107D  1C81               	btfss	1,1
 16271  107E  0008               	return
 16272                           
 16273                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16274  107F  0A78               	incf	_Buz,w
 16275  1080  0086               	movwf	6
 16276  1081  3001               	movlw	1	; select bank2/3
 16277  1082  0087               	movwf	7
 16278  1083  3001               	movlw	1
 16279  1084  0781               	addwf	1,f
 16280  1085  3141               	addfsr 1,1
 16281  1086  1803               	skipnc
 16282  1087  0A81               	incf	1,f
 16283  1088  0008               	return
 16284  1089                     __end_of_Buz_Counter:	
 16285                           
 16286                           	psect	text110
 16287  10D9                     __ptext110:	
 16288 ;; *************** function _IOC_ISR *****************
 16289 ;; Defined at:
 16290 ;;		line 295 in file "../src/MCU_B1.c"
 16291 ;; Parameters:    Size  Location     Type
 16292 ;;		None
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;		None
 16295 ;; Return value:  Size  Location     Type
 16296 ;;		None               void
 16297 ;; Registers used:
 16298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : 0/0
 16301 ;;		On exit  : 0/0
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16308 ;;Total ram usage:        0 bytes
 16309 ;; Hardware stack levels used:    1
 16310 ;; Hardware stack levels required when called:    3
 16311 ;; This function calls:
 16312 ;;		_setDimmerReClock
 16313 ;; This function is called by:
 16314 ;;		_ISR
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           
 16319                           ;psect for function _IOC_ISR
 16320  10D9                     _IOC_ISR:	
 16321                           
 16322                           ;MCU_B1.c: 296: if (IOCIE == 1 && IOCBF2 == 1) {
 16323                           
 16324                           ;incstack = 0
 16325                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16326  10D9  1D8B               	btfss	11,3	;volatile
 16327  10DA  0008               	return
 16328  10DB  0027               	movlb	7	; select bank7
 16329  10DC  1D16               	btfss	22,2	;volatile
 16330  10DD  0008               	return
 16331                           
 16332                           ;MCU_B1.c: 297: IOCBF2 = 0;
 16333  10DE  1116               	bcf	22,2	;volatile
 16334                           
 16335                           ;MCU_B1.c: 298: IOCIF = 0;
 16336  10DF  100B               	bcf	11,0	;volatile
 16337                           
 16338                           ;MCU_B1.c: 299: if (myMain->PowerON == 1) {
 16339  10E0  0021               	movlb	1	; select bank1
 16340  10E1  0869               	movf	_myMain^(0+128),w
 16341  10E2  0086               	movwf	6
 16342  10E3  3001               	movlw	1	; select bank2/3
 16343  10E4  0087               	movwf	7
 16344  10E5  1C01               	btfss	1,0
 16345  10E6  0008               	return
 16346                           
 16347                           ;MCU_B1.c: 301: setDimmerReClock();
 16348  10E7  319F  272B         	fcall	_setDimmerReClock
 16349  10E9  0008               	return
 16350  10EA                     __end_of_IOC_ISR:	
 16351                           
 16352                           	psect	text111
 16353  1F2B                     __ptext111:	
 16354 ;; *************** function _setDimmerReClock *****************
 16355 ;; Defined at:
 16356 ;;		line 175 in file "../src/MCU_B1.c"
 16357 ;; Parameters:    Size  Location     Type
 16358 ;;		None
 16359 ;; Auto vars:     Size  Location     Type
 16360 ;;		None
 16361 ;; Return value:  Size  Location     Type
 16362 ;;		None               void
 16363 ;; Registers used:
 16364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16365 ;; Tracked objects:
 16366 ;;		On entry : 0/0
 16367 ;;		On exit  : 0/0
 16368 ;;		Unchanged: 0/0
 16369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16374 ;;Total ram usage:        0 bytes
 16375 ;; Hardware stack levels used:    1
 16376 ;; Hardware stack levels required when called:    2
 16377 ;; This function calls:
 16378 ;;		_setDimmerLights_IntrGO
 16379 ;; This function is called by:
 16380 ;;		_IOC_ISR
 16381 ;; This function uses a non-reentrant model
 16382 ;;
 16383                           
 16384                           
 16385                           ;psect for function _setDimmerReClock
 16386  1F2B                     _setDimmerReClock:	
 16387                           
 16388                           ;MCU_B1.c: 176: TMR0 = 255;
 16389                           
 16390                           ;incstack = 0
 16391                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16392  1F2B  30FF               	movlw	255
 16393  1F2C  0020               	movlb	0	; select bank0
 16394  1F2D  0095               	movwf	21	;volatile
 16395                           
 16396                           ;MCU_B1.c: 181: setDimmerLights_IntrGO(1);
 16397  1F2E  3001               	movlw	1
 16398  1F2F  3193  23CD  319F   	fcall	_setDimmerLights_IntrGO
 16399                           
 16400                           ;MCU_B1.c: 185: setDimmerLights_IntrGO(2);
 16401  1F32  3002               	movlw	2
 16402  1F33  3193  23CD         	fcall	_setDimmerLights_IntrGO
 16403  1F35  0008               	return
 16404  1F36                     __end_of_setDimmerReClock:	
 16405                           
 16406                           	psect	text112
 16407  13CD                     __ptext112:	
 16408 ;; *************** function _setDimmerLights_IntrGO *****************
 16409 ;; Defined at:
 16410 ;;		line 119 in file "../src/Dimmer_B1.c"
 16411 ;; Parameters:    Size  Location     Type
 16412 ;;  lights          1    wreg     unsigned char 
 16413 ;; Auto vars:     Size  Location     Type
 16414 ;;  lights          1    2[COMMON] unsigned char 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;		None               void
 16417 ;; Registers used:
 16418 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;Total ram usage:        1 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:    1
 16431 ;; This function calls:
 16432 ;;		_DimmerIntrPointSelect
 16433 ;; This function is called by:
 16434 ;;		_setDimmerReClock
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           
 16439                           ;psect for function _setDimmerLights_IntrGO
 16440  13CD                     _setDimmerLights_IntrGO:	
 16441                           
 16442                           ;incstack = 0
 16443                           ; Regs used in _setDimmerLights_IntrGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16444                           ;setDimmerLights_IntrGO@lights stored from wreg
 16445  13CD  00F2               	movwf	setDimmerLights_IntrGO@lights
 16446                           
 16447                           ;Dimmer_B1.c: 121: DimmerIntrPointSelect(lights);
 16448  13CE  0872               	movf	setDimmerLights_IntrGO@lights,w
 16449  13CF  3190  20FB  3193   	fcall	_DimmerIntrPointSelect
 16450                           
 16451                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->MosfetSignal == 0) {
 16452  13D2  087A               	movf	_DimmerLightsIntr,w
 16453  13D3  3E09               	addlw	9
 16454  13D4  0086               	movwf	6
 16455  13D5  3001               	movlw	1	; select bank2/3
 16456  13D6  0087               	movwf	7
 16457  13D7  1981               	btfsc	1,3
 16458  13D8  0008               	return
 16459                           
 16460                           ;Dimmer_B1.c: 129: DimmerLightsIntr->MosfetSignal = 1;
 16461  13D9  087A               	movf	_DimmerLightsIntr,w
 16462  13DA  3E09               	addlw	9
 16463  13DB  0086               	movwf	6
 16464  13DC  3001               	movlw	1	; select bank2/3
 16465  13DD  0087               	movwf	7
 16466  13DE  1581               	bsf	1,3
 16467                           
 16468                           ;Dimmer_B1.c: 130: RB5 = 1;
 16469  13DF  0020               	movlb	0	; select bank0
 16470  13E0  168D               	bsf	13,5	;volatile
 16471                           
 16472                           ;Dimmer_B1.c: 132: DimmerLightsIntr->GO = 1;
 16473  13E1  087A               	movf	_DimmerLightsIntr,w
 16474  13E2  0086               	movwf	6
 16475  13E3  3001               	movlw	1	; select bank2/3
 16476  13E4  0087               	movwf	7
 16477  13E5  1401               	bsf	1,0
 16478                           
 16479                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->StatusFlag == 1) {
 16480  13E6  087A               	movf	_DimmerLightsIntr,w
 16481  13E7  0086               	movwf	6
 16482  13E8  3001               	movlw	1	; select bank2/3
 16483  13E9  0087               	movwf	7
 16484  13EA  1F01               	btfss	1,6
 16485  13EB  0008               	return
 16486                           
 16487                           ;Dimmer_B1.c: 136: if (lights == 1) {
 16488  13EC  0872               	movf	setDimmerLights_IntrGO@lights,w
 16489  13ED  3A01               	xorlw	1
 16490  13EE  1903               	btfsc	3,2
 16491                           
 16492                           ;Dimmer_B1.c: 137: RA7 = 1;
 16493  13EF  178C               	bsf	12,7	;volatile
 16494                           
 16495                           ;Dimmer_B1.c: 140: }
 16496                           ;Dimmer_B1.c: 143: if (lights == 2) {
 16497                           
 16498                           ;Dimmer_B1.c: 138: ;;
 16499  13F0  0872               	movf	setDimmerLights_IntrGO@lights,w
 16500  13F1  3A02               	xorlw	2
 16501  13F2  1D03               	skipz
 16502  13F3  0008               	return
 16503                           
 16504                           ;Dimmer_B1.c: 144: RB4 = 1;
 16505  13F4  160D               	bsf	13,4	;volatile
 16506  13F5  0008               	return
 16507  13F6                     __end_of_setDimmerLights_IntrGO:	
 16508                           
 16509                           	psect	text113
 16510  10FB                     __ptext113:	
 16511 ;; *************** function _DimmerIntrPointSelect *****************
 16512 ;; Defined at:
 16513 ;;		line 7 in file "../src/Dimmer_B1.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;  lights          1    wreg     unsigned char 
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;  lights          1    1[COMMON] unsigned char 
 16518 ;; Return value:  Size  Location     Type
 16519 ;;		None               void
 16520 ;; Registers used:
 16521 ;;		wreg
 16522 ;; Tracked objects:
 16523 ;;		On entry : 0/0
 16524 ;;		On exit  : 0/0
 16525 ;;		Unchanged: 0/0
 16526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16531 ;;Total ram usage:        2 bytes
 16532 ;; Hardware stack levels used:    1
 16533 ;; This function calls:
 16534 ;;		Nothing
 16535 ;; This function is called by:
 16536 ;;		_setDimmerLights_IntrControl
 16537 ;;		_setDimmerLights_IntrGO
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           
 16542                           ;psect for function _DimmerIntrPointSelect
 16543  10FB                     _DimmerIntrPointSelect:	
 16544                           
 16545                           ;incstack = 0
 16546                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16547                           ;DimmerIntrPointSelect@lights stored from wreg
 16548  10FB  00F1               	movwf	DimmerIntrPointSelect@lights
 16549                           
 16550                           ;Dimmer_B1.c: 9: if (lights == 1) {
 16551  10FC  0871               	movf	DimmerIntrPointSelect@lights,w
 16552  10FD  3A01               	xorlw	1
 16553  10FE  1D03               	skipz
 16554  10FF  2904               	goto	i1l771
 16555                           
 16556                           ;Dimmer_B1.c: 10: DimmerLightsIntr = &DimmerLights1;
 16557  1100  3020               	movlw	_DimmerLights1& (0+255)
 16558  1101  00F0               	movwf	??_DimmerIntrPointSelect
 16559  1102  0870               	movf	??_DimmerIntrPointSelect,w
 16560  1103  00FA               	movwf	_DimmerLightsIntr
 16561  1104                     i1l771:	
 16562                           
 16563                           ;Dimmer_B1.c: 11: }
 16564                           ;Dimmer_B1.c: 14: if (lights == 2) {
 16565  1104  0871               	movf	DimmerIntrPointSelect@lights,w
 16566  1105  3A02               	xorlw	2
 16567  1106  1D03               	skipz
 16568  1107  0008               	return
 16569                           
 16570                           ;Dimmer_B1.c: 15: DimmerLightsIntr = &DimmerLights2;
 16571  1108  302E               	movlw	_DimmerLights2& (0+255)
 16572  1109  00F0               	movwf	??_DimmerIntrPointSelect
 16573  110A  0870               	movf	??_DimmerIntrPointSelect,w
 16574  110B  00FA               	movwf	_DimmerLightsIntr
 16575  110C  0008               	return
 16576  110D                     __end_of_DimmerIntrPointSelect:	
 16577                           
 16578                           	psect	text114
 16579  1F57                     __ptext114:	
 16580 ;; *************** function _INT_ISR *****************
 16581 ;; Defined at:
 16582 ;;		line 248 in file "../src/MCU_B1.c"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;		None
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;		None
 16587 ;; Return value:  Size  Location     Type
 16588 ;;		None               void
 16589 ;; Registers used:
 16590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16600 ;;Total ram usage:        0 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:    2
 16603 ;; This function calls:
 16604 ;;		_setRF_ReceiveGO
 16605 ;; This function is called by:
 16606 ;;		_ISR
 16607 ;; This function uses a non-reentrant model
 16608 ;;
 16609                           
 16610                           
 16611                           ;psect for function _INT_ISR
 16612  1F57                     _INT_ISR:	
 16613                           
 16614                           ;MCU_B1.c: 249: if (INTE && INTF) {
 16615                           
 16616                           ;incstack = 0
 16617                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16618  1F57  1E0B               	btfss	11,4	;volatile
 16619  1F58  0008               	return
 16620  1F59  1C8B               	btfss	11,1	;volatile
 16621  1F5A  0008               	return
 16622                           
 16623                           ;MCU_B1.c: 250: INTF = 0;
 16624  1F5B  108B               	bcf	11,1	;volatile
 16625                           
 16626                           ;MCU_B1.c: 251: INTE = 0;
 16627  1F5C  120B               	bcf	11,4	;volatile
 16628                           
 16629                           ;MCU_B1.c: 252: setRF_ReceiveGO(1, 1);
 16630  1F5D  01F2               	clrf	setRF_ReceiveGO@command
 16631  1F5E  0AF2               	incf	setRF_ReceiveGO@command,f
 16632  1F5F  3001               	movlw	1
 16633  1F60  319F  279F         	fcall	_setRF_ReceiveGO
 16634  1F62  0008               	return
 16635  1F63                     __end_of_INT_ISR:	
 16636                           
 16637                           	psect	text115
 16638  1F9F                     __ptext115:	
 16639 ;; *************** function _setRF_ReceiveGO *****************
 16640 ;; Defined at:
 16641 ;;		line 36 in file "../src/RF_Control_B1.c"
 16642 ;; Parameters:    Size  Location     Type
 16643 ;;  rf              1    wreg     unsigned char 
 16644 ;;  command         1    2[COMMON] unsigned char 
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;  rf              1    3[COMMON] unsigned char 
 16647 ;; Return value:  Size  Location     Type
 16648 ;;		None               void
 16649 ;; Registers used:
 16650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16656 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;Total ram usage:        2 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; Hardware stack levels required when called:    1
 16663 ;; This function calls:
 16664 ;;		i1_RfPointSelect
 16665 ;; This function is called by:
 16666 ;;		_INT_ISR
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           
 16671                           ;psect for function _setRF_ReceiveGO
 16672  1F9F                     _setRF_ReceiveGO:	
 16673                           
 16674                           ;incstack = 0
 16675                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16676                           ;setRF_ReceiveGO@rf stored from wreg
 16677  1F9F  00F3               	movwf	setRF_ReceiveGO@rf
 16678                           
 16679                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 16680  1FA0  0873               	movf	setRF_ReceiveGO@rf,w
 16681  1FA1  319F  2720         	fcall	i1_RfPointSelect
 16682                           
 16683                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 16684  1FA3  0021               	movlb	1	; select bank1
 16685  1FA4  083D               	movf	_RF^(0+128),w
 16686  1FA5  0086               	movwf	6
 16687  1FA6  0187               	clrf	7
 16688  1FA7  0872               	movf	setRF_ReceiveGO@command,w
 16689  1FA8  1081               	bcf	1,1
 16690  1FA9  1D03               	skipz
 16691  1FAA  1481               	bsf	1,1
 16692  1FAB  0008               	return
 16693  1FAC                     __end_of_setRF_ReceiveGO:	
 16694                           
 16695                           	psect	text116
 16696  1F20                     __ptext116:	
 16697 ;; *************** function i1_RfPointSelect *****************
 16698 ;; Defined at:
 16699 ;;		line 7 in file "../src/RF_Control_B1.c"
 16700 ;; Parameters:    Size  Location     Type
 16701 ;;  rf              1    wreg     unsigned char 
 16702 ;; Auto vars:     Size  Location     Type
 16703 ;;  rf              1    1[COMMON] unsigned char 
 16704 ;; Return value:  Size  Location     Type
 16705 ;;		None               void
 16706 ;; Registers used:
 16707 ;;		wreg
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16717 ;;Total ram usage:        2 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; This function calls:
 16720 ;;		Nothing
 16721 ;; This function is called by:
 16722 ;;		_setRF_ReceiveGO
 16723 ;; This function uses a non-reentrant model
 16724 ;;
 16725                           
 16726                           
 16727                           ;psect for function i1_RfPointSelect
 16728  1F20                     i1_RfPointSelect:	
 16729                           
 16730                           ;incstack = 0
 16731                           ; Regs used in i1_RfPointSelect: [wreg]
 16732                           ;i1RfPointSelect@rf stored from wreg
 16733  1F20  00F1               	movwf	i1RfPointSelect@rf
 16734                           
 16735                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16736  1F21  0871               	movf	i1RfPointSelect@rf,w
 16737  1F22  3A01               	xorlw	1
 16738  1F23  1D03               	skipz
 16739  1F24  0008               	return
 16740                           
 16741                           ;RF_Control_B1.c: 10: RF = &RF1;
 16742  1F25  30DF               	movlw	_RF1& (0+255)
 16743  1F26  00F0               	movwf	??i1_RfPointSelect
 16744  1F27  0870               	movf	??i1_RfPointSelect,w
 16745  1F28  0021               	movlb	1	; select bank1
 16746  1F29  00BD               	movwf	_RF^(0+128)
 16747  1F2A  0008               	return
 16748  1F2B                     __end_ofi1_RfPointSelect:	
 16749  007E                     btemp	set	126	;btemp
 16750  007E                     pic14e$flags	set	126
 16751  007E                     wtemp	set	126
 16752  007E                     wtemp0	set	126
 16753  0080                     wtemp1	set	128
 16754  0082                     wtemp2	set	130
 16755  0084                     wtemp3	set	132
 16756  0086                     wtemp4	set	134
 16757  0088                     wtemp5	set	136
 16758  007F                     wtemp6	set	127
 16759  007E                     ttemp	set	126
 16760  007E                     ttemp0	set	126
 16761  0081                     ttemp1	set	129
 16762  0084                     ttemp2	set	132
 16763  0087                     ttemp3	set	135
 16764  007F                     ttemp4	set	127
 16765  007E                     ltemp	set	126
 16766  007E                     ltemp0	set	126
 16767  0082                     ltemp1	set	130
 16768  0086                     ltemp2	set	134
 16769  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         195
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      74
    BANK2            80      0      67
    BANK3            80      0      49
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK2[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK3[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights2(BANK2[14]), DimmerLights1(BANK2[14]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK1[5]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrGO
    _setDimmerLights_IntrGO->_DimmerIntrPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _my_Main->_setRF_Enable
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   72431
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1012
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      88
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     152
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19277
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0   19277
                                             69 BANK0      5     5      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8464
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8456
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1103
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     216
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     652
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     652
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   25425
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   25425
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   24523
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0     816
                                              4 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   23663
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9422
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     871
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0      51
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11355
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11179
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11113
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     134
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     450
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     130
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     740
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     740
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     227
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     227
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5698
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      90
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    8504
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    8456
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6399
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1018
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     630
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      48
         _getDimmerLights_StatusFlag
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    8933
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    8933
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     472
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     536
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     408
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2     772
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     394
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     154
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     154
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
             _setDimmerLights_IntrGO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrGO                              1     1      0     110
                                              2 COMMON     1     1      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrGO
         _DimmerIntrPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     141      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     141      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 08 10:30:36 2014

                   __size_of_Switch_Main 0008                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 00BD  
                __end_of_CC2500_WriteREG 1203                                       _WR 0CA9  
                                     _Sw 007B       __end_of_getDimmerLights_StatusFlag 124F  
             _getDimmerLights_StatusFlag 1235                   __end_of_setDelayOff_GO 08E3  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0CB2  
                           ___ftadd@sign 0048                                      l303 149F  
                                    l306 14A5                                      l270 160A  
                                    l336 11DD                                      l360 1091  
                                    l337 11DF                                      l290 09B7  
                                    l275 1634                                      l372 1384  
                                    l348 11F2                                      l276 1639  
                                    l366 1273                                      l286 09A6  
                                    l279 163C                                      l814 1117  
                                    _GIE 005F                                      _CRC 00B7  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0017                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BC  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00DF                                      _ISR 0004  
                                    _WDT 00E8                                      _Sw1 0148  
                                    _Sw2 0151                                      _Buz 0078  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 11EA  
                          ??_Buz_Counter 0070                    _Buzzer_Initialization 1F36  
                        __end_of_ADC_Set 1EE7                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0E49                    _setDimmerLights_AdjRF 135D  
                  _setDimmerLights_AdjGo 10B9                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 10EA  
                           ___ftdiv@sign 003D                                     l2006 1758  
                                   l2024 1168                                     l2038 15ED  
               ?_DimmerLightsPointSelect 0070                                     l1382 14D5  
                        __end_of_IOC_Set 1FB9                                     l2386 1EC2  
                                   l5115 1324                                     l5203 05DA  
                                   l5131 0432                                     l6003 178C  
                                   l5127 042B                                     l6111 0B2D  
                                   l5081 07A7                                     l5225 0634  
                                   l5217 061B                                     l5161 0481  
                                   l5137 0441                                     l5323 0DB0  
                                   l5315 0D96                                     l5307 0D7B  
                                   l5155 046E                                     l6043 0B5D  
                                   l5085 07AE                                     l5317 0D9F  
                                   l5309 0D89                                     l5173 04B4  
                                   l5157 0478                                     l5149 045B  
                                   l5261 0569                                     l5245 0526  
                                   l2918 04A2                                     l5423 0986  
                                   l5095 07D6                                     l5087 07B8  
                                   l5319 0DA2                                     l5407 112B  
                                   l5511 08F9                                     l5167 0494  
                                   l5159 047D                                     l5239 0510  
                                   l5351 13FD                                     l6047 0B6F  
                                   l5345 117F                                     l5097 07DE  
                                   l5089 07BD                                     l5521 0909  
                                   l5177 04C6                                     l5169 049E  
                                   l5273 0585                                     l5257 0561  
                                   l5361 1407                                     l5353 13FF  
                                   l6081 16A9                                     l5419 0968  
                                   l5507 08F3                                     l5515 08FF  
                                   l6331 0CC2                                     l5187 04E1  
                                   l5355 1401                                     l6067 0BB1  
                                   l5197 05C4                                     l5541 0931  
                                   l5525 090F                                     l5269 057D  
                                   l5357 1403                                     l5365 140C  
                                   l6501 0F8A                                     l6077 1697  
                                   l2895 07E8                                     l5447 0A63  
                                   l5391 1347                                     l5623 0EA8  
                                   l6351 0D05                                     l6335 0CD1  
                                   l5359 1405                                     l5367 1420  
                                   l6511 0FAA                                     l2889 07D1  
                                   l5289 0D4B                                     l5537 092B  
                                   l5545 0937                                     l5529 0915  
                                   l6361 0D2B                                     l6345 0CEF  
                                   l5633 0DD6                                     l5395 1352  
                                   l5491 08C9                                     l5643 0DFA  
                                   l6523 0FC6                                     l6603 020C  
                                   l6349 0CFC                                     l6461 0A79  
                                   l5485 08B6                                     l6525 0FCA  
                                   l6613 023E                                     l6471 0AD9  
                                   l6383 15B5                                     l5559 151E  
                                   l5495 08D5                                     l5841 09FA  
                                   l5673 15DB                                     l5489 08BC  
                                   l5649 0E10                                     l5761 0F48  
                                   l5907 155B                                     l6467 0A92  
                                   l6387 15BC                                     l5595 12CD  
                                   l5827 09C9                                     l5755 0F2D  
                                   l6539 0FF5                                     l6627 0283  
                                   l5853 1395                                     l5597 12D3  
                                   l5829 09E1                                     l5773 0F63  
                                   l5765 0F51                                     l6637 02B6  
                                   l5855 13A0                                     l5769 0F5A  
                                   l6497 0F81                                     l6577 01C7  
                                   l6691 0783                                     l5795 161C  
                                   l6587 01D7                                     l6579 01CD  
                                   l6685 075B                                     l6693 0789  
                                   l5949 14B9                                     l6589 01DF  
                                   l5895 1248                                     l6839 1684  
                                   l5991 1776                                     l6697 0790  
                                   l6881 0C07                                     l6795 0384  
                  _myMain_Initialization 1134                                     l6889 0C33  
                                   l6995 17CA                                     l6999 17D4  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1F63                                     _LATC 010E  
                                   u3105 07D9                                     u3135 07EF  
                                   u3065 07B3                                     u3315 0482  
                                   u3085 07CC                                     u3415 05EC  
                                   u3255 045C                                     u3425 05FC  
                                   u3345 0495                                     u3505 0542  
                                   u4250 1F1E                                     u3435 061C  
                                   u3445 062B                                     u3605 0D52  
                                   u3285 046F                                     u3525 056A  
                                   u3455 0635                                     u3535 0570  
                                   u3635 0D7C                                     _PEIE 005E  
                                   u3565 0586                                     _INTE 005C  
                                   u3830 0A12                                     _INTF 0059  
                                   u3575 058C                                     u3495 0532  
                                   u4465 138A                                     u3665 0D97  
                                   u3835 0A10                                     u5655 071C  
                                   u5845 166B                                     u5885 0BDE  
                                   u5895 0C1D                                     _LWLO 0CAD  
                                   _RFSW 00BE                                     _TMR0 0015  
                        __end_of_INT_Set 1ECD                                     _RSSI 00BF  
                                   _WREN 0CAA                                     _Buz1 013C  
                                   __WDT 00E2                                     _main 17AC  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0CB2  
                        __end_of_RF_Main 106A                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 11D1                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1F2B  
                                   start 0016                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0021  
                          _RfPointSelect 1F6F               __end_of_setRFSW_AdjControl 1603  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1F9F            __end_of_DimmerIntrPointSelect 110D  
                 _setDimmerLights_IntrGO 13CD                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 0023                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___ftadd 04F9  
                        __end_of___ftdiv 0656                          __end_of___ftmul 05AD  
                        __end_of___fttol 0DB9             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l771 1104  
                                  i1l784 0188                   _setDimmerLights_Switch 1099  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E4  
                                  _RFSW2 00E5                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
                       __end_of_TMR0_ISR 1511             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1FC6                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0C39              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 12A1  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                           __CFG_BOREN$OFF 0000  
                    __end_of_Buz_Counter 1089                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 10FB                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0A08  
            __size_of_Flash_Memory_Write 0031                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0008  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 082B                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 1800                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1EBE                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0EDA  
                   _setSw_Initialization 1EFE                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0EDA                   ?_Buzzer_Initialization 0070  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E0  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1120                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                            _DlyOff_Main 0C39                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 133B  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 07FF  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 10A9  
                                 i1l6231 00A4                                   i1l6243 00C8  
                                 i1l6235 00AA                                   i1l6247 00CE  
                                 i1l6281 015B                                   i1l6273 0137  
                                 i1l6249 00D4                                   i1l6267 0120  
                                 i1l6275 013D                                   i1l6285 0170  
                                 i1l6269 0126                                   i1l6289 0183  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u493_25 0085  
                                 u575_25 1500                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 121C  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1ED9           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 115D                                   _Dimmer 00B9  
                                 _DlySw1 00C6                                   _DlySw2 00CB  
             __end_of_Mcu_Initialization 126A                      __end_of_Buzzer_Main 079E  
                                 _Memory 00E6                                   _Timer0 00E7  
     __end_of_setDimmerLights_TriggerAdj 10D9               _setDimmerLights_TriggerAdj 10C9  
          setDimmerLights_Switch@command 0022                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1F20              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C4  
                                 _s_data 00C5                                   _setLED 08E3  
                                 _myMain 00E9                         _DimmerLightsIntr 007A  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                                 _setBuz 0941         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
           ??_getDimmerLights_StatusFlag 0020                                ??_my_Main 0024  
    __end_of_setDimmerLights_IntrControl 01B0              _setDimmerLights_IntrControl 004C  
               Flash_Memory_Read@address 0022                              _Buz_Counter 1079  
                      RfSWPointSelect@sw 0021                         ??_setRF_RxStatus 0023  
                  __end_of_SwPointSelect 1134                            ?_setRF_Enable 0022  
                        _RfSWPointSelect 115D             __size_of_Flash_Memory_Modify 006E  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0018  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1EC2  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0886  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0048  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 12F9                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1F87                ??_setControl_Lights_Table 0067  
                       ??_DelayTimejudge 0020              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 000D  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1F36                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0023                           _DimmerLights11 00BA  
                         _DimmerLights22 00BB                     __size_of_setLED_Main 0040  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 06FC                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1EEE                               __pnvCOMMON 007D  
                          ??_Switch_Main 006A                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
           setDimmerLights_IntrGO@lights 0072                             _DimmerLights 0079  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1F2B  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0008  
                   __size_of_setRF_Learn 000F                              setBuz@count 0023  
                             __pmaintext 17AC                      _CC2500_WriteCommand 1089  
       __size_of_DimmerLightsPointSelect 0013                         ??_setDelayOff_GO 0025  
          ??_DimmerLights_Initialization 0024                  ?_setDimmerLights_IntrGO 0070  
                             ??_TMR0_ISR 0077                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A6  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1EE0                                  ?_setBuz 0020  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1EEE  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 15C3  
                __end_of_RfSWPointSelect 1173                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 10D9                                  _IOC_Set 1FAC  
                   __size_of_setLog_Code 0048                                  _INT_ISR 1F57  
                                _INT_Set 1EC7                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1647                        _Flash_Memory_Read 1203  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 1066  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 11B9          __end_of_setControl_Lights_Table 0F6C  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0B52                          _setPercentValue 16D1  
                          setLog_Code@rf 0025                         ?_getPercentValue 0070  
                                _Dimmer1 00DC             __end_of_CC2500_FrequencyCabr 1F6F  
                        __size_of_IO_Set 0019                      ??_Flash_Memory_Main 0027  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00D4  
                                _VarLED2 00D8                        __end_of_getRxData 17AC  
               _CC2500_registers_address 1000           __end_of_setDimmerLights_IntrGO 13F6  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 10B9  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 10A9  
                                ___ftadd 0403                           ??_setSw_Enable 0022  
                                ___ftdiv 05AD                                  ___ftmul 04F9  
                                ___fttol 0D32                      __end_of_Switch_Main 1F0E  
                ??_Buzzer_Initialization 0020                                  __myMain 01C0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                        __size_of_setBuz 0063                           ??_setSw_Status 0023  
                                __ptext1 0BC4                                  __ptext2 12A1  
                                __ptext3 1422                                  __ptext4 1134  
                                __ptext5 1285                                  __ptext6 0002  
                                __ptext7 1F06                                  __ptext8 01B0  
                                __ptext9 106A                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 10FB  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 168C  
              __end_of_Flash_Memory_Read 121C                               _setRF_Main 0F6C  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1EF6  
                      _DimmerLights_Main 1F4C                                  _my_Main 0BC4  
                      __end_of_setINT_GO 1F20           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1F4C  
                      ??_setRF_ReceiveGO 0073               __end_of_CC2500_ClearRXFIFO 1EB2  
             __end_of_CC2500_ClearTXFIFO 1EB6            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 133B  
                    _DelayOffPointSelect 1173                                  clrloop0 1ED4  
         __size_of_Switch_Initialization 000D            __end_of_Switch_Initialization 1FD3  
                   end_of_initialization 0048                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 0801                            _DelayTime_1us 137F  
                      __end_of_setTxData 06FC               __end_of_Flash_Memory_Write 14DC  
                                init_ram 1ECD                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1ECE                               _setSw_Main 01B0  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 126A  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 10EA  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 09A4                            _CC2500_TxData 1603  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 144E  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 0A73  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1F0E  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1F57  
                     _Mcu_Initialization 124F                 __size_of_CC2500_PowerRST 0030  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4140 0067                          _setSw_Main$4141 0068  
                       __CFG_FOSC$INTOSC 0000                             ?_Buz_Counter 0070  
                 __end_of_LedPointSelect 135D                  __end_of_Sw_DimmerOnFunc 0BC4  
                __end_of_setPercentValue 1717                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 082B                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1546  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1285  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1235                     _setRF_Initialization 1EE7  
                            _Switch_Main 1F06                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 110D                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1148                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0045  
                   setRF_DimmerLights@on 005D                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0035                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D            __size_of_setDimmerLights_Main 0080  
                         __end_of_setLED 0941                           __end_of_setBuz 09A4  
        _getDimmerLights_StatusFlag$1665 0022                     _CC2500_FrequencyCabr 1F63  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0070  
                        _setRFSW_Control 0DB9                        __size_of_WDT_Main 001C  
                      ?_setDimmerReClock 0070                      start_initialization 0018  
                      _setRF_DimmerValue 1511                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 11B9                              __end_of_ISR 0016  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 12F9  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                         ??_RF_RxDisable 0024                     __end_of_setSw_Enable 12BD  
                        RfPointSelect@rf 0021                             ?_Buzzer_Main 0070  
                               ??_IO_Set 0020                                _VarErrLED 00D0  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1FF1  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1F7B  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 015A  
                         ??_WDT_Clearing 0020                                _Rx_Length 00C0  
                setRF_DimmerValue@lights 0063                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00C2  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                               ?_ADC_Set 0070                                 ??_setBuz 0022  
                        ??_DelayOff_Main 0065                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1EB6               __size_of_DimmerLights_Main 000B  
              __end_of_setRF_DimmerValue 1546                    ?_CC2500_FrequencyCabr 0070  
                       setINT_GO@command 0020                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$3431 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                                 ?_INT_ISR 0070  
                    setRF_Enable@command 0022                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                                 ?_INT_Set 0070  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0091  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 0079  
             __size_of_CC2500_ReadStatus 001B                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012E                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 0023                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0024  
                __size_of_setRF_RxStatus 000F                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00E6              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 0094  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0020  
                    setDelayOff_GO@value 0024                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 0403              _Flash_Memory_Initialization 030B  
                              __ptext100 1EB2                                __ptext101 1EAE  
                              __ptext110 10D9                                __ptext102 1089  
                              __ptext111 1F2B                                __ptext103 11D1  
                              __ptext112 13CD                                __ptext104 06FC  
                              __ptext113 10FB                                __ptext105 1F36  
                              __ptext114 1F57                                __ptext115 1F9F  
                              __ptext107 14DC                                __ptext116 1F20  
                              __ptext108 004C                                __ptext109 1079  
                               ?___ftadd 003E                                _getRxData 175F  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 0E49  
                        _setRF_ReceiveGO 1F9F            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000B            __end_of_Buzzer_Initialization 1F41  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 0024                       __end_of_TouchPower 1EC7  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0022  
                    __size_of_setSw_Main 015B             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 137F            __end_of_setDimmerLights_AdjGo 10C9  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00C3           __size_of_myMain_Initialization 0014  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1148  
                           _setRF_Enable 1422                  __size_of_DelayTimejudge 002C  
                          _SwPointSelect 1120                     __size_of_Buz_Counter 0010  
                     Sw_DimmerOffFunc@sw 0064                                _setINT_GO 1F17  
                    __end_of_setLED_Main 15C3                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F93  
                        SwPointSelect@sw 0021                                clear_ram0 1ED3  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0656  
    __end_of_DimmerLights_Initialization 11A1              _DimmerLights_Initialization 118A  
                     _CC2500_ClearRXFIFO 1EAE                       _CC2500_ClearTXFIFO 1EB2  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1079  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 14AB                               ?_getRxData 0070  
                               _TMR0_ISR 14DC                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 1FB9                         _Sw_DimmerAdjFunc 168C  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 13CD              __end_of_CC2500_WriteCommand 1099  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1285  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0AE1                  __size_of_setDelayOff_GO 005D  
                  __size_of_setSw_Enable 001C                                 _DelayOff 00B8  
                           setSw_Main@sw 0069                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1F87                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 175F                    _DlyOff_Initialization 1F41  
                  __size_of_setSw_Status 000F                               ?_setINT_GO 0070  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1EBA                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1FC6                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1FD3  
                   __size_of_Buzzer_Main 00A2                               ?_setTxData 0070  
                           ?_Switch_Main 0070                         _CC2500_WriteByte 11D1  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 1FAC  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 12A1                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000B  
                               ___awtoft 1319                         ??_LedPointSelect 0020  
                               ___ftpack 079E                             _setSw_Status 1FE2  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1583                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0A73                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 0027                         __size_of_my_Main 0075  
                               __ptext10 0B52                                 __ptext11 0AE1  
                               __ptext20 175F                                 __ptext12 168C  
                               __ptext21 1717                                 __ptext13 10C9  
                               __ptext30 04F9                                 __ptext22 0EDA  
                               __ptext14 10B9                                 __ptext31 0403  
                               __ptext23 0DB9                                 __ptext15 1FC6  
                               __ptext40 1EE7                                 __ptext32 13A5  
                               __ptext24 0886                                 __ptext16 1EFE  
                               __ptext41 124F                                 __ptext33 1F17  
                               __ptext25 13F6                                 __ptext17 1EC2  
                               __ptext50 1583                                 __ptext42 11B9  
                               __ptext34 1603                                 __ptext26 15C3  
                               __ptext18 1066                                 __ptext51 1F87  
                               __ptext43 1FB9                                 __ptext35 09A4  
                               __ptext27 1511                                 __ptext19 0F6C  
                               __ptext60 1F4C                                 __ptext52 10EA  
                               __ptext44 121C                                 __ptext36 1FF1  
                               __ptext28 135D                                 __ptext61 0CB2  
                               __ptext53 1647                                 __ptext45 1FAC  
                               __ptext37 126A                                 __ptext29 082B  
                               __ptext70 1ED9                                 __ptext62 1546  
                               __ptext54 0A73                                 __ptext46 1EC7  
                               __ptext38 12BD                                 __ptext71 1EF6  
                               __ptext63 0E49                                 __ptext55 1F7B  
                               __ptext47 1EBA                                 __ptext39 1EBE  
                               __ptext80 05AD                                 __ptext72 0C39  
                               __ptext64 08E3                                 __ptext56 030B  
                               __ptext48 1EE0                                 __ptext81 1319  
                               __ptext73 0656                                 __ptext65 133B  
                               __ptext57 14AB                                 __ptext49 1F93  
                               __ptext90 1F41                                 __ptext82 079E  
                               __ptext74 1F6F                                 __ptext66 11A1  
                               __ptext58 1F0E                                 __ptext91 1173  
                               __ptext83 1FD3                                 __ptext75 1FE2  
                               __ptext67 1235                                 __ptext59 1203  
                               __ptext92 1148                                 __ptext84 115D  
                               __ptext76 1120                                 __ptext68 118A  
                               __ptext93 1EB6                                 __ptext85 10A9  
                               __ptext77 0A08                                 __ptext69 144E  
                               __ptext94 147B                                 __ptext86 1099  
                               __ptext78 16D1                                 __ptext95 0801  
                               __ptext87 110D                                 __ptext79 0D32  
                               __ptext96 12DA                                 __ptext88 0941  
                               __ptext97 11EA                                 __ptext89 1EEE  
                               __ptext98 1F63                                 __ptext99 137F  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0016  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1FE2  
          __end_of_Dimmer_Initialization 1EE0             __end_of_setDimmerLights_Main 0D32  
               ??_setDimmerLights_IntrGO 0072                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0054  
                            _setRF_Learn 106A                 __end_of_CC2500_SIDLEMode 1EBA  
                         _setRF_RxStatus 1FF1               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 118A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 11A1                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000B                          _CC2500_ReadByte 12BD  
                     _CC2500_InitPATable 12DA      __size_of_getDimmerLights_StatusFlag 001A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 1000  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 147B              __end_of_Flash_Memory_Modify 0AE1  
                      ??_getPercentValue 0059                              _setLog_Code 1717  
                  setRF_RxStatus@command 0022              __end_of_Flash_Memory_Unlock 1F17  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 11EA  
                     __end_of_setSw_Main 030B                            _Transceive_OK 03E1  
                 ?_DlyOff_Initialization 0070                           _DelayTimejudge 13F6  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
                            ??_setINT_GO 0020                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 2000                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 147B  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 144E  
            __end_of_setDimmerLights_Adj 1583                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0028                        _RF_Initialization 1EBE  
   __size_of_setDimmerLights_IntrControl 0164                     _Flash_Memory_Erasing 1F7B  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C1  
        __end_of_DelayOff_Initialization 1EF6                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1EFE  
                    ??_RF_Initialization 0021                              getRxData@rf 0068  
                         _setDelayOff_GO 0886         __size_of_setControl_Lights_Table 0092  
                 __end_of_DelayTimejudge 1422                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F8  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 13A5  
               __end_of_Sw_DimmerAdjFunc 16D1                  __end_of_CC2500_ReadByte 12DA  
           __end_of_setSw_Initialization 1F06                          ?_setRF_RxStatus 0022  
                   getPercentValue@value 005B                             _RF_RxDisable 13A5  
             __end_of_LED_Initialization 1F93         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0072          __size_of_setDimmerLights_IntrGO 0029  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1EC2                 __end_of_Sw_DimmerOffFunc 0B52  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                       setRF_RxStatus@rf 0023                    __end_of_CC2500_RxData 0A08  
                  __end_of_CC2500_TxData 1647                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 14AB  
