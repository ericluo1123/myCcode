

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 14 16:54:16 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	intentry,global,class=CODE,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	dabs	1,0x7E,2
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0090                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0095                     	;# 
   167  0096                     	;# 
   168  0097                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  011D                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184  018E                     	;# 
   185  0191                     	;# 
   186  0191                     	;# 
   187  0192                     	;# 
   188  0193                     	;# 
   189  0193                     	;# 
   190  0194                     	;# 
   191  0195                     	;# 
   192  0196                     	;# 
   193  0197                     	;# 
   194  0199                     	;# 
   195  019A                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019B                     	;# 
   200  019C                     	;# 
   201  019C                     	;# 
   202  019D                     	;# 
   203  019E                     	;# 
   204  019F                     	;# 
   205  020D                     	;# 
   206  0210                     	;# 
   207  0211                     	;# 
   208  0211                     	;# 
   209  0212                     	;# 
   210  0212                     	;# 
   211  0213                     	;# 
   212  0213                     	;# 
   213  0214                     	;# 
   214  0214                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0291                     	;# 
   223  0291                     	;# 
   224  0292                     	;# 
   225  0293                     	;# 
   226  0298                     	;# 
   227  0298                     	;# 
   228  0299                     	;# 
   229  029A                     	;# 
   230  0394                     	;# 
   231  0395                     	;# 
   232  0396                     	;# 
   233  0FE4                     	;# 
   234  0FE5                     	;# 
   235  0FE6                     	;# 
   236  0FE7                     	;# 
   237  0FE8                     	;# 
   238  0FE9                     	;# 
   239  0FEA                     	;# 
   240  0FEB                     	;# 
   241  0FED                     	;# 
   242  0FEE                     	;# 
   243  0FEF                     	;# 
   244  0000                     	;# 
   245  0001                     	;# 
   246  0002                     	;# 
   247  0003                     	;# 
   248  0004                     	;# 
   249  0005                     	;# 
   250  0006                     	;# 
   251  0007                     	;# 
   252  0008                     	;# 
   253  0009                     	;# 
   254  000A                     	;# 
   255  000B                     	;# 
   256  000C                     	;# 
   257  000D                     	;# 
   258  000E                     	;# 
   259  0010                     	;# 
   260  0011                     	;# 
   261  0012                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0016                     	;# 
   265  0017                     	;# 
   266  0018                     	;# 
   267  0019                     	;# 
   268  001A                     	;# 
   269  001B                     	;# 
   270  001C                     	;# 
   271  008C                     	;# 
   272  008D                     	;# 
   273  008E                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0095                     	;# 
   278  0096                     	;# 
   279  0097                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009B                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009E                     	;# 
   287  010C                     	;# 
   288  010D                     	;# 
   289  010E                     	;# 
   290  0116                     	;# 
   291  0117                     	;# 
   292  011D                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  018E                     	;# 
   296  0191                     	;# 
   297  0191                     	;# 
   298  0192                     	;# 
   299  0193                     	;# 
   300  0193                     	;# 
   301  0194                     	;# 
   302  0195                     	;# 
   303  0196                     	;# 
   304  0197                     	;# 
   305  0199                     	;# 
   306  019A                     	;# 
   307  019B                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019C                     	;# 
   312  019C                     	;# 
   313  019D                     	;# 
   314  019E                     	;# 
   315  019F                     	;# 
   316  020D                     	;# 
   317  0210                     	;# 
   318  0211                     	;# 
   319  0211                     	;# 
   320  0212                     	;# 
   321  0212                     	;# 
   322  0213                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0214                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0216                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0217                     	;# 
   333  0291                     	;# 
   334  0291                     	;# 
   335  0292                     	;# 
   336  0293                     	;# 
   337  0298                     	;# 
   338  0298                     	;# 
   339  0299                     	;# 
   340  029A                     	;# 
   341  0394                     	;# 
   342  0395                     	;# 
   343  0396                     	;# 
   344  0FE4                     	;# 
   345  0FE5                     	;# 
   346  0FE6                     	;# 
   347  0FE7                     	;# 
   348  0FE8                     	;# 
   349  0FE9                     	;# 
   350  0FEA                     	;# 
   351  0FEB                     	;# 
   352  0FED                     	;# 
   353  0FEE                     	;# 
   354  0FEF                     	;# 
   355  0000                     	;# 
   356  0001                     	;# 
   357  0002                     	;# 
   358  0003                     	;# 
   359  0004                     	;# 
   360  0005                     	;# 
   361  0006                     	;# 
   362  0007                     	;# 
   363  0008                     	;# 
   364  0009                     	;# 
   365  000A                     	;# 
   366  000B                     	;# 
   367  000C                     	;# 
   368  000D                     	;# 
   369  000E                     	;# 
   370  0010                     	;# 
   371  0011                     	;# 
   372  0012                     	;# 
   373  0015                     	;# 
   374  0016                     	;# 
   375  0016                     	;# 
   376  0017                     	;# 
   377  0018                     	;# 
   378  0019                     	;# 
   379  001A                     	;# 
   380  001B                     	;# 
   381  001C                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0090                     	;# 
   386  0091                     	;# 
   387  0092                     	;# 
   388  0095                     	;# 
   389  0096                     	;# 
   390  0097                     	;# 
   391  0099                     	;# 
   392  009A                     	;# 
   393  009B                     	;# 
   394  009B                     	;# 
   395  009C                     	;# 
   396  009D                     	;# 
   397  009E                     	;# 
   398  010C                     	;# 
   399  010D                     	;# 
   400  010E                     	;# 
   401  0116                     	;# 
   402  0117                     	;# 
   403  011D                     	;# 
   404  018C                     	;# 
   405  018D                     	;# 
   406  018E                     	;# 
   407  0191                     	;# 
   408  0191                     	;# 
   409  0192                     	;# 
   410  0193                     	;# 
   411  0193                     	;# 
   412  0194                     	;# 
   413  0195                     	;# 
   414  0196                     	;# 
   415  0197                     	;# 
   416  0199                     	;# 
   417  019A                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019B                     	;# 
   422  019C                     	;# 
   423  019C                     	;# 
   424  019D                     	;# 
   425  019E                     	;# 
   426  019F                     	;# 
   427  020D                     	;# 
   428  0210                     	;# 
   429  0211                     	;# 
   430  0211                     	;# 
   431  0212                     	;# 
   432  0212                     	;# 
   433  0213                     	;# 
   434  0213                     	;# 
   435  0214                     	;# 
   436  0214                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0215                     	;# 
   440  0216                     	;# 
   441  0216                     	;# 
   442  0217                     	;# 
   443  0217                     	;# 
   444  0291                     	;# 
   445  0291                     	;# 
   446  0292                     	;# 
   447  0293                     	;# 
   448  0298                     	;# 
   449  0298                     	;# 
   450  0299                     	;# 
   451  029A                     	;# 
   452  0394                     	;# 
   453  0395                     	;# 
   454  0396                     	;# 
   455  0FE4                     	;# 
   456  0FE5                     	;# 
   457  0FE6                     	;# 
   458  0FE7                     	;# 
   459  0FE8                     	;# 
   460  0FE9                     	;# 
   461  0FEA                     	;# 
   462  0FEB                     	;# 
   463  0FED                     	;# 
   464  0FEE                     	;# 
   465  0FEF                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000D                     	;# 
   480  000E                     	;# 
   481  0010                     	;# 
   482  0011                     	;# 
   483  0012                     	;# 
   484  0015                     	;# 
   485  0016                     	;# 
   486  0016                     	;# 
   487  0017                     	;# 
   488  0018                     	;# 
   489  0019                     	;# 
   490  001A                     	;# 
   491  001B                     	;# 
   492  001C                     	;# 
   493  008C                     	;# 
   494  008D                     	;# 
   495  008E                     	;# 
   496  0090                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0095                     	;# 
   500  0096                     	;# 
   501  0097                     	;# 
   502  0099                     	;# 
   503  009A                     	;# 
   504  009B                     	;# 
   505  009B                     	;# 
   506  009C                     	;# 
   507  009D                     	;# 
   508  009E                     	;# 
   509  010C                     	;# 
   510  010D                     	;# 
   511  010E                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  011D                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0194                     	;# 
   524  0195                     	;# 
   525  0196                     	;# 
   526  0197                     	;# 
   527  0199                     	;# 
   528  019A                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019B                     	;# 
   533  019C                     	;# 
   534  019C                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019F                     	;# 
   538  020D                     	;# 
   539  0210                     	;# 
   540  0211                     	;# 
   541  0211                     	;# 
   542  0212                     	;# 
   543  0212                     	;# 
   544  0213                     	;# 
   545  0213                     	;# 
   546  0214                     	;# 
   547  0214                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0215                     	;# 
   551  0216                     	;# 
   552  0216                     	;# 
   553  0217                     	;# 
   554  0217                     	;# 
   555  0291                     	;# 
   556  0291                     	;# 
   557  0292                     	;# 
   558  0293                     	;# 
   559  0298                     	;# 
   560  0298                     	;# 
   561  0299                     	;# 
   562  029A                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  0FE4                     	;# 
   567  0FE5                     	;# 
   568  0FE6                     	;# 
   569  0FE7                     	;# 
   570  0FE8                     	;# 
   571  0FE9                     	;# 
   572  0FEA                     	;# 
   573  0FEB                     	;# 
   574  0FED                     	;# 
   575  0FEE                     	;# 
   576  0FEF                     	;# 
   577  0000                     	;# 
   578  0001                     	;# 
   579  0002                     	;# 
   580  0003                     	;# 
   581  0004                     	;# 
   582  0005                     	;# 
   583  0006                     	;# 
   584  0007                     	;# 
   585  0008                     	;# 
   586  0009                     	;# 
   587  000A                     	;# 
   588  000B                     	;# 
   589  000C                     	;# 
   590  000D                     	;# 
   591  000E                     	;# 
   592  0010                     	;# 
   593  0011                     	;# 
   594  0012                     	;# 
   595  0015                     	;# 
   596  0016                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001C                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  008E                     	;# 
   607  0090                     	;# 
   608  0091                     	;# 
   609  0092                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0099                     	;# 
   614  009A                     	;# 
   615  009B                     	;# 
   616  009B                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  010E                     	;# 
   623  0116                     	;# 
   624  0117                     	;# 
   625  011D                     	;# 
   626  018C                     	;# 
   627  018D                     	;# 
   628  018E                     	;# 
   629  0191                     	;# 
   630  0191                     	;# 
   631  0192                     	;# 
   632  0193                     	;# 
   633  0193                     	;# 
   634  0194                     	;# 
   635  0195                     	;# 
   636  0196                     	;# 
   637  0197                     	;# 
   638  0199                     	;# 
   639  019A                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019B                     	;# 
   644  019C                     	;# 
   645  019C                     	;# 
   646  019D                     	;# 
   647  019E                     	;# 
   648  019F                     	;# 
   649  020D                     	;# 
   650  0210                     	;# 
   651  0211                     	;# 
   652  0211                     	;# 
   653  0212                     	;# 
   654  0212                     	;# 
   655  0213                     	;# 
   656  0213                     	;# 
   657  0214                     	;# 
   658  0214                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0216                     	;# 
   664  0217                     	;# 
   665  0217                     	;# 
   666  0291                     	;# 
   667  0291                     	;# 
   668  0292                     	;# 
   669  0293                     	;# 
   670  0298                     	;# 
   671  0298                     	;# 
   672  0299                     	;# 
   673  029A                     	;# 
   674  0394                     	;# 
   675  0395                     	;# 
   676  0396                     	;# 
   677  0FE4                     	;# 
   678  0FE5                     	;# 
   679  0FE6                     	;# 
   680  0FE7                     	;# 
   681  0FE8                     	;# 
   682  0FE9                     	;# 
   683  0FEA                     	;# 
   684  0FEB                     	;# 
   685  0FED                     	;# 
   686  0FEE                     	;# 
   687  0FEF                     	;# 
   688  0000                     	;# 
   689  0001                     	;# 
   690  0002                     	;# 
   691  0003                     	;# 
   692  0004                     	;# 
   693  0005                     	;# 
   694  0006                     	;# 
   695  0007                     	;# 
   696  0008                     	;# 
   697  0009                     	;# 
   698  000A                     	;# 
   699  000B                     	;# 
   700  000C                     	;# 
   701  000D                     	;# 
   702  000E                     	;# 
   703  0010                     	;# 
   704  0011                     	;# 
   705  0012                     	;# 
   706  0015                     	;# 
   707  0016                     	;# 
   708  0016                     	;# 
   709  0017                     	;# 
   710  0018                     	;# 
   711  0019                     	;# 
   712  001A                     	;# 
   713  001B                     	;# 
   714  001C                     	;# 
   715  008C                     	;# 
   716  008D                     	;# 
   717  008E                     	;# 
   718  0090                     	;# 
   719  0091                     	;# 
   720  0092                     	;# 
   721  0095                     	;# 
   722  0096                     	;# 
   723  0097                     	;# 
   724  0099                     	;# 
   725  009A                     	;# 
   726  009B                     	;# 
   727  009B                     	;# 
   728  009C                     	;# 
   729  009D                     	;# 
   730  009E                     	;# 
   731  010C                     	;# 
   732  010D                     	;# 
   733  010E                     	;# 
   734  0116                     	;# 
   735  0117                     	;# 
   736  011D                     	;# 
   737  018C                     	;# 
   738  018D                     	;# 
   739  018E                     	;# 
   740  0191                     	;# 
   741  0191                     	;# 
   742  0192                     	;# 
   743  0193                     	;# 
   744  0193                     	;# 
   745  0194                     	;# 
   746  0195                     	;# 
   747  0196                     	;# 
   748  0197                     	;# 
   749  0199                     	;# 
   750  019A                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019B                     	;# 
   755  019C                     	;# 
   756  019C                     	;# 
   757  019D                     	;# 
   758  019E                     	;# 
   759  019F                     	;# 
   760  020D                     	;# 
   761  0210                     	;# 
   762  0211                     	;# 
   763  0211                     	;# 
   764  0212                     	;# 
   765  0212                     	;# 
   766  0213                     	;# 
   767  0213                     	;# 
   768  0214                     	;# 
   769  0214                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0215                     	;# 
   773  0216                     	;# 
   774  0216                     	;# 
   775  0217                     	;# 
   776  0217                     	;# 
   777  0291                     	;# 
   778  0291                     	;# 
   779  0292                     	;# 
   780  0293                     	;# 
   781  0298                     	;# 
   782  0298                     	;# 
   783  0299                     	;# 
   784  029A                     	;# 
   785  0394                     	;# 
   786  0395                     	;# 
   787  0396                     	;# 
   788  0FE4                     	;# 
   789  0FE5                     	;# 
   790  0FE6                     	;# 
   791  0FE7                     	;# 
   792  0FE8                     	;# 
   793  0FE9                     	;# 
   794  0FEA                     	;# 
   795  0FEB                     	;# 
   796  0FED                     	;# 
   797  0FEE                     	;# 
   798  0FEF                     	;# 
   799  0000                     	;# 
   800  0001                     	;# 
   801  0002                     	;# 
   802  0003                     	;# 
   803  0004                     	;# 
   804  0005                     	;# 
   805  0006                     	;# 
   806  0007                     	;# 
   807  0008                     	;# 
   808  0009                     	;# 
   809  000A                     	;# 
   810  000B                     	;# 
   811  000C                     	;# 
   812  000D                     	;# 
   813  000E                     	;# 
   814  0010                     	;# 
   815  0011                     	;# 
   816  0012                     	;# 
   817  0015                     	;# 
   818  0016                     	;# 
   819  0016                     	;# 
   820  0017                     	;# 
   821  0018                     	;# 
   822  0019                     	;# 
   823  001A                     	;# 
   824  001B                     	;# 
   825  001C                     	;# 
   826  008C                     	;# 
   827  008D                     	;# 
   828  008E                     	;# 
   829  0090                     	;# 
   830  0091                     	;# 
   831  0092                     	;# 
   832  0095                     	;# 
   833  0096                     	;# 
   834  0097                     	;# 
   835  0099                     	;# 
   836  009A                     	;# 
   837  009B                     	;# 
   838  009B                     	;# 
   839  009C                     	;# 
   840  009D                     	;# 
   841  009E                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010E                     	;# 
   845  0116                     	;# 
   846  0117                     	;# 
   847  011D                     	;# 
   848  018C                     	;# 
   849  018D                     	;# 
   850  018E                     	;# 
   851  0191                     	;# 
   852  0191                     	;# 
   853  0192                     	;# 
   854  0193                     	;# 
   855  0193                     	;# 
   856  0194                     	;# 
   857  0195                     	;# 
   858  0196                     	;# 
   859  0197                     	;# 
   860  0199                     	;# 
   861  019A                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019B                     	;# 
   866  019C                     	;# 
   867  019C                     	;# 
   868  019D                     	;# 
   869  019E                     	;# 
   870  019F                     	;# 
   871  020D                     	;# 
   872  0210                     	;# 
   873  0211                     	;# 
   874  0211                     	;# 
   875  0212                     	;# 
   876  0212                     	;# 
   877  0213                     	;# 
   878  0213                     	;# 
   879  0214                     	;# 
   880  0214                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0215                     	;# 
   884  0216                     	;# 
   885  0216                     	;# 
   886  0217                     	;# 
   887  0217                     	;# 
   888  0291                     	;# 
   889  0291                     	;# 
   890  0292                     	;# 
   891  0293                     	;# 
   892  0298                     	;# 
   893  0298                     	;# 
   894  0299                     	;# 
   895  029A                     	;# 
   896  0394                     	;# 
   897  0395                     	;# 
   898  0396                     	;# 
   899  0FE4                     	;# 
   900  0FE5                     	;# 
   901  0FE6                     	;# 
   902  0FE7                     	;# 
   903  0FE8                     	;# 
   904  0FE9                     	;# 
   905  0FEA                     	;# 
   906  0FEB                     	;# 
   907  0FED                     	;# 
   908  0FEE                     	;# 
   909  0FEF                     	;# 
   910  0000                     	;# 
   911  0001                     	;# 
   912  0002                     	;# 
   913  0003                     	;# 
   914  0004                     	;# 
   915  0005                     	;# 
   916  0006                     	;# 
   917  0007                     	;# 
   918  0008                     	;# 
   919  0009                     	;# 
   920  000A                     	;# 
   921  000B                     	;# 
   922  000C                     	;# 
   923  000D                     	;# 
   924  000E                     	;# 
   925  0010                     	;# 
   926  0011                     	;# 
   927  0012                     	;# 
   928  0015                     	;# 
   929  0016                     	;# 
   930  0016                     	;# 
   931  0017                     	;# 
   932  0018                     	;# 
   933  0019                     	;# 
   934  001A                     	;# 
   935  001B                     	;# 
   936  001C                     	;# 
   937  008C                     	;# 
   938  008D                     	;# 
   939  008E                     	;# 
   940  0090                     	;# 
   941  0091                     	;# 
   942  0092                     	;# 
   943  0095                     	;# 
   944  0096                     	;# 
   945  0097                     	;# 
   946  0099                     	;# 
   947  009A                     	;# 
   948  009B                     	;# 
   949  009B                     	;# 
   950  009C                     	;# 
   951  009D                     	;# 
   952  009E                     	;# 
   953  010C                     	;# 
   954  010D                     	;# 
   955  010E                     	;# 
   956  0116                     	;# 
   957  0117                     	;# 
   958  011D                     	;# 
   959  018C                     	;# 
   960  018D                     	;# 
   961  018E                     	;# 
   962  0191                     	;# 
   963  0191                     	;# 
   964  0192                     	;# 
   965  0193                     	;# 
   966  0193                     	;# 
   967  0194                     	;# 
   968  0195                     	;# 
   969  0196                     	;# 
   970  0197                     	;# 
   971  0199                     	;# 
   972  019A                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019B                     	;# 
   977  019C                     	;# 
   978  019C                     	;# 
   979  019D                     	;# 
   980  019E                     	;# 
   981  019F                     	;# 
   982  020D                     	;# 
   983  0210                     	;# 
   984  0211                     	;# 
   985  0211                     	;# 
   986  0212                     	;# 
   987  0212                     	;# 
   988  0213                     	;# 
   989  0213                     	;# 
   990  0214                     	;# 
   991  0214                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0215                     	;# 
   995  0216                     	;# 
   996  0216                     	;# 
   997  0217                     	;# 
   998  0217                     	;# 
   999  0291                     	;# 
  1000  0291                     	;# 
  1001  0292                     	;# 
  1002  0293                     	;# 
  1003  0298                     	;# 
  1004  0298                     	;# 
  1005  0299                     	;# 
  1006  029A                     	;# 
  1007  0394                     	;# 
  1008  0395                     	;# 
  1009  0396                     	;# 
  1010  0FE4                     	;# 
  1011  0FE5                     	;# 
  1012  0FE6                     	;# 
  1013  0FE7                     	;# 
  1014  0FE8                     	;# 
  1015  0FE9                     	;# 
  1016  0FEA                     	;# 
  1017  0FEB                     	;# 
  1018  0FED                     	;# 
  1019  0FEE                     	;# 
  1020  0FEF                     	;# 
  1021  0000                     	;# 
  1022  0001                     	;# 
  1023  0002                     	;# 
  1024  0003                     	;# 
  1025  0004                     	;# 
  1026  0005                     	;# 
  1027  0006                     	;# 
  1028  0007                     	;# 
  1029  0008                     	;# 
  1030  0009                     	;# 
  1031  000A                     	;# 
  1032  000B                     	;# 
  1033  000C                     	;# 
  1034  000D                     	;# 
  1035  000E                     	;# 
  1036  0010                     	;# 
  1037  0011                     	;# 
  1038  0012                     	;# 
  1039  0015                     	;# 
  1040  0016                     	;# 
  1041  0016                     	;# 
  1042  0017                     	;# 
  1043  0018                     	;# 
  1044  0019                     	;# 
  1045  001A                     	;# 
  1046  001B                     	;# 
  1047  001C                     	;# 
  1048  008C                     	;# 
  1049  008D                     	;# 
  1050  008E                     	;# 
  1051  0090                     	;# 
  1052  0091                     	;# 
  1053  0092                     	;# 
  1054  0095                     	;# 
  1055  0096                     	;# 
  1056  0097                     	;# 
  1057  0099                     	;# 
  1058  009A                     	;# 
  1059  009B                     	;# 
  1060  009B                     	;# 
  1061  009C                     	;# 
  1062  009D                     	;# 
  1063  009E                     	;# 
  1064  010C                     	;# 
  1065  010D                     	;# 
  1066  010E                     	;# 
  1067  0116                     	;# 
  1068  0117                     	;# 
  1069  011D                     	;# 
  1070  018C                     	;# 
  1071  018D                     	;# 
  1072  018E                     	;# 
  1073  0191                     	;# 
  1074  0191                     	;# 
  1075  0192                     	;# 
  1076  0193                     	;# 
  1077  0193                     	;# 
  1078  0194                     	;# 
  1079  0195                     	;# 
  1080  0196                     	;# 
  1081  0197                     	;# 
  1082  0199                     	;# 
  1083  019A                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019B                     	;# 
  1088  019C                     	;# 
  1089  019C                     	;# 
  1090  019D                     	;# 
  1091  019E                     	;# 
  1092  019F                     	;# 
  1093  020D                     	;# 
  1094  0210                     	;# 
  1095  0211                     	;# 
  1096  0211                     	;# 
  1097  0212                     	;# 
  1098  0212                     	;# 
  1099  0213                     	;# 
  1100  0213                     	;# 
  1101  0214                     	;# 
  1102  0214                     	;# 
  1103  0215                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0216                     	;# 
  1107  0216                     	;# 
  1108  0217                     	;# 
  1109  0217                     	;# 
  1110  0291                     	;# 
  1111  0291                     	;# 
  1112  0292                     	;# 
  1113  0293                     	;# 
  1114  0298                     	;# 
  1115  0298                     	;# 
  1116  0299                     	;# 
  1117  029A                     	;# 
  1118  0394                     	;# 
  1119  0395                     	;# 
  1120  0396                     	;# 
  1121  0FE4                     	;# 
  1122  0FE5                     	;# 
  1123  0FE6                     	;# 
  1124  0FE7                     	;# 
  1125  0FE8                     	;# 
  1126  0FE9                     	;# 
  1127  0FEA                     	;# 
  1128  0FEB                     	;# 
  1129  0FED                     	;# 
  1130  0FEE                     	;# 
  1131  0FEF                     	;# 
  1132  0000                     	;# 
  1133  0001                     	;# 
  1134  0002                     	;# 
  1135  0003                     	;# 
  1136  0004                     	;# 
  1137  0005                     	;# 
  1138  0006                     	;# 
  1139  0007                     	;# 
  1140  0008                     	;# 
  1141  0009                     	;# 
  1142  000A                     	;# 
  1143  000B                     	;# 
  1144  000C                     	;# 
  1145  000D                     	;# 
  1146  000E                     	;# 
  1147  0010                     	;# 
  1148  0011                     	;# 
  1149  0012                     	;# 
  1150  0015                     	;# 
  1151  0016                     	;# 
  1152  0016                     	;# 
  1153  0017                     	;# 
  1154  0018                     	;# 
  1155  0019                     	;# 
  1156  001A                     	;# 
  1157  001B                     	;# 
  1158  001C                     	;# 
  1159  008C                     	;# 
  1160  008D                     	;# 
  1161  008E                     	;# 
  1162  0090                     	;# 
  1163  0091                     	;# 
  1164  0092                     	;# 
  1165  0095                     	;# 
  1166  0096                     	;# 
  1167  0097                     	;# 
  1168  0099                     	;# 
  1169  009A                     	;# 
  1170  009B                     	;# 
  1171  009B                     	;# 
  1172  009C                     	;# 
  1173  009D                     	;# 
  1174  009E                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  0116                     	;# 
  1179  0117                     	;# 
  1180  011D                     	;# 
  1181  018C                     	;# 
  1182  018D                     	;# 
  1183  018E                     	;# 
  1184  0191                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0197                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019C                     	;# 
  1200  019C                     	;# 
  1201  019D                     	;# 
  1202  019E                     	;# 
  1203  019F                     	;# 
  1204  020D                     	;# 
  1205  0210                     	;# 
  1206  0211                     	;# 
  1207  0211                     	;# 
  1208  0212                     	;# 
  1209  0212                     	;# 
  1210  0213                     	;# 
  1211  0213                     	;# 
  1212  0214                     	;# 
  1213  0214                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0215                     	;# 
  1217  0216                     	;# 
  1218  0216                     	;# 
  1219  0217                     	;# 
  1220  0217                     	;# 
  1221  0291                     	;# 
  1222  0291                     	;# 
  1223  0292                     	;# 
  1224  0293                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  0394                     	;# 
  1230  0395                     	;# 
  1231  0396                     	;# 
  1232  0FE4                     	;# 
  1233  0FE5                     	;# 
  1234  0FE6                     	;# 
  1235  0FE7                     	;# 
  1236  0FE8                     	;# 
  1237  0FE9                     	;# 
  1238  0FEA                     	;# 
  1239  0FEB                     	;# 
  1240  0FED                     	;# 
  1241  0FEE                     	;# 
  1242  0FEF                     	;# 
  1243  0000                     	;# 
  1244  0001                     	;# 
  1245  0002                     	;# 
  1246  0003                     	;# 
  1247  0004                     	;# 
  1248  0005                     	;# 
  1249  0006                     	;# 
  1250  0007                     	;# 
  1251  0008                     	;# 
  1252  0009                     	;# 
  1253  000A                     	;# 
  1254  000B                     	;# 
  1255  000C                     	;# 
  1256  000D                     	;# 
  1257  000E                     	;# 
  1258  0010                     	;# 
  1259  0011                     	;# 
  1260  0012                     	;# 
  1261  0015                     	;# 
  1262  0016                     	;# 
  1263  0016                     	;# 
  1264  0017                     	;# 
  1265  0018                     	;# 
  1266  0019                     	;# 
  1267  001A                     	;# 
  1268  001B                     	;# 
  1269  001C                     	;# 
  1270  008C                     	;# 
  1271  008D                     	;# 
  1272  008E                     	;# 
  1273  0090                     	;# 
  1274  0091                     	;# 
  1275  0092                     	;# 
  1276  0095                     	;# 
  1277  0096                     	;# 
  1278  0097                     	;# 
  1279  0099                     	;# 
  1280  009A                     	;# 
  1281  009B                     	;# 
  1282  009B                     	;# 
  1283  009C                     	;# 
  1284  009D                     	;# 
  1285  009E                     	;# 
  1286  010C                     	;# 
  1287  010D                     	;# 
  1288  010E                     	;# 
  1289  0116                     	;# 
  1290  0117                     	;# 
  1291  011D                     	;# 
  1292  018C                     	;# 
  1293  018D                     	;# 
  1294  018E                     	;# 
  1295  0191                     	;# 
  1296  0191                     	;# 
  1297  0192                     	;# 
  1298  0193                     	;# 
  1299  0193                     	;# 
  1300  0194                     	;# 
  1301  0195                     	;# 
  1302  0196                     	;# 
  1303  0197                     	;# 
  1304  0199                     	;# 
  1305  019A                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019C                     	;# 
  1311  019C                     	;# 
  1312  019D                     	;# 
  1313  019E                     	;# 
  1314  019F                     	;# 
  1315  020D                     	;# 
  1316  0210                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0291                     	;# 
  1333  0291                     	;# 
  1334  0292                     	;# 
  1335  0293                     	;# 
  1336  0298                     	;# 
  1337  0298                     	;# 
  1338  0299                     	;# 
  1339  029A                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  0FE4                     	;# 
  1344  0FE5                     	;# 
  1345  0FE6                     	;# 
  1346  0FE7                     	;# 
  1347  0FE8                     	;# 
  1348  0FE9                     	;# 
  1349  0FEA                     	;# 
  1350  0FEB                     	;# 
  1351  0FED                     	;# 
  1352  0FEE                     	;# 
  1353  0FEF                     	;# 
  1354  0000                     	;# 
  1355  0001                     	;# 
  1356  0002                     	;# 
  1357  0003                     	;# 
  1358  0004                     	;# 
  1359  0005                     	;# 
  1360  0006                     	;# 
  1361  0007                     	;# 
  1362  0008                     	;# 
  1363  0009                     	;# 
  1364  000A                     	;# 
  1365  000B                     	;# 
  1366  000C                     	;# 
  1367  000D                     	;# 
  1368  000E                     	;# 
  1369  0010                     	;# 
  1370  0011                     	;# 
  1371  0012                     	;# 
  1372  0015                     	;# 
  1373  0016                     	;# 
  1374  0016                     	;# 
  1375  0017                     	;# 
  1376  0018                     	;# 
  1377  0019                     	;# 
  1378  001A                     	;# 
  1379  001B                     	;# 
  1380  001C                     	;# 
  1381  008C                     	;# 
  1382  008D                     	;# 
  1383  008E                     	;# 
  1384  0090                     	;# 
  1385  0091                     	;# 
  1386  0092                     	;# 
  1387  0095                     	;# 
  1388  0096                     	;# 
  1389  0097                     	;# 
  1390  0099                     	;# 
  1391  009A                     	;# 
  1392  009B                     	;# 
  1393  009B                     	;# 
  1394  009C                     	;# 
  1395  009D                     	;# 
  1396  009E                     	;# 
  1397  010C                     	;# 
  1398  010D                     	;# 
  1399  010E                     	;# 
  1400  0116                     	;# 
  1401  0117                     	;# 
  1402  011D                     	;# 
  1403  018C                     	;# 
  1404  018D                     	;# 
  1405  018E                     	;# 
  1406  0191                     	;# 
  1407  0191                     	;# 
  1408  0192                     	;# 
  1409  0193                     	;# 
  1410  0193                     	;# 
  1411  0194                     	;# 
  1412  0195                     	;# 
  1413  0196                     	;# 
  1414  0197                     	;# 
  1415  0199                     	;# 
  1416  019A                     	;# 
  1417  019B                     	;# 
  1418  019B                     	;# 
  1419  019B                     	;# 
  1420  019B                     	;# 
  1421  019C                     	;# 
  1422  019C                     	;# 
  1423  019D                     	;# 
  1424  019E                     	;# 
  1425  019F                     	;# 
  1426  020D                     	;# 
  1427  0210                     	;# 
  1428  0211                     	;# 
  1429  0211                     	;# 
  1430  0212                     	;# 
  1431  0212                     	;# 
  1432  0213                     	;# 
  1433  0213                     	;# 
  1434  0214                     	;# 
  1435  0214                     	;# 
  1436  0215                     	;# 
  1437  0215                     	;# 
  1438  0215                     	;# 
  1439  0216                     	;# 
  1440  0216                     	;# 
  1441  0217                     	;# 
  1442  0217                     	;# 
  1443  0291                     	;# 
  1444  0291                     	;# 
  1445  0292                     	;# 
  1446  0293                     	;# 
  1447  0298                     	;# 
  1448  0298                     	;# 
  1449  0299                     	;# 
  1450  029A                     	;# 
  1451  0394                     	;# 
  1452  0395                     	;# 
  1453  0396                     	;# 
  1454  0FE4                     	;# 
  1455  0FE5                     	;# 
  1456  0FE6                     	;# 
  1457  0FE7                     	;# 
  1458  0FE8                     	;# 
  1459  0FE9                     	;# 
  1460  0FEA                     	;# 
  1461  0FEB                     	;# 
  1462  0FED                     	;# 
  1463  0FEE                     	;# 
  1464  0FEF                     	;# 
  1465  0000                     	;# 
  1466  0001                     	;# 
  1467  0002                     	;# 
  1468  0003                     	;# 
  1469  0004                     	;# 
  1470  0005                     	;# 
  1471  0006                     	;# 
  1472  0007                     	;# 
  1473  0008                     	;# 
  1474  0009                     	;# 
  1475  000A                     	;# 
  1476  000B                     	;# 
  1477  000C                     	;# 
  1478  000D                     	;# 
  1479  000E                     	;# 
  1480  0010                     	;# 
  1481  0011                     	;# 
  1482  0012                     	;# 
  1483  0015                     	;# 
  1484  0016                     	;# 
  1485  0016                     	;# 
  1486  0017                     	;# 
  1487  0018                     	;# 
  1488  0019                     	;# 
  1489  001A                     	;# 
  1490  001B                     	;# 
  1491  001C                     	;# 
  1492  008C                     	;# 
  1493  008D                     	;# 
  1494  008E                     	;# 
  1495  0090                     	;# 
  1496  0091                     	;# 
  1497  0092                     	;# 
  1498  0095                     	;# 
  1499  0096                     	;# 
  1500  0097                     	;# 
  1501  0099                     	;# 
  1502  009A                     	;# 
  1503  009B                     	;# 
  1504  009B                     	;# 
  1505  009C                     	;# 
  1506  009D                     	;# 
  1507  009E                     	;# 
  1508  010C                     	;# 
  1509  010D                     	;# 
  1510  010E                     	;# 
  1511  0116                     	;# 
  1512  0117                     	;# 
  1513  011D                     	;# 
  1514  018C                     	;# 
  1515  018D                     	;# 
  1516  018E                     	;# 
  1517  0191                     	;# 
  1518  0191                     	;# 
  1519  0192                     	;# 
  1520  0193                     	;# 
  1521  0193                     	;# 
  1522  0194                     	;# 
  1523  0195                     	;# 
  1524  0196                     	;# 
  1525  0197                     	;# 
  1526  0199                     	;# 
  1527  019A                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019B                     	;# 
  1532  019C                     	;# 
  1533  019C                     	;# 
  1534  019D                     	;# 
  1535  019E                     	;# 
  1536  019F                     	;# 
  1537  020D                     	;# 
  1538  0210                     	;# 
  1539  0211                     	;# 
  1540  0211                     	;# 
  1541  0212                     	;# 
  1542  0212                     	;# 
  1543  0213                     	;# 
  1544  0213                     	;# 
  1545  0214                     	;# 
  1546  0214                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0216                     	;# 
  1551  0216                     	;# 
  1552  0217                     	;# 
  1553  0217                     	;# 
  1554  0291                     	;# 
  1555  0291                     	;# 
  1556  0292                     	;# 
  1557  0293                     	;# 
  1558  0298                     	;# 
  1559  0298                     	;# 
  1560  0299                     	;# 
  1561  029A                     	;# 
  1562  0394                     	;# 
  1563  0395                     	;# 
  1564  0396                     	;# 
  1565  0FE4                     	;# 
  1566  0FE5                     	;# 
  1567  0FE6                     	;# 
  1568  0FE7                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEB                     	;# 
  1573  0FED                     	;# 
  1574  0FEE                     	;# 
  1575  0FEF                     	;# 
  1576  0000                     	;# 
  1577  0001                     	;# 
  1578  0002                     	;# 
  1579  0003                     	;# 
  1580  0004                     	;# 
  1581  0005                     	;# 
  1582  0006                     	;# 
  1583  0007                     	;# 
  1584  0008                     	;# 
  1585  0009                     	;# 
  1586  000A                     	;# 
  1587  000B                     	;# 
  1588  000C                     	;# 
  1589  000D                     	;# 
  1590  000E                     	;# 
  1591  0010                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0015                     	;# 
  1595  0016                     	;# 
  1596  0016                     	;# 
  1597  0017                     	;# 
  1598  0018                     	;# 
  1599  0019                     	;# 
  1600  001A                     	;# 
  1601  001B                     	;# 
  1602  001C                     	;# 
  1603  008C                     	;# 
  1604  008D                     	;# 
  1605  008E                     	;# 
  1606  0090                     	;# 
  1607  0091                     	;# 
  1608  0092                     	;# 
  1609  0095                     	;# 
  1610  0096                     	;# 
  1611  0097                     	;# 
  1612  0099                     	;# 
  1613  009A                     	;# 
  1614  009B                     	;# 
  1615  009B                     	;# 
  1616  009C                     	;# 
  1617  009D                     	;# 
  1618  009E                     	;# 
  1619  010C                     	;# 
  1620  010D                     	;# 
  1621  010E                     	;# 
  1622  0116                     	;# 
  1623  0117                     	;# 
  1624  011D                     	;# 
  1625  018C                     	;# 
  1626  018D                     	;# 
  1627  018E                     	;# 
  1628  0191                     	;# 
  1629  0191                     	;# 
  1630  0192                     	;# 
  1631  0193                     	;# 
  1632  0193                     	;# 
  1633  0194                     	;# 
  1634  0195                     	;# 
  1635  0196                     	;# 
  1636  0197                     	;# 
  1637  0199                     	;# 
  1638  019A                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019C                     	;# 
  1644  019C                     	;# 
  1645  019D                     	;# 
  1646  019E                     	;# 
  1647  019F                     	;# 
  1648  020D                     	;# 
  1649  0210                     	;# 
  1650  0211                     	;# 
  1651  0211                     	;# 
  1652  0212                     	;# 
  1653  0212                     	;# 
  1654  0213                     	;# 
  1655  0213                     	;# 
  1656  0214                     	;# 
  1657  0214                     	;# 
  1658  0215                     	;# 
  1659  0215                     	;# 
  1660  0215                     	;# 
  1661  0216                     	;# 
  1662  0216                     	;# 
  1663  0217                     	;# 
  1664  0217                     	;# 
  1665  0291                     	;# 
  1666  0291                     	;# 
  1667  0292                     	;# 
  1668  0293                     	;# 
  1669  0298                     	;# 
  1670  0298                     	;# 
  1671  0299                     	;# 
  1672  029A                     	;# 
  1673  0394                     	;# 
  1674  0395                     	;# 
  1675  0396                     	;# 
  1676  0FE4                     	;# 
  1677  0FE5                     	;# 
  1678  0FE6                     	;# 
  1679  0FE7                     	;# 
  1680  0FE8                     	;# 
  1681  0FE9                     	;# 
  1682  0FEA                     	;# 
  1683  0FEB                     	;# 
  1684  0FED                     	;# 
  1685  0FEE                     	;# 
  1686  0FEF                     	;# 
  1687  0000                     	;# 
  1688  0001                     	;# 
  1689  0002                     	;# 
  1690  0003                     	;# 
  1691  0004                     	;# 
  1692  0005                     	;# 
  1693  0006                     	;# 
  1694  0007                     	;# 
  1695  0008                     	;# 
  1696  0009                     	;# 
  1697  000A                     	;# 
  1698  000B                     	;# 
  1699  000C                     	;# 
  1700  000D                     	;# 
  1701  000E                     	;# 
  1702  0010                     	;# 
  1703  0011                     	;# 
  1704  0012                     	;# 
  1705  0015                     	;# 
  1706  0016                     	;# 
  1707  0016                     	;# 
  1708  0017                     	;# 
  1709  0018                     	;# 
  1710  0019                     	;# 
  1711  001A                     	;# 
  1712  001B                     	;# 
  1713  001C                     	;# 
  1714  008C                     	;# 
  1715  008D                     	;# 
  1716  008E                     	;# 
  1717  0090                     	;# 
  1718  0091                     	;# 
  1719  0092                     	;# 
  1720  0095                     	;# 
  1721  0096                     	;# 
  1722  0097                     	;# 
  1723  0099                     	;# 
  1724  009A                     	;# 
  1725  009B                     	;# 
  1726  009B                     	;# 
  1727  009C                     	;# 
  1728  009D                     	;# 
  1729  009E                     	;# 
  1730  010C                     	;# 
  1731  010D                     	;# 
  1732  010E                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  011D                     	;# 
  1736  018C                     	;# 
  1737  018D                     	;# 
  1738  018E                     	;# 
  1739  0191                     	;# 
  1740  0191                     	;# 
  1741  0192                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0197                     	;# 
  1748  0199                     	;# 
  1749  019A                     	;# 
  1750  019B                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019B                     	;# 
  1754  019C                     	;# 
  1755  019C                     	;# 
  1756  019D                     	;# 
  1757  019E                     	;# 
  1758  019F                     	;# 
  1759  020D                     	;# 
  1760  0210                     	;# 
  1761  0211                     	;# 
  1762  0211                     	;# 
  1763  0212                     	;# 
  1764  0212                     	;# 
  1765  0213                     	;# 
  1766  0213                     	;# 
  1767  0214                     	;# 
  1768  0214                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0215                     	;# 
  1772  0216                     	;# 
  1773  0216                     	;# 
  1774  0217                     	;# 
  1775  0217                     	;# 
  1776  0291                     	;# 
  1777  0291                     	;# 
  1778  0292                     	;# 
  1779  0293                     	;# 
  1780  0298                     	;# 
  1781  0298                     	;# 
  1782  0299                     	;# 
  1783  029A                     	;# 
  1784  0394                     	;# 
  1785  0395                     	;# 
  1786  0396                     	;# 
  1787  0FE4                     	;# 
  1788  0FE5                     	;# 
  1789  0FE6                     	;# 
  1790  0FE7                     	;# 
  1791  0FE8                     	;# 
  1792  0FE9                     	;# 
  1793  0FEA                     	;# 
  1794  0FEB                     	;# 
  1795  0FED                     	;# 
  1796  0FEE                     	;# 
  1797  0FEF                     	;# 
  1798  0000                     	;# 
  1799  0001                     	;# 
  1800  0002                     	;# 
  1801  0003                     	;# 
  1802  0004                     	;# 
  1803  0005                     	;# 
  1804  0006                     	;# 
  1805  0007                     	;# 
  1806  0008                     	;# 
  1807  0009                     	;# 
  1808  000A                     	;# 
  1809  000B                     	;# 
  1810  000C                     	;# 
  1811  000D                     	;# 
  1812  000E                     	;# 
  1813  0010                     	;# 
  1814  0011                     	;# 
  1815  0012                     	;# 
  1816  0015                     	;# 
  1817  0016                     	;# 
  1818  0016                     	;# 
  1819  0017                     	;# 
  1820  0018                     	;# 
  1821  0019                     	;# 
  1822  001A                     	;# 
  1823  001B                     	;# 
  1824  001C                     	;# 
  1825  008C                     	;# 
  1826  008D                     	;# 
  1827  008E                     	;# 
  1828  0090                     	;# 
  1829  0091                     	;# 
  1830  0092                     	;# 
  1831  0095                     	;# 
  1832  0096                     	;# 
  1833  0097                     	;# 
  1834  0099                     	;# 
  1835  009A                     	;# 
  1836  009B                     	;# 
  1837  009B                     	;# 
  1838  009C                     	;# 
  1839  009D                     	;# 
  1840  009E                     	;# 
  1841  010C                     	;# 
  1842  010D                     	;# 
  1843  010E                     	;# 
  1844  0116                     	;# 
  1845  0117                     	;# 
  1846  011D                     	;# 
  1847  018C                     	;# 
  1848  018D                     	;# 
  1849  018E                     	;# 
  1850  0191                     	;# 
  1851  0191                     	;# 
  1852  0192                     	;# 
  1853  0193                     	;# 
  1854  0193                     	;# 
  1855  0194                     	;# 
  1856  0195                     	;# 
  1857  0196                     	;# 
  1858  0197                     	;# 
  1859  0199                     	;# 
  1860  019A                     	;# 
  1861  019B                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019B                     	;# 
  1865  019C                     	;# 
  1866  019C                     	;# 
  1867  019D                     	;# 
  1868  019E                     	;# 
  1869  019F                     	;# 
  1870  020D                     	;# 
  1871  0210                     	;# 
  1872  0211                     	;# 
  1873  0211                     	;# 
  1874  0212                     	;# 
  1875  0212                     	;# 
  1876  0213                     	;# 
  1877  0213                     	;# 
  1878  0214                     	;# 
  1879  0214                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0215                     	;# 
  1883  0216                     	;# 
  1884  0216                     	;# 
  1885  0217                     	;# 
  1886  0217                     	;# 
  1887  0291                     	;# 
  1888  0291                     	;# 
  1889  0292                     	;# 
  1890  0293                     	;# 
  1891  0298                     	;# 
  1892  0298                     	;# 
  1893  0299                     	;# 
  1894  029A                     	;# 
  1895  0394                     	;# 
  1896  0395                     	;# 
  1897  0396                     	;# 
  1898  0FE4                     	;# 
  1899  0FE5                     	;# 
  1900  0FE6                     	;# 
  1901  0FE7                     	;# 
  1902  0FE8                     	;# 
  1903  0FE9                     	;# 
  1904  0FEA                     	;# 
  1905  0FEB                     	;# 
  1906  0FED                     	;# 
  1907  0FEE                     	;# 
  1908  0FEF                     	;# 
  1909  0000                     	;# 
  1910  0001                     	;# 
  1911  0002                     	;# 
  1912  0003                     	;# 
  1913  0004                     	;# 
  1914  0005                     	;# 
  1915  0006                     	;# 
  1916  0007                     	;# 
  1917  0008                     	;# 
  1918  0009                     	;# 
  1919  000A                     	;# 
  1920  000B                     	;# 
  1921  000C                     	;# 
  1922  000D                     	;# 
  1923  000E                     	;# 
  1924  0010                     	;# 
  1925  0011                     	;# 
  1926  0012                     	;# 
  1927  0015                     	;# 
  1928  0016                     	;# 
  1929  0016                     	;# 
  1930  0017                     	;# 
  1931  0018                     	;# 
  1932  0019                     	;# 
  1933  001A                     	;# 
  1934  001B                     	;# 
  1935  001C                     	;# 
  1936  008C                     	;# 
  1937  008D                     	;# 
  1938  008E                     	;# 
  1939  0090                     	;# 
  1940  0091                     	;# 
  1941  0092                     	;# 
  1942  0095                     	;# 
  1943  0096                     	;# 
  1944  0097                     	;# 
  1945  0099                     	;# 
  1946  009A                     	;# 
  1947  009B                     	;# 
  1948  009B                     	;# 
  1949  009C                     	;# 
  1950  009D                     	;# 
  1951  009E                     	;# 
  1952  010C                     	;# 
  1953  010D                     	;# 
  1954  010E                     	;# 
  1955  0116                     	;# 
  1956  0117                     	;# 
  1957  011D                     	;# 
  1958  018C                     	;# 
  1959  018D                     	;# 
  1960  018E                     	;# 
  1961  0191                     	;# 
  1962  0191                     	;# 
  1963  0192                     	;# 
  1964  0193                     	;# 
  1965  0193                     	;# 
  1966  0194                     	;# 
  1967  0195                     	;# 
  1968  0196                     	;# 
  1969  0197                     	;# 
  1970  0199                     	;# 
  1971  019A                     	;# 
  1972  019B                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019B                     	;# 
  1976  019C                     	;# 
  1977  019C                     	;# 
  1978  019D                     	;# 
  1979  019E                     	;# 
  1980  019F                     	;# 
  1981  020D                     	;# 
  1982  0210                     	;# 
  1983  0211                     	;# 
  1984  0211                     	;# 
  1985  0212                     	;# 
  1986  0212                     	;# 
  1987  0213                     	;# 
  1988  0213                     	;# 
  1989  0214                     	;# 
  1990  0214                     	;# 
  1991  0215                     	;# 
  1992  0215                     	;# 
  1993  0215                     	;# 
  1994  0216                     	;# 
  1995  0216                     	;# 
  1996  0217                     	;# 
  1997  0217                     	;# 
  1998  0291                     	;# 
  1999  0291                     	;# 
  2000  0292                     	;# 
  2001  0293                     	;# 
  2002  0298                     	;# 
  2003  0298                     	;# 
  2004  0299                     	;# 
  2005  029A                     	;# 
  2006  0394                     	;# 
  2007  0395                     	;# 
  2008  0396                     	;# 
  2009  0FE4                     	;# 
  2010  0FE5                     	;# 
  2011  0FE6                     	;# 
  2012  0FE7                     	;# 
  2013  0FE8                     	;# 
  2014  0FE9                     	;# 
  2015  0FEA                     	;# 
  2016  0FEB                     	;# 
  2017  0FED                     	;# 
  2018  0FEE                     	;# 
  2019  0FEF                     	;# 
  2020                           
  2021                           	psect	idataBANK3
  2022  1295                     __pidataBANK3:	
  2023                           
  2024                           ;initializer for __product
  2025  1295  3463               	retlw	99
  2026  1296  3402               	retlw	2
  2027  1297  3400               	retlw	0
  2028  1298  3400               	retlw	0
  2029  1299  3400               	retlw	0
  2030  129A  3400               	retlw	0
  2031  129B  3400               	retlw	0
  2032  129C  3400               	retlw	0
  2033  129D  3400               	retlw	0
  2034  129E  3400               	retlw	0
  2035  129F  3400               	retlw	0
  2036  12A0  3400               	retlw	0
  2037  12A1  34FF               	retlw	255
  2038  12A2  34FF               	retlw	255
  2039  12A3  34FF               	retlw	255
  2040  12A4  3400               	retlw	0
  2041  12A5  3400               	retlw	0
  2042  12A6  3400               	retlw	0
  2043  12A7  3400               	retlw	0
  2044  12A8  3400               	retlw	0
  2045  12A9  3400               	retlw	0
  2046  12AA  3400               	retlw	0
  2047  12AB  3400               	retlw	0
  2048  12AC  3400               	retlw	0
  2049  12AD  3400               	retlw	0
  2050  12AE  3400               	retlw	0
  2051  12AF  3400               	retlw	0
  2052  12B0  3400               	retlw	0
  2053  12B1  3400               	retlw	0
  2054  12B2  3400               	retlw	0
  2055  12B3  3400               	retlw	0
  2056  12B4  3400               	retlw	0
  2057                           
  2058                           	psect	stringtext
  2059  1000                     __pstringtext:	
  2060  1000                     _CC2500_registers_address:	
  2061  1000  3403               	retlw	3
  2062  1001  3416               	retlw	22
  2063  1002  3417               	retlw	23
  2064  1003  341E               	retlw	30
  2065  1004  341F               	retlw	31
  2066  1005  3420               	retlw	32
  2067  1006  342A               	retlw	42
  2068  1007  342B               	retlw	43
  2069  1008  340B               	retlw	11
  2070  1009  340C               	retlw	12
  2071  100A  340D               	retlw	13
  2072  100B  340E               	retlw	14
  2073  100C  340F               	retlw	15
  2074  100D  3410               	retlw	16
  2075  100E  3411               	retlw	17
  2076  100F  3412               	retlw	18
  2077  1010  3413               	retlw	19
  2078  1011  3414               	retlw	20
  2079  1012  340A               	retlw	10
  2080  1013  3415               	retlw	21
  2081  1014  3421               	retlw	33
  2082  1015  3422               	retlw	34
  2083  1016  3418               	retlw	24
  2084  1017  3419               	retlw	25
  2085  1018  341A               	retlw	26
  2086  1019  341B               	retlw	27
  2087  101A  341C               	retlw	28
  2088  101B  341D               	retlw	29
  2089  101C  3423               	retlw	35
  2090  101D  3424               	retlw	36
  2091  101E  3425               	retlw	37
  2092  101F  3426               	retlw	38
  2093  1020  3429               	retlw	41
  2094  1021  342C               	retlw	44
  2095  1022  342D               	retlw	45
  2096  1023  342E               	retlw	46
  2097  1024  3400               	retlw	0
  2098  1025  3401               	retlw	1
  2099  1026  3402               	retlw	2
  2100  1027  3407               	retlw	7
  2101  1028  3408               	retlw	8
  2102  1029  3409               	retlw	9
  2103  102A  3406               	retlw	6
  2104  102B  3404               	retlw	4
  2105  102C  3405               	retlw	5
  2106  102D  3427               	retlw	39
  2107  102E  3428               	retlw	40
  2108  102F                     __end_of_CC2500_registers_address:	
  2109  102F                     _CC2500_rfSettings:	
  2110  102F  3407               	retlw	7
  2111  1030  3407               	retlw	7
  2112  1031  3430               	retlw	48
  2113  1032  3487               	retlw	135
  2114  1033  346B               	retlw	107
  2115  1034  34F8               	retlw	248
  2116  1035  347F               	retlw	127
  2117  1036  343F               	retlw	63
  2118  1037  3409               	retlw	9
  2119  1038  3400               	retlw	0
  2120  1039  345C               	retlw	92
  2121  103A  34A7               	retlw	167
  2122  103B  3462               	retlw	98
  2123  103C  3486               	retlw	134
  2124  103D  3483               	retlw	131
  2125  103E  3403               	retlw	3
  2126  103F  3422               	retlw	34
  2127  1040  34F8               	retlw	248
  2128  1041  3400               	retlw	0
  2129  1042  3444               	retlw	68
  2130  1043  34B6               	retlw	182
  2131  1044  3410               	retlw	16
  2132  1045  3418               	retlw	24
  2133  1046  341D               	retlw	29
  2134  1047  341C               	retlw	28
  2135  1048  34C7               	retlw	199
  2136  1049  3400               	retlw	0
  2137  104A  34B2               	retlw	178
  2138  104B  34EA               	retlw	234
  2139  104C  340A               	retlw	10
  2140  104D  3400               	retlw	0
  2141  104E  3411               	retlw	17
  2142  104F  3459               	retlw	89
  2143  1050  3488               	retlw	136
  2144  1051  3431               	retlw	49
  2145  1052  340B               	retlw	11
  2146  1053  342F               	retlw	47
  2147  1054  342E               	retlw	46
  2148  1055  3406               	retlw	6
  2149  1056  3404               	retlw	4
  2150  1057  3405               	retlw	5
  2151  1058  3400               	retlw	0
  2152  1059  3430               	retlw	48
  2153  105A  34D3               	retlw	211
  2154  105B  3491               	retlw	145
  2155  105C  3441               	retlw	65
  2156  105D  3400               	retlw	0
  2157  105E                     __end_of_CC2500_rfSettings:	
  2158  105E                     _CC2500_patable_vaule:	
  2159  105E  34FE               	retlw	254
  2160  105F  34FE               	retlw	254
  2161  1060  34FE               	retlw	254
  2162  1061  34FE               	retlw	254
  2163  1062  34FE               	retlw	254
  2164  1063  34FE               	retlw	254
  2165  1064  34FE               	retlw	254
  2166  1065  34FE               	retlw	254
  2167  1066                     __end_of_CC2500_patable_vaule:	
  2168                           
  2169                           	psect	nvCOMMON
  2170  007D                     __pnvCOMMON:	
  2171  007D                     _product:	
  2172  007D                     	ds	1
  2173                           
  2174                           	psect	nvBANK1
  2175  00EC                     __pnvBANK1:	
  2176  00EC                     _Timer0:	
  2177  00EC                     	ds	1
  2178  00ED                     _WDT:	
  2179  00ED                     	ds	1
  2180  00EE                     _myMain:	
  2181  00EE                     	ds	1
  2182  00EF                     _Memory:	
  2183  00EF                     	ds	1
  2184  000C                     _PORTA	set	12
  2185  000D                     _PORTB	set	13
  2186  000E                     _PORTC	set	14
  2187  0015                     _TMR0	set	21
  2188  005F                     _GIE	set	95
  2189  005C                     _INTE	set	92
  2190  0059                     _INTF	set	89
  2191  005B                     _IOCIE	set	91
  2192  0058                     _IOCIF	set	88
  2193  005E                     _PEIE	set	94
  2194  0060                     _RA0	set	96
  2195  0063                     _RA3	set	99
  2196  0064                     _RA4	set	100
  2197  0066                     _RA6	set	102
  2198  0067                     _RA7	set	103
  2199  0068                     _RB0	set	104
  2200  0069                     _RB1	set	105
  2201  006B                     _RB3	set	107
  2202  006C                     _RB4	set	108
  2203  006D                     _RB5	set	109
  2204  0070                     _RC0	set	112
  2205  0071                     _RC1	set	113
  2206  0072                     _RC2	set	114
  2207  0074                     _RC4	set	116
  2208  0075                     _RC5	set	117
  2209  0076                     _RC6	set	118
  2210  0077                     _RC7	set	119
  2211  005D                     _TMR0IE	set	93
  2212  005A                     _TMR0IF	set	90
  2213  009D                     _ADCON0	set	157
  2214  009E                     _ADCON1	set	158
  2215  009C                     _ADRESH	set	156
  2216  009B                     _ADRESL	set	155
  2217  0095                     _OPTION_REG	set	149
  2218  0099                     _OSCCON	set	153
  2219  008C                     _TRISA	set	140
  2220  008D                     _TRISB	set	141
  2221  008E                     _TRISC	set	142
  2222  0097                     _WDTCON	set	151
  2223  04E9                     _GO_nDONE	set	1257
  2224  0117                     _FVRCON	set	279
  2225  010C                     _LATA	set	268
  2226  010D                     _LATB	set	269
  2227  010E                     _LATC	set	270
  2228  018C                     _ANSELA	set	396
  2229  018D                     _ANSELB	set	397
  2230  018E                     _ANSELC	set	398
  2231  0192                     _PMADRH	set	402
  2232  0191                     _PMADRL	set	401
  2233  0196                     _PMCON2	set	406
  2234  0194                     _PMDATH	set	404
  2235  0193                     _PMDATL	set	403
  2236  0CAE                     _CFGS	set	3246
  2237  0CAC                     _FREE	set	3244
  2238  0CAD                     _LWLO	set	3245
  2239  0CA8                     _RD	set	3240
  2240  0CA9                     _WR	set	3241
  2241  0CAA                     _WREN	set	3242
  2242  1068                     _WPUB0	set	4200
  2243  1069                     _WPUB1	set	4201
  2244  106A                     _WPUB2	set	4202
  2245  0396                     _IOCBF	set	918
  2246  0395                     _IOCBN	set	917
  2247  0394                     _IOCBP	set	916
  2248  1CB2                     _IOCBF2	set	7346
  2249                           
  2250                           ; #config settings
  2251  0000                     
  2252                           	psect	cinit
  2253  0018                     start_initialization:	
  2254  0018                     __initialization:	
  2255                           
  2256                           ; Clear objects allocated to BITCOMMON
  2257  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2258                           
  2259                           ; Clear objects allocated to COMMON
  2260  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2261  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2262  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2263  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2264                           
  2265                           ; Clear objects allocated to BANK1
  2266  001D  30A0               	movlw	low __pbssBANK1
  2267  001E  0084               	movwf	4
  2268  001F  3000               	movlw	high __pbssBANK1
  2269  0020  0085               	movwf	5
  2270  0021  304C               	movlw	76
  2271  0022  319E  263E  3180   	fcall	clear_ram0
  2272                           
  2273                           ; Clear objects allocated to BANK2
  2274  0025  3020               	movlw	low __pbssBANK2
  2275  0026  0084               	movwf	4
  2276  0027  3001               	movlw	high __pbssBANK2
  2277  0028  0085               	movwf	5
  2278  0029  3048               	movlw	72
  2279  002A  319E  263E  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK3
  2282  002D  30C0               	movlw	low __pbssBANK3
  2283  002E  0084               	movwf	4
  2284  002F  3001               	movlw	high __pbssBANK3
  2285  0030  0085               	movwf	5
  2286  0031  301C               	movlw	28
  2287  0032  319E  263E  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK4
  2290  0035  3020               	movlw	low __pbssBANK4
  2291  0036  0084               	movwf	4
  2292  0037  3002               	movlw	high __pbssBANK4
  2293  0038  0085               	movwf	5
  2294  0039  3025               	movlw	37
  2295  003A  319E  263E  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Initialize objects allocated to BANK3
  2298  003D  3095               	movlw	low __pidataBANK3
  2299  003E  0084               	movwf	4
  2300  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2301  0040  0085               	movwf	5
  2302  0041  30A0               	movlw	low __pdataBANK3
  2303  0042  0086               	movwf	6
  2304  0043  3001               	movlw	high __pdataBANK3
  2305  0044  0087               	movwf	7
  2306  0045  3020               	movlw	32
  2307  0046  319E  2638         	fcall	init_ram
  2308  0048                     end_of_initialization:	
  2309                           ;End of C runtime variable initialization code
  2310                           
  2311  0048                     __end_of__initialization:	
  2312  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2313  0049  0020               	movlb	0
  2314  004A  3196  2EBD         	ljmp	_main	;jump to C main() function
  2315                           
  2316                           	psect	bitbssCOMMON
  2317  03E0                     __pbitbssCOMMON:	
  2318  03E0                     _Receive_OK:	
  2319  03E0                     	ds	1
  2320  03E1                     _Transceive_OK:	
  2321  03E1                     	ds	1
  2322                           
  2323                           	psect	bssCOMMON
  2324  0078                     __pbssCOMMON:	
  2325  0078                     _DimmerLights:	
  2326  0078                     	ds	1
  2327  0079                     _DimmerLightsIntr:	
  2328  0079                     	ds	1
  2329  007A                     _RF:	
  2330  007A                     	ds	1
  2331  007B                     _Sw:	
  2332  007B                     	ds	1
  2333                           
  2334                           	psect	bssBANK1
  2335  00A0                     __pbssBANK1:	
  2336  00A0                     _RF_Data:	
  2337  00A0                     	ds	21
  2338  00B5                     _RF_Count:	
  2339  00B5                     	ds	2
  2340  00B7                     _Buz:	
  2341  00B7                     	ds	1
  2342  00B8                     _CRC:	
  2343  00B8                     	ds	1
  2344  00B9                     _Dimmer:	
  2345  00B9                     	ds	1
  2346  00BA                     _DimmerLights11:	
  2347  00BA                     	ds	1
  2348  00BB                     _DimmerLights22:	
  2349  00BB                     	ds	1
  2350  00BC                     _DimmerLights33:	
  2351  00BC                     	ds	1
  2352  00BD                     _DimmerLightsIntrIOC:	
  2353  00BD                     	ds	1
  2354  00BE                     _LED:	
  2355  00BE                     	ds	1
  2356  00BF                     _RFSW:	
  2357  00BF                     	ds	1
  2358  00C0                     _RSSI:	
  2359  00C0                     	ds	1
  2360  00C1                     _Rx_Length:	
  2361  00C1                     	ds	1
  2362  00C2                     _SPI0Buffer:	
  2363  00C2                     	ds	1
  2364  00C3                     _Tx_Length:	
  2365  00C3                     	ds	1
  2366  00C4                     _r_address:	
  2367  00C4                     	ds	1
  2368  00C5                     _r_data:	
  2369  00C5                     	ds	1
  2370  00C6                     _s_data:	
  2371  00C6                     	ds	1
  2372  00C7                     _VarTimer0:	
  2373  00C7                     	ds	8
  2374  00CF                     _RF1:	
  2375  00CF                     	ds	5
  2376  00D4                     _VarErrLED:	
  2377  00D4                     	ds	4
  2378  00D8                     _VarLED1:	
  2379  00D8                     	ds	4
  2380  00DC                     _VarLED2:	
  2381  00DC                     	ds	4
  2382  00E0                     _VarLED3:	
  2383  00E0                     	ds	4
  2384  00E4                     _Dimmer1:	
  2385  00E4                     	ds	3
  2386  00E7                     __WDT:	
  2387  00E7                     	ds	2
  2388  00E9                     _RFSW1:	
  2389  00E9                     	ds	1
  2390  00EA                     _RFSW2:	
  2391  00EA                     	ds	1
  2392  00EB                     _RFSW3:	
  2393  00EB                     	ds	1
  2394                           
  2395                           	psect	bssBANK2
  2396  0120                     __pbssBANK2:	
  2397  0120                     _DimmerLights1:	
  2398  0120                     	ds	15
  2399  012F                     _DimmerLights2:	
  2400  012F                     	ds	15
  2401  013E                     _DimmerLights3:	
  2402  013E                     	ds	15
  2403  014D                     _Sw1:	
  2404  014D                     	ds	9
  2405  0156                     _Sw2:	
  2406  0156                     	ds	9
  2407  015F                     _Sw3:	
  2408  015F                     	ds	9
  2409                           
  2410                           	psect	bssBANK3
  2411  01C0                     __pbssBANK3:	
  2412  01C0                     __myMain:	
  2413  01C0                     	ds	16
  2414  01D0                     _Buz1:	
  2415  01D0                     	ds	12
  2416                           
  2417                           	psect	dataBANK3
  2418  01A0                     __pdataBANK3:	
  2419  01A0                     __product:	
  2420  01A0                     	ds	32
  2421                           
  2422                           	psect	bssBANK4
  2423  0220                     __pbssBANK4:	
  2424  0220                     _VarMemory:	
  2425  0220                     	ds	37
  2426                           
  2427                           	psect	clrtext
  2428  1E3E                     clear_ram0:	
  2429                           ;	Called with FSR0 containing the base address, and
  2430                           ;	WREG with the size to clear
  2431                           
  2432  1E3E  0064               	clrwdt	;clear the watchdog before getting into this loop
  2433  1E3F                     clrloop0:	
  2434  1E3F  0180               	clrf	0	;clear RAM location pointed to by FSR
  2435  1E40  3101               	addfsr 0,1
  2436  1E41  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2437  1E42  2E3F               	goto	clrloop0	;have we reached the end yet?
  2438  1E43  3400               	retlw	0	;all done for this memory range, return
  2439                           
  2440                           	psect	inittext
  2441  1E38                     init_ram:	
  2442  1E38  00FE               	movwf	126
  2443  1E39                     initloop:	
  2444  1E39  0012               	moviw fsr0++
  2445  1E3A  001E               	movwi fsr1++
  2446  1E3B  0BFE               	decfsz	126,f
  2447  1E3C  2E39               	goto	initloop
  2448  1E3D  3400               	retlw	0
  2449                           
  2450                           	psect	cstackCOMMON
  2451  0070                     __pcstackCOMMON:	
  2452  0070                     ?_CC2500_WriteByte:	
  2453  0070                     ?_CC2500_WriteCommand:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_ReadStatus:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ReadByte:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_PowerRST:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_InitSetREG:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_InitPATable:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_ClearTXFIFO:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_ClearRXFIFO:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_FrequencyCabr:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_SIDLEMode:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_setDimmerLights_Initialization:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_Dimmer_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_setMemory_GO:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setDimmerLights_Main:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setTxData:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setLED_Initialization:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setLED_Main:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_Fosc_Set:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_IO_Set:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_TMR0_Set:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_ADC_Set:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_INT_Set:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_IOC_Set:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_WDT_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_IOC_ISR:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_TMR0_ISR:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_INT_ISR:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_Flash_Memory_Write:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_Flash_Memory_Modify:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_WDT_Clearing:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_myMain_Initialization:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_Switch_Initialization:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_RF_Initialization:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_my_Main:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_Switch_Main:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_RF_Main:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setSw_Enable:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setRF_Initialization:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_RF_RxDisable:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_getRxData:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setLog_Code:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_setControl_Lights_Table:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setRFSW_Control:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setRFSW_AdjControl:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_DimmerValue:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setSw_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setSw_Main:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_Sw_DimmerOnFunc:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_Sw_DimmerAdjFunc:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_Sw_DimmerOffFunc:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Buzzer_Initialization:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Buz_Counter:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ??_Buz_Counter:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buzzer_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_TxData:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_RxData:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_PowerOnInitial:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DimmerIntrIOCPointSelect:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ??_DimmerIntrIOCPointSelect:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerIntrPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ??_DimmerIntrPointSelect:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_IntrControl:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerLightsPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DimmerLights_Initialization:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DimmerLights_Close:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerLights_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setDimmerLights_AdjRF:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_LedPointSelect:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_LED_Initialization:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_LED_Main:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_Mcu_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_ISR:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_setDimmerReClock:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Flash_Memory_Unlock:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Erasing:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_WDT_Main:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_RfPointSelect:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_RfSWPointSelect:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_TouchPower:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_SwPointSelect:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?i1_RfPointSelect:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ??i1_RfPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getDimmerLights_StatusFlag:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getPercentValue:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_Flash_Memory_Read:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ?_setPercentValue:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     setRF_Initialization@rf:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0x0
  2728  0070                     	ds	1
  2729  0071                     DimmerIntrIOCPointSelect@lights:	
  2730  0071                     DimmerIntrPointSelect@lights:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0071                     i1RfPointSelect@rf:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736                           
  2737                           ; 1 bytes @ 0x1
  2738  0071                     	ds	1
  2739  0072                     ?_setRF_ReceiveGO:	
  2740  0072                     ?_setRF_RxStatus:	
  2741                           ; 0 bytes @ 0x2
  2742                           
  2743  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2744                           ; 0 bytes @ 0x2
  2745                           
  2746  0072                     ??_setDimmerLights_IntrControl:	
  2747                           ; 0 bytes @ 0x2
  2748                           
  2749  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2750                           ; 0 bytes @ 0x2
  2751                           
  2752  0072                     setRF_ReceiveGO@command:	
  2753                           ; 1 bytes @ 0x2
  2754                           
  2755  0072                     setRF_RxStatus@command:	
  2756                           ; 1 bytes @ 0x2
  2757                           
  2758                           
  2759                           ; 1 bytes @ 0x2
  2760  0072                     	ds	1
  2761  0073                     ??_IOC_ISR:	
  2762  0073                     ??_setRF_ReceiveGO:	
  2763                           ; 0 bytes @ 0x3
  2764                           
  2765  0073                     ??_setRF_RxStatus:	
  2766                           ; 0 bytes @ 0x3
  2767                           
  2768  0073                     ??_setDimmerReClock:	
  2769                           ; 0 bytes @ 0x3
  2770                           
  2771  0073                     setRF_ReceiveGO@rf:	
  2772                           ; 0 bytes @ 0x3
  2773                           
  2774  0073                     setRF_RxStatus@rf:	
  2775                           ; 1 bytes @ 0x3
  2776                           
  2777                           
  2778                           ; 1 bytes @ 0x3
  2779  0073                     	ds	1
  2780  0074                     ??_INT_ISR:	
  2781                           
  2782                           ; 0 bytes @ 0x4
  2783  0074                     	ds	2
  2784  0076                     setDimmerLights_IntrControl@lights:	
  2785                           
  2786                           ; 1 bytes @ 0x6
  2787  0076                     	ds	1
  2788  0077                     ??_TMR0_ISR:	
  2789  0077                     ??_ISR:	
  2790                           ; 0 bytes @ 0x7
  2791                           
  2792                           
  2793                           ; 0 bytes @ 0x7
  2794  0077                     	ds	1
  2795                           
  2796                           	psect	cstackBANK0
  2797  0020                     __pcstackBANK0:	
  2798  0020                     ??_CC2500_WriteByte:	
  2799  0020                     ??_CC2500_ReadByte:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ?_DelayTime_1us:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_Dimmer_Initialization:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_getDimmerLights_StatusFlag:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setMemory_GO:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_Fosc_Set:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_IO_Set:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_TMR0_Set:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_ADC_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_INT_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_IOC_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_WDT_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_Flash_Memory_Read:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Write:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_WDT_Clearing:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_myMain_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_setRF_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_Buzzer_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_Buzzer_Main:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_DimmerLightsPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_LedPointSelect:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Flash_Memory_Unlock:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Flash_Memory_Erasing:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_WDT_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_RfPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_RfSWPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_TouchPower:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_SwPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ?___awdiv:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ?___ftpack:	
  2887                           ; 2 bytes @ 0x0
  2888                           
  2889  0020                     DelayTime_1us@count:	
  2890                           ; 3 bytes @ 0x0
  2891                           
  2892  0020                     ___awdiv@divisor:	
  2893                           ; 2 bytes @ 0x0
  2894                           
  2895  0020                     ___ftpack@arg:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898                           
  2899                           ; 3 bytes @ 0x0
  2900  0020                     	ds	1
  2901  0021                     ??_RF_Initialization:	
  2902  0021                     ??_Mcu_Initialization:	
  2903                           ; 0 bytes @ 0x1
  2904                           
  2905  0021                     CC2500_WriteByte@loop_a:	
  2906                           ; 0 bytes @ 0x1
  2907                           
  2908  0021                     CC2500_ReadByte@loop_b:	
  2909                           ; 1 bytes @ 0x1
  2910                           
  2911  0021                     DimmerLightsPointSelect@lights:	
  2912                           ; 1 bytes @ 0x1
  2913                           
  2914  0021                     getDimmerLights_StatusFlag@Status:	
  2915                           ; 1 bytes @ 0x1
  2916                           
  2917  0021                     LedPointSelect@led:	
  2918                           ; 1 bytes @ 0x1
  2919                           
  2920  0021                     Flash_Memory_Read@i:	
  2921                           ; 1 bytes @ 0x1
  2922                           
  2923  0021                     Flash_Memory_Write@i:	
  2924                           ; 1 bytes @ 0x1
  2925                           
  2926  0021                     RfPointSelect@rf:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929  0021                     RfSWPointSelect@sw:	
  2930                           ; 1 bytes @ 0x1
  2931                           
  2932  0021                     SwPointSelect@sw:	
  2933                           ; 1 bytes @ 0x1
  2934                           
  2935                           
  2936                           ; 1 bytes @ 0x1
  2937  0021                     	ds	1
  2938  0022                     ??_CC2500_WriteCommand:	
  2939  0022                     ??_CC2500_ReadStatus:	
  2940                           ; 0 bytes @ 0x2
  2941                           
  2942  0022                     ??_DelayTime_1us:	
  2943                           ; 0 bytes @ 0x2
  2944                           
  2945  0022                     ?_CC2500_WriteREG:	
  2946                           ; 0 bytes @ 0x2
  2947                           
  2948  0022                     ??_setDimmerLights_Initialization:	
  2949                           ; 0 bytes @ 0x2
  2950                           
  2951  0022                     ?_setLED:	
  2952                           ; 0 bytes @ 0x2
  2953                           
  2954  0022                     ?_setSw_Status:	
  2955                           ; 0 bytes @ 0x2
  2956                           
  2957  0022                     ?_setRFSW_Status:	
  2958                           ; 0 bytes @ 0x2
  2959                           
  2960  0022                     ??_setTxData:	
  2961                           ; 0 bytes @ 0x2
  2962                           
  2963  0022                     ??_setLED_Main:	
  2964                           ; 0 bytes @ 0x2
  2965                           
  2966  0022                     ??_setSw_Enable:	
  2967                           ; 0 bytes @ 0x2
  2968                           
  2969  0022                     ?_setRF_Enable:	
  2970                           ; 0 bytes @ 0x2
  2971                           
  2972  0022                     ?_setDimmerLights_Switch:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975  0022                     ?_setDimmerLights_AdjGo:	
  2976                           ; 0 bytes @ 0x2
  2977                           
  2978  0022                     ?_setDimmerLights_Trigger:	
  2979                           ; 0 bytes @ 0x2
  2980                           
  2981  0022                     ?_setDimmerLights_TriggerAdj:	
  2982                           ; 0 bytes @ 0x2
  2983                           
  2984  0022                     ?_setRF_Learn:	
  2985                           ; 0 bytes @ 0x2
  2986                           
  2987  0022                     CC2500_WriteREG@value:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0022                     _getDimmerLights_StatusFlag$1916:	
  2991                           ; 1 bytes @ 0x2
  2992                           
  2993  0022                     setDimmerLights_Switch@command:	
  2994                           ; 1 bytes @ 0x2
  2995                           
  2996  0022                     setDimmerLights_AdjGo@command:	
  2997                           ; 1 bytes @ 0x2
  2998                           
  2999  0022                     setDimmerLights_Trigger@command:	
  3000                           ; 1 bytes @ 0x2
  3001                           
  3002  0022                     setDimmerLights_TriggerAdj@command:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     setLED@command:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     Flash_Memory_Read@address:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     setMemory_GO@command:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     setRF_Learn@command:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     setRF_Enable@command:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     setRFSW_Status@command:	
  3021                           ; 1 bytes @ 0x2
  3022                           
  3023  0022                     setSw_Enable@command:	
  3024                           ; 1 bytes @ 0x2
  3025                           
  3026  0022                     setSw_Status@command:	
  3027                           ; 1 bytes @ 0x2
  3028                           
  3029  0022                     DelayTime_1us@i:	
  3030                           ; 1 bytes @ 0x2
  3031                           
  3032  0022                     ___awdiv@dividend:	
  3033                           ; 2 bytes @ 0x2
  3034                           
  3035                           
  3036                           ; 2 bytes @ 0x2
  3037  0022                     	ds	1
  3038  0023                     ??_CC2500_WriteREG:	
  3039  0023                     ??_setLED:	
  3040                           ; 0 bytes @ 0x3
  3041                           
  3042  0023                     ??_setSw_Status:	
  3043                           ; 0 bytes @ 0x3
  3044                           
  3045  0023                     ??_setRFSW_Status:	
  3046                           ; 0 bytes @ 0x3
  3047                           
  3048  0023                     ??_setRF_Enable:	
  3049                           ; 0 bytes @ 0x3
  3050                           
  3051  0023                     ??_DimmerLights_Close:	
  3052                           ; 0 bytes @ 0x3
  3053                           
  3054  0023                     ??_setDimmerLights_Switch:	
  3055                           ; 0 bytes @ 0x3
  3056                           
  3057  0023                     ??_setDimmerLights_AdjGo:	
  3058                           ; 0 bytes @ 0x3
  3059                           
  3060  0023                     ??_setDimmerLights_Trigger:	
  3061                           ; 0 bytes @ 0x3
  3062                           
  3063  0023                     ??_setDimmerLights_TriggerAdj:	
  3064                           ; 0 bytes @ 0x3
  3065                           
  3066  0023                     ??_setRF_Learn:	
  3067                           ; 0 bytes @ 0x3
  3068                           
  3069  0023                     CC2500_WriteCommand@command:	
  3070                           ; 0 bytes @ 0x3
  3071                           
  3072  0023                     CC2500_ReadStatus@status_addr:	
  3073                           ; 1 bytes @ 0x3
  3074                           
  3075  0023                     setDimmerLights_Initialization@lights:	
  3076                           ; 1 bytes @ 0x3
  3077                           
  3078  0023                     setDimmerLights_Switch@lights:	
  3079                           ; 1 bytes @ 0x3
  3080                           
  3081  0023                     setDimmerLights_AdjGo@lights:	
  3082                           ; 1 bytes @ 0x3
  3083                           
  3084  0023                     setDimmerLights_Trigger@lights:	
  3085                           ; 1 bytes @ 0x3
  3086                           
  3087  0023                     setDimmerLights_TriggerAdj@lights:	
  3088                           ; 1 bytes @ 0x3
  3089                           
  3090  0023                     setLED@led:	
  3091                           ; 1 bytes @ 0x3
  3092                           
  3093  0023                     Flash_Memory_Read@ret:	
  3094                           ; 1 bytes @ 0x3
  3095                           
  3096  0023                     setRF_Learn@rf:	
  3097                           ; 1 bytes @ 0x3
  3098                           
  3099  0023                     setTxData@rf:	
  3100                           ; 1 bytes @ 0x3
  3101                           
  3102  0023                     setRF_Enable@rf:	
  3103                           ; 1 bytes @ 0x3
  3104                           
  3105  0023                     setRFSW_Status@sw:	
  3106                           ; 1 bytes @ 0x3
  3107                           
  3108  0023                     setSw_Status@sw:	
  3109                           ; 1 bytes @ 0x3
  3110                           
  3111  0023                     ___ftpack@exp:	
  3112                           ; 1 bytes @ 0x3
  3113                           
  3114                           
  3115                           ; 1 bytes @ 0x3
  3116  0023                     	ds	1
  3117  0024                     ??_CC2500_ClearTXFIFO:	
  3118  0024                     ??_CC2500_ClearRXFIFO:	
  3119                           ; 0 bytes @ 0x4
  3120                           
  3121  0024                     ??_CC2500_SIDLEMode:	
  3122                           ; 0 bytes @ 0x4
  3123                           
  3124  0024                     ?_setDimmerLights:	
  3125                           ; 0 bytes @ 0x4
  3126                           
  3127  0024                     ??_setLED_Initialization:	
  3128                           ; 0 bytes @ 0x4
  3129                           
  3130  0024                     ??_Flash_Memory_Modify:	
  3131                           ; 0 bytes @ 0x4
  3132                           
  3133  0024                     ??_RF_RxDisable:	
  3134                           ; 0 bytes @ 0x4
  3135                           
  3136  0024                     ??_setSw_Initialization:	
  3137                           ; 0 bytes @ 0x4
  3138                           
  3139  0024                     ??_Sw_DimmerAdjFunc:	
  3140                           ; 0 bytes @ 0x4
  3141                           
  3142  0024                     ??_CC2500_TxData:	
  3143                           ; 0 bytes @ 0x4
  3144                           
  3145  0024                     ??_CC2500_RxData:	
  3146                           ; 0 bytes @ 0x4
  3147                           
  3148  0024                     ??_DimmerLights_Initialization:	
  3149                           ; 0 bytes @ 0x4
  3150                           
  3151  0024                     ??___awdiv:	
  3152                           ; 0 bytes @ 0x4
  3153                           
  3154  0024                     CC2500_WriteREG@w_addr:	
  3155                           ; 0 bytes @ 0x4
  3156                           
  3157  0024                     setDimmerLights@status:	
  3158                           ; 1 bytes @ 0x4
  3159                           
  3160  0024                     setLED_Initialization@led:	
  3161                           ; 1 bytes @ 0x4
  3162                           
  3163  0024                     setLED_Main@led:	
  3164                           ; 1 bytes @ 0x4
  3165                           
  3166  0024                     RF_RxDisable@rf:	
  3167                           ; 1 bytes @ 0x4
  3168                           
  3169  0024                     setSw_Initialization@sw:	
  3170                           ; 1 bytes @ 0x4
  3171                           
  3172  0024                     ___ftpack@sign:	
  3173                           ; 1 bytes @ 0x4
  3174                           
  3175  0024                     DelayTime_1us@j:	
  3176                           ; 1 bytes @ 0x4
  3177                           
  3178                           
  3179                           ; 2 bytes @ 0x4
  3180  0024                     	ds	1
  3181  0025                     ??_CC2500_InitSetREG:	
  3182  0025                     ??_CC2500_InitPATable:	
  3183                           ; 0 bytes @ 0x5
  3184                           
  3185  0025                     ??_setDimmerLights:	
  3186                           ; 0 bytes @ 0x5
  3187                           
  3188  0025                     ??_Switch_Initialization:	
  3189                           ; 0 bytes @ 0x5
  3190                           
  3191  0025                     ??___ftpack:	
  3192                           ; 0 bytes @ 0x5
  3193                           
  3194  0025                     ??_LED_Initialization:	
  3195                           ; 0 bytes @ 0x5
  3196                           
  3197  0025                     ??_LED_Main:	
  3198                           ; 0 bytes @ 0x5
  3199                           
  3200  0025                     CC2500_TxData@loop_e:	
  3201                           ; 0 bytes @ 0x5
  3202                           
  3203  0025                     CC2500_RxData@loop_f:	
  3204                           ; 1 bytes @ 0x5
  3205                           
  3206  0025                     _Sw_DimmerAdjFunc$5009:	
  3207                           ; 1 bytes @ 0x5
  3208                           
  3209  0025                     ___awdiv@counter:	
  3210                           ; 1 bytes @ 0x5
  3211                           
  3212                           
  3213                           ; 1 bytes @ 0x5
  3214  0025                     	ds	1
  3215  0026                     ??_CC2500_PowerRST:	
  3216  0026                     ??_CC2500_FrequencyCabr:	
  3217                           ; 0 bytes @ 0x6
  3218                           
  3219  0026                     CC2500_InitSetREG@temp1:	
  3220                           ; 0 bytes @ 0x6
  3221                           
  3222  0026                     CC2500_InitPATable@temp:	
  3223                           ; 1 bytes @ 0x6
  3224                           
  3225  0026                     setDimmerLights@lights:	
  3226                           ; 1 bytes @ 0x6
  3227                           
  3228  0026                     Flash_Memory_Modify@i:	
  3229                           ; 1 bytes @ 0x6
  3230                           
  3231  0026                     _Sw_DimmerAdjFunc$5010:	
  3232                           ; 1 bytes @ 0x6
  3233                           
  3234  0026                     ___awdiv@sign:	
  3235                           ; 1 bytes @ 0x6
  3236                           
  3237                           
  3238                           ; 1 bytes @ 0x6
  3239  0026                     	ds	1
  3240  0027                     ??_Flash_Memory_Main:	
  3241  0027                     CC2500_InitSetREG@temp2:	
  3242                           ; 0 bytes @ 0x7
  3243                           
  3244  0027                     CC2500_InitPATable@loop_d:	
  3245                           ; 1 bytes @ 0x7
  3246                           
  3247  0027                     _Sw_DimmerAdjFunc$5011:	
  3248                           ; 1 bytes @ 0x7
  3249                           
  3250  0027                     ___awdiv@quotient:	
  3251                           ; 1 bytes @ 0x7
  3252                           
  3253                           
  3254                           ; 2 bytes @ 0x7
  3255  0027                     	ds	1
  3256  0028                     ?___awtoft:	
  3257  0028                     CC2500_InitSetREG@loop_c:	
  3258                           ; 3 bytes @ 0x8
  3259                           
  3260  0028                     Sw_DimmerAdjFunc@Idle:	
  3261                           ; 1 bytes @ 0x8
  3262                           
  3263  0028                     ___awtoft@c:	
  3264                           ; 1 bytes @ 0x8
  3265                           
  3266                           
  3267                           ; 2 bytes @ 0x8
  3268  0028                     	ds	1
  3269  0029                     ?_setBuz:	
  3270  0029                     ??_CC2500_PowerOnInitial:	
  3271                           ; 0 bytes @ 0x9
  3272                           
  3273  0029                     Sw_DimmerAdjFunc@sw:	
  3274                           ; 0 bytes @ 0x9
  3275                           
  3276  0029                     setBuz@time:	
  3277                           ; 1 bytes @ 0x9
  3278                           
  3279                           
  3280                           ; 2 bytes @ 0x9
  3281  0029                     	ds	2
  3282  002B                     ??_setBuz:	
  3283  002B                     ??___awtoft:	
  3284                           ; 0 bytes @ 0xB
  3285                           
  3286                           
  3287                           ; 0 bytes @ 0xB
  3288  002B                     	ds	1
  3289  002C                     setBuz@count:	
  3290                           
  3291                           ; 1 bytes @ 0xC
  3292  002C                     	ds	1
  3293  002D                     ??_my_Main:	
  3294  002D                     ??_setLog_Code:	
  3295                           ; 0 bytes @ 0xD
  3296                           
  3297  002D                     ___awtoft@sign:	
  3298                           ; 0 bytes @ 0xD
  3299                           
  3300                           
  3301                           ; 1 bytes @ 0xD
  3302  002D                     	ds	1
  3303  002E                     ?___ftdiv:	
  3304  002E                     ?___ftmul:	
  3305                           ; 3 bytes @ 0xE
  3306                           
  3307  002E                     setLog_Code@rf:	
  3308                           ; 3 bytes @ 0xE
  3309                           
  3310  002E                     ___ftdiv@f2:	
  3311                           ; 1 bytes @ 0xE
  3312                           
  3313  002E                     ___ftmul@f1:	
  3314                           ; 3 bytes @ 0xE
  3315                           
  3316                           
  3317                           ; 3 bytes @ 0xE
  3318  002E                     	ds	3
  3319  0031                     ___ftdiv@f1:	
  3320  0031                     ___ftmul@f2:	
  3321                           ; 3 bytes @ 0x11
  3322                           
  3323                           
  3324                           ; 3 bytes @ 0x11
  3325  0031                     	ds	3
  3326  0034                     ??___ftdiv:	
  3327  0034                     ??___ftmul:	
  3328                           ; 0 bytes @ 0x14
  3329                           
  3330                           
  3331                           ; 0 bytes @ 0x14
  3332  0034                     	ds	4
  3333  0038                     ___ftdiv@cntr:	
  3334  0038                     ___ftmul@exp:	
  3335                           ; 1 bytes @ 0x18
  3336                           
  3337                           
  3338                           ; 1 bytes @ 0x18
  3339  0038                     	ds	1
  3340  0039                     ___ftdiv@f3:	
  3341  0039                     ___ftmul@f3_as_product:	
  3342                           ; 3 bytes @ 0x19
  3343                           
  3344                           
  3345                           ; 3 bytes @ 0x19
  3346  0039                     	ds	3
  3347  003C                     ___ftdiv@exp:	
  3348  003C                     ___ftmul@cntr:	
  3349                           ; 1 bytes @ 0x1C
  3350                           
  3351                           
  3352                           ; 1 bytes @ 0x1C
  3353  003C                     	ds	1
  3354  003D                     ___ftdiv@sign:	
  3355  003D                     ___ftmul@sign:	
  3356                           ; 1 bytes @ 0x1D
  3357                           
  3358                           
  3359                           ; 1 bytes @ 0x1D
  3360  003D                     	ds	1
  3361  003E                     ?___ftadd:	
  3362  003E                     ___ftadd@f1:	
  3363                           ; 3 bytes @ 0x1E
  3364                           
  3365                           
  3366                           ; 3 bytes @ 0x1E
  3367  003E                     	ds	3
  3368  0041                     ___ftadd@f2:	
  3369                           
  3370                           ; 3 bytes @ 0x21
  3371  0041                     	ds	3
  3372  0044                     ??___ftadd:	
  3373                           
  3374                           ; 0 bytes @ 0x24
  3375  0044                     	ds	4
  3376  0048                     ___ftadd@sign:	
  3377                           
  3378                           ; 1 bytes @ 0x28
  3379  0048                     	ds	1
  3380  0049                     ___ftadd@exp2:	
  3381                           
  3382                           ; 1 bytes @ 0x29
  3383  0049                     	ds	1
  3384  004A                     ___ftadd@exp1:	
  3385                           
  3386                           ; 1 bytes @ 0x2A
  3387  004A                     	ds	1
  3388  004B                     ?___fttol:	
  3389  004B                     ___fttol@f1:	
  3390                           ; 4 bytes @ 0x2B
  3391                           
  3392                           
  3393                           ; 3 bytes @ 0x2B
  3394  004B                     	ds	4
  3395  004F                     ??___fttol:	
  3396                           
  3397                           ; 0 bytes @ 0x2F
  3398  004F                     	ds	4
  3399  0053                     ___fttol@sign1:	
  3400                           
  3401                           ; 1 bytes @ 0x33
  3402  0053                     	ds	1
  3403  0054                     ___fttol@lval:	
  3404                           
  3405                           ; 4 bytes @ 0x34
  3406  0054                     	ds	4
  3407  0058                     ___fttol@exp1:	
  3408                           
  3409                           ; 1 bytes @ 0x38
  3410  0058                     	ds	1
  3411  0059                     ??_getPercentValue:	
  3412  0059                     ??_setPercentValue:	
  3413                           ; 0 bytes @ 0x39
  3414                           
  3415  0059                     setPercentValue@value:	
  3416                           ; 0 bytes @ 0x39
  3417                           
  3418                           
  3419                           ; 1 bytes @ 0x39
  3420  0059                     	ds	1
  3421  005A                     setPercentValue@i:	
  3422                           
  3423                           ; 3 bytes @ 0x3A
  3424  005A                     	ds	1
  3425  005B                     getPercentValue@value:	
  3426                           
  3427                           ; 1 bytes @ 0x3B
  3428  005B                     	ds	1
  3429  005C                     getPercentValue@i:	
  3430                           
  3431                           ; 3 bytes @ 0x3C
  3432  005C                     	ds	1
  3433  005D                     ?_setRF_DimmerLights:	
  3434  005D                     ??_Flash_Memory_Initialization:	
  3435                           ; 0 bytes @ 0x3D
  3436                           
  3437  005D                     setRF_DimmerLights@on:	
  3438                           ; 0 bytes @ 0x3D
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0x3D
  3442  005D                     	ds	1
  3443  005E                     ??_setRF_DimmerLights:	
  3444  005E                     Flash_Memory_Initialization@i:	
  3445                           ; 0 bytes @ 0x3E
  3446                           
  3447                           
  3448                           ; 1 bytes @ 0x3E
  3449  005E                     	ds	1
  3450  005F                     ??_setDimmerLights_AdjRF:	
  3451                           
  3452                           ; 0 bytes @ 0x3F
  3453  005F                     	ds	1
  3454  0060                     setDimmerLights_AdjRF@lights:	
  3455  0060                     setRF_DimmerLights@status:	
  3456                           ; 1 bytes @ 0x40
  3457                           
  3458                           
  3459                           ; 1 bytes @ 0x40
  3460  0060                     	ds	1
  3461  0061                     ??_setRF_DimmerValue:	
  3462  0061                     setRF_DimmerLights@lights:	
  3463                           ; 0 bytes @ 0x41
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x41
  3467  0061                     	ds	1
  3468  0062                     ?_setDimmerLights_Adj:	
  3469  0062                     ??_setRFSW_Control:	
  3470                           ; 0 bytes @ 0x42
  3471                           
  3472  0062                     ??_Sw_DimmerOnFunc:	
  3473                           ; 0 bytes @ 0x42
  3474                           
  3475  0062                     ??_Sw_DimmerOffFunc:	
  3476                           ; 0 bytes @ 0x42
  3477                           
  3478  0062                     setDimmerLights_Adj@status:	
  3479                           ; 0 bytes @ 0x42
  3480                           
  3481  0062                     setRFSW_Control@sw:	
  3482                           ; 1 bytes @ 0x42
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x42
  3486  0062                     	ds	1
  3487  0063                     ??_setDimmerLights_Adj:	
  3488  0063                     setRF_DimmerValue@lights:	
  3489                           ; 0 bytes @ 0x43
  3490                           
  3491  0063                     _Sw_DimmerOnFunc$4999:	
  3492                           ; 1 bytes @ 0x43
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0x43
  3496  0063                     	ds	1
  3497  0064                     ??_setRFSW_AdjControl:	
  3498  0064                     setDimmerLights_Adj@lights:	
  3499                           ; 0 bytes @ 0x44
  3500                           
  3501  0064                     _Sw_DimmerOnFunc$5000:	
  3502                           ; 1 bytes @ 0x44
  3503                           
  3504  0064                     Sw_DimmerOffFunc@sw:	
  3505                           ; 1 bytes @ 0x44
  3506                           
  3507                           
  3508                           ; 1 bytes @ 0x44
  3509  0064                     	ds	1
  3510  0065                     ??_setDimmerLights_Main:	
  3511  0065                     _Sw_DimmerOnFunc$5001:	
  3512                           ; 0 bytes @ 0x45
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0x45
  3516  0065                     	ds	1
  3517  0066                     _setDimmerLights_Main$1910:	
  3518  0066                     setRFSW_AdjControl@sw:	
  3519                           ; 1 bytes @ 0x46
  3520                           
  3521  0066                     Sw_DimmerOnFunc@Idle:	
  3522                           ; 1 bytes @ 0x46
  3523                           
  3524                           
  3525                           ; 1 bytes @ 0x46
  3526  0066                     	ds	1
  3527  0067                     ??_setControl_Lights_Table:	
  3528  0067                     _setDimmerLights_Main$1911:	
  3529                           ; 0 bytes @ 0x47
  3530                           
  3531  0067                     setControl_Lights_Table@rf:	
  3532                           ; 1 bytes @ 0x47
  3533                           
  3534  0067                     Sw_DimmerOnFunc@sw:	
  3535                           ; 1 bytes @ 0x47
  3536                           
  3537                           
  3538                           ; 1 bytes @ 0x47
  3539  0067                     	ds	1
  3540  0068                     ??_getRxData:	
  3541  0068                     ??_setSw_Main:	
  3542                           ; 0 bytes @ 0x48
  3543                           
  3544  0068                     _setDimmerLights_Main$1912:	
  3545                           ; 0 bytes @ 0x48
  3546                           
  3547  0068                     getRxData@rf:	
  3548                           ; 1 bytes @ 0x48
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x48
  3552  0068                     	ds	1
  3553  0069                     ??_setRF_Main:	
  3554  0069                     setDimmerLights_Main@clear:	
  3555                           ; 0 bytes @ 0x49
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x49
  3559  0069                     	ds	1
  3560  006A                     setDimmerLights_Main@lights:	
  3561  006A                     setRF_Main@rf:	
  3562                           ; 1 bytes @ 0x4A
  3563                           
  3564  006A                     setSw_Main@sw:	
  3565                           ; 1 bytes @ 0x4A
  3566                           
  3567                           
  3568                           ; 1 bytes @ 0x4A
  3569  006A                     	ds	1
  3570  006B                     ??_Switch_Main:	
  3571  006B                     ??_DimmerLights_Main:	
  3572                           ; 0 bytes @ 0x4B
  3573                           
  3574  006B                     _setRF_Main$4200:	
  3575                           ; 0 bytes @ 0x4B
  3576                           
  3577                           
  3578                           ; 1 bytes @ 0x4B
  3579  006B                     	ds	1
  3580  006C                     ??_RF_Main:	
  3581  006C                     ?_main:	
  3582                           ; 0 bytes @ 0x4C
  3583                           
  3584  006C                     main@argc:	
  3585                           ; 2 bytes @ 0x4C
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x4C
  3589  006C                     	ds	2
  3590  006E                     main@argv:	
  3591                           
  3592                           ; 2 bytes @ 0x4E
  3593  006E                     	ds	2
  3594  0070                     ??_main:	
  3595                           
  3596                           	psect	maintext
  3597  16BD                     __pmaintext:	
  3598                           ; 0 bytes @ 0x50
  3599 ;;
  3600 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3601 ;;
  3602 ;; *************** function _main *****************
  3603 ;; Defined at:
  3604 ;;		line 7 in file "../src/Main_B1.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  argc            2   76[BANK0 ] int 
  3607 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  2   76[BANK0 ] int 
  3612 ;; Registers used:
  3613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 17F/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3619 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;Total ram usage:        4 bytes
  3624 ;; Hardware stack levels required when called:   15
  3625 ;; This function calls:
  3626 ;;		_Buzzer_Initialization
  3627 ;;		_Buzzer_Main
  3628 ;;		_CC2500_PowerOnInitial
  3629 ;;		_DimmerLights_Initialization
  3630 ;;		_DimmerLights_Main
  3631 ;;		_Flash_Memory_Initialization
  3632 ;;		_Flash_Memory_Main
  3633 ;;		_LED_Initialization
  3634 ;;		_LED_Main
  3635 ;;		_Mcu_Initialization
  3636 ;;		_RF_Initialization
  3637 ;;		_RF_Main
  3638 ;;		_Switch_Initialization
  3639 ;;		_Switch_Main
  3640 ;;		_WDT_Main
  3641 ;;		_myMain_Initialization
  3642 ;;		_my_Main
  3643 ;; This function is called by:
  3644 ;;		Startup code after reset
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           
  3649                           ;psect for function _main
  3650  16BD                     _main:	
  3651                           
  3652                           ;Main_B1.c: 9: myMain_Initialization();
  3653                           
  3654                           ;incstack = 0
  3655                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3656  16BD  3190  2075  3196   	fcall	_myMain_Initialization
  3657                           
  3658                           ;Main_B1.c: 10: Mcu_Initialization();
  3659  16C0  3191  214F  3196   	fcall	_Mcu_Initialization
  3660                           
  3661                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3662  16C3  3183  2381  3196   	fcall	_Flash_Memory_Initialization
  3663                           
  3664                           ;Main_B1.c: 12: LED_Initialization();
  3665  16C6  319F  2724  3196   	fcall	_LED_Initialization
  3666                           
  3667                           ;Main_B1.c: 13: Buzzer_Initialization();
  3668  16C9  319E  2682  3196   	fcall	_Buzzer_Initialization
  3669                           
  3670                           ;Main_B1.c: 15: ;;
  3671                           ;Main_B1.c: 16: ;;
  3672                           ;Main_B1.c: 17: ;;
  3673                           ;Main_B1.c: 18: ;;
  3674                           ;Main_B1.c: 19: ;;
  3675                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3676  16CC  3192  22B5  3196   	fcall	_DimmerLights_Initialization
  3677                           
  3678                           ;Main_B1.c: 22: ;;
  3679                           ;Main_B1.c: 23: ;;
  3680                           ;Main_B1.c: 24: ;;
  3681                           ;Main_B1.c: 26: Switch_Initialization();
  3682  16CF  319F  27C8  3196   	fcall	_Switch_Initialization
  3683                           
  3684                           ;Main_B1.c: 27: RF_Initialization();
  3685  16D2  319E  2625  3196   	fcall	_RF_Initialization
  3686                           
  3687                           ;Main_B1.c: 28: CC2500_PowerOnInitial();
  3688  16D5  3190  2089  3196   	fcall	_CC2500_PowerOnInitial
  3689  16D8                     l7323:	
  3690                           ;Main_B1.c: 35: ;;
  3691                           ;Main_B1.c: 39: ;;
  3692                           ;Main_B1.c: 43: ;;
  3693                           ;Main_B1.c: 47: ;;
  3694                           
  3695                           ;Main_B1.c: 29: ;;
  3696                           ;Main_B1.c: 32: while (1) {
  3697                           
  3698                           
  3699                           ;Main_B1.c: 58: }
  3700                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  3701  16D8  0021               	movlb	1	; select bank1
  3702  16D9  086E               	movf	_myMain^(0+128),w
  3703  16DA  0086               	movwf	6
  3704  16DB  3001               	movlw	1	; select bank2/3
  3705  16DC  0087               	movwf	7
  3706  16DD  1C81               	btfss	1,1
  3707  16DE  2ED8               	goto	l7323
  3708                           
  3709                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  3710  16DF  086E               	movf	_myMain^(0+128),w
  3711  16E0  0086               	movwf	6
  3712  16E1  3001               	movlw	1	; select bank2/3
  3713  16E2  0087               	movwf	7
  3714  16E3  1081               	bcf	1,1
  3715                           
  3716                           ;Main_B1.c: 63: my_Main();
  3717  16E4  318A  22E5  3196   	fcall	_my_Main
  3718                           
  3719                           ;Main_B1.c: 64: WDT_Main();
  3720  16E7  3191  2185  3196   	fcall	_WDT_Main
  3721                           
  3722                           ;Main_B1.c: 65: ;;
  3723                           ;Main_B1.c: 66: ;;
  3724                           ;Main_B1.c: 67: if (myMain->PowerON) {
  3725  16EA  0021               	movlb	1	; select bank1
  3726  16EB  086E               	movf	_myMain^(0+128),w
  3727  16EC  0086               	movwf	6
  3728  16ED  3001               	movlw	1	; select bank2/3
  3729  16EE  0087               	movwf	7
  3730  16EF  1C01               	btfss	1,0
  3731  16F0  2ED8               	goto	l7323
  3732                           
  3733                           ;Main_B1.c: 68: Flash_Memory_Main();
  3734  16F1  3195  25A4  3196   	fcall	_Flash_Memory_Main
  3735                           
  3736                           ;Main_B1.c: 70: LED_Main();
  3737  16F4  319F  2734  3196   	fcall	_LED_Main
  3738                           
  3739                           ;Main_B1.c: 71: Buzzer_Main();
  3740  16F7  318F  274D  3196   	fcall	_Buzzer_Main
  3741                           
  3742                           ;Main_B1.c: 73: ;;
  3743                           ;Main_B1.c: 74: ;;
  3744                           ;Main_B1.c: 75: ;;
  3745                           ;Main_B1.c: 76: ;;
  3746                           ;Main_B1.c: 78: ;;
  3747                           ;Main_B1.c: 79: DimmerLights_Main();
  3748  16FA  319E  26F6  3196   	fcall	_DimmerLights_Main
  3749                           
  3750                           ;Main_B1.c: 80: Switch_Main();
  3751  16FD  319E  26A6  3196   	fcall	_Switch_Main
  3752                           
  3753                           ;Main_B1.c: 81: ;;
  3754                           ;Main_B1.c: 82: ;;
  3755                           ;Main_B1.c: 84: RF_Main();
  3756  1700  319E  2629  3196   	fcall	_RF_Main
  3757                           
  3758                           ;Main_B1.c: 85: ;;
  3759                           ;Main_B1.c: 86: ;;
  3760  1703  2ED8               	goto	l7323
  3761  1704                     __end_of_main:	
  3762                           
  3763                           	psect	text1
  3764  0AE5                     __ptext1:	
  3765 ;; *************** function _my_Main *****************
  3766 ;; Defined at:
  3767 ;;		line 123 in file "../src/Main_B1.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;		None
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;		None
  3772 ;; Return value:  Size  Location     Type
  3773 ;;		None               void
  3774 ;; Registers used:
  3775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3776 ;; Tracked objects:
  3777 ;;		On entry : 0/0
  3778 ;;		On exit  : 0/0
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3785 ;;Total ram usage:        0 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    7
  3788 ;; This function calls:
  3789 ;;		_setBuz
  3790 ;;		_setRF_Enable
  3791 ;;		_setSw_Enable
  3792 ;; This function is called by:
  3793 ;;		_main
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           
  3798                           ;psect for function _my_Main
  3799  0AE5                     _my_Main:	
  3800                           
  3801                           ;Main_B1.c: 125: if (myMain->PowerON == 0) {
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3805  0AE5  0021               	movlb	1	; select bank1
  3806  0AE6  086E               	movf	_myMain^(0+128),w
  3807  0AE7  0086               	movwf	6
  3808  0AE8  3001               	movlw	1	; select bank2/3
  3809  0AE9  0087               	movwf	7
  3810  0AEA  1801               	btfsc	1,0
  3811  0AEB  2B27               	goto	l7215
  3812                           
  3813                           ;Main_B1.c: 126: myMain->PowerCount++;
  3814  0AEC  0A6E               	incf	_myMain^(0+128),w
  3815  0AED  0086               	movwf	6
  3816  0AEE  3001               	movlw	1	; select bank2/3
  3817  0AEF  0087               	movwf	7
  3818  0AF0  3001               	movlw	1
  3819  0AF1  0781               	addwf	1,f
  3820  0AF2  3141               	addfsr 1,1
  3821  0AF3  1803               	skipnc
  3822  0AF4  0A81               	incf	1,f
  3823                           
  3824                           ;Main_B1.c: 127: if (myMain->PowerCount == 150)
  3825  0AF5  0A6E               	incf	_myMain^(0+128),w
  3826  0AF6  0086               	movwf	6
  3827  0AF7  3001               	movlw	1	; select bank2/3
  3828  0AF8  0087               	movwf	7
  3829  0AF9  3F40               	moviw [0]fsr1
  3830  0AFA  3A96               	xorlw	150
  3831  0AFB  1D03               	skipz
  3832  0AFC  2AFF               	goto	u6835
  3833  0AFD  3F41               	moviw [1]fsr1
  3834  0AFE  3A00               	xorlw	0
  3835  0AFF                     u6835:	
  3836  0AFF  1D03               	skipz
  3837  0B00  0008               	return
  3838                           
  3839                           ;Main_B1.c: 128: {
  3840                           ;Main_B1.c: 129: myMain->PowerCount = 0;
  3841  0B01  0A6E               	incf	_myMain^(0+128),w
  3842  0B02  0086               	movwf	6
  3843  0B03  3001               	movlw	1	; select bank2/3
  3844  0B04  0087               	movwf	7
  3845  0B05  3000               	movlw	0
  3846  0B06  3FC0               	movwi [0]fsr1
  3847  0B07  3FC1               	movwi [1]fsr1
  3848                           
  3849                           ;Main_B1.c: 130: myMain->PowerON = 1;
  3850  0B08  086E               	movf	_myMain^(0+128),w
  3851  0B09  0086               	movwf	6
  3852  0B0A  3001               	movlw	1	; select bank2/3
  3853  0B0B  0087               	movwf	7
  3854  0B0C  1401               	bsf	1,0
  3855                           
  3856                           ;Main_B1.c: 133: ;;
  3857                           ;Main_B1.c: 137: ;;
  3858                           ;Main_B1.c: 143: setBuz(3, 50);
  3859  0B0D  3032               	movlw	50
  3860  0B0E  0020               	movlb	0	; select bank0
  3861  0B0F  00A9               	movwf	setBuz@time
  3862  0B10  3000               	movlw	0
  3863  0B11  00AA               	movwf	setBuz@time+1
  3864  0B12  3003               	movlw	3
  3865  0B13  318C  24E6  318A   	fcall	_setBuz
  3866                           
  3867                           ;Main_B1.c: 144: myMain->SelfTest = 1;
  3868  0B16  0021               	movlb	1	; select bank1
  3869  0B17  086E               	movf	_myMain^(0+128),w
  3870  0B18  0086               	movwf	6
  3871  0B19  3001               	movlw	1	; select bank2/3
  3872  0B1A  0087               	movwf	7
  3873  0B1B  1701               	bsf	1,6
  3874                           
  3875                           ;Main_B1.c: 146: setSw_Enable(1);
  3876  0B1C  3001               	movlw	1
  3877  0B1D  3193  2367  318A   	fcall	_setSw_Enable
  3878                           
  3879                           ;Main_B1.c: 149: setRF_Enable(1, 1);
  3880  0B20  0020               	movlb	0	; select bank0
  3881  0B21  01A2               	clrf	setRF_Enable@command
  3882  0B22  0AA2               	incf	setRF_Enable@command,f
  3883  0B23  3001               	movlw	1
  3884  0B24  3193  2340         	fcall	_setRF_Enable
  3885                           
  3886                           ;Main_B1.c: 153: }
  3887                           ;Main_B1.c: 154: } else {
  3888  0B26  0008               	return
  3889  0B27                     l7215:	
  3890                           
  3891                           ;Main_B1.c: 162: myMain->Count1++;
  3892  0B27  0021               	movlb	1	; select bank1
  3893  0B28  086E               	movf	_myMain^(0+128),w
  3894  0B29  3E05               	addlw	5
  3895  0B2A  0086               	movwf	6
  3896  0B2B  3001               	movlw	1	; select bank2/3
  3897  0B2C  0087               	movwf	7
  3898  0B2D  3001               	movlw	1
  3899  0B2E  0781               	addwf	1,f
  3900  0B2F  3141               	addfsr 1,1
  3901  0B30  1803               	skipnc
  3902  0B31  0A81               	incf	1,f
  3903                           
  3904                           ;Main_B1.c: 163: if (myMain->Count1 == 100)
  3905  0B32  086E               	movf	_myMain^(0+128),w
  3906  0B33  3E05               	addlw	5
  3907  0B34  0086               	movwf	6
  3908  0B35  3001               	movlw	1	; select bank2/3
  3909  0B36  0087               	movwf	7
  3910  0B37  3F40               	moviw [0]fsr1
  3911  0B38  3A64               	xorlw	100
  3912  0B39  1D03               	skipz
  3913  0B3A  2B3D               	goto	u6845
  3914  0B3B  3F41               	moviw [1]fsr1
  3915  0B3C  3A00               	xorlw	0
  3916  0B3D                     u6845:	
  3917  0B3D  1D03               	skipz
  3918  0B3E  0008               	return
  3919                           
  3920                           ;Main_B1.c: 164: {
  3921                           ;Main_B1.c: 165: myMain->Count1 = 0;
  3922  0B3F  086E               	movf	_myMain^(0+128),w
  3923  0B40  3E05               	addlw	5
  3924  0B41  0086               	movwf	6
  3925  0B42  3001               	movlw	1	; select bank2/3
  3926  0B43  0087               	movwf	7
  3927  0B44  3000               	movlw	0
  3928  0B45  3FC0               	movwi [0]fsr1
  3929  0B46  3FC1               	movwi [1]fsr1
  3930                           
  3931                           ;Main_B1.c: 178: if (myMain->Flag) {
  3932  0B47  086E               	movf	_myMain^(0+128),w
  3933  0B48  0086               	movwf	6
  3934  0B49  3001               	movlw	1	; select bank2/3
  3935  0B4A  0087               	movwf	7
  3936  0B4B  1D81               	btfss	1,3
  3937  0B4C  2B53               	goto	l7223
  3938                           
  3939                           ;Main_B1.c: 179: myMain->Flag = 0;
  3940  0B4D  086E               	movf	_myMain^(0+128),w
  3941  0B4E  0086               	movwf	6
  3942  0B4F  3001               	movlw	1	; select bank2/3
  3943  0B50  0087               	movwf	7
  3944  0B51  1181               	bcf	1,3
  3945                           
  3946                           ;Main_B1.c: 188: } else {
  3947  0B52  0008               	return
  3948  0B53                     l7223:	
  3949                           
  3950                           ;Main_B1.c: 189: myMain->Flag = 1;
  3951  0B53  086E               	movf	_myMain^(0+128),w
  3952  0B54  0086               	movwf	6
  3953  0B55  3001               	movlw	1	; select bank2/3
  3954  0B56  0087               	movwf	7
  3955  0B57  1581               	bsf	1,3
  3956  0B58  0008               	return
  3957  0B59                     __end_of_my_Main:	
  3958                           
  3959                           	psect	text2
  3960  1367                     __ptext2:	
  3961 ;; *************** function _setSw_Enable *****************
  3962 ;; Defined at:
  3963 ;;		line 85 in file "../src/Switch_B1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  command         1    wreg     unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  command         1    2[BANK0 ] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;		None               void
  3970 ;; Registers used:
  3971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3981 ;;Total ram usage:        1 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    6
  3984 ;; This function calls:
  3985 ;;		_SwPointSelect
  3986 ;; This function is called by:
  3987 ;;		_my_Main
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           
  3992                           ;psect for function _setSw_Enable
  3993  1367                     _setSw_Enable:	
  3994                           
  3995                           ;incstack = 0
  3996                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3997                           ;setSw_Enable@command stored from wreg
  3998  1367  0020               	movlb	0	; select bank0
  3999  1368  00A2               	movwf	setSw_Enable@command
  4000                           
  4001                           ;Switch_B1.c: 88: SwPointSelect(1);
  4002  1369  3001               	movlw	1
  4003  136A  3191  21DB  3193   	fcall	_SwPointSelect
  4004                           
  4005                           ;Switch_B1.c: 89: Sw->Enable = command;
  4006  136D  087B               	movf	_Sw,w
  4007  136E  0086               	movwf	6
  4008  136F  3001               	movlw	1	; select bank2/3
  4009  1370  0087               	movwf	7
  4010  1371  0020               	movlb	0	; select bank0
  4011  1372  0822               	movf	setSw_Enable@command,w
  4012  1373  1001               	bcf	1,0
  4013  1374  1D03               	skipz
  4014  1375  1401               	bsf	1,0
  4015                           
  4016                           ;Switch_B1.c: 93: SwPointSelect(2);
  4017  1376  3002               	movlw	2
  4018  1377  3191  21DB  3193   	fcall	_SwPointSelect
  4019                           
  4020                           ;Switch_B1.c: 94: Sw->Enable = command;
  4021  137A  087B               	movf	_Sw,w
  4022  137B  0086               	movwf	6
  4023  137C  3001               	movlw	1	; select bank2/3
  4024  137D  0087               	movwf	7
  4025  137E  0020               	movlb	0	; select bank0
  4026  137F  0822               	movf	setSw_Enable@command,w
  4027  1380  1001               	bcf	1,0
  4028  1381  1D03               	skipz
  4029  1382  1401               	bsf	1,0
  4030                           
  4031                           ;Switch_B1.c: 98: SwPointSelect(3);
  4032  1383  3003               	movlw	3
  4033  1384  3191  21DB         	fcall	_SwPointSelect
  4034                           
  4035                           ;Switch_B1.c: 99: Sw->Enable = command;
  4036  1386  087B               	movf	_Sw,w
  4037  1387  0086               	movwf	6
  4038  1388  3001               	movlw	1	; select bank2/3
  4039  1389  0087               	movwf	7
  4040  138A  0020               	movlb	0	; select bank0
  4041  138B  0822               	movf	setSw_Enable@command,w
  4042  138C  1001               	bcf	1,0
  4043  138D  1D03               	skipz
  4044  138E  1401               	bsf	1,0
  4045  138F  0008               	return
  4046  1390                     __end_of_setSw_Enable:	
  4047                           
  4048                           	psect	text3
  4049  1340                     __ptext3:	
  4050 ;; *************** function _setRF_Enable *****************
  4051 ;; Defined at:
  4052 ;;		line 197 in file "../src/RF_Control_B1.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  rf              1    wreg     unsigned char 
  4055 ;;  command         1    2[BANK0 ] unsigned char 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  rf              1    3[BANK0 ] unsigned char 
  4058 ;; Return value:  Size  Location     Type
  4059 ;;		None               void
  4060 ;; Registers used:
  4061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4062 ;; Tracked objects:
  4063 ;;		On entry : 0/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4067 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;Total ram usage:        2 bytes
  4072 ;; Hardware stack levels used:    1
  4073 ;; Hardware stack levels required when called:    6
  4074 ;; This function calls:
  4075 ;;		_RfPointSelect
  4076 ;; This function is called by:
  4077 ;;		_my_Main
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _setRF_Enable
  4083  1340                     _setRF_Enable:	
  4084                           
  4085                           ;incstack = 0
  4086                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4087                           ;setRF_Enable@rf stored from wreg
  4088  1340  0020               	movlb	0	; select bank0
  4089  1341  00A3               	movwf	setRF_Enable@rf
  4090                           
  4091                           ;RF_Control_B1.c: 198: RfPointSelect(rf);
  4092  1342  0823               	movf	setRF_Enable@rf,w
  4093  1343  319E  26D9         	fcall	_RfPointSelect
  4094                           
  4095                           ;RF_Control_B1.c: 199: RF->Enable = command;
  4096  1345  087A               	movf	_RF,w
  4097  1346  0086               	movwf	6
  4098  1347  0187               	clrf	7
  4099  1348  0020               	movlb	0	; select bank0
  4100  1349  0822               	movf	setRF_Enable@command,w
  4101  134A  1001               	bcf	1,0
  4102  134B  1D03               	skipz
  4103  134C  1401               	bsf	1,0
  4104                           
  4105                           ;RF_Control_B1.c: 200: RF->Learn = 0;
  4106  134D  087A               	movf	_RF,w
  4107  134E  0086               	movwf	6
  4108  134F  0187               	clrf	7
  4109  1350  1301               	bcf	1,6
  4110                           
  4111                           ;RF_Control_B1.c: 201: RF->TransceiveGO = 0;
  4112  1351  087A               	movf	_RF,w
  4113  1352  0086               	movwf	6
  4114  1353  0187               	clrf	7
  4115  1354  1101               	bcf	1,2
  4116                           
  4117                           ;RF_Control_B1.c: 202: RF->RxStatus = 0;
  4118  1355  087A               	movf	_RF,w
  4119  1356  0086               	movwf	6
  4120  1357  0187               	clrf	7
  4121  1358  1181               	bcf	1,3
  4122                           
  4123                           ;RF_Control_B1.c: 203: RF->ReceiveGO = 0;
  4124  1359  087A               	movf	_RF,w
  4125  135A  0086               	movwf	6
  4126  135B  0187               	clrf	7
  4127  135C  1081               	bcf	1,1
  4128                           
  4129                           ;RF_Control_B1.c: 204: RF->DebounceTime = 0;
  4130  135D  087A               	movf	_RF,w
  4131  135E  3E04               	addlw	4
  4132  135F  0086               	movwf	6
  4133  1360  0187               	clrf	7
  4134  1361  0181               	clrf	1
  4135                           
  4136                           ;RF_Control_B1.c: 205: RF->Debounce = 0;
  4137  1362  087A               	movf	_RF,w
  4138  1363  0086               	movwf	6
  4139  1364  0187               	clrf	7
  4140  1365  1281               	bcf	1,5
  4141  1366  0008               	return
  4142  1367                     __end_of_setRF_Enable:	
  4143                           
  4144                           	psect	text4
  4145  1075                     __ptext4:	
  4146 ;; *************** function _myMain_Initialization *****************
  4147 ;; Defined at:
  4148 ;;		line 111 in file "../src/Main_B1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;		None
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;		None               void
  4155 ;; Registers used:
  4156 ;;		wreg, fsr1l, fsr1h
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;Total ram usage:        1 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    5
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_main
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           
  4177                           ;psect for function _myMain_Initialization
  4178  1075                     _myMain_Initialization:	
  4179                           
  4180                           ;Main_B1.c: 113: product = &_product;
  4181                           
  4182                           ;incstack = 0
  4183                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4184  1075  30A0               	movlw	__product& (0+255)
  4185  1076  0020               	movlb	0	; select bank0
  4186  1077  00A0               	movwf	??_myMain_Initialization
  4187  1078  0820               	movf	??_myMain_Initialization,w
  4188  1079  00FD               	movwf	_product
  4189                           
  4190                           ;Main_B1.c: 114: product->Data[20] = 211;
  4191  107A  30D3               	movlw	211
  4192  107B  00A0               	movwf	??_myMain_Initialization
  4193  107C  087D               	movf	_product,w
  4194  107D  3E14               	addlw	20
  4195  107E  0086               	movwf	6
  4196  107F  3001               	movlw	1	; select bank2/3
  4197  1080  0087               	movwf	7
  4198  1081  0820               	movf	??_myMain_Initialization,w
  4199  1082  0081               	movwf	1
  4200                           
  4201                           ;Main_B1.c: 117: myMain = &_myMain;
  4202  1083  30C0               	movlw	__myMain& (0+255)
  4203  1084  00A0               	movwf	??_myMain_Initialization
  4204  1085  0820               	movf	??_myMain_Initialization,w
  4205  1086  0021               	movlb	1	; select bank1
  4206  1087  00EE               	movwf	_myMain^(0+128)
  4207  1088  0008               	return
  4208  1089                     __end_of_myMain_Initialization:	
  4209                           
  4210                           	psect	text5
  4211  1185                     __ptext5:	
  4212 ;; *************** function _WDT_Main *****************
  4213 ;; Defined at:
  4214 ;;		line 900 in file "../src/MCU_B1.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;Total ram usage:        1 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    6
  4235 ;; This function calls:
  4236 ;;		_WDT_Clearing
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _WDT_Main
  4244  1185                     _WDT_Main:	
  4245                           
  4246                           ;MCU_B1.c: 901: if (WDT->Enable == 1) {
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4250  1185  0021               	movlb	1	; select bank1
  4251  1186  086D               	movf	_WDT^(0+128),w
  4252  1187  0086               	movwf	6
  4253  1188  0187               	clrf	7
  4254  1189  1C01               	btfss	1,0
  4255  118A  0008               	return
  4256                           
  4257                           ;MCU_B1.c: 902: if (WDT->Count-- > 0) {
  4258  118B  0A6D               	incf	_WDT^(0+128),w
  4259  118C  0086               	movwf	6
  4260  118D  0187               	clrf	7
  4261  118E  3001               	movlw	1
  4262  118F  0281               	subwf	1,f
  4263  1190  0801               	movf	1,w
  4264  1191  3AFF               	xorlw	255
  4265  1192  1903               	skipnz
  4266  1193  0008               	return
  4267                           
  4268                           ;MCU_B1.c: 903: WDT->Count = 10;
  4269  1194  300A               	movlw	10
  4270  1195  0020               	movlb	0	; select bank0
  4271  1196  00A0               	movwf	??_WDT_Main
  4272  1197  0021               	movlb	1	; select bank1
  4273  1198  0A6D               	incf	_WDT^(0+128),w
  4274  1199  0086               	movwf	6
  4275  119A  0187               	clrf	7
  4276  119B  0020               	movlb	0	; select bank0
  4277  119C  0820               	movf	??_WDT_Main,w
  4278  119D  0081               	movwf	1
  4279                           
  4280                           ;MCU_B1.c: 904: WDT_Clearing();
  4281  119E  3180  2002         	fcall	_WDT_Clearing
  4282  11A0  0008               	return
  4283  11A1                     __end_of_WDT_Main:	
  4284                           
  4285                           	psect	text6
  4286  0002                     __ptext6:	
  4287 ;; *************** function _WDT_Clearing *****************
  4288 ;; Defined at:
  4289 ;;		line 910 in file "../src/MCU_B1.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;		None               void
  4296 ;; Registers used:
  4297 ;;		None
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4307 ;;Total ram usage:        0 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    5
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_WDT_Main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _WDT_Clearing
  4319  0002                     _WDT_Clearing:	
  4320                           
  4321                           ;incstack = 0
  4322                           ; Regs used in _WDT_Clearing: []
  4323  0002  0064               	clrwdt	;# 
  4324  0003  0008               	return
  4325  0004                     __end_of_WDT_Clearing:	
  4326                           
  4327                           	psect	text7
  4328  1EA6                     __ptext7:	
  4329 ;; *************** function _Switch_Main *****************
  4330 ;; Defined at:
  4331 ;;		line 61 in file "../src/Switch_B1.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;		None
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;		None               void
  4338 ;; Registers used:
  4339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;Total ram usage:        0 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:   11
  4352 ;; This function calls:
  4353 ;;		_setSw_Main
  4354 ;; This function is called by:
  4355 ;;		_main
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function _Switch_Main
  4361  1EA6                     _Switch_Main:	
  4362                           
  4363                           ;Switch_B1.c: 63: setSw_Main(1);
  4364                           
  4365                           ;incstack = 0
  4366                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4367  1EA6  3001               	movlw	1
  4368  1EA7  3182  2223  319E   	fcall	_setSw_Main
  4369                           
  4370                           ;Switch_B1.c: 67: setSw_Main(2);
  4371  1EAA  3002               	movlw	2
  4372  1EAB  3182  2223  319E   	fcall	_setSw_Main
  4373                           
  4374                           ;Switch_B1.c: 71: setSw_Main(3);
  4375  1EAE  3003               	movlw	3
  4376  1EAF  3182  2223         	fcall	_setSw_Main
  4377  1EB1  0008               	return
  4378  1EB2                     __end_of_Switch_Main:	
  4379                           
  4380                           	psect	text8
  4381  0223                     __ptext8:	
  4382 ;; *************** function _setSw_Main *****************
  4383 ;; Defined at:
  4384 ;;		line 111 in file "../src/Switch_B1.c"
  4385 ;; Parameters:    Size  Location     Type
  4386 ;;  sw              1    wreg     unsigned char 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  sw              1   74[BANK0 ] unsigned char 
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;Total ram usage:        3 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:   10
  4405 ;; This function calls:
  4406 ;;		_SwPointSelect
  4407 ;;		_Sw_DimmerAdjFunc
  4408 ;;		_Sw_DimmerOffFunc
  4409 ;;		_Sw_DimmerOnFunc
  4410 ;;		_setBuz
  4411 ;;		_setRF_Learn
  4412 ;; This function is called by:
  4413 ;;		_Switch_Main
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           
  4418                           ;psect for function _setSw_Main
  4419  0223                     _setSw_Main:	
  4420                           
  4421                           ;incstack = 0
  4422                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4423                           ;setSw_Main@sw stored from wreg
  4424  0223  0020               	movlb	0	; select bank0
  4425  0224  00EA               	movwf	setSw_Main@sw
  4426                           
  4427                           ;Switch_B1.c: 112: SwPointSelect(sw);
  4428  0225  086A               	movf	setSw_Main@sw,w
  4429  0226  3191  21DB  3182   	fcall	_SwPointSelect
  4430                           
  4431                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  4432  0229  087B               	movf	_Sw,w
  4433  022A  0086               	movwf	6
  4434  022B  3001               	movlw	1	; select bank2/3
  4435  022C  0087               	movwf	7
  4436  022D  1C01               	btfss	1,0
  4437  022E  0008               	return
  4438                           
  4439                           ;Switch_B1.c: 115: if (sw == 1) {
  4440  022F  0020               	movlb	0	; select bank0
  4441  0230  086A               	movf	setSw_Main@sw,w
  4442  0231  3A01               	xorlw	1
  4443  0232  1D03               	skipz
  4444  0233  2A3C               	goto	l6921
  4445                           
  4446                           ;Switch_B1.c: 116: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4447  0234  087B               	movf	_Sw,w
  4448  0235  0086               	movwf	6
  4449  0236  3001               	movlw	1	; select bank2/3
  4450  0237  0087               	movwf	7
  4451  0238  1081               	bcf	1,1
  4452  0239  180C               	btfsc	12,0	;volatile
  4453  023A  1481               	bsf	1,1
  4454                           
  4455                           ;Switch_B1.c: 117: } else if (sw == 2) {
  4456  023B  2A55               	goto	l2651
  4457  023C                     l6921:	
  4458  023C  0020               	movlb	0	; select bank0
  4459  023D  086A               	movf	setSw_Main@sw,w
  4460  023E  3A02               	xorlw	2
  4461  023F  1D03               	skipz
  4462  0240  2A49               	goto	l6925
  4463                           
  4464                           ;Switch_B1.c: 118: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4465  0241  087B               	movf	_Sw,w
  4466  0242  0086               	movwf	6
  4467  0243  3001               	movlw	1	; select bank2/3
  4468  0244  0087               	movwf	7
  4469  0245  1081               	bcf	1,1
  4470  0246  1B0C               	btfsc	12,6	;volatile
  4471  0247  1481               	bsf	1,1
  4472                           
  4473                           ;Switch_B1.c: 119: } else if (sw == 3) {
  4474  0248  2A55               	goto	l2651
  4475  0249                     l6925:	
  4476  0249  0020               	movlb	0	; select bank0
  4477  024A  086A               	movf	setSw_Main@sw,w
  4478  024B  3A03               	xorlw	3
  4479  024C  1D03               	skipz
  4480  024D  2A55               	goto	l2651
  4481                           
  4482                           ;Switch_B1.c: 120: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4483  024E  087B               	movf	_Sw,w
  4484  024F  0086               	movwf	6
  4485  0250  3001               	movlw	1	; select bank2/3
  4486  0251  0087               	movwf	7
  4487  0252  1081               	bcf	1,1
  4488  0253  1A0C               	btfsc	12,4	;volatile
  4489  0254  1481               	bsf	1,1
  4490  0255                     l2651:	
  4491                           
  4492                           ;Switch_B1.c: 121: }
  4493                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  4494  0255  087B               	movf	_Sw,w
  4495  0256  0086               	movwf	6
  4496  0257  3001               	movlw	1	; select bank2/3
  4497  0258  0087               	movwf	7
  4498  0259  1C81               	btfss	1,1
  4499  025A  2B2C               	goto	l6975
  4500                           
  4501                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  4502  025B  087B               	movf	_Sw,w
  4503  025C  0086               	movwf	6
  4504  025D  3001               	movlw	1	; select bank2/3
  4505  025E  0087               	movwf	7
  4506  025F  1901               	btfsc	1,2
  4507  0260  2A83               	goto	l6941
  4508                           
  4509                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  4510  0261  3001               	movlw	1
  4511  0262  0020               	movlb	0	; select bank0
  4512  0263  00E8               	movwf	??_setSw_Main
  4513  0264  087B               	movf	_Sw,w
  4514  0265  3E02               	addlw	2
  4515  0266  0086               	movwf	6
  4516  0267  3001               	movlw	1	; select bank2/3
  4517  0268  0087               	movwf	7
  4518  0269  0868               	movf	??_setSw_Main,w
  4519  026A  0781               	addwf	1,f
  4520                           
  4521                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  4522  026B  087B               	movf	_Sw,w
  4523  026C  3E02               	addlw	2
  4524  026D  0086               	movwf	6
  4525  026E  3001               	movlw	1	; select bank2/3
  4526  026F  0087               	movwf	7
  4527  0270  3005               	movlw	5
  4528  0271  0201               	subwf	1,w
  4529  0272  1C03               	skipc
  4530  0273  0008               	return
  4531                           
  4532                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  4533  0274  087B               	movf	_Sw,w
  4534  0275  3E02               	addlw	2
  4535  0276  0086               	movwf	6
  4536  0277  3001               	movlw	1	; select bank2/3
  4537  0278  0087               	movwf	7
  4538  0279  0181               	clrf	1
  4539                           
  4540                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  4541  027A  087B               	movf	_Sw,w
  4542  027B  0086               	movwf	6
  4543  027C  3001               	movlw	1	; select bank2/3
  4544  027D  0087               	movwf	7
  4545  027E  1501               	bsf	1,2
  4546                           
  4547                           ;Switch_B1.c: 142: Sw_DimmerOnFunc(sw);
  4548  027F  086A               	movf	setSw_Main@sw,w
  4549  0280  318C  245F         	fcall	_Sw_DimmerOnFunc
  4550                           
  4551                           ;Switch_B1.c: 144: }
  4552                           ;Switch_B1.c: 145: } else {
  4553  0282  0008               	return
  4554  0283                     l6941:	
  4555                           
  4556                           ;Switch_B1.c: 146: if (Sw->Hold1 == 0) {
  4557  0283  087B               	movf	_Sw,w
  4558  0284  0086               	movwf	6
  4559  0285  3001               	movlw	1	; select bank2/3
  4560  0286  0087               	movwf	7
  4561  0287  1981               	btfsc	1,3
  4562  0288  2AB5               	goto	l6951
  4563                           
  4564                           ;Switch_B1.c: 147: Sw->Hold1Time++;
  4565  0289  087B               	movf	_Sw,w
  4566  028A  3E03               	addlw	3
  4567  028B  0086               	movwf	6
  4568  028C  3001               	movlw	1	; select bank2/3
  4569  028D  0087               	movwf	7
  4570  028E  3001               	movlw	1
  4571  028F  0781               	addwf	1,f
  4572  0290  3141               	addfsr 1,1
  4573  0291  1803               	skipnc
  4574  0292  0A81               	incf	1,f
  4575                           
  4576                           ;Switch_B1.c: 148: if (Sw->Hold1Time >= 150) {
  4577  0293  087B               	movf	_Sw,w
  4578  0294  3E03               	addlw	3
  4579  0295  0086               	movwf	6
  4580  0296  3001               	movlw	1	; select bank2/3
  4581  0297  0087               	movwf	7
  4582  0298  3F40               	moviw [0]fsr1
  4583  0299  0020               	movlb	0	; select bank0
  4584  029A  00E8               	movwf	??_setSw_Main
  4585  029B  3F41               	moviw [1]fsr1
  4586  029C  00E9               	movwf	??_setSw_Main+1
  4587  029D  3000               	movlw	0
  4588  029E  0269               	subwf	??_setSw_Main+1,w
  4589  029F  3096               	movlw	150
  4590  02A0  1903               	skipnz
  4591  02A1  0268               	subwf	??_setSw_Main,w
  4592  02A2  1C03               	skipc
  4593  02A3  0008               	return
  4594                           
  4595                           ;Switch_B1.c: 149: Sw->Hold1Time = 0;
  4596  02A4  087B               	movf	_Sw,w
  4597  02A5  3E03               	addlw	3
  4598  02A6  0086               	movwf	6
  4599  02A7  3001               	movlw	1	; select bank2/3
  4600  02A8  0087               	movwf	7
  4601  02A9  3000               	movlw	0
  4602  02AA  3FC0               	movwi [0]fsr1
  4603  02AB  3FC1               	movwi [1]fsr1
  4604                           
  4605                           ;Switch_B1.c: 150: Sw->Hold1 = 1;
  4606  02AC  087B               	movf	_Sw,w
  4607  02AD  0086               	movwf	6
  4608  02AE  3001               	movlw	1	; select bank2/3
  4609  02AF  0087               	movwf	7
  4610  02B0  1581               	bsf	1,3
  4611                           
  4612                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  4613  02B1  086A               	movf	setSw_Main@sw,w
  4614  02B2  3188  200E         	fcall	_Sw_DimmerAdjFunc
  4615                           
  4616                           ;Switch_B1.c: 156: }
  4617                           ;Switch_B1.c: 157: } else {
  4618  02B4  0008               	return
  4619  02B5                     l6951:	
  4620                           
  4621                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  4622  02B5  087B               	movf	_Sw,w
  4623  02B6  0086               	movwf	6
  4624  02B7  3001               	movlw	1	; select bank2/3
  4625  02B8  0087               	movwf	7
  4626  02B9  1A01               	btfsc	1,4
  4627  02BA  2AF9               	goto	l6965
  4628                           
  4629                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  4630  02BB  087B               	movf	_Sw,w
  4631  02BC  3E05               	addlw	5
  4632  02BD  0086               	movwf	6
  4633  02BE  3001               	movlw	1	; select bank2/3
  4634  02BF  0087               	movwf	7
  4635  02C0  3001               	movlw	1
  4636  02C1  0781               	addwf	1,f
  4637  02C2  3141               	addfsr 1,1
  4638  02C3  1803               	skipnc
  4639  02C4  0A81               	incf	1,f
  4640                           
  4641                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  4642  02C5  087B               	movf	_Sw,w
  4643  02C6  3E05               	addlw	5
  4644  02C7  0086               	movwf	6
  4645  02C8  3001               	movlw	1	; select bank2/3
  4646  02C9  0087               	movwf	7
  4647  02CA  3F40               	moviw [0]fsr1
  4648  02CB  0020               	movlb	0	; select bank0
  4649  02CC  00E8               	movwf	??_setSw_Main
  4650  02CD  3F41               	moviw [1]fsr1
  4651  02CE  00E9               	movwf	??_setSw_Main+1
  4652  02CF  3000               	movlw	0
  4653  02D0  0269               	subwf	??_setSw_Main+1,w
  4654  02D1  3096               	movlw	150
  4655  02D2  1903               	skipnz
  4656  02D3  0268               	subwf	??_setSw_Main,w
  4657  02D4  1C03               	skipc
  4658  02D5  0008               	return
  4659                           
  4660                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  4661  02D6  087B               	movf	_Sw,w
  4662  02D7  3E05               	addlw	5
  4663  02D8  0086               	movwf	6
  4664  02D9  3001               	movlw	1	; select bank2/3
  4665  02DA  0087               	movwf	7
  4666  02DB  3000               	movlw	0
  4667  02DC  3FC0               	movwi [0]fsr1
  4668  02DD  3FC1               	movwi [1]fsr1
  4669                           
  4670                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  4671  02DE  087B               	movf	_Sw,w
  4672  02DF  0086               	movwf	6
  4673  02E0  3001               	movlw	1	; select bank2/3
  4674  02E1  0087               	movwf	7
  4675  02E2  1601               	bsf	1,4
  4676                           
  4677                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  4678  02E3  01A2               	clrf	setRF_Learn@command
  4679  02E4  0AA2               	incf	setRF_Learn@command,f
  4680  02E5  3001               	movlw	1
  4681  02E6  3188  2000  3182   	fcall	_setRF_Learn
  4682                           
  4683                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  4684  02E9  0021               	movlb	1	; select bank1
  4685  02EA  086E               	movf	_myMain^(0+128),w
  4686  02EB  0086               	movwf	6
  4687  02EC  3001               	movlw	1	; select bank2/3
  4688  02ED  0087               	movwf	7
  4689  02EE  1F81               	btfss	1,7
  4690  02EF  0008               	return
  4691                           
  4692                           ;Switch_B1.c: 168: setBuz(2, 100);
  4693  02F0  3064               	movlw	100
  4694  02F1  0020               	movlb	0	; select bank0
  4695  02F2  00A9               	movwf	setBuz@time
  4696  02F3  3000               	movlw	0
  4697  02F4  00AA               	movwf	setBuz@time+1
  4698  02F5  3002               	movlw	2
  4699  02F6  318C  24E6         	fcall	_setBuz
  4700                           
  4701                           ;Switch_B1.c: 169: }
  4702                           ;Switch_B1.c: 171: }
  4703                           ;Switch_B1.c: 172: } else {
  4704  02F8  0008               	return
  4705  02F9                     l6965:	
  4706                           
  4707                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  4708  02F9  087B               	movf	_Sw,w
  4709  02FA  0086               	movwf	6
  4710  02FB  3001               	movlw	1	; select bank2/3
  4711  02FC  0087               	movwf	7
  4712  02FD  1A81               	btfsc	1,5
  4713  02FE  0008               	return
  4714                           
  4715                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  4716  02FF  087B               	movf	_Sw,w
  4717  0300  3E07               	addlw	7
  4718  0301  0086               	movwf	6
  4719  0302  3001               	movlw	1	; select bank2/3
  4720  0303  0087               	movwf	7
  4721  0304  3001               	movlw	1
  4722  0305  0781               	addwf	1,f
  4723  0306  3141               	addfsr 1,1
  4724  0307  1803               	skipnc
  4725  0308  0A81               	incf	1,f
  4726                           
  4727                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  4728  0309  087B               	movf	_Sw,w
  4729  030A  3E07               	addlw	7
  4730  030B  0086               	movwf	6
  4731  030C  3001               	movlw	1	; select bank2/3
  4732  030D  0087               	movwf	7
  4733  030E  3F40               	moviw [0]fsr1
  4734  030F  0020               	movlb	0	; select bank0
  4735  0310  00E8               	movwf	??_setSw_Main
  4736  0311  3F41               	moviw [1]fsr1
  4737  0312  00E9               	movwf	??_setSw_Main+1
  4738  0313  3001               	movlw	1
  4739  0314  0269               	subwf	??_setSw_Main+1,w
  4740  0315  302C               	movlw	44
  4741  0316  1903               	skipnz
  4742  0317  0268               	subwf	??_setSw_Main,w
  4743  0318  1C03               	skipc
  4744  0319  0008               	return
  4745                           
  4746                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  4747  031A  087B               	movf	_Sw,w
  4748  031B  3E07               	addlw	7
  4749  031C  0086               	movwf	6
  4750  031D  3001               	movlw	1	; select bank2/3
  4751  031E  0087               	movwf	7
  4752  031F  3000               	movlw	0
  4753  0320  3FC0               	movwi [0]fsr1
  4754  0321  3FC1               	movwi [1]fsr1
  4755                           
  4756                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  4757  0322  087B               	movf	_Sw,w
  4758  0323  0086               	movwf	6
  4759  0324  3001               	movlw	1	; select bank2/3
  4760  0325  0087               	movwf	7
  4761  0326  1681               	bsf	1,5
  4762                           
  4763                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  4764  0327  01A2               	clrf	setRF_Learn@command
  4765  0328  3001               	movlw	1
  4766  0329  3188  2000         	fcall	_setRF_Learn
  4767                           
  4768                           ;Switch_B1.c: 183: }
  4769                           ;Switch_B1.c: 184: }
  4770                           ;Switch_B1.c: 185: }
  4771                           ;Switch_B1.c: 186: }
  4772                           ;Switch_B1.c: 187: }
  4773                           ;Switch_B1.c: 188: } else {
  4774  032B  0008               	return
  4775  032C                     l6975:	
  4776                           
  4777                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  4778  032C  087B               	movf	_Sw,w
  4779  032D  0086               	movwf	6
  4780  032E  3001               	movlw	1	; select bank2/3
  4781  032F  0087               	movwf	7
  4782  0330  1D01               	btfss	1,2
  4783  0331  0008               	return
  4784                           
  4785                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  4786  0332  3001               	movlw	1
  4787  0333  0020               	movlb	0	; select bank0
  4788  0334  00E8               	movwf	??_setSw_Main
  4789  0335  087B               	movf	_Sw,w
  4790  0336  3E02               	addlw	2
  4791  0337  0086               	movwf	6
  4792  0338  3001               	movlw	1	; select bank2/3
  4793  0339  0087               	movwf	7
  4794  033A  0868               	movf	??_setSw_Main,w
  4795  033B  0781               	addwf	1,f
  4796                           
  4797                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  4798  033C  087B               	movf	_Sw,w
  4799  033D  3E02               	addlw	2
  4800  033E  0086               	movwf	6
  4801  033F  3001               	movlw	1	; select bank2/3
  4802  0340  0087               	movwf	7
  4803  0341  3005               	movlw	5
  4804  0342  0201               	subwf	1,w
  4805  0343  1C03               	skipc
  4806  0344  0008               	return
  4807                           
  4808                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  4809  0345  087B               	movf	_Sw,w
  4810  0346  3E02               	addlw	2
  4811  0347  0086               	movwf	6
  4812  0348  3001               	movlw	1	; select bank2/3
  4813  0349  0087               	movwf	7
  4814  034A  0181               	clrf	1
  4815                           
  4816                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  4817  034B  087B               	movf	_Sw,w
  4818  034C  0086               	movwf	6
  4819  034D  3001               	movlw	1	; select bank2/3
  4820  034E  0087               	movwf	7
  4821  034F  1101               	bcf	1,2
  4822                           
  4823                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  4824  0350  087B               	movf	_Sw,w
  4825  0351  3E03               	addlw	3
  4826  0352  0086               	movwf	6
  4827  0353  3001               	movlw	1	; select bank2/3
  4828  0354  0087               	movwf	7
  4829  0355  3000               	movlw	0
  4830  0356  3FC0               	movwi [0]fsr1
  4831  0357  3FC1               	movwi [1]fsr1
  4832                           
  4833                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  4834  0358  087B               	movf	_Sw,w
  4835  0359  0086               	movwf	6
  4836  035A  3001               	movlw	1	; select bank2/3
  4837  035B  0087               	movwf	7
  4838  035C  1181               	bcf	1,3
  4839                           
  4840                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  4841  035D  087B               	movf	_Sw,w
  4842  035E  3E05               	addlw	5
  4843  035F  0086               	movwf	6
  4844  0360  3001               	movlw	1	; select bank2/3
  4845  0361  0087               	movwf	7
  4846  0362  3000               	movlw	0
  4847  0363  3FC0               	movwi [0]fsr1
  4848  0364  3FC1               	movwi [1]fsr1
  4849                           
  4850                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  4851  0365  087B               	movf	_Sw,w
  4852  0366  0086               	movwf	6
  4853  0367  3001               	movlw	1	; select bank2/3
  4854  0368  0087               	movwf	7
  4855  0369  1201               	bcf	1,4
  4856                           
  4857                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  4858  036A  087B               	movf	_Sw,w
  4859  036B  3E07               	addlw	7
  4860  036C  0086               	movwf	6
  4861  036D  3001               	movlw	1	; select bank2/3
  4862  036E  0087               	movwf	7
  4863  036F  3000               	movlw	0
  4864  0370  3FC0               	movwi [0]fsr1
  4865  0371  3FC1               	movwi [1]fsr1
  4866                           
  4867                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  4868  0372  087B               	movf	_Sw,w
  4869  0373  0086               	movwf	6
  4870  0374  3001               	movlw	1	; select bank2/3
  4871  0375  0087               	movwf	7
  4872  0376  1281               	bcf	1,5
  4873                           
  4874                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  4875  0377  086A               	movf	setSw_Main@sw,w
  4876  0378  3189  2131  3182   	fcall	_Sw_DimmerOffFunc
  4877                           
  4878                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  4879  037B  0020               	movlb	0	; select bank0
  4880  037C  01A2               	clrf	setRF_Learn@command
  4881  037D  3001               	movlw	1
  4882  037E  3188  2000         	fcall	_setRF_Learn
  4883  0380  0008               	return
  4884  0381                     __end_of_setSw_Main:	
  4885                           
  4886                           	psect	text9
  4887  0800                     __ptext9:	
  4888 ;; *************** function _setRF_Learn *****************
  4889 ;; Defined at:
  4890 ;;		line 33 in file "../src/RF_Control_B1.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  rf              1    wreg     unsigned char 
  4893 ;;  command         1    2[BANK0 ] unsigned char 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  rf              1    3[BANK0 ] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4905 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;Total ram usage:        2 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    6
  4912 ;; This function calls:
  4913 ;;		_RfPointSelect
  4914 ;; This function is called by:
  4915 ;;		_setSw_Main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _setRF_Learn
  4921  0800                     _setRF_Learn:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4925                           ;setRF_Learn@rf stored from wreg
  4926  0800  0020               	movlb	0	; select bank0
  4927  0801  00A3               	movwf	setRF_Learn@rf
  4928                           
  4929                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  4930  0802  0823               	movf	setRF_Learn@rf,w
  4931  0803  319E  26D9         	fcall	_RfPointSelect
  4932                           
  4933                           ;RF_Control_B1.c: 35: RF->Learn = command;
  4934  0805  087A               	movf	_RF,w
  4935  0806  0086               	movwf	6
  4936  0807  0187               	clrf	7
  4937  0808  0020               	movlb	0	; select bank0
  4938  0809  0822               	movf	setRF_Learn@command,w
  4939  080A  1301               	bcf	1,6
  4940  080B  1D03               	skipz
  4941  080C  1701               	bsf	1,6
  4942  080D  0008               	return
  4943  080E                     __end_of_setRF_Learn:	
  4944                           
  4945                           	psect	text10
  4946  0C5F                     __ptext10:	
  4947 ;; *************** function _Sw_DimmerOnFunc *****************
  4948 ;; Defined at:
  4949 ;;		line 213 in file "../src/Switch_B1.c"
  4950 ;; Parameters:    Size  Location     Type
  4951 ;;  sw              1    wreg     unsigned char 
  4952 ;; Auto vars:     Size  Location     Type
  4953 ;;  sw              1   71[BANK0 ] unsigned char 
  4954 ;;  Idle            1   70[BANK0 ] unsigned char 
  4955 ;; Return value:  Size  Location     Type
  4956 ;;		None               void
  4957 ;; Registers used:
  4958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;Total ram usage:        6 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    9
  4971 ;; This function calls:
  4972 ;;		_setBuz
  4973 ;;		_setDimmerLights_Switch
  4974 ;;		_setDimmerLights_Trigger
  4975 ;;		_setRFSW_Status
  4976 ;;		_setRF_DimmerLights
  4977 ;;		_setTxData
  4978 ;; This function is called by:
  4979 ;;		_setSw_Main
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           
  4984                           ;psect for function _Sw_DimmerOnFunc
  4985  0C5F                     _Sw_DimmerOnFunc:	
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4989                           ;Sw_DimmerOnFunc@sw stored from wreg
  4990  0C5F  0020               	movlb	0	; select bank0
  4991  0C60  00E7               	movwf	Sw_DimmerOnFunc@sw
  4992                           
  4993                           ;Switch_B1.c: 214: char Idle = 1;
  4994  0C61  01E6               	clrf	Sw_DimmerOnFunc@Idle
  4995  0C62  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  4996                           
  4997                           ;Switch_B1.c: 218: if (sw == 1) {
  4998  0C63  0867               	movf	Sw_DimmerOnFunc@sw,w
  4999  0C64  3A01               	xorlw	1
  5000  0C65  1D03               	skipz
  5001  0C66  2C72               	goto	l6287
  5002                           
  5003                           ;Switch_B1.c: 219: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5004  0C67  01E3               	clrf	_Sw_DimmerOnFunc$4999
  5005  0C68  0022               	movlb	2	; select bank2
  5006  0C69  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  5007  0C6A  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5008  0C6B  2C6F               	goto	l6285
  5009  0C6C  0020               	movlb	0	; select bank0
  5010  0C6D  01E3               	clrf	_Sw_DimmerOnFunc$4999
  5011  0C6E  0AE3               	incf	_Sw_DimmerOnFunc$4999,f
  5012  0C6F                     l6285:	
  5013  0C6F  0020               	movlb	0	; select bank0
  5014  0C70  0863               	movf	_Sw_DimmerOnFunc$4999,w
  5015  0C71  2C8F               	goto	L2
  5016  0C72                     l6287:	
  5017                           ;Switch_B1.c: 220: } else if (sw == 2) {
  5018                           
  5019  0C72  0867               	movf	Sw_DimmerOnFunc@sw,w
  5020  0C73  3A02               	xorlw	2
  5021  0C74  1D03               	skipz
  5022  0C75  2C81               	goto	l6299
  5023                           
  5024                           ;Switch_B1.c: 221: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5025  0C76  01E4               	clrf	_Sw_DimmerOnFunc$5000
  5026  0C77  0022               	movlb	2	; select bank2
  5027  0C78  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5028  0C79  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5029  0C7A  2C7E               	goto	l6297
  5030  0C7B  0020               	movlb	0	; select bank0
  5031  0C7C  01E4               	clrf	_Sw_DimmerOnFunc$5000
  5032  0C7D  0AE4               	incf	_Sw_DimmerOnFunc$5000,f
  5033  0C7E                     l6297:	
  5034  0C7E  0020               	movlb	0	; select bank0
  5035  0C7F  0864               	movf	_Sw_DimmerOnFunc$5000,w
  5036  0C80  2C8F               	goto	L2
  5037  0C81                     l6299:	
  5038                           ;Switch_B1.c: 222: } else if (sw == 3) {
  5039                           
  5040  0C81  0867               	movf	Sw_DimmerOnFunc@sw,w
  5041  0C82  3A03               	xorlw	3
  5042  0C83  1D03               	skipz
  5043  0C84  2C92               	goto	l2677
  5044                           
  5045                           ;Switch_B1.c: 223: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5046  0C85  01E5               	clrf	_Sw_DimmerOnFunc$5001
  5047  0C86  0022               	movlb	2	; select bank2
  5048  0C87  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5049  0C88  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  5050  0C89  2C8D               	goto	l6309
  5051  0C8A  0020               	movlb	0	; select bank0
  5052  0C8B  01E5               	clrf	_Sw_DimmerOnFunc$5001
  5053  0C8C  0AE5               	incf	_Sw_DimmerOnFunc$5001,f
  5054  0C8D                     l6309:	
  5055  0C8D  0020               	movlb	0	; select bank0
  5056  0C8E  0865               	movf	_Sw_DimmerOnFunc$5001,w
  5057  0C8F                     L2:	
  5058  0C8F  00E2               	movwf	??_Sw_DimmerOnFunc
  5059  0C90  0862               	movf	??_Sw_DimmerOnFunc,w
  5060  0C91  00E6               	movwf	Sw_DimmerOnFunc@Idle
  5061  0C92                     l2677:	
  5062                           
  5063                           ;Switch_B1.c: 224: }
  5064                           ;Switch_B1.c: 235: if (Idle == 1) {
  5065  0C92  0866               	movf	Sw_DimmerOnFunc@Idle,w
  5066  0C93  3A01               	xorlw	1
  5067  0C94  1D03               	skipz
  5068  0C95  0008               	return
  5069                           
  5070                           ;Switch_B1.c: 236: Sw->Flag = 1;
  5071  0C96  087B               	movf	_Sw,w
  5072  0C97  0086               	movwf	6
  5073  0C98  3001               	movlw	1	; select bank2/3
  5074  0C99  0087               	movwf	7
  5075  0C9A  1781               	bsf	1,7
  5076                           
  5077                           ;Switch_B1.c: 237: setBuz(1, 100);
  5078  0C9B  3064               	movlw	100
  5079  0C9C  00A9               	movwf	setBuz@time
  5080  0C9D  3000               	movlw	0
  5081  0C9E  00AA               	movwf	setBuz@time+1
  5082  0C9F  3001               	movlw	1
  5083  0CA0  318C  24E6  318C   	fcall	_setBuz
  5084                           
  5085                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  5086  0CA3  087B               	movf	_Sw,w
  5087  0CA4  0086               	movwf	6
  5088  0CA5  3001               	movlw	1	; select bank2/3
  5089  0CA6  0087               	movwf	7
  5090  0CA7  1B01               	btfsc	1,6
  5091  0CA8  2CD4               	goto	l6329
  5092                           
  5093                           ;Switch_B1.c: 239: Sw->Status = 1;
  5094  0CA9  087B               	movf	_Sw,w
  5095  0CAA  0086               	movwf	6
  5096  0CAB  3001               	movlw	1	; select bank2/3
  5097  0CAC  0087               	movwf	7
  5098  0CAD  1701               	bsf	1,6
  5099                           
  5100                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  5101  0CAE  0020               	movlb	0	; select bank0
  5102  0CAF  01A2               	clrf	setRFSW_Status@command
  5103  0CB0  0AA2               	incf	setRFSW_Status@command,f
  5104  0CB1  0867               	movf	Sw_DimmerOnFunc@sw,w
  5105  0CB2  3190  2066  318C   	fcall	_setRFSW_Status
  5106                           
  5107                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  5108  0CB5  0020               	movlb	0	; select bank0
  5109  0CB6  01A2               	clrf	setDimmerLights_Trigger@command
  5110  0CB7  0AA2               	incf	setDimmerLights_Trigger@command,f
  5111  0CB8  0867               	movf	Sw_DimmerOnFunc@sw,w
  5112  0CB9  319F  2754  318C   	fcall	_setDimmerLights_Trigger
  5113                           
  5114                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  5115  0CBC  0020               	movlb	0	; select bank0
  5116  0CBD  01A2               	clrf	setDimmerLights_Switch@command
  5117  0CBE  0AA2               	incf	setDimmerLights_Switch@command,f
  5118  0CBF  0867               	movf	Sw_DimmerOnFunc@sw,w
  5119  0CC0  319F  2744  318C   	fcall	_setDimmerLights_Switch
  5120                           
  5121                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  5122  0CC3  087B               	movf	_Sw,w
  5123  0CC4  0086               	movwf	6
  5124  0CC5  3001               	movlw	1	; select bank2/3
  5125  0CC6  0087               	movwf	7
  5126  0CC7  3000               	movlw	0
  5127  0CC8  1B01               	btfsc	1,6
  5128  0CC9  3001               	movlw	1
  5129  0CCA  0020               	movlb	0	; select bank0
  5130  0CCB  00DD               	movwf	setRF_DimmerLights@on
  5131  0CCC  0867               	movf	Sw_DimmerOnFunc@sw,w
  5132  0CCD  3189  219B  318C   	fcall	_setRF_DimmerLights
  5133                           
  5134                           ;Switch_B1.c: 246: setTxData(1);
  5135  0CD0  3001               	movlw	1
  5136  0CD1  318E  2604         	fcall	_setTxData
  5137                           
  5138                           ;Switch_B1.c: 248: } else {
  5139  0CD3  0008               	return
  5140  0CD4                     l6329:	
  5141                           
  5142                           ;Switch_B1.c: 249: Sw->Status = 0;
  5143  0CD4  087B               	movf	_Sw,w
  5144  0CD5  0086               	movwf	6
  5145  0CD6  3001               	movlw	1	; select bank2/3
  5146  0CD7  0087               	movwf	7
  5147  0CD8  1301               	bcf	1,6
  5148                           
  5149                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  5150  0CD9  087B               	movf	_Sw,w
  5151  0CDA  0086               	movwf	6
  5152  0CDB  3001               	movlw	1	; select bank2/3
  5153  0CDC  0087               	movwf	7
  5154  0CDD  3000               	movlw	0
  5155  0CDE  1B01               	btfsc	1,6
  5156  0CDF  3001               	movlw	1
  5157  0CE0  0020               	movlb	0	; select bank0
  5158  0CE1  00A2               	movwf	setRFSW_Status@command
  5159  0CE2  0867               	movf	Sw_DimmerOnFunc@sw,w
  5160  0CE3  3190  2066         	fcall	_setRFSW_Status
  5161  0CE5  0008               	return
  5162  0CE6                     __end_of_Sw_DimmerOnFunc:	
  5163                           
  5164                           	psect	text11
  5165  0931                     __ptext11:	
  5166 ;; *************** function _Sw_DimmerOffFunc *****************
  5167 ;; Defined at:
  5168 ;;		line 256 in file "../src/Switch_B1.c"
  5169 ;; Parameters:    Size  Location     Type
  5170 ;;  sw              1    wreg     unsigned char 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;  sw              1   68[BANK0 ] unsigned char 
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;Total ram usage:        3 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; Hardware stack levels required when called:    9
  5189 ;; This function calls:
  5190 ;;		_setDimmerLights_AdjGo
  5191 ;;		_setDimmerLights_Switch
  5192 ;;		_setDimmerLights_Trigger
  5193 ;;		_setDimmerLights_TriggerAdj
  5194 ;;		_setRF_DimmerLights
  5195 ;;		_setTxData
  5196 ;; This function is called by:
  5197 ;;		_setSw_Main
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function _Sw_DimmerOffFunc
  5203  0931                     _Sw_DimmerOffFunc:	
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5207                           ;Sw_DimmerOffFunc@sw stored from wreg
  5208  0931  0020               	movlb	0	; select bank0
  5209  0932  00E4               	movwf	Sw_DimmerOffFunc@sw
  5210                           
  5211                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  5212  0933  087B               	movf	_Sw,w
  5213  0934  0086               	movwf	6
  5214  0935  3001               	movlw	1	; select bank2/3
  5215  0936  0087               	movwf	7
  5216  0937  1F81               	btfss	1,7
  5217  0938  0008               	return
  5218                           
  5219                           ;Switch_B1.c: 258: Sw->Flag = 0;
  5220  0939  087B               	movf	_Sw,w
  5221  093A  0086               	movwf	6
  5222  093B  3001               	movlw	1	; select bank2/3
  5223  093C  0087               	movwf	7
  5224  093D  1381               	bcf	1,7
  5225                           
  5226                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  5227  093E  087B               	movf	_Sw,w
  5228  093F  0086               	movwf	6
  5229  0940  3001               	movlw	1	; select bank2/3
  5230  0941  0087               	movwf	7
  5231  0942  1F01               	btfss	1,6
  5232  0943  297D               	goto	l6399
  5233                           
  5234                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  5235  0944  0A7B               	incf	_Sw,w
  5236  0945  0086               	movwf	6
  5237  0946  3001               	movlw	1	; select bank2/3
  5238  0947  0087               	movwf	7
  5239  0948  1C01               	btfss	1,0
  5240  0949  0008               	return
  5241                           
  5242                           ;Switch_B1.c: 261: Sw->Adj = 0;
  5243  094A  0A7B               	incf	_Sw,w
  5244  094B  0086               	movwf	6
  5245  094C  3001               	movlw	1	; select bank2/3
  5246  094D  0087               	movwf	7
  5247  094E  1001               	bcf	1,0
  5248                           
  5249                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  5250  094F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5251  0950  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5252  0951  0864               	movf	Sw_DimmerOffFunc@sw,w
  5253  0952  319F  2774  3189   	fcall	_setDimmerLights_TriggerAdj
  5254                           
  5255                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  5256  0955  0020               	movlb	0	; select bank0
  5257  0956  01A2               	clrf	setDimmerLights_AdjGo@command
  5258  0957  0864               	movf	Sw_DimmerOffFunc@sw,w
  5259  0958  319F  2764  3189   	fcall	_setDimmerLights_AdjGo
  5260                           
  5261                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  5262  095B  0020               	movlb	0	; select bank0
  5263  095C  0864               	movf	Sw_DimmerOffFunc@sw,w
  5264  095D  3E1A               	addlw	26
  5265  095E  077D               	addwf	_product,w
  5266  095F  00E2               	movwf	??_Sw_DimmerOffFunc
  5267  0960  0862               	movf	??_Sw_DimmerOffFunc,w
  5268  0961  0086               	movwf	6
  5269  0962  3001               	movlw	1	; select bank2/3
  5270  0963  0087               	movwf	7
  5271  0964  0801               	movf	1,w
  5272  0965  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5273  0966  087D               	movf	_product,w
  5274  0967  3E11               	addlw	17
  5275  0968  0086               	movwf	6
  5276  0969  3001               	movlw	1	; select bank2/3
  5277  096A  0087               	movwf	7
  5278  096B  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5279  096C  0081               	movwf	1
  5280                           
  5281                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  5282  096D  087B               	movf	_Sw,w
  5283  096E  0086               	movwf	6
  5284  096F  3001               	movlw	1	; select bank2/3
  5285  0970  0087               	movwf	7
  5286  0971  3000               	movlw	0
  5287  0972  1B01               	btfsc	1,6
  5288  0973  3001               	movlw	1
  5289  0974  00DD               	movwf	setRF_DimmerLights@on
  5290  0975  0864               	movf	Sw_DimmerOffFunc@sw,w
  5291  0976  3189  219B  3189   	fcall	_setRF_DimmerLights
  5292                           
  5293                           ;Switch_B1.c: 267: setTxData(1);
  5294  0979  3001               	movlw	1
  5295  097A  318E  2604         	fcall	_setTxData
  5296                           
  5297                           ;Switch_B1.c: 269: }
  5298                           ;Switch_B1.c: 270: } else {
  5299  097C  0008               	return
  5300  097D                     l6399:	
  5301                           
  5302                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  5303  097D  0020               	movlb	0	; select bank0
  5304  097E  01A2               	clrf	setDimmerLights_Trigger@command
  5305  097F  0AA2               	incf	setDimmerLights_Trigger@command,f
  5306  0980  0864               	movf	Sw_DimmerOffFunc@sw,w
  5307  0981  319F  2754  3189   	fcall	_setDimmerLights_Trigger
  5308                           
  5309                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  5310  0984  0020               	movlb	0	; select bank0
  5311  0985  01A2               	clrf	setDimmerLights_Switch@command
  5312  0986  0864               	movf	Sw_DimmerOffFunc@sw,w
  5313  0987  319F  2744  3189   	fcall	_setDimmerLights_Switch
  5314                           
  5315                           ;Switch_B1.c: 274: ;;
  5316                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  5317  098A  087B               	movf	_Sw,w
  5318  098B  0086               	movwf	6
  5319  098C  3001               	movlw	1	; select bank2/3
  5320  098D  0087               	movwf	7
  5321  098E  3000               	movlw	0
  5322  098F  1B01               	btfsc	1,6
  5323  0990  3001               	movlw	1
  5324  0991  0020               	movlb	0	; select bank0
  5325  0992  00DD               	movwf	setRF_DimmerLights@on
  5326  0993  0864               	movf	Sw_DimmerOffFunc@sw,w
  5327  0994  3189  219B  3189   	fcall	_setRF_DimmerLights
  5328                           
  5329                           ;Switch_B1.c: 276: setTxData(1);
  5330  0997  3001               	movlw	1
  5331  0998  318E  2604         	fcall	_setTxData
  5332  099A  0008               	return
  5333  099B                     __end_of_Sw_DimmerOffFunc:	
  5334                           
  5335                           	psect	text12
  5336  080E                     __ptext12:	
  5337 ;; *************** function _Sw_DimmerAdjFunc *****************
  5338 ;; Defined at:
  5339 ;;		line 283 in file "../src/Switch_B1.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  sw              1    wreg     unsigned char 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;  sw              1    9[BANK0 ] unsigned char 
  5344 ;;  Idle            1    8[BANK0 ] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;		None               void
  5347 ;; Registers used:
  5348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;Total ram usage:        6 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    7
  5361 ;; This function calls:
  5362 ;;		_setDimmerLights_AdjGo
  5363 ;;		_setDimmerLights_TriggerAdj
  5364 ;;		_setRFSW_Status
  5365 ;; This function is called by:
  5366 ;;		_setSw_Main
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function _Sw_DimmerAdjFunc
  5372  080E                     _Sw_DimmerAdjFunc:	
  5373                           
  5374                           ;incstack = 0
  5375                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5376                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5377  080E  0020               	movlb	0	; select bank0
  5378  080F  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5379                           
  5380                           ;Switch_B1.c: 284: char Idle = 1;
  5381  0810  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5382  0811  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5383                           
  5384                           ;Switch_B1.c: 287: if (sw == 1) {
  5385  0812  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5386  0813  3A01               	xorlw	1
  5387  0814  1D03               	skipz
  5388  0815  2821               	goto	l6347
  5389                           
  5390                           ;Switch_B1.c: 288: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5391  0816  01A5               	clrf	_Sw_DimmerAdjFunc$5009
  5392  0817  0022               	movlb	2	; select bank2
  5393  0818  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  5394  0819  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5395  081A  281E               	goto	l6345
  5396  081B  0020               	movlb	0	; select bank0
  5397  081C  01A5               	clrf	_Sw_DimmerAdjFunc$5009
  5398  081D  0AA5               	incf	_Sw_DimmerAdjFunc$5009,f
  5399  081E                     l6345:	
  5400  081E  0020               	movlb	0	; select bank0
  5401  081F  0825               	movf	_Sw_DimmerAdjFunc$5009,w
  5402  0820  283E               	goto	L4
  5403  0821                     l6347:	
  5404                           ;Switch_B1.c: 289: } else if (sw == 2) {
  5405                           
  5406  0821  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5407  0822  3A02               	xorlw	2
  5408  0823  1D03               	skipz
  5409  0824  2830               	goto	l6359
  5410                           
  5411                           ;Switch_B1.c: 290: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5412  0825  01A6               	clrf	_Sw_DimmerAdjFunc$5010
  5413  0826  0022               	movlb	2	; select bank2
  5414  0827  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5415  0828  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5416  0829  282D               	goto	l6357
  5417  082A  0020               	movlb	0	; select bank0
  5418  082B  01A6               	clrf	_Sw_DimmerAdjFunc$5010
  5419  082C  0AA6               	incf	_Sw_DimmerAdjFunc$5010,f
  5420  082D                     l6357:	
  5421  082D  0020               	movlb	0	; select bank0
  5422  082E  0826               	movf	_Sw_DimmerAdjFunc$5010,w
  5423  082F  283E               	goto	L4
  5424  0830                     l6359:	
  5425                           ;Switch_B1.c: 291: } else if (sw == 3) {
  5426                           
  5427  0830  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5428  0831  3A03               	xorlw	3
  5429  0832  1D03               	skipz
  5430  0833  2841               	goto	l2701
  5431                           
  5432                           ;Switch_B1.c: 292: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5433  0834  01A7               	clrf	_Sw_DimmerAdjFunc$5011
  5434  0835  0022               	movlb	2	; select bank2
  5435  0836  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5436  0837  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  5437  0838  283C               	goto	l6369
  5438  0839  0020               	movlb	0	; select bank0
  5439  083A  01A7               	clrf	_Sw_DimmerAdjFunc$5011
  5440  083B  0AA7               	incf	_Sw_DimmerAdjFunc$5011,f
  5441  083C                     l6369:	
  5442  083C  0020               	movlb	0	; select bank0
  5443  083D  0827               	movf	_Sw_DimmerAdjFunc$5011,w
  5444  083E                     L4:	
  5445  083E  00A4               	movwf	??_Sw_DimmerAdjFunc
  5446  083F  0824               	movf	??_Sw_DimmerAdjFunc,w
  5447  0840  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5448  0841                     l2701:	
  5449                           
  5450                           ;Switch_B1.c: 293: }
  5451                           ;Switch_B1.c: 304: if (Idle == 1) {
  5452  0841  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5453  0842  3A01               	xorlw	1
  5454  0843  1D03               	skipz
  5455  0844  0008               	return
  5456                           
  5457                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  5458  0845  087B               	movf	_Sw,w
  5459  0846  0086               	movwf	6
  5460  0847  3001               	movlw	1	; select bank2/3
  5461  0848  0087               	movwf	7
  5462  0849  1F81               	btfss	1,7
  5463  084A  0008               	return
  5464                           
  5465                           ;Switch_B1.c: 306: Sw->Adj = 1;
  5466  084B  0A7B               	incf	_Sw,w
  5467  084C  0086               	movwf	6
  5468  084D  3001               	movlw	1	; select bank2/3
  5469  084E  0087               	movwf	7
  5470  084F  1401               	bsf	1,0
  5471                           
  5472                           ;Switch_B1.c: 307: Sw->Status = 1;
  5473  0850  087B               	movf	_Sw,w
  5474  0851  0086               	movwf	6
  5475  0852  3001               	movlw	1	; select bank2/3
  5476  0853  0087               	movwf	7
  5477  0854  1701               	bsf	1,6
  5478                           
  5479                           ;Switch_B1.c: 308: setRFSW_Status(sw, 1);
  5480  0855  01A2               	clrf	setRFSW_Status@command
  5481  0856  0AA2               	incf	setRFSW_Status@command,f
  5482  0857  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5483  0858  3190  2066  3188   	fcall	_setRFSW_Status
  5484                           
  5485                           ;Switch_B1.c: 310: setDimmerLights_TriggerAdj(sw, 1);
  5486  085B  0020               	movlb	0	; select bank0
  5487  085C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5488  085D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5489  085E  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5490  085F  319F  2774  3188   	fcall	_setDimmerLights_TriggerAdj
  5491                           
  5492                           ;Switch_B1.c: 311: setDimmerLights_AdjGo(sw, 1);
  5493  0862  0020               	movlb	0	; select bank0
  5494  0863  01A2               	clrf	setDimmerLights_AdjGo@command
  5495  0864  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5496  0865  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5497  0866  319F  2764         	fcall	_setDimmerLights_AdjGo
  5498  0868  0008               	return
  5499  0869                     __end_of_Sw_DimmerAdjFunc:	
  5500                           
  5501                           	psect	text13
  5502  1F74                     __ptext13:	
  5503 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5504 ;; Defined at:
  5505 ;;		line 729 in file "../src/Dimmer_B1.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  lights          1    wreg     unsigned char 
  5508 ;;  command         1    2[BANK0 ] unsigned char 
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  lights          1    3[BANK0 ] unsigned char 
  5511 ;; Return value:  Size  Location     Type
  5512 ;;		None               void
  5513 ;; Registers used:
  5514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5520 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;Total ram usage:        2 bytes
  5525 ;; Hardware stack levels used:    1
  5526 ;; Hardware stack levels required when called:    6
  5527 ;; This function calls:
  5528 ;;		_DimmerLightsPointSelect
  5529 ;; This function is called by:
  5530 ;;		_Sw_DimmerOffFunc
  5531 ;;		_Sw_DimmerAdjFunc
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _setDimmerLights_TriggerAdj
  5537  1F74                     _setDimmerLights_TriggerAdj:	
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5541                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5542  1F74  0020               	movlb	0	; select bank0
  5543  1F75  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5544                           
  5545                           ;Dimmer_B1.c: 731: DimmerLightsPointSelect(lights);
  5546  1F76  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5547  1F77  3191  2134         	fcall	_DimmerLightsPointSelect
  5548                           
  5549                           ;Dimmer_B1.c: 732: DimmerLights->TriggerAdj = command;
  5550  1F79  0878               	movf	_DimmerLights,w
  5551  1F7A  3E08               	addlw	8
  5552  1F7B  0086               	movwf	6
  5553  1F7C  3001               	movlw	1	; select bank2/3
  5554  1F7D  0087               	movwf	7
  5555  1F7E  0020               	movlb	0	; select bank0
  5556  1F7F  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5557  1F80  1201               	bcf	1,4
  5558  1F81  1D03               	skipz
  5559  1F82  1601               	bsf	1,4
  5560  1F83  0008               	return
  5561  1F84                     __end_of_setDimmerLights_TriggerAdj:	
  5562                           
  5563                           	psect	text14
  5564  1F64                     __ptext14:	
  5565 ;; *************** function _setDimmerLights_AdjGo *****************
  5566 ;; Defined at:
  5567 ;;		line 717 in file "../src/Dimmer_B1.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  lights          1    wreg     unsigned char 
  5570 ;;  command         1    2[BANK0 ] unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  lights          1    3[BANK0 ] unsigned char 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;		None               void
  5575 ;; Registers used:
  5576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5582 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;Total ram usage:        2 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    6
  5589 ;; This function calls:
  5590 ;;		_DimmerLightsPointSelect
  5591 ;; This function is called by:
  5592 ;;		_Sw_DimmerOffFunc
  5593 ;;		_Sw_DimmerAdjFunc
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           
  5598                           ;psect for function _setDimmerLights_AdjGo
  5599  1F64                     _setDimmerLights_AdjGo:	
  5600                           
  5601                           ;incstack = 0
  5602                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5603                           ;setDimmerLights_AdjGo@lights stored from wreg
  5604  1F64  0020               	movlb	0	; select bank0
  5605  1F65  00A3               	movwf	setDimmerLights_AdjGo@lights
  5606                           
  5607                           ;Dimmer_B1.c: 719: DimmerLightsPointSelect(lights);
  5608  1F66  0823               	movf	setDimmerLights_AdjGo@lights,w
  5609  1F67  3191  2134         	fcall	_DimmerLightsPointSelect
  5610                           
  5611                           ;Dimmer_B1.c: 720: DimmerLights->AdjGo = command;
  5612  1F69  0878               	movf	_DimmerLights,w
  5613  1F6A  3E08               	addlw	8
  5614  1F6B  0086               	movwf	6
  5615  1F6C  3001               	movlw	1	; select bank2/3
  5616  1F6D  0087               	movwf	7
  5617  1F6E  0020               	movlb	0	; select bank0
  5618  1F6F  0822               	movf	setDimmerLights_AdjGo@command,w
  5619  1F70  1181               	bcf	1,3
  5620  1F71  1D03               	skipz
  5621  1F72  1581               	bsf	1,3
  5622  1F73  0008               	return
  5623  1F74                     __end_of_setDimmerLights_AdjGo:	
  5624                           
  5625                           	psect	text15
  5626  1FC8                     __ptext15:	
  5627 ;; *************** function _Switch_Initialization *****************
  5628 ;; Defined at:
  5629 ;;		line 37 in file "../src/Switch_B1.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    8
  5650 ;; This function calls:
  5651 ;;		_TouchPower
  5652 ;;		_setSw_Initialization
  5653 ;; This function is called by:
  5654 ;;		_main
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           
  5659                           ;psect for function _Switch_Initialization
  5660  1FC8                     _Switch_Initialization:	
  5661                           
  5662                           ;Switch_B1.c: 38: TouchPower();
  5663                           
  5664                           ;incstack = 0
  5665                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5666  1FC8  319E  262D  319F   	fcall	_TouchPower
  5667                           
  5668                           ;Switch_B1.c: 40: WPUB1 = 0;
  5669  1FCB  0024               	movlb	4	; select bank4
  5670  1FCC  108D               	bcf	13,1	;volatile
  5671                           
  5672                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5673  1FCD  3001               	movlw	1
  5674  1FCE  319E  2659  319F   	fcall	_setSw_Initialization
  5675                           
  5676                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5677  1FD1  3002               	movlw	2
  5678  1FD2  319E  2659  319F   	fcall	_setSw_Initialization
  5679                           
  5680                           ;Switch_B1.c: 55: setSw_Initialization(3);
  5681  1FD5  3003               	movlw	3
  5682  1FD6  319E  2659         	fcall	_setSw_Initialization
  5683  1FD8  0008               	return
  5684  1FD9                     __end_of_Switch_Initialization:	
  5685                           
  5686                           	psect	text16
  5687  1E59                     __ptext16:	
  5688 ;; *************** function _setSw_Initialization *****************
  5689 ;; Defined at:
  5690 ;;		line 77 in file "../src/Switch_B1.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;  sw              1    wreg     unsigned char 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;  sw              1    4[BANK0 ] unsigned char 
  5695 ;; Return value:  Size  Location     Type
  5696 ;;		None               void
  5697 ;; Registers used:
  5698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        1 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    7
  5711 ;; This function calls:
  5712 ;;		_setLED
  5713 ;; This function is called by:
  5714 ;;		_Switch_Initialization
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _setSw_Initialization
  5720  1E59                     _setSw_Initialization:	
  5721                           
  5722                           ;incstack = 0
  5723                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5724                           ;setSw_Initialization@sw stored from wreg
  5725  1E59  0020               	movlb	0	; select bank0
  5726  1E5A  00A4               	movwf	setSw_Initialization@sw
  5727                           
  5728                           ;Switch_B1.c: 78: setLED(sw, 1);
  5729  1E5B  01A2               	clrf	setLED@command
  5730  1E5C  0AA2               	incf	setLED@command,f
  5731  1E5D  0824               	movf	setSw_Initialization@sw,w
  5732  1E5E  318A  2275         	fcall	_setLED
  5733  1E60  0008               	return
  5734  1E61                     __end_of_setSw_Initialization:	
  5735                           
  5736                           	psect	text17
  5737  1E2D                     __ptext17:	
  5738 ;; *************** function _TouchPower *****************
  5739 ;; Defined at:
  5740 ;;		line 10 in file "../src/Switch_B1.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;		None
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;		None
  5745 ;; Return value:  Size  Location     Type
  5746 ;;		None               void
  5747 ;; Registers used:
  5748 ;;		None
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;Total ram usage:        0 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    5
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_Switch_Initialization
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _TouchPower
  5770  1E2D                     _TouchPower:	
  5771  1E2D                     l2620:	
  5772                           ;Switch_B1.c: 11: while (RC5 == 0)
  5773                           
  5774                           ;incstack = 0
  5775                           ; Regs used in _TouchPower: []
  5776                           
  5777  1E2D  0020               	movlb	0	; select bank0
  5778  1E2E  1A8E               	btfsc	14,5	;volatile
  5779  1E2F  0008               	return
  5780                           
  5781                           ;Switch_B1.c: 12: RC5 = 1;
  5782  1E30  168E               	bsf	14,5	;volatile
  5783  1E31  2E2D               	goto	l2620
  5784  1E32                     __end_of_TouchPower:	
  5785                           
  5786                           	psect	text18
  5787  1E29                     __ptext18:	
  5788 ;; *************** function _RF_Main *****************
  5789 ;; Defined at:
  5790 ;;		line 26 in file "../src/RF_Control_B1.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;		None
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;		None               void
  5797 ;; Registers used:
  5798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;Total ram usage:        0 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:   14
  5811 ;; This function calls:
  5812 ;;		_setRF_Main
  5813 ;; This function is called by:
  5814 ;;		_main
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function _RF_Main
  5820  1E29                     _RF_Main:	
  5821                           
  5822                           ;RF_Control_B1.c: 28: setRF_Main(1);
  5823                           
  5824                           ;incstack = 0
  5825                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5826  1E29  3001               	movlw	1
  5827  1E2A  3185  256F         	fcall	_setRF_Main
  5828  1E2C  0008               	return
  5829  1E2D                     __end_of_RF_Main:	
  5830                           
  5831                           	psect	text19
  5832  056F                     __ptext19:	
  5833 ;; *************** function _setRF_Main *****************
  5834 ;; Defined at:
  5835 ;;		line 60 in file "../src/RF_Control_B1.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  rf              1    wreg     unsigned char 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  rf              1   74[BANK0 ] unsigned char 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;		None               void
  5842 ;; Registers used:
  5843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 0/0
  5846 ;;		On exit  : 0/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;Total ram usage:        3 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:   13
  5856 ;; This function calls:
  5857 ;;		_CC2500_RxData
  5858 ;;		_CC2500_TxData
  5859 ;;		_CC2500_WriteCommand
  5860 ;;		_RF_RxDisable
  5861 ;;		_RfPointSelect
  5862 ;;		_getRxData
  5863 ;; This function is called by:
  5864 ;;		_RF_Main
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _setRF_Main
  5870  056F                     _setRF_Main:	
  5871                           
  5872                           ;incstack = 0
  5873                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5874                           ;setRF_Main@rf stored from wreg
  5875  056F  0020               	movlb	0	; select bank0
  5876  0570  00EA               	movwf	setRF_Main@rf
  5877                           
  5878                           ;RF_Control_B1.c: 61: RfPointSelect(rf);
  5879  0571  086A               	movf	setRF_Main@rf,w
  5880  0572  319E  26D9  3185   	fcall	_RfPointSelect
  5881                           
  5882                           ;RF_Control_B1.c: 62: if (RF->Enable == 1) {
  5883  0575  087A               	movf	_RF,w
  5884  0576  0086               	movwf	6
  5885  0577  0187               	clrf	7
  5886  0578  1C01               	btfss	1,0
  5887  0579  0008               	return
  5888                           
  5889                           ;RF_Control_B1.c: 65: if (Buz->GO == 0) {
  5890  057A  0021               	movlb	1	; select bank1
  5891  057B  0837               	movf	_Buz^(0+128),w
  5892  057C  0086               	movwf	6
  5893  057D  3001               	movlw	1	; select bank2/3
  5894  057E  0087               	movwf	7
  5895  057F  1881               	btfsc	1,1
  5896  0580  0008               	return
  5897                           
  5898                           ;RF_Control_B1.c: 67: RF->Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5899  0581  0020               	movlb	0	; select bank0
  5900  0582  01EB               	clrf	_setRF_Main$4200
  5901  0583  0AEB               	incf	_setRF_Main$4200,f
  5902  0584  1C0C               	btfss	12,0	;volatile
  5903  0585  1B0C               	btfsc	12,6	;volatile
  5904  0586  2D89               	goto	l6839
  5905  0587  1E0C               	btfss	12,4	;volatile
  5906  0588  01EB               	clrf	_setRF_Main$4200
  5907  0589                     l6839:	
  5908  0589  087A               	movf	_RF,w
  5909  058A  0086               	movwf	6
  5910  058B  0187               	clrf	7
  5911  058C  086B               	movf	_setRF_Main$4200,w
  5912  058D  1381               	bcf	1,7
  5913  058E  1D03               	skipz
  5914  058F  1781               	bsf	1,7
  5915                           
  5916                           ;RF_Control_B1.c: 77: if (RF->Key == 1 && RF->Learn == 0) {
  5917  0590  087A               	movf	_RF,w
  5918  0591  0086               	movwf	6
  5919  0592  0187               	clrf	7
  5920  0593  1F81               	btfss	1,7
  5921  0594  2DA2               	goto	l6849
  5922  0595  087A               	movf	_RF,w
  5923  0596  0086               	movwf	6
  5924  0597  0187               	clrf	7
  5925  0598  1B01               	btfsc	1,6
  5926  0599  2DA2               	goto	l6849
  5927                           
  5928                           ;RF_Control_B1.c: 78: RF->Run = 1;
  5929  059A  0A7A               	incf	_RF,w
  5930  059B  0086               	movwf	6
  5931  059C  0187               	clrf	7
  5932  059D  1481               	bsf	1,1
  5933                           
  5934                           ;RF_Control_B1.c: 79: RF_RxDisable(1);
  5935  059E  3001               	movlw	1
  5936  059F  3192  2255         	fcall	_RF_RxDisable
  5937                           
  5938                           ;RF_Control_B1.c: 80: } else {
  5939  05A1  0008               	return
  5940  05A2                     l6849:	
  5941                           
  5942                           ;RF_Control_B1.c: 81: if (RF->Run == 1 && RF->Learn == 0) {
  5943  05A2  0A7A               	incf	_RF,w
  5944  05A3  0086               	movwf	6
  5945  05A4  0187               	clrf	7
  5946  05A5  1C81               	btfss	1,1
  5947  05A6  2DC7               	goto	l6861
  5948  05A7  087A               	movf	_RF,w
  5949  05A8  0086               	movwf	6
  5950  05A9  0187               	clrf	7
  5951  05AA  1B01               	btfsc	1,6
  5952  05AB  2DC7               	goto	l6861
  5953                           
  5954                           ;RF_Control_B1.c: 82: RF->Count++;
  5955  05AC  3001               	movlw	1
  5956  05AD  0020               	movlb	0	; select bank0
  5957  05AE  00E9               	movwf	??_setRF_Main
  5958  05AF  087A               	movf	_RF,w
  5959  05B0  3E03               	addlw	3
  5960  05B1  0086               	movwf	6
  5961  05B2  0187               	clrf	7
  5962  05B3  0869               	movf	??_setRF_Main,w
  5963  05B4  0781               	addwf	1,f
  5964                           
  5965                           ;RF_Control_B1.c: 83: if (RF->Count == 25) {
  5966  05B5  087A               	movf	_RF,w
  5967  05B6  3E03               	addlw	3
  5968  05B7  0086               	movwf	6
  5969  05B8  0187               	clrf	7
  5970  05B9  0801               	movf	1,w
  5971  05BA  3A19               	xorlw	25
  5972  05BB  1D03               	skipz
  5973  05BC  0008               	return
  5974                           
  5975                           ;RF_Control_B1.c: 84: RF->Count = 0;
  5976  05BD  087A               	movf	_RF,w
  5977  05BE  3E03               	addlw	3
  5978  05BF  0086               	movwf	6
  5979  05C0  0187               	clrf	7
  5980  05C1  0181               	clrf	1
  5981                           
  5982                           ;RF_Control_B1.c: 85: RF->Run = 0;
  5983  05C2  0A7A               	incf	_RF,w
  5984  05C3  0086               	movwf	6
  5985  05C4  0187               	clrf	7
  5986  05C5  1081               	bcf	1,1
  5987                           
  5988                           ;RF_Control_B1.c: 86: }
  5989                           ;RF_Control_B1.c: 87: } else {
  5990  05C6  0008               	return
  5991  05C7                     l6861:	
  5992                           
  5993                           ;RF_Control_B1.c: 88: RF->Count = 0;
  5994  05C7  087A               	movf	_RF,w
  5995  05C8  3E03               	addlw	3
  5996  05C9  0086               	movwf	6
  5997  05CA  0187               	clrf	7
  5998  05CB  0181               	clrf	1
  5999                           
  6000                           ;RF_Control_B1.c: 89: RF->Run = 0;
  6001  05CC  0A7A               	incf	_RF,w
  6002  05CD  0086               	movwf	6
  6003  05CE  0187               	clrf	7
  6004  05CF  1081               	bcf	1,1
  6005                           
  6006                           ;RF_Control_B1.c: 91: if (RF->ReceiveGO == 1) {
  6007  05D0  087A               	movf	_RF,w
  6008  05D1  0086               	movwf	6
  6009  05D2  0187               	clrf	7
  6010  05D3  1C81               	btfss	1,1
  6011  05D4  2DE0               	goto	l6873
  6012                           
  6013                           ;RF_Control_B1.c: 92: RF->ReceiveGO = 0;
  6014  05D5  087A               	movf	_RF,w
  6015  05D6  0086               	movwf	6
  6016  05D7  0187               	clrf	7
  6017  05D8  1081               	bcf	1,1
  6018                           
  6019                           ;RF_Control_B1.c: 93: CC2500_RxData();
  6020  05D9  3188  2069  3185   	fcall	_CC2500_RxData
  6021                           
  6022                           ;RF_Control_B1.c: 101: getRxData(1);
  6023  05DC  3001               	movlw	1
  6024  05DD  3197  2704         	fcall	_getRxData
  6025                           
  6026                           ;RF_Control_B1.c: 105: } else {
  6027  05DF  0008               	return
  6028  05E0                     l6873:	
  6029                           
  6030                           ;RF_Control_B1.c: 106: if (RF->Learn == 0) {
  6031  05E0  087A               	movf	_RF,w
  6032  05E1  0086               	movwf	6
  6033  05E2  0187               	clrf	7
  6034  05E3  1B01               	btfsc	1,6
  6035  05E4  2E1B               	goto	l6897
  6036                           
  6037                           ;RF_Control_B1.c: 107: if (RF->TransceiveGO == 1) {
  6038  05E5  087A               	movf	_RF,w
  6039  05E6  0086               	movwf	6
  6040  05E7  0187               	clrf	7
  6041  05E8  1D01               	btfss	1,2
  6042  05E9  2E01               	goto	l6885
  6043                           
  6044                           ;RF_Control_B1.c: 108: RF->TransceiveGO = 0;
  6045  05EA  087A               	movf	_RF,w
  6046  05EB  0086               	movwf	6
  6047  05EC  0187               	clrf	7
  6048  05ED  1101               	bcf	1,2
  6049                           
  6050                           ;RF_Control_B1.c: 109: RF->RxStatus = 0;
  6051  05EE  087A               	movf	_RF,w
  6052  05EF  0086               	movwf	6
  6053  05F0  0187               	clrf	7
  6054  05F1  1181               	bcf	1,3
  6055                           
  6056                           ;RF_Control_B1.c: 110: RF->ReceiveGO = 0;
  6057  05F2  087A               	movf	_RF,w
  6058  05F3  0086               	movwf	6
  6059  05F4  0187               	clrf	7
  6060  05F5  1081               	bcf	1,1
  6061                           
  6062                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  6063  05F6  3036               	movlw	54
  6064  05F7  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6065                           
  6066                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3B);
  6067  05FA  303B               	movlw	59
  6068  05FB  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6069                           
  6070                           ;RF_Control_B1.c: 114: CC2500_TxData();
  6071  05FE  3195  2560         	fcall	_CC2500_TxData
  6072                           
  6073                           ;RF_Control_B1.c: 116: } else {
  6074  0600  0008               	return
  6075  0601                     l6885:	
  6076                           
  6077                           ;RF_Control_B1.c: 118: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6078  0601  087A               	movf	_RF,w
  6079  0602  0086               	movwf	6
  6080  0603  0187               	clrf	7
  6081  0604  1981               	btfsc	1,3
  6082  0605  0008               	return
  6083  0606  087A               	movf	_RF,w
  6084  0607  0086               	movwf	6
  6085  0608  0187               	clrf	7
  6086  0609  1881               	btfsc	1,1
  6087  060A  0008               	return
  6088                           
  6089                           ;RF_Control_B1.c: 119: RF->RxStatus = 1;
  6090  060B  087A               	movf	_RF,w
  6091  060C  0086               	movwf	6
  6092  060D  0187               	clrf	7
  6093  060E  1581               	bsf	1,3
  6094                           
  6095                           ;RF_Control_B1.c: 120: CC2500_WriteCommand(0x36);
  6096  060F  3036               	movlw	54
  6097  0610  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6098                           
  6099                           ;RF_Control_B1.c: 121: CC2500_WriteCommand(0x3A);
  6100  0613  303A               	movlw	58
  6101  0614  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6102                           
  6103                           ;RF_Control_B1.c: 122: CC2500_WriteCommand(0x34);
  6104  0617  3034               	movlw	52
  6105  0618  319F  2714         	fcall	_CC2500_WriteCommand
  6106                           
  6107                           ;RF_Control_B1.c: 124: }
  6108                           ;RF_Control_B1.c: 127: }
  6109                           ;RF_Control_B1.c: 128: } else {
  6110  061A  0008               	return
  6111  061B                     l6897:	
  6112                           
  6113                           ;RF_Control_B1.c: 130: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6114  061B  087A               	movf	_RF,w
  6115  061C  0086               	movwf	6
  6116  061D  0187               	clrf	7
  6117  061E  1981               	btfsc	1,3
  6118  061F  0008               	return
  6119  0620  087A               	movf	_RF,w
  6120  0621  0086               	movwf	6
  6121  0622  0187               	clrf	7
  6122  0623  1881               	btfsc	1,1
  6123  0624  0008               	return
  6124                           
  6125                           ;RF_Control_B1.c: 131: RF->RxStatus = 1;
  6126  0625  087A               	movf	_RF,w
  6127  0626  0086               	movwf	6
  6128  0627  0187               	clrf	7
  6129  0628  1581               	bsf	1,3
  6130                           
  6131                           ;RF_Control_B1.c: 132: CC2500_WriteCommand(0x36);
  6132  0629  3036               	movlw	54
  6133  062A  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6134                           
  6135                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x3A);
  6136  062D  303A               	movlw	58
  6137  062E  319F  2714  3185   	fcall	_CC2500_WriteCommand
  6138                           
  6139                           ;RF_Control_B1.c: 134: CC2500_WriteCommand(0x34);
  6140  0631  3034               	movlw	52
  6141  0632  319F  2714         	fcall	_CC2500_WriteCommand
  6142  0634  0008               	return
  6143  0635                     __end_of_setRF_Main:	
  6144                           
  6145                           	psect	text20
  6146  1704                     __ptext20:	
  6147 ;; *************** function _getRxData *****************
  6148 ;; Defined at:
  6149 ;;		line 223 in file "../src/RF_Control_B1.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  rf              1    wreg     unsigned char 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  rf              1   72[BANK0 ] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;		None               void
  6156 ;; Registers used:
  6157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:   12
  6170 ;; This function calls:
  6171 ;;		_RfPointSelect
  6172 ;;		_setControl_Lights_Table
  6173 ;;		_setLog_Code
  6174 ;; This function is called by:
  6175 ;;		_setRF_Main
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _getRxData
  6181  1704                     _getRxData:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6185                           ;getRxData@rf stored from wreg
  6186  1704  0020               	movlb	0	; select bank0
  6187  1705  00E8               	movwf	getRxData@rf
  6188                           
  6189                           ;RF_Control_B1.c: 224: RfPointSelect(rf);
  6190  1706  0868               	movf	getRxData@rf,w
  6191  1707  319E  26D9  3197   	fcall	_RfPointSelect
  6192                           
  6193                           ;RF_Control_B1.c: 225: if (RF->Learn) {
  6194  170A  087A               	movf	_RF,w
  6195  170B  0086               	movwf	6
  6196  170C  0187               	clrf	7
  6197  170D  1F01               	btfss	1,6
  6198  170E  2F1B               	goto	l6243
  6199                           
  6200                           ;RF_Control_B1.c: 226: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6201  170F  0021               	movlb	1	; select bank1
  6202  1710  08A0               	movf	_RF_Data^(0+128),f
  6203  1711  1D03               	skipz
  6204  1712  0008               	return
  6205  1713  0821               	movf	(_RF_Data^(0+128)+1),w
  6206  1714  3A64               	xorlw	100
  6207  1715  1D03               	skipz
  6208  1716  0008               	return
  6209                           
  6210                           ;RF_Control_B1.c: 227: {
  6211                           ;RF_Control_B1.c: 228: setLog_Code(1);
  6212  1717  3001               	movlw	1
  6213  1718  3196  2676         	fcall	_setLog_Code
  6214                           
  6215                           ;RF_Control_B1.c: 229: }
  6216                           ;RF_Control_B1.c: 230: } else {
  6217  171A  0008               	return
  6218  171B                     l6243:	
  6219                           
  6220                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6221  171B  0021               	movlb	1	; select bank1
  6222  171C  08A0               	movf	_RF_Data^(0+128),f
  6223  171D  1D03               	skipz
  6224  171E  0008               	return
  6225  171F  0821               	movf	(_RF_Data^(0+128)+1),w
  6226  1720  3A02               	xorlw	2
  6227  1721  1D03               	skipz
  6228  1722  0008               	return
  6229                           
  6230                           ;RF_Control_B1.c: 232: {
  6231                           ;RF_Control_B1.c: 233: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6232  1723  082C               	movf	(_RF_Data^(0+128)+12),w
  6233  1724  3AFF               	xorlw	255
  6234  1725  1D03               	skipz
  6235  1726  2F31               	goto	l6255
  6236  1727  082D               	movf	(_RF_Data^(0+128)+13),w
  6237  1728  3AFF               	xorlw	255
  6238  1729  1D03               	skipz
  6239  172A  2F31               	goto	l6255
  6240  172B  082E               	movf	(_RF_Data^(0+128)+14),w
  6241  172C  3AFF               	xorlw	255
  6242  172D  1D03               	skipz
  6243  172E  2F31               	goto	l6255
  6244                           
  6245                           ;RF_Control_B1.c: 234: __nop();
  6246  172F  0000               	nop
  6247                           
  6248                           ;RF_Control_B1.c: 235: } else {
  6249  1730  0008               	return
  6250  1731                     l6255:	
  6251                           
  6252                           ;RF_Control_B1.c: 236: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6253  1731  087D               	movf	_product,w
  6254  1732  3E0C               	addlw	12
  6255  1733  0086               	movwf	6
  6256  1734  3001               	movlw	1	; select bank2/3
  6257  1735  0087               	movwf	7
  6258  1736  0021               	movlb	1	; select bank1
  6259  1737  082C               	movf	(_RF_Data^(0+128)+12),w
  6260  1738  0601               	xorwf	1,w
  6261  1739  1D03               	skipz
  6262  173A  0008               	return
  6263  173B  087D               	movf	_product,w
  6264  173C  3E0D               	addlw	13
  6265  173D  0086               	movwf	6
  6266  173E  3001               	movlw	1	; select bank2/3
  6267  173F  0087               	movwf	7
  6268  1740  082D               	movf	(_RF_Data^(0+128)+13),w
  6269  1741  0601               	xorwf	1,w
  6270  1742  1D03               	skipz
  6271  1743  0008               	return
  6272  1744  087D               	movf	_product,w
  6273  1745  3E0E               	addlw	14
  6274  1746  0086               	movwf	6
  6275  1747  3001               	movlw	1	; select bank2/3
  6276  1748  0087               	movwf	7
  6277  1749  082E               	movf	(_RF_Data^(0+128)+14),w
  6278  174A  0601               	xorwf	1,w
  6279  174B  1D03               	skipz
  6280  174C  0008               	return
  6281                           
  6282                           ;RF_Control_B1.c: 237: setControl_Lights_Table(1);
  6283  174D  3001               	movlw	1
  6284  174E  3186  2635         	fcall	_setControl_Lights_Table
  6285                           
  6286                           ;RF_Control_B1.c: 244: {
  6287                           ;RF_Control_B1.c: 245: ;
  6288                           
  6289                           ;RF_Control_B1.c: 241: {
  6290                           ;RF_Control_B1.c: 242: ;
  6291                           ;RF_Control_B1.c: 243: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6292                           
  6293                           ;RF_Control_B1.c: 238: }
  6294                           ;RF_Control_B1.c: 239: }
  6295                           ;RF_Control_B1.c: 240: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6296  1750  0008               	return
  6297  1751                     __end_of_getRxData:	
  6298                           
  6299                           	psect	text21
  6300  1676                     __ptext21:	
  6301 ;; *************** function _setLog_Code *****************
  6302 ;; Defined at:
  6303 ;;		line 255 in file "../src/RF_Control_B1.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;  rf              1    wreg     unsigned char 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  rf              1   14[BANK0 ] unsigned char 
  6308 ;; Return value:  Size  Location     Type
  6309 ;;		None               void
  6310 ;; Registers used:
  6311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        2 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    7
  6324 ;; This function calls:
  6325 ;;		_RfPointSelect
  6326 ;;		_setBuz
  6327 ;; This function is called by:
  6328 ;;		_getRxData
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332                           
  6333                           ;psect for function _setLog_Code
  6334  1676                     _setLog_Code:	
  6335                           
  6336                           ;incstack = 0
  6337                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6338                           ;setLog_Code@rf stored from wreg
  6339  1676  0020               	movlb	0	; select bank0
  6340  1677  00AE               	movwf	setLog_Code@rf
  6341                           
  6342                           ;RF_Control_B1.c: 256: RfPointSelect(rf);
  6343  1678  082E               	movf	setLog_Code@rf,w
  6344  1679  319E  26D9  3196   	fcall	_RfPointSelect
  6345                           
  6346                           ;RF_Control_B1.c: 257: product->Data[12]=RF_Data[12];
  6347  167C  0021               	movlb	1	; select bank1
  6348  167D  082C               	movf	(_RF_Data^(0+128)+12),w
  6349  167E  0020               	movlb	0	; select bank0
  6350  167F  00AD               	movwf	??_setLog_Code
  6351  1680  087D               	movf	_product,w
  6352  1681  3E0C               	addlw	12
  6353  1682  0086               	movwf	6
  6354  1683  3001               	movlw	1	; select bank2/3
  6355  1684  0087               	movwf	7
  6356  1685  082D               	movf	??_setLog_Code,w
  6357  1686  0081               	movwf	1
  6358                           
  6359                           ;RF_Control_B1.c: 258: product->Data[13]=RF_Data[13];
  6360  1687  0021               	movlb	1	; select bank1
  6361  1688  082D               	movf	(_RF_Data^(0+128)+13),w
  6362  1689  0020               	movlb	0	; select bank0
  6363  168A  00AD               	movwf	??_setLog_Code
  6364  168B  087D               	movf	_product,w
  6365  168C  3E0D               	addlw	13
  6366  168D  0086               	movwf	6
  6367  168E  3001               	movlw	1	; select bank2/3
  6368  168F  0087               	movwf	7
  6369  1690  082D               	movf	??_setLog_Code,w
  6370  1691  0081               	movwf	1
  6371                           
  6372                           ;RF_Control_B1.c: 259: product->Data[14]=RF_Data[14];
  6373  1692  0021               	movlb	1	; select bank1
  6374  1693  082E               	movf	(_RF_Data^(0+128)+14),w
  6375  1694  0020               	movlb	0	; select bank0
  6376  1695  00AD               	movwf	??_setLog_Code
  6377  1696  087D               	movf	_product,w
  6378  1697  3E0E               	addlw	14
  6379  1698  0086               	movwf	6
  6380  1699  3001               	movlw	1	; select bank2/3
  6381  169A  0087               	movwf	7
  6382  169B  082D               	movf	??_setLog_Code,w
  6383  169C  0081               	movwf	1
  6384                           
  6385                           ;RF_Control_B1.c: 260: setBuz(1, 100);
  6386  169D  3064               	movlw	100
  6387  169E  00A9               	movwf	setBuz@time
  6388  169F  3000               	movlw	0
  6389  16A0  00AA               	movwf	setBuz@time+1
  6390  16A1  3001               	movlw	1
  6391  16A2  318C  24E6  3196   	fcall	_setBuz
  6392                           
  6393                           ;RF_Control_B1.c: 261: RF->Learn = 0;
  6394  16A5  087A               	movf	_RF,w
  6395  16A6  0086               	movwf	6
  6396  16A7  0187               	clrf	7
  6397  16A8  1301               	bcf	1,6
  6398                           
  6399                           ;RF_Control_B1.c: 262: if (myMain->First) {
  6400  16A9  0021               	movlb	1	; select bank1
  6401  16AA  086E               	movf	_myMain^(0+128),w
  6402  16AB  0086               	movwf	6
  6403  16AC  3001               	movlw	1	; select bank2/3
  6404  16AD  0087               	movwf	7
  6405  16AE  1F81               	btfss	1,7
  6406  16AF  2EB6               	goto	l2221
  6407                           
  6408                           ;RF_Control_B1.c: 263: Memory->LoopSave=1;
  6409  16B0  086F               	movf	_Memory^(0+128),w
  6410  16B1  3E24               	addlw	36
  6411  16B2  0086               	movwf	6
  6412  16B3  3002               	movlw	2	; select bank4/5
  6413  16B4  0087               	movwf	7
  6414  16B5  1501               	bsf	1,2
  6415  16B6                     l2221:	
  6416                           
  6417                           ;RF_Control_B1.c: 264: }
  6418                           ;RF_Control_B1.c: 265: Memory->Modify=1;
  6419  16B6  086F               	movf	_Memory^(0+128),w
  6420  16B7  3E24               	addlw	36
  6421  16B8  0086               	movwf	6
  6422  16B9  3002               	movlw	2	; select bank4/5
  6423  16BA  0087               	movwf	7
  6424  16BB  1401               	bsf	1,0
  6425  16BC  0008               	return
  6426  16BD                     __end_of_setLog_Code:	
  6427                           
  6428                           	psect	text22
  6429  0635                     __ptext22:	
  6430 ;; *************** function _setControl_Lights_Table *****************
  6431 ;; Defined at:
  6432 ;;		line 269 in file "../src/RF_Control_B1.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;  rf              1    wreg     unsigned char 
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;  rf              1   71[BANK0 ] unsigned char 
  6437 ;; Return value:  Size  Location     Type
  6438 ;;		None               void
  6439 ;; Registers used:
  6440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;Total ram usage:        1 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; Hardware stack levels required when called:   11
  6453 ;; This function calls:
  6454 ;;		_RfPointSelect
  6455 ;;		_setBuz
  6456 ;;		_setDimmerLights
  6457 ;;		_setRFSW_AdjControl
  6458 ;;		_setRFSW_Control
  6459 ;;		_setRFSW_Status
  6460 ;;		_setSw_Status
  6461 ;;		_setTxData
  6462 ;; This function is called by:
  6463 ;;		_getRxData
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           
  6468                           ;psect for function _setControl_Lights_Table
  6469  0635                     _setControl_Lights_Table:	
  6470                           
  6471                           ;incstack = 0
  6472                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6473                           ;setControl_Lights_Table@rf stored from wreg
  6474  0635  0020               	movlb	0	; select bank0
  6475  0636  00E7               	movwf	setControl_Lights_Table@rf
  6476                           
  6477                           ;RF_Control_B1.c: 270: RfPointSelect(rf);
  6478  0637  0867               	movf	setControl_Lights_Table@rf,w
  6479  0638  319E  26D9  3186   	fcall	_RfPointSelect
  6480                           
  6481                           ;RF_Control_B1.c: 271: if (RF_Data[15] == 0x00) {
  6482  063B  0021               	movlb	1	; select bank1
  6483  063C  08AF               	movf	(_RF_Data^(0+128)+15),f
  6484  063D  1D03               	skipz
  6485  063E  2E9A               	goto	l5983
  6486                           
  6487                           ;RF_Control_B1.c: 273: setDimmerLights(1, 0);
  6488  063F  0020               	movlb	0	; select bank0
  6489  0640  01A4               	clrf	setDimmerLights@status
  6490  0641  3001               	movlw	1
  6491  0642  318B  2359  3186   	fcall	_setDimmerLights
  6492                           
  6493                           ;RF_Control_B1.c: 274: setRFSW_Status(1, 0);
  6494  0645  0020               	movlb	0	; select bank0
  6495  0646  01A2               	clrf	setRFSW_Status@command
  6496  0647  3001               	movlw	1
  6497  0648  3190  2066  3186   	fcall	_setRFSW_Status
  6498                           
  6499                           ;RF_Control_B1.c: 275: setSw_Status(1, 0);
  6500  064B  0020               	movlb	0	; select bank0
  6501  064C  01A2               	clrf	setSw_Status@command
  6502  064D  3001               	movlw	1
  6503  064E  319F  2705  3186   	fcall	_setSw_Status
  6504                           
  6505                           ;RF_Control_B1.c: 278: setDimmerLights(2, 0);
  6506  0651  0020               	movlb	0	; select bank0
  6507  0652  01A4               	clrf	setDimmerLights@status
  6508  0653  3002               	movlw	2
  6509  0654  318B  2359  3186   	fcall	_setDimmerLights
  6510                           
  6511                           ;RF_Control_B1.c: 279: setRFSW_Status(2, 0);
  6512  0657  0020               	movlb	0	; select bank0
  6513  0658  01A2               	clrf	setRFSW_Status@command
  6514  0659  3002               	movlw	2
  6515  065A  3190  2066  3186   	fcall	_setRFSW_Status
  6516                           
  6517                           ;RF_Control_B1.c: 280: setSw_Status(2, 0);
  6518  065D  0020               	movlb	0	; select bank0
  6519  065E  01A2               	clrf	setSw_Status@command
  6520  065F  3002               	movlw	2
  6521  0660  319F  2705  3186   	fcall	_setSw_Status
  6522                           
  6523                           ;RF_Control_B1.c: 283: setDimmerLights(3, 0);
  6524  0663  0020               	movlb	0	; select bank0
  6525  0664  01A4               	clrf	setDimmerLights@status
  6526  0665  3003               	movlw	3
  6527  0666  318B  2359  3186   	fcall	_setDimmerLights
  6528                           
  6529                           ;RF_Control_B1.c: 284: setRFSW_Status(3, 0);
  6530  0669  0020               	movlb	0	; select bank0
  6531  066A  01A2               	clrf	setRFSW_Status@command
  6532  066B  3003               	movlw	3
  6533  066C  3190  2066  3186   	fcall	_setRFSW_Status
  6534                           
  6535                           ;RF_Control_B1.c: 285: setSw_Status(3, 0);
  6536  066F  0020               	movlb	0	; select bank0
  6537  0670  01A2               	clrf	setSw_Status@command
  6538  0671  3003               	movlw	3
  6539  0672  319F  2705  3186   	fcall	_setSw_Status
  6540                           
  6541                           ;RF_Control_B1.c: 288: product->Data[9]=0;
  6542  0675  087D               	movf	_product,w
  6543  0676  3E09               	addlw	9
  6544  0677  0086               	movwf	6
  6545  0678  3001               	movlw	1	; select bank2/3
  6546  0679  0087               	movwf	7
  6547  067A  0181               	clrf	1
  6548                           
  6549                           ;RF_Control_B1.c: 289: product->Data[11]=0;
  6550  067B  087D               	movf	_product,w
  6551  067C  3E0B               	addlw	11
  6552  067D  0086               	movwf	6
  6553  067E  3001               	movlw	1	; select bank2/3
  6554  067F  0087               	movwf	7
  6555  0680  0181               	clrf	1
  6556                           
  6557                           ;RF_Control_B1.c: 290: product->Data[15]=0;
  6558  0681  087D               	movf	_product,w
  6559  0682  3E0F               	addlw	15
  6560  0683  0086               	movwf	6
  6561  0684  3001               	movlw	1	; select bank2/3
  6562  0685  0087               	movwf	7
  6563  0686  0181               	clrf	1
  6564                           
  6565                           ;RF_Control_B1.c: 291: product->Data[17]=0;
  6566  0687  087D               	movf	_product,w
  6567  0688  3E11               	addlw	17
  6568  0689  0086               	movwf	6
  6569  068A  3001               	movlw	1	; select bank2/3
  6570  068B  0087               	movwf	7
  6571  068C  0181               	clrf	1
  6572                           
  6573                           ;RF_Control_B1.c: 292: setBuz(1, 100);
  6574  068D  3064               	movlw	100
  6575  068E  0020               	movlb	0	; select bank0
  6576  068F  00A9               	movwf	setBuz@time
  6577  0690  3000               	movlw	0
  6578  0691  00AA               	movwf	setBuz@time+1
  6579  0692  3001               	movlw	1
  6580  0693  318C  24E6  3186   	fcall	_setBuz
  6581                           
  6582                           ;RF_Control_B1.c: 293: setTxData(1);
  6583  0696  3001               	movlw	1
  6584  0697  318E  2604         	fcall	_setTxData
  6585                           
  6586                           ;RF_Control_B1.c: 294: } else if (RF_Data[15] == 0x20) {
  6587  0699  0008               	return
  6588  069A                     l5983:	
  6589  069A  0021               	movlb	1	; select bank1
  6590  069B  082F               	movf	(_RF_Data^(0+128)+15),w
  6591  069C  3A20               	xorlw	32
  6592  069D  1D03               	skipz
  6593  069E  2EB5               	goto	l5989
  6594                           
  6595                           ;RF_Control_B1.c: 295: product->Data[9]=0;
  6596  069F  087D               	movf	_product,w
  6597  06A0  3E09               	addlw	9
  6598  06A1  0086               	movwf	6
  6599  06A2  3001               	movlw	1	; select bank2/3
  6600  06A3  0087               	movwf	7
  6601  06A4  0181               	clrf	1
  6602                           
  6603                           ;RF_Control_B1.c: 296: product->Data[11]=0;
  6604  06A5  087D               	movf	_product,w
  6605  06A6  3E0B               	addlw	11
  6606  06A7  0086               	movwf	6
  6607  06A8  3001               	movlw	1	; select bank2/3
  6608  06A9  0087               	movwf	7
  6609  06AA  0181               	clrf	1
  6610                           
  6611                           ;RF_Control_B1.c: 297: product->Data[17]=0;
  6612  06AB  087D               	movf	_product,w
  6613  06AC  3E11               	addlw	17
  6614  06AD  0086               	movwf	6
  6615  06AE  3001               	movlw	1	; select bank2/3
  6616  06AF  0087               	movwf	7
  6617  06B0  0181               	clrf	1
  6618                           
  6619                           ;RF_Control_B1.c: 298: setTxData(1);
  6620  06B1  3001               	movlw	1
  6621  06B2  318E  2604         	fcall	_setTxData
  6622                           
  6623                           ;RF_Control_B1.c: 299: }
  6624  06B4  0008               	return
  6625  06B5                     l5989:	
  6626                           
  6627                           ;RF_Control_B1.c: 301: else if (RF_Data[15] == 0x01) {
  6628  06B5  0021               	movlb	1	; select bank1
  6629  06B6  082F               	movf	(_RF_Data^(0+128)+15),w
  6630  06B7  3A01               	xorlw	1
  6631  06B8  1D03               	skipz
  6632  06B9  2EBE               	goto	l5993
  6633                           
  6634                           ;RF_Control_B1.c: 302: setRFSW_Control(1);
  6635  06BA  3001               	movlw	1
  6636  06BB  3188  20C7         	fcall	_setRFSW_Control
  6637                           
  6638                           ;RF_Control_B1.c: 303: }
  6639  06BD  0008               	return
  6640  06BE                     l5993:	
  6641                           
  6642                           ;RF_Control_B1.c: 305: else if (RF_Data[15] == 0x11) {
  6643  06BE  0021               	movlb	1	; select bank1
  6644  06BF  082F               	movf	(_RF_Data^(0+128)+15),w
  6645  06C0  3A11               	xorlw	17
  6646  06C1  1D03               	skipz
  6647  06C2  2EC7               	goto	l5997
  6648                           
  6649                           ;RF_Control_B1.c: 306: setRFSW_AdjControl(1);
  6650  06C3  3001               	movlw	1
  6651  06C4  3195  2520         	fcall	_setRFSW_AdjControl
  6652                           
  6653                           ;RF_Control_B1.c: 307: }
  6654  06C6  0008               	return
  6655  06C7                     l5997:	
  6656                           
  6657                           ;RF_Control_B1.c: 312: else if (RF_Data[15] == 0x02) {
  6658  06C7  0021               	movlb	1	; select bank1
  6659  06C8  082F               	movf	(_RF_Data^(0+128)+15),w
  6660  06C9  3A02               	xorlw	2
  6661  06CA  1D03               	skipz
  6662  06CB  2ED0               	goto	l6001
  6663                           
  6664                           ;RF_Control_B1.c: 313: setRFSW_Control(2);
  6665  06CC  3002               	movlw	2
  6666  06CD  3188  20C7         	fcall	_setRFSW_Control
  6667                           
  6668                           ;RF_Control_B1.c: 314: }
  6669  06CF  0008               	return
  6670  06D0                     l6001:	
  6671                           
  6672                           ;RF_Control_B1.c: 316: else if (RF_Data[15] == 0x21) {
  6673  06D0  0021               	movlb	1	; select bank1
  6674  06D1  082F               	movf	(_RF_Data^(0+128)+15),w
  6675  06D2  3A21               	xorlw	33
  6676  06D3  1D03               	skipz
  6677  06D4  2ED9               	goto	l6005
  6678                           
  6679                           ;RF_Control_B1.c: 317: setRFSW_AdjControl(2);
  6680  06D5  3002               	movlw	2
  6681  06D6  3195  2520         	fcall	_setRFSW_AdjControl
  6682                           
  6683                           ;RF_Control_B1.c: 318: }
  6684  06D8  0008               	return
  6685  06D9                     l6005:	
  6686                           
  6687                           ;RF_Control_B1.c: 323: else if (RF_Data[15] == 0x03) {
  6688  06D9  0021               	movlb	1	; select bank1
  6689  06DA  082F               	movf	(_RF_Data^(0+128)+15),w
  6690  06DB  3A03               	xorlw	3
  6691  06DC  1D03               	skipz
  6692  06DD  2EE2               	goto	l6009
  6693                           
  6694                           ;RF_Control_B1.c: 324: setRFSW_Control(3);
  6695  06DE  3003               	movlw	3
  6696  06DF  3188  20C7         	fcall	_setRFSW_Control
  6697                           
  6698                           ;RF_Control_B1.c: 325: }
  6699  06E1  0008               	return
  6700  06E2                     l6009:	
  6701                           
  6702                           ;RF_Control_B1.c: 327: else if (RF_Data[15] == 0x31) {
  6703  06E2  0021               	movlb	1	; select bank1
  6704  06E3  082F               	movf	(_RF_Data^(0+128)+15),w
  6705  06E4  3A31               	xorlw	49
  6706  06E5  1D03               	skipz
  6707  06E6  0008               	return
  6708                           
  6709                           ;RF_Control_B1.c: 328: setRFSW_AdjControl(3);
  6710  06E7  3003               	movlw	3
  6711  06E8  3195  2520         	fcall	_setRFSW_AdjControl
  6712  06EA  0008               	return
  6713  06EB                     __end_of_setControl_Lights_Table:	
  6714                           
  6715                           	psect	text23
  6716  1066                     __ptext23:	
  6717 ;; *************** function _setRFSW_Status *****************
  6718 ;; Defined at:
  6719 ;;		line 400 in file "../src/RF_Control_B1.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  sw              1    wreg     unsigned char 
  6722 ;;  command         1    2[BANK0 ] unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  sw              1    3[BANK0 ] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : 0/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;Total ram usage:        2 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    6
  6741 ;; This function calls:
  6742 ;;		_RfSWPointSelect
  6743 ;; This function is called by:
  6744 ;;		_setControl_Lights_Table
  6745 ;;		_Sw_DimmerOnFunc
  6746 ;;		_Sw_DimmerAdjFunc
  6747 ;;		_setDimmerLights_ERROR
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function _setRFSW_Status
  6753  1066                     _setRFSW_Status:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6757                           ;setRFSW_Status@sw stored from wreg
  6758  1066  0020               	movlb	0	; select bank0
  6759  1067  00A3               	movwf	setRFSW_Status@sw
  6760                           
  6761                           ;RF_Control_B1.c: 401: RfSWPointSelect(sw);
  6762  1068  0823               	movf	setRFSW_Status@sw,w
  6763  1069  3192  2275         	fcall	_RfSWPointSelect
  6764                           
  6765                           ;RF_Control_B1.c: 402: RFSW->Status = command;
  6766  106B  0021               	movlb	1	; select bank1
  6767  106C  083F               	movf	_RFSW^(0+128),w
  6768  106D  0086               	movwf	6
  6769  106E  0187               	clrf	7
  6770  106F  0020               	movlb	0	; select bank0
  6771  1070  0822               	movf	setRFSW_Status@command,w
  6772  1071  1001               	bcf	1,0
  6773  1072  1D03               	skipz
  6774  1073  1401               	bsf	1,0
  6775  1074  0008               	return
  6776  1075                     __end_of_setRFSW_Status:	
  6777                           
  6778                           	psect	text24
  6779  08C7                     __ptext24:	
  6780 ;; *************** function _setRFSW_Control *****************
  6781 ;; Defined at:
  6782 ;;		line 354 in file "../src/RF_Control_B1.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  sw              1    wreg     unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  sw              1   66[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;Total ram usage:        1 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:    9
  6803 ;; This function calls:
  6804 ;;		_RfSWPointSelect
  6805 ;;		_setBuz
  6806 ;;		_setDimmerLights_Switch
  6807 ;;		_setDimmerLights_Trigger
  6808 ;;		_setRF_DimmerLights
  6809 ;;		_setSw_Status
  6810 ;;		_setTxData
  6811 ;; This function is called by:
  6812 ;;		_setControl_Lights_Table
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _setRFSW_Control
  6818  08C7                     _setRFSW_Control:	
  6819                           
  6820                           ;incstack = 0
  6821                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6822                           ;setRFSW_Control@sw stored from wreg
  6823  08C7  0020               	movlb	0	; select bank0
  6824  08C8  00E2               	movwf	setRFSW_Control@sw
  6825                           
  6826                           ;RF_Control_B1.c: 355: RfSWPointSelect(sw);
  6827  08C9  0862               	movf	setRFSW_Control@sw,w
  6828  08CA  3192  2275  3188   	fcall	_RfSWPointSelect
  6829                           
  6830                           ;RF_Control_B1.c: 356: if (!RFSW->Status) {
  6831  08CD  0021               	movlb	1	; select bank1
  6832  08CE  083F               	movf	_RFSW^(0+128),w
  6833  08CF  0086               	movwf	6
  6834  08D0  0187               	clrf	7
  6835  08D1  1801               	btfsc	1,0
  6836  08D2  28F6               	goto	l5881
  6837                           
  6838                           ;RF_Control_B1.c: 359: }
  6839                           ;RF_Control_B1.c: 360: RFSW->Status = 1;
  6840                           
  6841                           ;RF_Control_B1.c: 358: ;;
  6842  08D3  083F               	movf	_RFSW^(0+128),w
  6843  08D4  0086               	movwf	6
  6844  08D5  0187               	clrf	7
  6845  08D6  1401               	bsf	1,0
  6846                           
  6847                           ;RF_Control_B1.c: 361: setSw_Status(sw, 1);
  6848  08D7  0020               	movlb	0	; select bank0
  6849  08D8  01A2               	clrf	setSw_Status@command
  6850  08D9  0AA2               	incf	setSw_Status@command,f
  6851  08DA  0862               	movf	setRFSW_Control@sw,w
  6852  08DB  319F  2705  3188   	fcall	_setSw_Status
  6853                           
  6854                           ;RF_Control_B1.c: 363: setDimmerLights_Trigger(sw, 1);
  6855  08DE  0020               	movlb	0	; select bank0
  6856  08DF  01A2               	clrf	setDimmerLights_Trigger@command
  6857  08E0  0AA2               	incf	setDimmerLights_Trigger@command,f
  6858  08E1  0862               	movf	setRFSW_Control@sw,w
  6859  08E2  319F  2754  3188   	fcall	_setDimmerLights_Trigger
  6860                           
  6861                           ;RF_Control_B1.c: 364: setDimmerLights_Switch(sw, 1);
  6862  08E5  0020               	movlb	0	; select bank0
  6863  08E6  01A2               	clrf	setDimmerLights_Switch@command
  6864  08E7  0AA2               	incf	setDimmerLights_Switch@command,f
  6865  08E8  0862               	movf	setRFSW_Control@sw,w
  6866  08E9  319F  2744  3188   	fcall	_setDimmerLights_Switch
  6867                           
  6868                           ;RF_Control_B1.c: 366: setRF_DimmerLights(sw, RFSW->Status);
  6869  08EC  0021               	movlb	1	; select bank1
  6870  08ED  083F               	movf	_RFSW^(0+128),w
  6871  08EE  0086               	movwf	6
  6872  08EF  0187               	clrf	7
  6873  08F0  3000               	movlw	0
  6874  08F1  1801               	btfsc	1,0
  6875  08F2  3001               	movlw	1
  6876  08F3  0020               	movlb	0	; select bank0
  6877  08F4  00DD               	movwf	setRF_DimmerLights@on
  6878  08F5  2920               	goto	L5
  6879  08F6                     l5881:	
  6880                           ;RF_Control_B1.c: 367: } else {
  6881                           
  6882                           
  6883                           ;RF_Control_B1.c: 368: if (RF_Data[16] == 0x80) {
  6884  08F6  0021               	movlb	1	; select bank1
  6885  08F7  0830               	movf	(_RF_Data^(0+128)+16),w
  6886  08F8  3A80               	xorlw	128
  6887  08F9  1D03               	skipz
  6888  08FA  28FF               	goto	l5885
  6889                           
  6890                           ;RF_Control_B1.c: 369: ;;
  6891                           ;RF_Control_B1.c: 370: setRF_DimmerLights(sw, 1);
  6892  08FB  0020               	movlb	0	; select bank0
  6893  08FC  01DD               	clrf	setRF_DimmerLights@on
  6894  08FD  0ADD               	incf	setRF_DimmerLights@on,f
  6895  08FE  2920               	goto	L5
  6896  08FF                     l5885:	
  6897                           ;RF_Control_B1.c: 371: } else {
  6898                           
  6899                           
  6900                           ;RF_Control_B1.c: 372: RFSW->Status = 0;
  6901  08FF  0021               	movlb	1	; select bank1
  6902  0900  083F               	movf	_RFSW^(0+128),w
  6903  0901  0086               	movwf	6
  6904  0902  0187               	clrf	7
  6905  0903  1001               	bcf	1,0
  6906                           
  6907                           ;RF_Control_B1.c: 373: setSw_Status(sw, 0);
  6908  0904  0020               	movlb	0	; select bank0
  6909  0905  01A2               	clrf	setSw_Status@command
  6910  0906  0862               	movf	setRFSW_Control@sw,w
  6911  0907  319F  2705  3188   	fcall	_setSw_Status
  6912                           
  6913                           ;RF_Control_B1.c: 375: setDimmerLights_Trigger(sw, 1);
  6914  090A  0020               	movlb	0	; select bank0
  6915  090B  01A2               	clrf	setDimmerLights_Trigger@command
  6916  090C  0AA2               	incf	setDimmerLights_Trigger@command,f
  6917  090D  0862               	movf	setRFSW_Control@sw,w
  6918  090E  319F  2754  3188   	fcall	_setDimmerLights_Trigger
  6919                           
  6920                           ;RF_Control_B1.c: 376: setDimmerLights_Switch(sw, RFSW->Status);
  6921  0911  0021               	movlb	1	; select bank1
  6922  0912  083F               	movf	_RFSW^(0+128),w
  6923  0913  0086               	movwf	6
  6924  0914  0187               	clrf	7
  6925  0915  3000               	movlw	0
  6926  0916  1801               	btfsc	1,0
  6927  0917  3001               	movlw	1
  6928  0918  0020               	movlb	0	; select bank0
  6929  0919  00A2               	movwf	setDimmerLights_Switch@command
  6930  091A  0862               	movf	setRFSW_Control@sw,w
  6931  091B  319F  2744  3188   	fcall	_setDimmerLights_Switch
  6932                           
  6933                           ;RF_Control_B1.c: 378: ;;
  6934                           ;RF_Control_B1.c: 379: setRF_DimmerLights(sw, 0);
  6935  091E  0020               	movlb	0	; select bank0
  6936  091F  01DD               	clrf	setRF_DimmerLights@on
  6937  0920                     L5:	
  6938  0920  0862               	movf	setRFSW_Control@sw,w
  6939  0921  3189  219B  3188   	fcall	_setRF_DimmerLights
  6940                           
  6941                           ;RF_Control_B1.c: 380: }
  6942                           ;RF_Control_B1.c: 381: }
  6943                           ;RF_Control_B1.c: 382: setBuz(1, 100);
  6944  0924  3064               	movlw	100
  6945  0925  0020               	movlb	0	; select bank0
  6946  0926  00A9               	movwf	setBuz@time
  6947  0927  3000               	movlw	0
  6948  0928  00AA               	movwf	setBuz@time+1
  6949  0929  3001               	movlw	1
  6950  092A  318C  24E6  3188   	fcall	_setBuz
  6951                           
  6952                           ;RF_Control_B1.c: 383: setTxData(1);
  6953  092D  3001               	movlw	1
  6954  092E  318E  2604         	fcall	_setTxData
  6955  0930  0008               	return
  6956  0931                     __end_of_setRFSW_Control:	
  6957                           
  6958                           	psect	text25
  6959  1F05                     __ptext25:	
  6960 ;; *************** function _setSw_Status *****************
  6961 ;; Defined at:
  6962 ;;		line 105 in file "../src/Switch_B1.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;  sw              1    wreg     unsigned char 
  6965 ;;  command         1    2[BANK0 ] unsigned char 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  sw              1    3[BANK0 ] unsigned char 
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6977 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;Total ram usage:        2 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:    6
  6984 ;; This function calls:
  6985 ;;		_SwPointSelect
  6986 ;; This function is called by:
  6987 ;;		_setControl_Lights_Table
  6988 ;;		_setRFSW_Control
  6989 ;;		_setDimmerLights_ERROR
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _setSw_Status
  6995  1F05                     _setSw_Status:	
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6999                           ;setSw_Status@sw stored from wreg
  7000  1F05  0020               	movlb	0	; select bank0
  7001  1F06  00A3               	movwf	setSw_Status@sw
  7002                           
  7003                           ;Switch_B1.c: 106: SwPointSelect(sw);
  7004  1F07  0823               	movf	setSw_Status@sw,w
  7005  1F08  3191  21DB         	fcall	_SwPointSelect
  7006                           
  7007                           ;Switch_B1.c: 107: Sw->Status = command;
  7008  1F0A  087B               	movf	_Sw,w
  7009  1F0B  0086               	movwf	6
  7010  1F0C  3001               	movlw	1	; select bank2/3
  7011  1F0D  0087               	movwf	7
  7012  1F0E  0020               	movlb	0	; select bank0
  7013  1F0F  0822               	movf	setSw_Status@command,w
  7014  1F10  1301               	bcf	1,6
  7015  1F11  1D03               	skipz
  7016  1F12  1701               	bsf	1,6
  7017  1F13  0008               	return
  7018  1F14                     __end_of_setSw_Status:	
  7019                           
  7020                           	psect	text26
  7021  11DB                     __ptext26:	
  7022 ;; *************** function _SwPointSelect *****************
  7023 ;; Defined at:
  7024 ;;		line 17 in file "../src/Switch_B1.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  sw              1    wreg     unsigned char 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  sw              1    1[BANK0 ] unsigned char 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;		None               void
  7031 ;; Registers used:
  7032 ;;		wreg
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7042 ;;Total ram usage:        2 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    5
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_setSw_Enable
  7049 ;;		_setSw_Status
  7050 ;;		_setSw_Main
  7051 ;;		_Sw_Detect
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           
  7056                           ;psect for function _SwPointSelect
  7057  11DB                     _SwPointSelect:	
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in _SwPointSelect: [wreg]
  7061                           ;SwPointSelect@sw stored from wreg
  7062  11DB  0020               	movlb	0	; select bank0
  7063  11DC  00A1               	movwf	SwPointSelect@sw
  7064                           
  7065                           ;Switch_B1.c: 20: if (sw == 1) {
  7066  11DD  0821               	movf	SwPointSelect@sw,w
  7067  11DE  3A01               	xorlw	1
  7068  11DF  1D03               	skipz
  7069  11E0  29E6               	goto	l5601
  7070                           
  7071                           ;Switch_B1.c: 21: Sw = &Sw1;
  7072  11E1  304D               	movlw	_Sw1& (0+255)
  7073  11E2  00A0               	movwf	??_SwPointSelect
  7074  11E3  0820               	movf	??_SwPointSelect,w
  7075  11E4  00FB               	movwf	_Sw
  7076                           
  7077                           ;Switch_B1.c: 22: }
  7078  11E5  0008               	return
  7079  11E6                     l5601:	
  7080                           
  7081                           ;Switch_B1.c: 25: else if (sw == 2) {
  7082  11E6  0821               	movf	SwPointSelect@sw,w
  7083  11E7  3A02               	xorlw	2
  7084  11E8  1D03               	skipz
  7085  11E9  29EF               	goto	l5605
  7086                           
  7087                           ;Switch_B1.c: 26: Sw = &Sw2;
  7088  11EA  3056               	movlw	_Sw2& (0+255)
  7089  11EB  00A0               	movwf	??_SwPointSelect
  7090  11EC  0820               	movf	??_SwPointSelect,w
  7091  11ED  00FB               	movwf	_Sw
  7092                           
  7093                           ;Switch_B1.c: 27: }
  7094  11EE  0008               	return
  7095  11EF                     l5605:	
  7096                           
  7097                           ;Switch_B1.c: 30: else if (sw == 3) {
  7098  11EF  0821               	movf	SwPointSelect@sw,w
  7099  11F0  3A03               	xorlw	3
  7100  11F1  1D03               	skipz
  7101  11F2  0008               	return
  7102                           
  7103                           ;Switch_B1.c: 31: Sw = &Sw3;
  7104  11F3  305F               	movlw	_Sw3& (0+255)
  7105  11F4  00A0               	movwf	??_SwPointSelect
  7106  11F5  0820               	movf	??_SwPointSelect,w
  7107  11F6  00FB               	movwf	_Sw
  7108  11F7  0008               	return
  7109  11F8                     __end_of_SwPointSelect:	
  7110                           
  7111                           	psect	text27
  7112  1F54                     __ptext27:	
  7113 ;; *************** function _setDimmerLights_Trigger *****************
  7114 ;; Defined at:
  7115 ;;		line 723 in file "../src/Dimmer_B1.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  lights          1    wreg     unsigned char 
  7118 ;;  command         1    2[BANK0 ] unsigned char 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  lights          1    3[BANK0 ] unsigned char 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;		None               void
  7123 ;; Registers used:
  7124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7130 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;Total ram usage:        2 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    6
  7137 ;; This function calls:
  7138 ;;		_DimmerLightsPointSelect
  7139 ;; This function is called by:
  7140 ;;		_setRFSW_Control
  7141 ;;		_Sw_DimmerOnFunc
  7142 ;;		_Sw_DimmerOffFunc
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _setDimmerLights_Trigger
  7148  1F54                     _setDimmerLights_Trigger:	
  7149                           
  7150                           ;incstack = 0
  7151                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7152                           ;setDimmerLights_Trigger@lights stored from wreg
  7153  1F54  0020               	movlb	0	; select bank0
  7154  1F55  00A3               	movwf	setDimmerLights_Trigger@lights
  7155                           
  7156                           ;Dimmer_B1.c: 725: DimmerLightsPointSelect(lights);
  7157  1F56  0823               	movf	setDimmerLights_Trigger@lights,w
  7158  1F57  3191  2134         	fcall	_DimmerLightsPointSelect
  7159                           
  7160                           ;Dimmer_B1.c: 726: DimmerLights->Trigger = command;
  7161  1F59  0878               	movf	_DimmerLights,w
  7162  1F5A  3E08               	addlw	8
  7163  1F5B  0086               	movwf	6
  7164  1F5C  3001               	movlw	1	; select bank2/3
  7165  1F5D  0087               	movwf	7
  7166  1F5E  0020               	movlb	0	; select bank0
  7167  1F5F  0822               	movf	setDimmerLights_Trigger@command,w
  7168  1F60  1101               	bcf	1,2
  7169  1F61  1D03               	skipz
  7170  1F62  1501               	bsf	1,2
  7171  1F63  0008               	return
  7172  1F64                     __end_of_setDimmerLights_Trigger:	
  7173                           
  7174                           	psect	text28
  7175  1F44                     __ptext28:	
  7176 ;; *************** function _setDimmerLights_Switch *****************
  7177 ;; Defined at:
  7178 ;;		line 711 in file "../src/Dimmer_B1.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  lights          1    wreg     unsigned char 
  7181 ;;  command         1    2[BANK0 ] unsigned char 
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;  lights          1    3[BANK0 ] unsigned char 
  7184 ;; Return value:  Size  Location     Type
  7185 ;;		None               void
  7186 ;; Registers used:
  7187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7193 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7197 ;;Total ram usage:        2 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    6
  7200 ;; This function calls:
  7201 ;;		_DimmerLightsPointSelect
  7202 ;; This function is called by:
  7203 ;;		_setRFSW_Control
  7204 ;;		_Sw_DimmerOnFunc
  7205 ;;		_Sw_DimmerOffFunc
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _setDimmerLights_Switch
  7211  1F44                     _setDimmerLights_Switch:	
  7212                           
  7213                           ;incstack = 0
  7214                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7215                           ;setDimmerLights_Switch@lights stored from wreg
  7216  1F44  0020               	movlb	0	; select bank0
  7217  1F45  00A3               	movwf	setDimmerLights_Switch@lights
  7218                           
  7219                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  7220  1F46  0823               	movf	setDimmerLights_Switch@lights,w
  7221  1F47  3191  2134         	fcall	_DimmerLightsPointSelect
  7222                           
  7223                           ;Dimmer_B1.c: 714: DimmerLights->Switch = command;
  7224  1F49  0878               	movf	_DimmerLights,w
  7225  1F4A  3E08               	addlw	8
  7226  1F4B  0086               	movwf	6
  7227  1F4C  3001               	movlw	1	; select bank2/3
  7228  1F4D  0087               	movwf	7
  7229  1F4E  0020               	movlb	0	; select bank0
  7230  1F4F  0822               	movf	setDimmerLights_Switch@command,w
  7231  1F50  1081               	bcf	1,1
  7232  1F51  1D03               	skipz
  7233  1F52  1481               	bsf	1,1
  7234  1F53  0008               	return
  7235  1F54                     __end_of_setDimmerLights_Switch:	
  7236                           
  7237                           	psect	text29
  7238  1520                     __ptext29:	
  7239 ;; *************** function _setRFSW_AdjControl *****************
  7240 ;; Defined at:
  7241 ;;		line 387 in file "../src/RF_Control_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;  sw              1    wreg     unsigned char 
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  sw              1   70[BANK0 ] unsigned char 
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;Total ram usage:        3 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:   10
  7262 ;; This function calls:
  7263 ;;		_RfSWPointSelect
  7264 ;;		_setRF_DimmerValue
  7265 ;;		_setTxData
  7266 ;; This function is called by:
  7267 ;;		_setControl_Lights_Table
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _setRFSW_AdjControl
  7273  1520                     _setRFSW_AdjControl:	
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7277                           ;setRFSW_AdjControl@sw stored from wreg
  7278  1520  0020               	movlb	0	; select bank0
  7279  1521  00E6               	movwf	setRFSW_AdjControl@sw
  7280                           
  7281                           ;RF_Control_B1.c: 388: RfSWPointSelect(sw);
  7282  1522  0866               	movf	setRFSW_AdjControl@sw,w
  7283  1523  3192  2275  3195   	fcall	_RfSWPointSelect
  7284                           
  7285                           ;RF_Control_B1.c: 389: if (RFSW->Status == 1) {
  7286  1526  0021               	movlb	1	; select bank1
  7287  1527  083F               	movf	_RFSW^(0+128),w
  7288  1528  0086               	movwf	6
  7289  1529  0187               	clrf	7
  7290  152A  1C01               	btfss	1,0
  7291  152B  2D38               	goto	l5907
  7292                           
  7293                           ;RF_Control_B1.c: 390: Memory->Modify=1;
  7294  152C  086F               	movf	_Memory^(0+128),w
  7295  152D  3E24               	addlw	36
  7296  152E  0086               	movwf	6
  7297  152F  3002               	movlw	2	; select bank4/5
  7298  1530  0087               	movwf	7
  7299  1531  1401               	bsf	1,0
  7300                           
  7301                           ;RF_Control_B1.c: 391: setRF_DimmerValue(sw);
  7302  1532  0020               	movlb	0	; select bank0
  7303  1533  0866               	movf	setRFSW_AdjControl@sw,w
  7304  1534  3194  2477  3195   	fcall	_setRF_DimmerValue
  7305                           
  7306                           ;RF_Control_B1.c: 392: } else {
  7307  1537  2D4A               	goto	l2258
  7308  1538                     l5907:	
  7309                           
  7310                           ;RF_Control_B1.c: 393: product->Data[9]=product->Data[20 + sw];
  7311  1538  0020               	movlb	0	; select bank0
  7312  1539  0866               	movf	setRFSW_AdjControl@sw,w
  7313  153A  3E14               	addlw	20
  7314  153B  077D               	addwf	_product,w
  7315  153C  00E4               	movwf	??_setRFSW_AdjControl
  7316  153D  0864               	movf	??_setRFSW_AdjControl,w
  7317  153E  0086               	movwf	6
  7318  153F  3001               	movlw	1	; select bank2/3
  7319  1540  0087               	movwf	7
  7320  1541  0801               	movf	1,w
  7321  1542  00E5               	movwf	??_setRFSW_AdjControl+1
  7322  1543  087D               	movf	_product,w
  7323  1544  3E09               	addlw	9
  7324  1545  0086               	movwf	6
  7325  1546  3001               	movlw	1	; select bank2/3
  7326  1547  0087               	movwf	7
  7327  1548  0865               	movf	??_setRFSW_AdjControl+1,w
  7328  1549  0081               	movwf	1
  7329  154A                     l2258:	
  7330                           
  7331                           ;RF_Control_B1.c: 394: }
  7332                           ;RF_Control_B1.c: 395: product->Data[17]=product->Data[26 + sw];
  7333  154A  0020               	movlb	0	; select bank0
  7334  154B  0866               	movf	setRFSW_AdjControl@sw,w
  7335  154C  3E1A               	addlw	26
  7336  154D  077D               	addwf	_product,w
  7337  154E  00E4               	movwf	??_setRFSW_AdjControl
  7338  154F  0864               	movf	??_setRFSW_AdjControl,w
  7339  1550  0086               	movwf	6
  7340  1551  3001               	movlw	1	; select bank2/3
  7341  1552  0087               	movwf	7
  7342  1553  0801               	movf	1,w
  7343  1554  00E5               	movwf	??_setRFSW_AdjControl+1
  7344  1555  087D               	movf	_product,w
  7345  1556  3E11               	addlw	17
  7346  1557  0086               	movwf	6
  7347  1558  3001               	movlw	1	; select bank2/3
  7348  1559  0087               	movwf	7
  7349  155A  0865               	movf	??_setRFSW_AdjControl+1,w
  7350  155B  0081               	movwf	1
  7351                           
  7352                           ;RF_Control_B1.c: 396: setTxData(1);
  7353  155C  3001               	movlw	1
  7354  155D  318E  2604         	fcall	_setTxData
  7355  155F  0008               	return
  7356  1560                     __end_of_setRFSW_AdjControl:	
  7357                           
  7358                           	psect	text30
  7359  1477                     __ptext30:	
  7360 ;; *************** function _setRF_DimmerValue *****************
  7361 ;; Defined at:
  7362 ;;		line 407 in file "../src/RF_Control_B1.c"
  7363 ;; Parameters:    Size  Location     Type
  7364 ;;  lights          1    wreg     unsigned char 
  7365 ;; Auto vars:     Size  Location     Type
  7366 ;;  lights          1   67[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;		None               void
  7369 ;; Registers used:
  7370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;Total ram usage:        3 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    9
  7383 ;; This function calls:
  7384 ;;		_setDimmerLights_AdjRF
  7385 ;; This function is called by:
  7386 ;;		_setRFSW_AdjControl
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _setRF_DimmerValue
  7392  1477                     _setRF_DimmerValue:	
  7393                           
  7394                           ;incstack = 0
  7395                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7396                           ;setRF_DimmerValue@lights stored from wreg
  7397  1477  0020               	movlb	0	; select bank0
  7398  1478  00E3               	movwf	setRF_DimmerValue@lights
  7399                           
  7400                           ;RF_Control_B1.c: 408: if (RF_Data[9] > 0x64) {
  7401  1479  3065               	movlw	101
  7402  147A  0021               	movlb	1	; select bank1
  7403  147B  0229               	subwf	(_RF_Data^(0+128)+9),w
  7404  147C  1C03               	skipc
  7405  147D  2C84               	goto	l5793
  7406                           
  7407                           ;RF_Control_B1.c: 409: RF_Data[9] = 0x64;
  7408  147E  3064               	movlw	100
  7409  147F  0020               	movlb	0	; select bank0
  7410  1480  00E1               	movwf	??_setRF_DimmerValue
  7411  1481  0861               	movf	??_setRF_DimmerValue,w
  7412  1482  0021               	movlb	1	; select bank1
  7413  1483  00A9               	movwf	(_RF_Data^(0+128)+9)
  7414  1484                     l5793:	
  7415                           
  7416                           ;RF_Control_B1.c: 410: }
  7417                           ;RF_Control_B1.c: 411: product->Data[9]=RF_Data[9];
  7418  1484  0829               	movf	(_RF_Data^(0+128)+9),w
  7419  1485  0020               	movlb	0	; select bank0
  7420  1486  00E1               	movwf	??_setRF_DimmerValue
  7421  1487  087D               	movf	_product,w
  7422  1488  3E09               	addlw	9
  7423  1489  0086               	movwf	6
  7424  148A  3001               	movlw	1	; select bank2/3
  7425  148B  0087               	movwf	7
  7426  148C  0861               	movf	??_setRF_DimmerValue,w
  7427  148D  0081               	movwf	1
  7428                           
  7429                           ;RF_Control_B1.c: 412: product->Data[11]=lights;
  7430  148E  0863               	movf	setRF_DimmerValue@lights,w
  7431  148F  00E1               	movwf	??_setRF_DimmerValue
  7432  1490  087D               	movf	_product,w
  7433  1491  3E0B               	addlw	11
  7434  1492  0086               	movwf	6
  7435  1493  3001               	movlw	1	; select bank2/3
  7436  1494  0087               	movwf	7
  7437  1495  0861               	movf	??_setRF_DimmerValue,w
  7438  1496  0081               	movwf	1
  7439                           
  7440                           ;RF_Control_B1.c: 413: product->Data[(20 + lights)]=product->Data[9];
  7441  1497  087D               	movf	_product,w
  7442  1498  3E09               	addlw	9
  7443  1499  0086               	movwf	6
  7444  149A  3001               	movlw	1	; select bank2/3
  7445  149B  0087               	movwf	7
  7446  149C  0801               	movf	1,w
  7447  149D  00E1               	movwf	??_setRF_DimmerValue
  7448  149E  0863               	movf	setRF_DimmerValue@lights,w
  7449  149F  3E14               	addlw	20
  7450  14A0  077D               	addwf	_product,w
  7451  14A1  00E2               	movwf	??_setRF_DimmerValue+1
  7452  14A2  0862               	movf	??_setRF_DimmerValue+1,w
  7453  14A3  0086               	movwf	6
  7454  14A4  3001               	movlw	1	; select bank2/3
  7455  14A5  0087               	movwf	7
  7456  14A6  0861               	movf	??_setRF_DimmerValue,w
  7457  14A7  0081               	movwf	1
  7458                           
  7459                           ;RF_Control_B1.c: 414: setDimmerLights_AdjRF(lights);
  7460  14A8  0863               	movf	setRF_DimmerValue@lights,w
  7461  14A9  3192  22F8         	fcall	_setDimmerLights_AdjRF
  7462  14AB  0008               	return
  7463  14AC                     __end_of_setRF_DimmerValue:	
  7464                           
  7465                           	psect	text31
  7466  12F8                     __ptext31:	
  7467 ;; *************** function _setDimmerLights_AdjRF *****************
  7468 ;; Defined at:
  7469 ;;		line 697 in file "../src/Dimmer_B1.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;  lights          1    wreg     unsigned char 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  lights          1   64[BANK0 ] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        2 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    8
  7490 ;; This function calls:
  7491 ;;		_DimmerLightsPointSelect
  7492 ;;		_getPercentValue
  7493 ;; This function is called by:
  7494 ;;		_setRF_DimmerValue
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           
  7499                           ;psect for function _setDimmerLights_AdjRF
  7500  12F8                     _setDimmerLights_AdjRF:	
  7501                           
  7502                           ;incstack = 0
  7503                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7504                           ;setDimmerLights_AdjRF@lights stored from wreg
  7505  12F8  0020               	movlb	0	; select bank0
  7506  12F9  00E0               	movwf	setDimmerLights_AdjRF@lights
  7507                           
  7508                           ;Dimmer_B1.c: 699: DimmerLightsPointSelect(lights);
  7509  12FA  0860               	movf	setDimmerLights_AdjRF@lights,w
  7510  12FB  3191  2134  3192   	fcall	_DimmerLightsPointSelect
  7511                           
  7512                           ;Dimmer_B1.c: 700: DimmerLights->AdjRF = 1;
  7513  12FE  0878               	movf	_DimmerLights,w
  7514  12FF  0086               	movwf	6
  7515  1300  3001               	movlw	1	; select bank2/3
  7516  1301  0087               	movwf	7
  7517  1302  1501               	bsf	1,2
  7518                           
  7519                           ;Dimmer_B1.c: 701: DimmerLights->Signal = 1;
  7520  1303  0878               	movf	_DimmerLights,w
  7521  1304  0086               	movwf	6
  7522  1305  3001               	movlw	1	; select bank2/3
  7523  1306  0087               	movwf	7
  7524  1307  1481               	bsf	1,1
  7525                           
  7526                           ;Dimmer_B1.c: 702: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7527  1308  087D               	movf	_product,w
  7528  1309  3E09               	addlw	9
  7529  130A  0086               	movwf	6
  7530  130B  3001               	movlw	1	; select bank2/3
  7531  130C  0087               	movwf	7
  7532  130D  0801               	movf	1,w
  7533  130E  3197  27A5         	fcall	_getPercentValue
  7534  1310  0020               	movlb	0	; select bank0
  7535  1311  00DF               	movwf	??_setDimmerLights_AdjRF
  7536  1312  0878               	movf	_DimmerLights,w
  7537  1313  3E05               	addlw	5
  7538  1314  0086               	movwf	6
  7539  1315  3001               	movlw	1	; select bank2/3
  7540  1316  0087               	movwf	7
  7541  1317  085F               	movf	??_setDimmerLights_AdjRF,w
  7542  1318  0081               	movwf	1
  7543  1319  0008               	return
  7544  131A                     __end_of_setDimmerLights_AdjRF:	
  7545                           
  7546                           	psect	text32
  7547  17A5                     __ptext32:	
  7548 ;; *************** function _getPercentValue *****************
  7549 ;; Defined at:
  7550 ;;		line 770 in file "../src/Dimmer_B1.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  value           1    wreg     unsigned char 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  value           1   59[BANK0 ] unsigned char 
  7555 ;;  i               3   60[BANK0 ] float 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  1    wreg      unsigned char 
  7558 ;; Registers used:
  7559 ;;		wreg, status,2, status,0, pclath, cstack
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7566 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7568 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;Total ram usage:        6 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; Hardware stack levels required when called:    7
  7572 ;; This function calls:
  7573 ;;		___awtoft
  7574 ;;		___ftadd
  7575 ;;		___ftdiv
  7576 ;;		___ftmul
  7577 ;;		___fttol
  7578 ;; This function is called by:
  7579 ;;		_setDimmerLights_AdjRF
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _getPercentValue
  7585  17A5                     _getPercentValue:	
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7589                           ;getPercentValue@value stored from wreg
  7590  17A5  0020               	movlb	0	; select bank0
  7591  17A6  00DB               	movwf	getPercentValue@value
  7592                           
  7593                           ;Dimmer_B1.c: 772: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  7594  17A7  3000               	movlw	0
  7595  17A8  00DC               	movwf	getPercentValue@i
  7596  17A9  3060               	movlw	96
  7597  17AA  00DD               	movwf	getPercentValue@i+1
  7598  17AB  3042               	movlw	66
  7599  17AC  00DE               	movwf	getPercentValue@i+2
  7600                           
  7601                           ;Dimmer_B1.c: 773: i /= 100;
  7602  17AD  3000               	movlw	0
  7603  17AE  00AE               	movwf	___ftdiv@f2
  7604  17AF  30C8               	movlw	200
  7605  17B0  00AF               	movwf	___ftdiv@f2+1
  7606  17B1  3042               	movlw	66
  7607  17B2  00B0               	movwf	___ftdiv@f2+2
  7608  17B3  085C               	movf	getPercentValue@i,w
  7609  17B4  00B1               	movwf	___ftdiv@f1
  7610  17B5  085D               	movf	getPercentValue@i+1,w
  7611  17B6  00B2               	movwf	___ftdiv@f1+1
  7612  17B7  085E               	movf	getPercentValue@i+2,w
  7613  17B8  00B3               	movwf	___ftdiv@f1+2
  7614  17B9  318E  26A4  3197   	fcall	___ftdiv
  7615  17BC  0020               	movlb	0	; select bank0
  7616  17BD  082E               	movf	?___ftdiv,w
  7617  17BE  00DC               	movwf	getPercentValue@i
  7618  17BF  082F               	movf	?___ftdiv+1,w
  7619  17C0  00DD               	movwf	getPercentValue@i+1
  7620  17C1  0830               	movf	?___ftdiv+2,w
  7621  17C2  00DE               	movwf	getPercentValue@i+2
  7622                           
  7623                           ;Dimmer_B1.c: 774: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  7624  17C3  085B               	movf	getPercentValue@value,w
  7625  17C4  00D9               	movwf	??_getPercentValue
  7626  17C5  01DA               	clrf	??_getPercentValue+1
  7627  17C6  09D9               	comf	??_getPercentValue,f
  7628  17C7  09DA               	comf	??_getPercentValue+1,f
  7629  17C8  0AD9               	incf	??_getPercentValue,f
  7630  17C9  1903               	skipnz
  7631  17CA  0ADA               	incf	??_getPercentValue+1,f
  7632  17CB  0859               	movf	??_getPercentValue,w
  7633  17CC  3E64               	addlw	100
  7634  17CD  00A8               	movwf	___awtoft@c
  7635  17CE  3000               	movlw	0
  7636  17CF  3D5A               	addwfc	??_getPercentValue+1,w
  7637  17D0  00A9               	movwf	___awtoft@c+1
  7638  17D1  3192  22D6  3197   	fcall	___awtoft
  7639  17D4  0020               	movlb	0	; select bank0
  7640  17D5  0828               	movf	?___awtoft,w
  7641  17D6  00B1               	movwf	___ftmul@f2
  7642  17D7  0829               	movf	?___awtoft+1,w
  7643  17D8  00B2               	movwf	___ftmul@f2+1
  7644  17D9  082A               	movf	?___awtoft+2,w
  7645  17DA  00B3               	movwf	___ftmul@f2+2
  7646  17DB  085C               	movf	getPercentValue@i,w
  7647  17DC  00AE               	movwf	___ftmul@f1
  7648  17DD  085D               	movf	getPercentValue@i+1,w
  7649  17DE  00AF               	movwf	___ftmul@f1+1
  7650  17DF  085E               	movf	getPercentValue@i+2,w
  7651  17E0  00B0               	movwf	___ftmul@f1+2
  7652  17E1  3186  26EB  3197   	fcall	___ftmul
  7653  17E4  0020               	movlb	0	; select bank0
  7654  17E5  082E               	movf	?___ftmul,w
  7655  17E6  00C1               	movwf	___ftadd@f2
  7656  17E7  082F               	movf	?___ftmul+1,w
  7657  17E8  00C2               	movwf	___ftadd@f2+1
  7658  17E9  0830               	movf	?___ftmul+2,w
  7659  17EA  00C3               	movwf	___ftadd@f2+2
  7660  17EB  3000               	movlw	0
  7661  17EC  00BE               	movwf	___ftadd@f1
  7662  17ED  3080               	movlw	128
  7663  17EE  00BF               	movwf	___ftadd@f1+1
  7664  17EF  3040               	movlw	64
  7665  17F0  00C0               	movwf	___ftadd@f1+2
  7666  17F1  3184  2479  3197   	fcall	___ftadd
  7667  17F4  0020               	movlb	0	; select bank0
  7668  17F5  083E               	movf	?___ftadd,w
  7669  17F6  00CB               	movwf	___fttol@f1
  7670  17F7  083F               	movf	?___ftadd+1,w
  7671  17F8  00CC               	movwf	___fttol@f1+1
  7672  17F9  0840               	movf	?___ftadd+2,w
  7673  17FA  00CD               	movwf	___fttol@f1+2
  7674  17FB  318B  23D8         	fcall	___fttol
  7675  17FD  0020               	movlb	0	; select bank0
  7676  17FE  084B               	movf	?___fttol,w
  7677  17FF  0008               	return
  7678  1800                     __end_of_getPercentValue:	
  7679                           
  7680                           	psect	text33
  7681  06EB                     __ptext33:	
  7682 ;; *************** function ___ftmul *****************
  7683 ;; Defined at:
  7684 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  f1              3   14[BANK0 ] float 
  7687 ;;  f2              3   17[BANK0 ] float 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7690 ;;  sign            1   29[BANK0 ] unsigned char 
  7691 ;;  cntr            1   28[BANK0 ] unsigned char 
  7692 ;;  exp             1   24[BANK0 ] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  3   14[BANK0 ] float 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0, pclath, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7702 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;Total ram usage:       16 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    6
  7709 ;; This function calls:
  7710 ;;		___ftpack
  7711 ;; This function is called by:
  7712 ;;		_getPercentValue
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function ___ftmul
  7718  06EB                     ___ftmul:	
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7722  06EB  0020               	movlb	0	; select bank0
  7723  06EC  082E               	movf	___ftmul@f1,w
  7724  06ED  00B4               	movwf	??___ftmul
  7725  06EE  082F               	movf	___ftmul@f1+1,w
  7726  06EF  00B5               	movwf	??___ftmul+1
  7727  06F0  0830               	movf	___ftmul@f1+2,w
  7728  06F1  00B6               	movwf	??___ftmul+2
  7729  06F2  1003               	clrc
  7730  06F3  0D35               	rlf	??___ftmul+1,w
  7731  06F4  0D36               	rlf	??___ftmul+2,w
  7732  06F5  00B7               	movwf	??___ftmul+3
  7733  06F6  0837               	movf	??___ftmul+3,w
  7734  06F7  00B8               	movwf	___ftmul@exp
  7735  06F8  08B8               	movf	___ftmul@exp,f
  7736  06F9  1D03               	skipz
  7737  06FA  2F02               	goto	l5453
  7738  06FB  3000               	movlw	0
  7739  06FC  00AE               	movwf	?___ftmul
  7740  06FD  3000               	movlw	0
  7741  06FE  00AF               	movwf	?___ftmul+1
  7742  06FF  3000               	movlw	0
  7743  0700  00B0               	movwf	?___ftmul+2
  7744  0701  0008               	return
  7745  0702                     l5453:	
  7746  0702  0831               	movf	___ftmul@f2,w
  7747  0703  00B4               	movwf	??___ftmul
  7748  0704  0832               	movf	___ftmul@f2+1,w
  7749  0705  00B5               	movwf	??___ftmul+1
  7750  0706  0833               	movf	___ftmul@f2+2,w
  7751  0707  00B6               	movwf	??___ftmul+2
  7752  0708  1003               	clrc
  7753  0709  0D35               	rlf	??___ftmul+1,w
  7754  070A  0D36               	rlf	??___ftmul+2,w
  7755  070B  00B7               	movwf	??___ftmul+3
  7756  070C  0837               	movf	??___ftmul+3,w
  7757  070D  00BD               	movwf	___ftmul@sign
  7758  070E  08BD               	movf	___ftmul@sign,f
  7759  070F  1D03               	skipz
  7760  0710  2F18               	goto	l5459
  7761  0711  3000               	movlw	0
  7762  0712  00AE               	movwf	?___ftmul
  7763  0713  3000               	movlw	0
  7764  0714  00AF               	movwf	?___ftmul+1
  7765  0715  3000               	movlw	0
  7766  0716  00B0               	movwf	?___ftmul+2
  7767  0717  0008               	return
  7768  0718                     l5459:	
  7769  0718  083D               	movf	___ftmul@sign,w
  7770  0719  3E7B               	addlw	123
  7771  071A  00B4               	movwf	??___ftmul
  7772  071B  0834               	movf	??___ftmul,w
  7773  071C  07B8               	addwf	___ftmul@exp,f
  7774  071D  082E               	movf	___ftmul@f1,w
  7775  071E  00B4               	movwf	??___ftmul
  7776  071F  082F               	movf	___ftmul@f1+1,w
  7777  0720  00B5               	movwf	??___ftmul+1
  7778  0721  0830               	movf	___ftmul@f1+2,w
  7779  0722  00B6               	movwf	??___ftmul+2
  7780  0723  3010               	movlw	16
  7781  0724                     u3985:	
  7782  0724  36B6               	lsrf	??___ftmul+2,f
  7783  0725  0CB5               	rrf	??___ftmul+1,f
  7784  0726  0CB4               	rrf	??___ftmul,f
  7785  0727  0B89               	decfsz	9,f
  7786  0728  2F24               	goto	u3985
  7787  0729  0834               	movf	??___ftmul,w
  7788  072A  00B7               	movwf	??___ftmul+3
  7789  072B  0837               	movf	??___ftmul+3,w
  7790  072C  00BD               	movwf	___ftmul@sign
  7791  072D  0831               	movf	___ftmul@f2,w
  7792  072E  00B4               	movwf	??___ftmul
  7793  072F  0832               	movf	___ftmul@f2+1,w
  7794  0730  00B5               	movwf	??___ftmul+1
  7795  0731  0833               	movf	___ftmul@f2+2,w
  7796  0732  00B6               	movwf	??___ftmul+2
  7797  0733  3010               	movlw	16
  7798  0734                     u3995:	
  7799  0734  36B6               	lsrf	??___ftmul+2,f
  7800  0735  0CB5               	rrf	??___ftmul+1,f
  7801  0736  0CB4               	rrf	??___ftmul,f
  7802  0737  0B89               	decfsz	9,f
  7803  0738  2F34               	goto	u3995
  7804  0739  0834               	movf	??___ftmul,w
  7805  073A  00B7               	movwf	??___ftmul+3
  7806  073B  0837               	movf	??___ftmul+3,w
  7807  073C  06BD               	xorwf	___ftmul@sign,f
  7808  073D  3080               	movlw	128
  7809  073E  00B4               	movwf	??___ftmul
  7810  073F  0834               	movf	??___ftmul,w
  7811  0740  05BD               	andwf	___ftmul@sign,f
  7812  0741  17AF               	bsf	___ftmul@f1+1,7
  7813  0742  17B2               	bsf	___ftmul@f2+1,7
  7814  0743  30FF               	movlw	255
  7815  0744  05B1               	andwf	___ftmul@f2,f
  7816  0745  30FF               	movlw	255
  7817  0746  05B2               	andwf	___ftmul@f2+1,f
  7818  0747  3000               	movlw	0
  7819  0748  05B3               	andwf	___ftmul@f2+2,f
  7820  0749  3000               	movlw	0
  7821  074A  00B9               	movwf	___ftmul@f3_as_product
  7822  074B  3000               	movlw	0
  7823  074C  00BA               	movwf	___ftmul@f3_as_product+1
  7824  074D  3000               	movlw	0
  7825  074E  00BB               	movwf	___ftmul@f3_as_product+2
  7826  074F  3007               	movlw	7
  7827  0750  00B4               	movwf	??___ftmul
  7828  0751  0834               	movf	??___ftmul,w
  7829  0752  00BC               	movwf	___ftmul@cntr
  7830  0753                     l5471:	
  7831  0753  1C2E               	btfss	___ftmul@f1,0
  7832  0754  2F5B               	goto	l5475
  7833  0755  0831               	movf	___ftmul@f2,w
  7834  0756  07B9               	addwf	___ftmul@f3_as_product,f
  7835  0757  0832               	movf	___ftmul@f2+1,w
  7836  0758  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7837  0759  0833               	movf	___ftmul@f2+2,w
  7838  075A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7839  075B                     l5475:	
  7840  075B  3001               	movlw	1
  7841  075C                     u4015:	
  7842  075C  36B0               	lsrf	___ftmul@f1+2,f
  7843  075D  0CAF               	rrf	___ftmul@f1+1,f
  7844  075E  0CAE               	rrf	___ftmul@f1,f
  7845  075F  0B89               	decfsz	9,f
  7846  0760  2F5C               	goto	u4015
  7847  0761  3001               	movlw	1
  7848  0762                     u4025:	
  7849  0762  35B1               	lslf	___ftmul@f2,f
  7850  0763  0DB2               	rlf	___ftmul@f2+1,f
  7851  0764  0DB3               	rlf	___ftmul@f2+2,f
  7852  0765  0B89               	decfsz	9,f
  7853  0766  2F62               	goto	u4025
  7854  0767  3001               	movlw	1
  7855  0768  02BC               	subwf	___ftmul@cntr,f
  7856  0769  1D03               	btfss	3,2
  7857  076A  2F53               	goto	l5471
  7858  076B  3009               	movlw	9
  7859  076C  00B4               	movwf	??___ftmul
  7860  076D  0834               	movf	??___ftmul,w
  7861  076E  00BC               	movwf	___ftmul@cntr
  7862  076F                     l5483:	
  7863  076F  1C2E               	btfss	___ftmul@f1,0
  7864  0770  2F77               	goto	l5487
  7865  0771  0831               	movf	___ftmul@f2,w
  7866  0772  07B9               	addwf	___ftmul@f3_as_product,f
  7867  0773  0832               	movf	___ftmul@f2+1,w
  7868  0774  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7869  0775  0833               	movf	___ftmul@f2+2,w
  7870  0776  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7871  0777                     l5487:	
  7872  0777  3001               	movlw	1
  7873  0778                     u4055:	
  7874  0778  36B0               	lsrf	___ftmul@f1+2,f
  7875  0779  0CAF               	rrf	___ftmul@f1+1,f
  7876  077A  0CAE               	rrf	___ftmul@f1,f
  7877  077B  0B89               	decfsz	9,f
  7878  077C  2F78               	goto	u4055
  7879  077D  3001               	movlw	1
  7880  077E                     u4065:	
  7881  077E  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7882  077F  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7883  0780  0CB9               	rrf	___ftmul@f3_as_product,f
  7884  0781  0B89               	decfsz	9,f
  7885  0782  2F7E               	goto	u4065
  7886  0783  3001               	movlw	1
  7887  0784  02BC               	subwf	___ftmul@cntr,f
  7888  0785  1D03               	btfss	3,2
  7889  0786  2F6F               	goto	l5483
  7890  0787  0839               	movf	___ftmul@f3_as_product,w
  7891  0788  00A0               	movwf	___ftpack@arg
  7892  0789  083A               	movf	___ftmul@f3_as_product+1,w
  7893  078A  00A1               	movwf	___ftpack@arg+1
  7894  078B  083B               	movf	___ftmul@f3_as_product+2,w
  7895  078C  00A2               	movwf	___ftpack@arg+2
  7896  078D  0838               	movf	___ftmul@exp,w
  7897  078E  00B4               	movwf	??___ftmul
  7898  078F  0834               	movf	??___ftmul,w
  7899  0790  00A3               	movwf	___ftpack@exp
  7900  0791  083D               	movf	___ftmul@sign,w
  7901  0792  00B5               	movwf	??___ftmul+1
  7902  0793  0835               	movf	??___ftmul+1,w
  7903  0794  00A4               	movwf	___ftpack@sign
  7904  0795  3187  279F         	fcall	___ftpack
  7905  0797  0020               	movlb	0	; select bank0
  7906  0798  0820               	movf	?___ftpack,w
  7907  0799  00AE               	movwf	?___ftmul
  7908  079A  0821               	movf	?___ftpack+1,w
  7909  079B  00AF               	movwf	?___ftmul+1
  7910  079C  0822               	movf	?___ftpack+2,w
  7911  079D  00B0               	movwf	?___ftmul+2
  7912  079E  0008               	return
  7913  079F                     __end_of___ftmul:	
  7914                           
  7915                           	psect	text34
  7916  0479                     __ptext34:	
  7917 ;; *************** function ___ftadd *****************
  7918 ;; Defined at:
  7919 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  f1              3   30[BANK0 ] float 
  7922 ;;  f2              3   33[BANK0 ] float 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  exp1            1   42[BANK0 ] unsigned char 
  7925 ;;  exp2            1   41[BANK0 ] unsigned char 
  7926 ;;  sign            1   40[BANK0 ] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  3   30[BANK0 ] float 
  7929 ;; Registers used:
  7930 ;;		wreg, status,2, status,0, pclath, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : 0/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7936 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;Total ram usage:       13 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    6
  7943 ;; This function calls:
  7944 ;;		___ftpack
  7945 ;; This function is called by:
  7946 ;;		_getPercentValue
  7947 ;; This function uses a non-reentrant model
  7948 ;;
  7949                           
  7950                           
  7951                           ;psect for function ___ftadd
  7952  0479                     ___ftadd:	
  7953                           
  7954                           ;incstack = 0
  7955                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7956  0479  0020               	movlb	0	; select bank0
  7957  047A  083E               	movf	___ftadd@f1,w
  7958  047B  00C4               	movwf	??___ftadd
  7959  047C  083F               	movf	___ftadd@f1+1,w
  7960  047D  00C5               	movwf	??___ftadd+1
  7961  047E  0840               	movf	___ftadd@f1+2,w
  7962  047F  00C6               	movwf	??___ftadd+2
  7963  0480  1003               	clrc
  7964  0481  0D45               	rlf	??___ftadd+1,w
  7965  0482  0D46               	rlf	??___ftadd+2,w
  7966  0483  00C7               	movwf	??___ftadd+3
  7967  0484  0847               	movf	??___ftadd+3,w
  7968  0485  00CA               	movwf	___ftadd@exp1
  7969  0486  0841               	movf	___ftadd@f2,w
  7970  0487  00C4               	movwf	??___ftadd
  7971  0488  0842               	movf	___ftadd@f2+1,w
  7972  0489  00C5               	movwf	??___ftadd+1
  7973  048A  0843               	movf	___ftadd@f2+2,w
  7974  048B  00C6               	movwf	??___ftadd+2
  7975  048C  1003               	clrc
  7976  048D  0D45               	rlf	??___ftadd+1,w
  7977  048E  0D46               	rlf	??___ftadd+2,w
  7978  048F  00C7               	movwf	??___ftadd+3
  7979  0490  0847               	movf	??___ftadd+3,w
  7980  0491  00C9               	movwf	___ftadd@exp2
  7981  0492  084A               	movf	___ftadd@exp1,w
  7982  0493  1903               	btfsc	3,2
  7983  0494  2CA1               	goto	l5341
  7984  0495  0849               	movf	___ftadd@exp2,w
  7985  0496  024A               	subwf	___ftadd@exp1,w
  7986  0497  1803               	skipnc
  7987  0498  2CA8               	goto	l5345
  7988  0499  034A               	decf	___ftadd@exp1,w
  7989  049A  3AFF               	xorlw	255
  7990  049B  0749               	addwf	___ftadd@exp2,w
  7991  049C  00C4               	movwf	??___ftadd
  7992  049D  3019               	movlw	25
  7993  049E  0244               	subwf	??___ftadd,w
  7994  049F  1C03               	skipc
  7995  04A0  2CA8               	goto	l5345
  7996  04A1                     l5341:	
  7997  04A1  0841               	movf	___ftadd@f2,w
  7998  04A2  00BE               	movwf	?___ftadd
  7999  04A3  0842               	movf	___ftadd@f2+1,w
  8000  04A4  00BF               	movwf	?___ftadd+1
  8001  04A5  0843               	movf	___ftadd@f2+2,w
  8002  04A6  00C0               	movwf	?___ftadd+2
  8003  04A7  0008               	return
  8004  04A8                     l5345:	
  8005  04A8  0849               	movf	___ftadd@exp2,w
  8006  04A9  1903               	btfsc	3,2
  8007  04AA  0008               	return
  8008  04AB  084A               	movf	___ftadd@exp1,w
  8009  04AC  0249               	subwf	___ftadd@exp2,w
  8010  04AD  1803               	skipnc
  8011  04AE  2CB7               	goto	l5351
  8012  04AF  0349               	decf	___ftadd@exp2,w
  8013  04B0  3AFF               	xorlw	255
  8014  04B1  074A               	addwf	___ftadd@exp1,w
  8015  04B2  00C4               	movwf	??___ftadd
  8016  04B3  3019               	movlw	25
  8017  04B4  0244               	subwf	??___ftadd,w
  8018  04B5  1803               	btfsc	3,0
  8019  04B6  0008               	return
  8020  04B7                     l5351:	
  8021  04B7  3006               	movlw	6
  8022  04B8  00C4               	movwf	??___ftadd
  8023  04B9  0844               	movf	??___ftadd,w
  8024  04BA  00C8               	movwf	___ftadd@sign
  8025  04BB  1BC0               	btfsc	___ftadd@f1+2,7
  8026  04BC  17C8               	bsf	___ftadd@sign,7
  8027  04BD  1BC3               	btfsc	___ftadd@f2+2,7
  8028  04BE  1748               	bsf	___ftadd@sign,6
  8029  04BF  17BF               	bsf	___ftadd@f1+1,7
  8030  04C0  30FF               	movlw	255
  8031  04C1  05BE               	andwf	___ftadd@f1,f
  8032  04C2  30FF               	movlw	255
  8033  04C3  05BF               	andwf	___ftadd@f1+1,f
  8034  04C4  3000               	movlw	0
  8035  04C5  05C0               	andwf	___ftadd@f1+2,f
  8036  04C6  17C2               	bsf	___ftadd@f2+1,7
  8037  04C7  30FF               	movlw	255
  8038  04C8  05C1               	andwf	___ftadd@f2,f
  8039  04C9  30FF               	movlw	255
  8040  04CA  05C2               	andwf	___ftadd@f2+1,f
  8041  04CB  3000               	movlw	0
  8042  04CC  05C3               	andwf	___ftadd@f2+2,f
  8043  04CD  0849               	movf	___ftadd@exp2,w
  8044  04CE  024A               	subwf	___ftadd@exp1,w
  8045  04CF  1803               	skipnc
  8046  04D0  2CF3               	goto	l5373
  8047  04D1                     l5363:	
  8048  04D1  3001               	movlw	1
  8049  04D2                     u3745:	
  8050  04D2  35C1               	lslf	___ftadd@f2,f
  8051  04D3  0DC2               	rlf	___ftadd@f2+1,f
  8052  04D4  0DC3               	rlf	___ftadd@f2+2,f
  8053  04D5  0B89               	decfsz	9,f
  8054  04D6  2CD2               	goto	u3745
  8055  04D7  3001               	movlw	1
  8056  04D8  02C9               	subwf	___ftadd@exp2,f
  8057  04D9  0849               	movf	___ftadd@exp2,w
  8058  04DA  064A               	xorwf	___ftadd@exp1,w
  8059  04DB  1903               	skipnz
  8060  04DC  2CEE               	goto	l5371
  8061  04DD  3001               	movlw	1
  8062  04DE  02C8               	subwf	___ftadd@sign,f
  8063  04DF  0848               	movf	___ftadd@sign,w
  8064  04E0  3907               	andlw	7
  8065  04E1  1903               	btfsc	3,2
  8066  04E2  2CEE               	goto	l5371
  8067  04E3  2CD1               	goto	l5363
  8068  04E4                     l5369:	
  8069  04E4  3001               	movlw	1
  8070  04E5                     u3775:	
  8071  04E5  36C0               	lsrf	___ftadd@f1+2,f
  8072  04E6  0CBF               	rrf	___ftadd@f1+1,f
  8073  04E7  0CBE               	rrf	___ftadd@f1,f
  8074  04E8  0B89               	decfsz	9,f
  8075  04E9  2CE5               	goto	u3775
  8076  04EA  3001               	movlw	1
  8077  04EB  00C4               	movwf	??___ftadd
  8078  04EC  0844               	movf	??___ftadd,w
  8079  04ED  07CA               	addwf	___ftadd@exp1,f
  8080  04EE                     l5371:	
  8081  04EE  084A               	movf	___ftadd@exp1,w
  8082  04EF  0649               	xorwf	___ftadd@exp2,w
  8083  04F0  1903               	btfsc	3,2
  8084  04F1  2D18               	goto	l3014
  8085  04F2  2CE4               	goto	l5369
  8086  04F3                     l5373:	
  8087  04F3  084A               	movf	___ftadd@exp1,w
  8088  04F4  0249               	subwf	___ftadd@exp2,w
  8089  04F5  1803               	skipnc
  8090  04F6  2D18               	goto	l3014
  8091  04F7                     l5375:	
  8092  04F7  3001               	movlw	1
  8093  04F8                     u3805:	
  8094  04F8  35BE               	lslf	___ftadd@f1,f
  8095  04F9  0DBF               	rlf	___ftadd@f1+1,f
  8096  04FA  0DC0               	rlf	___ftadd@f1+2,f
  8097  04FB  0B89               	decfsz	9,f
  8098  04FC  2CF8               	goto	u3805
  8099  04FD  3001               	movlw	1
  8100  04FE  02CA               	subwf	___ftadd@exp1,f
  8101  04FF  0849               	movf	___ftadd@exp2,w
  8102  0500  064A               	xorwf	___ftadd@exp1,w
  8103  0501  1903               	skipnz
  8104  0502  2D14               	goto	l5383
  8105  0503  3001               	movlw	1
  8106  0504  02C8               	subwf	___ftadd@sign,f
  8107  0505  0848               	movf	___ftadd@sign,w
  8108  0506  3907               	andlw	7
  8109  0507  1903               	btfsc	3,2
  8110  0508  2D14               	goto	l5383
  8111  0509  2CF7               	goto	l5375
  8112  050A                     l5381:	
  8113  050A  3001               	movlw	1
  8114  050B                     u3835:	
  8115  050B  36C3               	lsrf	___ftadd@f2+2,f
  8116  050C  0CC2               	rrf	___ftadd@f2+1,f
  8117  050D  0CC1               	rrf	___ftadd@f2,f
  8118  050E  0B89               	decfsz	9,f
  8119  050F  2D0B               	goto	u3835
  8120  0510  3001               	movlw	1
  8121  0511  00C4               	movwf	??___ftadd
  8122  0512  0844               	movf	??___ftadd,w
  8123  0513  07C9               	addwf	___ftadd@exp2,f
  8124  0514                     l5383:	
  8125  0514  084A               	movf	___ftadd@exp1,w
  8126  0515  0649               	xorwf	___ftadd@exp2,w
  8127  0516  1D03               	skipz
  8128  0517  2D0A               	goto	l5381
  8129  0518                     l3014:	
  8130  0518  1FC8               	btfss	___ftadd@sign,7
  8131  0519  2D2A               	goto	l5387
  8132  051A  30FF               	movlw	255
  8133  051B  06BE               	xorwf	___ftadd@f1,f
  8134  051C  30FF               	movlw	255
  8135  051D  06BF               	xorwf	___ftadd@f1+1,f
  8136  051E  30FF               	movlw	255
  8137  051F  06C0               	xorwf	___ftadd@f1+2,f
  8138  0520  3001               	movlw	1
  8139  0521  07BE               	addwf	___ftadd@f1,f
  8140  0522  3000               	movlw	0
  8141  0523  1803               	skipnc
  8142  0524  3001               	movlw	1
  8143  0525  07BF               	addwf	___ftadd@f1+1,f
  8144  0526  3000               	movlw	0
  8145  0527  1803               	skipnc
  8146  0528  3001               	movlw	1
  8147  0529  07C0               	addwf	___ftadd@f1+2,f
  8148  052A                     l5387:	
  8149  052A  1F48               	btfss	___ftadd@sign,6
  8150  052B  2D3C               	goto	l5391
  8151  052C  30FF               	movlw	255
  8152  052D  06C1               	xorwf	___ftadd@f2,f
  8153  052E  30FF               	movlw	255
  8154  052F  06C2               	xorwf	___ftadd@f2+1,f
  8155  0530  30FF               	movlw	255
  8156  0531  06C3               	xorwf	___ftadd@f2+2,f
  8157  0532  3001               	movlw	1
  8158  0533  07C1               	addwf	___ftadd@f2,f
  8159  0534  3000               	movlw	0
  8160  0535  1803               	skipnc
  8161  0536  3001               	movlw	1
  8162  0537  07C2               	addwf	___ftadd@f2+1,f
  8163  0538  3000               	movlw	0
  8164  0539  1803               	skipnc
  8165  053A  3001               	movlw	1
  8166  053B  07C3               	addwf	___ftadd@f2+2,f
  8167  053C                     l5391:	
  8168  053C  01C8               	clrf	___ftadd@sign
  8169  053D  083E               	movf	___ftadd@f1,w
  8170  053E  07C1               	addwf	___ftadd@f2,f
  8171  053F  083F               	movf	___ftadd@f1+1,w
  8172  0540  3DC2               	addwfc	___ftadd@f2+1,f
  8173  0541  0840               	movf	___ftadd@f1+2,w
  8174  0542  3DC3               	addwfc	___ftadd@f2+2,f
  8175  0543  1FC3               	btfss	___ftadd@f2+2,7
  8176  0544  2D57               	goto	l5401
  8177  0545  30FF               	movlw	255
  8178  0546  06C1               	xorwf	___ftadd@f2,f
  8179  0547  30FF               	movlw	255
  8180  0548  06C2               	xorwf	___ftadd@f2+1,f
  8181  0549  30FF               	movlw	255
  8182  054A  06C3               	xorwf	___ftadd@f2+2,f
  8183  054B  3001               	movlw	1
  8184  054C  07C1               	addwf	___ftadd@f2,f
  8185  054D  3000               	movlw	0
  8186  054E  1803               	skipnc
  8187  054F  3001               	movlw	1
  8188  0550  07C2               	addwf	___ftadd@f2+1,f
  8189  0551  3000               	movlw	0
  8190  0552  1803               	skipnc
  8191  0553  3001               	movlw	1
  8192  0554  07C3               	addwf	___ftadd@f2+2,f
  8193  0555  01C8               	clrf	___ftadd@sign
  8194  0556  0AC8               	incf	___ftadd@sign,f
  8195  0557                     l5401:	
  8196  0557  0841               	movf	___ftadd@f2,w
  8197  0558  00A0               	movwf	___ftpack@arg
  8198  0559  0842               	movf	___ftadd@f2+1,w
  8199  055A  00A1               	movwf	___ftpack@arg+1
  8200  055B  0843               	movf	___ftadd@f2+2,w
  8201  055C  00A2               	movwf	___ftpack@arg+2
  8202  055D  084A               	movf	___ftadd@exp1,w
  8203  055E  00C4               	movwf	??___ftadd
  8204  055F  0844               	movf	??___ftadd,w
  8205  0560  00A3               	movwf	___ftpack@exp
  8206  0561  0848               	movf	___ftadd@sign,w
  8207  0562  00C5               	movwf	??___ftadd+1
  8208  0563  0845               	movf	??___ftadd+1,w
  8209  0564  00A4               	movwf	___ftpack@sign
  8210  0565  3187  279F         	fcall	___ftpack
  8211  0567  0020               	movlb	0	; select bank0
  8212  0568  0820               	movf	?___ftpack,w
  8213  0569  00BE               	movwf	?___ftadd
  8214  056A  0821               	movf	?___ftpack+1,w
  8215  056B  00BF               	movwf	?___ftadd+1
  8216  056C  0822               	movf	?___ftpack+2,w
  8217  056D  00C0               	movwf	?___ftadd+2
  8218  056E  0008               	return
  8219  056F                     __end_of___ftadd:	
  8220                           
  8221                           	psect	text35
  8222  1275                     __ptext35:	
  8223 ;; *************** function _RfSWPointSelect *****************
  8224 ;; Defined at:
  8225 ;;		line 335 in file "../src/RF_Control_B1.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;  sw              1    wreg     unsigned char 
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;  sw              1    1[BANK0 ] unsigned char 
  8230 ;; Return value:  Size  Location     Type
  8231 ;;		None               void
  8232 ;; Registers used:
  8233 ;;		wreg
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;Total ram usage:        2 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    5
  8246 ;; This function calls:
  8247 ;;		Nothing
  8248 ;; This function is called by:
  8249 ;;		_setRFSW_Control
  8250 ;;		_setRFSW_AdjControl
  8251 ;;		_setRFSW_Status
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           
  8256                           ;psect for function _RfSWPointSelect
  8257  1275                     _RfSWPointSelect:	
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in _RfSWPointSelect: [wreg]
  8261                           ;RfSWPointSelect@sw stored from wreg
  8262  1275  0020               	movlb	0	; select bank0
  8263  1276  00A1               	movwf	RfSWPointSelect@sw
  8264                           
  8265                           ;RF_Control_B1.c: 337: if (sw == 1) {
  8266  1277  0821               	movf	RfSWPointSelect@sw,w
  8267  1278  3A01               	xorlw	1
  8268  1279  1D03               	skipz
  8269  127A  2A80               	goto	l2243
  8270                           
  8271                           ;RF_Control_B1.c: 338: RFSW = &RFSW1;
  8272  127B  30E9               	movlw	_RFSW1& (0+255)
  8273  127C  00A0               	movwf	??_RfSWPointSelect
  8274  127D  0820               	movf	??_RfSWPointSelect,w
  8275  127E  0021               	movlb	1	; select bank1
  8276  127F  00BF               	movwf	_RFSW^(0+128)
  8277  1280                     l2243:	
  8278                           
  8279                           ;RF_Control_B1.c: 339: }
  8280                           ;RF_Control_B1.c: 342: if (sw == 2) {
  8281  1280  0020               	movlb	0	; select bank0
  8282  1281  0821               	movf	RfSWPointSelect@sw,w
  8283  1282  3A02               	xorlw	2
  8284  1283  1D03               	skipz
  8285  1284  2A8A               	goto	l2244
  8286                           
  8287                           ;RF_Control_B1.c: 343: RFSW = &RFSW2;
  8288  1285  30EA               	movlw	_RFSW2& (0+255)
  8289  1286  00A0               	movwf	??_RfSWPointSelect
  8290  1287  0820               	movf	??_RfSWPointSelect,w
  8291  1288  0021               	movlb	1	; select bank1
  8292  1289  00BF               	movwf	_RFSW^(0+128)
  8293  128A                     l2244:	
  8294                           
  8295                           ;RF_Control_B1.c: 344: }
  8296                           ;RF_Control_B1.c: 347: if (sw == 3) {
  8297  128A  0020               	movlb	0	; select bank0
  8298  128B  0821               	movf	RfSWPointSelect@sw,w
  8299  128C  3A03               	xorlw	3
  8300  128D  1D03               	skipz
  8301  128E  0008               	return
  8302                           
  8303                           ;RF_Control_B1.c: 348: RFSW = &RFSW3;
  8304  128F  30EB               	movlw	_RFSW3& (0+255)
  8305  1290  00A0               	movwf	??_RfSWPointSelect
  8306  1291  0820               	movf	??_RfSWPointSelect,w
  8307  1292  0021               	movlb	1	; select bank1
  8308  1293  00BF               	movwf	_RFSW^(0+128)
  8309  1294  0008               	return
  8310  1295                     __end_of_RfSWPointSelect:	
  8311                           
  8312                           	psect	text36
  8313  1255                     __ptext36:	
  8314 ;; *************** function _RF_RxDisable *****************
  8315 ;; Defined at:
  8316 ;;		line 210 in file "../src/RF_Control_B1.c"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  rf              1    wreg     unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  rf              1    4[BANK0 ] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;		None               void
  8323 ;; Registers used:
  8324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;Total ram usage:        1 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; Hardware stack levels required when called:    7
  8337 ;; This function calls:
  8338 ;;		_CC2500_WriteCommand
  8339 ;;		_RfPointSelect
  8340 ;; This function is called by:
  8341 ;;		_setRF_Main
  8342 ;; This function uses a non-reentrant model
  8343 ;;
  8344                           
  8345                           
  8346                           ;psect for function _RF_RxDisable
  8347  1255                     _RF_RxDisable:	
  8348                           
  8349                           ;incstack = 0
  8350                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8351                           ;RF_RxDisable@rf stored from wreg
  8352  1255  0020               	movlb	0	; select bank0
  8353  1256  00A4               	movwf	RF_RxDisable@rf
  8354                           
  8355                           ;RF_Control_B1.c: 211: RfPointSelect(rf);
  8356  1257  0824               	movf	RF_RxDisable@rf,w
  8357  1258  319E  26D9  3192   	fcall	_RfPointSelect
  8358                           
  8359                           ;RF_Control_B1.c: 213: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8360  125B  087A               	movf	_RF,w
  8361  125C  0086               	movwf	6
  8362  125D  0187               	clrf	7
  8363  125E  1881               	btfsc	1,1
  8364  125F  2A65               	goto	l6227
  8365  1260  087A               	movf	_RF,w
  8366  1261  0086               	movwf	6
  8367  1262  0187               	clrf	7
  8368  1263  1D81               	btfss	1,3
  8369  1264  0008               	return
  8370  1265                     l6227:	
  8371                           
  8372                           ;RF_Control_B1.c: 214: RF->RxStatus = 0;
  8373  1265  087A               	movf	_RF,w
  8374  1266  0086               	movwf	6
  8375  1267  0187               	clrf	7
  8376  1268  1181               	bcf	1,3
  8377                           
  8378                           ;RF_Control_B1.c: 215: RF->ReceiveGO = 0;
  8379  1269  087A               	movf	_RF,w
  8380  126A  0086               	movwf	6
  8381  126B  0187               	clrf	7
  8382  126C  1081               	bcf	1,1
  8383                           
  8384                           ;RF_Control_B1.c: 216: CC2500_WriteCommand(0x36);
  8385  126D  3036               	movlw	54
  8386  126E  319F  2714  3192   	fcall	_CC2500_WriteCommand
  8387                           
  8388                           ;RF_Control_B1.c: 217: CC2500_WriteCommand(0x3A);
  8389  1271  303A               	movlw	58
  8390  1272  319F  2714         	fcall	_CC2500_WriteCommand
  8391  1274  0008               	return
  8392  1275                     __end_of_RF_RxDisable:	
  8393                           
  8394                           	psect	text37
  8395  1560                     __ptext37:	
  8396 ;; *************** function _CC2500_TxData *****************
  8397 ;; Defined at:
  8398 ;;		line 32 in file "../src/CC2500_B1.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8403 ;; Return value:  Size  Location     Type
  8404 ;;		None               void
  8405 ;; Registers used:
  8406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8413 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8414 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;Total ram usage:        2 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:    7
  8419 ;; This function calls:
  8420 ;;		_CC2500_WriteByte
  8421 ;;		_CC2500_WriteCommand
  8422 ;; This function is called by:
  8423 ;;		_setRF_Main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           
  8428                           ;psect for function _CC2500_TxData
  8429  1560                     _CC2500_TxData:	
  8430                           
  8431                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8432                           ;CC2500_B1.c: 35: RC4 = 0;
  8433                           
  8434                           ;incstack = 0
  8435                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8436  1560  0020               	movlb	0	; select bank0
  8437  1561  120E               	bcf	14,4	;volatile
  8438                           
  8439                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8440  1562  307F               	movlw	127
  8441  1563  00A4               	movwf	??_CC2500_TxData
  8442  1564  0824               	movf	??_CC2500_TxData,w
  8443  1565  0021               	movlb	1	; select bank1
  8444  1566  00C2               	movwf	_SPI0Buffer^(0+128)
  8445  1567                     l280:	
  8446                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8447                           
  8448  1567  0020               	movlb	0	; select bank0
  8449  1568  190E               	btfsc	14,2	;volatile
  8450  1569  2D67               	goto	l280
  8451                           
  8452                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8453  156A  3190  20CE  3195   	fcall	_CC2500_WriteByte
  8454                           
  8455                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8456  156D  0021               	movlb	1	; select bank1
  8457  156E  0843               	movf	_Tx_Length^(0+128),w
  8458  156F  0020               	movlb	0	; select bank0
  8459  1570  00A4               	movwf	??_CC2500_TxData
  8460  1571  0824               	movf	??_CC2500_TxData,w
  8461  1572  0021               	movlb	1	; select bank1
  8462  1573  00C2               	movwf	_SPI0Buffer^(0+128)
  8463                           
  8464                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8465  1574  3190  20CE  3195   	fcall	_CC2500_WriteByte
  8466                           
  8467                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8468  1577  0020               	movlb	0	; select bank0
  8469  1578  01A5               	clrf	CC2500_TxData@loop_e
  8470  1579                     l6031:	
  8471  1579  0021               	movlb	1	; select bank1
  8472  157A  0843               	movf	_Tx_Length^(0+128),w
  8473  157B  0020               	movlb	0	; select bank0
  8474  157C  0225               	subwf	CC2500_TxData@loop_e,w
  8475  157D  1803               	btfsc	3,0
  8476  157E  2D91               	goto	l285
  8477                           
  8478                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8479  157F  0825               	movf	CC2500_TxData@loop_e,w
  8480  1580  3EA0               	addlw	_RF_Data& (0+255)
  8481  1581  0086               	movwf	6
  8482  1582  0187               	clrf	7
  8483  1583  0801               	movf	1,w
  8484  1584  00A4               	movwf	??_CC2500_TxData
  8485  1585  0824               	movf	??_CC2500_TxData,w
  8486  1586  0021               	movlb	1	; select bank1
  8487  1587  00C2               	movwf	_SPI0Buffer^(0+128)
  8488                           
  8489                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8490  1588  3190  20CE  3195   	fcall	_CC2500_WriteByte
  8491  158B  3001               	movlw	1
  8492  158C  0020               	movlb	0	; select bank0
  8493  158D  00A4               	movwf	??_CC2500_TxData
  8494  158E  0824               	movf	??_CC2500_TxData,w
  8495  158F  07A5               	addwf	CC2500_TxData@loop_e,f
  8496  1590  2D79               	goto	l6031
  8497  1591                     l285:	
  8498                           
  8499                           ;CC2500_B1.c: 44: }
  8500                           ;CC2500_B1.c: 45: RC4 = 1;
  8501  1591  160E               	bsf	14,4	;volatile
  8502                           
  8503                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8504  1592  3035               	movlw	53
  8505  1593  319F  2714  3195   	fcall	_CC2500_WriteCommand
  8506  1596                     l286:	
  8507                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8508                           
  8509  1596  0020               	movlb	0	; select bank0
  8510  1597  1C0D               	btfss	13,0	;volatile
  8511  1598  2D96               	goto	l286
  8512  1599                     l289:	
  8513                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8514                           
  8515  1599  180D               	btfsc	13,0	;volatile
  8516  159A  2D99               	goto	l289
  8517                           
  8518                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8519  159B  3036               	movlw	54
  8520  159C  319F  2714  3195   	fcall	_CC2500_WriteCommand
  8521                           
  8522                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8523  159F  303B               	movlw	59
  8524  15A0  319F  2714         	fcall	_CC2500_WriteCommand
  8525                           
  8526                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8527  15A2  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8528  15A3  0008               	return
  8529  15A4                     __end_of_CC2500_TxData:	
  8530                           
  8531                           	psect	text38
  8532  0869                     __ptext38:	
  8533 ;; *************** function _CC2500_RxData *****************
  8534 ;; Defined at:
  8535 ;;		line 57 in file "../src/CC2500_B1.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;		None               void
  8542 ;; Registers used:
  8543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        2 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    7
  8556 ;; This function calls:
  8557 ;;		_CC2500_ReadByte
  8558 ;;		_CC2500_ReadStatus
  8559 ;;		_CC2500_WriteByte
  8560 ;;		_CC2500_WriteCommand
  8561 ;; This function is called by:
  8562 ;;		_setRF_Main
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function _CC2500_RxData
  8568  0869                     _CC2500_RxData:	
  8569                           
  8570                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8571                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8572                           
  8573                           ;incstack = 0
  8574                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8575  0869  0020               	movlb	0	; select bank0
  8576  086A  180D               	btfsc	13,0	;volatile
  8577  086B                     l296:	
  8578                           ;CC2500_B1.c: 63: {
  8579                           ;CC2500_B1.c: 64: while (RB0 == 1);
  8580                           
  8581  086B  180D               	btfsc	13,0	;volatile
  8582  086C  286B               	goto	l296
  8583                           
  8584                           ;CC2500_B1.c: 65: }
  8585                           ;CC2500_B1.c: 67: CC2500_ReadStatus(0x3B);
  8586  086D  303B               	movlw	59
  8587  086E  3191  216A  3188   	fcall	_CC2500_ReadStatus
  8588                           
  8589                           ;CC2500_B1.c: 68: if (s_data != 0) {
  8590  0871  0021               	movlb	1	; select bank1
  8591  0872  0846               	movf	_s_data^(0+128),w
  8592  0873  1903               	btfsc	3,2
  8593  0874  28BF               	goto	l6077
  8594                           
  8595                           ;CC2500_B1.c: 69: RC4 = 0;
  8596  0875  0020               	movlb	0	; select bank0
  8597  0876  120E               	bcf	14,4	;volatile
  8598                           
  8599                           ;CC2500_B1.c: 70: SPI0Buffer = 0x3F + 0xC0;
  8600  0877  30FF               	movlw	255
  8601  0878  00A4               	movwf	??_CC2500_RxData
  8602  0879  0824               	movf	??_CC2500_RxData,w
  8603  087A  0021               	movlb	1	; select bank1
  8604  087B  00C2               	movwf	_SPI0Buffer^(0+128)
  8605  087C                     l300:	
  8606                           ;CC2500_B1.c: 71: while (RC2 == 1);
  8607                           
  8608  087C  0020               	movlb	0	; select bank0
  8609  087D  190E               	btfsc	14,2	;volatile
  8610  087E  287C               	goto	l300
  8611                           
  8612                           ;CC2500_B1.c: 72: CC2500_WriteByte();
  8613  087F  3190  20CE  3188   	fcall	_CC2500_WriteByte
  8614                           
  8615                           ;CC2500_B1.c: 74: CC2500_ReadByte();
  8616  0882  3191  21BE  3188   	fcall	_CC2500_ReadByte
  8617                           
  8618                           ;CC2500_B1.c: 75: Rx_Length = SPI0Buffer;
  8619  0885  0021               	movlb	1	; select bank1
  8620  0886  0842               	movf	_SPI0Buffer^(0+128),w
  8621  0887  0020               	movlb	0	; select bank0
  8622  0888  00A4               	movwf	??_CC2500_RxData
  8623  0889  0824               	movf	??_CC2500_RxData,w
  8624  088A  0021               	movlb	1	; select bank1
  8625  088B  00C1               	movwf	_Rx_Length^(0+128)
  8626                           
  8627                           ;CC2500_B1.c: 76: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8628  088C  0020               	movlb	0	; select bank0
  8629  088D  01A5               	clrf	CC2500_RxData@loop_f
  8630  088E                     l6063:	
  8631  088E  0021               	movlb	1	; select bank1
  8632  088F  0841               	movf	_Rx_Length^(0+128),w
  8633  0890  0020               	movlb	0	; select bank0
  8634  0891  0225               	subwf	CC2500_RxData@loop_f,w
  8635  0892  1803               	btfsc	3,0
  8636  0893  28A6               	goto	l6065
  8637                           
  8638                           ;CC2500_B1.c: 77: CC2500_ReadByte();
  8639  0894  3191  21BE  3188   	fcall	_CC2500_ReadByte
  8640                           
  8641                           ;CC2500_B1.c: 78: RF_Data[loop_f] = SPI0Buffer;
  8642  0897  0021               	movlb	1	; select bank1
  8643  0898  0842               	movf	_SPI0Buffer^(0+128),w
  8644  0899  0020               	movlb	0	; select bank0
  8645  089A  00A4               	movwf	??_CC2500_RxData
  8646  089B  0825               	movf	CC2500_RxData@loop_f,w
  8647  089C  3EA0               	addlw	_RF_Data& (0+255)
  8648  089D  0086               	movwf	6
  8649  089E  0187               	clrf	7
  8650  089F  0824               	movf	??_CC2500_RxData,w
  8651  08A0  0081               	movwf	1
  8652  08A1  3001               	movlw	1
  8653  08A2  00A4               	movwf	??_CC2500_RxData
  8654  08A3  0824               	movf	??_CC2500_RxData,w
  8655  08A4  07A5               	addwf	CC2500_RxData@loop_f,f
  8656  08A5  288E               	goto	l6063
  8657  08A6                     l6065:	
  8658                           
  8659                           ;CC2500_B1.c: 79: }
  8660                           ;CC2500_B1.c: 80: CC2500_ReadByte();
  8661  08A6  3191  21BE  3188   	fcall	_CC2500_ReadByte
  8662                           
  8663                           ;CC2500_B1.c: 81: RSSI = SPI0Buffer;
  8664  08A9  0021               	movlb	1	; select bank1
  8665  08AA  0842               	movf	_SPI0Buffer^(0+128),w
  8666  08AB  0020               	movlb	0	; select bank0
  8667  08AC  00A4               	movwf	??_CC2500_RxData
  8668  08AD  0824               	movf	??_CC2500_RxData,w
  8669  08AE  0021               	movlb	1	; select bank1
  8670  08AF  00C0               	movwf	_RSSI^(0+128)
  8671                           
  8672                           ;CC2500_B1.c: 82: CC2500_ReadByte();
  8673  08B0  3191  21BE  3188   	fcall	_CC2500_ReadByte
  8674                           
  8675                           ;CC2500_B1.c: 83: CRC = SPI0Buffer;
  8676  08B3  0021               	movlb	1	; select bank1
  8677  08B4  0842               	movf	_SPI0Buffer^(0+128),w
  8678  08B5  0020               	movlb	0	; select bank0
  8679  08B6  00A4               	movwf	??_CC2500_RxData
  8680  08B7  0824               	movf	??_CC2500_RxData,w
  8681  08B8  0021               	movlb	1	; select bank1
  8682  08B9  00B8               	movwf	_CRC^(0+128)
  8683                           
  8684                           ;CC2500_B1.c: 84: RC4 = 1;
  8685  08BA  0020               	movlb	0	; select bank0
  8686  08BB  160E               	bsf	14,4	;volatile
  8687                           
  8688                           ;CC2500_B1.c: 85: if (CRC & 0x80)
  8689  08BC  0021               	movlb	1	; select bank1
  8690  08BD  1BB8               	btfsc	_CRC^(0+128),7
  8691                           
  8692                           ;CC2500_B1.c: 86: Receive_OK = 1;
  8693  08BE  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8694  08BF                     l6077:	
  8695                           
  8696                           ;CC2500_B1.c: 87: }
  8697                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  8698  08BF  3036               	movlw	54
  8699  08C0  319F  2714  3188   	fcall	_CC2500_WriteCommand
  8700                           
  8701                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  8702  08C3  303A               	movlw	58
  8703  08C4  319F  2714         	fcall	_CC2500_WriteCommand
  8704  08C6  0008               	return
  8705  08C7                     __end_of_CC2500_RxData:	
  8706                           
  8707                           	psect	text39
  8708  116A                     __ptext39:	
  8709 ;; *************** function _CC2500_ReadStatus *****************
  8710 ;; Defined at:
  8711 ;;		line 262 in file "../src/CC2500_B1.c"
  8712 ;; Parameters:    Size  Location     Type
  8713 ;;  status_addr     1    wreg     unsigned char 
  8714 ;; Auto vars:     Size  Location     Type
  8715 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;		None               void
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0, pclath, cstack
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;Total ram usage:        2 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    6
  8732 ;; This function calls:
  8733 ;;		_CC2500_ReadByte
  8734 ;;		_CC2500_WriteByte
  8735 ;; This function is called by:
  8736 ;;		_CC2500_RxData
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           
  8741                           ;psect for function _CC2500_ReadStatus
  8742  116A                     _CC2500_ReadStatus:	
  8743                           
  8744                           ;incstack = 0
  8745                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8746                           ;CC2500_ReadStatus@status_addr stored from wreg
  8747  116A  0020               	movlb	0	; select bank0
  8748  116B  00A3               	movwf	CC2500_ReadStatus@status_addr
  8749                           
  8750                           ;CC2500_B1.c: 263: RC4 = 0;
  8751  116C  120E               	bcf	14,4	;volatile
  8752                           
  8753                           ;CC2500_B1.c: 264: SPI0Buffer = status_addr + 0xC0;
  8754  116D  0823               	movf	CC2500_ReadStatus@status_addr,w
  8755  116E  3EC0               	addlw	192
  8756  116F  00A2               	movwf	??_CC2500_ReadStatus
  8757  1170  0822               	movf	??_CC2500_ReadStatus,w
  8758  1171  0021               	movlb	1	; select bank1
  8759  1172  00C2               	movwf	_SPI0Buffer^(0+128)
  8760  1173                     l376:	
  8761                           ;CC2500_B1.c: 266: while (RC2 == 1);
  8762                           
  8763  1173  0020               	movlb	0	; select bank0
  8764  1174  190E               	btfsc	14,2	;volatile
  8765  1175  2973               	goto	l376
  8766                           
  8767                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8768  1176  3190  20CE  3191   	fcall	_CC2500_WriteByte
  8769                           
  8770                           ;CC2500_B1.c: 269: CC2500_ReadByte();
  8771  1179  3191  21BE         	fcall	_CC2500_ReadByte
  8772                           
  8773                           ;CC2500_B1.c: 270: RC4 = 1;
  8774  117B  0020               	movlb	0	; select bank0
  8775  117C  160E               	bsf	14,4	;volatile
  8776                           
  8777                           ;CC2500_B1.c: 272: s_data = SPI0Buffer;
  8778  117D  0021               	movlb	1	; select bank1
  8779  117E  0842               	movf	_SPI0Buffer^(0+128),w
  8780  117F  0020               	movlb	0	; select bank0
  8781  1180  00A2               	movwf	??_CC2500_ReadStatus
  8782  1181  0822               	movf	??_CC2500_ReadStatus,w
  8783  1182  0021               	movlb	1	; select bank1
  8784  1183  00C6               	movwf	_s_data^(0+128)
  8785  1184  0008               	return
  8786  1185                     __end_of_CC2500_ReadStatus:	
  8787                           
  8788                           	psect	text40
  8789  11BE                     __ptext40:	
  8790 ;; *************** function _CC2500_ReadByte *****************
  8791 ;; Defined at:
  8792 ;;		line 206 in file "../src/CC2500_B1.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;		None
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8797 ;; Return value:  Size  Location     Type
  8798 ;;		None               void
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0
  8801 ;; Tracked objects:
  8802 ;;		On entry : 0/0
  8803 ;;		On exit  : 0/0
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:        2 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    5
  8813 ;; This function calls:
  8814 ;;		Nothing
  8815 ;; This function is called by:
  8816 ;;		_CC2500_RxData
  8817 ;;		_CC2500_ReadStatus
  8818 ;;		_CC2500_ReadREG
  8819 ;; This function uses a non-reentrant model
  8820 ;;
  8821                           
  8822                           
  8823                           ;psect for function _CC2500_ReadByte
  8824  11BE                     _CC2500_ReadByte:	
  8825                           
  8826                           ;CC2500_B1.c: 207: unsigned char loop_b;
  8827                           ;CC2500_B1.c: 208: for (loop_b = 0; loop_b < 8; loop_b++) {
  8828                           
  8829                           ;incstack = 0
  8830                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8831  11BE  0020               	movlb	0	; select bank0
  8832  11BF  01A1               	clrf	CC2500_ReadByte@loop_b
  8833  11C0                     L6:	
  8834  11C0  3008               	movlw	8
  8835  11C1  0221               	subwf	CC2500_ReadByte@loop_b,w
  8836  11C2  1803               	btfsc	3,0
  8837  11C3  0008               	return
  8838                           
  8839                           ;CC2500_B1.c: 209: RC1 = 1;
  8840  11C4  148E               	bsf	14,1	;volatile
  8841                           
  8842                           ;CC2500_B1.c: 210: SPI0Buffer <<= 1;
  8843  11C5  1003               	clrc
  8844  11C6  0021               	movlb	1	; select bank1
  8845  11C7  0DC2               	rlf	_SPI0Buffer^(0+128),f
  8846                           
  8847                           ;CC2500_B1.c: 211: if (RC2 == 1)
  8848  11C8  0020               	movlb	0	; select bank0
  8849  11C9  1D0E               	btfss	14,2	;volatile
  8850  11CA  29CE               	goto	l5829
  8851                           
  8852                           ;CC2500_B1.c: 212: SPI0Buffer |= 0x01;
  8853  11CB  0021               	movlb	1	; select bank1
  8854  11CC  1442               	bsf	_SPI0Buffer^(0+128),0
  8855  11CD  29D4               	goto	l5831
  8856  11CE                     l5829:	
  8857                           
  8858                           ;CC2500_B1.c: 213: else
  8859                           ;CC2500_B1.c: 214: SPI0Buffer &= 0xFE;
  8860  11CE  30FE               	movlw	254
  8861  11CF  0020               	movlb	0	; select bank0
  8862  11D0  00A0               	movwf	??_CC2500_ReadByte
  8863  11D1  0820               	movf	??_CC2500_ReadByte,w
  8864  11D2  0021               	movlb	1	; select bank1
  8865  11D3  05C2               	andwf	_SPI0Buffer^(0+128),f
  8866  11D4                     l5831:	
  8867                           
  8868                           ;CC2500_B1.c: 215: RC1 = 0;
  8869  11D4  0020               	movlb	0	; select bank0
  8870  11D5  108E               	bcf	14,1	;volatile
  8871  11D6  3001               	movlw	1
  8872  11D7  00A0               	movwf	??_CC2500_ReadByte
  8873  11D8  0820               	movf	??_CC2500_ReadByte,w
  8874  11D9  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8875  11DA  29C0               	goto	L6
  8876  11DB                     __end_of_CC2500_ReadByte:	
  8877                           
  8878                           	psect	text41
  8879  1E25                     __ptext41:	
  8880 ;; *************** function _RF_Initialization *****************
  8881 ;; Defined at:
  8882 ;;		line 19 in file "../src/RF_Control_B1.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;		None
  8885 ;; Auto vars:     Size  Location     Type
  8886 ;;		None
  8887 ;; Return value:  Size  Location     Type
  8888 ;;		None               void
  8889 ;; Registers used:
  8890 ;;		wreg, status,2, status,0, pclath, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;Total ram usage:        0 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    6
  8903 ;; This function calls:
  8904 ;;		_setRF_Initialization
  8905 ;; This function is called by:
  8906 ;;		_main
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           
  8911                           ;psect for function _RF_Initialization
  8912  1E25                     _RF_Initialization:	
  8913                           
  8914                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8918  1E25  3001               	movlw	1
  8919  1E26  319E  2652         	fcall	_setRF_Initialization
  8920  1E28  0008               	return
  8921  1E29                     __end_of_RF_Initialization:	
  8922                           
  8923                           	psect	text42
  8924  1E52                     __ptext42:	
  8925 ;; *************** function _setRF_Initialization *****************
  8926 ;; Defined at:
  8927 ;;		line 52 in file "../src/RF_Control_B1.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  rf              1    wreg     unsigned char 
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  rf              1    0[COMMON] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        1 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    5
  8948 ;; This function calls:
  8949 ;;		Nothing
  8950 ;; This function is called by:
  8951 ;;		_RF_Initialization
  8952 ;; This function uses a non-reentrant model
  8953 ;;
  8954                           
  8955                           
  8956                           ;psect for function _setRF_Initialization
  8957  1E52                     _setRF_Initialization:	
  8958                           
  8959                           ;RF_Control_B1.c: 55: Tx_Length = 21;
  8960                           
  8961                           ;incstack = 0
  8962                           ; Regs used in _setRF_Initialization: [wreg]
  8963  1E52  3015               	movlw	21
  8964  1E53  0020               	movlb	0	; select bank0
  8965  1E54  00A0               	movwf	??_setRF_Initialization
  8966  1E55  0820               	movf	??_setRF_Initialization,w
  8967  1E56  0021               	movlb	1	; select bank1
  8968  1E57  00C3               	movwf	_Tx_Length^(0+128)
  8969  1E58  0008               	return
  8970  1E59                     __end_of_setRF_Initialization:	
  8971                           
  8972                           	psect	text43
  8973  114F                     __ptext43:	
  8974 ;; *************** function _Mcu_Initialization *****************
  8975 ;; Defined at:
  8976 ;;		line 30 in file "../src/MCU_B1.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;		None
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;		None
  8981 ;; Return value:  Size  Location     Type
  8982 ;;		None               void
  8983 ;; Registers used:
  8984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;Total ram usage:        1 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    6
  8997 ;; This function calls:
  8998 ;;		_ADC_Set
  8999 ;;		_Fosc_Set
  9000 ;;		_INT_Set
  9001 ;;		_IOC_Set
  9002 ;;		_IO_Set
  9003 ;;		_TMR0_Set
  9004 ;;		_WDT_Set
  9005 ;; This function is called by:
  9006 ;;		_main
  9007 ;; This function uses a non-reentrant model
  9008 ;;
  9009                           
  9010                           
  9011                           ;psect for function _Mcu_Initialization
  9012  114F                     _Mcu_Initialization:	
  9013                           
  9014                           ;MCU_B1.c: 32: Fosc_Set();
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9018  114F  319E  2621  3191   	fcall	_Fosc_Set
  9019                           
  9020                           ;MCU_B1.c: 34: IO_Set();
  9021  1152  3190  209E  3191   	fcall	_IO_Set
  9022                           
  9023                           ;MCU_B1.c: 36: TMR0_Set();
  9024  1155  319E  26CC  3191   	fcall	_TMR0_Set
  9025                           
  9026                           ;MCU_B1.c: 38: ;;
  9027                           ;MCU_B1.c: 40: ADC_Set();
  9028  1158  319E  264B  3191   	fcall	_ADC_Set
  9029                           
  9030                           ;MCU_B1.c: 44: INT_Set();
  9031  115B  319E  2632  3191   	fcall	_INT_Set
  9032                           
  9033                           ;MCU_B1.c: 46: IOC_Set();
  9034  115E  319E  26BF  3191   	fcall	_IOC_Set
  9035                           
  9036                           ;MCU_B1.c: 48: ;;
  9037                           ;MCU_B1.c: 50: ;;
  9038                           ;MCU_B1.c: 52: Memory=&VarMemory;
  9039  1161  3020               	movlw	_VarMemory& (0+255)
  9040  1162  0020               	movlb	0	; select bank0
  9041  1163  00A1               	movwf	??_Mcu_Initialization
  9042  1164  0821               	movf	??_Mcu_Initialization,w
  9043  1165  0021               	movlb	1	; select bank1
  9044  1166  00EF               	movwf	_Memory^(0+128)
  9045                           
  9046                           ;MCU_B1.c: 54: WDT_Set();
  9047  1167  3190  20B6         	fcall	_WDT_Set
  9048  1169  0008               	return
  9049  116A                     __end_of_Mcu_Initialization:	
  9050                           
  9051                           	psect	text44
  9052  10B6                     __ptext44:	
  9053 ;; *************** function _WDT_Set *****************
  9054 ;; Defined at:
  9055 ;;		line 892 in file "../src/MCU_B1.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;		None
  9058 ;; Auto vars:     Size  Location     Type
  9059 ;;		None
  9060 ;; Return value:  Size  Location     Type
  9061 ;;		None               void
  9062 ;; Registers used:
  9063 ;;		wreg, fsr1l, fsr1h
  9064 ;; Tracked objects:
  9065 ;;		On entry : 0/0
  9066 ;;		On exit  : 0/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;Total ram usage:        1 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    5
  9076 ;; This function calls:
  9077 ;;		Nothing
  9078 ;; This function is called by:
  9079 ;;		_Mcu_Initialization
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function _WDT_Set
  9085  10B6                     _WDT_Set:	
  9086                           
  9087                           ;MCU_B1.c: 893: WDTCON = 0b00010111;;
  9088                           
  9089                           ;incstack = 0
  9090                           ; Regs used in _WDT_Set: [wregfsr1]
  9091  10B6  3017               	movlw	23
  9092  10B7  0021               	movlb	1	; select bank1
  9093  10B8  0097               	movwf	23	;volatile
  9094                           
  9095                           ;MCU_B1.c: 894: WDT = &_WDT;
  9096  10B9  30E7               	movlw	__WDT& (0+255)
  9097  10BA  0020               	movlb	0	; select bank0
  9098  10BB  00A0               	movwf	??_WDT_Set
  9099  10BC  0820               	movf	??_WDT_Set,w
  9100  10BD  0021               	movlb	1	; select bank1
  9101  10BE  00ED               	movwf	_WDT^(0+128)
  9102                           
  9103                           ;MCU_B1.c: 895: WDT->Enable = 1;
  9104  10BF  086D               	movf	_WDT^(0+128),w
  9105  10C0  0086               	movwf	6
  9106  10C1  0187               	clrf	7
  9107  10C2  1401               	bsf	1,0
  9108                           
  9109                           ;MCU_B1.c: 896: WDT->Count = 10;
  9110  10C3  300A               	movlw	10
  9111  10C4  0020               	movlb	0	; select bank0
  9112  10C5  00A0               	movwf	??_WDT_Set
  9113  10C6  0021               	movlb	1	; select bank1
  9114  10C7  0A6D               	incf	_WDT^(0+128),w
  9115  10C8  0086               	movwf	6
  9116  10C9  0187               	clrf	7
  9117  10CA  0020               	movlb	0	; select bank0
  9118  10CB  0820               	movf	??_WDT_Set,w
  9119  10CC  0081               	movwf	1
  9120  10CD  0008               	return
  9121  10CE                     __end_of_WDT_Set:	
  9122                           
  9123                           	psect	text45
  9124  1ECC                     __ptext45:	
  9125 ;; *************** function _TMR0_Set *****************
  9126 ;; Defined at:
  9127 ;;		line 128 in file "../src/MCU_B1.c"
  9128 ;; Parameters:    Size  Location     Type
  9129 ;;		None
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;		None
  9132 ;; Return value:  Size  Location     Type
  9133 ;;		None               void
  9134 ;; Registers used:
  9135 ;;		wreg, status,2
  9136 ;; Tracked objects:
  9137 ;;		On entry : 0/0
  9138 ;;		On exit  : 0/0
  9139 ;;		Unchanged: 0/0
  9140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9145 ;;Total ram usage:        1 bytes
  9146 ;; Hardware stack levels used:    1
  9147 ;; Hardware stack levels required when called:    5
  9148 ;; This function calls:
  9149 ;;		Nothing
  9150 ;; This function is called by:
  9151 ;;		_Mcu_Initialization
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           
  9156                           ;psect for function _TMR0_Set
  9157  1ECC                     _TMR0_Set:	
  9158                           
  9159                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9160                           
  9161                           ;incstack = 0
  9162                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9163  1ECC  30C7               	movlw	_VarTimer0& (0+255)
  9164  1ECD  0020               	movlb	0	; select bank0
  9165  1ECE  00A0               	movwf	??_TMR0_Set
  9166  1ECF  0820               	movf	??_TMR0_Set,w
  9167  1ED0  0021               	movlb	1	; select bank1
  9168  1ED1  00EC               	movwf	_Timer0^(0+128)
  9169                           
  9170                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9171  1ED2  0195               	clrf	21	;volatile
  9172                           
  9173                           ;MCU_B1.c: 131: TMR0 = (256-190);
  9174  1ED3  3042               	movlw	66
  9175  1ED4  0020               	movlb	0	; select bank0
  9176  1ED5  0095               	movwf	21	;volatile
  9177                           
  9178                           ;MCU_B1.c: 132: TMR0IE = 1;
  9179  1ED6  168B               	bsf	11,5	;volatile
  9180                           
  9181                           ;MCU_B1.c: 133: GIE = 1;
  9182  1ED7  178B               	bsf	11,7	;volatile
  9183  1ED8  0008               	return
  9184  1ED9                     __end_of_TMR0_Set:	
  9185                           
  9186                           	psect	text46
  9187  109E                     __ptext46:	
  9188 ;; *************** function _IO_Set *****************
  9189 ;; Defined at:
  9190 ;;		line 62 in file "../src/MCU_B1.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;		None               void
  9197 ;; Registers used:
  9198 ;;		wreg, status,2
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    5
  9211 ;; This function calls:
  9212 ;;		Nothing
  9213 ;; This function is called by:
  9214 ;;		_Mcu_Initialization
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           
  9219                           ;psect for function _IO_Set
  9220  109E                     _IO_Set:	
  9221                           
  9222                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9223                           
  9224                           ;incstack = 0
  9225                           ; Regs used in _IO_Set: [wreg+status,2]
  9226  109E  3077               	movlw	119
  9227  109F  0021               	movlb	1	; select bank1
  9228  10A0  008C               	movwf	12	;volatile
  9229                           
  9230                           ;MCU_B1.c: 91: TRISB = 0b00000101;;
  9231  10A1  3005               	movlw	5
  9232  10A2  008D               	movwf	13	;volatile
  9233                           
  9234                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9235  10A3  300C               	movlw	12
  9236  10A4  008E               	movwf	14	;volatile
  9237                           
  9238                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9239  10A5  0022               	movlb	2	; select bank2
  9240  10A6  018C               	clrf	12	;volatile
  9241                           
  9242                           ;MCU_B1.c: 94: LATB = 0b00000000;;
  9243  10A7  018D               	clrf	13	;volatile
  9244                           
  9245                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9246  10A8  018E               	clrf	14	;volatile
  9247                           
  9248                           ;MCU_B1.c: 96: ANSELA = 0b00000010;;
  9249  10A9  3002               	movlw	2
  9250  10AA  0023               	movlb	3	; select bank3
  9251  10AB  008C               	movwf	12	;volatile
  9252                           
  9253                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9254  10AC  018D               	clrf	13	;volatile
  9255                           
  9256                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9257  10AD  018E               	clrf	14	;volatile
  9258                           
  9259                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9260  10AE  3077               	movlw	119
  9261  10AF  0020               	movlb	0	; select bank0
  9262  10B0  008C               	movwf	12	;volatile
  9263                           
  9264                           ;MCU_B1.c: 100: PORTB = 0b00000101;;
  9265  10B1  3005               	movlw	5
  9266  10B2  008D               	movwf	13	;volatile
  9267                           
  9268                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9269  10B3  300C               	movlw	12
  9270  10B4  008E               	movwf	14	;volatile
  9271  10B5  0008               	return
  9272  10B6                     __end_of_IO_Set:	
  9273                           
  9274                           	psect	text47
  9275  1EBF                     __ptext47:	
  9276 ;; *************** function _IOC_Set *****************
  9277 ;; Defined at:
  9278 ;;		line 270 in file "../src/MCU_B1.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;		None
  9281 ;; Auto vars:     Size  Location     Type
  9282 ;;		None
  9283 ;; Return value:  Size  Location     Type
  9284 ;;		None               void
  9285 ;; Registers used:
  9286 ;;		wreg, status,2
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9296 ;;Total ram usage:        0 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    5
  9299 ;; This function calls:
  9300 ;;		Nothing
  9301 ;; This function is called by:
  9302 ;;		_Mcu_Initialization
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function _IOC_Set
  9308  1EBF                     _IOC_Set:	
  9309                           
  9310                           ;MCU_B1.c: 271: WPUB2 = 0;
  9311                           
  9312                           ;incstack = 0
  9313                           ; Regs used in _IOC_Set: [wreg+status,2]
  9314  1EBF  0024               	movlb	4	; select bank4
  9315  1EC0  110D               	bcf	13,2	;volatile
  9316                           
  9317                           ;MCU_B1.c: 273: IOCBP = 0b00000100;
  9318  1EC1  3004               	movlw	4
  9319  1EC2  0027               	movlb	7	; select bank7
  9320  1EC3  0094               	movwf	20	;volatile
  9321                           
  9322                           ;MCU_B1.c: 274: IOCBN = 0b00000100;
  9323  1EC4  3004               	movlw	4
  9324  1EC5  0095               	movwf	21	;volatile
  9325                           
  9326                           ;MCU_B1.c: 289: IOCBF = 0b00000000;
  9327  1EC6  0196               	clrf	22	;volatile
  9328                           
  9329                           ;MCU_B1.c: 291: IOCIE = 1;
  9330  1EC7  158B               	bsf	11,3	;volatile
  9331                           
  9332                           ;MCU_B1.c: 292: IOCIF = 0;
  9333  1EC8  100B               	bcf	11,0	;volatile
  9334                           
  9335                           ;MCU_B1.c: 293: PEIE = 1;
  9336  1EC9  170B               	bsf	11,6	;volatile
  9337                           
  9338                           ;MCU_B1.c: 294: GIE = 1;
  9339  1ECA  178B               	bsf	11,7	;volatile
  9340  1ECB  0008               	return
  9341  1ECC                     __end_of_IOC_Set:	
  9342                           
  9343                           	psect	text48
  9344  1E32                     __ptext48:	
  9345 ;; *************** function _INT_Set *****************
  9346 ;; Defined at:
  9347 ;;		line 242 in file "../src/MCU_B1.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;		None
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;		None
  9352 ;; Return value:  Size  Location     Type
  9353 ;;		None               void
  9354 ;; Registers used:
  9355 ;;		None
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;Total ram usage:        0 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    5
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_Mcu_Initialization
  9372 ;; This function uses a non-reentrant model
  9373 ;;
  9374                           
  9375                           
  9376                           ;psect for function _INT_Set
  9377  1E32                     _INT_Set:	
  9378                           
  9379                           ;MCU_B1.c: 243: WPUB0 = 0;
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _INT_Set: []
  9383  1E32  0024               	movlb	4	; select bank4
  9384  1E33  100D               	bcf	13,0	;volatile
  9385                           
  9386                           ;MCU_B1.c: 244: INTE = 0;
  9387  1E34  120B               	bcf	11,4	;volatile
  9388                           
  9389                           ;MCU_B1.c: 245: PEIE = 1;
  9390  1E35  170B               	bsf	11,6	;volatile
  9391                           
  9392                           ;MCU_B1.c: 246: GIE = 1;
  9393  1E36  178B               	bsf	11,7	;volatile
  9394  1E37  0008               	return
  9395  1E38                     __end_of_INT_Set:	
  9396                           
  9397                           	psect	text49
  9398  1E21                     __ptext49:	
  9399 ;; *************** function _Fosc_Set *****************
  9400 ;; Defined at:
  9401 ;;		line 58 in file "../src/MCU_B1.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;		None
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/0
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;Total ram usage:        0 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    5
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_Mcu_Initialization
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _Fosc_Set
  9431  1E21                     _Fosc_Set:	
  9432                           
  9433                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _Fosc_Set: [wreg]
  9437  1E21  3078               	movlw	120
  9438  1E22  0021               	movlb	1	; select bank1
  9439  1E23  0099               	movwf	25	;volatile
  9440  1E24  0008               	return
  9441  1E25                     __end_of_Fosc_Set:	
  9442                           
  9443                           	psect	text50
  9444  1E4B                     __ptext50:	
  9445 ;; *************** function _ADC_Set *****************
  9446 ;; Defined at:
  9447 ;;		line 316 in file "../src/MCU_B1.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;		None               void
  9454 ;; Registers used:
  9455 ;;		wreg
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    5
  9468 ;; This function calls:
  9469 ;;		Nothing
  9470 ;; This function is called by:
  9471 ;;		_Mcu_Initialization
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           
  9476                           ;psect for function _ADC_Set
  9477  1E4B                     _ADC_Set:	
  9478                           
  9479                           ;MCU_B1.c: 317: ADCON1 = 0xf2;
  9480                           
  9481                           ;incstack = 0
  9482                           ; Regs used in _ADC_Set: [wreg]
  9483  1E4B  30F2               	movlw	242
  9484  1E4C  0021               	movlb	1	; select bank1
  9485  1E4D  009E               	movwf	30	;volatile
  9486                           
  9487                           ;MCU_B1.c: 318: FVRCON = 0xc0;
  9488  1E4E  30C0               	movlw	192
  9489  1E4F  0022               	movlb	2	; select bank2
  9490  1E50  0097               	movwf	23	;volatile
  9491  1E51  0008               	return
  9492  1E52                     __end_of_ADC_Set:	
  9493                           
  9494                           	psect	text51
  9495  1F34                     __ptext51:	
  9496 ;; *************** function _LED_Main *****************
  9497 ;; Defined at:
  9498 ;;		line 51 in file "../src/LED_B1.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;		None
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;Total ram usage:        0 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    7
  9519 ;; This function calls:
  9520 ;;		_setLED_Main
  9521 ;; This function is called by:
  9522 ;;		_main
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           
  9527                           ;psect for function _LED_Main
  9528  1F34                     _LED_Main:	
  9529                           
  9530                           ;LED_B1.c: 54: setLED_Main(1);
  9531                           
  9532                           ;incstack = 0
  9533                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9534  1F34  3001               	movlw	1
  9535  1F35  3196  262F  319F   	fcall	_setLED_Main
  9536                           
  9537                           ;LED_B1.c: 57: setLED_Main(2);
  9538  1F38  3002               	movlw	2
  9539  1F39  3196  262F  319F   	fcall	_setLED_Main
  9540                           
  9541                           ;LED_B1.c: 60: setLED_Main(3);
  9542  1F3C  3003               	movlw	3
  9543  1F3D  3196  262F  319F   	fcall	_setLED_Main
  9544                           
  9545                           ;LED_B1.c: 63: setLED_Main(99);
  9546  1F40  3063               	movlw	99
  9547  1F41  3196  262F         	fcall	_setLED_Main
  9548  1F43  0008               	return
  9549  1F44                     __end_of_LED_Main:	
  9550                           
  9551                           	psect	text52
  9552  162F                     __ptext52:	
  9553 ;; *************** function _setLED_Main *****************
  9554 ;; Defined at:
  9555 ;;		line 215 in file "../src/LED_B1.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  led             1    wreg     unsigned char 
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;  led             1    4[BANK0 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;		None               void
  9562 ;; Registers used:
  9563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9564 ;; Tracked objects:
  9565 ;;		On entry : 0/0
  9566 ;;		On exit  : 0/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;Total ram usage:        3 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    6
  9576 ;; This function calls:
  9577 ;;		_LedPointSelect
  9578 ;; This function is called by:
  9579 ;;		_LED_Main
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function _setLED_Main
  9585  162F                     _setLED_Main:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9589                           ;setLED_Main@led stored from wreg
  9590  162F  0020               	movlb	0	; select bank0
  9591  1630  00A4               	movwf	setLED_Main@led
  9592                           
  9593                           ;LED_B1.c: 217: LedPointSelect(led);
  9594  1631  0824               	movf	setLED_Main@led,w
  9595  1632  3193  23E7  3196   	fcall	_LedPointSelect
  9596                           
  9597                           ;LED_B1.c: 218: if(LED->GO)
  9598  1635  0021               	movlb	1	; select bank1
  9599  1636  083E               	movf	_LED^(0+128),w
  9600  1637  0086               	movwf	6
  9601  1638  0187               	clrf	7
  9602  1639  1C81               	btfss	1,1
  9603  163A  0008               	return
  9604                           
  9605                           ;LED_B1.c: 219: {
  9606                           ;LED_B1.c: 220: LED->Time++;
  9607  163B  0A3E               	incf	_LED^(0+128),w
  9608  163C  0086               	movwf	6
  9609  163D  0187               	clrf	7
  9610  163E  3001               	movlw	1
  9611  163F  0781               	addwf	1,f
  9612  1640  3141               	addfsr 1,1
  9613  1641  1803               	skipnc
  9614  1642  0A81               	incf	1,f
  9615                           
  9616                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
  9617  1643  0A3E               	incf	_LED^(0+128),w
  9618  1644  0086               	movwf	6
  9619  1645  0187               	clrf	7
  9620  1646  3F40               	moviw [0]fsr1
  9621  1647  0020               	movlb	0	; select bank0
  9622  1648  00A2               	movwf	??_setLED_Main
  9623  1649  3F41               	moviw [1]fsr1
  9624  164A  00A3               	movwf	??_setLED_Main+1
  9625  164B  3000               	movlw	0
  9626  164C  0223               	subwf	??_setLED_Main+1,w
  9627  164D  3032               	movlw	50
  9628  164E  1903               	skipnz
  9629  164F  0222               	subwf	??_setLED_Main,w
  9630  1650  1C03               	skipc
  9631  1651  0008               	return
  9632                           
  9633                           ;LED_B1.c: 222: {
  9634                           ;LED_B1.c: 223: LED->Time=0;
  9635  1652  0021               	movlb	1	; select bank1
  9636  1653  0A3E               	incf	_LED^(0+128),w
  9637  1654  0086               	movwf	6
  9638  1655  0187               	clrf	7
  9639  1656  3000               	movlw	0
  9640  1657  3FC0               	movwi [0]fsr1
  9641  1658  3FC1               	movwi [1]fsr1
  9642                           
  9643                           ;LED_B1.c: 225: if(led == 1)
  9644  1659  0020               	movlb	0	; select bank0
  9645  165A  0824               	movf	setLED_Main@led,w
  9646  165B  3A01               	xorlw	1
  9647  165C  1D03               	skipz
  9648  165D  2E61               	goto	l6695
  9649                           
  9650                           ;LED_B1.c: 226: {
  9651                           ;LED_B1.c: 227: RC7=~RC7;
  9652  165E  3080               	movlw	128
  9653  165F  068E               	xorwf	14,f
  9654                           
  9655                           ;LED_B1.c: 228: }
  9656  1660  0008               	return
  9657  1661                     l6695:	
  9658                           
  9659                           ;LED_B1.c: 231: else if(led == 2)
  9660  1661  0824               	movf	setLED_Main@led,w
  9661  1662  3A02               	xorlw	2
  9662  1663  1D03               	skipz
  9663  1664  2E68               	goto	l6699
  9664                           
  9665                           ;LED_B1.c: 232: {
  9666                           ;LED_B1.c: 233: RA3=~RA3;
  9667  1665  3008               	movlw	8
  9668  1666  068C               	xorwf	12,f
  9669                           
  9670                           ;LED_B1.c: 234: }
  9671  1667  0008               	return
  9672  1668                     l6699:	
  9673                           
  9674                           ;LED_B1.c: 237: else if(led == 3)
  9675  1668  0824               	movf	setLED_Main@led,w
  9676  1669  3A03               	xorlw	3
  9677  166A  1D03               	skipz
  9678  166B  2E6F               	goto	l6703
  9679                           
  9680                           ;LED_B1.c: 238: {
  9681                           ;LED_B1.c: 239: RC6=~RC6;
  9682  166C  3040               	movlw	64
  9683  166D  068E               	xorwf	14,f
  9684                           
  9685                           ;LED_B1.c: 240: }
  9686  166E  0008               	return
  9687  166F                     l6703:	
  9688                           
  9689                           ;LED_B1.c: 243: else if(led == 99)
  9690  166F  0824               	movf	setLED_Main@led,w
  9691  1670  3A63               	xorlw	99
  9692  1671  1D03               	skipz
  9693  1672  0008               	return
  9694                           
  9695                           ;LED_B1.c: 244: {
  9696                           ;LED_B1.c: 245: RB5=~RB5;
  9697  1673  3020               	movlw	32
  9698  1674  068D               	xorwf	13,f
  9699  1675  0008               	return
  9700  1676                     __end_of_setLED_Main:	
  9701                           
  9702                           	psect	text53
  9703  1F24                     __ptext53:	
  9704 ;; *************** function _LED_Initialization *****************
  9705 ;; Defined at:
  9706 ;;		line 35 in file "../src/LED_B1.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;		None
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;		None
  9711 ;; Return value:  Size  Location     Type
  9712 ;;		None               void
  9713 ;; Registers used:
  9714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;Total ram usage:        0 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    8
  9727 ;; This function calls:
  9728 ;;		_setLED_Initialization
  9729 ;; This function is called by:
  9730 ;;		_main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _LED_Initialization
  9736  1F24                     _LED_Initialization:	
  9737                           
  9738                           ;LED_B1.c: 38: setLED_Initialization(1);
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9742  1F24  3001               	movlw	1
  9743  1F25  319F  27B7  319F   	fcall	_setLED_Initialization
  9744                           
  9745                           ;LED_B1.c: 41: setLED_Initialization(2);
  9746  1F28  3002               	movlw	2
  9747  1F29  319F  27B7  319F   	fcall	_setLED_Initialization
  9748                           
  9749                           ;LED_B1.c: 44: setLED_Initialization(3);
  9750  1F2C  3003               	movlw	3
  9751  1F2D  319F  27B7  319F   	fcall	_setLED_Initialization
  9752                           
  9753                           ;LED_B1.c: 47: setLED_Initialization(99);
  9754  1F30  3063               	movlw	99
  9755  1F31  319F  27B7         	fcall	_setLED_Initialization
  9756  1F33  0008               	return
  9757  1F34                     __end_of_LED_Initialization:	
  9758                           
  9759                           	psect	text54
  9760  1FB7                     __ptext54:	
  9761 ;; *************** function _setLED_Initialization *****************
  9762 ;; Defined at:
  9763 ;;		line 67 in file "../src/LED_B1.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;  led             1    wreg     unsigned char 
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;  led             1    4[BANK0 ] unsigned char 
  9768 ;; Return value:  Size  Location     Type
  9769 ;;		None               void
  9770 ;; Registers used:
  9771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;Total ram usage:        1 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    7
  9784 ;; This function calls:
  9785 ;;		_LedPointSelect
  9786 ;;		_setLED
  9787 ;; This function is called by:
  9788 ;;		_LED_Initialization
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           
  9793                           ;psect for function _setLED_Initialization
  9794  1FB7                     _setLED_Initialization:	
  9795                           
  9796                           ;incstack = 0
  9797                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9798                           ;setLED_Initialization@led stored from wreg
  9799  1FB7  0020               	movlb	0	; select bank0
  9800  1FB8  00A4               	movwf	setLED_Initialization@led
  9801                           
  9802                           ;LED_B1.c: 69: LedPointSelect(led);
  9803  1FB9  0824               	movf	setLED_Initialization@led,w
  9804  1FBA  3193  23E7  319F   	fcall	_LedPointSelect
  9805                           
  9806                           ;LED_B1.c: 70: LED->Enable=1;
  9807  1FBD  0021               	movlb	1	; select bank1
  9808  1FBE  083E               	movf	_LED^(0+128),w
  9809  1FBF  0086               	movwf	6
  9810  1FC0  0187               	clrf	7
  9811  1FC1  1401               	bsf	1,0
  9812                           
  9813                           ;LED_B1.c: 71: setLED(led,0);
  9814  1FC2  0020               	movlb	0	; select bank0
  9815  1FC3  01A2               	clrf	setLED@command
  9816  1FC4  0824               	movf	setLED_Initialization@led,w
  9817  1FC5  318A  2275         	fcall	_setLED
  9818  1FC7  0008               	return
  9819  1FC8                     __end_of_setLED_Initialization:	
  9820                           
  9821                           	psect	text55
  9822  15A4                     __ptext55:	
  9823 ;; *************** function _Flash_Memory_Main *****************
  9824 ;; Defined at:
  9825 ;;		line 787 in file "../src/MCU_B1.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;		None
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;		None
  9830 ;; Return value:  Size  Location     Type
  9831 ;;		None               void
  9832 ;; Registers used:
  9833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9834 ;; Tracked objects:
  9835 ;;		On entry : 0/0
  9836 ;;		On exit  : 0/0
  9837 ;;		Unchanged: 0/0
  9838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9843 ;;Total ram usage:        0 bytes
  9844 ;; Hardware stack levels used:    1
  9845 ;; Hardware stack levels required when called:    8
  9846 ;; This function calls:
  9847 ;;		_Flash_Memory_Modify
  9848 ;; This function is called by:
  9849 ;;		_main
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           
  9854                           ;psect for function _Flash_Memory_Main
  9855  15A4                     _Flash_Memory_Main:	
  9856                           
  9857                           ;MCU_B1.c: 788: if (Memory->GO == 1) {
  9858                           
  9859                           ;incstack = 0
  9860                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9861  15A4  0021               	movlb	1	; select bank1
  9862  15A5  086F               	movf	_Memory^(0+128),w
  9863  15A6  3E24               	addlw	36
  9864  15A7  0086               	movwf	6
  9865  15A8  3002               	movlw	2	; select bank4/5
  9866  15A9  0087               	movwf	7
  9867  15AA  1C81               	btfss	1,1
  9868  15AB  0008               	return
  9869                           
  9870                           ;MCU_B1.c: 789: if (Memory->Modify == 1) {
  9871  15AC  086F               	movf	_Memory^(0+128),w
  9872  15AD  3E24               	addlw	36
  9873  15AE  0086               	movwf	6
  9874  15AF  3002               	movlw	2	; select bank4/5
  9875  15B0  0087               	movwf	7
  9876  15B1  1C01               	btfss	1,0
  9877  15B2  2DE1               	goto	l7175
  9878                           
  9879                           ;MCU_B1.c: 790: Memory->Time++;
  9880  15B3  086F               	movf	_Memory^(0+128),w
  9881  15B4  3E22               	addlw	34
  9882  15B5  0086               	movwf	6
  9883  15B6  3002               	movlw	2	; select bank4/5
  9884  15B7  0087               	movwf	7
  9885  15B8  3001               	movlw	1
  9886  15B9  0781               	addwf	1,f
  9887  15BA  3141               	addfsr 1,1
  9888  15BB  1803               	skipnc
  9889  15BC  0A81               	incf	1,f
  9890                           
  9891                           ;MCU_B1.c: 791: if (Memory->Time == 25)
  9892  15BD  086F               	movf	_Memory^(0+128),w
  9893  15BE  3E22               	addlw	34
  9894  15BF  0086               	movwf	6
  9895  15C0  3002               	movlw	2	; select bank4/5
  9896  15C1  0087               	movwf	7
  9897  15C2  3F40               	moviw [0]fsr1
  9898  15C3  3A19               	xorlw	25
  9899  15C4  1D03               	skipz
  9900  15C5  2DC8               	goto	u6795
  9901  15C6  3F41               	moviw [1]fsr1
  9902  15C7  3A00               	xorlw	0
  9903  15C8                     u6795:	
  9904  15C8  1D03               	skipz
  9905  15C9  0008               	return
  9906                           
  9907                           ;MCU_B1.c: 792: {
  9908                           ;MCU_B1.c: 793: Memory->Time = 0;
  9909  15CA  086F               	movf	_Memory^(0+128),w
  9910  15CB  3E22               	addlw	34
  9911  15CC  0086               	movwf	6
  9912  15CD  3002               	movlw	2	; select bank4/5
  9913  15CE  0087               	movwf	7
  9914  15CF  3000               	movlw	0
  9915  15D0  3FC0               	movwi [0]fsr1
  9916  15D1  3FC1               	movwi [1]fsr1
  9917                           
  9918                           ;MCU_B1.c: 794: Memory->Modify = 0;
  9919  15D2  086F               	movf	_Memory^(0+128),w
  9920  15D3  3E24               	addlw	36
  9921  15D4  0086               	movwf	6
  9922  15D5  3002               	movlw	2	; select bank4/5
  9923  15D6  0087               	movwf	7
  9924  15D7  1001               	bcf	1,0
  9925                           
  9926                           ;MCU_B1.c: 795: Memory->GO = 0;
  9927  15D8  086F               	movf	_Memory^(0+128),w
  9928  15D9  3E24               	addlw	36
  9929  15DA  0086               	movwf	6
  9930  15DB  3002               	movlw	2	; select bank4/5
  9931  15DC  0087               	movwf	7
  9932  15DD  1081               	bcf	1,1
  9933                           
  9934                           ;MCU_B1.c: 796: Flash_Memory_Modify();
  9935  15DE  318A  2207         	fcall	_Flash_Memory_Modify
  9936                           
  9937                           ;MCU_B1.c: 797: }
  9938                           ;MCU_B1.c: 798: } else {
  9939  15E0  0008               	return
  9940  15E1                     l7175:	
  9941                           
  9942                           ;MCU_B1.c: 799: Memory->GO = 0;
  9943  15E1  0021               	movlb	1	; select bank1
  9944  15E2  086F               	movf	_Memory^(0+128),w
  9945  15E3  3E24               	addlw	36
  9946  15E4  0086               	movwf	6
  9947  15E5  3002               	movlw	2	; select bank4/5
  9948  15E6  0087               	movwf	7
  9949  15E7  1081               	bcf	1,1
  9950  15E8  0008               	return
  9951  15E9                     __end_of_Flash_Memory_Main:	
  9952                           
  9953                           	psect	text56
  9954  0A07                     __ptext56:	
  9955 ;; *************** function _Flash_Memory_Modify *****************
  9956 ;; Defined at:
  9957 ;;		line 856 in file "../src/MCU_B1.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  i               1    6[BANK0 ] unsigned char 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;		None               void
  9964 ;; Registers used:
  9965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;Total ram usage:        3 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    7
  9978 ;; This function calls:
  9979 ;;		_Flash_Memory_Erasing
  9980 ;;		_Flash_Memory_Read
  9981 ;;		_Flash_Memory_Write
  9982 ;; This function is called by:
  9983 ;;		_Flash_Memory_Main
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           
  9988                           ;psect for function _Flash_Memory_Modify
  9989  0A07                     _Flash_Memory_Modify:	
  9990                           
  9991                           ;MCU_B1.c: 857: char i = 0;
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9995  0A07  0020               	movlb	0	; select bank0
  9996  0A08  01A6               	clrf	Flash_Memory_Modify@i
  9997                           
  9998                           ;MCU_B1.c: 858: for (i = 0; i < 32; i++) {
  9999  0A09  01A6               	clrf	Flash_Memory_Modify@i
 10000  0A0A  3020               	movlw	32
 10001  0A0B  0226               	subwf	Flash_Memory_Modify@i,w
 10002  0A0C  1803               	btfsc	3,0
 10003  0A0D  2A27               	goto	l6783
 10004  0A0E                     l6777:	
 10005                           
 10006                           ;MCU_B1.c: 859: Memory->Data[i] = Flash_Memory_Read(i);
 10007  0A0E  0826               	movf	Flash_Memory_Modify@i,w
 10008  0A0F  3191  211A  318A   	fcall	_Flash_Memory_Read
 10009  0A12  0020               	movlb	0	; select bank0
 10010  0A13  00A4               	movwf	??_Flash_Memory_Modify
 10011  0A14  0826               	movf	Flash_Memory_Modify@i,w
 10012  0A15  0021               	movlb	1	; select bank1
 10013  0A16  076F               	addwf	_Memory^(0+128),w
 10014  0A17  0020               	movlb	0	; select bank0
 10015  0A18  00A5               	movwf	??_Flash_Memory_Modify+1
 10016  0A19  0825               	movf	??_Flash_Memory_Modify+1,w
 10017  0A1A  0086               	movwf	6
 10018  0A1B  3002               	movlw	2	; select bank4/5
 10019  0A1C  0087               	movwf	7
 10020  0A1D  0824               	movf	??_Flash_Memory_Modify,w
 10021  0A1E  0081               	movwf	1
 10022  0A1F  3001               	movlw	1
 10023  0A20  00A4               	movwf	??_Flash_Memory_Modify
 10024  0A21  0824               	movf	??_Flash_Memory_Modify,w
 10025  0A22  07A6               	addwf	Flash_Memory_Modify@i,f
 10026  0A23  3020               	movlw	32
 10027  0A24  0226               	subwf	Flash_Memory_Modify@i,w
 10028  0A25  1C03               	skipc
 10029  0A26  2A0E               	goto	l6777
 10030  0A27                     l6783:	
 10031                           
 10032                           ;MCU_B1.c: 860: }
 10033                           ;MCU_B1.c: 861: Memory->Data[0]=product->Data[12];
 10034  0A27  087D               	movf	_product,w
 10035  0A28  3E0C               	addlw	12
 10036  0A29  0086               	movwf	6
 10037  0A2A  3001               	movlw	1	; select bank2/3
 10038  0A2B  0087               	movwf	7
 10039  0A2C  0801               	movf	1,w
 10040  0A2D  00A4               	movwf	??_Flash_Memory_Modify
 10041  0A2E  0021               	movlb	1	; select bank1
 10042  0A2F  086F               	movf	_Memory^(0+128),w
 10043  0A30  0086               	movwf	6
 10044  0A31  3002               	movlw	2	; select bank4/5
 10045  0A32  0087               	movwf	7
 10046  0A33  0020               	movlb	0	; select bank0
 10047  0A34  0824               	movf	??_Flash_Memory_Modify,w
 10048  0A35  0081               	movwf	1
 10049                           
 10050                           ;MCU_B1.c: 862: Memory->Data[1]=product->Data[13];
 10051  0A36  087D               	movf	_product,w
 10052  0A37  3E0D               	addlw	13
 10053  0A38  0086               	movwf	6
 10054  0A39  3001               	movlw	1	; select bank2/3
 10055  0A3A  0087               	movwf	7
 10056  0A3B  0801               	movf	1,w
 10057  0A3C  00A4               	movwf	??_Flash_Memory_Modify
 10058  0A3D  0021               	movlb	1	; select bank1
 10059  0A3E  0A6F               	incf	_Memory^(0+128),w
 10060  0A3F  0086               	movwf	6
 10061  0A40  3002               	movlw	2	; select bank4/5
 10062  0A41  0087               	movwf	7
 10063  0A42  0020               	movlb	0	; select bank0
 10064  0A43  0824               	movf	??_Flash_Memory_Modify,w
 10065  0A44  0081               	movwf	1
 10066                           
 10067                           ;MCU_B1.c: 863: Memory->Data[2]=product->Data[14];
 10068  0A45  087D               	movf	_product,w
 10069  0A46  3E0E               	addlw	14
 10070  0A47  0086               	movwf	6
 10071  0A48  3001               	movlw	1	; select bank2/3
 10072  0A49  0087               	movwf	7
 10073  0A4A  0801               	movf	1,w
 10074  0A4B  00A4               	movwf	??_Flash_Memory_Modify
 10075  0A4C  0021               	movlb	1	; select bank1
 10076  0A4D  086F               	movf	_Memory^(0+128),w
 10077  0A4E  3E02               	addlw	2
 10078  0A4F  0086               	movwf	6
 10079  0A50  3002               	movlw	2	; select bank4/5
 10080  0A51  0087               	movwf	7
 10081  0A52  0020               	movlb	0	; select bank0
 10082  0A53  0824               	movf	??_Flash_Memory_Modify,w
 10083  0A54  0081               	movwf	1
 10084                           
 10085                           ;MCU_B1.c: 869: if (Memory->LoopSave == 1) {
 10086  0A55  0021               	movlb	1	; select bank1
 10087  0A56  086F               	movf	_Memory^(0+128),w
 10088  0A57  3E24               	addlw	36
 10089  0A58  0086               	movwf	6
 10090  0A59  3002               	movlw	2	; select bank4/5
 10091  0A5A  0087               	movwf	7
 10092  0A5B  1D01               	btfss	1,2
 10093  0A5C  2A6D               	goto	l6787
 10094                           
 10095                           ;MCU_B1.c: 870: Memory->LoopSave = 0;
 10096  0A5D  086F               	movf	_Memory^(0+128),w
 10097  0A5E  3E24               	addlw	36
 10098  0A5F  0086               	movwf	6
 10099  0A60  3002               	movlw	2	; select bank4/5
 10100  0A61  0087               	movwf	7
 10101  0A62  1101               	bcf	1,2
 10102                           
 10103                           ;MCU_B1.c: 871: myMain->FirstOpen = 0;
 10104  0A63  086E               	movf	_myMain^(0+128),w
 10105  0A64  0086               	movwf	6
 10106  0A65  3001               	movlw	1	; select bank2/3
 10107  0A66  0087               	movwf	7
 10108  0A67  1281               	bcf	1,5
 10109                           
 10110                           ;MCU_B1.c: 872: myMain->First = 0;
 10111  0A68  086E               	movf	_myMain^(0+128),w
 10112  0A69  0086               	movwf	6
 10113  0A6A  3001               	movlw	1	; select bank2/3
 10114  0A6B  0087               	movwf	7
 10115  0A6C  1381               	bcf	1,7
 10116  0A6D                     l6787:	
 10117                           
 10118                           ;MCU_B1.c: 874: }
 10119                           ;MCU_B1.c: 875: GIE = 0;
 10120  0A6D  138B               	bcf	11,7	;volatile
 10121                           
 10122                           ;MCU_B1.c: 876: Flash_Memory_Erasing();
 10123  0A6E  319E  269A  318A   	fcall	_Flash_Memory_Erasing
 10124                           
 10125                           ;MCU_B1.c: 877: Flash_Memory_Write();
 10126  0A71  3194  2444         	fcall	_Flash_Memory_Write
 10127                           
 10128                           ;MCU_B1.c: 878: GIE = 1;
 10129  0A73  178B               	bsf	11,7	;volatile
 10130  0A74  0008               	return
 10131  0A75                     __end_of_Flash_Memory_Modify:	
 10132                           
 10133                           	psect	text57
 10134  1E9A                     __ptext57:	
 10135 ;; *************** function _Flash_Memory_Erasing *****************
 10136 ;; Defined at:
 10137 ;;		line 845 in file "../src/MCU_B1.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;		None
 10140 ;; Auto vars:     Size  Location     Type
 10141 ;;		None
 10142 ;; Return value:  Size  Location     Type
 10143 ;;		None               void
 10144 ;; Registers used:
 10145 ;;		wreg, status,2, status,0, pclath, cstack
 10146 ;; Tracked objects:
 10147 ;;		On entry : 0/0
 10148 ;;		On exit  : 0/0
 10149 ;;		Unchanged: 0/0
 10150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10155 ;;Total ram usage:        0 bytes
 10156 ;; Hardware stack levels used:    1
 10157 ;; Hardware stack levels required when called:    6
 10158 ;; This function calls:
 10159 ;;		_Flash_Memory_Unlock
 10160 ;; This function is called by:
 10161 ;;		_Flash_Memory_Modify
 10162 ;; This function uses a non-reentrant model
 10163 ;;
 10164                           
 10165                           
 10166                           ;psect for function _Flash_Memory_Erasing
 10167  1E9A                     _Flash_Memory_Erasing:	
 10168                           
 10169                           ;MCU_B1.c: 846: CFGS = 0;
 10170                           
 10171                           ;incstack = 0
 10172                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10173  1E9A  0023               	movlb	3	; select bank3
 10174  1E9B  1315               	bcf	21,6	;volatile
 10175                           
 10176                           ;MCU_B1.c: 847: PMADRH = 0x30;
 10177  1E9C  3030               	movlw	48
 10178  1E9D  0092               	movwf	18	;volatile
 10179                           
 10180                           ;MCU_B1.c: 848: PMADRL = 0x00;
 10181  1E9E  0191               	clrf	17	;volatile
 10182                           
 10183                           ;MCU_B1.c: 849: FREE = 1;
 10184  1E9F  1615               	bsf	21,4	;volatile
 10185                           
 10186                           ;MCU_B1.c: 850: WREN = 1;
 10187  1EA0  1515               	bsf	21,2	;volatile
 10188                           
 10189                           ;MCU_B1.c: 851: Flash_Memory_Unlock();
 10190  1EA1  319E  2661         	fcall	_Flash_Memory_Unlock
 10191                           
 10192                           ;MCU_B1.c: 852: WREN = 0;
 10193  1EA3  0023               	movlb	3	; select bank3
 10194  1EA4  1115               	bcf	21,2	;volatile
 10195  1EA5  0008               	return
 10196  1EA6                     __end_of_Flash_Memory_Erasing:	
 10197                           
 10198                           	psect	text58
 10199  0381                     __ptext58:	
 10200 ;; *************** function _Flash_Memory_Initialization *****************
 10201 ;; Defined at:
 10202 ;;		line 746 in file "../src/MCU_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;  i               1   62[BANK0 ] unsigned char 
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        2 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    8
 10223 ;; This function calls:
 10224 ;;		_Flash_Memory_Read
 10225 ;;		_Flash_Memory_Write
 10226 ;;		_setPercentValue
 10227 ;; This function is called by:
 10228 ;;		_main
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           
 10233                           ;psect for function _Flash_Memory_Initialization
 10234  0381                     _Flash_Memory_Initialization:	
 10235                           
 10236                           ;MCU_B1.c: 747: char i = 0;
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10240  0381  0020               	movlb	0	; select bank0
 10241  0382  01DE               	clrf	Flash_Memory_Initialization@i
 10242                           
 10243                           ;MCU_B1.c: 748: if (Flash_Memory_Read(31) == 0xaa) {
 10244  0383  301F               	movlw	31
 10245  0384  3191  211A  3183   	fcall	_Flash_Memory_Read
 10246  0387  3AAA               	xorlw	170
 10247  0388  1D03               	skipz
 10248  0389  2BFB               	goto	l7131
 10249                           
 10250                           ;MCU_B1.c: 749: product->Data[12] = Flash_Memory_Read(0);
 10251  038A  3000               	movlw	0
 10252  038B  3191  211A  3183   	fcall	_Flash_Memory_Read
 10253  038E  0020               	movlb	0	; select bank0
 10254  038F  00DD               	movwf	??_Flash_Memory_Initialization
 10255  0390  087D               	movf	_product,w
 10256  0391  3E0C               	addlw	12
 10257  0392  0086               	movwf	6
 10258  0393  3001               	movlw	1	; select bank2/3
 10259  0394  0087               	movwf	7
 10260  0395  085D               	movf	??_Flash_Memory_Initialization,w
 10261  0396  0081               	movwf	1
 10262                           
 10263                           ;MCU_B1.c: 750: product->Data[13] = Flash_Memory_Read(1);
 10264  0397  3001               	movlw	1
 10265  0398  3191  211A  3183   	fcall	_Flash_Memory_Read
 10266  039B  0020               	movlb	0	; select bank0
 10267  039C  00DD               	movwf	??_Flash_Memory_Initialization
 10268  039D  087D               	movf	_product,w
 10269  039E  3E0D               	addlw	13
 10270  039F  0086               	movwf	6
 10271  03A0  3001               	movlw	1	; select bank2/3
 10272  03A1  0087               	movwf	7
 10273  03A2  085D               	movf	??_Flash_Memory_Initialization,w
 10274  03A3  0081               	movwf	1
 10275                           
 10276                           ;MCU_B1.c: 751: product->Data[14] = Flash_Memory_Read(2);
 10277  03A4  3002               	movlw	2
 10278  03A5  3191  211A  3183   	fcall	_Flash_Memory_Read
 10279  03A8  0020               	movlb	0	; select bank0
 10280  03A9  00DD               	movwf	??_Flash_Memory_Initialization
 10281  03AA  087D               	movf	_product,w
 10282  03AB  3E0E               	addlw	14
 10283  03AC  0086               	movwf	6
 10284  03AD  3001               	movlw	1	; select bank2/3
 10285  03AE  0087               	movwf	7
 10286  03AF  085D               	movf	??_Flash_Memory_Initialization,w
 10287  03B0  0081               	movwf	1
 10288                           
 10289                           ;MCU_B1.c: 757: i = setPercentValue(((char)((100-95)*0.8)));
 10290  03B1  3004               	movlw	4
 10291  03B2  3195  25E9  3183   	fcall	_setPercentValue
 10292  03B5  0020               	movlb	0	; select bank0
 10293  03B6  00DD               	movwf	??_Flash_Memory_Initialization
 10294  03B7  085D               	movf	??_Flash_Memory_Initialization,w
 10295  03B8  00DE               	movwf	Flash_Memory_Initialization@i
 10296                           
 10297                           ;MCU_B1.c: 758: product->Data[21] = i;
 10298  03B9  085E               	movf	Flash_Memory_Initialization@i,w
 10299  03BA  00DD               	movwf	??_Flash_Memory_Initialization
 10300  03BB  087D               	movf	_product,w
 10301  03BC  3E15               	addlw	21
 10302  03BD  0086               	movwf	6
 10303  03BE  3001               	movlw	1	; select bank2/3
 10304  03BF  0087               	movwf	7
 10305  03C0  085D               	movf	??_Flash_Memory_Initialization,w
 10306  03C1  0081               	movwf	1
 10307                           
 10308                           ;MCU_B1.c: 759: product->Data[22] = i;
 10309  03C2  085E               	movf	Flash_Memory_Initialization@i,w
 10310  03C3  00DD               	movwf	??_Flash_Memory_Initialization
 10311  03C4  087D               	movf	_product,w
 10312  03C5  3E16               	addlw	22
 10313  03C6  0086               	movwf	6
 10314  03C7  3001               	movlw	1	; select bank2/3
 10315  03C8  0087               	movwf	7
 10316  03C9  085D               	movf	??_Flash_Memory_Initialization,w
 10317  03CA  0081               	movwf	1
 10318                           
 10319                           ;MCU_B1.c: 760: product->Data[23] = i;
 10320  03CB  085E               	movf	Flash_Memory_Initialization@i,w
 10321  03CC  00DD               	movwf	??_Flash_Memory_Initialization
 10322  03CD  087D               	movf	_product,w
 10323  03CE  3E17               	addlw	23
 10324  03CF  0086               	movwf	6
 10325  03D0  3001               	movlw	1	; select bank2/3
 10326  03D1  0087               	movwf	7
 10327  03D2  085D               	movf	??_Flash_Memory_Initialization,w
 10328  03D3  0081               	movwf	1
 10329                           
 10330                           ;MCU_B1.c: 762: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10331  03D4  087D               	movf	_product,w
 10332  03D5  3E0C               	addlw	12
 10333  03D6  0086               	movwf	6
 10334  03D7  3001               	movlw	1	; select bank2/3
 10335  03D8  0087               	movwf	7
 10336  03D9  0801               	movf	1,w
 10337  03DA  3AFF               	xorlw	255
 10338  03DB  1D03               	skipz
 10339  03DC  0008               	return
 10340  03DD  087D               	movf	_product,w
 10341  03DE  3E0D               	addlw	13
 10342  03DF  0086               	movwf	6
 10343  03E0  3001               	movlw	1	; select bank2/3
 10344  03E1  0087               	movwf	7
 10345  03E2  0801               	movf	1,w
 10346  03E3  3AFF               	xorlw	255
 10347  03E4  1D03               	skipz
 10348  03E5  0008               	return
 10349  03E6  087D               	movf	_product,w
 10350  03E7  3E0E               	addlw	14
 10351  03E8  0086               	movwf	6
 10352  03E9  3001               	movlw	1	; select bank2/3
 10353  03EA  0087               	movwf	7
 10354  03EB  0801               	movf	1,w
 10355  03EC  3AFF               	xorlw	255
 10356  03ED  1D03               	skipz
 10357  03EE  0008               	return
 10358                           
 10359                           ;MCU_B1.c: 763: myMain->FirstOpen = 1;
 10360  03EF  0021               	movlb	1	; select bank1
 10361  03F0  086E               	movf	_myMain^(0+128),w
 10362  03F1  0086               	movwf	6
 10363  03F2  3001               	movlw	1	; select bank2/3
 10364  03F3  0087               	movwf	7
 10365  03F4  1681               	bsf	1,5
 10366                           
 10367                           ;MCU_B1.c: 764: myMain->First = 1;
 10368  03F5  086E               	movf	_myMain^(0+128),w
 10369  03F6  0086               	movwf	6
 10370  03F7  3001               	movlw	1	; select bank2/3
 10371  03F8  0087               	movwf	7
 10372  03F9  1781               	bsf	1,7
 10373                           
 10374                           ;MCU_B1.c: 765: }
 10375                           ;MCU_B1.c: 766: } else {
 10376  03FA  0008               	return
 10377  03FB                     l7131:	
 10378                           
 10379                           ;MCU_B1.c: 767: i = setPercentValue(((char)((100-95)*0.8)));
 10380  03FB  3004               	movlw	4
 10381  03FC  3195  25E9  3183   	fcall	_setPercentValue
 10382  03FF  0020               	movlb	0	; select bank0
 10383  0400  00DD               	movwf	??_Flash_Memory_Initialization
 10384  0401  085D               	movf	??_Flash_Memory_Initialization,w
 10385  0402  00DE               	movwf	Flash_Memory_Initialization@i
 10386                           
 10387                           ;MCU_B1.c: 768: Memory->Data[0]=0xff;
 10388  0403  30FF               	movlw	255
 10389  0404  00DD               	movwf	??_Flash_Memory_Initialization
 10390  0405  0021               	movlb	1	; select bank1
 10391  0406  086F               	movf	_Memory^(0+128),w
 10392  0407  0086               	movwf	6
 10393  0408  3002               	movlw	2	; select bank4/5
 10394  0409  0087               	movwf	7
 10395  040A  0020               	movlb	0	; select bank0
 10396  040B  085D               	movf	??_Flash_Memory_Initialization,w
 10397  040C  0081               	movwf	1
 10398                           
 10399                           ;MCU_B1.c: 769: Memory->Data[1]=0xff;
 10400  040D  30FF               	movlw	255
 10401  040E  00DD               	movwf	??_Flash_Memory_Initialization
 10402  040F  0021               	movlb	1	; select bank1
 10403  0410  0A6F               	incf	_Memory^(0+128),w
 10404  0411  0086               	movwf	6
 10405  0412  3002               	movlw	2	; select bank4/5
 10406  0413  0087               	movwf	7
 10407  0414  0020               	movlb	0	; select bank0
 10408  0415  085D               	movf	??_Flash_Memory_Initialization,w
 10409  0416  0081               	movwf	1
 10410                           
 10411                           ;MCU_B1.c: 770: Memory->Data[2]=0xff;
 10412  0417  30FF               	movlw	255
 10413  0418  00DD               	movwf	??_Flash_Memory_Initialization
 10414  0419  0021               	movlb	1	; select bank1
 10415  041A  086F               	movf	_Memory^(0+128),w
 10416  041B  3E02               	addlw	2
 10417  041C  0086               	movwf	6
 10418  041D  3002               	movlw	2	; select bank4/5
 10419  041E  0087               	movwf	7
 10420  041F  0020               	movlb	0	; select bank0
 10421  0420  085D               	movf	??_Flash_Memory_Initialization,w
 10422  0421  0081               	movwf	1
 10423                           
 10424                           ;MCU_B1.c: 771: Memory->Data[3]=0xff;
 10425  0422  30FF               	movlw	255
 10426  0423  00DD               	movwf	??_Flash_Memory_Initialization
 10427  0424  0021               	movlb	1	; select bank1
 10428  0425  086F               	movf	_Memory^(0+128),w
 10429  0426  3E03               	addlw	3
 10430  0427  0086               	movwf	6
 10431  0428  3002               	movlw	2	; select bank4/5
 10432  0429  0087               	movwf	7
 10433  042A  0020               	movlb	0	; select bank0
 10434  042B  085D               	movf	??_Flash_Memory_Initialization,w
 10435  042C  0081               	movwf	1
 10436                           
 10437                           ;MCU_B1.c: 772: Memory->Data[4]=0xff;
 10438  042D  30FF               	movlw	255
 10439  042E  00DD               	movwf	??_Flash_Memory_Initialization
 10440  042F  0021               	movlb	1	; select bank1
 10441  0430  086F               	movf	_Memory^(0+128),w
 10442  0431  3E04               	addlw	4
 10443  0432  0086               	movwf	6
 10444  0433  3002               	movlw	2	; select bank4/5
 10445  0434  0087               	movwf	7
 10446  0435  0020               	movlb	0	; select bank0
 10447  0436  085D               	movf	??_Flash_Memory_Initialization,w
 10448  0437  0081               	movwf	1
 10449                           
 10450                           ;MCU_B1.c: 773: Memory->Data[5]=0xff;
 10451  0438  30FF               	movlw	255
 10452  0439  00DD               	movwf	??_Flash_Memory_Initialization
 10453  043A  0021               	movlb	1	; select bank1
 10454  043B  086F               	movf	_Memory^(0+128),w
 10455  043C  3E05               	addlw	5
 10456  043D  0086               	movwf	6
 10457  043E  3002               	movlw	2	; select bank4/5
 10458  043F  0087               	movwf	7
 10459  0440  0020               	movlb	0	; select bank0
 10460  0441  085D               	movf	??_Flash_Memory_Initialization,w
 10461  0442  0081               	movwf	1
 10462                           
 10463                           ;MCU_B1.c: 774: Memory->Data[31]=0xaa;
 10464  0443  30AA               	movlw	170
 10465  0444  00DD               	movwf	??_Flash_Memory_Initialization
 10466  0445  0021               	movlb	1	; select bank1
 10467  0446  086F               	movf	_Memory^(0+128),w
 10468  0447  3E1F               	addlw	31
 10469  0448  0086               	movwf	6
 10470  0449  3002               	movlw	2	; select bank4/5
 10471  044A  0087               	movwf	7
 10472  044B  0020               	movlb	0	; select bank0
 10473  044C  085D               	movf	??_Flash_Memory_Initialization,w
 10474  044D  0081               	movwf	1
 10475                           
 10476                           ;MCU_B1.c: 775: product->Data[21] = i;
 10477  044E  085E               	movf	Flash_Memory_Initialization@i,w
 10478  044F  00DD               	movwf	??_Flash_Memory_Initialization
 10479  0450  087D               	movf	_product,w
 10480  0451  3E15               	addlw	21
 10481  0452  0086               	movwf	6
 10482  0453  3001               	movlw	1	; select bank2/3
 10483  0454  0087               	movwf	7
 10484  0455  085D               	movf	??_Flash_Memory_Initialization,w
 10485  0456  0081               	movwf	1
 10486                           
 10487                           ;MCU_B1.c: 776: product->Data[22] = i;
 10488  0457  085E               	movf	Flash_Memory_Initialization@i,w
 10489  0458  00DD               	movwf	??_Flash_Memory_Initialization
 10490  0459  087D               	movf	_product,w
 10491  045A  3E16               	addlw	22
 10492  045B  0086               	movwf	6
 10493  045C  3001               	movlw	1	; select bank2/3
 10494  045D  0087               	movwf	7
 10495  045E  085D               	movf	??_Flash_Memory_Initialization,w
 10496  045F  0081               	movwf	1
 10497                           
 10498                           ;MCU_B1.c: 777: product->Data[23] = i;
 10499  0460  085E               	movf	Flash_Memory_Initialization@i,w
 10500  0461  00DD               	movwf	??_Flash_Memory_Initialization
 10501  0462  087D               	movf	_product,w
 10502  0463  3E17               	addlw	23
 10503  0464  0086               	movwf	6
 10504  0465  3001               	movlw	1	; select bank2/3
 10505  0466  0087               	movwf	7
 10506  0467  085D               	movf	??_Flash_Memory_Initialization,w
 10507  0468  0081               	movwf	1
 10508                           
 10509                           ;MCU_B1.c: 778: GIE = 0;
 10510  0469  138B               	bcf	11,7	;volatile
 10511                           
 10512                           ;MCU_B1.c: 779: Flash_Memory_Write();
 10513  046A  3194  2444         	fcall	_Flash_Memory_Write
 10514                           
 10515                           ;MCU_B1.c: 780: GIE = 1;
 10516  046C  178B               	bsf	11,7	;volatile
 10517                           
 10518                           ;MCU_B1.c: 781: myMain->FirstOpen = 1;
 10519  046D  0021               	movlb	1	; select bank1
 10520  046E  086E               	movf	_myMain^(0+128),w
 10521  046F  0086               	movwf	6
 10522  0470  3001               	movlw	1	; select bank2/3
 10523  0471  0087               	movwf	7
 10524  0472  1681               	bsf	1,5
 10525                           
 10526                           ;MCU_B1.c: 782: myMain->First = 1;
 10527  0473  086E               	movf	_myMain^(0+128),w
 10528  0474  0086               	movwf	6
 10529  0475  3001               	movlw	1	; select bank2/3
 10530  0476  0087               	movwf	7
 10531  0477  1781               	bsf	1,7
 10532  0478  0008               	return
 10533  0479                     __end_of_Flash_Memory_Initialization:	
 10534                           
 10535                           	psect	text59
 10536  1444                     __ptext59:	
 10537 ;; *************** function _Flash_Memory_Write *****************
 10538 ;; Defined at:
 10539 ;;		line 826 in file "../src/MCU_B1.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;  i               1    1[BANK0 ] unsigned char 
 10544 ;; Return value:  Size  Location     Type
 10545 ;;		None               void
 10546 ;; Registers used:
 10547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;Total ram usage:        2 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    6
 10560 ;; This function calls:
 10561 ;;		_Flash_Memory_Unlock
 10562 ;; This function is called by:
 10563 ;;		_Flash_Memory_Initialization
 10564 ;;		_Flash_Memory_Modify
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _Flash_Memory_Write
 10570  1444                     _Flash_Memory_Write:	
 10571                           
 10572                           ;MCU_B1.c: 827: char i = 0;
 10573                           
 10574                           ;incstack = 0
 10575                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10576  1444  0020               	movlb	0	; select bank0
 10577  1445  01A1               	clrf	Flash_Memory_Write@i
 10578                           
 10579                           ;MCU_B1.c: 828: CFGS = 0;
 10580  1446  0023               	movlb	3	; select bank3
 10581  1447  1315               	bcf	21,6	;volatile
 10582                           
 10583                           ;MCU_B1.c: 829: PMADRH = 0x30;
 10584  1448  3030               	movlw	48
 10585  1449  0092               	movwf	18	;volatile
 10586                           
 10587                           ;MCU_B1.c: 830: PMDATH = 0;
 10588  144A  0194               	clrf	20	;volatile
 10589                           
 10590                           ;MCU_B1.c: 831: FREE = 0;
 10591  144B  1215               	bcf	21,4	;volatile
 10592                           
 10593                           ;MCU_B1.c: 832: LWLO = 1;
 10594  144C  1695               	bsf	21,5	;volatile
 10595                           
 10596                           ;MCU_B1.c: 833: WREN = 1;
 10597  144D  1515               	bsf	21,2	;volatile
 10598                           
 10599                           ;MCU_B1.c: 834: for (i = 0; i < 32; i++) {
 10600  144E  0020               	movlb	0	; select bank0
 10601  144F  01A1               	clrf	Flash_Memory_Write@i
 10602  1450  3020               	movlw	32
 10603  1451  0221               	subwf	Flash_Memory_Write@i,w
 10604  1452  1803               	btfsc	3,0
 10605  1453  2C70               	goto	l1398
 10606  1454                     l6189:	
 10607                           
 10608                           ;MCU_B1.c: 835: PMADRL = i;
 10609  1454  0821               	movf	Flash_Memory_Write@i,w
 10610  1455  0023               	movlb	3	; select bank3
 10611  1456  0091               	movwf	17	;volatile
 10612                           
 10613                           ;MCU_B1.c: 836: PMDATL = Memory->Data[i];
 10614  1457  0020               	movlb	0	; select bank0
 10615  1458  0821               	movf	Flash_Memory_Write@i,w
 10616  1459  0021               	movlb	1	; select bank1
 10617  145A  076F               	addwf	_Memory^(0+128),w
 10618  145B  0020               	movlb	0	; select bank0
 10619  145C  00A0               	movwf	??_Flash_Memory_Write
 10620  145D  0820               	movf	??_Flash_Memory_Write,w
 10621  145E  0086               	movwf	6
 10622  145F  3002               	movlw	2	; select bank4/5
 10623  1460  0087               	movwf	7
 10624  1461  0801               	movf	1,w
 10625  1462  0023               	movlb	3	; select bank3
 10626  1463  0093               	movwf	19	;volatile
 10627                           
 10628                           ;MCU_B1.c: 837: Flash_Memory_Unlock();
 10629  1464  319E  2661  3194   	fcall	_Flash_Memory_Unlock
 10630  1467  3001               	movlw	1
 10631  1468  0020               	movlb	0	; select bank0
 10632  1469  00A0               	movwf	??_Flash_Memory_Write
 10633  146A  0820               	movf	??_Flash_Memory_Write,w
 10634  146B  07A1               	addwf	Flash_Memory_Write@i,f
 10635  146C  3020               	movlw	32
 10636  146D  0221               	subwf	Flash_Memory_Write@i,w
 10637  146E  1C03               	skipc
 10638  146F  2C54               	goto	l6189
 10639  1470                     l1398:	
 10640                           
 10641                           ;MCU_B1.c: 838: }
 10642                           ;MCU_B1.c: 839: LWLO = 0;
 10643  1470  0023               	movlb	3	; select bank3
 10644  1471  1295               	bcf	21,5	;volatile
 10645                           
 10646                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 10647  1472  319E  2661         	fcall	_Flash_Memory_Unlock
 10648                           
 10649                           ;MCU_B1.c: 841: WREN = 0;
 10650  1474  0023               	movlb	3	; select bank3
 10651  1475  1115               	bcf	21,2	;volatile
 10652  1476  0008               	return
 10653  1477                     __end_of_Flash_Memory_Write:	
 10654                           
 10655                           	psect	text60
 10656  1E61                     __ptext60:	
 10657 ;; *************** function _Flash_Memory_Unlock *****************
 10658 ;; Defined at:
 10659 ;;		line 805 in file "../src/MCU_B1.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;		None
 10662 ;; Auto vars:     Size  Location     Type
 10663 ;;		None
 10664 ;; Return value:  Size  Location     Type
 10665 ;;		None               void
 10666 ;; Registers used:
 10667 ;;		wreg
 10668 ;; Tracked objects:
 10669 ;;		On entry : 0/0
 10670 ;;		On exit  : 0/0
 10671 ;;		Unchanged: 0/0
 10672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;Total ram usage:        0 bytes
 10678 ;; Hardware stack levels used:    1
 10679 ;; Hardware stack levels required when called:    5
 10680 ;; This function calls:
 10681 ;;		Nothing
 10682 ;; This function is called by:
 10683 ;;		_Flash_Memory_Write
 10684 ;;		_Flash_Memory_Erasing
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           
 10689                           ;psect for function _Flash_Memory_Unlock
 10690  1E61                     _Flash_Memory_Unlock:	
 10691                           
 10692                           ;MCU_B1.c: 806: PMCON2 = 0x55;
 10693                           
 10694                           ;incstack = 0
 10695                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10696  1E61  3055               	movlw	85
 10697  1E62  0023               	movlb	3	; select bank3
 10698  1E63  0096               	movwf	22	;volatile
 10699                           
 10700                           ;MCU_B1.c: 807: PMCON2 = 0xaa;
 10701  1E64  30AA               	movlw	170
 10702  1E65  0096               	movwf	22	;volatile
 10703                           
 10704                           ;MCU_B1.c: 808: WR = 1;
 10705  1E66  1495               	bsf	21,1	;volatile
 10706                           
 10707                           ;MCU_B1.c: 809: __nop();
 10708  1E67  0000               	nop
 10709                           
 10710                           ;MCU_B1.c: 810: __nop();
 10711  1E68  0000               	nop
 10712  1E69  0008               	return
 10713  1E6A                     __end_of_Flash_Memory_Unlock:	
 10714                           
 10715                           	psect	text61
 10716  111A                     __ptext61:	
 10717 ;; *************** function _Flash_Memory_Read *****************
 10718 ;; Defined at:
 10719 ;;		line 814 in file "../src/MCU_B1.c"
 10720 ;; Parameters:    Size  Location     Type
 10721 ;;  address         1    wreg     unsigned char 
 10722 ;; Auto vars:     Size  Location     Type
 10723 ;;  address         1    2[BANK0 ] unsigned char 
 10724 ;;  ret             1    3[BANK0 ] unsigned char 
 10725 ;;  i               1    1[BANK0 ] unsigned char 
 10726 ;; Return value:  Size  Location     Type
 10727 ;;                  1    wreg      unsigned char 
 10728 ;; Registers used:
 10729 ;;		wreg, status,2
 10730 ;; Tracked objects:
 10731 ;;		On entry : 0/0
 10732 ;;		On exit  : 0/0
 10733 ;;		Unchanged: 0/0
 10734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;Total ram usage:        4 bytes
 10740 ;; Hardware stack levels used:    1
 10741 ;; Hardware stack levels required when called:    5
 10742 ;; This function calls:
 10743 ;;		Nothing
 10744 ;; This function is called by:
 10745 ;;		_Flash_Memory_Initialization
 10746 ;;		_Flash_Memory_Modify
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           
 10751                           ;psect for function _Flash_Memory_Read
 10752  111A                     _Flash_Memory_Read:	
 10753                           
 10754                           ;incstack = 0
 10755                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10756                           ;Flash_Memory_Read@address stored from wreg
 10757  111A  0020               	movlb	0	; select bank0
 10758  111B  00A2               	movwf	Flash_Memory_Read@address
 10759                           
 10760                           ;MCU_B1.c: 815: char i = 0, ret = 0;
 10761  111C  01A1               	clrf	Flash_Memory_Read@i
 10762  111D  01A3               	clrf	Flash_Memory_Read@ret
 10763                           
 10764                           ;MCU_B1.c: 816: PMADRH = 0x30;
 10765  111E  3030               	movlw	48
 10766  111F  0023               	movlb	3	; select bank3
 10767  1120  0092               	movwf	18	;volatile
 10768                           
 10769                           ;MCU_B1.c: 817: PMADRL = address;
 10770  1121  0020               	movlb	0	; select bank0
 10771  1122  0822               	movf	Flash_Memory_Read@address,w
 10772  1123  0023               	movlb	3	; select bank3
 10773  1124  0091               	movwf	17	;volatile
 10774                           
 10775                           ;MCU_B1.c: 818: CFGS = 0;
 10776  1125  1315               	bcf	21,6	;volatile
 10777                           
 10778                           ;MCU_B1.c: 819: RD = 1;
 10779  1126  1415               	bsf	21,0	;volatile
 10780                           
 10781                           ;MCU_B1.c: 820: i = PMDATH;
 10782  1127  0814               	movf	20,w	;volatile
 10783  1128  0020               	movlb	0	; select bank0
 10784  1129  00A0               	movwf	??_Flash_Memory_Read
 10785  112A  0820               	movf	??_Flash_Memory_Read,w
 10786  112B  00A1               	movwf	Flash_Memory_Read@i
 10787                           
 10788                           ;MCU_B1.c: 821: ret = PMDATL;
 10789  112C  0023               	movlb	3	; select bank3
 10790  112D  0813               	movf	19,w	;volatile
 10791  112E  0020               	movlb	0	; select bank0
 10792  112F  00A0               	movwf	??_Flash_Memory_Read
 10793  1130  0820               	movf	??_Flash_Memory_Read,w
 10794  1131  00A3               	movwf	Flash_Memory_Read@ret
 10795                           
 10796                           ;MCU_B1.c: 822: return ret;
 10797  1132  0823               	movf	Flash_Memory_Read@ret,w
 10798  1133  0008               	return
 10799  1134                     __end_of_Flash_Memory_Read:	
 10800                           
 10801                           	psect	text62
 10802  1EF6                     __ptext62:	
 10803 ;; *************** function _DimmerLights_Main *****************
 10804 ;; Defined at:
 10805 ;;		line 420 in file "../src/Dimmer_B1.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;		None
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;		None               void
 10812 ;; Registers used:
 10813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;Total ram usage:        0 bytes
 10824 ;; Hardware stack levels used:    1
 10825 ;; Hardware stack levels required when called:   11
 10826 ;; This function calls:
 10827 ;;		_DimmerLights_Close
 10828 ;;		_setDimmerLights_Main
 10829 ;; This function is called by:
 10830 ;;		_main
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           
 10835                           ;psect for function _DimmerLights_Main
 10836  1EF6                     _DimmerLights_Main:	
 10837                           
 10838                           ;Dimmer_B1.c: 423: setDimmerLights_Main(1);
 10839                           
 10840                           ;incstack = 0
 10841                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10842  1EF6  3001               	movlw	1
 10843  1EF7  318D  256F  319E   	fcall	_setDimmerLights_Main
 10844                           
 10845                           ;Dimmer_B1.c: 427: setDimmerLights_Main(2);
 10846  1EFA  3002               	movlw	2
 10847  1EFB  318D  256F  319E   	fcall	_setDimmerLights_Main
 10848                           
 10849                           ;Dimmer_B1.c: 431: setDimmerLights_Main(3);
 10850  1EFE  3003               	movlw	3
 10851  1EFF  318D  256F  319E   	fcall	_setDimmerLights_Main
 10852                           
 10853                           ;Dimmer_B1.c: 434: DimmerLights_Close();
 10854  1F02  319F  27EC         	fcall	_DimmerLights_Close
 10855  1F04  0008               	return
 10856  1F05                     __end_of_DimmerLights_Main:	
 10857                           
 10858                           	psect	text63
 10859  0D6F                     __ptext63:	
 10860 ;; *************** function _setDimmerLights_Main *****************
 10861 ;; Defined at:
 10862 ;;		line 438 in file "../src/Dimmer_B1.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;  lights          1    wreg     unsigned char 
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  lights          1   74[BANK0 ] unsigned char 
 10867 ;;  clear           1   73[BANK0 ] unsigned char 
 10868 ;; Return value:  Size  Location     Type
 10869 ;;		None               void
 10870 ;; Registers used:
 10871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10872 ;; Tracked objects:
 10873 ;;		On entry : 0/0
 10874 ;;		On exit  : 0/0
 10875 ;;		Unchanged: 0/0
 10876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10878 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;Total ram usage:        6 bytes
 10882 ;; Hardware stack levels used:    1
 10883 ;; Hardware stack levels required when called:   10
 10884 ;; This function calls:
 10885 ;;		_DimmerLightsPointSelect
 10886 ;;		_setBuz
 10887 ;;		_setDimmerLights
 10888 ;;		_setDimmerLights_Adj
 10889 ;; This function is called by:
 10890 ;;		_DimmerLights_Main
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           
 10895                           ;psect for function _setDimmerLights_Main
 10896  0D6F                     _setDimmerLights_Main:	
 10897                           
 10898                           ;incstack = 0
 10899                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10900                           ;setDimmerLights_Main@lights stored from wreg
 10901  0D6F  0020               	movlb	0	; select bank0
 10902  0D70  00EA               	movwf	setDimmerLights_Main@lights
 10903                           
 10904                           ;Dimmer_B1.c: 439: char clear = 1;
 10905  0D71  01E9               	clrf	setDimmerLights_Main@clear
 10906  0D72  0AE9               	incf	setDimmerLights_Main@clear,f
 10907                           
 10908                           ;Dimmer_B1.c: 440: DimmerLightsPointSelect(lights);
 10909  0D73  086A               	movf	setDimmerLights_Main@lights,w
 10910  0D74  3191  2134  318D   	fcall	_DimmerLightsPointSelect
 10911                           
 10912                           ;Dimmer_B1.c: 443: if (lights == 1) {
 10913  0D77  0020               	movlb	0	; select bank0
 10914  0D78  086A               	movf	setDimmerLights_Main@lights,w
 10915  0D79  3A01               	xorlw	1
 10916  0D7A  1D03               	skipz
 10917  0D7B  2D87               	goto	l6623
 10918                           
 10919                           ;Dimmer_B1.c: 444: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10920  0D7C  01E6               	clrf	_setDimmerLights_Main$1910
 10921  0D7D  0022               	movlb	2	; select bank2
 10922  0D7E  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 10923  0D7F  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 10924  0D80  2D84               	goto	l6621
 10925  0D81  0020               	movlb	0	; select bank0
 10926  0D82  01E6               	clrf	_setDimmerLights_Main$1910
 10927  0D83  0AE6               	incf	_setDimmerLights_Main$1910,f
 10928  0D84                     l6621:	
 10929  0D84  0020               	movlb	0	; select bank0
 10930  0D85  0866               	movf	_setDimmerLights_Main$1910,w
 10931  0D86  2DA4               	goto	L8
 10932  0D87                     l6623:	
 10933                           ;Dimmer_B1.c: 445: } else if (lights == 2) {
 10934                           
 10935  0D87  086A               	movf	setDimmerLights_Main@lights,w
 10936  0D88  3A02               	xorlw	2
 10937  0D89  1D03               	skipz
 10938  0D8A  2D96               	goto	l6635
 10939                           
 10940                           ;Dimmer_B1.c: 446: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 10941  0D8B  01E7               	clrf	_setDimmerLights_Main$1911
 10942  0D8C  0022               	movlb	2	; select bank2
 10943  0D8D  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 10944  0D8E  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 10945  0D8F  2D93               	goto	l6633
 10946  0D90  0020               	movlb	0	; select bank0
 10947  0D91  01E7               	clrf	_setDimmerLights_Main$1911
 10948  0D92  0AE7               	incf	_setDimmerLights_Main$1911,f
 10949  0D93                     l6633:	
 10950  0D93  0020               	movlb	0	; select bank0
 10951  0D94  0867               	movf	_setDimmerLights_Main$1911,w
 10952  0D95  2DA4               	goto	L8
 10953  0D96                     l6635:	
 10954                           ;Dimmer_B1.c: 447: } else if (lights == 3) {
 10955                           
 10956  0D96  086A               	movf	setDimmerLights_Main@lights,w
 10957  0D97  3A03               	xorlw	3
 10958  0D98  1D03               	skipz
 10959  0D99  2DA7               	goto	l6647
 10960                           
 10961                           ;Dimmer_B1.c: 448: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 10962  0D9A  01E8               	clrf	_setDimmerLights_Main$1912
 10963  0D9B  0022               	movlb	2	; select bank2
 10964  0D9C  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 10965  0D9D  1D38               	btfss	(_DimmerLights2^(0+256)+9),2
 10966  0D9E  2DA2               	goto	l6645
 10967  0D9F  0020               	movlb	0	; select bank0
 10968  0DA0  01E8               	clrf	_setDimmerLights_Main$1912
 10969  0DA1  0AE8               	incf	_setDimmerLights_Main$1912,f
 10970  0DA2                     l6645:	
 10971  0DA2  0020               	movlb	0	; select bank0
 10972  0DA3  0868               	movf	_setDimmerLights_Main$1912,w
 10973  0DA4                     L8:	
 10974  0DA4  00E5               	movwf	??_setDimmerLights_Main
 10975  0DA5  0865               	movf	??_setDimmerLights_Main,w
 10976  0DA6  00E9               	movwf	setDimmerLights_Main@clear
 10977  0DA7                     l6647:	
 10978                           
 10979                           ;Dimmer_B1.c: 449: }
 10980                           ;Dimmer_B1.c: 460: if (DimmerLights->Trigger == 1) {
 10981  0DA7  0878               	movf	_DimmerLights,w
 10982  0DA8  3E08               	addlw	8
 10983  0DA9  0086               	movwf	6
 10984  0DAA  3001               	movlw	1	; select bank2/3
 10985  0DAB  0087               	movwf	7
 10986  0DAC  1D01               	btfss	1,2
 10987  0DAD  2DD1               	goto	l6661
 10988                           
 10989                           ;Dimmer_B1.c: 461: if (clear == 1) {
 10990  0DAE  0869               	movf	setDimmerLights_Main@clear,w
 10991  0DAF  3A01               	xorlw	1
 10992  0DB0  1D03               	skipz
 10993  0DB1  0008               	return
 10994                           
 10995                           ;Dimmer_B1.c: 462: if (DimmerLights->Switch == 1) {
 10996  0DB2  0878               	movf	_DimmerLights,w
 10997  0DB3  3E08               	addlw	8
 10998  0DB4  0086               	movwf	6
 10999  0DB5  3001               	movlw	1	; select bank2/3
 11000  0DB6  0087               	movwf	7
 11001  0DB7  1C81               	btfss	1,1
 11002  0DB8  2DC5               	goto	l6657
 11003                           
 11004                           ;Dimmer_B1.c: 463: DimmerLights->Trigger = 0;
 11005  0DB9  0878               	movf	_DimmerLights,w
 11006  0DBA  3E08               	addlw	8
 11007  0DBB  0086               	movwf	6
 11008  0DBC  3001               	movlw	1	; select bank2/3
 11009  0DBD  0087               	movwf	7
 11010  0DBE  1101               	bcf	1,2
 11011                           
 11012                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 1);
 11013  0DBF  01A4               	clrf	setDimmerLights@status
 11014  0DC0  0AA4               	incf	setDimmerLights@status,f
 11015  0DC1  086A               	movf	setDimmerLights_Main@lights,w
 11016  0DC2  318B  2359         	fcall	_setDimmerLights
 11017                           
 11018                           ;Dimmer_B1.c: 465: } else {
 11019  0DC4  0008               	return
 11020  0DC5                     l6657:	
 11021                           
 11022                           ;Dimmer_B1.c: 466: DimmerLights->Trigger = 0;
 11023  0DC5  0878               	movf	_DimmerLights,w
 11024  0DC6  3E08               	addlw	8
 11025  0DC7  0086               	movwf	6
 11026  0DC8  3001               	movlw	1	; select bank2/3
 11027  0DC9  0087               	movwf	7
 11028  0DCA  1101               	bcf	1,2
 11029                           
 11030                           ;Dimmer_B1.c: 467: setDimmerLights(lights, 0);
 11031  0DCB  0020               	movlb	0	; select bank0
 11032  0DCC  01A4               	clrf	setDimmerLights@status
 11033  0DCD  086A               	movf	setDimmerLights_Main@lights,w
 11034  0DCE  318B  2359         	fcall	_setDimmerLights
 11035                           
 11036                           ;Dimmer_B1.c: 468: }
 11037                           ;Dimmer_B1.c: 472: }
 11038                           ;Dimmer_B1.c: 473: } else {
 11039  0DD0  0008               	return
 11040  0DD1                     l6661:	
 11041                           
 11042                           ;Dimmer_B1.c: 474: if (DimmerLights->TriggerAdj == 1) {
 11043  0DD1  0878               	movf	_DimmerLights,w
 11044  0DD2  3E08               	addlw	8
 11045  0DD3  0086               	movwf	6
 11046  0DD4  3001               	movlw	1	; select bank2/3
 11047  0DD5  0087               	movwf	7
 11048  0DD6  1E01               	btfss	1,4
 11049  0DD7  0008               	return
 11050                           
 11051                           ;Dimmer_B1.c: 475: if (clear == 1) {
 11052  0DD8  0020               	movlb	0	; select bank0
 11053  0DD9  0869               	movf	setDimmerLights_Main@clear,w
 11054  0DDA  3A01               	xorlw	1
 11055  0DDB  1D03               	skipz
 11056  0DDC  0008               	return
 11057                           
 11058                           ;Dimmer_B1.c: 476: DimmerLightsPointSelect(lights);
 11059  0DDD  086A               	movf	setDimmerLights_Main@lights,w
 11060  0DDE  3191  2134  318D   	fcall	_DimmerLightsPointSelect
 11061                           
 11062                           ;Dimmer_B1.c: 477: DimmerLights->TriggerAdj = 0;
 11063  0DE1  0878               	movf	_DimmerLights,w
 11064  0DE2  3E08               	addlw	8
 11065  0DE3  0086               	movwf	6
 11066  0DE4  3001               	movlw	1	; select bank2/3
 11067  0DE5  0087               	movwf	7
 11068  0DE6  1201               	bcf	1,4
 11069                           
 11070                           ;Dimmer_B1.c: 478: if (DimmerLights->AdjGo == 1) {
 11071  0DE7  0878               	movf	_DimmerLights,w
 11072  0DE8  3E08               	addlw	8
 11073  0DE9  0086               	movwf	6
 11074  0DEA  3001               	movlw	1	; select bank2/3
 11075  0DEB  0087               	movwf	7
 11076  0DEC  1D81               	btfss	1,3
 11077  0DED  2DFE               	goto	l6673
 11078                           
 11079                           ;Dimmer_B1.c: 479: setDimmerLights_Adj(lights, 1);
 11080  0DEE  0020               	movlb	0	; select bank0
 11081  0DEF  01E2               	clrf	setDimmerLights_Adj@status
 11082  0DF0  0AE2               	incf	setDimmerLights_Adj@status,f
 11083  0DF1  086A               	movf	setDimmerLights_Main@lights,w
 11084  0DF2  3194  24E2  318D   	fcall	_setDimmerLights_Adj
 11085                           
 11086                           ;Dimmer_B1.c: 480: setBuz(1, 100);
 11087  0DF5  3064               	movlw	100
 11088  0DF6  0020               	movlb	0	; select bank0
 11089  0DF7  00A9               	movwf	setBuz@time
 11090  0DF8  3000               	movlw	0
 11091  0DF9  00AA               	movwf	setBuz@time+1
 11092  0DFA  3001               	movlw	1
 11093  0DFB  318C  24E6         	fcall	_setBuz
 11094                           
 11095                           ;Dimmer_B1.c: 481: } else {
 11096  0DFD  0008               	return
 11097  0DFE                     l6673:	
 11098                           
 11099                           ;Dimmer_B1.c: 482: setDimmerLights_Adj(lights, 0);
 11100  0DFE  0020               	movlb	0	; select bank0
 11101  0DFF  01E2               	clrf	setDimmerLights_Adj@status
 11102  0E00  086A               	movf	setDimmerLights_Main@lights,w
 11103  0E01  3194  24E2         	fcall	_setDimmerLights_Adj
 11104  0E03  0008               	return
 11105  0E04                     __end_of_setDimmerLights_Main:	
 11106                           
 11107                           	psect	text64
 11108  14E2                     __ptext64:	
 11109 ;; *************** function _setDimmerLights_Adj *****************
 11110 ;; Defined at:
 11111 ;;		line 664 in file "../src/Dimmer_B1.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;  lights          1    wreg     unsigned char 
 11114 ;;  status          1   66[BANK0 ] unsigned char 
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;  lights          1   68[BANK0 ] unsigned char 
 11117 ;; Return value:  Size  Location     Type
 11118 ;;		None               void
 11119 ;; Registers used:
 11120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11121 ;; Tracked objects:
 11122 ;;		On entry : 0/0
 11123 ;;		On exit  : 0/0
 11124 ;;		Unchanged: 0/0
 11125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11126 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11130 ;;Total ram usage:        3 bytes
 11131 ;; Hardware stack levels used:    1
 11132 ;; Hardware stack levels required when called:    9
 11133 ;; This function calls:
 11134 ;;		_DimmerLightsPointSelect
 11135 ;;		_setRF_DimmerLights
 11136 ;;		_setTxData
 11137 ;; This function is called by:
 11138 ;;		_setDimmerLights_Main
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142                           
 11143                           ;psect for function _setDimmerLights_Adj
 11144  14E2                     _setDimmerLights_Adj:	
 11145                           
 11146                           ;incstack = 0
 11147                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11148                           ;setDimmerLights_Adj@lights stored from wreg
 11149  14E2  0020               	movlb	0	; select bank0
 11150  14E3  00E4               	movwf	setDimmerLights_Adj@lights
 11151                           
 11152                           ;Dimmer_B1.c: 665: DimmerLightsPointSelect(lights);
 11153  14E4  0864               	movf	setDimmerLights_Adj@lights,w
 11154  14E5  3191  2134  3194   	fcall	_DimmerLightsPointSelect
 11155                           
 11156                           ;Dimmer_B1.c: 666: if (status == 1) {
 11157  14E8  0020               	movlb	0	; select bank0
 11158  14E9  0862               	movf	setDimmerLights_Adj@status,w
 11159  14EA  3A01               	xorlw	1
 11160  14EB  1D03               	skipz
 11161  14EC  2CF8               	goto	l6143
 11162                           
 11163                           ;Dimmer_B1.c: 667: DimmerLights->AdjFlag = 1;
 11164  14ED  0878               	movf	_DimmerLights,w
 11165  14EE  0086               	movwf	6
 11166  14EF  3001               	movlw	1	; select bank2/3
 11167  14F0  0087               	movwf	7
 11168  14F1  1581               	bsf	1,3
 11169                           
 11170                           ;Dimmer_B1.c: 668: DimmerLights->Signal = 1;
 11171  14F2  0878               	movf	_DimmerLights,w
 11172  14F3  0086               	movwf	6
 11173  14F4  3001               	movlw	1	; select bank2/3
 11174  14F5  0087               	movwf	7
 11175  14F6  1481               	bsf	1,1
 11176                           
 11177                           ;Dimmer_B1.c: 669: } else {
 11178  14F7  0008               	return
 11179  14F8                     l6143:	
 11180                           
 11181                           ;Dimmer_B1.c: 670: if (DimmerLights->AdjFlag) {
 11182  14F8  0878               	movf	_DimmerLights,w
 11183  14F9  0086               	movwf	6
 11184  14FA  3001               	movlw	1	; select bank2/3
 11185  14FB  0087               	movwf	7
 11186  14FC  1D81               	btfss	1,3
 11187  14FD  0008               	return
 11188                           
 11189                           ;Dimmer_B1.c: 672: DimmerLights->Signal = 0;
 11190  14FE  0878               	movf	_DimmerLights,w
 11191  14FF  0086               	movwf	6
 11192  1500  3001               	movlw	1	; select bank2/3
 11193  1501  0087               	movwf	7
 11194  1502  1081               	bcf	1,1
 11195                           
 11196                           ;Dimmer_B1.c: 673: DimmerLights->AdjFlag = 0;
 11197  1503  0878               	movf	_DimmerLights,w
 11198  1504  0086               	movwf	6
 11199  1505  3001               	movlw	1	; select bank2/3
 11200  1506  0087               	movwf	7
 11201  1507  1181               	bcf	1,3
 11202                           
 11203                           ;Dimmer_B1.c: 674: ;;
 11204                           ;Dimmer_B1.c: 675: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11205  1508  0878               	movf	_DimmerLights,w
 11206  1509  3E04               	addlw	4
 11207  150A  0086               	movwf	6
 11208  150B  3001               	movlw	1	; select bank2/3
 11209  150C  0087               	movwf	7
 11210  150D  0801               	movf	1,w
 11211  150E  00E3               	movwf	??_setDimmerLights_Adj
 11212  150F  0878               	movf	_DimmerLights,w
 11213  1510  3E05               	addlw	5
 11214  1511  0086               	movwf	6
 11215  1512  3001               	movlw	1	; select bank2/3
 11216  1513  0087               	movwf	7
 11217  1514  0863               	movf	??_setDimmerLights_Adj,w
 11218  1515  0081               	movwf	1
 11219                           
 11220                           ;Dimmer_B1.c: 683: setRF_DimmerLights(lights, 1);
 11221  1516  01DD               	clrf	setRF_DimmerLights@on
 11222  1517  0ADD               	incf	setRF_DimmerLights@on,f
 11223  1518  0864               	movf	setDimmerLights_Adj@lights,w
 11224  1519  3189  219B  3194   	fcall	_setRF_DimmerLights
 11225                           
 11226                           ;Dimmer_B1.c: 684: setTxData(1);
 11227  151C  3001               	movlw	1
 11228  151D  318E  2604         	fcall	_setTxData
 11229  151F  0008               	return
 11230  1520                     __end_of_setDimmerLights_Adj:	
 11231                           
 11232                           	psect	text65
 11233  0E04                     __ptext65:	
 11234 ;; *************** function _setTxData *****************
 11235 ;; Defined at:
 11236 ;;		line 156 in file "../src/RF_Control_B1.c"
 11237 ;; Parameters:    Size  Location     Type
 11238 ;;  rf              1    wreg     unsigned char 
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;  rf              1    3[BANK0 ] unsigned char 
 11241 ;;  i               1    0        unsigned char 
 11242 ;; Return value:  Size  Location     Type
 11243 ;;		None               void
 11244 ;; Registers used:
 11245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11246 ;; Tracked objects:
 11247 ;;		On entry : 0/0
 11248 ;;		On exit  : 0/0
 11249 ;;		Unchanged: 0/0
 11250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;Total ram usage:        2 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; Hardware stack levels required when called:    6
 11258 ;; This function calls:
 11259 ;;		_RfPointSelect
 11260 ;; This function is called by:
 11261 ;;		_setDimmerLights_Adj
 11262 ;;		_setControl_Lights_Table
 11263 ;;		_setRFSW_Control
 11264 ;;		_setRFSW_AdjControl
 11265 ;;		_Sw_DimmerOnFunc
 11266 ;;		_Sw_DimmerOffFunc
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           
 11271                           ;psect for function _setTxData
 11272  0E04                     _setTxData:	
 11273                           
 11274                           ;incstack = 0
 11275                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11276                           ;setTxData@rf stored from wreg
 11277  0E04  0020               	movlb	0	; select bank0
 11278  0E05  00A3               	movwf	setTxData@rf
 11279                           
 11280                           ;RF_Control_B1.c: 157: char i;
 11281                           ;RF_Control_B1.c: 158: RfPointSelect(rf);
 11282  0E06  0823               	movf	setTxData@rf,w
 11283  0E07  319E  26D9  318E   	fcall	_RfPointSelect
 11284                           
 11285                           ;RF_Control_B1.c: 159: if (RF->Enable == 1) {
 11286  0E0A  087A               	movf	_RF,w
 11287  0E0B  0086               	movwf	6
 11288  0E0C  0187               	clrf	7
 11289  0E0D  1C01               	btfss	1,0
 11290  0E0E  0008               	return
 11291                           
 11292                           ;RF_Control_B1.c: 161: RF->TransceiveGO = 1;
 11293  0E0F  087A               	movf	_RF,w
 11294  0E10  0086               	movwf	6
 11295  0E11  0187               	clrf	7
 11296  0E12  1501               	bsf	1,2
 11297                           
 11298                           ;RF_Control_B1.c: 171: RF_Data[0] = 0x63;
 11299  0E13  3063               	movlw	99
 11300  0E14  0020               	movlb	0	; select bank0
 11301  0E15  00A2               	movwf	??_setTxData
 11302  0E16  0822               	movf	??_setTxData,w
 11303  0E17  0021               	movlb	1	; select bank1
 11304  0E18  00A0               	movwf	_RF_Data^(0+128)
 11305                           
 11306                           ;RF_Control_B1.c: 172: RF_Data[1] = 0x02;
 11307  0E19  3002               	movlw	2
 11308  0E1A  0020               	movlb	0	; select bank0
 11309  0E1B  00A2               	movwf	??_setTxData
 11310  0E1C  0822               	movf	??_setTxData,w
 11311  0E1D  0021               	movlb	1	; select bank1
 11312  0E1E  00A1               	movwf	(_RF_Data^(0+128)+1)
 11313                           
 11314                           ;RF_Control_B1.c: 173: RF_Data[2] = product->Data[2];
 11315  0E1F  087D               	movf	_product,w
 11316  0E20  0086               	movwf	6
 11317  0E21  3001               	movlw	1	; select bank2/3
 11318  0E22  0087               	movwf	7
 11319  0E23  3001               	movlw	1	; select bank2/3
 11320  0E24  3F42               	moviw [2]fsr1
 11321  0E25  00A2               	movwf	(_RF_Data^(0+128)+2)
 11322                           
 11323                           ;RF_Control_B1.c: 174: RF_Data[3] = product->Data[3];
 11324  0E26  087D               	movf	_product,w
 11325  0E27  0086               	movwf	6
 11326  0E28  3001               	movlw	1	; select bank2/3
 11327  0E29  0087               	movwf	7
 11328  0E2A  3001               	movlw	1	; select bank2/3
 11329  0E2B  3F43               	moviw [3]fsr1
 11330  0E2C  00A3               	movwf	(_RF_Data^(0+128)+3)
 11331                           
 11332                           ;RF_Control_B1.c: 175: RF_Data[4] = product->Data[4];
 11333  0E2D  087D               	movf	_product,w
 11334  0E2E  0086               	movwf	6
 11335  0E2F  3001               	movlw	1	; select bank2/3
 11336  0E30  0087               	movwf	7
 11337  0E31  3001               	movlw	1	; select bank2/3
 11338  0E32  3F44               	moviw [4]fsr1
 11339  0E33  00A4               	movwf	(_RF_Data^(0+128)+4)
 11340                           
 11341                           ;RF_Control_B1.c: 176: RF_Data[5] = product->Data[5];
 11342  0E34  087D               	movf	_product,w
 11343  0E35  0086               	movwf	6
 11344  0E36  3001               	movlw	1	; select bank2/3
 11345  0E37  0087               	movwf	7
 11346  0E38  3001               	movlw	1	; select bank2/3
 11347  0E39  3F45               	moviw [5]fsr1
 11348  0E3A  00A5               	movwf	(_RF_Data^(0+128)+5)
 11349                           
 11350                           ;RF_Control_B1.c: 177: RF_Data[6] = product->Data[6];
 11351  0E3B  087D               	movf	_product,w
 11352  0E3C  0086               	movwf	6
 11353  0E3D  3001               	movlw	1	; select bank2/3
 11354  0E3E  0087               	movwf	7
 11355  0E3F  3001               	movlw	1	; select bank2/3
 11356  0E40  3F46               	moviw [6]fsr1
 11357  0E41  00A6               	movwf	(_RF_Data^(0+128)+6)
 11358                           
 11359                           ;RF_Control_B1.c: 178: RF_Data[7] = product->Data[7];
 11360  0E42  087D               	movf	_product,w
 11361  0E43  0086               	movwf	6
 11362  0E44  3001               	movlw	1	; select bank2/3
 11363  0E45  0087               	movwf	7
 11364  0E46  3001               	movlw	1	; select bank2/3
 11365  0E47  3F47               	moviw [7]fsr1
 11366  0E48  00A7               	movwf	(_RF_Data^(0+128)+7)
 11367                           
 11368                           ;RF_Control_B1.c: 179: RF_Data[8] = product->Data[8];
 11369  0E49  087D               	movf	_product,w
 11370  0E4A  0086               	movwf	6
 11371  0E4B  3001               	movlw	1	; select bank2/3
 11372  0E4C  0087               	movwf	7
 11373  0E4D  3001               	movlw	1	; select bank2/3
 11374  0E4E  3F48               	moviw [8]fsr1
 11375  0E4F  00A8               	movwf	(_RF_Data^(0+128)+8)
 11376                           
 11377                           ;RF_Control_B1.c: 180: RF_Data[9] = product->Data[9];
 11378  0E50  087D               	movf	_product,w
 11379  0E51  0086               	movwf	6
 11380  0E52  3001               	movlw	1	; select bank2/3
 11381  0E53  0087               	movwf	7
 11382  0E54  3001               	movlw	1	; select bank2/3
 11383  0E55  3F49               	moviw [9]fsr1
 11384  0E56  00A9               	movwf	(_RF_Data^(0+128)+9)
 11385                           
 11386                           ;RF_Control_B1.c: 181: RF_Data[10] = product->Data[10];
 11387  0E57  087D               	movf	_product,w
 11388  0E58  0086               	movwf	6
 11389  0E59  3001               	movlw	1	; select bank2/3
 11390  0E5A  0087               	movwf	7
 11391  0E5B  3001               	movlw	1	; select bank2/3
 11392  0E5C  3F4A               	moviw [10]fsr1
 11393  0E5D  00AA               	movwf	(_RF_Data^(0+128)+10)
 11394                           
 11395                           ;RF_Control_B1.c: 182: RF_Data[11] = product->Data[11];
 11396  0E5E  087D               	movf	_product,w
 11397  0E5F  0086               	movwf	6
 11398  0E60  3001               	movlw	1	; select bank2/3
 11399  0E61  0087               	movwf	7
 11400  0E62  3001               	movlw	1	; select bank2/3
 11401  0E63  3F4B               	moviw [11]fsr1
 11402  0E64  00AB               	movwf	(_RF_Data^(0+128)+11)
 11403                           
 11404                           ;RF_Control_B1.c: 183: RF_Data[12] = product->Data[12];
 11405  0E65  087D               	movf	_product,w
 11406  0E66  0086               	movwf	6
 11407  0E67  3001               	movlw	1	; select bank2/3
 11408  0E68  0087               	movwf	7
 11409  0E69  3001               	movlw	1	; select bank2/3
 11410  0E6A  3F4C               	moviw [12]fsr1
 11411  0E6B  00AC               	movwf	(_RF_Data^(0+128)+12)
 11412                           
 11413                           ;RF_Control_B1.c: 184: RF_Data[13] = product->Data[13];
 11414  0E6C  087D               	movf	_product,w
 11415  0E6D  0086               	movwf	6
 11416  0E6E  3001               	movlw	1	; select bank2/3
 11417  0E6F  0087               	movwf	7
 11418  0E70  3001               	movlw	1	; select bank2/3
 11419  0E71  3F4D               	moviw [13]fsr1
 11420  0E72  00AD               	movwf	(_RF_Data^(0+128)+13)
 11421                           
 11422                           ;RF_Control_B1.c: 185: RF_Data[14] = product->Data[14];
 11423  0E73  087D               	movf	_product,w
 11424  0E74  0086               	movwf	6
 11425  0E75  3001               	movlw	1	; select bank2/3
 11426  0E76  0087               	movwf	7
 11427  0E77  3001               	movlw	1	; select bank2/3
 11428  0E78  3F4E               	moviw [14]fsr1
 11429  0E79  00AE               	movwf	(_RF_Data^(0+128)+14)
 11430                           
 11431                           ;RF_Control_B1.c: 186: RF_Data[15] = product->Data[15];
 11432  0E7A  087D               	movf	_product,w
 11433  0E7B  0086               	movwf	6
 11434  0E7C  3001               	movlw	1	; select bank2/3
 11435  0E7D  0087               	movwf	7
 11436  0E7E  3001               	movlw	1	; select bank2/3
 11437  0E7F  3F4F               	moviw [15]fsr1
 11438  0E80  00AF               	movwf	(_RF_Data^(0+128)+15)
 11439                           
 11440                           ;RF_Control_B1.c: 187: RF_Data[16] = product->Data[16];
 11441  0E81  087D               	movf	_product,w
 11442  0E82  0086               	movwf	6
 11443  0E83  3001               	movlw	1	; select bank2/3
 11444  0E84  0087               	movwf	7
 11445  0E85  3001               	movlw	1	; select bank2/3
 11446  0E86  3F50               	moviw [16]fsr1
 11447  0E87  00B0               	movwf	(_RF_Data^(0+128)+16)
 11448                           
 11449                           ;RF_Control_B1.c: 188: RF_Data[17] = product->Data[17];
 11450  0E88  087D               	movf	_product,w
 11451  0E89  0086               	movwf	6
 11452  0E8A  3001               	movlw	1	; select bank2/3
 11453  0E8B  0087               	movwf	7
 11454  0E8C  3001               	movlw	1	; select bank2/3
 11455  0E8D  3F51               	moviw [17]fsr1
 11456  0E8E  00B1               	movwf	(_RF_Data^(0+128)+17)
 11457                           
 11458                           ;RF_Control_B1.c: 189: RF_Data[18] = product->Data[18];
 11459  0E8F  087D               	movf	_product,w
 11460  0E90  0086               	movwf	6
 11461  0E91  3001               	movlw	1	; select bank2/3
 11462  0E92  0087               	movwf	7
 11463  0E93  3001               	movlw	1	; select bank2/3
 11464  0E94  3F52               	moviw [18]fsr1
 11465  0E95  00B2               	movwf	(_RF_Data^(0+128)+18)
 11466                           
 11467                           ;RF_Control_B1.c: 190: RF_Data[19] = product->Data[19];
 11468  0E96  087D               	movf	_product,w
 11469  0E97  0086               	movwf	6
 11470  0E98  3001               	movlw	1	; select bank2/3
 11471  0E99  0087               	movwf	7
 11472  0E9A  3001               	movlw	1	; select bank2/3
 11473  0E9B  3F53               	moviw [19]fsr1
 11474  0E9C  00B3               	movwf	(_RF_Data^(0+128)+19)
 11475                           
 11476                           ;RF_Control_B1.c: 191: RF_Data[20] = 211;
 11477  0E9D  30D3               	movlw	211
 11478  0E9E  0020               	movlb	0	; select bank0
 11479  0E9F  00A2               	movwf	??_setTxData
 11480  0EA0  0822               	movf	??_setTxData,w
 11481  0EA1  0021               	movlb	1	; select bank1
 11482  0EA2  00B4               	movwf	(_RF_Data^(0+128)+20)
 11483  0EA3  0008               	return
 11484  0EA4                     __end_of_setTxData:	
 11485                           
 11486                           	psect	text66
 11487  1ED9                     __ptext66:	
 11488 ;; *************** function _RfPointSelect *****************
 11489 ;; Defined at:
 11490 ;;		line 7 in file "../src/RF_Control_B1.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;  rf              1    wreg     unsigned char 
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  rf              1    1[BANK0 ] unsigned char 
 11495 ;; Return value:  Size  Location     Type
 11496 ;;		None               void
 11497 ;; Registers used:
 11498 ;;		wreg
 11499 ;; Tracked objects:
 11500 ;;		On entry : 0/0
 11501 ;;		On exit  : 0/0
 11502 ;;		Unchanged: 0/0
 11503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;Total ram usage:        2 bytes
 11509 ;; Hardware stack levels used:    1
 11510 ;; Hardware stack levels required when called:    5
 11511 ;; This function calls:
 11512 ;;		Nothing
 11513 ;; This function is called by:
 11514 ;;		_setRF_Learn
 11515 ;;		_setRF_Main
 11516 ;;		_setTxData
 11517 ;;		_setRF_Enable
 11518 ;;		_RF_RxDisable
 11519 ;;		_getRxData
 11520 ;;		_setLog_Code
 11521 ;;		_setControl_Lights_Table
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           
 11526                           ;psect for function _RfPointSelect
 11527  1ED9                     _RfPointSelect:	
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in _RfPointSelect: [wreg]
 11531                           ;RfPointSelect@rf stored from wreg
 11532  1ED9  0020               	movlb	0	; select bank0
 11533  1EDA  00A1               	movwf	RfPointSelect@rf
 11534                           
 11535                           ;RF_Control_B1.c: 9: if (rf == 1) {
 11536  1EDB  0821               	movf	RfPointSelect@rf,w
 11537  1EDC  3A01               	xorlw	1
 11538  1EDD  1D03               	skipz
 11539  1EDE  2EE3               	goto	l5593
 11540                           
 11541                           ;RF_Control_B1.c: 10: RF = &RF1;
 11542  1EDF  30CF               	movlw	_RF1& (0+255)
 11543  1EE0  00A0               	movwf	??_RfPointSelect
 11544  1EE1  0820               	movf	??_RfPointSelect,w
 11545  1EE2  00FA               	movwf	_RF
 11546  1EE3                     l5593:	
 11547                           
 11548                           ;RF_Control_B1.c: 11: }
 11549                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 11550  1EE3  1A0B               	btfsc	11,4	;volatile
 11551  1EE4  0008               	return
 11552                           
 11553                           ;RF_Control_B1.c: 13: INTE = 1;
 11554  1EE5  160B               	bsf	11,4	;volatile
 11555  1EE6  0008               	return
 11556  1EE7                     __end_of_RfPointSelect:	
 11557                           
 11558                           	psect	text67
 11559  099B                     __ptext67:	
 11560 ;; *************** function _setRF_DimmerLights *****************
 11561 ;; Defined at:
 11562 ;;		line 418 in file "../src/RF_Control_B1.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  lights          1    wreg     unsigned char 
 11565 ;;  on              1   61[BANK0 ] unsigned char 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  lights          1   65[BANK0 ] unsigned char 
 11568 ;;  status          1   64[BANK0 ] unsigned char 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;		None               void
 11571 ;; Registers used:
 11572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11578 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;Total ram usage:        5 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    8
 11585 ;; This function calls:
 11586 ;;		_setPercentValue
 11587 ;; This function is called by:
 11588 ;;		_setDimmerLights_Adj
 11589 ;;		_setRFSW_Control
 11590 ;;		_Sw_DimmerOnFunc
 11591 ;;		_Sw_DimmerOffFunc
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           
 11596                           ;psect for function _setRF_DimmerLights
 11597  099B                     _setRF_DimmerLights:	
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11601                           ;setRF_DimmerLights@lights stored from wreg
 11602  099B  0020               	movlb	0	; select bank0
 11603  099C  00E1               	movwf	setRF_DimmerLights@lights
 11604                           
 11605                           ;RF_Control_B1.c: 419: char status;
 11606                           ;RF_Control_B1.c: 420: status = 1;
 11607  099D  01E0               	clrf	setRF_DimmerLights@status
 11608  099E  0AE0               	incf	setRF_DimmerLights@status,f
 11609                           
 11610                           ;RF_Control_B1.c: 421: status <<= (lights - 1);
 11611  099F  0861               	movf	setRF_DimmerLights@lights,w
 11612  09A0  3EFF               	addlw	-1
 11613  09A1  0A89               	incf	9,f
 11614  09A2  29A5               	goto	u4610
 11615  09A3                     u4615:	
 11616  09A3  1003               	clrc
 11617  09A4  0DE0               	rlf	setRF_DimmerLights@status,f
 11618  09A5                     u4610:	
 11619  09A5  3EFF               	addlw	-1
 11620  09A6  1D03               	skipz
 11621  09A7  29A3               	goto	u4615
 11622                           
 11623                           ;RF_Control_B1.c: 422: product->Data[11]=lights;
 11624  09A8  0861               	movf	setRF_DimmerLights@lights,w
 11625  09A9  00DE               	movwf	??_setRF_DimmerLights
 11626  09AA  087D               	movf	_product,w
 11627  09AB  3E0B               	addlw	11
 11628  09AC  0086               	movwf	6
 11629  09AD  3001               	movlw	1	; select bank2/3
 11630  09AE  0087               	movwf	7
 11631  09AF  085E               	movf	??_setRF_DimmerLights,w
 11632  09B0  0081               	movwf	1
 11633                           
 11634                           ;RF_Control_B1.c: 425: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 11635  09B1  3004               	movlw	4
 11636  09B2  3195  25E9  3189   	fcall	_setPercentValue
 11637  09B5  0020               	movlb	0	; select bank0
 11638  09B6  00DE               	movwf	??_setRF_DimmerLights
 11639  09B7  0861               	movf	setRF_DimmerLights@lights,w
 11640  09B8  3E14               	addlw	20
 11641  09B9  077D               	addwf	_product,w
 11642  09BA  00DF               	movwf	??_setRF_DimmerLights+1
 11643  09BB  085F               	movf	??_setRF_DimmerLights+1,w
 11644  09BC  0086               	movwf	6
 11645  09BD  3001               	movlw	1	; select bank2/3
 11646  09BE  0087               	movwf	7
 11647  09BF  085E               	movf	??_setRF_DimmerLights,w
 11648  09C0  0081               	movwf	1
 11649                           
 11650                           ;RF_Control_B1.c: 428: product->Data[9]=product->Data[20 + lights];
 11651  09C1  0861               	movf	setRF_DimmerLights@lights,w
 11652  09C2  3E14               	addlw	20
 11653  09C3  077D               	addwf	_product,w
 11654  09C4  00DE               	movwf	??_setRF_DimmerLights
 11655  09C5  085E               	movf	??_setRF_DimmerLights,w
 11656  09C6  0086               	movwf	6
 11657  09C7  3001               	movlw	1	; select bank2/3
 11658  09C8  0087               	movwf	7
 11659  09C9  0801               	movf	1,w
 11660  09CA  00DF               	movwf	??_setRF_DimmerLights+1
 11661  09CB  087D               	movf	_product,w
 11662  09CC  3E09               	addlw	9
 11663  09CD  0086               	movwf	6
 11664  09CE  3001               	movlw	1	; select bank2/3
 11665  09CF  0087               	movwf	7
 11666  09D0  085F               	movf	??_setRF_DimmerLights+1,w
 11667  09D1  0081               	movwf	1
 11668                           
 11669                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + lights];
 11670  09D2  0861               	movf	setRF_DimmerLights@lights,w
 11671  09D3  3E1A               	addlw	26
 11672  09D4  077D               	addwf	_product,w
 11673  09D5  00DE               	movwf	??_setRF_DimmerLights
 11674  09D6  085E               	movf	??_setRF_DimmerLights,w
 11675  09D7  0086               	movwf	6
 11676  09D8  3001               	movlw	1	; select bank2/3
 11677  09D9  0087               	movwf	7
 11678  09DA  0801               	movf	1,w
 11679  09DB  00DF               	movwf	??_setRF_DimmerLights+1
 11680  09DC  087D               	movf	_product,w
 11681  09DD  3E11               	addlw	17
 11682  09DE  0086               	movwf	6
 11683  09DF  3001               	movlw	1	; select bank2/3
 11684  09E0  0087               	movwf	7
 11685  09E1  085F               	movf	??_setRF_DimmerLights+1,w
 11686  09E2  0081               	movwf	1
 11687                           
 11688                           ;RF_Control_B1.c: 430: if (on == 1) {
 11689  09E3  085D               	movf	setRF_DimmerLights@on,w
 11690  09E4  3A01               	xorlw	1
 11691  09E5  1D03               	skipz
 11692  09E6  29F7               	goto	l5759
 11693                           
 11694                           ;RF_Control_B1.c: 431: product->Data[15]=(product->Data[15] | status);
 11695  09E7  087D               	movf	_product,w
 11696  09E8  3E0F               	addlw	15
 11697  09E9  0086               	movwf	6
 11698  09EA  3001               	movlw	1	; select bank2/3
 11699  09EB  0087               	movwf	7
 11700  09EC  0801               	movf	1,w
 11701  09ED  0460               	iorwf	setRF_DimmerLights@status,w
 11702  09EE  00DE               	movwf	??_setRF_DimmerLights
 11703  09EF  087D               	movf	_product,w
 11704  09F0  3E0F               	addlw	15
 11705  09F1  0086               	movwf	6
 11706  09F2  3001               	movlw	1	; select bank2/3
 11707  09F3  0087               	movwf	7
 11708  09F4  085E               	movf	??_setRF_DimmerLights,w
 11709  09F5  0081               	movwf	1
 11710                           
 11711                           ;RF_Control_B1.c: 432: } else {
 11712  09F6  0008               	return
 11713  09F7                     l5759:	
 11714                           
 11715                           ;RF_Control_B1.c: 433: product->Data[15]=(product->Data[15]&(~status));
 11716  09F7  087D               	movf	_product,w
 11717  09F8  3E0F               	addlw	15
 11718  09F9  0086               	movwf	6
 11719  09FA  3001               	movlw	1	; select bank2/3
 11720  09FB  0087               	movwf	7
 11721  09FC  0960               	comf	setRF_DimmerLights@status,w
 11722  09FD  0501               	andwf	1,w
 11723  09FE  00DE               	movwf	??_setRF_DimmerLights
 11724  09FF  087D               	movf	_product,w
 11725  0A00  3E0F               	addlw	15
 11726  0A01  0086               	movwf	6
 11727  0A02  3001               	movlw	1	; select bank2/3
 11728  0A03  0087               	movwf	7
 11729  0A04  085E               	movf	??_setRF_DimmerLights,w
 11730  0A05  0081               	movwf	1
 11731  0A06  0008               	return
 11732  0A07                     __end_of_setRF_DimmerLights:	
 11733                           
 11734                           	psect	text68
 11735  15E9                     __ptext68:	
 11736 ;; *************** function _setPercentValue *****************
 11737 ;; Defined at:
 11738 ;;		line 786 in file "../src/Dimmer_B1.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  value           1    wreg     unsigned char 
 11741 ;; Auto vars:     Size  Location     Type
 11742 ;;  value           1   57[BANK0 ] unsigned char 
 11743 ;;  i               3   58[BANK0 ] float 
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      unsigned char 
 11746 ;; Registers used:
 11747 ;;		wreg, status,2, status,0, pclath, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;Total ram usage:        4 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    7
 11760 ;; This function calls:
 11761 ;;		___awtoft
 11762 ;;		___ftdiv
 11763 ;;		___fttol
 11764 ;; This function is called by:
 11765 ;;		_Flash_Memory_Initialization
 11766 ;;		_setRF_DimmerLights
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           
 11771                           ;psect for function _setPercentValue
 11772  15E9                     _setPercentValue:	
 11773                           
 11774                           ;incstack = 0
 11775                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 11776                           ;setPercentValue@value stored from wreg
 11777  15E9  0020               	movlb	0	; select bank0
 11778  15EA  00D9               	movwf	setPercentValue@value
 11779                           
 11780                           ;Dimmer_B1.c: 788: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 11781  15EB  3000               	movlw	0
 11782  15EC  00DA               	movwf	setPercentValue@i
 11783  15ED  3060               	movlw	96
 11784  15EE  00DB               	movwf	setPercentValue@i+1
 11785  15EF  3042               	movlw	66
 11786  15F0  00DC               	movwf	setPercentValue@i+2
 11787                           
 11788                           ;Dimmer_B1.c: 789: i /= 100;
 11789  15F1  3000               	movlw	0
 11790  15F2  00AE               	movwf	___ftdiv@f2
 11791  15F3  30C8               	movlw	200
 11792  15F4  00AF               	movwf	___ftdiv@f2+1
 11793  15F5  3042               	movlw	66
 11794  15F6  00B0               	movwf	___ftdiv@f2+2
 11795  15F7  085A               	movf	setPercentValue@i,w
 11796  15F8  00B1               	movwf	___ftdiv@f1
 11797  15F9  085B               	movf	setPercentValue@i+1,w
 11798  15FA  00B2               	movwf	___ftdiv@f1+1
 11799  15FB  085C               	movf	setPercentValue@i+2,w
 11800  15FC  00B3               	movwf	___ftdiv@f1+2
 11801  15FD  318E  26A4  3195   	fcall	___ftdiv
 11802  1600  0020               	movlb	0	; select bank0
 11803  1601  082E               	movf	?___ftdiv,w
 11804  1602  00DA               	movwf	setPercentValue@i
 11805  1603  082F               	movf	?___ftdiv+1,w
 11806  1604  00DB               	movwf	setPercentValue@i+1
 11807  1605  0830               	movf	?___ftdiv+2,w
 11808  1606  00DC               	movwf	setPercentValue@i+2
 11809                           
 11810                           ;Dimmer_B1.c: 790: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 11811  1607  0859               	movf	setPercentValue@value,w
 11812  1608  3EFC               	addlw	252
 11813  1609  00A8               	movwf	___awtoft@c
 11814  160A  30FF               	movlw	255
 11815  160B  1803               	skipnc
 11816  160C  3000               	movlw	0
 11817  160D  00A9               	movwf	___awtoft@c+1
 11818  160E  3192  22D6  3195   	fcall	___awtoft
 11819  1611  0020               	movlb	0	; select bank0
 11820  1612  0828               	movf	?___awtoft,w
 11821  1613  00B1               	movwf	___ftdiv@f1
 11822  1614  0829               	movf	?___awtoft+1,w
 11823  1615  00B2               	movwf	___ftdiv@f1+1
 11824  1616  082A               	movf	?___awtoft+2,w
 11825  1617  00B3               	movwf	___ftdiv@f1+2
 11826  1618  085A               	movf	setPercentValue@i,w
 11827  1619  00AE               	movwf	___ftdiv@f2
 11828  161A  085B               	movf	setPercentValue@i+1,w
 11829  161B  00AF               	movwf	___ftdiv@f2+1
 11830  161C  085C               	movf	setPercentValue@i+2,w
 11831  161D  00B0               	movwf	___ftdiv@f2+2
 11832  161E  318E  26A4  3195   	fcall	___ftdiv
 11833  1621  0020               	movlb	0	; select bank0
 11834  1622  082E               	movf	?___ftdiv,w
 11835  1623  00CB               	movwf	___fttol@f1
 11836  1624  082F               	movf	?___ftdiv+1,w
 11837  1625  00CC               	movwf	___fttol@f1+1
 11838  1626  0830               	movf	?___ftdiv+2,w
 11839  1627  00CD               	movwf	___fttol@f1+2
 11840  1628  318B  23D8         	fcall	___fttol
 11841  162A  0020               	movlb	0	; select bank0
 11842  162B  034B               	decf	?___fttol,w
 11843  162C  3AFF               	xorlw	255
 11844  162D  3E64               	addlw	100
 11845  162E  0008               	return
 11846  162F                     __end_of_setPercentValue:	
 11847                           
 11848                           	psect	text69
 11849  0BD8                     __ptext69:	
 11850 ;; *************** function ___fttol *****************
 11851 ;; Defined at:
 11852 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;  f1              3   43[BANK0 ] float 
 11855 ;; Auto vars:     Size  Location     Type
 11856 ;;  lval            4   52[BANK0 ] unsigned long 
 11857 ;;  exp1            1   56[BANK0 ] unsigned char 
 11858 ;;  sign1           1   51[BANK0 ] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  4   43[BANK0 ] long 
 11861 ;; Registers used:
 11862 ;;		wreg, status,2, status,0
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:       14 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    5
 11875 ;; This function calls:
 11876 ;;		Nothing
 11877 ;; This function is called by:
 11878 ;;		_getPercentValue
 11879 ;;		_setPercentValue
 11880 ;; This function uses a non-reentrant model
 11881 ;;
 11882                           
 11883                           
 11884                           ;psect for function ___fttol
 11885  0BD8                     ___fttol:	
 11886                           
 11887                           ;incstack = 0
 11888                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 11889  0BD8  0020               	movlb	0	; select bank0
 11890  0BD9  084B               	movf	___fttol@f1,w
 11891  0BDA  00CF               	movwf	??___fttol
 11892  0BDB  084C               	movf	___fttol@f1+1,w
 11893  0BDC  00D0               	movwf	??___fttol+1
 11894  0BDD  084D               	movf	___fttol@f1+2,w
 11895  0BDE  00D1               	movwf	??___fttol+2
 11896  0BDF  1003               	clrc
 11897  0BE0  0D50               	rlf	??___fttol+1,w
 11898  0BE1  0D51               	rlf	??___fttol+2,w
 11899  0BE2  00D2               	movwf	??___fttol+3
 11900  0BE3  0852               	movf	??___fttol+3,w
 11901  0BE4  00D8               	movwf	___fttol@exp1
 11902  0BE5  08D8               	movf	___fttol@exp1,f
 11903  0BE6  1D03               	skipz
 11904  0BE7  2BF1               	goto	l5503
 11905  0BE8  3000               	movlw	0
 11906  0BE9  00CE               	movwf	?___fttol+3
 11907  0BEA  3000               	movlw	0
 11908  0BEB  00CD               	movwf	?___fttol+2
 11909  0BEC  3000               	movlw	0
 11910  0BED  00CC               	movwf	?___fttol+1
 11911  0BEE  3000               	movlw	0
 11912  0BEF  00CB               	movwf	?___fttol
 11913  0BF0  0008               	return
 11914  0BF1                     l5503:	
 11915  0BF1  084B               	movf	___fttol@f1,w
 11916  0BF2  00CF               	movwf	??___fttol
 11917  0BF3  084C               	movf	___fttol@f1+1,w
 11918  0BF4  00D0               	movwf	??___fttol+1
 11919  0BF5  084D               	movf	___fttol@f1+2,w
 11920  0BF6  00D1               	movwf	??___fttol+2
 11921  0BF7  3017               	movlw	23
 11922  0BF8                     u4095:	
 11923  0BF8  36D1               	lsrf	??___fttol+2,f
 11924  0BF9  0CD0               	rrf	??___fttol+1,f
 11925  0BFA  0CCF               	rrf	??___fttol,f
 11926  0BFB  0B89               	decfsz	9,f
 11927  0BFC  2BF8               	goto	u4095
 11928  0BFD  084F               	movf	??___fttol,w
 11929  0BFE  00D2               	movwf	??___fttol+3
 11930  0BFF  0852               	movf	??___fttol+3,w
 11931  0C00  00D3               	movwf	___fttol@sign1
 11932  0C01  17CC               	bsf	___fttol@f1+1,7
 11933  0C02  30FF               	movlw	255
 11934  0C03  05CB               	andwf	___fttol@f1,f
 11935  0C04  30FF               	movlw	255
 11936  0C05  05CC               	andwf	___fttol@f1+1,f
 11937  0C06  3000               	movlw	0
 11938  0C07  05CD               	andwf	___fttol@f1+2,f
 11939  0C08  084B               	movf	___fttol@f1,w
 11940  0C09  00D4               	movwf	___fttol@lval
 11941  0C0A  084C               	movf	___fttol@f1+1,w
 11942  0C0B  00D5               	movwf	___fttol@lval+1
 11943  0C0C  084D               	movf	___fttol@f1+2,w
 11944  0C0D  00D6               	movwf	___fttol@lval+2
 11945  0C0E  01D7               	clrf	___fttol@lval+3
 11946  0C0F  308E               	movlw	142
 11947  0C10  02D8               	subwf	___fttol@exp1,f
 11948  0C11  1FD8               	btfss	___fttol@exp1,7
 11949  0C12  2C2F               	goto	l5523
 11950  0C13  0858               	movf	___fttol@exp1,w
 11951  0C14  3A80               	xorlw	128
 11952  0C15  3E8F               	addlw	143
 11953  0C16  1803               	skipnc
 11954  0C17  2C21               	goto	l5521
 11955  0C18  3000               	movlw	0
 11956  0C19  00CE               	movwf	?___fttol+3
 11957  0C1A  3000               	movlw	0
 11958  0C1B  00CD               	movwf	?___fttol+2
 11959  0C1C  3000               	movlw	0
 11960  0C1D  00CC               	movwf	?___fttol+1
 11961  0C1E  3000               	movlw	0
 11962  0C1F  00CB               	movwf	?___fttol
 11963  0C20  0008               	return
 11964  0C21                     l5521:	
 11965  0C21  3001               	movlw	1
 11966  0C22                     u4125:	
 11967  0C22  36D7               	lsrf	___fttol@lval+3,f
 11968  0C23  0CD6               	rrf	___fttol@lval+2,f
 11969  0C24  0CD5               	rrf	___fttol@lval+1,f
 11970  0C25  0CD4               	rrf	___fttol@lval,f
 11971  0C26  0B89               	decfsz	9,f
 11972  0C27  2C22               	goto	u4125
 11973  0C28  3001               	movlw	1
 11974  0C29  00CF               	movwf	??___fttol
 11975  0C2A  084F               	movf	??___fttol,w
 11976  0C2B  07D8               	addwf	___fttol@exp1,f
 11977  0C2C  1903               	btfsc	3,2
 11978  0C2D  2C48               	goto	l5533
 11979  0C2E  2C21               	goto	l5521
 11980  0C2F                     l5523:	
 11981  0C2F  3018               	movlw	24
 11982  0C30  0258               	subwf	___fttol@exp1,w
 11983  0C31  1C03               	skipc
 11984  0C32  2C45               	goto	l5531
 11985  0C33  3000               	movlw	0
 11986  0C34  00CE               	movwf	?___fttol+3
 11987  0C35  3000               	movlw	0
 11988  0C36  00CD               	movwf	?___fttol+2
 11989  0C37  3000               	movlw	0
 11990  0C38  00CC               	movwf	?___fttol+1
 11991  0C39  3000               	movlw	0
 11992  0C3A  00CB               	movwf	?___fttol
 11993  0C3B  0008               	return
 11994  0C3C                     l5529:	
 11995  0C3C  3001               	movlw	1
 11996  0C3D                     u4155:	
 11997  0C3D  35D4               	lslf	___fttol@lval,f
 11998  0C3E  0DD5               	rlf	___fttol@lval+1,f
 11999  0C3F  0DD6               	rlf	___fttol@lval+2,f
 12000  0C40  0DD7               	rlf	___fttol@lval+3,f
 12001  0C41  0B89               	decfsz	9,f
 12002  0C42  2C3D               	goto	u4155
 12003  0C43  3001               	movlw	1
 12004  0C44  02D8               	subwf	___fttol@exp1,f
 12005  0C45                     l5531:	
 12006  0C45  08D8               	movf	___fttol@exp1,f
 12007  0C46  1D03               	skipz
 12008  0C47  2C3C               	goto	l5529
 12009  0C48                     l5533:	
 12010  0C48  0853               	movf	___fttol@sign1,w
 12011  0C49  1903               	btfsc	3,2
 12012  0C4A  2C56               	goto	l5537
 12013  0C4B  09D4               	comf	___fttol@lval,f
 12014  0C4C  09D5               	comf	___fttol@lval+1,f
 12015  0C4D  09D6               	comf	___fttol@lval+2,f
 12016  0C4E  09D7               	comf	___fttol@lval+3,f
 12017  0C4F  0AD4               	incf	___fttol@lval,f
 12018  0C50  1903               	skipnz
 12019  0C51  0AD5               	incf	___fttol@lval+1,f
 12020  0C52  1903               	skipnz
 12021  0C53  0AD6               	incf	___fttol@lval+2,f
 12022  0C54  1903               	skipnz
 12023  0C55  0AD7               	incf	___fttol@lval+3,f
 12024  0C56                     l5537:	
 12025  0C56  0857               	movf	___fttol@lval+3,w
 12026  0C57  00CE               	movwf	?___fttol+3
 12027  0C58  0856               	movf	___fttol@lval+2,w
 12028  0C59  00CD               	movwf	?___fttol+2
 12029  0C5A  0855               	movf	___fttol@lval+1,w
 12030  0C5B  00CC               	movwf	?___fttol+1
 12031  0C5C  0854               	movf	___fttol@lval,w
 12032  0C5D  00CB               	movwf	?___fttol
 12033  0C5E  0008               	return
 12034  0C5F                     __end_of___fttol:	
 12035                           
 12036                           	psect	text70
 12037  0EA4                     __ptext70:	
 12038 ;; *************** function ___ftdiv *****************
 12039 ;; Defined at:
 12040 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;  f2              3   14[BANK0 ] float 
 12043 ;;  f1              3   17[BANK0 ] float 
 12044 ;; Auto vars:     Size  Location     Type
 12045 ;;  f3              3   25[BANK0 ] float 
 12046 ;;  sign            1   29[BANK0 ] unsigned char 
 12047 ;;  exp             1   28[BANK0 ] unsigned char 
 12048 ;;  cntr            1   24[BANK0 ] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  3   14[BANK0 ] float 
 12051 ;; Registers used:
 12052 ;;		wreg, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12058 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;Total ram usage:       16 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    6
 12065 ;; This function calls:
 12066 ;;		___ftpack
 12067 ;; This function is called by:
 12068 ;;		_getPercentValue
 12069 ;;		_setPercentValue
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           
 12074                           ;psect for function ___ftdiv
 12075  0EA4                     ___ftdiv:	
 12076                           
 12077                           ;incstack = 0
 12078                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12079  0EA4  0020               	movlb	0	; select bank0
 12080  0EA5  0831               	movf	___ftdiv@f1,w
 12081  0EA6  00B4               	movwf	??___ftdiv
 12082  0EA7  0832               	movf	___ftdiv@f1+1,w
 12083  0EA8  00B5               	movwf	??___ftdiv+1
 12084  0EA9  0833               	movf	___ftdiv@f1+2,w
 12085  0EAA  00B6               	movwf	??___ftdiv+2
 12086  0EAB  1003               	clrc
 12087  0EAC  0D35               	rlf	??___ftdiv+1,w
 12088  0EAD  0D36               	rlf	??___ftdiv+2,w
 12089  0EAE  00B7               	movwf	??___ftdiv+3
 12090  0EAF  0837               	movf	??___ftdiv+3,w
 12091  0EB0  00BC               	movwf	___ftdiv@exp
 12092  0EB1  08BC               	movf	___ftdiv@exp,f
 12093  0EB2  1D03               	skipz
 12094  0EB3  2EBB               	goto	l5411
 12095  0EB4  3000               	movlw	0
 12096  0EB5  00AE               	movwf	?___ftdiv
 12097  0EB6  3000               	movlw	0
 12098  0EB7  00AF               	movwf	?___ftdiv+1
 12099  0EB8  3000               	movlw	0
 12100  0EB9  00B0               	movwf	?___ftdiv+2
 12101  0EBA  0008               	return
 12102  0EBB                     l5411:	
 12103  0EBB  082E               	movf	___ftdiv@f2,w
 12104  0EBC  00B4               	movwf	??___ftdiv
 12105  0EBD  082F               	movf	___ftdiv@f2+1,w
 12106  0EBE  00B5               	movwf	??___ftdiv+1
 12107  0EBF  0830               	movf	___ftdiv@f2+2,w
 12108  0EC0  00B6               	movwf	??___ftdiv+2
 12109  0EC1  1003               	clrc
 12110  0EC2  0D35               	rlf	??___ftdiv+1,w
 12111  0EC3  0D36               	rlf	??___ftdiv+2,w
 12112  0EC4  00B7               	movwf	??___ftdiv+3
 12113  0EC5  0837               	movf	??___ftdiv+3,w
 12114  0EC6  00BD               	movwf	___ftdiv@sign
 12115  0EC7  08BD               	movf	___ftdiv@sign,f
 12116  0EC8  1D03               	skipz
 12117  0EC9  2ED1               	goto	l5417
 12118  0ECA  3000               	movlw	0
 12119  0ECB  00AE               	movwf	?___ftdiv
 12120  0ECC  3000               	movlw	0
 12121  0ECD  00AF               	movwf	?___ftdiv+1
 12122  0ECE  3000               	movlw	0
 12123  0ECF  00B0               	movwf	?___ftdiv+2
 12124  0ED0  0008               	return
 12125  0ED1                     l5417:	
 12126  0ED1  3000               	movlw	0
 12127  0ED2  00B9               	movwf	___ftdiv@f3
 12128  0ED3  3000               	movlw	0
 12129  0ED4  00BA               	movwf	___ftdiv@f3+1
 12130  0ED5  3000               	movlw	0
 12131  0ED6  00BB               	movwf	___ftdiv@f3+2
 12132  0ED7  3089               	movlw	137
 12133  0ED8  073D               	addwf	___ftdiv@sign,w
 12134  0ED9  00B4               	movwf	??___ftdiv
 12135  0EDA  0834               	movf	??___ftdiv,w
 12136  0EDB  02BC               	subwf	___ftdiv@exp,f
 12137  0EDC  0831               	movf	___ftdiv@f1,w
 12138  0EDD  00B4               	movwf	??___ftdiv
 12139  0EDE  0832               	movf	___ftdiv@f1+1,w
 12140  0EDF  00B5               	movwf	??___ftdiv+1
 12141  0EE0  0833               	movf	___ftdiv@f1+2,w
 12142  0EE1  00B6               	movwf	??___ftdiv+2
 12143  0EE2  3010               	movlw	16
 12144  0EE3                     u3905:	
 12145  0EE3  36B6               	lsrf	??___ftdiv+2,f
 12146  0EE4  0CB5               	rrf	??___ftdiv+1,f
 12147  0EE5  0CB4               	rrf	??___ftdiv,f
 12148  0EE6  0B89               	decfsz	9,f
 12149  0EE7  2EE3               	goto	u3905
 12150  0EE8  0834               	movf	??___ftdiv,w
 12151  0EE9  00B7               	movwf	??___ftdiv+3
 12152  0EEA  0837               	movf	??___ftdiv+3,w
 12153  0EEB  00BD               	movwf	___ftdiv@sign
 12154  0EEC  082E               	movf	___ftdiv@f2,w
 12155  0EED  00B4               	movwf	??___ftdiv
 12156  0EEE  082F               	movf	___ftdiv@f2+1,w
 12157  0EEF  00B5               	movwf	??___ftdiv+1
 12158  0EF0  0830               	movf	___ftdiv@f2+2,w
 12159  0EF1  00B6               	movwf	??___ftdiv+2
 12160  0EF2  3010               	movlw	16
 12161  0EF3                     u3915:	
 12162  0EF3  36B6               	lsrf	??___ftdiv+2,f
 12163  0EF4  0CB5               	rrf	??___ftdiv+1,f
 12164  0EF5  0CB4               	rrf	??___ftdiv,f
 12165  0EF6  0B89               	decfsz	9,f
 12166  0EF7  2EF3               	goto	u3915
 12167  0EF8  0834               	movf	??___ftdiv,w
 12168  0EF9  00B7               	movwf	??___ftdiv+3
 12169  0EFA  0837               	movf	??___ftdiv+3,w
 12170  0EFB  06BD               	xorwf	___ftdiv@sign,f
 12171  0EFC  3080               	movlw	128
 12172  0EFD  00B4               	movwf	??___ftdiv
 12173  0EFE  0834               	movf	??___ftdiv,w
 12174  0EFF  05BD               	andwf	___ftdiv@sign,f
 12175  0F00  17B2               	bsf	___ftdiv@f1+1,7
 12176  0F01  30FF               	movlw	255
 12177  0F02  05B1               	andwf	___ftdiv@f1,f
 12178  0F03  30FF               	movlw	255
 12179  0F04  05B2               	andwf	___ftdiv@f1+1,f
 12180  0F05  3000               	movlw	0
 12181  0F06  05B3               	andwf	___ftdiv@f1+2,f
 12182  0F07  17AF               	bsf	___ftdiv@f2+1,7
 12183  0F08  30FF               	movlw	255
 12184  0F09  05AE               	andwf	___ftdiv@f2,f
 12185  0F0A  30FF               	movlw	255
 12186  0F0B  05AF               	andwf	___ftdiv@f2+1,f
 12187  0F0C  3000               	movlw	0
 12188  0F0D  05B0               	andwf	___ftdiv@f2+2,f
 12189  0F0E  3018               	movlw	24
 12190  0F0F  00B4               	movwf	??___ftdiv
 12191  0F10  0834               	movf	??___ftdiv,w
 12192  0F11  00B8               	movwf	___ftdiv@cntr
 12193  0F12                     l5431:	
 12194  0F12  3001               	movlw	1
 12195  0F13                     u3925:	
 12196  0F13  35B9               	lslf	___ftdiv@f3,f
 12197  0F14  0DBA               	rlf	___ftdiv@f3+1,f
 12198  0F15  0DBB               	rlf	___ftdiv@f3+2,f
 12199  0F16  0B89               	decfsz	9,f
 12200  0F17  2F13               	goto	u3925
 12201  0F18  0830               	movf	___ftdiv@f2+2,w
 12202  0F19  0233               	subwf	___ftdiv@f1+2,w
 12203  0F1A  1D03               	skipz
 12204  0F1B  2F22               	goto	u3935
 12205  0F1C  082F               	movf	___ftdiv@f2+1,w
 12206  0F1D  0232               	subwf	___ftdiv@f1+1,w
 12207  0F1E  1D03               	skipz
 12208  0F1F  2F22               	goto	u3935
 12209  0F20  082E               	movf	___ftdiv@f2,w
 12210  0F21  0231               	subwf	___ftdiv@f1,w
 12211  0F22                     u3935:	
 12212  0F22  1C03               	skipc
 12213  0F23  2F2B               	goto	l5439
 12214  0F24  082E               	movf	___ftdiv@f2,w
 12215  0F25  02B1               	subwf	___ftdiv@f1,f
 12216  0F26  082F               	movf	___ftdiv@f2+1,w
 12217  0F27  3BB2               	subwfb	___ftdiv@f1+1,f
 12218  0F28  0830               	movf	___ftdiv@f2+2,w
 12219  0F29  3BB3               	subwfb	___ftdiv@f1+2,f
 12220  0F2A  1439               	bsf	___ftdiv@f3,0
 12221  0F2B                     l5439:	
 12222  0F2B  3001               	movlw	1
 12223  0F2C                     u3945:	
 12224  0F2C  35B1               	lslf	___ftdiv@f1,f
 12225  0F2D  0DB2               	rlf	___ftdiv@f1+1,f
 12226  0F2E  0DB3               	rlf	___ftdiv@f1+2,f
 12227  0F2F  0B89               	decfsz	9,f
 12228  0F30  2F2C               	goto	u3945
 12229  0F31  3001               	movlw	1
 12230  0F32  02B8               	subwf	___ftdiv@cntr,f
 12231  0F33  1D03               	btfss	3,2
 12232  0F34  2F12               	goto	l5431
 12233  0F35  0839               	movf	___ftdiv@f3,w
 12234  0F36  00A0               	movwf	___ftpack@arg
 12235  0F37  083A               	movf	___ftdiv@f3+1,w
 12236  0F38  00A1               	movwf	___ftpack@arg+1
 12237  0F39  083B               	movf	___ftdiv@f3+2,w
 12238  0F3A  00A2               	movwf	___ftpack@arg+2
 12239  0F3B  083C               	movf	___ftdiv@exp,w
 12240  0F3C  00B4               	movwf	??___ftdiv
 12241  0F3D  0834               	movf	??___ftdiv,w
 12242  0F3E  00A3               	movwf	___ftpack@exp
 12243  0F3F  083D               	movf	___ftdiv@sign,w
 12244  0F40  00B5               	movwf	??___ftdiv+1
 12245  0F41  0835               	movf	??___ftdiv+1,w
 12246  0F42  00A4               	movwf	___ftpack@sign
 12247  0F43  3187  279F         	fcall	___ftpack
 12248  0F45  0020               	movlb	0	; select bank0
 12249  0F46  0820               	movf	?___ftpack,w
 12250  0F47  00AE               	movwf	?___ftdiv
 12251  0F48  0821               	movf	?___ftpack+1,w
 12252  0F49  00AF               	movwf	?___ftdiv+1
 12253  0F4A  0822               	movf	?___ftpack+2,w
 12254  0F4B  00B0               	movwf	?___ftdiv+2
 12255  0F4C  0008               	return
 12256  0F4D                     __end_of___ftdiv:	
 12257                           
 12258                           	psect	text71
 12259  12D6                     __ptext71:	
 12260 ;; *************** function ___awtoft *****************
 12261 ;; Defined at:
 12262 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 12263 ;; Parameters:    Size  Location     Type
 12264 ;;  c               2    8[BANK0 ] int 
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;  sign            1   13[BANK0 ] unsigned char 
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  3    8[BANK0 ] float 
 12269 ;; Registers used:
 12270 ;;		wreg, status,2, status,0, pclath, cstack
 12271 ;; Tracked objects:
 12272 ;;		On entry : 0/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12276 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12279 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;Total ram usage:        6 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    6
 12283 ;; This function calls:
 12284 ;;		___ftpack
 12285 ;; This function is called by:
 12286 ;;		_getPercentValue
 12287 ;;		_setPercentValue
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291                           
 12292                           ;psect for function ___awtoft
 12293  12D6                     ___awtoft:	
 12294                           
 12295                           ;incstack = 0
 12296                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12297  12D6  0020               	movlb	0	; select bank0
 12298  12D7  01AD               	clrf	___awtoft@sign
 12299  12D8  1FA9               	btfss	___awtoft@c+1,7
 12300  12D9  2AE1               	goto	l5329
 12301  12DA  09A8               	comf	___awtoft@c,f
 12302  12DB  09A9               	comf	___awtoft@c+1,f
 12303  12DC  0AA8               	incf	___awtoft@c,f
 12304  12DD  1903               	skipnz
 12305  12DE  0AA9               	incf	___awtoft@c+1,f
 12306  12DF  01AD               	clrf	___awtoft@sign
 12307  12E0  0AAD               	incf	___awtoft@sign,f
 12308  12E1                     l5329:	
 12309  12E1  0828               	movf	___awtoft@c,w
 12310  12E2  00A0               	movwf	___ftpack@arg
 12311  12E3  0829               	movf	___awtoft@c+1,w
 12312  12E4  00A1               	movwf	___ftpack@arg+1
 12313  12E5  01A2               	clrf	___ftpack@arg+2
 12314  12E6  308E               	movlw	142
 12315  12E7  00AB               	movwf	??___awtoft
 12316  12E8  082B               	movf	??___awtoft,w
 12317  12E9  00A3               	movwf	___ftpack@exp
 12318  12EA  082D               	movf	___awtoft@sign,w
 12319  12EB  00AC               	movwf	??___awtoft+1
 12320  12EC  082C               	movf	??___awtoft+1,w
 12321  12ED  00A4               	movwf	___ftpack@sign
 12322  12EE  3187  279F         	fcall	___ftpack
 12323  12F0  0020               	movlb	0	; select bank0
 12324  12F1  0820               	movf	?___ftpack,w
 12325  12F2  00A8               	movwf	?___awtoft
 12326  12F3  0821               	movf	?___ftpack+1,w
 12327  12F4  00A9               	movwf	?___awtoft+1
 12328  12F5  0822               	movf	?___ftpack+2,w
 12329  12F6  00AA               	movwf	?___awtoft+2
 12330  12F7  0008               	return
 12331  12F8                     __end_of___awtoft:	
 12332                           
 12333                           	psect	text72
 12334  079F                     __ptext72:	
 12335 ;; *************** function ___ftpack *****************
 12336 ;; Defined at:
 12337 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 12338 ;; Parameters:    Size  Location     Type
 12339 ;;  arg             3    0[BANK0 ] unsigned um
 12340 ;;  exp             1    3[BANK0 ] unsigned char 
 12341 ;;  sign            1    4[BANK0 ] unsigned char 
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;		None
 12344 ;; Return value:  Size  Location     Type
 12345 ;;                  3    0[BANK0 ] float 
 12346 ;; Registers used:
 12347 ;;		wreg, status,2, status,0
 12348 ;; Tracked objects:
 12349 ;;		On entry : 0/0
 12350 ;;		On exit  : 0/0
 12351 ;;		Unchanged: 0/0
 12352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12353 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;Total ram usage:        8 bytes
 12358 ;; Hardware stack levels used:    1
 12359 ;; Hardware stack levels required when called:    5
 12360 ;; This function calls:
 12361 ;;		Nothing
 12362 ;; This function is called by:
 12363 ;;		___awtoft
 12364 ;;		___ftadd
 12365 ;;		___ftdiv
 12366 ;;		___ftmul
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function ___ftpack
 12372  079F                     ___ftpack:	
 12373                           
 12374                           ;incstack = 0
 12375                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12376  079F  0020               	movlb	0	; select bank0
 12377  07A0  0823               	movf	___ftpack@exp,w
 12378  07A1  1903               	btfsc	3,2
 12379  07A2  2FA8               	goto	l5295
 12380  07A3  0822               	movf	___ftpack@arg+2,w
 12381  07A4  0421               	iorwf	___ftpack@arg+1,w
 12382  07A5  0420               	iorwf	___ftpack@arg,w
 12383  07A6  1D03               	skipz
 12384  07A7  2FB9               	goto	l5301
 12385  07A8                     l5295:	
 12386  07A8  3000               	movlw	0
 12387  07A9  00A0               	movwf	?___ftpack
 12388  07AA  3000               	movlw	0
 12389  07AB  00A1               	movwf	?___ftpack+1
 12390  07AC  3000               	movlw	0
 12391  07AD  00A2               	movwf	?___ftpack+2
 12392  07AE  0008               	return
 12393  07AF                     l5299:	
 12394  07AF  3001               	movlw	1
 12395  07B0  00A5               	movwf	??___ftpack
 12396  07B1  0825               	movf	??___ftpack,w
 12397  07B2  07A3               	addwf	___ftpack@exp,f
 12398  07B3  3001               	movlw	1
 12399  07B4                     u3555:	
 12400  07B4  36A2               	lsrf	___ftpack@arg+2,f
 12401  07B5  0CA1               	rrf	___ftpack@arg+1,f
 12402  07B6  0CA0               	rrf	___ftpack@arg,f
 12403  07B7  0B89               	decfsz	9,f
 12404  07B8  2FB4               	goto	u3555
 12405  07B9                     l5301:	
 12406  07B9  30FE               	movlw	254
 12407  07BA  0522               	andwf	___ftpack@arg+2,w
 12408  07BB  1903               	btfsc	3,2
 12409  07BC  2FD2               	goto	l2985
 12410  07BD  2FAF               	goto	l5299
 12411  07BE                     l5303:	
 12412  07BE  3001               	movlw	1
 12413  07BF  00A5               	movwf	??___ftpack
 12414  07C0  0825               	movf	??___ftpack,w
 12415  07C1  07A3               	addwf	___ftpack@exp,f
 12416  07C2  3001               	movlw	1
 12417  07C3  07A0               	addwf	___ftpack@arg,f
 12418  07C4  3000               	movlw	0
 12419  07C5  1803               	skipnc
 12420  07C6  3001               	movlw	1
 12421  07C7  07A1               	addwf	___ftpack@arg+1,f
 12422  07C8  3000               	movlw	0
 12423  07C9  1803               	skipnc
 12424  07CA  3001               	movlw	1
 12425  07CB  07A2               	addwf	___ftpack@arg+2,f
 12426  07CC  3001               	movlw	1
 12427  07CD                     u3575:	
 12428  07CD  36A2               	lsrf	___ftpack@arg+2,f
 12429  07CE  0CA1               	rrf	___ftpack@arg+1,f
 12430  07CF  0CA0               	rrf	___ftpack@arg,f
 12431  07D0  0B89               	decfsz	9,f
 12432  07D1  2FCD               	goto	u3575
 12433  07D2                     l2985:	
 12434  07D2  30FF               	movlw	255
 12435  07D3  0522               	andwf	___ftpack@arg+2,w
 12436  07D4  1903               	btfsc	3,2
 12437  07D5  2FDF               	goto	l5311
 12438  07D6  2FBE               	goto	l5303
 12439  07D7                     l5309:	
 12440  07D7  3001               	movlw	1
 12441  07D8  02A3               	subwf	___ftpack@exp,f
 12442  07D9  3001               	movlw	1
 12443  07DA                     u3595:	
 12444  07DA  35A0               	lslf	___ftpack@arg,f
 12445  07DB  0DA1               	rlf	___ftpack@arg+1,f
 12446  07DC  0DA2               	rlf	___ftpack@arg+2,f
 12447  07DD  0B89               	decfsz	9,f
 12448  07DE  2FDA               	goto	u3595
 12449  07DF                     l5311:	
 12450  07DF  1FA1               	btfss	___ftpack@arg+1,7
 12451  07E0  2FD7               	goto	l5309
 12452  07E1  1823               	btfsc	___ftpack@exp,0
 12453  07E2  2FE9               	goto	l2991
 12454  07E3  30FF               	movlw	255
 12455  07E4  05A0               	andwf	___ftpack@arg,f
 12456  07E5  307F               	movlw	127
 12457  07E6  05A1               	andwf	___ftpack@arg+1,f
 12458  07E7  30FF               	movlw	255
 12459  07E8  05A2               	andwf	___ftpack@arg+2,f
 12460  07E9                     l2991:	
 12461  07E9  1003               	clrc
 12462  07EA  0CA3               	rrf	___ftpack@exp,f
 12463  07EB  0823               	movf	___ftpack@exp,w
 12464  07EC  00A5               	movwf	??___ftpack
 12465  07ED  01A6               	clrf	??___ftpack+1
 12466  07EE  01A7               	clrf	??___ftpack+2
 12467  07EF  3010               	movlw	16
 12468  07F0                     u3625:	
 12469  07F0  35A5               	lslf	??___ftpack,f
 12470  07F1  0DA6               	rlf	??___ftpack+1,f
 12471  07F2  0DA7               	rlf	??___ftpack+2,f
 12472  07F3  0B89               	decfsz	9,f
 12473  07F4  2FF0               	goto	u3625
 12474  07F5  0825               	movf	??___ftpack,w
 12475  07F6  04A0               	iorwf	___ftpack@arg,f
 12476  07F7  0826               	movf	??___ftpack+1,w
 12477  07F8  04A1               	iorwf	___ftpack@arg+1,f
 12478  07F9  0827               	movf	??___ftpack+2,w
 12479  07FA  04A2               	iorwf	___ftpack@arg+2,f
 12480  07FB  0824               	movf	___ftpack@sign,w
 12481  07FC  1903               	btfsc	3,2
 12482  07FD  0008               	return
 12483  07FE  17A2               	bsf	___ftpack@arg+2,7
 12484  07FF  0008               	return
 12485  0800                     __end_of___ftpack:	
 12486                           
 12487                           	psect	text73
 12488  0B59                     __ptext73:	
 12489 ;; *************** function _setDimmerLights *****************
 12490 ;; Defined at:
 12491 ;;		line 610 in file "../src/Dimmer_B1.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;  lights          1    wreg     unsigned char 
 12494 ;;  status          1    4[BANK0 ] unsigned char 
 12495 ;; Auto vars:     Size  Location     Type
 12496 ;;  lights          1    6[BANK0 ] unsigned char 
 12497 ;; Return value:  Size  Location     Type
 12498 ;;		None               void
 12499 ;; Registers used:
 12500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12501 ;; Tracked objects:
 12502 ;;		On entry : 0/0
 12503 ;;		On exit  : 0/0
 12504 ;;		Unchanged: 0/0
 12505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12506 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12510 ;;Total ram usage:        3 bytes
 12511 ;; Hardware stack levels used:    1
 12512 ;; Hardware stack levels required when called:    7
 12513 ;; This function calls:
 12514 ;;		_DimmerLightsPointSelect
 12515 ;;		_setLED
 12516 ;;		_setMemory_GO
 12517 ;; This function is called by:
 12518 ;;		_setDimmerLights_Main
 12519 ;;		_setControl_Lights_Table
 12520 ;; This function uses a non-reentrant model
 12521 ;;
 12522                           
 12523                           
 12524                           ;psect for function _setDimmerLights
 12525  0B59                     _setDimmerLights:	
 12526                           
 12527                           ;incstack = 0
 12528                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12529                           ;setDimmerLights@lights stored from wreg
 12530  0B59  0020               	movlb	0	; select bank0
 12531  0B5A  00A6               	movwf	setDimmerLights@lights
 12532                           
 12533                           ;Dimmer_B1.c: 611: DimmerLightsPointSelect(lights);
 12534  0B5B  0826               	movf	setDimmerLights@lights,w
 12535  0B5C  3191  2134  318B   	fcall	_DimmerLightsPointSelect
 12536                           
 12537                           ;Dimmer_B1.c: 612: Dimmer->Load = lights;
 12538  0B5F  0020               	movlb	0	; select bank0
 12539  0B60  0826               	movf	setDimmerLights@lights,w
 12540  0B61  00A5               	movwf	??_setDimmerLights
 12541  0B62  0021               	movlb	1	; select bank1
 12542  0B63  0A39               	incf	_Dimmer^(0+128),w
 12543  0B64  0086               	movwf	6
 12544  0B65  0187               	clrf	7
 12545  0B66  0020               	movlb	0	; select bank0
 12546  0B67  0825               	movf	??_setDimmerLights,w
 12547  0B68  0081               	movwf	1
 12548                           
 12549                           ;Dimmer_B1.c: 613: if (status) {
 12550  0B69  0824               	movf	setDimmerLights@status,w
 12551  0B6A  1903               	btfsc	3,2
 12552  0B6B  2BAC               	goto	l5859
 12553                           
 12554                           ;Dimmer_B1.c: 614: DimmerLights->Status = 1;
 12555  0B6C  0878               	movf	_DimmerLights,w
 12556  0B6D  0086               	movwf	6
 12557  0B6E  3001               	movlw	1	; select bank2/3
 12558  0B6F  0087               	movwf	7
 12559  0B70  1681               	bsf	1,5
 12560                           
 12561                           ;Dimmer_B1.c: 615: setLED(lights, 0);
 12562  0B71  01A2               	clrf	setLED@command
 12563  0B72  0826               	movf	setDimmerLights@lights,w
 12564  0B73  318A  2275  318B   	fcall	_setLED
 12565                           
 12566                           ;Dimmer_B1.c: 617: ;;
 12567                           ;Dimmer_B1.c: 619: DimmerLights->Signal = 1;
 12568  0B76  0878               	movf	_DimmerLights,w
 12569  0B77  0086               	movwf	6
 12570  0B78  3001               	movlw	1	; select bank2/3
 12571  0B79  0087               	movwf	7
 12572  0B7A  1481               	bsf	1,1
 12573                           
 12574                           ;Dimmer_B1.c: 620: DimmerLights->DimmingTimeValue = 6;
 12575  0B7B  3006               	movlw	6
 12576  0B7C  0020               	movlb	0	; select bank0
 12577  0B7D  00A5               	movwf	??_setDimmerLights
 12578  0B7E  0878               	movf	_DimmerLights,w
 12579  0B7F  3E02               	addlw	2
 12580  0B80  0086               	movwf	6
 12581  0B81  3001               	movlw	1	; select bank2/3
 12582  0B82  0087               	movwf	7
 12583  0B83  0825               	movf	??_setDimmerLights,w
 12584  0B84  0081               	movwf	1
 12585                           
 12586                           ;Dimmer_B1.c: 622: if (!DimmerLights->StatusFlag) {
 12587  0B85  0878               	movf	_DimmerLights,w
 12588  0B86  0086               	movwf	6
 12589  0B87  3001               	movlw	1	; select bank2/3
 12590  0B88  0087               	movwf	7
 12591  0B89  1B01               	btfsc	1,6
 12592  0B8A  0008               	return
 12593                           
 12594                           ;Dimmer_B1.c: 623: DimmerLights->StatusFlag = 1;
 12595  0B8B  0878               	movf	_DimmerLights,w
 12596  0B8C  0086               	movwf	6
 12597  0B8D  3001               	movlw	1	; select bank2/3
 12598  0B8E  0087               	movwf	7
 12599  0B8F  1701               	bsf	1,6
 12600                           
 12601                           ;Dimmer_B1.c: 624: ;;
 12602                           ;Dimmer_B1.c: 625: setMemory_GO(0);
 12603  0B90  3000               	movlw	0
 12604  0B91  3192  2236         	fcall	_setMemory_GO
 12605                           
 12606                           ;Dimmer_B1.c: 628: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12607  0B93  0878               	movf	_DimmerLights,w
 12608  0B94  3E05               	addlw	5
 12609  0B95  0086               	movwf	6
 12610  0B96  3001               	movlw	1	; select bank2/3
 12611  0B97  0087               	movwf	7
 12612  0B98  0801               	movf	1,w
 12613  0B99  0020               	movlb	0	; select bank0
 12614  0B9A  00A5               	movwf	??_setDimmerLights
 12615  0B9B  0878               	movf	_DimmerLights,w
 12616  0B9C  3E04               	addlw	4
 12617  0B9D  0086               	movwf	6
 12618  0B9E  3001               	movlw	1	; select bank2/3
 12619  0B9F  0087               	movwf	7
 12620  0BA0  0825               	movf	??_setDimmerLights,w
 12621  0BA1  0081               	movwf	1
 12622                           
 12623                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 12624  0BA2  3004               	movlw	4
 12625  0BA3  00A5               	movwf	??_setDimmerLights
 12626  0BA4  0878               	movf	_DimmerLights,w
 12627  0BA5  3E04               	addlw	4
 12628  0BA6  0086               	movwf	6
 12629  0BA7  3001               	movlw	1	; select bank2/3
 12630  0BA8  0087               	movwf	7
 12631  0BA9  0825               	movf	??_setDimmerLights,w
 12632  0BAA  0081               	movwf	1
 12633                           
 12634                           ;Dimmer_B1.c: 634: }
 12635                           ;Dimmer_B1.c: 635: } else {
 12636  0BAB  0008               	return
 12637  0BAC                     l5859:	
 12638                           
 12639                           ;Dimmer_B1.c: 637: DimmerLights->Status = 0;
 12640  0BAC  0878               	movf	_DimmerLights,w
 12641  0BAD  0086               	movwf	6
 12642  0BAE  3001               	movlw	1	; select bank2/3
 12643  0BAF  0087               	movwf	7
 12644  0BB0  1281               	bcf	1,5
 12645                           
 12646                           ;Dimmer_B1.c: 639: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12647  0BB1  0878               	movf	_DimmerLights,w
 12648  0BB2  3E06               	addlw	6
 12649  0BB3  0086               	movwf	6
 12650  0BB4  3001               	movlw	1	; select bank2/3
 12651  0BB5  0087               	movwf	7
 12652  0BB6  0801               	movf	1,w
 12653  0BB7  00A5               	movwf	??_setDimmerLights
 12654  0BB8  0878               	movf	_DimmerLights,w
 12655  0BB9  3E04               	addlw	4
 12656  0BBA  0086               	movwf	6
 12657  0BBB  3001               	movlw	1	; select bank2/3
 12658  0BBC  0087               	movwf	7
 12659  0BBD  0825               	movf	??_setDimmerLights,w
 12660  0BBE  0081               	movwf	1
 12661                           
 12662                           ;Dimmer_B1.c: 646: DimmerLights->Signal = 1;
 12663  0BBF  0878               	movf	_DimmerLights,w
 12664  0BC0  0086               	movwf	6
 12665  0BC1  3001               	movlw	1	; select bank2/3
 12666  0BC2  0087               	movwf	7
 12667  0BC3  1481               	bsf	1,1
 12668                           
 12669                           ;Dimmer_B1.c: 647: DimmerLights->AdjFlag = 0;
 12670  0BC4  0878               	movf	_DimmerLights,w
 12671  0BC5  0086               	movwf	6
 12672  0BC6  3001               	movlw	1	; select bank2/3
 12673  0BC7  0087               	movwf	7
 12674  0BC8  1181               	bcf	1,3
 12675                           
 12676                           ;Dimmer_B1.c: 648: DimmerLights->AdjStatus = 0;
 12677  0BC9  0878               	movf	_DimmerLights,w
 12678  0BCA  0086               	movwf	6
 12679  0BCB  3001               	movlw	1	; select bank2/3
 12680  0BCC  0087               	movwf	7
 12681  0BCD  1201               	bcf	1,4
 12682                           
 12683                           ;Dimmer_B1.c: 649: DimmerLights->DimmingTimeValue = 6;
 12684  0BCE  3006               	movlw	6
 12685  0BCF  00A5               	movwf	??_setDimmerLights
 12686  0BD0  0878               	movf	_DimmerLights,w
 12687  0BD1  3E02               	addlw	2
 12688  0BD2  0086               	movwf	6
 12689  0BD3  3001               	movlw	1	; select bank2/3
 12690  0BD4  0087               	movwf	7
 12691  0BD5  0825               	movf	??_setDimmerLights,w
 12692  0BD6  0081               	movwf	1
 12693  0BD7  0008               	return
 12694  0BD8                     __end_of_setDimmerLights:	
 12695                           
 12696                           	psect	text74
 12697  0A75                     __ptext74:	
 12698 ;; *************** function _setLED *****************
 12699 ;; Defined at:
 12700 ;;		line 74 in file "../src/LED_B1.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  led             1    wreg     unsigned char 
 12703 ;;  command         1    2[BANK0 ] unsigned char 
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;  led             1    3[BANK0 ] unsigned char 
 12706 ;; Return value:  Size  Location     Type
 12707 ;;		None               void
 12708 ;; Registers used:
 12709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12715 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;Total ram usage:        2 bytes
 12720 ;; Hardware stack levels used:    1
 12721 ;; Hardware stack levels required when called:    6
 12722 ;; This function calls:
 12723 ;;		_LedPointSelect
 12724 ;; This function is called by:
 12725 ;;		_setDimmerLights
 12726 ;;		_setLED_Initialization
 12727 ;;		_setSw_Initialization
 12728 ;;		_setDimmerLights_ERROR
 12729 ;; This function uses a non-reentrant model
 12730 ;;
 12731                           
 12732                           
 12733                           ;psect for function _setLED
 12734  0A75                     _setLED:	
 12735                           
 12736                           ;incstack = 0
 12737                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12738                           ;setLED@led stored from wreg
 12739  0A75  0020               	movlb	0	; select bank0
 12740  0A76  00A3               	movwf	setLED@led
 12741                           
 12742                           ;LED_B1.c: 76: LedPointSelect(led);
 12743  0A77  0823               	movf	setLED@led,w
 12744  0A78  3193  23E7  318A   	fcall	_LedPointSelect
 12745                           
 12746                           ;LED_B1.c: 77: if(command == 0)
 12747  0A7B  0020               	movlb	0	; select bank0
 12748  0A7C  08A2               	movf	setLED@command,f
 12749  0A7D  1D03               	skipz
 12750  0A7E  2A97               	goto	l5697
 12751                           
 12752                           ;LED_B1.c: 78: {
 12753                           ;LED_B1.c: 80: if(led == 1)
 12754  0A7F  0823               	movf	setLED@led,w
 12755  0A80  3A01               	xorlw	1
 12756  0A81  1D03               	skipz
 12757  0A82  2A85               	goto	l5685
 12758                           
 12759                           ;LED_B1.c: 81: {
 12760                           ;LED_B1.c: 85: RC7=1;
 12761  0A83  178E               	bsf	14,7	;volatile
 12762                           
 12763                           ;LED_B1.c: 87: }
 12764  0A84  0008               	return
 12765  0A85                     l5685:	
 12766                           
 12767                           ;LED_B1.c: 90: else if(led == 2)
 12768  0A85  0823               	movf	setLED@led,w
 12769  0A86  3A02               	xorlw	2
 12770  0A87  1D03               	skipz
 12771  0A88  2A8B               	goto	l5689
 12772                           
 12773                           ;LED_B1.c: 91: {
 12774                           ;LED_B1.c: 95: RA3=1;
 12775  0A89  158C               	bsf	12,3	;volatile
 12776                           
 12777                           ;LED_B1.c: 97: }
 12778  0A8A  0008               	return
 12779  0A8B                     l5689:	
 12780                           
 12781                           ;LED_B1.c: 100: else if(led == 3)
 12782  0A8B  0823               	movf	setLED@led,w
 12783  0A8C  3A03               	xorlw	3
 12784  0A8D  1D03               	skipz
 12785  0A8E  2A91               	goto	l5693
 12786                           
 12787                           ;LED_B1.c: 101: {
 12788                           ;LED_B1.c: 105: RC6=1;
 12789  0A8F  170E               	bsf	14,6	;volatile
 12790                           
 12791                           ;LED_B1.c: 107: }
 12792  0A90  0008               	return
 12793  0A91                     l5693:	
 12794                           
 12795                           ;LED_B1.c: 110: else if(led == 99)
 12796  0A91  0823               	movf	setLED@led,w
 12797  0A92  3A63               	xorlw	99
 12798  0A93  1D03               	skipz
 12799  0A94  0008               	return
 12800                           
 12801                           ;LED_B1.c: 111: {
 12802                           ;LED_B1.c: 115: RB5=1;
 12803  0A95  168D               	bsf	13,5	;volatile
 12804                           
 12805                           ;LED_B1.c: 117: }
 12806                           ;LED_B1.c: 119: }
 12807  0A96  0008               	return
 12808  0A97                     l5697:	
 12809                           
 12810                           ;LED_B1.c: 120: else if(command == 1)
 12811  0A97  0822               	movf	setLED@command,w
 12812  0A98  3A01               	xorlw	1
 12813  0A99  1D03               	skipz
 12814  0A9A  2AB3               	goto	l5715
 12815                           
 12816                           ;LED_B1.c: 121: {
 12817                           ;LED_B1.c: 123: if(led == 1)
 12818  0A9B  0823               	movf	setLED@led,w
 12819  0A9C  3A01               	xorlw	1
 12820  0A9D  1D03               	skipz
 12821  0A9E  2AA1               	goto	l5703
 12822                           
 12823                           ;LED_B1.c: 124: {
 12824                           ;LED_B1.c: 128: RC7=0;
 12825  0A9F  138E               	bcf	14,7	;volatile
 12826                           
 12827                           ;LED_B1.c: 130: }
 12828  0AA0  0008               	return
 12829  0AA1                     l5703:	
 12830                           
 12831                           ;LED_B1.c: 133: else if(led == 2)
 12832  0AA1  0823               	movf	setLED@led,w
 12833  0AA2  3A02               	xorlw	2
 12834  0AA3  1D03               	skipz
 12835  0AA4  2AA7               	goto	l5707
 12836                           
 12837                           ;LED_B1.c: 134: {
 12838                           ;LED_B1.c: 138: RA3=0;
 12839  0AA5  118C               	bcf	12,3	;volatile
 12840                           
 12841                           ;LED_B1.c: 140: }
 12842  0AA6  0008               	return
 12843  0AA7                     l5707:	
 12844                           
 12845                           ;LED_B1.c: 143: else if(led == 3)
 12846  0AA7  0823               	movf	setLED@led,w
 12847  0AA8  3A03               	xorlw	3
 12848  0AA9  1D03               	skipz
 12849  0AAA  2AAD               	goto	l5711
 12850                           
 12851                           ;LED_B1.c: 144: {
 12852                           ;LED_B1.c: 148: RC6=0;
 12853  0AAB  130E               	bcf	14,6	;volatile
 12854                           
 12855                           ;LED_B1.c: 150: }
 12856  0AAC  0008               	return
 12857  0AAD                     l5711:	
 12858                           
 12859                           ;LED_B1.c: 153: else if(led == 99)
 12860  0AAD  0823               	movf	setLED@led,w
 12861  0AAE  3A63               	xorlw	99
 12862  0AAF  1D03               	skipz
 12863  0AB0  0008               	return
 12864                           
 12865                           ;LED_B1.c: 154: {
 12866                           ;LED_B1.c: 158: RB5=0;
 12867  0AB1  128D               	bcf	13,5	;volatile
 12868                           
 12869                           ;LED_B1.c: 160: }
 12870                           ;LED_B1.c: 162: }
 12871  0AB2  0008               	return
 12872  0AB3                     l5715:	
 12873                           
 12874                           ;LED_B1.c: 163: else if(command == 10)
 12875  0AB3  0822               	movf	setLED@command,w
 12876  0AB4  3A0A               	xorlw	10
 12877  0AB5  1D03               	skipz
 12878  0AB6  2ADB               	goto	l5735
 12879                           
 12880                           ;LED_B1.c: 164: {
 12881                           ;LED_B1.c: 165: LED->GO=0;
 12882  0AB7  0021               	movlb	1	; select bank1
 12883  0AB8  083E               	movf	_LED^(0+128),w
 12884  0AB9  0086               	movwf	6
 12885  0ABA  0187               	clrf	7
 12886  0ABB  1081               	bcf	1,1
 12887                           
 12888                           ;LED_B1.c: 166: LED->Time=0;
 12889  0ABC  0A3E               	incf	_LED^(0+128),w
 12890  0ABD  0086               	movwf	6
 12891  0ABE  0187               	clrf	7
 12892  0ABF  3000               	movlw	0
 12893  0AC0  3FC0               	movwi [0]fsr1
 12894  0AC1  3FC1               	movwi [1]fsr1
 12895                           
 12896                           ;LED_B1.c: 168: if(led == 1)
 12897  0AC2  0020               	movlb	0	; select bank0
 12898  0AC3  0823               	movf	setLED@led,w
 12899  0AC4  3A01               	xorlw	1
 12900  0AC5  1D03               	skipz
 12901  0AC6  2AC9               	goto	l5723
 12902                           
 12903                           ;LED_B1.c: 169: {
 12904                           ;LED_B1.c: 173: RC7=1;
 12905  0AC7  178E               	bsf	14,7	;volatile
 12906                           
 12907                           ;LED_B1.c: 175: }
 12908  0AC8  0008               	return
 12909  0AC9                     l5723:	
 12910                           
 12911                           ;LED_B1.c: 178: else if(led == 2)
 12912  0AC9  0823               	movf	setLED@led,w
 12913  0ACA  3A02               	xorlw	2
 12914  0ACB  1D03               	skipz
 12915  0ACC  2ACF               	goto	l5727
 12916                           
 12917                           ;LED_B1.c: 179: {
 12918                           ;LED_B1.c: 183: RA3=1;
 12919  0ACD  158C               	bsf	12,3	;volatile
 12920                           
 12921                           ;LED_B1.c: 185: }
 12922  0ACE  0008               	return
 12923  0ACF                     l5727:	
 12924                           
 12925                           ;LED_B1.c: 188: else if(led == 3)
 12926  0ACF  0823               	movf	setLED@led,w
 12927  0AD0  3A03               	xorlw	3
 12928  0AD1  1D03               	skipz
 12929  0AD2  2AD5               	goto	l5731
 12930                           
 12931                           ;LED_B1.c: 189: {
 12932                           ;LED_B1.c: 193: RC6=1;
 12933  0AD3  170E               	bsf	14,6	;volatile
 12934                           
 12935                           ;LED_B1.c: 195: }
 12936  0AD4  0008               	return
 12937  0AD5                     l5731:	
 12938                           
 12939                           ;LED_B1.c: 198: else if(led == 99)
 12940  0AD5  0823               	movf	setLED@led,w
 12941  0AD6  3A63               	xorlw	99
 12942  0AD7  1D03               	skipz
 12943  0AD8  0008               	return
 12944                           
 12945                           ;LED_B1.c: 199: {
 12946                           ;LED_B1.c: 203: RB5=1;
 12947  0AD9  168D               	bsf	13,5	;volatile
 12948                           
 12949                           ;LED_B1.c: 205: }
 12950                           ;LED_B1.c: 207: }
 12951  0ADA  0008               	return
 12952  0ADB                     l5735:	
 12953                           
 12954                           ;LED_B1.c: 208: else if(command == 11)
 12955  0ADB  0822               	movf	setLED@command,w
 12956  0ADC  3A0B               	xorlw	11
 12957  0ADD  1D03               	skipz
 12958  0ADE  0008               	return
 12959                           
 12960                           ;LED_B1.c: 209: {
 12961                           ;LED_B1.c: 210: LED->GO=1;
 12962  0ADF  0021               	movlb	1	; select bank1
 12963  0AE0  083E               	movf	_LED^(0+128),w
 12964  0AE1  0086               	movwf	6
 12965  0AE2  0187               	clrf	7
 12966  0AE3  1481               	bsf	1,1
 12967  0AE4  0008               	return
 12968  0AE5                     __end_of_setLED:	
 12969                           
 12970                           	psect	text75
 12971  13E7                     __ptext75:	
 12972 ;; *************** function _LedPointSelect *****************
 12973 ;; Defined at:
 12974 ;;		line 7 in file "../src/LED_B1.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;  led             1    wreg     unsigned char 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  led             1    1[BANK0 ] unsigned char 
 12979 ;; Return value:  Size  Location     Type
 12980 ;;		None               void
 12981 ;; Registers used:
 12982 ;;		wreg
 12983 ;; Tracked objects:
 12984 ;;		On entry : 0/0
 12985 ;;		On exit  : 0/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;Total ram usage:        2 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    5
 12995 ;; This function calls:
 12996 ;;		Nothing
 12997 ;; This function is called by:
 12998 ;;		_setLED_Initialization
 12999 ;;		_setLED
 13000 ;;		_setLED_Main
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           
 13005                           ;psect for function _LedPointSelect
 13006  13E7                     _LedPointSelect:	
 13007                           
 13008                           ;incstack = 0
 13009                           ; Regs used in _LedPointSelect: [wreg]
 13010                           ;LedPointSelect@led stored from wreg
 13011  13E7  0020               	movlb	0	; select bank0
 13012  13E8  00A1               	movwf	LedPointSelect@led
 13013                           
 13014                           ;LED_B1.c: 10: if(led == 1)
 13015  13E9  0821               	movf	LedPointSelect@led,w
 13016  13EA  3A01               	xorlw	1
 13017  13EB  1D03               	skipz
 13018  13EC  2BF3               	goto	l5577
 13019                           
 13020                           ;LED_B1.c: 11: {
 13021                           ;LED_B1.c: 12: LED=&VarLED1;
 13022  13ED  30D8               	movlw	_VarLED1& (0+255)
 13023  13EE  00A0               	movwf	??_LedPointSelect
 13024  13EF  0820               	movf	??_LedPointSelect,w
 13025  13F0  0021               	movlb	1	; select bank1
 13026  13F1  00BE               	movwf	_LED^(0+128)
 13027                           
 13028                           ;LED_B1.c: 13: }
 13029  13F2  0008               	return
 13030  13F3                     l5577:	
 13031                           
 13032                           ;LED_B1.c: 16: else if(led == 2)
 13033  13F3  0020               	movlb	0	; select bank0
 13034  13F4  0821               	movf	LedPointSelect@led,w
 13035  13F5  3A02               	xorlw	2
 13036  13F6  1D03               	skipz
 13037  13F7  2BFE               	goto	l5581
 13038                           
 13039                           ;LED_B1.c: 17: {
 13040                           ;LED_B1.c: 18: LED=&VarLED2;
 13041  13F8  30DC               	movlw	_VarLED2& (0+255)
 13042  13F9  00A0               	movwf	??_LedPointSelect
 13043  13FA  0820               	movf	??_LedPointSelect,w
 13044  13FB  0021               	movlb	1	; select bank1
 13045  13FC  00BE               	movwf	_LED^(0+128)
 13046                           
 13047                           ;LED_B1.c: 19: }
 13048  13FD  0008               	return
 13049  13FE                     l5581:	
 13050                           
 13051                           ;LED_B1.c: 22: else if(led == 3)
 13052  13FE  0020               	movlb	0	; select bank0
 13053  13FF  0821               	movf	LedPointSelect@led,w
 13054  1400  3A03               	xorlw	3
 13055  1401  1D03               	skipz
 13056  1402  2C09               	goto	l5585
 13057                           
 13058                           ;LED_B1.c: 23: {
 13059                           ;LED_B1.c: 24: LED=&VarLED3;
 13060  1403  30E0               	movlw	_VarLED3& (0+255)
 13061  1404  00A0               	movwf	??_LedPointSelect
 13062  1405  0820               	movf	??_LedPointSelect,w
 13063  1406  0021               	movlb	1	; select bank1
 13064  1407  00BE               	movwf	_LED^(0+128)
 13065                           
 13066                           ;LED_B1.c: 25: }
 13067  1408  0008               	return
 13068  1409                     l5585:	
 13069                           
 13070                           ;LED_B1.c: 28: else if(led == 99)
 13071  1409  0020               	movlb	0	; select bank0
 13072  140A  0821               	movf	LedPointSelect@led,w
 13073  140B  3A63               	xorlw	99
 13074  140C  1D03               	skipz
 13075  140D  0008               	return
 13076                           
 13077                           ;LED_B1.c: 29: {
 13078                           ;LED_B1.c: 30: LED=&VarErrLED;
 13079  140E  30D4               	movlw	_VarErrLED& (0+255)
 13080  140F  00A0               	movwf	??_LedPointSelect
 13081  1410  0820               	movf	??_LedPointSelect,w
 13082  1411  0021               	movlb	1	; select bank1
 13083  1412  00BE               	movwf	_LED^(0+128)
 13084  1413  0008               	return
 13085  1414                     __end_of_LedPointSelect:	
 13086                           
 13087                           	psect	text76
 13088  0CE6                     __ptext76:	
 13089 ;; *************** function _setBuz *****************
 13090 ;; Defined at:
 13091 ;;		line 30 in file "../src/Buzzer_B1.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  count           1    wreg     unsigned char 
 13094 ;;  time            2    9[BANK0 ] int 
 13095 ;; Auto vars:     Size  Location     Type
 13096 ;;  count           1   12[BANK0 ] unsigned char 
 13097 ;; Return value:  Size  Location     Type
 13098 ;;		None               void
 13099 ;; Registers used:
 13100 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13101 ;; Tracked objects:
 13102 ;;		On entry : 0/0
 13103 ;;		On exit  : 0/0
 13104 ;;		Unchanged: 0/0
 13105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;Total ram usage:        4 bytes
 13111 ;; Hardware stack levels used:    1
 13112 ;; Hardware stack levels required when called:    6
 13113 ;; This function calls:
 13114 ;;		___awdiv
 13115 ;; This function is called by:
 13116 ;;		_setDimmerLights_Main
 13117 ;;		_my_Main
 13118 ;;		_setLog_Code
 13119 ;;		_setControl_Lights_Table
 13120 ;;		_setRFSW_Control
 13121 ;;		_setSw_Main
 13122 ;;		_Sw_DimmerOnFunc
 13123 ;;		_DimmerLights_Exceptions
 13124 ;; This function uses a non-reentrant model
 13125 ;;
 13126                           
 13127                           
 13128                           ;psect for function _setBuz
 13129  0CE6                     _setBuz:	
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13133                           ;setBuz@count stored from wreg
 13134  0CE6  0020               	movlb	0	; select bank0
 13135  0CE7  00AC               	movwf	setBuz@count
 13136                           
 13137                           ;Buzzer_B1.c: 31: time /=10;
 13138  0CE8  300A               	movlw	10
 13139  0CE9  00A0               	movwf	___awdiv@divisor
 13140  0CEA  3000               	movlw	0
 13141  0CEB  00A1               	movwf	___awdiv@divisor+1
 13142  0CEC  082A               	movf	setBuz@time+1,w
 13143  0CED  01A3               	clrf	___awdiv@dividend+1
 13144  0CEE  07A3               	addwf	___awdiv@dividend+1,f
 13145  0CEF  0829               	movf	setBuz@time,w
 13146  0CF0  01A2               	clrf	___awdiv@dividend
 13147  0CF1  07A2               	addwf	___awdiv@dividend,f
 13148  0CF2  3197  2751  318C   	fcall	___awdiv
 13149  0CF5  0020               	movlb	0	; select bank0
 13150  0CF6  0821               	movf	?___awdiv+1,w
 13151  0CF7  01AA               	clrf	setBuz@time+1
 13152  0CF8  07AA               	addwf	setBuz@time+1,f
 13153  0CF9  0820               	movf	?___awdiv,w
 13154  0CFA  01A9               	clrf	setBuz@time
 13155  0CFB  07A9               	addwf	setBuz@time,f
 13156                           
 13157                           ;Buzzer_B1.c: 32: if (Buz->Enable) {
 13158  0CFC  0021               	movlb	1	; select bank1
 13159  0CFD  0837               	movf	_Buz^(0+128),w
 13160  0CFE  0086               	movwf	6
 13161  0CFF  3001               	movlw	1	; select bank2/3
 13162  0D00  0087               	movwf	7
 13163  0D01  1C01               	btfss	1,0
 13164  0D02  0008               	return
 13165                           
 13166                           ;Buzzer_B1.c: 33: if (!Buz->GO) {
 13167  0D03  0837               	movf	_Buz^(0+128),w
 13168  0D04  0086               	movwf	6
 13169  0D05  3001               	movlw	1	; select bank2/3
 13170  0D06  0087               	movwf	7
 13171  0D07  1881               	btfsc	1,1
 13172  0D08  2D27               	goto	l5663
 13173                           
 13174                           ;Buzzer_B1.c: 34: Buz->GO = 1;
 13175  0D09  0837               	movf	_Buz^(0+128),w
 13176  0D0A  0086               	movwf	6
 13177  0D0B  3001               	movlw	1	; select bank2/3
 13178  0D0C  0087               	movwf	7
 13179  0D0D  1481               	bsf	1,1
 13180                           
 13181                           ;Buzzer_B1.c: 35: Buz->Count = count;
 13182  0D0E  0020               	movlb	0	; select bank0
 13183  0D0F  082C               	movf	setBuz@count,w
 13184  0D10  00AB               	movwf	??_setBuz
 13185  0D11  0021               	movlb	1	; select bank1
 13186  0D12  0837               	movf	_Buz^(0+128),w
 13187  0D13  3E03               	addlw	3
 13188  0D14  0086               	movwf	6
 13189  0D15  3001               	movlw	1	; select bank2/3
 13190  0D16  0087               	movwf	7
 13191  0D17  0020               	movlb	0	; select bank0
 13192  0D18  082B               	movf	??_setBuz,w
 13193  0D19  0081               	movwf	1
 13194                           
 13195                           ;Buzzer_B1.c: 36: Buz->TimeValue = time;
 13196  0D1A  0021               	movlb	1	; select bank1
 13197  0D1B  0837               	movf	_Buz^(0+128),w
 13198  0D1C  3E06               	addlw	6
 13199  0D1D  0086               	movwf	6
 13200  0D1E  3001               	movlw	1	; select bank2/3
 13201  0D1F  0087               	movwf	7
 13202  0D20  0020               	movlb	0	; select bank0
 13203  0D21  0829               	movf	setBuz@time,w
 13204  0D22  3FC0               	movwi [0]fsr1
 13205  0D23  082A               	movf	setBuz@time+1,w
 13206  0D24  3FC1               	movwi [1]fsr1
 13207                           
 13208                           ;Buzzer_B1.c: 37: RB3 = 1;
 13209  0D25  158D               	bsf	13,3	;volatile
 13210                           
 13211                           ;Buzzer_B1.c: 38: } else {
 13212  0D26  0008               	return
 13213  0D27                     l5663:	
 13214                           
 13215                           ;Buzzer_B1.c: 39: if (!Buz->BufferStatus1) {
 13216  0D27  0021               	movlb	1	; select bank1
 13217  0D28  0837               	movf	_Buz^(0+128),w
 13218  0D29  0086               	movwf	6
 13219  0D2A  3001               	movlw	1	; select bank2/3
 13220  0D2B  0087               	movwf	7
 13221  0D2C  1981               	btfsc	1,3
 13222  0D2D  2D4B               	goto	l5667
 13223                           
 13224                           ;Buzzer_B1.c: 40: Buz->BufferStatus1 = 1;
 13225  0D2E  0837               	movf	_Buz^(0+128),w
 13226  0D2F  0086               	movwf	6
 13227  0D30  3001               	movlw	1	; select bank2/3
 13228  0D31  0087               	movwf	7
 13229  0D32  1581               	bsf	1,3
 13230                           
 13231                           ;Buzzer_B1.c: 41: Buz->CountBuffer1 = count;
 13232  0D33  0020               	movlb	0	; select bank0
 13233  0D34  082C               	movf	setBuz@count,w
 13234  0D35  00AB               	movwf	??_setBuz
 13235  0D36  0021               	movlb	1	; select bank1
 13236  0D37  0837               	movf	_Buz^(0+128),w
 13237  0D38  3E04               	addlw	4
 13238  0D39  0086               	movwf	6
 13239  0D3A  3001               	movlw	1	; select bank2/3
 13240  0D3B  0087               	movwf	7
 13241  0D3C  0020               	movlb	0	; select bank0
 13242  0D3D  082B               	movf	??_setBuz,w
 13243  0D3E  0081               	movwf	1
 13244                           
 13245                           ;Buzzer_B1.c: 42: Buz->TimeValueBuffer1 = time;
 13246  0D3F  0021               	movlb	1	; select bank1
 13247  0D40  0837               	movf	_Buz^(0+128),w
 13248  0D41  3E08               	addlw	8
 13249  0D42  0086               	movwf	6
 13250  0D43  3001               	movlw	1	; select bank2/3
 13251  0D44  0087               	movwf	7
 13252  0D45  0020               	movlb	0	; select bank0
 13253  0D46  0829               	movf	setBuz@time,w
 13254  0D47  3FC0               	movwi [0]fsr1
 13255  0D48  082A               	movf	setBuz@time+1,w
 13256  0D49  3FC1               	movwi [1]fsr1
 13257                           
 13258                           ;Buzzer_B1.c: 43: } else if (!Buz->BufferStatus2) {
 13259  0D4A  0008               	return
 13260  0D4B                     l5667:	
 13261  0D4B  0021               	movlb	1	; select bank1
 13262  0D4C  0837               	movf	_Buz^(0+128),w
 13263  0D4D  0086               	movwf	6
 13264  0D4E  3001               	movlw	1	; select bank2/3
 13265  0D4F  0087               	movwf	7
 13266  0D50  1A01               	btfsc	1,4
 13267  0D51  0008               	return
 13268                           
 13269                           ;Buzzer_B1.c: 44: Buz->BufferStatus2 = 1;
 13270  0D52  0837               	movf	_Buz^(0+128),w
 13271  0D53  0086               	movwf	6
 13272  0D54  3001               	movlw	1	; select bank2/3
 13273  0D55  0087               	movwf	7
 13274  0D56  1601               	bsf	1,4
 13275                           
 13276                           ;Buzzer_B1.c: 45: Buz->CountBuffer2 = count;
 13277  0D57  0020               	movlb	0	; select bank0
 13278  0D58  082C               	movf	setBuz@count,w
 13279  0D59  00AB               	movwf	??_setBuz
 13280  0D5A  0021               	movlb	1	; select bank1
 13281  0D5B  0837               	movf	_Buz^(0+128),w
 13282  0D5C  3E05               	addlw	5
 13283  0D5D  0086               	movwf	6
 13284  0D5E  3001               	movlw	1	; select bank2/3
 13285  0D5F  0087               	movwf	7
 13286  0D60  0020               	movlb	0	; select bank0
 13287  0D61  082B               	movf	??_setBuz,w
 13288  0D62  0081               	movwf	1
 13289                           
 13290                           ;Buzzer_B1.c: 46: Buz->TimeValueBuffer2 = time;
 13291  0D63  0021               	movlb	1	; select bank1
 13292  0D64  0837               	movf	_Buz^(0+128),w
 13293  0D65  3E0A               	addlw	10
 13294  0D66  0086               	movwf	6
 13295  0D67  3001               	movlw	1	; select bank2/3
 13296  0D68  0087               	movwf	7
 13297  0D69  0020               	movlb	0	; select bank0
 13298  0D6A  0829               	movf	setBuz@time,w
 13299  0D6B  3FC0               	movwi [0]fsr1
 13300  0D6C  082A               	movf	setBuz@time+1,w
 13301  0D6D  3FC1               	movwi [1]fsr1
 13302  0D6E  0008               	return
 13303  0D6F                     __end_of_setBuz:	
 13304                           
 13305                           	psect	text77
 13306  1751                     __ptext77:	
 13307 ;; *************** function ___awdiv *****************
 13308 ;; Defined at:
 13309 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13310 ;; Parameters:    Size  Location     Type
 13311 ;;  divisor         2    0[BANK0 ] int 
 13312 ;;  dividend        2    2[BANK0 ] int 
 13313 ;; Auto vars:     Size  Location     Type
 13314 ;;  quotient        2    7[BANK0 ] int 
 13315 ;;  sign            1    6[BANK0 ] unsigned char 
 13316 ;;  counter         1    5[BANK0 ] unsigned char 
 13317 ;; Return value:  Size  Location     Type
 13318 ;;                  2    0[BANK0 ] int 
 13319 ;; Registers used:
 13320 ;;		wreg, status,2, status,0
 13321 ;; Tracked objects:
 13322 ;;		On entry : 0/0
 13323 ;;		On exit  : 0/0
 13324 ;;		Unchanged: 0/0
 13325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13326 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;Total ram usage:        9 bytes
 13331 ;; Hardware stack levels used:    1
 13332 ;; Hardware stack levels required when called:    5
 13333 ;; This function calls:
 13334 ;;		Nothing
 13335 ;; This function is called by:
 13336 ;;		_setBuz
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           
 13341                           ;psect for function ___awdiv
 13342  1751                     ___awdiv:	
 13343                           
 13344                           ;incstack = 0
 13345                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13346  1751  0020               	movlb	0	; select bank0
 13347  1752  01A6               	clrf	___awdiv@sign
 13348  1753  1FA1               	btfss	___awdiv@divisor+1,7
 13349  1754  2F5C               	goto	l5617
 13350  1755  09A0               	comf	___awdiv@divisor,f
 13351  1756  09A1               	comf	___awdiv@divisor+1,f
 13352  1757  0AA0               	incf	___awdiv@divisor,f
 13353  1758  1903               	skipnz
 13354  1759  0AA1               	incf	___awdiv@divisor+1,f
 13355  175A  01A6               	clrf	___awdiv@sign
 13356  175B  0AA6               	incf	___awdiv@sign,f
 13357  175C                     l5617:	
 13358  175C  1FA3               	btfss	___awdiv@dividend+1,7
 13359  175D  2F67               	goto	l5623
 13360  175E  09A2               	comf	___awdiv@dividend,f
 13361  175F  09A3               	comf	___awdiv@dividend+1,f
 13362  1760  0AA2               	incf	___awdiv@dividend,f
 13363  1761  1903               	skipnz
 13364  1762  0AA3               	incf	___awdiv@dividend+1,f
 13365  1763  3001               	movlw	1
 13366  1764  00A4               	movwf	??___awdiv
 13367  1765  0824               	movf	??___awdiv,w
 13368  1766  06A6               	xorwf	___awdiv@sign,f
 13369  1767                     l5623:	
 13370  1767  01A7               	clrf	___awdiv@quotient
 13371  1768  01A8               	clrf	___awdiv@quotient+1
 13372  1769  0821               	movf	___awdiv@divisor+1,w
 13373  176A  0420               	iorwf	___awdiv@divisor,w
 13374  176B  1903               	skipnz
 13375  176C  2F96               	goto	l5645
 13376  176D  01A5               	clrf	___awdiv@counter
 13377  176E  0AA5               	incf	___awdiv@counter,f
 13378  176F                     l5633:	
 13379  176F  1BA1               	btfsc	___awdiv@divisor+1,7
 13380  1770  2F7B               	goto	l5635
 13381  1771  3001               	movlw	1
 13382  1772                     u4335:	
 13383  1772  35A0               	lslf	___awdiv@divisor,f
 13384  1773  0DA1               	rlf	___awdiv@divisor+1,f
 13385  1774  0B89               	decfsz	9,f
 13386  1775  2F72               	goto	u4335
 13387  1776  3001               	movlw	1
 13388  1777  00A4               	movwf	??___awdiv
 13389  1778  0824               	movf	??___awdiv,w
 13390  1779  07A5               	addwf	___awdiv@counter,f
 13391  177A  2F6F               	goto	l5633
 13392  177B                     l5635:	
 13393  177B  3001               	movlw	1
 13394  177C                     u4355:	
 13395  177C  35A7               	lslf	___awdiv@quotient,f
 13396  177D  0DA8               	rlf	___awdiv@quotient+1,f
 13397  177E  0B89               	decfsz	9,f
 13398  177F  2F7C               	goto	u4355
 13399  1780  0821               	movf	___awdiv@divisor+1,w
 13400  1781  0223               	subwf	___awdiv@dividend+1,w
 13401  1782  1D03               	skipz
 13402  1783  2F86               	goto	u4365
 13403  1784  0820               	movf	___awdiv@divisor,w
 13404  1785  0222               	subwf	___awdiv@dividend,w
 13405  1786                     u4365:	
 13406  1786  1C03               	skipc
 13407  1787  2F8D               	goto	l5641
 13408  1788  0820               	movf	___awdiv@divisor,w
 13409  1789  02A2               	subwf	___awdiv@dividend,f
 13410  178A  0821               	movf	___awdiv@divisor+1,w
 13411  178B  3BA3               	subwfb	___awdiv@dividend+1,f
 13412  178C  1427               	bsf	___awdiv@quotient,0
 13413  178D                     l5641:	
 13414  178D  3001               	movlw	1
 13415  178E                     u4375:	
 13416  178E  36A1               	lsrf	___awdiv@divisor+1,f
 13417  178F  0CA0               	rrf	___awdiv@divisor,f
 13418  1790  0B89               	decfsz	9,f
 13419  1791  2F8E               	goto	u4375
 13420  1792  3001               	movlw	1
 13421  1793  02A5               	subwf	___awdiv@counter,f
 13422  1794  1D03               	btfss	3,2
 13423  1795  2F7B               	goto	l5635
 13424  1796                     l5645:	
 13425  1796  0826               	movf	___awdiv@sign,w
 13426  1797  1903               	btfsc	3,2
 13427  1798  2F9E               	goto	l5649
 13428  1799  09A7               	comf	___awdiv@quotient,f
 13429  179A  09A8               	comf	___awdiv@quotient+1,f
 13430  179B  0AA7               	incf	___awdiv@quotient,f
 13431  179C  1903               	skipnz
 13432  179D  0AA8               	incf	___awdiv@quotient+1,f
 13433  179E                     l5649:	
 13434  179E  0828               	movf	___awdiv@quotient+1,w
 13435  179F  01A1               	clrf	?___awdiv+1
 13436  17A0  07A1               	addwf	?___awdiv+1,f
 13437  17A1  0827               	movf	___awdiv@quotient,w
 13438  17A2  01A0               	clrf	?___awdiv
 13439  17A3  07A0               	addwf	?___awdiv,f
 13440  17A4  0008               	return
 13441  17A5                     __end_of___awdiv:	
 13442                           
 13443                           	psect	text78
 13444  1FEC                     __ptext78:	
 13445 ;; *************** function _DimmerLights_Close *****************
 13446 ;; Defined at:
 13447 ;;		line 408 in file "../src/Dimmer_B1.c"
 13448 ;; Parameters:    Size  Location     Type
 13449 ;;		None
 13450 ;; Auto vars:     Size  Location     Type
 13451 ;;		None
 13452 ;; Return value:  Size  Location     Type
 13453 ;;		None               void
 13454 ;; Registers used:
 13455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13456 ;; Tracked objects:
 13457 ;;		On entry : 0/0
 13458 ;;		On exit  : 0/0
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;Total ram usage:        0 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; Hardware stack levels required when called:    6
 13468 ;; This function calls:
 13469 ;;		_getDimmerLights_StatusFlag
 13470 ;;		_setMemory_GO
 13471 ;; This function is called by:
 13472 ;;		_DimmerLights_Main
 13473 ;; This function uses a non-reentrant model
 13474 ;;
 13475                           
 13476                           
 13477                           ;psect for function _DimmerLights_Close
 13478  1FEC                     _DimmerLights_Close:	
 13479                           
 13480                           ;Dimmer_B1.c: 409: if (Dimmer->Detect) {
 13481                           
 13482                           ;incstack = 0
 13483                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13484  1FEC  0021               	movlb	1	; select bank1
 13485  1FED  0839               	movf	_Dimmer^(0+128),w
 13486  1FEE  0086               	movwf	6
 13487  1FEF  0187               	clrf	7
 13488  1FF0  1C01               	btfss	1,0
 13489  1FF1  0008               	return
 13490                           
 13491                           ;Dimmer_B1.c: 410: Dimmer->Detect = 0;
 13492  1FF2  0839               	movf	_Dimmer^(0+128),w
 13493  1FF3  0086               	movwf	6
 13494  1FF4  0187               	clrf	7
 13495  1FF5  1001               	bcf	1,0
 13496                           
 13497                           ;Dimmer_B1.c: 411: if (!getDimmerLights_StatusFlag()) {
 13498  1FF6  319F  27D9  319F   	fcall	_getDimmerLights_StatusFlag
 13499  1FF9  3800               	iorlw	0
 13500  1FFA  1D03               	skipz
 13501  1FFB  0008               	return
 13502                           
 13503                           ;Dimmer_B1.c: 413: ;;
 13504                           ;Dimmer_B1.c: 414: setMemory_GO(1);
 13505  1FFC  3001               	movlw	1
 13506  1FFD  3192  2236         	fcall	_setMemory_GO
 13507  1FFF  0008               	return
 13508  2000                     __end_of_DimmerLights_Close:	
 13509                           
 13510                           	psect	text79
 13511  1236                     __ptext79:	
 13512 ;; *************** function _setMemory_GO *****************
 13513 ;; Defined at:
 13514 ;;		line 883 in file "../src/MCU_B1.c"
 13515 ;; Parameters:    Size  Location     Type
 13516 ;;  command         1    wreg     unsigned char 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  command         1    2[BANK0 ] unsigned char 
 13519 ;; Return value:  Size  Location     Type
 13520 ;;		None               void
 13521 ;; Registers used:
 13522 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13523 ;; Tracked objects:
 13524 ;;		On entry : 0/0
 13525 ;;		On exit  : 0/0
 13526 ;;		Unchanged: 0/0
 13527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;Total ram usage:        3 bytes
 13533 ;; Hardware stack levels used:    1
 13534 ;; Hardware stack levels required when called:    5
 13535 ;; This function calls:
 13536 ;;		Nothing
 13537 ;; This function is called by:
 13538 ;;		_DimmerLights_Close
 13539 ;;		_setDimmerLights
 13540 ;; This function uses a non-reentrant model
 13541 ;;
 13542                           
 13543                           
 13544                           ;psect for function _setMemory_GO
 13545  1236                     _setMemory_GO:	
 13546                           
 13547                           ;incstack = 0
 13548                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 13549                           ;setMemory_GO@command stored from wreg
 13550  1236  0020               	movlb	0	; select bank0
 13551  1237  00A2               	movwf	setMemory_GO@command
 13552                           
 13553                           ;MCU_B1.c: 884: Memory->GO = command;
 13554  1238  0021               	movlb	1	; select bank1
 13555  1239  086F               	movf	_Memory^(0+128),w
 13556  123A  3E24               	addlw	36
 13557  123B  0086               	movwf	6
 13558  123C  3002               	movlw	2	; select bank4/5
 13559  123D  0087               	movwf	7
 13560  123E  0020               	movlb	0	; select bank0
 13561  123F  0822               	movf	setMemory_GO@command,w
 13562  1240  1081               	bcf	1,1
 13563  1241  1D03               	skipz
 13564  1242  1481               	bsf	1,1
 13565                           
 13566                           ;MCU_B1.c: 885: if (command == 0) {
 13567  1243  08A2               	movf	setMemory_GO@command,f
 13568  1244  1D03               	skipz
 13569  1245  0008               	return
 13570                           
 13571                           ;MCU_B1.c: 886: Memory->Time = command;
 13572  1246  0822               	movf	setMemory_GO@command,w
 13573  1247  00A0               	movwf	??_setMemory_GO
 13574  1248  01A1               	clrf	??_setMemory_GO+1
 13575  1249  0021               	movlb	1	; select bank1
 13576  124A  086F               	movf	_Memory^(0+128),w
 13577  124B  3E22               	addlw	34
 13578  124C  0086               	movwf	6
 13579  124D  3002               	movlw	2	; select bank4/5
 13580  124E  0087               	movwf	7
 13581  124F  0020               	movlb	0	; select bank0
 13582  1250  0820               	movf	??_setMemory_GO,w
 13583  1251  3FC0               	movwi [0]fsr1
 13584  1252  0821               	movf	??_setMemory_GO+1,w
 13585  1253  3FC1               	movwi [1]fsr1
 13586  1254  0008               	return
 13587  1255                     __end_of_setMemory_GO:	
 13588                           
 13589                           	psect	text80
 13590  1FD9                     __ptext80:	
 13591 ;; *************** function _getDimmerLights_StatusFlag *****************
 13592 ;; Defined at:
 13593 ;;		line 490 in file "../src/Dimmer_B1.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;		None
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;  Status          1    1[BANK0 ] unsigned char 
 13598 ;; Return value:  Size  Location     Type
 13599 ;;                  1    wreg      unsigned char 
 13600 ;; Registers used:
 13601 ;;		wreg, status,2
 13602 ;; Tracked objects:
 13603 ;;		On entry : 0/0
 13604 ;;		On exit  : 0/0
 13605 ;;		Unchanged: 0/0
 13606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13608 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;Total ram usage:        3 bytes
 13612 ;; Hardware stack levels used:    1
 13613 ;; Hardware stack levels required when called:    5
 13614 ;; This function calls:
 13615 ;;		Nothing
 13616 ;; This function is called by:
 13617 ;;		_DimmerLights_Close
 13618 ;;		_DimmerLights_Exceptions
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           
 13623                           ;psect for function _getDimmerLights_StatusFlag
 13624  1FD9                     _getDimmerLights_StatusFlag:	
 13625                           
 13626                           ;Dimmer_B1.c: 491: char Status = 0;
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13630  1FD9  0020               	movlb	0	; select bank0
 13631  1FDA  01A1               	clrf	getDimmerLights_StatusFlag@Status
 13632                           
 13633                           ;Dimmer_B1.c: 494: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 13634  1FDB  01A2               	clrf	_getDimmerLights_StatusFlag$1916
 13635  1FDC  0AA2               	incf	_getDimmerLights_StatusFlag$1916,f
 13636  1FDD  0022               	movlb	2	; select bank2
 13637  1FDE  1F20               	btfss	_DimmerLights1^(0+256),6
 13638  1FDF  1B2F               	btfsc	_DimmerLights2^(0+256),6
 13639  1FE0  2FE5               	goto	l6131
 13640  1FE1  1B3E               	btfsc	_DimmerLights3^(0+256),6
 13641  1FE2  2FE5               	goto	l6131
 13642  1FE3  0020               	movlb	0	; select bank0
 13643  1FE4  01A2               	clrf	_getDimmerLights_StatusFlag$1916
 13644  1FE5                     l6131:	
 13645  1FE5  0020               	movlb	0	; select bank0
 13646  1FE6  0822               	movf	_getDimmerLights_StatusFlag$1916,w
 13647  1FE7  00A0               	movwf	??_getDimmerLights_StatusFlag
 13648  1FE8  0820               	movf	??_getDimmerLights_StatusFlag,w
 13649  1FE9  00A1               	movwf	getDimmerLights_StatusFlag@Status
 13650                           
 13651                           ;Dimmer_B1.c: 505: return Status;
 13652  1FEA  0821               	movf	getDimmerLights_StatusFlag@Status,w
 13653  1FEB  0008               	return
 13654  1FEC                     __end_of_getDimmerLights_StatusFlag:	
 13655                           
 13656                           	psect	text81
 13657  12B5                     __ptext81:	
 13658 ;; *************** function _DimmerLights_Initialization *****************
 13659 ;; Defined at:
 13660 ;;		line 346 in file "../src/Dimmer_B1.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;		None
 13663 ;; Auto vars:     Size  Location     Type
 13664 ;;		None
 13665 ;; Return value:  Size  Location     Type
 13666 ;;		None               void
 13667 ;; Registers used:
 13668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13677 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;Total ram usage:        1 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    7
 13681 ;; This function calls:
 13682 ;;		_Dimmer_Initialization
 13683 ;;		_setDimmerLights_Initialization
 13684 ;; This function is called by:
 13685 ;;		_main
 13686 ;; This function uses a non-reentrant model
 13687 ;;
 13688                           
 13689                           
 13690                           ;psect for function _DimmerLights_Initialization
 13691  12B5                     _DimmerLights_Initialization:	
 13692                           
 13693                           ;Dimmer_B1.c: 349: DimmerLights11 = &DimmerLights1;
 13694                           
 13695                           ;incstack = 0
 13696                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13697  12B5  3020               	movlw	_DimmerLights1& (0+255)
 13698  12B6  0020               	movlb	0	; select bank0
 13699  12B7  00A4               	movwf	??_DimmerLights_Initialization
 13700  12B8  0824               	movf	??_DimmerLights_Initialization,w
 13701  12B9  0021               	movlb	1	; select bank1
 13702  12BA  00BA               	movwf	_DimmerLights11^(0+128)
 13703                           
 13704                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(1);
 13705  12BB  3001               	movlw	1
 13706  12BC  3193  23BA  3192   	fcall	_setDimmerLights_Initialization
 13707                           
 13708                           ;Dimmer_B1.c: 354: DimmerLights22 = &DimmerLights2;
 13709  12BF  302F               	movlw	_DimmerLights2& (0+255)
 13710  12C0  0020               	movlb	0	; select bank0
 13711  12C1  00A4               	movwf	??_DimmerLights_Initialization
 13712  12C2  0824               	movf	??_DimmerLights_Initialization,w
 13713  12C3  0021               	movlb	1	; select bank1
 13714  12C4  00BB               	movwf	_DimmerLights22^(0+128)
 13715                           
 13716                           ;Dimmer_B1.c: 355: setDimmerLights_Initialization(2);
 13717  12C5  3002               	movlw	2
 13718  12C6  3193  23BA  3192   	fcall	_setDimmerLights_Initialization
 13719                           
 13720                           ;Dimmer_B1.c: 359: DimmerLights33 = &DimmerLights3;
 13721  12C9  303E               	movlw	_DimmerLights3& (0+255)
 13722  12CA  0020               	movlb	0	; select bank0
 13723  12CB  00A4               	movwf	??_DimmerLights_Initialization
 13724  12CC  0824               	movf	??_DimmerLights_Initialization,w
 13725  12CD  0021               	movlb	1	; select bank1
 13726  12CE  00BC               	movwf	_DimmerLights33^(0+128)
 13727                           
 13728                           ;Dimmer_B1.c: 360: setDimmerLights_Initialization(3);
 13729  12CF  3003               	movlw	3
 13730  12D0  3193  23BA  3192   	fcall	_setDimmerLights_Initialization
 13731                           
 13732                           ;Dimmer_B1.c: 364: Dimmer_Initialization();
 13733  12D3  319E  2644         	fcall	_Dimmer_Initialization
 13734  12D5  0008               	return
 13735  12D6                     __end_of_DimmerLights_Initialization:	
 13736                           
 13737                           	psect	text82
 13738  13BA                     __ptext82:	
 13739 ;; *************** function _setDimmerLights_Initialization *****************
 13740 ;; Defined at:
 13741 ;;		line 369 in file "../src/Dimmer_B1.c"
 13742 ;; Parameters:    Size  Location     Type
 13743 ;;  lights          1    wreg     unsigned char 
 13744 ;; Auto vars:     Size  Location     Type
 13745 ;;  lights          1    3[BANK0 ] unsigned char 
 13746 ;; Return value:  Size  Location     Type
 13747 ;;		None               void
 13748 ;; Registers used:
 13749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13750 ;; Tracked objects:
 13751 ;;		On entry : 0/0
 13752 ;;		On exit  : 0/0
 13753 ;;		Unchanged: 0/0
 13754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13759 ;;Total ram usage:        2 bytes
 13760 ;; Hardware stack levels used:    1
 13761 ;; Hardware stack levels required when called:    6
 13762 ;; This function calls:
 13763 ;;		_DimmerLightsPointSelect
 13764 ;; This function is called by:
 13765 ;;		_DimmerLights_Initialization
 13766 ;; This function uses a non-reentrant model
 13767 ;;
 13768                           
 13769                           
 13770                           ;psect for function _setDimmerLights_Initialization
 13771  13BA                     _setDimmerLights_Initialization:	
 13772                           
 13773                           ;incstack = 0
 13774                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13775                           ;setDimmerLights_Initialization@lights stored from wreg
 13776  13BA  0020               	movlb	0	; select bank0
 13777  13BB  00A3               	movwf	setDimmerLights_Initialization@lights
 13778                           
 13779                           ;Dimmer_B1.c: 371: DimmerLightsPointSelect(lights);
 13780  13BC  0823               	movf	setDimmerLights_Initialization@lights,w
 13781  13BD  3191  2134         	fcall	_DimmerLightsPointSelect
 13782                           
 13783                           ;Dimmer_B1.c: 372: DimmerLights->Clear = 1;
 13784  13BF  0878               	movf	_DimmerLights,w
 13785  13C0  3E09               	addlw	9
 13786  13C1  0086               	movwf	6
 13787  13C2  3001               	movlw	1	; select bank2/3
 13788  13C3  0087               	movwf	7
 13789  13C4  1501               	bsf	1,2
 13790                           
 13791                           ;Dimmer_B1.c: 378: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 13792  13C5  3004               	movlw	4
 13793  13C6  0020               	movlb	0	; select bank0
 13794  13C7  00A2               	movwf	??_setDimmerLights_Initialization
 13795  13C8  0878               	movf	_DimmerLights,w
 13796  13C9  3E05               	addlw	5
 13797  13CA  0086               	movwf	6
 13798  13CB  3001               	movlw	1	; select bank2/3
 13799  13CC  0087               	movwf	7
 13800  13CD  0822               	movf	??_setDimmerLights_Initialization,w
 13801  13CE  0081               	movwf	1
 13802                           
 13803                           ;Dimmer_B1.c: 379: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13804  13CF  303C               	movlw	60
 13805  13D0  00A2               	movwf	??_setDimmerLights_Initialization
 13806  13D1  0878               	movf	_DimmerLights,w
 13807  13D2  3E06               	addlw	6
 13808  13D3  0086               	movwf	6
 13809  13D4  3001               	movlw	1	; select bank2/3
 13810  13D5  0087               	movwf	7
 13811  13D6  0822               	movf	??_setDimmerLights_Initialization,w
 13812  13D7  0081               	movwf	1
 13813                           
 13814                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13815  13D8  0878               	movf	_DimmerLights,w
 13816  13D9  3E06               	addlw	6
 13817  13DA  0086               	movwf	6
 13818  13DB  3001               	movlw	1	; select bank2/3
 13819  13DC  0087               	movwf	7
 13820  13DD  0801               	movf	1,w
 13821  13DE  00A2               	movwf	??_setDimmerLights_Initialization
 13822  13DF  0878               	movf	_DimmerLights,w
 13823  13E0  3E04               	addlw	4
 13824  13E1  0086               	movwf	6
 13825  13E2  3001               	movlw	1	; select bank2/3
 13826  13E3  0087               	movwf	7
 13827  13E4  0822               	movf	??_setDimmerLights_Initialization,w
 13828  13E5  0081               	movwf	1
 13829  13E6  0008               	return
 13830  13E7                     __end_of_setDimmerLights_Initialization:	
 13831                           
 13832                           	psect	text83
 13833  1134                     __ptext83:	
 13834 ;; *************** function _DimmerLightsPointSelect *****************
 13835 ;; Defined at:
 13836 ;;		line 315 in file "../src/Dimmer_B1.c"
 13837 ;; Parameters:    Size  Location     Type
 13838 ;;  lights          1    wreg     unsigned char 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;  lights          1    1[BANK0 ] unsigned char 
 13841 ;; Return value:  Size  Location     Type
 13842 ;;		None               void
 13843 ;; Registers used:
 13844 ;;		wreg
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;Total ram usage:        2 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:    5
 13857 ;; This function calls:
 13858 ;;		Nothing
 13859 ;; This function is called by:
 13860 ;;		_setDimmerLights_Initialization
 13861 ;;		_setDimmerLights_Main
 13862 ;;		_setDimmerLights
 13863 ;;		_setDimmerLights_Adj
 13864 ;;		_setDimmerLights_AdjRF
 13865 ;;		_setDimmerLights_Switch
 13866 ;;		_setDimmerLights_AdjGo
 13867 ;;		_setDimmerLights_Trigger
 13868 ;;		_setDimmerLights_TriggerAdj
 13869 ;;		_setDimmerLights_ERROR
 13870 ;;		_setDimmerLights_TriggerERROR
 13871 ;;		_setDimmerLights_GO
 13872 ;;		_setDimmerLights_MaxmumValue
 13873 ;;		_setDimmerLights_Clear
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           
 13878                           ;psect for function _DimmerLightsPointSelect
 13879  1134                     _DimmerLightsPointSelect:	
 13880                           
 13881                           ;incstack = 0
 13882                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13883                           ;DimmerLightsPointSelect@lights stored from wreg
 13884  1134  0020               	movlb	0	; select bank0
 13885  1135  00A1               	movwf	DimmerLightsPointSelect@lights
 13886                           
 13887                           ;Dimmer_B1.c: 317: if (lights == 1) {
 13888  1136  0821               	movf	DimmerLightsPointSelect@lights,w
 13889  1137  3A01               	xorlw	1
 13890  1138  1D03               	skipz
 13891  1139  293E               	goto	l797
 13892                           
 13893                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 13894  113A  3020               	movlw	_DimmerLights1& (0+255)
 13895  113B  00A0               	movwf	??_DimmerLightsPointSelect
 13896  113C  0820               	movf	??_DimmerLightsPointSelect,w
 13897  113D  00F8               	movwf	_DimmerLights
 13898  113E                     l797:	
 13899                           
 13900                           ;Dimmer_B1.c: 319: }
 13901                           ;Dimmer_B1.c: 326: if (lights == 2) {
 13902  113E  0821               	movf	DimmerLightsPointSelect@lights,w
 13903  113F  3A02               	xorlw	2
 13904  1140  1D03               	skipz
 13905  1141  2946               	goto	l798
 13906                           
 13907                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights2;
 13908  1142  302F               	movlw	_DimmerLights2& (0+255)
 13909  1143  00A0               	movwf	??_DimmerLightsPointSelect
 13910  1144  0820               	movf	??_DimmerLightsPointSelect,w
 13911  1145  00F8               	movwf	_DimmerLights
 13912  1146                     l798:	
 13913                           
 13914                           ;Dimmer_B1.c: 328: }
 13915                           ;Dimmer_B1.c: 335: if (lights == 3) {
 13916  1146  0821               	movf	DimmerLightsPointSelect@lights,w
 13917  1147  3A03               	xorlw	3
 13918  1148  1D03               	skipz
 13919  1149  0008               	return
 13920                           
 13921                           ;Dimmer_B1.c: 337: DimmerLights = &DimmerLights3;
 13922  114A  303E               	movlw	_DimmerLights3& (0+255)
 13923  114B  00A0               	movwf	??_DimmerLightsPointSelect
 13924  114C  0820               	movf	??_DimmerLightsPointSelect,w
 13925  114D  00F8               	movwf	_DimmerLights
 13926  114E  0008               	return
 13927  114F                     __end_of_DimmerLightsPointSelect:	
 13928                           
 13929                           	psect	text84
 13930  1E44                     __ptext84:	
 13931 ;; *************** function _Dimmer_Initialization *****************
 13932 ;; Defined at:
 13933 ;;		line 804 in file "../src/Dimmer_B1.c"
 13934 ;; Parameters:    Size  Location     Type
 13935 ;;		None
 13936 ;; Auto vars:     Size  Location     Type
 13937 ;;		None
 13938 ;; Return value:  Size  Location     Type
 13939 ;;		None               void
 13940 ;; Registers used:
 13941 ;;		wreg
 13942 ;; Tracked objects:
 13943 ;;		On entry : 0/0
 13944 ;;		On exit  : 0/0
 13945 ;;		Unchanged: 0/0
 13946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13951 ;;Total ram usage:        1 bytes
 13952 ;; Hardware stack levels used:    1
 13953 ;; Hardware stack levels required when called:    5
 13954 ;; This function calls:
 13955 ;;		Nothing
 13956 ;; This function is called by:
 13957 ;;		_DimmerLights_Initialization
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _Dimmer_Initialization
 13963  1E44                     _Dimmer_Initialization:	
 13964                           
 13965                           ;Dimmer_B1.c: 806: Dimmer = &Dimmer1;
 13966                           
 13967                           ;incstack = 0
 13968                           ; Regs used in _Dimmer_Initialization: [wreg]
 13969  1E44  30E4               	movlw	_Dimmer1& (0+255)
 13970  1E45  0020               	movlb	0	; select bank0
 13971  1E46  00A0               	movwf	??_Dimmer_Initialization
 13972  1E47  0820               	movf	??_Dimmer_Initialization,w
 13973  1E48  0021               	movlb	1	; select bank1
 13974  1E49  00B9               	movwf	_Dimmer^(0+128)
 13975  1E4A  0008               	return
 13976  1E4B                     __end_of_Dimmer_Initialization:	
 13977                           
 13978                           	psect	text85
 13979  1089                     __ptext85:	
 13980 ;; *************** function _CC2500_PowerOnInitial *****************
 13981 ;; Defined at:
 13982 ;;		line 96 in file "../src/CC2500_B1.c"
 13983 ;; Parameters:    Size  Location     Type
 13984 ;;		None
 13985 ;; Auto vars:     Size  Location     Type
 13986 ;;		None
 13987 ;; Return value:  Size  Location     Type
 13988 ;;		None               void
 13989 ;; Registers used:
 13990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13991 ;; Tracked objects:
 13992 ;;		On entry : 0/0
 13993 ;;		On exit  : 0/0
 13994 ;;		Unchanged: 0/0
 13995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;Total ram usage:        0 bytes
 14001 ;; Hardware stack levels used:    1
 14002 ;; Hardware stack levels required when called:    8
 14003 ;; This function calls:
 14004 ;;		_CC2500_ClearRXFIFO
 14005 ;;		_CC2500_ClearTXFIFO
 14006 ;;		_CC2500_FrequencyCabr
 14007 ;;		_CC2500_InitPATable
 14008 ;;		_CC2500_InitSetREG
 14009 ;;		_CC2500_PowerRST
 14010 ;;		_CC2500_SIDLEMode
 14011 ;; This function is called by:
 14012 ;;		_main
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           
 14017                           ;psect for function _CC2500_PowerOnInitial
 14018  1089                     _CC2500_PowerOnInitial:	
 14019                           
 14020                           ;CC2500_B1.c: 97: CC2500_PowerRST();
 14021                           
 14022                           ;incstack = 0
 14023                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14024  1089  3194  2414  3190   	fcall	_CC2500_PowerRST
 14025                           
 14026                           ;CC2500_B1.c: 98: CC2500_InitSetREG();
 14027  108C  3193  2390  3190   	fcall	_CC2500_InitSetREG
 14028                           
 14029                           ;CC2500_B1.c: 99: CC2500_InitPATable();
 14030  108F  3192  2217  3190   	fcall	_CC2500_InitPATable
 14031                           
 14032                           ;CC2500_B1.c: 100: CC2500_ClearTXFIFO();
 14033  1092  319E  2619  3190   	fcall	_CC2500_ClearTXFIFO
 14034                           
 14035                           ;CC2500_B1.c: 101: CC2500_ClearRXFIFO();
 14036  1095  319E  2615  3190   	fcall	_CC2500_ClearRXFIFO
 14037                           
 14038                           ;CC2500_B1.c: 102: CC2500_FrequencyCabr();
 14039  1098  319E  268E  3190   	fcall	_CC2500_FrequencyCabr
 14040                           
 14041                           ;CC2500_B1.c: 103: CC2500_SIDLEMode();
 14042  109B  319E  261D         	fcall	_CC2500_SIDLEMode
 14043  109D  0008               	return
 14044  109E                     __end_of_CC2500_PowerOnInitial:	
 14045                           
 14046                           	psect	text86
 14047  1E1D                     __ptext86:	
 14048 ;; *************** function _CC2500_SIDLEMode *****************
 14049 ;; Defined at:
 14050 ;;		line 180 in file "../src/CC2500_B1.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;		None
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;		None
 14055 ;; Return value:  Size  Location     Type
 14056 ;;		None               void
 14057 ;; Registers used:
 14058 ;;		wreg, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        0 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    7
 14071 ;; This function calls:
 14072 ;;		_CC2500_WriteCommand
 14073 ;; This function is called by:
 14074 ;;		_CC2500_PowerOnInitial
 14075 ;; This function uses a non-reentrant model
 14076 ;;
 14077                           
 14078                           
 14079                           ;psect for function _CC2500_SIDLEMode
 14080  1E1D                     _CC2500_SIDLEMode:	
 14081                           
 14082                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x36);
 14083                           
 14084                           ;incstack = 0
 14085                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14086  1E1D  3036               	movlw	54
 14087  1E1E  319F  2714         	fcall	_CC2500_WriteCommand
 14088  1E20  0008               	return
 14089  1E21                     __end_of_CC2500_SIDLEMode:	
 14090                           
 14091                           	psect	text87
 14092  1414                     __ptext87:	
 14093 ;; *************** function _CC2500_PowerRST *****************
 14094 ;; Defined at:
 14095 ;;		line 109 in file "../src/CC2500_B1.c"
 14096 ;; Parameters:    Size  Location     Type
 14097 ;;		None
 14098 ;; Auto vars:     Size  Location     Type
 14099 ;;		None
 14100 ;; Return value:  Size  Location     Type
 14101 ;;		None               void
 14102 ;; Registers used:
 14103 ;;		wreg, status,2, status,0, pclath, cstack
 14104 ;; Tracked objects:
 14105 ;;		On entry : 0/0
 14106 ;;		On exit  : 0/0
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;Total ram usage:        1 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    6
 14116 ;; This function calls:
 14117 ;;		_CC2500_WriteByte
 14118 ;;		_DelayTime_1us
 14119 ;; This function is called by:
 14120 ;;		_CC2500_PowerOnInitial
 14121 ;; This function uses a non-reentrant model
 14122 ;;
 14123                           
 14124                           
 14125                           ;psect for function _CC2500_PowerRST
 14126  1414                     _CC2500_PowerRST:	
 14127                           
 14128                           ;CC2500_B1.c: 110: RC1 = 0;
 14129                           
 14130                           ;incstack = 0
 14131                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14132  1414  0020               	movlb	0	; select bank0
 14133  1415  108E               	bcf	14,1	;volatile
 14134                           
 14135                           ;CC2500_B1.c: 111: RC0 = 0;
 14136  1416  100E               	bcf	14,0	;volatile
 14137                           
 14138                           ;CC2500_B1.c: 112: RC4 = 1;
 14139  1417  160E               	bsf	14,4	;volatile
 14140                           
 14141                           ;CC2500_B1.c: 113: DelayTime_1us(10);
 14142  1418  300A               	movlw	10
 14143  1419  00A0               	movwf	DelayTime_1us@count
 14144  141A  3000               	movlw	0
 14145  141B  00A1               	movwf	DelayTime_1us@count+1
 14146  141C  3193  231A  3194   	fcall	_DelayTime_1us
 14147                           
 14148                           ;CC2500_B1.c: 114: RC4 = 0;
 14149  141F  0020               	movlb	0	; select bank0
 14150  1420  120E               	bcf	14,4	;volatile
 14151                           
 14152                           ;CC2500_B1.c: 115: DelayTime_1us(10);
 14153  1421  300A               	movlw	10
 14154  1422  00A0               	movwf	DelayTime_1us@count
 14155  1423  3000               	movlw	0
 14156  1424  00A1               	movwf	DelayTime_1us@count+1
 14157  1425  3193  231A  3194   	fcall	_DelayTime_1us
 14158                           
 14159                           ;CC2500_B1.c: 116: RC4 = 1;
 14160  1428  0020               	movlb	0	; select bank0
 14161  1429  160E               	bsf	14,4	;volatile
 14162                           
 14163                           ;CC2500_B1.c: 117: DelayTime_1us(40);
 14164  142A  3028               	movlw	40
 14165  142B  00A0               	movwf	DelayTime_1us@count
 14166  142C  3000               	movlw	0
 14167  142D  00A1               	movwf	DelayTime_1us@count+1
 14168  142E  3193  231A  3194   	fcall	_DelayTime_1us
 14169                           
 14170                           ;CC2500_B1.c: 118: RC4 = 0;
 14171  1431  0020               	movlb	0	; select bank0
 14172  1432  120E               	bcf	14,4	;volatile
 14173                           
 14174                           ;CC2500_B1.c: 119: SPI0Buffer = 0x30;
 14175  1433  3030               	movlw	48
 14176  1434  00A6               	movwf	??_CC2500_PowerRST
 14177  1435  0826               	movf	??_CC2500_PowerRST,w
 14178  1436  0021               	movlb	1	; select bank1
 14179  1437  00C2               	movwf	_SPI0Buffer^(0+128)
 14180  1438                     l313:	
 14181                           ;CC2500_B1.c: 120: while (RC2 == 1);
 14182                           
 14183  1438  0020               	movlb	0	; select bank0
 14184  1439  190E               	btfsc	14,2	;volatile
 14185  143A  2C38               	goto	l313
 14186                           
 14187                           ;CC2500_B1.c: 121: CC2500_WriteByte();
 14188  143B  3190  20CE  3194   	fcall	_CC2500_WriteByte
 14189  143E                     l316:	
 14190                           ;CC2500_B1.c: 122: while (RC2 == 1);
 14191                           
 14192  143E  0020               	movlb	0	; select bank0
 14193  143F  190E               	btfsc	14,2	;volatile
 14194  1440  2C3E               	goto	l316
 14195                           
 14196                           ;CC2500_B1.c: 123: RC0 = 0;
 14197  1441  100E               	bcf	14,0	;volatile
 14198                           
 14199                           ;CC2500_B1.c: 124: RC4 = 1;
 14200  1442  160E               	bsf	14,4	;volatile
 14201  1443  0008               	return
 14202  1444                     __end_of_CC2500_PowerRST:	
 14203                           
 14204                           	psect	text88
 14205  1390                     __ptext88:	
 14206 ;; *************** function _CC2500_InitSetREG *****************
 14207 ;; Defined at:
 14208 ;;		line 130 in file "../src/CC2500_B1.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;		None
 14211 ;; Auto vars:     Size  Location     Type
 14212 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14213 ;;  temp2           1    7[BANK0 ] unsigned char 
 14214 ;;  temp1           1    6[BANK0 ] unsigned char 
 14215 ;; Return value:  Size  Location     Type
 14216 ;;		None               void
 14217 ;; Registers used:
 14218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14219 ;; Tracked objects:
 14220 ;;		On entry : 0/0
 14221 ;;		On exit  : 0/0
 14222 ;;		Unchanged: 0/0
 14223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;Total ram usage:        4 bytes
 14229 ;; Hardware stack levels used:    1
 14230 ;; Hardware stack levels required when called:    7
 14231 ;; This function calls:
 14232 ;;		_CC2500_WriteREG
 14233 ;; This function is called by:
 14234 ;;		_CC2500_PowerOnInitial
 14235 ;; This function uses a non-reentrant model
 14236 ;;
 14237                           
 14238                           
 14239                           ;psect for function _CC2500_InitSetREG
 14240  1390                     _CC2500_InitSetREG:	
 14241                           
 14242                           ;CC2500_B1.c: 131: unsigned char loop_c;
 14243                           ;CC2500_B1.c: 132: unsigned char temp1, temp2;
 14244                           ;CC2500_B1.c: 134: for (loop_c = 0; loop_c < 47; loop_c++) {
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14248  1390  0020               	movlb	0	; select bank0
 14249  1391  01A8               	clrf	CC2500_InitSetREG@loop_c
 14250  1392                     L9:	
 14251  1392  302F               	movlw	47
 14252  1393  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14253  1394  1803               	btfsc	3,0
 14254  1395  0008               	return
 14255                           
 14256                           ;CC2500_B1.c: 135: temp1 = CC2500_registers_address[loop_c];
 14257  1396  0828               	movf	CC2500_InitSetREG@loop_c,w
 14258  1397  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14259  1398  0084               	movwf	4
 14260  1399  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14261  139A  1803               	skipnc
 14262  139B  3E01               	addlw	1
 14263  139C  0085               	movwf	5
 14264  139D  0800               	movf	0,w	;code access
 14265  139E  00A5               	movwf	??_CC2500_InitSetREG
 14266  139F  0825               	movf	??_CC2500_InitSetREG,w
 14267  13A0  00A6               	movwf	CC2500_InitSetREG@temp1
 14268                           
 14269                           ;CC2500_B1.c: 136: temp2 = CC2500_rfSettings[loop_c];
 14270  13A1  0828               	movf	CC2500_InitSetREG@loop_c,w
 14271  13A2  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14272  13A3  0084               	movwf	4
 14273  13A4  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14274  13A5  1803               	skipnc
 14275  13A6  3E01               	addlw	1
 14276  13A7  0085               	movwf	5
 14277  13A8  0800               	movf	0,w	;code access
 14278  13A9  00A5               	movwf	??_CC2500_InitSetREG
 14279  13AA  0825               	movf	??_CC2500_InitSetREG,w
 14280  13AB  00A7               	movwf	CC2500_InitSetREG@temp2
 14281                           
 14282                           ;CC2500_B1.c: 138: CC2500_WriteREG(temp1, temp2);
 14283  13AC  0827               	movf	CC2500_InitSetREG@temp2,w
 14284  13AD  00A5               	movwf	??_CC2500_InitSetREG
 14285  13AE  0825               	movf	??_CC2500_InitSetREG,w
 14286  13AF  00A2               	movwf	CC2500_WriteREG@value
 14287  13B0  0826               	movf	CC2500_InitSetREG@temp1,w
 14288  13B1  3190  20E7  3193   	fcall	_CC2500_WriteREG
 14289  13B4  3001               	movlw	1
 14290  13B5  0020               	movlb	0	; select bank0
 14291  13B6  00A5               	movwf	??_CC2500_InitSetREG
 14292  13B7  0825               	movf	??_CC2500_InitSetREG,w
 14293  13B8  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14294  13B9  2B92               	goto	L9
 14295  13BA                     __end_of_CC2500_InitSetREG:	
 14296                           
 14297                           	psect	text89
 14298  1217                     __ptext89:	
 14299 ;; *************** function _CC2500_InitPATable *****************
 14300 ;; Defined at:
 14301 ;;		line 145 in file "../src/CC2500_B1.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;		None
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14306 ;;  temp            1    6[BANK0 ] unsigned char 
 14307 ;; Return value:  Size  Location     Type
 14308 ;;		None               void
 14309 ;; Registers used:
 14310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14311 ;; Tracked objects:
 14312 ;;		On entry : 0/0
 14313 ;;		On exit  : 0/0
 14314 ;;		Unchanged: 0/0
 14315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;Total ram usage:        3 bytes
 14321 ;; Hardware stack levels used:    1
 14322 ;; Hardware stack levels required when called:    7
 14323 ;; This function calls:
 14324 ;;		_CC2500_WriteREG
 14325 ;; This function is called by:
 14326 ;;		_CC2500_PowerOnInitial
 14327 ;; This function uses a non-reentrant model
 14328 ;;
 14329                           
 14330                           
 14331                           ;psect for function _CC2500_InitPATable
 14332  1217                     _CC2500_InitPATable:	
 14333                           
 14334                           ;CC2500_B1.c: 146: unsigned char loop_d;
 14335                           ;CC2500_B1.c: 147: unsigned char temp;
 14336                           ;CC2500_B1.c: 149: for (loop_d = 0; loop_d < 8; loop_d++) {
 14337                           
 14338                           ;incstack = 0
 14339                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14340  1217  0020               	movlb	0	; select bank0
 14341  1218  01A7               	clrf	CC2500_InitPATable@loop_d
 14342  1219                     L10:	
 14343  1219  3008               	movlw	8
 14344  121A  0227               	subwf	CC2500_InitPATable@loop_d,w
 14345  121B  1803               	btfsc	3,0
 14346  121C  0008               	return
 14347                           
 14348                           ;CC2500_B1.c: 150: temp = CC2500_patable_vaule[loop_d];
 14349  121D  0827               	movf	CC2500_InitPATable@loop_d,w
 14350  121E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14351  121F  0084               	movwf	4
 14352  1220  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14353  1221  1803               	skipnc
 14354  1222  3E01               	addlw	1
 14355  1223  0085               	movwf	5
 14356  1224  0800               	movf	0,w	;code access
 14357  1225  00A5               	movwf	??_CC2500_InitPATable
 14358  1226  0825               	movf	??_CC2500_InitPATable,w
 14359  1227  00A6               	movwf	CC2500_InitPATable@temp
 14360                           
 14361                           ;CC2500_B1.c: 151: CC2500_WriteREG(0x3E, temp);
 14362  1228  0826               	movf	CC2500_InitPATable@temp,w
 14363  1229  00A5               	movwf	??_CC2500_InitPATable
 14364  122A  0825               	movf	??_CC2500_InitPATable,w
 14365  122B  00A2               	movwf	CC2500_WriteREG@value
 14366  122C  303E               	movlw	62
 14367  122D  3190  20E7  3192   	fcall	_CC2500_WriteREG
 14368  1230  3001               	movlw	1
 14369  1231  0020               	movlb	0	; select bank0
 14370  1232  00A5               	movwf	??_CC2500_InitPATable
 14371  1233  0825               	movf	??_CC2500_InitPATable,w
 14372  1234  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14373  1235  2A19               	goto	L10
 14374  1236                     __end_of_CC2500_InitPATable:	
 14375                           
 14376                           	psect	text90
 14377  10E7                     __ptext90:	
 14378 ;; *************** function _CC2500_WriteREG *****************
 14379 ;; Defined at:
 14380 ;;		line 222 in file "../src/CC2500_B1.c"
 14381 ;; Parameters:    Size  Location     Type
 14382 ;;  w_addr          1    wreg     unsigned char 
 14383 ;;  value           1    2[BANK0 ] unsigned char 
 14384 ;; Auto vars:     Size  Location     Type
 14385 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14386 ;; Return value:  Size  Location     Type
 14387 ;;		None               void
 14388 ;; Registers used:
 14389 ;;		wreg, status,2, status,0, pclath, cstack
 14390 ;; Tracked objects:
 14391 ;;		On entry : 0/0
 14392 ;;		On exit  : 0/0
 14393 ;;		Unchanged: 0/0
 14394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14395 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;Total ram usage:        3 bytes
 14400 ;; Hardware stack levels used:    1
 14401 ;; Hardware stack levels required when called:    6
 14402 ;; This function calls:
 14403 ;;		_CC2500_WriteByte
 14404 ;; This function is called by:
 14405 ;;		_CC2500_InitSetREG
 14406 ;;		_CC2500_InitPATable
 14407 ;; This function uses a non-reentrant model
 14408 ;;
 14409                           
 14410                           
 14411                           ;psect for function _CC2500_WriteREG
 14412  10E7                     _CC2500_WriteREG:	
 14413                           
 14414                           ;incstack = 0
 14415                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14416                           ;CC2500_WriteREG@w_addr stored from wreg
 14417  10E7  0020               	movlb	0	; select bank0
 14418  10E8  00A4               	movwf	CC2500_WriteREG@w_addr
 14419                           
 14420                           ;CC2500_B1.c: 223: RC4 = 0;
 14421  10E9  120E               	bcf	14,4	;volatile
 14422                           
 14423                           ;CC2500_B1.c: 224: SPI0Buffer = w_addr;
 14424  10EA  0824               	movf	CC2500_WriteREG@w_addr,w
 14425  10EB  00A3               	movwf	??_CC2500_WriteREG
 14426  10EC  0823               	movf	??_CC2500_WriteREG,w
 14427  10ED  0021               	movlb	1	; select bank1
 14428  10EE  00C2               	movwf	_SPI0Buffer^(0+128)
 14429  10EF                     l358:	
 14430                           ;CC2500_B1.c: 225: while (RC2 == 1);
 14431                           
 14432  10EF  0020               	movlb	0	; select bank0
 14433  10F0  190E               	btfsc	14,2	;volatile
 14434  10F1  28EF               	goto	l358
 14435                           
 14436                           ;CC2500_B1.c: 226: CC2500_WriteByte();
 14437  10F2  3190  20CE  3190   	fcall	_CC2500_WriteByte
 14438                           
 14439                           ;CC2500_B1.c: 227: SPI0Buffer = value;
 14440  10F5  0020               	movlb	0	; select bank0
 14441  10F6  0822               	movf	CC2500_WriteREG@value,w
 14442  10F7  00A3               	movwf	??_CC2500_WriteREG
 14443  10F8  0823               	movf	??_CC2500_WriteREG,w
 14444  10F9  0021               	movlb	1	; select bank1
 14445  10FA  00C2               	movwf	_SPI0Buffer^(0+128)
 14446                           
 14447                           ;CC2500_B1.c: 228: CC2500_WriteByte();
 14448  10FB  3190  20CE         	fcall	_CC2500_WriteByte
 14449                           
 14450                           ;CC2500_B1.c: 229: RC4 = 1;
 14451  10FD  0020               	movlb	0	; select bank0
 14452  10FE  160E               	bsf	14,4	;volatile
 14453  10FF  0008               	return
 14454  1100                     __end_of_CC2500_WriteREG:	
 14455                           
 14456                           	psect	text91
 14457  1E8E                     __ptext91:	
 14458 ;; *************** function _CC2500_FrequencyCabr *****************
 14459 ;; Defined at:
 14460 ;;		line 172 in file "../src/CC2500_B1.c"
 14461 ;; Parameters:    Size  Location     Type
 14462 ;;		None
 14463 ;; Auto vars:     Size  Location     Type
 14464 ;;		None
 14465 ;; Return value:  Size  Location     Type
 14466 ;;		None               void
 14467 ;; Registers used:
 14468 ;;		wreg, status,2, status,0, pclath, cstack
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;Total ram usage:        0 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; Hardware stack levels required when called:    7
 14481 ;; This function calls:
 14482 ;;		_CC2500_WriteCommand
 14483 ;;		_DelayTime_1us
 14484 ;; This function is called by:
 14485 ;;		_CC2500_PowerOnInitial
 14486 ;; This function uses a non-reentrant model
 14487 ;;
 14488                           
 14489                           
 14490                           ;psect for function _CC2500_FrequencyCabr
 14491  1E8E                     _CC2500_FrequencyCabr:	
 14492                           
 14493                           ;CC2500_B1.c: 173: CC2500_WriteCommand(0x33);
 14494                           
 14495                           ;incstack = 0
 14496                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 14497  1E8E  3033               	movlw	51
 14498  1E8F  319F  2714  319E   	fcall	_CC2500_WriteCommand
 14499                           
 14500                           ;CC2500_B1.c: 174: DelayTime_1us(1000);
 14501  1E92  30E8               	movlw	232
 14502  1E93  0020               	movlb	0	; select bank0
 14503  1E94  00A0               	movwf	DelayTime_1us@count
 14504  1E95  3003               	movlw	3
 14505  1E96  00A1               	movwf	DelayTime_1us@count+1
 14506  1E97  3193  231A         	fcall	_DelayTime_1us
 14507  1E99  0008               	return
 14508  1E9A                     __end_of_CC2500_FrequencyCabr:	
 14509                           
 14510                           	psect	text92
 14511  131A                     __ptext92:	
 14512 ;; *************** function _DelayTime_1us *****************
 14513 ;; Defined at:
 14514 ;;		line 278 in file "../src/CC2500_B1.c"
 14515 ;; Parameters:    Size  Location     Type
 14516 ;;  count           2    0[BANK0 ] int 
 14517 ;; Auto vars:     Size  Location     Type
 14518 ;;  j               2    4[BANK0 ] unsigned int 
 14519 ;;  i               2    2[BANK0 ] unsigned int 
 14520 ;; Return value:  Size  Location     Type
 14521 ;;		None               void
 14522 ;; Registers used:
 14523 ;;		wreg, status,2
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;Total ram usage:        6 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:    5
 14536 ;; This function calls:
 14537 ;;		Nothing
 14538 ;; This function is called by:
 14539 ;;		_CC2500_PowerRST
 14540 ;;		_CC2500_FrequencyCabr
 14541 ;; This function uses a non-reentrant model
 14542 ;;
 14543                           
 14544                           
 14545                           ;psect for function _DelayTime_1us
 14546  131A                     _DelayTime_1us:	
 14547                           
 14548                           ;CC2500_B1.c: 279: unsigned int i, j;
 14549                           ;CC2500_B1.c: 280: for (i = 1; i < count; i++)
 14550                           
 14551                           ;incstack = 0
 14552                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14553  131A  3001               	movlw	1
 14554  131B  0020               	movlb	0	; select bank0
 14555  131C  00A2               	movwf	DelayTime_1us@i
 14556  131D  3000               	movlw	0
 14557  131E  00A3               	movwf	DelayTime_1us@i+1
 14558  131F                     l382:	
 14559  131F  0821               	movf	DelayTime_1us@count+1,w
 14560  1320  0223               	subwf	DelayTime_1us@i+1,w
 14561  1321  1D03               	skipz
 14562  1322  2B25               	goto	u5055
 14563  1323  0820               	movf	DelayTime_1us@count,w
 14564  1324  0222               	subwf	DelayTime_1us@i,w
 14565  1325                     u5055:	
 14566  1325  1803               	btfsc	3,0
 14567  1326  0008               	return
 14568                           
 14569                           ;CC2500_B1.c: 281: for (j = 0; j <= 1; j++);
 14570  1327  01A4               	clrf	DelayTime_1us@j
 14571  1328  01A5               	clrf	DelayTime_1us@j+1
 14572  1329  3000               	movlw	0
 14573  132A  0225               	subwf	DelayTime_1us@j+1,w
 14574  132B  3002               	movlw	2
 14575  132C  1903               	skipnz
 14576  132D  0224               	subwf	DelayTime_1us@j,w
 14577  132E  1803               	btfsc	3,0
 14578  132F  2B3B               	goto	l6089
 14579  1330                     l6087:	
 14580  1330  3001               	movlw	1
 14581  1331  07A4               	addwf	DelayTime_1us@j,f
 14582  1332  3000               	movlw	0
 14583  1333  3DA5               	addwfc	DelayTime_1us@j+1,f
 14584  1334  3000               	movlw	0
 14585  1335  0225               	subwf	DelayTime_1us@j+1,w
 14586  1336  3002               	movlw	2
 14587  1337  1903               	skipnz
 14588  1338  0224               	subwf	DelayTime_1us@j,w
 14589  1339  1C03               	skipc
 14590  133A  2B30               	goto	l6087
 14591  133B                     l6089:	
 14592  133B  3001               	movlw	1
 14593  133C  07A2               	addwf	DelayTime_1us@i,f
 14594  133D  3000               	movlw	0
 14595  133E  3DA3               	addwfc	DelayTime_1us@i+1,f
 14596  133F  2B1F               	goto	l382
 14597  1340                     __end_of_DelayTime_1us:	
 14598                           
 14599                           	psect	text93
 14600  1E19                     __ptext93:	
 14601 ;; *************** function _CC2500_ClearTXFIFO *****************
 14602 ;; Defined at:
 14603 ;;		line 158 in file "../src/CC2500_B1.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;		None
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;		None
 14608 ;; Return value:  Size  Location     Type
 14609 ;;		None               void
 14610 ;; Registers used:
 14611 ;;		wreg, status,2, status,0, pclath, cstack
 14612 ;; Tracked objects:
 14613 ;;		On entry : 0/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;Total ram usage:        0 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    7
 14624 ;; This function calls:
 14625 ;;		_CC2500_WriteCommand
 14626 ;; This function is called by:
 14627 ;;		_CC2500_PowerOnInitial
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           
 14632                           ;psect for function _CC2500_ClearTXFIFO
 14633  1E19                     _CC2500_ClearTXFIFO:	
 14634                           
 14635                           ;CC2500_B1.c: 159: CC2500_WriteCommand(0x3B);
 14636                           
 14637                           ;incstack = 0
 14638                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 14639  1E19  303B               	movlw	59
 14640  1E1A  319F  2714         	fcall	_CC2500_WriteCommand
 14641  1E1C  0008               	return
 14642  1E1D                     __end_of_CC2500_ClearTXFIFO:	
 14643                           
 14644                           	psect	text94
 14645  1E15                     __ptext94:	
 14646 ;; *************** function _CC2500_ClearRXFIFO *****************
 14647 ;; Defined at:
 14648 ;;		line 165 in file "../src/CC2500_B1.c"
 14649 ;; Parameters:    Size  Location     Type
 14650 ;;		None
 14651 ;; Auto vars:     Size  Location     Type
 14652 ;;		None
 14653 ;; Return value:  Size  Location     Type
 14654 ;;		None               void
 14655 ;; Registers used:
 14656 ;;		wreg, status,2, status,0, pclath, cstack
 14657 ;; Tracked objects:
 14658 ;;		On entry : 0/0
 14659 ;;		On exit  : 0/0
 14660 ;;		Unchanged: 0/0
 14661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14666 ;;Total ram usage:        0 bytes
 14667 ;; Hardware stack levels used:    1
 14668 ;; Hardware stack levels required when called:    7
 14669 ;; This function calls:
 14670 ;;		_CC2500_WriteCommand
 14671 ;; This function is called by:
 14672 ;;		_CC2500_PowerOnInitial
 14673 ;; This function uses a non-reentrant model
 14674 ;;
 14675                           
 14676                           
 14677                           ;psect for function _CC2500_ClearRXFIFO
 14678  1E15                     _CC2500_ClearRXFIFO:	
 14679                           
 14680                           ;CC2500_B1.c: 166: CC2500_WriteCommand(0x3A);
 14681                           
 14682                           ;incstack = 0
 14683                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 14684  1E15  303A               	movlw	58
 14685  1E16  319F  2714         	fcall	_CC2500_WriteCommand
 14686  1E18  0008               	return
 14687  1E19                     __end_of_CC2500_ClearRXFIFO:	
 14688                           
 14689                           	psect	text95
 14690  1F14                     __ptext95:	
 14691 ;; *************** function _CC2500_WriteCommand *****************
 14692 ;; Defined at:
 14693 ;;		line 248 in file "../src/CC2500_B1.c"
 14694 ;; Parameters:    Size  Location     Type
 14695 ;;  command         1    wreg     unsigned char 
 14696 ;; Auto vars:     Size  Location     Type
 14697 ;;  command         1    3[BANK0 ] unsigned char 
 14698 ;; Return value:  Size  Location     Type
 14699 ;;		None               void
 14700 ;; Registers used:
 14701 ;;		wreg, status,2, status,0, pclath, cstack
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;Total ram usage:        2 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    6
 14714 ;; This function calls:
 14715 ;;		_CC2500_WriteByte
 14716 ;; This function is called by:
 14717 ;;		_CC2500_TxData
 14718 ;;		_CC2500_RxData
 14719 ;;		_CC2500_ClearTXFIFO
 14720 ;;		_CC2500_ClearRXFIFO
 14721 ;;		_CC2500_FrequencyCabr
 14722 ;;		_CC2500_SIDLEMode
 14723 ;;		_setRF_Main
 14724 ;;		_RF_RxDisable
 14725 ;; This function uses a non-reentrant model
 14726 ;;
 14727                           
 14728                           
 14729                           ;psect for function _CC2500_WriteCommand
 14730  1F14                     _CC2500_WriteCommand:	
 14731                           
 14732                           ;incstack = 0
 14733                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 14734                           ;CC2500_WriteCommand@command stored from wreg
 14735  1F14  0020               	movlb	0	; select bank0
 14736  1F15  00A3               	movwf	CC2500_WriteCommand@command
 14737                           
 14738                           ;CC2500_B1.c: 249: RC4 = 0;
 14739  1F16  120E               	bcf	14,4	;volatile
 14740                           
 14741                           ;CC2500_B1.c: 250: SPI0Buffer = command;
 14742  1F17  0823               	movf	CC2500_WriteCommand@command,w
 14743  1F18  00A2               	movwf	??_CC2500_WriteCommand
 14744  1F19  0822               	movf	??_CC2500_WriteCommand,w
 14745  1F1A  0021               	movlb	1	; select bank1
 14746  1F1B  00C2               	movwf	_SPI0Buffer^(0+128)
 14747  1F1C                     l370:	
 14748                           ;CC2500_B1.c: 252: while (RC2 == 1);
 14749                           
 14750  1F1C  0020               	movlb	0	; select bank0
 14751  1F1D  190E               	btfsc	14,2	;volatile
 14752  1F1E  2F1C               	goto	l370
 14753                           
 14754                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 14755  1F1F  3190  20CE         	fcall	_CC2500_WriteByte
 14756                           
 14757                           ;CC2500_B1.c: 255: RC4 = 1;
 14758  1F21  0020               	movlb	0	; select bank0
 14759  1F22  160E               	bsf	14,4	;volatile
 14760  1F23  0008               	return
 14761  1F24                     __end_of_CC2500_WriteCommand:	
 14762                           
 14763                           	psect	text96
 14764  10CE                     __ptext96:	
 14765 ;; *************** function _CC2500_WriteByte *****************
 14766 ;; Defined at:
 14767 ;;		line 190 in file "../src/CC2500_B1.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;		None
 14770 ;; Auto vars:     Size  Location     Type
 14771 ;;  loop_a          1    1[BANK0 ] unsigned char 
 14772 ;; Return value:  Size  Location     Type
 14773 ;;		None               void
 14774 ;; Registers used:
 14775 ;;		wreg, status,2, status,0
 14776 ;; Tracked objects:
 14777 ;;		On entry : 0/0
 14778 ;;		On exit  : 0/0
 14779 ;;		Unchanged: 0/0
 14780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;Total ram usage:        2 bytes
 14786 ;; Hardware stack levels used:    1
 14787 ;; Hardware stack levels required when called:    5
 14788 ;; This function calls:
 14789 ;;		Nothing
 14790 ;; This function is called by:
 14791 ;;		_CC2500_TxData
 14792 ;;		_CC2500_RxData
 14793 ;;		_CC2500_PowerRST
 14794 ;;		_CC2500_WriteREG
 14795 ;;		_CC2500_WriteCommand
 14796 ;;		_CC2500_ReadStatus
 14797 ;;		_CC2500_ReadREG
 14798 ;; This function uses a non-reentrant model
 14799 ;;
 14800                           
 14801                           
 14802                           ;psect for function _CC2500_WriteByte
 14803  10CE                     _CC2500_WriteByte:	
 14804                           
 14805                           ;CC2500_B1.c: 191: unsigned char loop_a;
 14806                           ;CC2500_B1.c: 192: for (loop_a = 0; loop_a < 8; loop_a++) {
 14807                           
 14808                           ;incstack = 0
 14809                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 14810  10CE  0020               	movlb	0	; select bank0
 14811  10CF  01A1               	clrf	CC2500_WriteByte@loop_a
 14812  10D0                     L11:	
 14813  10D0  3008               	movlw	8
 14814  10D1  0221               	subwf	CC2500_WriteByte@loop_a,w
 14815  10D2  1803               	btfsc	3,0
 14816  10D3  0008               	return
 14817                           
 14818                           ;CC2500_B1.c: 193: if (SPI0Buffer & 0x80)
 14819  10D4  0021               	movlb	1	; select bank1
 14820  10D5  1FC2               	btfss	_SPI0Buffer^(0+128),7
 14821  10D6  28DA               	goto	l346
 14822                           
 14823                           ;CC2500_B1.c: 194: RC0 = 1;
 14824  10D7  0020               	movlb	0	; select bank0
 14825  10D8  140E               	bsf	14,0	;volatile
 14826  10D9  28DC               	goto	l347
 14827  10DA                     l346:	
 14828                           
 14829                           ;CC2500_B1.c: 195: else
 14830                           ;CC2500_B1.c: 196: RC0 = 0;
 14831  10DA  0020               	movlb	0	; select bank0
 14832  10DB  100E               	bcf	14,0	;volatile
 14833  10DC                     l347:	
 14834                           
 14835                           ;CC2500_B1.c: 197: RC1 = 1;
 14836  10DC  148E               	bsf	14,1	;volatile
 14837                           
 14838                           ;CC2500_B1.c: 198: SPI0Buffer <<= 1;
 14839  10DD  1003               	clrc
 14840  10DE  0021               	movlb	1	; select bank1
 14841  10DF  0DC2               	rlf	_SPI0Buffer^(0+128),f
 14842                           
 14843                           ;CC2500_B1.c: 199: RC1 = 0;
 14844  10E0  0020               	movlb	0	; select bank0
 14845  10E1  108E               	bcf	14,1	;volatile
 14846  10E2  3001               	movlw	1
 14847  10E3  00A0               	movwf	??_CC2500_WriteByte
 14848  10E4  0820               	movf	??_CC2500_WriteByte,w
 14849  10E5  07A1               	addwf	CC2500_WriteByte@loop_a,f
 14850  10E6  28D0               	goto	L11
 14851  10E7                     __end_of_CC2500_WriteByte:	
 14852                           
 14853                           	psect	text97
 14854  0F4D                     __ptext97:	
 14855 ;; *************** function _Buzzer_Main *****************
 14856 ;; Defined at:
 14857 ;;		line 53 in file "../src/Buzzer_B1.c"
 14858 ;; Parameters:    Size  Location     Type
 14859 ;;		None
 14860 ;; Auto vars:     Size  Location     Type
 14861 ;;		None
 14862 ;; Return value:  Size  Location     Type
 14863 ;;		None               void
 14864 ;; Registers used:
 14865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 14866 ;; Tracked objects:
 14867 ;;		On entry : 0/0
 14868 ;;		On exit  : 0/0
 14869 ;;		Unchanged: 0/0
 14870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;Total ram usage:        4 bytes
 14876 ;; Hardware stack levels used:    1
 14877 ;; Hardware stack levels required when called:    5
 14878 ;; This function calls:
 14879 ;;		Nothing
 14880 ;; This function is called by:
 14881 ;;		_main
 14882 ;; This function uses a non-reentrant model
 14883 ;;
 14884                           
 14885                           
 14886                           ;psect for function _Buzzer_Main
 14887  0F4D                     _Buzzer_Main:	
 14888                           
 14889                           ;Buzzer_B1.c: 54: Buz->Switch = (RB3) ? 1 : 0;
 14890                           
 14891                           ;incstack = 0
 14892                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 14893  0F4D  0021               	movlb	1	; select bank1
 14894  0F4E  0837               	movf	_Buz^(0+128),w
 14895  0F4F  0086               	movwf	6
 14896  0F50  3001               	movlw	1	; select bank2/3
 14897  0F51  0087               	movwf	7
 14898  0F52  1281               	bcf	1,5
 14899  0F53  0020               	movlb	0	; select bank0
 14900  0F54  198D               	btfsc	13,3	;volatile
 14901  0F55  1681               	bsf	1,5
 14902                           
 14903                           ;Buzzer_B1.c: 56: if (Buz->Counter >= Buz->TimeValue) {
 14904  0F56  0021               	movlb	1	; select bank1
 14905  0F57  0837               	movf	_Buz^(0+128),w
 14906  0F58  3E06               	addlw	6
 14907  0F59  0086               	movwf	6
 14908  0F5A  3001               	movlw	1	; select bank2/3
 14909  0F5B  0087               	movwf	7
 14910  0F5C  3F40               	moviw [0]fsr1
 14911  0F5D  0020               	movlb	0	; select bank0
 14912  0F5E  00A0               	movwf	??_Buzzer_Main
 14913  0F5F  3F41               	moviw [1]fsr1
 14914  0F60  00A1               	movwf	??_Buzzer_Main+1
 14915  0F61  0021               	movlb	1	; select bank1
 14916  0F62  0A37               	incf	_Buz^(0+128),w
 14917  0F63  0086               	movwf	6
 14918  0F64  3001               	movlw	1	; select bank2/3
 14919  0F65  0087               	movwf	7
 14920  0F66  3F40               	moviw [0]fsr1
 14921  0F67  0020               	movlb	0	; select bank0
 14922  0F68  00A2               	movwf	??_Buzzer_Main+2
 14923  0F69  3F41               	moviw [1]fsr1
 14924  0F6A  00A3               	movwf	??_Buzzer_Main+3
 14925  0F6B  0821               	movf	??_Buzzer_Main+1,w
 14926  0F6C  0223               	subwf	??_Buzzer_Main+3,w
 14927  0F6D  1D03               	skipz
 14928  0F6E  2F71               	goto	u6605
 14929  0F6F  0820               	movf	??_Buzzer_Main,w
 14930  0F70  0222               	subwf	??_Buzzer_Main+2,w
 14931  0F71                     u6605:	
 14932  0F71  1C03               	skipc
 14933  0F72  0008               	return
 14934                           
 14935                           ;Buzzer_B1.c: 57: Buz->Counter = 0;
 14936  0F73  0021               	movlb	1	; select bank1
 14937  0F74  0A37               	incf	_Buz^(0+128),w
 14938  0F75  0086               	movwf	6
 14939  0F76  3001               	movlw	1	; select bank2/3
 14940  0F77  0087               	movwf	7
 14941  0F78  3000               	movlw	0
 14942  0F79  3FC0               	movwi [0]fsr1
 14943  0F7A  3FC1               	movwi [1]fsr1
 14944                           
 14945                           ;Buzzer_B1.c: 58: if (!Buz->Switch) {
 14946  0F7B  0837               	movf	_Buz^(0+128),w
 14947  0F7C  0086               	movwf	6
 14948  0F7D  3001               	movlw	1	; select bank2/3
 14949  0F7E  0087               	movwf	7
 14950  0F7F  1A81               	btfsc	1,5
 14951  0F80  2FEF               	goto	l7029
 14952                           
 14953                           ;Buzzer_B1.c: 59: if (Buz->Count == 0) {
 14954  0F81  0837               	movf	_Buz^(0+128),w
 14955  0F82  3E03               	addlw	3
 14956  0F83  0086               	movwf	6
 14957  0F84  3001               	movlw	1	; select bank2/3
 14958  0F85  0087               	movwf	7
 14959  0F86  0881               	movf	1,f
 14960  0F87  1D03               	skipz
 14961  0F88  2FE7               	goto	l7025
 14962                           
 14963                           ;Buzzer_B1.c: 60: if (Buz->BufferStatus1) {
 14964  0F89  0837               	movf	_Buz^(0+128),w
 14965  0F8A  0086               	movwf	6
 14966  0F8B  3001               	movlw	1	; select bank2/3
 14967  0F8C  0087               	movwf	7
 14968  0F8D  1D81               	btfss	1,3
 14969  0F8E  2FB5               	goto	l7017
 14970                           
 14971                           ;Buzzer_B1.c: 61: Buz->BufferStatus1 = 0;
 14972  0F8F  0837               	movf	_Buz^(0+128),w
 14973  0F90  0086               	movwf	6
 14974  0F91  3001               	movlw	1	; select bank2/3
 14975  0F92  0087               	movwf	7
 14976  0F93  1181               	bcf	1,3
 14977                           
 14978                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer1;
 14979  0F94  0837               	movf	_Buz^(0+128),w
 14980  0F95  3E04               	addlw	4
 14981  0F96  0086               	movwf	6
 14982  0F97  3001               	movlw	1	; select bank2/3
 14983  0F98  0087               	movwf	7
 14984  0F99  0801               	movf	1,w
 14985  0F9A  0020               	movlb	0	; select bank0
 14986  0F9B  00A0               	movwf	??_Buzzer_Main
 14987  0F9C  0021               	movlb	1	; select bank1
 14988  0F9D  0837               	movf	_Buz^(0+128),w
 14989  0F9E  3E03               	addlw	3
 14990  0F9F  0086               	movwf	6
 14991  0FA0  3001               	movlw	1	; select bank2/3
 14992  0FA1  0087               	movwf	7
 14993  0FA2  0020               	movlb	0	; select bank0
 14994  0FA3  0820               	movf	??_Buzzer_Main,w
 14995  0FA4  0081               	movwf	1
 14996                           
 14997                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer1;
 14998  0FA5  0021               	movlb	1	; select bank1
 14999  0FA6  0837               	movf	_Buz^(0+128),w
 15000  0FA7  3E08               	addlw	8
 15001  0FA8  0086               	movwf	6
 15002  0FA9  3001               	movlw	1	; select bank2/3
 15003  0FAA  0087               	movwf	7
 15004  0FAB  0837               	movf	_Buz^(0+128),w
 15005  0FAC  3E06               	addlw	6
 15006  0FAD  0084               	movwf	4
 15007  0FAE  3001               	movlw	1	; select bank2/3
 15008  0FAF  0085               	movwf	5
 15009  0FB0  3F40               	moviw [0]fsr1
 15010  0FB1  3F80               	movwi [0]fsr0
 15011  0FB2  3F41               	moviw [1]fsr1
 15012  0FB3  3F81               	movwi [1]fsr0
 15013                           
 15014                           ;Buzzer_B1.c: 64: } else if (Buz->BufferStatus2) {
 15015  0FB4  0008               	return
 15016  0FB5                     l7017:	
 15017  0FB5  0837               	movf	_Buz^(0+128),w
 15018  0FB6  0086               	movwf	6
 15019  0FB7  3001               	movlw	1	; select bank2/3
 15020  0FB8  0087               	movwf	7
 15021  0FB9  1E01               	btfss	1,4
 15022  0FBA  2FE1               	goto	l7023
 15023                           
 15024                           ;Buzzer_B1.c: 65: Buz->BufferStatus2 = 0;
 15025  0FBB  0837               	movf	_Buz^(0+128),w
 15026  0FBC  0086               	movwf	6
 15027  0FBD  3001               	movlw	1	; select bank2/3
 15028  0FBE  0087               	movwf	7
 15029  0FBF  1201               	bcf	1,4
 15030                           
 15031                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer2;
 15032  0FC0  0837               	movf	_Buz^(0+128),w
 15033  0FC1  3E05               	addlw	5
 15034  0FC2  0086               	movwf	6
 15035  0FC3  3001               	movlw	1	; select bank2/3
 15036  0FC4  0087               	movwf	7
 15037  0FC5  0801               	movf	1,w
 15038  0FC6  0020               	movlb	0	; select bank0
 15039  0FC7  00A0               	movwf	??_Buzzer_Main
 15040  0FC8  0021               	movlb	1	; select bank1
 15041  0FC9  0837               	movf	_Buz^(0+128),w
 15042  0FCA  3E03               	addlw	3
 15043  0FCB  0086               	movwf	6
 15044  0FCC  3001               	movlw	1	; select bank2/3
 15045  0FCD  0087               	movwf	7
 15046  0FCE  0020               	movlb	0	; select bank0
 15047  0FCF  0820               	movf	??_Buzzer_Main,w
 15048  0FD0  0081               	movwf	1
 15049                           
 15050                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer2;
 15051  0FD1  0021               	movlb	1	; select bank1
 15052  0FD2  0837               	movf	_Buz^(0+128),w
 15053  0FD3  3E0A               	addlw	10
 15054  0FD4  0086               	movwf	6
 15055  0FD5  3001               	movlw	1	; select bank2/3
 15056  0FD6  0087               	movwf	7
 15057  0FD7  0837               	movf	_Buz^(0+128),w
 15058  0FD8  3E06               	addlw	6
 15059  0FD9  0084               	movwf	4
 15060  0FDA  3001               	movlw	1	; select bank2/3
 15061  0FDB  0085               	movwf	5
 15062  0FDC  3F40               	moviw [0]fsr1
 15063  0FDD  3F80               	movwi [0]fsr0
 15064  0FDE  3F41               	moviw [1]fsr1
 15065  0FDF  3F81               	movwi [1]fsr0
 15066                           
 15067                           ;Buzzer_B1.c: 68: } else {
 15068  0FE0  0008               	return
 15069  0FE1                     l7023:	
 15070                           
 15071                           ;Buzzer_B1.c: 69: Buz->GO = 0;
 15072  0FE1  0837               	movf	_Buz^(0+128),w
 15073  0FE2  0086               	movwf	6
 15074  0FE3  3001               	movlw	1	; select bank2/3
 15075  0FE4  0087               	movwf	7
 15076  0FE5  1081               	bcf	1,1
 15077                           
 15078                           ;Buzzer_B1.c: 70: }
 15079                           ;Buzzer_B1.c: 71: } else {
 15080  0FE6  0008               	return
 15081  0FE7                     l7025:	
 15082                           
 15083                           ;Buzzer_B1.c: 72: Buz->Switch = 1;
 15084  0FE7  0837               	movf	_Buz^(0+128),w
 15085  0FE8  0086               	movwf	6
 15086  0FE9  3001               	movlw	1	; select bank2/3
 15087  0FEA  0087               	movwf	7
 15088  0FEB  1681               	bsf	1,5
 15089                           
 15090                           ;Buzzer_B1.c: 74: RB3 = 1;
 15091  0FEC  0020               	movlb	0	; select bank0
 15092  0FED  158D               	bsf	13,3	;volatile
 15093                           
 15094                           ;Buzzer_B1.c: 75: }
 15095                           ;Buzzer_B1.c: 76: } else {
 15096  0FEE  0008               	return
 15097  0FEF                     l7029:	
 15098                           
 15099                           ;Buzzer_B1.c: 77: Buz->Switch = 0;
 15100  0FEF  0021               	movlb	1	; select bank1
 15101  0FF0  0837               	movf	_Buz^(0+128),w
 15102  0FF1  0086               	movwf	6
 15103  0FF2  3001               	movlw	1	; select bank2/3
 15104  0FF3  0087               	movwf	7
 15105  0FF4  1281               	bcf	1,5
 15106                           
 15107                           ;Buzzer_B1.c: 79: RB3 = 0;
 15108  0FF5  0020               	movlb	0	; select bank0
 15109  0FF6  118D               	bcf	13,3	;volatile
 15110                           
 15111                           ;Buzzer_B1.c: 81: Buz->Count--;
 15112  0FF7  0021               	movlb	1	; select bank1
 15113  0FF8  0837               	movf	_Buz^(0+128),w
 15114  0FF9  3E03               	addlw	3
 15115  0FFA  0086               	movwf	6
 15116  0FFB  3001               	movlw	1	; select bank2/3
 15117  0FFC  0087               	movwf	7
 15118  0FFD  3001               	movlw	1
 15119  0FFE  0281               	subwf	1,f
 15120  0FFF  0008               	return
 15121  1000                     __end_of_Buzzer_Main:	
 15122                           
 15123                           	psect	text98
 15124  1E82                     __ptext98:	
 15125 ;; *************** function _Buzzer_Initialization *****************
 15126 ;; Defined at:
 15127 ;;		line 11 in file "../src/Buzzer_B1.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;		None
 15130 ;; Auto vars:     Size  Location     Type
 15131 ;;		None
 15132 ;; Return value:  Size  Location     Type
 15133 ;;		None               void
 15134 ;; Registers used:
 15135 ;;		wreg, fsr1l, fsr1h
 15136 ;; Tracked objects:
 15137 ;;		On entry : 0/0
 15138 ;;		On exit  : 0/0
 15139 ;;		Unchanged: 0/0
 15140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15144 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15145 ;;Total ram usage:        1 bytes
 15146 ;; Hardware stack levels used:    1
 15147 ;; Hardware stack levels required when called:    5
 15148 ;; This function calls:
 15149 ;;		Nothing
 15150 ;; This function is called by:
 15151 ;;		_main
 15152 ;; This function uses a non-reentrant model
 15153 ;;
 15154                           
 15155                           
 15156                           ;psect for function _Buzzer_Initialization
 15157  1E82                     _Buzzer_Initialization:	
 15158                           
 15159                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15163  1E82  30D0               	movlw	_Buz1& (0+255)
 15164  1E83  0020               	movlb	0	; select bank0
 15165  1E84  00A0               	movwf	??_Buzzer_Initialization
 15166  1E85  0820               	movf	??_Buzzer_Initialization,w
 15167  1E86  0021               	movlb	1	; select bank1
 15168  1E87  00B7               	movwf	_Buz^(0+128)
 15169                           
 15170                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15171  1E88  0837               	movf	_Buz^(0+128),w
 15172  1E89  0086               	movwf	6
 15173  1E8A  3001               	movlw	1	; select bank2/3
 15174  1E8B  0087               	movwf	7
 15175  1E8C  1401               	bsf	1,0
 15176  1E8D  0008               	return
 15177  1E8E                     __end_of_Buzzer_Initialization:	
 15178                           
 15179                           	psect	intentry
 15180  0004                     __pintentry:	
 15181 ;; *************** function _ISR *****************
 15182 ;; Defined at:
 15183 ;;		line 109 in file "../src/MCU_B1.c"
 15184 ;; Parameters:    Size  Location     Type
 15185 ;;		None
 15186 ;; Auto vars:     Size  Location     Type
 15187 ;;		None
 15188 ;; Return value:  Size  Location     Type
 15189 ;;		None               void
 15190 ;; Registers used:
 15191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15192 ;; Tracked objects:
 15193 ;;		On entry : 0/0
 15194 ;;		On exit  : 0/0
 15195 ;;		Unchanged: 0/0
 15196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;Total ram usage:        1 bytes
 15202 ;; Hardware stack levels used:    1
 15203 ;; Hardware stack levels required when called:    4
 15204 ;; This function calls:
 15205 ;;		_INT_ISR
 15206 ;;		_IOC_ISR
 15207 ;;		_TMR0_ISR
 15208 ;; This function is called by:
 15209 ;;		Interrupt level 1
 15210 ;; This function uses a non-reentrant model
 15211 ;;
 15212                           
 15213  0004                     _ISR:	
 15214                           
 15215                           ;incstack = 0
 15216                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15217  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15218  0005  3180               	pagesel	$
 15219  0006  0020               	movlb	0	; select bank0
 15220  0007  087F               	movf	127,w
 15221  0008  00F7               	movwf	??_ISR
 15222                           
 15223                           ;MCU_B1.c: 111: IOC_ISR();
 15224  0009  319F  2795  3180   	fcall	_IOC_ISR
 15225                           
 15226                           ;MCU_B1.c: 113: TMR0_ISR();
 15227  000C  3194  24AC  3180   	fcall	_TMR0_ISR
 15228                           
 15229                           ;MCU_B1.c: 115: ;;
 15230                           ;MCU_B1.c: 119: INT_ISR();
 15231  000F  319F  2784         	fcall	_INT_ISR
 15232  0011  0877               	movf	??_ISR,w
 15233  0012  0020               	movlb	0	; select bank0
 15234  0013  00FF               	movwf	127
 15235  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15236  0015  0009               	retfie
 15237  0016                     __end_of_ISR:	
 15238                           
 15239                           	psect	text100
 15240  14AC                     __ptext100:	
 15241 ;; *************** function _TMR0_ISR *****************
 15242 ;; Defined at:
 15243 ;;		line 137 in file "../src/MCU_B1.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;		None
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;		None
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        0 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    2
 15264 ;; This function calls:
 15265 ;;		_Buz_Counter
 15266 ;;		_setDimmerLights_IntrControl
 15267 ;; This function is called by:
 15268 ;;		_ISR
 15269 ;; This function uses a non-reentrant model
 15270 ;;
 15271                           
 15272                           
 15273                           ;psect for function _TMR0_ISR
 15274  14AC                     _TMR0_ISR:	
 15275                           
 15276                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15277                           
 15278                           ;incstack = 0
 15279                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15280  14AC  1E8B               	btfss	11,5	;volatile
 15281  14AD  0008               	return
 15282  14AE  1D0B               	btfss	11,2	;volatile
 15283  14AF  0008               	return
 15284                           
 15285                           ;MCU_B1.c: 139: TMR0 = (256-190);
 15286  14B0  3042               	movlw	66
 15287  14B1  0020               	movlb	0	; select bank0
 15288  14B2  0095               	movwf	21	;volatile
 15289                           
 15290                           ;MCU_B1.c: 140: TMR0IF = 0;
 15291  14B3  110B               	bcf	11,2	;volatile
 15292                           
 15293                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15294  14B4  3001               	movlw	1
 15295  14B5  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15296                           
 15297                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15298  14B8  3002               	movlw	2
 15299  14B9  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15300                           
 15301                           ;MCU_B1.c: 155: setDimmerLights_IntrControl(3);
 15302  14BC  3003               	movlw	3
 15303  14BD  3180  204C  3194   	fcall	_setDimmerLights_IntrControl
 15304                           
 15305                           ;MCU_B1.c: 161: Timer0->Count++;
 15306  14C0  0021               	movlb	1	; select bank1
 15307  14C1  0A6C               	incf	_Timer0^(0+128),w
 15308  14C2  0086               	movwf	6
 15309  14C3  0187               	clrf	7
 15310  14C4  3001               	movlw	1
 15311  14C5  0781               	addwf	1,f
 15312  14C6  3141               	addfsr 1,1
 15313  14C7  1803               	skipnc
 15314  14C8  0A81               	incf	1,f
 15315                           
 15316                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 15317  14C9  0A6C               	incf	_Timer0^(0+128),w
 15318  14CA  0086               	movwf	6
 15319  14CB  0187               	clrf	7
 15320  14CC  3F40               	moviw [0]fsr1
 15321  14CD  3A64               	xorlw	100
 15322  14CE  1D03               	skipz
 15323  14CF  2CD2               	goto	u670_25
 15324  14D0  3F41               	moviw [1]fsr1
 15325  14D1  3A00               	xorlw	0
 15326  14D2                     u670_25:	
 15327  14D2  1D03               	skipz
 15328  14D3  0008               	return
 15329                           
 15330                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15331  14D4  0A6C               	incf	_Timer0^(0+128),w
 15332  14D5  0086               	movwf	6
 15333  14D6  0187               	clrf	7
 15334  14D7  3000               	movlw	0
 15335  14D8  3FC0               	movwi [0]fsr1
 15336  14D9  3FC1               	movwi [1]fsr1
 15337                           
 15338                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15339  14DA  086E               	movf	_myMain^(0+128),w
 15340  14DB  0086               	movwf	6
 15341  14DC  3001               	movlw	1	; select bank2/3
 15342  14DD  0087               	movwf	7
 15343  14DE  1481               	bsf	1,1
 15344                           
 15345                           ;MCU_B1.c: 167: Buz_Counter();
 15346  14DF  319F  27A6         	fcall	_Buz_Counter
 15347  14E1  0008               	return
 15348  14E2                     __end_of_TMR0_ISR:	
 15349                           
 15350                           	psect	text101
 15351  004C                     __ptext101:	
 15352 ;; *************** function _setDimmerLights_IntrControl *****************
 15353 ;; Defined at:
 15354 ;;		line 87 in file "../src/Dimmer_B1.c"
 15355 ;; Parameters:    Size  Location     Type
 15356 ;;  lights          1    wreg     unsigned char 
 15357 ;; Auto vars:     Size  Location     Type
 15358 ;;  lights          1    6[COMMON] unsigned char 
 15359 ;; Return value:  Size  Location     Type
 15360 ;;		None               void
 15361 ;; Registers used:
 15362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15363 ;; Tracked objects:
 15364 ;;		On entry : 0/0
 15365 ;;		On exit  : 0/0
 15366 ;;		Unchanged: 0/0
 15367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15369 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15370 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;Total ram usage:        5 bytes
 15373 ;; Hardware stack levels used:    1
 15374 ;; Hardware stack levels required when called:    1
 15375 ;; This function calls:
 15376 ;;		_DimmerIntrPointSelect
 15377 ;; This function is called by:
 15378 ;;		_TMR0_ISR
 15379 ;; This function uses a non-reentrant model
 15380 ;;
 15381                           
 15382                           
 15383                           ;psect for function _setDimmerLights_IntrControl
 15384  004C                     _setDimmerLights_IntrControl:	
 15385                           
 15386                           ;incstack = 0
 15387                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15388                           ;setDimmerLights_IntrControl@lights stored from wreg
 15389  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15390                           
 15391                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 15392  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15393  004E  3191  2100  3180   	fcall	_DimmerIntrPointSelect
 15394                           
 15395                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 15396  0051  0879               	movf	_DimmerLightsIntr,w
 15397  0052  0086               	movwf	6
 15398  0053  3001               	movlw	1	; select bank2/3
 15399  0054  0087               	movwf	7
 15400  0055  1C01               	btfss	1,0
 15401  0056  28B7               	goto	i1l6489
 15402                           
 15403                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 15404  0057  3001               	movlw	1
 15405  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15406  0059  0879               	movf	_DimmerLightsIntr,w
 15407  005A  3E03               	addlw	3
 15408  005B  0086               	movwf	6
 15409  005C  3001               	movlw	1	; select bank2/3
 15410  005D  0087               	movwf	7
 15411  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15412  005F  0781               	addwf	1,f
 15413                           
 15414                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15415  0060  0021               	movlb	1	; select bank1
 15416  0061  0839               	movf	_Dimmer^(0+128),w
 15417  0062  3E02               	addlw	2
 15418  0063  0086               	movwf	6
 15419  0064  0187               	clrf	7
 15420  0065  0801               	movf	1,w
 15421  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15422  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15423  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15424  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15425  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15426  006B  1903               	skipnz
 15427  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15428  006D  0879               	movf	_DimmerLightsIntr,w
 15429  006E  3E04               	addlw	4
 15430  006F  0086               	movwf	6
 15431  0070  3001               	movlw	1	; select bank2/3
 15432  0071  0087               	movwf	7
 15433  0072  0801               	movf	1,w
 15434  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15435  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15436  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15437  0076  1803               	skipnc
 15438  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15439  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15440  0079  0879               	movf	_DimmerLightsIntr,w
 15441  007A  3E03               	addlw	3
 15442  007B  0086               	movwf	6
 15443  007C  3001               	movlw	1	; select bank2/3
 15444  007D  0087               	movwf	7
 15445  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15446  007F  3A80               	xorlw	128
 15447  0080  3C80               	sublw	128
 15448  0081  1D03               	skipz
 15449  0082  2885               	goto	u567_25
 15450  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15451  0084  0201               	subwf	1,w
 15452  0085                     u567_25:	
 15453  0085  1C03               	skipc
 15454  0086  29C6               	goto	i1l6555
 15455                           
 15456                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 15457  0087  0879               	movf	_DimmerLightsIntr,w
 15458  0088  3E03               	addlw	3
 15459  0089  0086               	movwf	6
 15460  008A  3001               	movlw	1	; select bank2/3
 15461  008B  0087               	movwf	7
 15462  008C  0181               	clrf	1
 15463                           
 15464                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 15465  008D  0879               	movf	_DimmerLightsIntr,w
 15466  008E  0086               	movwf	6
 15467  008F  3001               	movlw	1	; select bank2/3
 15468  0090  0087               	movwf	7
 15469  0091  1001               	bcf	1,0
 15470                           
 15471                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 15472  0092  0879               	movf	_DimmerLightsIntr,w
 15473  0093  0086               	movwf	6
 15474  0094  3001               	movlw	1	; select bank2/3
 15475  0095  0087               	movwf	7
 15476  0096  1F01               	btfss	1,6
 15477  0097  29C6               	goto	i1l6555
 15478                           
 15479                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 15480  0098  0879               	movf	_DimmerLightsIntr,w
 15481  0099  3E08               	addlw	8
 15482  009A  0086               	movwf	6
 15483  009B  3001               	movlw	1	; select bank2/3
 15484  009C  0087               	movwf	7
 15485  009D  1401               	bsf	1,0
 15486                           
 15487                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 15488  009E  0879               	movf	_DimmerLightsIntr,w
 15489  009F  3E08               	addlw	8
 15490  00A0  0086               	movwf	6
 15491  00A1  3001               	movlw	1	; select bank2/3
 15492  00A2  0087               	movwf	7
 15493  00A3  1681               	bsf	1,5
 15494                           
 15495                           ;Dimmer_B1.c: 100: if (lights == 1) {
 15496  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15497  00A5  3A01               	xorlw	1
 15498  00A6  1D03               	skipz
 15499  00A7  28AA               	goto	i1l6481
 15500                           
 15501                           ;Dimmer_B1.c: 101: RB4 = 1;
 15502  00A8  0020               	movlb	0	; select bank0
 15503  00A9  160D               	bsf	13,4	;volatile
 15504  00AA                     i1l6481:	
 15505                           ;Dimmer_B1.c: 102: ;;
 15506                           
 15507                           
 15508                           ;Dimmer_B1.c: 103: }
 15509                           ;Dimmer_B1.c: 106: if (lights == 2) {
 15510  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 15511  00AB  3A02               	xorlw	2
 15512  00AC  1D03               	skipz
 15513  00AD  28B0               	goto	i1l6485
 15514                           
 15515                           ;Dimmer_B1.c: 107: RA7 = 1;
 15516  00AE  0020               	movlb	0	; select bank0
 15517  00AF  178C               	bsf	12,7	;volatile
 15518  00B0                     i1l6485:	
 15519                           
 15520                           ;Dimmer_B1.c: 108: }
 15521                           ;Dimmer_B1.c: 111: if (lights == 3) {
 15522  00B0  0876               	movf	setDimmerLights_IntrControl@lights,w
 15523  00B1  3A03               	xorlw	3
 15524  00B2  1D03               	skipz
 15525  00B3  29C6               	goto	i1l6555
 15526                           
 15527                           ;Dimmer_B1.c: 112: RB1 = 1;
 15528  00B4  0020               	movlb	0	; select bank0
 15529  00B5  148D               	bsf	13,1	;volatile
 15530                           
 15531                           ;Dimmer_B1.c: 113: }
 15532                           ;Dimmer_B1.c: 115: }
 15533                           ;Dimmer_B1.c: 116: }
 15534                           ;Dimmer_B1.c: 117: } else {
 15535  00B6  29C6               	goto	i1l6555
 15536  00B7                     i1l6489:	
 15537                           
 15538                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 15539  00B7  0879               	movf	_DimmerLightsIntr,w
 15540  00B8  3E08               	addlw	8
 15541  00B9  0086               	movwf	6
 15542  00BA  3001               	movlw	1	; select bank2/3
 15543  00BB  0087               	movwf	7
 15544  00BC  1C01               	btfss	1,0
 15545  00BD  29C6               	goto	i1l6555
 15546                           
 15547                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 15548  00BE  0879               	movf	_DimmerLightsIntr,w
 15549  00BF  3E08               	addlw	8
 15550  00C0  0086               	movwf	6
 15551  00C1  3001               	movlw	1	; select bank2/3
 15552  00C2  0087               	movwf	7
 15553  00C3  1001               	bcf	1,0
 15554                           
 15555                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 15556  00C4  0879               	movf	_DimmerLightsIntr,w
 15557  00C5  0086               	movwf	6
 15558  00C6  3001               	movlw	1	; select bank2/3
 15559  00C7  0087               	movwf	7
 15560  00C8  1C81               	btfss	1,1
 15561  00C9  29C6               	goto	i1l6555
 15562                           
 15563                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 15564  00CA  3001               	movlw	1
 15565  00CB  00F2               	movwf	??_setDimmerLights_IntrControl
 15566  00CC  0A79               	incf	_DimmerLightsIntr,w
 15567  00CD  0086               	movwf	6
 15568  00CE  3001               	movlw	1	; select bank2/3
 15569  00CF  0087               	movwf	7
 15570  00D0  0872               	movf	??_setDimmerLights_IntrControl,w
 15571  00D1  0781               	addwf	1,f
 15572                           
 15573                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15574  00D2  0A79               	incf	_DimmerLightsIntr,w
 15575  00D3  0086               	movwf	6
 15576  00D4  3001               	movlw	1	; select bank2/3
 15577  00D5  0087               	movwf	7
 15578  00D6  0879               	movf	_DimmerLightsIntr,w
 15579  00D7  3E02               	addlw	2
 15580  00D8  0084               	movwf	4
 15581  00D9  3001               	movlw	1	; select bank2/3
 15582  00DA  0085               	movwf	5
 15583  00DB  0800               	movf	0,w
 15584  00DC  0201               	subwf	1,w
 15585  00DD  1C03               	skipc
 15586  00DE  29C6               	goto	i1l6555
 15587                           
 15588                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 15589  00DF  0A79               	incf	_DimmerLightsIntr,w
 15590  00E0  0086               	movwf	6
 15591  00E1  3001               	movlw	1	; select bank2/3
 15592  00E2  0087               	movwf	7
 15593  00E3  0181               	clrf	1
 15594                           
 15595                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 15596  00E4  0879               	movf	_DimmerLightsIntr,w
 15597  00E5  0086               	movwf	6
 15598  00E6  3001               	movlw	1	; select bank2/3
 15599  00E7  0087               	movwf	7
 15600  00E8  1D81               	btfss	1,3
 15601  00E9  2920               	goto	i1l6515
 15602                           
 15603                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 15604  00EA  0879               	movf	_DimmerLightsIntr,w
 15605  00EB  0086               	movwf	6
 15606  00EC  3001               	movlw	1	; select bank2/3
 15607  00ED  0087               	movwf	7
 15608  00EE  1A01               	btfsc	1,4
 15609  00EF  2907               	goto	i1l6509
 15610                           
 15611                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 15612  00F0  0879               	movf	_DimmerLightsIntr,w
 15613  00F1  3E04               	addlw	4
 15614  00F2  0086               	movwf	6
 15615  00F3  3001               	movlw	1	; select bank2/3
 15616  00F4  0087               	movwf	7
 15617  00F5  3005               	movlw	5
 15618  00F6  0201               	subwf	1,w
 15619  00F7  1C03               	skipc
 15620  00F8  2901               	goto	i1l6507
 15621                           
 15622                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 15623  00F9  0879               	movf	_DimmerLightsIntr,w
 15624  00FA  3E04               	addlw	4
 15625  00FB  0086               	movwf	6
 15626  00FC  3001               	movlw	1	; select bank2/3
 15627  00FD  0087               	movwf	7
 15628  00FE  3001               	movlw	1
 15629  00FF  0281               	subwf	1,f
 15630                           
 15631                           ;Dimmer_B1.c: 128: } else {
 15632  0100  29C6               	goto	i1l6555
 15633  0101                     i1l6507:	
 15634                           
 15635                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 15636  0101  0879               	movf	_DimmerLightsIntr,w
 15637  0102  0086               	movwf	6
 15638  0103  3001               	movlw	1	; select bank2/3
 15639  0104  0087               	movwf	7
 15640  0105  1601               	bsf	1,4
 15641                           
 15642                           ;Dimmer_B1.c: 130: }
 15643                           ;Dimmer_B1.c: 131: } else {
 15644  0106  29C6               	goto	i1l6555
 15645  0107                     i1l6509:	
 15646                           
 15647                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 15648  0107  0879               	movf	_DimmerLightsIntr,w
 15649  0108  3E04               	addlw	4
 15650  0109  0086               	movwf	6
 15651  010A  3001               	movlw	1	; select bank2/3
 15652  010B  0087               	movwf	7
 15653  010C  303C               	movlw	60
 15654  010D  0201               	subwf	1,w
 15655  010E  1803               	skipnc
 15656  010F  291A               	goto	i1l6513
 15657                           
 15658                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 15659  0110  3001               	movlw	1
 15660  0111  00F2               	movwf	??_setDimmerLights_IntrControl
 15661  0112  0879               	movf	_DimmerLightsIntr,w
 15662  0113  3E04               	addlw	4
 15663  0114  0086               	movwf	6
 15664  0115  3001               	movlw	1	; select bank2/3
 15665  0116  0087               	movwf	7
 15666  0117  0872               	movf	??_setDimmerLights_IntrControl,w
 15667  0118  0781               	addwf	1,f
 15668                           
 15669                           ;Dimmer_B1.c: 134: } else {
 15670  0119  29C6               	goto	i1l6555
 15671  011A                     i1l6513:	
 15672                           
 15673                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 15674  011A  0879               	movf	_DimmerLightsIntr,w
 15675  011B  0086               	movwf	6
 15676  011C  3001               	movlw	1	; select bank2/3
 15677  011D  0087               	movwf	7
 15678  011E  1201               	bcf	1,4
 15679                           
 15680                           ;Dimmer_B1.c: 136: }
 15681                           ;Dimmer_B1.c: 137: }
 15682                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 15683  011F  29C6               	goto	i1l6555
 15684  0120                     i1l6515:	
 15685  0120  0879               	movf	_DimmerLightsIntr,w
 15686  0121  0086               	movwf	6
 15687  0122  3001               	movlw	1	; select bank2/3
 15688  0123  0087               	movwf	7
 15689  0124  1D01               	btfss	1,2
 15690  0125  2967               	goto	i1l6529
 15691                           
 15692                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 15693  0126  0879               	movf	_DimmerLightsIntr,w
 15694  0127  3E05               	addlw	5
 15695  0128  0086               	movwf	6
 15696  0129  3001               	movlw	1	; select bank2/3
 15697  012A  0087               	movwf	7
 15698  012B  0879               	movf	_DimmerLightsIntr,w
 15699  012C  3E04               	addlw	4
 15700  012D  0084               	movwf	4
 15701  012E  3001               	movlw	1	; select bank2/3
 15702  012F  0085               	movwf	5
 15703  0130  0800               	movf	0,w
 15704  0131  0201               	subwf	1,w
 15705  0132  1803               	skipnc
 15706  0133  293C               	goto	i1l6521
 15707                           
 15708                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 15709  0134  0879               	movf	_DimmerLightsIntr,w
 15710  0135  3E04               	addlw	4
 15711  0136  0086               	movwf	6
 15712  0137  3001               	movlw	1	; select bank2/3
 15713  0138  0087               	movwf	7
 15714  0139  3001               	movlw	1
 15715  013A  0281               	subwf	1,f
 15716                           
 15717                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 15718  013B  2953               	goto	i1l6525
 15719  013C                     i1l6521:	
 15720  013C  0879               	movf	_DimmerLightsIntr,w
 15721  013D  3E04               	addlw	4
 15722  013E  0086               	movwf	6
 15723  013F  3001               	movlw	1	; select bank2/3
 15724  0140  0087               	movwf	7
 15725  0141  0879               	movf	_DimmerLightsIntr,w
 15726  0142  3E05               	addlw	5
 15727  0143  0084               	movwf	4
 15728  0144  3001               	movlw	1	; select bank2/3
 15729  0145  0085               	movwf	5
 15730  0146  0800               	movf	0,w
 15731  0147  0201               	subwf	1,w
 15732  0148  1803               	skipnc
 15733  0149  2953               	goto	i1l6525
 15734                           
 15735                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 15736  014A  3001               	movlw	1
 15737  014B  00F2               	movwf	??_setDimmerLights_IntrControl
 15738  014C  0879               	movf	_DimmerLightsIntr,w
 15739  014D  3E04               	addlw	4
 15740  014E  0086               	movwf	6
 15741  014F  3001               	movlw	1	; select bank2/3
 15742  0150  0087               	movwf	7
 15743  0151  0872               	movf	??_setDimmerLights_IntrControl,w
 15744  0152  0781               	addwf	1,f
 15745  0153                     i1l6525:	
 15746                           
 15747                           ;Dimmer_B1.c: 143: }
 15748                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 15749  0153  0879               	movf	_DimmerLightsIntr,w
 15750  0154  3E05               	addlw	5
 15751  0155  0086               	movwf	6
 15752  0156  3001               	movlw	1	; select bank2/3
 15753  0157  0087               	movwf	7
 15754  0158  0879               	movf	_DimmerLightsIntr,w
 15755  0159  3E04               	addlw	4
 15756  015A  0084               	movwf	4
 15757  015B  3001               	movlw	1	; select bank2/3
 15758  015C  0085               	movwf	5
 15759  015D  0800               	movf	0,w
 15760  015E  0601               	xorwf	1,w
 15761  015F  1D03               	skipz
 15762  0160  29C6               	goto	i1l6555
 15763                           
 15764                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 15765  0161  0879               	movf	_DimmerLightsIntr,w
 15766  0162  0086               	movwf	6
 15767  0163  3001               	movlw	1	; select bank2/3
 15768  0164  0087               	movwf	7
 15769  0165  1101               	bcf	1,2
 15770  0166  2982               	goto	i1l6535
 15771  0167                     i1l6529:	
 15772                           ;Dimmer_B1.c: 147: }
 15773                           ;Dimmer_B1.c: 148: } else {
 15774                           
 15775                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 15776                           
 15777                           
 15778                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 15779  0167  0879               	movf	_DimmerLightsIntr,w
 15780  0168  0086               	movwf	6
 15781  0169  3001               	movlw	1	; select bank2/3
 15782  016A  0087               	movwf	7
 15783  016B  1E81               	btfss	1,5
 15784  016C  2988               	goto	i1l6537
 15785                           
 15786                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 15787  016D  0879               	movf	_DimmerLightsIntr,w
 15788  016E  3E04               	addlw	4
 15789  016F  0086               	movwf	6
 15790  0170  3001               	movlw	1	; select bank2/3
 15791  0171  0087               	movwf	7
 15792  0172  3001               	movlw	1
 15793  0173  0281               	subwf	1,f
 15794                           
 15795                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 15796  0174  0879               	movf	_DimmerLightsIntr,w
 15797  0175  3E05               	addlw	5
 15798  0176  0086               	movwf	6
 15799  0177  3001               	movlw	1	; select bank2/3
 15800  0178  0087               	movwf	7
 15801  0179  0879               	movf	_DimmerLightsIntr,w
 15802  017A  3E04               	addlw	4
 15803  017B  0084               	movwf	4
 15804  017C  3001               	movlw	1	; select bank2/3
 15805  017D  0085               	movwf	5
 15806  017E  0800               	movf	0,w
 15807  017F  0201               	subwf	1,w
 15808  0180  1C03               	skipc
 15809  0181  29C6               	goto	i1l6555
 15810  0182                     i1l6535:	
 15811                           
 15812                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 15813  0182  0879               	movf	_DimmerLightsIntr,w
 15814  0183  0086               	movwf	6
 15815  0184  3001               	movlw	1	; select bank2/3
 15816  0185  0087               	movwf	7
 15817  0186  1081               	bcf	1,1
 15818                           
 15819                           ;Dimmer_B1.c: 153: }
 15820                           ;Dimmer_B1.c: 154: } else {
 15821  0187  29C6               	goto	i1l6555
 15822  0188                     i1l6537:	
 15823                           
 15824                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 15825  0188  3001               	movlw	1
 15826  0189  00F2               	movwf	??_setDimmerLights_IntrControl
 15827  018A  0879               	movf	_DimmerLightsIntr,w
 15828  018B  3E04               	addlw	4
 15829  018C  0086               	movwf	6
 15830  018D  3001               	movlw	1	; select bank2/3
 15831  018E  0087               	movwf	7
 15832  018F  0872               	movf	??_setDimmerLights_IntrControl,w
 15833  0190  0781               	addwf	1,f
 15834                           
 15835                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 15836  0191  0879               	movf	_DimmerLightsIntr,w
 15837  0192  3E04               	addlw	4
 15838  0193  0086               	movwf	6
 15839  0194  3001               	movlw	1	; select bank2/3
 15840  0195  0087               	movwf	7
 15841  0196  0879               	movf	_DimmerLightsIntr,w
 15842  0197  3E06               	addlw	6
 15843  0198  0084               	movwf	4
 15844  0199  3001               	movlw	1	; select bank2/3
 15845  019A  0085               	movwf	5
 15846  019B  0800               	movf	0,w
 15847  019C  0201               	subwf	1,w
 15848  019D  1C03               	skipc
 15849  019E  29C6               	goto	i1l6555
 15850                           
 15851                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 15852  019F  0879               	movf	_DimmerLightsIntr,w
 15853  01A0  0086               	movwf	6
 15854  01A1  3001               	movlw	1	; select bank2/3
 15855  01A2  0087               	movwf	7
 15856  01A3  1081               	bcf	1,1
 15857                           
 15858                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 15859  01A4  0879               	movf	_DimmerLightsIntr,w
 15860  01A5  0086               	movwf	6
 15861  01A6  3001               	movlw	1	; select bank2/3
 15862  01A7  0087               	movwf	7
 15863  01A8  1301               	bcf	1,6
 15864                           
 15865                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 15866  01A9  0879               	movf	_DimmerLightsIntr,w
 15867  01AA  3E09               	addlw	9
 15868  01AB  0086               	movwf	6
 15869  01AC  3001               	movlw	1	; select bank2/3
 15870  01AD  0087               	movwf	7
 15871  01AE  1501               	bsf	1,2
 15872                           
 15873                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 15874  01AF  0021               	movlb	1	; select bank1
 15875  01B0  0839               	movf	_Dimmer^(0+128),w
 15876  01B1  0086               	movwf	6
 15877  01B2  0187               	clrf	7
 15878  01B3  1401               	bsf	1,0
 15879                           
 15880                           ;Dimmer_B1.c: 162: if (lights == 1) {
 15881  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15882  01B5  3A01               	xorlw	1
 15883  01B6  1D03               	skipz
 15884  01B7  29BA               	goto	i1l6547
 15885                           
 15886                           ;Dimmer_B1.c: 163: RC7 = 0;
 15887  01B8  0020               	movlb	0	; select bank0
 15888  01B9  138E               	bcf	14,7	;volatile
 15889  01BA                     i1l6547:	
 15890                           
 15891                           ;Dimmer_B1.c: 165: }
 15892                           ;Dimmer_B1.c: 168: if (lights == 2) {
 15893  01BA  0876               	movf	setDimmerLights_IntrControl@lights,w
 15894  01BB  3A02               	xorlw	2
 15895  01BC  1D03               	skipz
 15896  01BD  29C0               	goto	i1l6551
 15897                           
 15898                           ;Dimmer_B1.c: 169: RA3 = 0;
 15899  01BE  0020               	movlb	0	; select bank0
 15900  01BF  118C               	bcf	12,3	;volatile
 15901  01C0                     i1l6551:	
 15902                           
 15903                           ;Dimmer_B1.c: 170: }
 15904                           ;Dimmer_B1.c: 173: if (lights == 3) {
 15905  01C0  0876               	movf	setDimmerLights_IntrControl@lights,w
 15906  01C1  3A03               	xorlw	3
 15907  01C2  1D03               	skipz
 15908  01C3  29C6               	goto	i1l6555
 15909                           
 15910                           ;Dimmer_B1.c: 174: RC6 = 0;
 15911  01C4  0020               	movlb	0	; select bank0
 15912  01C5  130E               	bcf	14,6	;volatile
 15913  01C6                     i1l6555:	
 15914                           ;Dimmer_B1.c: 175: }
 15915                           ;Dimmer_B1.c: 177: ;;
 15916                           
 15917                           
 15918                           ;Dimmer_B1.c: 178: }
 15919                           ;Dimmer_B1.c: 179: }
 15920                           ;Dimmer_B1.c: 180: }
 15921                           ;Dimmer_B1.c: 181: }
 15922                           ;Dimmer_B1.c: 182: }
 15923                           ;Dimmer_B1.c: 183: }
 15924                           ;Dimmer_B1.c: 184: }
 15925                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 15926  01C6  0879               	movf	_DimmerLightsIntr,w
 15927  01C7  3E08               	addlw	8
 15928  01C8  0086               	movwf	6
 15929  01C9  3001               	movlw	1	; select bank2/3
 15930  01CA  0087               	movwf	7
 15931  01CB  1E81               	btfss	1,5
 15932  01CC  29FD               	goto	i1l6577
 15933                           
 15934                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 15935  01CD  3001               	movlw	1
 15936  01CE  00F2               	movwf	??_setDimmerLights_IntrControl
 15937  01CF  0879               	movf	_DimmerLightsIntr,w
 15938  01D0  3E07               	addlw	7
 15939  01D1  0086               	movwf	6
 15940  01D2  3001               	movlw	1	; select bank2/3
 15941  01D3  0087               	movwf	7
 15942  01D4  0872               	movf	??_setDimmerLights_IntrControl,w
 15943  01D5  0781               	addwf	1,f
 15944                           
 15945                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 15946  01D6  0879               	movf	_DimmerLightsIntr,w
 15947  01D7  3E07               	addlw	7
 15948  01D8  0086               	movwf	6
 15949  01D9  3001               	movlw	1	; select bank2/3
 15950  01DA  0087               	movwf	7
 15951  01DB  3005               	movlw	5
 15952  01DC  0201               	subwf	1,w
 15953  01DD  1C03               	skipc
 15954  01DE  29FD               	goto	i1l6577
 15955                           
 15956                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 15957  01DF  0879               	movf	_DimmerLightsIntr,w
 15958  01E0  3E07               	addlw	7
 15959  01E1  0086               	movwf	6
 15960  01E2  3001               	movlw	1	; select bank2/3
 15961  01E3  0087               	movwf	7
 15962  01E4  0181               	clrf	1
 15963                           
 15964                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 15965  01E5  0879               	movf	_DimmerLightsIntr,w
 15966  01E6  3E08               	addlw	8
 15967  01E7  0086               	movwf	6
 15968  01E8  3001               	movlw	1	; select bank2/3
 15969  01E9  0087               	movwf	7
 15970  01EA  1281               	bcf	1,5
 15971                           
 15972                           ;Dimmer_B1.c: 192: if (lights == 1) {
 15973  01EB  0876               	movf	setDimmerLights_IntrControl@lights,w
 15974  01EC  3A01               	xorlw	1
 15975  01ED  1D03               	skipz
 15976  01EE  29F1               	goto	i1l6569
 15977                           
 15978                           ;Dimmer_B1.c: 193: RB4 = 0;
 15979  01EF  0020               	movlb	0	; select bank0
 15980  01F0  120D               	bcf	13,4	;volatile
 15981  01F1                     i1l6569:	
 15982                           ;Dimmer_B1.c: 194: ;;
 15983                           
 15984                           
 15985                           ;Dimmer_B1.c: 195: }
 15986                           ;Dimmer_B1.c: 198: if (lights == 2) {
 15987  01F1  0876               	movf	setDimmerLights_IntrControl@lights,w
 15988  01F2  3A02               	xorlw	2
 15989  01F3  1D03               	skipz
 15990  01F4  29F7               	goto	i1l6573
 15991                           
 15992                           ;Dimmer_B1.c: 199: RA7 = 0;
 15993  01F5  0020               	movlb	0	; select bank0
 15994  01F6  138C               	bcf	12,7	;volatile
 15995  01F7                     i1l6573:	
 15996                           
 15997                           ;Dimmer_B1.c: 200: }
 15998                           ;Dimmer_B1.c: 203: if (lights == 3) {
 15999  01F7  0876               	movf	setDimmerLights_IntrControl@lights,w
 16000  01F8  3A03               	xorlw	3
 16001  01F9  1D03               	skipz
 16002  01FA  29FD               	goto	i1l6577
 16003                           
 16004                           ;Dimmer_B1.c: 204: RB1 = 0;
 16005  01FB  0020               	movlb	0	; select bank0
 16006  01FC  108D               	bcf	13,1	;volatile
 16007  01FD                     i1l6577:	
 16008                           
 16009                           ;Dimmer_B1.c: 205: }
 16010                           ;Dimmer_B1.c: 207: }
 16011                           ;Dimmer_B1.c: 208: }
 16012                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 16013  01FD  0879               	movf	_DimmerLightsIntr,w
 16014  01FE  3E09               	addlw	9
 16015  01FF  0086               	movwf	6
 16016  0200  3001               	movlw	1	; select bank2/3
 16017  0201  0087               	movwf	7
 16018  0202  1E81               	btfss	1,5
 16019  0203  0008               	return
 16020                           
 16021                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 16022  0204  3001               	movlw	1
 16023  0205  00F2               	movwf	??_setDimmerLights_IntrControl
 16024  0206  0879               	movf	_DimmerLightsIntr,w
 16025  0207  3E0A               	addlw	10
 16026  0208  0086               	movwf	6
 16027  0209  3001               	movlw	1	; select bank2/3
 16028  020A  0087               	movwf	7
 16029  020B  0872               	movf	??_setDimmerLights_IntrControl,w
 16030  020C  0781               	addwf	1,f
 16031                           
 16032                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 16033  020D  0879               	movf	_DimmerLightsIntr,w
 16034  020E  3E0A               	addlw	10
 16035  020F  0086               	movwf	6
 16036  0210  3001               	movlw	1	; select bank2/3
 16037  0211  0087               	movwf	7
 16038  0212  0801               	movf	1,w
 16039  0213  3A46               	xorlw	70
 16040  0214  1D03               	skipz
 16041  0215  0008               	return
 16042                           
 16043                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 16044  0216  0879               	movf	_DimmerLightsIntr,w
 16045  0217  3E0A               	addlw	10
 16046  0218  0086               	movwf	6
 16047  0219  3001               	movlw	1	; select bank2/3
 16048  021A  0087               	movwf	7
 16049  021B  0181               	clrf	1
 16050                           
 16051                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 16052  021C  0879               	movf	_DimmerLightsIntr,w
 16053  021D  3E09               	addlw	9
 16054  021E  0086               	movwf	6
 16055  021F  3001               	movlw	1	; select bank2/3
 16056  0220  0087               	movwf	7
 16057  0221  1281               	bcf	1,5
 16058  0222  0008               	return
 16059  0223                     __end_of_setDimmerLights_IntrControl:	
 16060                           
 16061                           	psect	text102
 16062  1100                     __ptext102:	
 16063 ;; *************** function _DimmerIntrPointSelect *****************
 16064 ;; Defined at:
 16065 ;;		line 65 in file "../src/Dimmer_B1.c"
 16066 ;; Parameters:    Size  Location     Type
 16067 ;;  lights          1    wreg     unsigned char 
 16068 ;; Auto vars:     Size  Location     Type
 16069 ;;  lights          1    1[COMMON] unsigned char 
 16070 ;; Return value:  Size  Location     Type
 16071 ;;		None               void
 16072 ;; Registers used:
 16073 ;;		wreg
 16074 ;; Tracked objects:
 16075 ;;		On entry : 0/0
 16076 ;;		On exit  : 0/0
 16077 ;;		Unchanged: 0/0
 16078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;Total ram usage:        2 bytes
 16084 ;; Hardware stack levels used:    1
 16085 ;; This function calls:
 16086 ;;		Nothing
 16087 ;; This function is called by:
 16088 ;;		_setDimmerLights_IntrControl
 16089 ;; This function uses a non-reentrant model
 16090 ;;
 16091                           
 16092                           
 16093                           ;psect for function _DimmerIntrPointSelect
 16094  1100                     _DimmerIntrPointSelect:	
 16095                           
 16096                           ;incstack = 0
 16097                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16098                           ;DimmerIntrPointSelect@lights stored from wreg
 16099  1100  00F1               	movwf	DimmerIntrPointSelect@lights
 16100                           
 16101                           ;Dimmer_B1.c: 67: if (lights == 1) {
 16102  1101  0871               	movf	DimmerIntrPointSelect@lights,w
 16103  1102  3A01               	xorlw	1
 16104  1103  1D03               	skipz
 16105  1104  2909               	goto	i1l750
 16106                           
 16107                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 16108  1105  3020               	movlw	_DimmerLights1& (0+255)
 16109  1106  00F0               	movwf	??_DimmerIntrPointSelect
 16110  1107  0870               	movf	??_DimmerIntrPointSelect,w
 16111  1108  00F9               	movwf	_DimmerLightsIntr
 16112  1109                     i1l750:	
 16113                           
 16114                           ;Dimmer_B1.c: 69: }
 16115                           ;Dimmer_B1.c: 72: if (lights == 2) {
 16116  1109  0871               	movf	DimmerIntrPointSelect@lights,w
 16117  110A  3A02               	xorlw	2
 16118  110B  1D03               	skipz
 16119  110C  2911               	goto	i1l751
 16120                           
 16121                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 16122  110D  302F               	movlw	_DimmerLights2& (0+255)
 16123  110E  00F0               	movwf	??_DimmerIntrPointSelect
 16124  110F  0870               	movf	??_DimmerIntrPointSelect,w
 16125  1110  00F9               	movwf	_DimmerLightsIntr
 16126  1111                     i1l751:	
 16127                           
 16128                           ;Dimmer_B1.c: 74: }
 16129                           ;Dimmer_B1.c: 78: if (lights == 3) {
 16130  1111  0871               	movf	DimmerIntrPointSelect@lights,w
 16131  1112  3A03               	xorlw	3
 16132  1113  1D03               	skipz
 16133  1114  0008               	return
 16134                           
 16135                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 16136  1115  303E               	movlw	_DimmerLights3& (0+255)
 16137  1116  00F0               	movwf	??_DimmerIntrPointSelect
 16138  1117  0870               	movf	??_DimmerIntrPointSelect,w
 16139  1118  00F9               	movwf	_DimmerLightsIntr
 16140  1119  0008               	return
 16141  111A                     __end_of_DimmerIntrPointSelect:	
 16142                           
 16143                           	psect	text103
 16144  1FA6                     __ptext103:	
 16145 ;; *************** function _Buz_Counter *****************
 16146 ;; Defined at:
 16147 ;;		line 23 in file "../src/Buzzer_B1.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;		None
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;		None
 16152 ;; Return value:  Size  Location     Type
 16153 ;;		None               void
 16154 ;; Registers used:
 16155 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;Total ram usage:        0 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; This function calls:
 16168 ;;		Nothing
 16169 ;; This function is called by:
 16170 ;;		_TMR0_ISR
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           
 16175                           ;psect for function _Buz_Counter
 16176  1FA6                     _Buz_Counter:	
 16177                           
 16178                           ;Buzzer_B1.c: 24: if (Buz->GO == 1) {
 16179                           
 16180                           ;incstack = 0
 16181                           ; Regs used in _Buz_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16182  1FA6  0021               	movlb	1	; select bank1
 16183  1FA7  0837               	movf	_Buz^(0+128),w
 16184  1FA8  0086               	movwf	6
 16185  1FA9  3001               	movlw	1	; select bank2/3
 16186  1FAA  0087               	movwf	7
 16187  1FAB  1C81               	btfss	1,1
 16188  1FAC  0008               	return
 16189                           
 16190                           ;Buzzer_B1.c: 25: Buz->Counter++;
 16191  1FAD  0A37               	incf	_Buz^(0+128),w
 16192  1FAE  0086               	movwf	6
 16193  1FAF  3001               	movlw	1	; select bank2/3
 16194  1FB0  0087               	movwf	7
 16195  1FB1  3001               	movlw	1
 16196  1FB2  0781               	addwf	1,f
 16197  1FB3  3141               	addfsr 1,1
 16198  1FB4  1803               	skipnc
 16199  1FB5  0A81               	incf	1,f
 16200  1FB6  0008               	return
 16201  1FB7                     __end_of_Buz_Counter:	
 16202                           
 16203                           	psect	text104
 16204  1F95                     __ptext104:	
 16205 ;; *************** function _IOC_ISR *****************
 16206 ;; Defined at:
 16207 ;;		line 298 in file "../src/MCU_B1.c"
 16208 ;; Parameters:    Size  Location     Type
 16209 ;;		None
 16210 ;; Auto vars:     Size  Location     Type
 16211 ;;		None
 16212 ;; Return value:  Size  Location     Type
 16213 ;;		None               void
 16214 ;; Registers used:
 16215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16216 ;; Tracked objects:
 16217 ;;		On entry : 0/0
 16218 ;;		On exit  : 0/0
 16219 ;;		Unchanged: 0/0
 16220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;Total ram usage:        0 bytes
 16226 ;; Hardware stack levels used:    1
 16227 ;; Hardware stack levels required when called:    3
 16228 ;; This function calls:
 16229 ;;		_setDimmerReClock
 16230 ;; This function is called by:
 16231 ;;		_ISR
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           
 16236                           ;psect for function _IOC_ISR
 16237  1F95                     _IOC_ISR:	
 16238                           
 16239                           ;MCU_B1.c: 299: if (IOCIE == 1 && IOCBF2 == 1) {
 16240                           
 16241                           ;incstack = 0
 16242                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16243  1F95  1D8B               	btfss	11,3	;volatile
 16244  1F96  0008               	return
 16245  1F97  0027               	movlb	7	; select bank7
 16246  1F98  1D16               	btfss	22,2	;volatile
 16247  1F99  0008               	return
 16248                           
 16249                           ;MCU_B1.c: 300: IOCBF2 = 0;
 16250  1F9A  1116               	bcf	22,2	;volatile
 16251                           
 16252                           ;MCU_B1.c: 301: IOCIF = 0;
 16253  1F9B  100B               	bcf	11,0	;volatile
 16254                           
 16255                           ;MCU_B1.c: 302: if (myMain->PowerON == 1) {
 16256  1F9C  0021               	movlb	1	; select bank1
 16257  1F9D  086E               	movf	_myMain^(0+128),w
 16258  1F9E  0086               	movwf	6
 16259  1F9F  3001               	movlw	1	; select bank2/3
 16260  1FA0  0087               	movwf	7
 16261  1FA1  1C01               	btfss	1,0
 16262  1FA2  0008               	return
 16263                           
 16264                           ;MCU_B1.c: 304: setDimmerReClock();
 16265  1FA3  319E  26E7         	fcall	_setDimmerReClock
 16266  1FA5  0008               	return
 16267  1FA6                     __end_of_IOC_ISR:	
 16268                           
 16269                           	psect	text105
 16270  1EE7                     __ptext105:	
 16271 ;; *************** function _setDimmerReClock *****************
 16272 ;; Defined at:
 16273 ;;		line 175 in file "../src/MCU_B1.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;		None
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;		None
 16278 ;; Return value:  Size  Location     Type
 16279 ;;		None               void
 16280 ;; Registers used:
 16281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;Total ram usage:        0 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    2
 16294 ;; This function calls:
 16295 ;;		_setDimmerLights_IntrIOC_GO
 16296 ;; This function is called by:
 16297 ;;		_IOC_ISR
 16298 ;; This function uses a non-reentrant model
 16299 ;;
 16300                           
 16301                           
 16302                           ;psect for function _setDimmerReClock
 16303  1EE7                     _setDimmerReClock:	
 16304                           
 16305                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 16306                           
 16307                           ;incstack = 0
 16308                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16309  1EE7  3001               	movlw	1
 16310  1EE8  3191  21F8  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16311                           
 16312                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 16313  1EEB  3002               	movlw	2
 16314  1EEC  3191  21F8  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16315                           
 16316                           ;MCU_B1.c: 188: setDimmerLights_IntrIOC_GO(3);
 16317  1EEF  3003               	movlw	3
 16318  1EF0  3191  21F8         	fcall	_setDimmerLights_IntrIOC_GO
 16319                           
 16320                           ;MCU_B1.c: 191: TMR0 = 255;
 16321  1EF2  30FF               	movlw	255
 16322  1EF3  0020               	movlb	0	; select bank0
 16323  1EF4  0095               	movwf	21	;volatile
 16324  1EF5  0008               	return
 16325  1EF6                     __end_of_setDimmerReClock:	
 16326                           
 16327                           	psect	text106
 16328  11F8                     __ptext106:	
 16329 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16330 ;; Defined at:
 16331 ;;		line 28 in file "../src/Dimmer_B1.c"
 16332 ;; Parameters:    Size  Location     Type
 16333 ;;  lights          1    wreg     unsigned char 
 16334 ;; Auto vars:     Size  Location     Type
 16335 ;;  lights          1    2[COMMON] unsigned char 
 16336 ;; Return value:  Size  Location     Type
 16337 ;;		None               void
 16338 ;; Registers used:
 16339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16340 ;; Tracked objects:
 16341 ;;		On entry : 0/0
 16342 ;;		On exit  : 0/0
 16343 ;;		Unchanged: 0/0
 16344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;Total ram usage:        1 bytes
 16350 ;; Hardware stack levels used:    1
 16351 ;; Hardware stack levels required when called:    1
 16352 ;; This function calls:
 16353 ;;		_DimmerIntrIOCPointSelect
 16354 ;; This function is called by:
 16355 ;;		_setDimmerReClock
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           
 16360                           ;psect for function _setDimmerLights_IntrIOC_GO
 16361  11F8                     _setDimmerLights_IntrIOC_GO:	
 16362                           
 16363                           ;incstack = 0
 16364                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16365                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16366  11F8  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16367                           
 16368                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16369  11F9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16370  11FA  3191  21A1  3191   	fcall	_DimmerIntrIOCPointSelect
 16371                           
 16372                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16373  11FD  0021               	movlb	1	; select bank1
 16374  11FE  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16375  11FF  0086               	movwf	6
 16376  1200  3001               	movlw	1	; select bank2/3
 16377  1201  0087               	movwf	7
 16378  1202  1801               	btfsc	1,0
 16379  1203  0008               	return
 16380  1204  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16381  1205  3E09               	addlw	9
 16382  1206  0086               	movwf	6
 16383  1207  3001               	movlw	1	; select bank2/3
 16384  1208  0087               	movwf	7
 16385  1209  1A81               	btfsc	1,5
 16386  120A  0008               	return
 16387                           
 16388                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16389  120B  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16390  120C  0086               	movwf	6
 16391  120D  3001               	movlw	1	; select bank2/3
 16392  120E  0087               	movwf	7
 16393  120F  1401               	bsf	1,0
 16394                           
 16395                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16396  1210  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16397  1211  3E09               	addlw	9
 16398  1212  0086               	movwf	6
 16399  1213  3001               	movlw	1	; select bank2/3
 16400  1214  0087               	movwf	7
 16401  1215  1681               	bsf	1,5
 16402  1216  0008               	return
 16403  1217                     __end_of_setDimmerLights_IntrIOC_GO:	
 16404                           
 16405                           	psect	text107
 16406  11A1                     __ptext107:	
 16407 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16408 ;; Defined at:
 16409 ;;		line 8 in file "../src/Dimmer_B1.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  lights          1    wreg     unsigned char 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  lights          1    1[COMMON] unsigned char 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;		None               void
 16416 ;; Registers used:
 16417 ;;		wreg
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;Total ram usage:        2 bytes
 16428 ;; Hardware stack levels used:    1
 16429 ;; This function calls:
 16430 ;;		Nothing
 16431 ;; This function is called by:
 16432 ;;		_setDimmerLights_IntrIOC_GO
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           
 16437                           ;psect for function _DimmerIntrIOCPointSelect
 16438  11A1                     _DimmerIntrIOCPointSelect:	
 16439                           
 16440                           ;incstack = 0
 16441                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16442                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16443  11A1  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16444                           
 16445                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16446  11A2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16447  11A3  3A01               	xorlw	1
 16448  11A4  1D03               	skipz
 16449  11A5  29AB               	goto	i1l740
 16450                           
 16451                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16452  11A6  3020               	movlw	_DimmerLights1& (0+255)
 16453  11A7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16454  11A8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16455  11A9  0021               	movlb	1	; select bank1
 16456  11AA  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16457  11AB                     i1l740:	
 16458                           
 16459                           ;Dimmer_B1.c: 12: }
 16460                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16461  11AB  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16462  11AC  3A02               	xorlw	2
 16463  11AD  1D03               	skipz
 16464  11AE  29B4               	goto	i1l741
 16465                           
 16466                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16467  11AF  302F               	movlw	_DimmerLights2& (0+255)
 16468  11B0  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16469  11B1  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16470  11B2  0021               	movlb	1	; select bank1
 16471  11B3  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16472  11B4                     i1l741:	
 16473                           
 16474                           ;Dimmer_B1.c: 17: }
 16475                           ;Dimmer_B1.c: 21: if (lights == 3) {
 16476  11B4  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16477  11B5  3A03               	xorlw	3
 16478  11B6  1D03               	skipz
 16479  11B7  0008               	return
 16480                           
 16481                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 16482  11B8  303E               	movlw	_DimmerLights3& (0+255)
 16483  11B9  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16484  11BA  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16485  11BB  0021               	movlb	1	; select bank1
 16486  11BC  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16487  11BD  0008               	return
 16488  11BE                     __end_of_DimmerIntrIOCPointSelect:	
 16489                           
 16490                           	psect	text108
 16491  1F84                     __ptext108:	
 16492 ;; *************** function _INT_ISR *****************
 16493 ;; Defined at:
 16494 ;;		line 250 in file "../src/MCU_B1.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;		None
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;		None
 16499 ;; Return value:  Size  Location     Type
 16500 ;;		None               void
 16501 ;; Registers used:
 16502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16503 ;; Tracked objects:
 16504 ;;		On entry : 0/0
 16505 ;;		On exit  : 0/0
 16506 ;;		Unchanged: 0/0
 16507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;Total ram usage:        0 bytes
 16513 ;; Hardware stack levels used:    1
 16514 ;; Hardware stack levels required when called:    2
 16515 ;; This function calls:
 16516 ;;		_setRF_ReceiveGO
 16517 ;;		_setRF_RxStatus
 16518 ;; This function is called by:
 16519 ;;		_ISR
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           
 16524                           ;psect for function _INT_ISR
 16525  1F84                     _INT_ISR:	
 16526                           
 16527                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16531  1F84  1E0B               	btfss	11,4	;volatile
 16532  1F85  0008               	return
 16533  1F86  1C8B               	btfss	11,1	;volatile
 16534  1F87  0008               	return
 16535                           
 16536                           ;MCU_B1.c: 252: INTF = 0;
 16537  1F88  108B               	bcf	11,1	;volatile
 16538                           
 16539                           ;MCU_B1.c: 253: INTE = 0;
 16540  1F89  120B               	bcf	11,4	;volatile
 16541                           
 16542                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 16543  1F8A  01F2               	clrf	setRF_ReceiveGO@command
 16544  1F8B  0AF2               	incf	setRF_ReceiveGO@command,f
 16545  1F8C  3001               	movlw	1
 16546  1F8D  319E  266A  319F   	fcall	_setRF_ReceiveGO
 16547                           
 16548                           ;MCU_B1.c: 255: setRF_RxStatus(1, 0);
 16549  1F90  01F2               	clrf	setRF_RxStatus@command
 16550  1F91  3001               	movlw	1
 16551  1F92  319E  2676         	fcall	_setRF_RxStatus
 16552  1F94  0008               	return
 16553  1F95                     __end_of_INT_ISR:	
 16554                           
 16555                           	psect	text109
 16556  1E76                     __ptext109:	
 16557 ;; *************** function _setRF_RxStatus *****************
 16558 ;; Defined at:
 16559 ;;		line 45 in file "../src/RF_Control_B1.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;  rf              1    wreg     unsigned char 
 16562 ;;  command         1    2[COMMON] unsigned char 
 16563 ;; Auto vars:     Size  Location     Type
 16564 ;;  rf              1    3[COMMON] unsigned char 
 16565 ;; Return value:  Size  Location     Type
 16566 ;;		None               void
 16567 ;; Registers used:
 16568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16574 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;Total ram usage:        2 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; Hardware stack levels required when called:    1
 16581 ;; This function calls:
 16582 ;;		i1_RfPointSelect
 16583 ;; This function is called by:
 16584 ;;		_INT_ISR
 16585 ;; This function uses a non-reentrant model
 16586 ;;
 16587                           
 16588                           
 16589                           ;psect for function _setRF_RxStatus
 16590  1E76                     _setRF_RxStatus:	
 16591                           
 16592                           ;incstack = 0
 16593                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16594                           ;setRF_RxStatus@rf stored from wreg
 16595  1E76  00F3               	movwf	setRF_RxStatus@rf
 16596                           
 16597                           ;RF_Control_B1.c: 46: RfPointSelect(rf);
 16598  1E77  0873               	movf	setRF_RxStatus@rf,w
 16599  1E78  319E  26B2         	fcall	i1_RfPointSelect
 16600                           
 16601                           ;RF_Control_B1.c: 47: RF->RxStatus = command;
 16602  1E7A  087A               	movf	_RF,w
 16603  1E7B  0086               	movwf	6
 16604  1E7C  0187               	clrf	7
 16605  1E7D  0872               	movf	setRF_RxStatus@command,w
 16606  1E7E  1181               	bcf	1,3
 16607  1E7F  1D03               	skipz
 16608  1E80  1581               	bsf	1,3
 16609  1E81  0008               	return
 16610  1E82                     __end_of_setRF_RxStatus:	
 16611                           
 16612                           	psect	text110
 16613  1E6A                     __ptext110:	
 16614 ;; *************** function _setRF_ReceiveGO *****************
 16615 ;; Defined at:
 16616 ;;		line 39 in file "../src/RF_Control_B1.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;  rf              1    wreg     unsigned char 
 16619 ;;  command         1    2[COMMON] unsigned char 
 16620 ;; Auto vars:     Size  Location     Type
 16621 ;;  rf              1    3[COMMON] unsigned char 
 16622 ;; Return value:  Size  Location     Type
 16623 ;;		None               void
 16624 ;; Registers used:
 16625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16631 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;Total ram usage:        2 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    1
 16638 ;; This function calls:
 16639 ;;		i1_RfPointSelect
 16640 ;; This function is called by:
 16641 ;;		_INT_ISR
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function _setRF_ReceiveGO
 16647  1E6A                     _setRF_ReceiveGO:	
 16648                           
 16649                           ;incstack = 0
 16650                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16651                           ;setRF_ReceiveGO@rf stored from wreg
 16652  1E6A  00F3               	movwf	setRF_ReceiveGO@rf
 16653                           
 16654                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 16655  1E6B  0873               	movf	setRF_ReceiveGO@rf,w
 16656  1E6C  319E  26B2         	fcall	i1_RfPointSelect
 16657                           
 16658                           ;RF_Control_B1.c: 41: RF->ReceiveGO = command;
 16659  1E6E  087A               	movf	_RF,w
 16660  1E6F  0086               	movwf	6
 16661  1E70  0187               	clrf	7
 16662  1E71  0872               	movf	setRF_ReceiveGO@command,w
 16663  1E72  1081               	bcf	1,1
 16664  1E73  1D03               	skipz
 16665  1E74  1481               	bsf	1,1
 16666  1E75  0008               	return
 16667  1E76                     __end_of_setRF_ReceiveGO:	
 16668                           
 16669                           	psect	text111
 16670  1EB2                     __ptext111:	
 16671 ;; *************** function i1_RfPointSelect *****************
 16672 ;; Defined at:
 16673 ;;		line 7 in file "../src/RF_Control_B1.c"
 16674 ;; Parameters:    Size  Location     Type
 16675 ;;  rf              1    wreg     unsigned char 
 16676 ;; Auto vars:     Size  Location     Type
 16677 ;;  rf              1    1[COMMON] unsigned char 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;		None               void
 16680 ;; Registers used:
 16681 ;;		wreg
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;Total ram usage:        2 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; This function calls:
 16694 ;;		Nothing
 16695 ;; This function is called by:
 16696 ;;		_setRF_ReceiveGO
 16697 ;;		_setRF_RxStatus
 16698 ;; This function uses a non-reentrant model
 16699 ;;
 16700                           
 16701                           
 16702                           ;psect for function i1_RfPointSelect
 16703  1EB2                     i1_RfPointSelect:	
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in i1_RfPointSelect: [wreg]
 16707                           ;i1RfPointSelect@rf stored from wreg
 16708  1EB2  00F1               	movwf	i1RfPointSelect@rf
 16709                           
 16710                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16711  1EB3  0871               	movf	i1RfPointSelect@rf,w
 16712  1EB4  3A01               	xorlw	1
 16713  1EB5  1D03               	skipz
 16714  1EB6  2EBB               	goto	i1l6405
 16715                           
 16716                           ;RF_Control_B1.c: 10: RF = &RF1;
 16717  1EB7  30CF               	movlw	_RF1& (0+255)
 16718  1EB8  00F0               	movwf	??i1_RfPointSelect
 16719  1EB9  0870               	movf	??i1_RfPointSelect,w
 16720  1EBA  00FA               	movwf	_RF
 16721  1EBB                     i1l6405:	
 16722                           
 16723                           ;RF_Control_B1.c: 11: }
 16724                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 16725  1EBB  1A0B               	btfsc	11,4	;volatile
 16726  1EBC  0008               	return
 16727                           
 16728                           ;RF_Control_B1.c: 13: INTE = 1;
 16729  1EBD  160B               	bsf	11,4	;volatile
 16730  1EBE  0008               	return
 16731  1EBF                     __end_ofi1_RfPointSelect:	
 16732  007E                     btemp	set	126	;btemp
 16733  007E                     pic14e$flags	set	126
 16734  007E                     wtemp	set	126
 16735  007E                     wtemp0	set	126
 16736  0080                     wtemp1	set	128
 16737  0082                     wtemp2	set	130
 16738  0084                     wtemp3	set	132
 16739  0086                     wtemp4	set	134
 16740  0088                     wtemp5	set	136
 16741  007F                     wtemp6	set	127
 16742  007E                     ttemp	set	126
 16743  007E                     ttemp0	set	126
 16744  0081                     ttemp1	set	129
 16745  0084                     ttemp2	set	132
 16746  0087                     ttemp3	set	135
 16747  007F                     ttemp4	set	127
 16748  007E                     ltemp	set	126
 16749  007E                     ltemp0	set	126
 16750  0082                     ltemp1	set	130
 16751  0086                     ltemp2	set	134
 16752  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         217
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      80
    BANK2            80      0      72
    BANK3            80      0      60
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK2[9]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK1[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK1[4]), VarLED2(BANK1[4]), 
		 -> VarLED1(BANK1[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    myMain	PTR struct myMain size(1) Largest target is 16
		 -> NULL(NULL[0]), _myMain(BANK3[16]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK3[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _INT_ISR->_setRF_RxStatus
    _setRF_RxStatus->i1_RfPointSelect
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Status->_RfSWPointSelect
    _setRFSW_Control->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   65056
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1421
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     130
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19180
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   19180
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    8820
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    7459
                                             66 BANK0      3     3      0
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1264
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     740
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     740
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   25699
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   25699
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   24971
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1203
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   23724
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     558
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      1     1      0    8768
                                             66 BANK0      1     1      0
                    _RfSWPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     494
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11399
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     198
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     198
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     850
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     850
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9272
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9158
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6357
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6053
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1258
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     718
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1159
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     634
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
                        _Buz_Counter
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (13) _Buz_Counter                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     260
                    _setRF_ReceiveGO
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (13) _setRF_RxStatus                                      2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
     _setRF_RxStatus
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _Buz_Counter
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     157      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     157      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 14 16:54:16 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 007A  
                __end_of_CC2500_WriteREG 1100                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1FEC               _getDimmerLights_StatusFlag 1FD9  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0D6F  
                           ___ftadd@sign 0048                                      l300 087C  
                                    l313 1438                                      l316 143E  
                                    l280 1567                                      l346 10DA  
                                    l370 1F1C                                      l347 10DC  
                                    l285 1591                                      l382 131F  
                                    l358 10EF                                      l286 1596  
                                    l376 1173                                      l296 086B  
                                    l289 1599                                      l797 113E  
                                    l798 1146                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BE                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00CF                                      _ISR 0004  
                                    _WDT 00ED                                      _Sw1 014D  
                                    _Sw2 0156                                      _Buz 00B7  
                                    _Sw3 015F                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 10E7                            ??_Buz_Counter 0070  
                  _Buzzer_Initialization 1E82                          __end_of_ADC_Set 1E52  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0B59                    _setDimmerLights_AdjRF 12F8  
                  _setDimmerLights_AdjGo 1F64                                     ?_ISR 0070  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1FA6  
                           ___ftdiv@sign 003D                                     l2221 16B6  
                                   l3014 0518                 ?_DimmerLightsPointSelect 0070  
                                   l2243 1280                                     l2244 128A  
                                   l2258 154A                                     l2620 1E2D  
                        __end_of_IOC_Set 1ECC                                     l2701 0841  
                                   l1398 1470                                     l6001 06D0  
                                   l2651 0255                                     l5301 07B9  
                                   l6005 06D9                                     l5311 07DF  
                                   l5303 07BE                                     l6031 1579  
                                   l5401 0557                                     l6009 06E2  
                                   l6131 1FE5                                     l5411 0EBB  
                                   l5309 07D7                                     l5341 04A1  
                                   l2677 0C92                                     l7023 0FE1  
                                   l5431 0F12                                     l5503 0BF1  
                                   l6143 14F8                                     l6063 088E  
                                   l5351 04B7                                     l7017 0FB5  
                                   l7025 0FE7                                     l5329 12E1  
                                   l5417 0ED1                                     l5521 0C21  
                                   l6065 08A6                                     l5345 04A8  
                                   l5601 11E6                                     l5531 0C45  
                                   l5523 0C2F                                     l7131 03FB  
                                   l6227 1265                                     l5371 04EE  
                                   l5363 04D1                                     l6243 171B  
                                   l7029 0FEF                                     l5533 0C48  
                                   l6077 08BF                                     l5381 050A  
                                   l5373 04F3                                     l5453 0702  
                                   l5605 11EF                                     l6309 0C8D  
                                   l6087 1330                                     l5623 1767  
                                   l5711 0AAD                                     l5703 0AA1  
                                   l2991 07E9                                     l5295 07A8  
                                   l5439 0F2B                                     l5391 053C  
                                   l5383 0514                                     l5375 04F7  
                                   l5471 0753                                     l6255 1731  
                                   l7223 0B53                                     l7215 0B27  
                                   l6089 133B                                     l5641 178D  
                                   l5633 176F                                     l5617 175C  
                                   l2985 07D2                                     l5537 0C56  
                                   l5529 0C3C                                     l5369 04E4  
                                   l6345 081E                                     l6329 0CD4  
                                   l5635 177B                                     l5731 0AD5  
                                   l5723 0AC9                                     l5707 0AA7  
                                   l5715 0AB3                                     l5299 07AF  
                                   l5387 052A                                     l5483 076F  
                                   l5475 075B                                     l5459 0718  
                                   l6347 0821                                     l7323 16D8  
                                   l5645 1796                                     l5581 13FE  
                                   l6621 0D84                                     l6189 1454  
                                   l6357 082D                                     l6285 0C6F  
                                   l5663 0D27                                     l5727 0ACF  
                                   l5735 0ADB                                     l6623 0D87  
                                   l7175 15E1                                     l6703 166F  
                                   l5831 11D4                                     l5487 0777  
                                   l6359 0830                                     l6287 0C72  
                                   l5649 179E                                     l5585 1409  
                                   l5577 13F3                                     l5593 1EE3  
                                   l6633 0D93                                     l6369 083C  
                                   l6297 0C7E                                     l5667 0D4B  
                                   l6635 0D96                                     l5907 1538  
                                   l6299 0C81                                     l5693 0A91  
                                   l5685 0A85                                     l6661 0DD1  
                                   l6645 0DA2                                     l5829 11CE  
                                   l5759 09F7                                     l6647 0DA7  
                                   l6399 097D                                     l5689 0A8B  
                                   l5697 0A97                                     l6673 0DFE  
                                   l6657 0DC5                                     l5793 1484  
                                   l5881 08F6                                     l6921 023C  
                                   l5859 0BAC                                     l5885 08FF  
                                   l6861 05C7                                     l6941 0283  
                                   l6925 0249                                     l6783 0A27  
                                   l6695 1661                                     l5983 069A  
                                   l6839 0589                                     l6951 02B5  
                                   l6777 0A0E                                     l5993 06BE  
                                   l6873 05E0                                     l6849 05A2  
                                   l6787 0A6D                                     l6699 1668  
                                   l5997 06C7                                     l5989 06B5  
                                   l6885 0601                                     l6965 02F9  
                  _myMain_Initialization 1075                                     l6975 032C  
                                   l6897 061B                                     _CFGS 0CAE  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 1F95  
                                   _LATC 010E                                     u4015 075C  
                                   u4025 0762                                     u4125 0C22  
                                   u4055 0778                                     u4065 077E  
                                   u4155 0C3D                                     u5055 1325  
                                   u4335 1772                                     u4095 0BF8  
                                   u3625 07F0                                     u4610 09A5  
                                   u4355 177C                                     u3555 07B4  
                                   _PEIE 005E                                     u4365 1786  
                                   u3805 04F8                                     _INTE 005C  
                                   _INTF 0059                                     u4375 178E  
                                   u3575 07CD                                     u4615 09A3  
                                   u3905 0EE3                                     u3745 04D2  
                                   u3595 07DA                                     u3915 0EF3  
                                   u3835 050B                                     u3925 0F13  
                                   u3935 0F22                                     u3775 04E5  
                                   u3945 0F2C                                     u6605 0F71  
                                   u3985 0724                                     u3995 0734  
                                   u6835 0AFF                                     u6845 0B3D  
                                   u6795 15C8                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1E38                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 01D0  
                                   __WDT 00E7                                     _main 16BD  
                           ___ftpack@arg 0020                          __end_of_RF_Main 1E2D  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 10CE  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1EE7                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                          _RfPointSelect 1ED9               __end_of_setRFSW_AdjControl 1560  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1F44            __end_of_DimmerIntrPointSelect 111A  
                  ?_setDimmerLights_Main 0070                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 17A5  
                        __end_of___ftadd 056F                          __end_of___ftdiv 0F4D  
                        __end_of___ftmul 079F                          ___awdiv@divisor 0020  
                        __end_of___fttol 0C5F             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l740 11AB  
                                  i1l741 11B4                                    i1l750 1109  
                                  i1l751 1111                   _setDimmerLights_Switch 1F44  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E9                                    _RFSW2 00EA  
                                  _RFSW3 00EB                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 1217               _setDimmerLights_IntrIOC_GO 11F8  
                       __end_of_TMR0_ISR 14E2             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1ED9                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0B59              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 11A1  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                      __end_of_Buz_Counter 1FB7  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1FC8  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$5000 0064                     _Sw_DimmerOnFunc$5001 0065  
                   _Sw_DimmerOnFunc$4999 0063                       _setRF_DimmerLights 099B  
            __size_of_Flash_Memory_Write 0033                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 17A5  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1704  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E25  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0BD8                     _setSw_Initialization 1E59  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0635  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 001D  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 114F                   ?_setDimmerLights_AdjRF 0070  
                              ??_INT_ISR 0074                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 006A                         ??_setRFSW_Status 0023  
                              ??_INT_Set 0020                  ??_Switch_Initialization 0025  
                      i1RfPointSelect@rf 0071                     ??_setRF_DimmerLights 005E  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 12F8  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0800  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1F54  
                                 i1l6405 1EBB                                   i1l6521 013C  
                                 i1l6513 011A                                   i1l6507 0101  
                                 i1l6515 0120                                   i1l6525 0153  
                                 i1l6509 0107                                   i1l6551 01C0  
                                 i1l6535 0182                                   i1l6537 0188  
                                 i1l6529 0167                                   i1l6481 00AA  
                                 i1l6547 01BA                                   i1l6555 01C6  
                                 i1l6573 01F7                                   i1l6485 00B0  
                                 i1l6569 01F1                                   i1l6577 01FD  
                                 i1l6489 00B7                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   _OSCCON 0099  
                                 u670_25 14D2                                   u567_25 0085  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 109E                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E44  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 109E  
                                 _Dimmer 00B9               __end_of_Mcu_Initialization 116A  
                    __end_of_Buzzer_Main 1000                                   _Memory 00EF  
                                 _Timer0 00EC       __end_of_setDimmerLights_TriggerAdj 1F84  
             _setDimmerLights_TriggerAdj 1F74            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                          i1_RfPointSelect 1EB2  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C5                                   _s_data 00C6  
                                 _setLED 0A75                                   _myMain 00EE  
              _setDimmerLights_Main$1910 0066                         _DimmerLightsIntr 0079  
              _setDimmerLights_Main$1911 0067                _setDimmerLights_Main$1912 0068  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0CE6  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0223  
            _setDimmerLights_IntrControl 004C                 Flash_Memory_Read@address 0022  
                            _Buz_Counter 1FA6                        RfSWPointSelect@sw 0021  
                       ??_setRF_RxStatus 0073                    __end_of_SwPointSelect 11F8  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 1275  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 002D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1E2D                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 1800         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0048                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1295                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1F24                ??_setControl_Lights_Table 0067  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 000C                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                 __end_of_setDimmerReClock 1EF6  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0023  
                         _DimmerLights11 00BA                           _DimmerLights22 00BB  
                         _DimmerLights33 00BC                     __size_of_setLED_Main 0047  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0F4D                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                               __pnvCOMMON 007D  
                          ??_Switch_Main 006B                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1EBF                     __size_of_setRF_Learn 000E  
                            setBuz@count 002C                               __pmaintext 16BD  
                    _CC2500_WriteCommand 1F14         __size_of_DimmerLightsPointSelect 001B  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A0                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0028                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E4B  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1E59                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 1520                  __end_of_RfSWPointSelect 1295  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1F95  
                                _IOC_Set 1EBF                     __size_of_setLog_Code 0047  
                                _INT_ISR 1F84                                  _INT_Set 1E32  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 15A4  
                      _Flash_Memory_Read 111A              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 005E                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 1E29  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 10B6          __end_of_setControl_Lights_Table 06EB  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0C5F                          _setPercentValue 15E9  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 1E9A                          __size_of_IO_Set 0018  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D8                                  _VarLED2 00DC  
                                _VarLED3 00E0                        __end_of_getRxData 1751  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 11BE  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1F64  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1F54  
                                ___awdiv 1751                                  ___ftadd 0479  
                         ??_setSw_Enable 0022                                  ___ftdiv 0EA4  
                                ___ftmul 06EB                                  ___fttol 0BD8  
                    __end_of_Switch_Main 1EB2                  ??_Buzzer_Initialization 0020  
                                __myMain 01C0                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0070  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0089  
                         ??_setSw_Status 0023                                  __ptext1 0AE5  
                                __ptext2 1367                                  __ptext3 1340  
                                __ptext4 1075                                  __ptext5 1185  
                                __ptext6 0002                                  __ptext7 1EA6  
                                __ptext8 0223                                  __ptext9 0800  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1100                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 15E9                __end_of_Flash_Memory_Read 1134  
                             _setRF_Main 056F                  ??_myMain_Initialization 0020  
                      _DimmerLights_Main 1EF6                                  _my_Main 0AE5  
                  ??_CC2500_WriteCommand 0022                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1E19               __end_of_CC2500_ClearTXFIFO 1E1D  
          DimmerLightsPointSelect@lights 0021                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 13E7  
                                clrloop0 1E3F           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1FD9                     end_of_initialization 0048  
                      _CC2500_InitSetREG 1390                            _DelayTime_1us 131A  
                      __end_of_setTxData 0EA4               __end_of_Flash_Memory_Write 1477  
                                init_ram 1E38                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1E39                               _setSw_Main 0223  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 116A  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1FB7  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0869                            _CC2500_TxData 1560  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1367  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                    _Flash_Memory_Modify 0A07                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1E61                      ??_CC2500_ReadStatus 0022  
                 setRF_Initialization@rf 0070         getDimmerLights_StatusFlag@Status 0021  
                CC2500_InitSetREG@loop_c 0028                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1F05                       _Mcu_Initialization 114F  
               __size_of_CC2500_PowerRST 0030                         ?_RfSWPointSelect 0070  
                       __CFG_FOSC$INTOSC 0000                             ?_Buz_Counter 0070  
                 __end_of_LedPointSelect 1414                  __end_of_Sw_DimmerOnFunc 0CE6  
                __end_of_setPercentValue 162F                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 13BA                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 14E2  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1185  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 10B6                     _setRF_Initialization 1E52  
                            _Switch_Main 1EA6                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1134                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1089                     ??_Mcu_Initialization 0021  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 005B                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 11A1                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0036                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1255  
          __size_of_setDimmerLights_Main 0095                           __end_of_setLED 0AE5  
                         __end_of_setBuz 0D6F          _getDimmerLights_StatusFlag$1916 0022  
                   _CC2500_FrequencyCabr 1E8E                __size_of_Sw_DimmerOffFunc 006A  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 08C7  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1477  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 2000  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1236                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1390                          RfPointSelect@rf 0021  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D4                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1F14                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 1EE7                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C7                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C1                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00C3                              __pdataBANK3 01A0  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1E1D               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 14AC                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4200 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 007F                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                          _DimmerLights3 013E                    CC2500_WriteREG@w_addr 0024  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 0027  
                        ??_CC2500_RxData 0024                  __size_of_setRF_RxStatus 000C  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00EC  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0070  
                    __size_of_setRF_Main 00C6                               setBuz@time 0029  
               ?_setControl_Lights_Table 0070      __end_of_Flash_Memory_Initialization 0479  
            _Flash_Memory_Initialization 0381                                 ?___awdiv 0020  
                              __ptext100 14AC                                __ptext101 004C  
                              __ptext110 1E6A                                __ptext102 1100  
                              __ptext111 1EB2                                __ptext103 1FA6  
                              __ptext104 1F95                                __ptext105 1EE7  
                              __ptext106 11F8                                __ptext107 11A1  
                              __ptext108 1F84                                __ptext109 1E76  
                               ?___ftadd 003E                                _getRxData 1704  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 0931  
                        _setRF_ReceiveGO 1E6A            __size_of_setSw_Initialization 0008  
         __size_of_Buzzer_Initialization 000C            __end_of_Buzzer_Initialization 1E8E  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1E32  
               ?_setDimmerLights_Trigger 0022                      __size_of_setSw_Main 015E  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 131A  
          __end_of_setDimmerLights_AdjGo 1F74                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C4  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1089                             _setRF_Enable 1340  
                          _SwPointSelect 11DB                     __size_of_Buz_Counter 0011  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 1676  
                    _DimmerLightsIntrIOC 00BD                   ??_setRF_Initialization 0020  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F34  
                        SwPointSelect@sw 0021                                clear_ram0 1E3E  
               CC2500_InitPATable@loop_d 0027                                _setTxData 0E04  
    __end_of_DimmerLights_Initialization 12D6              _DimmerLights_Initialization 12B5  
                     _CC2500_ClearRXFIFO 1E15                       _CC2500_ClearTXFIFO 1E19  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 080E  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                  __size_of_setMemory_GO 001F                       _Flash_Memory_Write 1444  
                             ?_getRxData 0070                                 _TMR0_ISR 14AC  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 1ECC  
                       _Sw_DimmerAdjFunc 080E                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1275  
            __end_of_CC2500_WriteCommand 1F24                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1185                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0931                    _Sw_DimmerAdjFunc$5010 0026  
                  _Sw_DimmerAdjFunc$5011 0027                    _Sw_DimmerAdjFunc$5009 0025  
                  __size_of_setSw_Enable 0029                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EA6                           ?_SwPointSelect 0070  
                       __size_of_INT_ISR 0011                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 16BD                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1E21                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1FC8                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1066  
                           _setMemory_GO 1236                     __size_of_Buzzer_Main 00B3  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 10CE  
           Flash_Memory_Initialization@i 005E                  __end_of_setRF_ReceiveGO 1E76  
                      setRFSW_Control@sw 0062                                setLED@led 0023  
                ??_DimmerIntrPointSelect 0070                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1367  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               __size_ofi1_RfPointSelect 000D                                 ___awtoft 12D6  
                       ??_LedPointSelect 0020                                 ___ftpack 079F  
                           _setSw_Status 1F05                             ??_setRF_Main 0069  
                   CC2500_WriteREG@value 0022                              _setLED_Main 162F  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0A07  
                       __size_of_my_Main 0074                                 __ptext10 0C5F  
                               __ptext11 0931                                 __ptext20 1704  
                               __ptext12 080E                                 __ptext21 1676  
                               __ptext13 1F74                                 __ptext30 1477  
                               __ptext22 0635                                 __ptext14 1F64  
                               __ptext31 12F8                                 __ptext23 1066  
                               __ptext15 1FC8                                 __ptext40 11BE  
                               __ptext32 17A5                                 __ptext24 08C7  
                               __ptext16 1E59                                 __ptext41 1E25  
                               __ptext33 06EB                                 __ptext25 1F05  
                               __ptext17 1E2D                                 __ptext50 1E4B  
                               __ptext42 1E52                                 __ptext34 0479  
                               __ptext26 11DB                                 __ptext18 1E29  
                               __ptext51 1F34                                 __ptext43 114F  
                               __ptext35 1275                                 __ptext27 1F54  
                               __ptext19 056F                                 __ptext60 1E61  
                               __ptext52 162F                                 __ptext44 10B6  
                               __ptext36 1255                                 __ptext28 1F44  
                               __ptext61 111A                                 __ptext53 1F24  
                               __ptext45 1ECC                                 __ptext37 1560  
                               __ptext29 1520                                 __ptext70 0EA4  
                               __ptext62 1EF6                                 __ptext54 1FB7  
                               __ptext46 109E                                 __ptext38 0869  
                               __ptext71 12D6                                 __ptext63 0D6F  
                               __ptext55 15A4                                 __ptext47 1EBF  
                               __ptext39 116A                                 __ptext80 1FD9  
                               __ptext72 079F                                 __ptext64 14E2  
                               __ptext56 0A07                                 __ptext48 1E32  
                               __ptext81 12B5                                 __ptext73 0B59  
                               __ptext65 0E04                                 __ptext57 1E9A  
                               __ptext49 1E21                                 __ptext90 10E7  
                               __ptext82 13BA                                 __ptext74 0A75  
                               __ptext66 1ED9                                 __ptext58 0381  
                               __ptext91 1E8E                                 __ptext83 1134  
                               __ptext75 13E7                                 __ptext67 099B  
                               __ptext59 1444                                 __ptext92 131A  
                               __ptext84 1E44                                 __ptext76 0CE6  
                               __ptext68 15E9                                 __ptext93 1E19  
                               __ptext85 1089                                 __ptext77 1751  
                               __ptext69 0BD8                                 __ptext94 1E15  
                               __ptext86 1E1D                                 __ptext78 1FEC  
                               __ptext95 1F14                                 __ptext87 1414  
                               __ptext79 1236                                 __ptext96 10CE  
                               __ptext88 1390                                 __ptext97 0F4D  
                               __ptext89 1217                                 __ptext98 1E82  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1075  
          __end_of_Dimmer_Initialization 1E4B             __end_of_setDimmerLights_Main 0E04  
                           ??_setSw_Main 0068                            setLED@command 0022  
                          __size_of_main 0047                              _setRF_Learn 0800  
               __end_of_CC2500_SIDLEMode 1E21                           _setRF_RxStatus 1E76  
             setDimmerLights_Main@lights 006A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1FEC                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000F                          _CC2500_ReadByte 11BE  
                     _CC2500_InitPATable 1217      __size_of_getDimmerLights_StatusFlag 0013  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0635  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1414              __end_of_Flash_Memory_Modify 0A75  
                      ??_getPercentValue 0059                              _setLog_Code 1676  
                  setRF_RxStatus@command 0072              __end_of_Flash_Memory_Unlock 1E6A  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 10E7  
                     __end_of_setSw_Main 0381                            _Transceive_OK 03E1  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                 __end_of_setRF_RxStatus 1E82                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13E7  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13BA  
            __end_of_setDimmerLights_Adj 1520                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1E25  
   __size_of_setDimmerLights_IntrControl 01D7                     _Flash_Memory_Erasing 1E9A  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                      ??_RF_Initialization 0021  
                            getRxData@rf 0068         __size_of_setControl_Lights_Table 00B6  
                 __size_of_RfPointSelect 000E                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F8                    __end_of_DelayTime_1us 1340  
               __end_of_Sw_DimmerAdjFunc 0869                  __end_of_CC2500_ReadByte 11DB  
           __end_of_setSw_Initialization 1E61                          ?_setRF_RxStatus 0072  
                   getPercentValue@value 005B                             _RF_RxDisable 1255  
             __end_of_LED_Initialization 1F34         __size_of_setDimmerLights_Trigger 0010  
               __size_of_Sw_DimmerOnFunc 0087                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1E29  
               __end_of_Sw_DimmerOffFunc 099B          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                         setRF_RxStatus@rf 0073  
                  __end_of_CC2500_RxData 08C7                    __end_of_CC2500_TxData 15A4  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1444  
