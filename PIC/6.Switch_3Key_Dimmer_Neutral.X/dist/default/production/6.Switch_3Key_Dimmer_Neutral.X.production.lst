

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 16 13:03:46 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	intentry,global,class=CODE,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	dabs	1,0x7E,2
   143  0000                     	;# 
   144  0001                     	;# 
   145  0002                     	;# 
   146  0003                     	;# 
   147  0004                     	;# 
   148  0005                     	;# 
   149  0006                     	;# 
   150  0007                     	;# 
   151  0008                     	;# 
   152  0009                     	;# 
   153  000A                     	;# 
   154  000B                     	;# 
   155  000C                     	;# 
   156  000D                     	;# 
   157  000E                     	;# 
   158  0010                     	;# 
   159  0011                     	;# 
   160  0012                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0095                     	;# 
   177  0096                     	;# 
   178  0097                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009B                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  010C                     	;# 
   187  010D                     	;# 
   188  010E                     	;# 
   189  0116                     	;# 
   190  0117                     	;# 
   191  011D                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194  018E                     	;# 
   195  0191                     	;# 
   196  0191                     	;# 
   197  0192                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0194                     	;# 
   201  0195                     	;# 
   202  0196                     	;# 
   203  0197                     	;# 
   204  0199                     	;# 
   205  019A                     	;# 
   206  019B                     	;# 
   207  019B                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019C                     	;# 
   211  019C                     	;# 
   212  019D                     	;# 
   213  019E                     	;# 
   214  019F                     	;# 
   215  020D                     	;# 
   216  0210                     	;# 
   217  0211                     	;# 
   218  0211                     	;# 
   219  0212                     	;# 
   220  0212                     	;# 
   221  0213                     	;# 
   222  0213                     	;# 
   223  0214                     	;# 
   224  0214                     	;# 
   225  0215                     	;# 
   226  0215                     	;# 
   227  0215                     	;# 
   228  0216                     	;# 
   229  0216                     	;# 
   230  0217                     	;# 
   231  0217                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0298                     	;# 
   237  0298                     	;# 
   238  0299                     	;# 
   239  029A                     	;# 
   240  0394                     	;# 
   241  0395                     	;# 
   242  0396                     	;# 
   243  0FE4                     	;# 
   244  0FE5                     	;# 
   245  0FE6                     	;# 
   246  0FE7                     	;# 
   247  0FE8                     	;# 
   248  0FE9                     	;# 
   249  0FEA                     	;# 
   250  0FEB                     	;# 
   251  0FED                     	;# 
   252  0FEE                     	;# 
   253  0FEF                     	;# 
   254  0000                     	;# 
   255  0001                     	;# 
   256  0002                     	;# 
   257  0003                     	;# 
   258  0004                     	;# 
   259  0005                     	;# 
   260  0006                     	;# 
   261  0007                     	;# 
   262  0008                     	;# 
   263  0009                     	;# 
   264  000A                     	;# 
   265  000B                     	;# 
   266  000C                     	;# 
   267  000D                     	;# 
   268  000E                     	;# 
   269  0010                     	;# 
   270  0011                     	;# 
   271  0012                     	;# 
   272  0015                     	;# 
   273  0016                     	;# 
   274  0016                     	;# 
   275  0017                     	;# 
   276  0018                     	;# 
   277  0019                     	;# 
   278  001A                     	;# 
   279  001B                     	;# 
   280  001C                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  008E                     	;# 
   284  0090                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0095                     	;# 
   288  0096                     	;# 
   289  0097                     	;# 
   290  0099                     	;# 
   291  009A                     	;# 
   292  009B                     	;# 
   293  009B                     	;# 
   294  009C                     	;# 
   295  009D                     	;# 
   296  009E                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  0116                     	;# 
   301  0117                     	;# 
   302  011D                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  018E                     	;# 
   306  0191                     	;# 
   307  0191                     	;# 
   308  0192                     	;# 
   309  0193                     	;# 
   310  0193                     	;# 
   311  0194                     	;# 
   312  0195                     	;# 
   313  0196                     	;# 
   314  0197                     	;# 
   315  0199                     	;# 
   316  019A                     	;# 
   317  019B                     	;# 
   318  019B                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019C                     	;# 
   322  019C                     	;# 
   323  019D                     	;# 
   324  019E                     	;# 
   325  019F                     	;# 
   326  020D                     	;# 
   327  0210                     	;# 
   328  0211                     	;# 
   329  0211                     	;# 
   330  0212                     	;# 
   331  0212                     	;# 
   332  0213                     	;# 
   333  0213                     	;# 
   334  0214                     	;# 
   335  0214                     	;# 
   336  0215                     	;# 
   337  0215                     	;# 
   338  0215                     	;# 
   339  0216                     	;# 
   340  0216                     	;# 
   341  0217                     	;# 
   342  0217                     	;# 
   343  0291                     	;# 
   344  0291                     	;# 
   345  0292                     	;# 
   346  0293                     	;# 
   347  0298                     	;# 
   348  0298                     	;# 
   349  0299                     	;# 
   350  029A                     	;# 
   351  0394                     	;# 
   352  0395                     	;# 
   353  0396                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  0010                     	;# 
   381  0011                     	;# 
   382  0012                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0016                     	;# 
   386  0017                     	;# 
   387  0018                     	;# 
   388  0019                     	;# 
   389  001A                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  008C                     	;# 
   393  008D                     	;# 
   394  008E                     	;# 
   395  0090                     	;# 
   396  0091                     	;# 
   397  0092                     	;# 
   398  0095                     	;# 
   399  0096                     	;# 
   400  0097                     	;# 
   401  0099                     	;# 
   402  009A                     	;# 
   403  009B                     	;# 
   404  009B                     	;# 
   405  009C                     	;# 
   406  009D                     	;# 
   407  009E                     	;# 
   408  010C                     	;# 
   409  010D                     	;# 
   410  010E                     	;# 
   411  0116                     	;# 
   412  0117                     	;# 
   413  011D                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  018E                     	;# 
   417  0191                     	;# 
   418  0191                     	;# 
   419  0192                     	;# 
   420  0193                     	;# 
   421  0193                     	;# 
   422  0194                     	;# 
   423  0195                     	;# 
   424  0196                     	;# 
   425  0197                     	;# 
   426  0199                     	;# 
   427  019A                     	;# 
   428  019B                     	;# 
   429  019B                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019C                     	;# 
   433  019C                     	;# 
   434  019D                     	;# 
   435  019E                     	;# 
   436  019F                     	;# 
   437  020D                     	;# 
   438  0210                     	;# 
   439  0211                     	;# 
   440  0211                     	;# 
   441  0212                     	;# 
   442  0212                     	;# 
   443  0213                     	;# 
   444  0213                     	;# 
   445  0214                     	;# 
   446  0214                     	;# 
   447  0215                     	;# 
   448  0215                     	;# 
   449  0215                     	;# 
   450  0216                     	;# 
   451  0216                     	;# 
   452  0217                     	;# 
   453  0217                     	;# 
   454  0291                     	;# 
   455  0291                     	;# 
   456  0292                     	;# 
   457  0293                     	;# 
   458  0298                     	;# 
   459  0298                     	;# 
   460  0299                     	;# 
   461  029A                     	;# 
   462  0394                     	;# 
   463  0395                     	;# 
   464  0396                     	;# 
   465  0FE4                     	;# 
   466  0FE5                     	;# 
   467  0FE6                     	;# 
   468  0FE7                     	;# 
   469  0FE8                     	;# 
   470  0FE9                     	;# 
   471  0FEA                     	;# 
   472  0FEB                     	;# 
   473  0FED                     	;# 
   474  0FEE                     	;# 
   475  0FEF                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  0010                     	;# 
   492  0011                     	;# 
   493  0012                     	;# 
   494  0015                     	;# 
   495  0016                     	;# 
   496  0016                     	;# 
   497  0017                     	;# 
   498  0018                     	;# 
   499  0019                     	;# 
   500  001A                     	;# 
   501  001B                     	;# 
   502  001C                     	;# 
   503  008C                     	;# 
   504  008D                     	;# 
   505  008E                     	;# 
   506  0090                     	;# 
   507  0091                     	;# 
   508  0092                     	;# 
   509  0095                     	;# 
   510  0096                     	;# 
   511  0097                     	;# 
   512  0099                     	;# 
   513  009A                     	;# 
   514  009B                     	;# 
   515  009B                     	;# 
   516  009C                     	;# 
   517  009D                     	;# 
   518  009E                     	;# 
   519  010C                     	;# 
   520  010D                     	;# 
   521  010E                     	;# 
   522  0116                     	;# 
   523  0117                     	;# 
   524  011D                     	;# 
   525  018C                     	;# 
   526  018D                     	;# 
   527  018E                     	;# 
   528  0191                     	;# 
   529  0191                     	;# 
   530  0192                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0197                     	;# 
   537  0199                     	;# 
   538  019A                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019C                     	;# 
   544  019C                     	;# 
   545  019D                     	;# 
   546  019E                     	;# 
   547  019F                     	;# 
   548  020D                     	;# 
   549  0210                     	;# 
   550  0211                     	;# 
   551  0211                     	;# 
   552  0212                     	;# 
   553  0212                     	;# 
   554  0213                     	;# 
   555  0213                     	;# 
   556  0214                     	;# 
   557  0214                     	;# 
   558  0215                     	;# 
   559  0215                     	;# 
   560  0215                     	;# 
   561  0216                     	;# 
   562  0216                     	;# 
   563  0217                     	;# 
   564  0217                     	;# 
   565  0291                     	;# 
   566  0291                     	;# 
   567  0292                     	;# 
   568  0293                     	;# 
   569  0298                     	;# 
   570  0298                     	;# 
   571  0299                     	;# 
   572  029A                     	;# 
   573  0394                     	;# 
   574  0395                     	;# 
   575  0396                     	;# 
   576  0FE4                     	;# 
   577  0FE5                     	;# 
   578  0FE6                     	;# 
   579  0FE7                     	;# 
   580  0FE8                     	;# 
   581  0FE9                     	;# 
   582  0FEA                     	;# 
   583  0FEB                     	;# 
   584  0FED                     	;# 
   585  0FEE                     	;# 
   586  0FEF                     	;# 
   587  0000                     	;# 
   588  0001                     	;# 
   589  0002                     	;# 
   590  0003                     	;# 
   591  0004                     	;# 
   592  0005                     	;# 
   593  0006                     	;# 
   594  0007                     	;# 
   595  0008                     	;# 
   596  0009                     	;# 
   597  000A                     	;# 
   598  000B                     	;# 
   599  000C                     	;# 
   600  000D                     	;# 
   601  000E                     	;# 
   602  0010                     	;# 
   603  0011                     	;# 
   604  0012                     	;# 
   605  0015                     	;# 
   606  0016                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  0019                     	;# 
   611  001A                     	;# 
   612  001B                     	;# 
   613  001C                     	;# 
   614  008C                     	;# 
   615  008D                     	;# 
   616  008E                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0095                     	;# 
   621  0096                     	;# 
   622  0097                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009B                     	;# 
   627  009C                     	;# 
   628  009D                     	;# 
   629  009E                     	;# 
   630  010C                     	;# 
   631  010D                     	;# 
   632  010E                     	;# 
   633  0116                     	;# 
   634  0117                     	;# 
   635  011D                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  018E                     	;# 
   639  0191                     	;# 
   640  0191                     	;# 
   641  0192                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0197                     	;# 
   648  0199                     	;# 
   649  019A                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019C                     	;# 
   655  019C                     	;# 
   656  019D                     	;# 
   657  019E                     	;# 
   658  019F                     	;# 
   659  020D                     	;# 
   660  0210                     	;# 
   661  0211                     	;# 
   662  0211                     	;# 
   663  0212                     	;# 
   664  0212                     	;# 
   665  0213                     	;# 
   666  0213                     	;# 
   667  0214                     	;# 
   668  0214                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0215                     	;# 
   672  0216                     	;# 
   673  0216                     	;# 
   674  0217                     	;# 
   675  0217                     	;# 
   676  0291                     	;# 
   677  0291                     	;# 
   678  0292                     	;# 
   679  0293                     	;# 
   680  0298                     	;# 
   681  0298                     	;# 
   682  0299                     	;# 
   683  029A                     	;# 
   684  0394                     	;# 
   685  0395                     	;# 
   686  0396                     	;# 
   687  0FE4                     	;# 
   688  0FE5                     	;# 
   689  0FE6                     	;# 
   690  0FE7                     	;# 
   691  0FE8                     	;# 
   692  0FE9                     	;# 
   693  0FEA                     	;# 
   694  0FEB                     	;# 
   695  0FED                     	;# 
   696  0FEE                     	;# 
   697  0FEF                     	;# 
   698  0000                     	;# 
   699  0001                     	;# 
   700  0002                     	;# 
   701  0003                     	;# 
   702  0004                     	;# 
   703  0005                     	;# 
   704  0006                     	;# 
   705  0007                     	;# 
   706  0008                     	;# 
   707  0009                     	;# 
   708  000A                     	;# 
   709  000B                     	;# 
   710  000C                     	;# 
   711  000D                     	;# 
   712  000E                     	;# 
   713  0010                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0015                     	;# 
   717  0016                     	;# 
   718  0016                     	;# 
   719  0017                     	;# 
   720  0018                     	;# 
   721  0019                     	;# 
   722  001A                     	;# 
   723  001B                     	;# 
   724  001C                     	;# 
   725  008C                     	;# 
   726  008D                     	;# 
   727  008E                     	;# 
   728  0090                     	;# 
   729  0091                     	;# 
   730  0092                     	;# 
   731  0095                     	;# 
   732  0096                     	;# 
   733  0097                     	;# 
   734  0099                     	;# 
   735  009A                     	;# 
   736  009B                     	;# 
   737  009B                     	;# 
   738  009C                     	;# 
   739  009D                     	;# 
   740  009E                     	;# 
   741  010C                     	;# 
   742  010D                     	;# 
   743  010E                     	;# 
   744  0116                     	;# 
   745  0117                     	;# 
   746  011D                     	;# 
   747  018C                     	;# 
   748  018D                     	;# 
   749  018E                     	;# 
   750  0191                     	;# 
   751  0191                     	;# 
   752  0192                     	;# 
   753  0193                     	;# 
   754  0193                     	;# 
   755  0194                     	;# 
   756  0195                     	;# 
   757  0196                     	;# 
   758  0197                     	;# 
   759  0199                     	;# 
   760  019A                     	;# 
   761  019B                     	;# 
   762  019B                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019C                     	;# 
   766  019C                     	;# 
   767  019D                     	;# 
   768  019E                     	;# 
   769  019F                     	;# 
   770  020D                     	;# 
   771  0210                     	;# 
   772  0211                     	;# 
   773  0211                     	;# 
   774  0212                     	;# 
   775  0212                     	;# 
   776  0213                     	;# 
   777  0213                     	;# 
   778  0214                     	;# 
   779  0214                     	;# 
   780  0215                     	;# 
   781  0215                     	;# 
   782  0215                     	;# 
   783  0216                     	;# 
   784  0216                     	;# 
   785  0217                     	;# 
   786  0217                     	;# 
   787  0291                     	;# 
   788  0291                     	;# 
   789  0292                     	;# 
   790  0293                     	;# 
   791  0298                     	;# 
   792  0298                     	;# 
   793  0299                     	;# 
   794  029A                     	;# 
   795  0394                     	;# 
   796  0395                     	;# 
   797  0396                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  0010                     	;# 
   825  0011                     	;# 
   826  0012                     	;# 
   827  0015                     	;# 
   828  0016                     	;# 
   829  0016                     	;# 
   830  0017                     	;# 
   831  0018                     	;# 
   832  0019                     	;# 
   833  001A                     	;# 
   834  001B                     	;# 
   835  001C                     	;# 
   836  008C                     	;# 
   837  008D                     	;# 
   838  008E                     	;# 
   839  0090                     	;# 
   840  0091                     	;# 
   841  0092                     	;# 
   842  0095                     	;# 
   843  0096                     	;# 
   844  0097                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009B                     	;# 
   849  009C                     	;# 
   850  009D                     	;# 
   851  009E                     	;# 
   852  010C                     	;# 
   853  010D                     	;# 
   854  010E                     	;# 
   855  0116                     	;# 
   856  0117                     	;# 
   857  011D                     	;# 
   858  018C                     	;# 
   859  018D                     	;# 
   860  018E                     	;# 
   861  0191                     	;# 
   862  0191                     	;# 
   863  0192                     	;# 
   864  0193                     	;# 
   865  0193                     	;# 
   866  0194                     	;# 
   867  0195                     	;# 
   868  0196                     	;# 
   869  0197                     	;# 
   870  0199                     	;# 
   871  019A                     	;# 
   872  019B                     	;# 
   873  019B                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019C                     	;# 
   877  019C                     	;# 
   878  019D                     	;# 
   879  019E                     	;# 
   880  019F                     	;# 
   881  020D                     	;# 
   882  0210                     	;# 
   883  0211                     	;# 
   884  0211                     	;# 
   885  0212                     	;# 
   886  0212                     	;# 
   887  0213                     	;# 
   888  0213                     	;# 
   889  0214                     	;# 
   890  0214                     	;# 
   891  0215                     	;# 
   892  0215                     	;# 
   893  0215                     	;# 
   894  0216                     	;# 
   895  0216                     	;# 
   896  0217                     	;# 
   897  0217                     	;# 
   898  0291                     	;# 
   899  0291                     	;# 
   900  0292                     	;# 
   901  0293                     	;# 
   902  0298                     	;# 
   903  0298                     	;# 
   904  0299                     	;# 
   905  029A                     	;# 
   906  0394                     	;# 
   907  0395                     	;# 
   908  0396                     	;# 
   909  0FE4                     	;# 
   910  0FE5                     	;# 
   911  0FE6                     	;# 
   912  0FE7                     	;# 
   913  0FE8                     	;# 
   914  0FE9                     	;# 
   915  0FEA                     	;# 
   916  0FEB                     	;# 
   917  0FED                     	;# 
   918  0FEE                     	;# 
   919  0FEF                     	;# 
   920  0000                     	;# 
   921  0001                     	;# 
   922  0002                     	;# 
   923  0003                     	;# 
   924  0004                     	;# 
   925  0005                     	;# 
   926  0006                     	;# 
   927  0007                     	;# 
   928  0008                     	;# 
   929  0009                     	;# 
   930  000A                     	;# 
   931  000B                     	;# 
   932  000C                     	;# 
   933  000D                     	;# 
   934  000E                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0015                     	;# 
   939  0016                     	;# 
   940  0016                     	;# 
   941  0017                     	;# 
   942  0018                     	;# 
   943  0019                     	;# 
   944  001A                     	;# 
   945  001B                     	;# 
   946  001C                     	;# 
   947  008C                     	;# 
   948  008D                     	;# 
   949  008E                     	;# 
   950  0090                     	;# 
   951  0091                     	;# 
   952  0092                     	;# 
   953  0095                     	;# 
   954  0096                     	;# 
   955  0097                     	;# 
   956  0099                     	;# 
   957  009A                     	;# 
   958  009B                     	;# 
   959  009B                     	;# 
   960  009C                     	;# 
   961  009D                     	;# 
   962  009E                     	;# 
   963  010C                     	;# 
   964  010D                     	;# 
   965  010E                     	;# 
   966  0116                     	;# 
   967  0117                     	;# 
   968  011D                     	;# 
   969  018C                     	;# 
   970  018D                     	;# 
   971  018E                     	;# 
   972  0191                     	;# 
   973  0191                     	;# 
   974  0192                     	;# 
   975  0193                     	;# 
   976  0193                     	;# 
   977  0194                     	;# 
   978  0195                     	;# 
   979  0196                     	;# 
   980  0197                     	;# 
   981  0199                     	;# 
   982  019A                     	;# 
   983  019B                     	;# 
   984  019B                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019C                     	;# 
   988  019C                     	;# 
   989  019D                     	;# 
   990  019E                     	;# 
   991  019F                     	;# 
   992  020D                     	;# 
   993  0210                     	;# 
   994  0211                     	;# 
   995  0211                     	;# 
   996  0212                     	;# 
   997  0212                     	;# 
   998  0213                     	;# 
   999  0213                     	;# 
  1000  0214                     	;# 
  1001  0214                     	;# 
  1002  0215                     	;# 
  1003  0215                     	;# 
  1004  0215                     	;# 
  1005  0216                     	;# 
  1006  0216                     	;# 
  1007  0217                     	;# 
  1008  0217                     	;# 
  1009  0291                     	;# 
  1010  0291                     	;# 
  1011  0292                     	;# 
  1012  0293                     	;# 
  1013  0298                     	;# 
  1014  0298                     	;# 
  1015  0299                     	;# 
  1016  029A                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  0FE4                     	;# 
  1021  0FE5                     	;# 
  1022  0FE6                     	;# 
  1023  0FE7                     	;# 
  1024  0FE8                     	;# 
  1025  0FE9                     	;# 
  1026  0FEA                     	;# 
  1027  0FEB                     	;# 
  1028  0FED                     	;# 
  1029  0FEE                     	;# 
  1030  0FEF                     	;# 
  1031  0000                     	;# 
  1032  0001                     	;# 
  1033  0002                     	;# 
  1034  0003                     	;# 
  1035  0004                     	;# 
  1036  0005                     	;# 
  1037  0006                     	;# 
  1038  0007                     	;# 
  1039  0008                     	;# 
  1040  0009                     	;# 
  1041  000A                     	;# 
  1042  000B                     	;# 
  1043  000C                     	;# 
  1044  000D                     	;# 
  1045  000E                     	;# 
  1046  0010                     	;# 
  1047  0011                     	;# 
  1048  0012                     	;# 
  1049  0015                     	;# 
  1050  0016                     	;# 
  1051  0016                     	;# 
  1052  0017                     	;# 
  1053  0018                     	;# 
  1054  0019                     	;# 
  1055  001A                     	;# 
  1056  001B                     	;# 
  1057  001C                     	;# 
  1058  008C                     	;# 
  1059  008D                     	;# 
  1060  008E                     	;# 
  1061  0090                     	;# 
  1062  0091                     	;# 
  1063  0092                     	;# 
  1064  0095                     	;# 
  1065  0096                     	;# 
  1066  0097                     	;# 
  1067  0099                     	;# 
  1068  009A                     	;# 
  1069  009B                     	;# 
  1070  009B                     	;# 
  1071  009C                     	;# 
  1072  009D                     	;# 
  1073  009E                     	;# 
  1074  010C                     	;# 
  1075  010D                     	;# 
  1076  010E                     	;# 
  1077  0116                     	;# 
  1078  0117                     	;# 
  1079  011D                     	;# 
  1080  018C                     	;# 
  1081  018D                     	;# 
  1082  018E                     	;# 
  1083  0191                     	;# 
  1084  0191                     	;# 
  1085  0192                     	;# 
  1086  0193                     	;# 
  1087  0193                     	;# 
  1088  0194                     	;# 
  1089  0195                     	;# 
  1090  0196                     	;# 
  1091  0197                     	;# 
  1092  0199                     	;# 
  1093  019A                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019D                     	;# 
  1101  019E                     	;# 
  1102  019F                     	;# 
  1103  020D                     	;# 
  1104  0210                     	;# 
  1105  0211                     	;# 
  1106  0211                     	;# 
  1107  0212                     	;# 
  1108  0212                     	;# 
  1109  0213                     	;# 
  1110  0213                     	;# 
  1111  0214                     	;# 
  1112  0214                     	;# 
  1113  0215                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0216                     	;# 
  1117  0216                     	;# 
  1118  0217                     	;# 
  1119  0217                     	;# 
  1120  0291                     	;# 
  1121  0291                     	;# 
  1122  0292                     	;# 
  1123  0293                     	;# 
  1124  0298                     	;# 
  1125  0298                     	;# 
  1126  0299                     	;# 
  1127  029A                     	;# 
  1128  0394                     	;# 
  1129  0395                     	;# 
  1130  0396                     	;# 
  1131  0FE4                     	;# 
  1132  0FE5                     	;# 
  1133  0FE6                     	;# 
  1134  0FE7                     	;# 
  1135  0FE8                     	;# 
  1136  0FE9                     	;# 
  1137  0FEA                     	;# 
  1138  0FEB                     	;# 
  1139  0FED                     	;# 
  1140  0FEE                     	;# 
  1141  0FEF                     	;# 
  1142  0000                     	;# 
  1143  0001                     	;# 
  1144  0002                     	;# 
  1145  0003                     	;# 
  1146  0004                     	;# 
  1147  0005                     	;# 
  1148  0006                     	;# 
  1149  0007                     	;# 
  1150  0008                     	;# 
  1151  0009                     	;# 
  1152  000A                     	;# 
  1153  000B                     	;# 
  1154  000C                     	;# 
  1155  000D                     	;# 
  1156  000E                     	;# 
  1157  0010                     	;# 
  1158  0011                     	;# 
  1159  0012                     	;# 
  1160  0015                     	;# 
  1161  0016                     	;# 
  1162  0016                     	;# 
  1163  0017                     	;# 
  1164  0018                     	;# 
  1165  0019                     	;# 
  1166  001A                     	;# 
  1167  001B                     	;# 
  1168  001C                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  0090                     	;# 
  1173  0091                     	;# 
  1174  0092                     	;# 
  1175  0095                     	;# 
  1176  0096                     	;# 
  1177  0097                     	;# 
  1178  0099                     	;# 
  1179  009A                     	;# 
  1180  009B                     	;# 
  1181  009B                     	;# 
  1182  009C                     	;# 
  1183  009D                     	;# 
  1184  009E                     	;# 
  1185  010C                     	;# 
  1186  010D                     	;# 
  1187  010E                     	;# 
  1188  0116                     	;# 
  1189  0117                     	;# 
  1190  011D                     	;# 
  1191  018C                     	;# 
  1192  018D                     	;# 
  1193  018E                     	;# 
  1194  0191                     	;# 
  1195  0191                     	;# 
  1196  0192                     	;# 
  1197  0193                     	;# 
  1198  0193                     	;# 
  1199  0194                     	;# 
  1200  0195                     	;# 
  1201  0196                     	;# 
  1202  0197                     	;# 
  1203  0199                     	;# 
  1204  019A                     	;# 
  1205  019B                     	;# 
  1206  019B                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019C                     	;# 
  1210  019C                     	;# 
  1211  019D                     	;# 
  1212  019E                     	;# 
  1213  019F                     	;# 
  1214  020D                     	;# 
  1215  0210                     	;# 
  1216  0211                     	;# 
  1217  0211                     	;# 
  1218  0212                     	;# 
  1219  0212                     	;# 
  1220  0213                     	;# 
  1221  0213                     	;# 
  1222  0214                     	;# 
  1223  0214                     	;# 
  1224  0215                     	;# 
  1225  0215                     	;# 
  1226  0215                     	;# 
  1227  0216                     	;# 
  1228  0216                     	;# 
  1229  0217                     	;# 
  1230  0217                     	;# 
  1231  0291                     	;# 
  1232  0291                     	;# 
  1233  0292                     	;# 
  1234  0293                     	;# 
  1235  0298                     	;# 
  1236  0298                     	;# 
  1237  0299                     	;# 
  1238  029A                     	;# 
  1239  0394                     	;# 
  1240  0395                     	;# 
  1241  0396                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0010                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0015                     	;# 
  1272  0016                     	;# 
  1273  0016                     	;# 
  1274  0017                     	;# 
  1275  0018                     	;# 
  1276  0019                     	;# 
  1277  001A                     	;# 
  1278  001B                     	;# 
  1279  001C                     	;# 
  1280  008C                     	;# 
  1281  008D                     	;# 
  1282  008E                     	;# 
  1283  0090                     	;# 
  1284  0091                     	;# 
  1285  0092                     	;# 
  1286  0095                     	;# 
  1287  0096                     	;# 
  1288  0097                     	;# 
  1289  0099                     	;# 
  1290  009A                     	;# 
  1291  009B                     	;# 
  1292  009B                     	;# 
  1293  009C                     	;# 
  1294  009D                     	;# 
  1295  009E                     	;# 
  1296  010C                     	;# 
  1297  010D                     	;# 
  1298  010E                     	;# 
  1299  0116                     	;# 
  1300  0117                     	;# 
  1301  011D                     	;# 
  1302  018C                     	;# 
  1303  018D                     	;# 
  1304  018E                     	;# 
  1305  0191                     	;# 
  1306  0191                     	;# 
  1307  0192                     	;# 
  1308  0193                     	;# 
  1309  0193                     	;# 
  1310  0194                     	;# 
  1311  0195                     	;# 
  1312  0196                     	;# 
  1313  0197                     	;# 
  1314  0199                     	;# 
  1315  019A                     	;# 
  1316  019B                     	;# 
  1317  019B                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019C                     	;# 
  1321  019C                     	;# 
  1322  019D                     	;# 
  1323  019E                     	;# 
  1324  019F                     	;# 
  1325  020D                     	;# 
  1326  0210                     	;# 
  1327  0211                     	;# 
  1328  0211                     	;# 
  1329  0212                     	;# 
  1330  0212                     	;# 
  1331  0213                     	;# 
  1332  0213                     	;# 
  1333  0214                     	;# 
  1334  0214                     	;# 
  1335  0215                     	;# 
  1336  0215                     	;# 
  1337  0215                     	;# 
  1338  0216                     	;# 
  1339  0216                     	;# 
  1340  0217                     	;# 
  1341  0217                     	;# 
  1342  0291                     	;# 
  1343  0291                     	;# 
  1344  0292                     	;# 
  1345  0293                     	;# 
  1346  0298                     	;# 
  1347  0298                     	;# 
  1348  0299                     	;# 
  1349  029A                     	;# 
  1350  0394                     	;# 
  1351  0395                     	;# 
  1352  0396                     	;# 
  1353  0FE4                     	;# 
  1354  0FE5                     	;# 
  1355  0FE6                     	;# 
  1356  0FE7                     	;# 
  1357  0FE8                     	;# 
  1358  0FE9                     	;# 
  1359  0FEA                     	;# 
  1360  0FEB                     	;# 
  1361  0FED                     	;# 
  1362  0FEE                     	;# 
  1363  0FEF                     	;# 
  1364  0000                     	;# 
  1365  0001                     	;# 
  1366  0002                     	;# 
  1367  0003                     	;# 
  1368  0004                     	;# 
  1369  0005                     	;# 
  1370  0006                     	;# 
  1371  0007                     	;# 
  1372  0008                     	;# 
  1373  0009                     	;# 
  1374  000A                     	;# 
  1375  000B                     	;# 
  1376  000C                     	;# 
  1377  000D                     	;# 
  1378  000E                     	;# 
  1379  0010                     	;# 
  1380  0011                     	;# 
  1381  0012                     	;# 
  1382  0015                     	;# 
  1383  0016                     	;# 
  1384  0016                     	;# 
  1385  0017                     	;# 
  1386  0018                     	;# 
  1387  0019                     	;# 
  1388  001A                     	;# 
  1389  001B                     	;# 
  1390  001C                     	;# 
  1391  008C                     	;# 
  1392  008D                     	;# 
  1393  008E                     	;# 
  1394  0090                     	;# 
  1395  0091                     	;# 
  1396  0092                     	;# 
  1397  0095                     	;# 
  1398  0096                     	;# 
  1399  0097                     	;# 
  1400  0099                     	;# 
  1401  009A                     	;# 
  1402  009B                     	;# 
  1403  009B                     	;# 
  1404  009C                     	;# 
  1405  009D                     	;# 
  1406  009E                     	;# 
  1407  010C                     	;# 
  1408  010D                     	;# 
  1409  010E                     	;# 
  1410  0116                     	;# 
  1411  0117                     	;# 
  1412  011D                     	;# 
  1413  018C                     	;# 
  1414  018D                     	;# 
  1415  018E                     	;# 
  1416  0191                     	;# 
  1417  0191                     	;# 
  1418  0192                     	;# 
  1419  0193                     	;# 
  1420  0193                     	;# 
  1421  0194                     	;# 
  1422  0195                     	;# 
  1423  0196                     	;# 
  1424  0197                     	;# 
  1425  0199                     	;# 
  1426  019A                     	;# 
  1427  019B                     	;# 
  1428  019B                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019C                     	;# 
  1432  019C                     	;# 
  1433  019D                     	;# 
  1434  019E                     	;# 
  1435  019F                     	;# 
  1436  020D                     	;# 
  1437  0210                     	;# 
  1438  0211                     	;# 
  1439  0211                     	;# 
  1440  0212                     	;# 
  1441  0212                     	;# 
  1442  0213                     	;# 
  1443  0213                     	;# 
  1444  0214                     	;# 
  1445  0214                     	;# 
  1446  0215                     	;# 
  1447  0215                     	;# 
  1448  0215                     	;# 
  1449  0216                     	;# 
  1450  0216                     	;# 
  1451  0217                     	;# 
  1452  0217                     	;# 
  1453  0291                     	;# 
  1454  0291                     	;# 
  1455  0292                     	;# 
  1456  0293                     	;# 
  1457  0298                     	;# 
  1458  0298                     	;# 
  1459  0299                     	;# 
  1460  029A                     	;# 
  1461  0394                     	;# 
  1462  0395                     	;# 
  1463  0396                     	;# 
  1464  0FE4                     	;# 
  1465  0FE5                     	;# 
  1466  0FE6                     	;# 
  1467  0FE7                     	;# 
  1468  0FE8                     	;# 
  1469  0FE9                     	;# 
  1470  0FEA                     	;# 
  1471  0FEB                     	;# 
  1472  0FED                     	;# 
  1473  0FEE                     	;# 
  1474  0FEF                     	;# 
  1475  0000                     	;# 
  1476  0001                     	;# 
  1477  0002                     	;# 
  1478  0003                     	;# 
  1479  0004                     	;# 
  1480  0005                     	;# 
  1481  0006                     	;# 
  1482  0007                     	;# 
  1483  0008                     	;# 
  1484  0009                     	;# 
  1485  000A                     	;# 
  1486  000B                     	;# 
  1487  000C                     	;# 
  1488  000D                     	;# 
  1489  000E                     	;# 
  1490  0010                     	;# 
  1491  0011                     	;# 
  1492  0012                     	;# 
  1493  0015                     	;# 
  1494  0016                     	;# 
  1495  0016                     	;# 
  1496  0017                     	;# 
  1497  0018                     	;# 
  1498  0019                     	;# 
  1499  001A                     	;# 
  1500  001B                     	;# 
  1501  001C                     	;# 
  1502  008C                     	;# 
  1503  008D                     	;# 
  1504  008E                     	;# 
  1505  0090                     	;# 
  1506  0091                     	;# 
  1507  0092                     	;# 
  1508  0095                     	;# 
  1509  0096                     	;# 
  1510  0097                     	;# 
  1511  0099                     	;# 
  1512  009A                     	;# 
  1513  009B                     	;# 
  1514  009B                     	;# 
  1515  009C                     	;# 
  1516  009D                     	;# 
  1517  009E                     	;# 
  1518  010C                     	;# 
  1519  010D                     	;# 
  1520  010E                     	;# 
  1521  0116                     	;# 
  1522  0117                     	;# 
  1523  011D                     	;# 
  1524  018C                     	;# 
  1525  018D                     	;# 
  1526  018E                     	;# 
  1527  0191                     	;# 
  1528  0191                     	;# 
  1529  0192                     	;# 
  1530  0193                     	;# 
  1531  0193                     	;# 
  1532  0194                     	;# 
  1533  0195                     	;# 
  1534  0196                     	;# 
  1535  0197                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019B                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019C                     	;# 
  1543  019C                     	;# 
  1544  019D                     	;# 
  1545  019E                     	;# 
  1546  019F                     	;# 
  1547  020D                     	;# 
  1548  0210                     	;# 
  1549  0211                     	;# 
  1550  0211                     	;# 
  1551  0212                     	;# 
  1552  0212                     	;# 
  1553  0213                     	;# 
  1554  0213                     	;# 
  1555  0214                     	;# 
  1556  0214                     	;# 
  1557  0215                     	;# 
  1558  0215                     	;# 
  1559  0215                     	;# 
  1560  0216                     	;# 
  1561  0216                     	;# 
  1562  0217                     	;# 
  1563  0217                     	;# 
  1564  0291                     	;# 
  1565  0291                     	;# 
  1566  0292                     	;# 
  1567  0293                     	;# 
  1568  0298                     	;# 
  1569  0298                     	;# 
  1570  0299                     	;# 
  1571  029A                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  0FE4                     	;# 
  1576  0FE5                     	;# 
  1577  0FE6                     	;# 
  1578  0FE7                     	;# 
  1579  0FE8                     	;# 
  1580  0FE9                     	;# 
  1581  0FEA                     	;# 
  1582  0FEB                     	;# 
  1583  0FED                     	;# 
  1584  0FEE                     	;# 
  1585  0FEF                     	;# 
  1586  0000                     	;# 
  1587  0001                     	;# 
  1588  0002                     	;# 
  1589  0003                     	;# 
  1590  0004                     	;# 
  1591  0005                     	;# 
  1592  0006                     	;# 
  1593  0007                     	;# 
  1594  0008                     	;# 
  1595  0009                     	;# 
  1596  000A                     	;# 
  1597  000B                     	;# 
  1598  000C                     	;# 
  1599  000D                     	;# 
  1600  000E                     	;# 
  1601  0010                     	;# 
  1602  0011                     	;# 
  1603  0012                     	;# 
  1604  0015                     	;# 
  1605  0016                     	;# 
  1606  0016                     	;# 
  1607  0017                     	;# 
  1608  0018                     	;# 
  1609  0019                     	;# 
  1610  001A                     	;# 
  1611  001B                     	;# 
  1612  001C                     	;# 
  1613  008C                     	;# 
  1614  008D                     	;# 
  1615  008E                     	;# 
  1616  0090                     	;# 
  1617  0091                     	;# 
  1618  0092                     	;# 
  1619  0095                     	;# 
  1620  0096                     	;# 
  1621  0097                     	;# 
  1622  0099                     	;# 
  1623  009A                     	;# 
  1624  009B                     	;# 
  1625  009B                     	;# 
  1626  009C                     	;# 
  1627  009D                     	;# 
  1628  009E                     	;# 
  1629  010C                     	;# 
  1630  010D                     	;# 
  1631  010E                     	;# 
  1632  0116                     	;# 
  1633  0117                     	;# 
  1634  011D                     	;# 
  1635  018C                     	;# 
  1636  018D                     	;# 
  1637  018E                     	;# 
  1638  0191                     	;# 
  1639  0191                     	;# 
  1640  0192                     	;# 
  1641  0193                     	;# 
  1642  0193                     	;# 
  1643  0194                     	;# 
  1644  0195                     	;# 
  1645  0196                     	;# 
  1646  0197                     	;# 
  1647  0199                     	;# 
  1648  019A                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019D                     	;# 
  1656  019E                     	;# 
  1657  019F                     	;# 
  1658  020D                     	;# 
  1659  0210                     	;# 
  1660  0211                     	;# 
  1661  0211                     	;# 
  1662  0212                     	;# 
  1663  0212                     	;# 
  1664  0213                     	;# 
  1665  0213                     	;# 
  1666  0214                     	;# 
  1667  0214                     	;# 
  1668  0215                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0216                     	;# 
  1672  0216                     	;# 
  1673  0217                     	;# 
  1674  0217                     	;# 
  1675  0291                     	;# 
  1676  0291                     	;# 
  1677  0292                     	;# 
  1678  0293                     	;# 
  1679  0298                     	;# 
  1680  0298                     	;# 
  1681  0299                     	;# 
  1682  029A                     	;# 
  1683  0394                     	;# 
  1684  0395                     	;# 
  1685  0396                     	;# 
  1686  0FE4                     	;# 
  1687  0FE5                     	;# 
  1688  0FE6                     	;# 
  1689  0FE7                     	;# 
  1690  0FE8                     	;# 
  1691  0FE9                     	;# 
  1692  0FEA                     	;# 
  1693  0FEB                     	;# 
  1694  0FED                     	;# 
  1695  0FEE                     	;# 
  1696  0FEF                     	;# 
  1697  0000                     	;# 
  1698  0001                     	;# 
  1699  0002                     	;# 
  1700  0003                     	;# 
  1701  0004                     	;# 
  1702  0005                     	;# 
  1703  0006                     	;# 
  1704  0007                     	;# 
  1705  0008                     	;# 
  1706  0009                     	;# 
  1707  000A                     	;# 
  1708  000B                     	;# 
  1709  000C                     	;# 
  1710  000D                     	;# 
  1711  000E                     	;# 
  1712  0010                     	;# 
  1713  0011                     	;# 
  1714  0012                     	;# 
  1715  0015                     	;# 
  1716  0016                     	;# 
  1717  0016                     	;# 
  1718  0017                     	;# 
  1719  0018                     	;# 
  1720  0019                     	;# 
  1721  001A                     	;# 
  1722  001B                     	;# 
  1723  001C                     	;# 
  1724  008C                     	;# 
  1725  008D                     	;# 
  1726  008E                     	;# 
  1727  0090                     	;# 
  1728  0091                     	;# 
  1729  0092                     	;# 
  1730  0095                     	;# 
  1731  0096                     	;# 
  1732  0097                     	;# 
  1733  0099                     	;# 
  1734  009A                     	;# 
  1735  009B                     	;# 
  1736  009B                     	;# 
  1737  009C                     	;# 
  1738  009D                     	;# 
  1739  009E                     	;# 
  1740  010C                     	;# 
  1741  010D                     	;# 
  1742  010E                     	;# 
  1743  0116                     	;# 
  1744  0117                     	;# 
  1745  011D                     	;# 
  1746  018C                     	;# 
  1747  018D                     	;# 
  1748  018E                     	;# 
  1749  0191                     	;# 
  1750  0191                     	;# 
  1751  0192                     	;# 
  1752  0193                     	;# 
  1753  0193                     	;# 
  1754  0194                     	;# 
  1755  0195                     	;# 
  1756  0196                     	;# 
  1757  0197                     	;# 
  1758  0199                     	;# 
  1759  019A                     	;# 
  1760  019B                     	;# 
  1761  019B                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019C                     	;# 
  1765  019C                     	;# 
  1766  019D                     	;# 
  1767  019E                     	;# 
  1768  019F                     	;# 
  1769  020D                     	;# 
  1770  0210                     	;# 
  1771  0211                     	;# 
  1772  0211                     	;# 
  1773  0212                     	;# 
  1774  0212                     	;# 
  1775  0213                     	;# 
  1776  0213                     	;# 
  1777  0214                     	;# 
  1778  0214                     	;# 
  1779  0215                     	;# 
  1780  0215                     	;# 
  1781  0215                     	;# 
  1782  0216                     	;# 
  1783  0216                     	;# 
  1784  0217                     	;# 
  1785  0217                     	;# 
  1786  0291                     	;# 
  1787  0291                     	;# 
  1788  0292                     	;# 
  1789  0293                     	;# 
  1790  0298                     	;# 
  1791  0298                     	;# 
  1792  0299                     	;# 
  1793  029A                     	;# 
  1794  0394                     	;# 
  1795  0395                     	;# 
  1796  0396                     	;# 
  1797  0FE4                     	;# 
  1798  0FE5                     	;# 
  1799  0FE6                     	;# 
  1800  0FE7                     	;# 
  1801  0FE8                     	;# 
  1802  0FE9                     	;# 
  1803  0FEA                     	;# 
  1804  0FEB                     	;# 
  1805  0FED                     	;# 
  1806  0FEE                     	;# 
  1807  0FEF                     	;# 
  1808  0000                     	;# 
  1809  0001                     	;# 
  1810  0002                     	;# 
  1811  0003                     	;# 
  1812  0004                     	;# 
  1813  0005                     	;# 
  1814  0006                     	;# 
  1815  0007                     	;# 
  1816  0008                     	;# 
  1817  0009                     	;# 
  1818  000A                     	;# 
  1819  000B                     	;# 
  1820  000C                     	;# 
  1821  000D                     	;# 
  1822  000E                     	;# 
  1823  0010                     	;# 
  1824  0011                     	;# 
  1825  0012                     	;# 
  1826  0015                     	;# 
  1827  0016                     	;# 
  1828  0016                     	;# 
  1829  0017                     	;# 
  1830  0018                     	;# 
  1831  0019                     	;# 
  1832  001A                     	;# 
  1833  001B                     	;# 
  1834  001C                     	;# 
  1835  008C                     	;# 
  1836  008D                     	;# 
  1837  008E                     	;# 
  1838  0090                     	;# 
  1839  0091                     	;# 
  1840  0092                     	;# 
  1841  0095                     	;# 
  1842  0096                     	;# 
  1843  0097                     	;# 
  1844  0099                     	;# 
  1845  009A                     	;# 
  1846  009B                     	;# 
  1847  009B                     	;# 
  1848  009C                     	;# 
  1849  009D                     	;# 
  1850  009E                     	;# 
  1851  010C                     	;# 
  1852  010D                     	;# 
  1853  010E                     	;# 
  1854  0116                     	;# 
  1855  0117                     	;# 
  1856  011D                     	;# 
  1857  018C                     	;# 
  1858  018D                     	;# 
  1859  018E                     	;# 
  1860  0191                     	;# 
  1861  0191                     	;# 
  1862  0192                     	;# 
  1863  0193                     	;# 
  1864  0193                     	;# 
  1865  0194                     	;# 
  1866  0195                     	;# 
  1867  0196                     	;# 
  1868  0197                     	;# 
  1869  0199                     	;# 
  1870  019A                     	;# 
  1871  019B                     	;# 
  1872  019B                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019C                     	;# 
  1876  019C                     	;# 
  1877  019D                     	;# 
  1878  019E                     	;# 
  1879  019F                     	;# 
  1880  020D                     	;# 
  1881  0210                     	;# 
  1882  0211                     	;# 
  1883  0211                     	;# 
  1884  0212                     	;# 
  1885  0212                     	;# 
  1886  0213                     	;# 
  1887  0213                     	;# 
  1888  0214                     	;# 
  1889  0214                     	;# 
  1890  0215                     	;# 
  1891  0215                     	;# 
  1892  0215                     	;# 
  1893  0216                     	;# 
  1894  0216                     	;# 
  1895  0217                     	;# 
  1896  0217                     	;# 
  1897  0291                     	;# 
  1898  0291                     	;# 
  1899  0292                     	;# 
  1900  0293                     	;# 
  1901  0298                     	;# 
  1902  0298                     	;# 
  1903  0299                     	;# 
  1904  029A                     	;# 
  1905  0394                     	;# 
  1906  0395                     	;# 
  1907  0396                     	;# 
  1908  0FE4                     	;# 
  1909  0FE5                     	;# 
  1910  0FE6                     	;# 
  1911  0FE7                     	;# 
  1912  0FE8                     	;# 
  1913  0FE9                     	;# 
  1914  0FEA                     	;# 
  1915  0FEB                     	;# 
  1916  0FED                     	;# 
  1917  0FEE                     	;# 
  1918  0FEF                     	;# 
  1919  0000                     	;# 
  1920  0001                     	;# 
  1921  0002                     	;# 
  1922  0003                     	;# 
  1923  0004                     	;# 
  1924  0005                     	;# 
  1925  0006                     	;# 
  1926  0007                     	;# 
  1927  0008                     	;# 
  1928  0009                     	;# 
  1929  000A                     	;# 
  1930  000B                     	;# 
  1931  000C                     	;# 
  1932  000D                     	;# 
  1933  000E                     	;# 
  1934  0010                     	;# 
  1935  0011                     	;# 
  1936  0012                     	;# 
  1937  0015                     	;# 
  1938  0016                     	;# 
  1939  0016                     	;# 
  1940  0017                     	;# 
  1941  0018                     	;# 
  1942  0019                     	;# 
  1943  001A                     	;# 
  1944  001B                     	;# 
  1945  001C                     	;# 
  1946  008C                     	;# 
  1947  008D                     	;# 
  1948  008E                     	;# 
  1949  0090                     	;# 
  1950  0091                     	;# 
  1951  0092                     	;# 
  1952  0095                     	;# 
  1953  0096                     	;# 
  1954  0097                     	;# 
  1955  0099                     	;# 
  1956  009A                     	;# 
  1957  009B                     	;# 
  1958  009B                     	;# 
  1959  009C                     	;# 
  1960  009D                     	;# 
  1961  009E                     	;# 
  1962  010C                     	;# 
  1963  010D                     	;# 
  1964  010E                     	;# 
  1965  0116                     	;# 
  1966  0117                     	;# 
  1967  011D                     	;# 
  1968  018C                     	;# 
  1969  018D                     	;# 
  1970  018E                     	;# 
  1971  0191                     	;# 
  1972  0191                     	;# 
  1973  0192                     	;# 
  1974  0193                     	;# 
  1975  0193                     	;# 
  1976  0194                     	;# 
  1977  0195                     	;# 
  1978  0196                     	;# 
  1979  0197                     	;# 
  1980  0199                     	;# 
  1981  019A                     	;# 
  1982  019B                     	;# 
  1983  019B                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019C                     	;# 
  1987  019C                     	;# 
  1988  019D                     	;# 
  1989  019E                     	;# 
  1990  019F                     	;# 
  1991  020D                     	;# 
  1992  0210                     	;# 
  1993  0211                     	;# 
  1994  0211                     	;# 
  1995  0212                     	;# 
  1996  0212                     	;# 
  1997  0213                     	;# 
  1998  0213                     	;# 
  1999  0214                     	;# 
  2000  0214                     	;# 
  2001  0215                     	;# 
  2002  0215                     	;# 
  2003  0215                     	;# 
  2004  0216                     	;# 
  2005  0216                     	;# 
  2006  0217                     	;# 
  2007  0217                     	;# 
  2008  0291                     	;# 
  2009  0291                     	;# 
  2010  0292                     	;# 
  2011  0293                     	;# 
  2012  0298                     	;# 
  2013  0298                     	;# 
  2014  0299                     	;# 
  2015  029A                     	;# 
  2016  0394                     	;# 
  2017  0395                     	;# 
  2018  0396                     	;# 
  2019  0FE4                     	;# 
  2020  0FE5                     	;# 
  2021  0FE6                     	;# 
  2022  0FE7                     	;# 
  2023  0FE8                     	;# 
  2024  0FE9                     	;# 
  2025  0FEA                     	;# 
  2026  0FEB                     	;# 
  2027  0FED                     	;# 
  2028  0FEE                     	;# 
  2029  0FEF                     	;# 
  2030                           
  2031                           	psect	idataBANK4
  2032  1F2E                     __pidataBANK4:	
  2033                           
  2034                           ;initializer for __product
  2035  1F2E  3463               	retlw	99
  2036  1F2F  3402               	retlw	2
  2037  1F30  3400               	retlw	0
  2038  1F31  3400               	retlw	0
  2039  1F32  3400               	retlw	0
  2040  1F33  3400               	retlw	0
  2041  1F34  3400               	retlw	0
  2042  1F35  3400               	retlw	0
  2043  1F36  3400               	retlw	0
  2044  1F37  3400               	retlw	0
  2045  1F38  3400               	retlw	0
  2046  1F39  3400               	retlw	0
  2047  1F3A  34FF               	retlw	255
  2048  1F3B  34FF               	retlw	255
  2049  1F3C  34FF               	retlw	255
  2050  1F3D  3400               	retlw	0
  2051  1F3E  3400               	retlw	0
  2052  1F3F  3400               	retlw	0
  2053  1F40  3400               	retlw	0
  2054  1F41  3400               	retlw	0
  2055  1F42  3400               	retlw	0
  2056  1F43  3400               	retlw	0
  2057  1F44  3400               	retlw	0
  2058  1F45  3400               	retlw	0
  2059  1F46  3400               	retlw	0
  2060  1F47  3400               	retlw	0
  2061  1F48  3400               	retlw	0
  2062  1F49  3400               	retlw	0
  2063  1F4A  3400               	retlw	0
  2064  1F4B  3400               	retlw	0
  2065  1F4C  3400               	retlw	0
  2066  1F4D  3400               	retlw	0
  2067                           
  2068                           	psect	stringtext
  2069  1800                     __pstringtext:	
  2070  1800                     _CC2500_registers_address:	
  2071  1800  3403               	retlw	3
  2072  1801  3416               	retlw	22
  2073  1802  3417               	retlw	23
  2074  1803  341E               	retlw	30
  2075  1804  341F               	retlw	31
  2076  1805  3420               	retlw	32
  2077  1806  342A               	retlw	42
  2078  1807  342B               	retlw	43
  2079  1808  340B               	retlw	11
  2080  1809  340C               	retlw	12
  2081  180A  340D               	retlw	13
  2082  180B  340E               	retlw	14
  2083  180C  340F               	retlw	15
  2084  180D  3410               	retlw	16
  2085  180E  3411               	retlw	17
  2086  180F  3412               	retlw	18
  2087  1810  3413               	retlw	19
  2088  1811  3414               	retlw	20
  2089  1812  340A               	retlw	10
  2090  1813  3415               	retlw	21
  2091  1814  3421               	retlw	33
  2092  1815  3422               	retlw	34
  2093  1816  3418               	retlw	24
  2094  1817  3419               	retlw	25
  2095  1818  341A               	retlw	26
  2096  1819  341B               	retlw	27
  2097  181A  341C               	retlw	28
  2098  181B  341D               	retlw	29
  2099  181C  3423               	retlw	35
  2100  181D  3424               	retlw	36
  2101  181E  3425               	retlw	37
  2102  181F  3426               	retlw	38
  2103  1820  3429               	retlw	41
  2104  1821  342C               	retlw	44
  2105  1822  342D               	retlw	45
  2106  1823  342E               	retlw	46
  2107  1824  3400               	retlw	0
  2108  1825  3401               	retlw	1
  2109  1826  3402               	retlw	2
  2110  1827  3407               	retlw	7
  2111  1828  3408               	retlw	8
  2112  1829  3409               	retlw	9
  2113  182A  3406               	retlw	6
  2114  182B  3404               	retlw	4
  2115  182C  3405               	retlw	5
  2116  182D  3427               	retlw	39
  2117  182E  3428               	retlw	40
  2118  182F                     __end_of_CC2500_registers_address:	
  2119  182F                     _CC2500_rfSettings:	
  2120  182F  3407               	retlw	7
  2121  1830  3407               	retlw	7
  2122  1831  3430               	retlw	48
  2123  1832  3487               	retlw	135
  2124  1833  346B               	retlw	107
  2125  1834  34F8               	retlw	248
  2126  1835  347F               	retlw	127
  2127  1836  343F               	retlw	63
  2128  1837  3409               	retlw	9
  2129  1838  3400               	retlw	0
  2130  1839  345C               	retlw	92
  2131  183A  34A7               	retlw	167
  2132  183B  3462               	retlw	98
  2133  183C  3486               	retlw	134
  2134  183D  3483               	retlw	131
  2135  183E  3403               	retlw	3
  2136  183F  3422               	retlw	34
  2137  1840  34F8               	retlw	248
  2138  1841  3400               	retlw	0
  2139  1842  3444               	retlw	68
  2140  1843  34B6               	retlw	182
  2141  1844  3410               	retlw	16
  2142  1845  3418               	retlw	24
  2143  1846  341D               	retlw	29
  2144  1847  341C               	retlw	28
  2145  1848  34C7               	retlw	199
  2146  1849  3400               	retlw	0
  2147  184A  34B2               	retlw	178
  2148  184B  34EA               	retlw	234
  2149  184C  340A               	retlw	10
  2150  184D  3400               	retlw	0
  2151  184E  3411               	retlw	17
  2152  184F  3459               	retlw	89
  2153  1850  3488               	retlw	136
  2154  1851  3431               	retlw	49
  2155  1852  340B               	retlw	11
  2156  1853  342F               	retlw	47
  2157  1854  342E               	retlw	46
  2158  1855  3406               	retlw	6
  2159  1856  3404               	retlw	4
  2160  1857  3405               	retlw	5
  2161  1858  3400               	retlw	0
  2162  1859  3430               	retlw	48
  2163  185A  34D3               	retlw	211
  2164  185B  3491               	retlw	145
  2165  185C  3441               	retlw	65
  2166  185D  3400               	retlw	0
  2167  185E                     __end_of_CC2500_rfSettings:	
  2168  185E                     _CC2500_patable_vaule:	
  2169  185E  34FE               	retlw	254
  2170  185F  34FE               	retlw	254
  2171  1860  34FE               	retlw	254
  2172  1861  34FE               	retlw	254
  2173  1862  34FE               	retlw	254
  2174  1863  34FE               	retlw	254
  2175  1864  34FE               	retlw	254
  2176  1865  34FE               	retlw	254
  2177  1866                     __end_of_CC2500_patable_vaule:	
  2178                           
  2179                           	psect	nvCOMMON
  2180  007D                     __pnvCOMMON:	
  2181  007D                     _product:	
  2182  007D                     	ds	1
  2183                           
  2184                           	psect	nvBANK1
  2185  00E5                     __pnvBANK1:	
  2186  00E5                     _Timer0:	
  2187  00E5                     	ds	1
  2188  00E6                     _WDT:	
  2189  00E6                     	ds	1
  2190  00E7                     _myMain:	
  2191  00E7                     	ds	1
  2192  00E8                     _Memory:	
  2193  00E8                     	ds	1
  2194  000C                     _PORTA	set	12
  2195  000D                     _PORTB	set	13
  2196  000E                     _PORTC	set	14
  2197  0015                     _TMR0	set	21
  2198  005F                     _GIE	set	95
  2199  005C                     _INTE	set	92
  2200  0059                     _INTF	set	89
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006B                     _RB3	set	107
  2212  006C                     _RB4	set	108
  2213  006D                     _RB5	set	109
  2214  0070                     _RC0	set	112
  2215  0071                     _RC1	set	113
  2216  0072                     _RC2	set	114
  2217  0074                     _RC4	set	116
  2218  0075                     _RC5	set	117
  2219  0076                     _RC6	set	118
  2220  0077                     _RC7	set	119
  2221  005D                     _TMR0IE	set	93
  2222  005A                     _TMR0IF	set	90
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0095                     _OPTION_REG	set	149
  2228  0099                     _OSCCON	set	153
  2229  008C                     _TRISA	set	140
  2230  008D                     _TRISB	set	141
  2231  008E                     _TRISC	set	142
  2232  0097                     _WDTCON	set	151
  2233  04E9                     _GO_nDONE	set	1257
  2234  0117                     _FVRCON	set	279
  2235  010C                     _LATA	set	268
  2236  010D                     _LATB	set	269
  2237  010E                     _LATC	set	270
  2238  018C                     _ANSELA	set	396
  2239  018D                     _ANSELB	set	397
  2240  018E                     _ANSELC	set	398
  2241  0192                     _PMADRH	set	402
  2242  0191                     _PMADRL	set	401
  2243  0196                     _PMCON2	set	406
  2244  0194                     _PMDATH	set	404
  2245  0193                     _PMDATL	set	403
  2246  0CAE                     _CFGS	set	3246
  2247  0CAC                     _FREE	set	3244
  2248  0CAD                     _LWLO	set	3245
  2249  0CA8                     _RD	set	3240
  2250  0CA9                     _WR	set	3241
  2251  0CAA                     _WREN	set	3242
  2252  1068                     _WPUB0	set	4200
  2253  1069                     _WPUB1	set	4201
  2254  106A                     _WPUB2	set	4202
  2255  0396                     _IOCBF	set	918
  2256  0395                     _IOCBN	set	917
  2257  0394                     _IOCBP	set	916
  2258  1CB2                     _IOCBF2	set	7346
  2259                           
  2260                           ; #config settings
  2261  0000                     
  2262                           	psect	cinit
  2263  0018                     start_initialization:	
  2264  0018                     __initialization:	
  2265                           
  2266                           ; Clear objects allocated to BITCOMMON
  2267  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2268                           
  2269                           ; Clear objects allocated to COMMON
  2270  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2271  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2272  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2273  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK1
  2276  001D  30A0               	movlw	low __pbssBANK1
  2277  001E  0084               	movwf	4
  2278  001F  3000               	movlw	high __pbssBANK1
  2279  0020  0085               	movwf	5
  2280  0021  3045               	movlw	69
  2281  0022  319B  230A  3180   	fcall	clear_ram0
  2282                           
  2283                           ; Clear objects allocated to BANK2
  2284  0025  3020               	movlw	low __pbssBANK2
  2285  0026  0084               	movwf	4
  2286  0027  3001               	movlw	high __pbssBANK2
  2287  0028  0085               	movwf	5
  2288  0029  304A               	movlw	74
  2289  002A  319B  230A  3180   	fcall	clear_ram0
  2290                           
  2291                           ; Clear objects allocated to BANK3
  2292  002D  30A0               	movlw	low __pbssBANK3
  2293  002E  0084               	movwf	4
  2294  002F  3001               	movlw	high __pbssBANK3
  2295  0030  0085               	movwf	5
  2296  0031  3034               	movlw	52
  2297  0032  319B  230A  3180   	fcall	clear_ram0
  2298                           
  2299                           ; Clear objects allocated to BANK4
  2300  0035  3020               	movlw	low __pbssBANK4
  2301  0036  0084               	movwf	4
  2302  0037  3002               	movlw	high __pbssBANK4
  2303  0038  0085               	movwf	5
  2304  0039  3025               	movlw	37
  2305  003A  319B  230A  3180   	fcall	clear_ram0
  2306                           
  2307                           ; Initialize objects allocated to BANK4
  2308  003D  302E               	movlw	low __pidataBANK4
  2309  003E  0084               	movwf	4
  2310  003F  309F               	movlw	(high __pidataBANK4)| (0+128)
  2311  0040  0085               	movwf	5
  2312  0041  3045               	movlw	low __pdataBANK4
  2313  0042  0086               	movwf	6
  2314  0043  3002               	movlw	high __pdataBANK4
  2315  0044  0087               	movwf	7
  2316  0045  3020               	movlw	32
  2317  0046  319B  2304         	fcall	init_ram
  2318  0048                     end_of_initialization:	
  2319                           ;End of C runtime variable initialization code
  2320                           
  2321  0048                     __end_of__initialization:	
  2322  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2323  0049  0020               	movlb	0
  2324  004A  3194  2CC8         	ljmp	_main	;jump to C main() function
  2325                           
  2326                           	psect	bitbssCOMMON
  2327  03E0                     __pbitbssCOMMON:	
  2328  03E0                     _Receive_OK:	
  2329  03E0                     	ds	1
  2330  03E1                     _Transceive_OK:	
  2331  03E1                     	ds	1
  2332                           
  2333                           	psect	bssCOMMON
  2334  0078                     __pbssCOMMON:	
  2335  0078                     _DimmerLights:	
  2336  0078                     	ds	1
  2337  0079                     _DimmerLightsIntr:	
  2338  0079                     	ds	1
  2339  007A                     _RF:	
  2340  007A                     	ds	1
  2341  007B                     _Sw:	
  2342  007B                     	ds	1
  2343                           
  2344                           	psect	bssBANK1
  2345  00A0                     __pbssBANK1:	
  2346  00A0                     _RF_Data:	
  2347  00A0                     	ds	21
  2348  00B5                     _RF_Count:	
  2349  00B5                     	ds	2
  2350  00B7                     _Buz:	
  2351  00B7                     	ds	1
  2352  00B8                     _CRC:	
  2353  00B8                     	ds	1
  2354  00B9                     _Dimmer:	
  2355  00B9                     	ds	1
  2356  00BA                     _DimmerLights11:	
  2357  00BA                     	ds	1
  2358  00BB                     _DimmerLights22:	
  2359  00BB                     	ds	1
  2360  00BC                     _DimmerLights33:	
  2361  00BC                     	ds	1
  2362  00BD                     _DimmerLightsIntrIOC:	
  2363  00BD                     	ds	1
  2364  00BE                     _LED:	
  2365  00BE                     	ds	1
  2366  00BF                     _RFSW:	
  2367  00BF                     	ds	1
  2368  00C0                     _RSSI:	
  2369  00C0                     	ds	1
  2370  00C1                     _Rx_Length:	
  2371  00C1                     	ds	1
  2372  00C2                     _SPI0Buffer:	
  2373  00C2                     	ds	1
  2374  00C3                     _Temp:	
  2375  00C3                     	ds	1
  2376  00C4                     _Tx_Length:	
  2377  00C4                     	ds	1
  2378  00C5                     _r_address:	
  2379  00C5                     	ds	1
  2380  00C6                     _r_data:	
  2381  00C6                     	ds	1
  2382  00C7                     _s_data:	
  2383  00C7                     	ds	1
  2384  00C8                     _RF1:	
  2385  00C8                     	ds	5
  2386  00CD                     _VarErrLED:	
  2387  00CD                     	ds	4
  2388  00D1                     _VarLED1:	
  2389  00D1                     	ds	4
  2390  00D5                     _VarLED2:	
  2391  00D5                     	ds	4
  2392  00D9                     _VarLED3:	
  2393  00D9                     	ds	4
  2394  00DD                     _Dimmer1:	
  2395  00DD                     	ds	3
  2396  00E0                     __WDT:	
  2397  00E0                     	ds	2
  2398  00E2                     _RFSW1:	
  2399  00E2                     	ds	1
  2400  00E3                     _RFSW2:	
  2401  00E3                     	ds	1
  2402  00E4                     _RFSW3:	
  2403  00E4                     	ds	1
  2404                           
  2405                           	psect	bssBANK2
  2406  0120                     __pbssBANK2:	
  2407  0120                     _DimmerLights1:	
  2408  0120                     	ds	15
  2409  012F                     _DimmerLights2:	
  2410  012F                     	ds	15
  2411  013E                     _DimmerLights3:	
  2412  013E                     	ds	15
  2413  014D                     _Buz1:	
  2414  014D                     	ds	12
  2415  0159                     _Sw1:	
  2416  0159                     	ds	9
  2417  0162                     _VarTimer0:	
  2418  0162                     	ds	8
  2419                           
  2420                           	psect	bssBANK3
  2421  01A0                     __pbssBANK3:	
  2422  01A0                     __myMain:	
  2423  01A0                     	ds	20
  2424  01B4                     _Temp1:	
  2425  01B4                     	ds	14
  2426  01C2                     _Sw2:	
  2427  01C2                     	ds	9
  2428  01CB                     _Sw3:	
  2429  01CB                     	ds	9
  2430                           
  2431                           	psect	bssBANK4
  2432  0220                     __pbssBANK4:	
  2433  0220                     _VarMemory:	
  2434  0220                     	ds	37
  2435                           
  2436                           	psect	dataBANK4
  2437  0245                     __pdataBANK4:	
  2438  0245                     __product:	
  2439  0245                     	ds	32
  2440                           
  2441                           	psect	clrtext
  2442  1B0A                     clear_ram0:	
  2443                           ;	Called with FSR0 containing the base address, and
  2444                           ;	WREG with the size to clear
  2445                           
  2446  1B0A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2447  1B0B                     clrloop0:	
  2448  1B0B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2449  1B0C  3101               	addfsr 0,1
  2450  1B0D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2451  1B0E  2B0B               	goto	clrloop0	;have we reached the end yet?
  2452  1B0F  3400               	retlw	0	;all done for this memory range, return
  2453                           
  2454                           	psect	inittext
  2455  1B04                     init_ram:	
  2456  1B04  00FE               	movwf	126
  2457  1B05                     initloop:	
  2458  1B05  0012               	moviw fsr0++
  2459  1B06  001E               	movwi fsr1++
  2460  1B07  0BFE               	decfsz	126,f
  2461  1B08  2B05               	goto	initloop
  2462  1B09  3400               	retlw	0
  2463                           
  2464                           	psect	cstackCOMMON
  2465  0070                     __pcstackCOMMON:	
  2466  0070                     ?_CC2500_WriteByte:	
  2467  0070                     ?_CC2500_WriteCommand:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ReadStatus:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ReadByte:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_PowerRST:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_InitSetREG:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_InitPATable:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ClearTXFIFO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ClearRXFIFO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_FrequencyCabr:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_SIDLEMode:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_setDimmerLights_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_Dimmer_Initialization:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setMemory_GO:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setDimmerLights_Main:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setDimmerLights_ERROR:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setTxData:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setLED_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setLED_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_Fosc_Set:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_IO_Set:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_TMR0_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_ADC_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_INT_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_IOC_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_WDT_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_IOC_ISR:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_TMR0_ISR:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_INT_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Flash_Memory_Write:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_Flash_Memory_Modify:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_WDT_Clearing:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_myMain_Initialization:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_Temp_Initialization:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_Switch_Initialization:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_RF_Initialization:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_getTemp_AD:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_my_Main:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_my_TestPointCleared:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_Temp_Main:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_Switch_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_RF_Main:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setTemp_Enable:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setSw_Enable:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setTemp_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setTemp_Main:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setOverTemp_Exceptions:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setRF_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRF_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_RF_RxDisable:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_getRxData:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_setLog_Code:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_setControl_Lights_Table:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRFSW_Control:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setRFSW_AdjControl:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setRF_DimmerValue:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setSw_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setSw_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_Sw_DimmerOnFunc:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_Sw_DimmerAdjFunc:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_Sw_DimmerOffFunc:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Buzzer_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_Buzzer_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_TxData:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_RxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_CC2500_PowerOnInitial:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DimmerIntrIOCPointSelect:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ??_DimmerIntrIOCPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DimmerIntrPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ??_DimmerIntrPointSelect:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setDimmerLights_IntrControl:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLightsPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DimmerLights_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_DimmerLights_Close:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_DimmerLights_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_DimmerLights_Exceptions:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_AdjRF:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_LedPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_LED_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_LED_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Mcu_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_ISR:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_setDimmerReClock:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Unlock:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Flash_Memory_Erasing:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_WDT_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_RfPointSelect:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_RfSWPointSelect:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_TouchPower:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_SwPointSelect:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?i1_RfPointSelect:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ??i1_RfPointSelect:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_getDimmerLights_StatusFlag:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_getPercentValue:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0070                     ?_Flash_Memory_Read:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0070                     ?_setPercentValue:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0070                     setRF_Initialization@rf:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764                           
  2765                           ; 1 bytes @ 0x0
  2766  0070                     	ds	1
  2767  0071                     DimmerIntrIOCPointSelect@lights:	
  2768  0071                     DimmerIntrPointSelect@lights:	
  2769                           ; 1 bytes @ 0x1
  2770                           
  2771  0071                     i1RfPointSelect@rf:	
  2772                           ; 1 bytes @ 0x1
  2773                           
  2774                           
  2775                           ; 1 bytes @ 0x1
  2776  0071                     	ds	1
  2777  0072                     ?_setRF_ReceiveGO:	
  2778  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2779                           ; 0 bytes @ 0x2
  2780                           
  2781  0072                     ??_setDimmerLights_IntrControl:	
  2782                           ; 0 bytes @ 0x2
  2783                           
  2784  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2785                           ; 0 bytes @ 0x2
  2786                           
  2787  0072                     setRF_ReceiveGO@command:	
  2788                           ; 1 bytes @ 0x2
  2789                           
  2790                           
  2791                           ; 1 bytes @ 0x2
  2792  0072                     	ds	1
  2793  0073                     ??_IOC_ISR:	
  2794  0073                     ??_setRF_ReceiveGO:	
  2795                           ; 0 bytes @ 0x3
  2796                           
  2797  0073                     ??_setDimmerReClock:	
  2798                           ; 0 bytes @ 0x3
  2799                           
  2800  0073                     setRF_ReceiveGO@rf:	
  2801                           ; 0 bytes @ 0x3
  2802                           
  2803                           
  2804                           ; 1 bytes @ 0x3
  2805  0073                     	ds	1
  2806  0074                     ??_INT_ISR:	
  2807                           
  2808                           ; 0 bytes @ 0x4
  2809  0074                     	ds	2
  2810  0076                     setDimmerLights_IntrControl@lights:	
  2811                           
  2812                           ; 1 bytes @ 0x6
  2813  0076                     	ds	1
  2814  0077                     ??_TMR0_ISR:	
  2815  0077                     ??_ISR:	
  2816                           ; 0 bytes @ 0x7
  2817                           
  2818                           
  2819                           ; 0 bytes @ 0x7
  2820  0077                     	ds	1
  2821                           
  2822                           	psect	cstackBANK0
  2823  0020                     __pcstackBANK0:	
  2824  0020                     ??_CC2500_WriteByte:	
  2825  0020                     ??_CC2500_ReadByte:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ?_DelayTime_1us:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_Dimmer_Initialization:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_getDimmerLights_StatusFlag:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_setMemory_GO:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Fosc_Set:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_IO_Set:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_TMR0_Set:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_ADC_Set:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_INT_Set:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_IOC_Set:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_WDT_Set:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_Flash_Memory_Read:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_Flash_Memory_Write:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_WDT_Clearing:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_myMain_Initialization:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_my_TestPointCleared:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setTemp_Enable:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_setTemp_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_setRF_Initialization:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_Buzzer_Initialization:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_Buzzer_Main:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_DimmerLightsPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_LedPointSelect:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_Flash_Memory_Unlock:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Erasing:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_WDT_Main:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_RfPointSelect:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_RfSWPointSelect:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_TouchPower:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_SwPointSelect:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ?_getAD:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ?___awdiv:	
  2922                           ; 2 bytes @ 0x0
  2923                           
  2924  0020                     ?___ftpack:	
  2925                           ; 2 bytes @ 0x0
  2926                           
  2927  0020                     getAD@adcon1:	
  2928                           ; 3 bytes @ 0x0
  2929                           
  2930  0020                     setTemp_Enable@command:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0020                     DelayTime_1us@count:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0020                     ___awdiv@divisor:	
  2937                           ; 2 bytes @ 0x0
  2938                           
  2939  0020                     ___ftpack@arg:	
  2940                           ; 2 bytes @ 0x0
  2941                           
  2942                           
  2943                           ; 3 bytes @ 0x0
  2944  0020                     	ds	1
  2945  0021                     ??_Temp_Initialization:	
  2946  0021                     ??_RF_Initialization:	
  2947                           ; 0 bytes @ 0x1
  2948                           
  2949  0021                     ??_Mcu_Initialization:	
  2950                           ; 0 bytes @ 0x1
  2951                           
  2952  0021                     CC2500_WriteByte@loop_a:	
  2953                           ; 0 bytes @ 0x1
  2954                           
  2955  0021                     CC2500_ReadByte@loop_b:	
  2956                           ; 1 bytes @ 0x1
  2957                           
  2958  0021                     DimmerLightsPointSelect@lights:	
  2959                           ; 1 bytes @ 0x1
  2960                           
  2961  0021                     getDimmerLights_StatusFlag@Status:	
  2962                           ; 1 bytes @ 0x1
  2963                           
  2964  0021                     LedPointSelect@led:	
  2965                           ; 1 bytes @ 0x1
  2966                           
  2967  0021                     Flash_Memory_Read@i:	
  2968                           ; 1 bytes @ 0x1
  2969                           
  2970  0021                     Flash_Memory_Write@i:	
  2971                           ; 1 bytes @ 0x1
  2972                           
  2973  0021                     RfPointSelect@rf:	
  2974                           ; 1 bytes @ 0x1
  2975                           
  2976  0021                     RfSWPointSelect@sw:	
  2977                           ; 1 bytes @ 0x1
  2978                           
  2979  0021                     SwPointSelect@sw:	
  2980                           ; 1 bytes @ 0x1
  2981                           
  2982                           
  2983                           ; 1 bytes @ 0x1
  2984  0021                     	ds	1
  2985  0022                     ??_CC2500_WriteCommand:	
  2986  0022                     ??_CC2500_ReadStatus:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0022                     ??_DelayTime_1us:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0022                     ?_CC2500_WriteREG:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0022                     ??_setDimmerLights_Initialization:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0022                     ?_setDimmerLights_TriggerERROR:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0022                     ?_setLED:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0022                     ?_setSw_Status:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0022                     ?_setRFSW_Status:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0022                     ??_setTxData:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0022                     ??_setLED_Main:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0022                     ??_setSw_Enable:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0022                     ?_setRF_Enable:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0022                     ?_setDimmerLights_Switch:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0022                     ?_setDimmerLights_AdjGo:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0022                     ?_setDimmerLights_Trigger:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0022                     ?_setDimmerLights_TriggerAdj:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0022                     ?_setRF_Learn:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0022                     CC2500_WriteREG@value:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0022                     _getDimmerLights_StatusFlag$2065:	
  3041                           ; 1 bytes @ 0x2
  3042                           
  3043  0022                     setDimmerLights_TriggerERROR@command:	
  3044                           ; 1 bytes @ 0x2
  3045                           
  3046  0022                     setDimmerLights_Switch@command:	
  3047                           ; 1 bytes @ 0x2
  3048                           
  3049  0022                     setDimmerLights_AdjGo@command:	
  3050                           ; 1 bytes @ 0x2
  3051                           
  3052  0022                     setDimmerLights_Trigger@command:	
  3053                           ; 1 bytes @ 0x2
  3054                           
  3055  0022                     setDimmerLights_TriggerAdj@command:	
  3056                           ; 1 bytes @ 0x2
  3057                           
  3058  0022                     setLED@command:	
  3059                           ; 1 bytes @ 0x2
  3060                           
  3061  0022                     Flash_Memory_Read@address:	
  3062                           ; 1 bytes @ 0x2
  3063                           
  3064  0022                     setMemory_GO@command:	
  3065                           ; 1 bytes @ 0x2
  3066                           
  3067  0022                     setRF_Learn@command:	
  3068                           ; 1 bytes @ 0x2
  3069                           
  3070  0022                     setRF_Enable@command:	
  3071                           ; 1 bytes @ 0x2
  3072                           
  3073  0022                     setRFSW_Status@command:	
  3074                           ; 1 bytes @ 0x2
  3075                           
  3076  0022                     setSw_Enable@command:	
  3077                           ; 1 bytes @ 0x2
  3078                           
  3079  0022                     setSw_Status@command:	
  3080                           ; 1 bytes @ 0x2
  3081                           
  3082  0022                     DelayTime_1us@i:	
  3083                           ; 1 bytes @ 0x2
  3084                           
  3085  0022                     ___awdiv@dividend:	
  3086                           ; 2 bytes @ 0x2
  3087                           
  3088                           
  3089                           ; 2 bytes @ 0x2
  3090  0022                     	ds	1
  3091  0023                     ??_CC2500_WriteREG:	
  3092  0023                     ??_setDimmerLights_TriggerERROR:	
  3093                           ; 0 bytes @ 0x3
  3094                           
  3095  0023                     ??_setLED:	
  3096                           ; 0 bytes @ 0x3
  3097                           
  3098  0023                     ??_setSw_Status:	
  3099                           ; 0 bytes @ 0x3
  3100                           
  3101  0023                     ??_setRFSW_Status:	
  3102                           ; 0 bytes @ 0x3
  3103                           
  3104  0023                     ??_setRF_Enable:	
  3105                           ; 0 bytes @ 0x3
  3106                           
  3107  0023                     ??_DimmerLights_Close:	
  3108                           ; 0 bytes @ 0x3
  3109                           
  3110  0023                     ??_setDimmerLights_Switch:	
  3111                           ; 0 bytes @ 0x3
  3112                           
  3113  0023                     ??_setDimmerLights_AdjGo:	
  3114                           ; 0 bytes @ 0x3
  3115                           
  3116  0023                     ??_setDimmerLights_Trigger:	
  3117                           ; 0 bytes @ 0x3
  3118                           
  3119  0023                     ??_setDimmerLights_TriggerAdj:	
  3120                           ; 0 bytes @ 0x3
  3121                           
  3122  0023                     ??_getAD:	
  3123                           ; 0 bytes @ 0x3
  3124                           
  3125  0023                     ??_setRF_Learn:	
  3126                           ; 0 bytes @ 0x3
  3127                           
  3128  0023                     CC2500_WriteCommand@command:	
  3129                           ; 0 bytes @ 0x3
  3130                           
  3131  0023                     CC2500_ReadStatus@status_addr:	
  3132                           ; 1 bytes @ 0x3
  3133                           
  3134  0023                     setDimmerLights_Initialization@lights:	
  3135                           ; 1 bytes @ 0x3
  3136                           
  3137  0023                     setDimmerLights_TriggerERROR@lights:	
  3138                           ; 1 bytes @ 0x3
  3139                           
  3140  0023                     setDimmerLights_Switch@lights:	
  3141                           ; 1 bytes @ 0x3
  3142                           
  3143  0023                     setDimmerLights_AdjGo@lights:	
  3144                           ; 1 bytes @ 0x3
  3145                           
  3146  0023                     setDimmerLights_Trigger@lights:	
  3147                           ; 1 bytes @ 0x3
  3148                           
  3149  0023                     setDimmerLights_TriggerAdj@lights:	
  3150                           ; 1 bytes @ 0x3
  3151                           
  3152  0023                     setLED@led:	
  3153                           ; 1 bytes @ 0x3
  3154                           
  3155  0023                     getAD@adcon0:	
  3156                           ; 1 bytes @ 0x3
  3157                           
  3158  0023                     Flash_Memory_Read@ret:	
  3159                           ; 1 bytes @ 0x3
  3160                           
  3161  0023                     setRF_Learn@rf:	
  3162                           ; 1 bytes @ 0x3
  3163                           
  3164  0023                     setTxData@rf:	
  3165                           ; 1 bytes @ 0x3
  3166                           
  3167  0023                     setRF_Enable@rf:	
  3168                           ; 1 bytes @ 0x3
  3169                           
  3170  0023                     setRFSW_Status@sw:	
  3171                           ; 1 bytes @ 0x3
  3172                           
  3173  0023                     setSw_Status@sw:	
  3174                           ; 1 bytes @ 0x3
  3175                           
  3176  0023                     ___ftpack@exp:	
  3177                           ; 1 bytes @ 0x3
  3178                           
  3179                           
  3180                           ; 1 bytes @ 0x3
  3181  0023                     	ds	1
  3182  0024                     ??_CC2500_ClearTXFIFO:	
  3183  0024                     ??_CC2500_ClearRXFIFO:	
  3184                           ; 0 bytes @ 0x4
  3185                           
  3186  0024                     ??_CC2500_SIDLEMode:	
  3187                           ; 0 bytes @ 0x4
  3188                           
  3189  0024                     ?_setDimmerLights:	
  3190                           ; 0 bytes @ 0x4
  3191                           
  3192  0024                     ??_setDimmerLights_ERROR:	
  3193                           ; 0 bytes @ 0x4
  3194                           
  3195  0024                     ??_setLED_Initialization:	
  3196                           ; 0 bytes @ 0x4
  3197                           
  3198  0024                     ??_Flash_Memory_Modify:	
  3199                           ; 0 bytes @ 0x4
  3200                           
  3201  0024                     ??_getTemp_AD:	
  3202                           ; 0 bytes @ 0x4
  3203                           
  3204  0024                     ??_RF_RxDisable:	
  3205                           ; 0 bytes @ 0x4
  3206                           
  3207  0024                     ??_setSw_Initialization:	
  3208                           ; 0 bytes @ 0x4
  3209                           
  3210  0024                     ??_Sw_DimmerAdjFunc:	
  3211                           ; 0 bytes @ 0x4
  3212                           
  3213  0024                     ??_CC2500_TxData:	
  3214                           ; 0 bytes @ 0x4
  3215                           
  3216  0024                     ??_DimmerLights_Initialization:	
  3217                           ; 0 bytes @ 0x4
  3218                           
  3219  0024                     ??___awdiv:	
  3220                           ; 0 bytes @ 0x4
  3221                           
  3222  0024                     CC2500_WriteREG@w_addr:	
  3223                           ; 0 bytes @ 0x4
  3224                           
  3225  0024                     setDimmerLights@status:	
  3226                           ; 1 bytes @ 0x4
  3227                           
  3228  0024                     setLED_Initialization@led:	
  3229                           ; 1 bytes @ 0x4
  3230                           
  3231  0024                     setLED_Main@led:	
  3232                           ; 1 bytes @ 0x4
  3233                           
  3234  0024                     RF_RxDisable@rf:	
  3235                           ; 1 bytes @ 0x4
  3236                           
  3237  0024                     setSw_Initialization@sw:	
  3238                           ; 1 bytes @ 0x4
  3239                           
  3240  0024                     ___ftpack@sign:	
  3241                           ; 1 bytes @ 0x4
  3242                           
  3243  0024                     DelayTime_1us@j:	
  3244                           ; 1 bytes @ 0x4
  3245                           
  3246                           
  3247                           ; 2 bytes @ 0x4
  3248  0024                     	ds	1
  3249  0025                     ??_CC2500_InitSetREG:	
  3250  0025                     ??_CC2500_InitPATable:	
  3251                           ; 0 bytes @ 0x5
  3252                           
  3253  0025                     ??_setDimmerLights:	
  3254                           ; 0 bytes @ 0x5
  3255                           
  3256  0025                     ??_Switch_Initialization:	
  3257                           ; 0 bytes @ 0x5
  3258                           
  3259  0025                     ??___ftpack:	
  3260                           ; 0 bytes @ 0x5
  3261                           
  3262  0025                     ??_LED_Initialization:	
  3263                           ; 0 bytes @ 0x5
  3264                           
  3265  0025                     ??_LED_Main:	
  3266                           ; 0 bytes @ 0x5
  3267                           
  3268  0025                     CC2500_TxData@loop_e:	
  3269                           ; 0 bytes @ 0x5
  3270                           
  3271  0025                     setDimmerLights_ERROR@lights:	
  3272                           ; 1 bytes @ 0x5
  3273                           
  3274  0025                     _Sw_DimmerAdjFunc$5411:	
  3275                           ; 1 bytes @ 0x5
  3276                           
  3277  0025                     ___awdiv@counter:	
  3278                           ; 1 bytes @ 0x5
  3279                           
  3280                           
  3281                           ; 1 bytes @ 0x5
  3282  0025                     	ds	1
  3283  0026                     ??_CC2500_PowerRST:	
  3284  0026                     ??_CC2500_FrequencyCabr:	
  3285                           ; 0 bytes @ 0x6
  3286                           
  3287  0026                     CC2500_InitSetREG@temp1:	
  3288                           ; 0 bytes @ 0x6
  3289                           
  3290  0026                     CC2500_InitPATable@temp:	
  3291                           ; 1 bytes @ 0x6
  3292                           
  3293  0026                     setDimmerLights@lights:	
  3294                           ; 1 bytes @ 0x6
  3295                           
  3296  0026                     Flash_Memory_Modify@i:	
  3297                           ; 1 bytes @ 0x6
  3298                           
  3299  0026                     _Sw_DimmerAdjFunc$5412:	
  3300                           ; 1 bytes @ 0x6
  3301                           
  3302  0026                     ___awdiv@sign:	
  3303                           ; 1 bytes @ 0x6
  3304                           
  3305                           
  3306                           ; 1 bytes @ 0x6
  3307  0026                     	ds	1
  3308  0027                     ??_Flash_Memory_Main:	
  3309  0027                     CC2500_InitSetREG@temp2:	
  3310                           ; 0 bytes @ 0x7
  3311                           
  3312  0027                     CC2500_InitPATable@loop_d:	
  3313                           ; 1 bytes @ 0x7
  3314                           
  3315  0027                     _Sw_DimmerAdjFunc$5413:	
  3316                           ; 1 bytes @ 0x7
  3317                           
  3318  0027                     ___awdiv@quotient:	
  3319                           ; 1 bytes @ 0x7
  3320                           
  3321                           
  3322                           ; 2 bytes @ 0x7
  3323  0027                     	ds	1
  3324  0028                     ?___awtoft:	
  3325  0028                     CC2500_InitSetREG@loop_c:	
  3326                           ; 3 bytes @ 0x8
  3327                           
  3328  0028                     getTemp_AD@channel:	
  3329                           ; 1 bytes @ 0x8
  3330                           
  3331  0028                     Sw_DimmerAdjFunc@Idle:	
  3332                           ; 1 bytes @ 0x8
  3333                           
  3334  0028                     ___awtoft@c:	
  3335                           ; 1 bytes @ 0x8
  3336                           
  3337                           
  3338                           ; 2 bytes @ 0x8
  3339  0028                     	ds	1
  3340  0029                     ?_setBuz:	
  3341  0029                     ??_CC2500_PowerOnInitial:	
  3342                           ; 0 bytes @ 0x9
  3343                           
  3344  0029                     Sw_DimmerAdjFunc@sw:	
  3345                           ; 0 bytes @ 0x9
  3346                           
  3347  0029                     setBuz@time:	
  3348                           ; 1 bytes @ 0x9
  3349                           
  3350                           
  3351                           ; 2 bytes @ 0x9
  3352  0029                     	ds	2
  3353  002B                     ??_setBuz:	
  3354  002B                     ??___awtoft:	
  3355                           ; 0 bytes @ 0xB
  3356                           
  3357                           
  3358                           ; 0 bytes @ 0xB
  3359  002B                     	ds	1
  3360  002C                     setBuz@count:	
  3361                           
  3362                           ; 1 bytes @ 0xC
  3363  002C                     	ds	1
  3364  002D                     ??_my_Main:	
  3365  002D                     ??_setLog_Code:	
  3366                           ; 0 bytes @ 0xD
  3367                           
  3368  002D                     ??_CC2500_RxData:	
  3369                           ; 0 bytes @ 0xD
  3370                           
  3371  002D                     ??_DimmerLights_Exceptions:	
  3372                           ; 0 bytes @ 0xD
  3373                           
  3374  002D                     DimmerLights_Exceptions@status:	
  3375                           ; 0 bytes @ 0xD
  3376                           
  3377  002D                     ___awtoft@sign:	
  3378                           ; 1 bytes @ 0xD
  3379                           
  3380                           
  3381                           ; 1 bytes @ 0xD
  3382  002D                     	ds	1
  3383  002E                     ??_setOverTemp_Exceptions:	
  3384  002E                     ?___ftdiv:	
  3385                           ; 0 bytes @ 0xE
  3386                           
  3387  002E                     ?___ftmul:	
  3388                           ; 3 bytes @ 0xE
  3389                           
  3390  002E                     setLog_Code@rf:	
  3391                           ; 3 bytes @ 0xE
  3392                           
  3393  002E                     ___ftdiv@f2:	
  3394                           ; 1 bytes @ 0xE
  3395                           
  3396  002E                     ___ftmul@f1:	
  3397                           ; 3 bytes @ 0xE
  3398                           
  3399                           
  3400                           ; 3 bytes @ 0xE
  3401  002E                     	ds	1
  3402  002F                     CC2500_RxData@loop_f:	
  3403  002F                     setOverTemp_Exceptions@command:	
  3404                           ; 1 bytes @ 0xF
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0xF
  3408  002F                     	ds	1
  3409  0030                     ??_setTemp_Main:	
  3410                           
  3411                           ; 0 bytes @ 0x10
  3412  0030                     	ds	1
  3413  0031                     ___ftdiv@f1:	
  3414  0031                     ___ftmul@f2:	
  3415                           ; 3 bytes @ 0x11
  3416                           
  3417                           
  3418                           ; 3 bytes @ 0x11
  3419  0031                     	ds	2
  3420  0033                     ??_Temp_Main:	
  3421                           
  3422                           ; 0 bytes @ 0x13
  3423  0033                     	ds	1
  3424  0034                     ??___ftdiv:	
  3425  0034                     ??___ftmul:	
  3426                           ; 0 bytes @ 0x14
  3427                           
  3428                           
  3429                           ; 0 bytes @ 0x14
  3430  0034                     	ds	4
  3431  0038                     ___ftdiv@cntr:	
  3432  0038                     ___ftmul@exp:	
  3433                           ; 1 bytes @ 0x18
  3434                           
  3435                           
  3436                           ; 1 bytes @ 0x18
  3437  0038                     	ds	1
  3438  0039                     ___ftdiv@f3:	
  3439  0039                     ___ftmul@f3_as_product:	
  3440                           ; 3 bytes @ 0x19
  3441                           
  3442                           
  3443                           ; 3 bytes @ 0x19
  3444  0039                     	ds	3
  3445  003C                     ___ftdiv@exp:	
  3446  003C                     ___ftmul@cntr:	
  3447                           ; 1 bytes @ 0x1C
  3448                           
  3449                           
  3450                           ; 1 bytes @ 0x1C
  3451  003C                     	ds	1
  3452  003D                     ___ftdiv@sign:	
  3453  003D                     ___ftmul@sign:	
  3454                           ; 1 bytes @ 0x1D
  3455                           
  3456                           
  3457                           ; 1 bytes @ 0x1D
  3458  003D                     	ds	1
  3459  003E                     ?___ftadd:	
  3460  003E                     ___ftadd@f1:	
  3461                           ; 3 bytes @ 0x1E
  3462                           
  3463                           
  3464                           ; 3 bytes @ 0x1E
  3465  003E                     	ds	3
  3466  0041                     ___ftadd@f2:	
  3467                           
  3468                           ; 3 bytes @ 0x21
  3469  0041                     	ds	3
  3470  0044                     ??___ftadd:	
  3471                           
  3472                           ; 0 bytes @ 0x24
  3473  0044                     	ds	4
  3474  0048                     ___ftadd@sign:	
  3475                           
  3476                           ; 1 bytes @ 0x28
  3477  0048                     	ds	1
  3478  0049                     ___ftadd@exp2:	
  3479                           
  3480                           ; 1 bytes @ 0x29
  3481  0049                     	ds	1
  3482  004A                     ___ftadd@exp1:	
  3483                           
  3484                           ; 1 bytes @ 0x2A
  3485  004A                     	ds	1
  3486  004B                     ?___fttol:	
  3487  004B                     ___fttol@f1:	
  3488                           ; 4 bytes @ 0x2B
  3489                           
  3490                           
  3491                           ; 3 bytes @ 0x2B
  3492  004B                     	ds	4
  3493  004F                     ??___fttol:	
  3494                           
  3495                           ; 0 bytes @ 0x2F
  3496  004F                     	ds	4
  3497  0053                     ___fttol@sign1:	
  3498                           
  3499                           ; 1 bytes @ 0x33
  3500  0053                     	ds	1
  3501  0054                     ___fttol@lval:	
  3502                           
  3503                           ; 4 bytes @ 0x34
  3504  0054                     	ds	4
  3505  0058                     ___fttol@exp1:	
  3506                           
  3507                           ; 1 bytes @ 0x38
  3508  0058                     	ds	1
  3509  0059                     ??_getPercentValue:	
  3510  0059                     ??_setPercentValue:	
  3511                           ; 0 bytes @ 0x39
  3512                           
  3513  0059                     setPercentValue@value:	
  3514                           ; 0 bytes @ 0x39
  3515                           
  3516                           
  3517                           ; 1 bytes @ 0x39
  3518  0059                     	ds	1
  3519  005A                     setPercentValue@i:	
  3520                           
  3521                           ; 3 bytes @ 0x3A
  3522  005A                     	ds	1
  3523  005B                     getPercentValue@value:	
  3524                           
  3525                           ; 1 bytes @ 0x3B
  3526  005B                     	ds	1
  3527  005C                     getPercentValue@i:	
  3528                           
  3529                           ; 3 bytes @ 0x3C
  3530  005C                     	ds	1
  3531  005D                     ?_setRF_DimmerLights:	
  3532  005D                     ??_Flash_Memory_Initialization:	
  3533                           ; 0 bytes @ 0x3D
  3534                           
  3535  005D                     setRF_DimmerLights@on:	
  3536                           ; 0 bytes @ 0x3D
  3537                           
  3538                           
  3539                           ; 1 bytes @ 0x3D
  3540  005D                     	ds	1
  3541  005E                     ??_setRF_DimmerLights:	
  3542  005E                     Flash_Memory_Initialization@i:	
  3543                           ; 0 bytes @ 0x3E
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x3E
  3547  005E                     	ds	1
  3548  005F                     ??_setDimmerLights_AdjRF:	
  3549                           
  3550                           ; 0 bytes @ 0x3F
  3551  005F                     	ds	1
  3552  0060                     setDimmerLights_AdjRF@lights:	
  3553  0060                     setRF_DimmerLights@status:	
  3554                           ; 1 bytes @ 0x40
  3555                           
  3556                           
  3557                           ; 1 bytes @ 0x40
  3558  0060                     	ds	1
  3559  0061                     ??_setRF_DimmerValue:	
  3560  0061                     setRF_DimmerLights@lights:	
  3561                           ; 0 bytes @ 0x41
  3562                           
  3563                           
  3564                           ; 1 bytes @ 0x41
  3565  0061                     	ds	1
  3566  0062                     ?_setDimmerLights_Adj:	
  3567  0062                     ??_setRFSW_Control:	
  3568                           ; 0 bytes @ 0x42
  3569                           
  3570  0062                     ??_Sw_DimmerOnFunc:	
  3571                           ; 0 bytes @ 0x42
  3572                           
  3573  0062                     ??_Sw_DimmerOffFunc:	
  3574                           ; 0 bytes @ 0x42
  3575                           
  3576  0062                     setDimmerLights_Adj@status:	
  3577                           ; 0 bytes @ 0x42
  3578                           
  3579  0062                     setRFSW_Control@sw:	
  3580                           ; 1 bytes @ 0x42
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x42
  3584  0062                     	ds	1
  3585  0063                     ??_setDimmerLights_Adj:	
  3586  0063                     setRF_DimmerValue@lights:	
  3587                           ; 0 bytes @ 0x43
  3588                           
  3589  0063                     _Sw_DimmerOnFunc$5401:	
  3590                           ; 1 bytes @ 0x43
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x43
  3594  0063                     	ds	1
  3595  0064                     ??_setRFSW_AdjControl:	
  3596  0064                     setDimmerLights_Adj@lights:	
  3597                           ; 0 bytes @ 0x44
  3598                           
  3599  0064                     _Sw_DimmerOnFunc$5402:	
  3600                           ; 1 bytes @ 0x44
  3601                           
  3602  0064                     Sw_DimmerOffFunc@sw:	
  3603                           ; 1 bytes @ 0x44
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x44
  3607  0064                     	ds	1
  3608  0065                     ??_setDimmerLights_Main:	
  3609  0065                     _Sw_DimmerOnFunc$5403:	
  3610                           ; 0 bytes @ 0x45
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x45
  3614  0065                     	ds	1
  3615  0066                     _setDimmerLights_Main$2060:	
  3616  0066                     setRFSW_AdjControl@sw:	
  3617                           ; 1 bytes @ 0x46
  3618                           
  3619  0066                     Sw_DimmerOnFunc@Idle:	
  3620                           ; 1 bytes @ 0x46
  3621                           
  3622                           
  3623                           ; 1 bytes @ 0x46
  3624  0066                     	ds	1
  3625  0067                     ??_setControl_Lights_Table:	
  3626  0067                     _setDimmerLights_Main$2061:	
  3627                           ; 0 bytes @ 0x47
  3628                           
  3629  0067                     setControl_Lights_Table@rf:	
  3630                           ; 1 bytes @ 0x47
  3631                           
  3632  0067                     Sw_DimmerOnFunc@sw:	
  3633                           ; 1 bytes @ 0x47
  3634                           
  3635                           
  3636                           ; 1 bytes @ 0x47
  3637  0067                     	ds	1
  3638  0068                     ??_getRxData:	
  3639  0068                     ??_setSw_Main:	
  3640                           ; 0 bytes @ 0x48
  3641                           
  3642  0068                     _setDimmerLights_Main$2062:	
  3643                           ; 0 bytes @ 0x48
  3644                           
  3645  0068                     getRxData@rf:	
  3646                           ; 1 bytes @ 0x48
  3647                           
  3648                           
  3649                           ; 1 bytes @ 0x48
  3650  0068                     	ds	1
  3651  0069                     ??_setRF_Main:	
  3652  0069                     setDimmerLights_Main@clear:	
  3653                           ; 0 bytes @ 0x49
  3654                           
  3655                           
  3656                           ; 1 bytes @ 0x49
  3657  0069                     	ds	1
  3658  006A                     setDimmerLights_Main@lights:	
  3659  006A                     setRF_Main@rf:	
  3660                           ; 1 bytes @ 0x4A
  3661                           
  3662  006A                     setSw_Main@sw:	
  3663                           ; 1 bytes @ 0x4A
  3664                           
  3665                           
  3666                           ; 1 bytes @ 0x4A
  3667  006A                     	ds	1
  3668  006B                     ??_Switch_Main:	
  3669  006B                     ??_DimmerLights_Main:	
  3670                           ; 0 bytes @ 0x4B
  3671                           
  3672  006B                     _setRF_Main$4541:	
  3673                           ; 0 bytes @ 0x4B
  3674                           
  3675                           
  3676                           ; 1 bytes @ 0x4B
  3677  006B                     	ds	1
  3678  006C                     ??_RF_Main:	
  3679  006C                     ?_main:	
  3680                           ; 0 bytes @ 0x4C
  3681                           
  3682  006C                     main@argc:	
  3683                           ; 2 bytes @ 0x4C
  3684                           
  3685                           
  3686                           ; 2 bytes @ 0x4C
  3687  006C                     	ds	2
  3688  006E                     main@argv:	
  3689                           
  3690                           ; 2 bytes @ 0x4E
  3691  006E                     	ds	2
  3692  0070                     ??_main:	
  3693                           
  3694                           	psect	maintext
  3695  14C8                     __pmaintext:	
  3696                           ; 0 bytes @ 0x50
  3697 ;;
  3698 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3699 ;;
  3700 ;; *************** function _main *****************
  3701 ;; Defined at:
  3702 ;;		line 7 in file "../src/Main_B1.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  argc            2   76[BANK0 ] int 
  3705 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  2   76[BANK0 ] int 
  3710 ;; Registers used:
  3711 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 17F/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3721 ;;Total ram usage:        4 bytes
  3722 ;; Hardware stack levels required when called:   15
  3723 ;; This function calls:
  3724 ;;		_Buzzer_Initialization
  3725 ;;		_Buzzer_Main
  3726 ;;		_CC2500_PowerOnInitial
  3727 ;;		_DimmerLights_Initialization
  3728 ;;		_DimmerLights_Main
  3729 ;;		_Flash_Memory_Initialization
  3730 ;;		_Flash_Memory_Main
  3731 ;;		_LED_Initialization
  3732 ;;		_LED_Main
  3733 ;;		_Mcu_Initialization
  3734 ;;		_RF_Initialization
  3735 ;;		_RF_Main
  3736 ;;		_Switch_Initialization
  3737 ;;		_Switch_Main
  3738 ;;		_Temp_Initialization
  3739 ;;		_Temp_Main
  3740 ;;		_WDT_Main
  3741 ;;		_getTemp_AD
  3742 ;;		_myMain_Initialization
  3743 ;;		_my_Main
  3744 ;;		_my_TestPointCleared
  3745 ;; This function is called by:
  3746 ;;		Startup code after reset
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _main
  3752  14C8                     _main:	
  3753                           
  3754                           ;Main_B1.c: 9: myMain_Initialization();
  3755                           
  3756                           ;incstack = 0
  3757                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3758  14C8  319C  24DE  3194   	fcall	_myMain_Initialization
  3759                           
  3760                           ;Main_B1.c: 10: Mcu_Initialization();
  3761  14CB  319D  25E8  3194   	fcall	_Mcu_Initialization
  3762                           
  3763                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3764  14CE  3184  2499  3194   	fcall	_Flash_Memory_Initialization
  3765                           
  3766                           ;Main_B1.c: 12: LED_Initialization();
  3767  14D1  319C  2412  3194   	fcall	_LED_Initialization
  3768                           
  3769                           ;Main_B1.c: 13: Buzzer_Initialization();
  3770  14D4  319B  233A  3194   	fcall	_Buzzer_Initialization
  3771                           
  3772                           ;Main_B1.c: 15: ;;
  3773                           ;Main_B1.c: 16: Temp_Initialization();
  3774  14D7  319A  22E4  3194   	fcall	_Temp_Initialization
  3775                           
  3776                           ;Main_B1.c: 17: ;;
  3777                           ;Main_B1.c: 18: ;;
  3778                           ;Main_B1.c: 19: ;;
  3779                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3780  14DA  319F  274E  3194   	fcall	_DimmerLights_Initialization
  3781                           
  3782                           ;Main_B1.c: 22: ;;
  3783                           ;Main_B1.c: 23: ;;
  3784                           ;Main_B1.c: 24: ;;
  3785                           ;Main_B1.c: 25: Switch_Initialization();
  3786  14DD  319C  2494  3194   	fcall	_Switch_Initialization
  3787                           
  3788                           ;Main_B1.c: 26: RF_Initialization();
  3789  14E0  319A  22FA  3194   	fcall	_RF_Initialization
  3790                           
  3791                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3792  14E3  319C  24F2  3194   	fcall	_CC2500_PowerOnInitial
  3793  14E6                     l7721:	
  3794                           ;Main_B1.c: 28: ;;
  3795                           ;Main_B1.c: 31: while (1) {
  3796                           
  3797                           
  3798                           ;Main_B1.c: 33: if (myMain->PowerON) {
  3799  14E6  0021               	movlb	1	; select bank1
  3800  14E7  0867               	movf	_myMain^(0+128),w
  3801  14E8  0086               	movwf	6
  3802  14E9  3001               	movlw	1	; select bank2/3
  3803  14EA  0087               	movwf	7
  3804  14EB  1C01               	btfss	1,0
  3805  14EC  2CF1               	goto	l7725
  3806                           
  3807                           ;Main_B1.c: 35: ;;
  3808                           ;Main_B1.c: 39: ;;
  3809                           ;Main_B1.c: 43: getTemp_AD(0x09);
  3810  14ED  3009               	movlw	9
  3811  14EE  3189  2141  3194   	fcall	_getTemp_AD
  3812  14F1                     l7725:	
  3813                           ;Main_B1.c: 47: ;;
  3814                           
  3815                           
  3816                           ;Main_B1.c: 58: }
  3817                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  3818  14F1  0021               	movlb	1	; select bank1
  3819  14F2  0867               	movf	_myMain^(0+128),w
  3820  14F3  0086               	movwf	6
  3821  14F4  3001               	movlw	1	; select bank2/3
  3822  14F5  0087               	movwf	7
  3823  14F6  1C81               	btfss	1,1
  3824  14F7  2CE6               	goto	l7721
  3825                           
  3826                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  3827  14F8  0867               	movf	_myMain^(0+128),w
  3828  14F9  0086               	movwf	6
  3829  14FA  3001               	movlw	1	; select bank2/3
  3830  14FB  0087               	movwf	7
  3831  14FC  1081               	bcf	1,1
  3832                           
  3833                           ;Main_B1.c: 63: my_Main();
  3834  14FD  3188  20C9  3194   	fcall	_my_Main
  3835                           
  3836                           ;Main_B1.c: 64: my_TestPointCleared();
  3837  1500  319C  24A5  3194   	fcall	_my_TestPointCleared
  3838                           
  3839                           ;Main_B1.c: 65: WDT_Main();
  3840  1503  319E  261E  3194   	fcall	_WDT_Main
  3841                           
  3842                           ;Main_B1.c: 66: ;;
  3843                           ;Main_B1.c: 67: ;;
  3844                           ;Main_B1.c: 68: if (myMain->PowerON) {
  3845  1506  0021               	movlb	1	; select bank1
  3846  1507  0867               	movf	_myMain^(0+128),w
  3847  1508  0086               	movwf	6
  3848  1509  3001               	movlw	1	; select bank2/3
  3849  150A  0087               	movwf	7
  3850  150B  1C01               	btfss	1,0
  3851  150C  2CE6               	goto	l7721
  3852                           
  3853                           ;Main_B1.c: 69: Flash_Memory_Main();
  3854  150D  3192  2271  3194   	fcall	_Flash_Memory_Main
  3855                           
  3856                           ;Main_B1.c: 71: LED_Main();
  3857  1510  319C  2422  3194   	fcall	_LED_Main
  3858                           
  3859                           ;Main_B1.c: 72: Buzzer_Main();
  3860  1513  318F  2739  3194   	fcall	_Buzzer_Main
  3861                           
  3862                           ;Main_B1.c: 74: ;;
  3863                           ;Main_B1.c: 75: Temp_Main();
  3864  1516  319A  22E7  3194   	fcall	_Temp_Main
  3865                           
  3866                           ;Main_B1.c: 76: ;;
  3867                           ;Main_B1.c: 77: ;;
  3868                           ;Main_B1.c: 79: ;;
  3869                           ;Main_B1.c: 80: DimmerLights_Main();
  3870  1519  319B  23D5  3194   	fcall	_DimmerLights_Main
  3871                           
  3872                           ;Main_B1.c: 81: Switch_Main();
  3873  151C  319B  235E  3194   	fcall	_Switch_Main
  3874                           
  3875                           ;Main_B1.c: 82: ;;
  3876                           ;Main_B1.c: 83: ;;
  3877                           ;Main_B1.c: 85: RF_Main();
  3878  151F  3188  2001  3194   	fcall	_RF_Main
  3879                           
  3880                           ;Main_B1.c: 86: ;;
  3881                           ;Main_B1.c: 87: ;;
  3882  1522  2CE6               	goto	l7721
  3883  1523                     __end_of_main:	
  3884                           ;Main_B1.c: 88: }
  3885                           ;Main_B1.c: 89: }
  3886                           ;Main_B1.c: 107: }
  3887                           ;Main_B1.c: 108: return (0);
  3888                           ;	Return value of _main is never used
  3889                           
  3890                           
  3891                           	psect	text1
  3892  1CA5                     __ptext1:	
  3893 ;; *************** function _my_TestPointCleared *****************
  3894 ;; Defined at:
  3895 ;;		line 206 in file "../src/Main_B1.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;		None
  3900 ;; Return value:  Size  Location     Type
  3901 ;;		None               void
  3902 ;; Registers used:
  3903 ;;		wreg, fsr1l, fsr1h
  3904 ;; Tracked objects:
  3905 ;;		On entry : 0/0
  3906 ;;		On exit  : 0/0
  3907 ;;		Unchanged: 0/0
  3908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3913 ;;Total ram usage:        0 bytes
  3914 ;; Hardware stack levels used:    1
  3915 ;; Hardware stack levels required when called:    5
  3916 ;; This function calls:
  3917 ;;		Nothing
  3918 ;; This function is called by:
  3919 ;;		_main
  3920 ;; This function uses a non-reentrant model
  3921 ;;
  3922                           
  3923                           
  3924                           ;psect for function _my_TestPointCleared
  3925  1CA5                     _my_TestPointCleared:	
  3926                           
  3927                           ;Main_B1.c: 207: myMain->pcount1 = 0;
  3928                           
  3929                           ;incstack = 0
  3930                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  3931  1CA5  0021               	movlb	1	; select bank1
  3932  1CA6  0867               	movf	_myMain^(0+128),w
  3933  1CA7  3E10               	addlw	16
  3934  1CA8  0086               	movwf	6
  3935  1CA9  3001               	movlw	1	; select bank2/3
  3936  1CAA  0087               	movwf	7
  3937  1CAB  3000               	movlw	0
  3938  1CAC  3FC0               	movwi [0]fsr1
  3939  1CAD  3FC1               	movwi [1]fsr1
  3940                           
  3941                           ;Main_B1.c: 208: myMain->pcount2 = 0;
  3942  1CAE  0867               	movf	_myMain^(0+128),w
  3943  1CAF  3E12               	addlw	18
  3944  1CB0  0086               	movwf	6
  3945  1CB1  3001               	movlw	1	; select bank2/3
  3946  1CB2  0087               	movwf	7
  3947  1CB3  3000               	movlw	0
  3948  1CB4  3FC0               	movwi [0]fsr1
  3949  1CB5  3FC1               	movwi [1]fsr1
  3950  1CB6  0008               	return
  3951  1CB7                     __end_of_my_TestPointCleared:	
  3952                           
  3953                           	psect	text2
  3954  08C9                     __ptext2:	
  3955 ;; *************** function _my_Main *****************
  3956 ;; Defined at:
  3957 ;;		line 125 in file "../src/Main_B1.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;		None
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;		None
  3962 ;; Return value:  Size  Location     Type
  3963 ;;		None               void
  3964 ;; Registers used:
  3965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;Total ram usage:        0 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    7
  3978 ;; This function calls:
  3979 ;;		_setBuz
  3980 ;;		_setRF_Enable
  3981 ;;		_setSw_Enable
  3982 ;;		_setTemp_Enable
  3983 ;; This function is called by:
  3984 ;;		_main
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _my_Main
  3990  08C9                     _my_Main:	
  3991                           
  3992                           ;Main_B1.c: 127: if (myMain->PowerON == 0) {
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3996  08C9  0021               	movlb	1	; select bank1
  3997  08CA  0867               	movf	_myMain^(0+128),w
  3998  08CB  0086               	movwf	6
  3999  08CC  3001               	movlw	1	; select bank2/3
  4000  08CD  0087               	movwf	7
  4001  08CE  1801               	btfsc	1,0
  4002  08CF  290F               	goto	l7643
  4003                           
  4004                           ;Main_B1.c: 128: myMain->PowerCount++;
  4005  08D0  0A67               	incf	_myMain^(0+128),w
  4006  08D1  0086               	movwf	6
  4007  08D2  3001               	movlw	1	; select bank2/3
  4008  08D3  0087               	movwf	7
  4009  08D4  3001               	movlw	1
  4010  08D5  0781               	addwf	1,f
  4011  08D6  3141               	addfsr 1,1
  4012  08D7  1803               	skipnc
  4013  08D8  0A81               	incf	1,f
  4014                           
  4015                           ;Main_B1.c: 129: if (myMain->PowerCount == 150)
  4016  08D9  0A67               	incf	_myMain^(0+128),w
  4017  08DA  0086               	movwf	6
  4018  08DB  3001               	movlw	1	; select bank2/3
  4019  08DC  0087               	movwf	7
  4020  08DD  3F40               	moviw [0]fsr1
  4021  08DE  3A96               	xorlw	150
  4022  08DF  1D03               	skipz
  4023  08E0  28E3               	goto	u7275
  4024  08E1  3F41               	moviw [1]fsr1
  4025  08E2  3A00               	xorlw	0
  4026  08E3                     u7275:	
  4027  08E3  1D03               	skipz
  4028  08E4  0008               	return
  4029                           
  4030                           ;Main_B1.c: 130: {
  4031                           ;Main_B1.c: 131: myMain->PowerCount = 0;
  4032  08E5  0A67               	incf	_myMain^(0+128),w
  4033  08E6  0086               	movwf	6
  4034  08E7  3001               	movlw	1	; select bank2/3
  4035  08E8  0087               	movwf	7
  4036  08E9  3000               	movlw	0
  4037  08EA  3FC0               	movwi [0]fsr1
  4038  08EB  3FC1               	movwi [1]fsr1
  4039                           
  4040                           ;Main_B1.c: 132: myMain->PowerON = 1;
  4041  08EC  0867               	movf	_myMain^(0+128),w
  4042  08ED  0086               	movwf	6
  4043  08EE  3001               	movlw	1	; select bank2/3
  4044  08EF  0087               	movwf	7
  4045  08F0  1401               	bsf	1,0
  4046                           
  4047                           ;Main_B1.c: 135: setTemp_Enable(1);
  4048  08F1  3001               	movlw	1
  4049  08F2  319B  239D  3188   	fcall	_setTemp_Enable
  4050                           
  4051                           ;Main_B1.c: 139: ;;
  4052                           ;Main_B1.c: 145: setBuz(3, 50);
  4053  08F5  3032               	movlw	50
  4054  08F6  0020               	movlb	0	; select bank0
  4055  08F7  00A9               	movwf	setBuz@time
  4056  08F8  3000               	movlw	0
  4057  08F9  00AA               	movwf	setBuz@time+1
  4058  08FA  3003               	movlw	3
  4059  08FB  318B  23D2  3188   	fcall	_setBuz
  4060                           
  4061                           ;Main_B1.c: 146: myMain->SelfTest = 1;
  4062  08FE  0021               	movlb	1	; select bank1
  4063  08FF  0867               	movf	_myMain^(0+128),w
  4064  0900  0086               	movwf	6
  4065  0901  3001               	movlw	1	; select bank2/3
  4066  0902  0087               	movwf	7
  4067  0903  1701               	bsf	1,6
  4068                           
  4069                           ;Main_B1.c: 148: setSw_Enable(1);
  4070  0904  3001               	movlw	1
  4071  0905  3190  2008  3188   	fcall	_setSw_Enable
  4072                           
  4073                           ;Main_B1.c: 151: setRF_Enable(1, 1);
  4074  0908  0020               	movlb	0	; select bank0
  4075  0909  01A2               	clrf	setRF_Enable@command
  4076  090A  0AA2               	incf	setRF_Enable@command,f
  4077  090B  3001               	movlw	1
  4078  090C  319F  27D9         	fcall	_setRF_Enable
  4079                           
  4080                           ;Main_B1.c: 155: }
  4081                           ;Main_B1.c: 156: } else {
  4082  090E  0008               	return
  4083  090F                     l7643:	
  4084                           
  4085                           ;Main_B1.c: 164: myMain->Count1++;
  4086  090F  0021               	movlb	1	; select bank1
  4087  0910  0867               	movf	_myMain^(0+128),w
  4088  0911  3E05               	addlw	5
  4089  0912  0086               	movwf	6
  4090  0913  3001               	movlw	1	; select bank2/3
  4091  0914  0087               	movwf	7
  4092  0915  3001               	movlw	1
  4093  0916  0781               	addwf	1,f
  4094  0917  3141               	addfsr 1,1
  4095  0918  1803               	skipnc
  4096  0919  0A81               	incf	1,f
  4097                           
  4098                           ;Main_B1.c: 165: if (myMain->Count1 == 100)
  4099  091A  0867               	movf	_myMain^(0+128),w
  4100  091B  3E05               	addlw	5
  4101  091C  0086               	movwf	6
  4102  091D  3001               	movlw	1	; select bank2/3
  4103  091E  0087               	movwf	7
  4104  091F  3F40               	moviw [0]fsr1
  4105  0920  3A64               	xorlw	100
  4106  0921  1D03               	skipz
  4107  0922  2925               	goto	u7285
  4108  0923  3F41               	moviw [1]fsr1
  4109  0924  3A00               	xorlw	0
  4110  0925                     u7285:	
  4111  0925  1D03               	skipz
  4112  0926  0008               	return
  4113                           
  4114                           ;Main_B1.c: 166: {
  4115                           ;Main_B1.c: 167: myMain->Count1 = 0;
  4116  0927  0867               	movf	_myMain^(0+128),w
  4117  0928  3E05               	addlw	5
  4118  0929  0086               	movwf	6
  4119  092A  3001               	movlw	1	; select bank2/3
  4120  092B  0087               	movwf	7
  4121  092C  3000               	movlw	0
  4122  092D  3FC0               	movwi [0]fsr1
  4123  092E  3FC1               	movwi [1]fsr1
  4124                           
  4125                           ;Main_B1.c: 180: if (myMain->Flag) {
  4126  092F  0867               	movf	_myMain^(0+128),w
  4127  0930  0086               	movwf	6
  4128  0931  3001               	movlw	1	; select bank2/3
  4129  0932  0087               	movwf	7
  4130  0933  1D81               	btfss	1,3
  4131  0934  293B               	goto	l7651
  4132                           
  4133                           ;Main_B1.c: 181: myMain->Flag = 0;
  4134  0935  0867               	movf	_myMain^(0+128),w
  4135  0936  0086               	movwf	6
  4136  0937  3001               	movlw	1	; select bank2/3
  4137  0938  0087               	movwf	7
  4138  0939  1181               	bcf	1,3
  4139                           
  4140                           ;Main_B1.c: 190: } else {
  4141  093A  0008               	return
  4142  093B                     l7651:	
  4143                           
  4144                           ;Main_B1.c: 191: myMain->Flag = 1;
  4145  093B  0867               	movf	_myMain^(0+128),w
  4146  093C  0086               	movwf	6
  4147  093D  3001               	movlw	1	; select bank2/3
  4148  093E  0087               	movwf	7
  4149  093F  1581               	bsf	1,3
  4150  0940  0008               	return
  4151  0941                     __end_of_my_Main:	
  4152                           
  4153                           	psect	text3
  4154  1B9D                     __ptext3:	
  4155 ;; *************** function _setTemp_Enable *****************
  4156 ;; Defined at:
  4157 ;;		line 22 in file "../src/OverTemperature_B1.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  command         1    wreg     unsigned char 
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  command         1    0[BANK0 ] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;		None               void
  4164 ;; Registers used:
  4165 ;;		wreg, fsr1l, fsr1h
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;Total ram usage:        1 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    5
  4178 ;; This function calls:
  4179 ;;		Nothing
  4180 ;; This function is called by:
  4181 ;;		_my_Main
  4182 ;; This function uses a non-reentrant model
  4183 ;;
  4184                           
  4185                           
  4186                           ;psect for function _setTemp_Enable
  4187  1B9D                     _setTemp_Enable:	
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _setTemp_Enable: [wregfsr1]
  4191                           ;setTemp_Enable@command stored from wreg
  4192  1B9D  0020               	movlb	0	; select bank0
  4193  1B9E  00A0               	movwf	setTemp_Enable@command
  4194                           
  4195                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
  4196  1B9F  0021               	movlb	1	; select bank1
  4197  1BA0  0843               	movf	_Temp^(0+128),w
  4198  1BA1  0086               	movwf	6
  4199  1BA2  3001               	movlw	1	; select bank2/3
  4200  1BA3  0087               	movwf	7
  4201  1BA4  0020               	movlb	0	; select bank0
  4202  1BA5  0820               	movf	setTemp_Enable@command,w
  4203  1BA6  1001               	bcf	1,0
  4204  1BA7  1D03               	skipz
  4205  1BA8  1401               	bsf	1,0
  4206  1BA9  0008               	return
  4207  1BAA                     __end_of_setTemp_Enable:	
  4208                           
  4209                           	psect	text4
  4210  1CDE                     __ptext4:	
  4211 ;; *************** function _myMain_Initialization *****************
  4212 ;; Defined at:
  4213 ;;		line 113 in file "../src/Main_B1.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;		None               void
  4220 ;; Registers used:
  4221 ;;		wreg, fsr1l, fsr1h
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;Total ram usage:        1 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    5
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_main
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           
  4242                           ;psect for function _myMain_Initialization
  4243  1CDE                     _myMain_Initialization:	
  4244                           
  4245                           ;Main_B1.c: 115: product = &_product;
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4249  1CDE  3045               	movlw	__product& (0+255)
  4250  1CDF  0020               	movlb	0	; select bank0
  4251  1CE0  00A0               	movwf	??_myMain_Initialization
  4252  1CE1  0820               	movf	??_myMain_Initialization,w
  4253  1CE2  00FD               	movwf	_product
  4254                           
  4255                           ;Main_B1.c: 116: product->Data[20] = 211;
  4256  1CE3  30D3               	movlw	211
  4257  1CE4  00A0               	movwf	??_myMain_Initialization
  4258  1CE5  087D               	movf	_product,w
  4259  1CE6  3E14               	addlw	20
  4260  1CE7  0086               	movwf	6
  4261  1CE8  3002               	movlw	2	; select bank4/5
  4262  1CE9  0087               	movwf	7
  4263  1CEA  0820               	movf	??_myMain_Initialization,w
  4264  1CEB  0081               	movwf	1
  4265                           
  4266                           ;Main_B1.c: 119: myMain = &_myMain;
  4267  1CEC  30A0               	movlw	__myMain& (0+255)
  4268  1CED  00A0               	movwf	??_myMain_Initialization
  4269  1CEE  0820               	movf	??_myMain_Initialization,w
  4270  1CEF  0021               	movlb	1	; select bank1
  4271  1CF0  00E7               	movwf	_myMain^(0+128)
  4272  1CF1  0008               	return
  4273  1CF2                     __end_of_myMain_Initialization:	
  4274                           
  4275                           	psect	text5
  4276  0941                     __ptext5:	
  4277 ;; *************** function _getTemp_AD *****************
  4278 ;; Defined at:
  4279 ;;		line 35 in file "../src/OverTemperature_B1.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  channel         1    wreg     unsigned char 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  channel         1    8[BANK0 ] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4295 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4296 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;Total ram usage:        5 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    6
  4300 ;; This function calls:
  4301 ;;		_getAD
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _getTemp_AD
  4309  0941                     _getTemp_AD:	
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4313                           ;getTemp_AD@channel stored from wreg
  4314  0941  0020               	movlb	0	; select bank0
  4315  0942  00A8               	movwf	getTemp_AD@channel
  4316                           
  4317                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4318  0943  0021               	movlb	1	; select bank1
  4319  0944  0843               	movf	_Temp^(0+128),w
  4320  0945  0086               	movwf	6
  4321  0946  3001               	movlw	1	; select bank2/3
  4322  0947  0087               	movwf	7
  4323  0948  1D01               	btfss	1,2
  4324  0949  0008               	return
  4325                           
  4326                           ;OverTemperature_B1.c: 38: {
  4327                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4328  094A  30F0               	movlw	240
  4329  094B  0020               	movlb	0	; select bank0
  4330  094C  00A4               	movwf	??_getTemp_AD
  4331  094D  0824               	movf	??_getTemp_AD,w
  4332  094E  00A0               	movwf	getAD@adcon1
  4333  094F  0828               	movf	getTemp_AD@channel,w
  4334  0950  319D  2507  3189   	fcall	_getAD
  4335  0953  0021               	movlb	1	; select bank1
  4336  0954  0843               	movf	_Temp^(0+128),w
  4337  0955  3E0C               	addlw	12
  4338  0956  0086               	movwf	6
  4339  0957  3001               	movlw	1	; select bank2/3
  4340  0958  0087               	movwf	7
  4341  0959  0020               	movlb	0	; select bank0
  4342  095A  0820               	movf	?_getAD,w
  4343  095B  3FC0               	movwi [0]fsr1
  4344  095C  0821               	movf	?_getAD+1,w
  4345  095D  3FC1               	movwi [1]fsr1
  4346                           
  4347                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4348  095E  0021               	movlb	1	; select bank1
  4349  095F  0843               	movf	_Temp^(0+128),w
  4350  0960  3E0C               	addlw	12
  4351  0961  0086               	movwf	6
  4352  0962  3001               	movlw	1	; select bank2/3
  4353  0963  0087               	movwf	7
  4354  0964  3F40               	moviw [0]fsr1
  4355  0965  0020               	movlb	0	; select bank0
  4356  0966  00A4               	movwf	??_getTemp_AD
  4357  0967  3F41               	moviw [1]fsr1
  4358  0968  00A5               	movwf	??_getTemp_AD+1
  4359  0969  0021               	movlb	1	; select bank1
  4360  096A  0843               	movf	_Temp^(0+128),w
  4361  096B  3E08               	addlw	8
  4362  096C  0086               	movwf	6
  4363  096D  3001               	movlw	1	; select bank2/3
  4364  096E  0087               	movwf	7
  4365  096F  3F40               	moviw [0]fsr1
  4366  0970  0020               	movlb	0	; select bank0
  4367  0971  00A6               	movwf	??_getTemp_AD+2
  4368  0972  3F41               	moviw [1]fsr1
  4369  0973  00A7               	movwf	??_getTemp_AD+3
  4370  0974  0825               	movf	??_getTemp_AD+1,w
  4371  0975  0227               	subwf	??_getTemp_AD+3,w
  4372  0976  1D03               	skipz
  4373  0977  297A               	goto	u7245
  4374  0978  0824               	movf	??_getTemp_AD,w
  4375  0979  0226               	subwf	??_getTemp_AD+2,w
  4376  097A                     u7245:	
  4377  097A  1803               	skipnc
  4378  097B  298C               	goto	l7623
  4379                           
  4380                           ;OverTemperature_B1.c: 41: {
  4381                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4382  097C  0021               	movlb	1	; select bank1
  4383  097D  0843               	movf	_Temp^(0+128),w
  4384  097E  3E0C               	addlw	12
  4385  097F  0086               	movwf	6
  4386  0980  3001               	movlw	1	; select bank2/3
  4387  0981  0087               	movwf	7
  4388  0982  0843               	movf	_Temp^(0+128),w
  4389  0983  3E08               	addlw	8
  4390  0984  0084               	movwf	4
  4391  0985  3001               	movlw	1	; select bank2/3
  4392  0986  0085               	movwf	5
  4393  0987  3F40               	moviw [0]fsr1
  4394  0988  3F80               	movwi [0]fsr0
  4395  0989  3F41               	moviw [1]fsr1
  4396  098A  3F81               	movwi [1]fsr0
  4397                           
  4398                           ;OverTemperature_B1.c: 43: }
  4399  098B  0008               	return
  4400  098C                     l7623:	
  4401                           
  4402                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4403  098C  0021               	movlb	1	; select bank1
  4404  098D  0843               	movf	_Temp^(0+128),w
  4405  098E  3E0C               	addlw	12
  4406  098F  0086               	movwf	6
  4407  0990  3001               	movlw	1	; select bank2/3
  4408  0991  0087               	movwf	7
  4409  0992  3F40               	moviw [0]fsr1
  4410  0993  0020               	movlb	0	; select bank0
  4411  0994  00A4               	movwf	??_getTemp_AD
  4412  0995  3F41               	moviw [1]fsr1
  4413  0996  00A5               	movwf	??_getTemp_AD+1
  4414  0997  0021               	movlb	1	; select bank1
  4415  0998  0843               	movf	_Temp^(0+128),w
  4416  0999  3E0A               	addlw	10
  4417  099A  0086               	movwf	6
  4418  099B  3001               	movlw	1	; select bank2/3
  4419  099C  0087               	movwf	7
  4420  099D  3F40               	moviw [0]fsr1
  4421  099E  0020               	movlb	0	; select bank0
  4422  099F  00A6               	movwf	??_getTemp_AD+2
  4423  09A0  3F41               	moviw [1]fsr1
  4424  09A1  00A7               	movwf	??_getTemp_AD+3
  4425  09A2  0825               	movf	??_getTemp_AD+1,w
  4426  09A3  0227               	subwf	??_getTemp_AD+3,w
  4427  09A4  1D03               	skipz
  4428  09A5  29A8               	goto	u7255
  4429  09A6  0824               	movf	??_getTemp_AD,w
  4430  09A7  0226               	subwf	??_getTemp_AD+2,w
  4431  09A8                     u7255:	
  4432  09A8  1803               	skipnc
  4433  09A9  0008               	return
  4434                           
  4435                           ;OverTemperature_B1.c: 45: {
  4436                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4437  09AA  0021               	movlb	1	; select bank1
  4438  09AB  0843               	movf	_Temp^(0+128),w
  4439  09AC  3E0C               	addlw	12
  4440  09AD  0086               	movwf	6
  4441  09AE  3001               	movlw	1	; select bank2/3
  4442  09AF  0087               	movwf	7
  4443  09B0  0843               	movf	_Temp^(0+128),w
  4444  09B1  3E0A               	addlw	10
  4445  09B2  0084               	movwf	4
  4446  09B3  3001               	movlw	1	; select bank2/3
  4447  09B4  0085               	movwf	5
  4448  09B5  3F40               	moviw [0]fsr1
  4449  09B6  3F80               	movwi [0]fsr0
  4450  09B7  3F41               	moviw [1]fsr1
  4451  09B8  3F81               	movwi [1]fsr0
  4452  09B9  0008               	return
  4453  09BA                     __end_of_getTemp_AD:	
  4454                           
  4455                           	psect	text6
  4456  1D07                     __ptext6:	
  4457 ;; *************** function _getAD *****************
  4458 ;; Defined at:
  4459 ;;		line 342 in file "../src/MCU_B1.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  adcon0          1    wreg     unsigned char 
  4462 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  2    0[BANK0 ] int 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2, status,0
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4474 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;Total ram usage:        4 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    5
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_getTemp_AD
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           
  4489                           ;psect for function _getAD
  4490  1D07                     _getAD:	
  4491                           
  4492                           ;incstack = 0
  4493                           ; Regs used in _getAD: [wreg+status,2+status,0]
  4494                           ;getAD@adcon0 stored from wreg
  4495  1D07  0020               	movlb	0	; select bank0
  4496  1D08  00A3               	movwf	getAD@adcon0
  4497                           
  4498                           ;MCU_B1.c: 343: ADCON0 = adcon0;
  4499  1D09  0823               	movf	getAD@adcon0,w
  4500  1D0A  0021               	movlb	1	; select bank1
  4501  1D0B  009D               	movwf	29	;volatile
  4502                           
  4503                           ;MCU_B1.c: 344: ADCON1 = adcon1;
  4504  1D0C  0020               	movlb	0	; select bank0
  4505  1D0D  0820               	movf	getAD@adcon1,w
  4506  1D0E  0021               	movlb	1	; select bank1
  4507  1D0F  009E               	movwf	30	;volatile
  4508                           
  4509                           ;MCU_B1.c: 345: GO_nDONE = 1;
  4510  1D10  149D               	bsf	29,1	;volatile
  4511  1D11                     l1401:	
  4512                           ;MCU_B1.c: 346: while (GO_nDONE == 1);
  4513                           
  4514  1D11  189D               	btfsc	29,1	;volatile
  4515  1D12  2D11               	goto	l1401
  4516                           
  4517                           ;MCU_B1.c: 347: return ((ADRESH*256)+ADRESL);
  4518  1D13  081C               	movf	28,w	;volatile
  4519  1D14  0020               	movlb	0	; select bank0
  4520  1D15  01A1               	clrf	?_getAD+1
  4521  1D16  07A1               	addwf	?_getAD+1,f
  4522  1D17  0021               	movlb	1	; select bank1
  4523  1D18  081B               	movf	27,w	;volatile
  4524  1D19  0020               	movlb	0	; select bank0
  4525  1D1A  01A0               	clrf	?_getAD
  4526  1D1B  07A0               	addwf	?_getAD,f
  4527  1D1C  0008               	return
  4528  1D1D                     __end_of_getAD:	
  4529                           
  4530                           	psect	text7
  4531  1E1E                     __ptext7:	
  4532 ;; *************** function _WDT_Main *****************
  4533 ;; Defined at:
  4534 ;;		line 899 in file "../src/MCU_B1.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;		None
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;		None               void
  4541 ;; Registers used:
  4542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    6
  4555 ;; This function calls:
  4556 ;;		_WDT_Clearing
  4557 ;; This function is called by:
  4558 ;;		_main
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           
  4563                           ;psect for function _WDT_Main
  4564  1E1E                     _WDT_Main:	
  4565                           
  4566                           ;MCU_B1.c: 900: if (WDT->Enable == 1) {
  4567                           
  4568                           ;incstack = 0
  4569                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4570  1E1E  0021               	movlb	1	; select bank1
  4571  1E1F  0866               	movf	_WDT^(0+128),w
  4572  1E20  0086               	movwf	6
  4573  1E21  0187               	clrf	7
  4574  1E22  1C01               	btfss	1,0
  4575  1E23  0008               	return
  4576                           
  4577                           ;MCU_B1.c: 901: if (WDT->Count-- > 0) {
  4578  1E24  0A66               	incf	_WDT^(0+128),w
  4579  1E25  0086               	movwf	6
  4580  1E26  0187               	clrf	7
  4581  1E27  3001               	movlw	1
  4582  1E28  0281               	subwf	1,f
  4583  1E29  0801               	movf	1,w
  4584  1E2A  3AFF               	xorlw	255
  4585  1E2B  1903               	skipnz
  4586  1E2C  0008               	return
  4587                           
  4588                           ;MCU_B1.c: 902: WDT->Count = 10;
  4589  1E2D  300A               	movlw	10
  4590  1E2E  0020               	movlb	0	; select bank0
  4591  1E2F  00A0               	movwf	??_WDT_Main
  4592  1E30  0021               	movlb	1	; select bank1
  4593  1E31  0A66               	incf	_WDT^(0+128),w
  4594  1E32  0086               	movwf	6
  4595  1E33  0187               	clrf	7
  4596  1E34  0020               	movlb	0	; select bank0
  4597  1E35  0820               	movf	??_WDT_Main,w
  4598  1E36  0081               	movwf	1
  4599                           
  4600                           ;MCU_B1.c: 903: WDT_Clearing();
  4601  1E37  3180  2002         	fcall	_WDT_Clearing
  4602  1E39  0008               	return
  4603  1E3A                     __end_of_WDT_Main:	
  4604                           
  4605                           	psect	text8
  4606  0002                     __ptext8:	
  4607 ;; *************** function _WDT_Clearing *****************
  4608 ;; Defined at:
  4609 ;;		line 909 in file "../src/MCU_B1.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;		None               void
  4616 ;; Registers used:
  4617 ;;		None
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:    5
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_WDT_Main
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           
  4638                           ;psect for function _WDT_Clearing
  4639  0002                     _WDT_Clearing:	
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _WDT_Clearing: []
  4643  0002  0064               	clrwdt	;# 
  4644  0003  0008               	return
  4645  0004                     __end_of_WDT_Clearing:	
  4646                           
  4647                           	psect	text9
  4648  1AE7                     __ptext9:	
  4649 ;; *************** function _Temp_Main *****************
  4650 ;; Defined at:
  4651 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4669 ;;Total ram usage:        0 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; Hardware stack levels required when called:   11
  4672 ;; This function calls:
  4673 ;;		_setTemp_Main
  4674 ;; This function is called by:
  4675 ;;		_main
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           
  4680                           ;psect for function _Temp_Main
  4681  1AE7                     _Temp_Main:	
  4682                           
  4683                           ;OverTemperature_B1.c: 60: setTemp_Main();
  4684                           
  4685                           ;incstack = 0
  4686                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4687  1AE7  3183  237C         	fcall	_setTemp_Main
  4688  1AE9  0008               	return
  4689  1AEA                     __end_of_Temp_Main:	
  4690                           
  4691                           	psect	text10
  4692  037C                     __ptext10:	
  4693 ;; *************** function _setTemp_Main *****************
  4694 ;; Defined at:
  4695 ;;		line 64 in file "../src/OverTemperature_B1.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;		None               void
  4702 ;; Registers used:
  4703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4704 ;; Tracked objects:
  4705 ;;		On entry : 0/0
  4706 ;;		On exit  : 0/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;Total ram usage:        3 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:   10
  4716 ;; This function calls:
  4717 ;;		_setOverTemp_Exceptions
  4718 ;; This function is called by:
  4719 ;;		_Temp_Main
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           
  4724                           ;psect for function _setTemp_Main
  4725  037C                     _setTemp_Main:	
  4726                           
  4727                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4731  037C  0021               	movlb	1	; select bank1
  4732  037D  0843               	movf	_Temp^(0+128),w
  4733  037E  0086               	movwf	6
  4734  037F  3001               	movlw	1	; select bank2/3
  4735  0380  0087               	movwf	7
  4736  0381  1C01               	btfss	1,0
  4737  0382  0008               	return
  4738                           
  4739                           ;OverTemperature_B1.c: 67: {
  4740                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  4741  0383  0843               	movf	_Temp^(0+128),w
  4742  0384  0086               	movwf	6
  4743  0385  3001               	movlw	1	; select bank2/3
  4744  0386  0087               	movwf	7
  4745  0387  1901               	btfsc	1,2
  4746  0388  2BB5               	goto	l7177
  4747                           
  4748                           ;OverTemperature_B1.c: 69: {
  4749                           ;OverTemperature_B1.c: 70: Temp->Time++;
  4750  0389  0A43               	incf	_Temp^(0+128),w
  4751  038A  0086               	movwf	6
  4752  038B  3001               	movlw	1	; select bank2/3
  4753  038C  0087               	movwf	7
  4754  038D  3001               	movlw	1
  4755  038E  0781               	addwf	1,f
  4756  038F  3141               	addfsr 1,1
  4757  0390  1803               	skipnc
  4758  0391  0A81               	incf	1,f
  4759                           
  4760                           ;OverTemperature_B1.c: 72: {
  4761                           ;OverTemperature_B1.c: 73: if(1 && 1)
  4762  0392  0A43               	incf	_Temp^(0+128),w
  4763  0393  0086               	movwf	6
  4764  0394  3001               	movlw	1	; select bank2/3
  4765  0395  0087               	movwf	7
  4766  0396  3F40               	moviw [0]fsr1
  4767  0397  0020               	movlb	0	; select bank0
  4768  0398  00B0               	movwf	??_setTemp_Main
  4769  0399  3F41               	moviw [1]fsr1
  4770  039A  00B1               	movwf	??_setTemp_Main+1
  4771  039B  3001               	movlw	1
  4772  039C  0231               	subwf	??_setTemp_Main+1,w
  4773  039D  30F4               	movlw	244
  4774  039E  1903               	skipnz
  4775  039F  0230               	subwf	??_setTemp_Main,w
  4776  03A0  1C03               	skipc
  4777  03A1  0008               	return
  4778                           
  4779                           ;OverTemperature_B1.c: 74: {
  4780                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  4781  03A2  0021               	movlb	1	; select bank1
  4782  03A3  0A43               	incf	_Temp^(0+128),w
  4783  03A4  0086               	movwf	6
  4784  03A5  3001               	movlw	1	; select bank2/3
  4785  03A6  0087               	movwf	7
  4786  03A7  3000               	movlw	0
  4787  03A8  3FC0               	movwi [0]fsr1
  4788  03A9  3FC1               	movwi [1]fsr1
  4789                           
  4790                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  4791  03AA  0843               	movf	_Temp^(0+128),w
  4792  03AB  0086               	movwf	6
  4793  03AC  3001               	movlw	1	; select bank2/3
  4794  03AD  0087               	movwf	7
  4795  03AE  1501               	bsf	1,2
  4796                           
  4797                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  4798  03AF  0843               	movf	_Temp^(0+128),w
  4799  03B0  0086               	movwf	6
  4800  03B1  3001               	movlw	1	; select bank2/3
  4801  03B2  0087               	movwf	7
  4802  03B3  1201               	bcf	1,4
  4803                           
  4804                           ;OverTemperature_B1.c: 78: }
  4805  03B4  0008               	return
  4806  03B5                     l7177:	
  4807                           ;OverTemperature_B1.c: 82: }
  4808                           ;OverTemperature_B1.c: 83: }
  4809                           ;OverTemperature_B1.c: 84: }
  4810                           
  4811                           ;OverTemperature_B1.c: 79: else
  4812                           ;OverTemperature_B1.c: 80: {
  4813                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  4814                           
  4815                           
  4816                           ;OverTemperature_B1.c: 85: else
  4817                           ;OverTemperature_B1.c: 86: {
  4818                           ;OverTemperature_B1.c: 87: Temp->Time++;
  4819  03B5  0A43               	incf	_Temp^(0+128),w
  4820  03B6  0086               	movwf	6
  4821  03B7  3001               	movlw	1	; select bank2/3
  4822  03B8  0087               	movwf	7
  4823  03B9  3001               	movlw	1
  4824  03BA  0781               	addwf	1,f
  4825  03BB  3141               	addfsr 1,1
  4826  03BC  1803               	skipnc
  4827  03BD  0A81               	incf	1,f
  4828                           
  4829                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  4830  03BE  0A43               	incf	_Temp^(0+128),w
  4831  03BF  0086               	movwf	6
  4832  03C0  3001               	movlw	1	; select bank2/3
  4833  03C1  0087               	movwf	7
  4834  03C2  3F40               	moviw [0]fsr1
  4835  03C3  0020               	movlb	0	; select bank0
  4836  03C4  00B0               	movwf	??_setTemp_Main
  4837  03C5  3F41               	moviw [1]fsr1
  4838  03C6  00B1               	movwf	??_setTemp_Main+1
  4839  03C7  3000               	movlw	0
  4840  03C8  0231               	subwf	??_setTemp_Main+1,w
  4841  03C9  3004               	movlw	4
  4842  03CA  1903               	skipnz
  4843  03CB  0230               	subwf	??_setTemp_Main,w
  4844  03CC  1C03               	skipc
  4845  03CD  0008               	return
  4846                           
  4847                           ;OverTemperature_B1.c: 89: {
  4848                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  4849  03CE  0021               	movlb	1	; select bank1
  4850  03CF  0A43               	incf	_Temp^(0+128),w
  4851  03D0  0086               	movwf	6
  4852  03D1  3001               	movlw	1	; select bank2/3
  4853  03D2  0087               	movwf	7
  4854  03D3  3000               	movlw	0
  4855  03D4  3FC0               	movwi [0]fsr1
  4856  03D5  3FC1               	movwi [1]fsr1
  4857                           
  4858                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  4859  03D6  0843               	movf	_Temp^(0+128),w
  4860  03D7  0086               	movwf	6
  4861  03D8  3001               	movlw	1	; select bank2/3
  4862  03D9  0087               	movwf	7
  4863  03DA  1101               	bcf	1,2
  4864                           
  4865                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  4866  03DB  0843               	movf	_Temp^(0+128),w
  4867  03DC  3E0A               	addlw	10
  4868  03DD  0086               	movwf	6
  4869  03DE  3001               	movlw	1	; select bank2/3
  4870  03DF  0087               	movwf	7
  4871  03E0  0843               	movf	_Temp^(0+128),w
  4872  03E1  3E06               	addlw	6
  4873  03E2  0084               	movwf	4
  4874  03E3  3001               	movlw	1	; select bank2/3
  4875  03E4  0085               	movwf	5
  4876  03E5  3F40               	moviw [0]fsr1
  4877  03E6  3F80               	movwi [0]fsr0
  4878  03E7  3F41               	moviw [1]fsr1
  4879  03E8  3F81               	movwi [1]fsr0
  4880                           
  4881                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  4882  03E9  0843               	movf	_Temp^(0+128),w
  4883  03EA  0086               	movwf	6
  4884  03EB  3001               	movlw	1	; select bank2/3
  4885  03EC  0087               	movwf	7
  4886  03ED  1C81               	btfss	1,1
  4887  03EE  2C20               	goto	l7199
  4888                           
  4889                           ;OverTemperature_B1.c: 94: {
  4890                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  4891  03EF  0843               	movf	_Temp^(0+128),w
  4892  03F0  3E06               	addlw	6
  4893  03F1  0086               	movwf	6
  4894  03F2  3001               	movlw	1	; select bank2/3
  4895  03F3  0087               	movwf	7
  4896  03F4  3F40               	moviw [0]fsr1
  4897  03F5  0020               	movlb	0	; select bank0
  4898  03F6  00B0               	movwf	??_setTemp_Main
  4899  03F7  3F41               	moviw [1]fsr1
  4900  03F8  00B1               	movwf	??_setTemp_Main+1
  4901  03F9  3002               	movlw	2
  4902  03FA  0231               	subwf	??_setTemp_Main+1,w
  4903  03FB  3058               	movlw	88
  4904  03FC  1903               	skipnz
  4905  03FD  0230               	subwf	??_setTemp_Main,w
  4906  03FE  1C03               	skipc
  4907  03FF  2C51               	goto	l7209
  4908                           
  4909                           ;OverTemperature_B1.c: 96: {
  4910                           ;OverTemperature_B1.c: 97: Temp->Count++;
  4911  0400  3001               	movlw	1
  4912  0401  00B0               	movwf	??_setTemp_Main
  4913  0402  0021               	movlb	1	; select bank1
  4914  0403  0843               	movf	_Temp^(0+128),w
  4915  0404  3E03               	addlw	3
  4916  0405  0086               	movwf	6
  4917  0406  3001               	movlw	1	; select bank2/3
  4918  0407  0087               	movwf	7
  4919  0408  0020               	movlb	0	; select bank0
  4920  0409  0830               	movf	??_setTemp_Main,w
  4921  040A  0781               	addwf	1,f
  4922                           
  4923                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  4924  040B  0021               	movlb	1	; select bank1
  4925  040C  0843               	movf	_Temp^(0+128),w
  4926  040D  3E03               	addlw	3
  4927  040E  0086               	movwf	6
  4928  040F  3001               	movlw	1	; select bank2/3
  4929  0410  0087               	movwf	7
  4930  0411  3003               	movlw	3
  4931  0412  0201               	subwf	1,w
  4932  0413  1C03               	skipc
  4933  0414  2C58               	goto	l7211
  4934                           
  4935                           ;OverTemperature_B1.c: 99: {
  4936                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  4937  0415  0843               	movf	_Temp^(0+128),w
  4938  0416  3E03               	addlw	3
  4939  0417  0086               	movwf	6
  4940  0418  3001               	movlw	1	; select bank2/3
  4941  0419  0087               	movwf	7
  4942  041A  0181               	clrf	1
  4943                           
  4944                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  4945  041B  3000               	movlw	0
  4946  041C  3192  22FC  3183   	fcall	_setOverTemp_Exceptions
  4947                           
  4948                           ;OverTemperature_B1.c: 102: }
  4949                           ;OverTemperature_B1.c: 103: }
  4950  041F  2C58               	goto	l7211
  4951  0420                     l7199:	
  4952                           ;OverTemperature_B1.c: 107: }
  4953                           ;OverTemperature_B1.c: 108: }
  4954                           
  4955                           ;OverTemperature_B1.c: 104: else
  4956                           ;OverTemperature_B1.c: 105: {
  4957                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  4958                           
  4959                           
  4960                           ;OverTemperature_B1.c: 109: else
  4961                           ;OverTemperature_B1.c: 110: {
  4962                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  4963  0420  0843               	movf	_Temp^(0+128),w
  4964  0421  3E06               	addlw	6
  4965  0422  0086               	movwf	6
  4966  0423  3001               	movlw	1	; select bank2/3
  4967  0424  0087               	movwf	7
  4968  0425  3F40               	moviw [0]fsr1
  4969  0426  0020               	movlb	0	; select bank0
  4970  0427  00B0               	movwf	??_setTemp_Main
  4971  0428  3F41               	moviw [1]fsr1
  4972  0429  00B1               	movwf	??_setTemp_Main+1
  4973  042A  3002               	movlw	2
  4974  042B  0231               	subwf	??_setTemp_Main+1,w
  4975  042C  3027               	movlw	39
  4976  042D  1903               	skipnz
  4977  042E  0230               	subwf	??_setTemp_Main,w
  4978  042F  1803               	skipnc
  4979  0430  2C51               	goto	l7209
  4980                           
  4981                           ;OverTemperature_B1.c: 112: {
  4982                           ;OverTemperature_B1.c: 113: Temp->Count++;
  4983  0431  3001               	movlw	1
  4984  0432  00B0               	movwf	??_setTemp_Main
  4985  0433  0021               	movlb	1	; select bank1
  4986  0434  0843               	movf	_Temp^(0+128),w
  4987  0435  3E03               	addlw	3
  4988  0436  0086               	movwf	6
  4989  0437  3001               	movlw	1	; select bank2/3
  4990  0438  0087               	movwf	7
  4991  0439  0020               	movlb	0	; select bank0
  4992  043A  0830               	movf	??_setTemp_Main,w
  4993  043B  0781               	addwf	1,f
  4994                           
  4995                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  4996  043C  0021               	movlb	1	; select bank1
  4997  043D  0843               	movf	_Temp^(0+128),w
  4998  043E  3E03               	addlw	3
  4999  043F  0086               	movwf	6
  5000  0440  3001               	movlw	1	; select bank2/3
  5001  0441  0087               	movwf	7
  5002  0442  3003               	movlw	3
  5003  0443  0201               	subwf	1,w
  5004  0444  1C03               	skipc
  5005  0445  2C58               	goto	l7211
  5006                           
  5007                           ;OverTemperature_B1.c: 115: {
  5008                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5009  0446  0843               	movf	_Temp^(0+128),w
  5010  0447  3E03               	addlw	3
  5011  0448  0086               	movwf	6
  5012  0449  3001               	movlw	1	; select bank2/3
  5013  044A  0087               	movwf	7
  5014  044B  0181               	clrf	1
  5015                           
  5016                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5017  044C  3001               	movlw	1
  5018  044D  3192  22FC  3183   	fcall	_setOverTemp_Exceptions
  5019                           
  5020                           ;OverTemperature_B1.c: 118: }
  5021                           ;OverTemperature_B1.c: 119: }
  5022  0450  2C58               	goto	l7211
  5023  0451                     l7209:	
  5024                           
  5025                           ;OverTemperature_B1.c: 120: else
  5026                           ;OverTemperature_B1.c: 121: {
  5027                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5028  0451  0021               	movlb	1	; select bank1
  5029  0452  0843               	movf	_Temp^(0+128),w
  5030  0453  3E03               	addlw	3
  5031  0454  0086               	movwf	6
  5032  0455  3001               	movlw	1	; select bank2/3
  5033  0456  0087               	movwf	7
  5034  0457  0181               	clrf	1
  5035  0458                     l7211:	
  5036                           
  5037                           ;OverTemperature_B1.c: 123: }
  5038                           ;OverTemperature_B1.c: 124: }
  5039                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5040  0458  0021               	movlb	1	; select bank1
  5041  0459  0843               	movf	_Temp^(0+128),w
  5042  045A  0086               	movwf	6
  5043  045B  3001               	movlw	1	; select bank2/3
  5044  045C  0087               	movwf	7
  5045  045D  1881               	btfsc	1,1
  5046  045E  2C64               	goto	l7215
  5047                           
  5048                           ;OverTemperature_B1.c: 126: {
  5049                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5050  045F  0843               	movf	_Temp^(0+128),w
  5051  0460  0086               	movwf	6
  5052  0461  3001               	movlw	1	; select bank2/3
  5053  0462  0087               	movwf	7
  5054  0463  1601               	bsf	1,4
  5055  0464                     l7215:	
  5056                           
  5057                           ;OverTemperature_B1.c: 128: }
  5058                           ;OverTemperature_B1.c: 129: product->Data[24]=Temp->AD >> 8;
  5059  0464  0843               	movf	_Temp^(0+128),w
  5060  0465  3E06               	addlw	6
  5061  0466  0086               	movwf	6
  5062  0467  3001               	movlw	1	; select bank2/3
  5063  0468  0087               	movwf	7
  5064  0469  3F40               	moviw [0]fsr1
  5065  046A  0020               	movlb	0	; select bank0
  5066  046B  00B0               	movwf	??_setTemp_Main
  5067  046C  3F41               	moviw [1]fsr1
  5068  046D  00B1               	movwf	??_setTemp_Main+1
  5069  046E  0831               	movf	??_setTemp_Main+1,w
  5070  046F  00B2               	movwf	??_setTemp_Main+2
  5071  0470  087D               	movf	_product,w
  5072  0471  3E18               	addlw	24
  5073  0472  0086               	movwf	6
  5074  0473  3002               	movlw	2	; select bank4/5
  5075  0474  0087               	movwf	7
  5076  0475  0832               	movf	??_setTemp_Main+2,w
  5077  0476  0081               	movwf	1
  5078                           
  5079                           ;OverTemperature_B1.c: 130: product->Data[25]=Temp->AD;
  5080  0477  0021               	movlb	1	; select bank1
  5081  0478  0843               	movf	_Temp^(0+128),w
  5082  0479  3E06               	addlw	6
  5083  047A  0086               	movwf	6
  5084  047B  3001               	movlw	1	; select bank2/3
  5085  047C  0087               	movwf	7
  5086  047D  0801               	movf	1,w
  5087  047E  0020               	movlb	0	; select bank0
  5088  047F  00B0               	movwf	??_setTemp_Main
  5089  0480  087D               	movf	_product,w
  5090  0481  3E19               	addlw	25
  5091  0482  0086               	movwf	6
  5092  0483  3002               	movlw	2	; select bank4/5
  5093  0484  0087               	movwf	7
  5094  0485  0830               	movf	??_setTemp_Main,w
  5095  0486  0081               	movwf	1
  5096                           
  5097                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5098  0487  0021               	movlb	1	; select bank1
  5099  0488  0843               	movf	_Temp^(0+128),w
  5100  0489  3E08               	addlw	8
  5101  048A  0086               	movwf	6
  5102  048B  3001               	movlw	1	; select bank2/3
  5103  048C  0087               	movwf	7
  5104  048D  3000               	movlw	0
  5105  048E  3FC0               	movwi [0]fsr1
  5106  048F  3FC1               	movwi [1]fsr1
  5107                           
  5108                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5109  0490  0843               	movf	_Temp^(0+128),w
  5110  0491  3E0A               	addlw	10
  5111  0492  0086               	movwf	6
  5112  0493  3001               	movlw	1	; select bank2/3
  5113  0494  0087               	movwf	7
  5114  0495  3000               	movlw	0
  5115  0496  3FC0               	movwi [0]fsr1
  5116  0497  3FC1               	movwi [1]fsr1
  5117  0498  0008               	return
  5118  0499                     __end_of_setTemp_Main:	
  5119                           
  5120                           	psect	text11
  5121  12FC                     __ptext11:	
  5122 ;; *************** function _setOverTemp_Exceptions *****************
  5123 ;; Defined at:
  5124 ;;		line 138 in file "../src/OverTemperature_B1.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  command         1    wreg     unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  command         1   15[BANK0 ] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;		None               void
  5131 ;; Registers used:
  5132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5142 ;;Total ram usage:        2 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    9
  5145 ;; This function calls:
  5146 ;;		_DimmerLights_Exceptions
  5147 ;;		_setBuz
  5148 ;;		_setLED
  5149 ;;		_setRF_Enable
  5150 ;;		_setSw_Enable
  5151 ;; This function is called by:
  5152 ;;		_setTemp_Main
  5153 ;; This function uses a non-reentrant model
  5154 ;;
  5155                           
  5156                           
  5157                           ;psect for function _setOverTemp_Exceptions
  5158  12FC                     _setOverTemp_Exceptions:	
  5159                           
  5160                           ;incstack = 0
  5161                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5162                           ;setOverTemp_Exceptions@command stored from wreg
  5163  12FC  0020               	movlb	0	; select bank0
  5164  12FD  00AF               	movwf	setOverTemp_Exceptions@command
  5165                           
  5166                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5167  12FE  0021               	movlb	1	; select bank1
  5168  12FF  0843               	movf	_Temp^(0+128),w
  5169  1300  0086               	movwf	6
  5170  1301  3001               	movlw	1	; select bank2/3
  5171  1302  0087               	movwf	7
  5172  1303  0020               	movlb	0	; select bank0
  5173  1304  082F               	movf	setOverTemp_Exceptions@command,w
  5174  1305  1081               	bcf	1,1
  5175  1306  1D03               	skipz
  5176  1307  1481               	bsf	1,1
  5177                           
  5178                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5179  1308  092F               	comf	setOverTemp_Exceptions@command,w
  5180  1309  3901               	andlw	1
  5181  130A  00AE               	movwf	??_setOverTemp_Exceptions
  5182  130B  0021               	movlb	1	; select bank1
  5183  130C  0843               	movf	_Temp^(0+128),w
  5184  130D  0086               	movwf	6
  5185  130E  3001               	movlw	1	; select bank2/3
  5186  130F  0087               	movwf	7
  5187  1310  0020               	movlb	0	; select bank0
  5188  1311  0EAE               	swapf	??_setOverTemp_Exceptions,f
  5189  1312  0801               	movf	1,w
  5190  1313  062E               	xorwf	??_setOverTemp_Exceptions,w
  5191  1314  39EF               	andlw	-17
  5192  1315  062E               	xorwf	??_setOverTemp_Exceptions,w
  5193  1316  0081               	movwf	1
  5194                           
  5195                           ;OverTemperature_B1.c: 142: if(command)
  5196  1317  082F               	movf	setOverTemp_Exceptions@command,w
  5197  1318  1903               	btfsc	3,2
  5198  1319  2B1F               	goto	l6583
  5199                           
  5200                           ;OverTemperature_B1.c: 143: {
  5201                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5202  131A  3001               	movlw	1
  5203  131B  3197  2792  3192   	fcall	_DimmerLights_Exceptions
  5204                           
  5205                           ;OverTemperature_B1.c: 148: }
  5206  131E  2B28               	goto	l1910
  5207  131F                     l6583:	
  5208                           
  5209                           ;OverTemperature_B1.c: 149: else
  5210                           ;OverTemperature_B1.c: 150: {
  5211                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5212  131F  3064               	movlw	100
  5213  1320  0020               	movlb	0	; select bank0
  5214  1321  00A9               	movwf	setBuz@time
  5215  1322  3000               	movlw	0
  5216  1323  00AA               	movwf	setBuz@time+1
  5217  1324  3002               	movlw	2
  5218  1325  318B  23D2  3192   	fcall	_setBuz
  5219  1328                     l1910:	
  5220                           
  5221                           ;OverTemperature_B1.c: 152: }
  5222                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5223  1328  0020               	movlb	0	; select bank0
  5224  1329  082F               	movf	setOverTemp_Exceptions@command,w
  5225  132A  3E0A               	addlw	10
  5226  132B  00AE               	movwf	??_setOverTemp_Exceptions
  5227  132C  082E               	movf	??_setOverTemp_Exceptions,w
  5228  132D  00A2               	movwf	setLED@command
  5229  132E  3063               	movlw	99
  5230  132F  3188  2059  3192   	fcall	_setLED
  5231                           
  5232                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5233  1332  0020               	movlb	0	; select bank0
  5234  1333  092F               	comf	setOverTemp_Exceptions@command,w
  5235  1334  3901               	andlw	1
  5236  1335  3190  2008  3192   	fcall	_setSw_Enable
  5237                           
  5238                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5239  1338  0020               	movlb	0	; select bank0
  5240  1339  092F               	comf	setOverTemp_Exceptions@command,w
  5241  133A  3901               	andlw	1
  5242  133B  00AE               	movwf	??_setOverTemp_Exceptions
  5243  133C  082E               	movf	??_setOverTemp_Exceptions,w
  5244  133D  00A2               	movwf	setRF_Enable@command
  5245  133E  3001               	movlw	1
  5246  133F  319F  27D9         	fcall	_setRF_Enable
  5247  1341  0008               	return
  5248  1342                     __end_of_setOverTemp_Exceptions:	
  5249                           
  5250                           	psect	text12
  5251  1008                     __ptext12:	
  5252 ;; *************** function _setSw_Enable *****************
  5253 ;; Defined at:
  5254 ;;		line 85 in file "../src/Switch_B1.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;  command         1    wreg     unsigned char 
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  command         1    2[BANK0 ] unsigned char 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;		None               void
  5261 ;; Registers used:
  5262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;Total ram usage:        1 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    6
  5275 ;; This function calls:
  5276 ;;		_SwPointSelect
  5277 ;; This function is called by:
  5278 ;;		_my_Main
  5279 ;;		_setOverTemp_Exceptions
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _setSw_Enable
  5285  1008                     _setSw_Enable:	
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5289                           ;setSw_Enable@command stored from wreg
  5290  1008  0020               	movlb	0	; select bank0
  5291  1009  00A2               	movwf	setSw_Enable@command
  5292                           
  5293                           ;Switch_B1.c: 88: SwPointSelect(1);
  5294  100A  3001               	movlw	1
  5295  100B  319E  2674  3190   	fcall	_SwPointSelect
  5296                           
  5297                           ;Switch_B1.c: 89: Sw->Enable = command;
  5298  100E  087B               	movf	_Sw,w
  5299  100F  0086               	movwf	6
  5300  1010  3001               	movlw	1	; select bank2/3
  5301  1011  0087               	movwf	7
  5302  1012  0020               	movlb	0	; select bank0
  5303  1013  0822               	movf	setSw_Enable@command,w
  5304  1014  1001               	bcf	1,0
  5305  1015  1D03               	skipz
  5306  1016  1401               	bsf	1,0
  5307                           
  5308                           ;Switch_B1.c: 93: SwPointSelect(2);
  5309  1017  3002               	movlw	2
  5310  1018  319E  2674  3190   	fcall	_SwPointSelect
  5311                           
  5312                           ;Switch_B1.c: 94: Sw->Enable = command;
  5313  101B  087B               	movf	_Sw,w
  5314  101C  0086               	movwf	6
  5315  101D  3001               	movlw	1	; select bank2/3
  5316  101E  0087               	movwf	7
  5317  101F  0020               	movlb	0	; select bank0
  5318  1020  0822               	movf	setSw_Enable@command,w
  5319  1021  1001               	bcf	1,0
  5320  1022  1D03               	skipz
  5321  1023  1401               	bsf	1,0
  5322                           
  5323                           ;Switch_B1.c: 98: SwPointSelect(3);
  5324  1024  3003               	movlw	3
  5325  1025  319E  2674         	fcall	_SwPointSelect
  5326                           
  5327                           ;Switch_B1.c: 99: Sw->Enable = command;
  5328  1027  087B               	movf	_Sw,w
  5329  1028  0086               	movwf	6
  5330  1029  3001               	movlw	1	; select bank2/3
  5331  102A  0087               	movwf	7
  5332  102B  0020               	movlb	0	; select bank0
  5333  102C  0822               	movf	setSw_Enable@command,w
  5334  102D  1001               	bcf	1,0
  5335  102E  1D03               	skipz
  5336  102F  1401               	bsf	1,0
  5337  1030  0008               	return
  5338  1031                     __end_of_setSw_Enable:	
  5339                           
  5340                           	psect	text13
  5341  1FD9                     __ptext13:	
  5342 ;; *************** function _setRF_Enable *****************
  5343 ;; Defined at:
  5344 ;;		line 202 in file "../src/RF_Control_B1.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  rf              1    wreg     unsigned char 
  5347 ;;  command         1    2[BANK0 ] unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  rf              1    3[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;Total ram usage:        2 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    6
  5366 ;; This function calls:
  5367 ;;		_RfPointSelect
  5368 ;; This function is called by:
  5369 ;;		_my_Main
  5370 ;;		_setOverTemp_Exceptions
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           
  5375                           ;psect for function _setRF_Enable
  5376  1FD9                     _setRF_Enable:	
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5380                           ;setRF_Enable@rf stored from wreg
  5381  1FD9  0020               	movlb	0	; select bank0
  5382  1FDA  00A3               	movwf	setRF_Enable@rf
  5383                           
  5384                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  5385  1FDB  0823               	movf	setRF_Enable@rf,w
  5386  1FDC  319B  23AA         	fcall	_RfPointSelect
  5387                           
  5388                           ;RF_Control_B1.c: 204: RF->Enable = command;
  5389  1FDE  087A               	movf	_RF,w
  5390  1FDF  0086               	movwf	6
  5391  1FE0  0187               	clrf	7
  5392  1FE1  0020               	movlb	0	; select bank0
  5393  1FE2  0822               	movf	setRF_Enable@command,w
  5394  1FE3  1001               	bcf	1,0
  5395  1FE4  1D03               	skipz
  5396  1FE5  1401               	bsf	1,0
  5397                           
  5398                           ;RF_Control_B1.c: 205: RF->Learn = 0;
  5399  1FE6  087A               	movf	_RF,w
  5400  1FE7  0086               	movwf	6
  5401  1FE8  0187               	clrf	7
  5402  1FE9  1301               	bcf	1,6
  5403                           
  5404                           ;RF_Control_B1.c: 206: RF->TransceiveGO = 0;
  5405  1FEA  087A               	movf	_RF,w
  5406  1FEB  0086               	movwf	6
  5407  1FEC  0187               	clrf	7
  5408  1FED  1101               	bcf	1,2
  5409                           
  5410                           ;RF_Control_B1.c: 207: RF->RxStatus = 0;
  5411  1FEE  087A               	movf	_RF,w
  5412  1FEF  0086               	movwf	6
  5413  1FF0  0187               	clrf	7
  5414  1FF1  1181               	bcf	1,3
  5415                           
  5416                           ;RF_Control_B1.c: 208: RF->ReceiveGO = 0;
  5417  1FF2  087A               	movf	_RF,w
  5418  1FF3  0086               	movwf	6
  5419  1FF4  0187               	clrf	7
  5420  1FF5  1081               	bcf	1,1
  5421                           
  5422                           ;RF_Control_B1.c: 209: RF->DebounceTime = 0;
  5423  1FF6  087A               	movf	_RF,w
  5424  1FF7  3E04               	addlw	4
  5425  1FF8  0086               	movwf	6
  5426  1FF9  0187               	clrf	7
  5427  1FFA  0181               	clrf	1
  5428                           
  5429                           ;RF_Control_B1.c: 210: RF->Debounce = 0;
  5430  1FFB  087A               	movf	_RF,w
  5431  1FFC  0086               	movwf	6
  5432  1FFD  0187               	clrf	7
  5433  1FFE  1281               	bcf	1,5
  5434  1FFF  0008               	return
  5435  2000                     __end_of_setRF_Enable:	
  5436                           
  5437                           	psect	text14
  5438  1792                     __ptext14:	
  5439 ;; *************** function _DimmerLights_Exceptions *****************
  5440 ;; Defined at:
  5441 ;;		line 513 in file "../src/Dimmer_B1.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  status          1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  status          1   13[BANK0 ] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;Total ram usage:        1 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    8
  5462 ;; This function calls:
  5463 ;;		_getDimmerLights_StatusFlag
  5464 ;;		_setBuz
  5465 ;;		_setDimmerLights_ERROR
  5466 ;;		_setDimmerLights_TriggerERROR
  5467 ;; This function is called by:
  5468 ;;		_setOverTemp_Exceptions
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function _DimmerLights_Exceptions
  5474  1792                     _DimmerLights_Exceptions:	
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5478                           ;DimmerLights_Exceptions@status stored from wreg
  5479  1792  0020               	movlb	0	; select bank0
  5480  1793  00AD               	movwf	DimmerLights_Exceptions@status
  5481                           
  5482                           ;Dimmer_B1.c: 514: if (status == 1) {
  5483  1794  082D               	movf	DimmerLights_Exceptions@status,w
  5484  1795  3A01               	xorlw	1
  5485  1796  1D03               	skipz
  5486  1797  2FA8               	goto	l6259
  5487                           
  5488                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  5489  1798  319C  24B7  3197   	fcall	_getDimmerLights_StatusFlag
  5490  179B  3A01               	xorlw	1
  5491  179C  1D03               	skipz
  5492  179D  2FC0               	goto	l6265
  5493                           
  5494                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  5495  179E  302C               	movlw	44
  5496  179F  0020               	movlb	0	; select bank0
  5497  17A0  00A9               	movwf	setBuz@time
  5498  17A1  3001               	movlw	1
  5499  17A2  00AA               	movwf	setBuz@time+1
  5500  17A3  300A               	movlw	10
  5501  17A4  318B  23D2  3197   	fcall	_setBuz
  5502  17A7  2FC0               	goto	l6265
  5503  17A8                     l6259:	
  5504                           ;Dimmer_B1.c: 528: } else if (status == 2)
  5505                           
  5506                           ;Dimmer_B1.c: 526: setDimmerLights_ERROR(3);
  5507                           
  5508                           ;Dimmer_B1.c: 523: setDimmerLights_ERROR(2);
  5509                           
  5510                           ;Dimmer_B1.c: 517: }
  5511                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  5512                           
  5513  17A8  0020               	movlb	0	; select bank0
  5514  17A9  082D               	movf	DimmerLights_Exceptions@status,w
  5515  17AA  3A02               	xorlw	2
  5516  17AB  1D03               	skipz
  5517  17AC  2FBB               	goto	l6263
  5518                           
  5519                           ;Dimmer_B1.c: 529: {
  5520                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  5521  17AD  302C               	movlw	44
  5522  17AE  00A9               	movwf	setBuz@time
  5523  17AF  3001               	movlw	1
  5524  17B0  00AA               	movwf	setBuz@time+1
  5525  17B1  3005               	movlw	5
  5526  17B2  318B  23D2  3197   	fcall	_setBuz
  5527                           
  5528                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  5529  17B5  0021               	movlb	1	; select bank1
  5530  17B6  0A39               	incf	_Dimmer^(0+128),w
  5531  17B7  0086               	movwf	6
  5532  17B8  0187               	clrf	7
  5533  17B9  0801               	movf	1,w
  5534  17BA  2FC9               	goto	L1
  5535  17BB                     l6263:	
  5536                           ;Dimmer_B1.c: 532: } else if (status == 3)
  5537                           
  5538  17BB  0020               	movlb	0	; select bank0
  5539  17BC  082D               	movf	DimmerLights_Exceptions@status,w
  5540  17BD  3A03               	xorlw	3
  5541  17BE  1D03               	skipz
  5542  17BF  2FCC               	goto	l877
  5543  17C0                     l6265:	
  5544                           
  5545                           ;Dimmer_B1.c: 533: {
  5546                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  5547  17C0  3001               	movlw	1
  5548  17C1  3194  241D  3197   	fcall	_setDimmerLights_ERROR
  5549                           
  5550                           ;Dimmer_B1.c: 538: setDimmerLights_ERROR(2);
  5551  17C4  3002               	movlw	2
  5552  17C5  3194  241D  3197   	fcall	_setDimmerLights_ERROR
  5553                           
  5554                           ;Dimmer_B1.c: 541: setDimmerLights_ERROR(3);
  5555  17C8  3003               	movlw	3
  5556  17C9                     L1:	
  5557  17C9  3194  241D  3197   	fcall	_setDimmerLights_ERROR
  5558  17CC                     l877:	
  5559                           
  5560                           ;Dimmer_B1.c: 543: }
  5561                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  5562  17CC  0020               	movlb	0	; select bank0
  5563  17CD  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5564  17CE  3001               	movlw	1
  5565  17CF  3190  205B  3197   	fcall	_setDimmerLights_TriggerERROR
  5566                           
  5567                           ;Dimmer_B1.c: 549: setDimmerLights_TriggerERROR(2, 0);
  5568  17D2  0020               	movlb	0	; select bank0
  5569  17D3  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5570  17D4  3002               	movlw	2
  5571  17D5  3190  205B  3197   	fcall	_setDimmerLights_TriggerERROR
  5572                           
  5573                           ;Dimmer_B1.c: 552: setDimmerLights_TriggerERROR(3, 0);
  5574  17D8  0020               	movlb	0	; select bank0
  5575  17D9  01A2               	clrf	setDimmerLights_TriggerERROR@command
  5576  17DA  3003               	movlw	3
  5577  17DB  3190  205B  3197   	fcall	_setDimmerLights_TriggerERROR
  5578                           
  5579                           ;Dimmer_B1.c: 555: if (myMain->SelfTest == 0) {
  5580  17DE  0021               	movlb	1	; select bank1
  5581  17DF  0867               	movf	_myMain^(0+128),w
  5582  17E0  0086               	movwf	6
  5583  17E1  3001               	movlw	1	; select bank2/3
  5584  17E2  0087               	movwf	7
  5585  17E3  1B01               	btfsc	1,6
  5586  17E4  0008               	return
  5587                           
  5588                           ;Dimmer_B1.c: 556: myMain->i = 0;
  5589  17E5  0867               	movf	_myMain^(0+128),w
  5590  17E6  3E0E               	addlw	14
  5591  17E7  0086               	movwf	6
  5592  17E8  3001               	movlw	1	; select bank2/3
  5593  17E9  0087               	movwf	7
  5594  17EA  1001               	bcf	1,0
  5595                           
  5596                           ;Dimmer_B1.c: 557: myMain->j = 0;
  5597  17EB  0867               	movf	_myMain^(0+128),w
  5598  17EC  3E0E               	addlw	14
  5599  17ED  0086               	movwf	6
  5600  17EE  3001               	movlw	1	; select bank2/3
  5601  17EF  0087               	movwf	7
  5602  17F0  1081               	bcf	1,1
  5603                           
  5604                           ;Dimmer_B1.c: 558: myMain->k = 1;
  5605  17F1  0867               	movf	_myMain^(0+128),w
  5606  17F2  3E0E               	addlw	14
  5607  17F3  0086               	movwf	6
  5608  17F4  3001               	movlw	1	; select bank2/3
  5609  17F5  0087               	movwf	7
  5610  17F6  1501               	bsf	1,2
  5611                           
  5612                           ;Dimmer_B1.c: 559: myMain->Count2 = 0;
  5613  17F7  0867               	movf	_myMain^(0+128),w
  5614  17F8  3E07               	addlw	7
  5615  17F9  0086               	movwf	6
  5616  17FA  3001               	movlw	1	; select bank2/3
  5617  17FB  0087               	movwf	7
  5618  17FC  3000               	movlw	0
  5619  17FD  3FC0               	movwi [0]fsr1
  5620  17FE  3FC1               	movwi [1]fsr1
  5621  17FF  0008               	return
  5622  1800                     __end_of_DimmerLights_Exceptions:	
  5623                           
  5624                           	psect	text15
  5625  105B                     __ptext15:	
  5626 ;; *************** function _setDimmerLights_TriggerERROR *****************
  5627 ;; Defined at:
  5628 ;;		line 582 in file "../src/Dimmer_B1.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  lights          1    wreg     unsigned char 
  5631 ;;  command         1    2[BANK0 ] unsigned char 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  lights          1    3[BANK0 ] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5643 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;Total ram usage:        2 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    6
  5650 ;; This function calls:
  5651 ;;		_DimmerLightsPointSelect
  5652 ;; This function is called by:
  5653 ;;		_DimmerLights_Exceptions
  5654 ;; This function uses a non-reentrant model
  5655 ;;
  5656                           
  5657                           
  5658                           ;psect for function _setDimmerLights_TriggerERROR
  5659  105B                     _setDimmerLights_TriggerERROR:	
  5660                           
  5661                           ;incstack = 0
  5662                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
  5663                           ;setDimmerLights_TriggerERROR@lights stored from wreg
  5664  105B  0020               	movlb	0	; select bank0
  5665  105C  00A3               	movwf	setDimmerLights_TriggerERROR@lights
  5666                           
  5667                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
  5668  105D  0823               	movf	setDimmerLights_TriggerERROR@lights,w
  5669  105E  319D  25CD         	fcall	_DimmerLightsPointSelect
  5670                           
  5671                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
  5672  1060  0878               	movf	_DimmerLights,w
  5673  1061  3E08               	addlw	8
  5674  1062  0086               	movwf	6
  5675  1063  3001               	movlw	1	; select bank2/3
  5676  1064  0087               	movwf	7
  5677  1065  0020               	movlb	0	; select bank0
  5678  1066  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5679  1067  1101               	bcf	1,2
  5680  1068  1D03               	skipz
  5681  1069  1501               	bsf	1,2
  5682                           
  5683                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
  5684  106A  0878               	movf	_DimmerLights,w
  5685  106B  3E08               	addlw	8
  5686  106C  0086               	movwf	6
  5687  106D  3001               	movlw	1	; select bank2/3
  5688  106E  0087               	movwf	7
  5689  106F  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5690  1070  1081               	bcf	1,1
  5691  1071  1D03               	skipz
  5692  1072  1481               	bsf	1,1
  5693                           
  5694                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
  5695  1073  0878               	movf	_DimmerLights,w
  5696  1074  3E08               	addlw	8
  5697  1075  0086               	movwf	6
  5698  1076  3001               	movlw	1	; select bank2/3
  5699  1077  0087               	movwf	7
  5700  1078  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5701  1079  1201               	bcf	1,4
  5702  107A  1D03               	skipz
  5703  107B  1601               	bsf	1,4
  5704                           
  5705                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
  5706  107C  0878               	movf	_DimmerLights,w
  5707  107D  3E08               	addlw	8
  5708  107E  0086               	movwf	6
  5709  107F  3001               	movlw	1	; select bank2/3
  5710  1080  0087               	movwf	7
  5711  1081  0822               	movf	setDimmerLights_TriggerERROR@command,w
  5712  1082  1181               	bcf	1,3
  5713  1083  1D03               	skipz
  5714  1084  1581               	bsf	1,3
  5715  1085  0008               	return
  5716  1086                     __end_of_setDimmerLights_TriggerERROR:	
  5717                           
  5718                           	psect	text16
  5719  141D                     __ptext16:	
  5720 ;; *************** function _setDimmerLights_ERROR *****************
  5721 ;; Defined at:
  5722 ;;		line 564 in file "../src/Dimmer_B1.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  lights          1    wreg     unsigned char 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  lights          1    5[BANK0 ] unsigned char 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;		None               void
  5729 ;; Registers used:
  5730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5731 ;; Tracked objects:
  5732 ;;		On entry : 0/0
  5733 ;;		On exit  : 0/0
  5734 ;;		Unchanged: 0/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;Total ram usage:        2 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    7
  5743 ;; This function calls:
  5744 ;;		_DimmerLightsPointSelect
  5745 ;;		_setLED
  5746 ;;		_setRFSW_Status
  5747 ;;		_setSw_Status
  5748 ;; This function is called by:
  5749 ;;		_DimmerLights_Exceptions
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           
  5754                           ;psect for function _setDimmerLights_ERROR
  5755  141D                     _setDimmerLights_ERROR:	
  5756                           
  5757                           ;incstack = 0
  5758                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5759                           ;setDimmerLights_ERROR@lights stored from wreg
  5760  141D  0020               	movlb	0	; select bank0
  5761  141E  00A5               	movwf	setDimmerLights_ERROR@lights
  5762                           
  5763                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
  5764  141F  0825               	movf	setDimmerLights_ERROR@lights,w
  5765  1420  319D  25CD  3194   	fcall	_DimmerLightsPointSelect
  5766                           
  5767                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
  5768  1423  0878               	movf	_DimmerLights,w
  5769  1424  0086               	movwf	6
  5770  1425  3001               	movlw	1	; select bank2/3
  5771  1426  0087               	movwf	7
  5772  1427  1E81               	btfss	1,5
  5773  1428  0008               	return
  5774                           
  5775                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
  5776  1429  0878               	movf	_DimmerLights,w
  5777  142A  0086               	movwf	6
  5778  142B  3001               	movlw	1	; select bank2/3
  5779  142C  0087               	movwf	7
  5780  142D  1081               	bcf	1,1
  5781                           
  5782                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
  5783  142E  0878               	movf	_DimmerLights,w
  5784  142F  0086               	movwf	6
  5785  1430  3001               	movlw	1	; select bank2/3
  5786  1431  0087               	movwf	7
  5787  1432  1181               	bcf	1,3
  5788                           
  5789                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
  5790  1433  0878               	movf	_DimmerLights,w
  5791  1434  0086               	movwf	6
  5792  1435  3001               	movlw	1	; select bank2/3
  5793  1436  0087               	movwf	7
  5794  1437  1201               	bcf	1,4
  5795                           
  5796                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
  5797  1438  0878               	movf	_DimmerLights,w
  5798  1439  0086               	movwf	6
  5799  143A  3001               	movlw	1	; select bank2/3
  5800  143B  0087               	movwf	7
  5801  143C  1301               	bcf	1,6
  5802                           
  5803                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
  5804  143D  3007               	movlw	7
  5805  143E  0020               	movlb	0	; select bank0
  5806  143F  00A4               	movwf	??_setDimmerLights_ERROR
  5807  1440  0878               	movf	_DimmerLights,w
  5808  1441  3E02               	addlw	2
  5809  1442  0086               	movwf	6
  5810  1443  3001               	movlw	1	; select bank2/3
  5811  1444  0087               	movwf	7
  5812  1445  0824               	movf	??_setDimmerLights_ERROR,w
  5813  1446  0081               	movwf	1
  5814                           
  5815                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
  5816  1447  0878               	movf	_DimmerLights,w
  5817  1448  3E06               	addlw	6
  5818  1449  0086               	movwf	6
  5819  144A  3001               	movlw	1	; select bank2/3
  5820  144B  0087               	movwf	7
  5821  144C  0801               	movf	1,w
  5822  144D  00A4               	movwf	??_setDimmerLights_ERROR
  5823  144E  0878               	movf	_DimmerLights,w
  5824  144F  3E04               	addlw	4
  5825  1450  0086               	movwf	6
  5826  1451  3001               	movlw	1	; select bank2/3
  5827  1452  0087               	movwf	7
  5828  1453  0824               	movf	??_setDimmerLights_ERROR,w
  5829  1454  0081               	movwf	1
  5830                           
  5831                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
  5832  1455  0021               	movlb	1	; select bank1
  5833  1456  0839               	movf	_Dimmer^(0+128),w
  5834  1457  0086               	movwf	6
  5835  1458  0187               	clrf	7
  5836  1459  1401               	bsf	1,0
  5837                           
  5838                           ;Dimmer_B1.c: 575: ;;
  5839                           ;Dimmer_B1.c: 576: setLED(lights, 1);
  5840  145A  0020               	movlb	0	; select bank0
  5841  145B  01A2               	clrf	setLED@command
  5842  145C  0AA2               	incf	setLED@command,f
  5843  145D  0825               	movf	setDimmerLights_ERROR@lights,w
  5844  145E  3188  2059  3194   	fcall	_setLED
  5845                           
  5846                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
  5847  1461  0020               	movlb	0	; select bank0
  5848  1462  01A2               	clrf	setSw_Status@command
  5849  1463  0825               	movf	setDimmerLights_ERROR@lights,w
  5850  1464  319B  23E4  3194   	fcall	_setSw_Status
  5851                           
  5852                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
  5853  1467  0020               	movlb	0	; select bank0
  5854  1468  01A2               	clrf	setRFSW_Status@command
  5855  1469  0825               	movf	setDimmerLights_ERROR@lights,w
  5856  146A  319B  23F3         	fcall	_setRFSW_Status
  5857  146C  0008               	return
  5858  146D                     __end_of_setDimmerLights_ERROR:	
  5859                           
  5860                           	psect	text17
  5861  1AE4                     __ptext17:	
  5862 ;; *************** function _Temp_Initialization *****************
  5863 ;; Defined at:
  5864 ;;		line 15 in file "../src/OverTemperature_B1.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;		None               void
  5871 ;; Registers used:
  5872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;Total ram usage:        0 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    6
  5885 ;; This function calls:
  5886 ;;		_setTemp_Initialization
  5887 ;; This function is called by:
  5888 ;;		_main
  5889 ;; This function uses a non-reentrant model
  5890 ;;
  5891                           
  5892                           
  5893                           ;psect for function _Temp_Initialization
  5894  1AE4                     _Temp_Initialization:	
  5895                           
  5896                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5897                           
  5898                           ;incstack = 0
  5899                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5900  1AE4  319B  236A         	fcall	_setTemp_Initialization
  5901  1AE6  0008               	return
  5902  1AE7                     __end_of_Temp_Initialization:	
  5903                           
  5904                           	psect	text18
  5905  1B6A                     __ptext18:	
  5906 ;; *************** function _setTemp_Initialization *****************
  5907 ;; Defined at:
  5908 ;;		line 51 in file "../src/OverTemperature_B1.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;		None
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;		None
  5913 ;; Return value:  Size  Location     Type
  5914 ;;		None               void
  5915 ;; Registers used:
  5916 ;;		wreg, fsr1l, fsr1h
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    5
  5929 ;; This function calls:
  5930 ;;		Nothing
  5931 ;; This function is called by:
  5932 ;;		_Temp_Initialization
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           
  5937                           ;psect for function _setTemp_Initialization
  5938  1B6A                     _setTemp_Initialization:	
  5939                           
  5940                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5944  1B6A  30B4               	movlw	_Temp1& (0+255)
  5945  1B6B  0020               	movlb	0	; select bank0
  5946  1B6C  00A0               	movwf	??_setTemp_Initialization
  5947  1B6D  0820               	movf	??_setTemp_Initialization,w
  5948  1B6E  0021               	movlb	1	; select bank1
  5949  1B6F  00C3               	movwf	_Temp^(0+128)
  5950                           
  5951                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5952  1B70  0843               	movf	_Temp^(0+128),w
  5953  1B71  0086               	movwf	6
  5954  1B72  3001               	movlw	1	; select bank2/3
  5955  1B73  0087               	movwf	7
  5956  1B74  1601               	bsf	1,4
  5957  1B75  0008               	return
  5958  1B76                     __end_of_setTemp_Initialization:	
  5959                           
  5960                           	psect	text19
  5961  1B5E                     __ptext19:	
  5962 ;; *************** function _Switch_Main *****************
  5963 ;; Defined at:
  5964 ;;		line 61 in file "../src/Switch_B1.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;		None               void
  5971 ;; Registers used:
  5972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:   11
  5985 ;; This function calls:
  5986 ;;		_setSw_Main
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           
  5993                           ;psect for function _Switch_Main
  5994  1B5E                     _Switch_Main:	
  5995                           
  5996                           ;Switch_B1.c: 63: setSw_Main(1);
  5997                           
  5998                           ;incstack = 0
  5999                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6000  1B5E  3001               	movlw	1
  6001  1B5F  3182  2223  319B   	fcall	_setSw_Main
  6002                           
  6003                           ;Switch_B1.c: 67: setSw_Main(2);
  6004  1B62  3002               	movlw	2
  6005  1B63  3182  2223  319B   	fcall	_setSw_Main
  6006                           
  6007                           ;Switch_B1.c: 71: setSw_Main(3);
  6008  1B66  3003               	movlw	3
  6009  1B67  3182  2223         	fcall	_setSw_Main
  6010  1B69  0008               	return
  6011  1B6A                     __end_of_Switch_Main:	
  6012                           
  6013                           	psect	text20
  6014  0223                     __ptext20:	
  6015 ;; *************** function _setSw_Main *****************
  6016 ;; Defined at:
  6017 ;;		line 111 in file "../src/Switch_B1.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  sw              1    wreg     unsigned char 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  sw              1   74[BANK0 ] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;		None               void
  6024 ;; Registers used:
  6025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;Total ram usage:        3 bytes
  6036 ;; Hardware stack levels used:    1
  6037 ;; Hardware stack levels required when called:   10
  6038 ;; This function calls:
  6039 ;;		_SwPointSelect
  6040 ;;		_Sw_DimmerAdjFunc
  6041 ;;		_Sw_DimmerOffFunc
  6042 ;;		_Sw_DimmerOnFunc
  6043 ;;		_setBuz
  6044 ;;		_setRF_Learn
  6045 ;; This function is called by:
  6046 ;;		_Switch_Main
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           
  6051                           ;psect for function _setSw_Main
  6052  0223                     _setSw_Main:	
  6053                           
  6054                           ;incstack = 0
  6055                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6056                           ;setSw_Main@sw stored from wreg
  6057  0223  0020               	movlb	0	; select bank0
  6058  0224  00EA               	movwf	setSw_Main@sw
  6059                           
  6060                           ;Switch_B1.c: 112: SwPointSelect(sw);
  6061  0225  086A               	movf	setSw_Main@sw,w
  6062  0226  319E  2674  3182   	fcall	_SwPointSelect
  6063                           
  6064                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  6065  0229  087B               	movf	_Sw,w
  6066  022A  0086               	movwf	6
  6067  022B  3001               	movlw	1	; select bank2/3
  6068  022C  0087               	movwf	7
  6069  022D  1C01               	btfss	1,0
  6070  022E  0008               	return
  6071                           
  6072                           ;Switch_B1.c: 115: if (sw == 1) {
  6073  022F  0020               	movlb	0	; select bank0
  6074  0230  086A               	movf	setSw_Main@sw,w
  6075  0231  3A01               	xorlw	1
  6076  0232  1D03               	skipz
  6077  0233  2A3C               	goto	l7327
  6078                           
  6079                           ;Switch_B1.c: 116: Sw->Touch = (RA0 == 1) ? 1 : 0;
  6080  0234  087B               	movf	_Sw,w
  6081  0235  0086               	movwf	6
  6082  0236  3001               	movlw	1	; select bank2/3
  6083  0237  0087               	movwf	7
  6084  0238  1081               	bcf	1,1
  6085  0239  180C               	btfsc	12,0	;volatile
  6086  023A  1481               	bsf	1,1
  6087                           
  6088                           ;Switch_B1.c: 117: } else if (sw == 2) {
  6089  023B  2A55               	goto	l2801
  6090  023C                     l7327:	
  6091  023C  0020               	movlb	0	; select bank0
  6092  023D  086A               	movf	setSw_Main@sw,w
  6093  023E  3A02               	xorlw	2
  6094  023F  1D03               	skipz
  6095  0240  2A49               	goto	l7331
  6096                           
  6097                           ;Switch_B1.c: 118: Sw->Touch = (RA6 == 1) ? 1 : 0;
  6098  0241  087B               	movf	_Sw,w
  6099  0242  0086               	movwf	6
  6100  0243  3001               	movlw	1	; select bank2/3
  6101  0244  0087               	movwf	7
  6102  0245  1081               	bcf	1,1
  6103  0246  1B0C               	btfsc	12,6	;volatile
  6104  0247  1481               	bsf	1,1
  6105                           
  6106                           ;Switch_B1.c: 119: } else if (sw == 3) {
  6107  0248  2A55               	goto	l2801
  6108  0249                     l7331:	
  6109  0249  0020               	movlb	0	; select bank0
  6110  024A  086A               	movf	setSw_Main@sw,w
  6111  024B  3A03               	xorlw	3
  6112  024C  1D03               	skipz
  6113  024D  2A55               	goto	l2801
  6114                           
  6115                           ;Switch_B1.c: 120: Sw->Touch = (RA4 == 1) ? 1 : 0;
  6116  024E  087B               	movf	_Sw,w
  6117  024F  0086               	movwf	6
  6118  0250  3001               	movlw	1	; select bank2/3
  6119  0251  0087               	movwf	7
  6120  0252  1081               	bcf	1,1
  6121  0253  1A0C               	btfsc	12,4	;volatile
  6122  0254  1481               	bsf	1,1
  6123  0255                     l2801:	
  6124                           
  6125                           ;Switch_B1.c: 121: }
  6126                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  6127  0255  087B               	movf	_Sw,w
  6128  0256  0086               	movwf	6
  6129  0257  3001               	movlw	1	; select bank2/3
  6130  0258  0087               	movwf	7
  6131  0259  1C81               	btfss	1,1
  6132  025A  2B27               	goto	l7381
  6133                           
  6134                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  6135  025B  087B               	movf	_Sw,w
  6136  025C  0086               	movwf	6
  6137  025D  3001               	movlw	1	; select bank2/3
  6138  025E  0087               	movwf	7
  6139  025F  1901               	btfsc	1,2
  6140  0260  2A83               	goto	l7347
  6141                           
  6142                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  6143  0261  3001               	movlw	1
  6144  0262  0020               	movlb	0	; select bank0
  6145  0263  00E8               	movwf	??_setSw_Main
  6146  0264  087B               	movf	_Sw,w
  6147  0265  3E02               	addlw	2
  6148  0266  0086               	movwf	6
  6149  0267  3001               	movlw	1	; select bank2/3
  6150  0268  0087               	movwf	7
  6151  0269  0868               	movf	??_setSw_Main,w
  6152  026A  0781               	addwf	1,f
  6153                           
  6154                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  6155  026B  087B               	movf	_Sw,w
  6156  026C  3E02               	addlw	2
  6157  026D  0086               	movwf	6
  6158  026E  3001               	movlw	1	; select bank2/3
  6159  026F  0087               	movwf	7
  6160  0270  3005               	movlw	5
  6161  0271  0201               	subwf	1,w
  6162  0272  1C03               	skipc
  6163  0273  0008               	return
  6164                           
  6165                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  6166  0274  087B               	movf	_Sw,w
  6167  0275  3E02               	addlw	2
  6168  0276  0086               	movwf	6
  6169  0277  3001               	movlw	1	; select bank2/3
  6170  0278  0087               	movwf	7
  6171  0279  0181               	clrf	1
  6172                           
  6173                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  6174  027A  087B               	movf	_Sw,w
  6175  027B  0086               	movwf	6
  6176  027C  3001               	movlw	1	; select bank2/3
  6177  027D  0087               	movwf	7
  6178  027E  1501               	bsf	1,2
  6179                           
  6180                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  6181  027F  086A               	movf	setSw_Main@sw,w
  6182  0280  318A  22C1         	fcall	_Sw_DimmerOnFunc
  6183                           
  6184                           ;Switch_B1.c: 145: }
  6185                           ;Switch_B1.c: 146: } else {
  6186  0282  0008               	return
  6187  0283                     l7347:	
  6188                           
  6189                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  6190  0283  087B               	movf	_Sw,w
  6191  0284  0086               	movwf	6
  6192  0285  3001               	movlw	1	; select bank2/3
  6193  0286  0087               	movwf	7
  6194  0287  1981               	btfsc	1,3
  6195  0288  2AB0               	goto	l7357
  6196                           
  6197                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  6198  0289  087B               	movf	_Sw,w
  6199  028A  3E03               	addlw	3
  6200  028B  0086               	movwf	6
  6201  028C  3001               	movlw	1	; select bank2/3
  6202  028D  0087               	movwf	7
  6203  028E  3001               	movlw	1
  6204  028F  0781               	addwf	1,f
  6205  0290  3141               	addfsr 1,1
  6206  0291  1803               	skipnc
  6207  0292  0A81               	incf	1,f
  6208                           
  6209                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  6210  0293  087B               	movf	_Sw,w
  6211  0294  3E03               	addlw	3
  6212  0295  0086               	movwf	6
  6213  0296  3001               	movlw	1	; select bank2/3
  6214  0297  0087               	movwf	7
  6215  0298  3F40               	moviw [0]fsr1
  6216  0299  0020               	movlb	0	; select bank0
  6217  029A  00E8               	movwf	??_setSw_Main
  6218  029B  3F41               	moviw [1]fsr1
  6219  029C  00E9               	movwf	??_setSw_Main+1
  6220  029D  3000               	movlw	0
  6221  029E  0269               	subwf	??_setSw_Main+1,w
  6222  029F  3096               	movlw	150
  6223  02A0  1903               	skipnz
  6224  02A1  0268               	subwf	??_setSw_Main,w
  6225  02A2  1C03               	skipc
  6226  02A3  0008               	return
  6227                           
  6228                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  6229  02A4  087B               	movf	_Sw,w
  6230  02A5  3E03               	addlw	3
  6231  02A6  0086               	movwf	6
  6232  02A7  3001               	movlw	1	; select bank2/3
  6233  02A8  0087               	movwf	7
  6234  02A9  3000               	movlw	0
  6235  02AA  3FC0               	movwi [0]fsr1
  6236  02AB  3FC1               	movwi [1]fsr1
  6237                           
  6238                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  6239  02AC  086A               	movf	setSw_Main@sw,w
  6240  02AD  3195  2523         	fcall	_Sw_DimmerAdjFunc
  6241                           
  6242                           ;Switch_B1.c: 156: }
  6243                           ;Switch_B1.c: 157: } else {
  6244  02AF  0008               	return
  6245  02B0                     l7357:	
  6246                           
  6247                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  6248  02B0  087B               	movf	_Sw,w
  6249  02B1  0086               	movwf	6
  6250  02B2  3001               	movlw	1	; select bank2/3
  6251  02B3  0087               	movwf	7
  6252  02B4  1A01               	btfsc	1,4
  6253  02B5  2AF4               	goto	l7371
  6254                           
  6255                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  6256  02B6  087B               	movf	_Sw,w
  6257  02B7  3E05               	addlw	5
  6258  02B8  0086               	movwf	6
  6259  02B9  3001               	movlw	1	; select bank2/3
  6260  02BA  0087               	movwf	7
  6261  02BB  3001               	movlw	1
  6262  02BC  0781               	addwf	1,f
  6263  02BD  3141               	addfsr 1,1
  6264  02BE  1803               	skipnc
  6265  02BF  0A81               	incf	1,f
  6266                           
  6267                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  6268  02C0  087B               	movf	_Sw,w
  6269  02C1  3E05               	addlw	5
  6270  02C2  0086               	movwf	6
  6271  02C3  3001               	movlw	1	; select bank2/3
  6272  02C4  0087               	movwf	7
  6273  02C5  3F40               	moviw [0]fsr1
  6274  02C6  0020               	movlb	0	; select bank0
  6275  02C7  00E8               	movwf	??_setSw_Main
  6276  02C8  3F41               	moviw [1]fsr1
  6277  02C9  00E9               	movwf	??_setSw_Main+1
  6278  02CA  3000               	movlw	0
  6279  02CB  0269               	subwf	??_setSw_Main+1,w
  6280  02CC  3096               	movlw	150
  6281  02CD  1903               	skipnz
  6282  02CE  0268               	subwf	??_setSw_Main,w
  6283  02CF  1C03               	skipc
  6284  02D0  0008               	return
  6285                           
  6286                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  6287  02D1  087B               	movf	_Sw,w
  6288  02D2  3E05               	addlw	5
  6289  02D3  0086               	movwf	6
  6290  02D4  3001               	movlw	1	; select bank2/3
  6291  02D5  0087               	movwf	7
  6292  02D6  3000               	movlw	0
  6293  02D7  3FC0               	movwi [0]fsr1
  6294  02D8  3FC1               	movwi [1]fsr1
  6295                           
  6296                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  6297  02D9  087B               	movf	_Sw,w
  6298  02DA  0086               	movwf	6
  6299  02DB  3001               	movlw	1	; select bank2/3
  6300  02DC  0087               	movwf	7
  6301  02DD  1601               	bsf	1,4
  6302                           
  6303                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  6304  02DE  01A2               	clrf	setRF_Learn@command
  6305  02DF  0AA2               	incf	setRF_Learn@command,f
  6306  02E0  3001               	movlw	1
  6307  02E1  319B  23B8  3182   	fcall	_setRF_Learn
  6308                           
  6309                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  6310  02E4  0021               	movlb	1	; select bank1
  6311  02E5  0867               	movf	_myMain^(0+128),w
  6312  02E6  0086               	movwf	6
  6313  02E7  3001               	movlw	1	; select bank2/3
  6314  02E8  0087               	movwf	7
  6315  02E9  1F81               	btfss	1,7
  6316  02EA  0008               	return
  6317                           
  6318                           ;Switch_B1.c: 168: setBuz(2, 100);
  6319  02EB  3064               	movlw	100
  6320  02EC  0020               	movlb	0	; select bank0
  6321  02ED  00A9               	movwf	setBuz@time
  6322  02EE  3000               	movlw	0
  6323  02EF  00AA               	movwf	setBuz@time+1
  6324  02F0  3002               	movlw	2
  6325  02F1  318B  23D2         	fcall	_setBuz
  6326                           
  6327                           ;Switch_B1.c: 169: }
  6328                           ;Switch_B1.c: 171: }
  6329                           ;Switch_B1.c: 172: } else {
  6330  02F3  0008               	return
  6331  02F4                     l7371:	
  6332                           
  6333                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  6334  02F4  087B               	movf	_Sw,w
  6335  02F5  0086               	movwf	6
  6336  02F6  3001               	movlw	1	; select bank2/3
  6337  02F7  0087               	movwf	7
  6338  02F8  1A81               	btfsc	1,5
  6339  02F9  0008               	return
  6340                           
  6341                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  6342  02FA  087B               	movf	_Sw,w
  6343  02FB  3E07               	addlw	7
  6344  02FC  0086               	movwf	6
  6345  02FD  3001               	movlw	1	; select bank2/3
  6346  02FE  0087               	movwf	7
  6347  02FF  3001               	movlw	1
  6348  0300  0781               	addwf	1,f
  6349  0301  3141               	addfsr 1,1
  6350  0302  1803               	skipnc
  6351  0303  0A81               	incf	1,f
  6352                           
  6353                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  6354  0304  087B               	movf	_Sw,w
  6355  0305  3E07               	addlw	7
  6356  0306  0086               	movwf	6
  6357  0307  3001               	movlw	1	; select bank2/3
  6358  0308  0087               	movwf	7
  6359  0309  3F40               	moviw [0]fsr1
  6360  030A  0020               	movlb	0	; select bank0
  6361  030B  00E8               	movwf	??_setSw_Main
  6362  030C  3F41               	moviw [1]fsr1
  6363  030D  00E9               	movwf	??_setSw_Main+1
  6364  030E  3001               	movlw	1
  6365  030F  0269               	subwf	??_setSw_Main+1,w
  6366  0310  302C               	movlw	44
  6367  0311  1903               	skipnz
  6368  0312  0268               	subwf	??_setSw_Main,w
  6369  0313  1C03               	skipc
  6370  0314  0008               	return
  6371                           
  6372                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  6373  0315  087B               	movf	_Sw,w
  6374  0316  3E07               	addlw	7
  6375  0317  0086               	movwf	6
  6376  0318  3001               	movlw	1	; select bank2/3
  6377  0319  0087               	movwf	7
  6378  031A  3000               	movlw	0
  6379  031B  3FC0               	movwi [0]fsr1
  6380  031C  3FC1               	movwi [1]fsr1
  6381                           
  6382                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  6383  031D  087B               	movf	_Sw,w
  6384  031E  0086               	movwf	6
  6385  031F  3001               	movlw	1	; select bank2/3
  6386  0320  0087               	movwf	7
  6387  0321  1681               	bsf	1,5
  6388                           
  6389                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  6390  0322  01A2               	clrf	setRF_Learn@command
  6391  0323  3001               	movlw	1
  6392  0324  319B  23B8         	fcall	_setRF_Learn
  6393                           
  6394                           ;Switch_B1.c: 183: }
  6395                           ;Switch_B1.c: 184: }
  6396                           ;Switch_B1.c: 185: }
  6397                           ;Switch_B1.c: 186: }
  6398                           ;Switch_B1.c: 187: }
  6399                           ;Switch_B1.c: 188: } else {
  6400  0326  0008               	return
  6401  0327                     l7381:	
  6402                           
  6403                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  6404  0327  087B               	movf	_Sw,w
  6405  0328  0086               	movwf	6
  6406  0329  3001               	movlw	1	; select bank2/3
  6407  032A  0087               	movwf	7
  6408  032B  1D01               	btfss	1,2
  6409  032C  0008               	return
  6410                           
  6411                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  6412  032D  3001               	movlw	1
  6413  032E  0020               	movlb	0	; select bank0
  6414  032F  00E8               	movwf	??_setSw_Main
  6415  0330  087B               	movf	_Sw,w
  6416  0331  3E02               	addlw	2
  6417  0332  0086               	movwf	6
  6418  0333  3001               	movlw	1	; select bank2/3
  6419  0334  0087               	movwf	7
  6420  0335  0868               	movf	??_setSw_Main,w
  6421  0336  0781               	addwf	1,f
  6422                           
  6423                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  6424  0337  087B               	movf	_Sw,w
  6425  0338  3E02               	addlw	2
  6426  0339  0086               	movwf	6
  6427  033A  3001               	movlw	1	; select bank2/3
  6428  033B  0087               	movwf	7
  6429  033C  3005               	movlw	5
  6430  033D  0201               	subwf	1,w
  6431  033E  1C03               	skipc
  6432  033F  0008               	return
  6433                           
  6434                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  6435  0340  087B               	movf	_Sw,w
  6436  0341  3E02               	addlw	2
  6437  0342  0086               	movwf	6
  6438  0343  3001               	movlw	1	; select bank2/3
  6439  0344  0087               	movwf	7
  6440  0345  0181               	clrf	1
  6441                           
  6442                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  6443  0346  087B               	movf	_Sw,w
  6444  0347  0086               	movwf	6
  6445  0348  3001               	movlw	1	; select bank2/3
  6446  0349  0087               	movwf	7
  6447  034A  1101               	bcf	1,2
  6448                           
  6449                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  6450  034B  087B               	movf	_Sw,w
  6451  034C  3E03               	addlw	3
  6452  034D  0086               	movwf	6
  6453  034E  3001               	movlw	1	; select bank2/3
  6454  034F  0087               	movwf	7
  6455  0350  3000               	movlw	0
  6456  0351  3FC0               	movwi [0]fsr1
  6457  0352  3FC1               	movwi [1]fsr1
  6458                           
  6459                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  6460  0353  087B               	movf	_Sw,w
  6461  0354  0086               	movwf	6
  6462  0355  3001               	movlw	1	; select bank2/3
  6463  0356  0087               	movwf	7
  6464  0357  1181               	bcf	1,3
  6465                           
  6466                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  6467  0358  087B               	movf	_Sw,w
  6468  0359  3E05               	addlw	5
  6469  035A  0086               	movwf	6
  6470  035B  3001               	movlw	1	; select bank2/3
  6471  035C  0087               	movwf	7
  6472  035D  3000               	movlw	0
  6473  035E  3FC0               	movwi [0]fsr1
  6474  035F  3FC1               	movwi [1]fsr1
  6475                           
  6476                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  6477  0360  087B               	movf	_Sw,w
  6478  0361  0086               	movwf	6
  6479  0362  3001               	movlw	1	; select bank2/3
  6480  0363  0087               	movwf	7
  6481  0364  1201               	bcf	1,4
  6482                           
  6483                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  6484  0365  087B               	movf	_Sw,w
  6485  0366  3E07               	addlw	7
  6486  0367  0086               	movwf	6
  6487  0368  3001               	movlw	1	; select bank2/3
  6488  0369  0087               	movwf	7
  6489  036A  3000               	movlw	0
  6490  036B  3FC0               	movwi [0]fsr1
  6491  036C  3FC1               	movwi [1]fsr1
  6492                           
  6493                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  6494  036D  087B               	movf	_Sw,w
  6495  036E  0086               	movwf	6
  6496  036F  3001               	movlw	1	; select bank2/3
  6497  0370  0087               	movwf	7
  6498  0371  1281               	bcf	1,5
  6499                           
  6500                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  6501  0372  086A               	movf	setSw_Main@sw,w
  6502  0373  3196  264E  3182   	fcall	_Sw_DimmerOffFunc
  6503                           
  6504                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  6505  0376  0020               	movlb	0	; select bank0
  6506  0377  01A2               	clrf	setRF_Learn@command
  6507  0378  3001               	movlw	1
  6508  0379  319B  23B8         	fcall	_setRF_Learn
  6509  037B  0008               	return
  6510  037C                     __end_of_setSw_Main:	
  6511                           
  6512                           	psect	text21
  6513  1BB8                     __ptext21:	
  6514 ;; *************** function _setRF_Learn *****************
  6515 ;; Defined at:
  6516 ;;		line 33 in file "../src/RF_Control_B1.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  rf              1    wreg     unsigned char 
  6519 ;;  command         1    2[BANK0 ] unsigned char 
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  rf              1    3[BANK0 ] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;		None               void
  6524 ;; Registers used:
  6525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6531 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6535 ;;Total ram usage:        2 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    6
  6538 ;; This function calls:
  6539 ;;		_RfPointSelect
  6540 ;; This function is called by:
  6541 ;;		_setSw_Main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _setRF_Learn
  6547  1BB8                     _setRF_Learn:	
  6548                           
  6549                           ;incstack = 0
  6550                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6551                           ;setRF_Learn@rf stored from wreg
  6552  1BB8  0020               	movlb	0	; select bank0
  6553  1BB9  00A3               	movwf	setRF_Learn@rf
  6554                           
  6555                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  6556  1BBA  0823               	movf	setRF_Learn@rf,w
  6557  1BBB  319B  23AA         	fcall	_RfPointSelect
  6558                           
  6559                           ;RF_Control_B1.c: 35: RF->Learn = command;
  6560  1BBD  087A               	movf	_RF,w
  6561  1BBE  0086               	movwf	6
  6562  1BBF  0187               	clrf	7
  6563  1BC0  0020               	movlb	0	; select bank0
  6564  1BC1  0822               	movf	setRF_Learn@command,w
  6565  1BC2  1301               	bcf	1,6
  6566  1BC3  1D03               	skipz
  6567  1BC4  1701               	bsf	1,6
  6568  1BC5  0008               	return
  6569  1BC6                     __end_of_setRF_Learn:	
  6570                           
  6571                           	psect	text22
  6572  0AC1                     __ptext22:	
  6573 ;; *************** function _Sw_DimmerOnFunc *****************
  6574 ;; Defined at:
  6575 ;;		line 213 in file "../src/Switch_B1.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  sw              1    wreg     unsigned char 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  sw              1   71[BANK0 ] unsigned char 
  6580 ;;  Idle            1   70[BANK0 ] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;		None               void
  6583 ;; Registers used:
  6584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;Total ram usage:        6 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    9
  6597 ;; This function calls:
  6598 ;;		_setBuz
  6599 ;;		_setDimmerLights_Switch
  6600 ;;		_setDimmerLights_Trigger
  6601 ;;		_setRFSW_Status
  6602 ;;		_setRF_DimmerLights
  6603 ;;		_setTxData
  6604 ;; This function is called by:
  6605 ;;		_setSw_Main
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _Sw_DimmerOnFunc
  6611  0AC1                     _Sw_DimmerOnFunc:	
  6612                           
  6613                           ;incstack = 0
  6614                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6615                           ;Sw_DimmerOnFunc@sw stored from wreg
  6616  0AC1  0020               	movlb	0	; select bank0
  6617  0AC2  00E7               	movwf	Sw_DimmerOnFunc@sw
  6618                           
  6619                           ;Switch_B1.c: 214: char Idle = 1;
  6620  0AC3  01E6               	clrf	Sw_DimmerOnFunc@Idle
  6621  0AC4  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  6622                           
  6623                           ;Switch_B1.c: 218: if (sw == 1) {
  6624  0AC5  0867               	movf	Sw_DimmerOnFunc@sw,w
  6625  0AC6  3A01               	xorlw	1
  6626  0AC7  1D03               	skipz
  6627  0AC8  2AD4               	goto	l6655
  6628                           
  6629                           ;Switch_B1.c: 219: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6630  0AC9  01E3               	clrf	_Sw_DimmerOnFunc$5401
  6631  0ACA  0022               	movlb	2	; select bank2
  6632  0ACB  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  6633  0ACC  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  6634  0ACD  2AD1               	goto	l6653
  6635  0ACE  0020               	movlb	0	; select bank0
  6636  0ACF  01E3               	clrf	_Sw_DimmerOnFunc$5401
  6637  0AD0  0AE3               	incf	_Sw_DimmerOnFunc$5401,f
  6638  0AD1                     l6653:	
  6639  0AD1  0020               	movlb	0	; select bank0
  6640  0AD2  0863               	movf	_Sw_DimmerOnFunc$5401,w
  6641  0AD3  2AF1               	goto	L3
  6642  0AD4                     l6655:	
  6643                           ;Switch_B1.c: 220: } else if (sw == 2) {
  6644                           
  6645  0AD4  0867               	movf	Sw_DimmerOnFunc@sw,w
  6646  0AD5  3A02               	xorlw	2
  6647  0AD6  1D03               	skipz
  6648  0AD7  2AE3               	goto	l6667
  6649                           
  6650                           ;Switch_B1.c: 221: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  6651  0AD8  01E4               	clrf	_Sw_DimmerOnFunc$5402
  6652  0AD9  0022               	movlb	2	; select bank2
  6653  0ADA  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  6654  0ADB  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  6655  0ADC  2AE0               	goto	l6665
  6656  0ADD  0020               	movlb	0	; select bank0
  6657  0ADE  01E4               	clrf	_Sw_DimmerOnFunc$5402
  6658  0ADF  0AE4               	incf	_Sw_DimmerOnFunc$5402,f
  6659  0AE0                     l6665:	
  6660  0AE0  0020               	movlb	0	; select bank0
  6661  0AE1  0864               	movf	_Sw_DimmerOnFunc$5402,w
  6662  0AE2  2AF1               	goto	L3
  6663  0AE3                     l6667:	
  6664                           ;Switch_B1.c: 222: } else if (sw == 3) {
  6665                           
  6666  0AE3  0867               	movf	Sw_DimmerOnFunc@sw,w
  6667  0AE4  3A03               	xorlw	3
  6668  0AE5  1D03               	skipz
  6669  0AE6  2AF4               	goto	l2827
  6670                           
  6671                           ;Switch_B1.c: 223: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  6672  0AE7  01E5               	clrf	_Sw_DimmerOnFunc$5403
  6673  0AE8  0022               	movlb	2	; select bank2
  6674  0AE9  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  6675  0AEA  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  6676  0AEB  2AEF               	goto	l6677
  6677  0AEC  0020               	movlb	0	; select bank0
  6678  0AED  01E5               	clrf	_Sw_DimmerOnFunc$5403
  6679  0AEE  0AE5               	incf	_Sw_DimmerOnFunc$5403,f
  6680  0AEF                     l6677:	
  6681  0AEF  0020               	movlb	0	; select bank0
  6682  0AF0  0865               	movf	_Sw_DimmerOnFunc$5403,w
  6683  0AF1                     L3:	
  6684  0AF1  00E2               	movwf	??_Sw_DimmerOnFunc
  6685  0AF2  0862               	movf	??_Sw_DimmerOnFunc,w
  6686  0AF3  00E6               	movwf	Sw_DimmerOnFunc@Idle
  6687  0AF4                     l2827:	
  6688                           
  6689                           ;Switch_B1.c: 224: }
  6690                           ;Switch_B1.c: 235: if (Idle == 1) {
  6691  0AF4  0866               	movf	Sw_DimmerOnFunc@Idle,w
  6692  0AF5  3A01               	xorlw	1
  6693  0AF6  1D03               	skipz
  6694  0AF7  0008               	return
  6695                           
  6696                           ;Switch_B1.c: 236: Sw->Flag = 1;
  6697  0AF8  087B               	movf	_Sw,w
  6698  0AF9  0086               	movwf	6
  6699  0AFA  3001               	movlw	1	; select bank2/3
  6700  0AFB  0087               	movwf	7
  6701  0AFC  1781               	bsf	1,7
  6702                           
  6703                           ;Switch_B1.c: 237: setBuz(1, 100);
  6704  0AFD  3064               	movlw	100
  6705  0AFE  00A9               	movwf	setBuz@time
  6706  0AFF  3000               	movlw	0
  6707  0B00  00AA               	movwf	setBuz@time+1
  6708  0B01  3001               	movlw	1
  6709  0B02  318B  23D2  318A   	fcall	_setBuz
  6710                           
  6711                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  6712  0B05  087B               	movf	_Sw,w
  6713  0B06  0086               	movwf	6
  6714  0B07  3001               	movlw	1	; select bank2/3
  6715  0B08  0087               	movwf	7
  6716  0B09  1B01               	btfsc	1,6
  6717  0B0A  2B36               	goto	l6697
  6718                           
  6719                           ;Switch_B1.c: 239: Sw->Status = 1;
  6720  0B0B  087B               	movf	_Sw,w
  6721  0B0C  0086               	movwf	6
  6722  0B0D  3001               	movlw	1	; select bank2/3
  6723  0B0E  0087               	movwf	7
  6724  0B0F  1701               	bsf	1,6
  6725                           
  6726                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  6727  0B10  0020               	movlb	0	; select bank0
  6728  0B11  01A2               	clrf	setRFSW_Status@command
  6729  0B12  0AA2               	incf	setRFSW_Status@command,f
  6730  0B13  0867               	movf	Sw_DimmerOnFunc@sw,w
  6731  0B14  319B  23F3  318A   	fcall	_setRFSW_Status
  6732                           
  6733                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  6734  0B17  0020               	movlb	0	; select bank0
  6735  0B18  01A2               	clrf	setDimmerLights_Trigger@command
  6736  0B19  0AA2               	incf	setDimmerLights_Trigger@command,f
  6737  0B1A  0867               	movf	Sw_DimmerOnFunc@sw,w
  6738  0B1B  319C  2442  318A   	fcall	_setDimmerLights_Trigger
  6739                           
  6740                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  6741  0B1E  0020               	movlb	0	; select bank0
  6742  0B1F  01A2               	clrf	setDimmerLights_Switch@command
  6743  0B20  0AA2               	incf	setDimmerLights_Switch@command,f
  6744  0B21  0867               	movf	Sw_DimmerOnFunc@sw,w
  6745  0B22  319C  2432  318A   	fcall	_setDimmerLights_Switch
  6746                           
  6747                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  6748  0B25  087B               	movf	_Sw,w
  6749  0B26  0086               	movwf	6
  6750  0B27  3001               	movlw	1	; select bank2/3
  6751  0B28  0087               	movwf	7
  6752  0B29  3000               	movlw	0
  6753  0B2A  1B01               	btfsc	1,6
  6754  0B2B  3001               	movlw	1
  6755  0B2C  0020               	movlb	0	; select bank0
  6756  0B2D  00DD               	movwf	setRF_DimmerLights@on
  6757  0B2E  0867               	movf	Sw_DimmerOnFunc@sw,w
  6758  0B2F  3196  26B8  318A   	fcall	_setRF_DimmerLights
  6759                           
  6760                           ;Switch_B1.c: 246: setTxData(1);
  6761  0B32  3001               	movlw	1
  6762  0B33  3187  275B         	fcall	_setTxData
  6763                           
  6764                           ;Switch_B1.c: 248: } else {
  6765  0B35  0008               	return
  6766  0B36                     l6697:	
  6767                           
  6768                           ;Switch_B1.c: 249: Sw->Status = 0;
  6769  0B36  087B               	movf	_Sw,w
  6770  0B37  0086               	movwf	6
  6771  0B38  3001               	movlw	1	; select bank2/3
  6772  0B39  0087               	movwf	7
  6773  0B3A  1301               	bcf	1,6
  6774                           
  6775                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  6776  0B3B  087B               	movf	_Sw,w
  6777  0B3C  0086               	movwf	6
  6778  0B3D  3001               	movlw	1	; select bank2/3
  6779  0B3E  0087               	movwf	7
  6780  0B3F  3000               	movlw	0
  6781  0B40  1B01               	btfsc	1,6
  6782  0B41  3001               	movlw	1
  6783  0B42  0020               	movlb	0	; select bank0
  6784  0B43  00A2               	movwf	setRFSW_Status@command
  6785  0B44  0867               	movf	Sw_DimmerOnFunc@sw,w
  6786  0B45  319B  23F3         	fcall	_setRFSW_Status
  6787  0B47  0008               	return
  6788  0B48                     __end_of_Sw_DimmerOnFunc:	
  6789                           
  6790                           	psect	text23
  6791  164E                     __ptext23:	
  6792 ;; *************** function _Sw_DimmerOffFunc *****************
  6793 ;; Defined at:
  6794 ;;		line 256 in file "../src/Switch_B1.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  sw              1    wreg     unsigned char 
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  sw              1   68[BANK0 ] unsigned char 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;		None               void
  6801 ;; Registers used:
  6802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;Total ram usage:        3 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    9
  6815 ;; This function calls:
  6816 ;;		_setDimmerLights_AdjGo
  6817 ;;		_setDimmerLights_Switch
  6818 ;;		_setDimmerLights_Trigger
  6819 ;;		_setDimmerLights_TriggerAdj
  6820 ;;		_setRF_DimmerLights
  6821 ;;		_setTxData
  6822 ;; This function is called by:
  6823 ;;		_setSw_Main
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _Sw_DimmerOffFunc
  6829  164E                     _Sw_DimmerOffFunc:	
  6830                           
  6831                           ;incstack = 0
  6832                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6833                           ;Sw_DimmerOffFunc@sw stored from wreg
  6834  164E  0020               	movlb	0	; select bank0
  6835  164F  00E4               	movwf	Sw_DimmerOffFunc@sw
  6836                           
  6837                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  6838  1650  087B               	movf	_Sw,w
  6839  1651  0086               	movwf	6
  6840  1652  3001               	movlw	1	; select bank2/3
  6841  1653  0087               	movwf	7
  6842  1654  1F81               	btfss	1,7
  6843  1655  0008               	return
  6844                           
  6845                           ;Switch_B1.c: 258: Sw->Flag = 0;
  6846  1656  087B               	movf	_Sw,w
  6847  1657  0086               	movwf	6
  6848  1658  3001               	movlw	1	; select bank2/3
  6849  1659  0087               	movwf	7
  6850  165A  1381               	bcf	1,7
  6851                           
  6852                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  6853  165B  087B               	movf	_Sw,w
  6854  165C  0086               	movwf	6
  6855  165D  3001               	movlw	1	; select bank2/3
  6856  165E  0087               	movwf	7
  6857  165F  1F01               	btfss	1,6
  6858  1660  2E9A               	goto	l6767
  6859                           
  6860                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  6861  1661  0A7B               	incf	_Sw,w
  6862  1662  0086               	movwf	6
  6863  1663  3001               	movlw	1	; select bank2/3
  6864  1664  0087               	movwf	7
  6865  1665  1C01               	btfss	1,0
  6866  1666  0008               	return
  6867                           
  6868                           ;Switch_B1.c: 261: Sw->Adj = 0;
  6869  1667  0A7B               	incf	_Sw,w
  6870  1668  0086               	movwf	6
  6871  1669  3001               	movlw	1	; select bank2/3
  6872  166A  0087               	movwf	7
  6873  166B  1001               	bcf	1,0
  6874                           
  6875                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  6876  166C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6877  166D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6878  166E  0864               	movf	Sw_DimmerOffFunc@sw,w
  6879  166F  319C  2462  3196   	fcall	_setDimmerLights_TriggerAdj
  6880                           
  6881                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  6882  1672  0020               	movlb	0	; select bank0
  6883  1673  01A2               	clrf	setDimmerLights_AdjGo@command
  6884  1674  0864               	movf	Sw_DimmerOffFunc@sw,w
  6885  1675  319C  2452  3196   	fcall	_setDimmerLights_AdjGo
  6886                           
  6887                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  6888  1678  0020               	movlb	0	; select bank0
  6889  1679  0864               	movf	Sw_DimmerOffFunc@sw,w
  6890  167A  3E1A               	addlw	26
  6891  167B  077D               	addwf	_product,w
  6892  167C  00E2               	movwf	??_Sw_DimmerOffFunc
  6893  167D  0862               	movf	??_Sw_DimmerOffFunc,w
  6894  167E  0086               	movwf	6
  6895  167F  3002               	movlw	2	; select bank4/5
  6896  1680  0087               	movwf	7
  6897  1681  0801               	movf	1,w
  6898  1682  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6899  1683  087D               	movf	_product,w
  6900  1684  3E11               	addlw	17
  6901  1685  0086               	movwf	6
  6902  1686  3002               	movlw	2	; select bank4/5
  6903  1687  0087               	movwf	7
  6904  1688  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6905  1689  0081               	movwf	1
  6906                           
  6907                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  6908  168A  087B               	movf	_Sw,w
  6909  168B  0086               	movwf	6
  6910  168C  3001               	movlw	1	; select bank2/3
  6911  168D  0087               	movwf	7
  6912  168E  3000               	movlw	0
  6913  168F  1B01               	btfsc	1,6
  6914  1690  3001               	movlw	1
  6915  1691  00DD               	movwf	setRF_DimmerLights@on
  6916  1692  0864               	movf	Sw_DimmerOffFunc@sw,w
  6917  1693  3196  26B8  3196   	fcall	_setRF_DimmerLights
  6918                           
  6919                           ;Switch_B1.c: 267: setTxData(1);
  6920  1696  3001               	movlw	1
  6921  1697  3187  275B         	fcall	_setTxData
  6922                           
  6923                           ;Switch_B1.c: 269: }
  6924                           ;Switch_B1.c: 270: } else {
  6925  1699  0008               	return
  6926  169A                     l6767:	
  6927                           
  6928                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  6929  169A  0020               	movlb	0	; select bank0
  6930  169B  01A2               	clrf	setDimmerLights_Trigger@command
  6931  169C  0AA2               	incf	setDimmerLights_Trigger@command,f
  6932  169D  0864               	movf	Sw_DimmerOffFunc@sw,w
  6933  169E  319C  2442  3196   	fcall	_setDimmerLights_Trigger
  6934                           
  6935                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  6936  16A1  0020               	movlb	0	; select bank0
  6937  16A2  01A2               	clrf	setDimmerLights_Switch@command
  6938  16A3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6939  16A4  319C  2432  3196   	fcall	_setDimmerLights_Switch
  6940                           
  6941                           ;Switch_B1.c: 274: ;;
  6942                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  6943  16A7  087B               	movf	_Sw,w
  6944  16A8  0086               	movwf	6
  6945  16A9  3001               	movlw	1	; select bank2/3
  6946  16AA  0087               	movwf	7
  6947  16AB  3000               	movlw	0
  6948  16AC  1B01               	btfsc	1,6
  6949  16AD  3001               	movlw	1
  6950  16AE  0020               	movlb	0	; select bank0
  6951  16AF  00DD               	movwf	setRF_DimmerLights@on
  6952  16B0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6953  16B1  3196  26B8  3196   	fcall	_setRF_DimmerLights
  6954                           
  6955                           ;Switch_B1.c: 276: setTxData(1);
  6956  16B4  3001               	movlw	1
  6957  16B5  3187  275B         	fcall	_setTxData
  6958  16B7  0008               	return
  6959  16B8                     __end_of_Sw_DimmerOffFunc:	
  6960                           
  6961                           	psect	text24
  6962  1523                     __ptext24:	
  6963 ;; *************** function _Sw_DimmerAdjFunc *****************
  6964 ;; Defined at:
  6965 ;;		line 283 in file "../src/Switch_B1.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  sw              1    wreg     unsigned char 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;  sw              1    9[BANK0 ] unsigned char 
  6970 ;;  Idle            1    8[BANK0 ] unsigned char 
  6971 ;; Return value:  Size  Location     Type
  6972 ;;		None               void
  6973 ;; Registers used:
  6974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6981 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;Total ram usage:        6 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    7
  6987 ;; This function calls:
  6988 ;;		_setDimmerLights_AdjGo
  6989 ;;		_setDimmerLights_TriggerAdj
  6990 ;;		_setRFSW_Status
  6991 ;; This function is called by:
  6992 ;;		_setSw_Main
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           
  6997                           ;psect for function _Sw_DimmerAdjFunc
  6998  1523                     _Sw_DimmerAdjFunc:	
  6999                           
  7000                           ;incstack = 0
  7001                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7002                           ;Sw_DimmerAdjFunc@sw stored from wreg
  7003  1523  0020               	movlb	0	; select bank0
  7004  1524  00A9               	movwf	Sw_DimmerAdjFunc@sw
  7005                           
  7006                           ;Switch_B1.c: 284: char Idle = 1;
  7007  1525  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  7008  1526  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  7009                           
  7010                           ;Switch_B1.c: 287: if (sw == 1) {
  7011  1527  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7012  1528  3A01               	xorlw	1
  7013  1529  1D03               	skipz
  7014  152A  2D36               	goto	l6715
  7015                           
  7016                           ;Switch_B1.c: 288: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  7017  152B  01A5               	clrf	_Sw_DimmerAdjFunc$5411
  7018  152C  0022               	movlb	2	; select bank2
  7019  152D  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  7020  152E  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  7021  152F  2D33               	goto	l6713
  7022  1530  0020               	movlb	0	; select bank0
  7023  1531  01A5               	clrf	_Sw_DimmerAdjFunc$5411
  7024  1532  0AA5               	incf	_Sw_DimmerAdjFunc$5411,f
  7025  1533                     l6713:	
  7026  1533  0020               	movlb	0	; select bank0
  7027  1534  0825               	movf	_Sw_DimmerAdjFunc$5411,w
  7028  1535  2D53               	goto	L5
  7029  1536                     l6715:	
  7030                           ;Switch_B1.c: 289: } else if (sw == 2) {
  7031                           
  7032  1536  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7033  1537  3A02               	xorlw	2
  7034  1538  1D03               	skipz
  7035  1539  2D45               	goto	l6727
  7036                           
  7037                           ;Switch_B1.c: 290: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  7038  153A  01A6               	clrf	_Sw_DimmerAdjFunc$5412
  7039  153B  0022               	movlb	2	; select bank2
  7040  153C  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  7041  153D  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  7042  153E  2D42               	goto	l6725
  7043  153F  0020               	movlb	0	; select bank0
  7044  1540  01A6               	clrf	_Sw_DimmerAdjFunc$5412
  7045  1541  0AA6               	incf	_Sw_DimmerAdjFunc$5412,f
  7046  1542                     l6725:	
  7047  1542  0020               	movlb	0	; select bank0
  7048  1543  0826               	movf	_Sw_DimmerAdjFunc$5412,w
  7049  1544  2D53               	goto	L5
  7050  1545                     l6727:	
  7051                           ;Switch_B1.c: 291: } else if (sw == 3) {
  7052                           
  7053  1545  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7054  1546  3A03               	xorlw	3
  7055  1547  1D03               	skipz
  7056  1548  2D56               	goto	l2851
  7057                           
  7058                           ;Switch_B1.c: 292: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  7059  1549  01A7               	clrf	_Sw_DimmerAdjFunc$5413
  7060  154A  0022               	movlb	2	; select bank2
  7061  154B  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  7062  154C  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  7063  154D  2D51               	goto	l6737
  7064  154E  0020               	movlb	0	; select bank0
  7065  154F  01A7               	clrf	_Sw_DimmerAdjFunc$5413
  7066  1550  0AA7               	incf	_Sw_DimmerAdjFunc$5413,f
  7067  1551                     l6737:	
  7068  1551  0020               	movlb	0	; select bank0
  7069  1552  0827               	movf	_Sw_DimmerAdjFunc$5413,w
  7070  1553                     L5:	
  7071  1553  00A4               	movwf	??_Sw_DimmerAdjFunc
  7072  1554  0824               	movf	??_Sw_DimmerAdjFunc,w
  7073  1555  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  7074  1556                     l2851:	
  7075                           
  7076                           ;Switch_B1.c: 293: }
  7077                           ;Switch_B1.c: 304: if (Idle == 1) {
  7078  1556  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  7079  1557  3A01               	xorlw	1
  7080  1558  1D03               	skipz
  7081  1559  0008               	return
  7082                           
  7083                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  7084  155A  087B               	movf	_Sw,w
  7085  155B  0086               	movwf	6
  7086  155C  3001               	movlw	1	; select bank2/3
  7087  155D  0087               	movwf	7
  7088  155E  1F81               	btfss	1,7
  7089  155F  0008               	return
  7090                           
  7091                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  7092  1560  087B               	movf	_Sw,w
  7093  1561  0086               	movwf	6
  7094  1562  3001               	movlw	1	; select bank2/3
  7095  1563  0087               	movwf	7
  7096  1564  1581               	bsf	1,3
  7097                           
  7098                           ;Switch_B1.c: 307: Sw->Adj = 1;
  7099  1565  0A7B               	incf	_Sw,w
  7100  1566  0086               	movwf	6
  7101  1567  3001               	movlw	1	; select bank2/3
  7102  1568  0087               	movwf	7
  7103  1569  1401               	bsf	1,0
  7104                           
  7105                           ;Switch_B1.c: 308: Sw->Status = 1;
  7106  156A  087B               	movf	_Sw,w
  7107  156B  0086               	movwf	6
  7108  156C  3001               	movlw	1	; select bank2/3
  7109  156D  0087               	movwf	7
  7110  156E  1701               	bsf	1,6
  7111                           
  7112                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  7113  156F  01A2               	clrf	setRFSW_Status@command
  7114  1570  0AA2               	incf	setRFSW_Status@command,f
  7115  1571  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7116  1572  319B  23F3  3195   	fcall	_setRFSW_Status
  7117                           
  7118                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  7119  1575  0020               	movlb	0	; select bank0
  7120  1576  01A2               	clrf	setDimmerLights_TriggerAdj@command
  7121  1577  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  7122  1578  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7123  1579  319C  2462  3195   	fcall	_setDimmerLights_TriggerAdj
  7124                           
  7125                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  7126  157C  0020               	movlb	0	; select bank0
  7127  157D  01A2               	clrf	setDimmerLights_AdjGo@command
  7128  157E  0AA2               	incf	setDimmerLights_AdjGo@command,f
  7129  157F  0829               	movf	Sw_DimmerAdjFunc@sw,w
  7130  1580  319C  2452         	fcall	_setDimmerLights_AdjGo
  7131  1582  0008               	return
  7132  1583                     __end_of_Sw_DimmerAdjFunc:	
  7133                           
  7134                           	psect	text25
  7135  1C62                     __ptext25:	
  7136 ;; *************** function _setDimmerLights_TriggerAdj *****************
  7137 ;; Defined at:
  7138 ;;		line 711 in file "../src/Dimmer_B1.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;  lights          1    wreg     unsigned char 
  7141 ;;  command         1    2[BANK0 ] unsigned char 
  7142 ;; Auto vars:     Size  Location     Type
  7143 ;;  lights          1    3[BANK0 ] unsigned char 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;		None               void
  7146 ;; Registers used:
  7147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7153 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;Total ram usage:        2 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    6
  7160 ;; This function calls:
  7161 ;;		_DimmerLightsPointSelect
  7162 ;; This function is called by:
  7163 ;;		_Sw_DimmerOffFunc
  7164 ;;		_Sw_DimmerAdjFunc
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function _setDimmerLights_TriggerAdj
  7170  1C62                     _setDimmerLights_TriggerAdj:	
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7174                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  7175  1C62  0020               	movlb	0	; select bank0
  7176  1C63  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  7177                           
  7178                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  7179  1C64  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  7180  1C65  319D  25CD         	fcall	_DimmerLightsPointSelect
  7181                           
  7182                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  7183  1C67  0878               	movf	_DimmerLights,w
  7184  1C68  3E08               	addlw	8
  7185  1C69  0086               	movwf	6
  7186  1C6A  3001               	movlw	1	; select bank2/3
  7187  1C6B  0087               	movwf	7
  7188  1C6C  0020               	movlb	0	; select bank0
  7189  1C6D  0822               	movf	setDimmerLights_TriggerAdj@command,w
  7190  1C6E  1201               	bcf	1,4
  7191  1C6F  1D03               	skipz
  7192  1C70  1601               	bsf	1,4
  7193  1C71  0008               	return
  7194  1C72                     __end_of_setDimmerLights_TriggerAdj:	
  7195                           
  7196                           	psect	text26
  7197  1C52                     __ptext26:	
  7198 ;; *************** function _setDimmerLights_AdjGo *****************
  7199 ;; Defined at:
  7200 ;;		line 699 in file "../src/Dimmer_B1.c"
  7201 ;; Parameters:    Size  Location     Type
  7202 ;;  lights          1    wreg     unsigned char 
  7203 ;;  command         1    2[BANK0 ] unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  lights          1    3[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7215 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7219 ;;Total ram usage:        2 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    6
  7222 ;; This function calls:
  7223 ;;		_DimmerLightsPointSelect
  7224 ;; This function is called by:
  7225 ;;		_Sw_DimmerOffFunc
  7226 ;;		_Sw_DimmerAdjFunc
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           
  7231                           ;psect for function _setDimmerLights_AdjGo
  7232  1C52                     _setDimmerLights_AdjGo:	
  7233                           
  7234                           ;incstack = 0
  7235                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7236                           ;setDimmerLights_AdjGo@lights stored from wreg
  7237  1C52  0020               	movlb	0	; select bank0
  7238  1C53  00A3               	movwf	setDimmerLights_AdjGo@lights
  7239                           
  7240                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  7241  1C54  0823               	movf	setDimmerLights_AdjGo@lights,w
  7242  1C55  319D  25CD         	fcall	_DimmerLightsPointSelect
  7243                           
  7244                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  7245  1C57  0878               	movf	_DimmerLights,w
  7246  1C58  3E08               	addlw	8
  7247  1C59  0086               	movwf	6
  7248  1C5A  3001               	movlw	1	; select bank2/3
  7249  1C5B  0087               	movwf	7
  7250  1C5C  0020               	movlb	0	; select bank0
  7251  1C5D  0822               	movf	setDimmerLights_AdjGo@command,w
  7252  1C5E  1181               	bcf	1,3
  7253  1C5F  1D03               	skipz
  7254  1C60  1581               	bsf	1,3
  7255  1C61  0008               	return
  7256  1C62                     __end_of_setDimmerLights_AdjGo:	
  7257                           
  7258                           	psect	text27
  7259  1C94                     __ptext27:	
  7260 ;; *************** function _Switch_Initialization *****************
  7261 ;; Defined at:
  7262 ;;		line 37 in file "../src/Switch_B1.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;		None
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;		None
  7267 ;; Return value:  Size  Location     Type
  7268 ;;		None               void
  7269 ;; Registers used:
  7270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        0 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    8
  7283 ;; This function calls:
  7284 ;;		_TouchPower
  7285 ;;		_setSw_Initialization
  7286 ;; This function is called by:
  7287 ;;		_main
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           
  7292                           ;psect for function _Switch_Initialization
  7293  1C94                     _Switch_Initialization:	
  7294                           
  7295                           ;Switch_B1.c: 38: TouchPower();
  7296                           
  7297                           ;incstack = 0
  7298                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7299  1C94  3187  27FB  319C   	fcall	_TouchPower
  7300                           
  7301                           ;Switch_B1.c: 40: WPUB1 = 0;
  7302  1C97  0024               	movlb	4	; select bank4
  7303  1C98  108D               	bcf	13,1	;volatile
  7304                           
  7305                           ;Switch_B1.c: 49: setSw_Initialization(1);
  7306  1C99  3001               	movlw	1
  7307  1C9A  3190  2000  319C   	fcall	_setSw_Initialization
  7308                           
  7309                           ;Switch_B1.c: 52: setSw_Initialization(2);
  7310  1C9D  3002               	movlw	2
  7311  1C9E  3190  2000  319C   	fcall	_setSw_Initialization
  7312                           
  7313                           ;Switch_B1.c: 55: setSw_Initialization(3);
  7314  1CA1  3003               	movlw	3
  7315  1CA2  3190  2000         	fcall	_setSw_Initialization
  7316  1CA4  0008               	return
  7317  1CA5                     __end_of_Switch_Initialization:	
  7318                           
  7319                           	psect	text28
  7320  1000                     __ptext28:	
  7321 ;; *************** function _setSw_Initialization *****************
  7322 ;; Defined at:
  7323 ;;		line 77 in file "../src/Switch_B1.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  sw              1    wreg     unsigned char 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  sw              1    4[BANK0 ] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;Total ram usage:        1 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    7
  7344 ;; This function calls:
  7345 ;;		_setLED
  7346 ;; This function is called by:
  7347 ;;		_Switch_Initialization
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           
  7352                           ;psect for function _setSw_Initialization
  7353  1000                     _setSw_Initialization:	
  7354                           
  7355                           ;incstack = 0
  7356                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7357                           ;setSw_Initialization@sw stored from wreg
  7358  1000  0020               	movlb	0	; select bank0
  7359  1001  00A4               	movwf	setSw_Initialization@sw
  7360                           
  7361                           ;Switch_B1.c: 78: setLED(sw, 1);
  7362  1002  01A2               	clrf	setLED@command
  7363  1003  0AA2               	incf	setLED@command,f
  7364  1004  0824               	movf	setSw_Initialization@sw,w
  7365  1005  3188  2059         	fcall	_setLED
  7366  1007  0008               	return
  7367  1008                     __end_of_setSw_Initialization:	
  7368                           
  7369                           	psect	text29
  7370  07FB                     __ptext29:	
  7371 ;; *************** function _TouchPower *****************
  7372 ;; Defined at:
  7373 ;;		line 10 in file "../src/Switch_B1.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;		None
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;		None
  7378 ;; Return value:  Size  Location     Type
  7379 ;;		None               void
  7380 ;; Registers used:
  7381 ;;		None
  7382 ;; Tracked objects:
  7383 ;;		On entry : 0/0
  7384 ;;		On exit  : 0/0
  7385 ;;		Unchanged: 0/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;Total ram usage:        0 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    5
  7394 ;; This function calls:
  7395 ;;		Nothing
  7396 ;; This function is called by:
  7397 ;;		_Switch_Initialization
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           
  7402                           ;psect for function _TouchPower
  7403  07FB                     _TouchPower:	
  7404  07FB                     l2770:	
  7405                           ;Switch_B1.c: 11: while (RC5 == 0)
  7406                           
  7407                           ;incstack = 0
  7408                           ; Regs used in _TouchPower: []
  7409                           
  7410  07FB  0020               	movlb	0	; select bank0
  7411  07FC  1A8E               	btfsc	14,5	;volatile
  7412  07FD  0008               	return
  7413                           
  7414                           ;Switch_B1.c: 12: RC5 = 1;
  7415  07FE  168E               	bsf	14,5	;volatile
  7416  07FF  2FFB               	goto	l2770
  7417  0800                     __end_of_TouchPower:	
  7418                           
  7419                           	psect	text30
  7420  0801                     __ptext30:	
  7421 ;; *************** function _RF_Main *****************
  7422 ;; Defined at:
  7423 ;;		line 26 in file "../src/RF_Control_B1.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;		None               void
  7430 ;; Registers used:
  7431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        0 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:   14
  7444 ;; This function calls:
  7445 ;;		_setRF_Main
  7446 ;; This function is called by:
  7447 ;;		_main
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _RF_Main
  7453  0801                     _RF_Main:	
  7454                           
  7455                           ;RF_Control_B1.c: 28: setRF_Main(1);
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7459  0801  3001               	movlw	1
  7460  0802  3186  2687         	fcall	_setRF_Main
  7461  0804  0008               	return
  7462  0805                     __end_of_RF_Main:	
  7463                           
  7464                           	psect	text31
  7465  0687                     __ptext31:	
  7466 ;; *************** function _setRF_Main *****************
  7467 ;; Defined at:
  7468 ;;		line 64 in file "../src/RF_Control_B1.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  rf              1    wreg     unsigned char 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  rf              1   74[BANK0 ] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;		None               void
  7475 ;; Registers used:
  7476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;Total ram usage:        3 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:   13
  7489 ;; This function calls:
  7490 ;;		_CC2500_RxData
  7491 ;;		_CC2500_TxData
  7492 ;;		_CC2500_WriteCommand
  7493 ;;		_RF_RxDisable
  7494 ;;		_RfPointSelect
  7495 ;;		_getRxData
  7496 ;; This function is called by:
  7497 ;;		_RF_Main
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           
  7502                           ;psect for function _setRF_Main
  7503  0687                     _setRF_Main:	
  7504                           
  7505                           ;incstack = 0
  7506                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7507                           ;setRF_Main@rf stored from wreg
  7508  0687  0020               	movlb	0	; select bank0
  7509  0688  00EA               	movwf	setRF_Main@rf
  7510                           
  7511                           ;RF_Control_B1.c: 65: RfPointSelect(rf);
  7512  0689  086A               	movf	setRF_Main@rf,w
  7513  068A  319B  23AA  3186   	fcall	_RfPointSelect
  7514                           
  7515                           ;RF_Control_B1.c: 66: if (RF->Enable == 1) {
  7516  068D  087A               	movf	_RF,w
  7517  068E  0086               	movwf	6
  7518  068F  0187               	clrf	7
  7519  0690  1C01               	btfss	1,0
  7520  0691  0008               	return
  7521                           
  7522                           ;RF_Control_B1.c: 69: if (Buz->GO == 0) {
  7523  0692  0021               	movlb	1	; select bank1
  7524  0693  0837               	movf	_Buz^(0+128),w
  7525  0694  0086               	movwf	6
  7526  0695  3001               	movlw	1	; select bank2/3
  7527  0696  0087               	movwf	7
  7528  0697  1881               	btfsc	1,1
  7529  0698  0008               	return
  7530                           
  7531                           ;RF_Control_B1.c: 71: RF->Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  7532  0699  0020               	movlb	0	; select bank0
  7533  069A  01EB               	clrf	_setRF_Main$4541
  7534  069B  0AEB               	incf	_setRF_Main$4541,f
  7535  069C  1C0C               	btfss	12,0	;volatile
  7536  069D  1B0C               	btfsc	12,6	;volatile
  7537  069E  2EA1               	goto	l7239
  7538  069F  1E0C               	btfss	12,4	;volatile
  7539  06A0  01EB               	clrf	_setRF_Main$4541
  7540  06A1                     l7239:	
  7541  06A1  087A               	movf	_RF,w
  7542  06A2  0086               	movwf	6
  7543  06A3  0187               	clrf	7
  7544  06A4  086B               	movf	_setRF_Main$4541,w
  7545  06A5  1381               	bcf	1,7
  7546  06A6  1D03               	skipz
  7547  06A7  1781               	bsf	1,7
  7548                           
  7549                           ;RF_Control_B1.c: 81: if (RF->Key == 1 && RF->Learn == 0) {
  7550  06A8  087A               	movf	_RF,w
  7551  06A9  0086               	movwf	6
  7552  06AA  0187               	clrf	7
  7553  06AB  1F81               	btfss	1,7
  7554  06AC  2EBA               	goto	l7249
  7555  06AD  087A               	movf	_RF,w
  7556  06AE  0086               	movwf	6
  7557  06AF  0187               	clrf	7
  7558  06B0  1B01               	btfsc	1,6
  7559  06B1  2EBA               	goto	l7249
  7560                           
  7561                           ;RF_Control_B1.c: 82: RF->Run = 1;
  7562  06B2  0A7A               	incf	_RF,w
  7563  06B3  0086               	movwf	6
  7564  06B4  0187               	clrf	7
  7565  06B5  1481               	bsf	1,1
  7566                           
  7567                           ;RF_Control_B1.c: 83: RF_RxDisable(1);
  7568  06B6  3001               	movlw	1
  7569  06B7  319E  26EE         	fcall	_RF_RxDisable
  7570                           
  7571                           ;RF_Control_B1.c: 84: } else {
  7572  06B9  0008               	return
  7573  06BA                     l7249:	
  7574                           
  7575                           ;RF_Control_B1.c: 85: if (RF->Run == 1 && RF->Learn == 0) {
  7576  06BA  0A7A               	incf	_RF,w
  7577  06BB  0086               	movwf	6
  7578  06BC  0187               	clrf	7
  7579  06BD  1C81               	btfss	1,1
  7580  06BE  2EDF               	goto	l7261
  7581  06BF  087A               	movf	_RF,w
  7582  06C0  0086               	movwf	6
  7583  06C1  0187               	clrf	7
  7584  06C2  1B01               	btfsc	1,6
  7585  06C3  2EDF               	goto	l7261
  7586                           
  7587                           ;RF_Control_B1.c: 86: RF->Count++;
  7588  06C4  3001               	movlw	1
  7589  06C5  0020               	movlb	0	; select bank0
  7590  06C6  00E9               	movwf	??_setRF_Main
  7591  06C7  087A               	movf	_RF,w
  7592  06C8  3E03               	addlw	3
  7593  06C9  0086               	movwf	6
  7594  06CA  0187               	clrf	7
  7595  06CB  0869               	movf	??_setRF_Main,w
  7596  06CC  0781               	addwf	1,f
  7597                           
  7598                           ;RF_Control_B1.c: 87: if (RF->Count == 5) {
  7599  06CD  087A               	movf	_RF,w
  7600  06CE  3E03               	addlw	3
  7601  06CF  0086               	movwf	6
  7602  06D0  0187               	clrf	7
  7603  06D1  0801               	movf	1,w
  7604  06D2  3A05               	xorlw	5
  7605  06D3  1D03               	skipz
  7606  06D4  0008               	return
  7607                           
  7608                           ;RF_Control_B1.c: 88: RF->Count = 0;
  7609  06D5  087A               	movf	_RF,w
  7610  06D6  3E03               	addlw	3
  7611  06D7  0086               	movwf	6
  7612  06D8  0187               	clrf	7
  7613  06D9  0181               	clrf	1
  7614                           
  7615                           ;RF_Control_B1.c: 89: RF->Run = 0;
  7616  06DA  0A7A               	incf	_RF,w
  7617  06DB  0086               	movwf	6
  7618  06DC  0187               	clrf	7
  7619  06DD  1081               	bcf	1,1
  7620                           
  7621                           ;RF_Control_B1.c: 90: }
  7622                           ;RF_Control_B1.c: 91: } else {
  7623  06DE  0008               	return
  7624  06DF                     l7261:	
  7625                           
  7626                           ;RF_Control_B1.c: 92: RF->Count = 0;
  7627  06DF  087A               	movf	_RF,w
  7628  06E0  3E03               	addlw	3
  7629  06E1  0086               	movwf	6
  7630  06E2  0187               	clrf	7
  7631  06E3  0181               	clrf	1
  7632                           
  7633                           ;RF_Control_B1.c: 93: RF->Run = 0;
  7634  06E4  0A7A               	incf	_RF,w
  7635  06E5  0086               	movwf	6
  7636  06E6  0187               	clrf	7
  7637  06E7  1081               	bcf	1,1
  7638                           
  7639                           ;RF_Control_B1.c: 95: if (RF->ReceiveGO == 1) {
  7640  06E8  087A               	movf	_RF,w
  7641  06E9  0086               	movwf	6
  7642  06EA  0187               	clrf	7
  7643  06EB  1C81               	btfss	1,1
  7644  06EC  2EFC               	goto	l7273
  7645                           
  7646                           ;RF_Control_B1.c: 96: RF->ReceiveGO = 0;
  7647  06ED  087A               	movf	_RF,w
  7648  06EE  0086               	movwf	6
  7649  06EF  0187               	clrf	7
  7650  06F0  1081               	bcf	1,1
  7651                           
  7652                           ;RF_Control_B1.c: 97: CC2500_RxData();
  7653  06F1  318E  267B  3186   	fcall	_CC2500_RxData
  7654                           
  7655                           ;RF_Control_B1.c: 104: getRxData(1);
  7656  06F4  3001               	movlw	1
  7657  06F5  3193  23D0         	fcall	_getRxData
  7658                           
  7659                           ;RF_Control_B1.c: 107: RF->Run = 1;
  7660  06F7  0A7A               	incf	_RF,w
  7661  06F8  0086               	movwf	6
  7662  06F9  0187               	clrf	7
  7663  06FA  1481               	bsf	1,1
  7664                           
  7665                           ;RF_Control_B1.c: 108: } else {
  7666  06FB  0008               	return
  7667  06FC                     l7273:	
  7668                           
  7669                           ;RF_Control_B1.c: 109: if (RF->Learn == 0) {
  7670  06FC  087A               	movf	_RF,w
  7671  06FD  0086               	movwf	6
  7672  06FE  0187               	clrf	7
  7673  06FF  1B01               	btfsc	1,6
  7674  0700  2F3E               	goto	l7301
  7675                           
  7676                           ;RF_Control_B1.c: 110: if (RF->TransceiveGO == 1) {
  7677  0701  087A               	movf	_RF,w
  7678  0702  0086               	movwf	6
  7679  0703  0187               	clrf	7
  7680  0704  1D01               	btfss	1,2
  7681  0705  2F21               	goto	l7287
  7682                           
  7683                           ;RF_Control_B1.c: 111: RF->TransceiveGO = 0;
  7684  0706  087A               	movf	_RF,w
  7685  0707  0086               	movwf	6
  7686  0708  0187               	clrf	7
  7687  0709  1101               	bcf	1,2
  7688                           
  7689                           ;RF_Control_B1.c: 112: RF->RxStatus = 0;
  7690  070A  087A               	movf	_RF,w
  7691  070B  0086               	movwf	6
  7692  070C  0187               	clrf	7
  7693  070D  1181               	bcf	1,3
  7694                           
  7695                           ;RF_Control_B1.c: 113: RF->ReceiveGO = 0;
  7696  070E  087A               	movf	_RF,w
  7697  070F  0086               	movwf	6
  7698  0710  0187               	clrf	7
  7699  0711  1081               	bcf	1,1
  7700                           
  7701                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x36);
  7702  0712  3036               	movlw	54
  7703  0713  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7704                           
  7705                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x3B);
  7706  0716  303B               	movlw	59
  7707  0717  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7708                           
  7709                           ;RF_Control_B1.c: 117: CC2500_TxData();
  7710  071A  3192  222D         	fcall	_CC2500_TxData
  7711                           
  7712                           ;RF_Control_B1.c: 118: RF->Run = 1;
  7713  071C  0A7A               	incf	_RF,w
  7714  071D  0086               	movwf	6
  7715  071E  0187               	clrf	7
  7716  071F  1481               	bsf	1,1
  7717                           
  7718                           ;RF_Control_B1.c: 119: } else {
  7719  0720  0008               	return
  7720  0721                     l7287:	
  7721                           
  7722                           ;RF_Control_B1.c: 121: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7723  0721  087A               	movf	_RF,w
  7724  0722  0086               	movwf	6
  7725  0723  0187               	clrf	7
  7726  0724  1981               	btfsc	1,3
  7727  0725  0008               	return
  7728  0726  087A               	movf	_RF,w
  7729  0727  0086               	movwf	6
  7730  0728  0187               	clrf	7
  7731  0729  1881               	btfsc	1,1
  7732  072A  0008               	return
  7733                           
  7734                           ;RF_Control_B1.c: 122: RF->RxStatus = 1;
  7735  072B  087A               	movf	_RF,w
  7736  072C  0086               	movwf	6
  7737  072D  0187               	clrf	7
  7738  072E  1581               	bsf	1,3
  7739                           
  7740                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7741  072F  3036               	movlw	54
  7742  0730  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7743                           
  7744                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7745  0733  303A               	movlw	58
  7746  0734  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7747                           
  7748                           ;RF_Control_B1.c: 125: CC2500_WriteCommand(0x34);
  7749  0737  3034               	movlw	52
  7750  0738  319C  2402         	fcall	_CC2500_WriteCommand
  7751                           
  7752                           ;RF_Control_B1.c: 127: RB5 = RB5 == 1 ? 0 : 1;
  7753  073A  3020               	movlw	32
  7754  073B  0020               	movlb	0	; select bank0
  7755  073C  068D               	xorwf	13,f
  7756                           
  7757                           ;RF_Control_B1.c: 128: }
  7758                           ;RF_Control_B1.c: 131: }
  7759                           ;RF_Control_B1.c: 132: } else {
  7760  073D  0008               	return
  7761  073E                     l7301:	
  7762                           
  7763                           ;RF_Control_B1.c: 134: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  7764  073E  087A               	movf	_RF,w
  7765  073F  0086               	movwf	6
  7766  0740  0187               	clrf	7
  7767  0741  1981               	btfsc	1,3
  7768  0742  0008               	return
  7769  0743  087A               	movf	_RF,w
  7770  0744  0086               	movwf	6
  7771  0745  0187               	clrf	7
  7772  0746  1881               	btfsc	1,1
  7773  0747  0008               	return
  7774                           
  7775                           ;RF_Control_B1.c: 135: RF->RxStatus = 1;
  7776  0748  087A               	movf	_RF,w
  7777  0749  0086               	movwf	6
  7778  074A  0187               	clrf	7
  7779  074B  1581               	bsf	1,3
  7780                           
  7781                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  7782  074C  3036               	movlw	54
  7783  074D  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7784                           
  7785                           ;RF_Control_B1.c: 137: CC2500_WriteCommand(0x3A);
  7786  0750  303A               	movlw	58
  7787  0751  319C  2402  3186   	fcall	_CC2500_WriteCommand
  7788                           
  7789                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x34);
  7790  0754  3034               	movlw	52
  7791  0755  319C  2402         	fcall	_CC2500_WriteCommand
  7792                           
  7793                           ;RF_Control_B1.c: 140: RB5 = RB5 == 1 ? 0 : 1;
  7794  0757  3020               	movlw	32
  7795  0758  0020               	movlb	0	; select bank0
  7796  0759  068D               	xorwf	13,f
  7797  075A  0008               	return
  7798  075B                     __end_of_setRF_Main:	
  7799                           
  7800                           	psect	text32
  7801  13D0                     __ptext32:	
  7802 ;; *************** function _getRxData *****************
  7803 ;; Defined at:
  7804 ;;		line 228 in file "../src/RF_Control_B1.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  rf              1    wreg     unsigned char 
  7807 ;; Auto vars:     Size  Location     Type
  7808 ;;  rf              1   72[BANK0 ] unsigned char 
  7809 ;; Return value:  Size  Location     Type
  7810 ;;		None               void
  7811 ;; Registers used:
  7812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7813 ;; Tracked objects:
  7814 ;;		On entry : 0/0
  7815 ;;		On exit  : 0/0
  7816 ;;		Unchanged: 0/0
  7817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;Total ram usage:        1 bytes
  7823 ;; Hardware stack levels used:    1
  7824 ;; Hardware stack levels required when called:   12
  7825 ;; This function calls:
  7826 ;;		_RfPointSelect
  7827 ;;		_setControl_Lights_Table
  7828 ;;		_setLog_Code
  7829 ;; This function is called by:
  7830 ;;		_setRF_Main
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function _getRxData
  7836  13D0                     _getRxData:	
  7837                           
  7838                           ;incstack = 0
  7839                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7840                           ;getRxData@rf stored from wreg
  7841  13D0  0020               	movlb	0	; select bank0
  7842  13D1  00E8               	movwf	getRxData@rf
  7843                           
  7844                           ;RF_Control_B1.c: 229: RfPointSelect(rf);
  7845  13D2  0868               	movf	getRxData@rf,w
  7846  13D3  319B  23AA  3193   	fcall	_RfPointSelect
  7847                           
  7848                           ;RF_Control_B1.c: 230: if (RF->Learn) {
  7849  13D6  087A               	movf	_RF,w
  7850  13D7  0086               	movwf	6
  7851  13D8  0187               	clrf	7
  7852  13D9  1F01               	btfss	1,6
  7853  13DA  2BE7               	goto	l6611
  7854                           
  7855                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7856  13DB  0021               	movlb	1	; select bank1
  7857  13DC  08A0               	movf	_RF_Data^(0+128),f
  7858  13DD  1D03               	skipz
  7859  13DE  0008               	return
  7860  13DF  0821               	movf	(_RF_Data^(0+128)+1),w
  7861  13E0  3A64               	xorlw	100
  7862  13E1  1D03               	skipz
  7863  13E2  0008               	return
  7864                           
  7865                           ;RF_Control_B1.c: 232: {
  7866                           ;RF_Control_B1.c: 233: setLog_Code(1);
  7867  13E3  3001               	movlw	1
  7868  13E4  3193  2389         	fcall	_setLog_Code
  7869                           
  7870                           ;RF_Control_B1.c: 234: }
  7871                           ;RF_Control_B1.c: 235: } else {
  7872  13E6  0008               	return
  7873  13E7                     l6611:	
  7874                           
  7875                           ;RF_Control_B1.c: 236: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7876  13E7  0021               	movlb	1	; select bank1
  7877  13E8  08A0               	movf	_RF_Data^(0+128),f
  7878  13E9  1D03               	skipz
  7879  13EA  0008               	return
  7880  13EB  0821               	movf	(_RF_Data^(0+128)+1),w
  7881  13EC  3A02               	xorlw	2
  7882  13ED  1D03               	skipz
  7883  13EE  0008               	return
  7884                           
  7885                           ;RF_Control_B1.c: 237: {
  7886                           ;RF_Control_B1.c: 238: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7887  13EF  082C               	movf	(_RF_Data^(0+128)+12),w
  7888  13F0  3AFF               	xorlw	255
  7889  13F1  1D03               	skipz
  7890  13F2  2BFD               	goto	l6623
  7891  13F3  082D               	movf	(_RF_Data^(0+128)+13),w
  7892  13F4  3AFF               	xorlw	255
  7893  13F5  1D03               	skipz
  7894  13F6  2BFD               	goto	l6623
  7895  13F7  082E               	movf	(_RF_Data^(0+128)+14),w
  7896  13F8  3AFF               	xorlw	255
  7897  13F9  1D03               	skipz
  7898  13FA  2BFD               	goto	l6623
  7899                           
  7900                           ;RF_Control_B1.c: 239: __nop();
  7901  13FB  0000               	nop
  7902                           
  7903                           ;RF_Control_B1.c: 240: } else {
  7904  13FC  0008               	return
  7905  13FD                     l6623:	
  7906                           
  7907                           ;RF_Control_B1.c: 241: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7908  13FD  087D               	movf	_product,w
  7909  13FE  3E0C               	addlw	12
  7910  13FF  0086               	movwf	6
  7911  1400  3002               	movlw	2	; select bank4/5
  7912  1401  0087               	movwf	7
  7913  1402  0021               	movlb	1	; select bank1
  7914  1403  082C               	movf	(_RF_Data^(0+128)+12),w
  7915  1404  0601               	xorwf	1,w
  7916  1405  1D03               	skipz
  7917  1406  0008               	return
  7918  1407  087D               	movf	_product,w
  7919  1408  3E0D               	addlw	13
  7920  1409  0086               	movwf	6
  7921  140A  3002               	movlw	2	; select bank4/5
  7922  140B  0087               	movwf	7
  7923  140C  082D               	movf	(_RF_Data^(0+128)+13),w
  7924  140D  0601               	xorwf	1,w
  7925  140E  1D03               	skipz
  7926  140F  0008               	return
  7927  1410  087D               	movf	_product,w
  7928  1411  3E0E               	addlw	14
  7929  1412  0086               	movwf	6
  7930  1413  3002               	movlw	2	; select bank4/5
  7931  1414  0087               	movwf	7
  7932  1415  082E               	movf	(_RF_Data^(0+128)+14),w
  7933  1416  0601               	xorwf	1,w
  7934  1417  1D03               	skipz
  7935  1418  0008               	return
  7936                           
  7937                           ;RF_Control_B1.c: 242: setControl_Lights_Table(1);
  7938  1419  3001               	movlw	1
  7939  141A  318D  25C5         	fcall	_setControl_Lights_Table
  7940                           
  7941                           ;RF_Control_B1.c: 249: {
  7942                           ;RF_Control_B1.c: 250: ;
  7943                           
  7944                           ;RF_Control_B1.c: 246: {
  7945                           ;RF_Control_B1.c: 247: ;
  7946                           ;RF_Control_B1.c: 248: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7947                           
  7948                           ;RF_Control_B1.c: 243: }
  7949                           ;RF_Control_B1.c: 244: }
  7950                           ;RF_Control_B1.c: 245: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7951  141C  0008               	return
  7952  141D                     __end_of_getRxData:	
  7953                           
  7954                           	psect	text33
  7955  1389                     __ptext33:	
  7956 ;; *************** function _setLog_Code *****************
  7957 ;; Defined at:
  7958 ;;		line 260 in file "../src/RF_Control_B1.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  rf              1    wreg     unsigned char 
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;  rf              1   14[BANK0 ] unsigned char 
  7963 ;; Return value:  Size  Location     Type
  7964 ;;		None               void
  7965 ;; Registers used:
  7966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7967 ;; Tracked objects:
  7968 ;;		On entry : 0/0
  7969 ;;		On exit  : 0/0
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;Total ram usage:        2 bytes
  7977 ;; Hardware stack levels used:    1
  7978 ;; Hardware stack levels required when called:    7
  7979 ;; This function calls:
  7980 ;;		_RfPointSelect
  7981 ;;		_setBuz
  7982 ;; This function is called by:
  7983 ;;		_getRxData
  7984 ;; This function uses a non-reentrant model
  7985 ;;
  7986                           
  7987                           
  7988                           ;psect for function _setLog_Code
  7989  1389                     _setLog_Code:	
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7993                           ;setLog_Code@rf stored from wreg
  7994  1389  0020               	movlb	0	; select bank0
  7995  138A  00AE               	movwf	setLog_Code@rf
  7996                           
  7997                           ;RF_Control_B1.c: 261: RfPointSelect(rf);
  7998  138B  082E               	movf	setLog_Code@rf,w
  7999  138C  319B  23AA  3193   	fcall	_RfPointSelect
  8000                           
  8001                           ;RF_Control_B1.c: 262: product->Data[12]=RF_Data[12];
  8002  138F  0021               	movlb	1	; select bank1
  8003  1390  082C               	movf	(_RF_Data^(0+128)+12),w
  8004  1391  0020               	movlb	0	; select bank0
  8005  1392  00AD               	movwf	??_setLog_Code
  8006  1393  087D               	movf	_product,w
  8007  1394  3E0C               	addlw	12
  8008  1395  0086               	movwf	6
  8009  1396  3002               	movlw	2	; select bank4/5
  8010  1397  0087               	movwf	7
  8011  1398  082D               	movf	??_setLog_Code,w
  8012  1399  0081               	movwf	1
  8013                           
  8014                           ;RF_Control_B1.c: 263: product->Data[13]=RF_Data[13];
  8015  139A  0021               	movlb	1	; select bank1
  8016  139B  082D               	movf	(_RF_Data^(0+128)+13),w
  8017  139C  0020               	movlb	0	; select bank0
  8018  139D  00AD               	movwf	??_setLog_Code
  8019  139E  087D               	movf	_product,w
  8020  139F  3E0D               	addlw	13
  8021  13A0  0086               	movwf	6
  8022  13A1  3002               	movlw	2	; select bank4/5
  8023  13A2  0087               	movwf	7
  8024  13A3  082D               	movf	??_setLog_Code,w
  8025  13A4  0081               	movwf	1
  8026                           
  8027                           ;RF_Control_B1.c: 264: product->Data[14]=RF_Data[14];
  8028  13A5  0021               	movlb	1	; select bank1
  8029  13A6  082E               	movf	(_RF_Data^(0+128)+14),w
  8030  13A7  0020               	movlb	0	; select bank0
  8031  13A8  00AD               	movwf	??_setLog_Code
  8032  13A9  087D               	movf	_product,w
  8033  13AA  3E0E               	addlw	14
  8034  13AB  0086               	movwf	6
  8035  13AC  3002               	movlw	2	; select bank4/5
  8036  13AD  0087               	movwf	7
  8037  13AE  082D               	movf	??_setLog_Code,w
  8038  13AF  0081               	movwf	1
  8039                           
  8040                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  8041  13B0  3064               	movlw	100
  8042  13B1  00A9               	movwf	setBuz@time
  8043  13B2  3000               	movlw	0
  8044  13B3  00AA               	movwf	setBuz@time+1
  8045  13B4  3001               	movlw	1
  8046  13B5  318B  23D2  3193   	fcall	_setBuz
  8047                           
  8048                           ;RF_Control_B1.c: 266: RF->Learn = 0;
  8049  13B8  087A               	movf	_RF,w
  8050  13B9  0086               	movwf	6
  8051  13BA  0187               	clrf	7
  8052  13BB  1301               	bcf	1,6
  8053                           
  8054                           ;RF_Control_B1.c: 267: if (myMain->First) {
  8055  13BC  0021               	movlb	1	; select bank1
  8056  13BD  0867               	movf	_myMain^(0+128),w
  8057  13BE  0086               	movwf	6
  8058  13BF  3001               	movlw	1	; select bank2/3
  8059  13C0  0087               	movwf	7
  8060  13C1  1F81               	btfss	1,7
  8061  13C2  2BC9               	goto	l2357
  8062                           
  8063                           ;RF_Control_B1.c: 268: Memory->LoopSave=1;
  8064  13C3  0868               	movf	_Memory^(0+128),w
  8065  13C4  3E24               	addlw	36
  8066  13C5  0086               	movwf	6
  8067  13C6  3002               	movlw	2	; select bank4/5
  8068  13C7  0087               	movwf	7
  8069  13C8  1501               	bsf	1,2
  8070  13C9                     l2357:	
  8071                           
  8072                           ;RF_Control_B1.c: 269: }
  8073                           ;RF_Control_B1.c: 270: Memory->Modify=1;
  8074  13C9  0868               	movf	_Memory^(0+128),w
  8075  13CA  3E24               	addlw	36
  8076  13CB  0086               	movwf	6
  8077  13CC  3002               	movlw	2	; select bank4/5
  8078  13CD  0087               	movwf	7
  8079  13CE  1401               	bsf	1,0
  8080  13CF  0008               	return
  8081  13D0                     __end_of_setLog_Code:	
  8082                           
  8083                           	psect	text34
  8084  0DC5                     __ptext34:	
  8085 ;; *************** function _setControl_Lights_Table *****************
  8086 ;; Defined at:
  8087 ;;		line 274 in file "../src/RF_Control_B1.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  rf              1    wreg     unsigned char 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  rf              1   71[BANK0 ] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;		None               void
  8094 ;; Registers used:
  8095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        1 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:   11
  8108 ;; This function calls:
  8109 ;;		_RfPointSelect
  8110 ;;		_setBuz
  8111 ;;		_setDimmerLights
  8112 ;;		_setRFSW_AdjControl
  8113 ;;		_setRFSW_Control
  8114 ;;		_setRFSW_Status
  8115 ;;		_setSw_Status
  8116 ;;		_setTxData
  8117 ;; This function is called by:
  8118 ;;		_getRxData
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           
  8123                           ;psect for function _setControl_Lights_Table
  8124  0DC5                     _setControl_Lights_Table:	
  8125                           
  8126                           ;incstack = 0
  8127                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8128                           ;setControl_Lights_Table@rf stored from wreg
  8129  0DC5  0020               	movlb	0	; select bank0
  8130  0DC6  00E7               	movwf	setControl_Lights_Table@rf
  8131                           
  8132                           ;RF_Control_B1.c: 275: RfPointSelect(rf);
  8133  0DC7  0867               	movf	setControl_Lights_Table@rf,w
  8134  0DC8  319B  23AA  318D   	fcall	_RfPointSelect
  8135                           
  8136                           ;RF_Control_B1.c: 276: if (RF_Data[15] == 0x00) {
  8137  0DCB  0021               	movlb	1	; select bank1
  8138  0DCC  08AF               	movf	(_RF_Data^(0+128)+15),f
  8139  0DCD  1D03               	skipz
  8140  0DCE  2E2A               	goto	l6343
  8141                           
  8142                           ;RF_Control_B1.c: 278: setDimmerLights(1, 0);
  8143  0DCF  0020               	movlb	0	; select bank0
  8144  0DD0  01A4               	clrf	setDimmerLights@status
  8145  0DD1  3001               	movlw	1
  8146  0DD2  3189  21BA  318D   	fcall	_setDimmerLights
  8147                           
  8148                           ;RF_Control_B1.c: 279: setRFSW_Status(1, 0);
  8149  0DD5  0020               	movlb	0	; select bank0
  8150  0DD6  01A2               	clrf	setRFSW_Status@command
  8151  0DD7  3001               	movlw	1
  8152  0DD8  319B  23F3  318D   	fcall	_setRFSW_Status
  8153                           
  8154                           ;RF_Control_B1.c: 280: setSw_Status(1, 0);
  8155  0DDB  0020               	movlb	0	; select bank0
  8156  0DDC  01A2               	clrf	setSw_Status@command
  8157  0DDD  3001               	movlw	1
  8158  0DDE  319B  23E4  318D   	fcall	_setSw_Status
  8159                           
  8160                           ;RF_Control_B1.c: 283: setDimmerLights(2, 0);
  8161  0DE1  0020               	movlb	0	; select bank0
  8162  0DE2  01A4               	clrf	setDimmerLights@status
  8163  0DE3  3002               	movlw	2
  8164  0DE4  3189  21BA  318D   	fcall	_setDimmerLights
  8165                           
  8166                           ;RF_Control_B1.c: 284: setRFSW_Status(2, 0);
  8167  0DE7  0020               	movlb	0	; select bank0
  8168  0DE8  01A2               	clrf	setRFSW_Status@command
  8169  0DE9  3002               	movlw	2
  8170  0DEA  319B  23F3  318D   	fcall	_setRFSW_Status
  8171                           
  8172                           ;RF_Control_B1.c: 285: setSw_Status(2, 0);
  8173  0DED  0020               	movlb	0	; select bank0
  8174  0DEE  01A2               	clrf	setSw_Status@command
  8175  0DEF  3002               	movlw	2
  8176  0DF0  319B  23E4  318D   	fcall	_setSw_Status
  8177                           
  8178                           ;RF_Control_B1.c: 288: setDimmerLights(3, 0);
  8179  0DF3  0020               	movlb	0	; select bank0
  8180  0DF4  01A4               	clrf	setDimmerLights@status
  8181  0DF5  3003               	movlw	3
  8182  0DF6  3189  21BA  318D   	fcall	_setDimmerLights
  8183                           
  8184                           ;RF_Control_B1.c: 289: setRFSW_Status(3, 0);
  8185  0DF9  0020               	movlb	0	; select bank0
  8186  0DFA  01A2               	clrf	setRFSW_Status@command
  8187  0DFB  3003               	movlw	3
  8188  0DFC  319B  23F3  318D   	fcall	_setRFSW_Status
  8189                           
  8190                           ;RF_Control_B1.c: 290: setSw_Status(3, 0);
  8191  0DFF  0020               	movlb	0	; select bank0
  8192  0E00  01A2               	clrf	setSw_Status@command
  8193  0E01  3003               	movlw	3
  8194  0E02  319B  23E4  318D   	fcall	_setSw_Status
  8195                           
  8196                           ;RF_Control_B1.c: 293: product->Data[9]=0;
  8197  0E05  087D               	movf	_product,w
  8198  0E06  3E09               	addlw	9
  8199  0E07  0086               	movwf	6
  8200  0E08  3002               	movlw	2	; select bank4/5
  8201  0E09  0087               	movwf	7
  8202  0E0A  0181               	clrf	1
  8203                           
  8204                           ;RF_Control_B1.c: 294: product->Data[11]=0;
  8205  0E0B  087D               	movf	_product,w
  8206  0E0C  3E0B               	addlw	11
  8207  0E0D  0086               	movwf	6
  8208  0E0E  3002               	movlw	2	; select bank4/5
  8209  0E0F  0087               	movwf	7
  8210  0E10  0181               	clrf	1
  8211                           
  8212                           ;RF_Control_B1.c: 295: product->Data[15]=0;
  8213  0E11  087D               	movf	_product,w
  8214  0E12  3E0F               	addlw	15
  8215  0E13  0086               	movwf	6
  8216  0E14  3002               	movlw	2	; select bank4/5
  8217  0E15  0087               	movwf	7
  8218  0E16  0181               	clrf	1
  8219                           
  8220                           ;RF_Control_B1.c: 296: product->Data[17]=0;
  8221  0E17  087D               	movf	_product,w
  8222  0E18  3E11               	addlw	17
  8223  0E19  0086               	movwf	6
  8224  0E1A  3002               	movlw	2	; select bank4/5
  8225  0E1B  0087               	movwf	7
  8226  0E1C  0181               	clrf	1
  8227                           
  8228                           ;RF_Control_B1.c: 297: setBuz(1, 100);
  8229  0E1D  3064               	movlw	100
  8230  0E1E  0020               	movlb	0	; select bank0
  8231  0E1F  00A9               	movwf	setBuz@time
  8232  0E20  3000               	movlw	0
  8233  0E21  00AA               	movwf	setBuz@time+1
  8234  0E22  3001               	movlw	1
  8235  0E23  318B  23D2  318D   	fcall	_setBuz
  8236                           
  8237                           ;RF_Control_B1.c: 298: setTxData(1);
  8238  0E26  3001               	movlw	1
  8239  0E27  3187  275B         	fcall	_setTxData
  8240                           
  8241                           ;RF_Control_B1.c: 299: } else if (RF_Data[15] == 0x20) {
  8242  0E29  0008               	return
  8243  0E2A                     l6343:	
  8244  0E2A  0021               	movlb	1	; select bank1
  8245  0E2B  082F               	movf	(_RF_Data^(0+128)+15),w
  8246  0E2C  3A20               	xorlw	32
  8247  0E2D  1D03               	skipz
  8248  0E2E  2E45               	goto	l6349
  8249                           
  8250                           ;RF_Control_B1.c: 300: product->Data[9]=0;
  8251  0E2F  087D               	movf	_product,w
  8252  0E30  3E09               	addlw	9
  8253  0E31  0086               	movwf	6
  8254  0E32  3002               	movlw	2	; select bank4/5
  8255  0E33  0087               	movwf	7
  8256  0E34  0181               	clrf	1
  8257                           
  8258                           ;RF_Control_B1.c: 301: product->Data[11]=0;
  8259  0E35  087D               	movf	_product,w
  8260  0E36  3E0B               	addlw	11
  8261  0E37  0086               	movwf	6
  8262  0E38  3002               	movlw	2	; select bank4/5
  8263  0E39  0087               	movwf	7
  8264  0E3A  0181               	clrf	1
  8265                           
  8266                           ;RF_Control_B1.c: 302: product->Data[17]=0;
  8267  0E3B  087D               	movf	_product,w
  8268  0E3C  3E11               	addlw	17
  8269  0E3D  0086               	movwf	6
  8270  0E3E  3002               	movlw	2	; select bank4/5
  8271  0E3F  0087               	movwf	7
  8272  0E40  0181               	clrf	1
  8273                           
  8274                           ;RF_Control_B1.c: 303: setTxData(1);
  8275  0E41  3001               	movlw	1
  8276  0E42  3187  275B         	fcall	_setTxData
  8277                           
  8278                           ;RF_Control_B1.c: 304: }
  8279  0E44  0008               	return
  8280  0E45                     l6349:	
  8281                           
  8282                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x01) {
  8283  0E45  0021               	movlb	1	; select bank1
  8284  0E46  082F               	movf	(_RF_Data^(0+128)+15),w
  8285  0E47  3A01               	xorlw	1
  8286  0E48  1D03               	skipz
  8287  0E49  2E4E               	goto	l6353
  8288                           
  8289                           ;RF_Control_B1.c: 307: setRFSW_Control(1);
  8290  0E4A  3001               	movlw	1
  8291  0E4B  3195  25E4         	fcall	_setRFSW_Control
  8292                           
  8293                           ;RF_Control_B1.c: 308: }
  8294  0E4D  0008               	return
  8295  0E4E                     l6353:	
  8296                           
  8297                           ;RF_Control_B1.c: 310: else if (RF_Data[15] == 0x11) {
  8298  0E4E  0021               	movlb	1	; select bank1
  8299  0E4F  082F               	movf	(_RF_Data^(0+128)+15),w
  8300  0E50  3A11               	xorlw	17
  8301  0E51  1D03               	skipz
  8302  0E52  2E57               	goto	l6357
  8303                           
  8304                           ;RF_Control_B1.c: 311: setRFSW_AdjControl(1);
  8305  0E53  3001               	movlw	1
  8306  0E54  3191  21ED         	fcall	_setRFSW_AdjControl
  8307                           
  8308                           ;RF_Control_B1.c: 312: }
  8309  0E56  0008               	return
  8310  0E57                     l6357:	
  8311                           
  8312                           ;RF_Control_B1.c: 317: else if (RF_Data[15] == 0x02) {
  8313  0E57  0021               	movlb	1	; select bank1
  8314  0E58  082F               	movf	(_RF_Data^(0+128)+15),w
  8315  0E59  3A02               	xorlw	2
  8316  0E5A  1D03               	skipz
  8317  0E5B  2E60               	goto	l6361
  8318                           
  8319                           ;RF_Control_B1.c: 318: setRFSW_Control(2);
  8320  0E5C  3002               	movlw	2
  8321  0E5D  3195  25E4         	fcall	_setRFSW_Control
  8322                           
  8323                           ;RF_Control_B1.c: 319: }
  8324  0E5F  0008               	return
  8325  0E60                     l6361:	
  8326                           
  8327                           ;RF_Control_B1.c: 321: else if (RF_Data[15] == 0x21) {
  8328  0E60  0021               	movlb	1	; select bank1
  8329  0E61  082F               	movf	(_RF_Data^(0+128)+15),w
  8330  0E62  3A21               	xorlw	33
  8331  0E63  1D03               	skipz
  8332  0E64  2E69               	goto	l6365
  8333                           
  8334                           ;RF_Control_B1.c: 322: setRFSW_AdjControl(2);
  8335  0E65  3002               	movlw	2
  8336  0E66  3191  21ED         	fcall	_setRFSW_AdjControl
  8337                           
  8338                           ;RF_Control_B1.c: 323: }
  8339  0E68  0008               	return
  8340  0E69                     l6365:	
  8341                           
  8342                           ;RF_Control_B1.c: 328: else if (RF_Data[15] == 0x03) {
  8343  0E69  0021               	movlb	1	; select bank1
  8344  0E6A  082F               	movf	(_RF_Data^(0+128)+15),w
  8345  0E6B  3A03               	xorlw	3
  8346  0E6C  1D03               	skipz
  8347  0E6D  2E72               	goto	l6369
  8348                           
  8349                           ;RF_Control_B1.c: 329: setRFSW_Control(3);
  8350  0E6E  3003               	movlw	3
  8351  0E6F  3195  25E4         	fcall	_setRFSW_Control
  8352                           
  8353                           ;RF_Control_B1.c: 330: }
  8354  0E71  0008               	return
  8355  0E72                     l6369:	
  8356                           
  8357                           ;RF_Control_B1.c: 332: else if (RF_Data[15] == 0x31) {
  8358  0E72  0021               	movlb	1	; select bank1
  8359  0E73  082F               	movf	(_RF_Data^(0+128)+15),w
  8360  0E74  3A31               	xorlw	49
  8361  0E75  1D03               	skipz
  8362  0E76  0008               	return
  8363                           
  8364                           ;RF_Control_B1.c: 333: setRFSW_AdjControl(3);
  8365  0E77  3003               	movlw	3
  8366  0E78  3191  21ED         	fcall	_setRFSW_AdjControl
  8367  0E7A  0008               	return
  8368  0E7B                     __end_of_setControl_Lights_Table:	
  8369                           
  8370                           	psect	text35
  8371  1BF3                     __ptext35:	
  8372 ;; *************** function _setRFSW_Status *****************
  8373 ;; Defined at:
  8374 ;;		line 405 in file "../src/RF_Control_B1.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  sw              1    wreg     unsigned char 
  8377 ;;  command         1    2[BANK0 ] unsigned char 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  sw              1    3[BANK0 ] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;		None               void
  8382 ;; Registers used:
  8383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8389 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;Total ram usage:        2 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    6
  8396 ;; This function calls:
  8397 ;;		_RfSWPointSelect
  8398 ;; This function is called by:
  8399 ;;		_setDimmerLights_ERROR
  8400 ;;		_setControl_Lights_Table
  8401 ;;		_Sw_DimmerOnFunc
  8402 ;;		_Sw_DimmerAdjFunc
  8403 ;; This function uses a non-reentrant model
  8404 ;;
  8405                           
  8406                           
  8407                           ;psect for function _setRFSW_Status
  8408  1BF3                     _setRFSW_Status:	
  8409                           
  8410                           ;incstack = 0
  8411                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8412                           ;setRFSW_Status@sw stored from wreg
  8413  1BF3  0020               	movlb	0	; select bank0
  8414  1BF4  00A3               	movwf	setRFSW_Status@sw
  8415                           
  8416                           ;RF_Control_B1.c: 406: RfSWPointSelect(sw);
  8417  1BF5  0823               	movf	setRFSW_Status@sw,w
  8418  1BF6  319F  270E         	fcall	_RfSWPointSelect
  8419                           
  8420                           ;RF_Control_B1.c: 407: RFSW->Status = command;
  8421  1BF8  0021               	movlb	1	; select bank1
  8422  1BF9  083F               	movf	_RFSW^(0+128),w
  8423  1BFA  0086               	movwf	6
  8424  1BFB  0187               	clrf	7
  8425  1BFC  0020               	movlb	0	; select bank0
  8426  1BFD  0822               	movf	setRFSW_Status@command,w
  8427  1BFE  1001               	bcf	1,0
  8428  1BFF  1D03               	skipz
  8429  1C00  1401               	bsf	1,0
  8430  1C01  0008               	return
  8431  1C02                     __end_of_setRFSW_Status:	
  8432                           
  8433                           	psect	text36
  8434  15E4                     __ptext36:	
  8435 ;; *************** function _setRFSW_Control *****************
  8436 ;; Defined at:
  8437 ;;		line 359 in file "../src/RF_Control_B1.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;  sw              1    wreg     unsigned char 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  sw              1   66[BANK0 ] unsigned char 
  8442 ;; Return value:  Size  Location     Type
  8443 ;;		None               void
  8444 ;; Registers used:
  8445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8446 ;; Tracked objects:
  8447 ;;		On entry : 0/0
  8448 ;;		On exit  : 0/0
  8449 ;;		Unchanged: 0/0
  8450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;Total ram usage:        1 bytes
  8456 ;; Hardware stack levels used:    1
  8457 ;; Hardware stack levels required when called:    9
  8458 ;; This function calls:
  8459 ;;		_RfSWPointSelect
  8460 ;;		_setBuz
  8461 ;;		_setDimmerLights_Switch
  8462 ;;		_setDimmerLights_Trigger
  8463 ;;		_setRF_DimmerLights
  8464 ;;		_setSw_Status
  8465 ;;		_setTxData
  8466 ;; This function is called by:
  8467 ;;		_setControl_Lights_Table
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _setRFSW_Control
  8473  15E4                     _setRFSW_Control:	
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8477                           ;setRFSW_Control@sw stored from wreg
  8478  15E4  0020               	movlb	0	; select bank0
  8479  15E5  00E2               	movwf	setRFSW_Control@sw
  8480                           
  8481                           ;RF_Control_B1.c: 360: RfSWPointSelect(sw);
  8482  15E6  0862               	movf	setRFSW_Control@sw,w
  8483  15E7  319F  270E  3195   	fcall	_RfSWPointSelect
  8484                           
  8485                           ;RF_Control_B1.c: 361: if (!RFSW->Status) {
  8486  15EA  0021               	movlb	1	; select bank1
  8487  15EB  083F               	movf	_RFSW^(0+128),w
  8488  15EC  0086               	movwf	6
  8489  15ED  0187               	clrf	7
  8490  15EE  1801               	btfsc	1,0
  8491  15EF  2E13               	goto	l6197
  8492                           
  8493                           ;RF_Control_B1.c: 364: }
  8494                           ;RF_Control_B1.c: 365: RFSW->Status = 1;
  8495                           
  8496                           ;RF_Control_B1.c: 363: ;;
  8497  15F0  083F               	movf	_RFSW^(0+128),w
  8498  15F1  0086               	movwf	6
  8499  15F2  0187               	clrf	7
  8500  15F3  1401               	bsf	1,0
  8501                           
  8502                           ;RF_Control_B1.c: 366: setSw_Status(sw, 1);
  8503  15F4  0020               	movlb	0	; select bank0
  8504  15F5  01A2               	clrf	setSw_Status@command
  8505  15F6  0AA2               	incf	setSw_Status@command,f
  8506  15F7  0862               	movf	setRFSW_Control@sw,w
  8507  15F8  319B  23E4  3195   	fcall	_setSw_Status
  8508                           
  8509                           ;RF_Control_B1.c: 368: setDimmerLights_Trigger(sw, 1);
  8510  15FB  0020               	movlb	0	; select bank0
  8511  15FC  01A2               	clrf	setDimmerLights_Trigger@command
  8512  15FD  0AA2               	incf	setDimmerLights_Trigger@command,f
  8513  15FE  0862               	movf	setRFSW_Control@sw,w
  8514  15FF  319C  2442  3195   	fcall	_setDimmerLights_Trigger
  8515                           
  8516                           ;RF_Control_B1.c: 369: setDimmerLights_Switch(sw, 1);
  8517  1602  0020               	movlb	0	; select bank0
  8518  1603  01A2               	clrf	setDimmerLights_Switch@command
  8519  1604  0AA2               	incf	setDimmerLights_Switch@command,f
  8520  1605  0862               	movf	setRFSW_Control@sw,w
  8521  1606  319C  2432  3195   	fcall	_setDimmerLights_Switch
  8522                           
  8523                           ;RF_Control_B1.c: 371: setRF_DimmerLights(sw, RFSW->Status);
  8524  1609  0021               	movlb	1	; select bank1
  8525  160A  083F               	movf	_RFSW^(0+128),w
  8526  160B  0086               	movwf	6
  8527  160C  0187               	clrf	7
  8528  160D  3000               	movlw	0
  8529  160E  1801               	btfsc	1,0
  8530  160F  3001               	movlw	1
  8531  1610  0020               	movlb	0	; select bank0
  8532  1611  00DD               	movwf	setRF_DimmerLights@on
  8533  1612  2E3D               	goto	L6
  8534  1613                     l6197:	
  8535                           ;RF_Control_B1.c: 372: } else {
  8536                           
  8537                           
  8538                           ;RF_Control_B1.c: 373: if (RF_Data[16] == 0x80) {
  8539  1613  0021               	movlb	1	; select bank1
  8540  1614  0830               	movf	(_RF_Data^(0+128)+16),w
  8541  1615  3A80               	xorlw	128
  8542  1616  1D03               	skipz
  8543  1617  2E1C               	goto	l6201
  8544                           
  8545                           ;RF_Control_B1.c: 374: ;;
  8546                           ;RF_Control_B1.c: 375: setRF_DimmerLights(sw, 1);
  8547  1618  0020               	movlb	0	; select bank0
  8548  1619  01DD               	clrf	setRF_DimmerLights@on
  8549  161A  0ADD               	incf	setRF_DimmerLights@on,f
  8550  161B  2E3D               	goto	L6
  8551  161C                     l6201:	
  8552                           ;RF_Control_B1.c: 376: } else {
  8553                           
  8554                           
  8555                           ;RF_Control_B1.c: 377: RFSW->Status = 0;
  8556  161C  0021               	movlb	1	; select bank1
  8557  161D  083F               	movf	_RFSW^(0+128),w
  8558  161E  0086               	movwf	6
  8559  161F  0187               	clrf	7
  8560  1620  1001               	bcf	1,0
  8561                           
  8562                           ;RF_Control_B1.c: 378: setSw_Status(sw, 0);
  8563  1621  0020               	movlb	0	; select bank0
  8564  1622  01A2               	clrf	setSw_Status@command
  8565  1623  0862               	movf	setRFSW_Control@sw,w
  8566  1624  319B  23E4  3195   	fcall	_setSw_Status
  8567                           
  8568                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw, 1);
  8569  1627  0020               	movlb	0	; select bank0
  8570  1628  01A2               	clrf	setDimmerLights_Trigger@command
  8571  1629  0AA2               	incf	setDimmerLights_Trigger@command,f
  8572  162A  0862               	movf	setRFSW_Control@sw,w
  8573  162B  319C  2442  3195   	fcall	_setDimmerLights_Trigger
  8574                           
  8575                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw, RFSW->Status);
  8576  162E  0021               	movlb	1	; select bank1
  8577  162F  083F               	movf	_RFSW^(0+128),w
  8578  1630  0086               	movwf	6
  8579  1631  0187               	clrf	7
  8580  1632  3000               	movlw	0
  8581  1633  1801               	btfsc	1,0
  8582  1634  3001               	movlw	1
  8583  1635  0020               	movlb	0	; select bank0
  8584  1636  00A2               	movwf	setDimmerLights_Switch@command
  8585  1637  0862               	movf	setRFSW_Control@sw,w
  8586  1638  319C  2432  3195   	fcall	_setDimmerLights_Switch
  8587                           
  8588                           ;RF_Control_B1.c: 383: ;;
  8589                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw, 0);
  8590  163B  0020               	movlb	0	; select bank0
  8591  163C  01DD               	clrf	setRF_DimmerLights@on
  8592  163D                     L6:	
  8593  163D  0862               	movf	setRFSW_Control@sw,w
  8594  163E  3196  26B8  3195   	fcall	_setRF_DimmerLights
  8595                           
  8596                           ;RF_Control_B1.c: 385: }
  8597                           ;RF_Control_B1.c: 386: }
  8598                           ;RF_Control_B1.c: 387: setBuz(1, 100);
  8599  1641  3064               	movlw	100
  8600  1642  0020               	movlb	0	; select bank0
  8601  1643  00A9               	movwf	setBuz@time
  8602  1644  3000               	movlw	0
  8603  1645  00AA               	movwf	setBuz@time+1
  8604  1646  3001               	movlw	1
  8605  1647  318B  23D2  3195   	fcall	_setBuz
  8606                           
  8607                           ;RF_Control_B1.c: 388: setTxData(1);
  8608  164A  3001               	movlw	1
  8609  164B  3187  275B         	fcall	_setTxData
  8610  164D  0008               	return
  8611  164E                     __end_of_setRFSW_Control:	
  8612                           
  8613                           	psect	text37
  8614  1BE4                     __ptext37:	
  8615 ;; *************** function _setSw_Status *****************
  8616 ;; Defined at:
  8617 ;;		line 105 in file "../src/Switch_B1.c"
  8618 ;; Parameters:    Size  Location     Type
  8619 ;;  sw              1    wreg     unsigned char 
  8620 ;;  command         1    2[BANK0 ] unsigned char 
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;  sw              1    3[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;		None               void
  8625 ;; Registers used:
  8626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8632 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;Total ram usage:        2 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    6
  8639 ;; This function calls:
  8640 ;;		_SwPointSelect
  8641 ;; This function is called by:
  8642 ;;		_setDimmerLights_ERROR
  8643 ;;		_setControl_Lights_Table
  8644 ;;		_setRFSW_Control
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function _setSw_Status
  8650  1BE4                     _setSw_Status:	
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8654                           ;setSw_Status@sw stored from wreg
  8655  1BE4  0020               	movlb	0	; select bank0
  8656  1BE5  00A3               	movwf	setSw_Status@sw
  8657                           
  8658                           ;Switch_B1.c: 106: SwPointSelect(sw);
  8659  1BE6  0823               	movf	setSw_Status@sw,w
  8660  1BE7  319E  2674         	fcall	_SwPointSelect
  8661                           
  8662                           ;Switch_B1.c: 107: Sw->Status = command;
  8663  1BE9  087B               	movf	_Sw,w
  8664  1BEA  0086               	movwf	6
  8665  1BEB  3001               	movlw	1	; select bank2/3
  8666  1BEC  0087               	movwf	7
  8667  1BED  0020               	movlb	0	; select bank0
  8668  1BEE  0822               	movf	setSw_Status@command,w
  8669  1BEF  1301               	bcf	1,6
  8670  1BF0  1D03               	skipz
  8671  1BF1  1701               	bsf	1,6
  8672  1BF2  0008               	return
  8673  1BF3                     __end_of_setSw_Status:	
  8674                           
  8675                           	psect	text38
  8676  1E74                     __ptext38:	
  8677 ;; *************** function _SwPointSelect *****************
  8678 ;; Defined at:
  8679 ;;		line 17 in file "../src/Switch_B1.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  sw              1    wreg     unsigned char 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  sw              1    1[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;		None               void
  8686 ;; Registers used:
  8687 ;;		wreg
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;Total ram usage:        2 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    5
  8700 ;; This function calls:
  8701 ;;		Nothing
  8702 ;; This function is called by:
  8703 ;;		_setSw_Enable
  8704 ;;		_setSw_Status
  8705 ;;		_setSw_Main
  8706 ;;		_Sw_Detect
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _SwPointSelect
  8712  1E74                     _SwPointSelect:	
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _SwPointSelect: [wreg]
  8716                           ;SwPointSelect@sw stored from wreg
  8717  1E74  0020               	movlb	0	; select bank0
  8718  1E75  00A1               	movwf	SwPointSelect@sw
  8719                           
  8720                           ;Switch_B1.c: 20: if (sw == 1) {
  8721  1E76  0821               	movf	SwPointSelect@sw,w
  8722  1E77  3A01               	xorlw	1
  8723  1E78  1D03               	skipz
  8724  1E79  2E7F               	goto	l5883
  8725                           
  8726                           ;Switch_B1.c: 21: Sw = &Sw1;
  8727  1E7A  3059               	movlw	_Sw1& (0+255)
  8728  1E7B  00A0               	movwf	??_SwPointSelect
  8729  1E7C  0820               	movf	??_SwPointSelect,w
  8730  1E7D  00FB               	movwf	_Sw
  8731                           
  8732                           ;Switch_B1.c: 22: }
  8733  1E7E  0008               	return
  8734  1E7F                     l5883:	
  8735                           
  8736                           ;Switch_B1.c: 25: else if (sw == 2) {
  8737  1E7F  0821               	movf	SwPointSelect@sw,w
  8738  1E80  3A02               	xorlw	2
  8739  1E81  1D03               	skipz
  8740  1E82  2E88               	goto	l5887
  8741                           
  8742                           ;Switch_B1.c: 26: Sw = &Sw2;
  8743  1E83  30C2               	movlw	_Sw2& (0+255)
  8744  1E84  00A0               	movwf	??_SwPointSelect
  8745  1E85  0820               	movf	??_SwPointSelect,w
  8746  1E86  00FB               	movwf	_Sw
  8747                           
  8748                           ;Switch_B1.c: 27: }
  8749  1E87  0008               	return
  8750  1E88                     l5887:	
  8751                           
  8752                           ;Switch_B1.c: 30: else if (sw == 3) {
  8753  1E88  0821               	movf	SwPointSelect@sw,w
  8754  1E89  3A03               	xorlw	3
  8755  1E8A  1D03               	skipz
  8756  1E8B  0008               	return
  8757                           
  8758                           ;Switch_B1.c: 31: Sw = &Sw3;
  8759  1E8C  30CB               	movlw	_Sw3& (0+255)
  8760  1E8D  00A0               	movwf	??_SwPointSelect
  8761  1E8E  0820               	movf	??_SwPointSelect,w
  8762  1E8F  00FB               	movwf	_Sw
  8763  1E90  0008               	return
  8764  1E91                     __end_of_SwPointSelect:	
  8765                           
  8766                           	psect	text39
  8767  1C42                     __ptext39:	
  8768 ;; *************** function _setDimmerLights_Trigger *****************
  8769 ;; Defined at:
  8770 ;;		line 705 in file "../src/Dimmer_B1.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  lights          1    wreg     unsigned char 
  8773 ;;  command         1    2[BANK0 ] unsigned char 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  lights          1    3[BANK0 ] unsigned char 
  8776 ;; Return value:  Size  Location     Type
  8777 ;;		None               void
  8778 ;; Registers used:
  8779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8780 ;; Tracked objects:
  8781 ;;		On entry : 0/0
  8782 ;;		On exit  : 0/0
  8783 ;;		Unchanged: 0/0
  8784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8785 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8789 ;;Total ram usage:        2 bytes
  8790 ;; Hardware stack levels used:    1
  8791 ;; Hardware stack levels required when called:    6
  8792 ;; This function calls:
  8793 ;;		_DimmerLightsPointSelect
  8794 ;; This function is called by:
  8795 ;;		_setRFSW_Control
  8796 ;;		_Sw_DimmerOnFunc
  8797 ;;		_Sw_DimmerOffFunc
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           
  8802                           ;psect for function _setDimmerLights_Trigger
  8803  1C42                     _setDimmerLights_Trigger:	
  8804                           
  8805                           ;incstack = 0
  8806                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8807                           ;setDimmerLights_Trigger@lights stored from wreg
  8808  1C42  0020               	movlb	0	; select bank0
  8809  1C43  00A3               	movwf	setDimmerLights_Trigger@lights
  8810                           
  8811                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
  8812  1C44  0823               	movf	setDimmerLights_Trigger@lights,w
  8813  1C45  319D  25CD         	fcall	_DimmerLightsPointSelect
  8814                           
  8815                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
  8816  1C47  0878               	movf	_DimmerLights,w
  8817  1C48  3E08               	addlw	8
  8818  1C49  0086               	movwf	6
  8819  1C4A  3001               	movlw	1	; select bank2/3
  8820  1C4B  0087               	movwf	7
  8821  1C4C  0020               	movlb	0	; select bank0
  8822  1C4D  0822               	movf	setDimmerLights_Trigger@command,w
  8823  1C4E  1101               	bcf	1,2
  8824  1C4F  1D03               	skipz
  8825  1C50  1501               	bsf	1,2
  8826  1C51  0008               	return
  8827  1C52                     __end_of_setDimmerLights_Trigger:	
  8828                           
  8829                           	psect	text40
  8830  1C32                     __ptext40:	
  8831 ;; *************** function _setDimmerLights_Switch *****************
  8832 ;; Defined at:
  8833 ;;		line 693 in file "../src/Dimmer_B1.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;  lights          1    wreg     unsigned char 
  8836 ;;  command         1    2[BANK0 ] unsigned char 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  lights          1    3[BANK0 ] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;Total ram usage:        2 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    6
  8855 ;; This function calls:
  8856 ;;		_DimmerLightsPointSelect
  8857 ;; This function is called by:
  8858 ;;		_setRFSW_Control
  8859 ;;		_Sw_DimmerOnFunc
  8860 ;;		_Sw_DimmerOffFunc
  8861 ;; This function uses a non-reentrant model
  8862 ;;
  8863                           
  8864                           
  8865                           ;psect for function _setDimmerLights_Switch
  8866  1C32                     _setDimmerLights_Switch:	
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  8870                           ;setDimmerLights_Switch@lights stored from wreg
  8871  1C32  0020               	movlb	0	; select bank0
  8872  1C33  00A3               	movwf	setDimmerLights_Switch@lights
  8873                           
  8874                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
  8875  1C34  0823               	movf	setDimmerLights_Switch@lights,w
  8876  1C35  319D  25CD         	fcall	_DimmerLightsPointSelect
  8877                           
  8878                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
  8879  1C37  0878               	movf	_DimmerLights,w
  8880  1C38  3E08               	addlw	8
  8881  1C39  0086               	movwf	6
  8882  1C3A  3001               	movlw	1	; select bank2/3
  8883  1C3B  0087               	movwf	7
  8884  1C3C  0020               	movlb	0	; select bank0
  8885  1C3D  0822               	movf	setDimmerLights_Switch@command,w
  8886  1C3E  1081               	bcf	1,1
  8887  1C3F  1D03               	skipz
  8888  1C40  1481               	bsf	1,1
  8889  1C41  0008               	return
  8890  1C42                     __end_of_setDimmerLights_Switch:	
  8891                           
  8892                           	psect	text41
  8893  11ED                     __ptext41:	
  8894 ;; *************** function _setRFSW_AdjControl *****************
  8895 ;; Defined at:
  8896 ;;		line 392 in file "../src/RF_Control_B1.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  sw              1    wreg     unsigned char 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  sw              1   70[BANK0 ] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;		None               void
  8903 ;; Registers used:
  8904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        3 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:   10
  8917 ;; This function calls:
  8918 ;;		_RfSWPointSelect
  8919 ;;		_setRF_DimmerValue
  8920 ;;		_setTxData
  8921 ;; This function is called by:
  8922 ;;		_setControl_Lights_Table
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _setRFSW_AdjControl
  8928  11ED                     _setRFSW_AdjControl:	
  8929                           
  8930                           ;incstack = 0
  8931                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8932                           ;setRFSW_AdjControl@sw stored from wreg
  8933  11ED  0020               	movlb	0	; select bank0
  8934  11EE  00E6               	movwf	setRFSW_AdjControl@sw
  8935                           
  8936                           ;RF_Control_B1.c: 393: RfSWPointSelect(sw);
  8937  11EF  0866               	movf	setRFSW_AdjControl@sw,w
  8938  11F0  319F  270E  3191   	fcall	_RfSWPointSelect
  8939                           
  8940                           ;RF_Control_B1.c: 394: if (RFSW->Status == 1) {
  8941  11F3  0021               	movlb	1	; select bank1
  8942  11F4  083F               	movf	_RFSW^(0+128),w
  8943  11F5  0086               	movwf	6
  8944  11F6  0187               	clrf	7
  8945  11F7  1C01               	btfss	1,0
  8946  11F8  2A05               	goto	l6223
  8947                           
  8948                           ;RF_Control_B1.c: 395: Memory->Modify=1;
  8949  11F9  0868               	movf	_Memory^(0+128),w
  8950  11FA  3E24               	addlw	36
  8951  11FB  0086               	movwf	6
  8952  11FC  3002               	movlw	2	; select bank4/5
  8953  11FD  0087               	movwf	7
  8954  11FE  1401               	bsf	1,0
  8955                           
  8956                           ;RF_Control_B1.c: 396: setRF_DimmerValue(sw);
  8957  11FF  0020               	movlb	0	; select bank0
  8958  1200  0866               	movf	setRFSW_AdjControl@sw,w
  8959  1201  3191  2143  3191   	fcall	_setRF_DimmerValue
  8960                           
  8961                           ;RF_Control_B1.c: 397: } else {
  8962  1204  2A17               	goto	l2394
  8963  1205                     l6223:	
  8964                           
  8965                           ;RF_Control_B1.c: 398: product->Data[9]=product->Data[20 + sw];
  8966  1205  0020               	movlb	0	; select bank0
  8967  1206  0866               	movf	setRFSW_AdjControl@sw,w
  8968  1207  3E14               	addlw	20
  8969  1208  077D               	addwf	_product,w
  8970  1209  00E4               	movwf	??_setRFSW_AdjControl
  8971  120A  0864               	movf	??_setRFSW_AdjControl,w
  8972  120B  0086               	movwf	6
  8973  120C  3002               	movlw	2	; select bank4/5
  8974  120D  0087               	movwf	7
  8975  120E  0801               	movf	1,w
  8976  120F  00E5               	movwf	??_setRFSW_AdjControl+1
  8977  1210  087D               	movf	_product,w
  8978  1211  3E09               	addlw	9
  8979  1212  0086               	movwf	6
  8980  1213  3002               	movlw	2	; select bank4/5
  8981  1214  0087               	movwf	7
  8982  1215  0865               	movf	??_setRFSW_AdjControl+1,w
  8983  1216  0081               	movwf	1
  8984  1217                     l2394:	
  8985                           
  8986                           ;RF_Control_B1.c: 399: }
  8987                           ;RF_Control_B1.c: 400: product->Data[17]=product->Data[26 + sw];
  8988  1217  0020               	movlb	0	; select bank0
  8989  1218  0866               	movf	setRFSW_AdjControl@sw,w
  8990  1219  3E1A               	addlw	26
  8991  121A  077D               	addwf	_product,w
  8992  121B  00E4               	movwf	??_setRFSW_AdjControl
  8993  121C  0864               	movf	??_setRFSW_AdjControl,w
  8994  121D  0086               	movwf	6
  8995  121E  3002               	movlw	2	; select bank4/5
  8996  121F  0087               	movwf	7
  8997  1220  0801               	movf	1,w
  8998  1221  00E5               	movwf	??_setRFSW_AdjControl+1
  8999  1222  087D               	movf	_product,w
  9000  1223  3E11               	addlw	17
  9001  1224  0086               	movwf	6
  9002  1225  3002               	movlw	2	; select bank4/5
  9003  1226  0087               	movwf	7
  9004  1227  0865               	movf	??_setRFSW_AdjControl+1,w
  9005  1228  0081               	movwf	1
  9006                           
  9007                           ;RF_Control_B1.c: 401: setTxData(1);
  9008  1229  3001               	movlw	1
  9009  122A  3187  275B         	fcall	_setTxData
  9010  122C  0008               	return
  9011  122D                     __end_of_setRFSW_AdjControl:	
  9012                           
  9013                           	psect	text42
  9014  1143                     __ptext42:	
  9015 ;; *************** function _setRF_DimmerValue *****************
  9016 ;; Defined at:
  9017 ;;		line 412 in file "../src/RF_Control_B1.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;  lights          1    wreg     unsigned char 
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  lights          1   67[BANK0 ] unsigned char 
  9022 ;; Return value:  Size  Location     Type
  9023 ;;		None               void
  9024 ;; Registers used:
  9025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        3 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    9
  9038 ;; This function calls:
  9039 ;;		_setDimmerLights_AdjRF
  9040 ;; This function is called by:
  9041 ;;		_setRFSW_AdjControl
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _setRF_DimmerValue
  9047  1143                     _setRF_DimmerValue:	
  9048                           
  9049                           ;incstack = 0
  9050                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9051                           ;setRF_DimmerValue@lights stored from wreg
  9052  1143  0020               	movlb	0	; select bank0
  9053  1144  00E3               	movwf	setRF_DimmerValue@lights
  9054                           
  9055                           ;RF_Control_B1.c: 413: if (RF_Data[9] > 0x64) {
  9056  1145  3065               	movlw	101
  9057  1146  0021               	movlb	1	; select bank1
  9058  1147  0229               	subwf	(_RF_Data^(0+128)+9),w
  9059  1148  1C03               	skipc
  9060  1149  2950               	goto	l6073
  9061                           
  9062                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x64;
  9063  114A  3064               	movlw	100
  9064  114B  0020               	movlb	0	; select bank0
  9065  114C  00E1               	movwf	??_setRF_DimmerValue
  9066  114D  0861               	movf	??_setRF_DimmerValue,w
  9067  114E  0021               	movlb	1	; select bank1
  9068  114F  00A9               	movwf	(_RF_Data^(0+128)+9)
  9069  1150                     l6073:	
  9070                           
  9071                           ;RF_Control_B1.c: 415: }
  9072                           ;RF_Control_B1.c: 416: product->Data[9]=RF_Data[9];
  9073  1150  0829               	movf	(_RF_Data^(0+128)+9),w
  9074  1151  0020               	movlb	0	; select bank0
  9075  1152  00E1               	movwf	??_setRF_DimmerValue
  9076  1153  087D               	movf	_product,w
  9077  1154  3E09               	addlw	9
  9078  1155  0086               	movwf	6
  9079  1156  3002               	movlw	2	; select bank4/5
  9080  1157  0087               	movwf	7
  9081  1158  0861               	movf	??_setRF_DimmerValue,w
  9082  1159  0081               	movwf	1
  9083                           
  9084                           ;RF_Control_B1.c: 417: product->Data[11]=lights;
  9085  115A  0863               	movf	setRF_DimmerValue@lights,w
  9086  115B  00E1               	movwf	??_setRF_DimmerValue
  9087  115C  087D               	movf	_product,w
  9088  115D  3E0B               	addlw	11
  9089  115E  0086               	movwf	6
  9090  115F  3002               	movlw	2	; select bank4/5
  9091  1160  0087               	movwf	7
  9092  1161  0861               	movf	??_setRF_DimmerValue,w
  9093  1162  0081               	movwf	1
  9094                           
  9095                           ;RF_Control_B1.c: 418: product->Data[(20 + lights)]=product->Data[9];
  9096  1163  087D               	movf	_product,w
  9097  1164  3E09               	addlw	9
  9098  1165  0086               	movwf	6
  9099  1166  3002               	movlw	2	; select bank4/5
  9100  1167  0087               	movwf	7
  9101  1168  0801               	movf	1,w
  9102  1169  00E1               	movwf	??_setRF_DimmerValue
  9103  116A  0863               	movf	setRF_DimmerValue@lights,w
  9104  116B  3E14               	addlw	20
  9105  116C  077D               	addwf	_product,w
  9106  116D  00E2               	movwf	??_setRF_DimmerValue+1
  9107  116E  0862               	movf	??_setRF_DimmerValue+1,w
  9108  116F  0086               	movwf	6
  9109  1170  3002               	movlw	2	; select bank4/5
  9110  1171  0087               	movwf	7
  9111  1172  0861               	movf	??_setRF_DimmerValue,w
  9112  1173  0081               	movwf	1
  9113                           
  9114                           ;RF_Control_B1.c: 419: setDimmerLights_AdjRF(lights);
  9115  1174  0863               	movf	setRF_DimmerValue@lights,w
  9116  1175  319F  2791         	fcall	_setDimmerLights_AdjRF
  9117  1177  0008               	return
  9118  1178                     __end_of_setRF_DimmerValue:	
  9119                           
  9120                           	psect	text43
  9121  1F91                     __ptext43:	
  9122 ;; *************** function _setDimmerLights_AdjRF *****************
  9123 ;; Defined at:
  9124 ;;		line 679 in file "../src/Dimmer_B1.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  lights          1    wreg     unsigned char 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  lights          1   64[BANK0 ] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;		None               void
  9131 ;; Registers used:
  9132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;Total ram usage:        2 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    8
  9145 ;; This function calls:
  9146 ;;		_DimmerLightsPointSelect
  9147 ;;		_getPercentValue
  9148 ;; This function is called by:
  9149 ;;		_setRF_DimmerValue
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           
  9154                           ;psect for function _setDimmerLights_AdjRF
  9155  1F91                     _setDimmerLights_AdjRF:	
  9156                           
  9157                           ;incstack = 0
  9158                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9159                           ;setDimmerLights_AdjRF@lights stored from wreg
  9160  1F91  0020               	movlb	0	; select bank0
  9161  1F92  00E0               	movwf	setDimmerLights_AdjRF@lights
  9162                           
  9163                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  9164  1F93  0860               	movf	setDimmerLights_AdjRF@lights,w
  9165  1F94  319D  25CD  319F   	fcall	_DimmerLightsPointSelect
  9166                           
  9167                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  9168  1F97  0878               	movf	_DimmerLights,w
  9169  1F98  0086               	movwf	6
  9170  1F99  3001               	movlw	1	; select bank2/3
  9171  1F9A  0087               	movwf	7
  9172  1F9B  1501               	bsf	1,2
  9173                           
  9174                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  9175  1F9C  0878               	movf	_DimmerLights,w
  9176  1F9D  0086               	movwf	6
  9177  1F9E  3001               	movlw	1	; select bank2/3
  9178  1F9F  0087               	movwf	7
  9179  1FA0  1481               	bsf	1,1
  9180                           
  9181                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  9182  1FA1  087D               	movf	_product,w
  9183  1FA2  3E09               	addlw	9
  9184  1FA3  0086               	movwf	6
  9185  1FA4  3002               	movlw	2	; select bank4/5
  9186  1FA5  0087               	movwf	7
  9187  1FA6  0801               	movf	1,w
  9188  1FA7  3194  246D         	fcall	_getPercentValue
  9189  1FA9  0020               	movlb	0	; select bank0
  9190  1FAA  00DF               	movwf	??_setDimmerLights_AdjRF
  9191  1FAB  0878               	movf	_DimmerLights,w
  9192  1FAC  3E05               	addlw	5
  9193  1FAD  0086               	movwf	6
  9194  1FAE  3001               	movlw	1	; select bank2/3
  9195  1FAF  0087               	movwf	7
  9196  1FB0  085F               	movf	??_setDimmerLights_AdjRF,w
  9197  1FB1  0081               	movwf	1
  9198  1FB2  0008               	return
  9199  1FB3                     __end_of_setDimmerLights_AdjRF:	
  9200                           
  9201                           	psect	text44
  9202  146D                     __ptext44:	
  9203 ;; *************** function _getPercentValue *****************
  9204 ;; Defined at:
  9205 ;;		line 752 in file "../src/Dimmer_B1.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  value           1    wreg     unsigned char 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  value           1   59[BANK0 ] unsigned char 
  9210 ;;  i               3   60[BANK0 ] float 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      unsigned char 
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0, pclath, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;Total ram usage:        6 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    7
  9227 ;; This function calls:
  9228 ;;		___awtoft
  9229 ;;		___ftadd
  9230 ;;		___ftdiv
  9231 ;;		___ftmul
  9232 ;;		___fttol
  9233 ;; This function is called by:
  9234 ;;		_setDimmerLights_AdjRF
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           
  9239                           ;psect for function _getPercentValue
  9240  146D                     _getPercentValue:	
  9241                           
  9242                           ;incstack = 0
  9243                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  9244                           ;getPercentValue@value stored from wreg
  9245  146D  0020               	movlb	0	; select bank0
  9246  146E  00DB               	movwf	getPercentValue@value
  9247                           
  9248                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  9249  146F  3000               	movlw	0
  9250  1470  00DC               	movwf	getPercentValue@i
  9251  1471  3060               	movlw	96
  9252  1472  00DD               	movwf	getPercentValue@i+1
  9253  1473  3042               	movlw	66
  9254  1474  00DE               	movwf	getPercentValue@i+2
  9255                           
  9256                           ;Dimmer_B1.c: 755: i /= 100;
  9257  1475  3000               	movlw	0
  9258  1476  00AE               	movwf	___ftdiv@f2
  9259  1477  30C8               	movlw	200
  9260  1478  00AF               	movwf	___ftdiv@f2+1
  9261  1479  3042               	movlw	66
  9262  147A  00B0               	movwf	___ftdiv@f2+2
  9263  147B  085C               	movf	getPercentValue@i,w
  9264  147C  00B1               	movwf	___ftdiv@f1
  9265  147D  085D               	movf	getPercentValue@i+1,w
  9266  147E  00B2               	movwf	___ftdiv@f1+1
  9267  147F  085E               	movf	getPercentValue@i+2,w
  9268  1480  00B3               	movwf	___ftdiv@f1+2
  9269  1481  318C  2468  3194   	fcall	___ftdiv
  9270  1484  0020               	movlb	0	; select bank0
  9271  1485  082E               	movf	?___ftdiv,w
  9272  1486  00DC               	movwf	getPercentValue@i
  9273  1487  082F               	movf	?___ftdiv+1,w
  9274  1488  00DD               	movwf	getPercentValue@i+1
  9275  1489  0830               	movf	?___ftdiv+2,w
  9276  148A  00DE               	movwf	getPercentValue@i+2
  9277                           
  9278                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  9279  148B  085B               	movf	getPercentValue@value,w
  9280  148C  00D9               	movwf	??_getPercentValue
  9281  148D  01DA               	clrf	??_getPercentValue+1
  9282  148E  09D9               	comf	??_getPercentValue,f
  9283  148F  09DA               	comf	??_getPercentValue+1,f
  9284  1490  0AD9               	incf	??_getPercentValue,f
  9285  1491  1903               	skipnz
  9286  1492  0ADA               	incf	??_getPercentValue+1,f
  9287  1493  0859               	movf	??_getPercentValue,w
  9288  1494  3E64               	addlw	100
  9289  1495  00A8               	movwf	___awtoft@c
  9290  1496  3000               	movlw	0
  9291  1497  3D5A               	addwfc	??_getPercentValue+1,w
  9292  1498  00A9               	movwf	___awtoft@c+1
  9293  1499  319F  276F  3194   	fcall	___awtoft
  9294  149C  0020               	movlb	0	; select bank0
  9295  149D  0828               	movf	?___awtoft,w
  9296  149E  00B1               	movwf	___ftmul@f2
  9297  149F  0829               	movf	?___awtoft+1,w
  9298  14A0  00B2               	movwf	___ftmul@f2+1
  9299  14A1  082A               	movf	?___awtoft+2,w
  9300  14A2  00B3               	movwf	___ftmul@f2+2
  9301  14A3  085C               	movf	getPercentValue@i,w
  9302  14A4  00AE               	movwf	___ftmul@f1
  9303  14A5  085D               	movf	getPercentValue@i+1,w
  9304  14A6  00AF               	movwf	___ftmul@f1+1
  9305  14A7  085E               	movf	getPercentValue@i+2,w
  9306  14A8  00B0               	movwf	___ftmul@f1+2
  9307  14A9  318D  2511  3194   	fcall	___ftmul
  9308  14AC  0020               	movlb	0	; select bank0
  9309  14AD  082E               	movf	?___ftmul,w
  9310  14AE  00C1               	movwf	___ftadd@f2
  9311  14AF  082F               	movf	?___ftmul+1,w
  9312  14B0  00C2               	movwf	___ftadd@f2+1
  9313  14B1  0830               	movf	?___ftmul+2,w
  9314  14B2  00C3               	movwf	___ftadd@f2+2
  9315  14B3  3000               	movlw	0
  9316  14B4  00BE               	movwf	___ftadd@f1
  9317  14B5  3080               	movlw	128
  9318  14B6  00BF               	movwf	___ftadd@f1+1
  9319  14B7  3040               	movlw	64
  9320  14B8  00C0               	movwf	___ftadd@f1+2
  9321  14B9  3185  2591  3194   	fcall	___ftadd
  9322  14BC  0020               	movlb	0	; select bank0
  9323  14BD  083E               	movf	?___ftadd,w
  9324  14BE  00CB               	movwf	___fttol@f1
  9325  14BF  083F               	movf	?___ftadd+1,w
  9326  14C0  00CC               	movwf	___fttol@f1+1
  9327  14C1  0840               	movf	?___ftadd+2,w
  9328  14C2  00CD               	movwf	___fttol@f1+2
  9329  14C3  318A  223A         	fcall	___fttol
  9330  14C5  0020               	movlb	0	; select bank0
  9331  14C6  084B               	movf	?___fttol,w
  9332  14C7  0008               	return
  9333  14C8                     __end_of_getPercentValue:	
  9334                           
  9335                           	psect	text45
  9336  0D11                     __ptext45:	
  9337 ;; *************** function ___ftmul *****************
  9338 ;; Defined at:
  9339 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  f1              3   14[BANK0 ] float 
  9342 ;;  f2              3   17[BANK0 ] float 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  9345 ;;  sign            1   29[BANK0 ] unsigned char 
  9346 ;;  cntr            1   28[BANK0 ] unsigned char 
  9347 ;;  exp             1   24[BANK0 ] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;                  3   14[BANK0 ] float 
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0, pclath, cstack
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/0
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9357 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9359 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9360 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9361 ;;Total ram usage:       16 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    6
  9364 ;; This function calls:
  9365 ;;		___ftpack
  9366 ;; This function is called by:
  9367 ;;		_getPercentValue
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           
  9372                           ;psect for function ___ftmul
  9373  0D11                     ___ftmul:	
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9377  0D11  0020               	movlb	0	; select bank0
  9378  0D12  082E               	movf	___ftmul@f1,w
  9379  0D13  00B4               	movwf	??___ftmul
  9380  0D14  082F               	movf	___ftmul@f1+1,w
  9381  0D15  00B5               	movwf	??___ftmul+1
  9382  0D16  0830               	movf	___ftmul@f1+2,w
  9383  0D17  00B6               	movwf	??___ftmul+2
  9384  0D18  1003               	clrc
  9385  0D19  0D35               	rlf	??___ftmul+1,w
  9386  0D1A  0D36               	rlf	??___ftmul+2,w
  9387  0D1B  00B7               	movwf	??___ftmul+3
  9388  0D1C  0837               	movf	??___ftmul+3,w
  9389  0D1D  00B8               	movwf	___ftmul@exp
  9390  0D1E  08B8               	movf	___ftmul@exp,f
  9391  0D1F  1D03               	skipz
  9392  0D20  2D28               	goto	l5727
  9393  0D21  3000               	movlw	0
  9394  0D22  00AE               	movwf	?___ftmul
  9395  0D23  3000               	movlw	0
  9396  0D24  00AF               	movwf	?___ftmul+1
  9397  0D25  3000               	movlw	0
  9398  0D26  00B0               	movwf	?___ftmul+2
  9399  0D27  0008               	return
  9400  0D28                     l5727:	
  9401  0D28  0831               	movf	___ftmul@f2,w
  9402  0D29  00B4               	movwf	??___ftmul
  9403  0D2A  0832               	movf	___ftmul@f2+1,w
  9404  0D2B  00B5               	movwf	??___ftmul+1
  9405  0D2C  0833               	movf	___ftmul@f2+2,w
  9406  0D2D  00B6               	movwf	??___ftmul+2
  9407  0D2E  1003               	clrc
  9408  0D2F  0D35               	rlf	??___ftmul+1,w
  9409  0D30  0D36               	rlf	??___ftmul+2,w
  9410  0D31  00B7               	movwf	??___ftmul+3
  9411  0D32  0837               	movf	??___ftmul+3,w
  9412  0D33  00BD               	movwf	___ftmul@sign
  9413  0D34  08BD               	movf	___ftmul@sign,f
  9414  0D35  1D03               	skipz
  9415  0D36  2D3E               	goto	l5733
  9416  0D37  3000               	movlw	0
  9417  0D38  00AE               	movwf	?___ftmul
  9418  0D39  3000               	movlw	0
  9419  0D3A  00AF               	movwf	?___ftmul+1
  9420  0D3B  3000               	movlw	0
  9421  0D3C  00B0               	movwf	?___ftmul+2
  9422  0D3D  0008               	return
  9423  0D3E                     l5733:	
  9424  0D3E  083D               	movf	___ftmul@sign,w
  9425  0D3F  3E7B               	addlw	123
  9426  0D40  00B4               	movwf	??___ftmul
  9427  0D41  0834               	movf	??___ftmul,w
  9428  0D42  07B8               	addwf	___ftmul@exp,f
  9429  0D43  082E               	movf	___ftmul@f1,w
  9430  0D44  00B4               	movwf	??___ftmul
  9431  0D45  082F               	movf	___ftmul@f1+1,w
  9432  0D46  00B5               	movwf	??___ftmul+1
  9433  0D47  0830               	movf	___ftmul@f1+2,w
  9434  0D48  00B6               	movwf	??___ftmul+2
  9435  0D49  3010               	movlw	16
  9436  0D4A                     u4185:	
  9437  0D4A  36B6               	lsrf	??___ftmul+2,f
  9438  0D4B  0CB5               	rrf	??___ftmul+1,f
  9439  0D4C  0CB4               	rrf	??___ftmul,f
  9440  0D4D  0B89               	decfsz	9,f
  9441  0D4E  2D4A               	goto	u4185
  9442  0D4F  0834               	movf	??___ftmul,w
  9443  0D50  00B7               	movwf	??___ftmul+3
  9444  0D51  0837               	movf	??___ftmul+3,w
  9445  0D52  00BD               	movwf	___ftmul@sign
  9446  0D53  0831               	movf	___ftmul@f2,w
  9447  0D54  00B4               	movwf	??___ftmul
  9448  0D55  0832               	movf	___ftmul@f2+1,w
  9449  0D56  00B5               	movwf	??___ftmul+1
  9450  0D57  0833               	movf	___ftmul@f2+2,w
  9451  0D58  00B6               	movwf	??___ftmul+2
  9452  0D59  3010               	movlw	16
  9453  0D5A                     u4195:	
  9454  0D5A  36B6               	lsrf	??___ftmul+2,f
  9455  0D5B  0CB5               	rrf	??___ftmul+1,f
  9456  0D5C  0CB4               	rrf	??___ftmul,f
  9457  0D5D  0B89               	decfsz	9,f
  9458  0D5E  2D5A               	goto	u4195
  9459  0D5F  0834               	movf	??___ftmul,w
  9460  0D60  00B7               	movwf	??___ftmul+3
  9461  0D61  0837               	movf	??___ftmul+3,w
  9462  0D62  06BD               	xorwf	___ftmul@sign,f
  9463  0D63  3080               	movlw	128
  9464  0D64  00B4               	movwf	??___ftmul
  9465  0D65  0834               	movf	??___ftmul,w
  9466  0D66  05BD               	andwf	___ftmul@sign,f
  9467  0D67  17AF               	bsf	___ftmul@f1+1,7
  9468  0D68  17B2               	bsf	___ftmul@f2+1,7
  9469  0D69  30FF               	movlw	255
  9470  0D6A  05B1               	andwf	___ftmul@f2,f
  9471  0D6B  30FF               	movlw	255
  9472  0D6C  05B2               	andwf	___ftmul@f2+1,f
  9473  0D6D  3000               	movlw	0
  9474  0D6E  05B3               	andwf	___ftmul@f2+2,f
  9475  0D6F  3000               	movlw	0
  9476  0D70  00B9               	movwf	___ftmul@f3_as_product
  9477  0D71  3000               	movlw	0
  9478  0D72  00BA               	movwf	___ftmul@f3_as_product+1
  9479  0D73  3000               	movlw	0
  9480  0D74  00BB               	movwf	___ftmul@f3_as_product+2
  9481  0D75  3007               	movlw	7
  9482  0D76  00B4               	movwf	??___ftmul
  9483  0D77  0834               	movf	??___ftmul,w
  9484  0D78  00BC               	movwf	___ftmul@cntr
  9485  0D79                     l5745:	
  9486  0D79  1C2E               	btfss	___ftmul@f1,0
  9487  0D7A  2D81               	goto	l5749
  9488  0D7B  0831               	movf	___ftmul@f2,w
  9489  0D7C  07B9               	addwf	___ftmul@f3_as_product,f
  9490  0D7D  0832               	movf	___ftmul@f2+1,w
  9491  0D7E  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9492  0D7F  0833               	movf	___ftmul@f2+2,w
  9493  0D80  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9494  0D81                     l5749:	
  9495  0D81  3001               	movlw	1
  9496  0D82                     u4215:	
  9497  0D82  36B0               	lsrf	___ftmul@f1+2,f
  9498  0D83  0CAF               	rrf	___ftmul@f1+1,f
  9499  0D84  0CAE               	rrf	___ftmul@f1,f
  9500  0D85  0B89               	decfsz	9,f
  9501  0D86  2D82               	goto	u4215
  9502  0D87  3001               	movlw	1
  9503  0D88                     u4225:	
  9504  0D88  35B1               	lslf	___ftmul@f2,f
  9505  0D89  0DB2               	rlf	___ftmul@f2+1,f
  9506  0D8A  0DB3               	rlf	___ftmul@f2+2,f
  9507  0D8B  0B89               	decfsz	9,f
  9508  0D8C  2D88               	goto	u4225
  9509  0D8D  3001               	movlw	1
  9510  0D8E  02BC               	subwf	___ftmul@cntr,f
  9511  0D8F  1D03               	btfss	3,2
  9512  0D90  2D79               	goto	l5745
  9513  0D91  3009               	movlw	9
  9514  0D92  00B4               	movwf	??___ftmul
  9515  0D93  0834               	movf	??___ftmul,w
  9516  0D94  00BC               	movwf	___ftmul@cntr
  9517  0D95                     l5757:	
  9518  0D95  1C2E               	btfss	___ftmul@f1,0
  9519  0D96  2D9D               	goto	l5761
  9520  0D97  0831               	movf	___ftmul@f2,w
  9521  0D98  07B9               	addwf	___ftmul@f3_as_product,f
  9522  0D99  0832               	movf	___ftmul@f2+1,w
  9523  0D9A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  9524  0D9B  0833               	movf	___ftmul@f2+2,w
  9525  0D9C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  9526  0D9D                     l5761:	
  9527  0D9D  3001               	movlw	1
  9528  0D9E                     u4255:	
  9529  0D9E  36B0               	lsrf	___ftmul@f1+2,f
  9530  0D9F  0CAF               	rrf	___ftmul@f1+1,f
  9531  0DA0  0CAE               	rrf	___ftmul@f1,f
  9532  0DA1  0B89               	decfsz	9,f
  9533  0DA2  2D9E               	goto	u4255
  9534  0DA3  3001               	movlw	1
  9535  0DA4                     u4265:	
  9536  0DA4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  9537  0DA5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  9538  0DA6  0CB9               	rrf	___ftmul@f3_as_product,f
  9539  0DA7  0B89               	decfsz	9,f
  9540  0DA8  2DA4               	goto	u4265
  9541  0DA9  3001               	movlw	1
  9542  0DAA  02BC               	subwf	___ftmul@cntr,f
  9543  0DAB  1D03               	btfss	3,2
  9544  0DAC  2D95               	goto	l5757
  9545  0DAD  0839               	movf	___ftmul@f3_as_product,w
  9546  0DAE  00A0               	movwf	___ftpack@arg
  9547  0DAF  083A               	movf	___ftmul@f3_as_product+1,w
  9548  0DB0  00A1               	movwf	___ftpack@arg+1
  9549  0DB1  083B               	movf	___ftmul@f3_as_product+2,w
  9550  0DB2  00A2               	movwf	___ftpack@arg+2
  9551  0DB3  0838               	movf	___ftmul@exp,w
  9552  0DB4  00B4               	movwf	??___ftmul
  9553  0DB5  0834               	movf	??___ftmul,w
  9554  0DB6  00A3               	movwf	___ftpack@exp
  9555  0DB7  083D               	movf	___ftmul@sign,w
  9556  0DB8  00B5               	movwf	??___ftmul+1
  9557  0DB9  0835               	movf	??___ftmul+1,w
  9558  0DBA  00A4               	movwf	___ftpack@sign
  9559  0DBB  3195  2583         	fcall	___ftpack
  9560  0DBD  0020               	movlb	0	; select bank0
  9561  0DBE  0820               	movf	?___ftpack,w
  9562  0DBF  00AE               	movwf	?___ftmul
  9563  0DC0  0821               	movf	?___ftpack+1,w
  9564  0DC1  00AF               	movwf	?___ftmul+1
  9565  0DC2  0822               	movf	?___ftpack+2,w
  9566  0DC3  00B0               	movwf	?___ftmul+2
  9567  0DC4  0008               	return
  9568  0DC5                     __end_of___ftmul:	
  9569                           
  9570                           	psect	text46
  9571  0591                     __ptext46:	
  9572 ;; *************** function ___ftadd *****************
  9573 ;; Defined at:
  9574 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;  f1              3   30[BANK0 ] float 
  9577 ;;  f2              3   33[BANK0 ] float 
  9578 ;; Auto vars:     Size  Location     Type
  9579 ;;  exp1            1   42[BANK0 ] unsigned char 
  9580 ;;  exp2            1   41[BANK0 ] unsigned char 
  9581 ;;  sign            1   40[BANK0 ] unsigned char 
  9582 ;; Return value:  Size  Location     Type
  9583 ;;                  3   30[BANK0 ] float 
  9584 ;; Registers used:
  9585 ;;		wreg, status,2, status,0, pclath, cstack
  9586 ;; Tracked objects:
  9587 ;;		On entry : 0/0
  9588 ;;		On exit  : 0/0
  9589 ;;		Unchanged: 0/0
  9590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9591 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9593 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;Total ram usage:       13 bytes
  9596 ;; Hardware stack levels used:    1
  9597 ;; Hardware stack levels required when called:    6
  9598 ;; This function calls:
  9599 ;;		___ftpack
  9600 ;; This function is called by:
  9601 ;;		_getPercentValue
  9602 ;; This function uses a non-reentrant model
  9603 ;;
  9604                           
  9605                           
  9606                           ;psect for function ___ftadd
  9607  0591                     ___ftadd:	
  9608                           
  9609                           ;incstack = 0
  9610                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9611  0591  0020               	movlb	0	; select bank0
  9612  0592  083E               	movf	___ftadd@f1,w
  9613  0593  00C4               	movwf	??___ftadd
  9614  0594  083F               	movf	___ftadd@f1+1,w
  9615  0595  00C5               	movwf	??___ftadd+1
  9616  0596  0840               	movf	___ftadd@f1+2,w
  9617  0597  00C6               	movwf	??___ftadd+2
  9618  0598  1003               	clrc
  9619  0599  0D45               	rlf	??___ftadd+1,w
  9620  059A  0D46               	rlf	??___ftadd+2,w
  9621  059B  00C7               	movwf	??___ftadd+3
  9622  059C  0847               	movf	??___ftadd+3,w
  9623  059D  00CA               	movwf	___ftadd@exp1
  9624  059E  0841               	movf	___ftadd@f2,w
  9625  059F  00C4               	movwf	??___ftadd
  9626  05A0  0842               	movf	___ftadd@f2+1,w
  9627  05A1  00C5               	movwf	??___ftadd+1
  9628  05A2  0843               	movf	___ftadd@f2+2,w
  9629  05A3  00C6               	movwf	??___ftadd+2
  9630  05A4  1003               	clrc
  9631  05A5  0D45               	rlf	??___ftadd+1,w
  9632  05A6  0D46               	rlf	??___ftadd+2,w
  9633  05A7  00C7               	movwf	??___ftadd+3
  9634  05A8  0847               	movf	??___ftadd+3,w
  9635  05A9  00C9               	movwf	___ftadd@exp2
  9636  05AA  084A               	movf	___ftadd@exp1,w
  9637  05AB  1903               	btfsc	3,2
  9638  05AC  2DB9               	goto	l5615
  9639  05AD  0849               	movf	___ftadd@exp2,w
  9640  05AE  024A               	subwf	___ftadd@exp1,w
  9641  05AF  1803               	skipnc
  9642  05B0  2DC0               	goto	l5619
  9643  05B1  034A               	decf	___ftadd@exp1,w
  9644  05B2  3AFF               	xorlw	255
  9645  05B3  0749               	addwf	___ftadd@exp2,w
  9646  05B4  00C4               	movwf	??___ftadd
  9647  05B5  3019               	movlw	25
  9648  05B6  0244               	subwf	??___ftadd,w
  9649  05B7  1C03               	skipc
  9650  05B8  2DC0               	goto	l5619
  9651  05B9                     l5615:	
  9652  05B9  0841               	movf	___ftadd@f2,w
  9653  05BA  00BE               	movwf	?___ftadd
  9654  05BB  0842               	movf	___ftadd@f2+1,w
  9655  05BC  00BF               	movwf	?___ftadd+1
  9656  05BD  0843               	movf	___ftadd@f2+2,w
  9657  05BE  00C0               	movwf	?___ftadd+2
  9658  05BF  0008               	return
  9659  05C0                     l5619:	
  9660  05C0  0849               	movf	___ftadd@exp2,w
  9661  05C1  1903               	btfsc	3,2
  9662  05C2  0008               	return
  9663  05C3  084A               	movf	___ftadd@exp1,w
  9664  05C4  0249               	subwf	___ftadd@exp2,w
  9665  05C5  1803               	skipnc
  9666  05C6  2DCF               	goto	l5625
  9667  05C7  0349               	decf	___ftadd@exp2,w
  9668  05C8  3AFF               	xorlw	255
  9669  05C9  074A               	addwf	___ftadd@exp1,w
  9670  05CA  00C4               	movwf	??___ftadd
  9671  05CB  3019               	movlw	25
  9672  05CC  0244               	subwf	??___ftadd,w
  9673  05CD  1803               	btfsc	3,0
  9674  05CE  0008               	return
  9675  05CF                     l5625:	
  9676  05CF  3006               	movlw	6
  9677  05D0  00C4               	movwf	??___ftadd
  9678  05D1  0844               	movf	??___ftadd,w
  9679  05D2  00C8               	movwf	___ftadd@sign
  9680  05D3  1BC0               	btfsc	___ftadd@f1+2,7
  9681  05D4  17C8               	bsf	___ftadd@sign,7
  9682  05D5  1BC3               	btfsc	___ftadd@f2+2,7
  9683  05D6  1748               	bsf	___ftadd@sign,6
  9684  05D7  17BF               	bsf	___ftadd@f1+1,7
  9685  05D8  30FF               	movlw	255
  9686  05D9  05BE               	andwf	___ftadd@f1,f
  9687  05DA  30FF               	movlw	255
  9688  05DB  05BF               	andwf	___ftadd@f1+1,f
  9689  05DC  3000               	movlw	0
  9690  05DD  05C0               	andwf	___ftadd@f1+2,f
  9691  05DE  17C2               	bsf	___ftadd@f2+1,7
  9692  05DF  30FF               	movlw	255
  9693  05E0  05C1               	andwf	___ftadd@f2,f
  9694  05E1  30FF               	movlw	255
  9695  05E2  05C2               	andwf	___ftadd@f2+1,f
  9696  05E3  3000               	movlw	0
  9697  05E4  05C3               	andwf	___ftadd@f2+2,f
  9698  05E5  0849               	movf	___ftadd@exp2,w
  9699  05E6  024A               	subwf	___ftadd@exp1,w
  9700  05E7  1803               	skipnc
  9701  05E8  2E0B               	goto	l5647
  9702  05E9                     l5637:	
  9703  05E9  3001               	movlw	1
  9704  05EA                     u3945:	
  9705  05EA  35C1               	lslf	___ftadd@f2,f
  9706  05EB  0DC2               	rlf	___ftadd@f2+1,f
  9707  05EC  0DC3               	rlf	___ftadd@f2+2,f
  9708  05ED  0B89               	decfsz	9,f
  9709  05EE  2DEA               	goto	u3945
  9710  05EF  3001               	movlw	1
  9711  05F0  02C9               	subwf	___ftadd@exp2,f
  9712  05F1  0849               	movf	___ftadd@exp2,w
  9713  05F2  064A               	xorwf	___ftadd@exp1,w
  9714  05F3  1903               	skipnz
  9715  05F4  2E06               	goto	l5645
  9716  05F5  3001               	movlw	1
  9717  05F6  02C8               	subwf	___ftadd@sign,f
  9718  05F7  0848               	movf	___ftadd@sign,w
  9719  05F8  3907               	andlw	7
  9720  05F9  1903               	btfsc	3,2
  9721  05FA  2E06               	goto	l5645
  9722  05FB  2DE9               	goto	l5637
  9723  05FC                     l5643:	
  9724  05FC  3001               	movlw	1
  9725  05FD                     u3975:	
  9726  05FD  36C0               	lsrf	___ftadd@f1+2,f
  9727  05FE  0CBF               	rrf	___ftadd@f1+1,f
  9728  05FF  0CBE               	rrf	___ftadd@f1,f
  9729  0600  0B89               	decfsz	9,f
  9730  0601  2DFD               	goto	u3975
  9731  0602  3001               	movlw	1
  9732  0603  00C4               	movwf	??___ftadd
  9733  0604  0844               	movf	??___ftadd,w
  9734  0605  07CA               	addwf	___ftadd@exp1,f
  9735  0606                     l5645:	
  9736  0606  084A               	movf	___ftadd@exp1,w
  9737  0607  0649               	xorwf	___ftadd@exp2,w
  9738  0608  1903               	btfsc	3,2
  9739  0609  2E30               	goto	l3168
  9740  060A  2DFC               	goto	l5643
  9741  060B                     l5647:	
  9742  060B  084A               	movf	___ftadd@exp1,w
  9743  060C  0249               	subwf	___ftadd@exp2,w
  9744  060D  1803               	skipnc
  9745  060E  2E30               	goto	l3168
  9746  060F                     l5649:	
  9747  060F  3001               	movlw	1
  9748  0610                     u4005:	
  9749  0610  35BE               	lslf	___ftadd@f1,f
  9750  0611  0DBF               	rlf	___ftadd@f1+1,f
  9751  0612  0DC0               	rlf	___ftadd@f1+2,f
  9752  0613  0B89               	decfsz	9,f
  9753  0614  2E10               	goto	u4005
  9754  0615  3001               	movlw	1
  9755  0616  02CA               	subwf	___ftadd@exp1,f
  9756  0617  0849               	movf	___ftadd@exp2,w
  9757  0618  064A               	xorwf	___ftadd@exp1,w
  9758  0619  1903               	skipnz
  9759  061A  2E2C               	goto	l5657
  9760  061B  3001               	movlw	1
  9761  061C  02C8               	subwf	___ftadd@sign,f
  9762  061D  0848               	movf	___ftadd@sign,w
  9763  061E  3907               	andlw	7
  9764  061F  1903               	btfsc	3,2
  9765  0620  2E2C               	goto	l5657
  9766  0621  2E0F               	goto	l5649
  9767  0622                     l5655:	
  9768  0622  3001               	movlw	1
  9769  0623                     u4035:	
  9770  0623  36C3               	lsrf	___ftadd@f2+2,f
  9771  0624  0CC2               	rrf	___ftadd@f2+1,f
  9772  0625  0CC1               	rrf	___ftadd@f2,f
  9773  0626  0B89               	decfsz	9,f
  9774  0627  2E23               	goto	u4035
  9775  0628  3001               	movlw	1
  9776  0629  00C4               	movwf	??___ftadd
  9777  062A  0844               	movf	??___ftadd,w
  9778  062B  07C9               	addwf	___ftadd@exp2,f
  9779  062C                     l5657:	
  9780  062C  084A               	movf	___ftadd@exp1,w
  9781  062D  0649               	xorwf	___ftadd@exp2,w
  9782  062E  1D03               	skipz
  9783  062F  2E22               	goto	l5655
  9784  0630                     l3168:	
  9785  0630  1FC8               	btfss	___ftadd@sign,7
  9786  0631  2E42               	goto	l5661
  9787  0632  30FF               	movlw	255
  9788  0633  06BE               	xorwf	___ftadd@f1,f
  9789  0634  30FF               	movlw	255
  9790  0635  06BF               	xorwf	___ftadd@f1+1,f
  9791  0636  30FF               	movlw	255
  9792  0637  06C0               	xorwf	___ftadd@f1+2,f
  9793  0638  3001               	movlw	1
  9794  0639  07BE               	addwf	___ftadd@f1,f
  9795  063A  3000               	movlw	0
  9796  063B  1803               	skipnc
  9797  063C  3001               	movlw	1
  9798  063D  07BF               	addwf	___ftadd@f1+1,f
  9799  063E  3000               	movlw	0
  9800  063F  1803               	skipnc
  9801  0640  3001               	movlw	1
  9802  0641  07C0               	addwf	___ftadd@f1+2,f
  9803  0642                     l5661:	
  9804  0642  1F48               	btfss	___ftadd@sign,6
  9805  0643  2E54               	goto	l5665
  9806  0644  30FF               	movlw	255
  9807  0645  06C1               	xorwf	___ftadd@f2,f
  9808  0646  30FF               	movlw	255
  9809  0647  06C2               	xorwf	___ftadd@f2+1,f
  9810  0648  30FF               	movlw	255
  9811  0649  06C3               	xorwf	___ftadd@f2+2,f
  9812  064A  3001               	movlw	1
  9813  064B  07C1               	addwf	___ftadd@f2,f
  9814  064C  3000               	movlw	0
  9815  064D  1803               	skipnc
  9816  064E  3001               	movlw	1
  9817  064F  07C2               	addwf	___ftadd@f2+1,f
  9818  0650  3000               	movlw	0
  9819  0651  1803               	skipnc
  9820  0652  3001               	movlw	1
  9821  0653  07C3               	addwf	___ftadd@f2+2,f
  9822  0654                     l5665:	
  9823  0654  01C8               	clrf	___ftadd@sign
  9824  0655  083E               	movf	___ftadd@f1,w
  9825  0656  07C1               	addwf	___ftadd@f2,f
  9826  0657  083F               	movf	___ftadd@f1+1,w
  9827  0658  3DC2               	addwfc	___ftadd@f2+1,f
  9828  0659  0840               	movf	___ftadd@f1+2,w
  9829  065A  3DC3               	addwfc	___ftadd@f2+2,f
  9830  065B  1FC3               	btfss	___ftadd@f2+2,7
  9831  065C  2E6F               	goto	l5675
  9832  065D  30FF               	movlw	255
  9833  065E  06C1               	xorwf	___ftadd@f2,f
  9834  065F  30FF               	movlw	255
  9835  0660  06C2               	xorwf	___ftadd@f2+1,f
  9836  0661  30FF               	movlw	255
  9837  0662  06C3               	xorwf	___ftadd@f2+2,f
  9838  0663  3001               	movlw	1
  9839  0664  07C1               	addwf	___ftadd@f2,f
  9840  0665  3000               	movlw	0
  9841  0666  1803               	skipnc
  9842  0667  3001               	movlw	1
  9843  0668  07C2               	addwf	___ftadd@f2+1,f
  9844  0669  3000               	movlw	0
  9845  066A  1803               	skipnc
  9846  066B  3001               	movlw	1
  9847  066C  07C3               	addwf	___ftadd@f2+2,f
  9848  066D  01C8               	clrf	___ftadd@sign
  9849  066E  0AC8               	incf	___ftadd@sign,f
  9850  066F                     l5675:	
  9851  066F  0841               	movf	___ftadd@f2,w
  9852  0670  00A0               	movwf	___ftpack@arg
  9853  0671  0842               	movf	___ftadd@f2+1,w
  9854  0672  00A1               	movwf	___ftpack@arg+1
  9855  0673  0843               	movf	___ftadd@f2+2,w
  9856  0674  00A2               	movwf	___ftpack@arg+2
  9857  0675  084A               	movf	___ftadd@exp1,w
  9858  0676  00C4               	movwf	??___ftadd
  9859  0677  0844               	movf	??___ftadd,w
  9860  0678  00A3               	movwf	___ftpack@exp
  9861  0679  0848               	movf	___ftadd@sign,w
  9862  067A  00C5               	movwf	??___ftadd+1
  9863  067B  0845               	movf	??___ftadd+1,w
  9864  067C  00A4               	movwf	___ftpack@sign
  9865  067D  3195  2583         	fcall	___ftpack
  9866  067F  0020               	movlb	0	; select bank0
  9867  0680  0820               	movf	?___ftpack,w
  9868  0681  00BE               	movwf	?___ftadd
  9869  0682  0821               	movf	?___ftpack+1,w
  9870  0683  00BF               	movwf	?___ftadd+1
  9871  0684  0822               	movf	?___ftpack+2,w
  9872  0685  00C0               	movwf	?___ftadd+2
  9873  0686  0008               	return
  9874  0687                     __end_of___ftadd:	
  9875                           
  9876                           	psect	text47
  9877  1F0E                     __ptext47:	
  9878 ;; *************** function _RfSWPointSelect *****************
  9879 ;; Defined at:
  9880 ;;		line 340 in file "../src/RF_Control_B1.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;  sw              1    wreg     unsigned char 
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;  sw              1    1[BANK0 ] unsigned char 
  9885 ;; Return value:  Size  Location     Type
  9886 ;;		None               void
  9887 ;; Registers used:
  9888 ;;		wreg
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;Total ram usage:        2 bytes
  9899 ;; Hardware stack levels used:    1
  9900 ;; Hardware stack levels required when called:    5
  9901 ;; This function calls:
  9902 ;;		Nothing
  9903 ;; This function is called by:
  9904 ;;		_setRFSW_Control
  9905 ;;		_setRFSW_AdjControl
  9906 ;;		_setRFSW_Status
  9907 ;; This function uses a non-reentrant model
  9908 ;;
  9909                           
  9910                           
  9911                           ;psect for function _RfSWPointSelect
  9912  1F0E                     _RfSWPointSelect:	
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _RfSWPointSelect: [wreg]
  9916                           ;RfSWPointSelect@sw stored from wreg
  9917  1F0E  0020               	movlb	0	; select bank0
  9918  1F0F  00A1               	movwf	RfSWPointSelect@sw
  9919                           
  9920                           ;RF_Control_B1.c: 342: if (sw == 1) {
  9921  1F10  0821               	movf	RfSWPointSelect@sw,w
  9922  1F11  3A01               	xorlw	1
  9923  1F12  1D03               	skipz
  9924  1F13  2F19               	goto	l2379
  9925                           
  9926                           ;RF_Control_B1.c: 343: RFSW = &RFSW1;
  9927  1F14  30E2               	movlw	_RFSW1& (0+255)
  9928  1F15  00A0               	movwf	??_RfSWPointSelect
  9929  1F16  0820               	movf	??_RfSWPointSelect,w
  9930  1F17  0021               	movlb	1	; select bank1
  9931  1F18  00BF               	movwf	_RFSW^(0+128)
  9932  1F19                     l2379:	
  9933                           
  9934                           ;RF_Control_B1.c: 344: }
  9935                           ;RF_Control_B1.c: 347: if (sw == 2) {
  9936  1F19  0020               	movlb	0	; select bank0
  9937  1F1A  0821               	movf	RfSWPointSelect@sw,w
  9938  1F1B  3A02               	xorlw	2
  9939  1F1C  1D03               	skipz
  9940  1F1D  2F23               	goto	l2380
  9941                           
  9942                           ;RF_Control_B1.c: 348: RFSW = &RFSW2;
  9943  1F1E  30E3               	movlw	_RFSW2& (0+255)
  9944  1F1F  00A0               	movwf	??_RfSWPointSelect
  9945  1F20  0820               	movf	??_RfSWPointSelect,w
  9946  1F21  0021               	movlb	1	; select bank1
  9947  1F22  00BF               	movwf	_RFSW^(0+128)
  9948  1F23                     l2380:	
  9949                           
  9950                           ;RF_Control_B1.c: 349: }
  9951                           ;RF_Control_B1.c: 352: if (sw == 3) {
  9952  1F23  0020               	movlb	0	; select bank0
  9953  1F24  0821               	movf	RfSWPointSelect@sw,w
  9954  1F25  3A03               	xorlw	3
  9955  1F26  1D03               	skipz
  9956  1F27  0008               	return
  9957                           
  9958                           ;RF_Control_B1.c: 353: RFSW = &RFSW3;
  9959  1F28  30E4               	movlw	_RFSW3& (0+255)
  9960  1F29  00A0               	movwf	??_RfSWPointSelect
  9961  1F2A  0820               	movf	??_RfSWPointSelect,w
  9962  1F2B  0021               	movlb	1	; select bank1
  9963  1F2C  00BF               	movwf	_RFSW^(0+128)
  9964  1F2D  0008               	return
  9965  1F2E                     __end_of_RfSWPointSelect:	
  9966                           
  9967                           	psect	text48
  9968  1EEE                     __ptext48:	
  9969 ;; *************** function _RF_RxDisable *****************
  9970 ;; Defined at:
  9971 ;;		line 215 in file "../src/RF_Control_B1.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  rf              1    wreg     unsigned char 
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;  rf              1    4[BANK0 ] unsigned char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;		None               void
  9978 ;; Registers used:
  9979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        1 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    7
  9992 ;; This function calls:
  9993 ;;		_CC2500_WriteCommand
  9994 ;;		_RfPointSelect
  9995 ;; This function is called by:
  9996 ;;		_setRF_Main
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _RF_RxDisable
 10002  1EEE                     _RF_RxDisable:	
 10003                           
 10004                           ;incstack = 0
 10005                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10006                           ;RF_RxDisable@rf stored from wreg
 10007  1EEE  0020               	movlb	0	; select bank0
 10008  1EEF  00A4               	movwf	RF_RxDisable@rf
 10009                           
 10010                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
 10011  1EF0  0824               	movf	RF_RxDisable@rf,w
 10012  1EF1  319B  23AA  319E   	fcall	_RfPointSelect
 10013                           
 10014                           ;RF_Control_B1.c: 218: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
 10015  1EF4  087A               	movf	_RF,w
 10016  1EF5  0086               	movwf	6
 10017  1EF6  0187               	clrf	7
 10018  1EF7  1881               	btfsc	1,1
 10019  1EF8  2EFE               	goto	l6595
 10020  1EF9  087A               	movf	_RF,w
 10021  1EFA  0086               	movwf	6
 10022  1EFB  0187               	clrf	7
 10023  1EFC  1D81               	btfss	1,3
 10024  1EFD  0008               	return
 10025  1EFE                     l6595:	
 10026                           
 10027                           ;RF_Control_B1.c: 219: RF->RxStatus = 0;
 10028  1EFE  087A               	movf	_RF,w
 10029  1EFF  0086               	movwf	6
 10030  1F00  0187               	clrf	7
 10031  1F01  1181               	bcf	1,3
 10032                           
 10033                           ;RF_Control_B1.c: 220: RF->ReceiveGO = 0;
 10034  1F02  087A               	movf	_RF,w
 10035  1F03  0086               	movwf	6
 10036  1F04  0187               	clrf	7
 10037  1F05  1081               	bcf	1,1
 10038                           
 10039                           ;RF_Control_B1.c: 221: CC2500_WriteCommand(0x36);
 10040  1F06  3036               	movlw	54
 10041  1F07  319C  2402  319E   	fcall	_CC2500_WriteCommand
 10042                           
 10043                           ;RF_Control_B1.c: 222: CC2500_WriteCommand(0x3A);
 10044  1F0A  303A               	movlw	58
 10045  1F0B  319C  2402         	fcall	_CC2500_WriteCommand
 10046  1F0D  0008               	return
 10047  1F0E                     __end_of_RF_RxDisable:	
 10048                           
 10049                           	psect	text49
 10050  122D                     __ptext49:	
 10051 ;; *************** function _CC2500_TxData *****************
 10052 ;; Defined at:
 10053 ;;		line 32 in file "../src/CC2500_B1.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  loop_e          1    5[BANK0 ] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;		None               void
 10060 ;; Registers used:
 10061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;Total ram usage:        2 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    7
 10074 ;; This function calls:
 10075 ;;		_CC2500_WriteByte
 10076 ;;		_CC2500_WriteCommand
 10077 ;; This function is called by:
 10078 ;;		_setRF_Main
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           
 10083                           ;psect for function _CC2500_TxData
 10084  122D                     _CC2500_TxData:	
 10085                           
 10086                           ;CC2500_B1.c: 33: unsigned char loop_e;
 10087                           ;CC2500_B1.c: 35: RC4 = 0;
 10088                           
 10089                           ;incstack = 0
 10090                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10091  122D  0020               	movlb	0	; select bank0
 10092  122E  120E               	bcf	14,4	;volatile
 10093                           
 10094                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
 10095  122F  307F               	movlw	127
 10096  1230  00A4               	movwf	??_CC2500_TxData
 10097  1231  0824               	movf	??_CC2500_TxData,w
 10098  1232  0021               	movlb	1	; select bank1
 10099  1233  00C2               	movwf	_SPI0Buffer^(0+128)
 10100  1234                     l291:	
 10101                           ;CC2500_B1.c: 37: while (RC2 == 1);
 10102                           
 10103  1234  0020               	movlb	0	; select bank0
 10104  1235  190E               	btfsc	14,2	;volatile
 10105  1236  2A34               	goto	l291
 10106                           
 10107                           ;CC2500_B1.c: 38: CC2500_WriteByte();
 10108  1237  319D  254D  3192   	fcall	_CC2500_WriteByte
 10109                           
 10110                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
 10111  123A  0021               	movlb	1	; select bank1
 10112  123B  0844               	movf	_Tx_Length^(0+128),w
 10113  123C  0020               	movlb	0	; select bank0
 10114  123D  00A4               	movwf	??_CC2500_TxData
 10115  123E  0824               	movf	??_CC2500_TxData,w
 10116  123F  0021               	movlb	1	; select bank1
 10117  1240  00C2               	movwf	_SPI0Buffer^(0+128)
 10118                           
 10119                           ;CC2500_B1.c: 40: CC2500_WriteByte();
 10120  1241  319D  254D  3192   	fcall	_CC2500_WriteByte
 10121                           
 10122                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
 10123  1244  0020               	movlb	0	; select bank0
 10124  1245  01A5               	clrf	CC2500_TxData@loop_e
 10125  1246                     l6391:	
 10126  1246  0021               	movlb	1	; select bank1
 10127  1247  0844               	movf	_Tx_Length^(0+128),w
 10128  1248  0020               	movlb	0	; select bank0
 10129  1249  0225               	subwf	CC2500_TxData@loop_e,w
 10130  124A  1803               	btfsc	3,0
 10131  124B  2A5E               	goto	l296
 10132                           
 10133                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
 10134  124C  0825               	movf	CC2500_TxData@loop_e,w
 10135  124D  3EA0               	addlw	_RF_Data& (0+255)
 10136  124E  0086               	movwf	6
 10137  124F  0187               	clrf	7
 10138  1250  0801               	movf	1,w
 10139  1251  00A4               	movwf	??_CC2500_TxData
 10140  1252  0824               	movf	??_CC2500_TxData,w
 10141  1253  0021               	movlb	1	; select bank1
 10142  1254  00C2               	movwf	_SPI0Buffer^(0+128)
 10143                           
 10144                           ;CC2500_B1.c: 43: CC2500_WriteByte();
 10145  1255  319D  254D  3192   	fcall	_CC2500_WriteByte
 10146  1258  3001               	movlw	1
 10147  1259  0020               	movlb	0	; select bank0
 10148  125A  00A4               	movwf	??_CC2500_TxData
 10149  125B  0824               	movf	??_CC2500_TxData,w
 10150  125C  07A5               	addwf	CC2500_TxData@loop_e,f
 10151  125D  2A46               	goto	l6391
 10152  125E                     l296:	
 10153                           
 10154                           ;CC2500_B1.c: 44: }
 10155                           ;CC2500_B1.c: 45: RC4 = 1;
 10156  125E  160E               	bsf	14,4	;volatile
 10157                           
 10158                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
 10159  125F  3035               	movlw	53
 10160  1260  319C  2402  3192   	fcall	_CC2500_WriteCommand
 10161  1263                     l297:	
 10162                           ;CC2500_B1.c: 47: while (RB0 == 0);
 10163                           
 10164  1263  0020               	movlb	0	; select bank0
 10165  1264  1C0D               	btfss	13,0	;volatile
 10166  1265  2A63               	goto	l297
 10167  1266                     l300:	
 10168                           ;CC2500_B1.c: 48: while (RB0 == 1);
 10169                           
 10170  1266  180D               	btfsc	13,0	;volatile
 10171  1267  2A66               	goto	l300
 10172                           
 10173                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
 10174  1268  3036               	movlw	54
 10175  1269  319C  2402  3192   	fcall	_CC2500_WriteCommand
 10176                           
 10177                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
 10178  126C  303B               	movlw	59
 10179  126D  319C  2402         	fcall	_CC2500_WriteCommand
 10180                           
 10181                           ;CC2500_B1.c: 51: Transceive_OK = 1;
 10182  126F  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
 10183  1270  0008               	return
 10184  1271                     __end_of_CC2500_TxData:	
 10185                           
 10186                           	psect	text50
 10187  0E7B                     __ptext50:	
 10188 ;; *************** function _CC2500_RxData *****************
 10189 ;; Defined at:
 10190 ;;		line 57 in file "../src/CC2500_B1.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;  loop_f          1   15[BANK0 ] unsigned char 
 10195 ;; Return value:  Size  Location     Type
 10196 ;;		None               void
 10197 ;; Registers used:
 10198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;Total ram usage:        3 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    7
 10211 ;; This function calls:
 10212 ;;		_CC2500_ReadByte
 10213 ;;		_CC2500_ReadStatus
 10214 ;;		_CC2500_WriteByte
 10215 ;;		_CC2500_WriteCommand
 10216 ;;		_setBuz
 10217 ;; This function is called by:
 10218 ;;		_setRF_Main
 10219 ;; This function uses a non-reentrant model
 10220 ;;
 10221                           
 10222                           
 10223                           ;psect for function _CC2500_RxData
 10224  0E7B                     _CC2500_RxData:	
 10225                           
 10226                           ;CC2500_B1.c: 58: unsigned char loop_f;
 10227                           ;CC2500_B1.c: 62: if (RB0 == 1)
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10231  0E7B  0020               	movlb	0	; select bank0
 10232  0E7C  180D               	btfsc	13,0	;volatile
 10233  0E7D  2EAE               	goto	l307
 10234  0E7E  2EB1               	goto	l6411
 10235  0E7F                     l6403:	
 10236                           ;CC2500_B1.c: 63: {
 10237                           ;CC2500_B1.c: 64: while (RB0 == 1) {
 10238                           
 10239                           
 10240                           ;CC2500_B1.c: 65: myMain->pcount1++;
 10241  0E7F  0021               	movlb	1	; select bank1
 10242  0E80  0867               	movf	_myMain^(0+128),w
 10243  0E81  3E10               	addlw	16
 10244  0E82  0086               	movwf	6
 10245  0E83  3001               	movlw	1	; select bank2/3
 10246  0E84  0087               	movwf	7
 10247  0E85  3001               	movlw	1
 10248  0E86  0781               	addwf	1,f
 10249  0E87  3141               	addfsr 1,1
 10250  0E88  1803               	skipnc
 10251  0E89  0A81               	incf	1,f
 10252                           
 10253                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
 10254  0E8A  0867               	movf	_myMain^(0+128),w
 10255  0E8B  3E10               	addlw	16
 10256  0E8C  0086               	movwf	6
 10257  0E8D  3001               	movlw	1	; select bank2/3
 10258  0E8E  0087               	movwf	7
 10259  0E8F  3F40               	moviw [0]fsr1
 10260  0E90  0020               	movlb	0	; select bank0
 10261  0E91  00AD               	movwf	??_CC2500_RxData
 10262  0E92  3F41               	moviw [1]fsr1
 10263  0E93  00AE               	movwf	??_CC2500_RxData+1
 10264  0E94  3027               	movlw	39
 10265  0E95  022E               	subwf	??_CC2500_RxData+1,w
 10266  0E96  3010               	movlw	16
 10267  0E97  1903               	skipnz
 10268  0E98  022D               	subwf	??_CC2500_RxData,w
 10269  0E99  1C03               	skipc
 10270  0E9A  2EAE               	goto	l307
 10271                           
 10272                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
 10273  0E9B  0021               	movlb	1	; select bank1
 10274  0E9C  0867               	movf	_myMain^(0+128),w
 10275  0E9D  3E10               	addlw	16
 10276  0E9E  0086               	movwf	6
 10277  0E9F  3001               	movlw	1	; select bank2/3
 10278  0EA0  0087               	movwf	7
 10279  0EA1  3000               	movlw	0
 10280  0EA2  3FC0               	movwi [0]fsr1
 10281  0EA3  3FC1               	movwi [1]fsr1
 10282                           
 10283                           ;CC2500_B1.c: 68: setBuz(1, 250);
 10284  0EA4  30FA               	movlw	250
 10285  0EA5  0020               	movlb	0	; select bank0
 10286  0EA6  00A9               	movwf	setBuz@time
 10287  0EA7  3000               	movlw	0
 10288  0EA8  00AA               	movwf	setBuz@time+1
 10289  0EA9  3001               	movlw	1
 10290  0EAA  318B  23D2  318E   	fcall	_setBuz
 10291                           
 10292                           ;CC2500_B1.c: 69: break;
 10293  0EAD  2EB1               	goto	l6411
 10294  0EAE                     l307:	
 10295  0EAE  0020               	movlb	0	; select bank0
 10296  0EAF  180D               	btfsc	13,0	;volatile
 10297  0EB0  2E7F               	goto	l6403
 10298  0EB1                     l6411:	
 10299                           ;CC2500_B1.c: 70: }
 10300                           ;CC2500_B1.c: 71: };
 10301                           
 10302                           
 10303                           ;CC2500_B1.c: 72: }
 10304                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
 10305  0EB1  303B               	movlw	59
 10306  0EB2  319E  2603  318E   	fcall	_CC2500_ReadStatus
 10307                           
 10308                           ;CC2500_B1.c: 75: if (s_data != 0) {
 10309  0EB5  0021               	movlb	1	; select bank1
 10310  0EB6  0847               	movf	_s_data^(0+128),w
 10311  0EB7  1903               	btfsc	3,2
 10312  0EB8  2F31               	goto	l6453
 10313                           
 10314                           ;CC2500_B1.c: 76: RC4 = 0;
 10315  0EB9  0020               	movlb	0	; select bank0
 10316  0EBA  120E               	bcf	14,4	;volatile
 10317                           
 10318                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
 10319  0EBB  30FF               	movlw	255
 10320  0EBC  00AD               	movwf	??_CC2500_RxData
 10321  0EBD  082D               	movf	??_CC2500_RxData,w
 10322  0EBE  0021               	movlb	1	; select bank1
 10323  0EBF  00C2               	movwf	_SPI0Buffer^(0+128)
 10324  0EC0                     l312:	
 10325                           ;CC2500_B1.c: 78: while (RC2 == 1) {
 10326                           
 10327  0EC0  0020               	movlb	0	; select bank0
 10328  0EC1  1D0E               	btfss	14,2	;volatile
 10329  0EC2  2EF1               	goto	l6427
 10330                           
 10331                           ;CC2500_B1.c: 79: myMain->pcount2++;
 10332  0EC3  0021               	movlb	1	; select bank1
 10333  0EC4  0867               	movf	_myMain^(0+128),w
 10334  0EC5  3E12               	addlw	18
 10335  0EC6  0086               	movwf	6
 10336  0EC7  3001               	movlw	1	; select bank2/3
 10337  0EC8  0087               	movwf	7
 10338  0EC9  3001               	movlw	1
 10339  0ECA  0781               	addwf	1,f
 10340  0ECB  3141               	addfsr 1,1
 10341  0ECC  1803               	skipnc
 10342  0ECD  0A81               	incf	1,f
 10343                           
 10344                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
 10345  0ECE  0867               	movf	_myMain^(0+128),w
 10346  0ECF  3E12               	addlw	18
 10347  0ED0  0086               	movwf	6
 10348  0ED1  3001               	movlw	1	; select bank2/3
 10349  0ED2  0087               	movwf	7
 10350  0ED3  3F40               	moviw [0]fsr1
 10351  0ED4  0020               	movlb	0	; select bank0
 10352  0ED5  00AD               	movwf	??_CC2500_RxData
 10353  0ED6  3F41               	moviw [1]fsr1
 10354  0ED7  00AE               	movwf	??_CC2500_RxData+1
 10355  0ED8  3027               	movlw	39
 10356  0ED9  022E               	subwf	??_CC2500_RxData+1,w
 10357  0EDA  3010               	movlw	16
 10358  0EDB  1903               	skipnz
 10359  0EDC  022D               	subwf	??_CC2500_RxData,w
 10360  0EDD  1C03               	skipc
 10361  0EDE  2EC0               	goto	l312
 10362                           
 10363                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
 10364  0EDF  0021               	movlb	1	; select bank1
 10365  0EE0  0867               	movf	_myMain^(0+128),w
 10366  0EE1  3E12               	addlw	18
 10367  0EE2  0086               	movwf	6
 10368  0EE3  3001               	movlw	1	; select bank2/3
 10369  0EE4  0087               	movwf	7
 10370  0EE5  3000               	movlw	0
 10371  0EE6  3FC0               	movwi [0]fsr1
 10372  0EE7  3FC1               	movwi [1]fsr1
 10373                           
 10374                           ;CC2500_B1.c: 82: setBuz(2, 250);
 10375  0EE8  30FA               	movlw	250
 10376  0EE9  0020               	movlb	0	; select bank0
 10377  0EEA  00A9               	movwf	setBuz@time
 10378  0EEB  3000               	movlw	0
 10379  0EEC  00AA               	movwf	setBuz@time+1
 10380  0EED  3002               	movlw	2
 10381  0EEE  318B  23D2  318E   	fcall	_setBuz
 10382  0EF1                     l6427:	
 10383                           ;CC2500_B1.c: 83: break;
 10384                           
 10385                           
 10386                           ;CC2500_B1.c: 84: }
 10387                           ;CC2500_B1.c: 85: };
 10388                           ;CC2500_B1.c: 87: CC2500_WriteByte();
 10389  0EF1  319D  254D  318E   	fcall	_CC2500_WriteByte
 10390                           
 10391                           ;CC2500_B1.c: 89: CC2500_ReadByte();
 10392  0EF4  319E  2657  318E   	fcall	_CC2500_ReadByte
 10393                           
 10394                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
 10395  0EF7  0021               	movlb	1	; select bank1
 10396  0EF8  0842               	movf	_SPI0Buffer^(0+128),w
 10397  0EF9  0020               	movlb	0	; select bank0
 10398  0EFA  00AD               	movwf	??_CC2500_RxData
 10399  0EFB  082D               	movf	??_CC2500_RxData,w
 10400  0EFC  0021               	movlb	1	; select bank1
 10401  0EFD  00C1               	movwf	_Rx_Length^(0+128)
 10402                           
 10403                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
 10404  0EFE  0020               	movlb	0	; select bank0
 10405  0EFF  01AF               	clrf	CC2500_RxData@loop_f
 10406  0F00                     l6439:	
 10407  0F00  0021               	movlb	1	; select bank1
 10408  0F01  0841               	movf	_Rx_Length^(0+128),w
 10409  0F02  0020               	movlb	0	; select bank0
 10410  0F03  022F               	subwf	CC2500_RxData@loop_f,w
 10411  0F04  1803               	btfsc	3,0
 10412  0F05  2F18               	goto	l6441
 10413                           
 10414                           ;CC2500_B1.c: 92: CC2500_ReadByte();
 10415  0F06  319E  2657  318E   	fcall	_CC2500_ReadByte
 10416                           
 10417                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
 10418  0F09  0021               	movlb	1	; select bank1
 10419  0F0A  0842               	movf	_SPI0Buffer^(0+128),w
 10420  0F0B  0020               	movlb	0	; select bank0
 10421  0F0C  00AD               	movwf	??_CC2500_RxData
 10422  0F0D  082F               	movf	CC2500_RxData@loop_f,w
 10423  0F0E  3EA0               	addlw	_RF_Data& (0+255)
 10424  0F0F  0086               	movwf	6
 10425  0F10  0187               	clrf	7
 10426  0F11  082D               	movf	??_CC2500_RxData,w
 10427  0F12  0081               	movwf	1
 10428  0F13  3001               	movlw	1
 10429  0F14  00AD               	movwf	??_CC2500_RxData
 10430  0F15  082D               	movf	??_CC2500_RxData,w
 10431  0F16  07AF               	addwf	CC2500_RxData@loop_f,f
 10432  0F17  2F00               	goto	l6439
 10433  0F18                     l6441:	
 10434                           
 10435                           ;CC2500_B1.c: 94: }
 10436                           ;CC2500_B1.c: 95: CC2500_ReadByte();
 10437  0F18  319E  2657  318E   	fcall	_CC2500_ReadByte
 10438                           
 10439                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
 10440  0F1B  0021               	movlb	1	; select bank1
 10441  0F1C  0842               	movf	_SPI0Buffer^(0+128),w
 10442  0F1D  0020               	movlb	0	; select bank0
 10443  0F1E  00AD               	movwf	??_CC2500_RxData
 10444  0F1F  082D               	movf	??_CC2500_RxData,w
 10445  0F20  0021               	movlb	1	; select bank1
 10446  0F21  00C0               	movwf	_RSSI^(0+128)
 10447                           
 10448                           ;CC2500_B1.c: 97: CC2500_ReadByte();
 10449  0F22  319E  2657  318E   	fcall	_CC2500_ReadByte
 10450                           
 10451                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
 10452  0F25  0021               	movlb	1	; select bank1
 10453  0F26  0842               	movf	_SPI0Buffer^(0+128),w
 10454  0F27  0020               	movlb	0	; select bank0
 10455  0F28  00AD               	movwf	??_CC2500_RxData
 10456  0F29  082D               	movf	??_CC2500_RxData,w
 10457  0F2A  0021               	movlb	1	; select bank1
 10458  0F2B  00B8               	movwf	_CRC^(0+128)
 10459                           
 10460                           ;CC2500_B1.c: 99: RC4 = 1;
 10461  0F2C  0020               	movlb	0	; select bank0
 10462  0F2D  160E               	bsf	14,4	;volatile
 10463                           
 10464                           ;CC2500_B1.c: 100: if (CRC & 0x80)
 10465  0F2E  0021               	movlb	1	; select bank1
 10466  0F2F  1BB8               	btfsc	_CRC^(0+128),7
 10467                           
 10468                           ;CC2500_B1.c: 101: Receive_OK = 1;
 10469  0F30  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
 10470  0F31                     l6453:	
 10471                           
 10472                           ;CC2500_B1.c: 102: }
 10473                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
 10474  0F31  3036               	movlw	54
 10475  0F32  319C  2402  318E   	fcall	_CC2500_WriteCommand
 10476                           
 10477                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
 10478  0F35  303A               	movlw	58
 10479  0F36  319C  2402         	fcall	_CC2500_WriteCommand
 10480  0F38  0008               	return
 10481  0F39                     __end_of_CC2500_RxData:	
 10482                           
 10483                           	psect	text51
 10484  1E03                     __ptext51:	
 10485 ;; *************** function _CC2500_ReadStatus *****************
 10486 ;; Defined at:
 10487 ;;		line 277 in file "../src/CC2500_B1.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;  status_addr     1    wreg     unsigned char 
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;  status_addr     1    3[BANK0 ] unsigned char 
 10492 ;; Return value:  Size  Location     Type
 10493 ;;		None               void
 10494 ;; Registers used:
 10495 ;;		wreg, status,2, status,0, pclath, cstack
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;Total ram usage:        2 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:    6
 10508 ;; This function calls:
 10509 ;;		_CC2500_ReadByte
 10510 ;;		_CC2500_WriteByte
 10511 ;; This function is called by:
 10512 ;;		_CC2500_RxData
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _CC2500_ReadStatus
 10518  1E03                     _CC2500_ReadStatus:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
 10522                           ;CC2500_ReadStatus@status_addr stored from wreg
 10523  1E03  0020               	movlb	0	; select bank0
 10524  1E04  00A3               	movwf	CC2500_ReadStatus@status_addr
 10525                           
 10526                           ;CC2500_B1.c: 278: RC4 = 0;
 10527  1E05  120E               	bcf	14,4	;volatile
 10528                           
 10529                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
 10530  1E06  0823               	movf	CC2500_ReadStatus@status_addr,w
 10531  1E07  3EC0               	addlw	192
 10532  1E08  00A2               	movwf	??_CC2500_ReadStatus
 10533  1E09  0822               	movf	??_CC2500_ReadStatus,w
 10534  1E0A  0021               	movlb	1	; select bank1
 10535  1E0B  00C2               	movwf	_SPI0Buffer^(0+128)
 10536  1E0C                     l389:	
 10537                           ;CC2500_B1.c: 281: while (RC2 == 1);
 10538                           
 10539  1E0C  0020               	movlb	0	; select bank0
 10540  1E0D  190E               	btfsc	14,2	;volatile
 10541  1E0E  2E0C               	goto	l389
 10542                           
 10543                           ;CC2500_B1.c: 283: CC2500_WriteByte();
 10544  1E0F  319D  254D  319E   	fcall	_CC2500_WriteByte
 10545                           
 10546                           ;CC2500_B1.c: 284: CC2500_ReadByte();
 10547  1E12  319E  2657         	fcall	_CC2500_ReadByte
 10548                           
 10549                           ;CC2500_B1.c: 285: RC4 = 1;
 10550  1E14  0020               	movlb	0	; select bank0
 10551  1E15  160E               	bsf	14,4	;volatile
 10552                           
 10553                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
 10554  1E16  0021               	movlb	1	; select bank1
 10555  1E17  0842               	movf	_SPI0Buffer^(0+128),w
 10556  1E18  0020               	movlb	0	; select bank0
 10557  1E19  00A2               	movwf	??_CC2500_ReadStatus
 10558  1E1A  0822               	movf	??_CC2500_ReadStatus,w
 10559  1E1B  0021               	movlb	1	; select bank1
 10560  1E1C  00C7               	movwf	_s_data^(0+128)
 10561  1E1D  0008               	return
 10562  1E1E                     __end_of_CC2500_ReadStatus:	
 10563                           
 10564                           	psect	text52
 10565  1E57                     __ptext52:	
 10566 ;; *************** function _CC2500_ReadByte *****************
 10567 ;; Defined at:
 10568 ;;		line 221 in file "../src/CC2500_B1.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;		None
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;		None               void
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        2 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    5
 10589 ;; This function calls:
 10590 ;;		Nothing
 10591 ;; This function is called by:
 10592 ;;		_CC2500_RxData
 10593 ;;		_CC2500_ReadStatus
 10594 ;;		_CC2500_ReadREG
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _CC2500_ReadByte
 10600  1E57                     _CC2500_ReadByte:	
 10601                           
 10602                           ;CC2500_B1.c: 222: unsigned char loop_b;
 10603                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
 10604                           
 10605                           ;incstack = 0
 10606                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10607  1E57  0020               	movlb	0	; select bank0
 10608  1E58  01A1               	clrf	CC2500_ReadByte@loop_b
 10609  1E59                     L7:	
 10610  1E59  3008               	movlw	8
 10611  1E5A  0221               	subwf	CC2500_ReadByte@loop_b,w
 10612  1E5B  1803               	btfsc	3,0
 10613  1E5C  0008               	return
 10614                           
 10615                           ;CC2500_B1.c: 224: RC1 = 1;
 10616  1E5D  148E               	bsf	14,1	;volatile
 10617                           
 10618                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
 10619  1E5E  1003               	clrc
 10620  1E5F  0021               	movlb	1	; select bank1
 10621  1E60  0DC2               	rlf	_SPI0Buffer^(0+128),f
 10622                           
 10623                           ;CC2500_B1.c: 226: if (RC2 == 1)
 10624  1E61  0020               	movlb	0	; select bank0
 10625  1E62  1D0E               	btfss	14,2	;volatile
 10626  1E63  2E67               	goto	l6109
 10627                           
 10628                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
 10629  1E64  0021               	movlb	1	; select bank1
 10630  1E65  1442               	bsf	_SPI0Buffer^(0+128),0
 10631  1E66  2E6D               	goto	l6111
 10632  1E67                     l6109:	
 10633                           
 10634                           ;CC2500_B1.c: 228: else
 10635                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
 10636  1E67  30FE               	movlw	254
 10637  1E68  0020               	movlb	0	; select bank0
 10638  1E69  00A0               	movwf	??_CC2500_ReadByte
 10639  1E6A  0820               	movf	??_CC2500_ReadByte,w
 10640  1E6B  0021               	movlb	1	; select bank1
 10641  1E6C  05C2               	andwf	_SPI0Buffer^(0+128),f
 10642  1E6D                     l6111:	
 10643                           
 10644                           ;CC2500_B1.c: 230: RC1 = 0;
 10645  1E6D  0020               	movlb	0	; select bank0
 10646  1E6E  108E               	bcf	14,1	;volatile
 10647  1E6F  3001               	movlw	1
 10648  1E70  00A0               	movwf	??_CC2500_ReadByte
 10649  1E71  0820               	movf	??_CC2500_ReadByte,w
 10650  1E72  07A1               	addwf	CC2500_ReadByte@loop_b,f
 10651  1E73  2E59               	goto	L7
 10652  1E74                     __end_of_CC2500_ReadByte:	
 10653                           
 10654                           	psect	text53
 10655  1AFA                     __ptext53:	
 10656 ;; *************** function _RF_Initialization *****************
 10657 ;; Defined at:
 10658 ;;		line 19 in file "../src/RF_Control_B1.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;		None               void
 10665 ;; Registers used:
 10666 ;;		wreg, status,2, status,0, pclath, cstack
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:    6
 10679 ;; This function calls:
 10680 ;;		_setRF_Initialization
 10681 ;; This function is called by:
 10682 ;;		_main
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function _RF_Initialization
 10688  1AFA                     _RF_Initialization:	
 10689                           
 10690                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10694  1AFA  3001               	movlw	1
 10695  1AFB  319B  231E         	fcall	_setRF_Initialization
 10696  1AFD  0008               	return
 10697  1AFE                     __end_of_RF_Initialization:	
 10698                           
 10699                           	psect	text54
 10700  1B1E                     __ptext54:	
 10701 ;; *************** function _setRF_Initialization *****************
 10702 ;; Defined at:
 10703 ;;		line 56 in file "../src/RF_Control_B1.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  rf              1    wreg     unsigned char 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  rf              1    0[COMMON] unsigned char 
 10708 ;; Return value:  Size  Location     Type
 10709 ;;		None               void
 10710 ;; Registers used:
 10711 ;;		wreg
 10712 ;; Tracked objects:
 10713 ;;		On entry : 0/0
 10714 ;;		On exit  : 0/0
 10715 ;;		Unchanged: 0/0
 10716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;Total ram usage:        1 bytes
 10722 ;; Hardware stack levels used:    1
 10723 ;; Hardware stack levels required when called:    5
 10724 ;; This function calls:
 10725 ;;		Nothing
 10726 ;; This function is called by:
 10727 ;;		_RF_Initialization
 10728 ;; This function uses a non-reentrant model
 10729 ;;
 10730                           
 10731                           
 10732                           ;psect for function _setRF_Initialization
 10733  1B1E                     _setRF_Initialization:	
 10734                           
 10735                           ;RF_Control_B1.c: 59: Tx_Length = 21;
 10736                           
 10737                           ;incstack = 0
 10738                           ; Regs used in _setRF_Initialization: [wreg]
 10739  1B1E  3015               	movlw	21
 10740  1B1F  0020               	movlb	0	; select bank0
 10741  1B20  00A0               	movwf	??_setRF_Initialization
 10742  1B21  0820               	movf	??_setRF_Initialization,w
 10743  1B22  0021               	movlb	1	; select bank1
 10744  1B23  00C4               	movwf	_Tx_Length^(0+128)
 10745  1B24  0008               	return
 10746  1B25                     __end_of_setRF_Initialization:	
 10747                           
 10748                           	psect	text55
 10749  1DE8                     __ptext55:	
 10750 ;; *************** function _Mcu_Initialization *****************
 10751 ;; Defined at:
 10752 ;;		line 30 in file "../src/MCU_B1.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;		None
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;		None
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:        1 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    6
 10773 ;; This function calls:
 10774 ;;		_ADC_Set
 10775 ;;		_Fosc_Set
 10776 ;;		_INT_Set
 10777 ;;		_IOC_Set
 10778 ;;		_IO_Set
 10779 ;;		_TMR0_Set
 10780 ;;		_WDT_Set
 10781 ;; This function is called by:
 10782 ;;		_main
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           
 10787                           ;psect for function _Mcu_Initialization
 10788  1DE8                     _Mcu_Initialization:	
 10789                           
 10790                           ;MCU_B1.c: 32: Fosc_Set();
 10791                           
 10792                           ;incstack = 0
 10793                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10794  1DE8  319A  22F6  319D   	fcall	_Fosc_Set
 10795                           
 10796                           ;MCU_B1.c: 34: IO_Set();
 10797  1DEB  319D  251D  319D   	fcall	_IO_Set
 10798                           
 10799                           ;MCU_B1.c: 36: TMR0_Set();
 10800  1DEE  319B  2390  319D   	fcall	_TMR0_Set
 10801                           
 10802                           ;MCU_B1.c: 38: ;;
 10803                           ;MCU_B1.c: 40: ADC_Set();
 10804  1DF1  319B  2317  319D   	fcall	_ADC_Set
 10805                           
 10806                           ;MCU_B1.c: 44: INT_Set();
 10807  1DF4  319A  22FE  319D   	fcall	_INT_Set
 10808                           
 10809                           ;MCU_B1.c: 46: IOC_Set();
 10810  1DF7  319B  2383  319D   	fcall	_IOC_Set
 10811                           
 10812                           ;MCU_B1.c: 48: ;;
 10813                           ;MCU_B1.c: 50: ;;
 10814                           ;MCU_B1.c: 52: Memory=&VarMemory;
 10815  1DFA  3020               	movlw	_VarMemory& (0+255)
 10816  1DFB  0020               	movlb	0	; select bank0
 10817  1DFC  00A1               	movwf	??_Mcu_Initialization
 10818  1DFD  0821               	movf	??_Mcu_Initialization,w
 10819  1DFE  0021               	movlb	1	; select bank1
 10820  1DFF  00E8               	movwf	_Memory^(0+128)
 10821                           
 10822                           ;MCU_B1.c: 54: WDT_Set();
 10823  1E00  319D  2535         	fcall	_WDT_Set
 10824  1E02  0008               	return
 10825  1E03                     __end_of_Mcu_Initialization:	
 10826                           
 10827                           	psect	text56
 10828  1D35                     __ptext56:	
 10829 ;; *************** function _WDT_Set *****************
 10830 ;; Defined at:
 10831 ;;		line 891 in file "../src/MCU_B1.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;		None               void
 10838 ;; Registers used:
 10839 ;;		wreg, fsr1l, fsr1h
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;Total ram usage:        1 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    5
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_Mcu_Initialization
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _WDT_Set
 10861  1D35                     _WDT_Set:	
 10862                           
 10863                           ;MCU_B1.c: 892: WDTCON = 0b00010111;;
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in _WDT_Set: [wregfsr1]
 10867  1D35  3017               	movlw	23
 10868  1D36  0021               	movlb	1	; select bank1
 10869  1D37  0097               	movwf	23	;volatile
 10870                           
 10871                           ;MCU_B1.c: 893: WDT = &_WDT;
 10872  1D38  30E0               	movlw	__WDT& (0+255)
 10873  1D39  0020               	movlb	0	; select bank0
 10874  1D3A  00A0               	movwf	??_WDT_Set
 10875  1D3B  0820               	movf	??_WDT_Set,w
 10876  1D3C  0021               	movlb	1	; select bank1
 10877  1D3D  00E6               	movwf	_WDT^(0+128)
 10878                           
 10879                           ;MCU_B1.c: 894: WDT->Enable = 1;
 10880  1D3E  0866               	movf	_WDT^(0+128),w
 10881  1D3F  0086               	movwf	6
 10882  1D40  0187               	clrf	7
 10883  1D41  1401               	bsf	1,0
 10884                           
 10885                           ;MCU_B1.c: 895: WDT->Count = 10;
 10886  1D42  300A               	movlw	10
 10887  1D43  0020               	movlb	0	; select bank0
 10888  1D44  00A0               	movwf	??_WDT_Set
 10889  1D45  0021               	movlb	1	; select bank1
 10890  1D46  0A66               	incf	_WDT^(0+128),w
 10891  1D47  0086               	movwf	6
 10892  1D48  0187               	clrf	7
 10893  1D49  0020               	movlb	0	; select bank0
 10894  1D4A  0820               	movf	??_WDT_Set,w
 10895  1D4B  0081               	movwf	1
 10896  1D4C  0008               	return
 10897  1D4D                     __end_of_WDT_Set:	
 10898                           
 10899                           	psect	text57
 10900  1B90                     __ptext57:	
 10901 ;; *************** function _TMR0_Set *****************
 10902 ;; Defined at:
 10903 ;;		line 128 in file "../src/MCU_B1.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;		None
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;		None
 10908 ;; Return value:  Size  Location     Type
 10909 ;;		None               void
 10910 ;; Registers used:
 10911 ;;		wreg, status,2
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;Total ram usage:        1 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    5
 10924 ;; This function calls:
 10925 ;;		Nothing
 10926 ;; This function is called by:
 10927 ;;		_Mcu_Initialization
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           
 10932                           ;psect for function _TMR0_Set
 10933  1B90                     _TMR0_Set:	
 10934                           
 10935                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
 10936                           
 10937                           ;incstack = 0
 10938                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10939  1B90  3062               	movlw	_VarTimer0& (0+255)
 10940  1B91  0020               	movlb	0	; select bank0
 10941  1B92  00A0               	movwf	??_TMR0_Set
 10942  1B93  0820               	movf	??_TMR0_Set,w
 10943  1B94  0021               	movlb	1	; select bank1
 10944  1B95  00E5               	movwf	_Timer0^(0+128)
 10945                           
 10946                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
 10947  1B96  0195               	clrf	21	;volatile
 10948                           
 10949                           ;MCU_B1.c: 131: TMR0 = (256-190);
 10950  1B97  3042               	movlw	66
 10951  1B98  0020               	movlb	0	; select bank0
 10952  1B99  0095               	movwf	21	;volatile
 10953                           
 10954                           ;MCU_B1.c: 132: TMR0IE = 1;
 10955  1B9A  168B               	bsf	11,5	;volatile
 10956                           
 10957                           ;MCU_B1.c: 133: GIE = 1;
 10958  1B9B  178B               	bsf	11,7	;volatile
 10959  1B9C  0008               	return
 10960  1B9D                     __end_of_TMR0_Set:	
 10961                           
 10962                           	psect	text58
 10963  1D1D                     __ptext58:	
 10964 ;; *************** function _IO_Set *****************
 10965 ;; Defined at:
 10966 ;;		line 62 in file "../src/MCU_B1.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;		None
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;		None
 10971 ;; Return value:  Size  Location     Type
 10972 ;;		None               void
 10973 ;; Registers used:
 10974 ;;		wreg, status,2
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:        0 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    5
 10987 ;; This function calls:
 10988 ;;		Nothing
 10989 ;; This function is called by:
 10990 ;;		_Mcu_Initialization
 10991 ;; This function uses a non-reentrant model
 10992 ;;
 10993                           
 10994                           
 10995                           ;psect for function _IO_Set
 10996  1D1D                     _IO_Set:	
 10997                           
 10998                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
 10999                           
 11000                           ;incstack = 0
 11001                           ; Regs used in _IO_Set: [wreg+status,2]
 11002  1D1D  3077               	movlw	119
 11003  1D1E  0021               	movlb	1	; select bank1
 11004  1D1F  008C               	movwf	12	;volatile
 11005                           
 11006                           ;MCU_B1.c: 91: TRISB = 0b00000101;;
 11007  1D20  3005               	movlw	5
 11008  1D21  008D               	movwf	13	;volatile
 11009                           
 11010                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
 11011  1D22  300C               	movlw	12
 11012  1D23  008E               	movwf	14	;volatile
 11013                           
 11014                           ;MCU_B1.c: 93: LATA = 0b00000000;;
 11015  1D24  0022               	movlb	2	; select bank2
 11016  1D25  018C               	clrf	12	;volatile
 11017                           
 11018                           ;MCU_B1.c: 94: LATB = 0b00000000;;
 11019  1D26  018D               	clrf	13	;volatile
 11020                           
 11021                           ;MCU_B1.c: 95: LATC = 0b00000000;;
 11022  1D27  018E               	clrf	14	;volatile
 11023                           
 11024                           ;MCU_B1.c: 96: ANSELA = 0b00000010;;
 11025  1D28  3002               	movlw	2
 11026  1D29  0023               	movlb	3	; select bank3
 11027  1D2A  008C               	movwf	12	;volatile
 11028                           
 11029                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 11030  1D2B  018D               	clrf	13	;volatile
 11031                           
 11032                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 11033  1D2C  018E               	clrf	14	;volatile
 11034                           
 11035                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
 11036  1D2D  3077               	movlw	119
 11037  1D2E  0020               	movlb	0	; select bank0
 11038  1D2F  008C               	movwf	12	;volatile
 11039                           
 11040                           ;MCU_B1.c: 100: PORTB = 0b00000101;;
 11041  1D30  3005               	movlw	5
 11042  1D31  008D               	movwf	13	;volatile
 11043                           
 11044                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
 11045  1D32  300C               	movlw	12
 11046  1D33  008E               	movwf	14	;volatile
 11047  1D34  0008               	return
 11048  1D35                     __end_of_IO_Set:	
 11049                           
 11050                           	psect	text59
 11051  1B83                     __ptext59:	
 11052 ;; *************** function _IOC_Set *****************
 11053 ;; Defined at:
 11054 ;;		line 269 in file "../src/MCU_B1.c"
 11055 ;; Parameters:    Size  Location     Type
 11056 ;;		None
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;		None
 11059 ;; Return value:  Size  Location     Type
 11060 ;;		None               void
 11061 ;; Registers used:
 11062 ;;		wreg, status,2
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;Total ram usage:        0 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    5
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_Mcu_Initialization
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function _IOC_Set
 11084  1B83                     _IOC_Set:	
 11085                           
 11086                           ;MCU_B1.c: 270: WPUB2 = 0;
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in _IOC_Set: [wreg+status,2]
 11090  1B83  0024               	movlb	4	; select bank4
 11091  1B84  110D               	bcf	13,2	;volatile
 11092                           
 11093                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
 11094  1B85  3004               	movlw	4
 11095  1B86  0027               	movlb	7	; select bank7
 11096  1B87  0094               	movwf	20	;volatile
 11097                           
 11098                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
 11099  1B88  3004               	movlw	4
 11100  1B89  0095               	movwf	21	;volatile
 11101                           
 11102                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
 11103  1B8A  0196               	clrf	22	;volatile
 11104                           
 11105                           ;MCU_B1.c: 290: IOCIE = 1;
 11106  1B8B  158B               	bsf	11,3	;volatile
 11107                           
 11108                           ;MCU_B1.c: 291: IOCIF = 0;
 11109  1B8C  100B               	bcf	11,0	;volatile
 11110                           
 11111                           ;MCU_B1.c: 292: PEIE = 1;
 11112  1B8D  170B               	bsf	11,6	;volatile
 11113                           
 11114                           ;MCU_B1.c: 293: GIE = 1;
 11115  1B8E  178B               	bsf	11,7	;volatile
 11116  1B8F  0008               	return
 11117  1B90                     __end_of_IOC_Set:	
 11118                           
 11119                           	psect	text60
 11120  1AFE                     __ptext60:	
 11121 ;; *************** function _INT_Set *****************
 11122 ;; Defined at:
 11123 ;;		line 242 in file "../src/MCU_B1.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;		None
 11128 ;; Return value:  Size  Location     Type
 11129 ;;		None               void
 11130 ;; Registers used:
 11131 ;;		None
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;Total ram usage:        0 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    5
 11144 ;; This function calls:
 11145 ;;		Nothing
 11146 ;; This function is called by:
 11147 ;;		_Mcu_Initialization
 11148 ;; This function uses a non-reentrant model
 11149 ;;
 11150                           
 11151                           
 11152                           ;psect for function _INT_Set
 11153  1AFE                     _INT_Set:	
 11154                           
 11155                           ;MCU_B1.c: 243: WPUB0 = 0;
 11156                           
 11157                           ;incstack = 0
 11158                           ; Regs used in _INT_Set: []
 11159  1AFE  0024               	movlb	4	; select bank4
 11160  1AFF  100D               	bcf	13,0	;volatile
 11161                           
 11162                           ;MCU_B1.c: 244: INTE = 0;
 11163  1B00  120B               	bcf	11,4	;volatile
 11164                           
 11165                           ;MCU_B1.c: 245: PEIE = 1;
 11166  1B01  170B               	bsf	11,6	;volatile
 11167                           
 11168                           ;MCU_B1.c: 246: GIE = 1;
 11169  1B02  178B               	bsf	11,7	;volatile
 11170  1B03  0008               	return
 11171  1B04                     __end_of_INT_Set:	
 11172                           
 11173                           	psect	text61
 11174  1AF6                     __ptext61:	
 11175 ;; *************** function _Fosc_Set *****************
 11176 ;; Defined at:
 11177 ;;		line 58 in file "../src/MCU_B1.c"
 11178 ;; Parameters:    Size  Location     Type
 11179 ;;		None
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;		None
 11182 ;; Return value:  Size  Location     Type
 11183 ;;		None               void
 11184 ;; Registers used:
 11185 ;;		wreg
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;Total ram usage:        0 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    5
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_Mcu_Initialization
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           
 11206                           ;psect for function _Fosc_Set
 11207  1AF6                     _Fosc_Set:	
 11208                           
 11209                           ;MCU_B1.c: 59: OSCCON = 0x78;
 11210                           
 11211                           ;incstack = 0
 11212                           ; Regs used in _Fosc_Set: [wreg]
 11213  1AF6  3078               	movlw	120
 11214  1AF7  0021               	movlb	1	; select bank1
 11215  1AF8  0099               	movwf	25	;volatile
 11216  1AF9  0008               	return
 11217  1AFA                     __end_of_Fosc_Set:	
 11218                           
 11219                           	psect	text62
 11220  1B17                     __ptext62:	
 11221 ;; *************** function _ADC_Set *****************
 11222 ;; Defined at:
 11223 ;;		line 315 in file "../src/MCU_B1.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;		None               void
 11230 ;; Registers used:
 11231 ;;		wreg
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;Total ram usage:        0 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; Hardware stack levels required when called:    5
 11244 ;; This function calls:
 11245 ;;		Nothing
 11246 ;; This function is called by:
 11247 ;;		_Mcu_Initialization
 11248 ;; This function uses a non-reentrant model
 11249 ;;
 11250                           
 11251                           
 11252                           ;psect for function _ADC_Set
 11253  1B17                     _ADC_Set:	
 11254                           
 11255                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
 11256                           
 11257                           ;incstack = 0
 11258                           ; Regs used in _ADC_Set: [wreg]
 11259  1B17  30F2               	movlw	242
 11260  1B18  0021               	movlb	1	; select bank1
 11261  1B19  009E               	movwf	30	;volatile
 11262                           
 11263                           ;MCU_B1.c: 317: FVRCON = 0xc0;
 11264  1B1A  30C0               	movlw	192
 11265  1B1B  0022               	movlb	2	; select bank2
 11266  1B1C  0097               	movwf	23	;volatile
 11267  1B1D  0008               	return
 11268  1B1E                     __end_of_ADC_Set:	
 11269                           
 11270                           	psect	text63
 11271  1C22                     __ptext63:	
 11272 ;; *************** function _LED_Main *****************
 11273 ;; Defined at:
 11274 ;;		line 51 in file "../src/LED_B1.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;		None
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;		None
 11279 ;; Return value:  Size  Location     Type
 11280 ;;		None               void
 11281 ;; Registers used:
 11282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;Total ram usage:        0 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:    7
 11295 ;; This function calls:
 11296 ;;		_setLED_Main
 11297 ;; This function is called by:
 11298 ;;		_main
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           
 11303                           ;psect for function _LED_Main
 11304  1C22                     _LED_Main:	
 11305                           
 11306                           ;LED_B1.c: 54: setLED_Main(1);
 11307                           
 11308                           ;incstack = 0
 11309                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11310  1C22  3001               	movlw	1
 11311  1C23  3193  2342  319C   	fcall	_setLED_Main
 11312                           
 11313                           ;LED_B1.c: 57: setLED_Main(2);
 11314  1C26  3002               	movlw	2
 11315  1C27  3193  2342  319C   	fcall	_setLED_Main
 11316                           
 11317                           ;LED_B1.c: 60: setLED_Main(3);
 11318  1C2A  3003               	movlw	3
 11319  1C2B  3193  2342  319C   	fcall	_setLED_Main
 11320                           
 11321                           ;LED_B1.c: 63: setLED_Main(99);
 11322  1C2E  3063               	movlw	99
 11323  1C2F  3193  2342         	fcall	_setLED_Main
 11324  1C31  0008               	return
 11325  1C32                     __end_of_LED_Main:	
 11326                           
 11327                           	psect	text64
 11328  1342                     __ptext64:	
 11329 ;; *************** function _setLED_Main *****************
 11330 ;; Defined at:
 11331 ;;		line 215 in file "../src/LED_B1.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;  led             1    wreg     unsigned char 
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;  led             1    4[BANK0 ] unsigned char 
 11336 ;; Return value:  Size  Location     Type
 11337 ;;		None               void
 11338 ;; Registers used:
 11339 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : 0/0
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11346 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11347 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;Total ram usage:        3 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    6
 11352 ;; This function calls:
 11353 ;;		_LedPointSelect
 11354 ;; This function is called by:
 11355 ;;		_LED_Main
 11356 ;; This function uses a non-reentrant model
 11357 ;;
 11358                           
 11359                           
 11360                           ;psect for function _setLED_Main
 11361  1342                     _setLED_Main:	
 11362                           
 11363                           ;incstack = 0
 11364                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11365                           ;setLED_Main@led stored from wreg
 11366  1342  0020               	movlb	0	; select bank0
 11367  1343  00A4               	movwf	setLED_Main@led
 11368                           
 11369                           ;LED_B1.c: 217: LedPointSelect(led);
 11370  1344  0824               	movf	setLED_Main@led,w
 11371  1345  3190  20B3  3193   	fcall	_LedPointSelect
 11372                           
 11373                           ;LED_B1.c: 218: if(LED->GO)
 11374  1348  0021               	movlb	1	; select bank1
 11375  1349  083E               	movf	_LED^(0+128),w
 11376  134A  0086               	movwf	6
 11377  134B  0187               	clrf	7
 11378  134C  1C81               	btfss	1,1
 11379  134D  0008               	return
 11380                           
 11381                           ;LED_B1.c: 219: {
 11382                           ;LED_B1.c: 220: LED->Time++;
 11383  134E  0A3E               	incf	_LED^(0+128),w
 11384  134F  0086               	movwf	6
 11385  1350  0187               	clrf	7
 11386  1351  3001               	movlw	1
 11387  1352  0781               	addwf	1,f
 11388  1353  3141               	addfsr 1,1
 11389  1354  1803               	skipnc
 11390  1355  0A81               	incf	1,f
 11391                           
 11392                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
 11393  1356  0A3E               	incf	_LED^(0+128),w
 11394  1357  0086               	movwf	6
 11395  1358  0187               	clrf	7
 11396  1359  3F40               	moviw [0]fsr1
 11397  135A  0020               	movlb	0	; select bank0
 11398  135B  00A2               	movwf	??_setLED_Main
 11399  135C  3F41               	moviw [1]fsr1
 11400  135D  00A3               	movwf	??_setLED_Main+1
 11401  135E  3000               	movlw	0
 11402  135F  0223               	subwf	??_setLED_Main+1,w
 11403  1360  3032               	movlw	50
 11404  1361  1903               	skipnz
 11405  1362  0222               	subwf	??_setLED_Main,w
 11406  1363  1C03               	skipc
 11407  1364  0008               	return
 11408                           
 11409                           ;LED_B1.c: 222: {
 11410                           ;LED_B1.c: 223: LED->Time=0;
 11411  1365  0021               	movlb	1	; select bank1
 11412  1366  0A3E               	incf	_LED^(0+128),w
 11413  1367  0086               	movwf	6
 11414  1368  0187               	clrf	7
 11415  1369  3000               	movlw	0
 11416  136A  3FC0               	movwi [0]fsr1
 11417  136B  3FC1               	movwi [1]fsr1
 11418                           
 11419                           ;LED_B1.c: 225: if(led == 1)
 11420  136C  0020               	movlb	0	; select bank0
 11421  136D  0824               	movf	setLED_Main@led,w
 11422  136E  3A01               	xorlw	1
 11423  136F  1D03               	skipz
 11424  1370  2B74               	goto	l7051
 11425                           
 11426                           ;LED_B1.c: 226: {
 11427                           ;LED_B1.c: 227: RC7=~RC7;
 11428  1371  3080               	movlw	128
 11429  1372  068E               	xorwf	14,f
 11430                           
 11431                           ;LED_B1.c: 228: }
 11432  1373  0008               	return
 11433  1374                     l7051:	
 11434                           
 11435                           ;LED_B1.c: 231: else if(led == 2)
 11436  1374  0824               	movf	setLED_Main@led,w
 11437  1375  3A02               	xorlw	2
 11438  1376  1D03               	skipz
 11439  1377  2B7B               	goto	l7055
 11440                           
 11441                           ;LED_B1.c: 232: {
 11442                           ;LED_B1.c: 233: RA3=~RA3;
 11443  1378  3008               	movlw	8
 11444  1379  068C               	xorwf	12,f
 11445                           
 11446                           ;LED_B1.c: 234: }
 11447  137A  0008               	return
 11448  137B                     l7055:	
 11449                           
 11450                           ;LED_B1.c: 237: else if(led == 3)
 11451  137B  0824               	movf	setLED_Main@led,w
 11452  137C  3A03               	xorlw	3
 11453  137D  1D03               	skipz
 11454  137E  2B82               	goto	l7059
 11455                           
 11456                           ;LED_B1.c: 238: {
 11457                           ;LED_B1.c: 239: RC6=~RC6;
 11458  137F  3040               	movlw	64
 11459  1380  068E               	xorwf	14,f
 11460                           
 11461                           ;LED_B1.c: 240: }
 11462  1381  0008               	return
 11463  1382                     l7059:	
 11464                           
 11465                           ;LED_B1.c: 243: else if(led == 99)
 11466  1382  0824               	movf	setLED_Main@led,w
 11467  1383  3A63               	xorlw	99
 11468  1384  1D03               	skipz
 11469  1385  0008               	return
 11470                           
 11471                           ;LED_B1.c: 244: {
 11472                           ;LED_B1.c: 245: RB5=~RB5;
 11473  1386  3020               	movlw	32
 11474  1387  068D               	xorwf	13,f
 11475  1388  0008               	return
 11476  1389                     __end_of_setLED_Main:	
 11477                           
 11478                           	psect	text65
 11479  1C12                     __ptext65:	
 11480 ;; *************** function _LED_Initialization *****************
 11481 ;; Defined at:
 11482 ;;		line 35 in file "../src/LED_B1.c"
 11483 ;; Parameters:    Size  Location     Type
 11484 ;;		None
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;		None
 11487 ;; Return value:  Size  Location     Type
 11488 ;;		None               void
 11489 ;; Registers used:
 11490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        0 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:    8
 11503 ;; This function calls:
 11504 ;;		_setLED_Initialization
 11505 ;; This function is called by:
 11506 ;;		_main
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           
 11511                           ;psect for function _LED_Initialization
 11512  1C12                     _LED_Initialization:	
 11513                           
 11514                           ;LED_B1.c: 38: setLED_Initialization(1);
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11518  1C12  3001               	movlw	1
 11519  1C13  319C  2483  319C   	fcall	_setLED_Initialization
 11520                           
 11521                           ;LED_B1.c: 41: setLED_Initialization(2);
 11522  1C16  3002               	movlw	2
 11523  1C17  319C  2483  319C   	fcall	_setLED_Initialization
 11524                           
 11525                           ;LED_B1.c: 44: setLED_Initialization(3);
 11526  1C1A  3003               	movlw	3
 11527  1C1B  319C  2483  319C   	fcall	_setLED_Initialization
 11528                           
 11529                           ;LED_B1.c: 47: setLED_Initialization(99);
 11530  1C1E  3063               	movlw	99
 11531  1C1F  319C  2483         	fcall	_setLED_Initialization
 11532  1C21  0008               	return
 11533  1C22                     __end_of_LED_Initialization:	
 11534                           
 11535                           	psect	text66
 11536  1C83                     __ptext66:	
 11537 ;; *************** function _setLED_Initialization *****************
 11538 ;; Defined at:
 11539 ;;		line 67 in file "../src/LED_B1.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;  led             1    wreg     unsigned char 
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  led             1    4[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;		None               void
 11546 ;; Registers used:
 11547 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;Total ram usage:        1 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    7
 11560 ;; This function calls:
 11561 ;;		_LedPointSelect
 11562 ;;		_setLED
 11563 ;; This function is called by:
 11564 ;;		_LED_Initialization
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           
 11569                           ;psect for function _setLED_Initialization
 11570  1C83                     _setLED_Initialization:	
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11574                           ;setLED_Initialization@led stored from wreg
 11575  1C83  0020               	movlb	0	; select bank0
 11576  1C84  00A4               	movwf	setLED_Initialization@led
 11577                           
 11578                           ;LED_B1.c: 69: LedPointSelect(led);
 11579  1C85  0824               	movf	setLED_Initialization@led,w
 11580  1C86  3190  20B3  319C   	fcall	_LedPointSelect
 11581                           
 11582                           ;LED_B1.c: 70: LED->Enable=1;
 11583  1C89  0021               	movlb	1	; select bank1
 11584  1C8A  083E               	movf	_LED^(0+128),w
 11585  1C8B  0086               	movwf	6
 11586  1C8C  0187               	clrf	7
 11587  1C8D  1401               	bsf	1,0
 11588                           
 11589                           ;LED_B1.c: 71: setLED(led,0);
 11590  1C8E  0020               	movlb	0	; select bank0
 11591  1C8F  01A2               	clrf	setLED@command
 11592  1C90  0824               	movf	setLED_Initialization@led,w
 11593  1C91  3188  2059         	fcall	_setLED
 11594  1C93  0008               	return
 11595  1C94                     __end_of_setLED_Initialization:	
 11596                           
 11597                           	psect	text67
 11598  1271                     __ptext67:	
 11599 ;; *************** function _Flash_Memory_Main *****************
 11600 ;; Defined at:
 11601 ;;		line 786 in file "../src/MCU_B1.c"
 11602 ;; Parameters:    Size  Location     Type
 11603 ;;		None
 11604 ;; Auto vars:     Size  Location     Type
 11605 ;;		None
 11606 ;; Return value:  Size  Location     Type
 11607 ;;		None               void
 11608 ;; Registers used:
 11609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11610 ;; Tracked objects:
 11611 ;;		On entry : 0/0
 11612 ;;		On exit  : 0/0
 11613 ;;		Unchanged: 0/0
 11614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;Total ram usage:        0 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:    8
 11622 ;; This function calls:
 11623 ;;		_Flash_Memory_Modify
 11624 ;; This function is called by:
 11625 ;;		_main
 11626 ;; This function uses a non-reentrant model
 11627 ;;
 11628                           
 11629                           
 11630                           ;psect for function _Flash_Memory_Main
 11631  1271                     _Flash_Memory_Main:	
 11632                           
 11633                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 11634                           
 11635                           ;incstack = 0
 11636                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11637  1271  0021               	movlb	1	; select bank1
 11638  1272  0868               	movf	_Memory^(0+128),w
 11639  1273  3E24               	addlw	36
 11640  1274  0086               	movwf	6
 11641  1275  3002               	movlw	2	; select bank4/5
 11642  1276  0087               	movwf	7
 11643  1277  1C81               	btfss	1,1
 11644  1278  0008               	return
 11645                           
 11646                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 11647  1279  0868               	movf	_Memory^(0+128),w
 11648  127A  3E24               	addlw	36
 11649  127B  0086               	movwf	6
 11650  127C  3002               	movlw	2	; select bank4/5
 11651  127D  0087               	movwf	7
 11652  127E  1C01               	btfss	1,0
 11653  127F  2AAE               	goto	l7585
 11654                           
 11655                           ;MCU_B1.c: 789: Memory->Time++;
 11656  1280  0868               	movf	_Memory^(0+128),w
 11657  1281  3E22               	addlw	34
 11658  1282  0086               	movwf	6
 11659  1283  3002               	movlw	2	; select bank4/5
 11660  1284  0087               	movwf	7
 11661  1285  3001               	movlw	1
 11662  1286  0781               	addwf	1,f
 11663  1287  3141               	addfsr 1,1
 11664  1288  1803               	skipnc
 11665  1289  0A81               	incf	1,f
 11666                           
 11667                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 11668  128A  0868               	movf	_Memory^(0+128),w
 11669  128B  3E22               	addlw	34
 11670  128C  0086               	movwf	6
 11671  128D  3002               	movlw	2	; select bank4/5
 11672  128E  0087               	movwf	7
 11673  128F  3F40               	moviw [0]fsr1
 11674  1290  3A19               	xorlw	25
 11675  1291  1D03               	skipz
 11676  1292  2A95               	goto	u7205
 11677  1293  3F41               	moviw [1]fsr1
 11678  1294  3A00               	xorlw	0
 11679  1295                     u7205:	
 11680  1295  1D03               	skipz
 11681  1296  0008               	return
 11682                           
 11683                           ;MCU_B1.c: 791: {
 11684                           ;MCU_B1.c: 792: Memory->Time = 0;
 11685  1297  0868               	movf	_Memory^(0+128),w
 11686  1298  3E22               	addlw	34
 11687  1299  0086               	movwf	6
 11688  129A  3002               	movlw	2	; select bank4/5
 11689  129B  0087               	movwf	7
 11690  129C  3000               	movlw	0
 11691  129D  3FC0               	movwi [0]fsr1
 11692  129E  3FC1               	movwi [1]fsr1
 11693                           
 11694                           ;MCU_B1.c: 793: Memory->Modify = 0;
 11695  129F  0868               	movf	_Memory^(0+128),w
 11696  12A0  3E24               	addlw	36
 11697  12A1  0086               	movwf	6
 11698  12A2  3002               	movlw	2	; select bank4/5
 11699  12A3  0087               	movwf	7
 11700  12A4  1001               	bcf	1,0
 11701                           
 11702                           ;MCU_B1.c: 794: Memory->GO = 0;
 11703  12A5  0868               	movf	_Memory^(0+128),w
 11704  12A6  3E24               	addlw	36
 11705  12A7  0086               	movwf	6
 11706  12A8  3002               	movlw	2	; select bank4/5
 11707  12A9  0087               	movwf	7
 11708  12AA  1081               	bcf	1,1
 11709                           
 11710                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 11711  12AB  3197  2724         	fcall	_Flash_Memory_Modify
 11712                           
 11713                           ;MCU_B1.c: 796: }
 11714                           ;MCU_B1.c: 797: } else {
 11715  12AD  0008               	return
 11716  12AE                     l7585:	
 11717                           
 11718                           ;MCU_B1.c: 798: Memory->GO = 0;
 11719  12AE  0021               	movlb	1	; select bank1
 11720  12AF  0868               	movf	_Memory^(0+128),w
 11721  12B0  3E24               	addlw	36
 11722  12B1  0086               	movwf	6
 11723  12B2  3002               	movlw	2	; select bank4/5
 11724  12B3  0087               	movwf	7
 11725  12B4  1081               	bcf	1,1
 11726  12B5  0008               	return
 11727  12B6                     __end_of_Flash_Memory_Main:	
 11728                           
 11729                           	psect	text68
 11730  1724                     __ptext68:	
 11731 ;; *************** function _Flash_Memory_Modify *****************
 11732 ;; Defined at:
 11733 ;;		line 855 in file "../src/MCU_B1.c"
 11734 ;; Parameters:    Size  Location     Type
 11735 ;;		None
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  i               1    6[BANK0 ] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;		None               void
 11740 ;; Registers used:
 11741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/0
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;Total ram usage:        3 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    7
 11754 ;; This function calls:
 11755 ;;		_Flash_Memory_Erasing
 11756 ;;		_Flash_Memory_Read
 11757 ;;		_Flash_Memory_Write
 11758 ;; This function is called by:
 11759 ;;		_Flash_Memory_Main
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           
 11764                           ;psect for function _Flash_Memory_Modify
 11765  1724                     _Flash_Memory_Modify:	
 11766                           
 11767                           ;MCU_B1.c: 856: char i = 0;
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11771  1724  0020               	movlb	0	; select bank0
 11772  1725  01A6               	clrf	Flash_Memory_Modify@i
 11773                           
 11774                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 11775  1726  01A6               	clrf	Flash_Memory_Modify@i
 11776  1727  3020               	movlw	32
 11777  1728  0226               	subwf	Flash_Memory_Modify@i,w
 11778  1729  1803               	btfsc	3,0
 11779  172A  2F44               	goto	l7145
 11780  172B                     l7139:	
 11781                           
 11782                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 11783  172B  0826               	movf	Flash_Memory_Modify@i,w
 11784  172C  319D  25B3  3197   	fcall	_Flash_Memory_Read
 11785  172F  0020               	movlb	0	; select bank0
 11786  1730  00A4               	movwf	??_Flash_Memory_Modify
 11787  1731  0826               	movf	Flash_Memory_Modify@i,w
 11788  1732  0021               	movlb	1	; select bank1
 11789  1733  0768               	addwf	_Memory^(0+128),w
 11790  1734  0020               	movlb	0	; select bank0
 11791  1735  00A5               	movwf	??_Flash_Memory_Modify+1
 11792  1736  0825               	movf	??_Flash_Memory_Modify+1,w
 11793  1737  0086               	movwf	6
 11794  1738  3002               	movlw	2	; select bank4/5
 11795  1739  0087               	movwf	7
 11796  173A  0824               	movf	??_Flash_Memory_Modify,w
 11797  173B  0081               	movwf	1
 11798  173C  3001               	movlw	1
 11799  173D  00A4               	movwf	??_Flash_Memory_Modify
 11800  173E  0824               	movf	??_Flash_Memory_Modify,w
 11801  173F  07A6               	addwf	Flash_Memory_Modify@i,f
 11802  1740  3020               	movlw	32
 11803  1741  0226               	subwf	Flash_Memory_Modify@i,w
 11804  1742  1C03               	skipc
 11805  1743  2F2B               	goto	l7139
 11806  1744                     l7145:	
 11807                           
 11808                           ;MCU_B1.c: 859: }
 11809                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 11810  1744  087D               	movf	_product,w
 11811  1745  3E0C               	addlw	12
 11812  1746  0086               	movwf	6
 11813  1747  3002               	movlw	2	; select bank4/5
 11814  1748  0087               	movwf	7
 11815  1749  0801               	movf	1,w
 11816  174A  00A4               	movwf	??_Flash_Memory_Modify
 11817  174B  0021               	movlb	1	; select bank1
 11818  174C  0868               	movf	_Memory^(0+128),w
 11819  174D  0086               	movwf	6
 11820  174E  3002               	movlw	2	; select bank4/5
 11821  174F  0087               	movwf	7
 11822  1750  0020               	movlb	0	; select bank0
 11823  1751  0824               	movf	??_Flash_Memory_Modify,w
 11824  1752  0081               	movwf	1
 11825                           
 11826                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 11827  1753  087D               	movf	_product,w
 11828  1754  3E0D               	addlw	13
 11829  1755  0086               	movwf	6
 11830  1756  3002               	movlw	2	; select bank4/5
 11831  1757  0087               	movwf	7
 11832  1758  0801               	movf	1,w
 11833  1759  00A4               	movwf	??_Flash_Memory_Modify
 11834  175A  0021               	movlb	1	; select bank1
 11835  175B  0A68               	incf	_Memory^(0+128),w
 11836  175C  0086               	movwf	6
 11837  175D  3002               	movlw	2	; select bank4/5
 11838  175E  0087               	movwf	7
 11839  175F  0020               	movlb	0	; select bank0
 11840  1760  0824               	movf	??_Flash_Memory_Modify,w
 11841  1761  0081               	movwf	1
 11842                           
 11843                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 11844  1762  087D               	movf	_product,w
 11845  1763  3E0E               	addlw	14
 11846  1764  0086               	movwf	6
 11847  1765  3002               	movlw	2	; select bank4/5
 11848  1766  0087               	movwf	7
 11849  1767  0801               	movf	1,w
 11850  1768  00A4               	movwf	??_Flash_Memory_Modify
 11851  1769  0021               	movlb	1	; select bank1
 11852  176A  0868               	movf	_Memory^(0+128),w
 11853  176B  3E02               	addlw	2
 11854  176C  0086               	movwf	6
 11855  176D  3002               	movlw	2	; select bank4/5
 11856  176E  0087               	movwf	7
 11857  176F  0020               	movlb	0	; select bank0
 11858  1770  0824               	movf	??_Flash_Memory_Modify,w
 11859  1771  0081               	movwf	1
 11860                           
 11861                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 11862  1772  0021               	movlb	1	; select bank1
 11863  1773  0868               	movf	_Memory^(0+128),w
 11864  1774  3E24               	addlw	36
 11865  1775  0086               	movwf	6
 11866  1776  3002               	movlw	2	; select bank4/5
 11867  1777  0087               	movwf	7
 11868  1778  1D01               	btfss	1,2
 11869  1779  2F8A               	goto	l7149
 11870                           
 11871                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 11872  177A  0868               	movf	_Memory^(0+128),w
 11873  177B  3E24               	addlw	36
 11874  177C  0086               	movwf	6
 11875  177D  3002               	movlw	2	; select bank4/5
 11876  177E  0087               	movwf	7
 11877  177F  1101               	bcf	1,2
 11878                           
 11879                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 11880  1780  0867               	movf	_myMain^(0+128),w
 11881  1781  0086               	movwf	6
 11882  1782  3001               	movlw	1	; select bank2/3
 11883  1783  0087               	movwf	7
 11884  1784  1281               	bcf	1,5
 11885                           
 11886                           ;MCU_B1.c: 871: myMain->First = 0;
 11887  1785  0867               	movf	_myMain^(0+128),w
 11888  1786  0086               	movwf	6
 11889  1787  3001               	movlw	1	; select bank2/3
 11890  1788  0087               	movwf	7
 11891  1789  1381               	bcf	1,7
 11892  178A                     l7149:	
 11893                           
 11894                           ;MCU_B1.c: 873: }
 11895                           ;MCU_B1.c: 874: GIE = 0;
 11896  178A  138B               	bcf	11,7	;volatile
 11897                           
 11898                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 11899  178B  319B  2352  3197   	fcall	_Flash_Memory_Erasing
 11900                           
 11901                           ;MCU_B1.c: 876: Flash_Memory_Write();
 11902  178E  3191  2110         	fcall	_Flash_Memory_Write
 11903                           
 11904                           ;MCU_B1.c: 877: GIE = 1;
 11905  1790  178B               	bsf	11,7	;volatile
 11906  1791  0008               	return
 11907  1792                     __end_of_Flash_Memory_Modify:	
 11908                           
 11909                           	psect	text69
 11910  1B52                     __ptext69:	
 11911 ;; *************** function _Flash_Memory_Erasing *****************
 11912 ;; Defined at:
 11913 ;;		line 844 in file "../src/MCU_B1.c"
 11914 ;; Parameters:    Size  Location     Type
 11915 ;;		None
 11916 ;; Auto vars:     Size  Location     Type
 11917 ;;		None
 11918 ;; Return value:  Size  Location     Type
 11919 ;;		None               void
 11920 ;; Registers used:
 11921 ;;		wreg, status,2, status,0, pclath, cstack
 11922 ;; Tracked objects:
 11923 ;;		On entry : 0/0
 11924 ;;		On exit  : 0/0
 11925 ;;		Unchanged: 0/0
 11926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;Total ram usage:        0 bytes
 11932 ;; Hardware stack levels used:    1
 11933 ;; Hardware stack levels required when called:    6
 11934 ;; This function calls:
 11935 ;;		_Flash_Memory_Unlock
 11936 ;; This function is called by:
 11937 ;;		_Flash_Memory_Modify
 11938 ;; This function uses a non-reentrant model
 11939 ;;
 11940                           
 11941                           
 11942                           ;psect for function _Flash_Memory_Erasing
 11943  1B52                     _Flash_Memory_Erasing:	
 11944                           
 11945                           ;MCU_B1.c: 845: CFGS = 0;
 11946                           
 11947                           ;incstack = 0
 11948                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11949  1B52  0023               	movlb	3	; select bank3
 11950  1B53  1315               	bcf	21,6	;volatile
 11951                           
 11952                           ;MCU_B1.c: 846: PMADRH = 0x30;
 11953  1B54  3030               	movlw	48
 11954  1B55  0092               	movwf	18	;volatile
 11955                           
 11956                           ;MCU_B1.c: 847: PMADRL = 0x00;
 11957  1B56  0191               	clrf	17	;volatile
 11958                           
 11959                           ;MCU_B1.c: 848: FREE = 1;
 11960  1B57  1615               	bsf	21,4	;volatile
 11961                           
 11962                           ;MCU_B1.c: 849: WREN = 1;
 11963  1B58  1515               	bsf	21,2	;volatile
 11964                           
 11965                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 11966  1B59  319B  2325         	fcall	_Flash_Memory_Unlock
 11967                           
 11968                           ;MCU_B1.c: 851: WREN = 0;
 11969  1B5B  0023               	movlb	3	; select bank3
 11970  1B5C  1115               	bcf	21,2	;volatile
 11971  1B5D  0008               	return
 11972  1B5E                     __end_of_Flash_Memory_Erasing:	
 11973                           
 11974                           	psect	text70
 11975  0499                     __ptext70:	
 11976 ;; *************** function _Flash_Memory_Initialization *****************
 11977 ;; Defined at:
 11978 ;;		line 745 in file "../src/MCU_B1.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;  i               1   62[BANK0 ] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;		None               void
 11985 ;; Registers used:
 11986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;Total ram usage:        2 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    8
 11999 ;; This function calls:
 12000 ;;		_Flash_Memory_Read
 12001 ;;		_Flash_Memory_Write
 12002 ;;		_setPercentValue
 12003 ;; This function is called by:
 12004 ;;		_main
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           
 12009                           ;psect for function _Flash_Memory_Initialization
 12010  0499                     _Flash_Memory_Initialization:	
 12011                           
 12012                           ;MCU_B1.c: 746: char i = 0;
 12013                           
 12014                           ;incstack = 0
 12015                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12016  0499  0020               	movlb	0	; select bank0
 12017  049A  01DE               	clrf	Flash_Memory_Initialization@i
 12018                           
 12019                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 12020  049B  301F               	movlw	31
 12021  049C  319D  25B3  3184   	fcall	_Flash_Memory_Read
 12022  049F  3AAA               	xorlw	170
 12023  04A0  1D03               	skipz
 12024  04A1  2D13               	goto	l7541
 12025                           
 12026                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 12027  04A2  3000               	movlw	0
 12028  04A3  319D  25B3  3184   	fcall	_Flash_Memory_Read
 12029  04A6  0020               	movlb	0	; select bank0
 12030  04A7  00DD               	movwf	??_Flash_Memory_Initialization
 12031  04A8  087D               	movf	_product,w
 12032  04A9  3E0C               	addlw	12
 12033  04AA  0086               	movwf	6
 12034  04AB  3002               	movlw	2	; select bank4/5
 12035  04AC  0087               	movwf	7
 12036  04AD  085D               	movf	??_Flash_Memory_Initialization,w
 12037  04AE  0081               	movwf	1
 12038                           
 12039                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 12040  04AF  3001               	movlw	1
 12041  04B0  319D  25B3  3184   	fcall	_Flash_Memory_Read
 12042  04B3  0020               	movlb	0	; select bank0
 12043  04B4  00DD               	movwf	??_Flash_Memory_Initialization
 12044  04B5  087D               	movf	_product,w
 12045  04B6  3E0D               	addlw	13
 12046  04B7  0086               	movwf	6
 12047  04B8  3002               	movlw	2	; select bank4/5
 12048  04B9  0087               	movwf	7
 12049  04BA  085D               	movf	??_Flash_Memory_Initialization,w
 12050  04BB  0081               	movwf	1
 12051                           
 12052                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 12053  04BC  3002               	movlw	2
 12054  04BD  319D  25B3  3184   	fcall	_Flash_Memory_Read
 12055  04C0  0020               	movlb	0	; select bank0
 12056  04C1  00DD               	movwf	??_Flash_Memory_Initialization
 12057  04C2  087D               	movf	_product,w
 12058  04C3  3E0E               	addlw	14
 12059  04C4  0086               	movwf	6
 12060  04C5  3002               	movlw	2	; select bank4/5
 12061  04C6  0087               	movwf	7
 12062  04C7  085D               	movf	??_Flash_Memory_Initialization,w
 12063  04C8  0081               	movwf	1
 12064                           
 12065                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-95)*0.8)));
 12066  04C9  3004               	movlw	4
 12067  04CA  3192  22B6  3184   	fcall	_setPercentValue
 12068  04CD  0020               	movlb	0	; select bank0
 12069  04CE  00DD               	movwf	??_Flash_Memory_Initialization
 12070  04CF  085D               	movf	??_Flash_Memory_Initialization,w
 12071  04D0  00DE               	movwf	Flash_Memory_Initialization@i
 12072                           
 12073                           ;MCU_B1.c: 757: product->Data[21] = i;
 12074  04D1  085E               	movf	Flash_Memory_Initialization@i,w
 12075  04D2  00DD               	movwf	??_Flash_Memory_Initialization
 12076  04D3  087D               	movf	_product,w
 12077  04D4  3E15               	addlw	21
 12078  04D5  0086               	movwf	6
 12079  04D6  3002               	movlw	2	; select bank4/5
 12080  04D7  0087               	movwf	7
 12081  04D8  085D               	movf	??_Flash_Memory_Initialization,w
 12082  04D9  0081               	movwf	1
 12083                           
 12084                           ;MCU_B1.c: 758: product->Data[22] = i;
 12085  04DA  085E               	movf	Flash_Memory_Initialization@i,w
 12086  04DB  00DD               	movwf	??_Flash_Memory_Initialization
 12087  04DC  087D               	movf	_product,w
 12088  04DD  3E16               	addlw	22
 12089  04DE  0086               	movwf	6
 12090  04DF  3002               	movlw	2	; select bank4/5
 12091  04E0  0087               	movwf	7
 12092  04E1  085D               	movf	??_Flash_Memory_Initialization,w
 12093  04E2  0081               	movwf	1
 12094                           
 12095                           ;MCU_B1.c: 759: product->Data[23] = i;
 12096  04E3  085E               	movf	Flash_Memory_Initialization@i,w
 12097  04E4  00DD               	movwf	??_Flash_Memory_Initialization
 12098  04E5  087D               	movf	_product,w
 12099  04E6  3E17               	addlw	23
 12100  04E7  0086               	movwf	6
 12101  04E8  3002               	movlw	2	; select bank4/5
 12102  04E9  0087               	movwf	7
 12103  04EA  085D               	movf	??_Flash_Memory_Initialization,w
 12104  04EB  0081               	movwf	1
 12105                           
 12106                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12107  04EC  087D               	movf	_product,w
 12108  04ED  3E0C               	addlw	12
 12109  04EE  0086               	movwf	6
 12110  04EF  3002               	movlw	2	; select bank4/5
 12111  04F0  0087               	movwf	7
 12112  04F1  0801               	movf	1,w
 12113  04F2  3AFF               	xorlw	255
 12114  04F3  1D03               	skipz
 12115  04F4  0008               	return
 12116  04F5  087D               	movf	_product,w
 12117  04F6  3E0D               	addlw	13
 12118  04F7  0086               	movwf	6
 12119  04F8  3002               	movlw	2	; select bank4/5
 12120  04F9  0087               	movwf	7
 12121  04FA  0801               	movf	1,w
 12122  04FB  3AFF               	xorlw	255
 12123  04FC  1D03               	skipz
 12124  04FD  0008               	return
 12125  04FE  087D               	movf	_product,w
 12126  04FF  3E0E               	addlw	14
 12127  0500  0086               	movwf	6
 12128  0501  3002               	movlw	2	; select bank4/5
 12129  0502  0087               	movwf	7
 12130  0503  0801               	movf	1,w
 12131  0504  3AFF               	xorlw	255
 12132  0505  1D03               	skipz
 12133  0506  0008               	return
 12134                           
 12135                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 12136  0507  0021               	movlb	1	; select bank1
 12137  0508  0867               	movf	_myMain^(0+128),w
 12138  0509  0086               	movwf	6
 12139  050A  3001               	movlw	1	; select bank2/3
 12140  050B  0087               	movwf	7
 12141  050C  1681               	bsf	1,5
 12142                           
 12143                           ;MCU_B1.c: 763: myMain->First = 1;
 12144  050D  0867               	movf	_myMain^(0+128),w
 12145  050E  0086               	movwf	6
 12146  050F  3001               	movlw	1	; select bank2/3
 12147  0510  0087               	movwf	7
 12148  0511  1781               	bsf	1,7
 12149                           
 12150                           ;MCU_B1.c: 764: }
 12151                           ;MCU_B1.c: 765: } else {
 12152  0512  0008               	return
 12153  0513                     l7541:	
 12154                           
 12155                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-95)*0.8)));
 12156  0513  3004               	movlw	4
 12157  0514  3192  22B6  3184   	fcall	_setPercentValue
 12158  0517  0020               	movlb	0	; select bank0
 12159  0518  00DD               	movwf	??_Flash_Memory_Initialization
 12160  0519  085D               	movf	??_Flash_Memory_Initialization,w
 12161  051A  00DE               	movwf	Flash_Memory_Initialization@i
 12162                           
 12163                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 12164  051B  30FF               	movlw	255
 12165  051C  00DD               	movwf	??_Flash_Memory_Initialization
 12166  051D  0021               	movlb	1	; select bank1
 12167  051E  0868               	movf	_Memory^(0+128),w
 12168  051F  0086               	movwf	6
 12169  0520  3002               	movlw	2	; select bank4/5
 12170  0521  0087               	movwf	7
 12171  0522  0020               	movlb	0	; select bank0
 12172  0523  085D               	movf	??_Flash_Memory_Initialization,w
 12173  0524  0081               	movwf	1
 12174                           
 12175                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 12176  0525  30FF               	movlw	255
 12177  0526  00DD               	movwf	??_Flash_Memory_Initialization
 12178  0527  0021               	movlb	1	; select bank1
 12179  0528  0A68               	incf	_Memory^(0+128),w
 12180  0529  0086               	movwf	6
 12181  052A  3002               	movlw	2	; select bank4/5
 12182  052B  0087               	movwf	7
 12183  052C  0020               	movlb	0	; select bank0
 12184  052D  085D               	movf	??_Flash_Memory_Initialization,w
 12185  052E  0081               	movwf	1
 12186                           
 12187                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 12188  052F  30FF               	movlw	255
 12189  0530  00DD               	movwf	??_Flash_Memory_Initialization
 12190  0531  0021               	movlb	1	; select bank1
 12191  0532  0868               	movf	_Memory^(0+128),w
 12192  0533  3E02               	addlw	2
 12193  0534  0086               	movwf	6
 12194  0535  3002               	movlw	2	; select bank4/5
 12195  0536  0087               	movwf	7
 12196  0537  0020               	movlb	0	; select bank0
 12197  0538  085D               	movf	??_Flash_Memory_Initialization,w
 12198  0539  0081               	movwf	1
 12199                           
 12200                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 12201  053A  30FF               	movlw	255
 12202  053B  00DD               	movwf	??_Flash_Memory_Initialization
 12203  053C  0021               	movlb	1	; select bank1
 12204  053D  0868               	movf	_Memory^(0+128),w
 12205  053E  3E03               	addlw	3
 12206  053F  0086               	movwf	6
 12207  0540  3002               	movlw	2	; select bank4/5
 12208  0541  0087               	movwf	7
 12209  0542  0020               	movlb	0	; select bank0
 12210  0543  085D               	movf	??_Flash_Memory_Initialization,w
 12211  0544  0081               	movwf	1
 12212                           
 12213                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 12214  0545  30FF               	movlw	255
 12215  0546  00DD               	movwf	??_Flash_Memory_Initialization
 12216  0547  0021               	movlb	1	; select bank1
 12217  0548  0868               	movf	_Memory^(0+128),w
 12218  0549  3E04               	addlw	4
 12219  054A  0086               	movwf	6
 12220  054B  3002               	movlw	2	; select bank4/5
 12221  054C  0087               	movwf	7
 12222  054D  0020               	movlb	0	; select bank0
 12223  054E  085D               	movf	??_Flash_Memory_Initialization,w
 12224  054F  0081               	movwf	1
 12225                           
 12226                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 12227  0550  30FF               	movlw	255
 12228  0551  00DD               	movwf	??_Flash_Memory_Initialization
 12229  0552  0021               	movlb	1	; select bank1
 12230  0553  0868               	movf	_Memory^(0+128),w
 12231  0554  3E05               	addlw	5
 12232  0555  0086               	movwf	6
 12233  0556  3002               	movlw	2	; select bank4/5
 12234  0557  0087               	movwf	7
 12235  0558  0020               	movlb	0	; select bank0
 12236  0559  085D               	movf	??_Flash_Memory_Initialization,w
 12237  055A  0081               	movwf	1
 12238                           
 12239                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 12240  055B  30AA               	movlw	170
 12241  055C  00DD               	movwf	??_Flash_Memory_Initialization
 12242  055D  0021               	movlb	1	; select bank1
 12243  055E  0868               	movf	_Memory^(0+128),w
 12244  055F  3E1F               	addlw	31
 12245  0560  0086               	movwf	6
 12246  0561  3002               	movlw	2	; select bank4/5
 12247  0562  0087               	movwf	7
 12248  0563  0020               	movlb	0	; select bank0
 12249  0564  085D               	movf	??_Flash_Memory_Initialization,w
 12250  0565  0081               	movwf	1
 12251                           
 12252                           ;MCU_B1.c: 774: product->Data[21] = i;
 12253  0566  085E               	movf	Flash_Memory_Initialization@i,w
 12254  0567  00DD               	movwf	??_Flash_Memory_Initialization
 12255  0568  087D               	movf	_product,w
 12256  0569  3E15               	addlw	21
 12257  056A  0086               	movwf	6
 12258  056B  3002               	movlw	2	; select bank4/5
 12259  056C  0087               	movwf	7
 12260  056D  085D               	movf	??_Flash_Memory_Initialization,w
 12261  056E  0081               	movwf	1
 12262                           
 12263                           ;MCU_B1.c: 775: product->Data[22] = i;
 12264  056F  085E               	movf	Flash_Memory_Initialization@i,w
 12265  0570  00DD               	movwf	??_Flash_Memory_Initialization
 12266  0571  087D               	movf	_product,w
 12267  0572  3E16               	addlw	22
 12268  0573  0086               	movwf	6
 12269  0574  3002               	movlw	2	; select bank4/5
 12270  0575  0087               	movwf	7
 12271  0576  085D               	movf	??_Flash_Memory_Initialization,w
 12272  0577  0081               	movwf	1
 12273                           
 12274                           ;MCU_B1.c: 776: product->Data[23] = i;
 12275  0578  085E               	movf	Flash_Memory_Initialization@i,w
 12276  0579  00DD               	movwf	??_Flash_Memory_Initialization
 12277  057A  087D               	movf	_product,w
 12278  057B  3E17               	addlw	23
 12279  057C  0086               	movwf	6
 12280  057D  3002               	movlw	2	; select bank4/5
 12281  057E  0087               	movwf	7
 12282  057F  085D               	movf	??_Flash_Memory_Initialization,w
 12283  0580  0081               	movwf	1
 12284                           
 12285                           ;MCU_B1.c: 777: GIE = 0;
 12286  0581  138B               	bcf	11,7	;volatile
 12287                           
 12288                           ;MCU_B1.c: 778: Flash_Memory_Write();
 12289  0582  3191  2110         	fcall	_Flash_Memory_Write
 12290                           
 12291                           ;MCU_B1.c: 779: GIE = 1;
 12292  0584  178B               	bsf	11,7	;volatile
 12293                           
 12294                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 12295  0585  0021               	movlb	1	; select bank1
 12296  0586  0867               	movf	_myMain^(0+128),w
 12297  0587  0086               	movwf	6
 12298  0588  3001               	movlw	1	; select bank2/3
 12299  0589  0087               	movwf	7
 12300  058A  1681               	bsf	1,5
 12301                           
 12302                           ;MCU_B1.c: 781: myMain->First = 1;
 12303  058B  0867               	movf	_myMain^(0+128),w
 12304  058C  0086               	movwf	6
 12305  058D  3001               	movlw	1	; select bank2/3
 12306  058E  0087               	movwf	7
 12307  058F  1781               	bsf	1,7
 12308  0590  0008               	return
 12309  0591                     __end_of_Flash_Memory_Initialization:	
 12310                           
 12311                           	psect	text71
 12312  1110                     __ptext71:	
 12313 ;; *************** function _Flash_Memory_Write *****************
 12314 ;; Defined at:
 12315 ;;		line 825 in file "../src/MCU_B1.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;		None
 12318 ;; Auto vars:     Size  Location     Type
 12319 ;;  i               1    1[BANK0 ] unsigned char 
 12320 ;; Return value:  Size  Location     Type
 12321 ;;		None               void
 12322 ;; Registers used:
 12323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12324 ;; Tracked objects:
 12325 ;;		On entry : 0/0
 12326 ;;		On exit  : 0/0
 12327 ;;		Unchanged: 0/0
 12328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;Total ram usage:        2 bytes
 12334 ;; Hardware stack levels used:    1
 12335 ;; Hardware stack levels required when called:    6
 12336 ;; This function calls:
 12337 ;;		_Flash_Memory_Unlock
 12338 ;; This function is called by:
 12339 ;;		_Flash_Memory_Initialization
 12340 ;;		_Flash_Memory_Modify
 12341 ;; This function uses a non-reentrant model
 12342 ;;
 12343                           
 12344                           
 12345                           ;psect for function _Flash_Memory_Write
 12346  1110                     _Flash_Memory_Write:	
 12347                           
 12348                           ;MCU_B1.c: 826: char i = 0;
 12349                           
 12350                           ;incstack = 0
 12351                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12352  1110  0020               	movlb	0	; select bank0
 12353  1111  01A1               	clrf	Flash_Memory_Write@i
 12354                           
 12355                           ;MCU_B1.c: 827: CFGS = 0;
 12356  1112  0023               	movlb	3	; select bank3
 12357  1113  1315               	bcf	21,6	;volatile
 12358                           
 12359                           ;MCU_B1.c: 828: PMADRH = 0x30;
 12360  1114  3030               	movlw	48
 12361  1115  0092               	movwf	18	;volatile
 12362                           
 12363                           ;MCU_B1.c: 829: PMDATH = 0;
 12364  1116  0194               	clrf	20	;volatile
 12365                           
 12366                           ;MCU_B1.c: 830: FREE = 0;
 12367  1117  1215               	bcf	21,4	;volatile
 12368                           
 12369                           ;MCU_B1.c: 831: LWLO = 1;
 12370  1118  1695               	bsf	21,5	;volatile
 12371                           
 12372                           ;MCU_B1.c: 832: WREN = 1;
 12373  1119  1515               	bsf	21,2	;volatile
 12374                           
 12375                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 12376  111A  0020               	movlb	0	; select bank0
 12377  111B  01A1               	clrf	Flash_Memory_Write@i
 12378  111C  3020               	movlw	32
 12379  111D  0221               	subwf	Flash_Memory_Write@i,w
 12380  111E  1803               	btfsc	3,0
 12381  111F  293C               	goto	l1427
 12382  1120                     l6547:	
 12383                           
 12384                           ;MCU_B1.c: 834: PMADRL = i;
 12385  1120  0821               	movf	Flash_Memory_Write@i,w
 12386  1121  0023               	movlb	3	; select bank3
 12387  1122  0091               	movwf	17	;volatile
 12388                           
 12389                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 12390  1123  0020               	movlb	0	; select bank0
 12391  1124  0821               	movf	Flash_Memory_Write@i,w
 12392  1125  0021               	movlb	1	; select bank1
 12393  1126  0768               	addwf	_Memory^(0+128),w
 12394  1127  0020               	movlb	0	; select bank0
 12395  1128  00A0               	movwf	??_Flash_Memory_Write
 12396  1129  0820               	movf	??_Flash_Memory_Write,w
 12397  112A  0086               	movwf	6
 12398  112B  3002               	movlw	2	; select bank4/5
 12399  112C  0087               	movwf	7
 12400  112D  0801               	movf	1,w
 12401  112E  0023               	movlb	3	; select bank3
 12402  112F  0093               	movwf	19	;volatile
 12403                           
 12404                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 12405  1130  319B  2325  3191   	fcall	_Flash_Memory_Unlock
 12406  1133  3001               	movlw	1
 12407  1134  0020               	movlb	0	; select bank0
 12408  1135  00A0               	movwf	??_Flash_Memory_Write
 12409  1136  0820               	movf	??_Flash_Memory_Write,w
 12410  1137  07A1               	addwf	Flash_Memory_Write@i,f
 12411  1138  3020               	movlw	32
 12412  1139  0221               	subwf	Flash_Memory_Write@i,w
 12413  113A  1C03               	skipc
 12414  113B  2920               	goto	l6547
 12415  113C                     l1427:	
 12416                           
 12417                           ;MCU_B1.c: 837: }
 12418                           ;MCU_B1.c: 838: LWLO = 0;
 12419  113C  0023               	movlb	3	; select bank3
 12420  113D  1295               	bcf	21,5	;volatile
 12421                           
 12422                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 12423  113E  319B  2325         	fcall	_Flash_Memory_Unlock
 12424                           
 12425                           ;MCU_B1.c: 840: WREN = 0;
 12426  1140  0023               	movlb	3	; select bank3
 12427  1141  1115               	bcf	21,2	;volatile
 12428  1142  0008               	return
 12429  1143                     __end_of_Flash_Memory_Write:	
 12430                           
 12431                           	psect	text72
 12432  1B25                     __ptext72:	
 12433 ;; *************** function _Flash_Memory_Unlock *****************
 12434 ;; Defined at:
 12435 ;;		line 804 in file "../src/MCU_B1.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;		None
 12438 ;; Auto vars:     Size  Location     Type
 12439 ;;		None
 12440 ;; Return value:  Size  Location     Type
 12441 ;;		None               void
 12442 ;; Registers used:
 12443 ;;		wreg
 12444 ;; Tracked objects:
 12445 ;;		On entry : 0/0
 12446 ;;		On exit  : 0/0
 12447 ;;		Unchanged: 0/0
 12448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;Total ram usage:        0 bytes
 12454 ;; Hardware stack levels used:    1
 12455 ;; Hardware stack levels required when called:    5
 12456 ;; This function calls:
 12457 ;;		Nothing
 12458 ;; This function is called by:
 12459 ;;		_Flash_Memory_Write
 12460 ;;		_Flash_Memory_Erasing
 12461 ;; This function uses a non-reentrant model
 12462 ;;
 12463                           
 12464                           
 12465                           ;psect for function _Flash_Memory_Unlock
 12466  1B25                     _Flash_Memory_Unlock:	
 12467                           
 12468                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 12469                           
 12470                           ;incstack = 0
 12471                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12472  1B25  3055               	movlw	85
 12473  1B26  0023               	movlb	3	; select bank3
 12474  1B27  0096               	movwf	22	;volatile
 12475                           
 12476                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 12477  1B28  30AA               	movlw	170
 12478  1B29  0096               	movwf	22	;volatile
 12479                           
 12480                           ;MCU_B1.c: 807: WR = 1;
 12481  1B2A  1495               	bsf	21,1	;volatile
 12482                           
 12483                           ;MCU_B1.c: 808: __nop();
 12484  1B2B  0000               	nop
 12485                           
 12486                           ;MCU_B1.c: 809: __nop();
 12487  1B2C  0000               	nop
 12488  1B2D  0008               	return
 12489  1B2E                     __end_of_Flash_Memory_Unlock:	
 12490                           
 12491                           	psect	text73
 12492  1DB3                     __ptext73:	
 12493 ;; *************** function _Flash_Memory_Read *****************
 12494 ;; Defined at:
 12495 ;;		line 813 in file "../src/MCU_B1.c"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;  address         1    wreg     unsigned char 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  address         1    2[BANK0 ] unsigned char 
 12500 ;;  ret             1    3[BANK0 ] unsigned char 
 12501 ;;  i               1    1[BANK0 ] unsigned char 
 12502 ;; Return value:  Size  Location     Type
 12503 ;;                  1    wreg      unsigned char 
 12504 ;; Registers used:
 12505 ;;		wreg, status,2
 12506 ;; Tracked objects:
 12507 ;;		On entry : 0/0
 12508 ;;		On exit  : 0/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;Total ram usage:        4 bytes
 12516 ;; Hardware stack levels used:    1
 12517 ;; Hardware stack levels required when called:    5
 12518 ;; This function calls:
 12519 ;;		Nothing
 12520 ;; This function is called by:
 12521 ;;		_Flash_Memory_Initialization
 12522 ;;		_Flash_Memory_Modify
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           
 12527                           ;psect for function _Flash_Memory_Read
 12528  1DB3                     _Flash_Memory_Read:	
 12529                           
 12530                           ;incstack = 0
 12531                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12532                           ;Flash_Memory_Read@address stored from wreg
 12533  1DB3  0020               	movlb	0	; select bank0
 12534  1DB4  00A2               	movwf	Flash_Memory_Read@address
 12535                           
 12536                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 12537  1DB5  01A1               	clrf	Flash_Memory_Read@i
 12538  1DB6  01A3               	clrf	Flash_Memory_Read@ret
 12539                           
 12540                           ;MCU_B1.c: 815: PMADRH = 0x30;
 12541  1DB7  3030               	movlw	48
 12542  1DB8  0023               	movlb	3	; select bank3
 12543  1DB9  0092               	movwf	18	;volatile
 12544                           
 12545                           ;MCU_B1.c: 816: PMADRL = address;
 12546  1DBA  0020               	movlb	0	; select bank0
 12547  1DBB  0822               	movf	Flash_Memory_Read@address,w
 12548  1DBC  0023               	movlb	3	; select bank3
 12549  1DBD  0091               	movwf	17	;volatile
 12550                           
 12551                           ;MCU_B1.c: 817: CFGS = 0;
 12552  1DBE  1315               	bcf	21,6	;volatile
 12553                           
 12554                           ;MCU_B1.c: 818: RD = 1;
 12555  1DBF  1415               	bsf	21,0	;volatile
 12556                           
 12557                           ;MCU_B1.c: 819: i = PMDATH;
 12558  1DC0  0814               	movf	20,w	;volatile
 12559  1DC1  0020               	movlb	0	; select bank0
 12560  1DC2  00A0               	movwf	??_Flash_Memory_Read
 12561  1DC3  0820               	movf	??_Flash_Memory_Read,w
 12562  1DC4  00A1               	movwf	Flash_Memory_Read@i
 12563                           
 12564                           ;MCU_B1.c: 820: ret = PMDATL;
 12565  1DC5  0023               	movlb	3	; select bank3
 12566  1DC6  0813               	movf	19,w	;volatile
 12567  1DC7  0020               	movlb	0	; select bank0
 12568  1DC8  00A0               	movwf	??_Flash_Memory_Read
 12569  1DC9  0820               	movf	??_Flash_Memory_Read,w
 12570  1DCA  00A3               	movwf	Flash_Memory_Read@ret
 12571                           
 12572                           ;MCU_B1.c: 821: return ret;
 12573  1DCB  0823               	movf	Flash_Memory_Read@ret,w
 12574  1DCC  0008               	return
 12575  1DCD                     __end_of_Flash_Memory_Read:	
 12576                           
 12577                           	psect	text74
 12578  1BD5                     __ptext74:	
 12579 ;; *************** function _DimmerLights_Main *****************
 12580 ;; Defined at:
 12581 ;;		line 407 in file "../src/Dimmer_B1.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;		None               void
 12588 ;; Registers used:
 12589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;Total ram usage:        0 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:   11
 12602 ;; This function calls:
 12603 ;;		_DimmerLights_Close
 12604 ;;		_setDimmerLights_Main
 12605 ;; This function is called by:
 12606 ;;		_main
 12607 ;; This function uses a non-reentrant model
 12608 ;;
 12609                           
 12610                           
 12611                           ;psect for function _DimmerLights_Main
 12612  1BD5                     _DimmerLights_Main:	
 12613                           
 12614                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 12615                           
 12616                           ;incstack = 0
 12617                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12618  1BD5  3001               	movlw	1
 12619  1BD6  318B  2348  319B   	fcall	_setDimmerLights_Main
 12620                           
 12621                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 12622  1BD9  3002               	movlw	2
 12623  1BDA  318B  2348  319B   	fcall	_setDimmerLights_Main
 12624                           
 12625                           ;Dimmer_B1.c: 418: setDimmerLights_Main(3);
 12626  1BDD  3003               	movlw	3
 12627  1BDE  318B  2348  319B   	fcall	_setDimmerLights_Main
 12628                           
 12629                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 12630  1BE1  319C  24CA         	fcall	_DimmerLights_Close
 12631  1BE3  0008               	return
 12632  1BE4                     __end_of_DimmerLights_Main:	
 12633                           
 12634                           	psect	text75
 12635  0B48                     __ptext75:	
 12636 ;; *************** function _setDimmerLights_Main *****************
 12637 ;; Defined at:
 12638 ;;		line 425 in file "../src/Dimmer_B1.c"
 12639 ;; Parameters:    Size  Location     Type
 12640 ;;  lights          1    wreg     unsigned char 
 12641 ;; Auto vars:     Size  Location     Type
 12642 ;;  lights          1   74[BANK0 ] unsigned char 
 12643 ;;  clear           1   73[BANK0 ] unsigned char 
 12644 ;; Return value:  Size  Location     Type
 12645 ;;		None               void
 12646 ;; Registers used:
 12647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12648 ;; Tracked objects:
 12649 ;;		On entry : 0/0
 12650 ;;		On exit  : 0/0
 12651 ;;		Unchanged: 0/0
 12652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12656 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;Total ram usage:        6 bytes
 12658 ;; Hardware stack levels used:    1
 12659 ;; Hardware stack levels required when called:   10
 12660 ;; This function calls:
 12661 ;;		_DimmerLightsPointSelect
 12662 ;;		_setBuz
 12663 ;;		_setDimmerLights
 12664 ;;		_setDimmerLights_Adj
 12665 ;; This function is called by:
 12666 ;;		_DimmerLights_Main
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           
 12671                           ;psect for function _setDimmerLights_Main
 12672  0B48                     _setDimmerLights_Main:	
 12673                           
 12674                           ;incstack = 0
 12675                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12676                           ;setDimmerLights_Main@lights stored from wreg
 12677  0B48  0020               	movlb	0	; select bank0
 12678  0B49  00EA               	movwf	setDimmerLights_Main@lights
 12679                           
 12680                           ;Dimmer_B1.c: 426: char clear = 1;
 12681  0B4A  01E9               	clrf	setDimmerLights_Main@clear
 12682  0B4B  0AE9               	incf	setDimmerLights_Main@clear,f
 12683                           
 12684                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 12685  0B4C  086A               	movf	setDimmerLights_Main@lights,w
 12686  0B4D  319D  25CD  318B   	fcall	_DimmerLightsPointSelect
 12687                           
 12688                           ;Dimmer_B1.c: 430: if (lights == 1) {
 12689  0B50  0020               	movlb	0	; select bank0
 12690  0B51  086A               	movf	setDimmerLights_Main@lights,w
 12691  0B52  3A01               	xorlw	1
 12692  0B53  1D03               	skipz
 12693  0B54  2B60               	goto	l6987
 12694                           
 12695                           ;Dimmer_B1.c: 431: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 12696  0B55  01E6               	clrf	_setDimmerLights_Main$2060
 12697  0B56  0022               	movlb	2	; select bank2
 12698  0B57  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 12699  0B58  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 12700  0B59  2B5D               	goto	l6985
 12701  0B5A  0020               	movlb	0	; select bank0
 12702  0B5B  01E6               	clrf	_setDimmerLights_Main$2060
 12703  0B5C  0AE6               	incf	_setDimmerLights_Main$2060,f
 12704  0B5D                     l6985:	
 12705  0B5D  0020               	movlb	0	; select bank0
 12706  0B5E  0866               	movf	_setDimmerLights_Main$2060,w
 12707  0B5F  2B7D               	goto	L9
 12708  0B60                     l6987:	
 12709                           ;Dimmer_B1.c: 432: } else if (lights == 2) {
 12710                           
 12711  0B60  086A               	movf	setDimmerLights_Main@lights,w
 12712  0B61  3A02               	xorlw	2
 12713  0B62  1D03               	skipz
 12714  0B63  2B6F               	goto	l6999
 12715                           
 12716                           ;Dimmer_B1.c: 433: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 12717  0B64  01E7               	clrf	_setDimmerLights_Main$2061
 12718  0B65  0022               	movlb	2	; select bank2
 12719  0B66  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 12720  0B67  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 12721  0B68  2B6C               	goto	l6997
 12722  0B69  0020               	movlb	0	; select bank0
 12723  0B6A  01E7               	clrf	_setDimmerLights_Main$2061
 12724  0B6B  0AE7               	incf	_setDimmerLights_Main$2061,f
 12725  0B6C                     l6997:	
 12726  0B6C  0020               	movlb	0	; select bank0
 12727  0B6D  0867               	movf	_setDimmerLights_Main$2061,w
 12728  0B6E  2B7D               	goto	L9
 12729  0B6F                     l6999:	
 12730                           ;Dimmer_B1.c: 434: } else if (lights == 3) {
 12731                           
 12732  0B6F  086A               	movf	setDimmerLights_Main@lights,w
 12733  0B70  3A03               	xorlw	3
 12734  0B71  1D03               	skipz
 12735  0B72  2B80               	goto	l7011
 12736                           
 12737                           ;Dimmer_B1.c: 435: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 12738  0B73  01E8               	clrf	_setDimmerLights_Main$2062
 12739  0B74  0022               	movlb	2	; select bank2
 12740  0B75  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 12741  0B76  1D38               	btfss	(_DimmerLights2^(0+256)+9),2
 12742  0B77  2B7B               	goto	l7009
 12743  0B78  0020               	movlb	0	; select bank0
 12744  0B79  01E8               	clrf	_setDimmerLights_Main$2062
 12745  0B7A  0AE8               	incf	_setDimmerLights_Main$2062,f
 12746  0B7B                     l7009:	
 12747  0B7B  0020               	movlb	0	; select bank0
 12748  0B7C  0868               	movf	_setDimmerLights_Main$2062,w
 12749  0B7D                     L9:	
 12750  0B7D  00E5               	movwf	??_setDimmerLights_Main
 12751  0B7E  0865               	movf	??_setDimmerLights_Main,w
 12752  0B7F  00E9               	movwf	setDimmerLights_Main@clear
 12753  0B80                     l7011:	
 12754                           
 12755                           ;Dimmer_B1.c: 436: }
 12756                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 12757  0B80  0878               	movf	_DimmerLights,w
 12758  0B81  3E08               	addlw	8
 12759  0B82  0086               	movwf	6
 12760  0B83  3001               	movlw	1	; select bank2/3
 12761  0B84  0087               	movwf	7
 12762  0B85  1D01               	btfss	1,2
 12763  0B86  2BA4               	goto	l7021
 12764                           
 12765                           ;Dimmer_B1.c: 448: if (clear == 1) {
 12766  0B87  0869               	movf	setDimmerLights_Main@clear,w
 12767  0B88  3A01               	xorlw	1
 12768  0B89  1D03               	skipz
 12769  0B8A  0008               	return
 12770                           
 12771                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 12772  0B8B  0878               	movf	_DimmerLights,w
 12773  0B8C  3E08               	addlw	8
 12774  0B8D  0086               	movwf	6
 12775  0B8E  3001               	movlw	1	; select bank2/3
 12776  0B8F  0087               	movwf	7
 12777  0B90  1101               	bcf	1,2
 12778                           
 12779                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 12780  0B91  0878               	movf	_DimmerLights,w
 12781  0B92  3E08               	addlw	8
 12782  0B93  0086               	movwf	6
 12783  0B94  3001               	movlw	1	; select bank2/3
 12784  0B95  0087               	movwf	7
 12785  0B96  1C81               	btfss	1,1
 12786  0B97  2B9E               	goto	l7019
 12787                           
 12788                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 12789  0B98  01A4               	clrf	setDimmerLights@status
 12790  0B99  0AA4               	incf	setDimmerLights@status,f
 12791  0B9A  086A               	movf	setDimmerLights_Main@lights,w
 12792  0B9B  3189  21BA         	fcall	_setDimmerLights
 12793                           
 12794                           ;Dimmer_B1.c: 452: } else {
 12795  0B9D  0008               	return
 12796  0B9E                     l7019:	
 12797                           
 12798                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 12799  0B9E  0020               	movlb	0	; select bank0
 12800  0B9F  01A4               	clrf	setDimmerLights@status
 12801  0BA0  086A               	movf	setDimmerLights_Main@lights,w
 12802  0BA1  3189  21BA         	fcall	_setDimmerLights
 12803                           
 12804                           ;Dimmer_B1.c: 454: }
 12805                           ;Dimmer_B1.c: 458: }
 12806                           ;Dimmer_B1.c: 459: } else {
 12807  0BA3  0008               	return
 12808  0BA4                     l7021:	
 12809                           
 12810                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12811  0BA4  0878               	movf	_DimmerLights,w
 12812  0BA5  3E08               	addlw	8
 12813  0BA6  0086               	movwf	6
 12814  0BA7  3001               	movlw	1	; select bank2/3
 12815  0BA8  0087               	movwf	7
 12816  0BA9  1E01               	btfss	1,4
 12817  0BAA  0008               	return
 12818                           
 12819                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12820  0BAB  0020               	movlb	0	; select bank0
 12821  0BAC  0869               	movf	setDimmerLights_Main@clear,w
 12822  0BAD  3A01               	xorlw	1
 12823  0BAE  1D03               	skipz
 12824  0BAF  0008               	return
 12825                           
 12826                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12827  0BB0  0878               	movf	_DimmerLights,w
 12828  0BB1  3E08               	addlw	8
 12829  0BB2  0086               	movwf	6
 12830  0BB3  3001               	movlw	1	; select bank2/3
 12831  0BB4  0087               	movwf	7
 12832  0BB5  1201               	bcf	1,4
 12833                           
 12834                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12835  0BB6  0878               	movf	_DimmerLights,w
 12836  0BB7  3E08               	addlw	8
 12837  0BB8  0086               	movwf	6
 12838  0BB9  3001               	movlw	1	; select bank2/3
 12839  0BBA  0087               	movwf	7
 12840  0BBB  1D81               	btfss	1,3
 12841  0BBC  2BCC               	goto	l7029
 12842                           
 12843                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12844  0BBD  01E2               	clrf	setDimmerLights_Adj@status
 12845  0BBE  0AE2               	incf	setDimmerLights_Adj@status,f
 12846  0BBF  086A               	movf	setDimmerLights_Main@lights,w
 12847  0BC0  3191  21AF  318B   	fcall	_setDimmerLights_Adj
 12848                           
 12849                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12850  0BC3  3064               	movlw	100
 12851  0BC4  0020               	movlb	0	; select bank0
 12852  0BC5  00A9               	movwf	setBuz@time
 12853  0BC6  3000               	movlw	0
 12854  0BC7  00AA               	movwf	setBuz@time+1
 12855  0BC8  3001               	movlw	1
 12856  0BC9  318B  23D2         	fcall	_setBuz
 12857                           
 12858                           ;Dimmer_B1.c: 466: } else {
 12859  0BCB  0008               	return
 12860  0BCC                     l7029:	
 12861                           
 12862                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12863  0BCC  0020               	movlb	0	; select bank0
 12864  0BCD  01E2               	clrf	setDimmerLights_Adj@status
 12865  0BCE  086A               	movf	setDimmerLights_Main@lights,w
 12866  0BCF  3191  21AF         	fcall	_setDimmerLights_Adj
 12867  0BD1  0008               	return
 12868  0BD2                     __end_of_setDimmerLights_Main:	
 12869                           
 12870                           	psect	text76
 12871  11AF                     __ptext76:	
 12872 ;; *************** function _setDimmerLights_Adj *****************
 12873 ;; Defined at:
 12874 ;;		line 646 in file "../src/Dimmer_B1.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  lights          1    wreg     unsigned char 
 12877 ;;  status          1   66[BANK0 ] unsigned char 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  lights          1   68[BANK0 ] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;		None               void
 12882 ;; Registers used:
 12883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:        3 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    9
 12896 ;; This function calls:
 12897 ;;		_DimmerLightsPointSelect
 12898 ;;		_setRF_DimmerLights
 12899 ;;		_setTxData
 12900 ;; This function is called by:
 12901 ;;		_setDimmerLights_Main
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           
 12906                           ;psect for function _setDimmerLights_Adj
 12907  11AF                     _setDimmerLights_Adj:	
 12908                           
 12909                           ;incstack = 0
 12910                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12911                           ;setDimmerLights_Adj@lights stored from wreg
 12912  11AF  0020               	movlb	0	; select bank0
 12913  11B0  00E4               	movwf	setDimmerLights_Adj@lights
 12914                           
 12915                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12916  11B1  0864               	movf	setDimmerLights_Adj@lights,w
 12917  11B2  319D  25CD  3191   	fcall	_DimmerLightsPointSelect
 12918                           
 12919                           ;Dimmer_B1.c: 648: if (status == 1) {
 12920  11B5  0020               	movlb	0	; select bank0
 12921  11B6  0862               	movf	setDimmerLights_Adj@status,w
 12922  11B7  3A01               	xorlw	1
 12923  11B8  1D03               	skipz
 12924  11B9  29C5               	goto	l6501
 12925                           
 12926                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12927  11BA  0878               	movf	_DimmerLights,w
 12928  11BB  0086               	movwf	6
 12929  11BC  3001               	movlw	1	; select bank2/3
 12930  11BD  0087               	movwf	7
 12931  11BE  1581               	bsf	1,3
 12932                           
 12933                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12934  11BF  0878               	movf	_DimmerLights,w
 12935  11C0  0086               	movwf	6
 12936  11C1  3001               	movlw	1	; select bank2/3
 12937  11C2  0087               	movwf	7
 12938  11C3  1481               	bsf	1,1
 12939                           
 12940                           ;Dimmer_B1.c: 651: } else {
 12941  11C4  0008               	return
 12942  11C5                     l6501:	
 12943                           
 12944                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12945  11C5  0878               	movf	_DimmerLights,w
 12946  11C6  0086               	movwf	6
 12947  11C7  3001               	movlw	1	; select bank2/3
 12948  11C8  0087               	movwf	7
 12949  11C9  1D81               	btfss	1,3
 12950  11CA  0008               	return
 12951                           
 12952                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12953  11CB  0878               	movf	_DimmerLights,w
 12954  11CC  0086               	movwf	6
 12955  11CD  3001               	movlw	1	; select bank2/3
 12956  11CE  0087               	movwf	7
 12957  11CF  1081               	bcf	1,1
 12958                           
 12959                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12960  11D0  0878               	movf	_DimmerLights,w
 12961  11D1  0086               	movwf	6
 12962  11D2  3001               	movlw	1	; select bank2/3
 12963  11D3  0087               	movwf	7
 12964  11D4  1181               	bcf	1,3
 12965                           
 12966                           ;Dimmer_B1.c: 656: ;;
 12967                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12968  11D5  0878               	movf	_DimmerLights,w
 12969  11D6  3E04               	addlw	4
 12970  11D7  0086               	movwf	6
 12971  11D8  3001               	movlw	1	; select bank2/3
 12972  11D9  0087               	movwf	7
 12973  11DA  0801               	movf	1,w
 12974  11DB  00E3               	movwf	??_setDimmerLights_Adj
 12975  11DC  0878               	movf	_DimmerLights,w
 12976  11DD  3E05               	addlw	5
 12977  11DE  0086               	movwf	6
 12978  11DF  3001               	movlw	1	; select bank2/3
 12979  11E0  0087               	movwf	7
 12980  11E1  0863               	movf	??_setDimmerLights_Adj,w
 12981  11E2  0081               	movwf	1
 12982                           
 12983                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12984  11E3  01DD               	clrf	setRF_DimmerLights@on
 12985  11E4  0ADD               	incf	setRF_DimmerLights@on,f
 12986  11E5  0864               	movf	setDimmerLights_Adj@lights,w
 12987  11E6  3196  26B8  3191   	fcall	_setRF_DimmerLights
 12988                           
 12989                           ;Dimmer_B1.c: 666: setTxData(1);
 12990  11E9  3001               	movlw	1
 12991  11EA  3187  275B         	fcall	_setTxData
 12992  11EC  0008               	return
 12993  11ED                     __end_of_setDimmerLights_Adj:	
 12994                           
 12995                           	psect	text77
 12996  075B                     __ptext77:	
 12997 ;; *************** function _setTxData *****************
 12998 ;; Defined at:
 12999 ;;		line 161 in file "../src/RF_Control_B1.c"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;  rf              1    wreg     unsigned char 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  rf              1    3[BANK0 ] unsigned char 
 13004 ;;  i               1    0        unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        2 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    6
 13021 ;; This function calls:
 13022 ;;		_RfPointSelect
 13023 ;; This function is called by:
 13024 ;;		_setDimmerLights_Adj
 13025 ;;		_setControl_Lights_Table
 13026 ;;		_setRFSW_Control
 13027 ;;		_setRFSW_AdjControl
 13028 ;;		_Sw_DimmerOnFunc
 13029 ;;		_Sw_DimmerOffFunc
 13030 ;; This function uses a non-reentrant model
 13031 ;;
 13032                           
 13033                           
 13034                           ;psect for function _setTxData
 13035  075B                     _setTxData:	
 13036                           
 13037                           ;incstack = 0
 13038                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13039                           ;setTxData@rf stored from wreg
 13040  075B  0020               	movlb	0	; select bank0
 13041  075C  00A3               	movwf	setTxData@rf
 13042                           
 13043                           ;RF_Control_B1.c: 162: char i;
 13044                           ;RF_Control_B1.c: 163: RfPointSelect(rf);
 13045  075D  0823               	movf	setTxData@rf,w
 13046  075E  319B  23AA  3187   	fcall	_RfPointSelect
 13047                           
 13048                           ;RF_Control_B1.c: 164: if (RF->Enable == 1) {
 13049  0761  087A               	movf	_RF,w
 13050  0762  0086               	movwf	6
 13051  0763  0187               	clrf	7
 13052  0764  1C01               	btfss	1,0
 13053  0765  0008               	return
 13054                           
 13055                           ;RF_Control_B1.c: 166: RF->TransceiveGO = 1;
 13056  0766  087A               	movf	_RF,w
 13057  0767  0086               	movwf	6
 13058  0768  0187               	clrf	7
 13059  0769  1501               	bsf	1,2
 13060                           
 13061                           ;RF_Control_B1.c: 176: RF_Data[0] = 0x63;
 13062  076A  3063               	movlw	99
 13063  076B  0020               	movlb	0	; select bank0
 13064  076C  00A2               	movwf	??_setTxData
 13065  076D  0822               	movf	??_setTxData,w
 13066  076E  0021               	movlb	1	; select bank1
 13067  076F  00A0               	movwf	_RF_Data^(0+128)
 13068                           
 13069                           ;RF_Control_B1.c: 177: RF_Data[1] = 0x02;
 13070  0770  3002               	movlw	2
 13071  0771  0020               	movlb	0	; select bank0
 13072  0772  00A2               	movwf	??_setTxData
 13073  0773  0822               	movf	??_setTxData,w
 13074  0774  0021               	movlb	1	; select bank1
 13075  0775  00A1               	movwf	(_RF_Data^(0+128)+1)
 13076                           
 13077                           ;RF_Control_B1.c: 178: RF_Data[2] = product->Data[2];
 13078  0776  087D               	movf	_product,w
 13079  0777  0086               	movwf	6
 13080  0778  3002               	movlw	2	; select bank4/5
 13081  0779  0087               	movwf	7
 13082  077A  3002               	movlw	2	; select bank4/5
 13083  077B  3F42               	moviw [2]fsr1
 13084  077C  00A2               	movwf	(_RF_Data^(0+128)+2)
 13085                           
 13086                           ;RF_Control_B1.c: 179: RF_Data[3] = product->Data[3];
 13087  077D  087D               	movf	_product,w
 13088  077E  0086               	movwf	6
 13089  077F  3002               	movlw	2	; select bank4/5
 13090  0780  0087               	movwf	7
 13091  0781  3002               	movlw	2	; select bank4/5
 13092  0782  3F43               	moviw [3]fsr1
 13093  0783  00A3               	movwf	(_RF_Data^(0+128)+3)
 13094                           
 13095                           ;RF_Control_B1.c: 180: RF_Data[4] = product->Data[4];
 13096  0784  087D               	movf	_product,w
 13097  0785  0086               	movwf	6
 13098  0786  3002               	movlw	2	; select bank4/5
 13099  0787  0087               	movwf	7
 13100  0788  3002               	movlw	2	; select bank4/5
 13101  0789  3F44               	moviw [4]fsr1
 13102  078A  00A4               	movwf	(_RF_Data^(0+128)+4)
 13103                           
 13104                           ;RF_Control_B1.c: 181: RF_Data[5] = product->Data[5];
 13105  078B  087D               	movf	_product,w
 13106  078C  0086               	movwf	6
 13107  078D  3002               	movlw	2	; select bank4/5
 13108  078E  0087               	movwf	7
 13109  078F  3002               	movlw	2	; select bank4/5
 13110  0790  3F45               	moviw [5]fsr1
 13111  0791  00A5               	movwf	(_RF_Data^(0+128)+5)
 13112                           
 13113                           ;RF_Control_B1.c: 182: RF_Data[6] = product->Data[6];
 13114  0792  087D               	movf	_product,w
 13115  0793  0086               	movwf	6
 13116  0794  3002               	movlw	2	; select bank4/5
 13117  0795  0087               	movwf	7
 13118  0796  3002               	movlw	2	; select bank4/5
 13119  0797  3F46               	moviw [6]fsr1
 13120  0798  00A6               	movwf	(_RF_Data^(0+128)+6)
 13121                           
 13122                           ;RF_Control_B1.c: 183: RF_Data[7] = product->Data[7];
 13123  0799  087D               	movf	_product,w
 13124  079A  0086               	movwf	6
 13125  079B  3002               	movlw	2	; select bank4/5
 13126  079C  0087               	movwf	7
 13127  079D  3002               	movlw	2	; select bank4/5
 13128  079E  3F47               	moviw [7]fsr1
 13129  079F  00A7               	movwf	(_RF_Data^(0+128)+7)
 13130                           
 13131                           ;RF_Control_B1.c: 184: RF_Data[8] = product->Data[8];
 13132  07A0  087D               	movf	_product,w
 13133  07A1  0086               	movwf	6
 13134  07A2  3002               	movlw	2	; select bank4/5
 13135  07A3  0087               	movwf	7
 13136  07A4  3002               	movlw	2	; select bank4/5
 13137  07A5  3F48               	moviw [8]fsr1
 13138  07A6  00A8               	movwf	(_RF_Data^(0+128)+8)
 13139                           
 13140                           ;RF_Control_B1.c: 185: RF_Data[9] = product->Data[9];
 13141  07A7  087D               	movf	_product,w
 13142  07A8  0086               	movwf	6
 13143  07A9  3002               	movlw	2	; select bank4/5
 13144  07AA  0087               	movwf	7
 13145  07AB  3002               	movlw	2	; select bank4/5
 13146  07AC  3F49               	moviw [9]fsr1
 13147  07AD  00A9               	movwf	(_RF_Data^(0+128)+9)
 13148                           
 13149                           ;RF_Control_B1.c: 186: RF_Data[10] = product->Data[10];
 13150  07AE  087D               	movf	_product,w
 13151  07AF  0086               	movwf	6
 13152  07B0  3002               	movlw	2	; select bank4/5
 13153  07B1  0087               	movwf	7
 13154  07B2  3002               	movlw	2	; select bank4/5
 13155  07B3  3F4A               	moviw [10]fsr1
 13156  07B4  00AA               	movwf	(_RF_Data^(0+128)+10)
 13157                           
 13158                           ;RF_Control_B1.c: 187: RF_Data[11] = product->Data[11];
 13159  07B5  087D               	movf	_product,w
 13160  07B6  0086               	movwf	6
 13161  07B7  3002               	movlw	2	; select bank4/5
 13162  07B8  0087               	movwf	7
 13163  07B9  3002               	movlw	2	; select bank4/5
 13164  07BA  3F4B               	moviw [11]fsr1
 13165  07BB  00AB               	movwf	(_RF_Data^(0+128)+11)
 13166                           
 13167                           ;RF_Control_B1.c: 188: RF_Data[12] = product->Data[12];
 13168  07BC  087D               	movf	_product,w
 13169  07BD  0086               	movwf	6
 13170  07BE  3002               	movlw	2	; select bank4/5
 13171  07BF  0087               	movwf	7
 13172  07C0  3002               	movlw	2	; select bank4/5
 13173  07C1  3F4C               	moviw [12]fsr1
 13174  07C2  00AC               	movwf	(_RF_Data^(0+128)+12)
 13175                           
 13176                           ;RF_Control_B1.c: 189: RF_Data[13] = product->Data[13];
 13177  07C3  087D               	movf	_product,w
 13178  07C4  0086               	movwf	6
 13179  07C5  3002               	movlw	2	; select bank4/5
 13180  07C6  0087               	movwf	7
 13181  07C7  3002               	movlw	2	; select bank4/5
 13182  07C8  3F4D               	moviw [13]fsr1
 13183  07C9  00AD               	movwf	(_RF_Data^(0+128)+13)
 13184                           
 13185                           ;RF_Control_B1.c: 190: RF_Data[14] = product->Data[14];
 13186  07CA  087D               	movf	_product,w
 13187  07CB  0086               	movwf	6
 13188  07CC  3002               	movlw	2	; select bank4/5
 13189  07CD  0087               	movwf	7
 13190  07CE  3002               	movlw	2	; select bank4/5
 13191  07CF  3F4E               	moviw [14]fsr1
 13192  07D0  00AE               	movwf	(_RF_Data^(0+128)+14)
 13193                           
 13194                           ;RF_Control_B1.c: 191: RF_Data[15] = product->Data[15];
 13195  07D1  087D               	movf	_product,w
 13196  07D2  0086               	movwf	6
 13197  07D3  3002               	movlw	2	; select bank4/5
 13198  07D4  0087               	movwf	7
 13199  07D5  3002               	movlw	2	; select bank4/5
 13200  07D6  3F4F               	moviw [15]fsr1
 13201  07D7  00AF               	movwf	(_RF_Data^(0+128)+15)
 13202                           
 13203                           ;RF_Control_B1.c: 192: RF_Data[16] = product->Data[16];
 13204  07D8  087D               	movf	_product,w
 13205  07D9  0086               	movwf	6
 13206  07DA  3002               	movlw	2	; select bank4/5
 13207  07DB  0087               	movwf	7
 13208  07DC  3002               	movlw	2	; select bank4/5
 13209  07DD  3F50               	moviw [16]fsr1
 13210  07DE  00B0               	movwf	(_RF_Data^(0+128)+16)
 13211                           
 13212                           ;RF_Control_B1.c: 193: RF_Data[17] = product->Data[17];
 13213  07DF  087D               	movf	_product,w
 13214  07E0  0086               	movwf	6
 13215  07E1  3002               	movlw	2	; select bank4/5
 13216  07E2  0087               	movwf	7
 13217  07E3  3002               	movlw	2	; select bank4/5
 13218  07E4  3F51               	moviw [17]fsr1
 13219  07E5  00B1               	movwf	(_RF_Data^(0+128)+17)
 13220                           
 13221                           ;RF_Control_B1.c: 194: RF_Data[18] = product->Data[18];
 13222  07E6  087D               	movf	_product,w
 13223  07E7  0086               	movwf	6
 13224  07E8  3002               	movlw	2	; select bank4/5
 13225  07E9  0087               	movwf	7
 13226  07EA  3002               	movlw	2	; select bank4/5
 13227  07EB  3F52               	moviw [18]fsr1
 13228  07EC  00B2               	movwf	(_RF_Data^(0+128)+18)
 13229                           
 13230                           ;RF_Control_B1.c: 195: RF_Data[19] = product->Data[19];
 13231  07ED  087D               	movf	_product,w
 13232  07EE  0086               	movwf	6
 13233  07EF  3002               	movlw	2	; select bank4/5
 13234  07F0  0087               	movwf	7
 13235  07F1  3002               	movlw	2	; select bank4/5
 13236  07F2  3F53               	moviw [19]fsr1
 13237  07F3  00B3               	movwf	(_RF_Data^(0+128)+19)
 13238                           
 13239                           ;RF_Control_B1.c: 196: RF_Data[20] = 211;
 13240  07F4  30D3               	movlw	211
 13241  07F5  0020               	movlb	0	; select bank0
 13242  07F6  00A2               	movwf	??_setTxData
 13243  07F7  0822               	movf	??_setTxData,w
 13244  07F8  0021               	movlb	1	; select bank1
 13245  07F9  00B4               	movwf	(_RF_Data^(0+128)+20)
 13246  07FA  0008               	return
 13247  07FB                     __end_of_setTxData:	
 13248                           
 13249                           	psect	text78
 13250  1BAA                     __ptext78:	
 13251 ;; *************** function _RfPointSelect *****************
 13252 ;; Defined at:
 13253 ;;		line 7 in file "../src/RF_Control_B1.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  rf              1    wreg     unsigned char 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  rf              1    1[BANK0 ] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;		None               void
 13260 ;; Registers used:
 13261 ;;		wreg
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        2 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_setRF_Learn
 13278 ;;		_setRF_Main
 13279 ;;		_setTxData
 13280 ;;		_setRF_Enable
 13281 ;;		_RF_RxDisable
 13282 ;;		_getRxData
 13283 ;;		_setLog_Code
 13284 ;;		_setControl_Lights_Table
 13285 ;;		_setRF_RxStatus
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           
 13290                           ;psect for function _RfPointSelect
 13291  1BAA                     _RfPointSelect:	
 13292                           
 13293                           ;incstack = 0
 13294                           ; Regs used in _RfPointSelect: [wreg]
 13295                           ;RfPointSelect@rf stored from wreg
 13296  1BAA  0020               	movlb	0	; select bank0
 13297  1BAB  00A1               	movwf	RfPointSelect@rf
 13298                           
 13299                           ;RF_Control_B1.c: 9: if (rf == 1) {
 13300  1BAC  0821               	movf	RfPointSelect@rf,w
 13301  1BAD  3A01               	xorlw	1
 13302  1BAE  1D03               	skipz
 13303  1BAF  2BB4               	goto	l5867
 13304                           
 13305                           ;RF_Control_B1.c: 10: RF = &RF1;
 13306  1BB0  30C8               	movlw	_RF1& (0+255)
 13307  1BB1  00A0               	movwf	??_RfPointSelect
 13308  1BB2  0820               	movf	??_RfPointSelect,w
 13309  1BB3  00FA               	movwf	_RF
 13310  1BB4                     l5867:	
 13311                           
 13312                           ;RF_Control_B1.c: 11: }
 13313                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 13314  1BB4  1A0B               	btfsc	11,4	;volatile
 13315  1BB5  0008               	return
 13316                           
 13317                           ;RF_Control_B1.c: 13: INTE = 1;
 13318  1BB6  160B               	bsf	11,4	;volatile
 13319  1BB7  0008               	return
 13320  1BB8                     __end_of_RfPointSelect:	
 13321                           
 13322                           	psect	text79
 13323  16B8                     __ptext79:	
 13324 ;; *************** function _setRF_DimmerLights *****************
 13325 ;; Defined at:
 13326 ;;		line 423 in file "../src/RF_Control_B1.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;  lights          1    wreg     unsigned char 
 13329 ;;  on              1   61[BANK0 ] unsigned char 
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  lights          1   65[BANK0 ] unsigned char 
 13332 ;;  status          1   64[BANK0 ] unsigned char 
 13333 ;; Return value:  Size  Location     Type
 13334 ;;		None               void
 13335 ;; Registers used:
 13336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13337 ;; Tracked objects:
 13338 ;;		On entry : 0/0
 13339 ;;		On exit  : 0/0
 13340 ;;		Unchanged: 0/0
 13341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13342 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13346 ;;Total ram usage:        5 bytes
 13347 ;; Hardware stack levels used:    1
 13348 ;; Hardware stack levels required when called:    8
 13349 ;; This function calls:
 13350 ;;		_setPercentValue
 13351 ;; This function is called by:
 13352 ;;		_setDimmerLights_Adj
 13353 ;;		_setRFSW_Control
 13354 ;;		_Sw_DimmerOnFunc
 13355 ;;		_Sw_DimmerOffFunc
 13356 ;; This function uses a non-reentrant model
 13357 ;;
 13358                           
 13359                           
 13360                           ;psect for function _setRF_DimmerLights
 13361  16B8                     _setRF_DimmerLights:	
 13362                           
 13363                           ;incstack = 0
 13364                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13365                           ;setRF_DimmerLights@lights stored from wreg
 13366  16B8  0020               	movlb	0	; select bank0
 13367  16B9  00E1               	movwf	setRF_DimmerLights@lights
 13368                           
 13369                           ;RF_Control_B1.c: 424: char status;
 13370                           ;RF_Control_B1.c: 425: status = 1;
 13371  16BA  01E0               	clrf	setRF_DimmerLights@status
 13372  16BB  0AE0               	incf	setRF_DimmerLights@status,f
 13373                           
 13374                           ;RF_Control_B1.c: 426: status <<= (lights - 1);
 13375  16BC  0861               	movf	setRF_DimmerLights@lights,w
 13376  16BD  3EFF               	addlw	-1
 13377  16BE  0A89               	incf	9,f
 13378  16BF  2EC2               	goto	u4840
 13379  16C0                     u4845:	
 13380  16C0  1003               	clrc
 13381  16C1  0DE0               	rlf	setRF_DimmerLights@status,f
 13382  16C2                     u4840:	
 13383  16C2  3EFF               	addlw	-1
 13384  16C3  1D03               	skipz
 13385  16C4  2EC0               	goto	u4845
 13386                           
 13387                           ;RF_Control_B1.c: 427: product->Data[11]=lights;
 13388  16C5  0861               	movf	setRF_DimmerLights@lights,w
 13389  16C6  00DE               	movwf	??_setRF_DimmerLights
 13390  16C7  087D               	movf	_product,w
 13391  16C8  3E0B               	addlw	11
 13392  16C9  0086               	movwf	6
 13393  16CA  3002               	movlw	2	; select bank4/5
 13394  16CB  0087               	movwf	7
 13395  16CC  085E               	movf	??_setRF_DimmerLights,w
 13396  16CD  0081               	movwf	1
 13397                           
 13398                           ;RF_Control_B1.c: 430: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 13399  16CE  3004               	movlw	4
 13400  16CF  3192  22B6  3196   	fcall	_setPercentValue
 13401  16D2  0020               	movlb	0	; select bank0
 13402  16D3  00DE               	movwf	??_setRF_DimmerLights
 13403  16D4  0861               	movf	setRF_DimmerLights@lights,w
 13404  16D5  3E14               	addlw	20
 13405  16D6  077D               	addwf	_product,w
 13406  16D7  00DF               	movwf	??_setRF_DimmerLights+1
 13407  16D8  085F               	movf	??_setRF_DimmerLights+1,w
 13408  16D9  0086               	movwf	6
 13409  16DA  3002               	movlw	2	; select bank4/5
 13410  16DB  0087               	movwf	7
 13411  16DC  085E               	movf	??_setRF_DimmerLights,w
 13412  16DD  0081               	movwf	1
 13413                           
 13414                           ;RF_Control_B1.c: 433: product->Data[9]=product->Data[20 + lights];
 13415  16DE  0861               	movf	setRF_DimmerLights@lights,w
 13416  16DF  3E14               	addlw	20
 13417  16E0  077D               	addwf	_product,w
 13418  16E1  00DE               	movwf	??_setRF_DimmerLights
 13419  16E2  085E               	movf	??_setRF_DimmerLights,w
 13420  16E3  0086               	movwf	6
 13421  16E4  3002               	movlw	2	; select bank4/5
 13422  16E5  0087               	movwf	7
 13423  16E6  0801               	movf	1,w
 13424  16E7  00DF               	movwf	??_setRF_DimmerLights+1
 13425  16E8  087D               	movf	_product,w
 13426  16E9  3E09               	addlw	9
 13427  16EA  0086               	movwf	6
 13428  16EB  3002               	movlw	2	; select bank4/5
 13429  16EC  0087               	movwf	7
 13430  16ED  085F               	movf	??_setRF_DimmerLights+1,w
 13431  16EE  0081               	movwf	1
 13432                           
 13433                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + lights];
 13434  16EF  0861               	movf	setRF_DimmerLights@lights,w
 13435  16F0  3E1A               	addlw	26
 13436  16F1  077D               	addwf	_product,w
 13437  16F2  00DE               	movwf	??_setRF_DimmerLights
 13438  16F3  085E               	movf	??_setRF_DimmerLights,w
 13439  16F4  0086               	movwf	6
 13440  16F5  3002               	movlw	2	; select bank4/5
 13441  16F6  0087               	movwf	7
 13442  16F7  0801               	movf	1,w
 13443  16F8  00DF               	movwf	??_setRF_DimmerLights+1
 13444  16F9  087D               	movf	_product,w
 13445  16FA  3E11               	addlw	17
 13446  16FB  0086               	movwf	6
 13447  16FC  3002               	movlw	2	; select bank4/5
 13448  16FD  0087               	movwf	7
 13449  16FE  085F               	movf	??_setRF_DimmerLights+1,w
 13450  16FF  0081               	movwf	1
 13451                           
 13452                           ;RF_Control_B1.c: 435: if (on == 1) {
 13453  1700  085D               	movf	setRF_DimmerLights@on,w
 13454  1701  3A01               	xorlw	1
 13455  1702  1D03               	skipz
 13456  1703  2F14               	goto	l6047
 13457                           
 13458                           ;RF_Control_B1.c: 436: product->Data[15]=(product->Data[15] | status);
 13459  1704  087D               	movf	_product,w
 13460  1705  3E0F               	addlw	15
 13461  1706  0086               	movwf	6
 13462  1707  3002               	movlw	2	; select bank4/5
 13463  1708  0087               	movwf	7
 13464  1709  0801               	movf	1,w
 13465  170A  0460               	iorwf	setRF_DimmerLights@status,w
 13466  170B  00DE               	movwf	??_setRF_DimmerLights
 13467  170C  087D               	movf	_product,w
 13468  170D  3E0F               	addlw	15
 13469  170E  0086               	movwf	6
 13470  170F  3002               	movlw	2	; select bank4/5
 13471  1710  0087               	movwf	7
 13472  1711  085E               	movf	??_setRF_DimmerLights,w
 13473  1712  0081               	movwf	1
 13474                           
 13475                           ;RF_Control_B1.c: 437: } else {
 13476  1713  0008               	return
 13477  1714                     l6047:	
 13478                           
 13479                           ;RF_Control_B1.c: 438: product->Data[15]=(product->Data[15]&(~status));
 13480  1714  087D               	movf	_product,w
 13481  1715  3E0F               	addlw	15
 13482  1716  0086               	movwf	6
 13483  1717  3002               	movlw	2	; select bank4/5
 13484  1718  0087               	movwf	7
 13485  1719  0960               	comf	setRF_DimmerLights@status,w
 13486  171A  0501               	andwf	1,w
 13487  171B  00DE               	movwf	??_setRF_DimmerLights
 13488  171C  087D               	movf	_product,w
 13489  171D  3E0F               	addlw	15
 13490  171E  0086               	movwf	6
 13491  171F  3002               	movlw	2	; select bank4/5
 13492  1720  0087               	movwf	7
 13493  1721  085E               	movf	??_setRF_DimmerLights,w
 13494  1722  0081               	movwf	1
 13495  1723  0008               	return
 13496  1724                     __end_of_setRF_DimmerLights:	
 13497                           
 13498                           	psect	text80
 13499  12B6                     __ptext80:	
 13500 ;; *************** function _setPercentValue *****************
 13501 ;; Defined at:
 13502 ;;		line 768 in file "../src/Dimmer_B1.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  value           1    wreg     unsigned char 
 13505 ;; Auto vars:     Size  Location     Type
 13506 ;;  value           1   57[BANK0 ] unsigned char 
 13507 ;;  i               3   58[BANK0 ] float 
 13508 ;; Return value:  Size  Location     Type
 13509 ;;                  1    wreg      unsigned char 
 13510 ;; Registers used:
 13511 ;;		wreg, status,2, status,0, pclath, cstack
 13512 ;; Tracked objects:
 13513 ;;		On entry : 0/0
 13514 ;;		On exit  : 0/0
 13515 ;;		Unchanged: 0/0
 13516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;Total ram usage:        4 bytes
 13522 ;; Hardware stack levels used:    1
 13523 ;; Hardware stack levels required when called:    7
 13524 ;; This function calls:
 13525 ;;		___awtoft
 13526 ;;		___ftdiv
 13527 ;;		___fttol
 13528 ;; This function is called by:
 13529 ;;		_Flash_Memory_Initialization
 13530 ;;		_setRF_DimmerLights
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _setPercentValue
 13536  12B6                     _setPercentValue:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13540                           ;setPercentValue@value stored from wreg
 13541  12B6  0020               	movlb	0	; select bank0
 13542  12B7  00D9               	movwf	setPercentValue@value
 13543                           
 13544                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 13545  12B8  3000               	movlw	0
 13546  12B9  00DA               	movwf	setPercentValue@i
 13547  12BA  3060               	movlw	96
 13548  12BB  00DB               	movwf	setPercentValue@i+1
 13549  12BC  3042               	movlw	66
 13550  12BD  00DC               	movwf	setPercentValue@i+2
 13551                           
 13552                           ;Dimmer_B1.c: 771: i /= 100;
 13553  12BE  3000               	movlw	0
 13554  12BF  00AE               	movwf	___ftdiv@f2
 13555  12C0  30C8               	movlw	200
 13556  12C1  00AF               	movwf	___ftdiv@f2+1
 13557  12C2  3042               	movlw	66
 13558  12C3  00B0               	movwf	___ftdiv@f2+2
 13559  12C4  085A               	movf	setPercentValue@i,w
 13560  12C5  00B1               	movwf	___ftdiv@f1
 13561  12C6  085B               	movf	setPercentValue@i+1,w
 13562  12C7  00B2               	movwf	___ftdiv@f1+1
 13563  12C8  085C               	movf	setPercentValue@i+2,w
 13564  12C9  00B3               	movwf	___ftdiv@f1+2
 13565  12CA  318C  2468  3192   	fcall	___ftdiv
 13566  12CD  0020               	movlb	0	; select bank0
 13567  12CE  082E               	movf	?___ftdiv,w
 13568  12CF  00DA               	movwf	setPercentValue@i
 13569  12D0  082F               	movf	?___ftdiv+1,w
 13570  12D1  00DB               	movwf	setPercentValue@i+1
 13571  12D2  0830               	movf	?___ftdiv+2,w
 13572  12D3  00DC               	movwf	setPercentValue@i+2
 13573                           
 13574                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 13575  12D4  0859               	movf	setPercentValue@value,w
 13576  12D5  3EFC               	addlw	252
 13577  12D6  00A8               	movwf	___awtoft@c
 13578  12D7  30FF               	movlw	255
 13579  12D8  1803               	skipnc
 13580  12D9  3000               	movlw	0
 13581  12DA  00A9               	movwf	___awtoft@c+1
 13582  12DB  319F  276F  3192   	fcall	___awtoft
 13583  12DE  0020               	movlb	0	; select bank0
 13584  12DF  0828               	movf	?___awtoft,w
 13585  12E0  00B1               	movwf	___ftdiv@f1
 13586  12E1  0829               	movf	?___awtoft+1,w
 13587  12E2  00B2               	movwf	___ftdiv@f1+1
 13588  12E3  082A               	movf	?___awtoft+2,w
 13589  12E4  00B3               	movwf	___ftdiv@f1+2
 13590  12E5  085A               	movf	setPercentValue@i,w
 13591  12E6  00AE               	movwf	___ftdiv@f2
 13592  12E7  085B               	movf	setPercentValue@i+1,w
 13593  12E8  00AF               	movwf	___ftdiv@f2+1
 13594  12E9  085C               	movf	setPercentValue@i+2,w
 13595  12EA  00B0               	movwf	___ftdiv@f2+2
 13596  12EB  318C  2468  3192   	fcall	___ftdiv
 13597  12EE  0020               	movlb	0	; select bank0
 13598  12EF  082E               	movf	?___ftdiv,w
 13599  12F0  00CB               	movwf	___fttol@f1
 13600  12F1  082F               	movf	?___ftdiv+1,w
 13601  12F2  00CC               	movwf	___fttol@f1+1
 13602  12F3  0830               	movf	?___ftdiv+2,w
 13603  12F4  00CD               	movwf	___fttol@f1+2
 13604  12F5  318A  223A         	fcall	___fttol
 13605  12F7  0020               	movlb	0	; select bank0
 13606  12F8  034B               	decf	?___fttol,w
 13607  12F9  3AFF               	xorlw	255
 13608  12FA  3E64               	addlw	100
 13609  12FB  0008               	return
 13610  12FC                     __end_of_setPercentValue:	
 13611                           
 13612                           	psect	text81
 13613  0A3A                     __ptext81:	
 13614 ;; *************** function ___fttol *****************
 13615 ;; Defined at:
 13616 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13617 ;; Parameters:    Size  Location     Type
 13618 ;;  f1              3   43[BANK0 ] float 
 13619 ;; Auto vars:     Size  Location     Type
 13620 ;;  lval            4   52[BANK0 ] unsigned long 
 13621 ;;  exp1            1   56[BANK0 ] unsigned char 
 13622 ;;  sign1           1   51[BANK0 ] unsigned char 
 13623 ;; Return value:  Size  Location     Type
 13624 ;;                  4   43[BANK0 ] long 
 13625 ;; Registers used:
 13626 ;;		wreg, status,2, status,0
 13627 ;; Tracked objects:
 13628 ;;		On entry : 0/0
 13629 ;;		On exit  : 0/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13632 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13633 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;Total ram usage:       14 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; Hardware stack levels required when called:    5
 13639 ;; This function calls:
 13640 ;;		Nothing
 13641 ;; This function is called by:
 13642 ;;		_getPercentValue
 13643 ;;		_setPercentValue
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647                           
 13648                           ;psect for function ___fttol
 13649  0A3A                     ___fttol:	
 13650                           
 13651                           ;incstack = 0
 13652                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13653  0A3A  0020               	movlb	0	; select bank0
 13654  0A3B  084B               	movf	___fttol@f1,w
 13655  0A3C  00CF               	movwf	??___fttol
 13656  0A3D  084C               	movf	___fttol@f1+1,w
 13657  0A3E  00D0               	movwf	??___fttol+1
 13658  0A3F  084D               	movf	___fttol@f1+2,w
 13659  0A40  00D1               	movwf	??___fttol+2
 13660  0A41  1003               	clrc
 13661  0A42  0D50               	rlf	??___fttol+1,w
 13662  0A43  0D51               	rlf	??___fttol+2,w
 13663  0A44  00D2               	movwf	??___fttol+3
 13664  0A45  0852               	movf	??___fttol+3,w
 13665  0A46  00D8               	movwf	___fttol@exp1
 13666  0A47  08D8               	movf	___fttol@exp1,f
 13667  0A48  1D03               	skipz
 13668  0A49  2A53               	goto	l5777
 13669  0A4A  3000               	movlw	0
 13670  0A4B  00CE               	movwf	?___fttol+3
 13671  0A4C  3000               	movlw	0
 13672  0A4D  00CD               	movwf	?___fttol+2
 13673  0A4E  3000               	movlw	0
 13674  0A4F  00CC               	movwf	?___fttol+1
 13675  0A50  3000               	movlw	0
 13676  0A51  00CB               	movwf	?___fttol
 13677  0A52  0008               	return
 13678  0A53                     l5777:	
 13679  0A53  084B               	movf	___fttol@f1,w
 13680  0A54  00CF               	movwf	??___fttol
 13681  0A55  084C               	movf	___fttol@f1+1,w
 13682  0A56  00D0               	movwf	??___fttol+1
 13683  0A57  084D               	movf	___fttol@f1+2,w
 13684  0A58  00D1               	movwf	??___fttol+2
 13685  0A59  3017               	movlw	23
 13686  0A5A                     u4295:	
 13687  0A5A  36D1               	lsrf	??___fttol+2,f
 13688  0A5B  0CD0               	rrf	??___fttol+1,f
 13689  0A5C  0CCF               	rrf	??___fttol,f
 13690  0A5D  0B89               	decfsz	9,f
 13691  0A5E  2A5A               	goto	u4295
 13692  0A5F  084F               	movf	??___fttol,w
 13693  0A60  00D2               	movwf	??___fttol+3
 13694  0A61  0852               	movf	??___fttol+3,w
 13695  0A62  00D3               	movwf	___fttol@sign1
 13696  0A63  17CC               	bsf	___fttol@f1+1,7
 13697  0A64  30FF               	movlw	255
 13698  0A65  05CB               	andwf	___fttol@f1,f
 13699  0A66  30FF               	movlw	255
 13700  0A67  05CC               	andwf	___fttol@f1+1,f
 13701  0A68  3000               	movlw	0
 13702  0A69  05CD               	andwf	___fttol@f1+2,f
 13703  0A6A  084B               	movf	___fttol@f1,w
 13704  0A6B  00D4               	movwf	___fttol@lval
 13705  0A6C  084C               	movf	___fttol@f1+1,w
 13706  0A6D  00D5               	movwf	___fttol@lval+1
 13707  0A6E  084D               	movf	___fttol@f1+2,w
 13708  0A6F  00D6               	movwf	___fttol@lval+2
 13709  0A70  01D7               	clrf	___fttol@lval+3
 13710  0A71  308E               	movlw	142
 13711  0A72  02D8               	subwf	___fttol@exp1,f
 13712  0A73  1FD8               	btfss	___fttol@exp1,7
 13713  0A74  2A91               	goto	l5797
 13714  0A75  0858               	movf	___fttol@exp1,w
 13715  0A76  3A80               	xorlw	128
 13716  0A77  3E8F               	addlw	143
 13717  0A78  1803               	skipnc
 13718  0A79  2A83               	goto	l5795
 13719  0A7A  3000               	movlw	0
 13720  0A7B  00CE               	movwf	?___fttol+3
 13721  0A7C  3000               	movlw	0
 13722  0A7D  00CD               	movwf	?___fttol+2
 13723  0A7E  3000               	movlw	0
 13724  0A7F  00CC               	movwf	?___fttol+1
 13725  0A80  3000               	movlw	0
 13726  0A81  00CB               	movwf	?___fttol
 13727  0A82  0008               	return
 13728  0A83                     l5795:	
 13729  0A83  3001               	movlw	1
 13730  0A84                     u4325:	
 13731  0A84  36D7               	lsrf	___fttol@lval+3,f
 13732  0A85  0CD6               	rrf	___fttol@lval+2,f
 13733  0A86  0CD5               	rrf	___fttol@lval+1,f
 13734  0A87  0CD4               	rrf	___fttol@lval,f
 13735  0A88  0B89               	decfsz	9,f
 13736  0A89  2A84               	goto	u4325
 13737  0A8A  3001               	movlw	1
 13738  0A8B  00CF               	movwf	??___fttol
 13739  0A8C  084F               	movf	??___fttol,w
 13740  0A8D  07D8               	addwf	___fttol@exp1,f
 13741  0A8E  1903               	btfsc	3,2
 13742  0A8F  2AAA               	goto	l5807
 13743  0A90  2A83               	goto	l5795
 13744  0A91                     l5797:	
 13745  0A91  3018               	movlw	24
 13746  0A92  0258               	subwf	___fttol@exp1,w
 13747  0A93  1C03               	skipc
 13748  0A94  2AA7               	goto	l5805
 13749  0A95  3000               	movlw	0
 13750  0A96  00CE               	movwf	?___fttol+3
 13751  0A97  3000               	movlw	0
 13752  0A98  00CD               	movwf	?___fttol+2
 13753  0A99  3000               	movlw	0
 13754  0A9A  00CC               	movwf	?___fttol+1
 13755  0A9B  3000               	movlw	0
 13756  0A9C  00CB               	movwf	?___fttol
 13757  0A9D  0008               	return
 13758  0A9E                     l5803:	
 13759  0A9E  3001               	movlw	1
 13760  0A9F                     u4355:	
 13761  0A9F  35D4               	lslf	___fttol@lval,f
 13762  0AA0  0DD5               	rlf	___fttol@lval+1,f
 13763  0AA1  0DD6               	rlf	___fttol@lval+2,f
 13764  0AA2  0DD7               	rlf	___fttol@lval+3,f
 13765  0AA3  0B89               	decfsz	9,f
 13766  0AA4  2A9F               	goto	u4355
 13767  0AA5  3001               	movlw	1
 13768  0AA6  02D8               	subwf	___fttol@exp1,f
 13769  0AA7                     l5805:	
 13770  0AA7  08D8               	movf	___fttol@exp1,f
 13771  0AA8  1D03               	skipz
 13772  0AA9  2A9E               	goto	l5803
 13773  0AAA                     l5807:	
 13774  0AAA  0853               	movf	___fttol@sign1,w
 13775  0AAB  1903               	btfsc	3,2
 13776  0AAC  2AB8               	goto	l5811
 13777  0AAD  09D4               	comf	___fttol@lval,f
 13778  0AAE  09D5               	comf	___fttol@lval+1,f
 13779  0AAF  09D6               	comf	___fttol@lval+2,f
 13780  0AB0  09D7               	comf	___fttol@lval+3,f
 13781  0AB1  0AD4               	incf	___fttol@lval,f
 13782  0AB2  1903               	skipnz
 13783  0AB3  0AD5               	incf	___fttol@lval+1,f
 13784  0AB4  1903               	skipnz
 13785  0AB5  0AD6               	incf	___fttol@lval+2,f
 13786  0AB6  1903               	skipnz
 13787  0AB7  0AD7               	incf	___fttol@lval+3,f
 13788  0AB8                     l5811:	
 13789  0AB8  0857               	movf	___fttol@lval+3,w
 13790  0AB9  00CE               	movwf	?___fttol+3
 13791  0ABA  0856               	movf	___fttol@lval+2,w
 13792  0ABB  00CD               	movwf	?___fttol+2
 13793  0ABC  0855               	movf	___fttol@lval+1,w
 13794  0ABD  00CC               	movwf	?___fttol+1
 13795  0ABE  0854               	movf	___fttol@lval,w
 13796  0ABF  00CB               	movwf	?___fttol
 13797  0AC0  0008               	return
 13798  0AC1                     __end_of___fttol:	
 13799                           
 13800                           	psect	text82
 13801  0C68                     __ptext82:	
 13802 ;; *************** function ___ftdiv *****************
 13803 ;; Defined at:
 13804 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13805 ;; Parameters:    Size  Location     Type
 13806 ;;  f2              3   14[BANK0 ] float 
 13807 ;;  f1              3   17[BANK0 ] float 
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;  f3              3   25[BANK0 ] float 
 13810 ;;  sign            1   29[BANK0 ] unsigned char 
 13811 ;;  exp             1   28[BANK0 ] unsigned char 
 13812 ;;  cntr            1   24[BANK0 ] unsigned char 
 13813 ;; Return value:  Size  Location     Type
 13814 ;;                  3   14[BANK0 ] float 
 13815 ;; Registers used:
 13816 ;;		wreg, status,2, status,0, pclath, cstack
 13817 ;; Tracked objects:
 13818 ;;		On entry : 0/0
 13819 ;;		On exit  : 0/0
 13820 ;;		Unchanged: 0/0
 13821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13822 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;Total ram usage:       16 bytes
 13827 ;; Hardware stack levels used:    1
 13828 ;; Hardware stack levels required when called:    6
 13829 ;; This function calls:
 13830 ;;		___ftpack
 13831 ;; This function is called by:
 13832 ;;		_getPercentValue
 13833 ;;		_setPercentValue
 13834 ;; This function uses a non-reentrant model
 13835 ;;
 13836                           
 13837                           
 13838                           ;psect for function ___ftdiv
 13839  0C68                     ___ftdiv:	
 13840                           
 13841                           ;incstack = 0
 13842                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13843  0C68  0020               	movlb	0	; select bank0
 13844  0C69  0831               	movf	___ftdiv@f1,w
 13845  0C6A  00B4               	movwf	??___ftdiv
 13846  0C6B  0832               	movf	___ftdiv@f1+1,w
 13847  0C6C  00B5               	movwf	??___ftdiv+1
 13848  0C6D  0833               	movf	___ftdiv@f1+2,w
 13849  0C6E  00B6               	movwf	??___ftdiv+2
 13850  0C6F  1003               	clrc
 13851  0C70  0D35               	rlf	??___ftdiv+1,w
 13852  0C71  0D36               	rlf	??___ftdiv+2,w
 13853  0C72  00B7               	movwf	??___ftdiv+3
 13854  0C73  0837               	movf	??___ftdiv+3,w
 13855  0C74  00BC               	movwf	___ftdiv@exp
 13856  0C75  08BC               	movf	___ftdiv@exp,f
 13857  0C76  1D03               	skipz
 13858  0C77  2C7F               	goto	l5685
 13859  0C78  3000               	movlw	0
 13860  0C79  00AE               	movwf	?___ftdiv
 13861  0C7A  3000               	movlw	0
 13862  0C7B  00AF               	movwf	?___ftdiv+1
 13863  0C7C  3000               	movlw	0
 13864  0C7D  00B0               	movwf	?___ftdiv+2
 13865  0C7E  0008               	return
 13866  0C7F                     l5685:	
 13867  0C7F  082E               	movf	___ftdiv@f2,w
 13868  0C80  00B4               	movwf	??___ftdiv
 13869  0C81  082F               	movf	___ftdiv@f2+1,w
 13870  0C82  00B5               	movwf	??___ftdiv+1
 13871  0C83  0830               	movf	___ftdiv@f2+2,w
 13872  0C84  00B6               	movwf	??___ftdiv+2
 13873  0C85  1003               	clrc
 13874  0C86  0D35               	rlf	??___ftdiv+1,w
 13875  0C87  0D36               	rlf	??___ftdiv+2,w
 13876  0C88  00B7               	movwf	??___ftdiv+3
 13877  0C89  0837               	movf	??___ftdiv+3,w
 13878  0C8A  00BD               	movwf	___ftdiv@sign
 13879  0C8B  08BD               	movf	___ftdiv@sign,f
 13880  0C8C  1D03               	skipz
 13881  0C8D  2C95               	goto	l5691
 13882  0C8E  3000               	movlw	0
 13883  0C8F  00AE               	movwf	?___ftdiv
 13884  0C90  3000               	movlw	0
 13885  0C91  00AF               	movwf	?___ftdiv+1
 13886  0C92  3000               	movlw	0
 13887  0C93  00B0               	movwf	?___ftdiv+2
 13888  0C94  0008               	return
 13889  0C95                     l5691:	
 13890  0C95  3000               	movlw	0
 13891  0C96  00B9               	movwf	___ftdiv@f3
 13892  0C97  3000               	movlw	0
 13893  0C98  00BA               	movwf	___ftdiv@f3+1
 13894  0C99  3000               	movlw	0
 13895  0C9A  00BB               	movwf	___ftdiv@f3+2
 13896  0C9B  3089               	movlw	137
 13897  0C9C  073D               	addwf	___ftdiv@sign,w
 13898  0C9D  00B4               	movwf	??___ftdiv
 13899  0C9E  0834               	movf	??___ftdiv,w
 13900  0C9F  02BC               	subwf	___ftdiv@exp,f
 13901  0CA0  0831               	movf	___ftdiv@f1,w
 13902  0CA1  00B4               	movwf	??___ftdiv
 13903  0CA2  0832               	movf	___ftdiv@f1+1,w
 13904  0CA3  00B5               	movwf	??___ftdiv+1
 13905  0CA4  0833               	movf	___ftdiv@f1+2,w
 13906  0CA5  00B6               	movwf	??___ftdiv+2
 13907  0CA6  3010               	movlw	16
 13908  0CA7                     u4105:	
 13909  0CA7  36B6               	lsrf	??___ftdiv+2,f
 13910  0CA8  0CB5               	rrf	??___ftdiv+1,f
 13911  0CA9  0CB4               	rrf	??___ftdiv,f
 13912  0CAA  0B89               	decfsz	9,f
 13913  0CAB  2CA7               	goto	u4105
 13914  0CAC  0834               	movf	??___ftdiv,w
 13915  0CAD  00B7               	movwf	??___ftdiv+3
 13916  0CAE  0837               	movf	??___ftdiv+3,w
 13917  0CAF  00BD               	movwf	___ftdiv@sign
 13918  0CB0  082E               	movf	___ftdiv@f2,w
 13919  0CB1  00B4               	movwf	??___ftdiv
 13920  0CB2  082F               	movf	___ftdiv@f2+1,w
 13921  0CB3  00B5               	movwf	??___ftdiv+1
 13922  0CB4  0830               	movf	___ftdiv@f2+2,w
 13923  0CB5  00B6               	movwf	??___ftdiv+2
 13924  0CB6  3010               	movlw	16
 13925  0CB7                     u4115:	
 13926  0CB7  36B6               	lsrf	??___ftdiv+2,f
 13927  0CB8  0CB5               	rrf	??___ftdiv+1,f
 13928  0CB9  0CB4               	rrf	??___ftdiv,f
 13929  0CBA  0B89               	decfsz	9,f
 13930  0CBB  2CB7               	goto	u4115
 13931  0CBC  0834               	movf	??___ftdiv,w
 13932  0CBD  00B7               	movwf	??___ftdiv+3
 13933  0CBE  0837               	movf	??___ftdiv+3,w
 13934  0CBF  06BD               	xorwf	___ftdiv@sign,f
 13935  0CC0  3080               	movlw	128
 13936  0CC1  00B4               	movwf	??___ftdiv
 13937  0CC2  0834               	movf	??___ftdiv,w
 13938  0CC3  05BD               	andwf	___ftdiv@sign,f
 13939  0CC4  17B2               	bsf	___ftdiv@f1+1,7
 13940  0CC5  30FF               	movlw	255
 13941  0CC6  05B1               	andwf	___ftdiv@f1,f
 13942  0CC7  30FF               	movlw	255
 13943  0CC8  05B2               	andwf	___ftdiv@f1+1,f
 13944  0CC9  3000               	movlw	0
 13945  0CCA  05B3               	andwf	___ftdiv@f1+2,f
 13946  0CCB  17AF               	bsf	___ftdiv@f2+1,7
 13947  0CCC  30FF               	movlw	255
 13948  0CCD  05AE               	andwf	___ftdiv@f2,f
 13949  0CCE  30FF               	movlw	255
 13950  0CCF  05AF               	andwf	___ftdiv@f2+1,f
 13951  0CD0  3000               	movlw	0
 13952  0CD1  05B0               	andwf	___ftdiv@f2+2,f
 13953  0CD2  3018               	movlw	24
 13954  0CD3  00B4               	movwf	??___ftdiv
 13955  0CD4  0834               	movf	??___ftdiv,w
 13956  0CD5  00B8               	movwf	___ftdiv@cntr
 13957  0CD6                     l5705:	
 13958  0CD6  3001               	movlw	1
 13959  0CD7                     u4125:	
 13960  0CD7  35B9               	lslf	___ftdiv@f3,f
 13961  0CD8  0DBA               	rlf	___ftdiv@f3+1,f
 13962  0CD9  0DBB               	rlf	___ftdiv@f3+2,f
 13963  0CDA  0B89               	decfsz	9,f
 13964  0CDB  2CD7               	goto	u4125
 13965  0CDC  0830               	movf	___ftdiv@f2+2,w
 13966  0CDD  0233               	subwf	___ftdiv@f1+2,w
 13967  0CDE  1D03               	skipz
 13968  0CDF  2CE6               	goto	u4135
 13969  0CE0  082F               	movf	___ftdiv@f2+1,w
 13970  0CE1  0232               	subwf	___ftdiv@f1+1,w
 13971  0CE2  1D03               	skipz
 13972  0CE3  2CE6               	goto	u4135
 13973  0CE4  082E               	movf	___ftdiv@f2,w
 13974  0CE5  0231               	subwf	___ftdiv@f1,w
 13975  0CE6                     u4135:	
 13976  0CE6  1C03               	skipc
 13977  0CE7  2CEF               	goto	l5713
 13978  0CE8  082E               	movf	___ftdiv@f2,w
 13979  0CE9  02B1               	subwf	___ftdiv@f1,f
 13980  0CEA  082F               	movf	___ftdiv@f2+1,w
 13981  0CEB  3BB2               	subwfb	___ftdiv@f1+1,f
 13982  0CEC  0830               	movf	___ftdiv@f2+2,w
 13983  0CED  3BB3               	subwfb	___ftdiv@f1+2,f
 13984  0CEE  1439               	bsf	___ftdiv@f3,0
 13985  0CEF                     l5713:	
 13986  0CEF  3001               	movlw	1
 13987  0CF0                     u4145:	
 13988  0CF0  35B1               	lslf	___ftdiv@f1,f
 13989  0CF1  0DB2               	rlf	___ftdiv@f1+1,f
 13990  0CF2  0DB3               	rlf	___ftdiv@f1+2,f
 13991  0CF3  0B89               	decfsz	9,f
 13992  0CF4  2CF0               	goto	u4145
 13993  0CF5  3001               	movlw	1
 13994  0CF6  02B8               	subwf	___ftdiv@cntr,f
 13995  0CF7  1D03               	btfss	3,2
 13996  0CF8  2CD6               	goto	l5705
 13997  0CF9  0839               	movf	___ftdiv@f3,w
 13998  0CFA  00A0               	movwf	___ftpack@arg
 13999  0CFB  083A               	movf	___ftdiv@f3+1,w
 14000  0CFC  00A1               	movwf	___ftpack@arg+1
 14001  0CFD  083B               	movf	___ftdiv@f3+2,w
 14002  0CFE  00A2               	movwf	___ftpack@arg+2
 14003  0CFF  083C               	movf	___ftdiv@exp,w
 14004  0D00  00B4               	movwf	??___ftdiv
 14005  0D01  0834               	movf	??___ftdiv,w
 14006  0D02  00A3               	movwf	___ftpack@exp
 14007  0D03  083D               	movf	___ftdiv@sign,w
 14008  0D04  00B5               	movwf	??___ftdiv+1
 14009  0D05  0835               	movf	??___ftdiv+1,w
 14010  0D06  00A4               	movwf	___ftpack@sign
 14011  0D07  3195  2583         	fcall	___ftpack
 14012  0D09  0020               	movlb	0	; select bank0
 14013  0D0A  0820               	movf	?___ftpack,w
 14014  0D0B  00AE               	movwf	?___ftdiv
 14015  0D0C  0821               	movf	?___ftpack+1,w
 14016  0D0D  00AF               	movwf	?___ftdiv+1
 14017  0D0E  0822               	movf	?___ftpack+2,w
 14018  0D0F  00B0               	movwf	?___ftdiv+2
 14019  0D10  0008               	return
 14020  0D11                     __end_of___ftdiv:	
 14021                           
 14022                           	psect	text83
 14023  1F6F                     __ptext83:	
 14024 ;; *************** function ___awtoft *****************
 14025 ;; Defined at:
 14026 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14027 ;; Parameters:    Size  Location     Type
 14028 ;;  c               2    8[BANK0 ] int 
 14029 ;; Auto vars:     Size  Location     Type
 14030 ;;  sign            1   13[BANK0 ] unsigned char 
 14031 ;; Return value:  Size  Location     Type
 14032 ;;                  3    8[BANK0 ] float 
 14033 ;; Registers used:
 14034 ;;		wreg, status,2, status,0, pclath, cstack
 14035 ;; Tracked objects:
 14036 ;;		On entry : 0/0
 14037 ;;		On exit  : 0/0
 14038 ;;		Unchanged: 0/0
 14039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14040 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;Total ram usage:        6 bytes
 14045 ;; Hardware stack levels used:    1
 14046 ;; Hardware stack levels required when called:    6
 14047 ;; This function calls:
 14048 ;;		___ftpack
 14049 ;; This function is called by:
 14050 ;;		_getPercentValue
 14051 ;;		_setPercentValue
 14052 ;; This function uses a non-reentrant model
 14053 ;;
 14054                           
 14055                           
 14056                           ;psect for function ___awtoft
 14057  1F6F                     ___awtoft:	
 14058                           
 14059                           ;incstack = 0
 14060                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14061  1F6F  0020               	movlb	0	; select bank0
 14062  1F70  01AD               	clrf	___awtoft@sign
 14063  1F71  1FA9               	btfss	___awtoft@c+1,7
 14064  1F72  2F7A               	goto	l5603
 14065  1F73  09A8               	comf	___awtoft@c,f
 14066  1F74  09A9               	comf	___awtoft@c+1,f
 14067  1F75  0AA8               	incf	___awtoft@c,f
 14068  1F76  1903               	skipnz
 14069  1F77  0AA9               	incf	___awtoft@c+1,f
 14070  1F78  01AD               	clrf	___awtoft@sign
 14071  1F79  0AAD               	incf	___awtoft@sign,f
 14072  1F7A                     l5603:	
 14073  1F7A  0828               	movf	___awtoft@c,w
 14074  1F7B  00A0               	movwf	___ftpack@arg
 14075  1F7C  0829               	movf	___awtoft@c+1,w
 14076  1F7D  00A1               	movwf	___ftpack@arg+1
 14077  1F7E  01A2               	clrf	___ftpack@arg+2
 14078  1F7F  308E               	movlw	142
 14079  1F80  00AB               	movwf	??___awtoft
 14080  1F81  082B               	movf	??___awtoft,w
 14081  1F82  00A3               	movwf	___ftpack@exp
 14082  1F83  082D               	movf	___awtoft@sign,w
 14083  1F84  00AC               	movwf	??___awtoft+1
 14084  1F85  082C               	movf	??___awtoft+1,w
 14085  1F86  00A4               	movwf	___ftpack@sign
 14086  1F87  3195  2583         	fcall	___ftpack
 14087  1F89  0020               	movlb	0	; select bank0
 14088  1F8A  0820               	movf	?___ftpack,w
 14089  1F8B  00A8               	movwf	?___awtoft
 14090  1F8C  0821               	movf	?___ftpack+1,w
 14091  1F8D  00A9               	movwf	?___awtoft+1
 14092  1F8E  0822               	movf	?___ftpack+2,w
 14093  1F8F  00AA               	movwf	?___awtoft+2
 14094  1F90  0008               	return
 14095  1F91                     __end_of___awtoft:	
 14096                           
 14097                           	psect	text84
 14098  1583                     __ptext84:	
 14099 ;; *************** function ___ftpack *****************
 14100 ;; Defined at:
 14101 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14102 ;; Parameters:    Size  Location     Type
 14103 ;;  arg             3    0[BANK0 ] unsigned um
 14104 ;;  exp             1    3[BANK0 ] unsigned char 
 14105 ;;  sign            1    4[BANK0 ] unsigned char 
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;		None
 14108 ;; Return value:  Size  Location     Type
 14109 ;;                  3    0[BANK0 ] float 
 14110 ;; Registers used:
 14111 ;;		wreg, status,2, status,0
 14112 ;; Tracked objects:
 14113 ;;		On entry : 0/0
 14114 ;;		On exit  : 0/0
 14115 ;;		Unchanged: 0/0
 14116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14117 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14119 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14120 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14121 ;;Total ram usage:        8 bytes
 14122 ;; Hardware stack levels used:    1
 14123 ;; Hardware stack levels required when called:    5
 14124 ;; This function calls:
 14125 ;;		Nothing
 14126 ;; This function is called by:
 14127 ;;		___awtoft
 14128 ;;		___ftadd
 14129 ;;		___ftdiv
 14130 ;;		___ftmul
 14131 ;; This function uses a non-reentrant model
 14132 ;;
 14133                           
 14134                           
 14135                           ;psect for function ___ftpack
 14136  1583                     ___ftpack:	
 14137                           
 14138                           ;incstack = 0
 14139                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14140  1583  0020               	movlb	0	; select bank0
 14141  1584  0823               	movf	___ftpack@exp,w
 14142  1585  1903               	btfsc	3,2
 14143  1586  2D8C               	goto	l5569
 14144  1587  0822               	movf	___ftpack@arg+2,w
 14145  1588  0421               	iorwf	___ftpack@arg+1,w
 14146  1589  0420               	iorwf	___ftpack@arg,w
 14147  158A  1D03               	skipz
 14148  158B  2D9D               	goto	l5575
 14149  158C                     l5569:	
 14150  158C  3000               	movlw	0
 14151  158D  00A0               	movwf	?___ftpack
 14152  158E  3000               	movlw	0
 14153  158F  00A1               	movwf	?___ftpack+1
 14154  1590  3000               	movlw	0
 14155  1591  00A2               	movwf	?___ftpack+2
 14156  1592  0008               	return
 14157  1593                     l5573:	
 14158  1593  3001               	movlw	1
 14159  1594  00A5               	movwf	??___ftpack
 14160  1595  0825               	movf	??___ftpack,w
 14161  1596  07A3               	addwf	___ftpack@exp,f
 14162  1597  3001               	movlw	1
 14163  1598                     u3755:	
 14164  1598  36A2               	lsrf	___ftpack@arg+2,f
 14165  1599  0CA1               	rrf	___ftpack@arg+1,f
 14166  159A  0CA0               	rrf	___ftpack@arg,f
 14167  159B  0B89               	decfsz	9,f
 14168  159C  2D98               	goto	u3755
 14169  159D                     l5575:	
 14170  159D  30FE               	movlw	254
 14171  159E  0522               	andwf	___ftpack@arg+2,w
 14172  159F  1903               	btfsc	3,2
 14173  15A0  2DB6               	goto	l3139
 14174  15A1  2D93               	goto	l5573
 14175  15A2                     l5577:	
 14176  15A2  3001               	movlw	1
 14177  15A3  00A5               	movwf	??___ftpack
 14178  15A4  0825               	movf	??___ftpack,w
 14179  15A5  07A3               	addwf	___ftpack@exp,f
 14180  15A6  3001               	movlw	1
 14181  15A7  07A0               	addwf	___ftpack@arg,f
 14182  15A8  3000               	movlw	0
 14183  15A9  1803               	skipnc
 14184  15AA  3001               	movlw	1
 14185  15AB  07A1               	addwf	___ftpack@arg+1,f
 14186  15AC  3000               	movlw	0
 14187  15AD  1803               	skipnc
 14188  15AE  3001               	movlw	1
 14189  15AF  07A2               	addwf	___ftpack@arg+2,f
 14190  15B0  3001               	movlw	1
 14191  15B1                     u3775:	
 14192  15B1  36A2               	lsrf	___ftpack@arg+2,f
 14193  15B2  0CA1               	rrf	___ftpack@arg+1,f
 14194  15B3  0CA0               	rrf	___ftpack@arg,f
 14195  15B4  0B89               	decfsz	9,f
 14196  15B5  2DB1               	goto	u3775
 14197  15B6                     l3139:	
 14198  15B6  30FF               	movlw	255
 14199  15B7  0522               	andwf	___ftpack@arg+2,w
 14200  15B8  1903               	btfsc	3,2
 14201  15B9  2DC3               	goto	l5585
 14202  15BA  2DA2               	goto	l5577
 14203  15BB                     l5583:	
 14204  15BB  3001               	movlw	1
 14205  15BC  02A3               	subwf	___ftpack@exp,f
 14206  15BD  3001               	movlw	1
 14207  15BE                     u3795:	
 14208  15BE  35A0               	lslf	___ftpack@arg,f
 14209  15BF  0DA1               	rlf	___ftpack@arg+1,f
 14210  15C0  0DA2               	rlf	___ftpack@arg+2,f
 14211  15C1  0B89               	decfsz	9,f
 14212  15C2  2DBE               	goto	u3795
 14213  15C3                     l5585:	
 14214  15C3  1FA1               	btfss	___ftpack@arg+1,7
 14215  15C4  2DBB               	goto	l5583
 14216  15C5  1823               	btfsc	___ftpack@exp,0
 14217  15C6  2DCD               	goto	l3145
 14218  15C7  30FF               	movlw	255
 14219  15C8  05A0               	andwf	___ftpack@arg,f
 14220  15C9  307F               	movlw	127
 14221  15CA  05A1               	andwf	___ftpack@arg+1,f
 14222  15CB  30FF               	movlw	255
 14223  15CC  05A2               	andwf	___ftpack@arg+2,f
 14224  15CD                     l3145:	
 14225  15CD  1003               	clrc
 14226  15CE  0CA3               	rrf	___ftpack@exp,f
 14227  15CF  0823               	movf	___ftpack@exp,w
 14228  15D0  00A5               	movwf	??___ftpack
 14229  15D1  01A6               	clrf	??___ftpack+1
 14230  15D2  01A7               	clrf	??___ftpack+2
 14231  15D3  3010               	movlw	16
 14232  15D4                     u3825:	
 14233  15D4  35A5               	lslf	??___ftpack,f
 14234  15D5  0DA6               	rlf	??___ftpack+1,f
 14235  15D6  0DA7               	rlf	??___ftpack+2,f
 14236  15D7  0B89               	decfsz	9,f
 14237  15D8  2DD4               	goto	u3825
 14238  15D9  0825               	movf	??___ftpack,w
 14239  15DA  04A0               	iorwf	___ftpack@arg,f
 14240  15DB  0826               	movf	??___ftpack+1,w
 14241  15DC  04A1               	iorwf	___ftpack@arg+1,f
 14242  15DD  0827               	movf	??___ftpack+2,w
 14243  15DE  04A2               	iorwf	___ftpack@arg+2,f
 14244  15DF  0824               	movf	___ftpack@sign,w
 14245  15E0  1903               	btfsc	3,2
 14246  15E1  0008               	return
 14247  15E2  17A2               	bsf	___ftpack@arg+2,7
 14248  15E3  0008               	return
 14249  15E4                     __end_of___ftpack:	
 14250                           
 14251                           	psect	text85
 14252  09BA                     __ptext85:	
 14253 ;; *************** function _setDimmerLights *****************
 14254 ;; Defined at:
 14255 ;;		line 593 in file "../src/Dimmer_B1.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;  lights          1    wreg     unsigned char 
 14258 ;;  status          1    4[BANK0 ] unsigned char 
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  lights          1    6[BANK0 ] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;		None               void
 14263 ;; Registers used:
 14264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14270 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;Total ram usage:        3 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    7
 14277 ;; This function calls:
 14278 ;;		_DimmerLightsPointSelect
 14279 ;;		_setLED
 14280 ;;		_setMemory_GO
 14281 ;; This function is called by:
 14282 ;;		_setDimmerLights_Main
 14283 ;;		_setControl_Lights_Table
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           
 14288                           ;psect for function _setDimmerLights
 14289  09BA                     _setDimmerLights:	
 14290                           
 14291                           ;incstack = 0
 14292                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14293                           ;setDimmerLights@lights stored from wreg
 14294  09BA  0020               	movlb	0	; select bank0
 14295  09BB  00A6               	movwf	setDimmerLights@lights
 14296                           
 14297                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 14298  09BC  0826               	movf	setDimmerLights@lights,w
 14299  09BD  319D  25CD  3189   	fcall	_DimmerLightsPointSelect
 14300                           
 14301                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 14302  09C0  0020               	movlb	0	; select bank0
 14303  09C1  0826               	movf	setDimmerLights@lights,w
 14304  09C2  00A5               	movwf	??_setDimmerLights
 14305  09C3  0021               	movlb	1	; select bank1
 14306  09C4  0A39               	incf	_Dimmer^(0+128),w
 14307  09C5  0086               	movwf	6
 14308  09C6  0187               	clrf	7
 14309  09C7  0020               	movlb	0	; select bank0
 14310  09C8  0825               	movf	??_setDimmerLights,w
 14311  09C9  0081               	movwf	1
 14312                           
 14313                           ;Dimmer_B1.c: 596: if (status == 1) {
 14314  09CA  0824               	movf	setDimmerLights@status,w
 14315  09CB  3A01               	xorlw	1
 14316  09CC  1D03               	skipz
 14317  09CD  2A0E               	goto	l6157
 14318                           
 14319                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 14320  09CE  0878               	movf	_DimmerLights,w
 14321  09CF  0086               	movwf	6
 14322  09D0  3001               	movlw	1	; select bank2/3
 14323  09D1  0087               	movwf	7
 14324  09D2  1681               	bsf	1,5
 14325                           
 14326                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 14327  09D3  01A2               	clrf	setLED@command
 14328  09D4  0826               	movf	setDimmerLights@lights,w
 14329  09D5  3188  2059  3189   	fcall	_setLED
 14330                           
 14331                           ;Dimmer_B1.c: 600: ;;
 14332                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 14333  09D8  0878               	movf	_DimmerLights,w
 14334  09D9  0086               	movwf	6
 14335  09DA  3001               	movlw	1	; select bank2/3
 14336  09DB  0087               	movwf	7
 14337  09DC  1481               	bsf	1,1
 14338                           
 14339                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 14340  09DD  3007               	movlw	7
 14341  09DE  0020               	movlb	0	; select bank0
 14342  09DF  00A5               	movwf	??_setDimmerLights
 14343  09E0  0878               	movf	_DimmerLights,w
 14344  09E1  3E02               	addlw	2
 14345  09E2  0086               	movwf	6
 14346  09E3  3001               	movlw	1	; select bank2/3
 14347  09E4  0087               	movwf	7
 14348  09E5  0825               	movf	??_setDimmerLights,w
 14349  09E6  0081               	movwf	1
 14350                           
 14351                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 14352  09E7  0878               	movf	_DimmerLights,w
 14353  09E8  0086               	movwf	6
 14354  09E9  3001               	movlw	1	; select bank2/3
 14355  09EA  0087               	movwf	7
 14356  09EB  1B01               	btfsc	1,6
 14357  09EC  0008               	return
 14358                           
 14359                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 14360  09ED  0878               	movf	_DimmerLights,w
 14361  09EE  0086               	movwf	6
 14362  09EF  3001               	movlw	1	; select bank2/3
 14363  09F0  0087               	movwf	7
 14364  09F1  1701               	bsf	1,6
 14365                           
 14366                           ;Dimmer_B1.c: 607: ;;
 14367                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 14368  09F2  3000               	movlw	0
 14369  09F3  319E  26CF         	fcall	_setMemory_GO
 14370                           
 14371                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 14372  09F5  0878               	movf	_DimmerLights,w
 14373  09F6  3E05               	addlw	5
 14374  09F7  0086               	movwf	6
 14375  09F8  3001               	movlw	1	; select bank2/3
 14376  09F9  0087               	movwf	7
 14377  09FA  0801               	movf	1,w
 14378  09FB  0020               	movlb	0	; select bank0
 14379  09FC  00A5               	movwf	??_setDimmerLights
 14380  09FD  0878               	movf	_DimmerLights,w
 14381  09FE  3E04               	addlw	4
 14382  09FF  0086               	movwf	6
 14383  0A00  3001               	movlw	1	; select bank2/3
 14384  0A01  0087               	movwf	7
 14385  0A02  0825               	movf	??_setDimmerLights,w
 14386  0A03  0081               	movwf	1
 14387                           
 14388                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 14389  0A04  3004               	movlw	4
 14390  0A05  00A5               	movwf	??_setDimmerLights
 14391  0A06  0878               	movf	_DimmerLights,w
 14392  0A07  3E04               	addlw	4
 14393  0A08  0086               	movwf	6
 14394  0A09  3001               	movlw	1	; select bank2/3
 14395  0A0A  0087               	movwf	7
 14396  0A0B  0825               	movf	??_setDimmerLights,w
 14397  0A0C  0081               	movwf	1
 14398                           
 14399                           ;Dimmer_B1.c: 617: }
 14400                           ;Dimmer_B1.c: 618: } else {
 14401  0A0D  0008               	return
 14402  0A0E                     l6157:	
 14403                           
 14404                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 14405  0A0E  0878               	movf	_DimmerLights,w
 14406  0A0F  0086               	movwf	6
 14407  0A10  3001               	movlw	1	; select bank2/3
 14408  0A11  0087               	movwf	7
 14409  0A12  1281               	bcf	1,5
 14410                           
 14411                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14412  0A13  0878               	movf	_DimmerLights,w
 14413  0A14  3E06               	addlw	6
 14414  0A15  0086               	movwf	6
 14415  0A16  3001               	movlw	1	; select bank2/3
 14416  0A17  0087               	movwf	7
 14417  0A18  0801               	movf	1,w
 14418  0A19  00A5               	movwf	??_setDimmerLights
 14419  0A1A  0878               	movf	_DimmerLights,w
 14420  0A1B  3E04               	addlw	4
 14421  0A1C  0086               	movwf	6
 14422  0A1D  3001               	movlw	1	; select bank2/3
 14423  0A1E  0087               	movwf	7
 14424  0A1F  0825               	movf	??_setDimmerLights,w
 14425  0A20  0081               	movwf	1
 14426                           
 14427                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 14428  0A21  0878               	movf	_DimmerLights,w
 14429  0A22  0086               	movwf	6
 14430  0A23  3001               	movlw	1	; select bank2/3
 14431  0A24  0087               	movwf	7
 14432  0A25  1481               	bsf	1,1
 14433                           
 14434                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 14435  0A26  0878               	movf	_DimmerLights,w
 14436  0A27  0086               	movwf	6
 14437  0A28  3001               	movlw	1	; select bank2/3
 14438  0A29  0087               	movwf	7
 14439  0A2A  1181               	bcf	1,3
 14440                           
 14441                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 14442  0A2B  0878               	movf	_DimmerLights,w
 14443  0A2C  0086               	movwf	6
 14444  0A2D  3001               	movlw	1	; select bank2/3
 14445  0A2E  0087               	movwf	7
 14446  0A2F  1201               	bcf	1,4
 14447                           
 14448                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 14449  0A30  3007               	movlw	7
 14450  0A31  00A5               	movwf	??_setDimmerLights
 14451  0A32  0878               	movf	_DimmerLights,w
 14452  0A33  3E02               	addlw	2
 14453  0A34  0086               	movwf	6
 14454  0A35  3001               	movlw	1	; select bank2/3
 14455  0A36  0087               	movwf	7
 14456  0A37  0825               	movf	??_setDimmerLights,w
 14457  0A38  0081               	movwf	1
 14458  0A39  0008               	return
 14459  0A3A                     __end_of_setDimmerLights:	
 14460                           
 14461                           	psect	text86
 14462  0859                     __ptext86:	
 14463 ;; *************** function _setLED *****************
 14464 ;; Defined at:
 14465 ;;		line 74 in file "../src/LED_B1.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;  led             1    wreg     unsigned char 
 14468 ;;  command         1    2[BANK0 ] unsigned char 
 14469 ;; Auto vars:     Size  Location     Type
 14470 ;;  led             1    3[BANK0 ] unsigned char 
 14471 ;; Return value:  Size  Location     Type
 14472 ;;		None               void
 14473 ;; Registers used:
 14474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14475 ;; Tracked objects:
 14476 ;;		On entry : 0/0
 14477 ;;		On exit  : 0/0
 14478 ;;		Unchanged: 0/0
 14479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;Total ram usage:        2 bytes
 14485 ;; Hardware stack levels used:    1
 14486 ;; Hardware stack levels required when called:    6
 14487 ;; This function calls:
 14488 ;;		_LedPointSelect
 14489 ;; This function is called by:
 14490 ;;		_setDimmerLights_ERROR
 14491 ;;		_setDimmerLights
 14492 ;;		_setLED_Initialization
 14493 ;;		_setOverTemp_Exceptions
 14494 ;;		_setSw_Initialization
 14495 ;; This function uses a non-reentrant model
 14496 ;;
 14497                           
 14498                           
 14499                           ;psect for function _setLED
 14500  0859                     _setLED:	
 14501                           
 14502                           ;incstack = 0
 14503                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14504                           ;setLED@led stored from wreg
 14505  0859  0020               	movlb	0	; select bank0
 14506  085A  00A3               	movwf	setLED@led
 14507                           
 14508                           ;LED_B1.c: 76: LedPointSelect(led);
 14509  085B  0823               	movf	setLED@led,w
 14510  085C  3190  20B3  3188   	fcall	_LedPointSelect
 14511                           
 14512                           ;LED_B1.c: 77: if(command == 0)
 14513  085F  0020               	movlb	0	; select bank0
 14514  0860  08A2               	movf	setLED@command,f
 14515  0861  1D03               	skipz
 14516  0862  287B               	goto	l5981
 14517                           
 14518                           ;LED_B1.c: 78: {
 14519                           ;LED_B1.c: 80: if(led == 1)
 14520  0863  0823               	movf	setLED@led,w
 14521  0864  3A01               	xorlw	1
 14522  0865  1D03               	skipz
 14523  0866  2869               	goto	l5969
 14524                           
 14525                           ;LED_B1.c: 81: {
 14526                           ;LED_B1.c: 85: RC7=1;
 14527  0867  178E               	bsf	14,7	;volatile
 14528                           
 14529                           ;LED_B1.c: 87: }
 14530  0868  0008               	return
 14531  0869                     l5969:	
 14532                           
 14533                           ;LED_B1.c: 90: else if(led == 2)
 14534  0869  0823               	movf	setLED@led,w
 14535  086A  3A02               	xorlw	2
 14536  086B  1D03               	skipz
 14537  086C  286F               	goto	l5973
 14538                           
 14539                           ;LED_B1.c: 91: {
 14540                           ;LED_B1.c: 95: RA3=1;
 14541  086D  158C               	bsf	12,3	;volatile
 14542                           
 14543                           ;LED_B1.c: 97: }
 14544  086E  0008               	return
 14545  086F                     l5973:	
 14546                           
 14547                           ;LED_B1.c: 100: else if(led == 3)
 14548  086F  0823               	movf	setLED@led,w
 14549  0870  3A03               	xorlw	3
 14550  0871  1D03               	skipz
 14551  0872  2875               	goto	l5977
 14552                           
 14553                           ;LED_B1.c: 101: {
 14554                           ;LED_B1.c: 105: RC6=1;
 14555  0873  170E               	bsf	14,6	;volatile
 14556                           
 14557                           ;LED_B1.c: 107: }
 14558  0874  0008               	return
 14559  0875                     l5977:	
 14560                           
 14561                           ;LED_B1.c: 110: else if(led == 99)
 14562  0875  0823               	movf	setLED@led,w
 14563  0876  3A63               	xorlw	99
 14564  0877  1D03               	skipz
 14565  0878  0008               	return
 14566                           
 14567                           ;LED_B1.c: 111: {
 14568                           ;LED_B1.c: 115: RB5=1;
 14569  0879  168D               	bsf	13,5	;volatile
 14570                           
 14571                           ;LED_B1.c: 117: }
 14572                           ;LED_B1.c: 119: }
 14573  087A  0008               	return
 14574  087B                     l5981:	
 14575                           
 14576                           ;LED_B1.c: 120: else if(command == 1)
 14577  087B  0822               	movf	setLED@command,w
 14578  087C  3A01               	xorlw	1
 14579  087D  1D03               	skipz
 14580  087E  2897               	goto	l5999
 14581                           
 14582                           ;LED_B1.c: 121: {
 14583                           ;LED_B1.c: 123: if(led == 1)
 14584  087F  0823               	movf	setLED@led,w
 14585  0880  3A01               	xorlw	1
 14586  0881  1D03               	skipz
 14587  0882  2885               	goto	l5987
 14588                           
 14589                           ;LED_B1.c: 124: {
 14590                           ;LED_B1.c: 128: RC7=0;
 14591  0883  138E               	bcf	14,7	;volatile
 14592                           
 14593                           ;LED_B1.c: 130: }
 14594  0884  0008               	return
 14595  0885                     l5987:	
 14596                           
 14597                           ;LED_B1.c: 133: else if(led == 2)
 14598  0885  0823               	movf	setLED@led,w
 14599  0886  3A02               	xorlw	2
 14600  0887  1D03               	skipz
 14601  0888  288B               	goto	l5991
 14602                           
 14603                           ;LED_B1.c: 134: {
 14604                           ;LED_B1.c: 138: RA3=0;
 14605  0889  118C               	bcf	12,3	;volatile
 14606                           
 14607                           ;LED_B1.c: 140: }
 14608  088A  0008               	return
 14609  088B                     l5991:	
 14610                           
 14611                           ;LED_B1.c: 143: else if(led == 3)
 14612  088B  0823               	movf	setLED@led,w
 14613  088C  3A03               	xorlw	3
 14614  088D  1D03               	skipz
 14615  088E  2891               	goto	l5995
 14616                           
 14617                           ;LED_B1.c: 144: {
 14618                           ;LED_B1.c: 148: RC6=0;
 14619  088F  130E               	bcf	14,6	;volatile
 14620                           
 14621                           ;LED_B1.c: 150: }
 14622  0890  0008               	return
 14623  0891                     l5995:	
 14624                           
 14625                           ;LED_B1.c: 153: else if(led == 99)
 14626  0891  0823               	movf	setLED@led,w
 14627  0892  3A63               	xorlw	99
 14628  0893  1D03               	skipz
 14629  0894  0008               	return
 14630                           
 14631                           ;LED_B1.c: 154: {
 14632                           ;LED_B1.c: 158: RB5=0;
 14633  0895  128D               	bcf	13,5	;volatile
 14634                           
 14635                           ;LED_B1.c: 160: }
 14636                           ;LED_B1.c: 162: }
 14637  0896  0008               	return
 14638  0897                     l5999:	
 14639                           
 14640                           ;LED_B1.c: 163: else if(command == 10)
 14641  0897  0822               	movf	setLED@command,w
 14642  0898  3A0A               	xorlw	10
 14643  0899  1D03               	skipz
 14644  089A  28BF               	goto	l6019
 14645                           
 14646                           ;LED_B1.c: 164: {
 14647                           ;LED_B1.c: 165: LED->GO=0;
 14648  089B  0021               	movlb	1	; select bank1
 14649  089C  083E               	movf	_LED^(0+128),w
 14650  089D  0086               	movwf	6
 14651  089E  0187               	clrf	7
 14652  089F  1081               	bcf	1,1
 14653                           
 14654                           ;LED_B1.c: 166: LED->Time=0;
 14655  08A0  0A3E               	incf	_LED^(0+128),w
 14656  08A1  0086               	movwf	6
 14657  08A2  0187               	clrf	7
 14658  08A3  3000               	movlw	0
 14659  08A4  3FC0               	movwi [0]fsr1
 14660  08A5  3FC1               	movwi [1]fsr1
 14661                           
 14662                           ;LED_B1.c: 168: if(led == 1)
 14663  08A6  0020               	movlb	0	; select bank0
 14664  08A7  0823               	movf	setLED@led,w
 14665  08A8  3A01               	xorlw	1
 14666  08A9  1D03               	skipz
 14667  08AA  28AD               	goto	l6007
 14668                           
 14669                           ;LED_B1.c: 169: {
 14670                           ;LED_B1.c: 173: RC7=1;
 14671  08AB  178E               	bsf	14,7	;volatile
 14672                           
 14673                           ;LED_B1.c: 175: }
 14674  08AC  0008               	return
 14675  08AD                     l6007:	
 14676                           
 14677                           ;LED_B1.c: 178: else if(led == 2)
 14678  08AD  0823               	movf	setLED@led,w
 14679  08AE  3A02               	xorlw	2
 14680  08AF  1D03               	skipz
 14681  08B0  28B3               	goto	l6011
 14682                           
 14683                           ;LED_B1.c: 179: {
 14684                           ;LED_B1.c: 183: RA3=1;
 14685  08B1  158C               	bsf	12,3	;volatile
 14686                           
 14687                           ;LED_B1.c: 185: }
 14688  08B2  0008               	return
 14689  08B3                     l6011:	
 14690                           
 14691                           ;LED_B1.c: 188: else if(led == 3)
 14692  08B3  0823               	movf	setLED@led,w
 14693  08B4  3A03               	xorlw	3
 14694  08B5  1D03               	skipz
 14695  08B6  28B9               	goto	l6015
 14696                           
 14697                           ;LED_B1.c: 189: {
 14698                           ;LED_B1.c: 193: RC6=1;
 14699  08B7  170E               	bsf	14,6	;volatile
 14700                           
 14701                           ;LED_B1.c: 195: }
 14702  08B8  0008               	return
 14703  08B9                     l6015:	
 14704                           
 14705                           ;LED_B1.c: 198: else if(led == 99)
 14706  08B9  0823               	movf	setLED@led,w
 14707  08BA  3A63               	xorlw	99
 14708  08BB  1D03               	skipz
 14709  08BC  0008               	return
 14710                           
 14711                           ;LED_B1.c: 199: {
 14712                           ;LED_B1.c: 203: RB5=1;
 14713  08BD  168D               	bsf	13,5	;volatile
 14714                           
 14715                           ;LED_B1.c: 205: }
 14716                           ;LED_B1.c: 207: }
 14717  08BE  0008               	return
 14718  08BF                     l6019:	
 14719                           
 14720                           ;LED_B1.c: 208: else if(command == 11)
 14721  08BF  0822               	movf	setLED@command,w
 14722  08C0  3A0B               	xorlw	11
 14723  08C1  1D03               	skipz
 14724  08C2  0008               	return
 14725                           
 14726                           ;LED_B1.c: 209: {
 14727                           ;LED_B1.c: 210: LED->GO=1;
 14728  08C3  0021               	movlb	1	; select bank1
 14729  08C4  083E               	movf	_LED^(0+128),w
 14730  08C5  0086               	movwf	6
 14731  08C6  0187               	clrf	7
 14732  08C7  1481               	bsf	1,1
 14733  08C8  0008               	return
 14734  08C9                     __end_of_setLED:	
 14735                           
 14736                           	psect	text87
 14737  10B3                     __ptext87:	
 14738 ;; *************** function _LedPointSelect *****************
 14739 ;; Defined at:
 14740 ;;		line 7 in file "../src/LED_B1.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;  led             1    wreg     unsigned char 
 14743 ;; Auto vars:     Size  Location     Type
 14744 ;;  led             1    1[BANK0 ] unsigned char 
 14745 ;; Return value:  Size  Location     Type
 14746 ;;		None               void
 14747 ;; Registers used:
 14748 ;;		wreg
 14749 ;; Tracked objects:
 14750 ;;		On entry : 0/0
 14751 ;;		On exit  : 0/0
 14752 ;;		Unchanged: 0/0
 14753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;Total ram usage:        2 bytes
 14759 ;; Hardware stack levels used:    1
 14760 ;; Hardware stack levels required when called:    5
 14761 ;; This function calls:
 14762 ;;		Nothing
 14763 ;; This function is called by:
 14764 ;;		_setLED_Initialization
 14765 ;;		_setLED
 14766 ;;		_setLED_Main
 14767 ;; This function uses a non-reentrant model
 14768 ;;
 14769                           
 14770                           
 14771                           ;psect for function _LedPointSelect
 14772  10B3                     _LedPointSelect:	
 14773                           
 14774                           ;incstack = 0
 14775                           ; Regs used in _LedPointSelect: [wreg]
 14776                           ;LedPointSelect@led stored from wreg
 14777  10B3  0020               	movlb	0	; select bank0
 14778  10B4  00A1               	movwf	LedPointSelect@led
 14779                           
 14780                           ;LED_B1.c: 10: if(led == 1)
 14781  10B5  0821               	movf	LedPointSelect@led,w
 14782  10B6  3A01               	xorlw	1
 14783  10B7  1D03               	skipz
 14784  10B8  28BF               	goto	l5851
 14785                           
 14786                           ;LED_B1.c: 11: {
 14787                           ;LED_B1.c: 12: LED=&VarLED1;
 14788  10B9  30D1               	movlw	_VarLED1& (0+255)
 14789  10BA  00A0               	movwf	??_LedPointSelect
 14790  10BB  0820               	movf	??_LedPointSelect,w
 14791  10BC  0021               	movlb	1	; select bank1
 14792  10BD  00BE               	movwf	_LED^(0+128)
 14793                           
 14794                           ;LED_B1.c: 13: }
 14795  10BE  0008               	return
 14796  10BF                     l5851:	
 14797                           
 14798                           ;LED_B1.c: 16: else if(led == 2)
 14799  10BF  0020               	movlb	0	; select bank0
 14800  10C0  0821               	movf	LedPointSelect@led,w
 14801  10C1  3A02               	xorlw	2
 14802  10C2  1D03               	skipz
 14803  10C3  28CA               	goto	l5855
 14804                           
 14805                           ;LED_B1.c: 17: {
 14806                           ;LED_B1.c: 18: LED=&VarLED2;
 14807  10C4  30D5               	movlw	_VarLED2& (0+255)
 14808  10C5  00A0               	movwf	??_LedPointSelect
 14809  10C6  0820               	movf	??_LedPointSelect,w
 14810  10C7  0021               	movlb	1	; select bank1
 14811  10C8  00BE               	movwf	_LED^(0+128)
 14812                           
 14813                           ;LED_B1.c: 19: }
 14814  10C9  0008               	return
 14815  10CA                     l5855:	
 14816                           
 14817                           ;LED_B1.c: 22: else if(led == 3)
 14818  10CA  0020               	movlb	0	; select bank0
 14819  10CB  0821               	movf	LedPointSelect@led,w
 14820  10CC  3A03               	xorlw	3
 14821  10CD  1D03               	skipz
 14822  10CE  28D5               	goto	l5859
 14823                           
 14824                           ;LED_B1.c: 23: {
 14825                           ;LED_B1.c: 24: LED=&VarLED3;
 14826  10CF  30D9               	movlw	_VarLED3& (0+255)
 14827  10D0  00A0               	movwf	??_LedPointSelect
 14828  10D1  0820               	movf	??_LedPointSelect,w
 14829  10D2  0021               	movlb	1	; select bank1
 14830  10D3  00BE               	movwf	_LED^(0+128)
 14831                           
 14832                           ;LED_B1.c: 25: }
 14833  10D4  0008               	return
 14834  10D5                     l5859:	
 14835                           
 14836                           ;LED_B1.c: 28: else if(led == 99)
 14837  10D5  0020               	movlb	0	; select bank0
 14838  10D6  0821               	movf	LedPointSelect@led,w
 14839  10D7  3A63               	xorlw	99
 14840  10D8  1D03               	skipz
 14841  10D9  0008               	return
 14842                           
 14843                           ;LED_B1.c: 29: {
 14844                           ;LED_B1.c: 30: LED=&VarErrLED;
 14845  10DA  30CD               	movlw	_VarErrLED& (0+255)
 14846  10DB  00A0               	movwf	??_LedPointSelect
 14847  10DC  0820               	movf	??_LedPointSelect,w
 14848  10DD  0021               	movlb	1	; select bank1
 14849  10DE  00BE               	movwf	_LED^(0+128)
 14850  10DF  0008               	return
 14851  10E0                     __end_of_LedPointSelect:	
 14852                           
 14853                           	psect	text88
 14854  0BD2                     __ptext88:	
 14855 ;; *************** function _setBuz *****************
 14856 ;; Defined at:
 14857 ;;		line 30 in file "../src/Buzzer_B1.c"
 14858 ;; Parameters:    Size  Location     Type
 14859 ;;  count           1    wreg     unsigned char 
 14860 ;;  time            2    9[BANK0 ] int 
 14861 ;; Auto vars:     Size  Location     Type
 14862 ;;  count           1   12[BANK0 ] unsigned char 
 14863 ;; Return value:  Size  Location     Type
 14864 ;;		None               void
 14865 ;; Registers used:
 14866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14867 ;; Tracked objects:
 14868 ;;		On entry : 0/0
 14869 ;;		On exit  : 0/0
 14870 ;;		Unchanged: 0/0
 14871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14872 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;Total ram usage:        4 bytes
 14877 ;; Hardware stack levels used:    1
 14878 ;; Hardware stack levels required when called:    6
 14879 ;; This function calls:
 14880 ;;		___awdiv
 14881 ;; This function is called by:
 14882 ;;		_CC2500_RxData
 14883 ;;		_setDimmerLights_Main
 14884 ;;		_DimmerLights_Exceptions
 14885 ;;		_my_Main
 14886 ;;		_setOverTemp_Exceptions
 14887 ;;		_setLog_Code
 14888 ;;		_setControl_Lights_Table
 14889 ;;		_setRFSW_Control
 14890 ;;		_setSw_Main
 14891 ;;		_Sw_DimmerOnFunc
 14892 ;; This function uses a non-reentrant model
 14893 ;;
 14894                           
 14895                           
 14896                           ;psect for function _setBuz
 14897  0BD2                     _setBuz:	
 14898                           
 14899                           ;incstack = 0
 14900                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14901                           ;setBuz@count stored from wreg
 14902  0BD2  0020               	movlb	0	; select bank0
 14903  0BD3  00AC               	movwf	setBuz@count
 14904                           
 14905                           ;Buzzer_B1.c: 31: Buz = &Buz1;
 14906  0BD4  304D               	movlw	_Buz1& (0+255)
 14907  0BD5  00AB               	movwf	??_setBuz
 14908  0BD6  082B               	movf	??_setBuz,w
 14909  0BD7  0021               	movlb	1	; select bank1
 14910  0BD8  00B7               	movwf	_Buz^(0+128)
 14911                           
 14912                           ;Buzzer_B1.c: 32: time /= 10;
 14913  0BD9  300A               	movlw	10
 14914  0BDA  0020               	movlb	0	; select bank0
 14915  0BDB  00A0               	movwf	___awdiv@divisor
 14916  0BDC  3000               	movlw	0
 14917  0BDD  00A1               	movwf	___awdiv@divisor+1
 14918  0BDE  082A               	movf	setBuz@time+1,w
 14919  0BDF  01A3               	clrf	___awdiv@dividend+1
 14920  0BE0  07A3               	addwf	___awdiv@dividend+1,f
 14921  0BE1  0829               	movf	setBuz@time,w
 14922  0BE2  01A2               	clrf	___awdiv@dividend
 14923  0BE3  07A2               	addwf	___awdiv@dividend,f
 14924  0BE4  3188  2005  318B   	fcall	___awdiv
 14925  0BE7  0020               	movlb	0	; select bank0
 14926  0BE8  0821               	movf	?___awdiv+1,w
 14927  0BE9  01AA               	clrf	setBuz@time+1
 14928  0BEA  07AA               	addwf	setBuz@time+1,f
 14929  0BEB  0820               	movf	?___awdiv,w
 14930  0BEC  01A9               	clrf	setBuz@time
 14931  0BED  07A9               	addwf	setBuz@time,f
 14932                           
 14933                           ;Buzzer_B1.c: 33: if (Buz->Enable == 1) {
 14934  0BEE  0021               	movlb	1	; select bank1
 14935  0BEF  0837               	movf	_Buz^(0+128),w
 14936  0BF0  0086               	movwf	6
 14937  0BF1  3001               	movlw	1	; select bank2/3
 14938  0BF2  0087               	movwf	7
 14939  0BF3  1C01               	btfss	1,0
 14940  0BF4  0008               	return
 14941                           
 14942                           ;Buzzer_B1.c: 34: if (Buz->GO == 0) {
 14943  0BF5  0837               	movf	_Buz^(0+128),w
 14944  0BF6  0086               	movwf	6
 14945  0BF7  3001               	movlw	1	; select bank2/3
 14946  0BF8  0087               	movwf	7
 14947  0BF9  1881               	btfsc	1,1
 14948  0BFA  2C20               	goto	l5947
 14949                           
 14950                           ;Buzzer_B1.c: 35: Buz->GO = 1;
 14951  0BFB  0837               	movf	_Buz^(0+128),w
 14952  0BFC  0086               	movwf	6
 14953  0BFD  3001               	movlw	1	; select bank2/3
 14954  0BFE  0087               	movwf	7
 14955  0BFF  1481               	bsf	1,1
 14956                           
 14957                           ;Buzzer_B1.c: 36: Buz->Counter = 0;
 14958  0C00  0A37               	incf	_Buz^(0+128),w
 14959  0C01  0086               	movwf	6
 14960  0C02  3001               	movlw	1	; select bank2/3
 14961  0C03  0087               	movwf	7
 14962  0C04  3000               	movlw	0
 14963  0C05  3FC0               	movwi [0]fsr1
 14964  0C06  3FC1               	movwi [1]fsr1
 14965                           
 14966                           ;Buzzer_B1.c: 37: Buz->Count = count;
 14967  0C07  0020               	movlb	0	; select bank0
 14968  0C08  082C               	movf	setBuz@count,w
 14969  0C09  00AB               	movwf	??_setBuz
 14970  0C0A  0021               	movlb	1	; select bank1
 14971  0C0B  0837               	movf	_Buz^(0+128),w
 14972  0C0C  3E03               	addlw	3
 14973  0C0D  0086               	movwf	6
 14974  0C0E  3001               	movlw	1	; select bank2/3
 14975  0C0F  0087               	movwf	7
 14976  0C10  0020               	movlb	0	; select bank0
 14977  0C11  082B               	movf	??_setBuz,w
 14978  0C12  0081               	movwf	1
 14979                           
 14980                           ;Buzzer_B1.c: 38: Buz->TimeValue = time;
 14981  0C13  0021               	movlb	1	; select bank1
 14982  0C14  0837               	movf	_Buz^(0+128),w
 14983  0C15  3E06               	addlw	6
 14984  0C16  0086               	movwf	6
 14985  0C17  3001               	movlw	1	; select bank2/3
 14986  0C18  0087               	movwf	7
 14987  0C19  0020               	movlb	0	; select bank0
 14988  0C1A  0829               	movf	setBuz@time,w
 14989  0C1B  3FC0               	movwi [0]fsr1
 14990  0C1C  082A               	movf	setBuz@time+1,w
 14991  0C1D  3FC1               	movwi [1]fsr1
 14992                           
 14993                           ;Buzzer_B1.c: 39: RB3 = 1;
 14994  0C1E  158D               	bsf	13,3	;volatile
 14995                           
 14996                           ;Buzzer_B1.c: 40: } else {
 14997  0C1F  0008               	return
 14998  0C20                     l5947:	
 14999                           
 15000                           ;Buzzer_B1.c: 41: if (Buz->BufferStatus1 == 0) {
 15001  0C20  0021               	movlb	1	; select bank1
 15002  0C21  0837               	movf	_Buz^(0+128),w
 15003  0C22  0086               	movwf	6
 15004  0C23  3001               	movlw	1	; select bank2/3
 15005  0C24  0087               	movwf	7
 15006  0C25  1981               	btfsc	1,3
 15007  0C26  2C44               	goto	l5951
 15008                           
 15009                           ;Buzzer_B1.c: 42: Buz->BufferStatus1 = 1;
 15010  0C27  0837               	movf	_Buz^(0+128),w
 15011  0C28  0086               	movwf	6
 15012  0C29  3001               	movlw	1	; select bank2/3
 15013  0C2A  0087               	movwf	7
 15014  0C2B  1581               	bsf	1,3
 15015                           
 15016                           ;Buzzer_B1.c: 43: Buz->CountBuffer1 = count;
 15017  0C2C  0020               	movlb	0	; select bank0
 15018  0C2D  082C               	movf	setBuz@count,w
 15019  0C2E  00AB               	movwf	??_setBuz
 15020  0C2F  0021               	movlb	1	; select bank1
 15021  0C30  0837               	movf	_Buz^(0+128),w
 15022  0C31  3E04               	addlw	4
 15023  0C32  0086               	movwf	6
 15024  0C33  3001               	movlw	1	; select bank2/3
 15025  0C34  0087               	movwf	7
 15026  0C35  0020               	movlb	0	; select bank0
 15027  0C36  082B               	movf	??_setBuz,w
 15028  0C37  0081               	movwf	1
 15029                           
 15030                           ;Buzzer_B1.c: 44: Buz->TimeValueBuffer1 = time;
 15031  0C38  0021               	movlb	1	; select bank1
 15032  0C39  0837               	movf	_Buz^(0+128),w
 15033  0C3A  3E08               	addlw	8
 15034  0C3B  0086               	movwf	6
 15035  0C3C  3001               	movlw	1	; select bank2/3
 15036  0C3D  0087               	movwf	7
 15037  0C3E  0020               	movlb	0	; select bank0
 15038  0C3F  0829               	movf	setBuz@time,w
 15039  0C40  3FC0               	movwi [0]fsr1
 15040  0C41  082A               	movf	setBuz@time+1,w
 15041  0C42  3FC1               	movwi [1]fsr1
 15042                           
 15043                           ;Buzzer_B1.c: 45: } else if (Buz->BufferStatus2 == 0) {
 15044  0C43  0008               	return
 15045  0C44                     l5951:	
 15046  0C44  0021               	movlb	1	; select bank1
 15047  0C45  0837               	movf	_Buz^(0+128),w
 15048  0C46  0086               	movwf	6
 15049  0C47  3001               	movlw	1	; select bank2/3
 15050  0C48  0087               	movwf	7
 15051  0C49  1A01               	btfsc	1,4
 15052  0C4A  0008               	return
 15053                           
 15054                           ;Buzzer_B1.c: 46: Buz->BufferStatus2 = 1;
 15055  0C4B  0837               	movf	_Buz^(0+128),w
 15056  0C4C  0086               	movwf	6
 15057  0C4D  3001               	movlw	1	; select bank2/3
 15058  0C4E  0087               	movwf	7
 15059  0C4F  1601               	bsf	1,4
 15060                           
 15061                           ;Buzzer_B1.c: 47: Buz->CountBuffer2 = count;
 15062  0C50  0020               	movlb	0	; select bank0
 15063  0C51  082C               	movf	setBuz@count,w
 15064  0C52  00AB               	movwf	??_setBuz
 15065  0C53  0021               	movlb	1	; select bank1
 15066  0C54  0837               	movf	_Buz^(0+128),w
 15067  0C55  3E05               	addlw	5
 15068  0C56  0086               	movwf	6
 15069  0C57  3001               	movlw	1	; select bank2/3
 15070  0C58  0087               	movwf	7
 15071  0C59  0020               	movlb	0	; select bank0
 15072  0C5A  082B               	movf	??_setBuz,w
 15073  0C5B  0081               	movwf	1
 15074                           
 15075                           ;Buzzer_B1.c: 48: Buz->TimeValueBuffer2 = time;
 15076  0C5C  0021               	movlb	1	; select bank1
 15077  0C5D  0837               	movf	_Buz^(0+128),w
 15078  0C5E  3E0A               	addlw	10
 15079  0C5F  0086               	movwf	6
 15080  0C60  3001               	movlw	1	; select bank2/3
 15081  0C61  0087               	movwf	7
 15082  0C62  0020               	movlb	0	; select bank0
 15083  0C63  0829               	movf	setBuz@time,w
 15084  0C64  3FC0               	movwi [0]fsr1
 15085  0C65  082A               	movf	setBuz@time+1,w
 15086  0C66  3FC1               	movwi [1]fsr1
 15087  0C67  0008               	return
 15088  0C68                     __end_of_setBuz:	
 15089                           
 15090                           	psect	text89
 15091  0805                     __ptext89:	
 15092 ;; *************** function ___awdiv *****************
 15093 ;; Defined at:
 15094 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15095 ;; Parameters:    Size  Location     Type
 15096 ;;  divisor         2    0[BANK0 ] int 
 15097 ;;  dividend        2    2[BANK0 ] int 
 15098 ;; Auto vars:     Size  Location     Type
 15099 ;;  quotient        2    7[BANK0 ] int 
 15100 ;;  sign            1    6[BANK0 ] unsigned char 
 15101 ;;  counter         1    5[BANK0 ] unsigned char 
 15102 ;; Return value:  Size  Location     Type
 15103 ;;                  2    0[BANK0 ] int 
 15104 ;; Registers used:
 15105 ;;		wreg, status,2, status,0
 15106 ;; Tracked objects:
 15107 ;;		On entry : 0/0
 15108 ;;		On exit  : 0/0
 15109 ;;		Unchanged: 0/0
 15110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15112 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15114 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15115 ;;Total ram usage:        9 bytes
 15116 ;; Hardware stack levels used:    1
 15117 ;; Hardware stack levels required when called:    5
 15118 ;; This function calls:
 15119 ;;		Nothing
 15120 ;; This function is called by:
 15121 ;;		_setBuz
 15122 ;; This function uses a non-reentrant model
 15123 ;;
 15124                           
 15125                           
 15126                           ;psect for function ___awdiv
 15127  0805                     ___awdiv:	
 15128                           
 15129                           ;incstack = 0
 15130                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15131  0805  0020               	movlb	0	; select bank0
 15132  0806  01A6               	clrf	___awdiv@sign
 15133  0807  1FA1               	btfss	___awdiv@divisor+1,7
 15134  0808  2810               	goto	l5899
 15135  0809  09A0               	comf	___awdiv@divisor,f
 15136  080A  09A1               	comf	___awdiv@divisor+1,f
 15137  080B  0AA0               	incf	___awdiv@divisor,f
 15138  080C  1903               	skipnz
 15139  080D  0AA1               	incf	___awdiv@divisor+1,f
 15140  080E  01A6               	clrf	___awdiv@sign
 15141  080F  0AA6               	incf	___awdiv@sign,f
 15142  0810                     l5899:	
 15143  0810  1FA3               	btfss	___awdiv@dividend+1,7
 15144  0811  281B               	goto	l5905
 15145  0812  09A2               	comf	___awdiv@dividend,f
 15146  0813  09A3               	comf	___awdiv@dividend+1,f
 15147  0814  0AA2               	incf	___awdiv@dividend,f
 15148  0815  1903               	skipnz
 15149  0816  0AA3               	incf	___awdiv@dividend+1,f
 15150  0817  3001               	movlw	1
 15151  0818  00A4               	movwf	??___awdiv
 15152  0819  0824               	movf	??___awdiv,w
 15153  081A  06A6               	xorwf	___awdiv@sign,f
 15154  081B                     l5905:	
 15155  081B  01A7               	clrf	___awdiv@quotient
 15156  081C  01A8               	clrf	___awdiv@quotient+1
 15157  081D  0821               	movf	___awdiv@divisor+1,w
 15158  081E  0420               	iorwf	___awdiv@divisor,w
 15159  081F  1903               	skipnz
 15160  0820  284A               	goto	l5927
 15161  0821  01A5               	clrf	___awdiv@counter
 15162  0822  0AA5               	incf	___awdiv@counter,f
 15163  0823                     l5915:	
 15164  0823  1BA1               	btfsc	___awdiv@divisor+1,7
 15165  0824  282F               	goto	l5917
 15166  0825  3001               	movlw	1
 15167  0826                     u4565:	
 15168  0826  35A0               	lslf	___awdiv@divisor,f
 15169  0827  0DA1               	rlf	___awdiv@divisor+1,f
 15170  0828  0B89               	decfsz	9,f
 15171  0829  2826               	goto	u4565
 15172  082A  3001               	movlw	1
 15173  082B  00A4               	movwf	??___awdiv
 15174  082C  0824               	movf	??___awdiv,w
 15175  082D  07A5               	addwf	___awdiv@counter,f
 15176  082E  2823               	goto	l5915
 15177  082F                     l5917:	
 15178  082F  3001               	movlw	1
 15179  0830                     u4585:	
 15180  0830  35A7               	lslf	___awdiv@quotient,f
 15181  0831  0DA8               	rlf	___awdiv@quotient+1,f
 15182  0832  0B89               	decfsz	9,f
 15183  0833  2830               	goto	u4585
 15184  0834  0821               	movf	___awdiv@divisor+1,w
 15185  0835  0223               	subwf	___awdiv@dividend+1,w
 15186  0836  1D03               	skipz
 15187  0837  283A               	goto	u4595
 15188  0838  0820               	movf	___awdiv@divisor,w
 15189  0839  0222               	subwf	___awdiv@dividend,w
 15190  083A                     u4595:	
 15191  083A  1C03               	skipc
 15192  083B  2841               	goto	l5923
 15193  083C  0820               	movf	___awdiv@divisor,w
 15194  083D  02A2               	subwf	___awdiv@dividend,f
 15195  083E  0821               	movf	___awdiv@divisor+1,w
 15196  083F  3BA3               	subwfb	___awdiv@dividend+1,f
 15197  0840  1427               	bsf	___awdiv@quotient,0
 15198  0841                     l5923:	
 15199  0841  3001               	movlw	1
 15200  0842                     u4605:	
 15201  0842  36A1               	lsrf	___awdiv@divisor+1,f
 15202  0843  0CA0               	rrf	___awdiv@divisor,f
 15203  0844  0B89               	decfsz	9,f
 15204  0845  2842               	goto	u4605
 15205  0846  3001               	movlw	1
 15206  0847  02A5               	subwf	___awdiv@counter,f
 15207  0848  1D03               	btfss	3,2
 15208  0849  282F               	goto	l5917
 15209  084A                     l5927:	
 15210  084A  0826               	movf	___awdiv@sign,w
 15211  084B  1903               	btfsc	3,2
 15212  084C  2852               	goto	l5931
 15213  084D  09A7               	comf	___awdiv@quotient,f
 15214  084E  09A8               	comf	___awdiv@quotient+1,f
 15215  084F  0AA7               	incf	___awdiv@quotient,f
 15216  0850  1903               	skipnz
 15217  0851  0AA8               	incf	___awdiv@quotient+1,f
 15218  0852                     l5931:	
 15219  0852  0828               	movf	___awdiv@quotient+1,w
 15220  0853  01A1               	clrf	?___awdiv+1
 15221  0854  07A1               	addwf	?___awdiv+1,f
 15222  0855  0827               	movf	___awdiv@quotient,w
 15223  0856  01A0               	clrf	?___awdiv
 15224  0857  07A0               	addwf	?___awdiv,f
 15225  0858  0008               	return
 15226  0859                     __end_of___awdiv:	
 15227                           
 15228                           	psect	text90
 15229  1CCA                     __ptext90:	
 15230 ;; *************** function _DimmerLights_Close *****************
 15231 ;; Defined at:
 15232 ;;		line 396 in file "../src/Dimmer_B1.c"
 15233 ;; Parameters:    Size  Location     Type
 15234 ;;		None
 15235 ;; Auto vars:     Size  Location     Type
 15236 ;;		None
 15237 ;; Return value:  Size  Location     Type
 15238 ;;		None               void
 15239 ;; Registers used:
 15240 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15241 ;; Tracked objects:
 15242 ;;		On entry : 0/0
 15243 ;;		On exit  : 0/0
 15244 ;;		Unchanged: 0/0
 15245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;Total ram usage:        0 bytes
 15251 ;; Hardware stack levels used:    1
 15252 ;; Hardware stack levels required when called:    6
 15253 ;; This function calls:
 15254 ;;		_getDimmerLights_StatusFlag
 15255 ;;		_setMemory_GO
 15256 ;; This function is called by:
 15257 ;;		_DimmerLights_Main
 15258 ;; This function uses a non-reentrant model
 15259 ;;
 15260                           
 15261                           
 15262                           ;psect for function _DimmerLights_Close
 15263  1CCA                     _DimmerLights_Close:	
 15264                           
 15265                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 15266                           
 15267                           ;incstack = 0
 15268                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15269  1CCA  0021               	movlb	1	; select bank1
 15270  1CCB  0839               	movf	_Dimmer^(0+128),w
 15271  1CCC  0086               	movwf	6
 15272  1CCD  0187               	clrf	7
 15273  1CCE  1C01               	btfss	1,0
 15274  1CCF  0008               	return
 15275                           
 15276                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 15277  1CD0  0839               	movf	_Dimmer^(0+128),w
 15278  1CD1  0086               	movwf	6
 15279  1CD2  0187               	clrf	7
 15280  1CD3  1001               	bcf	1,0
 15281                           
 15282                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 15283  1CD4  319C  24B7  319C   	fcall	_getDimmerLights_StatusFlag
 15284  1CD7  3800               	iorlw	0
 15285  1CD8  1D03               	skipz
 15286  1CD9  0008               	return
 15287                           
 15288                           ;Dimmer_B1.c: 400: ;;
 15289                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 15290  1CDA  3001               	movlw	1
 15291  1CDB  319E  26CF         	fcall	_setMemory_GO
 15292  1CDD  0008               	return
 15293  1CDE                     __end_of_DimmerLights_Close:	
 15294                           
 15295                           	psect	text91
 15296  1ECF                     __ptext91:	
 15297 ;; *************** function _setMemory_GO *****************
 15298 ;; Defined at:
 15299 ;;		line 882 in file "../src/MCU_B1.c"
 15300 ;; Parameters:    Size  Location     Type
 15301 ;;  command         1    wreg     unsigned char 
 15302 ;; Auto vars:     Size  Location     Type
 15303 ;;  command         1    2[BANK0 ] unsigned char 
 15304 ;; Return value:  Size  Location     Type
 15305 ;;		None               void
 15306 ;; Registers used:
 15307 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15308 ;; Tracked objects:
 15309 ;;		On entry : 0/0
 15310 ;;		On exit  : 0/0
 15311 ;;		Unchanged: 0/0
 15312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;Total ram usage:        3 bytes
 15318 ;; Hardware stack levels used:    1
 15319 ;; Hardware stack levels required when called:    5
 15320 ;; This function calls:
 15321 ;;		Nothing
 15322 ;; This function is called by:
 15323 ;;		_DimmerLights_Close
 15324 ;;		_setDimmerLights
 15325 ;; This function uses a non-reentrant model
 15326 ;;
 15327                           
 15328                           
 15329                           ;psect for function _setMemory_GO
 15330  1ECF                     _setMemory_GO:	
 15331                           
 15332                           ;incstack = 0
 15333                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 15334                           ;setMemory_GO@command stored from wreg
 15335  1ECF  0020               	movlb	0	; select bank0
 15336  1ED0  00A2               	movwf	setMemory_GO@command
 15337                           
 15338                           ;MCU_B1.c: 883: Memory->GO = command;
 15339  1ED1  0021               	movlb	1	; select bank1
 15340  1ED2  0868               	movf	_Memory^(0+128),w
 15341  1ED3  3E24               	addlw	36
 15342  1ED4  0086               	movwf	6
 15343  1ED5  3002               	movlw	2	; select bank4/5
 15344  1ED6  0087               	movwf	7
 15345  1ED7  0020               	movlb	0	; select bank0
 15346  1ED8  0822               	movf	setMemory_GO@command,w
 15347  1ED9  1081               	bcf	1,1
 15348  1EDA  1D03               	skipz
 15349  1EDB  1481               	bsf	1,1
 15350                           
 15351                           ;MCU_B1.c: 884: if (command == 0) {
 15352  1EDC  08A2               	movf	setMemory_GO@command,f
 15353  1EDD  1D03               	skipz
 15354  1EDE  0008               	return
 15355                           
 15356                           ;MCU_B1.c: 885: Memory->Time = command;
 15357  1EDF  0822               	movf	setMemory_GO@command,w
 15358  1EE0  00A0               	movwf	??_setMemory_GO
 15359  1EE1  01A1               	clrf	??_setMemory_GO+1
 15360  1EE2  0021               	movlb	1	; select bank1
 15361  1EE3  0868               	movf	_Memory^(0+128),w
 15362  1EE4  3E22               	addlw	34
 15363  1EE5  0086               	movwf	6
 15364  1EE6  3002               	movlw	2	; select bank4/5
 15365  1EE7  0087               	movwf	7
 15366  1EE8  0020               	movlb	0	; select bank0
 15367  1EE9  0820               	movf	??_setMemory_GO,w
 15368  1EEA  3FC0               	movwi [0]fsr1
 15369  1EEB  0821               	movf	??_setMemory_GO+1,w
 15370  1EEC  3FC1               	movwi [1]fsr1
 15371  1EED  0008               	return
 15372  1EEE                     __end_of_setMemory_GO:	
 15373                           
 15374                           	psect	text92
 15375  1CB7                     __ptext92:	
 15376 ;; *************** function _getDimmerLights_StatusFlag *****************
 15377 ;; Defined at:
 15378 ;;		line 475 in file "../src/Dimmer_B1.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;		None
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;  Status          1    1[BANK0 ] unsigned char 
 15383 ;; Return value:  Size  Location     Type
 15384 ;;                  1    wreg      unsigned char 
 15385 ;; Registers used:
 15386 ;;		wreg, status,2
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;Total ram usage:        3 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    5
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		_DimmerLights_Close
 15403 ;;		_DimmerLights_Exceptions
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407                           
 15408                           ;psect for function _getDimmerLights_StatusFlag
 15409  1CB7                     _getDimmerLights_StatusFlag:	
 15410                           
 15411                           ;Dimmer_B1.c: 476: char Status = 0;
 15412                           
 15413                           ;incstack = 0
 15414                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 15415  1CB7  0020               	movlb	0	; select bank0
 15416  1CB8  01A1               	clrf	getDimmerLights_StatusFlag@Status
 15417                           
 15418                           ;Dimmer_B1.c: 479: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 15419  1CB9  01A2               	clrf	_getDimmerLights_StatusFlag$2065
 15420  1CBA  0AA2               	incf	_getDimmerLights_StatusFlag$2065,f
 15421  1CBB  0022               	movlb	2	; select bank2
 15422  1CBC  1F20               	btfss	_DimmerLights1^(0+256),6
 15423  1CBD  1B2F               	btfsc	_DimmerLights2^(0+256),6
 15424  1CBE  2CC3               	goto	l6127
 15425  1CBF  1B3E               	btfsc	_DimmerLights3^(0+256),6
 15426  1CC0  2CC3               	goto	l6127
 15427  1CC1  0020               	movlb	0	; select bank0
 15428  1CC2  01A2               	clrf	_getDimmerLights_StatusFlag$2065
 15429  1CC3                     l6127:	
 15430  1CC3  0020               	movlb	0	; select bank0
 15431  1CC4  0822               	movf	_getDimmerLights_StatusFlag$2065,w
 15432  1CC5  00A0               	movwf	??_getDimmerLights_StatusFlag
 15433  1CC6  0820               	movf	??_getDimmerLights_StatusFlag,w
 15434  1CC7  00A1               	movwf	getDimmerLights_StatusFlag@Status
 15435                           
 15436                           ;Dimmer_B1.c: 490: return Status;
 15437  1CC8  0821               	movf	getDimmerLights_StatusFlag@Status,w
 15438  1CC9  0008               	return
 15439  1CCA                     __end_of_getDimmerLights_StatusFlag:	
 15440                           
 15441                           	psect	text93
 15442  1F4E                     __ptext93:	
 15443 ;; *************** function _DimmerLights_Initialization *****************
 15444 ;; Defined at:
 15445 ;;		line 334 in file "../src/Dimmer_B1.c"
 15446 ;; Parameters:    Size  Location     Type
 15447 ;;		None
 15448 ;; Auto vars:     Size  Location     Type
 15449 ;;		None
 15450 ;; Return value:  Size  Location     Type
 15451 ;;		None               void
 15452 ;; Registers used:
 15453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15454 ;; Tracked objects:
 15455 ;;		On entry : 0/0
 15456 ;;		On exit  : 0/0
 15457 ;;		Unchanged: 0/0
 15458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;Total ram usage:        1 bytes
 15464 ;; Hardware stack levels used:    1
 15465 ;; Hardware stack levels required when called:    7
 15466 ;; This function calls:
 15467 ;;		_Dimmer_Initialization
 15468 ;;		_setDimmerLights_Initialization
 15469 ;; This function is called by:
 15470 ;;		_main
 15471 ;; This function uses a non-reentrant model
 15472 ;;
 15473                           
 15474                           
 15475                           ;psect for function _DimmerLights_Initialization
 15476  1F4E                     _DimmerLights_Initialization:	
 15477                           
 15478                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 15479                           
 15480                           ;incstack = 0
 15481                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15482  1F4E  3020               	movlw	_DimmerLights1& (0+255)
 15483  1F4F  0020               	movlb	0	; select bank0
 15484  1F50  00A4               	movwf	??_DimmerLights_Initialization
 15485  1F51  0824               	movf	??_DimmerLights_Initialization,w
 15486  1F52  0021               	movlb	1	; select bank1
 15487  1F53  00BA               	movwf	_DimmerLights11^(0+128)
 15488                           
 15489                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 15490  1F54  3001               	movlw	1
 15491  1F55  3190  2086  319F   	fcall	_setDimmerLights_Initialization
 15492                           
 15493                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 15494  1F58  302F               	movlw	_DimmerLights2& (0+255)
 15495  1F59  0020               	movlb	0	; select bank0
 15496  1F5A  00A4               	movwf	??_DimmerLights_Initialization
 15497  1F5B  0824               	movf	??_DimmerLights_Initialization,w
 15498  1F5C  0021               	movlb	1	; select bank1
 15499  1F5D  00BB               	movwf	_DimmerLights22^(0+128)
 15500                           
 15501                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 15502  1F5E  3002               	movlw	2
 15503  1F5F  3190  2086  319F   	fcall	_setDimmerLights_Initialization
 15504                           
 15505                           ;Dimmer_B1.c: 347: DimmerLights33 = &DimmerLights3;
 15506  1F62  303E               	movlw	_DimmerLights3& (0+255)
 15507  1F63  0020               	movlb	0	; select bank0
 15508  1F64  00A4               	movwf	??_DimmerLights_Initialization
 15509  1F65  0824               	movf	??_DimmerLights_Initialization,w
 15510  1F66  0021               	movlb	1	; select bank1
 15511  1F67  00BC               	movwf	_DimmerLights33^(0+128)
 15512                           
 15513                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(3);
 15514  1F68  3003               	movlw	3
 15515  1F69  3190  2086  319F   	fcall	_setDimmerLights_Initialization
 15516                           
 15517                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 15518  1F6C  319B  2310         	fcall	_Dimmer_Initialization
 15519  1F6E  0008               	return
 15520  1F6F                     __end_of_DimmerLights_Initialization:	
 15521                           
 15522                           	psect	text94
 15523  1086                     __ptext94:	
 15524 ;; *************** function _setDimmerLights_Initialization *****************
 15525 ;; Defined at:
 15526 ;;		line 357 in file "../src/Dimmer_B1.c"
 15527 ;; Parameters:    Size  Location     Type
 15528 ;;  lights          1    wreg     unsigned char 
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  lights          1    3[BANK0 ] unsigned char 
 15531 ;; Return value:  Size  Location     Type
 15532 ;;		None               void
 15533 ;; Registers used:
 15534 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15535 ;; Tracked objects:
 15536 ;;		On entry : 0/0
 15537 ;;		On exit  : 0/0
 15538 ;;		Unchanged: 0/0
 15539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15542 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15543 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15544 ;;Total ram usage:        2 bytes
 15545 ;; Hardware stack levels used:    1
 15546 ;; Hardware stack levels required when called:    6
 15547 ;; This function calls:
 15548 ;;		_DimmerLightsPointSelect
 15549 ;; This function is called by:
 15550 ;;		_DimmerLights_Initialization
 15551 ;; This function uses a non-reentrant model
 15552 ;;
 15553                           
 15554                           
 15555                           ;psect for function _setDimmerLights_Initialization
 15556  1086                     _setDimmerLights_Initialization:	
 15557                           
 15558                           ;incstack = 0
 15559                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15560                           ;setDimmerLights_Initialization@lights stored from wreg
 15561  1086  0020               	movlb	0	; select bank0
 15562  1087  00A3               	movwf	setDimmerLights_Initialization@lights
 15563                           
 15564                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 15565  1088  0823               	movf	setDimmerLights_Initialization@lights,w
 15566  1089  319D  25CD         	fcall	_DimmerLightsPointSelect
 15567                           
 15568                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 15569  108B  0878               	movf	_DimmerLights,w
 15570  108C  3E09               	addlw	9
 15571  108D  0086               	movwf	6
 15572  108E  3001               	movlw	1	; select bank2/3
 15573  108F  0087               	movwf	7
 15574  1090  1501               	bsf	1,2
 15575                           
 15576                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 15577  1091  3004               	movlw	4
 15578  1092  0020               	movlb	0	; select bank0
 15579  1093  00A2               	movwf	??_setDimmerLights_Initialization
 15580  1094  0878               	movf	_DimmerLights,w
 15581  1095  3E05               	addlw	5
 15582  1096  0086               	movwf	6
 15583  1097  3001               	movlw	1	; select bank2/3
 15584  1098  0087               	movwf	7
 15585  1099  0822               	movf	??_setDimmerLights_Initialization,w
 15586  109A  0081               	movwf	1
 15587                           
 15588                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 15589  109B  303C               	movlw	60
 15590  109C  00A2               	movwf	??_setDimmerLights_Initialization
 15591  109D  0878               	movf	_DimmerLights,w
 15592  109E  3E06               	addlw	6
 15593  109F  0086               	movwf	6
 15594  10A0  3001               	movlw	1	; select bank2/3
 15595  10A1  0087               	movwf	7
 15596  10A2  0822               	movf	??_setDimmerLights_Initialization,w
 15597  10A3  0081               	movwf	1
 15598                           
 15599                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 15600  10A4  0878               	movf	_DimmerLights,w
 15601  10A5  3E06               	addlw	6
 15602  10A6  0086               	movwf	6
 15603  10A7  3001               	movlw	1	; select bank2/3
 15604  10A8  0087               	movwf	7
 15605  10A9  0801               	movf	1,w
 15606  10AA  00A2               	movwf	??_setDimmerLights_Initialization
 15607  10AB  0878               	movf	_DimmerLights,w
 15608  10AC  3E04               	addlw	4
 15609  10AD  0086               	movwf	6
 15610  10AE  3001               	movlw	1	; select bank2/3
 15611  10AF  0087               	movwf	7
 15612  10B0  0822               	movf	??_setDimmerLights_Initialization,w
 15613  10B1  0081               	movwf	1
 15614  10B2  0008               	return
 15615  10B3                     __end_of_setDimmerLights_Initialization:	
 15616                           
 15617                           	psect	text95
 15618  1DCD                     __ptext95:	
 15619 ;; *************** function _DimmerLightsPointSelect *****************
 15620 ;; Defined at:
 15621 ;;		line 315 in file "../src/Dimmer_B1.c"
 15622 ;; Parameters:    Size  Location     Type
 15623 ;;  lights          1    wreg     unsigned char 
 15624 ;; Auto vars:     Size  Location     Type
 15625 ;;  lights          1    1[BANK0 ] unsigned char 
 15626 ;; Return value:  Size  Location     Type
 15627 ;;		None               void
 15628 ;; Registers used:
 15629 ;;		wreg
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15639 ;;Total ram usage:        2 bytes
 15640 ;; Hardware stack levels used:    1
 15641 ;; Hardware stack levels required when called:    5
 15642 ;; This function calls:
 15643 ;;		Nothing
 15644 ;; This function is called by:
 15645 ;;		_setDimmerLights_Initialization
 15646 ;;		_setDimmerLights_Main
 15647 ;;		_setDimmerLights_ERROR
 15648 ;;		_setDimmerLights_TriggerERROR
 15649 ;;		_setDimmerLights
 15650 ;;		_setDimmerLights_Adj
 15651 ;;		_setDimmerLights_AdjRF
 15652 ;;		_setDimmerLights_Switch
 15653 ;;		_setDimmerLights_AdjGo
 15654 ;;		_setDimmerLights_Trigger
 15655 ;;		_setDimmerLights_TriggerAdj
 15656 ;;		_setDimmerLights_GO
 15657 ;;		_setDimmerLights_MaxmumValue
 15658 ;;		_setDimmerLights_Clear
 15659 ;; This function uses a non-reentrant model
 15660 ;;
 15661                           
 15662                           
 15663                           ;psect for function _DimmerLightsPointSelect
 15664  1DCD                     _DimmerLightsPointSelect:	
 15665                           
 15666                           ;incstack = 0
 15667                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15668                           ;DimmerLightsPointSelect@lights stored from wreg
 15669  1DCD  0020               	movlb	0	; select bank0
 15670  1DCE  00A1               	movwf	DimmerLightsPointSelect@lights
 15671                           
 15672                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15673  1DCF  0821               	movf	DimmerLightsPointSelect@lights,w
 15674  1DD0  3A01               	xorlw	1
 15675  1DD1  1D03               	skipz
 15676  1DD2  2DD7               	goto	l822
 15677                           
 15678                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15679  1DD3  3020               	movlw	_DimmerLights1& (0+255)
 15680  1DD4  00A0               	movwf	??_DimmerLightsPointSelect
 15681  1DD5  0820               	movf	??_DimmerLightsPointSelect,w
 15682  1DD6  00F8               	movwf	_DimmerLights
 15683  1DD7                     l822:	
 15684                           
 15685                           ;Dimmer_B1.c: 319: }
 15686                           ;Dimmer_B1.c: 322: if (lights == 2) {
 15687  1DD7  0821               	movf	DimmerLightsPointSelect@lights,w
 15688  1DD8  3A02               	xorlw	2
 15689  1DD9  1D03               	skipz
 15690  1DDA  2DDF               	goto	l823
 15691                           
 15692                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 15693  1DDB  302F               	movlw	_DimmerLights2& (0+255)
 15694  1DDC  00A0               	movwf	??_DimmerLightsPointSelect
 15695  1DDD  0820               	movf	??_DimmerLightsPointSelect,w
 15696  1DDE  00F8               	movwf	_DimmerLights
 15697  1DDF                     l823:	
 15698                           
 15699                           ;Dimmer_B1.c: 324: }
 15700                           ;Dimmer_B1.c: 327: if (lights == 3) {
 15701  1DDF  0821               	movf	DimmerLightsPointSelect@lights,w
 15702  1DE0  3A03               	xorlw	3
 15703  1DE1  1D03               	skipz
 15704  1DE2  0008               	return
 15705                           
 15706                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights3;
 15707  1DE3  303E               	movlw	_DimmerLights3& (0+255)
 15708  1DE4  00A0               	movwf	??_DimmerLightsPointSelect
 15709  1DE5  0820               	movf	??_DimmerLightsPointSelect,w
 15710  1DE6  00F8               	movwf	_DimmerLights
 15711  1DE7  0008               	return
 15712  1DE8                     __end_of_DimmerLightsPointSelect:	
 15713                           
 15714                           	psect	text96
 15715  1B10                     __ptext96:	
 15716 ;; *************** function _Dimmer_Initialization *****************
 15717 ;; Defined at:
 15718 ;;		line 786 in file "../src/Dimmer_B1.c"
 15719 ;; Parameters:    Size  Location     Type
 15720 ;;		None
 15721 ;; Auto vars:     Size  Location     Type
 15722 ;;		None
 15723 ;; Return value:  Size  Location     Type
 15724 ;;		None               void
 15725 ;; Registers used:
 15726 ;;		wreg
 15727 ;; Tracked objects:
 15728 ;;		On entry : 0/0
 15729 ;;		On exit  : 0/0
 15730 ;;		Unchanged: 0/0
 15731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15736 ;;Total ram usage:        1 bytes
 15737 ;; Hardware stack levels used:    1
 15738 ;; Hardware stack levels required when called:    5
 15739 ;; This function calls:
 15740 ;;		Nothing
 15741 ;; This function is called by:
 15742 ;;		_DimmerLights_Initialization
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           
 15747                           ;psect for function _Dimmer_Initialization
 15748  1B10                     _Dimmer_Initialization:	
 15749                           
 15750                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 15751                           
 15752                           ;incstack = 0
 15753                           ; Regs used in _Dimmer_Initialization: [wreg]
 15754  1B10  30DD               	movlw	_Dimmer1& (0+255)
 15755  1B11  0020               	movlb	0	; select bank0
 15756  1B12  00A0               	movwf	??_Dimmer_Initialization
 15757  1B13  0820               	movf	??_Dimmer_Initialization,w
 15758  1B14  0021               	movlb	1	; select bank1
 15759  1B15  00B9               	movwf	_Dimmer^(0+128)
 15760  1B16  0008               	return
 15761  1B17                     __end_of_Dimmer_Initialization:	
 15762                           
 15763                           	psect	text97
 15764  1CF2                     __ptext97:	
 15765 ;; *************** function _CC2500_PowerOnInitial *****************
 15766 ;; Defined at:
 15767 ;;		line 111 in file "../src/CC2500_B1.c"
 15768 ;; Parameters:    Size  Location     Type
 15769 ;;		None
 15770 ;; Auto vars:     Size  Location     Type
 15771 ;;		None
 15772 ;; Return value:  Size  Location     Type
 15773 ;;		None               void
 15774 ;; Registers used:
 15775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15776 ;; Tracked objects:
 15777 ;;		On entry : 0/0
 15778 ;;		On exit  : 0/0
 15779 ;;		Unchanged: 0/0
 15780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;Total ram usage:        0 bytes
 15786 ;; Hardware stack levels used:    1
 15787 ;; Hardware stack levels required when called:    8
 15788 ;; This function calls:
 15789 ;;		_CC2500_ClearRXFIFO
 15790 ;;		_CC2500_ClearTXFIFO
 15791 ;;		_CC2500_FrequencyCabr
 15792 ;;		_CC2500_InitPATable
 15793 ;;		_CC2500_InitSetREG
 15794 ;;		_CC2500_PowerRST
 15795 ;;		_CC2500_SIDLEMode
 15796 ;; This function is called by:
 15797 ;;		_main
 15798 ;; This function uses a non-reentrant model
 15799 ;;
 15800                           
 15801                           
 15802                           ;psect for function _CC2500_PowerOnInitial
 15803  1CF2                     _CC2500_PowerOnInitial:	
 15804                           
 15805                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 15806                           
 15807                           ;incstack = 0
 15808                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15809  1CF2  3190  20E0  319C   	fcall	_CC2500_PowerRST
 15810                           
 15811                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 15812  1CF5  3190  2031  319C   	fcall	_CC2500_InitSetREG
 15813                           
 15814                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 15815  1CF8  319E  26B0  319C   	fcall	_CC2500_InitPATable
 15816                           
 15817                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 15818  1CFB  319A  22EE  319C   	fcall	_CC2500_ClearTXFIFO
 15819                           
 15820                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 15821  1CFE  319A  22EA  319C   	fcall	_CC2500_ClearRXFIFO
 15822                           
 15823                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 15824  1D01  319B  2346  319C   	fcall	_CC2500_FrequencyCabr
 15825                           
 15826                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 15827  1D04  319A  22F2         	fcall	_CC2500_SIDLEMode
 15828  1D06  0008               	return
 15829  1D07                     __end_of_CC2500_PowerOnInitial:	
 15830                           
 15831                           	psect	text98
 15832  1AF2                     __ptext98:	
 15833 ;; *************** function _CC2500_SIDLEMode *****************
 15834 ;; Defined at:
 15835 ;;		line 195 in file "../src/CC2500_B1.c"
 15836 ;; Parameters:    Size  Location     Type
 15837 ;;		None
 15838 ;; Auto vars:     Size  Location     Type
 15839 ;;		None
 15840 ;; Return value:  Size  Location     Type
 15841 ;;		None               void
 15842 ;; Registers used:
 15843 ;;		wreg, status,2, status,0, pclath, cstack
 15844 ;; Tracked objects:
 15845 ;;		On entry : 0/0
 15846 ;;		On exit  : 0/0
 15847 ;;		Unchanged: 0/0
 15848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;Total ram usage:        0 bytes
 15854 ;; Hardware stack levels used:    1
 15855 ;; Hardware stack levels required when called:    7
 15856 ;; This function calls:
 15857 ;;		_CC2500_WriteCommand
 15858 ;; This function is called by:
 15859 ;;		_CC2500_PowerOnInitial
 15860 ;; This function uses a non-reentrant model
 15861 ;;
 15862                           
 15863                           
 15864                           ;psect for function _CC2500_SIDLEMode
 15865  1AF2                     _CC2500_SIDLEMode:	
 15866                           
 15867                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 15868                           
 15869                           ;incstack = 0
 15870                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 15871  1AF2  3036               	movlw	54
 15872  1AF3  319C  2402         	fcall	_CC2500_WriteCommand
 15873  1AF5  0008               	return
 15874  1AF6                     __end_of_CC2500_SIDLEMode:	
 15875                           
 15876                           	psect	text99
 15877  10E0                     __ptext99:	
 15878 ;; *************** function _CC2500_PowerRST *****************
 15879 ;; Defined at:
 15880 ;;		line 124 in file "../src/CC2500_B1.c"
 15881 ;; Parameters:    Size  Location     Type
 15882 ;;		None
 15883 ;; Auto vars:     Size  Location     Type
 15884 ;;		None
 15885 ;; Return value:  Size  Location     Type
 15886 ;;		None               void
 15887 ;; Registers used:
 15888 ;;		wreg, status,2, status,0, pclath, cstack
 15889 ;; Tracked objects:
 15890 ;;		On entry : 0/0
 15891 ;;		On exit  : 0/0
 15892 ;;		Unchanged: 0/0
 15893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;Total ram usage:        1 bytes
 15899 ;; Hardware stack levels used:    1
 15900 ;; Hardware stack levels required when called:    6
 15901 ;; This function calls:
 15902 ;;		_CC2500_WriteByte
 15903 ;;		_DelayTime_1us
 15904 ;; This function is called by:
 15905 ;;		_CC2500_PowerOnInitial
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           
 15910                           ;psect for function _CC2500_PowerRST
 15911  10E0                     _CC2500_PowerRST:	
 15912                           
 15913                           ;CC2500_B1.c: 125: RC1 = 0;
 15914                           
 15915                           ;incstack = 0
 15916                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 15917  10E0  0020               	movlb	0	; select bank0
 15918  10E1  108E               	bcf	14,1	;volatile
 15919                           
 15920                           ;CC2500_B1.c: 126: RC0 = 0;
 15921  10E2  100E               	bcf	14,0	;volatile
 15922                           
 15923                           ;CC2500_B1.c: 127: RC4 = 1;
 15924  10E3  160E               	bsf	14,4	;volatile
 15925                           
 15926                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 15927  10E4  300A               	movlw	10
 15928  10E5  00A0               	movwf	DelayTime_1us@count
 15929  10E6  3000               	movlw	0
 15930  10E7  00A1               	movwf	DelayTime_1us@count+1
 15931  10E8  319F  27B3  3190   	fcall	_DelayTime_1us
 15932                           
 15933                           ;CC2500_B1.c: 129: RC4 = 0;
 15934  10EB  0020               	movlb	0	; select bank0
 15935  10EC  120E               	bcf	14,4	;volatile
 15936                           
 15937                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 15938  10ED  300A               	movlw	10
 15939  10EE  00A0               	movwf	DelayTime_1us@count
 15940  10EF  3000               	movlw	0
 15941  10F0  00A1               	movwf	DelayTime_1us@count+1
 15942  10F1  319F  27B3  3190   	fcall	_DelayTime_1us
 15943                           
 15944                           ;CC2500_B1.c: 131: RC4 = 1;
 15945  10F4  0020               	movlb	0	; select bank0
 15946  10F5  160E               	bsf	14,4	;volatile
 15947                           
 15948                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 15949  10F6  3028               	movlw	40
 15950  10F7  00A0               	movwf	DelayTime_1us@count
 15951  10F8  3000               	movlw	0
 15952  10F9  00A1               	movwf	DelayTime_1us@count+1
 15953  10FA  319F  27B3  3190   	fcall	_DelayTime_1us
 15954                           
 15955                           ;CC2500_B1.c: 133: RC4 = 0;
 15956  10FD  0020               	movlb	0	; select bank0
 15957  10FE  120E               	bcf	14,4	;volatile
 15958                           
 15959                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 15960  10FF  3030               	movlw	48
 15961  1100  00A6               	movwf	??_CC2500_PowerRST
 15962  1101  0826               	movf	??_CC2500_PowerRST,w
 15963  1102  0021               	movlb	1	; select bank1
 15964  1103  00C2               	movwf	_SPI0Buffer^(0+128)
 15965  1104                     l326:	
 15966                           ;CC2500_B1.c: 135: while (RC2 == 1);
 15967                           
 15968  1104  0020               	movlb	0	; select bank0
 15969  1105  190E               	btfsc	14,2	;volatile
 15970  1106  2904               	goto	l326
 15971                           
 15972                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 15973  1107  319D  254D  3190   	fcall	_CC2500_WriteByte
 15974  110A                     l329:	
 15975                           ;CC2500_B1.c: 137: while (RC2 == 1);
 15976                           
 15977  110A  0020               	movlb	0	; select bank0
 15978  110B  190E               	btfsc	14,2	;volatile
 15979  110C  290A               	goto	l329
 15980                           
 15981                           ;CC2500_B1.c: 138: RC0 = 0;
 15982  110D  100E               	bcf	14,0	;volatile
 15983                           
 15984                           ;CC2500_B1.c: 139: RC4 = 1;
 15985  110E  160E               	bsf	14,4	;volatile
 15986  110F  0008               	return
 15987  1110                     __end_of_CC2500_PowerRST:	
 15988                           
 15989                           	psect	text100
 15990  1031                     __ptext100:	
 15991 ;; *************** function _CC2500_InitSetREG *****************
 15992 ;; Defined at:
 15993 ;;		line 145 in file "../src/CC2500_B1.c"
 15994 ;; Parameters:    Size  Location     Type
 15995 ;;		None
 15996 ;; Auto vars:     Size  Location     Type
 15997 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15998 ;;  temp2           1    7[BANK0 ] unsigned char 
 15999 ;;  temp1           1    6[BANK0 ] unsigned char 
 16000 ;; Return value:  Size  Location     Type
 16001 ;;		None               void
 16002 ;; Registers used:
 16003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16004 ;; Tracked objects:
 16005 ;;		On entry : 0/0
 16006 ;;		On exit  : 0/0
 16007 ;;		Unchanged: 0/0
 16008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;Total ram usage:        4 bytes
 16014 ;; Hardware stack levels used:    1
 16015 ;; Hardware stack levels required when called:    7
 16016 ;; This function calls:
 16017 ;;		_CC2500_WriteREG
 16018 ;; This function is called by:
 16019 ;;		_CC2500_PowerOnInitial
 16020 ;; This function uses a non-reentrant model
 16021 ;;
 16022                           
 16023                           
 16024                           ;psect for function _CC2500_InitSetREG
 16025  1031                     _CC2500_InitSetREG:	
 16026                           
 16027                           ;CC2500_B1.c: 146: unsigned char loop_c;
 16028                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 16029                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 16030                           
 16031                           ;incstack = 0
 16032                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16033  1031  0020               	movlb	0	; select bank0
 16034  1032  01A8               	clrf	CC2500_InitSetREG@loop_c
 16035  1033                     L10:	
 16036  1033  302F               	movlw	47
 16037  1034  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16038  1035  1803               	btfsc	3,0
 16039  1036  0008               	return
 16040                           
 16041                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 16042  1037  0828               	movf	CC2500_InitSetREG@loop_c,w
 16043  1038  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16044  1039  0084               	movwf	4
 16045  103A  3098               	movlw	high (_CC2500_registers_address| (0+32768))
 16046  103B  1803               	skipnc
 16047  103C  3E01               	addlw	1
 16048  103D  0085               	movwf	5
 16049  103E  0800               	movf	0,w	;code access
 16050  103F  00A5               	movwf	??_CC2500_InitSetREG
 16051  1040  0825               	movf	??_CC2500_InitSetREG,w
 16052  1041  00A6               	movwf	CC2500_InitSetREG@temp1
 16053                           
 16054                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 16055  1042  0828               	movf	CC2500_InitSetREG@loop_c,w
 16056  1043  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16057  1044  0084               	movwf	4
 16058  1045  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
 16059  1046  1803               	skipnc
 16060  1047  3E01               	addlw	1
 16061  1048  0085               	movwf	5
 16062  1049  0800               	movf	0,w	;code access
 16063  104A  00A5               	movwf	??_CC2500_InitSetREG
 16064  104B  0825               	movf	??_CC2500_InitSetREG,w
 16065  104C  00A7               	movwf	CC2500_InitSetREG@temp2
 16066                           
 16067                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 16068  104D  0827               	movf	CC2500_InitSetREG@temp2,w
 16069  104E  00A5               	movwf	??_CC2500_InitSetREG
 16070  104F  0825               	movf	??_CC2500_InitSetREG,w
 16071  1050  00A2               	movwf	CC2500_WriteREG@value
 16072  1051  0826               	movf	CC2500_InitSetREG@temp1,w
 16073  1052  319D  2566  3190   	fcall	_CC2500_WriteREG
 16074  1055  3001               	movlw	1
 16075  1056  0020               	movlb	0	; select bank0
 16076  1057  00A5               	movwf	??_CC2500_InitSetREG
 16077  1058  0825               	movf	??_CC2500_InitSetREG,w
 16078  1059  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16079  105A  2833               	goto	L10
 16080  105B                     __end_of_CC2500_InitSetREG:	
 16081                           
 16082                           	psect	text101
 16083  1EB0                     __ptext101:	
 16084 ;; *************** function _CC2500_InitPATable *****************
 16085 ;; Defined at:
 16086 ;;		line 160 in file "../src/CC2500_B1.c"
 16087 ;; Parameters:    Size  Location     Type
 16088 ;;		None
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16091 ;;  temp            1    6[BANK0 ] unsigned char 
 16092 ;; Return value:  Size  Location     Type
 16093 ;;		None               void
 16094 ;; Registers used:
 16095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;Total ram usage:        3 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    7
 16108 ;; This function calls:
 16109 ;;		_CC2500_WriteREG
 16110 ;; This function is called by:
 16111 ;;		_CC2500_PowerOnInitial
 16112 ;; This function uses a non-reentrant model
 16113 ;;
 16114                           
 16115                           
 16116                           ;psect for function _CC2500_InitPATable
 16117  1EB0                     _CC2500_InitPATable:	
 16118                           
 16119                           ;CC2500_B1.c: 161: unsigned char loop_d;
 16120                           ;CC2500_B1.c: 162: unsigned char temp;
 16121                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 16122                           
 16123                           ;incstack = 0
 16124                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 16125  1EB0  0020               	movlb	0	; select bank0
 16126  1EB1  01A7               	clrf	CC2500_InitPATable@loop_d
 16127  1EB2                     L11:	
 16128  1EB2  3008               	movlw	8
 16129  1EB3  0227               	subwf	CC2500_InitPATable@loop_d,w
 16130  1EB4  1803               	btfsc	3,0
 16131  1EB5  0008               	return
 16132                           
 16133                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 16134  1EB6  0827               	movf	CC2500_InitPATable@loop_d,w
 16135  1EB7  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16136  1EB8  0084               	movwf	4
 16137  1EB9  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16138  1EBA  1803               	skipnc
 16139  1EBB  3E01               	addlw	1
 16140  1EBC  0085               	movwf	5
 16141  1EBD  0800               	movf	0,w	;code access
 16142  1EBE  00A5               	movwf	??_CC2500_InitPATable
 16143  1EBF  0825               	movf	??_CC2500_InitPATable,w
 16144  1EC0  00A6               	movwf	CC2500_InitPATable@temp
 16145                           
 16146                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 16147  1EC1  0826               	movf	CC2500_InitPATable@temp,w
 16148  1EC2  00A5               	movwf	??_CC2500_InitPATable
 16149  1EC3  0825               	movf	??_CC2500_InitPATable,w
 16150  1EC4  00A2               	movwf	CC2500_WriteREG@value
 16151  1EC5  303E               	movlw	62
 16152  1EC6  319D  2566  319E   	fcall	_CC2500_WriteREG
 16153  1EC9  3001               	movlw	1
 16154  1ECA  0020               	movlb	0	; select bank0
 16155  1ECB  00A5               	movwf	??_CC2500_InitPATable
 16156  1ECC  0825               	movf	??_CC2500_InitPATable,w
 16157  1ECD  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16158  1ECE  2EB2               	goto	L11
 16159  1ECF                     __end_of_CC2500_InitPATable:	
 16160                           
 16161                           	psect	text102
 16162  1D66                     __ptext102:	
 16163 ;; *************** function _CC2500_WriteREG *****************
 16164 ;; Defined at:
 16165 ;;		line 237 in file "../src/CC2500_B1.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;  w_addr          1    wreg     unsigned char 
 16168 ;;  value           1    2[BANK0 ] unsigned char 
 16169 ;; Auto vars:     Size  Location     Type
 16170 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;		None               void
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:        3 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    6
 16187 ;; This function calls:
 16188 ;;		_CC2500_WriteByte
 16189 ;; This function is called by:
 16190 ;;		_CC2500_InitSetREG
 16191 ;;		_CC2500_InitPATable
 16192 ;; This function uses a non-reentrant model
 16193 ;;
 16194                           
 16195                           
 16196                           ;psect for function _CC2500_WriteREG
 16197  1D66                     _CC2500_WriteREG:	
 16198                           
 16199                           ;incstack = 0
 16200                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 16201                           ;CC2500_WriteREG@w_addr stored from wreg
 16202  1D66  0020               	movlb	0	; select bank0
 16203  1D67  00A4               	movwf	CC2500_WriteREG@w_addr
 16204                           
 16205                           ;CC2500_B1.c: 238: RC4 = 0;
 16206  1D68  120E               	bcf	14,4	;volatile
 16207                           
 16208                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 16209  1D69  0824               	movf	CC2500_WriteREG@w_addr,w
 16210  1D6A  00A3               	movwf	??_CC2500_WriteREG
 16211  1D6B  0823               	movf	??_CC2500_WriteREG,w
 16212  1D6C  0021               	movlb	1	; select bank1
 16213  1D6D  00C2               	movwf	_SPI0Buffer^(0+128)
 16214  1D6E                     l371:	
 16215                           ;CC2500_B1.c: 240: while (RC2 == 1);
 16216                           
 16217  1D6E  0020               	movlb	0	; select bank0
 16218  1D6F  190E               	btfsc	14,2	;volatile
 16219  1D70  2D6E               	goto	l371
 16220                           
 16221                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 16222  1D71  319D  254D  319D   	fcall	_CC2500_WriteByte
 16223                           
 16224                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 16225  1D74  0020               	movlb	0	; select bank0
 16226  1D75  0822               	movf	CC2500_WriteREG@value,w
 16227  1D76  00A3               	movwf	??_CC2500_WriteREG
 16228  1D77  0823               	movf	??_CC2500_WriteREG,w
 16229  1D78  0021               	movlb	1	; select bank1
 16230  1D79  00C2               	movwf	_SPI0Buffer^(0+128)
 16231                           
 16232                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 16233  1D7A  319D  254D         	fcall	_CC2500_WriteByte
 16234                           
 16235                           ;CC2500_B1.c: 244: RC4 = 1;
 16236  1D7C  0020               	movlb	0	; select bank0
 16237  1D7D  160E               	bsf	14,4	;volatile
 16238  1D7E  0008               	return
 16239  1D7F                     __end_of_CC2500_WriteREG:	
 16240                           
 16241                           	psect	text103
 16242  1B46                     __ptext103:	
 16243 ;; *************** function _CC2500_FrequencyCabr *****************
 16244 ;; Defined at:
 16245 ;;		line 187 in file "../src/CC2500_B1.c"
 16246 ;; Parameters:    Size  Location     Type
 16247 ;;		None
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;		None
 16250 ;; Return value:  Size  Location     Type
 16251 ;;		None               void
 16252 ;; Registers used:
 16253 ;;		wreg, status,2, status,0, pclath, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 0/0
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;Total ram usage:        0 bytes
 16264 ;; Hardware stack levels used:    1
 16265 ;; Hardware stack levels required when called:    7
 16266 ;; This function calls:
 16267 ;;		_CC2500_WriteCommand
 16268 ;;		_DelayTime_1us
 16269 ;; This function is called by:
 16270 ;;		_CC2500_PowerOnInitial
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274                           
 16275                           ;psect for function _CC2500_FrequencyCabr
 16276  1B46                     _CC2500_FrequencyCabr:	
 16277                           
 16278                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 16279                           
 16280                           ;incstack = 0
 16281                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 16282  1B46  3033               	movlw	51
 16283  1B47  319C  2402  319B   	fcall	_CC2500_WriteCommand
 16284                           
 16285                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 16286  1B4A  30E8               	movlw	232
 16287  1B4B  0020               	movlb	0	; select bank0
 16288  1B4C  00A0               	movwf	DelayTime_1us@count
 16289  1B4D  3003               	movlw	3
 16290  1B4E  00A1               	movwf	DelayTime_1us@count+1
 16291  1B4F  319F  27B3         	fcall	_DelayTime_1us
 16292  1B51  0008               	return
 16293  1B52                     __end_of_CC2500_FrequencyCabr:	
 16294                           
 16295                           	psect	text104
 16296  1FB3                     __ptext104:	
 16297 ;; *************** function _DelayTime_1us *****************
 16298 ;; Defined at:
 16299 ;;		line 293 in file "../src/CC2500_B1.c"
 16300 ;; Parameters:    Size  Location     Type
 16301 ;;  count           2    0[BANK0 ] int 
 16302 ;; Auto vars:     Size  Location     Type
 16303 ;;  j               2    4[BANK0 ] unsigned int 
 16304 ;;  i               2    2[BANK0 ] unsigned int 
 16305 ;; Return value:  Size  Location     Type
 16306 ;;		None               void
 16307 ;; Registers used:
 16308 ;;		wreg, status,2
 16309 ;; Tracked objects:
 16310 ;;		On entry : 0/0
 16311 ;;		On exit  : 0/0
 16312 ;;		Unchanged: 0/0
 16313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16314 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16315 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16317 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;Total ram usage:        6 bytes
 16319 ;; Hardware stack levels used:    1
 16320 ;; Hardware stack levels required when called:    5
 16321 ;; This function calls:
 16322 ;;		Nothing
 16323 ;; This function is called by:
 16324 ;;		_CC2500_PowerRST
 16325 ;;		_CC2500_FrequencyCabr
 16326 ;; This function uses a non-reentrant model
 16327 ;;
 16328                           
 16329                           
 16330                           ;psect for function _DelayTime_1us
 16331  1FB3                     _DelayTime_1us:	
 16332                           
 16333                           ;CC2500_B1.c: 294: unsigned int i, j;
 16334                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 16335                           
 16336                           ;incstack = 0
 16337                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16338  1FB3  3001               	movlw	1
 16339  1FB4  0020               	movlb	0	; select bank0
 16340  1FB5  00A2               	movwf	DelayTime_1us@i
 16341  1FB6  3000               	movlw	0
 16342  1FB7  00A3               	movwf	DelayTime_1us@i+1
 16343  1FB8                     l395:	
 16344  1FB8  0821               	movf	DelayTime_1us@count+1,w
 16345  1FB9  0223               	subwf	DelayTime_1us@i+1,w
 16346  1FBA  1D03               	skipz
 16347  1FBB  2FBE               	goto	u5365
 16348  1FBC  0820               	movf	DelayTime_1us@count,w
 16349  1FBD  0222               	subwf	DelayTime_1us@i,w
 16350  1FBE                     u5365:	
 16351  1FBE  1803               	btfsc	3,0
 16352  1FBF  0008               	return
 16353                           
 16354                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 16355  1FC0  01A4               	clrf	DelayTime_1us@j
 16356  1FC1  01A5               	clrf	DelayTime_1us@j+1
 16357  1FC2  3000               	movlw	0
 16358  1FC3  0225               	subwf	DelayTime_1us@j+1,w
 16359  1FC4  3002               	movlw	2
 16360  1FC5  1903               	skipnz
 16361  1FC6  0224               	subwf	DelayTime_1us@j,w
 16362  1FC7  1803               	btfsc	3,0
 16363  1FC8  2FD4               	goto	l6465
 16364  1FC9                     l6463:	
 16365  1FC9  3001               	movlw	1
 16366  1FCA  07A4               	addwf	DelayTime_1us@j,f
 16367  1FCB  3000               	movlw	0
 16368  1FCC  3DA5               	addwfc	DelayTime_1us@j+1,f
 16369  1FCD  3000               	movlw	0
 16370  1FCE  0225               	subwf	DelayTime_1us@j+1,w
 16371  1FCF  3002               	movlw	2
 16372  1FD0  1903               	skipnz
 16373  1FD1  0224               	subwf	DelayTime_1us@j,w
 16374  1FD2  1C03               	skipc
 16375  1FD3  2FC9               	goto	l6463
 16376  1FD4                     l6465:	
 16377  1FD4  3001               	movlw	1
 16378  1FD5  07A2               	addwf	DelayTime_1us@i,f
 16379  1FD6  3000               	movlw	0
 16380  1FD7  3DA3               	addwfc	DelayTime_1us@i+1,f
 16381  1FD8  2FB8               	goto	l395
 16382  1FD9                     __end_of_DelayTime_1us:	
 16383                           
 16384                           	psect	text105
 16385  1AEE                     __ptext105:	
 16386 ;; *************** function _CC2500_ClearTXFIFO *****************
 16387 ;; Defined at:
 16388 ;;		line 173 in file "../src/CC2500_B1.c"
 16389 ;; Parameters:    Size  Location     Type
 16390 ;;		None
 16391 ;; Auto vars:     Size  Location     Type
 16392 ;;		None
 16393 ;; Return value:  Size  Location     Type
 16394 ;;		None               void
 16395 ;; Registers used:
 16396 ;;		wreg, status,2, status,0, pclath, cstack
 16397 ;; Tracked objects:
 16398 ;;		On entry : 0/0
 16399 ;;		On exit  : 0/0
 16400 ;;		Unchanged: 0/0
 16401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;Total ram usage:        0 bytes
 16407 ;; Hardware stack levels used:    1
 16408 ;; Hardware stack levels required when called:    7
 16409 ;; This function calls:
 16410 ;;		_CC2500_WriteCommand
 16411 ;; This function is called by:
 16412 ;;		_CC2500_PowerOnInitial
 16413 ;; This function uses a non-reentrant model
 16414 ;;
 16415                           
 16416                           
 16417                           ;psect for function _CC2500_ClearTXFIFO
 16418  1AEE                     _CC2500_ClearTXFIFO:	
 16419                           
 16420                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 16421                           
 16422                           ;incstack = 0
 16423                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16424  1AEE  303B               	movlw	59
 16425  1AEF  319C  2402         	fcall	_CC2500_WriteCommand
 16426  1AF1  0008               	return
 16427  1AF2                     __end_of_CC2500_ClearTXFIFO:	
 16428                           
 16429                           	psect	text106
 16430  1AEA                     __ptext106:	
 16431 ;; *************** function _CC2500_ClearRXFIFO *****************
 16432 ;; Defined at:
 16433 ;;		line 180 in file "../src/CC2500_B1.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;		None
 16436 ;; Auto vars:     Size  Location     Type
 16437 ;;		None
 16438 ;; Return value:  Size  Location     Type
 16439 ;;		None               void
 16440 ;; Registers used:
 16441 ;;		wreg, status,2, status,0, pclath, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;Total ram usage:        0 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    7
 16454 ;; This function calls:
 16455 ;;		_CC2500_WriteCommand
 16456 ;; This function is called by:
 16457 ;;		_CC2500_PowerOnInitial
 16458 ;; This function uses a non-reentrant model
 16459 ;;
 16460                           
 16461                           
 16462                           ;psect for function _CC2500_ClearRXFIFO
 16463  1AEA                     _CC2500_ClearRXFIFO:	
 16464                           
 16465                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 16466                           
 16467                           ;incstack = 0
 16468                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 16469  1AEA  303A               	movlw	58
 16470  1AEB  319C  2402         	fcall	_CC2500_WriteCommand
 16471  1AED  0008               	return
 16472  1AEE                     __end_of_CC2500_ClearRXFIFO:	
 16473                           
 16474                           	psect	text107
 16475  1C02                     __ptext107:	
 16476 ;; *************** function _CC2500_WriteCommand *****************
 16477 ;; Defined at:
 16478 ;;		line 263 in file "../src/CC2500_B1.c"
 16479 ;; Parameters:    Size  Location     Type
 16480 ;;  command         1    wreg     unsigned char 
 16481 ;; Auto vars:     Size  Location     Type
 16482 ;;  command         1    3[BANK0 ] unsigned char 
 16483 ;; Return value:  Size  Location     Type
 16484 ;;		None               void
 16485 ;; Registers used:
 16486 ;;		wreg, status,2, status,0, pclath, cstack
 16487 ;; Tracked objects:
 16488 ;;		On entry : 0/0
 16489 ;;		On exit  : 0/0
 16490 ;;		Unchanged: 0/0
 16491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;Total ram usage:        2 bytes
 16497 ;; Hardware stack levels used:    1
 16498 ;; Hardware stack levels required when called:    6
 16499 ;; This function calls:
 16500 ;;		_CC2500_WriteByte
 16501 ;; This function is called by:
 16502 ;;		_CC2500_TxData
 16503 ;;		_CC2500_RxData
 16504 ;;		_CC2500_ClearTXFIFO
 16505 ;;		_CC2500_ClearRXFIFO
 16506 ;;		_CC2500_FrequencyCabr
 16507 ;;		_CC2500_SIDLEMode
 16508 ;;		_setRF_Main
 16509 ;;		_RF_RxDisable
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           
 16514                           ;psect for function _CC2500_WriteCommand
 16515  1C02                     _CC2500_WriteCommand:	
 16516                           
 16517                           ;incstack = 0
 16518                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 16519                           ;CC2500_WriteCommand@command stored from wreg
 16520  1C02  0020               	movlb	0	; select bank0
 16521  1C03  00A3               	movwf	CC2500_WriteCommand@command
 16522                           
 16523                           ;CC2500_B1.c: 264: RC4 = 0;
 16524  1C04  120E               	bcf	14,4	;volatile
 16525                           
 16526                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 16527  1C05  0823               	movf	CC2500_WriteCommand@command,w
 16528  1C06  00A2               	movwf	??_CC2500_WriteCommand
 16529  1C07  0822               	movf	??_CC2500_WriteCommand,w
 16530  1C08  0021               	movlb	1	; select bank1
 16531  1C09  00C2               	movwf	_SPI0Buffer^(0+128)
 16532  1C0A                     l383:	
 16533                           ;CC2500_B1.c: 267: while (RC2 == 1);
 16534                           
 16535  1C0A  0020               	movlb	0	; select bank0
 16536  1C0B  190E               	btfsc	14,2	;volatile
 16537  1C0C  2C0A               	goto	l383
 16538                           
 16539                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 16540  1C0D  319D  254D         	fcall	_CC2500_WriteByte
 16541                           
 16542                           ;CC2500_B1.c: 270: RC4 = 1;
 16543  1C0F  0020               	movlb	0	; select bank0
 16544  1C10  160E               	bsf	14,4	;volatile
 16545  1C11  0008               	return
 16546  1C12                     __end_of_CC2500_WriteCommand:	
 16547                           
 16548                           	psect	text108
 16549  1D4D                     __ptext108:	
 16550 ;; *************** function _CC2500_WriteByte *****************
 16551 ;; Defined at:
 16552 ;;		line 205 in file "../src/CC2500_B1.c"
 16553 ;; Parameters:    Size  Location     Type
 16554 ;;		None
 16555 ;; Auto vars:     Size  Location     Type
 16556 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16557 ;; Return value:  Size  Location     Type
 16558 ;;		None               void
 16559 ;; Registers used:
 16560 ;;		wreg, status,2, status,0
 16561 ;; Tracked objects:
 16562 ;;		On entry : 0/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;Total ram usage:        2 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; Hardware stack levels required when called:    5
 16573 ;; This function calls:
 16574 ;;		Nothing
 16575 ;; This function is called by:
 16576 ;;		_CC2500_TxData
 16577 ;;		_CC2500_RxData
 16578 ;;		_CC2500_PowerRST
 16579 ;;		_CC2500_WriteREG
 16580 ;;		_CC2500_WriteCommand
 16581 ;;		_CC2500_ReadStatus
 16582 ;;		_CC2500_ReadREG
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function _CC2500_WriteByte
 16588  1D4D                     _CC2500_WriteByte:	
 16589                           
 16590                           ;CC2500_B1.c: 206: unsigned char loop_a;
 16591                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 16592                           
 16593                           ;incstack = 0
 16594                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16595  1D4D  0020               	movlb	0	; select bank0
 16596  1D4E  01A1               	clrf	CC2500_WriteByte@loop_a
 16597  1D4F                     L12:	
 16598  1D4F  3008               	movlw	8
 16599  1D50  0221               	subwf	CC2500_WriteByte@loop_a,w
 16600  1D51  1803               	btfsc	3,0
 16601  1D52  0008               	return
 16602                           
 16603                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 16604  1D53  0021               	movlb	1	; select bank1
 16605  1D54  1FC2               	btfss	_SPI0Buffer^(0+128),7
 16606  1D55  2D59               	goto	l359
 16607                           
 16608                           ;CC2500_B1.c: 209: RC0 = 1;
 16609  1D56  0020               	movlb	0	; select bank0
 16610  1D57  140E               	bsf	14,0	;volatile
 16611  1D58  2D5B               	goto	l360
 16612  1D59                     l359:	
 16613                           
 16614                           ;CC2500_B1.c: 210: else
 16615                           ;CC2500_B1.c: 211: RC0 = 0;
 16616  1D59  0020               	movlb	0	; select bank0
 16617  1D5A  100E               	bcf	14,0	;volatile
 16618  1D5B                     l360:	
 16619                           
 16620                           ;CC2500_B1.c: 212: RC1 = 1;
 16621  1D5B  148E               	bsf	14,1	;volatile
 16622                           
 16623                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 16624  1D5C  1003               	clrc
 16625  1D5D  0021               	movlb	1	; select bank1
 16626  1D5E  0DC2               	rlf	_SPI0Buffer^(0+128),f
 16627                           
 16628                           ;CC2500_B1.c: 214: RC1 = 0;
 16629  1D5F  0020               	movlb	0	; select bank0
 16630  1D60  108E               	bcf	14,1	;volatile
 16631  1D61  3001               	movlw	1
 16632  1D62  00A0               	movwf	??_CC2500_WriteByte
 16633  1D63  0820               	movf	??_CC2500_WriteByte,w
 16634  1D64  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16635  1D65  2D4F               	goto	L12
 16636  1D66                     __end_of_CC2500_WriteByte:	
 16637                           
 16638                           	psect	text109
 16639  0F39                     __ptext109:	
 16640 ;; *************** function _Buzzer_Main *****************
 16641 ;; Defined at:
 16642 ;;		line 55 in file "../src/Buzzer_B1.c"
 16643 ;; Parameters:    Size  Location     Type
 16644 ;;		None
 16645 ;; Auto vars:     Size  Location     Type
 16646 ;;		None
 16647 ;; Return value:  Size  Location     Type
 16648 ;;		None               void
 16649 ;; Registers used:
 16650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16651 ;; Tracked objects:
 16652 ;;		On entry : 0/0
 16653 ;;		On exit  : 0/0
 16654 ;;		Unchanged: 0/0
 16655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16658 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16659 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16660 ;;Total ram usage:        4 bytes
 16661 ;; Hardware stack levels used:    1
 16662 ;; Hardware stack levels required when called:    5
 16663 ;; This function calls:
 16664 ;;		Nothing
 16665 ;; This function is called by:
 16666 ;;		_main
 16667 ;; This function uses a non-reentrant model
 16668 ;;
 16669                           
 16670                           
 16671                           ;psect for function _Buzzer_Main
 16672  0F39                     _Buzzer_Main:	
 16673                           
 16674                           ;Buzzer_B1.c: 56: Buz = &Buz1;
 16675                           
 16676                           ;incstack = 0
 16677                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 16678  0F39  304D               	movlw	_Buz1& (0+255)
 16679  0F3A  0020               	movlb	0	; select bank0
 16680  0F3B  00A0               	movwf	??_Buzzer_Main
 16681  0F3C  0820               	movf	??_Buzzer_Main,w
 16682  0F3D  0021               	movlb	1	; select bank1
 16683  0F3E  00B7               	movwf	_Buz^(0+128)
 16684                           
 16685                           ;Buzzer_B1.c: 57: if (Buz->GO == 1) {
 16686  0F3F  0837               	movf	_Buz^(0+128),w
 16687  0F40  0086               	movwf	6
 16688  0F41  3001               	movlw	1	; select bank2/3
 16689  0F42  0087               	movwf	7
 16690  0F43  1C81               	btfss	1,1
 16691  0F44  0008               	return
 16692                           
 16693                           ;Buzzer_B1.c: 58: Buz->Counter++;
 16694  0F45  0A37               	incf	_Buz^(0+128),w
 16695  0F46  0086               	movwf	6
 16696  0F47  3001               	movlw	1	; select bank2/3
 16697  0F48  0087               	movwf	7
 16698  0F49  3001               	movlw	1
 16699  0F4A  0781               	addwf	1,f
 16700  0F4B  3141               	addfsr 1,1
 16701  0F4C  1803               	skipnc
 16702  0F4D  0A81               	incf	1,f
 16703                           
 16704                           ;Buzzer_B1.c: 59: if (Buz->Counter >= Buz->TimeValue) {
 16705  0F4E  0837               	movf	_Buz^(0+128),w
 16706  0F4F  3E06               	addlw	6
 16707  0F50  0086               	movwf	6
 16708  0F51  3001               	movlw	1	; select bank2/3
 16709  0F52  0087               	movwf	7
 16710  0F53  3F40               	moviw [0]fsr1
 16711  0F54  0020               	movlb	0	; select bank0
 16712  0F55  00A0               	movwf	??_Buzzer_Main
 16713  0F56  3F41               	moviw [1]fsr1
 16714  0F57  00A1               	movwf	??_Buzzer_Main+1
 16715  0F58  0021               	movlb	1	; select bank1
 16716  0F59  0A37               	incf	_Buz^(0+128),w
 16717  0F5A  0086               	movwf	6
 16718  0F5B  3001               	movlw	1	; select bank2/3
 16719  0F5C  0087               	movwf	7
 16720  0F5D  3F40               	moviw [0]fsr1
 16721  0F5E  0020               	movlb	0	; select bank0
 16722  0F5F  00A2               	movwf	??_Buzzer_Main+2
 16723  0F60  3F41               	moviw [1]fsr1
 16724  0F61  00A3               	movwf	??_Buzzer_Main+3
 16725  0F62  0821               	movf	??_Buzzer_Main+1,w
 16726  0F63  0223               	subwf	??_Buzzer_Main+3,w
 16727  0F64  1D03               	skipz
 16728  0F65  2F68               	goto	u7005
 16729  0F66  0820               	movf	??_Buzzer_Main,w
 16730  0F67  0222               	subwf	??_Buzzer_Main+2,w
 16731  0F68                     u7005:	
 16732  0F68  1C03               	skipc
 16733  0F69  0008               	return
 16734                           
 16735                           ;Buzzer_B1.c: 60: Buz->Counter = 0;
 16736  0F6A  0021               	movlb	1	; select bank1
 16737  0F6B  0A37               	incf	_Buz^(0+128),w
 16738  0F6C  0086               	movwf	6
 16739  0F6D  3001               	movlw	1	; select bank2/3
 16740  0F6E  0087               	movwf	7
 16741  0F6F  3000               	movlw	0
 16742  0F70  3FC0               	movwi [0]fsr1
 16743  0F71  3FC1               	movwi [1]fsr1
 16744                           
 16745                           ;Buzzer_B1.c: 61: Buz->Switch = (RB3 == 1) ? 1 : 0;
 16746  0F72  0837               	movf	_Buz^(0+128),w
 16747  0F73  0086               	movwf	6
 16748  0F74  3001               	movlw	1	; select bank2/3
 16749  0F75  0087               	movwf	7
 16750  0F76  1281               	bcf	1,5
 16751  0F77  0020               	movlb	0	; select bank0
 16752  0F78  198D               	btfsc	13,3	;volatile
 16753  0F79  1681               	bsf	1,5
 16754                           
 16755                           ;Buzzer_B1.c: 62: if (Buz->Switch == 0) {
 16756  0F7A  0021               	movlb	1	; select bank1
 16757  0F7B  0837               	movf	_Buz^(0+128),w
 16758  0F7C  0086               	movwf	6
 16759  0F7D  3001               	movlw	1	; select bank2/3
 16760  0F7E  0087               	movwf	7
 16761  0F7F  1A81               	btfsc	1,5
 16762  0F80  2FEF               	goto	l7441
 16763                           
 16764                           ;Buzzer_B1.c: 63: if (Buz->Count == 0) {
 16765  0F81  0837               	movf	_Buz^(0+128),w
 16766  0F82  3E03               	addlw	3
 16767  0F83  0086               	movwf	6
 16768  0F84  3001               	movlw	1	; select bank2/3
 16769  0F85  0087               	movwf	7
 16770  0F86  0881               	movf	1,f
 16771  0F87  1D03               	skipz
 16772  0F88  2FE7               	goto	l7437
 16773                           
 16774                           ;Buzzer_B1.c: 64: if (Buz->BufferStatus1 == 1) {
 16775  0F89  0837               	movf	_Buz^(0+128),w
 16776  0F8A  0086               	movwf	6
 16777  0F8B  3001               	movlw	1	; select bank2/3
 16778  0F8C  0087               	movwf	7
 16779  0F8D  1D81               	btfss	1,3
 16780  0F8E  2FB5               	goto	l7429
 16781                           
 16782                           ;Buzzer_B1.c: 65: Buz->BufferStatus1 = 0;
 16783  0F8F  0837               	movf	_Buz^(0+128),w
 16784  0F90  0086               	movwf	6
 16785  0F91  3001               	movlw	1	; select bank2/3
 16786  0F92  0087               	movwf	7
 16787  0F93  1181               	bcf	1,3
 16788                           
 16789                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer1;
 16790  0F94  0837               	movf	_Buz^(0+128),w
 16791  0F95  3E04               	addlw	4
 16792  0F96  0086               	movwf	6
 16793  0F97  3001               	movlw	1	; select bank2/3
 16794  0F98  0087               	movwf	7
 16795  0F99  0801               	movf	1,w
 16796  0F9A  0020               	movlb	0	; select bank0
 16797  0F9B  00A0               	movwf	??_Buzzer_Main
 16798  0F9C  0021               	movlb	1	; select bank1
 16799  0F9D  0837               	movf	_Buz^(0+128),w
 16800  0F9E  3E03               	addlw	3
 16801  0F9F  0086               	movwf	6
 16802  0FA0  3001               	movlw	1	; select bank2/3
 16803  0FA1  0087               	movwf	7
 16804  0FA2  0020               	movlb	0	; select bank0
 16805  0FA3  0820               	movf	??_Buzzer_Main,w
 16806  0FA4  0081               	movwf	1
 16807                           
 16808                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer1;
 16809  0FA5  0021               	movlb	1	; select bank1
 16810  0FA6  0837               	movf	_Buz^(0+128),w
 16811  0FA7  3E08               	addlw	8
 16812  0FA8  0086               	movwf	6
 16813  0FA9  3001               	movlw	1	; select bank2/3
 16814  0FAA  0087               	movwf	7
 16815  0FAB  0837               	movf	_Buz^(0+128),w
 16816  0FAC  3E06               	addlw	6
 16817  0FAD  0084               	movwf	4
 16818  0FAE  3001               	movlw	1	; select bank2/3
 16819  0FAF  0085               	movwf	5
 16820  0FB0  3F40               	moviw [0]fsr1
 16821  0FB1  3F80               	movwi [0]fsr0
 16822  0FB2  3F41               	moviw [1]fsr1
 16823  0FB3  3F81               	movwi [1]fsr0
 16824                           
 16825                           ;Buzzer_B1.c: 68: } else if (Buz->BufferStatus2 == 1) {
 16826  0FB4  0008               	return
 16827  0FB5                     l7429:	
 16828  0FB5  0837               	movf	_Buz^(0+128),w
 16829  0FB6  0086               	movwf	6
 16830  0FB7  3001               	movlw	1	; select bank2/3
 16831  0FB8  0087               	movwf	7
 16832  0FB9  1E01               	btfss	1,4
 16833  0FBA  2FE1               	goto	l7435
 16834                           
 16835                           ;Buzzer_B1.c: 69: Buz->BufferStatus2 = 0;
 16836  0FBB  0837               	movf	_Buz^(0+128),w
 16837  0FBC  0086               	movwf	6
 16838  0FBD  3001               	movlw	1	; select bank2/3
 16839  0FBE  0087               	movwf	7
 16840  0FBF  1201               	bcf	1,4
 16841                           
 16842                           ;Buzzer_B1.c: 70: Buz->Count = Buz->CountBuffer2;
 16843  0FC0  0837               	movf	_Buz^(0+128),w
 16844  0FC1  3E05               	addlw	5
 16845  0FC2  0086               	movwf	6
 16846  0FC3  3001               	movlw	1	; select bank2/3
 16847  0FC4  0087               	movwf	7
 16848  0FC5  0801               	movf	1,w
 16849  0FC6  0020               	movlb	0	; select bank0
 16850  0FC7  00A0               	movwf	??_Buzzer_Main
 16851  0FC8  0021               	movlb	1	; select bank1
 16852  0FC9  0837               	movf	_Buz^(0+128),w
 16853  0FCA  3E03               	addlw	3
 16854  0FCB  0086               	movwf	6
 16855  0FCC  3001               	movlw	1	; select bank2/3
 16856  0FCD  0087               	movwf	7
 16857  0FCE  0020               	movlb	0	; select bank0
 16858  0FCF  0820               	movf	??_Buzzer_Main,w
 16859  0FD0  0081               	movwf	1
 16860                           
 16861                           ;Buzzer_B1.c: 71: Buz->TimeValue = Buz->TimeValueBuffer2;
 16862  0FD1  0021               	movlb	1	; select bank1
 16863  0FD2  0837               	movf	_Buz^(0+128),w
 16864  0FD3  3E0A               	addlw	10
 16865  0FD4  0086               	movwf	6
 16866  0FD5  3001               	movlw	1	; select bank2/3
 16867  0FD6  0087               	movwf	7
 16868  0FD7  0837               	movf	_Buz^(0+128),w
 16869  0FD8  3E06               	addlw	6
 16870  0FD9  0084               	movwf	4
 16871  0FDA  3001               	movlw	1	; select bank2/3
 16872  0FDB  0085               	movwf	5
 16873  0FDC  3F40               	moviw [0]fsr1
 16874  0FDD  3F80               	movwi [0]fsr0
 16875  0FDE  3F41               	moviw [1]fsr1
 16876  0FDF  3F81               	movwi [1]fsr0
 16877                           
 16878                           ;Buzzer_B1.c: 72: } else {
 16879  0FE0  0008               	return
 16880  0FE1                     l7435:	
 16881                           
 16882                           ;Buzzer_B1.c: 73: Buz->GO = 0;
 16883  0FE1  0837               	movf	_Buz^(0+128),w
 16884  0FE2  0086               	movwf	6
 16885  0FE3  3001               	movlw	1	; select bank2/3
 16886  0FE4  0087               	movwf	7
 16887  0FE5  1081               	bcf	1,1
 16888                           
 16889                           ;Buzzer_B1.c: 74: }
 16890                           ;Buzzer_B1.c: 75: } else {
 16891  0FE6  0008               	return
 16892  0FE7                     l7437:	
 16893                           
 16894                           ;Buzzer_B1.c: 76: Buz->Switch = 1;
 16895  0FE7  0837               	movf	_Buz^(0+128),w
 16896  0FE8  0086               	movwf	6
 16897  0FE9  3001               	movlw	1	; select bank2/3
 16898  0FEA  0087               	movwf	7
 16899  0FEB  1681               	bsf	1,5
 16900                           
 16901                           ;Buzzer_B1.c: 78: RB3 = 1;
 16902  0FEC  0020               	movlb	0	; select bank0
 16903  0FED  158D               	bsf	13,3	;volatile
 16904                           
 16905                           ;Buzzer_B1.c: 79: }
 16906                           ;Buzzer_B1.c: 80: } else {
 16907  0FEE  0008               	return
 16908  0FEF                     l7441:	
 16909                           
 16910                           ;Buzzer_B1.c: 81: Buz->Switch = 0;
 16911  0FEF  0021               	movlb	1	; select bank1
 16912  0FF0  0837               	movf	_Buz^(0+128),w
 16913  0FF1  0086               	movwf	6
 16914  0FF2  3001               	movlw	1	; select bank2/3
 16915  0FF3  0087               	movwf	7
 16916  0FF4  1281               	bcf	1,5
 16917                           
 16918                           ;Buzzer_B1.c: 83: RB3 = 0;
 16919  0FF5  0020               	movlb	0	; select bank0
 16920  0FF6  118D               	bcf	13,3	;volatile
 16921                           
 16922                           ;Buzzer_B1.c: 85: Buz->Count--;
 16923  0FF7  0021               	movlb	1	; select bank1
 16924  0FF8  0837               	movf	_Buz^(0+128),w
 16925  0FF9  3E03               	addlw	3
 16926  0FFA  0086               	movwf	6
 16927  0FFB  3001               	movlw	1	; select bank2/3
 16928  0FFC  0087               	movwf	7
 16929  0FFD  3001               	movlw	1
 16930  0FFE  0281               	subwf	1,f
 16931  0FFF  0008               	return
 16932  1000                     __end_of_Buzzer_Main:	
 16933                           
 16934                           	psect	text110
 16935  1B3A                     __ptext110:	
 16936 ;; *************** function _Buzzer_Initialization *****************
 16937 ;; Defined at:
 16938 ;;		line 11 in file "../src/Buzzer_B1.c"
 16939 ;; Parameters:    Size  Location     Type
 16940 ;;		None
 16941 ;; Auto vars:     Size  Location     Type
 16942 ;;		None
 16943 ;; Return value:  Size  Location     Type
 16944 ;;		None               void
 16945 ;; Registers used:
 16946 ;;		wreg, fsr1l, fsr1h
 16947 ;; Tracked objects:
 16948 ;;		On entry : 0/0
 16949 ;;		On exit  : 0/0
 16950 ;;		Unchanged: 0/0
 16951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16956 ;;Total ram usage:        1 bytes
 16957 ;; Hardware stack levels used:    1
 16958 ;; Hardware stack levels required when called:    5
 16959 ;; This function calls:
 16960 ;;		Nothing
 16961 ;; This function is called by:
 16962 ;;		_main
 16963 ;; This function uses a non-reentrant model
 16964 ;;
 16965                           
 16966                           
 16967                           ;psect for function _Buzzer_Initialization
 16968  1B3A                     _Buzzer_Initialization:	
 16969                           
 16970                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 16971                           
 16972                           ;incstack = 0
 16973                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 16974  1B3A  304D               	movlw	_Buz1& (0+255)
 16975  1B3B  0020               	movlb	0	; select bank0
 16976  1B3C  00A0               	movwf	??_Buzzer_Initialization
 16977  1B3D  0820               	movf	??_Buzzer_Initialization,w
 16978  1B3E  0021               	movlb	1	; select bank1
 16979  1B3F  00B7               	movwf	_Buz^(0+128)
 16980                           
 16981                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 16982  1B40  0837               	movf	_Buz^(0+128),w
 16983  1B41  0086               	movwf	6
 16984  1B42  3001               	movlw	1	; select bank2/3
 16985  1B43  0087               	movwf	7
 16986  1B44  1401               	bsf	1,0
 16987  1B45  0008               	return
 16988  1B46                     __end_of_Buzzer_Initialization:	
 16989                           
 16990                           	psect	intentry
 16991  0004                     __pintentry:	
 16992 ;; *************** function _ISR *****************
 16993 ;; Defined at:
 16994 ;;		line 109 in file "../src/MCU_B1.c"
 16995 ;; Parameters:    Size  Location     Type
 16996 ;;		None
 16997 ;; Auto vars:     Size  Location     Type
 16998 ;;		None
 16999 ;; Return value:  Size  Location     Type
 17000 ;;		None               void
 17001 ;; Registers used:
 17002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17003 ;; Tracked objects:
 17004 ;;		On entry : 0/0
 17005 ;;		On exit  : 0/0
 17006 ;;		Unchanged: 0/0
 17007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17012 ;;Total ram usage:        1 bytes
 17013 ;; Hardware stack levels used:    1
 17014 ;; Hardware stack levels required when called:    4
 17015 ;; This function calls:
 17016 ;;		_INT_ISR
 17017 ;;		_IOC_ISR
 17018 ;;		_TMR0_ISR
 17019 ;; This function is called by:
 17020 ;;		Interrupt level 1
 17021 ;; This function uses a non-reentrant model
 17022 ;;
 17023                           
 17024  0004                     _ISR:	
 17025                           
 17026                           ;incstack = 0
 17027                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17028  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17029  0005  3180               	pagesel	$
 17030  0006  0020               	movlb	0	; select bank0
 17031  0007  087F               	movf	127,w
 17032  0008  00F7               	movwf	??_ISR
 17033                           
 17034                           ;MCU_B1.c: 111: IOC_ISR();
 17035  0009  319C  2472  3180   	fcall	_IOC_ISR
 17036                           
 17037                           ;MCU_B1.c: 113: TMR0_ISR();
 17038  000C  3191  2178  3180   	fcall	_TMR0_ISR
 17039                           
 17040                           ;MCU_B1.c: 115: ;;
 17041                           ;MCU_B1.c: 119: INT_ISR();
 17042  000F  319B  232E         	fcall	_INT_ISR
 17043  0011  0877               	movf	??_ISR,w
 17044  0012  0020               	movlb	0	; select bank0
 17045  0013  00FF               	movwf	127
 17046  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 17047  0015  0009               	retfie
 17048  0016                     __end_of_ISR:	
 17049                           
 17050                           	psect	text112
 17051  1178                     __ptext112:	
 17052 ;; *************** function _TMR0_ISR *****************
 17053 ;; Defined at:
 17054 ;;		line 137 in file "../src/MCU_B1.c"
 17055 ;; Parameters:    Size  Location     Type
 17056 ;;		None
 17057 ;; Auto vars:     Size  Location     Type
 17058 ;;		None
 17059 ;; Return value:  Size  Location     Type
 17060 ;;		None               void
 17061 ;; Registers used:
 17062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17063 ;; Tracked objects:
 17064 ;;		On entry : 0/0
 17065 ;;		On exit  : 0/0
 17066 ;;		Unchanged: 0/0
 17067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17072 ;;Total ram usage:        0 bytes
 17073 ;; Hardware stack levels used:    1
 17074 ;; Hardware stack levels required when called:    2
 17075 ;; This function calls:
 17076 ;;		_setDimmerLights_IntrControl
 17077 ;; This function is called by:
 17078 ;;		_ISR
 17079 ;; This function uses a non-reentrant model
 17080 ;;
 17081                           
 17082                           
 17083                           ;psect for function _TMR0_ISR
 17084  1178                     _TMR0_ISR:	
 17085                           
 17086                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 17087                           
 17088                           ;incstack = 0
 17089                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17090  1178  1E8B               	btfss	11,5	;volatile
 17091  1179  0008               	return
 17092  117A  1D0B               	btfss	11,2	;volatile
 17093  117B  0008               	return
 17094                           
 17095                           ;MCU_B1.c: 139: TMR0 = (256-190);
 17096  117C  3042               	movlw	66
 17097  117D  0020               	movlb	0	; select bank0
 17098  117E  0095               	movwf	21	;volatile
 17099                           
 17100                           ;MCU_B1.c: 140: TMR0IF = 0;
 17101  117F  110B               	bcf	11,2	;volatile
 17102                           
 17103                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 17104  1180  3001               	movlw	1
 17105  1181  3180  204C  3191   	fcall	_setDimmerLights_IntrControl
 17106                           
 17107                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 17108  1184  3002               	movlw	2
 17109  1185  3180  204C  3191   	fcall	_setDimmerLights_IntrControl
 17110                           
 17111                           ;MCU_B1.c: 155: setDimmerLights_IntrControl(3);
 17112  1188  3003               	movlw	3
 17113  1189  3180  204C  3191   	fcall	_setDimmerLights_IntrControl
 17114                           
 17115                           ;MCU_B1.c: 161: Timer0->Count++;
 17116  118C  0021               	movlb	1	; select bank1
 17117  118D  0A65               	incf	_Timer0^(0+128),w
 17118  118E  0086               	movwf	6
 17119  118F  3001               	movlw	1	; select bank2/3
 17120  1190  0087               	movwf	7
 17121  1191  3001               	movlw	1
 17122  1192  0781               	addwf	1,f
 17123  1193  3141               	addfsr 1,1
 17124  1194  1803               	skipnc
 17125  1195  0A81               	incf	1,f
 17126                           
 17127                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 17128  1196  0A65               	incf	_Timer0^(0+128),w
 17129  1197  0086               	movwf	6
 17130  1198  3001               	movlw	1	; select bank2/3
 17131  1199  0087               	movwf	7
 17132  119A  3F40               	moviw [0]fsr1
 17133  119B  3A64               	xorlw	100
 17134  119C  1D03               	skipz
 17135  119D  29A0               	goto	u711_25
 17136  119E  3F41               	moviw [1]fsr1
 17137  119F  3A00               	xorlw	0
 17138  11A0                     u711_25:	
 17139  11A0  1D03               	skipz
 17140  11A1  0008               	return
 17141                           
 17142                           ;MCU_B1.c: 163: Timer0->Count = 0;
 17143  11A2  0A65               	incf	_Timer0^(0+128),w
 17144  11A3  0086               	movwf	6
 17145  11A4  3001               	movlw	1	; select bank2/3
 17146  11A5  0087               	movwf	7
 17147  11A6  3000               	movlw	0
 17148  11A7  3FC0               	movwi [0]fsr1
 17149  11A8  3FC1               	movwi [1]fsr1
 17150                           
 17151                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 17152  11A9  0867               	movf	_myMain^(0+128),w
 17153  11AA  0086               	movwf	6
 17154  11AB  3001               	movlw	1	; select bank2/3
 17155  11AC  0087               	movwf	7
 17156  11AD  1481               	bsf	1,1
 17157  11AE  0008               	return
 17158  11AF                     __end_of_TMR0_ISR:	
 17159                           
 17160                           	psect	text113
 17161  004C                     __ptext113:	
 17162 ;; *************** function _setDimmerLights_IntrControl *****************
 17163 ;; Defined at:
 17164 ;;		line 87 in file "../src/Dimmer_B1.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;  lights          1    wreg     unsigned char 
 17167 ;; Auto vars:     Size  Location     Type
 17168 ;;  lights          1    6[COMMON] unsigned char 
 17169 ;; Return value:  Size  Location     Type
 17170 ;;		None               void
 17171 ;; Registers used:
 17172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;Total ram usage:        5 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    1
 17185 ;; This function calls:
 17186 ;;		_DimmerIntrPointSelect
 17187 ;; This function is called by:
 17188 ;;		_TMR0_ISR
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _setDimmerLights_IntrControl
 17194  004C                     _setDimmerLights_IntrControl:	
 17195                           
 17196                           ;incstack = 0
 17197                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17198                           ;setDimmerLights_IntrControl@lights stored from wreg
 17199  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 17200                           
 17201                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 17202  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 17203  004E  319D  2599  3180   	fcall	_DimmerIntrPointSelect
 17204                           
 17205                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 17206  0051  0879               	movf	_DimmerLightsIntr,w
 17207  0052  0086               	movwf	6
 17208  0053  3001               	movlw	1	; select bank2/3
 17209  0054  0087               	movwf	7
 17210  0055  1C01               	btfss	1,0
 17211  0056  28B7               	goto	i1l6853
 17212                           
 17213                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 17214  0057  3001               	movlw	1
 17215  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 17216  0059  0879               	movf	_DimmerLightsIntr,w
 17217  005A  3E03               	addlw	3
 17218  005B  0086               	movwf	6
 17219  005C  3001               	movlw	1	; select bank2/3
 17220  005D  0087               	movwf	7
 17221  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 17222  005F  0781               	addwf	1,f
 17223                           
 17224                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 17225  0060  0021               	movlb	1	; select bank1
 17226  0061  0839               	movf	_Dimmer^(0+128),w
 17227  0062  3E02               	addlw	2
 17228  0063  0086               	movwf	6
 17229  0064  0187               	clrf	7
 17230  0065  0801               	movf	1,w
 17231  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 17232  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17233  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 17234  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 17235  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 17236  006B  1903               	skipnz
 17237  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17238  006D  0879               	movf	_DimmerLightsIntr,w
 17239  006E  3E04               	addlw	4
 17240  006F  0086               	movwf	6
 17241  0070  3001               	movlw	1	; select bank2/3
 17242  0071  0087               	movwf	7
 17243  0072  0801               	movf	1,w
 17244  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 17245  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17246  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17247  0076  1803               	skipnc
 17248  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17249  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17250  0079  0879               	movf	_DimmerLightsIntr,w
 17251  007A  3E03               	addlw	3
 17252  007B  0086               	movwf	6
 17253  007C  3001               	movlw	1	; select bank2/3
 17254  007D  0087               	movwf	7
 17255  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17256  007F  3A80               	xorlw	128
 17257  0080  3C80               	sublw	128
 17258  0081  1D03               	skipz
 17259  0082  2885               	goto	u595_25
 17260  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17261  0084  0201               	subwf	1,w
 17262  0085                     u595_25:	
 17263  0085  1C03               	skipc
 17264  0086  29C6               	goto	i1l6919
 17265                           
 17266                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17267  0087  0879               	movf	_DimmerLightsIntr,w
 17268  0088  3E03               	addlw	3
 17269  0089  0086               	movwf	6
 17270  008A  3001               	movlw	1	; select bank2/3
 17271  008B  0087               	movwf	7
 17272  008C  0181               	clrf	1
 17273                           
 17274                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17275  008D  0879               	movf	_DimmerLightsIntr,w
 17276  008E  0086               	movwf	6
 17277  008F  3001               	movlw	1	; select bank2/3
 17278  0090  0087               	movwf	7
 17279  0091  1001               	bcf	1,0
 17280                           
 17281                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17282  0092  0879               	movf	_DimmerLightsIntr,w
 17283  0093  0086               	movwf	6
 17284  0094  3001               	movlw	1	; select bank2/3
 17285  0095  0087               	movwf	7
 17286  0096  1F01               	btfss	1,6
 17287  0097  29C6               	goto	i1l6919
 17288                           
 17289                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17290  0098  0879               	movf	_DimmerLightsIntr,w
 17291  0099  3E08               	addlw	8
 17292  009A  0086               	movwf	6
 17293  009B  3001               	movlw	1	; select bank2/3
 17294  009C  0087               	movwf	7
 17295  009D  1401               	bsf	1,0
 17296                           
 17297                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17298  009E  0879               	movf	_DimmerLightsIntr,w
 17299  009F  3E08               	addlw	8
 17300  00A0  0086               	movwf	6
 17301  00A1  3001               	movlw	1	; select bank2/3
 17302  00A2  0087               	movwf	7
 17303  00A3  1681               	bsf	1,5
 17304                           
 17305                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17306  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 17307  00A5  3A01               	xorlw	1
 17308  00A6  1D03               	skipz
 17309  00A7  28AA               	goto	i1l6845
 17310                           
 17311                           ;Dimmer_B1.c: 101: RB4 = 1;
 17312  00A8  0020               	movlb	0	; select bank0
 17313  00A9  160D               	bsf	13,4	;volatile
 17314  00AA                     i1l6845:	
 17315                           ;Dimmer_B1.c: 102: ;;
 17316                           
 17317                           
 17318                           ;Dimmer_B1.c: 103: }
 17319                           ;Dimmer_B1.c: 106: if (lights == 2) {
 17320  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 17321  00AB  3A02               	xorlw	2
 17322  00AC  1D03               	skipz
 17323  00AD  28B0               	goto	i1l6849
 17324                           
 17325                           ;Dimmer_B1.c: 107: RA7 = 1;
 17326  00AE  0020               	movlb	0	; select bank0
 17327  00AF  178C               	bsf	12,7	;volatile
 17328  00B0                     i1l6849:	
 17329                           
 17330                           ;Dimmer_B1.c: 108: }
 17331                           ;Dimmer_B1.c: 111: if (lights == 3) {
 17332  00B0  0876               	movf	setDimmerLights_IntrControl@lights,w
 17333  00B1  3A03               	xorlw	3
 17334  00B2  1D03               	skipz
 17335  00B3  29C6               	goto	i1l6919
 17336                           
 17337                           ;Dimmer_B1.c: 112: RB1 = 1;
 17338  00B4  0020               	movlb	0	; select bank0
 17339  00B5  148D               	bsf	13,1	;volatile
 17340                           
 17341                           ;Dimmer_B1.c: 113: }
 17342                           ;Dimmer_B1.c: 115: }
 17343                           ;Dimmer_B1.c: 116: }
 17344                           ;Dimmer_B1.c: 117: } else {
 17345  00B6  29C6               	goto	i1l6919
 17346  00B7                     i1l6853:	
 17347                           
 17348                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17349  00B7  0879               	movf	_DimmerLightsIntr,w
 17350  00B8  3E08               	addlw	8
 17351  00B9  0086               	movwf	6
 17352  00BA  3001               	movlw	1	; select bank2/3
 17353  00BB  0087               	movwf	7
 17354  00BC  1C01               	btfss	1,0
 17355  00BD  29C6               	goto	i1l6919
 17356                           
 17357                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17358  00BE  0879               	movf	_DimmerLightsIntr,w
 17359  00BF  3E08               	addlw	8
 17360  00C0  0086               	movwf	6
 17361  00C1  3001               	movlw	1	; select bank2/3
 17362  00C2  0087               	movwf	7
 17363  00C3  1001               	bcf	1,0
 17364                           
 17365                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17366  00C4  0879               	movf	_DimmerLightsIntr,w
 17367  00C5  0086               	movwf	6
 17368  00C6  3001               	movlw	1	; select bank2/3
 17369  00C7  0087               	movwf	7
 17370  00C8  1C81               	btfss	1,1
 17371  00C9  29C6               	goto	i1l6919
 17372                           
 17373                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17374  00CA  3001               	movlw	1
 17375  00CB  00F2               	movwf	??_setDimmerLights_IntrControl
 17376  00CC  0A79               	incf	_DimmerLightsIntr,w
 17377  00CD  0086               	movwf	6
 17378  00CE  3001               	movlw	1	; select bank2/3
 17379  00CF  0087               	movwf	7
 17380  00D0  0872               	movf	??_setDimmerLights_IntrControl,w
 17381  00D1  0781               	addwf	1,f
 17382                           
 17383                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17384  00D2  0A79               	incf	_DimmerLightsIntr,w
 17385  00D3  0086               	movwf	6
 17386  00D4  3001               	movlw	1	; select bank2/3
 17387  00D5  0087               	movwf	7
 17388  00D6  0879               	movf	_DimmerLightsIntr,w
 17389  00D7  3E02               	addlw	2
 17390  00D8  0084               	movwf	4
 17391  00D9  3001               	movlw	1	; select bank2/3
 17392  00DA  0085               	movwf	5
 17393  00DB  0800               	movf	0,w
 17394  00DC  0201               	subwf	1,w
 17395  00DD  1C03               	skipc
 17396  00DE  29C6               	goto	i1l6919
 17397                           
 17398                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17399  00DF  0A79               	incf	_DimmerLightsIntr,w
 17400  00E0  0086               	movwf	6
 17401  00E1  3001               	movlw	1	; select bank2/3
 17402  00E2  0087               	movwf	7
 17403  00E3  0181               	clrf	1
 17404                           
 17405                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17406  00E4  0879               	movf	_DimmerLightsIntr,w
 17407  00E5  0086               	movwf	6
 17408  00E6  3001               	movlw	1	; select bank2/3
 17409  00E7  0087               	movwf	7
 17410  00E8  1D81               	btfss	1,3
 17411  00E9  2920               	goto	i1l6879
 17412                           
 17413                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17414  00EA  0879               	movf	_DimmerLightsIntr,w
 17415  00EB  0086               	movwf	6
 17416  00EC  3001               	movlw	1	; select bank2/3
 17417  00ED  0087               	movwf	7
 17418  00EE  1A01               	btfsc	1,4
 17419  00EF  2907               	goto	i1l6873
 17420                           
 17421                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 17422  00F0  0879               	movf	_DimmerLightsIntr,w
 17423  00F1  3E04               	addlw	4
 17424  00F2  0086               	movwf	6
 17425  00F3  3001               	movlw	1	; select bank2/3
 17426  00F4  0087               	movwf	7
 17427  00F5  3005               	movlw	5
 17428  00F6  0201               	subwf	1,w
 17429  00F7  1C03               	skipc
 17430  00F8  2901               	goto	i1l6871
 17431                           
 17432                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17433  00F9  0879               	movf	_DimmerLightsIntr,w
 17434  00FA  3E04               	addlw	4
 17435  00FB  0086               	movwf	6
 17436  00FC  3001               	movlw	1	; select bank2/3
 17437  00FD  0087               	movwf	7
 17438  00FE  3001               	movlw	1
 17439  00FF  0281               	subwf	1,f
 17440                           
 17441                           ;Dimmer_B1.c: 128: } else {
 17442  0100  29C6               	goto	i1l6919
 17443  0101                     i1l6871:	
 17444                           
 17445                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17446  0101  0879               	movf	_DimmerLightsIntr,w
 17447  0102  0086               	movwf	6
 17448  0103  3001               	movlw	1	; select bank2/3
 17449  0104  0087               	movwf	7
 17450  0105  1601               	bsf	1,4
 17451                           
 17452                           ;Dimmer_B1.c: 130: }
 17453                           ;Dimmer_B1.c: 131: } else {
 17454  0106  29C6               	goto	i1l6919
 17455  0107                     i1l6873:	
 17456                           
 17457                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17458  0107  0879               	movf	_DimmerLightsIntr,w
 17459  0108  3E04               	addlw	4
 17460  0109  0086               	movwf	6
 17461  010A  3001               	movlw	1	; select bank2/3
 17462  010B  0087               	movwf	7
 17463  010C  303C               	movlw	60
 17464  010D  0201               	subwf	1,w
 17465  010E  1803               	skipnc
 17466  010F  291A               	goto	i1l6877
 17467                           
 17468                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17469  0110  3001               	movlw	1
 17470  0111  00F2               	movwf	??_setDimmerLights_IntrControl
 17471  0112  0879               	movf	_DimmerLightsIntr,w
 17472  0113  3E04               	addlw	4
 17473  0114  0086               	movwf	6
 17474  0115  3001               	movlw	1	; select bank2/3
 17475  0116  0087               	movwf	7
 17476  0117  0872               	movf	??_setDimmerLights_IntrControl,w
 17477  0118  0781               	addwf	1,f
 17478                           
 17479                           ;Dimmer_B1.c: 134: } else {
 17480  0119  29C6               	goto	i1l6919
 17481  011A                     i1l6877:	
 17482                           
 17483                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17484  011A  0879               	movf	_DimmerLightsIntr,w
 17485  011B  0086               	movwf	6
 17486  011C  3001               	movlw	1	; select bank2/3
 17487  011D  0087               	movwf	7
 17488  011E  1201               	bcf	1,4
 17489                           
 17490                           ;Dimmer_B1.c: 136: }
 17491                           ;Dimmer_B1.c: 137: }
 17492                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17493  011F  29C6               	goto	i1l6919
 17494  0120                     i1l6879:	
 17495  0120  0879               	movf	_DimmerLightsIntr,w
 17496  0121  0086               	movwf	6
 17497  0122  3001               	movlw	1	; select bank2/3
 17498  0123  0087               	movwf	7
 17499  0124  1D01               	btfss	1,2
 17500  0125  2967               	goto	i1l6893
 17501                           
 17502                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17503  0126  0879               	movf	_DimmerLightsIntr,w
 17504  0127  3E05               	addlw	5
 17505  0128  0086               	movwf	6
 17506  0129  3001               	movlw	1	; select bank2/3
 17507  012A  0087               	movwf	7
 17508  012B  0879               	movf	_DimmerLightsIntr,w
 17509  012C  3E04               	addlw	4
 17510  012D  0084               	movwf	4
 17511  012E  3001               	movlw	1	; select bank2/3
 17512  012F  0085               	movwf	5
 17513  0130  0800               	movf	0,w
 17514  0131  0201               	subwf	1,w
 17515  0132  1803               	skipnc
 17516  0133  293C               	goto	i1l6885
 17517                           
 17518                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17519  0134  0879               	movf	_DimmerLightsIntr,w
 17520  0135  3E04               	addlw	4
 17521  0136  0086               	movwf	6
 17522  0137  3001               	movlw	1	; select bank2/3
 17523  0138  0087               	movwf	7
 17524  0139  3001               	movlw	1
 17525  013A  0281               	subwf	1,f
 17526                           
 17527                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17528  013B  2953               	goto	i1l6889
 17529  013C                     i1l6885:	
 17530  013C  0879               	movf	_DimmerLightsIntr,w
 17531  013D  3E04               	addlw	4
 17532  013E  0086               	movwf	6
 17533  013F  3001               	movlw	1	; select bank2/3
 17534  0140  0087               	movwf	7
 17535  0141  0879               	movf	_DimmerLightsIntr,w
 17536  0142  3E05               	addlw	5
 17537  0143  0084               	movwf	4
 17538  0144  3001               	movlw	1	; select bank2/3
 17539  0145  0085               	movwf	5
 17540  0146  0800               	movf	0,w
 17541  0147  0201               	subwf	1,w
 17542  0148  1803               	skipnc
 17543  0149  2953               	goto	i1l6889
 17544                           
 17545                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17546  014A  3001               	movlw	1
 17547  014B  00F2               	movwf	??_setDimmerLights_IntrControl
 17548  014C  0879               	movf	_DimmerLightsIntr,w
 17549  014D  3E04               	addlw	4
 17550  014E  0086               	movwf	6
 17551  014F  3001               	movlw	1	; select bank2/3
 17552  0150  0087               	movwf	7
 17553  0151  0872               	movf	??_setDimmerLights_IntrControl,w
 17554  0152  0781               	addwf	1,f
 17555  0153                     i1l6889:	
 17556                           
 17557                           ;Dimmer_B1.c: 143: }
 17558                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17559  0153  0879               	movf	_DimmerLightsIntr,w
 17560  0154  3E05               	addlw	5
 17561  0155  0086               	movwf	6
 17562  0156  3001               	movlw	1	; select bank2/3
 17563  0157  0087               	movwf	7
 17564  0158  0879               	movf	_DimmerLightsIntr,w
 17565  0159  3E04               	addlw	4
 17566  015A  0084               	movwf	4
 17567  015B  3001               	movlw	1	; select bank2/3
 17568  015C  0085               	movwf	5
 17569  015D  0800               	movf	0,w
 17570  015E  0601               	xorwf	1,w
 17571  015F  1D03               	skipz
 17572  0160  29C6               	goto	i1l6919
 17573                           
 17574                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17575  0161  0879               	movf	_DimmerLightsIntr,w
 17576  0162  0086               	movwf	6
 17577  0163  3001               	movlw	1	; select bank2/3
 17578  0164  0087               	movwf	7
 17579  0165  1101               	bcf	1,2
 17580  0166  2982               	goto	i1l6899
 17581  0167                     i1l6893:	
 17582                           ;Dimmer_B1.c: 147: }
 17583                           ;Dimmer_B1.c: 148: } else {
 17584                           
 17585                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17586                           
 17587                           
 17588                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17589  0167  0879               	movf	_DimmerLightsIntr,w
 17590  0168  0086               	movwf	6
 17591  0169  3001               	movlw	1	; select bank2/3
 17592  016A  0087               	movwf	7
 17593  016B  1E81               	btfss	1,5
 17594  016C  2988               	goto	i1l6901
 17595                           
 17596                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17597  016D  0879               	movf	_DimmerLightsIntr,w
 17598  016E  3E04               	addlw	4
 17599  016F  0086               	movwf	6
 17600  0170  3001               	movlw	1	; select bank2/3
 17601  0171  0087               	movwf	7
 17602  0172  3001               	movlw	1
 17603  0173  0281               	subwf	1,f
 17604                           
 17605                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17606  0174  0879               	movf	_DimmerLightsIntr,w
 17607  0175  3E05               	addlw	5
 17608  0176  0086               	movwf	6
 17609  0177  3001               	movlw	1	; select bank2/3
 17610  0178  0087               	movwf	7
 17611  0179  0879               	movf	_DimmerLightsIntr,w
 17612  017A  3E04               	addlw	4
 17613  017B  0084               	movwf	4
 17614  017C  3001               	movlw	1	; select bank2/3
 17615  017D  0085               	movwf	5
 17616  017E  0800               	movf	0,w
 17617  017F  0201               	subwf	1,w
 17618  0180  1C03               	skipc
 17619  0181  29C6               	goto	i1l6919
 17620  0182                     i1l6899:	
 17621                           
 17622                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17623  0182  0879               	movf	_DimmerLightsIntr,w
 17624  0183  0086               	movwf	6
 17625  0184  3001               	movlw	1	; select bank2/3
 17626  0185  0087               	movwf	7
 17627  0186  1081               	bcf	1,1
 17628                           
 17629                           ;Dimmer_B1.c: 153: }
 17630                           ;Dimmer_B1.c: 154: } else {
 17631  0187  29C6               	goto	i1l6919
 17632  0188                     i1l6901:	
 17633                           
 17634                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17635  0188  3001               	movlw	1
 17636  0189  00F2               	movwf	??_setDimmerLights_IntrControl
 17637  018A  0879               	movf	_DimmerLightsIntr,w
 17638  018B  3E04               	addlw	4
 17639  018C  0086               	movwf	6
 17640  018D  3001               	movlw	1	; select bank2/3
 17641  018E  0087               	movwf	7
 17642  018F  0872               	movf	??_setDimmerLights_IntrControl,w
 17643  0190  0781               	addwf	1,f
 17644                           
 17645                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17646  0191  0879               	movf	_DimmerLightsIntr,w
 17647  0192  3E04               	addlw	4
 17648  0193  0086               	movwf	6
 17649  0194  3001               	movlw	1	; select bank2/3
 17650  0195  0087               	movwf	7
 17651  0196  0879               	movf	_DimmerLightsIntr,w
 17652  0197  3E06               	addlw	6
 17653  0198  0084               	movwf	4
 17654  0199  3001               	movlw	1	; select bank2/3
 17655  019A  0085               	movwf	5
 17656  019B  0800               	movf	0,w
 17657  019C  0201               	subwf	1,w
 17658  019D  1C03               	skipc
 17659  019E  29C6               	goto	i1l6919
 17660                           
 17661                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17662  019F  0879               	movf	_DimmerLightsIntr,w
 17663  01A0  0086               	movwf	6
 17664  01A1  3001               	movlw	1	; select bank2/3
 17665  01A2  0087               	movwf	7
 17666  01A3  1081               	bcf	1,1
 17667                           
 17668                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17669  01A4  0879               	movf	_DimmerLightsIntr,w
 17670  01A5  0086               	movwf	6
 17671  01A6  3001               	movlw	1	; select bank2/3
 17672  01A7  0087               	movwf	7
 17673  01A8  1301               	bcf	1,6
 17674                           
 17675                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17676  01A9  0879               	movf	_DimmerLightsIntr,w
 17677  01AA  3E09               	addlw	9
 17678  01AB  0086               	movwf	6
 17679  01AC  3001               	movlw	1	; select bank2/3
 17680  01AD  0087               	movwf	7
 17681  01AE  1501               	bsf	1,2
 17682                           
 17683                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17684  01AF  0021               	movlb	1	; select bank1
 17685  01B0  0839               	movf	_Dimmer^(0+128),w
 17686  01B1  0086               	movwf	6
 17687  01B2  0187               	clrf	7
 17688  01B3  1401               	bsf	1,0
 17689                           
 17690                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17691  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 17692  01B5  3A01               	xorlw	1
 17693  01B6  1D03               	skipz
 17694  01B7  29BA               	goto	i1l6911
 17695                           
 17696                           ;Dimmer_B1.c: 163: RC7 = 0;
 17697  01B8  0020               	movlb	0	; select bank0
 17698  01B9  138E               	bcf	14,7	;volatile
 17699  01BA                     i1l6911:	
 17700                           
 17701                           ;Dimmer_B1.c: 165: }
 17702                           ;Dimmer_B1.c: 168: if (lights == 2) {
 17703  01BA  0876               	movf	setDimmerLights_IntrControl@lights,w
 17704  01BB  3A02               	xorlw	2
 17705  01BC  1D03               	skipz
 17706  01BD  29C0               	goto	i1l6915
 17707                           
 17708                           ;Dimmer_B1.c: 169: RA3 = 0;
 17709  01BE  0020               	movlb	0	; select bank0
 17710  01BF  118C               	bcf	12,3	;volatile
 17711  01C0                     i1l6915:	
 17712                           
 17713                           ;Dimmer_B1.c: 170: }
 17714                           ;Dimmer_B1.c: 173: if (lights == 3) {
 17715  01C0  0876               	movf	setDimmerLights_IntrControl@lights,w
 17716  01C1  3A03               	xorlw	3
 17717  01C2  1D03               	skipz
 17718  01C3  29C6               	goto	i1l6919
 17719                           
 17720                           ;Dimmer_B1.c: 174: RC6 = 0;
 17721  01C4  0020               	movlb	0	; select bank0
 17722  01C5  130E               	bcf	14,6	;volatile
 17723  01C6                     i1l6919:	
 17724                           ;Dimmer_B1.c: 175: }
 17725                           ;Dimmer_B1.c: 177: ;;
 17726                           
 17727                           
 17728                           ;Dimmer_B1.c: 178: }
 17729                           ;Dimmer_B1.c: 179: }
 17730                           ;Dimmer_B1.c: 180: }
 17731                           ;Dimmer_B1.c: 181: }
 17732                           ;Dimmer_B1.c: 182: }
 17733                           ;Dimmer_B1.c: 183: }
 17734                           ;Dimmer_B1.c: 184: }
 17735                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17736  01C6  0879               	movf	_DimmerLightsIntr,w
 17737  01C7  3E08               	addlw	8
 17738  01C8  0086               	movwf	6
 17739  01C9  3001               	movlw	1	; select bank2/3
 17740  01CA  0087               	movwf	7
 17741  01CB  1E81               	btfss	1,5
 17742  01CC  29FD               	goto	i1l6941
 17743                           
 17744                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17745  01CD  3001               	movlw	1
 17746  01CE  00F2               	movwf	??_setDimmerLights_IntrControl
 17747  01CF  0879               	movf	_DimmerLightsIntr,w
 17748  01D0  3E07               	addlw	7
 17749  01D1  0086               	movwf	6
 17750  01D2  3001               	movlw	1	; select bank2/3
 17751  01D3  0087               	movwf	7
 17752  01D4  0872               	movf	??_setDimmerLights_IntrControl,w
 17753  01D5  0781               	addwf	1,f
 17754                           
 17755                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17756  01D6  0879               	movf	_DimmerLightsIntr,w
 17757  01D7  3E07               	addlw	7
 17758  01D8  0086               	movwf	6
 17759  01D9  3001               	movlw	1	; select bank2/3
 17760  01DA  0087               	movwf	7
 17761  01DB  3005               	movlw	5
 17762  01DC  0201               	subwf	1,w
 17763  01DD  1C03               	skipc
 17764  01DE  29FD               	goto	i1l6941
 17765                           
 17766                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17767  01DF  0879               	movf	_DimmerLightsIntr,w
 17768  01E0  3E07               	addlw	7
 17769  01E1  0086               	movwf	6
 17770  01E2  3001               	movlw	1	; select bank2/3
 17771  01E3  0087               	movwf	7
 17772  01E4  0181               	clrf	1
 17773                           
 17774                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17775  01E5  0879               	movf	_DimmerLightsIntr,w
 17776  01E6  3E08               	addlw	8
 17777  01E7  0086               	movwf	6
 17778  01E8  3001               	movlw	1	; select bank2/3
 17779  01E9  0087               	movwf	7
 17780  01EA  1281               	bcf	1,5
 17781                           
 17782                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17783  01EB  0876               	movf	setDimmerLights_IntrControl@lights,w
 17784  01EC  3A01               	xorlw	1
 17785  01ED  1D03               	skipz
 17786  01EE  29F1               	goto	i1l6933
 17787                           
 17788                           ;Dimmer_B1.c: 193: RB4 = 0;
 17789  01EF  0020               	movlb	0	; select bank0
 17790  01F0  120D               	bcf	13,4	;volatile
 17791  01F1                     i1l6933:	
 17792                           ;Dimmer_B1.c: 194: ;;
 17793                           
 17794                           
 17795                           ;Dimmer_B1.c: 195: }
 17796                           ;Dimmer_B1.c: 198: if (lights == 2) {
 17797  01F1  0876               	movf	setDimmerLights_IntrControl@lights,w
 17798  01F2  3A02               	xorlw	2
 17799  01F3  1D03               	skipz
 17800  01F4  29F7               	goto	i1l6937
 17801                           
 17802                           ;Dimmer_B1.c: 199: RA7 = 0;
 17803  01F5  0020               	movlb	0	; select bank0
 17804  01F6  138C               	bcf	12,7	;volatile
 17805  01F7                     i1l6937:	
 17806                           
 17807                           ;Dimmer_B1.c: 200: }
 17808                           ;Dimmer_B1.c: 203: if (lights == 3) {
 17809  01F7  0876               	movf	setDimmerLights_IntrControl@lights,w
 17810  01F8  3A03               	xorlw	3
 17811  01F9  1D03               	skipz
 17812  01FA  29FD               	goto	i1l6941
 17813                           
 17814                           ;Dimmer_B1.c: 204: RB1 = 0;
 17815  01FB  0020               	movlb	0	; select bank0
 17816  01FC  108D               	bcf	13,1	;volatile
 17817  01FD                     i1l6941:	
 17818                           
 17819                           ;Dimmer_B1.c: 205: }
 17820                           ;Dimmer_B1.c: 207: }
 17821                           ;Dimmer_B1.c: 208: }
 17822                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17823  01FD  0879               	movf	_DimmerLightsIntr,w
 17824  01FE  3E09               	addlw	9
 17825  01FF  0086               	movwf	6
 17826  0200  3001               	movlw	1	; select bank2/3
 17827  0201  0087               	movwf	7
 17828  0202  1E81               	btfss	1,5
 17829  0203  0008               	return
 17830                           
 17831                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17832  0204  3001               	movlw	1
 17833  0205  00F2               	movwf	??_setDimmerLights_IntrControl
 17834  0206  0879               	movf	_DimmerLightsIntr,w
 17835  0207  3E0A               	addlw	10
 17836  0208  0086               	movwf	6
 17837  0209  3001               	movlw	1	; select bank2/3
 17838  020A  0087               	movwf	7
 17839  020B  0872               	movf	??_setDimmerLights_IntrControl,w
 17840  020C  0781               	addwf	1,f
 17841                           
 17842                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17843  020D  0879               	movf	_DimmerLightsIntr,w
 17844  020E  3E0A               	addlw	10
 17845  020F  0086               	movwf	6
 17846  0210  3001               	movlw	1	; select bank2/3
 17847  0211  0087               	movwf	7
 17848  0212  0801               	movf	1,w
 17849  0213  3A46               	xorlw	70
 17850  0214  1D03               	skipz
 17851  0215  0008               	return
 17852                           
 17853                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17854  0216  0879               	movf	_DimmerLightsIntr,w
 17855  0217  3E0A               	addlw	10
 17856  0218  0086               	movwf	6
 17857  0219  3001               	movlw	1	; select bank2/3
 17858  021A  0087               	movwf	7
 17859  021B  0181               	clrf	1
 17860                           
 17861                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17862  021C  0879               	movf	_DimmerLightsIntr,w
 17863  021D  3E09               	addlw	9
 17864  021E  0086               	movwf	6
 17865  021F  3001               	movlw	1	; select bank2/3
 17866  0220  0087               	movwf	7
 17867  0221  1281               	bcf	1,5
 17868  0222  0008               	return
 17869  0223                     __end_of_setDimmerLights_IntrControl:	
 17870                           
 17871                           	psect	text114
 17872  1D99                     __ptext114:	
 17873 ;; *************** function _DimmerIntrPointSelect *****************
 17874 ;; Defined at:
 17875 ;;		line 65 in file "../src/Dimmer_B1.c"
 17876 ;; Parameters:    Size  Location     Type
 17877 ;;  lights          1    wreg     unsigned char 
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;  lights          1    1[COMMON] unsigned char 
 17880 ;; Return value:  Size  Location     Type
 17881 ;;		None               void
 17882 ;; Registers used:
 17883 ;;		wreg
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        2 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; This function calls:
 17896 ;;		Nothing
 17897 ;; This function is called by:
 17898 ;;		_setDimmerLights_IntrControl
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           
 17903                           ;psect for function _DimmerIntrPointSelect
 17904  1D99                     _DimmerIntrPointSelect:	
 17905                           
 17906                           ;incstack = 0
 17907                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17908                           ;DimmerIntrPointSelect@lights stored from wreg
 17909  1D99  00F1               	movwf	DimmerIntrPointSelect@lights
 17910                           
 17911                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17912  1D9A  0871               	movf	DimmerIntrPointSelect@lights,w
 17913  1D9B  3A01               	xorlw	1
 17914  1D9C  1D03               	skipz
 17915  1D9D  2DA2               	goto	i1l775
 17916                           
 17917                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17918  1D9E  3020               	movlw	_DimmerLights1& (0+255)
 17919  1D9F  00F0               	movwf	??_DimmerIntrPointSelect
 17920  1DA0  0870               	movf	??_DimmerIntrPointSelect,w
 17921  1DA1  00F9               	movwf	_DimmerLightsIntr
 17922  1DA2                     i1l775:	
 17923                           
 17924                           ;Dimmer_B1.c: 69: }
 17925                           ;Dimmer_B1.c: 72: if (lights == 2) {
 17926  1DA2  0871               	movf	DimmerIntrPointSelect@lights,w
 17927  1DA3  3A02               	xorlw	2
 17928  1DA4  1D03               	skipz
 17929  1DA5  2DAA               	goto	i1l776
 17930                           
 17931                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 17932  1DA6  302F               	movlw	_DimmerLights2& (0+255)
 17933  1DA7  00F0               	movwf	??_DimmerIntrPointSelect
 17934  1DA8  0870               	movf	??_DimmerIntrPointSelect,w
 17935  1DA9  00F9               	movwf	_DimmerLightsIntr
 17936  1DAA                     i1l776:	
 17937                           
 17938                           ;Dimmer_B1.c: 74: }
 17939                           ;Dimmer_B1.c: 78: if (lights == 3) {
 17940  1DAA  0871               	movf	DimmerIntrPointSelect@lights,w
 17941  1DAB  3A03               	xorlw	3
 17942  1DAC  1D03               	skipz
 17943  1DAD  0008               	return
 17944                           
 17945                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 17946  1DAE  303E               	movlw	_DimmerLights3& (0+255)
 17947  1DAF  00F0               	movwf	??_DimmerIntrPointSelect
 17948  1DB0  0870               	movf	??_DimmerIntrPointSelect,w
 17949  1DB1  00F9               	movwf	_DimmerLightsIntr
 17950  1DB2  0008               	return
 17951  1DB3                     __end_of_DimmerIntrPointSelect:	
 17952                           
 17953                           	psect	text115
 17954  1C72                     __ptext115:	
 17955 ;; *************** function _IOC_ISR *****************
 17956 ;; Defined at:
 17957 ;;		line 297 in file "../src/MCU_B1.c"
 17958 ;; Parameters:    Size  Location     Type
 17959 ;;		None
 17960 ;; Auto vars:     Size  Location     Type
 17961 ;;		None
 17962 ;; Return value:  Size  Location     Type
 17963 ;;		None               void
 17964 ;; Registers used:
 17965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17966 ;; Tracked objects:
 17967 ;;		On entry : 0/0
 17968 ;;		On exit  : 0/0
 17969 ;;		Unchanged: 0/0
 17970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;Total ram usage:        0 bytes
 17976 ;; Hardware stack levels used:    1
 17977 ;; Hardware stack levels required when called:    3
 17978 ;; This function calls:
 17979 ;;		_setDimmerReClock
 17980 ;; This function is called by:
 17981 ;;		_ISR
 17982 ;; This function uses a non-reentrant model
 17983 ;;
 17984                           
 17985                           
 17986                           ;psect for function _IOC_ISR
 17987  1C72                     _IOC_ISR:	
 17988                           
 17989                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 17990                           
 17991                           ;incstack = 0
 17992                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17993  1C72  1D8B               	btfss	11,3	;volatile
 17994  1C73  0008               	return
 17995  1C74  0027               	movlb	7	; select bank7
 17996  1C75  1D16               	btfss	22,2	;volatile
 17997  1C76  0008               	return
 17998                           
 17999                           ;MCU_B1.c: 299: IOCBF2 = 0;
 18000  1C77  1116               	bcf	22,2	;volatile
 18001                           
 18002                           ;MCU_B1.c: 300: IOCIF = 0;
 18003  1C78  100B               	bcf	11,0	;volatile
 18004                           
 18005                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 18006  1C79  0021               	movlb	1	; select bank1
 18007  1C7A  0867               	movf	_myMain^(0+128),w
 18008  1C7B  0086               	movwf	6
 18009  1C7C  3001               	movlw	1	; select bank2/3
 18010  1C7D  0087               	movwf	7
 18011  1C7E  1C01               	btfss	1,0
 18012  1C7F  0008               	return
 18013                           
 18014                           ;MCU_B1.c: 303: setDimmerReClock();
 18015  1C80  319B  23C6         	fcall	_setDimmerReClock
 18016  1C82  0008               	return
 18017  1C83                     __end_of_IOC_ISR:	
 18018                           
 18019                           	psect	text116
 18020  1BC6                     __ptext116:	
 18021 ;; *************** function _setDimmerReClock *****************
 18022 ;; Defined at:
 18023 ;;		line 175 in file "../src/MCU_B1.c"
 18024 ;; Parameters:    Size  Location     Type
 18025 ;;		None
 18026 ;; Auto vars:     Size  Location     Type
 18027 ;;		None
 18028 ;; Return value:  Size  Location     Type
 18029 ;;		None               void
 18030 ;; Registers used:
 18031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18032 ;; Tracked objects:
 18033 ;;		On entry : 0/0
 18034 ;;		On exit  : 0/0
 18035 ;;		Unchanged: 0/0
 18036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;Total ram usage:        0 bytes
 18042 ;; Hardware stack levels used:    1
 18043 ;; Hardware stack levels required when called:    2
 18044 ;; This function calls:
 18045 ;;		_setDimmerLights_IntrIOC_GO
 18046 ;; This function is called by:
 18047 ;;		_IOC_ISR
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           
 18052                           ;psect for function _setDimmerReClock
 18053  1BC6                     _setDimmerReClock:	
 18054                           
 18055                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 18056                           
 18057                           ;incstack = 0
 18058                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18059  1BC6  3001               	movlw	1
 18060  1BC7  319E  2691  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18061                           
 18062                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 18063  1BCA  3002               	movlw	2
 18064  1BCB  319E  2691  319B   	fcall	_setDimmerLights_IntrIOC_GO
 18065                           
 18066                           ;MCU_B1.c: 188: setDimmerLights_IntrIOC_GO(3);
 18067  1BCE  3003               	movlw	3
 18068  1BCF  319E  2691         	fcall	_setDimmerLights_IntrIOC_GO
 18069                           
 18070                           ;MCU_B1.c: 191: TMR0 = 255;
 18071  1BD1  30FF               	movlw	255
 18072  1BD2  0020               	movlb	0	; select bank0
 18073  1BD3  0095               	movwf	21	;volatile
 18074  1BD4  0008               	return
 18075  1BD5                     __end_of_setDimmerReClock:	
 18076                           
 18077                           	psect	text117
 18078  1E91                     __ptext117:	
 18079 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18080 ;; Defined at:
 18081 ;;		line 28 in file "../src/Dimmer_B1.c"
 18082 ;; Parameters:    Size  Location     Type
 18083 ;;  lights          1    wreg     unsigned char 
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;  lights          1    2[COMMON] unsigned char 
 18086 ;; Return value:  Size  Location     Type
 18087 ;;		None               void
 18088 ;; Registers used:
 18089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;Total ram usage:        1 bytes
 18100 ;; Hardware stack levels used:    1
 18101 ;; Hardware stack levels required when called:    1
 18102 ;; This function calls:
 18103 ;;		_DimmerIntrIOCPointSelect
 18104 ;; This function is called by:
 18105 ;;		_setDimmerReClock
 18106 ;; This function uses a non-reentrant model
 18107 ;;
 18108                           
 18109                           
 18110                           ;psect for function _setDimmerLights_IntrIOC_GO
 18111  1E91                     _setDimmerLights_IntrIOC_GO:	
 18112                           
 18113                           ;incstack = 0
 18114                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18115                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18116  1E91  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18117                           
 18118                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18119  1E92  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18120  1E93  319E  263A  319E   	fcall	_DimmerIntrIOCPointSelect
 18121                           
 18122                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18123  1E96  0021               	movlb	1	; select bank1
 18124  1E97  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18125  1E98  0086               	movwf	6
 18126  1E99  3001               	movlw	1	; select bank2/3
 18127  1E9A  0087               	movwf	7
 18128  1E9B  1801               	btfsc	1,0
 18129  1E9C  0008               	return
 18130  1E9D  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18131  1E9E  3E09               	addlw	9
 18132  1E9F  0086               	movwf	6
 18133  1EA0  3001               	movlw	1	; select bank2/3
 18134  1EA1  0087               	movwf	7
 18135  1EA2  1A81               	btfsc	1,5
 18136  1EA3  0008               	return
 18137                           
 18138                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18139  1EA4  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18140  1EA5  0086               	movwf	6
 18141  1EA6  3001               	movlw	1	; select bank2/3
 18142  1EA7  0087               	movwf	7
 18143  1EA8  1401               	bsf	1,0
 18144                           
 18145                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18146  1EA9  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 18147  1EAA  3E09               	addlw	9
 18148  1EAB  0086               	movwf	6
 18149  1EAC  3001               	movlw	1	; select bank2/3
 18150  1EAD  0087               	movwf	7
 18151  1EAE  1681               	bsf	1,5
 18152  1EAF  0008               	return
 18153  1EB0                     __end_of_setDimmerLights_IntrIOC_GO:	
 18154                           
 18155                           	psect	text118
 18156  1E3A                     __ptext118:	
 18157 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18158 ;; Defined at:
 18159 ;;		line 8 in file "../src/Dimmer_B1.c"
 18160 ;; Parameters:    Size  Location     Type
 18161 ;;  lights          1    wreg     unsigned char 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;  lights          1    1[COMMON] unsigned char 
 18164 ;; Return value:  Size  Location     Type
 18165 ;;		None               void
 18166 ;; Registers used:
 18167 ;;		wreg
 18168 ;; Tracked objects:
 18169 ;;		On entry : 0/0
 18170 ;;		On exit  : 0/0
 18171 ;;		Unchanged: 0/0
 18172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18175 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18176 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;Total ram usage:        2 bytes
 18178 ;; Hardware stack levels used:    1
 18179 ;; This function calls:
 18180 ;;		Nothing
 18181 ;; This function is called by:
 18182 ;;		_setDimmerLights_IntrIOC_GO
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           
 18187                           ;psect for function _DimmerIntrIOCPointSelect
 18188  1E3A                     _DimmerIntrIOCPointSelect:	
 18189                           
 18190                           ;incstack = 0
 18191                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18192                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18193  1E3A  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18194                           
 18195                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18196  1E3B  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18197  1E3C  3A01               	xorlw	1
 18198  1E3D  1D03               	skipz
 18199  1E3E  2E44               	goto	i1l765
 18200                           
 18201                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18202  1E3F  3020               	movlw	_DimmerLights1& (0+255)
 18203  1E40  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18204  1E41  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18205  1E42  0021               	movlb	1	; select bank1
 18206  1E43  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18207  1E44                     i1l765:	
 18208                           
 18209                           ;Dimmer_B1.c: 12: }
 18210                           ;Dimmer_B1.c: 15: if (lights == 2) {
 18211  1E44  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18212  1E45  3A02               	xorlw	2
 18213  1E46  1D03               	skipz
 18214  1E47  2E4D               	goto	i1l766
 18215                           
 18216                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 18217  1E48  302F               	movlw	_DimmerLights2& (0+255)
 18218  1E49  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18219  1E4A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18220  1E4B  0021               	movlb	1	; select bank1
 18221  1E4C  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18222  1E4D                     i1l766:	
 18223                           
 18224                           ;Dimmer_B1.c: 17: }
 18225                           ;Dimmer_B1.c: 21: if (lights == 3) {
 18226  1E4D  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18227  1E4E  3A03               	xorlw	3
 18228  1E4F  1D03               	skipz
 18229  1E50  0008               	return
 18230                           
 18231                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 18232  1E51  303E               	movlw	_DimmerLights3& (0+255)
 18233  1E52  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18234  1E53  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18235  1E54  0021               	movlb	1	; select bank1
 18236  1E55  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 18237  1E56  0008               	return
 18238  1E57                     __end_of_DimmerIntrIOCPointSelect:	
 18239                           
 18240                           	psect	text119
 18241  1B2E                     __ptext119:	
 18242 ;; *************** function _INT_ISR *****************
 18243 ;; Defined at:
 18244 ;;		line 250 in file "../src/MCU_B1.c"
 18245 ;; Parameters:    Size  Location     Type
 18246 ;;		None
 18247 ;; Auto vars:     Size  Location     Type
 18248 ;;		None
 18249 ;; Return value:  Size  Location     Type
 18250 ;;		None               void
 18251 ;; Registers used:
 18252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18253 ;; Tracked objects:
 18254 ;;		On entry : 0/0
 18255 ;;		On exit  : 0/0
 18256 ;;		Unchanged: 0/0
 18257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18262 ;;Total ram usage:        0 bytes
 18263 ;; Hardware stack levels used:    1
 18264 ;; Hardware stack levels required when called:    2
 18265 ;; This function calls:
 18266 ;;		_setRF_ReceiveGO
 18267 ;; This function is called by:
 18268 ;;		_ISR
 18269 ;; This function uses a non-reentrant model
 18270 ;;
 18271                           
 18272                           
 18273                           ;psect for function _INT_ISR
 18274  1B2E                     _INT_ISR:	
 18275                           
 18276                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 18277                           
 18278                           ;incstack = 0
 18279                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18280  1B2E  1E0B               	btfss	11,4	;volatile
 18281  1B2F  0008               	return
 18282  1B30  1C8B               	btfss	11,1	;volatile
 18283  1B31  0008               	return
 18284                           
 18285                           ;MCU_B1.c: 252: INTF = 0;
 18286  1B32  108B               	bcf	11,1	;volatile
 18287                           
 18288                           ;MCU_B1.c: 253: INTE = 0;
 18289  1B33  120B               	bcf	11,4	;volatile
 18290                           
 18291                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 18292  1B34  01F2               	clrf	setRF_ReceiveGO@command
 18293  1B35  0AF2               	incf	setRF_ReceiveGO@command,f
 18294  1B36  3001               	movlw	1
 18295  1B37  319D  257F         	fcall	_setRF_ReceiveGO
 18296  1B39  0008               	return
 18297  1B3A                     __end_of_INT_ISR:	
 18298                           
 18299                           	psect	text120
 18300  1D7F                     __ptext120:	
 18301 ;; *************** function _setRF_ReceiveGO *****************
 18302 ;; Defined at:
 18303 ;;		line 39 in file "../src/RF_Control_B1.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;  rf              1    wreg     unsigned char 
 18306 ;;  command         1    2[COMMON] unsigned char 
 18307 ;; Auto vars:     Size  Location     Type
 18308 ;;  rf              1    3[COMMON] unsigned char 
 18309 ;; Return value:  Size  Location     Type
 18310 ;;		None               void
 18311 ;; Registers used:
 18312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18318 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;Total ram usage:        2 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:    1
 18325 ;; This function calls:
 18326 ;;		i1_RfPointSelect
 18327 ;; This function is called by:
 18328 ;;		_INT_ISR
 18329 ;; This function uses a non-reentrant model
 18330 ;;
 18331                           
 18332                           
 18333                           ;psect for function _setRF_ReceiveGO
 18334  1D7F                     _setRF_ReceiveGO:	
 18335                           
 18336                           ;incstack = 0
 18337                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18338                           ;setRF_ReceiveGO@rf stored from wreg
 18339  1D7F  00F3               	movwf	setRF_ReceiveGO@rf
 18340                           
 18341                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 18342  1D80  0873               	movf	setRF_ReceiveGO@rf,w
 18343  1D81  319B  2376  319D   	fcall	i1_RfPointSelect
 18344                           
 18345                           ;RF_Control_B1.c: 41: if (RF->RxStatus == 1) {
 18346  1D84  087A               	movf	_RF,w
 18347  1D85  0086               	movwf	6
 18348  1D86  0187               	clrf	7
 18349  1D87  1D81               	btfss	1,3
 18350  1D88  0008               	return
 18351                           
 18352                           ;RF_Control_B1.c: 42: RF->RxStatus = 0;
 18353  1D89  087A               	movf	_RF,w
 18354  1D8A  0086               	movwf	6
 18355  1D8B  0187               	clrf	7
 18356  1D8C  1181               	bcf	1,3
 18357                           
 18358                           ;RF_Control_B1.c: 43: RF->Run = 1;
 18359  1D8D  0A7A               	incf	_RF,w
 18360  1D8E  0086               	movwf	6
 18361  1D8F  0187               	clrf	7
 18362  1D90  1481               	bsf	1,1
 18363                           
 18364                           ;RF_Control_B1.c: 44: RF->ReceiveGO = command;
 18365  1D91  087A               	movf	_RF,w
 18366  1D92  0086               	movwf	6
 18367  1D93  0187               	clrf	7
 18368  1D94  0872               	movf	setRF_ReceiveGO@command,w
 18369  1D95  1081               	bcf	1,1
 18370  1D96  1D03               	skipz
 18371  1D97  1481               	bsf	1,1
 18372  1D98  0008               	return
 18373  1D99                     __end_of_setRF_ReceiveGO:	
 18374                           
 18375                           	psect	text121
 18376  1B76                     __ptext121:	
 18377 ;; *************** function i1_RfPointSelect *****************
 18378 ;; Defined at:
 18379 ;;		line 7 in file "../src/RF_Control_B1.c"
 18380 ;; Parameters:    Size  Location     Type
 18381 ;;  rf              1    wreg     unsigned char 
 18382 ;; Auto vars:     Size  Location     Type
 18383 ;;  rf              1    1[COMMON] unsigned char 
 18384 ;; Return value:  Size  Location     Type
 18385 ;;		None               void
 18386 ;; Registers used:
 18387 ;;		wreg
 18388 ;; Tracked objects:
 18389 ;;		On entry : 0/0
 18390 ;;		On exit  : 0/0
 18391 ;;		Unchanged: 0/0
 18392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18396 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18397 ;;Total ram usage:        2 bytes
 18398 ;; Hardware stack levels used:    1
 18399 ;; This function calls:
 18400 ;;		Nothing
 18401 ;; This function is called by:
 18402 ;;		_setRF_ReceiveGO
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           
 18407                           ;psect for function i1_RfPointSelect
 18408  1B76                     i1_RfPointSelect:	
 18409                           
 18410                           ;incstack = 0
 18411                           ; Regs used in i1_RfPointSelect: [wreg]
 18412                           ;i1RfPointSelect@rf stored from wreg
 18413  1B76  00F1               	movwf	i1RfPointSelect@rf
 18414                           
 18415                           ;RF_Control_B1.c: 9: if (rf == 1) {
 18416  1B77  0871               	movf	i1RfPointSelect@rf,w
 18417  1B78  3A01               	xorlw	1
 18418  1B79  1D03               	skipz
 18419  1B7A  2B7F               	goto	i1l6773
 18420                           
 18421                           ;RF_Control_B1.c: 10: RF = &RF1;
 18422  1B7B  30C8               	movlw	_RF1& (0+255)
 18423  1B7C  00F0               	movwf	??i1_RfPointSelect
 18424  1B7D  0870               	movf	??i1_RfPointSelect,w
 18425  1B7E  00FA               	movwf	_RF
 18426  1B7F                     i1l6773:	
 18427                           
 18428                           ;RF_Control_B1.c: 11: }
 18429                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 18430  1B7F  1A0B               	btfsc	11,4	;volatile
 18431  1B80  0008               	return
 18432                           
 18433                           ;RF_Control_B1.c: 13: INTE = 1;
 18434  1B81  160B               	bsf	11,4	;volatile
 18435  1B82  0008               	return
 18436  1B83                     __end_ofi1_RfPointSelect:	
 18437  007E                     btemp	set	126	;btemp
 18438  007E                     pic14e$flags	set	126
 18439  007E                     wtemp	set	126
 18440  007E                     wtemp0	set	126
 18441  0080                     wtemp1	set	128
 18442  0082                     wtemp2	set	130
 18443  0084                     wtemp3	set	132
 18444  0086                     wtemp4	set	134
 18445  0088                     wtemp5	set	136
 18446  007F                     wtemp6	set	127
 18447  007E                     ttemp	set	126
 18448  007E                     ttemp0	set	126
 18449  0081                     ttemp1	set	129
 18450  0084                     ttemp2	set	132
 18451  0087                     ttemp3	set	135
 18452  007F                     ttemp4	set	127
 18453  007E                     ltemp	set	126
 18454  007E                     ltemp0	set	126
 18455  0082                     ltemp1	set	130
 18456  0086                     ltemp2	set	134
 18457  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         236
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      73
    BANK2            80      0      74
    BANK3            80      0      52
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK3[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK3[14]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK2[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK1[4]), VarLED2(BANK1[4]), 
		 -> VarLED1(BANK1[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK3[20]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Status->_RfSWPointSelect
    _setRFSW_Control->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   74613
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1699
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     130
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     108
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6412
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    6412
                                             16 BANK0      3     3      0
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    6412
                                             14 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     194
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3821
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     368
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    1988
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19564
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   19564
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    9012
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    7459
                                             66 BANK0      3     3      0
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1264
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     804
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     804
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27690
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   27690
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   25611
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1395
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   24172
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     558
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      1     1      0    8960
                                             66 BANK0      1     1      0
                    _RfSWPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     494
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11399
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1671
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     198
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     198
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     914
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     914
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9506
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9392
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6357
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6053
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1322
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1     782
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1351
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     504
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      34      11       65.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 16 13:03:46 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 007A  
                __end_of_CC2500_WriteREG 1D7F                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1CCA               _getDimmerLights_StatusFlag 1CB7  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0B48  
                           ___ftadd@sign 0048                                      l300 1266  
                                    l312 0EC0                                      l307 0EAE  
                                    l326 1104                                      l360 1D5B  
                                    l329 110A                                      l371 1D6E  
                                    l291 1234                                      l359 1D59  
                                    l383 1C0A                                      l296 125E  
                                    l297 1263                                      l395 1FB8  
                                    l389 1E0C                                      l822 1DD7  
                                    l823 1DDF                                      l877 17CC  
                                    _GIE 005F                                      _CRC 00B8  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 0021                                      _RB1 0069  
                                    _RA3 0063                                      _RC0 0070  
                                    _RA4 0064                                      _LED 00BE  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC6 0076  
                                    _RC7 0077                                      _RF1 00C8  
                                    _ISR 0004                                      _WDT 00E6  
                                    _Sw1 0159                                      _Sw2 01C2  
                                    _Buz 00B7                                      _Sw3 01CB  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1D66  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1B3A  
                        __end_of_ADC_Set 1B1E                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 09BA  
                  _setDimmerLights_ERROR 141D                    _setDimmerLights_AdjRF 1F91  
                  _setDimmerLights_AdjGo 1C52                  __size_of_setTemp_Enable 000D  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1C83                             ___ftdiv@sign 003D  
                                   l1401 1D11                 ?_DimmerLightsPointSelect 0070  
                                   l1427 113C                                     l3145 15CD  
                                   l3139 15B6                                     l2380 1F23  
                        __end_of_IOC_Set 1B90                                     l2357 13C9  
                                   l1910 1328                                     l3168 0630  
                                   l2801 0255                                     l2394 1217  
                                   l6011 08B3                                     l2379 1F19  
                                   l6015 08B9                                     l6007 08AD  
                                   l6111 1E6D                                     l6201 161C  
                                   l2770 07FB                                     l6019 08BF  
                                   l7011 0B80                                     l2851 1556  
                                   l2827 0AF4                                     l7021 0BA4  
                                   l6109 1E67                                     l6127 1CC3  
                                   l6047 1714                                     l6223 1205  
                                   l7009 0B7B                                     l6073 1150  
                                   l5603 1F7A                                     l7019 0B9E  
                                   l7051 1374                                     l6403 0E7F  
                                   l6411 0EB1                                     l7211 0458  
                                   l6157 0A0E                                     l6501 11C5  
                                   l7029 0BCC                                     l7301 073E  
                                   l7055 137B                                     l5615 05B9  
                                   l6343 0E2A                                     l6263 17BB  
                                   l7215 0464                                     l5713 0CEF  
                                   l5705 0CD6                                     l7145 1744  
                                   l6441 0F18                                     l5625 05CF  
                                   l6361 0E60                                     l6353 0E4E  
                                   l6265 17C0                                     l7209 0451  
                                   l5811 0AB8                                     l5803 0A9E  
                                   l7139 172B                                     l7059 1382  
                                   l6427 0EF1                                     l5643 05FC  
                                   l5619 05C0                                     l6611 13E7  
                                   l7331 0249                                     l6259 17A8  
                                   l5573 1593                                     l5805 0AA7  
                                   l7149 178A                                     l6453 0F31  
                                   l5661 0642                                     l5645 0606  
                                   l5637 05E9                                     l5733 0D3E  
                                   l6197 1613                                     l6365 0E69  
                                   l6357 0E57                                     l6349 0E45  
                                   l7261 06DF                                     l6463 1FC9  
                                   l5583 15BB                                     l5575 159D  
                                   l5807 0AAA                                     l6439 0F00  
                                   l6391 1246                                     l5655 0622  
                                   l5647 060B                                     l5727 0D28  
                                   l6623 13FD                                     l7239 06A1  
                                   l7327 023C                                     l7441 0FEF  
                                   l6465 1FD4                                     l5905 081B  
                                   l5585 15C3                                     l5577 15A2  
                                   l5569 158C                                     l5665 0654  
                                   l5657 062C                                     l5649 060F  
                                   l5761 0D9D                                     l5745 0D79  
                                   l6369 0E72                                     l7273 06FC  
                                   l7249 06BA                                     l6713 1533  
                                   l7177 03B5                                     l7435 0FE1  
                                   l5931 0852                                     l5923 0841  
                                   l5915 0823                                     l5851 10BF  
                                   l5691 0C95                                     l6547 1120  
                                   l5675 066F                                     l6715 1536  
                                   l7371 02F4                                     l7347 0283  
                                   l7429 0FB5                                     l7437 0FE7  
                                   l5917 082F                                     l5685 0C7F  
                                   l7541 0513                                     l5757 0D95  
                                   l5749 0D81                                     l6725 1542  
                                   l6653 0AD1                                     l7357 02B0  
                                   l7381 0327                                     l5927 084A  
                                   l5951 0C44                                     l5855 10CA  
                                   l7287 0721                                     l6727 1545  
                                   l6655 0AD4                                     l6583 131F  
                                   l7199 0420                                     l7623 098C  
                                   l5777 0A53                                     l6737 1551  
                                   l6665 0AE0                                     l7721 14E6  
                                   l5947 0C20                                     l5859 10D5  
                                   l5795 0A83                                     l5867 1BB4  
                                   l6595 1EFE                                     l5883 1E7F  
                                   l6667 0AE3                                     l7651 093B  
                                   l7643 090F                                     l5973 086F  
                                   l5981 087B                                     l5797 0A91  
                                   l6677 0AEF                                     l7725 14F1  
                                   l5991 088B                                     l5887 1E88  
                                   l6767 169A                                     l5977 0875  
                                   l5969 0869                                     l7585 12AE  
                                   l6697 0B36                                     l5899 0810  
                                   l5995 0891                                     l5987 0885  
                  _myMain_Initialization 1CDE                                     l5999 0897  
                                   l6985 0B5D                                     l6987 0B60  
                                   l6997 0B6C                                     l6999 0B6F  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 1B3A                                     _LATC 010E  
                                   u4005 0610                                     u4105 0CA7  
                                   u4115 0CB7                                     u4035 0623  
                                   u4125 0CD7                                     u4135 0CE6  
                                   u4215 0D82                                     u4145 0CF0  
                                   u4225 0D88                                     u4325 0A84  
                                   u4255 0D9E                                     u4265 0DA4  
                                   u4185 0D4A                                     u4355 0A9F  
                                   u4195 0D5A                                     _PEIE 005E  
                                   u7005 0F68                                     u4605 0842  
                                   _INTE 005C                                     _INTF 0059  
                                   u4295 0A5A                                     u3825 15D4  
                                   u3755 1598                                     u5365 1FBE  
                                   u4565 0826                                     u7205 1295  
                                   u3775 15B1                                     u4840 16C2  
                                   u4585 0830                                     u3945 05EA  
                                   u4595 083A                                     u3795 15BE  
                                   u4845 16C0                                     u7245 097A  
                                   u3975 05FD                                     u7255 09A8  
                                   u7275 08E3                                     u7285 0925  
                                   _LWLO 0CAD                                     _RFSW 00BF  
                                   _TMR0 0015                          __end_of_INT_Set 1B04  
                                   _RSSI 00C0                                     _WREN 0CAA  
                                   _Buz1 014D                                     __WDT 00E0  
                                   _Temp 00C3                                     _main 14C8  
                           ___ftpack@arg 0020                          __end_of_RF_Main 0805  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1D4D  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1BC6                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                          _RfPointSelect 1BAA               __end_of_setRFSW_AdjControl 122D  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                                    ??_ISR 0077  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 001A                         __end_of_LED_Main 1C32  
          __end_of_DimmerIntrPointSelect 1DB3                    ?_setDimmerLights_Main 0070  
                                  ?_main 006C                setControl_Lights_Table@rf 0067  
                        __end_of___awdiv 0859                          __end_of___ftadd 0687  
                        __end_of___ftdiv 0D11                          __end_of___ftmul 0DC5  
                        ___awdiv@divisor 0020                          __end_of___fttol 0AC1  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                                  i1l765 1E44                                    i1l766 1E4D  
                                  i1l775 1DA2                                    i1l776 1DAA  
                 _setDimmerLights_Switch 1C32                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00E2  
                                  _RFSW2 00E3                                    _RFSW3 00E4  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0022                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB0 1068                                    _WPUB1 1069  
                                  _WPUB2 106A                            setRF_Learn@rf 0023  
                          __CFG_WRT$HALF 0000                                    _Temp1 01B4  
     __end_of_setDimmerLights_IntrIOC_GO 1EB0               _setDimmerLights_IntrIOC_GO 1E91  
                       __end_of_TMR0_ISR 11AF             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 1B9D                                    _getAD 1D07  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1800  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 0941  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1E3A              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 002F                           __pbitbssCOMMON 03E0  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1C94  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0022  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                   _Sw_DimmerOnFunc$5401 0063                     _Sw_DimmerOnFunc$5402 0064  
                   _Sw_DimmerOnFunc$5403 0065                       _setRF_DimmerLights 16B8  
            __size_of_Flash_Memory_Write 0033                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0004                           ?_RfPointSelect 0070  
                         setSw_Status@sw 0023                setDimmerLights_Main@clear 0069  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 146D  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0018  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1523  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1AFA  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0A3A                     _setSw_Initialization 1000  
                                 ??_main 0070                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0DC5  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 001D  
                             _Receive_OK 03E0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1DE8  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 006A  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                         setRF_Enable@rf 0023                         __end_of___awtoft 1F91  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 15E4  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1C42  
                                 i1l6901 0188                                   i1l6911 01BA  
                                 i1l6915 01C0                                   i1l6773 1B7F  
                                 i1l6933 01F1                                   i1l6941 01FD  
                                 i1l6845 00AA                                   i1l6853 00B7  
                                 i1l6871 0101                                   i1l6919 01C6  
                                 i1l6937 01F7                                   i1l6873 0107  
                                 i1l6849 00B0                                   i1l6885 013C  
                                 i1l6893 0167                                   i1l6877 011A  
                                 i1l6879 0120                                   i1l6889 0153  
                                 i1l6899 0182                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u711_25 11A0  
                                 _OSCCON 0099                                   u595_25 0085  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 _IO_Set 1D1D                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1B10  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1D07  
                                 _Dimmer 00B9               __end_of_Mcu_Initialization 1E03  
                    __end_of_Buzzer_Main 1000                                   _Memory 00E8  
                                 _Timer0 00E5       __end_of_setDimmerLights_TriggerAdj 1C72  
             _setDimmerLights_TriggerAdj 1C62            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
                              ??___ftdiv 0034                    setDimmerLights@lights 0026  
                              ??___ftmul 0034                                ??___fttol 004F  
           ?_Flash_Memory_Initialization 0070                          i1_RfPointSelect 1B76  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00C6                                   _s_data 00C7  
                                 _setLED 0859                                   _myMain 00E7  
              _setDimmerLights_Main$2060 0066                _setDimmerLights_Main$2061 0067  
              _setDimmerLights_Main$2062 0068                         _DimmerLightsIntr 0079  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 0024  
                       ___awdiv@quotient 0027                                   _setBuz 0BD2  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070             __size_of_my_TestPointCleared 0012  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0223  
            _setDimmerLights_IntrControl 004C                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                    __end_of_SwPointSelect 1E91  
                          ?_setRF_Enable 0022                           _setTemp_Enable 1B9D  
                        _RfSWPointSelect 1F0E             __size_of_Flash_Memory_Modify 006E  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 002D                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 07FB  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 14C8  
       __end_of_CC2500_registers_address 182F                  __end_of__initialization 0048  
                        ??_RfPointSelect 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK4 1F2E  
                          __end_of_getAD 1D1D                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1C12                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 006E              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                 __size_of_setRF_ReceiveGO 001A  
                       ?_setDimmerLights 0024                                ?_WDT_Main 0070  
               __end_of_setDimmerReClock 1BD5                       __size_of_getRxData 004D  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1BAA  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0023  
                         _DimmerLights11 00BA                           _DimmerLights22 00BB  
                         _DimmerLights33 00BC                     __size_of_setLED_Main 0047  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1AE4                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0F39                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1AEA                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0025  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                             __pnvCOMMON 007D                            ??_Switch_Main 006B  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0025                             _DimmerLights 0078  
                      LedPointSelect@led 0021                  __end_ofi1_RfPointSelect 1B83  
                   __size_of_setRF_Learn 000E                              setBuz@count 002C  
                             __pmaintext 14C8                      _CC2500_WriteCommand 1C02  
                   ?_Temp_Initialization 0070         __size_of_DimmerLightsPointSelect 001B  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00A0  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0028  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1B17                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 0941                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1B25                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 11ED                  __end_of_RfSWPointSelect 1F2E  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1C72  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1B83  
                   __size_of_setLog_Code 0047                                  _INT_ISR 1B2E  
                                _INT_Set 1AFE                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1271                        _Flash_Memory_Read 1DB3  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 00BE  
                 __size_of_CC2500_TxData 0044                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 0801  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1D35          __end_of_setControl_Lights_Table 0E7B  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0AC1                          _setPercentValue 12B6  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00DD  
           __end_of_CC2500_FrequencyCabr 1B52                          __size_of_IO_Set 0018  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D1                                  _VarLED2 00D5  
                                _VarLED3 00D9                        __end_of_getRxData 141D  
               _CC2500_registers_address 1800         __end_of_DimmerIntrIOCPointSelect 1E57  
                         RF_RxDisable@rf 0024                    ??_Temp_Initialization 0021  
        __end_of_setDimmerLights_Trigger 1C52                     ??_setRFSW_AdjControl 0064  
                         ??_setTemp_Main 0030           __end_of_setDimmerLights_Switch 1C42  
                                ___awdiv 0805                                  ___ftadd 0591  
                         ??_setSw_Enable 0022                                  ___ftdiv 0C68  
                                ___ftmul 0D11                                  ___fttol 0A3A  
                    __end_of_Switch_Main 1B6A                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                                  __myMain 01A0  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0070                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0096  
                         ??_setSw_Status 0023                                  __ptext1 1CA5  
                                __ptext2 08C9                                  __ptext3 1B9D  
                                __ptext4 1CDE                                  __ptext5 0941  
                                __ptext6 1D07                                  __ptext7 1E1E  
                                __ptext8 0002                                  __ptext9 1AE7  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1D99                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 12B6                __end_of_Flash_Memory_Read 1DCD  
                             _setRF_Main 0687                  ??_myMain_Initialization 0020  
                      _DimmerLights_Main 1BD5                                  _my_Main 08C9  
                  ??_CC2500_WriteCommand 0022                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1AEE                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1AF2            DimmerLightsPointSelect@lights 0021  
                     ?_DimmerLights_Main 0070                                  _product 007D  
                         _LedPointSelect 10B3                                  clrloop0 1B0B  
         __size_of_Switch_Initialization 0011            __end_of_Switch_Initialization 1CA5  
                   end_of_initialization 0048                        _CC2500_InitSetREG 1031  
                          _DelayTime_1us 1FB3                        __end_of_setTxData 07FB  
             __end_of_Flash_Memory_Write 1143                      _my_TestPointCleared 1CA5  
                                init_ram 1B04                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 006B                     Flash_Memory_Read@ret 0023  
                                initloop 1B05                               _setSw_Main 0223  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1E03  
                   Flash_Memory_Modify@i 0026                    _setLED_Initialization 1C83  
                       ?i1_RfPointSelect 0070                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0E7B                            _CC2500_TxData 122D  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 2000  
            ?_setDimmerLights_TriggerAdj 0022            __size_of_Flash_Memory_Erasing 000C  
                    _Flash_Memory_Modify 1724                  _DimmerLights_Exceptions 1792  
                           __pstringtext 1800                      _Flash_Memory_Unlock 1B25  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                     ?_my_TestPointCleared 0070  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1BE4  
                     _Mcu_Initialization 1DE8                 __size_of_CC2500_PowerRST 0030  
                       ?_RfSWPointSelect 0070                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 10E0                  __end_of_Sw_DimmerOnFunc 0B48  
                __end_of_setPercentValue 12FC                 __size_of_CC2500_WriteREG 0019  
              __end_of_CC2500_InitSetREG 105B                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 11AF  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1E1E  
                          ?_RF_RxDisable 0070                              ___ftdiv@exp 003C  
                         __end_of_IO_Set 1D35                     _setRF_Initialization 1B1E  
                            _Switch_Main 1B5E                        __size_of_LED_Main 0010  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1DCD                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1CF2                     ??_Mcu_Initialization 0021  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
              __size_of_Sw_DimmerAdjFunc 0060                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1E3A                    ??_my_TestPointCleared 0020  
                           setRF_Main@rf 006A                        __size_of_TMR0_ISR 0037  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 1EEE  
          __size_of_setDimmerLights_Main 008A                           __end_of_setLED 08C9  
                         __end_of_setBuz 0C68          _getDimmerLights_StatusFlag$2065 0022  
                   _CC2500_FrequencyCabr 1B46                __size_of_Sw_DimmerOffFunc 006A  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 15E4  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 1143  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1CDE  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 1ECF          __size_of_setTemp_Initialization 000C  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0499                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1031                          RfPointSelect@rf 0021  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00CD                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0079  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1BF3  
                     Sw_DimmerAdjFunc@sw 0029                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                                _VarMemory 0220  
                __size_of_setRFSW_Status 000F                    __end_of_RfPointSelect 1BB8  
              __size_of_CC2500_WriteByte 0019                                _VarTimer0 0162  
                              _Temp_Main 1AE7                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 002F                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C1                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00C4                              __pdataBANK4 0245  
                               ??_setLED 0023                         ??_setTemp_Enable 0020  
                               ?_ADC_Set 0070                                 ??_setBuz 002B  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1AF2  
             __size_of_DimmerLights_Main 000F                __end_of_setRF_DimmerValue 1178  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4541 006B  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 12FC                            ??_setRF_Learn 0023  
                      ??_CC2500_WriteREG 0023                            _DimmerLights1 0120  
                          _DimmerLights2 012F                            _DimmerLights3 013E  
                  CC2500_WriteREG@w_addr 0024                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 0027                          ??_CC2500_RxData 002D  
                        ??_CC2500_TxData 0024                                __pnvBANK1 00E5  
            __size_of_LED_Initialization 0010                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00D4  
                             setBuz@time 0029                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1B6A      __end_of_Flash_Memory_Initialization 0591  
            _Flash_Memory_Initialization 0499                                 ?___awdiv 0020  
                              __ptext100 1031                                __ptext101 1EB0  
                              __ptext110 1B3A                                __ptext102 1D66  
                              __ptext103 1B46                                __ptext120 1D7F  
                              __ptext112 1178                                __ptext104 1FB3  
                              __ptext121 1B76                                __ptext113 004C  
                              __ptext105 1AEE                                __ptext114 1D99  
                              __ptext106 1AEA                                __ptext115 1C72  
                              __ptext107 1C02                                __ptext116 1BC6  
                              __ptext108 1D4D                                __ptext117 1E91  
                              __ptext109 0F39                                 ?___ftadd 003E  
                              __ptext118 1E3A                                __ptext119 1B2E  
                              _getRxData 13D0                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 164E                          _setRF_ReceiveGO 1D7F  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 1B46                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 0800       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0050                 ?_setDimmerLights_Trigger 0022  
                    __size_of_setSw_Main 0159            __end_of_setDimmerLights_ERROR 146D  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 1FB3  
          __end_of_setDimmerLights_AdjGo 1C62                   CC2500_WriteByte@loop_a 0021  
                               ?_my_Main 0070                                _r_address 00C5  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 1866  
          __end_of_myMain_Initialization 1CF2                         __CFG_WDTE$SWDTEN 0000  
                         __size_of_getAD 0016                             _setRF_Enable 1FD9  
                          _SwPointSelect 1E74                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1389                      _DimmerLightsIntrIOC 00BD  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1AE7  
                      _CC2500_rfSettings 182F                                 _LED_Main 1C22  
                        SwPointSelect@sw 0021                                clear_ram0 1B0A  
               CC2500_InitPATable@loop_d 0027                                _setTxData 075B  
    __end_of_DimmerLights_Initialization 1F6F              _DimmerLights_Initialization 1F4E  
                     _CC2500_ClearRXFIFO 1AEA                       _CC2500_ClearTXFIFO 1AEE  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1BC6  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
                 setRF_ReceiveGO@command 0072              __size_of_setRFSW_AdjControl 0040  
                  __size_of_setMemory_GO 001F                       _Flash_Memory_Write 1110  
                             ?_getRxData 0070                                 _TMR0_ISR 1178  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                      setRF_ReceiveGO@rf 0073                                 _TMR0_Set 1B90  
                       _Sw_DimmerAdjFunc 1523                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00B5                     __end_of_RF_RxDisable 1F0E  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1C12  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1E1E  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 164E  
                  _Sw_DimmerAdjFunc$5411 0025                    _Sw_DimmerAdjFunc$5412 0026  
                  _Sw_DimmerAdjFunc$5413 0027                    __size_of_setTemp_Main 011D  
                  __size_of_setSw_Enable 0029                             setSw_Main@sw 006A  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 0011  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1B5E                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                       __size_of_INT_ISR 000C                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                         __size_of_INT_Set 0006  
                    __end_of_setLog_Code 13D0                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 185E                         __size_of_RF_Main 0004  
                               _Fosc_Set 1AF6                         __size_of_WDT_Set 0018  
                  _Switch_Initialization 1C94                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1BF3  
                           _setMemory_GO 1ECF                     __size_of_Buzzer_Main 00C7  
                     __end_of_getTemp_AD 09BA                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D4D             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 1D99                              ??_Temp_Main 0033  
                      setRFSW_Control@sw 0062                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 1086    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 105B                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 037C                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1008  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               __size_ofi1_RfPointSelect 000D                                 ___awtoft 1F6F  
                       ??_LedPointSelect 0020                                 ___ftpack 1583  
                           _setSw_Status 1BE4                        getTemp_AD@channel 0028  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1342                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 1724                         __size_of_my_Main 0078  
                               __ptext10 037C                                 __ptext11 12FC  
                               __ptext20 0223                                 __ptext12 1008  
                               __ptext21 1BB8                                 __ptext13 1FD9  
                               __ptext30 0801                                 __ptext22 0AC1  
                               __ptext14 1792                                 __ptext31 0687  
                               __ptext23 164E                                 __ptext15 105B  
                               __ptext40 1C32                                 __ptext32 13D0  
                               __ptext24 1523                                 __ptext16 141D  
                               __ptext41 11ED                                 __ptext33 1389  
                               __ptext25 1C62                                 __ptext17 1AE4  
                               __ptext50 0E7B                                 __ptext42 1143  
                               __ptext34 0DC5                                 __ptext26 1C52  
                               __ptext18 1B6A                                 __ptext51 1E03  
                               __ptext43 1F91                                 __ptext35 1BF3  
                               __ptext27 1C94                                 __ptext19 1B5E  
                               __ptext60 1AFE                                 __ptext52 1E57  
                               __ptext44 146D                                 __ptext36 15E4  
                               __ptext28 1000                                 __ptext61 1AF6  
                               __ptext53 1AFA                                 __ptext45 0D11  
                               __ptext37 1BE4                                 __ptext29 07FB  
                               __ptext70 0499                                 __ptext62 1B17  
                               __ptext54 1B1E                                 __ptext46 0591  
                               __ptext38 1E74                                 __ptext71 1110  
                               __ptext63 1C22                                 __ptext55 1DE8  
                               __ptext47 1F0E                                 __ptext39 1C42  
                               __ptext80 12B6                                 __ptext72 1B25  
                               __ptext64 1342                                 __ptext56 1D35  
                               __ptext48 1EEE                                 __ptext81 0A3A  
                               __ptext73 1DB3                                 __ptext65 1C12  
                               __ptext57 1B90                                 __ptext49 122D  
                               __ptext90 1CCA                                 __ptext82 0C68  
                               __ptext74 1BD5                                 __ptext66 1C83  
                               __ptext58 1D1D                                 __ptext91 1ECF  
                               __ptext83 1F6F                                 __ptext75 0B48  
                               __ptext67 1271                                 __ptext59 1B83  
                               __ptext92 1CB7                                 __ptext84 1583  
                               __ptext76 11AF                                 __ptext68 1724  
                               __ptext93 1F4E                                 __ptext85 09BA  
                               __ptext77 075B                                 __ptext69 1B52  
                               __ptext94 1086                                 __ptext86 0859  
                               __ptext78 1BAA                                 __ptext95 1DCD  
                               __ptext87 10B3                                 __ptext79 16B8  
                               __ptext96 1B10                                 __ptext88 0BD2  
                               __ptext97 1CF2                                 __ptext89 0805  
                               __ptext98 1AF2                                 __ptext99 10E0  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1C02  
          __end_of_Dimmer_Initialization 1B17             __end_of_setDimmerLights_Main 0BD2  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0068  
                          setLED@command 0022                            __size_of_main 005B  
                            _setRF_Learn 1BB8                 __end_of_CC2500_SIDLEMode 1AF6  
             setDimmerLights_Main@lights 006A               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 1CCA                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 000F                          _CC2500_ReadByte 1E57  
                     _CC2500_InitPATable 1EB0      __size_of_getDimmerLights_StatusFlag 0013  
            __end_of_my_TestPointCleared 1CB7            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 075B              __size_of_Mcu_Initialization 001B  
                   _CC2500_patable_vaule 185E                              ??_getRxData 0068  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 006C            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 10E0              __end_of_Flash_Memory_Modify 1792  
                      ??_getPercentValue 0059                              _setLog_Code 1389  
            __end_of_Flash_Memory_Unlock 1B2E                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1D66                       __end_of_setSw_Main 037C  
                          _Transceive_OK 03E1                  ?_setOverTemp_Exceptions 0070  
                            pic14e$flags 007E                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 10B3  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 1086              __end_of_setDimmerLights_Adj 11ED  
                ?_setTemp_Initialization 0070                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1AFA  
   __size_of_setDimmerLights_IntrControl 01D7                     _Flash_Memory_Erasing 1B52  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                      ??_RF_Initialization 0021  
                            getRxData@rf 0068         __size_of_setControl_Lights_Table 00B6  
         __end_of_setOverTemp_Exceptions 1342                   __size_of_RfPointSelect 000E  
                      ??i1_RfPointSelect 0070     __size_of_Flash_Memory_Initialization 00F8  
                  __end_of_DelayTime_1us 1FD9                 __end_of_Sw_DimmerAdjFunc 1583  
                __end_of_CC2500_ReadByte 1E74             __end_of_setSw_Initialization 1008  
                   getPercentValue@value 005B                             _RF_RxDisable 1EEE  
             __end_of_LED_Initialization 1C22         __size_of_setDimmerLights_Trigger 0010  
         __end_of_setTemp_Initialization 1B76                 __size_of_Sw_DimmerOnFunc 0087  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1AFE  
               __end_of_Sw_DimmerOffFunc 16B8          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0F39  
                  __end_of_CC2500_TxData 1271                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 1110  
