

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 15 14:00:14 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	intentry,global,class=CODE,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	dabs	1,0x7E,2
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0090                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  0116                     	;# 
   179  0117                     	;# 
   180  011D                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  018E                     	;# 
   184  0191                     	;# 
   185  0191                     	;# 
   186  0192                     	;# 
   187  0193                     	;# 
   188  0193                     	;# 
   189  0194                     	;# 
   190  0195                     	;# 
   191  0196                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  019A                     	;# 
   195  019B                     	;# 
   196  019B                     	;# 
   197  019B                     	;# 
   198  019B                     	;# 
   199  019C                     	;# 
   200  019C                     	;# 
   201  019D                     	;# 
   202  019E                     	;# 
   203  019F                     	;# 
   204  020D                     	;# 
   205  0210                     	;# 
   206  0211                     	;# 
   207  0211                     	;# 
   208  0212                     	;# 
   209  0212                     	;# 
   210  0213                     	;# 
   211  0213                     	;# 
   212  0214                     	;# 
   213  0214                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0216                     	;# 
   218  0216                     	;# 
   219  0217                     	;# 
   220  0217                     	;# 
   221  0291                     	;# 
   222  0291                     	;# 
   223  0292                     	;# 
   224  0293                     	;# 
   225  0298                     	;# 
   226  0298                     	;# 
   227  0299                     	;# 
   228  029A                     	;# 
   229  0394                     	;# 
   230  0395                     	;# 
   231  0396                     	;# 
   232  0FE4                     	;# 
   233  0FE5                     	;# 
   234  0FE6                     	;# 
   235  0FE7                     	;# 
   236  0FE8                     	;# 
   237  0FE9                     	;# 
   238  0FEA                     	;# 
   239  0FEB                     	;# 
   240  0FED                     	;# 
   241  0FEE                     	;# 
   242  0FEF                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0015                     	;# 
   262  0016                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001B                     	;# 
   269  001C                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0090                     	;# 
   274  0091                     	;# 
   275  0092                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  010C                     	;# 
   287  010D                     	;# 
   288  010E                     	;# 
   289  0116                     	;# 
   290  0117                     	;# 
   291  011D                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  018E                     	;# 
   295  0191                     	;# 
   296  0191                     	;# 
   297  0192                     	;# 
   298  0193                     	;# 
   299  0193                     	;# 
   300  0194                     	;# 
   301  0195                     	;# 
   302  0196                     	;# 
   303  0197                     	;# 
   304  0199                     	;# 
   305  019A                     	;# 
   306  019B                     	;# 
   307  019B                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019C                     	;# 
   311  019C                     	;# 
   312  019D                     	;# 
   313  019E                     	;# 
   314  019F                     	;# 
   315  020D                     	;# 
   316  0210                     	;# 
   317  0211                     	;# 
   318  0211                     	;# 
   319  0212                     	;# 
   320  0212                     	;# 
   321  0213                     	;# 
   322  0213                     	;# 
   323  0214                     	;# 
   324  0214                     	;# 
   325  0215                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0216                     	;# 
   329  0216                     	;# 
   330  0217                     	;# 
   331  0217                     	;# 
   332  0291                     	;# 
   333  0291                     	;# 
   334  0292                     	;# 
   335  0293                     	;# 
   336  0298                     	;# 
   337  0298                     	;# 
   338  0299                     	;# 
   339  029A                     	;# 
   340  0394                     	;# 
   341  0395                     	;# 
   342  0396                     	;# 
   343  0FE4                     	;# 
   344  0FE5                     	;# 
   345  0FE6                     	;# 
   346  0FE7                     	;# 
   347  0FE8                     	;# 
   348  0FE9                     	;# 
   349  0FEA                     	;# 
   350  0FEB                     	;# 
   351  0FED                     	;# 
   352  0FEE                     	;# 
   353  0FEF                     	;# 
   354  0000                     	;# 
   355  0001                     	;# 
   356  0002                     	;# 
   357  0003                     	;# 
   358  0004                     	;# 
   359  0005                     	;# 
   360  0006                     	;# 
   361  0007                     	;# 
   362  0008                     	;# 
   363  0009                     	;# 
   364  000A                     	;# 
   365  000B                     	;# 
   366  000C                     	;# 
   367  000D                     	;# 
   368  000E                     	;# 
   369  0010                     	;# 
   370  0011                     	;# 
   371  0012                     	;# 
   372  0015                     	;# 
   373  0016                     	;# 
   374  0016                     	;# 
   375  0017                     	;# 
   376  0018                     	;# 
   377  0019                     	;# 
   378  001A                     	;# 
   379  001B                     	;# 
   380  001C                     	;# 
   381  008C                     	;# 
   382  008D                     	;# 
   383  008E                     	;# 
   384  0090                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0095                     	;# 
   388  0096                     	;# 
   389  0097                     	;# 
   390  0099                     	;# 
   391  009A                     	;# 
   392  009B                     	;# 
   393  009B                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  010C                     	;# 
   398  010D                     	;# 
   399  010E                     	;# 
   400  0116                     	;# 
   401  0117                     	;# 
   402  011D                     	;# 
   403  018C                     	;# 
   404  018D                     	;# 
   405  018E                     	;# 
   406  0191                     	;# 
   407  0191                     	;# 
   408  0192                     	;# 
   409  0193                     	;# 
   410  0193                     	;# 
   411  0194                     	;# 
   412  0195                     	;# 
   413  0196                     	;# 
   414  0197                     	;# 
   415  0199                     	;# 
   416  019A                     	;# 
   417  019B                     	;# 
   418  019B                     	;# 
   419  019B                     	;# 
   420  019B                     	;# 
   421  019C                     	;# 
   422  019C                     	;# 
   423  019D                     	;# 
   424  019E                     	;# 
   425  019F                     	;# 
   426  020D                     	;# 
   427  0210                     	;# 
   428  0211                     	;# 
   429  0211                     	;# 
   430  0212                     	;# 
   431  0212                     	;# 
   432  0213                     	;# 
   433  0213                     	;# 
   434  0214                     	;# 
   435  0214                     	;# 
   436  0215                     	;# 
   437  0215                     	;# 
   438  0215                     	;# 
   439  0216                     	;# 
   440  0216                     	;# 
   441  0217                     	;# 
   442  0217                     	;# 
   443  0291                     	;# 
   444  0291                     	;# 
   445  0292                     	;# 
   446  0293                     	;# 
   447  0298                     	;# 
   448  0298                     	;# 
   449  0299                     	;# 
   450  029A                     	;# 
   451  0394                     	;# 
   452  0395                     	;# 
   453  0396                     	;# 
   454  0FE4                     	;# 
   455  0FE5                     	;# 
   456  0FE6                     	;# 
   457  0FE7                     	;# 
   458  0FE8                     	;# 
   459  0FE9                     	;# 
   460  0FEA                     	;# 
   461  0FEB                     	;# 
   462  0FED                     	;# 
   463  0FEE                     	;# 
   464  0FEF                     	;# 
   465  0000                     	;# 
   466  0001                     	;# 
   467  0002                     	;# 
   468  0003                     	;# 
   469  0004                     	;# 
   470  0005                     	;# 
   471  0006                     	;# 
   472  0007                     	;# 
   473  0008                     	;# 
   474  0009                     	;# 
   475  000A                     	;# 
   476  000B                     	;# 
   477  000C                     	;# 
   478  000D                     	;# 
   479  000E                     	;# 
   480  0010                     	;# 
   481  0011                     	;# 
   482  0012                     	;# 
   483  0015                     	;# 
   484  0016                     	;# 
   485  0016                     	;# 
   486  0017                     	;# 
   487  0018                     	;# 
   488  0019                     	;# 
   489  001A                     	;# 
   490  001B                     	;# 
   491  001C                     	;# 
   492  008C                     	;# 
   493  008D                     	;# 
   494  008E                     	;# 
   495  0090                     	;# 
   496  0091                     	;# 
   497  0092                     	;# 
   498  0095                     	;# 
   499  0096                     	;# 
   500  0097                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0116                     	;# 
   512  0117                     	;# 
   513  011D                     	;# 
   514  018C                     	;# 
   515  018D                     	;# 
   516  018E                     	;# 
   517  0191                     	;# 
   518  0191                     	;# 
   519  0192                     	;# 
   520  0193                     	;# 
   521  0193                     	;# 
   522  0194                     	;# 
   523  0195                     	;# 
   524  0196                     	;# 
   525  0197                     	;# 
   526  0199                     	;# 
   527  019A                     	;# 
   528  019B                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019C                     	;# 
   533  019C                     	;# 
   534  019D                     	;# 
   535  019E                     	;# 
   536  019F                     	;# 
   537  020D                     	;# 
   538  0210                     	;# 
   539  0211                     	;# 
   540  0211                     	;# 
   541  0212                     	;# 
   542  0212                     	;# 
   543  0213                     	;# 
   544  0213                     	;# 
   545  0214                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0298                     	;# 
   559  0298                     	;# 
   560  0299                     	;# 
   561  029A                     	;# 
   562  0394                     	;# 
   563  0395                     	;# 
   564  0396                     	;# 
   565  0FE4                     	;# 
   566  0FE5                     	;# 
   567  0FE6                     	;# 
   568  0FE7                     	;# 
   569  0FE8                     	;# 
   570  0FE9                     	;# 
   571  0FEA                     	;# 
   572  0FEB                     	;# 
   573  0FED                     	;# 
   574  0FEE                     	;# 
   575  0FEF                     	;# 
   576  0000                     	;# 
   577  0001                     	;# 
   578  0002                     	;# 
   579  0003                     	;# 
   580  0004                     	;# 
   581  0005                     	;# 
   582  0006                     	;# 
   583  0007                     	;# 
   584  0008                     	;# 
   585  0009                     	;# 
   586  000A                     	;# 
   587  000B                     	;# 
   588  000C                     	;# 
   589  000D                     	;# 
   590  000E                     	;# 
   591  0010                     	;# 
   592  0011                     	;# 
   593  0012                     	;# 
   594  0015                     	;# 
   595  0016                     	;# 
   596  0016                     	;# 
   597  0017                     	;# 
   598  0018                     	;# 
   599  0019                     	;# 
   600  001A                     	;# 
   601  001B                     	;# 
   602  001C                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  008E                     	;# 
   606  0090                     	;# 
   607  0091                     	;# 
   608  0092                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0097                     	;# 
   612  0099                     	;# 
   613  009A                     	;# 
   614  009B                     	;# 
   615  009B                     	;# 
   616  009C                     	;# 
   617  009D                     	;# 
   618  009E                     	;# 
   619  010C                     	;# 
   620  010D                     	;# 
   621  010E                     	;# 
   622  0116                     	;# 
   623  0117                     	;# 
   624  011D                     	;# 
   625  018C                     	;# 
   626  018D                     	;# 
   627  018E                     	;# 
   628  0191                     	;# 
   629  0191                     	;# 
   630  0192                     	;# 
   631  0193                     	;# 
   632  0193                     	;# 
   633  0194                     	;# 
   634  0195                     	;# 
   635  0196                     	;# 
   636  0197                     	;# 
   637  0199                     	;# 
   638  019A                     	;# 
   639  019B                     	;# 
   640  019B                     	;# 
   641  019B                     	;# 
   642  019B                     	;# 
   643  019C                     	;# 
   644  019C                     	;# 
   645  019D                     	;# 
   646  019E                     	;# 
   647  019F                     	;# 
   648  020D                     	;# 
   649  0210                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0216                     	;# 
   662  0216                     	;# 
   663  0217                     	;# 
   664  0217                     	;# 
   665  0291                     	;# 
   666  0291                     	;# 
   667  0292                     	;# 
   668  0293                     	;# 
   669  0298                     	;# 
   670  0298                     	;# 
   671  0299                     	;# 
   672  029A                     	;# 
   673  0394                     	;# 
   674  0395                     	;# 
   675  0396                     	;# 
   676  0FE4                     	;# 
   677  0FE5                     	;# 
   678  0FE6                     	;# 
   679  0FE7                     	;# 
   680  0FE8                     	;# 
   681  0FE9                     	;# 
   682  0FEA                     	;# 
   683  0FEB                     	;# 
   684  0FED                     	;# 
   685  0FEE                     	;# 
   686  0FEF                     	;# 
   687  0000                     	;# 
   688  0001                     	;# 
   689  0002                     	;# 
   690  0003                     	;# 
   691  0004                     	;# 
   692  0005                     	;# 
   693  0006                     	;# 
   694  0007                     	;# 
   695  0008                     	;# 
   696  0009                     	;# 
   697  000A                     	;# 
   698  000B                     	;# 
   699  000C                     	;# 
   700  000D                     	;# 
   701  000E                     	;# 
   702  0010                     	;# 
   703  0011                     	;# 
   704  0012                     	;# 
   705  0015                     	;# 
   706  0016                     	;# 
   707  0016                     	;# 
   708  0017                     	;# 
   709  0018                     	;# 
   710  0019                     	;# 
   711  001A                     	;# 
   712  001B                     	;# 
   713  001C                     	;# 
   714  008C                     	;# 
   715  008D                     	;# 
   716  008E                     	;# 
   717  0090                     	;# 
   718  0091                     	;# 
   719  0092                     	;# 
   720  0095                     	;# 
   721  0096                     	;# 
   722  0097                     	;# 
   723  0099                     	;# 
   724  009A                     	;# 
   725  009B                     	;# 
   726  009B                     	;# 
   727  009C                     	;# 
   728  009D                     	;# 
   729  009E                     	;# 
   730  010C                     	;# 
   731  010D                     	;# 
   732  010E                     	;# 
   733  0116                     	;# 
   734  0117                     	;# 
   735  011D                     	;# 
   736  018C                     	;# 
   737  018D                     	;# 
   738  018E                     	;# 
   739  0191                     	;# 
   740  0191                     	;# 
   741  0192                     	;# 
   742  0193                     	;# 
   743  0193                     	;# 
   744  0194                     	;# 
   745  0195                     	;# 
   746  0196                     	;# 
   747  0197                     	;# 
   748  0199                     	;# 
   749  019A                     	;# 
   750  019B                     	;# 
   751  019B                     	;# 
   752  019B                     	;# 
   753  019B                     	;# 
   754  019C                     	;# 
   755  019C                     	;# 
   756  019D                     	;# 
   757  019E                     	;# 
   758  019F                     	;# 
   759  020D                     	;# 
   760  0210                     	;# 
   761  0211                     	;# 
   762  0211                     	;# 
   763  0212                     	;# 
   764  0212                     	;# 
   765  0213                     	;# 
   766  0213                     	;# 
   767  0214                     	;# 
   768  0214                     	;# 
   769  0215                     	;# 
   770  0215                     	;# 
   771  0215                     	;# 
   772  0216                     	;# 
   773  0216                     	;# 
   774  0217                     	;# 
   775  0217                     	;# 
   776  0291                     	;# 
   777  0291                     	;# 
   778  0292                     	;# 
   779  0293                     	;# 
   780  0298                     	;# 
   781  0298                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  0394                     	;# 
   785  0395                     	;# 
   786  0396                     	;# 
   787  0FE4                     	;# 
   788  0FE5                     	;# 
   789  0FE6                     	;# 
   790  0FE7                     	;# 
   791  0FE8                     	;# 
   792  0FE9                     	;# 
   793  0FEA                     	;# 
   794  0FEB                     	;# 
   795  0FED                     	;# 
   796  0FEE                     	;# 
   797  0FEF                     	;# 
   798  0000                     	;# 
   799  0001                     	;# 
   800  0002                     	;# 
   801  0003                     	;# 
   802  0004                     	;# 
   803  0005                     	;# 
   804  0006                     	;# 
   805  0007                     	;# 
   806  0008                     	;# 
   807  0009                     	;# 
   808  000A                     	;# 
   809  000B                     	;# 
   810  000C                     	;# 
   811  000D                     	;# 
   812  000E                     	;# 
   813  0010                     	;# 
   814  0011                     	;# 
   815  0012                     	;# 
   816  0015                     	;# 
   817  0016                     	;# 
   818  0016                     	;# 
   819  0017                     	;# 
   820  0018                     	;# 
   821  0019                     	;# 
   822  001A                     	;# 
   823  001B                     	;# 
   824  001C                     	;# 
   825  008C                     	;# 
   826  008D                     	;# 
   827  008E                     	;# 
   828  0090                     	;# 
   829  0091                     	;# 
   830  0092                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0097                     	;# 
   834  0099                     	;# 
   835  009A                     	;# 
   836  009B                     	;# 
   837  009B                     	;# 
   838  009C                     	;# 
   839  009D                     	;# 
   840  009E                     	;# 
   841  010C                     	;# 
   842  010D                     	;# 
   843  010E                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  011D                     	;# 
   847  018C                     	;# 
   848  018D                     	;# 
   849  018E                     	;# 
   850  0191                     	;# 
   851  0191                     	;# 
   852  0192                     	;# 
   853  0193                     	;# 
   854  0193                     	;# 
   855  0194                     	;# 
   856  0195                     	;# 
   857  0196                     	;# 
   858  0197                     	;# 
   859  0199                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019B                     	;# 
   864  019B                     	;# 
   865  019C                     	;# 
   866  019C                     	;# 
   867  019D                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  020D                     	;# 
   871  0210                     	;# 
   872  0211                     	;# 
   873  0211                     	;# 
   874  0212                     	;# 
   875  0212                     	;# 
   876  0213                     	;# 
   877  0213                     	;# 
   878  0214                     	;# 
   879  0214                     	;# 
   880  0215                     	;# 
   881  0215                     	;# 
   882  0215                     	;# 
   883  0216                     	;# 
   884  0216                     	;# 
   885  0217                     	;# 
   886  0217                     	;# 
   887  0291                     	;# 
   888  0291                     	;# 
   889  0292                     	;# 
   890  0293                     	;# 
   891  0298                     	;# 
   892  0298                     	;# 
   893  0299                     	;# 
   894  029A                     	;# 
   895  0394                     	;# 
   896  0395                     	;# 
   897  0396                     	;# 
   898  0FE4                     	;# 
   899  0FE5                     	;# 
   900  0FE6                     	;# 
   901  0FE7                     	;# 
   902  0FE8                     	;# 
   903  0FE9                     	;# 
   904  0FEA                     	;# 
   905  0FEB                     	;# 
   906  0FED                     	;# 
   907  0FEE                     	;# 
   908  0FEF                     	;# 
   909  0000                     	;# 
   910  0001                     	;# 
   911  0002                     	;# 
   912  0003                     	;# 
   913  0004                     	;# 
   914  0005                     	;# 
   915  0006                     	;# 
   916  0007                     	;# 
   917  0008                     	;# 
   918  0009                     	;# 
   919  000A                     	;# 
   920  000B                     	;# 
   921  000C                     	;# 
   922  000D                     	;# 
   923  000E                     	;# 
   924  0010                     	;# 
   925  0011                     	;# 
   926  0012                     	;# 
   927  0015                     	;# 
   928  0016                     	;# 
   929  0016                     	;# 
   930  0017                     	;# 
   931  0018                     	;# 
   932  0019                     	;# 
   933  001A                     	;# 
   934  001B                     	;# 
   935  001C                     	;# 
   936  008C                     	;# 
   937  008D                     	;# 
   938  008E                     	;# 
   939  0090                     	;# 
   940  0091                     	;# 
   941  0092                     	;# 
   942  0095                     	;# 
   943  0096                     	;# 
   944  0097                     	;# 
   945  0099                     	;# 
   946  009A                     	;# 
   947  009B                     	;# 
   948  009B                     	;# 
   949  009C                     	;# 
   950  009D                     	;# 
   951  009E                     	;# 
   952  010C                     	;# 
   953  010D                     	;# 
   954  010E                     	;# 
   955  0116                     	;# 
   956  0117                     	;# 
   957  011D                     	;# 
   958  018C                     	;# 
   959  018D                     	;# 
   960  018E                     	;# 
   961  0191                     	;# 
   962  0191                     	;# 
   963  0192                     	;# 
   964  0193                     	;# 
   965  0193                     	;# 
   966  0194                     	;# 
   967  0195                     	;# 
   968  0196                     	;# 
   969  0197                     	;# 
   970  0199                     	;# 
   971  019A                     	;# 
   972  019B                     	;# 
   973  019B                     	;# 
   974  019B                     	;# 
   975  019B                     	;# 
   976  019C                     	;# 
   977  019C                     	;# 
   978  019D                     	;# 
   979  019E                     	;# 
   980  019F                     	;# 
   981  020D                     	;# 
   982  0210                     	;# 
   983  0211                     	;# 
   984  0211                     	;# 
   985  0212                     	;# 
   986  0212                     	;# 
   987  0213                     	;# 
   988  0213                     	;# 
   989  0214                     	;# 
   990  0214                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0291                     	;# 
   999  0291                     	;# 
  1000  0292                     	;# 
  1001  0293                     	;# 
  1002  0298                     	;# 
  1003  0298                     	;# 
  1004  0299                     	;# 
  1005  029A                     	;# 
  1006  0394                     	;# 
  1007  0395                     	;# 
  1008  0396                     	;# 
  1009  0FE4                     	;# 
  1010  0FE5                     	;# 
  1011  0FE6                     	;# 
  1012  0FE7                     	;# 
  1013  0FE8                     	;# 
  1014  0FE9                     	;# 
  1015  0FEA                     	;# 
  1016  0FEB                     	;# 
  1017  0FED                     	;# 
  1018  0FEE                     	;# 
  1019  0FEF                     	;# 
  1020  0000                     	;# 
  1021  0001                     	;# 
  1022  0002                     	;# 
  1023  0003                     	;# 
  1024  0004                     	;# 
  1025  0005                     	;# 
  1026  0006                     	;# 
  1027  0007                     	;# 
  1028  0008                     	;# 
  1029  0009                     	;# 
  1030  000A                     	;# 
  1031  000B                     	;# 
  1032  000C                     	;# 
  1033  000D                     	;# 
  1034  000E                     	;# 
  1035  0010                     	;# 
  1036  0011                     	;# 
  1037  0012                     	;# 
  1038  0015                     	;# 
  1039  0016                     	;# 
  1040  0016                     	;# 
  1041  0017                     	;# 
  1042  0018                     	;# 
  1043  0019                     	;# 
  1044  001A                     	;# 
  1045  001B                     	;# 
  1046  001C                     	;# 
  1047  008C                     	;# 
  1048  008D                     	;# 
  1049  008E                     	;# 
  1050  0090                     	;# 
  1051  0091                     	;# 
  1052  0092                     	;# 
  1053  0095                     	;# 
  1054  0096                     	;# 
  1055  0097                     	;# 
  1056  0099                     	;# 
  1057  009A                     	;# 
  1058  009B                     	;# 
  1059  009B                     	;# 
  1060  009C                     	;# 
  1061  009D                     	;# 
  1062  009E                     	;# 
  1063  010C                     	;# 
  1064  010D                     	;# 
  1065  010E                     	;# 
  1066  0116                     	;# 
  1067  0117                     	;# 
  1068  011D                     	;# 
  1069  018C                     	;# 
  1070  018D                     	;# 
  1071  018E                     	;# 
  1072  0191                     	;# 
  1073  0191                     	;# 
  1074  0192                     	;# 
  1075  0193                     	;# 
  1076  0193                     	;# 
  1077  0194                     	;# 
  1078  0195                     	;# 
  1079  0196                     	;# 
  1080  0197                     	;# 
  1081  0199                     	;# 
  1082  019A                     	;# 
  1083  019B                     	;# 
  1084  019B                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019C                     	;# 
  1089  019D                     	;# 
  1090  019E                     	;# 
  1091  019F                     	;# 
  1092  020D                     	;# 
  1093  0210                     	;# 
  1094  0211                     	;# 
  1095  0211                     	;# 
  1096  0212                     	;# 
  1097  0212                     	;# 
  1098  0213                     	;# 
  1099  0213                     	;# 
  1100  0214                     	;# 
  1101  0214                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0215                     	;# 
  1105  0216                     	;# 
  1106  0216                     	;# 
  1107  0217                     	;# 
  1108  0217                     	;# 
  1109  0291                     	;# 
  1110  0291                     	;# 
  1111  0292                     	;# 
  1112  0293                     	;# 
  1113  0298                     	;# 
  1114  0298                     	;# 
  1115  0299                     	;# 
  1116  029A                     	;# 
  1117  0394                     	;# 
  1118  0395                     	;# 
  1119  0396                     	;# 
  1120  0FE4                     	;# 
  1121  0FE5                     	;# 
  1122  0FE6                     	;# 
  1123  0FE7                     	;# 
  1124  0FE8                     	;# 
  1125  0FE9                     	;# 
  1126  0FEA                     	;# 
  1127  0FEB                     	;# 
  1128  0FED                     	;# 
  1129  0FEE                     	;# 
  1130  0FEF                     	;# 
  1131  0000                     	;# 
  1132  0001                     	;# 
  1133  0002                     	;# 
  1134  0003                     	;# 
  1135  0004                     	;# 
  1136  0005                     	;# 
  1137  0006                     	;# 
  1138  0007                     	;# 
  1139  0008                     	;# 
  1140  0009                     	;# 
  1141  000A                     	;# 
  1142  000B                     	;# 
  1143  000C                     	;# 
  1144  000D                     	;# 
  1145  000E                     	;# 
  1146  0010                     	;# 
  1147  0011                     	;# 
  1148  0012                     	;# 
  1149  0015                     	;# 
  1150  0016                     	;# 
  1151  0016                     	;# 
  1152  0017                     	;# 
  1153  0018                     	;# 
  1154  0019                     	;# 
  1155  001A                     	;# 
  1156  001B                     	;# 
  1157  001C                     	;# 
  1158  008C                     	;# 
  1159  008D                     	;# 
  1160  008E                     	;# 
  1161  0090                     	;# 
  1162  0091                     	;# 
  1163  0092                     	;# 
  1164  0095                     	;# 
  1165  0096                     	;# 
  1166  0097                     	;# 
  1167  0099                     	;# 
  1168  009A                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  010C                     	;# 
  1175  010D                     	;# 
  1176  010E                     	;# 
  1177  0116                     	;# 
  1178  0117                     	;# 
  1179  011D                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0194                     	;# 
  1189  0195                     	;# 
  1190  0196                     	;# 
  1191  0197                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019B                     	;# 
  1197  019B                     	;# 
  1198  019C                     	;# 
  1199  019C                     	;# 
  1200  019D                     	;# 
  1201  019E                     	;# 
  1202  019F                     	;# 
  1203  020D                     	;# 
  1204  0210                     	;# 
  1205  0211                     	;# 
  1206  0211                     	;# 
  1207  0212                     	;# 
  1208  0212                     	;# 
  1209  0213                     	;# 
  1210  0213                     	;# 
  1211  0214                     	;# 
  1212  0214                     	;# 
  1213  0215                     	;# 
  1214  0215                     	;# 
  1215  0215                     	;# 
  1216  0216                     	;# 
  1217  0216                     	;# 
  1218  0217                     	;# 
  1219  0217                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0298                     	;# 
  1225  0298                     	;# 
  1226  0299                     	;# 
  1227  029A                     	;# 
  1228  0394                     	;# 
  1229  0395                     	;# 
  1230  0396                     	;# 
  1231  0FE4                     	;# 
  1232  0FE5                     	;# 
  1233  0FE6                     	;# 
  1234  0FE7                     	;# 
  1235  0FE8                     	;# 
  1236  0FE9                     	;# 
  1237  0FEA                     	;# 
  1238  0FEB                     	;# 
  1239  0FED                     	;# 
  1240  0FEE                     	;# 
  1241  0FEF                     	;# 
  1242  0000                     	;# 
  1243  0001                     	;# 
  1244  0002                     	;# 
  1245  0003                     	;# 
  1246  0004                     	;# 
  1247  0005                     	;# 
  1248  0006                     	;# 
  1249  0007                     	;# 
  1250  0008                     	;# 
  1251  0009                     	;# 
  1252  000A                     	;# 
  1253  000B                     	;# 
  1254  000C                     	;# 
  1255  000D                     	;# 
  1256  000E                     	;# 
  1257  0010                     	;# 
  1258  0011                     	;# 
  1259  0012                     	;# 
  1260  0015                     	;# 
  1261  0016                     	;# 
  1262  0016                     	;# 
  1263  0017                     	;# 
  1264  0018                     	;# 
  1265  0019                     	;# 
  1266  001A                     	;# 
  1267  001B                     	;# 
  1268  001C                     	;# 
  1269  008C                     	;# 
  1270  008D                     	;# 
  1271  008E                     	;# 
  1272  0090                     	;# 
  1273  0091                     	;# 
  1274  0092                     	;# 
  1275  0095                     	;# 
  1276  0096                     	;# 
  1277  0097                     	;# 
  1278  0099                     	;# 
  1279  009A                     	;# 
  1280  009B                     	;# 
  1281  009B                     	;# 
  1282  009C                     	;# 
  1283  009D                     	;# 
  1284  009E                     	;# 
  1285  010C                     	;# 
  1286  010D                     	;# 
  1287  010E                     	;# 
  1288  0116                     	;# 
  1289  0117                     	;# 
  1290  011D                     	;# 
  1291  018C                     	;# 
  1292  018D                     	;# 
  1293  018E                     	;# 
  1294  0191                     	;# 
  1295  0191                     	;# 
  1296  0192                     	;# 
  1297  0193                     	;# 
  1298  0193                     	;# 
  1299  0194                     	;# 
  1300  0195                     	;# 
  1301  0196                     	;# 
  1302  0197                     	;# 
  1303  0199                     	;# 
  1304  019A                     	;# 
  1305  019B                     	;# 
  1306  019B                     	;# 
  1307  019B                     	;# 
  1308  019B                     	;# 
  1309  019C                     	;# 
  1310  019C                     	;# 
  1311  019D                     	;# 
  1312  019E                     	;# 
  1313  019F                     	;# 
  1314  020D                     	;# 
  1315  0210                     	;# 
  1316  0211                     	;# 
  1317  0211                     	;# 
  1318  0212                     	;# 
  1319  0212                     	;# 
  1320  0213                     	;# 
  1321  0213                     	;# 
  1322  0214                     	;# 
  1323  0214                     	;# 
  1324  0215                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0216                     	;# 
  1328  0216                     	;# 
  1329  0217                     	;# 
  1330  0217                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0298                     	;# 
  1336  0298                     	;# 
  1337  0299                     	;# 
  1338  029A                     	;# 
  1339  0394                     	;# 
  1340  0395                     	;# 
  1341  0396                     	;# 
  1342  0FE4                     	;# 
  1343  0FE5                     	;# 
  1344  0FE6                     	;# 
  1345  0FE7                     	;# 
  1346  0FE8                     	;# 
  1347  0FE9                     	;# 
  1348  0FEA                     	;# 
  1349  0FEB                     	;# 
  1350  0FED                     	;# 
  1351  0FEE                     	;# 
  1352  0FEF                     	;# 
  1353  0000                     	;# 
  1354  0001                     	;# 
  1355  0002                     	;# 
  1356  0003                     	;# 
  1357  0004                     	;# 
  1358  0005                     	;# 
  1359  0006                     	;# 
  1360  0007                     	;# 
  1361  0008                     	;# 
  1362  0009                     	;# 
  1363  000A                     	;# 
  1364  000B                     	;# 
  1365  000C                     	;# 
  1366  000D                     	;# 
  1367  000E                     	;# 
  1368  0010                     	;# 
  1369  0011                     	;# 
  1370  0012                     	;# 
  1371  0015                     	;# 
  1372  0016                     	;# 
  1373  0016                     	;# 
  1374  0017                     	;# 
  1375  0018                     	;# 
  1376  0019                     	;# 
  1377  001A                     	;# 
  1378  001B                     	;# 
  1379  001C                     	;# 
  1380  008C                     	;# 
  1381  008D                     	;# 
  1382  008E                     	;# 
  1383  0090                     	;# 
  1384  0091                     	;# 
  1385  0092                     	;# 
  1386  0095                     	;# 
  1387  0096                     	;# 
  1388  0097                     	;# 
  1389  0099                     	;# 
  1390  009A                     	;# 
  1391  009B                     	;# 
  1392  009B                     	;# 
  1393  009C                     	;# 
  1394  009D                     	;# 
  1395  009E                     	;# 
  1396  010C                     	;# 
  1397  010D                     	;# 
  1398  010E                     	;# 
  1399  0116                     	;# 
  1400  0117                     	;# 
  1401  011D                     	;# 
  1402  018C                     	;# 
  1403  018D                     	;# 
  1404  018E                     	;# 
  1405  0191                     	;# 
  1406  0191                     	;# 
  1407  0192                     	;# 
  1408  0193                     	;# 
  1409  0193                     	;# 
  1410  0194                     	;# 
  1411  0195                     	;# 
  1412  0196                     	;# 
  1413  0197                     	;# 
  1414  0199                     	;# 
  1415  019A                     	;# 
  1416  019B                     	;# 
  1417  019B                     	;# 
  1418  019B                     	;# 
  1419  019B                     	;# 
  1420  019C                     	;# 
  1421  019C                     	;# 
  1422  019D                     	;# 
  1423  019E                     	;# 
  1424  019F                     	;# 
  1425  020D                     	;# 
  1426  0210                     	;# 
  1427  0211                     	;# 
  1428  0211                     	;# 
  1429  0212                     	;# 
  1430  0212                     	;# 
  1431  0213                     	;# 
  1432  0213                     	;# 
  1433  0214                     	;# 
  1434  0214                     	;# 
  1435  0215                     	;# 
  1436  0215                     	;# 
  1437  0215                     	;# 
  1438  0216                     	;# 
  1439  0216                     	;# 
  1440  0217                     	;# 
  1441  0217                     	;# 
  1442  0291                     	;# 
  1443  0291                     	;# 
  1444  0292                     	;# 
  1445  0293                     	;# 
  1446  0298                     	;# 
  1447  0298                     	;# 
  1448  0299                     	;# 
  1449  029A                     	;# 
  1450  0394                     	;# 
  1451  0395                     	;# 
  1452  0396                     	;# 
  1453  0FE4                     	;# 
  1454  0FE5                     	;# 
  1455  0FE6                     	;# 
  1456  0FE7                     	;# 
  1457  0FE8                     	;# 
  1458  0FE9                     	;# 
  1459  0FEA                     	;# 
  1460  0FEB                     	;# 
  1461  0FED                     	;# 
  1462  0FEE                     	;# 
  1463  0FEF                     	;# 
  1464  0000                     	;# 
  1465  0001                     	;# 
  1466  0002                     	;# 
  1467  0003                     	;# 
  1468  0004                     	;# 
  1469  0005                     	;# 
  1470  0006                     	;# 
  1471  0007                     	;# 
  1472  0008                     	;# 
  1473  0009                     	;# 
  1474  000A                     	;# 
  1475  000B                     	;# 
  1476  000C                     	;# 
  1477  000D                     	;# 
  1478  000E                     	;# 
  1479  0010                     	;# 
  1480  0011                     	;# 
  1481  0012                     	;# 
  1482  0015                     	;# 
  1483  0016                     	;# 
  1484  0016                     	;# 
  1485  0017                     	;# 
  1486  0018                     	;# 
  1487  0019                     	;# 
  1488  001A                     	;# 
  1489  001B                     	;# 
  1490  001C                     	;# 
  1491  008C                     	;# 
  1492  008D                     	;# 
  1493  008E                     	;# 
  1494  0090                     	;# 
  1495  0091                     	;# 
  1496  0092                     	;# 
  1497  0095                     	;# 
  1498  0096                     	;# 
  1499  0097                     	;# 
  1500  0099                     	;# 
  1501  009A                     	;# 
  1502  009B                     	;# 
  1503  009B                     	;# 
  1504  009C                     	;# 
  1505  009D                     	;# 
  1506  009E                     	;# 
  1507  010C                     	;# 
  1508  010D                     	;# 
  1509  010E                     	;# 
  1510  0116                     	;# 
  1511  0117                     	;# 
  1512  011D                     	;# 
  1513  018C                     	;# 
  1514  018D                     	;# 
  1515  018E                     	;# 
  1516  0191                     	;# 
  1517  0191                     	;# 
  1518  0192                     	;# 
  1519  0193                     	;# 
  1520  0193                     	;# 
  1521  0194                     	;# 
  1522  0195                     	;# 
  1523  0196                     	;# 
  1524  0197                     	;# 
  1525  0199                     	;# 
  1526  019A                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019B                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019E                     	;# 
  1535  019F                     	;# 
  1536  020D                     	;# 
  1537  0210                     	;# 
  1538  0211                     	;# 
  1539  0211                     	;# 
  1540  0212                     	;# 
  1541  0212                     	;# 
  1542  0213                     	;# 
  1543  0213                     	;# 
  1544  0214                     	;# 
  1545  0214                     	;# 
  1546  0215                     	;# 
  1547  0215                     	;# 
  1548  0215                     	;# 
  1549  0216                     	;# 
  1550  0216                     	;# 
  1551  0217                     	;# 
  1552  0217                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0298                     	;# 
  1558  0298                     	;# 
  1559  0299                     	;# 
  1560  029A                     	;# 
  1561  0394                     	;# 
  1562  0395                     	;# 
  1563  0396                     	;# 
  1564  0FE4                     	;# 
  1565  0FE5                     	;# 
  1566  0FE6                     	;# 
  1567  0FE7                     	;# 
  1568  0FE8                     	;# 
  1569  0FE9                     	;# 
  1570  0FEA                     	;# 
  1571  0FEB                     	;# 
  1572  0FED                     	;# 
  1573  0FEE                     	;# 
  1574  0FEF                     	;# 
  1575  0000                     	;# 
  1576  0001                     	;# 
  1577  0002                     	;# 
  1578  0003                     	;# 
  1579  0004                     	;# 
  1580  0005                     	;# 
  1581  0006                     	;# 
  1582  0007                     	;# 
  1583  0008                     	;# 
  1584  0009                     	;# 
  1585  000A                     	;# 
  1586  000B                     	;# 
  1587  000C                     	;# 
  1588  000D                     	;# 
  1589  000E                     	;# 
  1590  0010                     	;# 
  1591  0011                     	;# 
  1592  0012                     	;# 
  1593  0015                     	;# 
  1594  0016                     	;# 
  1595  0016                     	;# 
  1596  0017                     	;# 
  1597  0018                     	;# 
  1598  0019                     	;# 
  1599  001A                     	;# 
  1600  001B                     	;# 
  1601  001C                     	;# 
  1602  008C                     	;# 
  1603  008D                     	;# 
  1604  008E                     	;# 
  1605  0090                     	;# 
  1606  0091                     	;# 
  1607  0092                     	;# 
  1608  0095                     	;# 
  1609  0096                     	;# 
  1610  0097                     	;# 
  1611  0099                     	;# 
  1612  009A                     	;# 
  1613  009B                     	;# 
  1614  009B                     	;# 
  1615  009C                     	;# 
  1616  009D                     	;# 
  1617  009E                     	;# 
  1618  010C                     	;# 
  1619  010D                     	;# 
  1620  010E                     	;# 
  1621  0116                     	;# 
  1622  0117                     	;# 
  1623  011D                     	;# 
  1624  018C                     	;# 
  1625  018D                     	;# 
  1626  018E                     	;# 
  1627  0191                     	;# 
  1628  0191                     	;# 
  1629  0192                     	;# 
  1630  0193                     	;# 
  1631  0193                     	;# 
  1632  0194                     	;# 
  1633  0195                     	;# 
  1634  0196                     	;# 
  1635  0197                     	;# 
  1636  0199                     	;# 
  1637  019A                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019C                     	;# 
  1643  019C                     	;# 
  1644  019D                     	;# 
  1645  019E                     	;# 
  1646  019F                     	;# 
  1647  020D                     	;# 
  1648  0210                     	;# 
  1649  0211                     	;# 
  1650  0211                     	;# 
  1651  0212                     	;# 
  1652  0212                     	;# 
  1653  0213                     	;# 
  1654  0213                     	;# 
  1655  0214                     	;# 
  1656  0214                     	;# 
  1657  0215                     	;# 
  1658  0215                     	;# 
  1659  0215                     	;# 
  1660  0216                     	;# 
  1661  0216                     	;# 
  1662  0217                     	;# 
  1663  0217                     	;# 
  1664  0291                     	;# 
  1665  0291                     	;# 
  1666  0292                     	;# 
  1667  0293                     	;# 
  1668  0298                     	;# 
  1669  0298                     	;# 
  1670  0299                     	;# 
  1671  029A                     	;# 
  1672  0394                     	;# 
  1673  0395                     	;# 
  1674  0396                     	;# 
  1675  0FE4                     	;# 
  1676  0FE5                     	;# 
  1677  0FE6                     	;# 
  1678  0FE7                     	;# 
  1679  0FE8                     	;# 
  1680  0FE9                     	;# 
  1681  0FEA                     	;# 
  1682  0FEB                     	;# 
  1683  0FED                     	;# 
  1684  0FEE                     	;# 
  1685  0FEF                     	;# 
  1686  0000                     	;# 
  1687  0001                     	;# 
  1688  0002                     	;# 
  1689  0003                     	;# 
  1690  0004                     	;# 
  1691  0005                     	;# 
  1692  0006                     	;# 
  1693  0007                     	;# 
  1694  0008                     	;# 
  1695  0009                     	;# 
  1696  000A                     	;# 
  1697  000B                     	;# 
  1698  000C                     	;# 
  1699  000D                     	;# 
  1700  000E                     	;# 
  1701  0010                     	;# 
  1702  0011                     	;# 
  1703  0012                     	;# 
  1704  0015                     	;# 
  1705  0016                     	;# 
  1706  0016                     	;# 
  1707  0017                     	;# 
  1708  0018                     	;# 
  1709  0019                     	;# 
  1710  001A                     	;# 
  1711  001B                     	;# 
  1712  001C                     	;# 
  1713  008C                     	;# 
  1714  008D                     	;# 
  1715  008E                     	;# 
  1716  0090                     	;# 
  1717  0091                     	;# 
  1718  0092                     	;# 
  1719  0095                     	;# 
  1720  0096                     	;# 
  1721  0097                     	;# 
  1722  0099                     	;# 
  1723  009A                     	;# 
  1724  009B                     	;# 
  1725  009B                     	;# 
  1726  009C                     	;# 
  1727  009D                     	;# 
  1728  009E                     	;# 
  1729  010C                     	;# 
  1730  010D                     	;# 
  1731  010E                     	;# 
  1732  0116                     	;# 
  1733  0117                     	;# 
  1734  011D                     	;# 
  1735  018C                     	;# 
  1736  018D                     	;# 
  1737  018E                     	;# 
  1738  0191                     	;# 
  1739  0191                     	;# 
  1740  0192                     	;# 
  1741  0193                     	;# 
  1742  0193                     	;# 
  1743  0194                     	;# 
  1744  0195                     	;# 
  1745  0196                     	;# 
  1746  0197                     	;# 
  1747  0199                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019B                     	;# 
  1752  019B                     	;# 
  1753  019C                     	;# 
  1754  019C                     	;# 
  1755  019D                     	;# 
  1756  019E                     	;# 
  1757  019F                     	;# 
  1758  020D                     	;# 
  1759  0210                     	;# 
  1760  0211                     	;# 
  1761  0211                     	;# 
  1762  0212                     	;# 
  1763  0212                     	;# 
  1764  0213                     	;# 
  1765  0213                     	;# 
  1766  0214                     	;# 
  1767  0214                     	;# 
  1768  0215                     	;# 
  1769  0215                     	;# 
  1770  0215                     	;# 
  1771  0216                     	;# 
  1772  0216                     	;# 
  1773  0217                     	;# 
  1774  0217                     	;# 
  1775  0291                     	;# 
  1776  0291                     	;# 
  1777  0292                     	;# 
  1778  0293                     	;# 
  1779  0298                     	;# 
  1780  0298                     	;# 
  1781  0299                     	;# 
  1782  029A                     	;# 
  1783  0394                     	;# 
  1784  0395                     	;# 
  1785  0396                     	;# 
  1786  0FE4                     	;# 
  1787  0FE5                     	;# 
  1788  0FE6                     	;# 
  1789  0FE7                     	;# 
  1790  0FE8                     	;# 
  1791  0FE9                     	;# 
  1792  0FEA                     	;# 
  1793  0FEB                     	;# 
  1794  0FED                     	;# 
  1795  0FEE                     	;# 
  1796  0FEF                     	;# 
  1797  0000                     	;# 
  1798  0001                     	;# 
  1799  0002                     	;# 
  1800  0003                     	;# 
  1801  0004                     	;# 
  1802  0005                     	;# 
  1803  0006                     	;# 
  1804  0007                     	;# 
  1805  0008                     	;# 
  1806  0009                     	;# 
  1807  000A                     	;# 
  1808  000B                     	;# 
  1809  000C                     	;# 
  1810  000D                     	;# 
  1811  000E                     	;# 
  1812  0010                     	;# 
  1813  0011                     	;# 
  1814  0012                     	;# 
  1815  0015                     	;# 
  1816  0016                     	;# 
  1817  0016                     	;# 
  1818  0017                     	;# 
  1819  0018                     	;# 
  1820  0019                     	;# 
  1821  001A                     	;# 
  1822  001B                     	;# 
  1823  001C                     	;# 
  1824  008C                     	;# 
  1825  008D                     	;# 
  1826  008E                     	;# 
  1827  0090                     	;# 
  1828  0091                     	;# 
  1829  0092                     	;# 
  1830  0095                     	;# 
  1831  0096                     	;# 
  1832  0097                     	;# 
  1833  0099                     	;# 
  1834  009A                     	;# 
  1835  009B                     	;# 
  1836  009B                     	;# 
  1837  009C                     	;# 
  1838  009D                     	;# 
  1839  009E                     	;# 
  1840  010C                     	;# 
  1841  010D                     	;# 
  1842  010E                     	;# 
  1843  0116                     	;# 
  1844  0117                     	;# 
  1845  011D                     	;# 
  1846  018C                     	;# 
  1847  018D                     	;# 
  1848  018E                     	;# 
  1849  0191                     	;# 
  1850  0191                     	;# 
  1851  0192                     	;# 
  1852  0193                     	;# 
  1853  0193                     	;# 
  1854  0194                     	;# 
  1855  0195                     	;# 
  1856  0196                     	;# 
  1857  0197                     	;# 
  1858  0199                     	;# 
  1859  019A                     	;# 
  1860  019B                     	;# 
  1861  019B                     	;# 
  1862  019B                     	;# 
  1863  019B                     	;# 
  1864  019C                     	;# 
  1865  019C                     	;# 
  1866  019D                     	;# 
  1867  019E                     	;# 
  1868  019F                     	;# 
  1869  020D                     	;# 
  1870  0210                     	;# 
  1871  0211                     	;# 
  1872  0211                     	;# 
  1873  0212                     	;# 
  1874  0212                     	;# 
  1875  0213                     	;# 
  1876  0213                     	;# 
  1877  0214                     	;# 
  1878  0214                     	;# 
  1879  0215                     	;# 
  1880  0215                     	;# 
  1881  0215                     	;# 
  1882  0216                     	;# 
  1883  0216                     	;# 
  1884  0217                     	;# 
  1885  0217                     	;# 
  1886  0291                     	;# 
  1887  0291                     	;# 
  1888  0292                     	;# 
  1889  0293                     	;# 
  1890  0298                     	;# 
  1891  0298                     	;# 
  1892  0299                     	;# 
  1893  029A                     	;# 
  1894  0394                     	;# 
  1895  0395                     	;# 
  1896  0396                     	;# 
  1897  0FE4                     	;# 
  1898  0FE5                     	;# 
  1899  0FE6                     	;# 
  1900  0FE7                     	;# 
  1901  0FE8                     	;# 
  1902  0FE9                     	;# 
  1903  0FEA                     	;# 
  1904  0FEB                     	;# 
  1905  0FED                     	;# 
  1906  0FEE                     	;# 
  1907  0FEF                     	;# 
  1908  0000                     	;# 
  1909  0001                     	;# 
  1910  0002                     	;# 
  1911  0003                     	;# 
  1912  0004                     	;# 
  1913  0005                     	;# 
  1914  0006                     	;# 
  1915  0007                     	;# 
  1916  0008                     	;# 
  1917  0009                     	;# 
  1918  000A                     	;# 
  1919  000B                     	;# 
  1920  000C                     	;# 
  1921  000D                     	;# 
  1922  000E                     	;# 
  1923  0010                     	;# 
  1924  0011                     	;# 
  1925  0012                     	;# 
  1926  0015                     	;# 
  1927  0016                     	;# 
  1928  0016                     	;# 
  1929  0017                     	;# 
  1930  0018                     	;# 
  1931  0019                     	;# 
  1932  001A                     	;# 
  1933  001B                     	;# 
  1934  001C                     	;# 
  1935  008C                     	;# 
  1936  008D                     	;# 
  1937  008E                     	;# 
  1938  0090                     	;# 
  1939  0091                     	;# 
  1940  0092                     	;# 
  1941  0095                     	;# 
  1942  0096                     	;# 
  1943  0097                     	;# 
  1944  0099                     	;# 
  1945  009A                     	;# 
  1946  009B                     	;# 
  1947  009B                     	;# 
  1948  009C                     	;# 
  1949  009D                     	;# 
  1950  009E                     	;# 
  1951  010C                     	;# 
  1952  010D                     	;# 
  1953  010E                     	;# 
  1954  0116                     	;# 
  1955  0117                     	;# 
  1956  011D                     	;# 
  1957  018C                     	;# 
  1958  018D                     	;# 
  1959  018E                     	;# 
  1960  0191                     	;# 
  1961  0191                     	;# 
  1962  0192                     	;# 
  1963  0193                     	;# 
  1964  0193                     	;# 
  1965  0194                     	;# 
  1966  0195                     	;# 
  1967  0196                     	;# 
  1968  0197                     	;# 
  1969  0199                     	;# 
  1970  019A                     	;# 
  1971  019B                     	;# 
  1972  019B                     	;# 
  1973  019B                     	;# 
  1974  019B                     	;# 
  1975  019C                     	;# 
  1976  019C                     	;# 
  1977  019D                     	;# 
  1978  019E                     	;# 
  1979  019F                     	;# 
  1980  020D                     	;# 
  1981  0210                     	;# 
  1982  0211                     	;# 
  1983  0211                     	;# 
  1984  0212                     	;# 
  1985  0212                     	;# 
  1986  0213                     	;# 
  1987  0213                     	;# 
  1988  0214                     	;# 
  1989  0214                     	;# 
  1990  0215                     	;# 
  1991  0215                     	;# 
  1992  0215                     	;# 
  1993  0216                     	;# 
  1994  0216                     	;# 
  1995  0217                     	;# 
  1996  0217                     	;# 
  1997  0291                     	;# 
  1998  0291                     	;# 
  1999  0292                     	;# 
  2000  0293                     	;# 
  2001  0298                     	;# 
  2002  0298                     	;# 
  2003  0299                     	;# 
  2004  029A                     	;# 
  2005  0394                     	;# 
  2006  0395                     	;# 
  2007  0396                     	;# 
  2008  0FE4                     	;# 
  2009  0FE5                     	;# 
  2010  0FE6                     	;# 
  2011  0FE7                     	;# 
  2012  0FE8                     	;# 
  2013  0FE9                     	;# 
  2014  0FEA                     	;# 
  2015  0FEB                     	;# 
  2016  0FED                     	;# 
  2017  0FEE                     	;# 
  2018  0FEF                     	;# 
  2019                           
  2020                           	psect	idataBANK3
  2021  1208                     __pidataBANK3:	
  2022                           
  2023                           ;initializer for __product
  2024  1208  3463               	retlw	99
  2025  1209  3402               	retlw	2
  2026  120A  3400               	retlw	0
  2027  120B  3400               	retlw	0
  2028  120C  3400               	retlw	0
  2029  120D  3400               	retlw	0
  2030  120E  3400               	retlw	0
  2031  120F  3400               	retlw	0
  2032  1210  3400               	retlw	0
  2033  1211  3400               	retlw	0
  2034  1212  3400               	retlw	0
  2035  1213  3400               	retlw	0
  2036  1214  34FF               	retlw	255
  2037  1215  34FF               	retlw	255
  2038  1216  34FF               	retlw	255
  2039  1217  3400               	retlw	0
  2040  1218  3400               	retlw	0
  2041  1219  3400               	retlw	0
  2042  121A  3400               	retlw	0
  2043  121B  3400               	retlw	0
  2044  121C  3400               	retlw	0
  2045  121D  3400               	retlw	0
  2046  121E  3400               	retlw	0
  2047  121F  3400               	retlw	0
  2048  1220  3400               	retlw	0
  2049  1221  3400               	retlw	0
  2050  1222  3400               	retlw	0
  2051  1223  3400               	retlw	0
  2052  1224  3400               	retlw	0
  2053  1225  3400               	retlw	0
  2054  1226  3400               	retlw	0
  2055  1227  3400               	retlw	0
  2056                           
  2057                           	psect	stringtext
  2058  1000                     __pstringtext:	
  2059  1000                     _CC2500_registers_address:	
  2060  1000  3403               	retlw	3
  2061  1001  3416               	retlw	22
  2062  1002  3417               	retlw	23
  2063  1003  341E               	retlw	30
  2064  1004  341F               	retlw	31
  2065  1005  3420               	retlw	32
  2066  1006  342A               	retlw	42
  2067  1007  342B               	retlw	43
  2068  1008  340B               	retlw	11
  2069  1009  340C               	retlw	12
  2070  100A  340D               	retlw	13
  2071  100B  340E               	retlw	14
  2072  100C  340F               	retlw	15
  2073  100D  3410               	retlw	16
  2074  100E  3411               	retlw	17
  2075  100F  3412               	retlw	18
  2076  1010  3413               	retlw	19
  2077  1011  3414               	retlw	20
  2078  1012  340A               	retlw	10
  2079  1013  3415               	retlw	21
  2080  1014  3421               	retlw	33
  2081  1015  3422               	retlw	34
  2082  1016  3418               	retlw	24
  2083  1017  3419               	retlw	25
  2084  1018  341A               	retlw	26
  2085  1019  341B               	retlw	27
  2086  101A  341C               	retlw	28
  2087  101B  341D               	retlw	29
  2088  101C  3423               	retlw	35
  2089  101D  3424               	retlw	36
  2090  101E  3425               	retlw	37
  2091  101F  3426               	retlw	38
  2092  1020  3429               	retlw	41
  2093  1021  342C               	retlw	44
  2094  1022  342D               	retlw	45
  2095  1023  342E               	retlw	46
  2096  1024  3400               	retlw	0
  2097  1025  3401               	retlw	1
  2098  1026  3402               	retlw	2
  2099  1027  3407               	retlw	7
  2100  1028  3408               	retlw	8
  2101  1029  3409               	retlw	9
  2102  102A  3406               	retlw	6
  2103  102B  3404               	retlw	4
  2104  102C  3405               	retlw	5
  2105  102D  3427               	retlw	39
  2106  102E  3428               	retlw	40
  2107  102F                     __end_of_CC2500_registers_address:	
  2108  102F                     _CC2500_rfSettings:	
  2109  102F  3407               	retlw	7
  2110  1030  3407               	retlw	7
  2111  1031  3430               	retlw	48
  2112  1032  3487               	retlw	135
  2113  1033  346B               	retlw	107
  2114  1034  34F8               	retlw	248
  2115  1035  347F               	retlw	127
  2116  1036  343F               	retlw	63
  2117  1037  3409               	retlw	9
  2118  1038  3400               	retlw	0
  2119  1039  345C               	retlw	92
  2120  103A  34A7               	retlw	167
  2121  103B  3462               	retlw	98
  2122  103C  3486               	retlw	134
  2123  103D  3483               	retlw	131
  2124  103E  3403               	retlw	3
  2125  103F  3422               	retlw	34
  2126  1040  34F8               	retlw	248
  2127  1041  3400               	retlw	0
  2128  1042  3444               	retlw	68
  2129  1043  34B6               	retlw	182
  2130  1044  3410               	retlw	16
  2131  1045  3418               	retlw	24
  2132  1046  341D               	retlw	29
  2133  1047  341C               	retlw	28
  2134  1048  34C7               	retlw	199
  2135  1049  3400               	retlw	0
  2136  104A  34B2               	retlw	178
  2137  104B  34EA               	retlw	234
  2138  104C  340A               	retlw	10
  2139  104D  3400               	retlw	0
  2140  104E  3411               	retlw	17
  2141  104F  3459               	retlw	89
  2142  1050  3488               	retlw	136
  2143  1051  3431               	retlw	49
  2144  1052  340B               	retlw	11
  2145  1053  342F               	retlw	47
  2146  1054  342E               	retlw	46
  2147  1055  3406               	retlw	6
  2148  1056  3404               	retlw	4
  2149  1057  3405               	retlw	5
  2150  1058  3400               	retlw	0
  2151  1059  3430               	retlw	48
  2152  105A  34D3               	retlw	211
  2153  105B  3491               	retlw	145
  2154  105C  3441               	retlw	65
  2155  105D  3400               	retlw	0
  2156  105E                     __end_of_CC2500_rfSettings:	
  2157  105E                     _CC2500_patable_vaule:	
  2158  105E  34FE               	retlw	254
  2159  105F  34FE               	retlw	254
  2160  1060  34FE               	retlw	254
  2161  1061  34FE               	retlw	254
  2162  1062  34FE               	retlw	254
  2163  1063  34FE               	retlw	254
  2164  1064  34FE               	retlw	254
  2165  1065  34FE               	retlw	254
  2166  1066                     __end_of_CC2500_patable_vaule:	
  2167                           
  2168                           	psect	nvCOMMON
  2169  007D                     __pnvCOMMON:	
  2170  007D                     _product:	
  2171  007D                     	ds	1
  2172                           
  2173                           	psect	nvBANK1
  2174  00EC                     __pnvBANK1:	
  2175  00EC                     _Timer0:	
  2176  00EC                     	ds	1
  2177  00ED                     _WDT:	
  2178  00ED                     	ds	1
  2179  00EE                     _myMain:	
  2180  00EE                     	ds	1
  2181  00EF                     _Memory:	
  2182  00EF                     	ds	1
  2183  000C                     _PORTA	set	12
  2184  000D                     _PORTB	set	13
  2185  000E                     _PORTC	set	14
  2186  0015                     _TMR0	set	21
  2187  005F                     _GIE	set	95
  2188  005C                     _INTE	set	92
  2189  0059                     _INTF	set	89
  2190  005B                     _IOCIE	set	91
  2191  0058                     _IOCIF	set	88
  2192  005E                     _PEIE	set	94
  2193  0060                     _RA0	set	96
  2194  0063                     _RA3	set	99
  2195  0064                     _RA4	set	100
  2196  0066                     _RA6	set	102
  2197  0067                     _RA7	set	103
  2198  0068                     _RB0	set	104
  2199  0069                     _RB1	set	105
  2200  006B                     _RB3	set	107
  2201  006C                     _RB4	set	108
  2202  006D                     _RB5	set	109
  2203  0070                     _RC0	set	112
  2204  0071                     _RC1	set	113
  2205  0072                     _RC2	set	114
  2206  0074                     _RC4	set	116
  2207  0075                     _RC5	set	117
  2208  0076                     _RC6	set	118
  2209  0077                     _RC7	set	119
  2210  005D                     _TMR0IE	set	93
  2211  005A                     _TMR0IF	set	90
  2212  009D                     _ADCON0	set	157
  2213  009E                     _ADCON1	set	158
  2214  009C                     _ADRESH	set	156
  2215  009B                     _ADRESL	set	155
  2216  0095                     _OPTION_REG	set	149
  2217  0099                     _OSCCON	set	153
  2218  008C                     _TRISA	set	140
  2219  008D                     _TRISB	set	141
  2220  008E                     _TRISC	set	142
  2221  0097                     _WDTCON	set	151
  2222  04E9                     _GO_nDONE	set	1257
  2223  0117                     _FVRCON	set	279
  2224  010C                     _LATA	set	268
  2225  010D                     _LATB	set	269
  2226  010E                     _LATC	set	270
  2227  018C                     _ANSELA	set	396
  2228  018D                     _ANSELB	set	397
  2229  018E                     _ANSELC	set	398
  2230  0192                     _PMADRH	set	402
  2231  0191                     _PMADRL	set	401
  2232  0196                     _PMCON2	set	406
  2233  0194                     _PMDATH	set	404
  2234  0193                     _PMDATL	set	403
  2235  0CAE                     _CFGS	set	3246
  2236  0CAC                     _FREE	set	3244
  2237  0CAD                     _LWLO	set	3245
  2238  0CA8                     _RD	set	3240
  2239  0CA9                     _WR	set	3241
  2240  0CAA                     _WREN	set	3242
  2241  1068                     _WPUB0	set	4200
  2242  1069                     _WPUB1	set	4201
  2243  106A                     _WPUB2	set	4202
  2244  0396                     _IOCBF	set	918
  2245  0395                     _IOCBN	set	917
  2246  0394                     _IOCBP	set	916
  2247  1CB2                     _IOCBF2	set	7346
  2248                           
  2249                           ; #config settings
  2250  0000                     
  2251                           	psect	cinit
  2252  0018                     start_initialization:	
  2253  0018                     __initialization:	
  2254                           
  2255                           ; Clear objects allocated to BITCOMMON
  2256  0018  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2257                           
  2258                           ; Clear objects allocated to COMMON
  2259  0019  01F8               	clrf	__pbssCOMMON& (0+127)
  2260  001A  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2261  001B  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2262  001C  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2263                           
  2264                           ; Clear objects allocated to BANK1
  2265  001D  30A0               	movlw	low __pbssBANK1
  2266  001E  0084               	movwf	4
  2267  001F  3000               	movlw	high __pbssBANK1
  2268  0020  0085               	movwf	5
  2269  0021  304C               	movlw	76
  2270  0022  319D  25BA  3180   	fcall	clear_ram0
  2271                           
  2272                           ; Clear objects allocated to BANK2
  2273  0025  3020               	movlw	low __pbssBANK2
  2274  0026  0084               	movwf	4
  2275  0027  3001               	movlw	high __pbssBANK2
  2276  0028  0085               	movwf	5
  2277  0029  304B               	movlw	75
  2278  002A  319D  25BA  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK3
  2281  002D  30C0               	movlw	low __pbssBANK3
  2282  002E  0084               	movwf	4
  2283  002F  3001               	movlw	high __pbssBANK3
  2284  0030  0085               	movwf	5
  2285  0031  301D               	movlw	29
  2286  0032  319D  25BA  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK4
  2289  0035  3020               	movlw	low __pbssBANK4
  2290  0036  0084               	movwf	4
  2291  0037  3002               	movlw	high __pbssBANK4
  2292  0038  0085               	movwf	5
  2293  0039  3025               	movlw	37
  2294  003A  319D  25BA  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Initialize objects allocated to BANK3
  2297  003D  3008               	movlw	low __pidataBANK3
  2298  003E  0084               	movwf	4
  2299  003F  3092               	movlw	(high __pidataBANK3)| (0+128)
  2300  0040  0085               	movwf	5
  2301  0041  30A0               	movlw	low __pdataBANK3
  2302  0042  0086               	movwf	6
  2303  0043  3001               	movlw	high __pdataBANK3
  2304  0044  0087               	movwf	7
  2305  0045  3020               	movlw	32
  2306  0046  319D  25B4         	fcall	init_ram
  2307  0048                     end_of_initialization:	
  2308                           ;End of C runtime variable initialization code
  2309                           
  2310  0048                     __end_of__initialization:	
  2311  0048  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2312  0049  0020               	movlb	0
  2313  004A  3195  2DF9         	ljmp	_main	;jump to C main() function
  2314                           
  2315                           	psect	bitbssCOMMON
  2316  03E0                     __pbitbssCOMMON:	
  2317  03E0                     _Receive_OK:	
  2318  03E0                     	ds	1
  2319  03E1                     _Transceive_OK:	
  2320  03E1                     	ds	1
  2321                           
  2322                           	psect	bssCOMMON
  2323  0078                     __pbssCOMMON:	
  2324  0078                     _DimmerLights:	
  2325  0078                     	ds	1
  2326  0079                     _DimmerLightsIntr:	
  2327  0079                     	ds	1
  2328  007A                     _RF:	
  2329  007A                     	ds	1
  2330  007B                     _Sw:	
  2331  007B                     	ds	1
  2332                           
  2333                           	psect	bssBANK1
  2334  00A0                     __pbssBANK1:	
  2335  00A0                     _RF_Data:	
  2336  00A0                     	ds	21
  2337  00B5                     _RF_Count:	
  2338  00B5                     	ds	2
  2339  00B7                     _Buz:	
  2340  00B7                     	ds	1
  2341  00B8                     _CRC:	
  2342  00B8                     	ds	1
  2343  00B9                     _Dimmer:	
  2344  00B9                     	ds	1
  2345  00BA                     _DimmerLights11:	
  2346  00BA                     	ds	1
  2347  00BB                     _DimmerLights22:	
  2348  00BB                     	ds	1
  2349  00BC                     _DimmerLights33:	
  2350  00BC                     	ds	1
  2351  00BD                     _DimmerLightsIntrIOC:	
  2352  00BD                     	ds	1
  2353  00BE                     _LED:	
  2354  00BE                     	ds	1
  2355  00BF                     _RFSW:	
  2356  00BF                     	ds	1
  2357  00C0                     _RSSI:	
  2358  00C0                     	ds	1
  2359  00C1                     _Rx_Length:	
  2360  00C1                     	ds	1
  2361  00C2                     _SPI0Buffer:	
  2362  00C2                     	ds	1
  2363  00C3                     _Tx_Length:	
  2364  00C3                     	ds	1
  2365  00C4                     _r_address:	
  2366  00C4                     	ds	1
  2367  00C5                     _r_data:	
  2368  00C5                     	ds	1
  2369  00C6                     _s_data:	
  2370  00C6                     	ds	1
  2371  00C7                     _VarTimer0:	
  2372  00C7                     	ds	8
  2373  00CF                     _RF1:	
  2374  00CF                     	ds	5
  2375  00D4                     _VarErrLED:	
  2376  00D4                     	ds	4
  2377  00D8                     _VarLED1:	
  2378  00D8                     	ds	4
  2379  00DC                     _VarLED2:	
  2380  00DC                     	ds	4
  2381  00E0                     _VarLED3:	
  2382  00E0                     	ds	4
  2383  00E4                     _Dimmer1:	
  2384  00E4                     	ds	3
  2385  00E7                     __WDT:	
  2386  00E7                     	ds	2
  2387  00E9                     _RFSW1:	
  2388  00E9                     	ds	1
  2389  00EA                     _RFSW2:	
  2390  00EA                     	ds	1
  2391  00EB                     _RFSW3:	
  2392  00EB                     	ds	1
  2393                           
  2394                           	psect	bssBANK2
  2395  0120                     __pbssBANK2:	
  2396  0120                     _DimmerLights1:	
  2397  0120                     	ds	15
  2398  012F                     _DimmerLights2:	
  2399  012F                     	ds	15
  2400  013E                     _DimmerLights3:	
  2401  013E                     	ds	15
  2402  014D                     _Buz1:	
  2403  014D                     	ds	12
  2404  0159                     _Sw1:	
  2405  0159                     	ds	9
  2406  0162                     _Sw2:	
  2407  0162                     	ds	9
  2408                           
  2409                           	psect	bssBANK3
  2410  01C0                     __pbssBANK3:	
  2411  01C0                     __myMain:	
  2412  01C0                     	ds	20
  2413  01D4                     _Sw3:	
  2414  01D4                     	ds	9
  2415                           
  2416                           	psect	dataBANK3
  2417  01A0                     __pdataBANK3:	
  2418  01A0                     __product:	
  2419  01A0                     	ds	32
  2420                           
  2421                           	psect	bssBANK4
  2422  0220                     __pbssBANK4:	
  2423  0220                     _VarMemory:	
  2424  0220                     	ds	37
  2425                           
  2426                           	psect	clrtext
  2427  1DBA                     clear_ram0:	
  2428                           ;	Called with FSR0 containing the base address, and
  2429                           ;	WREG with the size to clear
  2430                           
  2431  1DBA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2432  1DBB                     clrloop0:	
  2433  1DBB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2434  1DBC  3101               	addfsr 0,1
  2435  1DBD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2436  1DBE  2DBB               	goto	clrloop0	;have we reached the end yet?
  2437  1DBF  3400               	retlw	0	;all done for this memory range, return
  2438                           
  2439                           	psect	inittext
  2440  1DB4                     init_ram:	
  2441  1DB4  00FE               	movwf	126
  2442  1DB5                     initloop:	
  2443  1DB5  0012               	moviw fsr0++
  2444  1DB6  001E               	movwi fsr1++
  2445  1DB7  0BFE               	decfsz	126,f
  2446  1DB8  2DB5               	goto	initloop
  2447  1DB9  3400               	retlw	0
  2448                           
  2449                           	psect	cstackCOMMON
  2450  0070                     __pcstackCOMMON:	
  2451  0070                     ?_CC2500_WriteByte:	
  2452  0070                     ?_CC2500_WriteCommand:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0070                     ?_CC2500_ReadStatus:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0070                     ?_CC2500_ReadByte:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_CC2500_PowerRST:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_InitSetREG:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_InitPATable:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ClearTXFIFO:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ClearRXFIFO:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_FrequencyCabr:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_SIDLEMode:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_setDimmerLights_Initialization:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_Dimmer_Initialization:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_setMemory_GO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_setDimmerLights_Main:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_setTxData:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_setLED_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_setLED_Main:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_Fosc_Set:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_IO_Set:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_TMR0_Set:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_ADC_Set:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_INT_Set:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_IOC_Set:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_WDT_Set:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_IOC_ISR:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_TMR0_ISR:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_INT_ISR:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_Flash_Memory_Write:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_Flash_Memory_Modify:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_WDT_Clearing:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_myMain_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_Switch_Initialization:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_RF_Initialization:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_my_Main:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_my_TestPointCleared:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_Switch_Main:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_RF_Main:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setSw_Enable:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setRF_Initialization:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_setRF_Main:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_RF_RxDisable:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_getRxData:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_setLog_Code:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_setControl_Lights_Table:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setRFSW_Control:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setRFSW_AdjControl:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setRF_DimmerValue:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setSw_Initialization:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setSw_Main:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_Sw_DimmerOnFunc:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_Sw_DimmerAdjFunc:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_Sw_DimmerOffFunc:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_Buzzer_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_Buzzer_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_TxData:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_RxData:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_PowerOnInitial:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_DimmerIntrIOCPointSelect:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ??_DimmerIntrIOCPointSelect:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DimmerIntrPointSelect:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ??_DimmerIntrPointSelect:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_IntrControl:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DimmerLightsPointSelect:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DimmerLights_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DimmerLights_Close:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_AdjRF:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_LedPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_LED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_LED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Mcu_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_ISR:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerReClock:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_Flash_Memory_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_Flash_Memory_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Flash_Memory_Unlock:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Flash_Memory_Erasing:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_WDT_Main:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_RfPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_RfSWPointSelect:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_TouchPower:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_SwPointSelect:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?i1_RfPointSelect:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ??i1_RfPointSelect:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_getDimmerLights_StatusFlag:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getPercentValue:	
  2711                           ; 1 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Read:	
  2714                           ; 1 bytes @ 0x0
  2715                           
  2716  0070                     ?_setPercentValue:	
  2717                           ; 1 bytes @ 0x0
  2718                           
  2719  0070                     setRF_Initialization@rf:	
  2720                           ; 1 bytes @ 0x0
  2721                           
  2722                           
  2723                           ; 1 bytes @ 0x0
  2724  0070                     	ds	1
  2725  0071                     DimmerIntrIOCPointSelect@lights:	
  2726  0071                     DimmerIntrPointSelect@lights:	
  2727                           ; 1 bytes @ 0x1
  2728                           
  2729  0071                     i1RfPointSelect@rf:	
  2730                           ; 1 bytes @ 0x1
  2731                           
  2732                           
  2733                           ; 1 bytes @ 0x1
  2734  0071                     	ds	1
  2735  0072                     ?_setRF_ReceiveGO:	
  2736  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2737                           ; 0 bytes @ 0x2
  2738                           
  2739  0072                     ??_setDimmerLights_IntrControl:	
  2740                           ; 0 bytes @ 0x2
  2741                           
  2742  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2743                           ; 0 bytes @ 0x2
  2744                           
  2745  0072                     setRF_ReceiveGO@command:	
  2746                           ; 1 bytes @ 0x2
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x2
  2750  0072                     	ds	1
  2751  0073                     ??_IOC_ISR:	
  2752  0073                     ??_setRF_ReceiveGO:	
  2753                           ; 0 bytes @ 0x3
  2754                           
  2755  0073                     ??_setDimmerReClock:	
  2756                           ; 0 bytes @ 0x3
  2757                           
  2758  0073                     setRF_ReceiveGO@rf:	
  2759                           ; 0 bytes @ 0x3
  2760                           
  2761                           
  2762                           ; 1 bytes @ 0x3
  2763  0073                     	ds	1
  2764  0074                     ??_INT_ISR:	
  2765                           
  2766                           ; 0 bytes @ 0x4
  2767  0074                     	ds	2
  2768  0076                     setDimmerLights_IntrControl@lights:	
  2769                           
  2770                           ; 1 bytes @ 0x6
  2771  0076                     	ds	1
  2772  0077                     ??_TMR0_ISR:	
  2773  0077                     ??_ISR:	
  2774                           ; 0 bytes @ 0x7
  2775                           
  2776                           
  2777                           ; 0 bytes @ 0x7
  2778  0077                     	ds	1
  2779                           
  2780                           	psect	cstackBANK0
  2781  0020                     __pcstackBANK0:	
  2782  0020                     ??_CC2500_WriteByte:	
  2783  0020                     ??_CC2500_ReadByte:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0020                     ?_DelayTime_1us:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0020                     ??_Dimmer_Initialization:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0020                     ??_getDimmerLights_StatusFlag:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0020                     ??_setMemory_GO:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0020                     ??_Fosc_Set:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0020                     ??_IO_Set:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0020                     ??_TMR0_Set:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0020                     ??_ADC_Set:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0020                     ??_INT_Set:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0020                     ??_IOC_Set:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0020                     ??_WDT_Set:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0020                     ??_Flash_Memory_Read:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_Flash_Memory_Write:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_WDT_Clearing:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ??_myMain_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_my_TestPointCleared:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_setRF_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_Buzzer_Initialization:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_Buzzer_Main:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_DimmerLightsPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_LedPointSelect:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_Flash_Memory_Unlock:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_Flash_Memory_Erasing:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_WDT_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_RfPointSelect:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_RfSWPointSelect:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_TouchPower:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_SwPointSelect:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ?___awdiv:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ?___ftpack:	
  2874                           ; 2 bytes @ 0x0
  2875                           
  2876  0020                     DelayTime_1us@count:	
  2877                           ; 3 bytes @ 0x0
  2878                           
  2879  0020                     ___awdiv@divisor:	
  2880                           ; 2 bytes @ 0x0
  2881                           
  2882  0020                     ___ftpack@arg:	
  2883                           ; 2 bytes @ 0x0
  2884                           
  2885                           
  2886                           ; 3 bytes @ 0x0
  2887  0020                     	ds	1
  2888  0021                     ??_RF_Initialization:	
  2889  0021                     ??_Mcu_Initialization:	
  2890                           ; 0 bytes @ 0x1
  2891                           
  2892  0021                     CC2500_WriteByte@loop_a:	
  2893                           ; 0 bytes @ 0x1
  2894                           
  2895  0021                     CC2500_ReadByte@loop_b:	
  2896                           ; 1 bytes @ 0x1
  2897                           
  2898  0021                     DimmerLightsPointSelect@lights:	
  2899                           ; 1 bytes @ 0x1
  2900                           
  2901  0021                     getDimmerLights_StatusFlag@Status:	
  2902                           ; 1 bytes @ 0x1
  2903                           
  2904  0021                     LedPointSelect@led:	
  2905                           ; 1 bytes @ 0x1
  2906                           
  2907  0021                     Flash_Memory_Read@i:	
  2908                           ; 1 bytes @ 0x1
  2909                           
  2910  0021                     Flash_Memory_Write@i:	
  2911                           ; 1 bytes @ 0x1
  2912                           
  2913  0021                     RfPointSelect@rf:	
  2914                           ; 1 bytes @ 0x1
  2915                           
  2916  0021                     RfSWPointSelect@sw:	
  2917                           ; 1 bytes @ 0x1
  2918                           
  2919  0021                     SwPointSelect@sw:	
  2920                           ; 1 bytes @ 0x1
  2921                           
  2922                           
  2923                           ; 1 bytes @ 0x1
  2924  0021                     	ds	1
  2925  0022                     ??_CC2500_WriteCommand:	
  2926  0022                     ??_CC2500_ReadStatus:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0022                     ??_DelayTime_1us:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0022                     ?_CC2500_WriteREG:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0022                     ??_setDimmerLights_Initialization:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0022                     ?_setLED:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0022                     ?_setSw_Status:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0022                     ?_setRFSW_Status:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0022                     ??_setTxData:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0022                     ??_setLED_Main:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0022                     ??_setSw_Enable:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0022                     ?_setRF_Enable:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0022                     ?_setDimmerLights_Switch:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0022                     ?_setDimmerLights_AdjGo:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0022                     ?_setDimmerLights_Trigger:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0022                     ?_setDimmerLights_TriggerAdj:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0022                     ?_setRF_Learn:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0022                     CC2500_WriteREG@value:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0022                     _getDimmerLights_StatusFlag$1961:	
  2978                           ; 1 bytes @ 0x2
  2979                           
  2980  0022                     setDimmerLights_Switch@command:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983  0022                     setDimmerLights_AdjGo@command:	
  2984                           ; 1 bytes @ 0x2
  2985                           
  2986  0022                     setDimmerLights_Trigger@command:	
  2987                           ; 1 bytes @ 0x2
  2988                           
  2989  0022                     setDimmerLights_TriggerAdj@command:	
  2990                           ; 1 bytes @ 0x2
  2991                           
  2992  0022                     setLED@command:	
  2993                           ; 1 bytes @ 0x2
  2994                           
  2995  0022                     Flash_Memory_Read@address:	
  2996                           ; 1 bytes @ 0x2
  2997                           
  2998  0022                     setMemory_GO@command:	
  2999                           ; 1 bytes @ 0x2
  3000                           
  3001  0022                     setRF_Learn@command:	
  3002                           ; 1 bytes @ 0x2
  3003                           
  3004  0022                     setRF_Enable@command:	
  3005                           ; 1 bytes @ 0x2
  3006                           
  3007  0022                     setRFSW_Status@command:	
  3008                           ; 1 bytes @ 0x2
  3009                           
  3010  0022                     setSw_Enable@command:	
  3011                           ; 1 bytes @ 0x2
  3012                           
  3013  0022                     setSw_Status@command:	
  3014                           ; 1 bytes @ 0x2
  3015                           
  3016  0022                     DelayTime_1us@i:	
  3017                           ; 1 bytes @ 0x2
  3018                           
  3019  0022                     ___awdiv@dividend:	
  3020                           ; 2 bytes @ 0x2
  3021                           
  3022                           
  3023                           ; 2 bytes @ 0x2
  3024  0022                     	ds	1
  3025  0023                     ??_CC2500_WriteREG:	
  3026  0023                     ??_setLED:	
  3027                           ; 0 bytes @ 0x3
  3028                           
  3029  0023                     ??_setSw_Status:	
  3030                           ; 0 bytes @ 0x3
  3031                           
  3032  0023                     ??_setRFSW_Status:	
  3033                           ; 0 bytes @ 0x3
  3034                           
  3035  0023                     ??_setRF_Enable:	
  3036                           ; 0 bytes @ 0x3
  3037                           
  3038  0023                     ??_DimmerLights_Close:	
  3039                           ; 0 bytes @ 0x3
  3040                           
  3041  0023                     ??_setDimmerLights_Switch:	
  3042                           ; 0 bytes @ 0x3
  3043                           
  3044  0023                     ??_setDimmerLights_AdjGo:	
  3045                           ; 0 bytes @ 0x3
  3046                           
  3047  0023                     ??_setDimmerLights_Trigger:	
  3048                           ; 0 bytes @ 0x3
  3049                           
  3050  0023                     ??_setDimmerLights_TriggerAdj:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0023                     ??_setRF_Learn:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0023                     CC2500_WriteCommand@command:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0023                     CC2500_ReadStatus@status_addr:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0023                     setDimmerLights_Initialization@lights:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065  0023                     setDimmerLights_Switch@lights:	
  3066                           ; 1 bytes @ 0x3
  3067                           
  3068  0023                     setDimmerLights_AdjGo@lights:	
  3069                           ; 1 bytes @ 0x3
  3070                           
  3071  0023                     setDimmerLights_Trigger@lights:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0023                     setDimmerLights_TriggerAdj@lights:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0023                     setLED@led:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080  0023                     Flash_Memory_Read@ret:	
  3081                           ; 1 bytes @ 0x3
  3082                           
  3083  0023                     setRF_Learn@rf:	
  3084                           ; 1 bytes @ 0x3
  3085                           
  3086  0023                     setTxData@rf:	
  3087                           ; 1 bytes @ 0x3
  3088                           
  3089  0023                     setRF_Enable@rf:	
  3090                           ; 1 bytes @ 0x3
  3091                           
  3092  0023                     setRFSW_Status@sw:	
  3093                           ; 1 bytes @ 0x3
  3094                           
  3095  0023                     setSw_Status@sw:	
  3096                           ; 1 bytes @ 0x3
  3097                           
  3098  0023                     ___ftpack@exp:	
  3099                           ; 1 bytes @ 0x3
  3100                           
  3101                           
  3102                           ; 1 bytes @ 0x3
  3103  0023                     	ds	1
  3104  0024                     ??_CC2500_ClearTXFIFO:	
  3105  0024                     ??_CC2500_ClearRXFIFO:	
  3106                           ; 0 bytes @ 0x4
  3107                           
  3108  0024                     ??_CC2500_SIDLEMode:	
  3109                           ; 0 bytes @ 0x4
  3110                           
  3111  0024                     ?_setDimmerLights:	
  3112                           ; 0 bytes @ 0x4
  3113                           
  3114  0024                     ??_setLED_Initialization:	
  3115                           ; 0 bytes @ 0x4
  3116                           
  3117  0024                     ??_Flash_Memory_Modify:	
  3118                           ; 0 bytes @ 0x4
  3119                           
  3120  0024                     ??_RF_RxDisable:	
  3121                           ; 0 bytes @ 0x4
  3122                           
  3123  0024                     ??_setSw_Initialization:	
  3124                           ; 0 bytes @ 0x4
  3125                           
  3126  0024                     ??_Sw_DimmerAdjFunc:	
  3127                           ; 0 bytes @ 0x4
  3128                           
  3129  0024                     ??_CC2500_TxData:	
  3130                           ; 0 bytes @ 0x4
  3131                           
  3132  0024                     ??_DimmerLights_Initialization:	
  3133                           ; 0 bytes @ 0x4
  3134                           
  3135  0024                     ??___awdiv:	
  3136                           ; 0 bytes @ 0x4
  3137                           
  3138  0024                     CC2500_WriteREG@w_addr:	
  3139                           ; 0 bytes @ 0x4
  3140                           
  3141  0024                     setDimmerLights@status:	
  3142                           ; 1 bytes @ 0x4
  3143                           
  3144  0024                     setLED_Initialization@led:	
  3145                           ; 1 bytes @ 0x4
  3146                           
  3147  0024                     setLED_Main@led:	
  3148                           ; 1 bytes @ 0x4
  3149                           
  3150  0024                     RF_RxDisable@rf:	
  3151                           ; 1 bytes @ 0x4
  3152                           
  3153  0024                     setSw_Initialization@sw:	
  3154                           ; 1 bytes @ 0x4
  3155                           
  3156  0024                     ___ftpack@sign:	
  3157                           ; 1 bytes @ 0x4
  3158                           
  3159  0024                     DelayTime_1us@j:	
  3160                           ; 1 bytes @ 0x4
  3161                           
  3162                           
  3163                           ; 2 bytes @ 0x4
  3164  0024                     	ds	1
  3165  0025                     ??_CC2500_InitSetREG:	
  3166  0025                     ??_CC2500_InitPATable:	
  3167                           ; 0 bytes @ 0x5
  3168                           
  3169  0025                     ??_setDimmerLights:	
  3170                           ; 0 bytes @ 0x5
  3171                           
  3172  0025                     ??_Switch_Initialization:	
  3173                           ; 0 bytes @ 0x5
  3174                           
  3175  0025                     ??___ftpack:	
  3176                           ; 0 bytes @ 0x5
  3177                           
  3178  0025                     ??_LED_Initialization:	
  3179                           ; 0 bytes @ 0x5
  3180                           
  3181  0025                     ??_LED_Main:	
  3182                           ; 0 bytes @ 0x5
  3183                           
  3184  0025                     CC2500_TxData@loop_e:	
  3185                           ; 0 bytes @ 0x5
  3186                           
  3187  0025                     _Sw_DimmerAdjFunc$5043:	
  3188                           ; 1 bytes @ 0x5
  3189                           
  3190  0025                     ___awdiv@counter:	
  3191                           ; 1 bytes @ 0x5
  3192                           
  3193                           
  3194                           ; 1 bytes @ 0x5
  3195  0025                     	ds	1
  3196  0026                     ??_CC2500_PowerRST:	
  3197  0026                     ??_CC2500_FrequencyCabr:	
  3198                           ; 0 bytes @ 0x6
  3199                           
  3200  0026                     CC2500_InitSetREG@temp1:	
  3201                           ; 0 bytes @ 0x6
  3202                           
  3203  0026                     CC2500_InitPATable@temp:	
  3204                           ; 1 bytes @ 0x6
  3205                           
  3206  0026                     setDimmerLights@lights:	
  3207                           ; 1 bytes @ 0x6
  3208                           
  3209  0026                     Flash_Memory_Modify@i:	
  3210                           ; 1 bytes @ 0x6
  3211                           
  3212  0026                     _Sw_DimmerAdjFunc$5044:	
  3213                           ; 1 bytes @ 0x6
  3214                           
  3215  0026                     ___awdiv@sign:	
  3216                           ; 1 bytes @ 0x6
  3217                           
  3218                           
  3219                           ; 1 bytes @ 0x6
  3220  0026                     	ds	1
  3221  0027                     ??_Flash_Memory_Main:	
  3222  0027                     CC2500_InitSetREG@temp2:	
  3223                           ; 0 bytes @ 0x7
  3224                           
  3225  0027                     CC2500_InitPATable@loop_d:	
  3226                           ; 1 bytes @ 0x7
  3227                           
  3228  0027                     _Sw_DimmerAdjFunc$5045:	
  3229                           ; 1 bytes @ 0x7
  3230                           
  3231  0027                     ___awdiv@quotient:	
  3232                           ; 1 bytes @ 0x7
  3233                           
  3234                           
  3235                           ; 2 bytes @ 0x7
  3236  0027                     	ds	1
  3237  0028                     ?___awtoft:	
  3238  0028                     CC2500_InitSetREG@loop_c:	
  3239                           ; 3 bytes @ 0x8
  3240                           
  3241  0028                     Sw_DimmerAdjFunc@Idle:	
  3242                           ; 1 bytes @ 0x8
  3243                           
  3244  0028                     ___awtoft@c:	
  3245                           ; 1 bytes @ 0x8
  3246                           
  3247                           
  3248                           ; 2 bytes @ 0x8
  3249  0028                     	ds	1
  3250  0029                     ?_setBuz:	
  3251  0029                     ??_CC2500_PowerOnInitial:	
  3252                           ; 0 bytes @ 0x9
  3253                           
  3254  0029                     Sw_DimmerAdjFunc@sw:	
  3255                           ; 0 bytes @ 0x9
  3256                           
  3257  0029                     setBuz@time:	
  3258                           ; 1 bytes @ 0x9
  3259                           
  3260                           
  3261                           ; 2 bytes @ 0x9
  3262  0029                     	ds	2
  3263  002B                     ??_setBuz:	
  3264  002B                     ??___awtoft:	
  3265                           ; 0 bytes @ 0xB
  3266                           
  3267                           
  3268                           ; 0 bytes @ 0xB
  3269  002B                     	ds	1
  3270  002C                     setBuz@count:	
  3271                           
  3272                           ; 1 bytes @ 0xC
  3273  002C                     	ds	1
  3274  002D                     ??_my_Main:	
  3275  002D                     ??_setLog_Code:	
  3276                           ; 0 bytes @ 0xD
  3277                           
  3278  002D                     ??_CC2500_RxData:	
  3279                           ; 0 bytes @ 0xD
  3280                           
  3281  002D                     ___awtoft@sign:	
  3282                           ; 0 bytes @ 0xD
  3283                           
  3284                           
  3285                           ; 1 bytes @ 0xD
  3286  002D                     	ds	1
  3287  002E                     ?___ftdiv:	
  3288  002E                     ?___ftmul:	
  3289                           ; 3 bytes @ 0xE
  3290                           
  3291  002E                     setLog_Code@rf:	
  3292                           ; 3 bytes @ 0xE
  3293                           
  3294  002E                     ___ftdiv@f2:	
  3295                           ; 1 bytes @ 0xE
  3296                           
  3297  002E                     ___ftmul@f1:	
  3298                           ; 3 bytes @ 0xE
  3299                           
  3300                           
  3301                           ; 3 bytes @ 0xE
  3302  002E                     	ds	1
  3303  002F                     CC2500_RxData@loop_f:	
  3304                           
  3305                           ; 1 bytes @ 0xF
  3306  002F                     	ds	2
  3307  0031                     ___ftdiv@f1:	
  3308  0031                     ___ftmul@f2:	
  3309                           ; 3 bytes @ 0x11
  3310                           
  3311                           
  3312                           ; 3 bytes @ 0x11
  3313  0031                     	ds	3
  3314  0034                     ??___ftdiv:	
  3315  0034                     ??___ftmul:	
  3316                           ; 0 bytes @ 0x14
  3317                           
  3318                           
  3319                           ; 0 bytes @ 0x14
  3320  0034                     	ds	4
  3321  0038                     ___ftdiv@cntr:	
  3322  0038                     ___ftmul@exp:	
  3323                           ; 1 bytes @ 0x18
  3324                           
  3325                           
  3326                           ; 1 bytes @ 0x18
  3327  0038                     	ds	1
  3328  0039                     ___ftdiv@f3:	
  3329  0039                     ___ftmul@f3_as_product:	
  3330                           ; 3 bytes @ 0x19
  3331                           
  3332                           
  3333                           ; 3 bytes @ 0x19
  3334  0039                     	ds	3
  3335  003C                     ___ftdiv@exp:	
  3336  003C                     ___ftmul@cntr:	
  3337                           ; 1 bytes @ 0x1C
  3338                           
  3339                           
  3340                           ; 1 bytes @ 0x1C
  3341  003C                     	ds	1
  3342  003D                     ___ftdiv@sign:	
  3343  003D                     ___ftmul@sign:	
  3344                           ; 1 bytes @ 0x1D
  3345                           
  3346                           
  3347                           ; 1 bytes @ 0x1D
  3348  003D                     	ds	1
  3349  003E                     ?___ftadd:	
  3350  003E                     ___ftadd@f1:	
  3351                           ; 3 bytes @ 0x1E
  3352                           
  3353                           
  3354                           ; 3 bytes @ 0x1E
  3355  003E                     	ds	3
  3356  0041                     ___ftadd@f2:	
  3357                           
  3358                           ; 3 bytes @ 0x21
  3359  0041                     	ds	3
  3360  0044                     ??___ftadd:	
  3361                           
  3362                           ; 0 bytes @ 0x24
  3363  0044                     	ds	4
  3364  0048                     ___ftadd@sign:	
  3365                           
  3366                           ; 1 bytes @ 0x28
  3367  0048                     	ds	1
  3368  0049                     ___ftadd@exp2:	
  3369                           
  3370                           ; 1 bytes @ 0x29
  3371  0049                     	ds	1
  3372  004A                     ___ftadd@exp1:	
  3373                           
  3374                           ; 1 bytes @ 0x2A
  3375  004A                     	ds	1
  3376  004B                     ?___fttol:	
  3377  004B                     ___fttol@f1:	
  3378                           ; 4 bytes @ 0x2B
  3379                           
  3380                           
  3381                           ; 3 bytes @ 0x2B
  3382  004B                     	ds	4
  3383  004F                     ??___fttol:	
  3384                           
  3385                           ; 0 bytes @ 0x2F
  3386  004F                     	ds	4
  3387  0053                     ___fttol@sign1:	
  3388                           
  3389                           ; 1 bytes @ 0x33
  3390  0053                     	ds	1
  3391  0054                     ___fttol@lval:	
  3392                           
  3393                           ; 4 bytes @ 0x34
  3394  0054                     	ds	4
  3395  0058                     ___fttol@exp1:	
  3396                           
  3397                           ; 1 bytes @ 0x38
  3398  0058                     	ds	1
  3399  0059                     ??_getPercentValue:	
  3400  0059                     ??_setPercentValue:	
  3401                           ; 0 bytes @ 0x39
  3402                           
  3403  0059                     setPercentValue@value:	
  3404                           ; 0 bytes @ 0x39
  3405                           
  3406                           
  3407                           ; 1 bytes @ 0x39
  3408  0059                     	ds	1
  3409  005A                     setPercentValue@i:	
  3410                           
  3411                           ; 3 bytes @ 0x3A
  3412  005A                     	ds	1
  3413  005B                     getPercentValue@value:	
  3414                           
  3415                           ; 1 bytes @ 0x3B
  3416  005B                     	ds	1
  3417  005C                     getPercentValue@i:	
  3418                           
  3419                           ; 3 bytes @ 0x3C
  3420  005C                     	ds	1
  3421  005D                     ?_setRF_DimmerLights:	
  3422  005D                     ??_Flash_Memory_Initialization:	
  3423                           ; 0 bytes @ 0x3D
  3424                           
  3425  005D                     setRF_DimmerLights@on:	
  3426                           ; 0 bytes @ 0x3D
  3427                           
  3428                           
  3429                           ; 1 bytes @ 0x3D
  3430  005D                     	ds	1
  3431  005E                     ??_setRF_DimmerLights:	
  3432  005E                     Flash_Memory_Initialization@i:	
  3433                           ; 0 bytes @ 0x3E
  3434                           
  3435                           
  3436                           ; 1 bytes @ 0x3E
  3437  005E                     	ds	1
  3438  005F                     ??_setDimmerLights_AdjRF:	
  3439                           
  3440                           ; 0 bytes @ 0x3F
  3441  005F                     	ds	1
  3442  0060                     setDimmerLights_AdjRF@lights:	
  3443  0060                     setRF_DimmerLights@status:	
  3444                           ; 1 bytes @ 0x40
  3445                           
  3446                           
  3447                           ; 1 bytes @ 0x40
  3448  0060                     	ds	1
  3449  0061                     ??_setRF_DimmerValue:	
  3450  0061                     setRF_DimmerLights@lights:	
  3451                           ; 0 bytes @ 0x41
  3452                           
  3453                           
  3454                           ; 1 bytes @ 0x41
  3455  0061                     	ds	1
  3456  0062                     ?_setDimmerLights_Adj:	
  3457  0062                     ??_setRFSW_Control:	
  3458                           ; 0 bytes @ 0x42
  3459                           
  3460  0062                     ??_Sw_DimmerOnFunc:	
  3461                           ; 0 bytes @ 0x42
  3462                           
  3463  0062                     ??_Sw_DimmerOffFunc:	
  3464                           ; 0 bytes @ 0x42
  3465                           
  3466  0062                     setDimmerLights_Adj@status:	
  3467                           ; 0 bytes @ 0x42
  3468                           
  3469  0062                     setRFSW_Control@sw:	
  3470                           ; 1 bytes @ 0x42
  3471                           
  3472                           
  3473                           ; 1 bytes @ 0x42
  3474  0062                     	ds	1
  3475  0063                     ??_setDimmerLights_Adj:	
  3476  0063                     setRF_DimmerValue@lights:	
  3477                           ; 0 bytes @ 0x43
  3478                           
  3479  0063                     _Sw_DimmerOnFunc$5033:	
  3480                           ; 1 bytes @ 0x43
  3481                           
  3482                           
  3483                           ; 1 bytes @ 0x43
  3484  0063                     	ds	1
  3485  0064                     ??_setRFSW_AdjControl:	
  3486  0064                     setDimmerLights_Adj@lights:	
  3487                           ; 0 bytes @ 0x44
  3488                           
  3489  0064                     _Sw_DimmerOnFunc$5034:	
  3490                           ; 1 bytes @ 0x44
  3491                           
  3492  0064                     Sw_DimmerOffFunc@sw:	
  3493                           ; 1 bytes @ 0x44
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0x44
  3497  0064                     	ds	1
  3498  0065                     ??_setDimmerLights_Main:	
  3499  0065                     _Sw_DimmerOnFunc$5035:	
  3500                           ; 0 bytes @ 0x45
  3501                           
  3502                           
  3503                           ; 1 bytes @ 0x45
  3504  0065                     	ds	1
  3505  0066                     _setDimmerLights_Main$1956:	
  3506  0066                     setRFSW_AdjControl@sw:	
  3507                           ; 1 bytes @ 0x46
  3508                           
  3509  0066                     Sw_DimmerOnFunc@Idle:	
  3510                           ; 1 bytes @ 0x46
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0x46
  3514  0066                     	ds	1
  3515  0067                     ??_setControl_Lights_Table:	
  3516  0067                     _setDimmerLights_Main$1957:	
  3517                           ; 0 bytes @ 0x47
  3518                           
  3519  0067                     setControl_Lights_Table@rf:	
  3520                           ; 1 bytes @ 0x47
  3521                           
  3522  0067                     Sw_DimmerOnFunc@sw:	
  3523                           ; 1 bytes @ 0x47
  3524                           
  3525                           
  3526                           ; 1 bytes @ 0x47
  3527  0067                     	ds	1
  3528  0068                     ??_getRxData:	
  3529  0068                     ??_setSw_Main:	
  3530                           ; 0 bytes @ 0x48
  3531                           
  3532  0068                     _setDimmerLights_Main$1958:	
  3533                           ; 0 bytes @ 0x48
  3534                           
  3535  0068                     getRxData@rf:	
  3536                           ; 1 bytes @ 0x48
  3537                           
  3538                           
  3539                           ; 1 bytes @ 0x48
  3540  0068                     	ds	1
  3541  0069                     ??_setRF_Main:	
  3542  0069                     setDimmerLights_Main@clear:	
  3543                           ; 0 bytes @ 0x49
  3544                           
  3545                           
  3546                           ; 1 bytes @ 0x49
  3547  0069                     	ds	1
  3548  006A                     setDimmerLights_Main@lights:	
  3549  006A                     setRF_Main@rf:	
  3550                           ; 1 bytes @ 0x4A
  3551                           
  3552  006A                     setSw_Main@sw:	
  3553                           ; 1 bytes @ 0x4A
  3554                           
  3555                           
  3556                           ; 1 bytes @ 0x4A
  3557  006A                     	ds	1
  3558  006B                     ??_Switch_Main:	
  3559  006B                     ??_DimmerLights_Main:	
  3560                           ; 0 bytes @ 0x4B
  3561                           
  3562  006B                     _setRF_Main$4228:	
  3563                           ; 0 bytes @ 0x4B
  3564                           
  3565                           
  3566                           ; 1 bytes @ 0x4B
  3567  006B                     	ds	1
  3568  006C                     ??_RF_Main:	
  3569  006C                     ?_main:	
  3570                           ; 0 bytes @ 0x4C
  3571                           
  3572  006C                     main@argc:	
  3573                           ; 2 bytes @ 0x4C
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x4C
  3577  006C                     	ds	2
  3578  006E                     main@argv:	
  3579                           
  3580                           ; 2 bytes @ 0x4E
  3581  006E                     	ds	2
  3582  0070                     ??_main:	
  3583                           
  3584                           	psect	maintext
  3585  15F9                     __pmaintext:	
  3586                           ; 0 bytes @ 0x50
  3587 ;;
  3588 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3589 ;;
  3590 ;; *************** function _main *****************
  3591 ;; Defined at:
  3592 ;;		line 7 in file "../src/Main_B1.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  argc            2   76[BANK0 ] int 
  3595 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  2   76[BANK0 ] int 
  3600 ;; Registers used:
  3601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 17F/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3607 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3610 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3611 ;;Total ram usage:        4 bytes
  3612 ;; Hardware stack levels required when called:   15
  3613 ;; This function calls:
  3614 ;;		_Buzzer_Initialization
  3615 ;;		_Buzzer_Main
  3616 ;;		_CC2500_PowerOnInitial
  3617 ;;		_DimmerLights_Initialization
  3618 ;;		_DimmerLights_Main
  3619 ;;		_Flash_Memory_Initialization
  3620 ;;		_Flash_Memory_Main
  3621 ;;		_LED_Initialization
  3622 ;;		_LED_Main
  3623 ;;		_Mcu_Initialization
  3624 ;;		_RF_Initialization
  3625 ;;		_RF_Main
  3626 ;;		_Switch_Initialization
  3627 ;;		_Switch_Main
  3628 ;;		_WDT_Main
  3629 ;;		_myMain_Initialization
  3630 ;;		_my_Main
  3631 ;;		_my_TestPointCleared
  3632 ;; This function is called by:
  3633 ;;		Startup code after reset
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function _main
  3639  15F9                     _main:	
  3640                           
  3641                           ;Main_B1.c: 9: myMain_Initialization();
  3642                           
  3643                           ;incstack = 0
  3644                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3645  15F9  319F  275B  3195   	fcall	_myMain_Initialization
  3646                           
  3647                           ;Main_B1.c: 10: Mcu_Initialization();
  3648  15FC  3190  20C2  3195   	fcall	_Mcu_Initialization
  3649                           
  3650                           ;Main_B1.c: 11: Flash_Memory_Initialization();
  3651  15FF  3183  237C  3195   	fcall	_Flash_Memory_Initialization
  3652                           
  3653                           ;Main_B1.c: 12: LED_Initialization();
  3654  1602  319E  268F  3195   	fcall	_LED_Initialization
  3655                           
  3656                           ;Main_B1.c: 13: Buzzer_Initialization();
  3657  1605  319D  25EA  3195   	fcall	_Buzzer_Initialization
  3658                           
  3659                           ;Main_B1.c: 15: ;;
  3660                           ;Main_B1.c: 16: ;;
  3661                           ;Main_B1.c: 17: ;;
  3662                           ;Main_B1.c: 18: ;;
  3663                           ;Main_B1.c: 19: ;;
  3664                           ;Main_B1.c: 21: DimmerLights_Initialization();
  3665  1608  3192  2228  3195   	fcall	_DimmerLights_Initialization
  3666                           
  3667                           ;Main_B1.c: 22: ;;
  3668                           ;Main_B1.c: 23: ;;
  3669                           ;Main_B1.c: 24: ;;
  3670                           ;Main_B1.c: 25: Switch_Initialization();
  3671  160B  319F  2711  3195   	fcall	_Switch_Initialization
  3672                           
  3673                           ;Main_B1.c: 26: RF_Initialization();
  3674  160E  319D  25A1  3195   	fcall	_RF_Initialization
  3675                           
  3676                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  3677  1611  319F  276F  3195   	fcall	_CC2500_PowerOnInitial
  3678  1614                     l7380:	
  3679                           ;Main_B1.c: 35: ;;
  3680                           ;Main_B1.c: 39: ;;
  3681                           ;Main_B1.c: 43: ;;
  3682                           ;Main_B1.c: 47: ;;
  3683                           
  3684                           ;Main_B1.c: 28: ;;
  3685                           ;Main_B1.c: 31: while (1) {
  3686                           
  3687                           
  3688                           ;Main_B1.c: 58: }
  3689                           ;Main_B1.c: 61: if (myMain->T0_Timerout) {
  3690  1614  0021               	movlb	1	; select bank1
  3691  1615  086E               	movf	_myMain^(0+128),w
  3692  1616  0086               	movwf	6
  3693  1617  3001               	movlw	1	; select bank2/3
  3694  1618  0087               	movwf	7
  3695  1619  1C81               	btfss	1,1
  3696  161A  2E14               	goto	l7380
  3697                           
  3698                           ;Main_B1.c: 62: myMain->T0_Timerout = 0;
  3699  161B  086E               	movf	_myMain^(0+128),w
  3700  161C  0086               	movwf	6
  3701  161D  3001               	movlw	1	; select bank2/3
  3702  161E  0087               	movwf	7
  3703  161F  1081               	bcf	1,1
  3704                           
  3705                           ;Main_B1.c: 63: my_Main();
  3706  1620  318A  222B  3195   	fcall	_my_Main
  3707                           
  3708                           ;Main_B1.c: 64: my_TestPointCleared();
  3709  1623  319F  2722  3195   	fcall	_my_TestPointCleared
  3710                           
  3711                           ;Main_B1.c: 65: WDT_Main();
  3712  1626  3190  20F8  3195   	fcall	_WDT_Main
  3713                           
  3714                           ;Main_B1.c: 66: ;;
  3715                           ;Main_B1.c: 67: ;;
  3716                           ;Main_B1.c: 68: if (myMain->PowerON) {
  3717  1629  0021               	movlb	1	; select bank1
  3718  162A  086E               	movf	_myMain^(0+128),w
  3719  162B  0086               	movwf	6
  3720  162C  3001               	movlw	1	; select bank2/3
  3721  162D  0087               	movwf	7
  3722  162E  1C01               	btfss	1,0
  3723  162F  2E14               	goto	l7380
  3724                           
  3725                           ;Main_B1.c: 69: Flash_Memory_Main();
  3726  1630  3194  24E0  3195   	fcall	_Flash_Memory_Main
  3727                           
  3728                           ;Main_B1.c: 71: LED_Main();
  3729  1633  319E  269F  3195   	fcall	_LED_Main
  3730                           
  3731                           ;Main_B1.c: 72: Buzzer_Main();
  3732  1636  3186  263E  3195   	fcall	_Buzzer_Main
  3733                           
  3734                           ;Main_B1.c: 74: ;;
  3735                           ;Main_B1.c: 75: ;;
  3736                           ;Main_B1.c: 76: ;;
  3737                           ;Main_B1.c: 77: ;;
  3738                           ;Main_B1.c: 79: ;;
  3739                           ;Main_B1.c: 80: DimmerLights_Main();
  3740  1639  319E  2652  3195   	fcall	_DimmerLights_Main
  3741                           
  3742                           ;Main_B1.c: 81: Switch_Main();
  3743  163C  319E  260E  3195   	fcall	_Switch_Main
  3744                           
  3745                           ;Main_B1.c: 82: ;;
  3746                           ;Main_B1.c: 83: ;;
  3747                           ;Main_B1.c: 85: RF_Main();
  3748  163F  319D  25A5  3195   	fcall	_RF_Main
  3749                           
  3750                           ;Main_B1.c: 86: ;;
  3751                           ;Main_B1.c: 87: ;;
  3752  1642  2E14               	goto	l7380
  3753  1643                     __end_of_main:	
  3754                           
  3755                           	psect	text1
  3756  1F22                     __ptext1:	
  3757 ;; *************** function _my_TestPointCleared *****************
  3758 ;; Defined at:
  3759 ;;		line 204 in file "../src/Main_B1.c"
  3760 ;; Parameters:    Size  Location     Type
  3761 ;;		None
  3762 ;; Auto vars:     Size  Location     Type
  3763 ;;		None
  3764 ;; Return value:  Size  Location     Type
  3765 ;;		None               void
  3766 ;; Registers used:
  3767 ;;		wreg, fsr1l, fsr1h
  3768 ;; Tracked objects:
  3769 ;;		On entry : 0/0
  3770 ;;		On exit  : 0/0
  3771 ;;		Unchanged: 0/0
  3772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3777 ;;Total ram usage:        0 bytes
  3778 ;; Hardware stack levels used:    1
  3779 ;; Hardware stack levels required when called:    5
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_main
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _my_TestPointCleared
  3789  1F22                     _my_TestPointCleared:	
  3790                           
  3791                           ;Main_B1.c: 205: myMain->pcount1 = 0;
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _my_TestPointCleared: [wregfsr1]
  3795  1F22  0021               	movlb	1	; select bank1
  3796  1F23  086E               	movf	_myMain^(0+128),w
  3797  1F24  3E10               	addlw	16
  3798  1F25  0086               	movwf	6
  3799  1F26  3001               	movlw	1	; select bank2/3
  3800  1F27  0087               	movwf	7
  3801  1F28  3000               	movlw	0
  3802  1F29  3FC0               	movwi [0]fsr1
  3803  1F2A  3FC1               	movwi [1]fsr1
  3804                           
  3805                           ;Main_B1.c: 206: myMain->pcount2 = 0;
  3806  1F2B  086E               	movf	_myMain^(0+128),w
  3807  1F2C  3E12               	addlw	18
  3808  1F2D  0086               	movwf	6
  3809  1F2E  3001               	movlw	1	; select bank2/3
  3810  1F2F  0087               	movwf	7
  3811  1F30  3000               	movlw	0
  3812  1F31  3FC0               	movwi [0]fsr1
  3813  1F32  3FC1               	movwi [1]fsr1
  3814  1F33  0008               	return
  3815  1F34                     __end_of_my_TestPointCleared:	
  3816                           
  3817                           	psect	text2
  3818  0A2B                     __ptext2:	
  3819 ;; *************** function _my_Main *****************
  3820 ;; Defined at:
  3821 ;;		line 124 in file "../src/Main_B1.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;Total ram usage:        0 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    7
  3842 ;; This function calls:
  3843 ;;		_setBuz
  3844 ;;		_setRF_Enable
  3845 ;;		_setSw_Enable
  3846 ;; This function is called by:
  3847 ;;		_main
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           
  3852                           ;psect for function _my_Main
  3853  0A2B                     _my_Main:	
  3854                           
  3855                           ;Main_B1.c: 126: if (myMain->PowerON == 0) {
  3856                           
  3857                           ;incstack = 0
  3858                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3859  0A2B  0021               	movlb	1	; select bank1
  3860  0A2C  086E               	movf	_myMain^(0+128),w
  3861  0A2D  0086               	movwf	6
  3862  0A2E  3001               	movlw	1	; select bank2/3
  3863  0A2F  0087               	movwf	7
  3864  0A30  1801               	btfsc	1,0
  3865  0A31  2A6D               	goto	l7266
  3866                           
  3867                           ;Main_B1.c: 127: myMain->PowerCount++;
  3868  0A32  0A6E               	incf	_myMain^(0+128),w
  3869  0A33  0086               	movwf	6
  3870  0A34  3001               	movlw	1	; select bank2/3
  3871  0A35  0087               	movwf	7
  3872  0A36  3001               	movlw	1
  3873  0A37  0781               	addwf	1,f
  3874  0A38  3141               	addfsr 1,1
  3875  0A39  1803               	skipnc
  3876  0A3A  0A81               	incf	1,f
  3877                           
  3878                           ;Main_B1.c: 128: if (myMain->PowerCount == 150)
  3879  0A3B  0A6E               	incf	_myMain^(0+128),w
  3880  0A3C  0086               	movwf	6
  3881  0A3D  3001               	movlw	1	; select bank2/3
  3882  0A3E  0087               	movwf	7
  3883  0A3F  3F40               	moviw [0]fsr1
  3884  0A40  3A96               	xorlw	150
  3885  0A41  1D03               	skipz
  3886  0A42  2A45               	goto	u6905
  3887  0A43  3F41               	moviw [1]fsr1
  3888  0A44  3A00               	xorlw	0
  3889  0A45                     u6905:	
  3890  0A45  1D03               	skipz
  3891  0A46  0008               	return
  3892                           
  3893                           ;Main_B1.c: 129: {
  3894                           ;Main_B1.c: 130: myMain->PowerCount = 0;
  3895  0A47  0A6E               	incf	_myMain^(0+128),w
  3896  0A48  0086               	movwf	6
  3897  0A49  3001               	movlw	1	; select bank2/3
  3898  0A4A  0087               	movwf	7
  3899  0A4B  3000               	movlw	0
  3900  0A4C  3FC0               	movwi [0]fsr1
  3901  0A4D  3FC1               	movwi [1]fsr1
  3902                           
  3903                           ;Main_B1.c: 131: myMain->PowerON = 1;
  3904  0A4E  086E               	movf	_myMain^(0+128),w
  3905  0A4F  0086               	movwf	6
  3906  0A50  3001               	movlw	1	; select bank2/3
  3907  0A51  0087               	movwf	7
  3908  0A52  1401               	bsf	1,0
  3909                           
  3910                           ;Main_B1.c: 134: ;;
  3911                           ;Main_B1.c: 138: ;;
  3912                           ;Main_B1.c: 144: setBuz(3, 50);
  3913  0A53  3032               	movlw	50
  3914  0A54  0020               	movlb	0	; select bank0
  3915  0A55  00A9               	movwf	setBuz@time
  3916  0A56  3000               	movlw	0
  3917  0A57  00AA               	movwf	setBuz@time+1
  3918  0A58  3003               	movlw	3
  3919  0A59  318C  24B7  318A   	fcall	_setBuz
  3920                           
  3921                           ;Main_B1.c: 145: myMain->SelfTest = 1;
  3922  0A5C  0021               	movlb	1	; select bank1
  3923  0A5D  086E               	movf	_myMain^(0+128),w
  3924  0A5E  0086               	movwf	6
  3925  0A5F  3001               	movlw	1	; select bank2/3
  3926  0A60  0087               	movwf	7
  3927  0A61  1701               	bsf	1,6
  3928                           
  3929                           ;Main_B1.c: 147: setSw_Enable(1);
  3930  0A62  3001               	movlw	1
  3931  0A63  3192  22DA  318A   	fcall	_setSw_Enable
  3932                           
  3933                           ;Main_B1.c: 150: setRF_Enable(1, 1);
  3934  0A66  0020               	movlb	0	; select bank0
  3935  0A67  01A2               	clrf	setRF_Enable@command
  3936  0A68  0AA2               	incf	setRF_Enable@command,f
  3937  0A69  3001               	movlw	1
  3938  0A6A  3192  22B3         	fcall	_setRF_Enable
  3939                           
  3940                           ;Main_B1.c: 154: }
  3941                           ;Main_B1.c: 155: } else {
  3942  0A6C  0008               	return
  3943  0A6D                     l7266:	
  3944                           
  3945                           ;Main_B1.c: 163: myMain->Count1++;
  3946  0A6D  0021               	movlb	1	; select bank1
  3947  0A6E  086E               	movf	_myMain^(0+128),w
  3948  0A6F  3E05               	addlw	5
  3949  0A70  0086               	movwf	6
  3950  0A71  3001               	movlw	1	; select bank2/3
  3951  0A72  0087               	movwf	7
  3952  0A73  3001               	movlw	1
  3953  0A74  0781               	addwf	1,f
  3954  0A75  3141               	addfsr 1,1
  3955  0A76  1803               	skipnc
  3956  0A77  0A81               	incf	1,f
  3957                           
  3958                           ;Main_B1.c: 164: if (myMain->Count1 == 100)
  3959  0A78  086E               	movf	_myMain^(0+128),w
  3960  0A79  3E05               	addlw	5
  3961  0A7A  0086               	movwf	6
  3962  0A7B  3001               	movlw	1	; select bank2/3
  3963  0A7C  0087               	movwf	7
  3964  0A7D  3F40               	moviw [0]fsr1
  3965  0A7E  3A64               	xorlw	100
  3966  0A7F  1D03               	skipz
  3967  0A80  2A83               	goto	u6915
  3968  0A81  3F41               	moviw [1]fsr1
  3969  0A82  3A00               	xorlw	0
  3970  0A83                     u6915:	
  3971  0A83  1D03               	skipz
  3972  0A84  0008               	return
  3973                           
  3974                           ;Main_B1.c: 165: {
  3975                           ;Main_B1.c: 166: myMain->Count1 = 0;
  3976  0A85  086E               	movf	_myMain^(0+128),w
  3977  0A86  3E05               	addlw	5
  3978  0A87  0086               	movwf	6
  3979  0A88  3001               	movlw	1	; select bank2/3
  3980  0A89  0087               	movwf	7
  3981  0A8A  3000               	movlw	0
  3982  0A8B  3FC0               	movwi [0]fsr1
  3983  0A8C  3FC1               	movwi [1]fsr1
  3984                           
  3985                           ;Main_B1.c: 179: if (myMain->Flag) {
  3986  0A8D  086E               	movf	_myMain^(0+128),w
  3987  0A8E  0086               	movwf	6
  3988  0A8F  3001               	movlw	1	; select bank2/3
  3989  0A90  0087               	movwf	7
  3990  0A91  1D81               	btfss	1,3
  3991  0A92  2A99               	goto	l7274
  3992                           
  3993                           ;Main_B1.c: 180: myMain->Flag = 0;
  3994  0A93  086E               	movf	_myMain^(0+128),w
  3995  0A94  0086               	movwf	6
  3996  0A95  3001               	movlw	1	; select bank2/3
  3997  0A96  0087               	movwf	7
  3998  0A97  1181               	bcf	1,3
  3999                           
  4000                           ;Main_B1.c: 189: } else {
  4001  0A98  0008               	return
  4002  0A99                     l7274:	
  4003                           
  4004                           ;Main_B1.c: 190: myMain->Flag = 1;
  4005  0A99  086E               	movf	_myMain^(0+128),w
  4006  0A9A  0086               	movwf	6
  4007  0A9B  3001               	movlw	1	; select bank2/3
  4008  0A9C  0087               	movwf	7
  4009  0A9D  1581               	bsf	1,3
  4010  0A9E  0008               	return
  4011  0A9F                     __end_of_my_Main:	
  4012                           
  4013                           	psect	text3
  4014  12DA                     __ptext3:	
  4015 ;; *************** function _setSw_Enable *****************
  4016 ;; Defined at:
  4017 ;;		line 85 in file "../src/Switch_B1.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  command         1    wreg     unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  command         1    2[BANK0 ] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;		None               void
  4024 ;; Registers used:
  4025 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4035 ;;Total ram usage:        1 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    6
  4038 ;; This function calls:
  4039 ;;		_SwPointSelect
  4040 ;; This function is called by:
  4041 ;;		_my_Main
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           
  4046                           ;psect for function _setSw_Enable
  4047  12DA                     _setSw_Enable:	
  4048                           
  4049                           ;incstack = 0
  4050                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4051                           ;setSw_Enable@command stored from wreg
  4052  12DA  0020               	movlb	0	; select bank0
  4053  12DB  00A2               	movwf	setSw_Enable@command
  4054                           
  4055                           ;Switch_B1.c: 88: SwPointSelect(1);
  4056  12DC  3001               	movlw	1
  4057  12DD  3191  214E  3192   	fcall	_SwPointSelect
  4058                           
  4059                           ;Switch_B1.c: 89: Sw->Enable = command;
  4060  12E0  087B               	movf	_Sw,w
  4061  12E1  0086               	movwf	6
  4062  12E2  3001               	movlw	1	; select bank2/3
  4063  12E3  0087               	movwf	7
  4064  12E4  0020               	movlb	0	; select bank0
  4065  12E5  0822               	movf	setSw_Enable@command,w
  4066  12E6  1001               	bcf	1,0
  4067  12E7  1D03               	skipz
  4068  12E8  1401               	bsf	1,0
  4069                           
  4070                           ;Switch_B1.c: 93: SwPointSelect(2);
  4071  12E9  3002               	movlw	2
  4072  12EA  3191  214E  3192   	fcall	_SwPointSelect
  4073                           
  4074                           ;Switch_B1.c: 94: Sw->Enable = command;
  4075  12ED  087B               	movf	_Sw,w
  4076  12EE  0086               	movwf	6
  4077  12EF  3001               	movlw	1	; select bank2/3
  4078  12F0  0087               	movwf	7
  4079  12F1  0020               	movlb	0	; select bank0
  4080  12F2  0822               	movf	setSw_Enable@command,w
  4081  12F3  1001               	bcf	1,0
  4082  12F4  1D03               	skipz
  4083  12F5  1401               	bsf	1,0
  4084                           
  4085                           ;Switch_B1.c: 98: SwPointSelect(3);
  4086  12F6  3003               	movlw	3
  4087  12F7  3191  214E         	fcall	_SwPointSelect
  4088                           
  4089                           ;Switch_B1.c: 99: Sw->Enable = command;
  4090  12F9  087B               	movf	_Sw,w
  4091  12FA  0086               	movwf	6
  4092  12FB  3001               	movlw	1	; select bank2/3
  4093  12FC  0087               	movwf	7
  4094  12FD  0020               	movlb	0	; select bank0
  4095  12FE  0822               	movf	setSw_Enable@command,w
  4096  12FF  1001               	bcf	1,0
  4097  1300  1D03               	skipz
  4098  1301  1401               	bsf	1,0
  4099  1302  0008               	return
  4100  1303                     __end_of_setSw_Enable:	
  4101                           
  4102                           	psect	text4
  4103  12B3                     __ptext4:	
  4104 ;; *************** function _setRF_Enable *****************
  4105 ;; Defined at:
  4106 ;;		line 202 in file "../src/RF_Control_B1.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  rf              1    wreg     unsigned char 
  4109 ;;  command         1    2[BANK0 ] unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  rf              1    3[BANK0 ] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;		None               void
  4114 ;; Registers used:
  4115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4125 ;;Total ram usage:        2 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    6
  4128 ;; This function calls:
  4129 ;;		_RfPointSelect
  4130 ;; This function is called by:
  4131 ;;		_my_Main
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _setRF_Enable
  4137  12B3                     _setRF_Enable:	
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4141                           ;setRF_Enable@rf stored from wreg
  4142  12B3  0020               	movlb	0	; select bank0
  4143  12B4  00A3               	movwf	setRF_Enable@rf
  4144                           
  4145                           ;RF_Control_B1.c: 203: RfPointSelect(rf);
  4146  12B5  0823               	movf	setRF_Enable@rf,w
  4147  12B6  319E  2627         	fcall	_RfPointSelect
  4148                           
  4149                           ;RF_Control_B1.c: 204: RF->Enable = command;
  4150  12B8  087A               	movf	_RF,w
  4151  12B9  0086               	movwf	6
  4152  12BA  0187               	clrf	7
  4153  12BB  0020               	movlb	0	; select bank0
  4154  12BC  0822               	movf	setRF_Enable@command,w
  4155  12BD  1001               	bcf	1,0
  4156  12BE  1D03               	skipz
  4157  12BF  1401               	bsf	1,0
  4158                           
  4159                           ;RF_Control_B1.c: 205: RF->Learn = 0;
  4160  12C0  087A               	movf	_RF,w
  4161  12C1  0086               	movwf	6
  4162  12C2  0187               	clrf	7
  4163  12C3  1301               	bcf	1,6
  4164                           
  4165                           ;RF_Control_B1.c: 206: RF->TransceiveGO = 0;
  4166  12C4  087A               	movf	_RF,w
  4167  12C5  0086               	movwf	6
  4168  12C6  0187               	clrf	7
  4169  12C7  1101               	bcf	1,2
  4170                           
  4171                           ;RF_Control_B1.c: 207: RF->RxStatus = 0;
  4172  12C8  087A               	movf	_RF,w
  4173  12C9  0086               	movwf	6
  4174  12CA  0187               	clrf	7
  4175  12CB  1181               	bcf	1,3
  4176                           
  4177                           ;RF_Control_B1.c: 208: RF->ReceiveGO = 0;
  4178  12CC  087A               	movf	_RF,w
  4179  12CD  0086               	movwf	6
  4180  12CE  0187               	clrf	7
  4181  12CF  1081               	bcf	1,1
  4182                           
  4183                           ;RF_Control_B1.c: 209: RF->DebounceTime = 0;
  4184  12D0  087A               	movf	_RF,w
  4185  12D1  3E04               	addlw	4
  4186  12D2  0086               	movwf	6
  4187  12D3  0187               	clrf	7
  4188  12D4  0181               	clrf	1
  4189                           
  4190                           ;RF_Control_B1.c: 210: RF->Debounce = 0;
  4191  12D5  087A               	movf	_RF,w
  4192  12D6  0086               	movwf	6
  4193  12D7  0187               	clrf	7
  4194  12D8  1281               	bcf	1,5
  4195  12D9  0008               	return
  4196  12DA                     __end_of_setRF_Enable:	
  4197                           
  4198                           	psect	text5
  4199  1F5B                     __ptext5:	
  4200 ;; *************** function _myMain_Initialization *****************
  4201 ;; Defined at:
  4202 ;;		line 112 in file "../src/Main_B1.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, fsr1l, fsr1h
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;Total ram usage:        1 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    5
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _myMain_Initialization
  4232  1F5B                     _myMain_Initialization:	
  4233                           
  4234                           ;Main_B1.c: 114: product = &_product;
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4238  1F5B  30A0               	movlw	__product& (0+255)
  4239  1F5C  0020               	movlb	0	; select bank0
  4240  1F5D  00A0               	movwf	??_myMain_Initialization
  4241  1F5E  0820               	movf	??_myMain_Initialization,w
  4242  1F5F  00FD               	movwf	_product
  4243                           
  4244                           ;Main_B1.c: 115: product->Data[20] = 211;
  4245  1F60  30D3               	movlw	211
  4246  1F61  00A0               	movwf	??_myMain_Initialization
  4247  1F62  087D               	movf	_product,w
  4248  1F63  3E14               	addlw	20
  4249  1F64  0086               	movwf	6
  4250  1F65  3001               	movlw	1	; select bank2/3
  4251  1F66  0087               	movwf	7
  4252  1F67  0820               	movf	??_myMain_Initialization,w
  4253  1F68  0081               	movwf	1
  4254                           
  4255                           ;Main_B1.c: 118: myMain = &_myMain;
  4256  1F69  30C0               	movlw	__myMain& (0+255)
  4257  1F6A  00A0               	movwf	??_myMain_Initialization
  4258  1F6B  0820               	movf	??_myMain_Initialization,w
  4259  1F6C  0021               	movlb	1	; select bank1
  4260  1F6D  00EE               	movwf	_myMain^(0+128)
  4261  1F6E  0008               	return
  4262  1F6F                     __end_of_myMain_Initialization:	
  4263                           
  4264                           	psect	text6
  4265  10F8                     __ptext6:	
  4266 ;; *************** function _WDT_Main *****************
  4267 ;; Defined at:
  4268 ;;		line 899 in file "../src/MCU_B1.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;		None
  4271 ;; Auto vars:     Size  Location     Type
  4272 ;;		None
  4273 ;; Return value:  Size  Location     Type
  4274 ;;		None               void
  4275 ;; Registers used:
  4276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4277 ;; Tracked objects:
  4278 ;;		On entry : 0/0
  4279 ;;		On exit  : 0/0
  4280 ;;		Unchanged: 0/0
  4281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4285 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4286 ;;Total ram usage:        1 bytes
  4287 ;; Hardware stack levels used:    1
  4288 ;; Hardware stack levels required when called:    6
  4289 ;; This function calls:
  4290 ;;		_WDT_Clearing
  4291 ;; This function is called by:
  4292 ;;		_main
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           
  4297                           ;psect for function _WDT_Main
  4298  10F8                     _WDT_Main:	
  4299                           
  4300                           ;MCU_B1.c: 900: if (WDT->Enable == 1) {
  4301                           
  4302                           ;incstack = 0
  4303                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4304  10F8  0021               	movlb	1	; select bank1
  4305  10F9  086D               	movf	_WDT^(0+128),w
  4306  10FA  0086               	movwf	6
  4307  10FB  0187               	clrf	7
  4308  10FC  1C01               	btfss	1,0
  4309  10FD  0008               	return
  4310                           
  4311                           ;MCU_B1.c: 901: if (WDT->Count-- > 0) {
  4312  10FE  0A6D               	incf	_WDT^(0+128),w
  4313  10FF  0086               	movwf	6
  4314  1100  0187               	clrf	7
  4315  1101  3001               	movlw	1
  4316  1102  0281               	subwf	1,f
  4317  1103  0801               	movf	1,w
  4318  1104  3AFF               	xorlw	255
  4319  1105  1903               	skipnz
  4320  1106  0008               	return
  4321                           
  4322                           ;MCU_B1.c: 902: WDT->Count = 10;
  4323  1107  300A               	movlw	10
  4324  1108  0020               	movlb	0	; select bank0
  4325  1109  00A0               	movwf	??_WDT_Main
  4326  110A  0021               	movlb	1	; select bank1
  4327  110B  0A6D               	incf	_WDT^(0+128),w
  4328  110C  0086               	movwf	6
  4329  110D  0187               	clrf	7
  4330  110E  0020               	movlb	0	; select bank0
  4331  110F  0820               	movf	??_WDT_Main,w
  4332  1110  0081               	movwf	1
  4333                           
  4334                           ;MCU_B1.c: 903: WDT_Clearing();
  4335  1111  3180  2002         	fcall	_WDT_Clearing
  4336  1113  0008               	return
  4337  1114                     __end_of_WDT_Main:	
  4338                           
  4339                           	psect	text7
  4340  0002                     __ptext7:	
  4341 ;; *************** function _WDT_Clearing *****************
  4342 ;; Defined at:
  4343 ;;		line 909 in file "../src/MCU_B1.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;		None
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;		None
  4348 ;; Return value:  Size  Location     Type
  4349 ;;		None               void
  4350 ;; Registers used:
  4351 ;;		None
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4361 ;;Total ram usage:        0 bytes
  4362 ;; Hardware stack levels used:    1
  4363 ;; Hardware stack levels required when called:    5
  4364 ;; This function calls:
  4365 ;;		Nothing
  4366 ;; This function is called by:
  4367 ;;		_WDT_Main
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           
  4372                           ;psect for function _WDT_Clearing
  4373  0002                     _WDT_Clearing:	
  4374                           
  4375                           ;incstack = 0
  4376                           ; Regs used in _WDT_Clearing: []
  4377  0002  0064               	clrwdt	;# 
  4378  0003  0008               	return
  4379  0004                     __end_of_WDT_Clearing:	
  4380                           
  4381                           	psect	text8
  4382  1E0E                     __ptext8:	
  4383 ;; *************** function _Switch_Main *****************
  4384 ;; Defined at:
  4385 ;;		line 61 in file "../src/Switch_B1.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;		None               void
  4392 ;; Registers used:
  4393 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;Total ram usage:        0 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:   11
  4406 ;; This function calls:
  4407 ;;		_setSw_Main
  4408 ;; This function is called by:
  4409 ;;		_main
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           
  4414                           ;psect for function _Switch_Main
  4415  1E0E                     _Switch_Main:	
  4416                           
  4417                           ;Switch_B1.c: 63: setSw_Main(1);
  4418                           
  4419                           ;incstack = 0
  4420                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4421  1E0E  3001               	movlw	1
  4422  1E0F  3182  2223  319E   	fcall	_setSw_Main
  4423                           
  4424                           ;Switch_B1.c: 67: setSw_Main(2);
  4425  1E12  3002               	movlw	2
  4426  1E13  3182  2223  319E   	fcall	_setSw_Main
  4427                           
  4428                           ;Switch_B1.c: 71: setSw_Main(3);
  4429  1E16  3003               	movlw	3
  4430  1E17  3182  2223         	fcall	_setSw_Main
  4431  1E19  0008               	return
  4432  1E1A                     __end_of_Switch_Main:	
  4433                           
  4434                           	psect	text9
  4435  0223                     __ptext9:	
  4436 ;; *************** function _setSw_Main *****************
  4437 ;; Defined at:
  4438 ;;		line 111 in file "../src/Switch_B1.c"
  4439 ;; Parameters:    Size  Location     Type
  4440 ;;  sw              1    wreg     unsigned char 
  4441 ;; Auto vars:     Size  Location     Type
  4442 ;;  sw              1   74[BANK0 ] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;		None               void
  4445 ;; Registers used:
  4446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4455 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4456 ;;Total ram usage:        3 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:   10
  4459 ;; This function calls:
  4460 ;;		_SwPointSelect
  4461 ;;		_Sw_DimmerAdjFunc
  4462 ;;		_Sw_DimmerOffFunc
  4463 ;;		_Sw_DimmerOnFunc
  4464 ;;		_setBuz
  4465 ;;		_setRF_Learn
  4466 ;; This function is called by:
  4467 ;;		_Switch_Main
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _setSw_Main
  4473  0223                     _setSw_Main:	
  4474                           
  4475                           ;incstack = 0
  4476                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4477                           ;setSw_Main@sw stored from wreg
  4478  0223  0020               	movlb	0	; select bank0
  4479  0224  00EA               	movwf	setSw_Main@sw
  4480                           
  4481                           ;Switch_B1.c: 112: SwPointSelect(sw);
  4482  0225  086A               	movf	setSw_Main@sw,w
  4483  0226  3191  214E  3182   	fcall	_SwPointSelect
  4484                           
  4485                           ;Switch_B1.c: 113: if (Sw->Enable == 1) {
  4486  0229  087B               	movf	_Sw,w
  4487  022A  0086               	movwf	6
  4488  022B  3001               	movlw	1	; select bank2/3
  4489  022C  0087               	movwf	7
  4490  022D  1C01               	btfss	1,0
  4491  022E  0008               	return
  4492                           
  4493                           ;Switch_B1.c: 115: if (sw == 1) {
  4494  022F  0020               	movlb	0	; select bank0
  4495  0230  086A               	movf	setSw_Main@sw,w
  4496  0231  3A01               	xorlw	1
  4497  0232  1D03               	skipz
  4498  0233  2A3C               	goto	l6968
  4499                           
  4500                           ;Switch_B1.c: 116: Sw->Touch = (RA0 == 1) ? 1 : 0;
  4501  0234  087B               	movf	_Sw,w
  4502  0235  0086               	movwf	6
  4503  0236  3001               	movlw	1	; select bank2/3
  4504  0237  0087               	movwf	7
  4505  0238  1081               	bcf	1,1
  4506  0239  180C               	btfsc	12,0	;volatile
  4507  023A  1481               	bsf	1,1
  4508                           
  4509                           ;Switch_B1.c: 117: } else if (sw == 2) {
  4510  023B  2A55               	goto	l2660
  4511  023C                     l6968:	
  4512  023C  0020               	movlb	0	; select bank0
  4513  023D  086A               	movf	setSw_Main@sw,w
  4514  023E  3A02               	xorlw	2
  4515  023F  1D03               	skipz
  4516  0240  2A49               	goto	l6972
  4517                           
  4518                           ;Switch_B1.c: 118: Sw->Touch = (RA6 == 1) ? 1 : 0;
  4519  0241  087B               	movf	_Sw,w
  4520  0242  0086               	movwf	6
  4521  0243  3001               	movlw	1	; select bank2/3
  4522  0244  0087               	movwf	7
  4523  0245  1081               	bcf	1,1
  4524  0246  1B0C               	btfsc	12,6	;volatile
  4525  0247  1481               	bsf	1,1
  4526                           
  4527                           ;Switch_B1.c: 119: } else if (sw == 3) {
  4528  0248  2A55               	goto	l2660
  4529  0249                     l6972:	
  4530  0249  0020               	movlb	0	; select bank0
  4531  024A  086A               	movf	setSw_Main@sw,w
  4532  024B  3A03               	xorlw	3
  4533  024C  1D03               	skipz
  4534  024D  2A55               	goto	l2660
  4535                           
  4536                           ;Switch_B1.c: 120: Sw->Touch = (RA4 == 1) ? 1 : 0;
  4537  024E  087B               	movf	_Sw,w
  4538  024F  0086               	movwf	6
  4539  0250  3001               	movlw	1	; select bank2/3
  4540  0251  0087               	movwf	7
  4541  0252  1081               	bcf	1,1
  4542  0253  1A0C               	btfsc	12,4	;volatile
  4543  0254  1481               	bsf	1,1
  4544  0255                     l2660:	
  4545                           
  4546                           ;Switch_B1.c: 121: }
  4547                           ;Switch_B1.c: 135: if (Sw->Touch == 1) {
  4548  0255  087B               	movf	_Sw,w
  4549  0256  0086               	movwf	6
  4550  0257  3001               	movlw	1	; select bank2/3
  4551  0258  0087               	movwf	7
  4552  0259  1C81               	btfss	1,1
  4553  025A  2B27               	goto	l7022
  4554                           
  4555                           ;Switch_B1.c: 136: if (Sw->Debounce == 0) {
  4556  025B  087B               	movf	_Sw,w
  4557  025C  0086               	movwf	6
  4558  025D  3001               	movlw	1	; select bank2/3
  4559  025E  0087               	movwf	7
  4560  025F  1901               	btfsc	1,2
  4561  0260  2A83               	goto	l6988
  4562                           
  4563                           ;Switch_B1.c: 137: Sw->DebounceTime++;
  4564  0261  3001               	movlw	1
  4565  0262  0020               	movlb	0	; select bank0
  4566  0263  00E8               	movwf	??_setSw_Main
  4567  0264  087B               	movf	_Sw,w
  4568  0265  3E02               	addlw	2
  4569  0266  0086               	movwf	6
  4570  0267  3001               	movlw	1	; select bank2/3
  4571  0268  0087               	movwf	7
  4572  0269  0868               	movf	??_setSw_Main,w
  4573  026A  0781               	addwf	1,f
  4574                           
  4575                           ;Switch_B1.c: 138: if (Sw->DebounceTime >= 5) {
  4576  026B  087B               	movf	_Sw,w
  4577  026C  3E02               	addlw	2
  4578  026D  0086               	movwf	6
  4579  026E  3001               	movlw	1	; select bank2/3
  4580  026F  0087               	movwf	7
  4581  0270  3005               	movlw	5
  4582  0271  0201               	subwf	1,w
  4583  0272  1C03               	skipc
  4584  0273  0008               	return
  4585                           
  4586                           ;Switch_B1.c: 139: Sw->DebounceTime = 0;
  4587  0274  087B               	movf	_Sw,w
  4588  0275  3E02               	addlw	2
  4589  0276  0086               	movwf	6
  4590  0277  3001               	movlw	1	; select bank2/3
  4591  0278  0087               	movwf	7
  4592  0279  0181               	clrf	1
  4593                           
  4594                           ;Switch_B1.c: 140: Sw->Debounce = 1;
  4595  027A  087B               	movf	_Sw,w
  4596  027B  0086               	movwf	6
  4597  027C  3001               	movlw	1	; select bank2/3
  4598  027D  0087               	movwf	7
  4599  027E  1501               	bsf	1,2
  4600                           
  4601                           ;Switch_B1.c: 143: Sw_DimmerOnFunc(sw);
  4602  027F  086A               	movf	setSw_Main@sw,w
  4603  0280  318B  23A6         	fcall	_Sw_DimmerOnFunc
  4604                           
  4605                           ;Switch_B1.c: 145: }
  4606                           ;Switch_B1.c: 146: } else {
  4607  0282  0008               	return
  4608  0283                     l6988:	
  4609                           
  4610                           ;Switch_B1.c: 147: if (Sw->Hold1 == 0) {
  4611  0283  087B               	movf	_Sw,w
  4612  0284  0086               	movwf	6
  4613  0285  3001               	movlw	1	; select bank2/3
  4614  0286  0087               	movwf	7
  4615  0287  1981               	btfsc	1,3
  4616  0288  2AB0               	goto	l6998
  4617                           
  4618                           ;Switch_B1.c: 148: Sw->Hold1Time++;
  4619  0289  087B               	movf	_Sw,w
  4620  028A  3E03               	addlw	3
  4621  028B  0086               	movwf	6
  4622  028C  3001               	movlw	1	; select bank2/3
  4623  028D  0087               	movwf	7
  4624  028E  3001               	movlw	1
  4625  028F  0781               	addwf	1,f
  4626  0290  3141               	addfsr 1,1
  4627  0291  1803               	skipnc
  4628  0292  0A81               	incf	1,f
  4629                           
  4630                           ;Switch_B1.c: 149: if (Sw->Hold1Time >= 150) {
  4631  0293  087B               	movf	_Sw,w
  4632  0294  3E03               	addlw	3
  4633  0295  0086               	movwf	6
  4634  0296  3001               	movlw	1	; select bank2/3
  4635  0297  0087               	movwf	7
  4636  0298  3F40               	moviw [0]fsr1
  4637  0299  0020               	movlb	0	; select bank0
  4638  029A  00E8               	movwf	??_setSw_Main
  4639  029B  3F41               	moviw [1]fsr1
  4640  029C  00E9               	movwf	??_setSw_Main+1
  4641  029D  3000               	movlw	0
  4642  029E  0269               	subwf	??_setSw_Main+1,w
  4643  029F  3096               	movlw	150
  4644  02A0  1903               	skipnz
  4645  02A1  0268               	subwf	??_setSw_Main,w
  4646  02A2  1C03               	skipc
  4647  02A3  0008               	return
  4648                           
  4649                           ;Switch_B1.c: 150: Sw->Hold1Time = 0;
  4650  02A4  087B               	movf	_Sw,w
  4651  02A5  3E03               	addlw	3
  4652  02A6  0086               	movwf	6
  4653  02A7  3001               	movlw	1	; select bank2/3
  4654  02A8  0087               	movwf	7
  4655  02A9  3000               	movlw	0
  4656  02AA  3FC0               	movwi [0]fsr1
  4657  02AB  3FC1               	movwi [1]fsr1
  4658                           
  4659                           ;Switch_B1.c: 153: Sw_DimmerAdjFunc(sw);
  4660  02AC  086A               	movf	setSw_Main@sw,w
  4661  02AD  3197  273F         	fcall	_Sw_DimmerAdjFunc
  4662                           
  4663                           ;Switch_B1.c: 156: }
  4664                           ;Switch_B1.c: 157: } else {
  4665  02AF  0008               	return
  4666  02B0                     l6998:	
  4667                           
  4668                           ;Switch_B1.c: 158: if (Sw->Hold2 == 0) {
  4669  02B0  087B               	movf	_Sw,w
  4670  02B1  0086               	movwf	6
  4671  02B2  3001               	movlw	1	; select bank2/3
  4672  02B3  0087               	movwf	7
  4673  02B4  1A01               	btfsc	1,4
  4674  02B5  2AF4               	goto	l7012
  4675                           
  4676                           ;Switch_B1.c: 159: Sw->Hold2Time++;
  4677  02B6  087B               	movf	_Sw,w
  4678  02B7  3E05               	addlw	5
  4679  02B8  0086               	movwf	6
  4680  02B9  3001               	movlw	1	; select bank2/3
  4681  02BA  0087               	movwf	7
  4682  02BB  3001               	movlw	1
  4683  02BC  0781               	addwf	1,f
  4684  02BD  3141               	addfsr 1,1
  4685  02BE  1803               	skipnc
  4686  02BF  0A81               	incf	1,f
  4687                           
  4688                           ;Switch_B1.c: 160: if (Sw->Hold2Time >= 150) {
  4689  02C0  087B               	movf	_Sw,w
  4690  02C1  3E05               	addlw	5
  4691  02C2  0086               	movwf	6
  4692  02C3  3001               	movlw	1	; select bank2/3
  4693  02C4  0087               	movwf	7
  4694  02C5  3F40               	moviw [0]fsr1
  4695  02C6  0020               	movlb	0	; select bank0
  4696  02C7  00E8               	movwf	??_setSw_Main
  4697  02C8  3F41               	moviw [1]fsr1
  4698  02C9  00E9               	movwf	??_setSw_Main+1
  4699  02CA  3000               	movlw	0
  4700  02CB  0269               	subwf	??_setSw_Main+1,w
  4701  02CC  3096               	movlw	150
  4702  02CD  1903               	skipnz
  4703  02CE  0268               	subwf	??_setSw_Main,w
  4704  02CF  1C03               	skipc
  4705  02D0  0008               	return
  4706                           
  4707                           ;Switch_B1.c: 161: Sw->Hold2Time = 0;
  4708  02D1  087B               	movf	_Sw,w
  4709  02D2  3E05               	addlw	5
  4710  02D3  0086               	movwf	6
  4711  02D4  3001               	movlw	1	; select bank2/3
  4712  02D5  0087               	movwf	7
  4713  02D6  3000               	movlw	0
  4714  02D7  3FC0               	movwi [0]fsr1
  4715  02D8  3FC1               	movwi [1]fsr1
  4716                           
  4717                           ;Switch_B1.c: 162: Sw->Hold2 = 1;
  4718  02D9  087B               	movf	_Sw,w
  4719  02DA  0086               	movwf	6
  4720  02DB  3001               	movlw	1	; select bank2/3
  4721  02DC  0087               	movwf	7
  4722  02DD  1601               	bsf	1,4
  4723                           
  4724                           ;Switch_B1.c: 165: setRF_Learn(1, 1);
  4725  02DE  01A2               	clrf	setRF_Learn@command
  4726  02DF  0AA2               	incf	setRF_Learn@command,f
  4727  02E0  3001               	movlw	1
  4728  02E1  319E  2635  3182   	fcall	_setRF_Learn
  4729                           
  4730                           ;Switch_B1.c: 167: if (myMain->First == 1) {
  4731  02E4  0021               	movlb	1	; select bank1
  4732  02E5  086E               	movf	_myMain^(0+128),w
  4733  02E6  0086               	movwf	6
  4734  02E7  3001               	movlw	1	; select bank2/3
  4735  02E8  0087               	movwf	7
  4736  02E9  1F81               	btfss	1,7
  4737  02EA  0008               	return
  4738                           
  4739                           ;Switch_B1.c: 168: setBuz(2, 100);
  4740  02EB  3064               	movlw	100
  4741  02EC  0020               	movlb	0	; select bank0
  4742  02ED  00A9               	movwf	setBuz@time
  4743  02EE  3000               	movlw	0
  4744  02EF  00AA               	movwf	setBuz@time+1
  4745  02F0  3002               	movlw	2
  4746  02F1  318C  24B7         	fcall	_setBuz
  4747                           
  4748                           ;Switch_B1.c: 169: }
  4749                           ;Switch_B1.c: 171: }
  4750                           ;Switch_B1.c: 172: } else {
  4751  02F3  0008               	return
  4752  02F4                     l7012:	
  4753                           
  4754                           ;Switch_B1.c: 173: if (Sw->Hold3 == 0) {
  4755  02F4  087B               	movf	_Sw,w
  4756  02F5  0086               	movwf	6
  4757  02F6  3001               	movlw	1	; select bank2/3
  4758  02F7  0087               	movwf	7
  4759  02F8  1A81               	btfsc	1,5
  4760  02F9  0008               	return
  4761                           
  4762                           ;Switch_B1.c: 174: Sw->Hold3Time++;
  4763  02FA  087B               	movf	_Sw,w
  4764  02FB  3E07               	addlw	7
  4765  02FC  0086               	movwf	6
  4766  02FD  3001               	movlw	1	; select bank2/3
  4767  02FE  0087               	movwf	7
  4768  02FF  3001               	movlw	1
  4769  0300  0781               	addwf	1,f
  4770  0301  3141               	addfsr 1,1
  4771  0302  1803               	skipnc
  4772  0303  0A81               	incf	1,f
  4773                           
  4774                           ;Switch_B1.c: 175: if (Sw->Hold3Time >= 300) {
  4775  0304  087B               	movf	_Sw,w
  4776  0305  3E07               	addlw	7
  4777  0306  0086               	movwf	6
  4778  0307  3001               	movlw	1	; select bank2/3
  4779  0308  0087               	movwf	7
  4780  0309  3F40               	moviw [0]fsr1
  4781  030A  0020               	movlb	0	; select bank0
  4782  030B  00E8               	movwf	??_setSw_Main
  4783  030C  3F41               	moviw [1]fsr1
  4784  030D  00E9               	movwf	??_setSw_Main+1
  4785  030E  3001               	movlw	1
  4786  030F  0269               	subwf	??_setSw_Main+1,w
  4787  0310  302C               	movlw	44
  4788  0311  1903               	skipnz
  4789  0312  0268               	subwf	??_setSw_Main,w
  4790  0313  1C03               	skipc
  4791  0314  0008               	return
  4792                           
  4793                           ;Switch_B1.c: 176: Sw->Hold3Time = 0;
  4794  0315  087B               	movf	_Sw,w
  4795  0316  3E07               	addlw	7
  4796  0317  0086               	movwf	6
  4797  0318  3001               	movlw	1	; select bank2/3
  4798  0319  0087               	movwf	7
  4799  031A  3000               	movlw	0
  4800  031B  3FC0               	movwi [0]fsr1
  4801  031C  3FC1               	movwi [1]fsr1
  4802                           
  4803                           ;Switch_B1.c: 177: Sw->Hold3 = 1;
  4804  031D  087B               	movf	_Sw,w
  4805  031E  0086               	movwf	6
  4806  031F  3001               	movlw	1	; select bank2/3
  4807  0320  0087               	movwf	7
  4808  0321  1681               	bsf	1,5
  4809                           
  4810                           ;Switch_B1.c: 180: setRF_Learn(1, 0);
  4811  0322  01A2               	clrf	setRF_Learn@command
  4812  0323  3001               	movlw	1
  4813  0324  319E  2635         	fcall	_setRF_Learn
  4814                           
  4815                           ;Switch_B1.c: 183: }
  4816                           ;Switch_B1.c: 184: }
  4817                           ;Switch_B1.c: 185: }
  4818                           ;Switch_B1.c: 186: }
  4819                           ;Switch_B1.c: 187: }
  4820                           ;Switch_B1.c: 188: } else {
  4821  0326  0008               	return
  4822  0327                     l7022:	
  4823                           
  4824                           ;Switch_B1.c: 189: if (Sw->Debounce == 1) {
  4825  0327  087B               	movf	_Sw,w
  4826  0328  0086               	movwf	6
  4827  0329  3001               	movlw	1	; select bank2/3
  4828  032A  0087               	movwf	7
  4829  032B  1D01               	btfss	1,2
  4830  032C  0008               	return
  4831                           
  4832                           ;Switch_B1.c: 190: Sw->DebounceTime++;
  4833  032D  3001               	movlw	1
  4834  032E  0020               	movlb	0	; select bank0
  4835  032F  00E8               	movwf	??_setSw_Main
  4836  0330  087B               	movf	_Sw,w
  4837  0331  3E02               	addlw	2
  4838  0332  0086               	movwf	6
  4839  0333  3001               	movlw	1	; select bank2/3
  4840  0334  0087               	movwf	7
  4841  0335  0868               	movf	??_setSw_Main,w
  4842  0336  0781               	addwf	1,f
  4843                           
  4844                           ;Switch_B1.c: 191: if (Sw->DebounceTime >= 5) {
  4845  0337  087B               	movf	_Sw,w
  4846  0338  3E02               	addlw	2
  4847  0339  0086               	movwf	6
  4848  033A  3001               	movlw	1	; select bank2/3
  4849  033B  0087               	movwf	7
  4850  033C  3005               	movlw	5
  4851  033D  0201               	subwf	1,w
  4852  033E  1C03               	skipc
  4853  033F  0008               	return
  4854                           
  4855                           ;Switch_B1.c: 192: Sw->DebounceTime = 0;
  4856  0340  087B               	movf	_Sw,w
  4857  0341  3E02               	addlw	2
  4858  0342  0086               	movwf	6
  4859  0343  3001               	movlw	1	; select bank2/3
  4860  0344  0087               	movwf	7
  4861  0345  0181               	clrf	1
  4862                           
  4863                           ;Switch_B1.c: 193: Sw->Debounce = 0;
  4864  0346  087B               	movf	_Sw,w
  4865  0347  0086               	movwf	6
  4866  0348  3001               	movlw	1	; select bank2/3
  4867  0349  0087               	movwf	7
  4868  034A  1101               	bcf	1,2
  4869                           
  4870                           ;Switch_B1.c: 194: Sw->Hold1Time = 0;
  4871  034B  087B               	movf	_Sw,w
  4872  034C  3E03               	addlw	3
  4873  034D  0086               	movwf	6
  4874  034E  3001               	movlw	1	; select bank2/3
  4875  034F  0087               	movwf	7
  4876  0350  3000               	movlw	0
  4877  0351  3FC0               	movwi [0]fsr1
  4878  0352  3FC1               	movwi [1]fsr1
  4879                           
  4880                           ;Switch_B1.c: 195: Sw->Hold1 = 0;
  4881  0353  087B               	movf	_Sw,w
  4882  0354  0086               	movwf	6
  4883  0355  3001               	movlw	1	; select bank2/3
  4884  0356  0087               	movwf	7
  4885  0357  1181               	bcf	1,3
  4886                           
  4887                           ;Switch_B1.c: 196: Sw->Hold2Time = 0;
  4888  0358  087B               	movf	_Sw,w
  4889  0359  3E05               	addlw	5
  4890  035A  0086               	movwf	6
  4891  035B  3001               	movlw	1	; select bank2/3
  4892  035C  0087               	movwf	7
  4893  035D  3000               	movlw	0
  4894  035E  3FC0               	movwi [0]fsr1
  4895  035F  3FC1               	movwi [1]fsr1
  4896                           
  4897                           ;Switch_B1.c: 197: Sw->Hold2 = 0;
  4898  0360  087B               	movf	_Sw,w
  4899  0361  0086               	movwf	6
  4900  0362  3001               	movlw	1	; select bank2/3
  4901  0363  0087               	movwf	7
  4902  0364  1201               	bcf	1,4
  4903                           
  4904                           ;Switch_B1.c: 198: Sw->Hold3Time = 0;
  4905  0365  087B               	movf	_Sw,w
  4906  0366  3E07               	addlw	7
  4907  0367  0086               	movwf	6
  4908  0368  3001               	movlw	1	; select bank2/3
  4909  0369  0087               	movwf	7
  4910  036A  3000               	movlw	0
  4911  036B  3FC0               	movwi [0]fsr1
  4912  036C  3FC1               	movwi [1]fsr1
  4913                           
  4914                           ;Switch_B1.c: 199: Sw->Hold3 = 0;
  4915  036D  087B               	movf	_Sw,w
  4916  036E  0086               	movwf	6
  4917  036F  3001               	movlw	1	; select bank2/3
  4918  0370  0087               	movwf	7
  4919  0371  1281               	bcf	1,5
  4920                           
  4921                           ;Switch_B1.c: 201: Sw_DimmerOffFunc(sw);
  4922  0372  086A               	movf	setSw_Main@sw,w
  4923  0373  3188  2077  3182   	fcall	_Sw_DimmerOffFunc
  4924                           
  4925                           ;Switch_B1.c: 204: setRF_Learn(1, 0);
  4926  0376  0020               	movlb	0	; select bank0
  4927  0377  01A2               	clrf	setRF_Learn@command
  4928  0378  3001               	movlw	1
  4929  0379  319E  2635         	fcall	_setRF_Learn
  4930  037B  0008               	return
  4931  037C                     __end_of_setSw_Main:	
  4932                           
  4933                           	psect	text10
  4934  1E35                     __ptext10:	
  4935 ;; *************** function _setRF_Learn *****************
  4936 ;; Defined at:
  4937 ;;		line 33 in file "../src/RF_Control_B1.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;  rf              1    wreg     unsigned char 
  4940 ;;  command         1    2[BANK0 ] unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  rf              1    3[BANK0 ] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;		None               void
  4945 ;; Registers used:
  4946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4956 ;;Total ram usage:        2 bytes
  4957 ;; Hardware stack levels used:    1
  4958 ;; Hardware stack levels required when called:    6
  4959 ;; This function calls:
  4960 ;;		_RfPointSelect
  4961 ;; This function is called by:
  4962 ;;		_setSw_Main
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _setRF_Learn
  4968  1E35                     _setRF_Learn:	
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4972                           ;setRF_Learn@rf stored from wreg
  4973  1E35  0020               	movlb	0	; select bank0
  4974  1E36  00A3               	movwf	setRF_Learn@rf
  4975                           
  4976                           ;RF_Control_B1.c: 34: RfPointSelect(rf);
  4977  1E37  0823               	movf	setRF_Learn@rf,w
  4978  1E38  319E  2627         	fcall	_RfPointSelect
  4979                           
  4980                           ;RF_Control_B1.c: 35: RF->Learn = command;
  4981  1E3A  087A               	movf	_RF,w
  4982  1E3B  0086               	movwf	6
  4983  1E3C  0187               	clrf	7
  4984  1E3D  0020               	movlb	0	; select bank0
  4985  1E3E  0822               	movf	setRF_Learn@command,w
  4986  1E3F  1301               	bcf	1,6
  4987  1E40  1D03               	skipz
  4988  1E41  1701               	bsf	1,6
  4989  1E42  0008               	return
  4990  1E43                     __end_of_setRF_Learn:	
  4991                           
  4992                           	psect	text11
  4993  0BA6                     __ptext11:	
  4994 ;; *************** function _Sw_DimmerOnFunc *****************
  4995 ;; Defined at:
  4996 ;;		line 213 in file "../src/Switch_B1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  sw              1    wreg     unsigned char 
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;  sw              1   71[BANK0 ] unsigned char 
  5001 ;;  Idle            1   70[BANK0 ] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;		None               void
  5004 ;; Registers used:
  5005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        6 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    9
  5018 ;; This function calls:
  5019 ;;		_setBuz
  5020 ;;		_setDimmerLights_Switch
  5021 ;;		_setDimmerLights_Trigger
  5022 ;;		_setRFSW_Status
  5023 ;;		_setRF_DimmerLights
  5024 ;;		_setTxData
  5025 ;; This function is called by:
  5026 ;;		_setSw_Main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _Sw_DimmerOnFunc
  5032  0BA6                     _Sw_DimmerOnFunc:	
  5033                           
  5034                           ;incstack = 0
  5035                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5036                           ;Sw_DimmerOnFunc@sw stored from wreg
  5037  0BA6  0020               	movlb	0	; select bank0
  5038  0BA7  00E7               	movwf	Sw_DimmerOnFunc@sw
  5039                           
  5040                           ;Switch_B1.c: 214: char Idle = 1;
  5041  0BA8  01E6               	clrf	Sw_DimmerOnFunc@Idle
  5042  0BA9  0AE6               	incf	Sw_DimmerOnFunc@Idle,f
  5043                           
  5044                           ;Switch_B1.c: 218: if (sw == 1) {
  5045  0BAA  0867               	movf	Sw_DimmerOnFunc@sw,w
  5046  0BAB  3A01               	xorlw	1
  5047  0BAC  1D03               	skipz
  5048  0BAD  2BB9               	goto	l6342
  5049                           
  5050                           ;Switch_B1.c: 219: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5051  0BAE  01E3               	clrf	_Sw_DimmerOnFunc$5033
  5052  0BAF  0022               	movlb	2	; select bank2
  5053  0BB0  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  5054  0BB1  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5055  0BB2  2BB6               	goto	l6340
  5056  0BB3  0020               	movlb	0	; select bank0
  5057  0BB4  01E3               	clrf	_Sw_DimmerOnFunc$5033
  5058  0BB5  0AE3               	incf	_Sw_DimmerOnFunc$5033,f
  5059  0BB6                     l6340:	
  5060  0BB6  0020               	movlb	0	; select bank0
  5061  0BB7  0863               	movf	_Sw_DimmerOnFunc$5033,w
  5062  0BB8  2BD6               	goto	L2
  5063  0BB9                     l6342:	
  5064                           ;Switch_B1.c: 220: } else if (sw == 2) {
  5065                           
  5066  0BB9  0867               	movf	Sw_DimmerOnFunc@sw,w
  5067  0BBA  3A02               	xorlw	2
  5068  0BBB  1D03               	skipz
  5069  0BBC  2BC8               	goto	l6354
  5070                           
  5071                           ;Switch_B1.c: 221: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5072  0BBD  01E4               	clrf	_Sw_DimmerOnFunc$5034
  5073  0BBE  0022               	movlb	2	; select bank2
  5074  0BBF  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5075  0BC0  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5076  0BC1  2BC5               	goto	l6352
  5077  0BC2  0020               	movlb	0	; select bank0
  5078  0BC3  01E4               	clrf	_Sw_DimmerOnFunc$5034
  5079  0BC4  0AE4               	incf	_Sw_DimmerOnFunc$5034,f
  5080  0BC5                     l6352:	
  5081  0BC5  0020               	movlb	0	; select bank0
  5082  0BC6  0864               	movf	_Sw_DimmerOnFunc$5034,w
  5083  0BC7  2BD6               	goto	L2
  5084  0BC8                     l6354:	
  5085                           ;Switch_B1.c: 222: } else if (sw == 3) {
  5086                           
  5087  0BC8  0867               	movf	Sw_DimmerOnFunc@sw,w
  5088  0BC9  3A03               	xorlw	3
  5089  0BCA  1D03               	skipz
  5090  0BCB  2BD9               	goto	l2686
  5091                           
  5092                           ;Switch_B1.c: 223: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5093  0BCC  01E5               	clrf	_Sw_DimmerOnFunc$5035
  5094  0BCD  0022               	movlb	2	; select bank2
  5095  0BCE  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5096  0BCF  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  5097  0BD0  2BD4               	goto	l6364
  5098  0BD1  0020               	movlb	0	; select bank0
  5099  0BD2  01E5               	clrf	_Sw_DimmerOnFunc$5035
  5100  0BD3  0AE5               	incf	_Sw_DimmerOnFunc$5035,f
  5101  0BD4                     l6364:	
  5102  0BD4  0020               	movlb	0	; select bank0
  5103  0BD5  0865               	movf	_Sw_DimmerOnFunc$5035,w
  5104  0BD6                     L2:	
  5105  0BD6  00E2               	movwf	??_Sw_DimmerOnFunc
  5106  0BD7  0862               	movf	??_Sw_DimmerOnFunc,w
  5107  0BD8  00E6               	movwf	Sw_DimmerOnFunc@Idle
  5108  0BD9                     l2686:	
  5109                           
  5110                           ;Switch_B1.c: 224: }
  5111                           ;Switch_B1.c: 235: if (Idle == 1) {
  5112  0BD9  0866               	movf	Sw_DimmerOnFunc@Idle,w
  5113  0BDA  3A01               	xorlw	1
  5114  0BDB  1D03               	skipz
  5115  0BDC  0008               	return
  5116                           
  5117                           ;Switch_B1.c: 236: Sw->Flag = 1;
  5118  0BDD  087B               	movf	_Sw,w
  5119  0BDE  0086               	movwf	6
  5120  0BDF  3001               	movlw	1	; select bank2/3
  5121  0BE0  0087               	movwf	7
  5122  0BE1  1781               	bsf	1,7
  5123                           
  5124                           ;Switch_B1.c: 237: setBuz(1, 100);
  5125  0BE2  3064               	movlw	100
  5126  0BE3  00A9               	movwf	setBuz@time
  5127  0BE4  3000               	movlw	0
  5128  0BE5  00AA               	movwf	setBuz@time+1
  5129  0BE6  3001               	movlw	1
  5130  0BE7  318C  24B7  318B   	fcall	_setBuz
  5131                           
  5132                           ;Switch_B1.c: 238: if (Sw->Status == 0) {
  5133  0BEA  087B               	movf	_Sw,w
  5134  0BEB  0086               	movwf	6
  5135  0BEC  3001               	movlw	1	; select bank2/3
  5136  0BED  0087               	movwf	7
  5137  0BEE  1B01               	btfsc	1,6
  5138  0BEF  2C1B               	goto	l6384
  5139                           
  5140                           ;Switch_B1.c: 239: Sw->Status = 1;
  5141  0BF0  087B               	movf	_Sw,w
  5142  0BF1  0086               	movwf	6
  5143  0BF2  3001               	movlw	1	; select bank2/3
  5144  0BF3  0087               	movwf	7
  5145  0BF4  1701               	bsf	1,6
  5146                           
  5147                           ;Switch_B1.c: 240: setRFSW_Status(sw, 1);
  5148  0BF5  0020               	movlb	0	; select bank0
  5149  0BF6  01A2               	clrf	setRFSW_Status@command
  5150  0BF7  0AA2               	incf	setRFSW_Status@command,f
  5151  0BF8  0867               	movf	Sw_DimmerOnFunc@sw,w
  5152  0BF9  319E  2670  318B   	fcall	_setRFSW_Status
  5153                           
  5154                           ;Switch_B1.c: 242: setDimmerLights_Trigger(sw, 1);
  5155  0BFC  0020               	movlb	0	; select bank0
  5156  0BFD  01A2               	clrf	setDimmerLights_Trigger@command
  5157  0BFE  0AA2               	incf	setDimmerLights_Trigger@command,f
  5158  0BFF  0867               	movf	Sw_DimmerOnFunc@sw,w
  5159  0C00  319E  26BF  318B   	fcall	_setDimmerLights_Trigger
  5160                           
  5161                           ;Switch_B1.c: 243: setDimmerLights_Switch(sw, 1);
  5162  0C03  0020               	movlb	0	; select bank0
  5163  0C04  01A2               	clrf	setDimmerLights_Switch@command
  5164  0C05  0AA2               	incf	setDimmerLights_Switch@command,f
  5165  0C06  0867               	movf	Sw_DimmerOnFunc@sw,w
  5166  0C07  319E  26AF  318B   	fcall	_setDimmerLights_Switch
  5167                           
  5168                           ;Switch_B1.c: 245: setRF_DimmerLights(sw, Sw->Status);
  5169  0C0A  087B               	movf	_Sw,w
  5170  0C0B  0086               	movwf	6
  5171  0C0C  3001               	movlw	1	; select bank2/3
  5172  0C0D  0087               	movwf	7
  5173  0C0E  3000               	movlw	0
  5174  0C0F  1B01               	btfsc	1,6
  5175  0C10  3001               	movlw	1
  5176  0C11  0020               	movlb	0	; select bank0
  5177  0C12  00DD               	movwf	setRF_DimmerLights@on
  5178  0C13  0867               	movf	Sw_DimmerOnFunc@sw,w
  5179  0C14  3188  20E1  318B   	fcall	_setRF_DimmerLights
  5180                           
  5181                           ;Switch_B1.c: 246: setTxData(1);
  5182  0C17  3001               	movlw	1
  5183  0C18  318D  254D         	fcall	_setTxData
  5184                           
  5185                           ;Switch_B1.c: 248: } else {
  5186  0C1A  0008               	return
  5187  0C1B                     l6384:	
  5188                           
  5189                           ;Switch_B1.c: 249: Sw->Status = 0;
  5190  0C1B  087B               	movf	_Sw,w
  5191  0C1C  0086               	movwf	6
  5192  0C1D  3001               	movlw	1	; select bank2/3
  5193  0C1E  0087               	movwf	7
  5194  0C1F  1301               	bcf	1,6
  5195                           
  5196                           ;Switch_B1.c: 250: setRFSW_Status(sw, Sw->Status);
  5197  0C20  087B               	movf	_Sw,w
  5198  0C21  0086               	movwf	6
  5199  0C22  3001               	movlw	1	; select bank2/3
  5200  0C23  0087               	movwf	7
  5201  0C24  3000               	movlw	0
  5202  0C25  1B01               	btfsc	1,6
  5203  0C26  3001               	movlw	1
  5204  0C27  0020               	movlb	0	; select bank0
  5205  0C28  00A2               	movwf	setRFSW_Status@command
  5206  0C29  0867               	movf	Sw_DimmerOnFunc@sw,w
  5207  0C2A  319E  2670         	fcall	_setRFSW_Status
  5208  0C2C  0008               	return
  5209  0C2D                     __end_of_Sw_DimmerOnFunc:	
  5210                           
  5211                           	psect	text12
  5212  0877                     __ptext12:	
  5213 ;; *************** function _Sw_DimmerOffFunc *****************
  5214 ;; Defined at:
  5215 ;;		line 256 in file "../src/Switch_B1.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;  sw              1    wreg     unsigned char 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  sw              1   68[BANK0 ] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5233 ;;Total ram usage:        3 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    9
  5236 ;; This function calls:
  5237 ;;		_setDimmerLights_AdjGo
  5238 ;;		_setDimmerLights_Switch
  5239 ;;		_setDimmerLights_Trigger
  5240 ;;		_setDimmerLights_TriggerAdj
  5241 ;;		_setRF_DimmerLights
  5242 ;;		_setTxData
  5243 ;; This function is called by:
  5244 ;;		_setSw_Main
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           
  5249                           ;psect for function _Sw_DimmerOffFunc
  5250  0877                     _Sw_DimmerOffFunc:	
  5251                           
  5252                           ;incstack = 0
  5253                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5254                           ;Sw_DimmerOffFunc@sw stored from wreg
  5255  0877  0020               	movlb	0	; select bank0
  5256  0878  00E4               	movwf	Sw_DimmerOffFunc@sw
  5257                           
  5258                           ;Switch_B1.c: 257: if (Sw->Flag == 1) {
  5259  0879  087B               	movf	_Sw,w
  5260  087A  0086               	movwf	6
  5261  087B  3001               	movlw	1	; select bank2/3
  5262  087C  0087               	movwf	7
  5263  087D  1F81               	btfss	1,7
  5264  087E  0008               	return
  5265                           
  5266                           ;Switch_B1.c: 258: Sw->Flag = 0;
  5267  087F  087B               	movf	_Sw,w
  5268  0880  0086               	movwf	6
  5269  0881  3001               	movlw	1	; select bank2/3
  5270  0882  0087               	movwf	7
  5271  0883  1381               	bcf	1,7
  5272                           
  5273                           ;Switch_B1.c: 259: if (Sw->Status == 1) {
  5274  0884  087B               	movf	_Sw,w
  5275  0885  0086               	movwf	6
  5276  0886  3001               	movlw	1	; select bank2/3
  5277  0887  0087               	movwf	7
  5278  0888  1F01               	btfss	1,6
  5279  0889  28C3               	goto	l6454
  5280                           
  5281                           ;Switch_B1.c: 260: if (Sw->Adj == 1) {
  5282  088A  0A7B               	incf	_Sw,w
  5283  088B  0086               	movwf	6
  5284  088C  3001               	movlw	1	; select bank2/3
  5285  088D  0087               	movwf	7
  5286  088E  1C01               	btfss	1,0
  5287  088F  0008               	return
  5288                           
  5289                           ;Switch_B1.c: 261: Sw->Adj = 0;
  5290  0890  0A7B               	incf	_Sw,w
  5291  0891  0086               	movwf	6
  5292  0892  3001               	movlw	1	; select bank2/3
  5293  0893  0087               	movwf	7
  5294  0894  1001               	bcf	1,0
  5295                           
  5296                           ;Switch_B1.c: 262: setDimmerLights_TriggerAdj(sw, 1);
  5297  0895  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5298  0896  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5299  0897  0864               	movf	Sw_DimmerOffFunc@sw,w
  5300  0898  319E  26DF  3188   	fcall	_setDimmerLights_TriggerAdj
  5301                           
  5302                           ;Switch_B1.c: 263: setDimmerLights_AdjGo(sw, 0);
  5303  089B  0020               	movlb	0	; select bank0
  5304  089C  01A2               	clrf	setDimmerLights_AdjGo@command
  5305  089D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5306  089E  319E  26CF  3188   	fcall	_setDimmerLights_AdjGo
  5307                           
  5308                           ;Switch_B1.c: 265: product->Data[17]=product->Data[26 + sw];
  5309  08A1  0020               	movlb	0	; select bank0
  5310  08A2  0864               	movf	Sw_DimmerOffFunc@sw,w
  5311  08A3  3E1A               	addlw	26
  5312  08A4  077D               	addwf	_product,w
  5313  08A5  00E2               	movwf	??_Sw_DimmerOffFunc
  5314  08A6  0862               	movf	??_Sw_DimmerOffFunc,w
  5315  08A7  0086               	movwf	6
  5316  08A8  3001               	movlw	1	; select bank2/3
  5317  08A9  0087               	movwf	7
  5318  08AA  0801               	movf	1,w
  5319  08AB  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5320  08AC  087D               	movf	_product,w
  5321  08AD  3E11               	addlw	17
  5322  08AE  0086               	movwf	6
  5323  08AF  3001               	movlw	1	; select bank2/3
  5324  08B0  0087               	movwf	7
  5325  08B1  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5326  08B2  0081               	movwf	1
  5327                           
  5328                           ;Switch_B1.c: 266: setRF_DimmerLights(sw, Sw->Status);
  5329  08B3  087B               	movf	_Sw,w
  5330  08B4  0086               	movwf	6
  5331  08B5  3001               	movlw	1	; select bank2/3
  5332  08B6  0087               	movwf	7
  5333  08B7  3000               	movlw	0
  5334  08B8  1B01               	btfsc	1,6
  5335  08B9  3001               	movlw	1
  5336  08BA  00DD               	movwf	setRF_DimmerLights@on
  5337  08BB  0864               	movf	Sw_DimmerOffFunc@sw,w
  5338  08BC  3188  20E1  3188   	fcall	_setRF_DimmerLights
  5339                           
  5340                           ;Switch_B1.c: 267: setTxData(1);
  5341  08BF  3001               	movlw	1
  5342  08C0  318D  254D         	fcall	_setTxData
  5343                           
  5344                           ;Switch_B1.c: 269: }
  5345                           ;Switch_B1.c: 270: } else {
  5346  08C2  0008               	return
  5347  08C3                     l6454:	
  5348                           
  5349                           ;Switch_B1.c: 271: setDimmerLights_Trigger(sw, 1);
  5350  08C3  0020               	movlb	0	; select bank0
  5351  08C4  01A2               	clrf	setDimmerLights_Trigger@command
  5352  08C5  0AA2               	incf	setDimmerLights_Trigger@command,f
  5353  08C6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5354  08C7  319E  26BF  3188   	fcall	_setDimmerLights_Trigger
  5355                           
  5356                           ;Switch_B1.c: 272: setDimmerLights_Switch(sw, 0);
  5357  08CA  0020               	movlb	0	; select bank0
  5358  08CB  01A2               	clrf	setDimmerLights_Switch@command
  5359  08CC  0864               	movf	Sw_DimmerOffFunc@sw,w
  5360  08CD  319E  26AF  3188   	fcall	_setDimmerLights_Switch
  5361                           
  5362                           ;Switch_B1.c: 274: ;;
  5363                           ;Switch_B1.c: 275: setRF_DimmerLights(sw, Sw->Status);
  5364  08D0  087B               	movf	_Sw,w
  5365  08D1  0086               	movwf	6
  5366  08D2  3001               	movlw	1	; select bank2/3
  5367  08D3  0087               	movwf	7
  5368  08D4  3000               	movlw	0
  5369  08D5  1B01               	btfsc	1,6
  5370  08D6  3001               	movlw	1
  5371  08D7  0020               	movlb	0	; select bank0
  5372  08D8  00DD               	movwf	setRF_DimmerLights@on
  5373  08D9  0864               	movf	Sw_DimmerOffFunc@sw,w
  5374  08DA  3188  20E1  3188   	fcall	_setRF_DimmerLights
  5375                           
  5376                           ;Switch_B1.c: 276: setTxData(1);
  5377  08DD  3001               	movlw	1
  5378  08DE  318D  254D         	fcall	_setTxData
  5379  08E0  0008               	return
  5380  08E1                     __end_of_Sw_DimmerOffFunc:	
  5381                           
  5382                           	psect	text13
  5383  173F                     __ptext13:	
  5384 ;; *************** function _Sw_DimmerAdjFunc *****************
  5385 ;; Defined at:
  5386 ;;		line 283 in file "../src/Switch_B1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  sw              1    wreg     unsigned char 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;  sw              1    9[BANK0 ] unsigned char 
  5391 ;;  Idle            1    8[BANK0 ] unsigned char 
  5392 ;; Return value:  Size  Location     Type
  5393 ;;		None               void
  5394 ;; Registers used:
  5395 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;Total ram usage:        6 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    7
  5408 ;; This function calls:
  5409 ;;		_setDimmerLights_AdjGo
  5410 ;;		_setDimmerLights_TriggerAdj
  5411 ;;		_setRFSW_Status
  5412 ;; This function is called by:
  5413 ;;		_setSw_Main
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           
  5418                           ;psect for function _Sw_DimmerAdjFunc
  5419  173F                     _Sw_DimmerAdjFunc:	
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5423                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5424  173F  0020               	movlb	0	; select bank0
  5425  1740  00A9               	movwf	Sw_DimmerAdjFunc@sw
  5426                           
  5427                           ;Switch_B1.c: 284: char Idle = 1;
  5428  1741  01A8               	clrf	Sw_DimmerAdjFunc@Idle
  5429  1742  0AA8               	incf	Sw_DimmerAdjFunc@Idle,f
  5430                           
  5431                           ;Switch_B1.c: 287: if (sw == 1) {
  5432  1743  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5433  1744  3A01               	xorlw	1
  5434  1745  1D03               	skipz
  5435  1746  2F52               	goto	l6402
  5436                           
  5437                           ;Switch_B1.c: 288: Idle = (DimmerLights2.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5438  1747  01A5               	clrf	_Sw_DimmerAdjFunc$5043
  5439  1748  0022               	movlb	2	; select bank2
  5440  1749  1DB7               	btfss	(_DimmerLights2^(0+256)+8),3
  5441  174A  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5442  174B  2F4F               	goto	l6400
  5443  174C  0020               	movlb	0	; select bank0
  5444  174D  01A5               	clrf	_Sw_DimmerAdjFunc$5043
  5445  174E  0AA5               	incf	_Sw_DimmerAdjFunc$5043,f
  5446  174F                     l6400:	
  5447  174F  0020               	movlb	0	; select bank0
  5448  1750  0825               	movf	_Sw_DimmerAdjFunc$5043,w
  5449  1751  2F6F               	goto	L4
  5450  1752                     l6402:	
  5451                           ;Switch_B1.c: 289: } else if (sw == 2) {
  5452                           
  5453  1752  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5454  1753  3A02               	xorlw	2
  5455  1754  1D03               	skipz
  5456  1755  2F61               	goto	l6414
  5457                           
  5458                           ;Switch_B1.c: 290: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights3.AdjGo == 1) ? 0 : 1
      +                          ;
  5459  1756  01A6               	clrf	_Sw_DimmerAdjFunc$5044
  5460  1757  0022               	movlb	2	; select bank2
  5461  1758  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5462  1759  19C6               	btfsc	(_DimmerLights3^(0+256)+8),3
  5463  175A  2F5E               	goto	l6412
  5464  175B  0020               	movlb	0	; select bank0
  5465  175C  01A6               	clrf	_Sw_DimmerAdjFunc$5044
  5466  175D  0AA6               	incf	_Sw_DimmerAdjFunc$5044,f
  5467  175E                     l6412:	
  5468  175E  0020               	movlb	0	; select bank0
  5469  175F  0826               	movf	_Sw_DimmerAdjFunc$5044,w
  5470  1760  2F6F               	goto	L4
  5471  1761                     l6414:	
  5472                           ;Switch_B1.c: 291: } else if (sw == 3) {
  5473                           
  5474  1761  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5475  1762  3A03               	xorlw	3
  5476  1763  1D03               	skipz
  5477  1764  2F72               	goto	l2710
  5478                           
  5479                           ;Switch_B1.c: 292: Idle = (DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1) ? 0 : 1
      +                          ;
  5480  1765  01A7               	clrf	_Sw_DimmerAdjFunc$5045
  5481  1766  0022               	movlb	2	; select bank2
  5482  1767  1DA8               	btfss	(_DimmerLights1^(0+256)+8),3
  5483  1768  19B7               	btfsc	(_DimmerLights2^(0+256)+8),3
  5484  1769  2F6D               	goto	l6424
  5485  176A  0020               	movlb	0	; select bank0
  5486  176B  01A7               	clrf	_Sw_DimmerAdjFunc$5045
  5487  176C  0AA7               	incf	_Sw_DimmerAdjFunc$5045,f
  5488  176D                     l6424:	
  5489  176D  0020               	movlb	0	; select bank0
  5490  176E  0827               	movf	_Sw_DimmerAdjFunc$5045,w
  5491  176F                     L4:	
  5492  176F  00A4               	movwf	??_Sw_DimmerAdjFunc
  5493  1770  0824               	movf	??_Sw_DimmerAdjFunc,w
  5494  1771  00A8               	movwf	Sw_DimmerAdjFunc@Idle
  5495  1772                     l2710:	
  5496                           
  5497                           ;Switch_B1.c: 293: }
  5498                           ;Switch_B1.c: 304: if (Idle == 1) {
  5499  1772  0828               	movf	Sw_DimmerAdjFunc@Idle,w
  5500  1773  3A01               	xorlw	1
  5501  1774  1D03               	skipz
  5502  1775  0008               	return
  5503                           
  5504                           ;Switch_B1.c: 305: if (Sw->Flag == 1) {
  5505  1776  087B               	movf	_Sw,w
  5506  1777  0086               	movwf	6
  5507  1778  3001               	movlw	1	; select bank2/3
  5508  1779  0087               	movwf	7
  5509  177A  1F81               	btfss	1,7
  5510  177B  0008               	return
  5511                           
  5512                           ;Switch_B1.c: 306: Sw->Hold1 = 1;
  5513  177C  087B               	movf	_Sw,w
  5514  177D  0086               	movwf	6
  5515  177E  3001               	movlw	1	; select bank2/3
  5516  177F  0087               	movwf	7
  5517  1780  1581               	bsf	1,3
  5518                           
  5519                           ;Switch_B1.c: 307: Sw->Adj = 1;
  5520  1781  0A7B               	incf	_Sw,w
  5521  1782  0086               	movwf	6
  5522  1783  3001               	movlw	1	; select bank2/3
  5523  1784  0087               	movwf	7
  5524  1785  1401               	bsf	1,0
  5525                           
  5526                           ;Switch_B1.c: 308: Sw->Status = 1;
  5527  1786  087B               	movf	_Sw,w
  5528  1787  0086               	movwf	6
  5529  1788  3001               	movlw	1	; select bank2/3
  5530  1789  0087               	movwf	7
  5531  178A  1701               	bsf	1,6
  5532                           
  5533                           ;Switch_B1.c: 309: setRFSW_Status(sw, 1);
  5534  178B  01A2               	clrf	setRFSW_Status@command
  5535  178C  0AA2               	incf	setRFSW_Status@command,f
  5536  178D  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5537  178E  319E  2670  3197   	fcall	_setRFSW_Status
  5538                           
  5539                           ;Switch_B1.c: 311: setDimmerLights_TriggerAdj(sw, 1);
  5540  1791  0020               	movlb	0	; select bank0
  5541  1792  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5542  1793  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5543  1794  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5544  1795  319E  26DF  3197   	fcall	_setDimmerLights_TriggerAdj
  5545                           
  5546                           ;Switch_B1.c: 312: setDimmerLights_AdjGo(sw, 1);
  5547  1798  0020               	movlb	0	; select bank0
  5548  1799  01A2               	clrf	setDimmerLights_AdjGo@command
  5549  179A  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5550  179B  0829               	movf	Sw_DimmerAdjFunc@sw,w
  5551  179C  319E  26CF         	fcall	_setDimmerLights_AdjGo
  5552  179E  0008               	return
  5553  179F                     __end_of_Sw_DimmerAdjFunc:	
  5554                           
  5555                           	psect	text14
  5556  1EDF                     __ptext14:	
  5557 ;; *************** function _setDimmerLights_TriggerAdj *****************
  5558 ;; Defined at:
  5559 ;;		line 711 in file "../src/Dimmer_B1.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  lights          1    wreg     unsigned char 
  5562 ;;  command         1    2[BANK0 ] unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  lights          1    3[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        2 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		_DimmerLightsPointSelect
  5583 ;; This function is called by:
  5584 ;;		_Sw_DimmerOffFunc
  5585 ;;		_Sw_DimmerAdjFunc
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function _setDimmerLights_TriggerAdj
  5591  1EDF                     _setDimmerLights_TriggerAdj:	
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  5595                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  5596  1EDF  0020               	movlb	0	; select bank0
  5597  1EE0  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  5598                           
  5599                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  5600  1EE1  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  5601  1EE2  3190  20A7         	fcall	_DimmerLightsPointSelect
  5602                           
  5603                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  5604  1EE4  0878               	movf	_DimmerLights,w
  5605  1EE5  3E08               	addlw	8
  5606  1EE6  0086               	movwf	6
  5607  1EE7  3001               	movlw	1	; select bank2/3
  5608  1EE8  0087               	movwf	7
  5609  1EE9  0020               	movlb	0	; select bank0
  5610  1EEA  0822               	movf	setDimmerLights_TriggerAdj@command,w
  5611  1EEB  1201               	bcf	1,4
  5612  1EEC  1D03               	skipz
  5613  1EED  1601               	bsf	1,4
  5614  1EEE  0008               	return
  5615  1EEF                     __end_of_setDimmerLights_TriggerAdj:	
  5616                           
  5617                           	psect	text15
  5618  1ECF                     __ptext15:	
  5619 ;; *************** function _setDimmerLights_AdjGo *****************
  5620 ;; Defined at:
  5621 ;;		line 699 in file "../src/Dimmer_B1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  lights          1    wreg     unsigned char 
  5624 ;;  command         1    2[BANK0 ] unsigned char 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  lights          1    3[BANK0 ] unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;		None               void
  5629 ;; Registers used:
  5630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5636 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5640 ;;Total ram usage:        2 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    6
  5643 ;; This function calls:
  5644 ;;		_DimmerLightsPointSelect
  5645 ;; This function is called by:
  5646 ;;		_Sw_DimmerOffFunc
  5647 ;;		_Sw_DimmerAdjFunc
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651                           
  5652                           ;psect for function _setDimmerLights_AdjGo
  5653  1ECF                     _setDimmerLights_AdjGo:	
  5654                           
  5655                           ;incstack = 0
  5656                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5657                           ;setDimmerLights_AdjGo@lights stored from wreg
  5658  1ECF  0020               	movlb	0	; select bank0
  5659  1ED0  00A3               	movwf	setDimmerLights_AdjGo@lights
  5660                           
  5661                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  5662  1ED1  0823               	movf	setDimmerLights_AdjGo@lights,w
  5663  1ED2  3190  20A7         	fcall	_DimmerLightsPointSelect
  5664                           
  5665                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  5666  1ED4  0878               	movf	_DimmerLights,w
  5667  1ED5  3E08               	addlw	8
  5668  1ED6  0086               	movwf	6
  5669  1ED7  3001               	movlw	1	; select bank2/3
  5670  1ED8  0087               	movwf	7
  5671  1ED9  0020               	movlb	0	; select bank0
  5672  1EDA  0822               	movf	setDimmerLights_AdjGo@command,w
  5673  1EDB  1181               	bcf	1,3
  5674  1EDC  1D03               	skipz
  5675  1EDD  1581               	bsf	1,3
  5676  1EDE  0008               	return
  5677  1EDF                     __end_of_setDimmerLights_AdjGo:	
  5678                           
  5679                           	psect	text16
  5680  1F11                     __ptext16:	
  5681 ;; *************** function _Switch_Initialization *****************
  5682 ;; Defined at:
  5683 ;;		line 37 in file "../src/Switch_B1.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    8
  5704 ;; This function calls:
  5705 ;;		_TouchPower
  5706 ;;		_setSw_Initialization
  5707 ;; This function is called by:
  5708 ;;		_main
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _Switch_Initialization
  5714  1F11                     _Switch_Initialization:	
  5715                           
  5716                           ;Switch_B1.c: 38: TouchPower();
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5720  1F11  319D  25A9  319F   	fcall	_TouchPower
  5721                           
  5722                           ;Switch_B1.c: 40: WPUB1 = 0;
  5723  1F14  0024               	movlb	4	; select bank4
  5724  1F15  108D               	bcf	13,1	;volatile
  5725                           
  5726                           ;Switch_B1.c: 49: setSw_Initialization(1);
  5727  1F16  3001               	movlw	1
  5728  1F17  3187  27F8  319F   	fcall	_setSw_Initialization
  5729                           
  5730                           ;Switch_B1.c: 52: setSw_Initialization(2);
  5731  1F1A  3002               	movlw	2
  5732  1F1B  3187  27F8  319F   	fcall	_setSw_Initialization
  5733                           
  5734                           ;Switch_B1.c: 55: setSw_Initialization(3);
  5735  1F1E  3003               	movlw	3
  5736  1F1F  3187  27F8         	fcall	_setSw_Initialization
  5737  1F21  0008               	return
  5738  1F22                     __end_of_Switch_Initialization:	
  5739                           
  5740                           	psect	text17
  5741  07F8                     __ptext17:	
  5742 ;; *************** function _setSw_Initialization *****************
  5743 ;; Defined at:
  5744 ;;		line 77 in file "../src/Switch_B1.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  sw              1    wreg     unsigned char 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  sw              1    4[BANK0 ] unsigned char 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        1 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    7
  5765 ;; This function calls:
  5766 ;;		_setLED
  5767 ;; This function is called by:
  5768 ;;		_Switch_Initialization
  5769 ;; This function uses a non-reentrant model
  5770 ;;
  5771                           
  5772                           
  5773                           ;psect for function _setSw_Initialization
  5774  07F8                     _setSw_Initialization:	
  5775                           
  5776                           ;incstack = 0
  5777                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5778                           ;setSw_Initialization@sw stored from wreg
  5779  07F8  0020               	movlb	0	; select bank0
  5780  07F9  00A4               	movwf	setSw_Initialization@sw
  5781                           
  5782                           ;Switch_B1.c: 78: setLED(sw, 1);
  5783  07FA  01A2               	clrf	setLED@command
  5784  07FB  0AA2               	incf	setLED@command,f
  5785  07FC  0824               	movf	setSw_Initialization@sw,w
  5786  07FD  3189  21BB         	fcall	_setLED
  5787  07FF  0008               	return
  5788  0800                     __end_of_setSw_Initialization:	
  5789                           
  5790                           	psect	text18
  5791  1DA9                     __ptext18:	
  5792 ;; *************** function _TouchPower *****************
  5793 ;; Defined at:
  5794 ;;		line 10 in file "../src/Switch_B1.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;		None
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;		None               void
  5801 ;; Registers used:
  5802 ;;		None
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;Total ram usage:        0 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    5
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_Switch_Initialization
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _TouchPower
  5824  1DA9                     _TouchPower:	
  5825  1DA9                     l2629:	
  5826                           ;Switch_B1.c: 11: while (RC5 == 0)
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _TouchPower: []
  5830                           
  5831  1DA9  0020               	movlb	0	; select bank0
  5832  1DAA  1A8E               	btfsc	14,5	;volatile
  5833  1DAB  0008               	return
  5834                           
  5835                           ;Switch_B1.c: 12: RC5 = 1;
  5836  1DAC  168E               	bsf	14,5	;volatile
  5837  1DAD  2DA9               	goto	l2629
  5838  1DAE                     __end_of_TouchPower:	
  5839                           
  5840                           	psect	text19
  5841  1DA5                     __ptext19:	
  5842 ;; *************** function _RF_Main *****************
  5843 ;; Defined at:
  5844 ;;		line 26 in file "../src/RF_Control_B1.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;		None               void
  5851 ;; Registers used:
  5852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;Total ram usage:        0 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:   14
  5865 ;; This function calls:
  5866 ;;		_setRF_Main
  5867 ;; This function is called by:
  5868 ;;		_main
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _RF_Main
  5874  1DA5                     _RF_Main:	
  5875                           
  5876                           ;RF_Control_B1.c: 28: setRF_Main(1);
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5880  1DA5  3001               	movlw	1
  5881  1DA6  3185  256A         	fcall	_setRF_Main
  5882  1DA8  0008               	return
  5883  1DA9                     __end_of_RF_Main:	
  5884                           
  5885                           	psect	text20
  5886  056A                     __ptext20:	
  5887 ;; *************** function _setRF_Main *****************
  5888 ;; Defined at:
  5889 ;;		line 64 in file "../src/RF_Control_B1.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  rf              1    wreg     unsigned char 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  rf              1   74[BANK0 ] unsigned char 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;		None               void
  5896 ;; Registers used:
  5897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;Total ram usage:        3 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:   13
  5910 ;; This function calls:
  5911 ;;		_CC2500_RxData
  5912 ;;		_CC2500_TxData
  5913 ;;		_CC2500_WriteCommand
  5914 ;;		_RF_RxDisable
  5915 ;;		_RfPointSelect
  5916 ;;		_getRxData
  5917 ;; This function is called by:
  5918 ;;		_RF_Main
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           
  5923                           ;psect for function _setRF_Main
  5924  056A                     _setRF_Main:	
  5925                           
  5926                           ;incstack = 0
  5927                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5928                           ;setRF_Main@rf stored from wreg
  5929  056A  0020               	movlb	0	; select bank0
  5930  056B  00EA               	movwf	setRF_Main@rf
  5931                           
  5932                           ;RF_Control_B1.c: 65: RfPointSelect(rf);
  5933  056C  086A               	movf	setRF_Main@rf,w
  5934  056D  319E  2627  3185   	fcall	_RfPointSelect
  5935                           
  5936                           ;RF_Control_B1.c: 66: if (RF->Enable == 1) {
  5937  0570  087A               	movf	_RF,w
  5938  0571  0086               	movwf	6
  5939  0572  0187               	clrf	7
  5940  0573  1C01               	btfss	1,0
  5941  0574  0008               	return
  5942                           
  5943                           ;RF_Control_B1.c: 69: if (Buz->GO == 0) {
  5944  0575  0021               	movlb	1	; select bank1
  5945  0576  0837               	movf	_Buz^(0+128),w
  5946  0577  0086               	movwf	6
  5947  0578  3001               	movlw	1	; select bank2/3
  5948  0579  0087               	movwf	7
  5949  057A  1881               	btfsc	1,1
  5950  057B  0008               	return
  5951                           
  5952                           ;RF_Control_B1.c: 71: RF->Key = (RA0 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  5953  057C  0020               	movlb	0	; select bank0
  5954  057D  01EB               	clrf	_setRF_Main$4228
  5955  057E  0AEB               	incf	_setRF_Main$4228,f
  5956  057F  1C0C               	btfss	12,0	;volatile
  5957  0580  1B0C               	btfsc	12,6	;volatile
  5958  0581  2D84               	goto	l6880
  5959  0582  1E0C               	btfss	12,4	;volatile
  5960  0583  01EB               	clrf	_setRF_Main$4228
  5961  0584                     l6880:	
  5962  0584  087A               	movf	_RF,w
  5963  0585  0086               	movwf	6
  5964  0586  0187               	clrf	7
  5965  0587  086B               	movf	_setRF_Main$4228,w
  5966  0588  1381               	bcf	1,7
  5967  0589  1D03               	skipz
  5968  058A  1781               	bsf	1,7
  5969                           
  5970                           ;RF_Control_B1.c: 81: if (RF->Key == 1 && RF->Learn == 0) {
  5971  058B  087A               	movf	_RF,w
  5972  058C  0086               	movwf	6
  5973  058D  0187               	clrf	7
  5974  058E  1F81               	btfss	1,7
  5975  058F  2D9D               	goto	l6890
  5976  0590  087A               	movf	_RF,w
  5977  0591  0086               	movwf	6
  5978  0592  0187               	clrf	7
  5979  0593  1B01               	btfsc	1,6
  5980  0594  2D9D               	goto	l6890
  5981                           
  5982                           ;RF_Control_B1.c: 82: RF->Run = 1;
  5983  0595  0A7A               	incf	_RF,w
  5984  0596  0086               	movwf	6
  5985  0597  0187               	clrf	7
  5986  0598  1481               	bsf	1,1
  5987                           
  5988                           ;RF_Control_B1.c: 83: RF_RxDisable(1);
  5989  0599  3001               	movlw	1
  5990  059A  3191  21C8         	fcall	_RF_RxDisable
  5991                           
  5992                           ;RF_Control_B1.c: 84: } else {
  5993  059C  0008               	return
  5994  059D                     l6890:	
  5995                           
  5996                           ;RF_Control_B1.c: 85: if (RF->Run == 1 && RF->Learn == 0) {
  5997  059D  0A7A               	incf	_RF,w
  5998  059E  0086               	movwf	6
  5999  059F  0187               	clrf	7
  6000  05A0  1C81               	btfss	1,1
  6001  05A1  2DC2               	goto	l6902
  6002  05A2  087A               	movf	_RF,w
  6003  05A3  0086               	movwf	6
  6004  05A4  0187               	clrf	7
  6005  05A5  1B01               	btfsc	1,6
  6006  05A6  2DC2               	goto	l6902
  6007                           
  6008                           ;RF_Control_B1.c: 86: RF->Count++;
  6009  05A7  3001               	movlw	1
  6010  05A8  0020               	movlb	0	; select bank0
  6011  05A9  00E9               	movwf	??_setRF_Main
  6012  05AA  087A               	movf	_RF,w
  6013  05AB  3E03               	addlw	3
  6014  05AC  0086               	movwf	6
  6015  05AD  0187               	clrf	7
  6016  05AE  0869               	movf	??_setRF_Main,w
  6017  05AF  0781               	addwf	1,f
  6018                           
  6019                           ;RF_Control_B1.c: 87: if (RF->Count == 5) {
  6020  05B0  087A               	movf	_RF,w
  6021  05B1  3E03               	addlw	3
  6022  05B2  0086               	movwf	6
  6023  05B3  0187               	clrf	7
  6024  05B4  0801               	movf	1,w
  6025  05B5  3A05               	xorlw	5
  6026  05B6  1D03               	skipz
  6027  05B7  0008               	return
  6028                           
  6029                           ;RF_Control_B1.c: 88: RF->Count = 0;
  6030  05B8  087A               	movf	_RF,w
  6031  05B9  3E03               	addlw	3
  6032  05BA  0086               	movwf	6
  6033  05BB  0187               	clrf	7
  6034  05BC  0181               	clrf	1
  6035                           
  6036                           ;RF_Control_B1.c: 89: RF->Run = 0;
  6037  05BD  0A7A               	incf	_RF,w
  6038  05BE  0086               	movwf	6
  6039  05BF  0187               	clrf	7
  6040  05C0  1081               	bcf	1,1
  6041                           
  6042                           ;RF_Control_B1.c: 90: }
  6043                           ;RF_Control_B1.c: 91: } else {
  6044  05C1  0008               	return
  6045  05C2                     l6902:	
  6046                           
  6047                           ;RF_Control_B1.c: 92: RF->Count = 0;
  6048  05C2  087A               	movf	_RF,w
  6049  05C3  3E03               	addlw	3
  6050  05C4  0086               	movwf	6
  6051  05C5  0187               	clrf	7
  6052  05C6  0181               	clrf	1
  6053                           
  6054                           ;RF_Control_B1.c: 93: RF->Run = 0;
  6055  05C7  0A7A               	incf	_RF,w
  6056  05C8  0086               	movwf	6
  6057  05C9  0187               	clrf	7
  6058  05CA  1081               	bcf	1,1
  6059                           
  6060                           ;RF_Control_B1.c: 95: if (RF->ReceiveGO == 1) {
  6061  05CB  087A               	movf	_RF,w
  6062  05CC  0086               	movwf	6
  6063  05CD  0187               	clrf	7
  6064  05CE  1C81               	btfss	1,1
  6065  05CF  2DDF               	goto	l6914
  6066                           
  6067                           ;RF_Control_B1.c: 96: RF->ReceiveGO = 0;
  6068  05D0  087A               	movf	_RF,w
  6069  05D1  0086               	movwf	6
  6070  05D2  0187               	clrf	7
  6071  05D3  1081               	bcf	1,1
  6072                           
  6073                           ;RF_Control_B1.c: 97: CC2500_RxData();
  6074  05D4  3187  2705  3185   	fcall	_CC2500_RxData
  6075                           
  6076                           ;RF_Control_B1.c: 104: getRxData(1);
  6077  05D7  3001               	movlw	1
  6078  05D8  3196  2643         	fcall	_getRxData
  6079                           
  6080                           ;RF_Control_B1.c: 107: RF->Run = 1;
  6081  05DA  0A7A               	incf	_RF,w
  6082  05DB  0086               	movwf	6
  6083  05DC  0187               	clrf	7
  6084  05DD  1481               	bsf	1,1
  6085                           
  6086                           ;RF_Control_B1.c: 108: } else {
  6087  05DE  0008               	return
  6088  05DF                     l6914:	
  6089                           
  6090                           ;RF_Control_B1.c: 109: if (RF->Learn == 0) {
  6091  05DF  087A               	movf	_RF,w
  6092  05E0  0086               	movwf	6
  6093  05E1  0187               	clrf	7
  6094  05E2  1B01               	btfsc	1,6
  6095  05E3  2E21               	goto	l6942
  6096                           
  6097                           ;RF_Control_B1.c: 110: if (RF->TransceiveGO == 1) {
  6098  05E4  087A               	movf	_RF,w
  6099  05E5  0086               	movwf	6
  6100  05E6  0187               	clrf	7
  6101  05E7  1D01               	btfss	1,2
  6102  05E8  2E04               	goto	l6928
  6103                           
  6104                           ;RF_Control_B1.c: 111: RF->TransceiveGO = 0;
  6105  05E9  087A               	movf	_RF,w
  6106  05EA  0086               	movwf	6
  6107  05EB  0187               	clrf	7
  6108  05EC  1101               	bcf	1,2
  6109                           
  6110                           ;RF_Control_B1.c: 112: RF->RxStatus = 0;
  6111  05ED  087A               	movf	_RF,w
  6112  05EE  0086               	movwf	6
  6113  05EF  0187               	clrf	7
  6114  05F0  1181               	bcf	1,3
  6115                           
  6116                           ;RF_Control_B1.c: 113: RF->ReceiveGO = 0;
  6117  05F1  087A               	movf	_RF,w
  6118  05F2  0086               	movwf	6
  6119  05F3  0187               	clrf	7
  6120  05F4  1081               	bcf	1,1
  6121                           
  6122                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x36);
  6123  05F5  3036               	movlw	54
  6124  05F6  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6125                           
  6126                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x3B);
  6127  05F9  303B               	movlw	59
  6128  05FA  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6129                           
  6130                           ;RF_Control_B1.c: 117: CC2500_TxData();
  6131  05FD  3194  249C         	fcall	_CC2500_TxData
  6132                           
  6133                           ;RF_Control_B1.c: 118: RF->Run = 1;
  6134  05FF  0A7A               	incf	_RF,w
  6135  0600  0086               	movwf	6
  6136  0601  0187               	clrf	7
  6137  0602  1481               	bsf	1,1
  6138                           
  6139                           ;RF_Control_B1.c: 119: } else {
  6140  0603  0008               	return
  6141  0604                     l6928:	
  6142                           
  6143                           ;RF_Control_B1.c: 121: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6144  0604  087A               	movf	_RF,w
  6145  0605  0086               	movwf	6
  6146  0606  0187               	clrf	7
  6147  0607  1981               	btfsc	1,3
  6148  0608  0008               	return
  6149  0609  087A               	movf	_RF,w
  6150  060A  0086               	movwf	6
  6151  060B  0187               	clrf	7
  6152  060C  1881               	btfsc	1,1
  6153  060D  0008               	return
  6154                           
  6155                           ;RF_Control_B1.c: 122: RF->RxStatus = 1;
  6156  060E  087A               	movf	_RF,w
  6157  060F  0086               	movwf	6
  6158  0610  0187               	clrf	7
  6159  0611  1581               	bsf	1,3
  6160                           
  6161                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6162  0612  3036               	movlw	54
  6163  0613  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6164                           
  6165                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6166  0616  303A               	movlw	58
  6167  0617  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6168                           
  6169                           ;RF_Control_B1.c: 125: CC2500_WriteCommand(0x34);
  6170  061A  3034               	movlw	52
  6171  061B  319E  267F         	fcall	_CC2500_WriteCommand
  6172                           
  6173                           ;RF_Control_B1.c: 127: RB5 = RB5 == 1 ? 0 : 1;
  6174  061D  3020               	movlw	32
  6175  061E  0020               	movlb	0	; select bank0
  6176  061F  068D               	xorwf	13,f
  6177                           
  6178                           ;RF_Control_B1.c: 128: }
  6179                           ;RF_Control_B1.c: 131: }
  6180                           ;RF_Control_B1.c: 132: } else {
  6181  0620  0008               	return
  6182  0621                     l6942:	
  6183                           
  6184                           ;RF_Control_B1.c: 134: if (RF->RxStatus == 0 && RF->ReceiveGO == 0) {
  6185  0621  087A               	movf	_RF,w
  6186  0622  0086               	movwf	6
  6187  0623  0187               	clrf	7
  6188  0624  1981               	btfsc	1,3
  6189  0625  0008               	return
  6190  0626  087A               	movf	_RF,w
  6191  0627  0086               	movwf	6
  6192  0628  0187               	clrf	7
  6193  0629  1881               	btfsc	1,1
  6194  062A  0008               	return
  6195                           
  6196                           ;RF_Control_B1.c: 135: RF->RxStatus = 1;
  6197  062B  087A               	movf	_RF,w
  6198  062C  0086               	movwf	6
  6199  062D  0187               	clrf	7
  6200  062E  1581               	bsf	1,3
  6201                           
  6202                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6203  062F  3036               	movlw	54
  6204  0630  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6205                           
  6206                           ;RF_Control_B1.c: 137: CC2500_WriteCommand(0x3A);
  6207  0633  303A               	movlw	58
  6208  0634  319E  267F  3185   	fcall	_CC2500_WriteCommand
  6209                           
  6210                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x34);
  6211  0637  3034               	movlw	52
  6212  0638  319E  267F         	fcall	_CC2500_WriteCommand
  6213                           
  6214                           ;RF_Control_B1.c: 140: RB5 = RB5 == 1 ? 0 : 1;
  6215  063A  3020               	movlw	32
  6216  063B  0020               	movlb	0	; select bank0
  6217  063C  068D               	xorwf	13,f
  6218  063D  0008               	return
  6219  063E                     __end_of_setRF_Main:	
  6220                           
  6221                           	psect	text21
  6222  1643                     __ptext21:	
  6223 ;; *************** function _getRxData *****************
  6224 ;; Defined at:
  6225 ;;		line 228 in file "../src/RF_Control_B1.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  rf              1    wreg     unsigned char 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;  rf              1   72[BANK0 ] unsigned char 
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:   12
  6246 ;; This function calls:
  6247 ;;		_RfPointSelect
  6248 ;;		_setControl_Lights_Table
  6249 ;;		_setLog_Code
  6250 ;; This function is called by:
  6251 ;;		_setRF_Main
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           
  6256                           ;psect for function _getRxData
  6257  1643                     _getRxData:	
  6258                           
  6259                           ;incstack = 0
  6260                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6261                           ;getRxData@rf stored from wreg
  6262  1643  0020               	movlb	0	; select bank0
  6263  1644  00E8               	movwf	getRxData@rf
  6264                           
  6265                           ;RF_Control_B1.c: 229: RfPointSelect(rf);
  6266  1645  0868               	movf	getRxData@rf,w
  6267  1646  319E  2627  3196   	fcall	_RfPointSelect
  6268                           
  6269                           ;RF_Control_B1.c: 230: if (RF->Learn) {
  6270  1649  087A               	movf	_RF,w
  6271  164A  0086               	movwf	6
  6272  164B  0187               	clrf	7
  6273  164C  1F01               	btfss	1,6
  6274  164D  2E5A               	goto	l6298
  6275                           
  6276                           ;RF_Control_B1.c: 231: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6277  164E  0021               	movlb	1	; select bank1
  6278  164F  08A0               	movf	_RF_Data^(0+128),f
  6279  1650  1D03               	skipz
  6280  1651  0008               	return
  6281  1652  0821               	movf	(_RF_Data^(0+128)+1),w
  6282  1653  3A64               	xorlw	100
  6283  1654  1D03               	skipz
  6284  1655  0008               	return
  6285                           
  6286                           ;RF_Control_B1.c: 232: {
  6287                           ;RF_Control_B1.c: 233: setLog_Code(1);
  6288  1656  3001               	movlw	1
  6289  1657  3195  25B2         	fcall	_setLog_Code
  6290                           
  6291                           ;RF_Control_B1.c: 234: }
  6292                           ;RF_Control_B1.c: 235: } else {
  6293  1659  0008               	return
  6294  165A                     l6298:	
  6295                           
  6296                           ;RF_Control_B1.c: 236: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6297  165A  0021               	movlb	1	; select bank1
  6298  165B  08A0               	movf	_RF_Data^(0+128),f
  6299  165C  1D03               	skipz
  6300  165D  0008               	return
  6301  165E  0821               	movf	(_RF_Data^(0+128)+1),w
  6302  165F  3A02               	xorlw	2
  6303  1660  1D03               	skipz
  6304  1661  0008               	return
  6305                           
  6306                           ;RF_Control_B1.c: 237: {
  6307                           ;RF_Control_B1.c: 238: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6308  1662  082C               	movf	(_RF_Data^(0+128)+12),w
  6309  1663  3AFF               	xorlw	255
  6310  1664  1D03               	skipz
  6311  1665  2E70               	goto	l6310
  6312  1666  082D               	movf	(_RF_Data^(0+128)+13),w
  6313  1667  3AFF               	xorlw	255
  6314  1668  1D03               	skipz
  6315  1669  2E70               	goto	l6310
  6316  166A  082E               	movf	(_RF_Data^(0+128)+14),w
  6317  166B  3AFF               	xorlw	255
  6318  166C  1D03               	skipz
  6319  166D  2E70               	goto	l6310
  6320                           
  6321                           ;RF_Control_B1.c: 239: __nop();
  6322  166E  0000               	nop
  6323                           
  6324                           ;RF_Control_B1.c: 240: } else {
  6325  166F  0008               	return
  6326  1670                     l6310:	
  6327                           
  6328                           ;RF_Control_B1.c: 241: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6329  1670  087D               	movf	_product,w
  6330  1671  3E0C               	addlw	12
  6331  1672  0086               	movwf	6
  6332  1673  3001               	movlw	1	; select bank2/3
  6333  1674  0087               	movwf	7
  6334  1675  0021               	movlb	1	; select bank1
  6335  1676  082C               	movf	(_RF_Data^(0+128)+12),w
  6336  1677  0601               	xorwf	1,w
  6337  1678  1D03               	skipz
  6338  1679  0008               	return
  6339  167A  087D               	movf	_product,w
  6340  167B  3E0D               	addlw	13
  6341  167C  0086               	movwf	6
  6342  167D  3001               	movlw	1	; select bank2/3
  6343  167E  0087               	movwf	7
  6344  167F  082D               	movf	(_RF_Data^(0+128)+13),w
  6345  1680  0601               	xorwf	1,w
  6346  1681  1D03               	skipz
  6347  1682  0008               	return
  6348  1683  087D               	movf	_product,w
  6349  1684  3E0E               	addlw	14
  6350  1685  0086               	movwf	6
  6351  1686  3001               	movlw	1	; select bank2/3
  6352  1687  0087               	movwf	7
  6353  1688  082E               	movf	(_RF_Data^(0+128)+14),w
  6354  1689  0601               	xorwf	1,w
  6355  168A  1D03               	skipz
  6356  168B  0008               	return
  6357                           
  6358                           ;RF_Control_B1.c: 242: setControl_Lights_Table(1);
  6359  168C  3001               	movlw	1
  6360  168D  318F  274A         	fcall	_setControl_Lights_Table
  6361                           
  6362                           ;RF_Control_B1.c: 249: {
  6363                           ;RF_Control_B1.c: 250: ;
  6364                           
  6365                           ;RF_Control_B1.c: 246: {
  6366                           ;RF_Control_B1.c: 247: ;
  6367                           ;RF_Control_B1.c: 248: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6368                           
  6369                           ;RF_Control_B1.c: 243: }
  6370                           ;RF_Control_B1.c: 244: }
  6371                           ;RF_Control_B1.c: 245: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6372  168F  0008               	return
  6373  1690                     __end_of_getRxData:	
  6374                           
  6375                           	psect	text22
  6376  15B2                     __ptext22:	
  6377 ;; *************** function _setLog_Code *****************
  6378 ;; Defined at:
  6379 ;;		line 260 in file "../src/RF_Control_B1.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;  rf              1    wreg     unsigned char 
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;  rf              1   14[BANK0 ] unsigned char 
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;Total ram usage:        2 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; Hardware stack levels required when called:    7
  6400 ;; This function calls:
  6401 ;;		_RfPointSelect
  6402 ;;		_setBuz
  6403 ;; This function is called by:
  6404 ;;		_getRxData
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _setLog_Code
  6410  15B2                     _setLog_Code:	
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6414                           ;setLog_Code@rf stored from wreg
  6415  15B2  0020               	movlb	0	; select bank0
  6416  15B3  00AE               	movwf	setLog_Code@rf
  6417                           
  6418                           ;RF_Control_B1.c: 261: RfPointSelect(rf);
  6419  15B4  082E               	movf	setLog_Code@rf,w
  6420  15B5  319E  2627  3195   	fcall	_RfPointSelect
  6421                           
  6422                           ;RF_Control_B1.c: 262: product->Data[12]=RF_Data[12];
  6423  15B8  0021               	movlb	1	; select bank1
  6424  15B9  082C               	movf	(_RF_Data^(0+128)+12),w
  6425  15BA  0020               	movlb	0	; select bank0
  6426  15BB  00AD               	movwf	??_setLog_Code
  6427  15BC  087D               	movf	_product,w
  6428  15BD  3E0C               	addlw	12
  6429  15BE  0086               	movwf	6
  6430  15BF  3001               	movlw	1	; select bank2/3
  6431  15C0  0087               	movwf	7
  6432  15C1  082D               	movf	??_setLog_Code,w
  6433  15C2  0081               	movwf	1
  6434                           
  6435                           ;RF_Control_B1.c: 263: product->Data[13]=RF_Data[13];
  6436  15C3  0021               	movlb	1	; select bank1
  6437  15C4  082D               	movf	(_RF_Data^(0+128)+13),w
  6438  15C5  0020               	movlb	0	; select bank0
  6439  15C6  00AD               	movwf	??_setLog_Code
  6440  15C7  087D               	movf	_product,w
  6441  15C8  3E0D               	addlw	13
  6442  15C9  0086               	movwf	6
  6443  15CA  3001               	movlw	1	; select bank2/3
  6444  15CB  0087               	movwf	7
  6445  15CC  082D               	movf	??_setLog_Code,w
  6446  15CD  0081               	movwf	1
  6447                           
  6448                           ;RF_Control_B1.c: 264: product->Data[14]=RF_Data[14];
  6449  15CE  0021               	movlb	1	; select bank1
  6450  15CF  082E               	movf	(_RF_Data^(0+128)+14),w
  6451  15D0  0020               	movlb	0	; select bank0
  6452  15D1  00AD               	movwf	??_setLog_Code
  6453  15D2  087D               	movf	_product,w
  6454  15D3  3E0E               	addlw	14
  6455  15D4  0086               	movwf	6
  6456  15D5  3001               	movlw	1	; select bank2/3
  6457  15D6  0087               	movwf	7
  6458  15D7  082D               	movf	??_setLog_Code,w
  6459  15D8  0081               	movwf	1
  6460                           
  6461                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  6462  15D9  3064               	movlw	100
  6463  15DA  00A9               	movwf	setBuz@time
  6464  15DB  3000               	movlw	0
  6465  15DC  00AA               	movwf	setBuz@time+1
  6466  15DD  3001               	movlw	1
  6467  15DE  318C  24B7  3195   	fcall	_setBuz
  6468                           
  6469                           ;RF_Control_B1.c: 266: RF->Learn = 0;
  6470  15E1  087A               	movf	_RF,w
  6471  15E2  0086               	movwf	6
  6472  15E3  0187               	clrf	7
  6473  15E4  1301               	bcf	1,6
  6474                           
  6475                           ;RF_Control_B1.c: 267: if (myMain->First) {
  6476  15E5  0021               	movlb	1	; select bank1
  6477  15E6  086E               	movf	_myMain^(0+128),w
  6478  15E7  0086               	movwf	6
  6479  15E8  3001               	movlw	1	; select bank2/3
  6480  15E9  0087               	movwf	7
  6481  15EA  1F81               	btfss	1,7
  6482  15EB  2DF2               	goto	l2230
  6483                           
  6484                           ;RF_Control_B1.c: 268: Memory->LoopSave=1;
  6485  15EC  086F               	movf	_Memory^(0+128),w
  6486  15ED  3E24               	addlw	36
  6487  15EE  0086               	movwf	6
  6488  15EF  3002               	movlw	2	; select bank4/5
  6489  15F0  0087               	movwf	7
  6490  15F1  1501               	bsf	1,2
  6491  15F2                     l2230:	
  6492                           
  6493                           ;RF_Control_B1.c: 269: }
  6494                           ;RF_Control_B1.c: 270: Memory->Modify=1;
  6495  15F2  086F               	movf	_Memory^(0+128),w
  6496  15F3  3E24               	addlw	36
  6497  15F4  0086               	movwf	6
  6498  15F5  3002               	movlw	2	; select bank4/5
  6499  15F6  0087               	movwf	7
  6500  15F7  1401               	bsf	1,0
  6501  15F8  0008               	return
  6502  15F9                     __end_of_setLog_Code:	
  6503                           
  6504                           	psect	text23
  6505  0F4A                     __ptext23:	
  6506 ;; *************** function _setControl_Lights_Table *****************
  6507 ;; Defined at:
  6508 ;;		line 274 in file "../src/RF_Control_B1.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;  rf              1    wreg     unsigned char 
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;  rf              1   71[BANK0 ] unsigned char 
  6513 ;; Return value:  Size  Location     Type
  6514 ;;		None               void
  6515 ;; Registers used:
  6516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6517 ;; Tracked objects:
  6518 ;;		On entry : 0/0
  6519 ;;		On exit  : 0/0
  6520 ;;		Unchanged: 0/0
  6521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;Total ram usage:        1 bytes
  6527 ;; Hardware stack levels used:    1
  6528 ;; Hardware stack levels required when called:   11
  6529 ;; This function calls:
  6530 ;;		_RfPointSelect
  6531 ;;		_setBuz
  6532 ;;		_setDimmerLights
  6533 ;;		_setRFSW_AdjControl
  6534 ;;		_setRFSW_Control
  6535 ;;		_setRFSW_Status
  6536 ;;		_setSw_Status
  6537 ;;		_setTxData
  6538 ;; This function is called by:
  6539 ;;		_getRxData
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           
  6544                           ;psect for function _setControl_Lights_Table
  6545  0F4A                     _setControl_Lights_Table:	
  6546                           
  6547                           ;incstack = 0
  6548                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6549                           ;setControl_Lights_Table@rf stored from wreg
  6550  0F4A  0020               	movlb	0	; select bank0
  6551  0F4B  00E7               	movwf	setControl_Lights_Table@rf
  6552                           
  6553                           ;RF_Control_B1.c: 275: RfPointSelect(rf);
  6554  0F4C  0867               	movf	setControl_Lights_Table@rf,w
  6555  0F4D  319E  2627  318F   	fcall	_RfPointSelect
  6556                           
  6557                           ;RF_Control_B1.c: 276: if (RF_Data[15] == 0x00) {
  6558  0F50  0021               	movlb	1	; select bank1
  6559  0F51  08AF               	movf	(_RF_Data^(0+128)+15),f
  6560  0F52  1D03               	skipz
  6561  0F53  2FAF               	goto	l6022
  6562                           
  6563                           ;RF_Control_B1.c: 278: setDimmerLights(1, 0);
  6564  0F54  0020               	movlb	0	; select bank0
  6565  0F55  01A4               	clrf	setDimmerLights@status
  6566  0F56  3001               	movlw	1
  6567  0F57  318A  229F  318F   	fcall	_setDimmerLights
  6568                           
  6569                           ;RF_Control_B1.c: 279: setRFSW_Status(1, 0);
  6570  0F5A  0020               	movlb	0	; select bank0
  6571  0F5B  01A2               	clrf	setRFSW_Status@command
  6572  0F5C  3001               	movlw	1
  6573  0F5D  319E  2670  318F   	fcall	_setRFSW_Status
  6574                           
  6575                           ;RF_Control_B1.c: 280: setSw_Status(1, 0);
  6576  0F60  0020               	movlb	0	; select bank0
  6577  0F61  01A2               	clrf	setSw_Status@command
  6578  0F62  3001               	movlw	1
  6579  0F63  319E  2661  318F   	fcall	_setSw_Status
  6580                           
  6581                           ;RF_Control_B1.c: 283: setDimmerLights(2, 0);
  6582  0F66  0020               	movlb	0	; select bank0
  6583  0F67  01A4               	clrf	setDimmerLights@status
  6584  0F68  3002               	movlw	2
  6585  0F69  318A  229F  318F   	fcall	_setDimmerLights
  6586                           
  6587                           ;RF_Control_B1.c: 284: setRFSW_Status(2, 0);
  6588  0F6C  0020               	movlb	0	; select bank0
  6589  0F6D  01A2               	clrf	setRFSW_Status@command
  6590  0F6E  3002               	movlw	2
  6591  0F6F  319E  2670  318F   	fcall	_setRFSW_Status
  6592                           
  6593                           ;RF_Control_B1.c: 285: setSw_Status(2, 0);
  6594  0F72  0020               	movlb	0	; select bank0
  6595  0F73  01A2               	clrf	setSw_Status@command
  6596  0F74  3002               	movlw	2
  6597  0F75  319E  2661  318F   	fcall	_setSw_Status
  6598                           
  6599                           ;RF_Control_B1.c: 288: setDimmerLights(3, 0);
  6600  0F78  0020               	movlb	0	; select bank0
  6601  0F79  01A4               	clrf	setDimmerLights@status
  6602  0F7A  3003               	movlw	3
  6603  0F7B  318A  229F  318F   	fcall	_setDimmerLights
  6604                           
  6605                           ;RF_Control_B1.c: 289: setRFSW_Status(3, 0);
  6606  0F7E  0020               	movlb	0	; select bank0
  6607  0F7F  01A2               	clrf	setRFSW_Status@command
  6608  0F80  3003               	movlw	3
  6609  0F81  319E  2670  318F   	fcall	_setRFSW_Status
  6610                           
  6611                           ;RF_Control_B1.c: 290: setSw_Status(3, 0);
  6612  0F84  0020               	movlb	0	; select bank0
  6613  0F85  01A2               	clrf	setSw_Status@command
  6614  0F86  3003               	movlw	3
  6615  0F87  319E  2661  318F   	fcall	_setSw_Status
  6616                           
  6617                           ;RF_Control_B1.c: 293: product->Data[9]=0;
  6618  0F8A  087D               	movf	_product,w
  6619  0F8B  3E09               	addlw	9
  6620  0F8C  0086               	movwf	6
  6621  0F8D  3001               	movlw	1	; select bank2/3
  6622  0F8E  0087               	movwf	7
  6623  0F8F  0181               	clrf	1
  6624                           
  6625                           ;RF_Control_B1.c: 294: product->Data[11]=0;
  6626  0F90  087D               	movf	_product,w
  6627  0F91  3E0B               	addlw	11
  6628  0F92  0086               	movwf	6
  6629  0F93  3001               	movlw	1	; select bank2/3
  6630  0F94  0087               	movwf	7
  6631  0F95  0181               	clrf	1
  6632                           
  6633                           ;RF_Control_B1.c: 295: product->Data[15]=0;
  6634  0F96  087D               	movf	_product,w
  6635  0F97  3E0F               	addlw	15
  6636  0F98  0086               	movwf	6
  6637  0F99  3001               	movlw	1	; select bank2/3
  6638  0F9A  0087               	movwf	7
  6639  0F9B  0181               	clrf	1
  6640                           
  6641                           ;RF_Control_B1.c: 296: product->Data[17]=0;
  6642  0F9C  087D               	movf	_product,w
  6643  0F9D  3E11               	addlw	17
  6644  0F9E  0086               	movwf	6
  6645  0F9F  3001               	movlw	1	; select bank2/3
  6646  0FA0  0087               	movwf	7
  6647  0FA1  0181               	clrf	1
  6648                           
  6649                           ;RF_Control_B1.c: 297: setBuz(1, 100);
  6650  0FA2  3064               	movlw	100
  6651  0FA3  0020               	movlb	0	; select bank0
  6652  0FA4  00A9               	movwf	setBuz@time
  6653  0FA5  3000               	movlw	0
  6654  0FA6  00AA               	movwf	setBuz@time+1
  6655  0FA7  3001               	movlw	1
  6656  0FA8  318C  24B7  318F   	fcall	_setBuz
  6657                           
  6658                           ;RF_Control_B1.c: 298: setTxData(1);
  6659  0FAB  3001               	movlw	1
  6660  0FAC  318D  254D         	fcall	_setTxData
  6661                           
  6662                           ;RF_Control_B1.c: 299: } else if (RF_Data[15] == 0x20) {
  6663  0FAE  0008               	return
  6664  0FAF                     l6022:	
  6665  0FAF  0021               	movlb	1	; select bank1
  6666  0FB0  082F               	movf	(_RF_Data^(0+128)+15),w
  6667  0FB1  3A20               	xorlw	32
  6668  0FB2  1D03               	skipz
  6669  0FB3  2FCA               	goto	l6028
  6670                           
  6671                           ;RF_Control_B1.c: 300: product->Data[9]=0;
  6672  0FB4  087D               	movf	_product,w
  6673  0FB5  3E09               	addlw	9
  6674  0FB6  0086               	movwf	6
  6675  0FB7  3001               	movlw	1	; select bank2/3
  6676  0FB8  0087               	movwf	7
  6677  0FB9  0181               	clrf	1
  6678                           
  6679                           ;RF_Control_B1.c: 301: product->Data[11]=0;
  6680  0FBA  087D               	movf	_product,w
  6681  0FBB  3E0B               	addlw	11
  6682  0FBC  0086               	movwf	6
  6683  0FBD  3001               	movlw	1	; select bank2/3
  6684  0FBE  0087               	movwf	7
  6685  0FBF  0181               	clrf	1
  6686                           
  6687                           ;RF_Control_B1.c: 302: product->Data[17]=0;
  6688  0FC0  087D               	movf	_product,w
  6689  0FC1  3E11               	addlw	17
  6690  0FC2  0086               	movwf	6
  6691  0FC3  3001               	movlw	1	; select bank2/3
  6692  0FC4  0087               	movwf	7
  6693  0FC5  0181               	clrf	1
  6694                           
  6695                           ;RF_Control_B1.c: 303: setTxData(1);
  6696  0FC6  3001               	movlw	1
  6697  0FC7  318D  254D         	fcall	_setTxData
  6698                           
  6699                           ;RF_Control_B1.c: 304: }
  6700  0FC9  0008               	return
  6701  0FCA                     l6028:	
  6702                           
  6703                           ;RF_Control_B1.c: 306: else if (RF_Data[15] == 0x01) {
  6704  0FCA  0021               	movlb	1	; select bank1
  6705  0FCB  082F               	movf	(_RF_Data^(0+128)+15),w
  6706  0FCC  3A01               	xorlw	1
  6707  0FCD  1D03               	skipz
  6708  0FCE  2FD3               	goto	l6032
  6709                           
  6710                           ;RF_Control_B1.c: 307: setRFSW_Control(1);
  6711  0FCF  3001               	movlw	1
  6712  0FD0  3188  200D         	fcall	_setRFSW_Control
  6713                           
  6714                           ;RF_Control_B1.c: 308: }
  6715  0FD2  0008               	return
  6716  0FD3                     l6032:	
  6717                           
  6718                           ;RF_Control_B1.c: 310: else if (RF_Data[15] == 0x11) {
  6719  0FD3  0021               	movlb	1	; select bank1
  6720  0FD4  082F               	movf	(_RF_Data^(0+128)+15),w
  6721  0FD5  3A11               	xorlw	17
  6722  0FD6  1D03               	skipz
  6723  0FD7  2FDC               	goto	l6036
  6724                           
  6725                           ;RF_Control_B1.c: 311: setRFSW_AdjControl(1);
  6726  0FD8  3001               	movlw	1
  6727  0FD9  3194  245C         	fcall	_setRFSW_AdjControl
  6728                           
  6729                           ;RF_Control_B1.c: 312: }
  6730  0FDB  0008               	return
  6731  0FDC                     l6036:	
  6732                           
  6733                           ;RF_Control_B1.c: 317: else if (RF_Data[15] == 0x02) {
  6734  0FDC  0021               	movlb	1	; select bank1
  6735  0FDD  082F               	movf	(_RF_Data^(0+128)+15),w
  6736  0FDE  3A02               	xorlw	2
  6737  0FDF  1D03               	skipz
  6738  0FE0  2FE5               	goto	l6040
  6739                           
  6740                           ;RF_Control_B1.c: 318: setRFSW_Control(2);
  6741  0FE1  3002               	movlw	2
  6742  0FE2  3188  200D         	fcall	_setRFSW_Control
  6743                           
  6744                           ;RF_Control_B1.c: 319: }
  6745  0FE4  0008               	return
  6746  0FE5                     l6040:	
  6747                           
  6748                           ;RF_Control_B1.c: 321: else if (RF_Data[15] == 0x21) {
  6749  0FE5  0021               	movlb	1	; select bank1
  6750  0FE6  082F               	movf	(_RF_Data^(0+128)+15),w
  6751  0FE7  3A21               	xorlw	33
  6752  0FE8  1D03               	skipz
  6753  0FE9  2FEE               	goto	l6044
  6754                           
  6755                           ;RF_Control_B1.c: 322: setRFSW_AdjControl(2);
  6756  0FEA  3002               	movlw	2
  6757  0FEB  3194  245C         	fcall	_setRFSW_AdjControl
  6758                           
  6759                           ;RF_Control_B1.c: 323: }
  6760  0FED  0008               	return
  6761  0FEE                     l6044:	
  6762                           
  6763                           ;RF_Control_B1.c: 328: else if (RF_Data[15] == 0x03) {
  6764  0FEE  0021               	movlb	1	; select bank1
  6765  0FEF  082F               	movf	(_RF_Data^(0+128)+15),w
  6766  0FF0  3A03               	xorlw	3
  6767  0FF1  1D03               	skipz
  6768  0FF2  2FF7               	goto	l6048
  6769                           
  6770                           ;RF_Control_B1.c: 329: setRFSW_Control(3);
  6771  0FF3  3003               	movlw	3
  6772  0FF4  3188  200D         	fcall	_setRFSW_Control
  6773                           
  6774                           ;RF_Control_B1.c: 330: }
  6775  0FF6  0008               	return
  6776  0FF7                     l6048:	
  6777                           
  6778                           ;RF_Control_B1.c: 332: else if (RF_Data[15] == 0x31) {
  6779  0FF7  0021               	movlb	1	; select bank1
  6780  0FF8  082F               	movf	(_RF_Data^(0+128)+15),w
  6781  0FF9  3A31               	xorlw	49
  6782  0FFA  1D03               	skipz
  6783  0FFB  0008               	return
  6784                           
  6785                           ;RF_Control_B1.c: 333: setRFSW_AdjControl(3);
  6786  0FFC  3003               	movlw	3
  6787  0FFD  3194  245C         	fcall	_setRFSW_AdjControl
  6788  0FFF  0008               	return
  6789  1000                     __end_of_setControl_Lights_Table:	
  6790                           
  6791                           	psect	text24
  6792  1E70                     __ptext24:	
  6793 ;; *************** function _setRFSW_Status *****************
  6794 ;; Defined at:
  6795 ;;		line 405 in file "../src/RF_Control_B1.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  sw              1    wreg     unsigned char 
  6798 ;;  command         1    2[BANK0 ] unsigned char 
  6799 ;; Auto vars:     Size  Location     Type
  6800 ;;  sw              1    3[BANK0 ] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;		None               void
  6803 ;; Registers used:
  6804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6810 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;Total ram usage:        2 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    6
  6817 ;; This function calls:
  6818 ;;		_RfSWPointSelect
  6819 ;; This function is called by:
  6820 ;;		_setControl_Lights_Table
  6821 ;;		_Sw_DimmerOnFunc
  6822 ;;		_Sw_DimmerAdjFunc
  6823 ;;		_setDimmerLights_ERROR
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _setRFSW_Status
  6829  1E70                     _setRFSW_Status:	
  6830                           
  6831                           ;incstack = 0
  6832                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6833                           ;setRFSW_Status@sw stored from wreg
  6834  1E70  0020               	movlb	0	; select bank0
  6835  1E71  00A3               	movwf	setRFSW_Status@sw
  6836                           
  6837                           ;RF_Control_B1.c: 406: RfSWPointSelect(sw);
  6838  1E72  0823               	movf	setRFSW_Status@sw,w
  6839  1E73  3191  21E8         	fcall	_RfSWPointSelect
  6840                           
  6841                           ;RF_Control_B1.c: 407: RFSW->Status = command;
  6842  1E75  0021               	movlb	1	; select bank1
  6843  1E76  083F               	movf	_RFSW^(0+128),w
  6844  1E77  0086               	movwf	6
  6845  1E78  0187               	clrf	7
  6846  1E79  0020               	movlb	0	; select bank0
  6847  1E7A  0822               	movf	setRFSW_Status@command,w
  6848  1E7B  1001               	bcf	1,0
  6849  1E7C  1D03               	skipz
  6850  1E7D  1401               	bsf	1,0
  6851  1E7E  0008               	return
  6852  1E7F                     __end_of_setRFSW_Status:	
  6853                           
  6854                           	psect	text25
  6855  080D                     __ptext25:	
  6856 ;; *************** function _setRFSW_Control *****************
  6857 ;; Defined at:
  6858 ;;		line 359 in file "../src/RF_Control_B1.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  sw              1    wreg     unsigned char 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  sw              1   66[BANK0 ] unsigned char 
  6863 ;; Return value:  Size  Location     Type
  6864 ;;		None               void
  6865 ;; Registers used:
  6866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6867 ;; Tracked objects:
  6868 ;;		On entry : 0/0
  6869 ;;		On exit  : 0/0
  6870 ;;		Unchanged: 0/0
  6871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;Total ram usage:        1 bytes
  6877 ;; Hardware stack levels used:    1
  6878 ;; Hardware stack levels required when called:    9
  6879 ;; This function calls:
  6880 ;;		_RfSWPointSelect
  6881 ;;		_setBuz
  6882 ;;		_setDimmerLights_Switch
  6883 ;;		_setDimmerLights_Trigger
  6884 ;;		_setRF_DimmerLights
  6885 ;;		_setSw_Status
  6886 ;;		_setTxData
  6887 ;; This function is called by:
  6888 ;;		_setControl_Lights_Table
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _setRFSW_Control
  6894  080D                     _setRFSW_Control:	
  6895                           
  6896                           ;incstack = 0
  6897                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6898                           ;setRFSW_Control@sw stored from wreg
  6899  080D  0020               	movlb	0	; select bank0
  6900  080E  00E2               	movwf	setRFSW_Control@sw
  6901                           
  6902                           ;RF_Control_B1.c: 360: RfSWPointSelect(sw);
  6903  080F  0862               	movf	setRFSW_Control@sw,w
  6904  0810  3191  21E8  3188   	fcall	_RfSWPointSelect
  6905                           
  6906                           ;RF_Control_B1.c: 361: if (!RFSW->Status) {
  6907  0813  0021               	movlb	1	; select bank1
  6908  0814  083F               	movf	_RFSW^(0+128),w
  6909  0815  0086               	movwf	6
  6910  0816  0187               	clrf	7
  6911  0817  1801               	btfsc	1,0
  6912  0818  283C               	goto	l5920
  6913                           
  6914                           ;RF_Control_B1.c: 364: }
  6915                           ;RF_Control_B1.c: 365: RFSW->Status = 1;
  6916                           
  6917                           ;RF_Control_B1.c: 363: ;;
  6918  0819  083F               	movf	_RFSW^(0+128),w
  6919  081A  0086               	movwf	6
  6920  081B  0187               	clrf	7
  6921  081C  1401               	bsf	1,0
  6922                           
  6923                           ;RF_Control_B1.c: 366: setSw_Status(sw, 1);
  6924  081D  0020               	movlb	0	; select bank0
  6925  081E  01A2               	clrf	setSw_Status@command
  6926  081F  0AA2               	incf	setSw_Status@command,f
  6927  0820  0862               	movf	setRFSW_Control@sw,w
  6928  0821  319E  2661  3188   	fcall	_setSw_Status
  6929                           
  6930                           ;RF_Control_B1.c: 368: setDimmerLights_Trigger(sw, 1);
  6931  0824  0020               	movlb	0	; select bank0
  6932  0825  01A2               	clrf	setDimmerLights_Trigger@command
  6933  0826  0AA2               	incf	setDimmerLights_Trigger@command,f
  6934  0827  0862               	movf	setRFSW_Control@sw,w
  6935  0828  319E  26BF  3188   	fcall	_setDimmerLights_Trigger
  6936                           
  6937                           ;RF_Control_B1.c: 369: setDimmerLights_Switch(sw, 1);
  6938  082B  0020               	movlb	0	; select bank0
  6939  082C  01A2               	clrf	setDimmerLights_Switch@command
  6940  082D  0AA2               	incf	setDimmerLights_Switch@command,f
  6941  082E  0862               	movf	setRFSW_Control@sw,w
  6942  082F  319E  26AF  3188   	fcall	_setDimmerLights_Switch
  6943                           
  6944                           ;RF_Control_B1.c: 371: setRF_DimmerLights(sw, RFSW->Status);
  6945  0832  0021               	movlb	1	; select bank1
  6946  0833  083F               	movf	_RFSW^(0+128),w
  6947  0834  0086               	movwf	6
  6948  0835  0187               	clrf	7
  6949  0836  3000               	movlw	0
  6950  0837  1801               	btfsc	1,0
  6951  0838  3001               	movlw	1
  6952  0839  0020               	movlb	0	; select bank0
  6953  083A  00DD               	movwf	setRF_DimmerLights@on
  6954  083B  2866               	goto	L5
  6955  083C                     l5920:	
  6956                           ;RF_Control_B1.c: 372: } else {
  6957                           
  6958                           
  6959                           ;RF_Control_B1.c: 373: if (RF_Data[16] == 0x80) {
  6960  083C  0021               	movlb	1	; select bank1
  6961  083D  0830               	movf	(_RF_Data^(0+128)+16),w
  6962  083E  3A80               	xorlw	128
  6963  083F  1D03               	skipz
  6964  0840  2845               	goto	l5924
  6965                           
  6966                           ;RF_Control_B1.c: 374: ;;
  6967                           ;RF_Control_B1.c: 375: setRF_DimmerLights(sw, 1);
  6968  0841  0020               	movlb	0	; select bank0
  6969  0842  01DD               	clrf	setRF_DimmerLights@on
  6970  0843  0ADD               	incf	setRF_DimmerLights@on,f
  6971  0844  2866               	goto	L5
  6972  0845                     l5924:	
  6973                           ;RF_Control_B1.c: 376: } else {
  6974                           
  6975                           
  6976                           ;RF_Control_B1.c: 377: RFSW->Status = 0;
  6977  0845  0021               	movlb	1	; select bank1
  6978  0846  083F               	movf	_RFSW^(0+128),w
  6979  0847  0086               	movwf	6
  6980  0848  0187               	clrf	7
  6981  0849  1001               	bcf	1,0
  6982                           
  6983                           ;RF_Control_B1.c: 378: setSw_Status(sw, 0);
  6984  084A  0020               	movlb	0	; select bank0
  6985  084B  01A2               	clrf	setSw_Status@command
  6986  084C  0862               	movf	setRFSW_Control@sw,w
  6987  084D  319E  2661  3188   	fcall	_setSw_Status
  6988                           
  6989                           ;RF_Control_B1.c: 380: setDimmerLights_Trigger(sw, 1);
  6990  0850  0020               	movlb	0	; select bank0
  6991  0851  01A2               	clrf	setDimmerLights_Trigger@command
  6992  0852  0AA2               	incf	setDimmerLights_Trigger@command,f
  6993  0853  0862               	movf	setRFSW_Control@sw,w
  6994  0854  319E  26BF  3188   	fcall	_setDimmerLights_Trigger
  6995                           
  6996                           ;RF_Control_B1.c: 381: setDimmerLights_Switch(sw, RFSW->Status);
  6997  0857  0021               	movlb	1	; select bank1
  6998  0858  083F               	movf	_RFSW^(0+128),w
  6999  0859  0086               	movwf	6
  7000  085A  0187               	clrf	7
  7001  085B  3000               	movlw	0
  7002  085C  1801               	btfsc	1,0
  7003  085D  3001               	movlw	1
  7004  085E  0020               	movlb	0	; select bank0
  7005  085F  00A2               	movwf	setDimmerLights_Switch@command
  7006  0860  0862               	movf	setRFSW_Control@sw,w
  7007  0861  319E  26AF  3188   	fcall	_setDimmerLights_Switch
  7008                           
  7009                           ;RF_Control_B1.c: 383: ;;
  7010                           ;RF_Control_B1.c: 384: setRF_DimmerLights(sw, 0);
  7011  0864  0020               	movlb	0	; select bank0
  7012  0865  01DD               	clrf	setRF_DimmerLights@on
  7013  0866                     L5:	
  7014  0866  0862               	movf	setRFSW_Control@sw,w
  7015  0867  3188  20E1  3188   	fcall	_setRF_DimmerLights
  7016                           
  7017                           ;RF_Control_B1.c: 385: }
  7018                           ;RF_Control_B1.c: 386: }
  7019                           ;RF_Control_B1.c: 387: setBuz(1, 100);
  7020  086A  3064               	movlw	100
  7021  086B  0020               	movlb	0	; select bank0
  7022  086C  00A9               	movwf	setBuz@time
  7023  086D  3000               	movlw	0
  7024  086E  00AA               	movwf	setBuz@time+1
  7025  086F  3001               	movlw	1
  7026  0870  318C  24B7  3188   	fcall	_setBuz
  7027                           
  7028                           ;RF_Control_B1.c: 388: setTxData(1);
  7029  0873  3001               	movlw	1
  7030  0874  318D  254D         	fcall	_setTxData
  7031  0876  0008               	return
  7032  0877                     __end_of_setRFSW_Control:	
  7033                           
  7034                           	psect	text26
  7035  1E61                     __ptext26:	
  7036 ;; *************** function _setSw_Status *****************
  7037 ;; Defined at:
  7038 ;;		line 105 in file "../src/Switch_B1.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  sw              1    wreg     unsigned char 
  7041 ;;  command         1    2[BANK0 ] unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  sw              1    3[BANK0 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;		None               void
  7046 ;; Registers used:
  7047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7053 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;Total ram usage:        2 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    6
  7060 ;; This function calls:
  7061 ;;		_SwPointSelect
  7062 ;; This function is called by:
  7063 ;;		_setControl_Lights_Table
  7064 ;;		_setRFSW_Control
  7065 ;;		_setDimmerLights_ERROR
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _setSw_Status
  7071  1E61                     _setSw_Status:	
  7072                           
  7073                           ;incstack = 0
  7074                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7075                           ;setSw_Status@sw stored from wreg
  7076  1E61  0020               	movlb	0	; select bank0
  7077  1E62  00A3               	movwf	setSw_Status@sw
  7078                           
  7079                           ;Switch_B1.c: 106: SwPointSelect(sw);
  7080  1E63  0823               	movf	setSw_Status@sw,w
  7081  1E64  3191  214E         	fcall	_SwPointSelect
  7082                           
  7083                           ;Switch_B1.c: 107: Sw->Status = command;
  7084  1E66  087B               	movf	_Sw,w
  7085  1E67  0086               	movwf	6
  7086  1E68  3001               	movlw	1	; select bank2/3
  7087  1E69  0087               	movwf	7
  7088  1E6A  0020               	movlb	0	; select bank0
  7089  1E6B  0822               	movf	setSw_Status@command,w
  7090  1E6C  1301               	bcf	1,6
  7091  1E6D  1D03               	skipz
  7092  1E6E  1701               	bsf	1,6
  7093  1E6F  0008               	return
  7094  1E70                     __end_of_setSw_Status:	
  7095                           
  7096                           	psect	text27
  7097  114E                     __ptext27:	
  7098 ;; *************** function _SwPointSelect *****************
  7099 ;; Defined at:
  7100 ;;		line 17 in file "../src/Switch_B1.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;  sw              1    wreg     unsigned char 
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  sw              1    1[BANK0 ] unsigned char 
  7105 ;; Return value:  Size  Location     Type
  7106 ;;		None               void
  7107 ;; Registers used:
  7108 ;;		wreg
  7109 ;; Tracked objects:
  7110 ;;		On entry : 0/0
  7111 ;;		On exit  : 0/0
  7112 ;;		Unchanged: 0/0
  7113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;Total ram usage:        2 bytes
  7119 ;; Hardware stack levels used:    1
  7120 ;; Hardware stack levels required when called:    5
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		_setSw_Enable
  7125 ;;		_setSw_Status
  7126 ;;		_setSw_Main
  7127 ;;		_Sw_Detect
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           
  7132                           ;psect for function _SwPointSelect
  7133  114E                     _SwPointSelect:	
  7134                           
  7135                           ;incstack = 0
  7136                           ; Regs used in _SwPointSelect: [wreg]
  7137                           ;SwPointSelect@sw stored from wreg
  7138  114E  0020               	movlb	0	; select bank0
  7139  114F  00A1               	movwf	SwPointSelect@sw
  7140                           
  7141                           ;Switch_B1.c: 20: if (sw == 1) {
  7142  1150  0821               	movf	SwPointSelect@sw,w
  7143  1151  3A01               	xorlw	1
  7144  1152  1D03               	skipz
  7145  1153  2959               	goto	l5638
  7146                           
  7147                           ;Switch_B1.c: 21: Sw = &Sw1;
  7148  1154  3059               	movlw	_Sw1& (0+255)
  7149  1155  00A0               	movwf	??_SwPointSelect
  7150  1156  0820               	movf	??_SwPointSelect,w
  7151  1157  00FB               	movwf	_Sw
  7152                           
  7153                           ;Switch_B1.c: 22: }
  7154  1158  0008               	return
  7155  1159                     l5638:	
  7156                           
  7157                           ;Switch_B1.c: 25: else if (sw == 2) {
  7158  1159  0821               	movf	SwPointSelect@sw,w
  7159  115A  3A02               	xorlw	2
  7160  115B  1D03               	skipz
  7161  115C  2962               	goto	l5642
  7162                           
  7163                           ;Switch_B1.c: 26: Sw = &Sw2;
  7164  115D  3062               	movlw	_Sw2& (0+255)
  7165  115E  00A0               	movwf	??_SwPointSelect
  7166  115F  0820               	movf	??_SwPointSelect,w
  7167  1160  00FB               	movwf	_Sw
  7168                           
  7169                           ;Switch_B1.c: 27: }
  7170  1161  0008               	return
  7171  1162                     l5642:	
  7172                           
  7173                           ;Switch_B1.c: 30: else if (sw == 3) {
  7174  1162  0821               	movf	SwPointSelect@sw,w
  7175  1163  3A03               	xorlw	3
  7176  1164  1D03               	skipz
  7177  1165  0008               	return
  7178                           
  7179                           ;Switch_B1.c: 31: Sw = &Sw3;
  7180  1166  30D4               	movlw	_Sw3& (0+255)
  7181  1167  00A0               	movwf	??_SwPointSelect
  7182  1168  0820               	movf	??_SwPointSelect,w
  7183  1169  00FB               	movwf	_Sw
  7184  116A  0008               	return
  7185  116B                     __end_of_SwPointSelect:	
  7186                           
  7187                           	psect	text28
  7188  1EBF                     __ptext28:	
  7189 ;; *************** function _setDimmerLights_Trigger *****************
  7190 ;; Defined at:
  7191 ;;		line 705 in file "../src/Dimmer_B1.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  lights          1    wreg     unsigned char 
  7194 ;;  command         1    2[BANK0 ] unsigned char 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  lights          1    3[BANK0 ] unsigned char 
  7197 ;; Return value:  Size  Location     Type
  7198 ;;		None               void
  7199 ;; Registers used:
  7200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7206 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7209 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7210 ;;Total ram usage:        2 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    6
  7213 ;; This function calls:
  7214 ;;		_DimmerLightsPointSelect
  7215 ;; This function is called by:
  7216 ;;		_setRFSW_Control
  7217 ;;		_Sw_DimmerOnFunc
  7218 ;;		_Sw_DimmerOffFunc
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222                           
  7223                           ;psect for function _setDimmerLights_Trigger
  7224  1EBF                     _setDimmerLights_Trigger:	
  7225                           
  7226                           ;incstack = 0
  7227                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7228                           ;setDimmerLights_Trigger@lights stored from wreg
  7229  1EBF  0020               	movlb	0	; select bank0
  7230  1EC0  00A3               	movwf	setDimmerLights_Trigger@lights
  7231                           
  7232                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
  7233  1EC1  0823               	movf	setDimmerLights_Trigger@lights,w
  7234  1EC2  3190  20A7         	fcall	_DimmerLightsPointSelect
  7235                           
  7236                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
  7237  1EC4  0878               	movf	_DimmerLights,w
  7238  1EC5  3E08               	addlw	8
  7239  1EC6  0086               	movwf	6
  7240  1EC7  3001               	movlw	1	; select bank2/3
  7241  1EC8  0087               	movwf	7
  7242  1EC9  0020               	movlb	0	; select bank0
  7243  1ECA  0822               	movf	setDimmerLights_Trigger@command,w
  7244  1ECB  1101               	bcf	1,2
  7245  1ECC  1D03               	skipz
  7246  1ECD  1501               	bsf	1,2
  7247  1ECE  0008               	return
  7248  1ECF                     __end_of_setDimmerLights_Trigger:	
  7249                           
  7250                           	psect	text29
  7251  1EAF                     __ptext29:	
  7252 ;; *************** function _setDimmerLights_Switch *****************
  7253 ;; Defined at:
  7254 ;;		line 693 in file "../src/Dimmer_B1.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  lights          1    wreg     unsigned char 
  7257 ;;  command         1    2[BANK0 ] unsigned char 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;  lights          1    3[BANK0 ] unsigned char 
  7260 ;; Return value:  Size  Location     Type
  7261 ;;		None               void
  7262 ;; Registers used:
  7263 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7269 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;Total ram usage:        2 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    6
  7276 ;; This function calls:
  7277 ;;		_DimmerLightsPointSelect
  7278 ;; This function is called by:
  7279 ;;		_setRFSW_Control
  7280 ;;		_Sw_DimmerOnFunc
  7281 ;;		_Sw_DimmerOffFunc
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           
  7286                           ;psect for function _setDimmerLights_Switch
  7287  1EAF                     _setDimmerLights_Switch:	
  7288                           
  7289                           ;incstack = 0
  7290                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  7291                           ;setDimmerLights_Switch@lights stored from wreg
  7292  1EAF  0020               	movlb	0	; select bank0
  7293  1EB0  00A3               	movwf	setDimmerLights_Switch@lights
  7294                           
  7295                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
  7296  1EB1  0823               	movf	setDimmerLights_Switch@lights,w
  7297  1EB2  3190  20A7         	fcall	_DimmerLightsPointSelect
  7298                           
  7299                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
  7300  1EB4  0878               	movf	_DimmerLights,w
  7301  1EB5  3E08               	addlw	8
  7302  1EB6  0086               	movwf	6
  7303  1EB7  3001               	movlw	1	; select bank2/3
  7304  1EB8  0087               	movwf	7
  7305  1EB9  0020               	movlb	0	; select bank0
  7306  1EBA  0822               	movf	setDimmerLights_Switch@command,w
  7307  1EBB  1081               	bcf	1,1
  7308  1EBC  1D03               	skipz
  7309  1EBD  1481               	bsf	1,1
  7310  1EBE  0008               	return
  7311  1EBF                     __end_of_setDimmerLights_Switch:	
  7312                           
  7313                           	psect	text30
  7314  145C                     __ptext30:	
  7315 ;; *************** function _setRFSW_AdjControl *****************
  7316 ;; Defined at:
  7317 ;;		line 392 in file "../src/RF_Control_B1.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  sw              1    wreg     unsigned char 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;  sw              1   70[BANK0 ] unsigned char 
  7322 ;; Return value:  Size  Location     Type
  7323 ;;		None               void
  7324 ;; Registers used:
  7325 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;Total ram usage:        3 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:   10
  7338 ;; This function calls:
  7339 ;;		_RfSWPointSelect
  7340 ;;		_setRF_DimmerValue
  7341 ;;		_setTxData
  7342 ;; This function is called by:
  7343 ;;		_setControl_Lights_Table
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _setRFSW_AdjControl
  7349  145C                     _setRFSW_AdjControl:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7353                           ;setRFSW_AdjControl@sw stored from wreg
  7354  145C  0020               	movlb	0	; select bank0
  7355  145D  00E6               	movwf	setRFSW_AdjControl@sw
  7356                           
  7357                           ;RF_Control_B1.c: 393: RfSWPointSelect(sw);
  7358  145E  0866               	movf	setRFSW_AdjControl@sw,w
  7359  145F  3191  21E8  3194   	fcall	_RfSWPointSelect
  7360                           
  7361                           ;RF_Control_B1.c: 394: if (RFSW->Status == 1) {
  7362  1462  0021               	movlb	1	; select bank1
  7363  1463  083F               	movf	_RFSW^(0+128),w
  7364  1464  0086               	movwf	6
  7365  1465  0187               	clrf	7
  7366  1466  1C01               	btfss	1,0
  7367  1467  2C74               	goto	l5946
  7368                           
  7369                           ;RF_Control_B1.c: 395: Memory->Modify=1;
  7370  1468  086F               	movf	_Memory^(0+128),w
  7371  1469  3E24               	addlw	36
  7372  146A  0086               	movwf	6
  7373  146B  3002               	movlw	2	; select bank4/5
  7374  146C  0087               	movwf	7
  7375  146D  1401               	bsf	1,0
  7376                           
  7377                           ;RF_Control_B1.c: 396: setRF_DimmerValue(sw);
  7378  146E  0020               	movlb	0	; select bank0
  7379  146F  0866               	movf	setRFSW_AdjControl@sw,w
  7380  1470  3187  27C3  3194   	fcall	_setRF_DimmerValue
  7381                           
  7382                           ;RF_Control_B1.c: 397: } else {
  7383  1473  2C86               	goto	l2267
  7384  1474                     l5946:	
  7385                           
  7386                           ;RF_Control_B1.c: 398: product->Data[9]=product->Data[20 + sw];
  7387  1474  0020               	movlb	0	; select bank0
  7388  1475  0866               	movf	setRFSW_AdjControl@sw,w
  7389  1476  3E14               	addlw	20
  7390  1477  077D               	addwf	_product,w
  7391  1478  00E4               	movwf	??_setRFSW_AdjControl
  7392  1479  0864               	movf	??_setRFSW_AdjControl,w
  7393  147A  0086               	movwf	6
  7394  147B  3001               	movlw	1	; select bank2/3
  7395  147C  0087               	movwf	7
  7396  147D  0801               	movf	1,w
  7397  147E  00E5               	movwf	??_setRFSW_AdjControl+1
  7398  147F  087D               	movf	_product,w
  7399  1480  3E09               	addlw	9
  7400  1481  0086               	movwf	6
  7401  1482  3001               	movlw	1	; select bank2/3
  7402  1483  0087               	movwf	7
  7403  1484  0865               	movf	??_setRFSW_AdjControl+1,w
  7404  1485  0081               	movwf	1
  7405  1486                     l2267:	
  7406                           
  7407                           ;RF_Control_B1.c: 399: }
  7408                           ;RF_Control_B1.c: 400: product->Data[17]=product->Data[26 + sw];
  7409  1486  0020               	movlb	0	; select bank0
  7410  1487  0866               	movf	setRFSW_AdjControl@sw,w
  7411  1488  3E1A               	addlw	26
  7412  1489  077D               	addwf	_product,w
  7413  148A  00E4               	movwf	??_setRFSW_AdjControl
  7414  148B  0864               	movf	??_setRFSW_AdjControl,w
  7415  148C  0086               	movwf	6
  7416  148D  3001               	movlw	1	; select bank2/3
  7417  148E  0087               	movwf	7
  7418  148F  0801               	movf	1,w
  7419  1490  00E5               	movwf	??_setRFSW_AdjControl+1
  7420  1491  087D               	movf	_product,w
  7421  1492  3E11               	addlw	17
  7422  1493  0086               	movwf	6
  7423  1494  3001               	movlw	1	; select bank2/3
  7424  1495  0087               	movwf	7
  7425  1496  0865               	movf	??_setRFSW_AdjControl+1,w
  7426  1497  0081               	movwf	1
  7427                           
  7428                           ;RF_Control_B1.c: 401: setTxData(1);
  7429  1498  3001               	movlw	1
  7430  1499  318D  254D         	fcall	_setTxData
  7431  149B  0008               	return
  7432  149C                     __end_of_setRFSW_AdjControl:	
  7433                           
  7434                           	psect	text31
  7435  07C3                     __ptext31:	
  7436 ;; *************** function _setRF_DimmerValue *****************
  7437 ;; Defined at:
  7438 ;;		line 412 in file "../src/RF_Control_B1.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;  lights          1    wreg     unsigned char 
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;  lights          1   67[BANK0 ] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;		None               void
  7445 ;; Registers used:
  7446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;Total ram usage:        3 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    9
  7459 ;; This function calls:
  7460 ;;		_setDimmerLights_AdjRF
  7461 ;; This function is called by:
  7462 ;;		_setRFSW_AdjControl
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _setRF_DimmerValue
  7468  07C3                     _setRF_DimmerValue:	
  7469                           
  7470                           ;incstack = 0
  7471                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7472                           ;setRF_DimmerValue@lights stored from wreg
  7473  07C3  0020               	movlb	0	; select bank0
  7474  07C4  00E3               	movwf	setRF_DimmerValue@lights
  7475                           
  7476                           ;RF_Control_B1.c: 413: if (RF_Data[9] > 0x64) {
  7477  07C5  3065               	movlw	101
  7478  07C6  0021               	movlb	1	; select bank1
  7479  07C7  0229               	subwf	(_RF_Data^(0+128)+9),w
  7480  07C8  1C03               	skipc
  7481  07C9  2FD0               	goto	l5832
  7482                           
  7483                           ;RF_Control_B1.c: 414: RF_Data[9] = 0x64;
  7484  07CA  3064               	movlw	100
  7485  07CB  0020               	movlb	0	; select bank0
  7486  07CC  00E1               	movwf	??_setRF_DimmerValue
  7487  07CD  0861               	movf	??_setRF_DimmerValue,w
  7488  07CE  0021               	movlb	1	; select bank1
  7489  07CF  00A9               	movwf	(_RF_Data^(0+128)+9)
  7490  07D0                     l5832:	
  7491                           
  7492                           ;RF_Control_B1.c: 415: }
  7493                           ;RF_Control_B1.c: 416: product->Data[9]=RF_Data[9];
  7494  07D0  0829               	movf	(_RF_Data^(0+128)+9),w
  7495  07D1  0020               	movlb	0	; select bank0
  7496  07D2  00E1               	movwf	??_setRF_DimmerValue
  7497  07D3  087D               	movf	_product,w
  7498  07D4  3E09               	addlw	9
  7499  07D5  0086               	movwf	6
  7500  07D6  3001               	movlw	1	; select bank2/3
  7501  07D7  0087               	movwf	7
  7502  07D8  0861               	movf	??_setRF_DimmerValue,w
  7503  07D9  0081               	movwf	1
  7504                           
  7505                           ;RF_Control_B1.c: 417: product->Data[11]=lights;
  7506  07DA  0863               	movf	setRF_DimmerValue@lights,w
  7507  07DB  00E1               	movwf	??_setRF_DimmerValue
  7508  07DC  087D               	movf	_product,w
  7509  07DD  3E0B               	addlw	11
  7510  07DE  0086               	movwf	6
  7511  07DF  3001               	movlw	1	; select bank2/3
  7512  07E0  0087               	movwf	7
  7513  07E1  0861               	movf	??_setRF_DimmerValue,w
  7514  07E2  0081               	movwf	1
  7515                           
  7516                           ;RF_Control_B1.c: 418: product->Data[(20 + lights)]=product->Data[9];
  7517  07E3  087D               	movf	_product,w
  7518  07E4  3E09               	addlw	9
  7519  07E5  0086               	movwf	6
  7520  07E6  3001               	movlw	1	; select bank2/3
  7521  07E7  0087               	movwf	7
  7522  07E8  0801               	movf	1,w
  7523  07E9  00E1               	movwf	??_setRF_DimmerValue
  7524  07EA  0863               	movf	setRF_DimmerValue@lights,w
  7525  07EB  3E14               	addlw	20
  7526  07EC  077D               	addwf	_product,w
  7527  07ED  00E2               	movwf	??_setRF_DimmerValue+1
  7528  07EE  0862               	movf	??_setRF_DimmerValue+1,w
  7529  07EF  0086               	movwf	6
  7530  07F0  3001               	movlw	1	; select bank2/3
  7531  07F1  0087               	movwf	7
  7532  07F2  0861               	movf	??_setRF_DimmerValue,w
  7533  07F3  0081               	movwf	1
  7534                           
  7535                           ;RF_Control_B1.c: 419: setDimmerLights_AdjRF(lights);
  7536  07F4  0863               	movf	setRF_DimmerValue@lights,w
  7537  07F5  3192  226B         	fcall	_setDimmerLights_AdjRF
  7538  07F7  0008               	return
  7539  07F8                     __end_of_setRF_DimmerValue:	
  7540                           
  7541                           	psect	text32
  7542  126B                     __ptext32:	
  7543 ;; *************** function _setDimmerLights_AdjRF *****************
  7544 ;; Defined at:
  7545 ;;		line 679 in file "../src/Dimmer_B1.c"
  7546 ;; Parameters:    Size  Location     Type
  7547 ;;  lights          1    wreg     unsigned char 
  7548 ;; Auto vars:     Size  Location     Type
  7549 ;;  lights          1   64[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;		None               void
  7552 ;; Registers used:
  7553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;Total ram usage:        2 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    8
  7566 ;; This function calls:
  7567 ;;		_DimmerLightsPointSelect
  7568 ;;		_getPercentValue
  7569 ;; This function is called by:
  7570 ;;		_setRF_DimmerValue
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function _setDimmerLights_AdjRF
  7576  126B                     _setDimmerLights_AdjRF:	
  7577                           
  7578                           ;incstack = 0
  7579                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7580                           ;setDimmerLights_AdjRF@lights stored from wreg
  7581  126B  0020               	movlb	0	; select bank0
  7582  126C  00E0               	movwf	setDimmerLights_AdjRF@lights
  7583                           
  7584                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7585  126D  0860               	movf	setDimmerLights_AdjRF@lights,w
  7586  126E  3190  20A7  3192   	fcall	_DimmerLightsPointSelect
  7587                           
  7588                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7589  1271  0878               	movf	_DimmerLights,w
  7590  1272  0086               	movwf	6
  7591  1273  3001               	movlw	1	; select bank2/3
  7592  1274  0087               	movwf	7
  7593  1275  1501               	bsf	1,2
  7594                           
  7595                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7596  1276  0878               	movf	_DimmerLights,w
  7597  1277  0086               	movwf	6
  7598  1278  3001               	movlw	1	; select bank2/3
  7599  1279  0087               	movwf	7
  7600  127A  1481               	bsf	1,1
  7601                           
  7602                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7603  127B  087D               	movf	_product,w
  7604  127C  3E09               	addlw	9
  7605  127D  0086               	movwf	6
  7606  127E  3001               	movlw	1	; select bank2/3
  7607  127F  0087               	movwf	7
  7608  1280  0801               	movf	1,w
  7609  1281  3196  26E4         	fcall	_getPercentValue
  7610  1283  0020               	movlb	0	; select bank0
  7611  1284  00DF               	movwf	??_setDimmerLights_AdjRF
  7612  1285  0878               	movf	_DimmerLights,w
  7613  1286  3E05               	addlw	5
  7614  1287  0086               	movwf	6
  7615  1288  3001               	movlw	1	; select bank2/3
  7616  1289  0087               	movwf	7
  7617  128A  085F               	movf	??_setDimmerLights_AdjRF,w
  7618  128B  0081               	movwf	1
  7619  128C  0008               	return
  7620  128D                     __end_of_setDimmerLights_AdjRF:	
  7621                           
  7622                           	psect	text33
  7623  16E4                     __ptext33:	
  7624 ;; *************** function _getPercentValue *****************
  7625 ;; Defined at:
  7626 ;;		line 752 in file "../src/Dimmer_B1.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;  value           1    wreg     unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  value           1   59[BANK0 ] unsigned char 
  7631 ;;  i               3   60[BANK0 ] float 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      unsigned char 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0, pclath, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;Total ram usage:        6 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    7
  7648 ;; This function calls:
  7649 ;;		___awtoft
  7650 ;;		___ftadd
  7651 ;;		___ftdiv
  7652 ;;		___ftmul
  7653 ;;		___fttol
  7654 ;; This function is called by:
  7655 ;;		_setDimmerLights_AdjRF
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _getPercentValue
  7661  16E4                     _getPercentValue:	
  7662                           
  7663                           ;incstack = 0
  7664                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7665                           ;getPercentValue@value stored from wreg
  7666  16E4  0020               	movlb	0	; select bank0
  7667  16E5  00DB               	movwf	getPercentValue@value
  7668                           
  7669                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
  7670  16E6  3000               	movlw	0
  7671  16E7  00DC               	movwf	getPercentValue@i
  7672  16E8  3060               	movlw	96
  7673  16E9  00DD               	movwf	getPercentValue@i+1
  7674  16EA  3042               	movlw	66
  7675  16EB  00DE               	movwf	getPercentValue@i+2
  7676                           
  7677                           ;Dimmer_B1.c: 755: i /= 100;
  7678  16EC  3000               	movlw	0
  7679  16ED  00AE               	movwf	___ftdiv@f2
  7680  16EE  30C8               	movlw	200
  7681  16EF  00AF               	movwf	___ftdiv@f2+1
  7682  16F0  3042               	movlw	66
  7683  16F1  00B0               	movwf	___ftdiv@f2+2
  7684  16F2  085C               	movf	getPercentValue@i,w
  7685  16F3  00B1               	movwf	___ftdiv@f1
  7686  16F4  085D               	movf	getPercentValue@i+1,w
  7687  16F5  00B2               	movwf	___ftdiv@f1+1
  7688  16F6  085E               	movf	getPercentValue@i+2,w
  7689  16F7  00B3               	movwf	___ftdiv@f1+2
  7690  16F8  318D  25ED  3196   	fcall	___ftdiv
  7691  16FB  0020               	movlb	0	; select bank0
  7692  16FC  082E               	movf	?___ftdiv,w
  7693  16FD  00DC               	movwf	getPercentValue@i
  7694  16FE  082F               	movf	?___ftdiv+1,w
  7695  16FF  00DD               	movwf	getPercentValue@i+1
  7696  1700  0830               	movf	?___ftdiv+2,w
  7697  1701  00DE               	movwf	getPercentValue@i+2
  7698                           
  7699                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-95)*0.8)));
  7700  1702  085B               	movf	getPercentValue@value,w
  7701  1703  00D9               	movwf	??_getPercentValue
  7702  1704  01DA               	clrf	??_getPercentValue+1
  7703  1705  09D9               	comf	??_getPercentValue,f
  7704  1706  09DA               	comf	??_getPercentValue+1,f
  7705  1707  0AD9               	incf	??_getPercentValue,f
  7706  1708  1903               	skipnz
  7707  1709  0ADA               	incf	??_getPercentValue+1,f
  7708  170A  0859               	movf	??_getPercentValue,w
  7709  170B  3E64               	addlw	100
  7710  170C  00A8               	movwf	___awtoft@c
  7711  170D  3000               	movlw	0
  7712  170E  3D5A               	addwfc	??_getPercentValue+1,w
  7713  170F  00A9               	movwf	___awtoft@c+1
  7714  1710  3192  2249  3196   	fcall	___awtoft
  7715  1713  0020               	movlb	0	; select bank0
  7716  1714  0828               	movf	?___awtoft,w
  7717  1715  00B1               	movwf	___ftmul@f2
  7718  1716  0829               	movf	?___awtoft+1,w
  7719  1717  00B2               	movwf	___ftmul@f2+1
  7720  1718  082A               	movf	?___awtoft+2,w
  7721  1719  00B3               	movwf	___ftmul@f2+2
  7722  171A  085C               	movf	getPercentValue@i,w
  7723  171B  00AE               	movwf	___ftmul@f1
  7724  171C  085D               	movf	getPercentValue@i+1,w
  7725  171D  00AF               	movwf	___ftmul@f1+1
  7726  171E  085E               	movf	getPercentValue@i+2,w
  7727  171F  00B0               	movwf	___ftmul@f1+2
  7728  1720  318E  2696  3196   	fcall	___ftmul
  7729  1723  0020               	movlb	0	; select bank0
  7730  1724  082E               	movf	?___ftmul,w
  7731  1725  00C1               	movwf	___ftadd@f2
  7732  1726  082F               	movf	?___ftmul+1,w
  7733  1727  00C2               	movwf	___ftadd@f2+1
  7734  1728  0830               	movf	?___ftmul+2,w
  7735  1729  00C3               	movwf	___ftadd@f2+2
  7736  172A  3000               	movlw	0
  7737  172B  00BE               	movwf	___ftadd@f1
  7738  172C  3080               	movlw	128
  7739  172D  00BF               	movwf	___ftadd@f1+1
  7740  172E  3040               	movlw	64
  7741  172F  00C0               	movwf	___ftadd@f1+2
  7742  1730  3184  2474  3196   	fcall	___ftadd
  7743  1733  0020               	movlb	0	; select bank0
  7744  1734  083E               	movf	?___ftadd,w
  7745  1735  00CB               	movwf	___fttol@f1
  7746  1736  083F               	movf	?___ftadd+1,w
  7747  1737  00CC               	movwf	___fttol@f1+1
  7748  1738  0840               	movf	?___ftadd+2,w
  7749  1739  00CD               	movwf	___fttol@f1+2
  7750  173A  318B  231F         	fcall	___fttol
  7751  173C  0020               	movlb	0	; select bank0
  7752  173D  084B               	movf	?___fttol,w
  7753  173E  0008               	return
  7754  173F                     __end_of_getPercentValue:	
  7755                           
  7756                           	psect	text34
  7757  0E96                     __ptext34:	
  7758 ;; *************** function ___ftmul *****************
  7759 ;; Defined at:
  7760 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;  f1              3   14[BANK0 ] float 
  7763 ;;  f2              3   17[BANK0 ] float 
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7766 ;;  sign            1   29[BANK0 ] unsigned char 
  7767 ;;  cntr            1   28[BANK0 ] unsigned char 
  7768 ;;  exp             1   24[BANK0 ] unsigned char 
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  3   14[BANK0 ] float 
  7771 ;; Registers used:
  7772 ;;		wreg, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7778 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;Total ram usage:       16 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    6
  7785 ;; This function calls:
  7786 ;;		___ftpack
  7787 ;; This function is called by:
  7788 ;;		_getPercentValue
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function ___ftmul
  7794  0E96                     ___ftmul:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7798  0E96  0020               	movlb	0	; select bank0
  7799  0E97  082E               	movf	___ftmul@f1,w
  7800  0E98  00B4               	movwf	??___ftmul
  7801  0E99  082F               	movf	___ftmul@f1+1,w
  7802  0E9A  00B5               	movwf	??___ftmul+1
  7803  0E9B  0830               	movf	___ftmul@f1+2,w
  7804  0E9C  00B6               	movwf	??___ftmul+2
  7805  0E9D  1003               	clrc
  7806  0E9E  0D35               	rlf	??___ftmul+1,w
  7807  0E9F  0D36               	rlf	??___ftmul+2,w
  7808  0EA0  00B7               	movwf	??___ftmul+3
  7809  0EA1  0837               	movf	??___ftmul+3,w
  7810  0EA2  00B8               	movwf	___ftmul@exp
  7811  0EA3  08B8               	movf	___ftmul@exp,f
  7812  0EA4  1D03               	skipz
  7813  0EA5  2EAD               	goto	l5490
  7814  0EA6  3000               	movlw	0
  7815  0EA7  00AE               	movwf	?___ftmul
  7816  0EA8  3000               	movlw	0
  7817  0EA9  00AF               	movwf	?___ftmul+1
  7818  0EAA  3000               	movlw	0
  7819  0EAB  00B0               	movwf	?___ftmul+2
  7820  0EAC  0008               	return
  7821  0EAD                     l5490:	
  7822  0EAD  0831               	movf	___ftmul@f2,w
  7823  0EAE  00B4               	movwf	??___ftmul
  7824  0EAF  0832               	movf	___ftmul@f2+1,w
  7825  0EB0  00B5               	movwf	??___ftmul+1
  7826  0EB1  0833               	movf	___ftmul@f2+2,w
  7827  0EB2  00B6               	movwf	??___ftmul+2
  7828  0EB3  1003               	clrc
  7829  0EB4  0D35               	rlf	??___ftmul+1,w
  7830  0EB5  0D36               	rlf	??___ftmul+2,w
  7831  0EB6  00B7               	movwf	??___ftmul+3
  7832  0EB7  0837               	movf	??___ftmul+3,w
  7833  0EB8  00BD               	movwf	___ftmul@sign
  7834  0EB9  08BD               	movf	___ftmul@sign,f
  7835  0EBA  1D03               	skipz
  7836  0EBB  2EC3               	goto	l5496
  7837  0EBC  3000               	movlw	0
  7838  0EBD  00AE               	movwf	?___ftmul
  7839  0EBE  3000               	movlw	0
  7840  0EBF  00AF               	movwf	?___ftmul+1
  7841  0EC0  3000               	movlw	0
  7842  0EC1  00B0               	movwf	?___ftmul+2
  7843  0EC2  0008               	return
  7844  0EC3                     l5496:	
  7845  0EC3  083D               	movf	___ftmul@sign,w
  7846  0EC4  3E7B               	addlw	123
  7847  0EC5  00B4               	movwf	??___ftmul
  7848  0EC6  0834               	movf	??___ftmul,w
  7849  0EC7  07B8               	addwf	___ftmul@exp,f
  7850  0EC8  082E               	movf	___ftmul@f1,w
  7851  0EC9  00B4               	movwf	??___ftmul
  7852  0ECA  082F               	movf	___ftmul@f1+1,w
  7853  0ECB  00B5               	movwf	??___ftmul+1
  7854  0ECC  0830               	movf	___ftmul@f1+2,w
  7855  0ECD  00B6               	movwf	??___ftmul+2
  7856  0ECE  3010               	movlw	16
  7857  0ECF                     u4025:	
  7858  0ECF  36B6               	lsrf	??___ftmul+2,f
  7859  0ED0  0CB5               	rrf	??___ftmul+1,f
  7860  0ED1  0CB4               	rrf	??___ftmul,f
  7861  0ED2  0B89               	decfsz	9,f
  7862  0ED3  2ECF               	goto	u4025
  7863  0ED4  0834               	movf	??___ftmul,w
  7864  0ED5  00B7               	movwf	??___ftmul+3
  7865  0ED6  0837               	movf	??___ftmul+3,w
  7866  0ED7  00BD               	movwf	___ftmul@sign
  7867  0ED8  0831               	movf	___ftmul@f2,w
  7868  0ED9  00B4               	movwf	??___ftmul
  7869  0EDA  0832               	movf	___ftmul@f2+1,w
  7870  0EDB  00B5               	movwf	??___ftmul+1
  7871  0EDC  0833               	movf	___ftmul@f2+2,w
  7872  0EDD  00B6               	movwf	??___ftmul+2
  7873  0EDE  3010               	movlw	16
  7874  0EDF                     u4035:	
  7875  0EDF  36B6               	lsrf	??___ftmul+2,f
  7876  0EE0  0CB5               	rrf	??___ftmul+1,f
  7877  0EE1  0CB4               	rrf	??___ftmul,f
  7878  0EE2  0B89               	decfsz	9,f
  7879  0EE3  2EDF               	goto	u4035
  7880  0EE4  0834               	movf	??___ftmul,w
  7881  0EE5  00B7               	movwf	??___ftmul+3
  7882  0EE6  0837               	movf	??___ftmul+3,w
  7883  0EE7  06BD               	xorwf	___ftmul@sign,f
  7884  0EE8  3080               	movlw	128
  7885  0EE9  00B4               	movwf	??___ftmul
  7886  0EEA  0834               	movf	??___ftmul,w
  7887  0EEB  05BD               	andwf	___ftmul@sign,f
  7888  0EEC  17AF               	bsf	___ftmul@f1+1,7
  7889  0EED  17B2               	bsf	___ftmul@f2+1,7
  7890  0EEE  30FF               	movlw	255
  7891  0EEF  05B1               	andwf	___ftmul@f2,f
  7892  0EF0  30FF               	movlw	255
  7893  0EF1  05B2               	andwf	___ftmul@f2+1,f
  7894  0EF2  3000               	movlw	0
  7895  0EF3  05B3               	andwf	___ftmul@f2+2,f
  7896  0EF4  3000               	movlw	0
  7897  0EF5  00B9               	movwf	___ftmul@f3_as_product
  7898  0EF6  3000               	movlw	0
  7899  0EF7  00BA               	movwf	___ftmul@f3_as_product+1
  7900  0EF8  3000               	movlw	0
  7901  0EF9  00BB               	movwf	___ftmul@f3_as_product+2
  7902  0EFA  3007               	movlw	7
  7903  0EFB  00B4               	movwf	??___ftmul
  7904  0EFC  0834               	movf	??___ftmul,w
  7905  0EFD  00BC               	movwf	___ftmul@cntr
  7906  0EFE                     l5508:	
  7907  0EFE  1C2E               	btfss	___ftmul@f1,0
  7908  0EFF  2F06               	goto	l5512
  7909  0F00  0831               	movf	___ftmul@f2,w
  7910  0F01  07B9               	addwf	___ftmul@f3_as_product,f
  7911  0F02  0832               	movf	___ftmul@f2+1,w
  7912  0F03  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7913  0F04  0833               	movf	___ftmul@f2+2,w
  7914  0F05  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7915  0F06                     l5512:	
  7916  0F06  3001               	movlw	1
  7917  0F07                     u4055:	
  7918  0F07  36B0               	lsrf	___ftmul@f1+2,f
  7919  0F08  0CAF               	rrf	___ftmul@f1+1,f
  7920  0F09  0CAE               	rrf	___ftmul@f1,f
  7921  0F0A  0B89               	decfsz	9,f
  7922  0F0B  2F07               	goto	u4055
  7923  0F0C  3001               	movlw	1
  7924  0F0D                     u4065:	
  7925  0F0D  35B1               	lslf	___ftmul@f2,f
  7926  0F0E  0DB2               	rlf	___ftmul@f2+1,f
  7927  0F0F  0DB3               	rlf	___ftmul@f2+2,f
  7928  0F10  0B89               	decfsz	9,f
  7929  0F11  2F0D               	goto	u4065
  7930  0F12  3001               	movlw	1
  7931  0F13  02BC               	subwf	___ftmul@cntr,f
  7932  0F14  1D03               	btfss	3,2
  7933  0F15  2EFE               	goto	l5508
  7934  0F16  3009               	movlw	9
  7935  0F17  00B4               	movwf	??___ftmul
  7936  0F18  0834               	movf	??___ftmul,w
  7937  0F19  00BC               	movwf	___ftmul@cntr
  7938  0F1A                     l5520:	
  7939  0F1A  1C2E               	btfss	___ftmul@f1,0
  7940  0F1B  2F22               	goto	l5524
  7941  0F1C  0831               	movf	___ftmul@f2,w
  7942  0F1D  07B9               	addwf	___ftmul@f3_as_product,f
  7943  0F1E  0832               	movf	___ftmul@f2+1,w
  7944  0F1F  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7945  0F20  0833               	movf	___ftmul@f2+2,w
  7946  0F21  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7947  0F22                     l5524:	
  7948  0F22  3001               	movlw	1
  7949  0F23                     u4095:	
  7950  0F23  36B0               	lsrf	___ftmul@f1+2,f
  7951  0F24  0CAF               	rrf	___ftmul@f1+1,f
  7952  0F25  0CAE               	rrf	___ftmul@f1,f
  7953  0F26  0B89               	decfsz	9,f
  7954  0F27  2F23               	goto	u4095
  7955  0F28  3001               	movlw	1
  7956  0F29                     u4105:	
  7957  0F29  36BB               	lsrf	___ftmul@f3_as_product+2,f
  7958  0F2A  0CBA               	rrf	___ftmul@f3_as_product+1,f
  7959  0F2B  0CB9               	rrf	___ftmul@f3_as_product,f
  7960  0F2C  0B89               	decfsz	9,f
  7961  0F2D  2F29               	goto	u4105
  7962  0F2E  3001               	movlw	1
  7963  0F2F  02BC               	subwf	___ftmul@cntr,f
  7964  0F30  1D03               	btfss	3,2
  7965  0F31  2F1A               	goto	l5520
  7966  0F32  0839               	movf	___ftmul@f3_as_product,w
  7967  0F33  00A0               	movwf	___ftpack@arg
  7968  0F34  083A               	movf	___ftmul@f3_as_product+1,w
  7969  0F35  00A1               	movwf	___ftpack@arg+1
  7970  0F36  083B               	movf	___ftmul@f3_as_product+2,w
  7971  0F37  00A2               	movwf	___ftpack@arg+2
  7972  0F38  0838               	movf	___ftmul@exp,w
  7973  0F39  00B4               	movwf	??___ftmul
  7974  0F3A  0834               	movf	??___ftmul,w
  7975  0F3B  00A3               	movwf	___ftpack@exp
  7976  0F3C  083D               	movf	___ftmul@sign,w
  7977  0F3D  00B5               	movwf	??___ftmul+1
  7978  0F3E  0835               	movf	??___ftmul+1,w
  7979  0F3F  00A4               	movwf	___ftpack@sign
  7980  0F40  3197  279F         	fcall	___ftpack
  7981  0F42  0020               	movlb	0	; select bank0
  7982  0F43  0820               	movf	?___ftpack,w
  7983  0F44  00AE               	movwf	?___ftmul
  7984  0F45  0821               	movf	?___ftpack+1,w
  7985  0F46  00AF               	movwf	?___ftmul+1
  7986  0F47  0822               	movf	?___ftpack+2,w
  7987  0F48  00B0               	movwf	?___ftmul+2
  7988  0F49  0008               	return
  7989  0F4A                     __end_of___ftmul:	
  7990                           
  7991                           	psect	text35
  7992  0474                     __ptext35:	
  7993 ;; *************** function ___ftadd *****************
  7994 ;; Defined at:
  7995 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  f1              3   30[BANK0 ] float 
  7998 ;;  f2              3   33[BANK0 ] float 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;  exp1            1   42[BANK0 ] unsigned char 
  8001 ;;  exp2            1   41[BANK0 ] unsigned char 
  8002 ;;  sign            1   40[BANK0 ] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  3   30[BANK0 ] float 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, pclath, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8012 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;Total ram usage:       13 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    6
  8019 ;; This function calls:
  8020 ;;		___ftpack
  8021 ;; This function is called by:
  8022 ;;		_getPercentValue
  8023 ;; This function uses a non-reentrant model
  8024 ;;
  8025                           
  8026                           
  8027                           ;psect for function ___ftadd
  8028  0474                     ___ftadd:	
  8029                           
  8030                           ;incstack = 0
  8031                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8032  0474  0020               	movlb	0	; select bank0
  8033  0475  083E               	movf	___ftadd@f1,w
  8034  0476  00C4               	movwf	??___ftadd
  8035  0477  083F               	movf	___ftadd@f1+1,w
  8036  0478  00C5               	movwf	??___ftadd+1
  8037  0479  0840               	movf	___ftadd@f1+2,w
  8038  047A  00C6               	movwf	??___ftadd+2
  8039  047B  1003               	clrc
  8040  047C  0D45               	rlf	??___ftadd+1,w
  8041  047D  0D46               	rlf	??___ftadd+2,w
  8042  047E  00C7               	movwf	??___ftadd+3
  8043  047F  0847               	movf	??___ftadd+3,w
  8044  0480  00CA               	movwf	___ftadd@exp1
  8045  0481  0841               	movf	___ftadd@f2,w
  8046  0482  00C4               	movwf	??___ftadd
  8047  0483  0842               	movf	___ftadd@f2+1,w
  8048  0484  00C5               	movwf	??___ftadd+1
  8049  0485  0843               	movf	___ftadd@f2+2,w
  8050  0486  00C6               	movwf	??___ftadd+2
  8051  0487  1003               	clrc
  8052  0488  0D45               	rlf	??___ftadd+1,w
  8053  0489  0D46               	rlf	??___ftadd+2,w
  8054  048A  00C7               	movwf	??___ftadd+3
  8055  048B  0847               	movf	??___ftadd+3,w
  8056  048C  00C9               	movwf	___ftadd@exp2
  8057  048D  084A               	movf	___ftadd@exp1,w
  8058  048E  1903               	btfsc	3,2
  8059  048F  2C9C               	goto	l5378
  8060  0490  0849               	movf	___ftadd@exp2,w
  8061  0491  024A               	subwf	___ftadd@exp1,w
  8062  0492  1803               	skipnc
  8063  0493  2CA3               	goto	l5382
  8064  0494  034A               	decf	___ftadd@exp1,w
  8065  0495  3AFF               	xorlw	255
  8066  0496  0749               	addwf	___ftadd@exp2,w
  8067  0497  00C4               	movwf	??___ftadd
  8068  0498  3019               	movlw	25
  8069  0499  0244               	subwf	??___ftadd,w
  8070  049A  1C03               	skipc
  8071  049B  2CA3               	goto	l5382
  8072  049C                     l5378:	
  8073  049C  0841               	movf	___ftadd@f2,w
  8074  049D  00BE               	movwf	?___ftadd
  8075  049E  0842               	movf	___ftadd@f2+1,w
  8076  049F  00BF               	movwf	?___ftadd+1
  8077  04A0  0843               	movf	___ftadd@f2+2,w
  8078  04A1  00C0               	movwf	?___ftadd+2
  8079  04A2  0008               	return
  8080  04A3                     l5382:	
  8081  04A3  0849               	movf	___ftadd@exp2,w
  8082  04A4  1903               	btfsc	3,2
  8083  04A5  0008               	return
  8084  04A6  084A               	movf	___ftadd@exp1,w
  8085  04A7  0249               	subwf	___ftadd@exp2,w
  8086  04A8  1803               	skipnc
  8087  04A9  2CB2               	goto	l5388
  8088  04AA  0349               	decf	___ftadd@exp2,w
  8089  04AB  3AFF               	xorlw	255
  8090  04AC  074A               	addwf	___ftadd@exp1,w
  8091  04AD  00C4               	movwf	??___ftadd
  8092  04AE  3019               	movlw	25
  8093  04AF  0244               	subwf	??___ftadd,w
  8094  04B0  1803               	btfsc	3,0
  8095  04B1  0008               	return
  8096  04B2                     l5388:	
  8097  04B2  3006               	movlw	6
  8098  04B3  00C4               	movwf	??___ftadd
  8099  04B4  0844               	movf	??___ftadd,w
  8100  04B5  00C8               	movwf	___ftadd@sign
  8101  04B6  1BC0               	btfsc	___ftadd@f1+2,7
  8102  04B7  17C8               	bsf	___ftadd@sign,7
  8103  04B8  1BC3               	btfsc	___ftadd@f2+2,7
  8104  04B9  1748               	bsf	___ftadd@sign,6
  8105  04BA  17BF               	bsf	___ftadd@f1+1,7
  8106  04BB  30FF               	movlw	255
  8107  04BC  05BE               	andwf	___ftadd@f1,f
  8108  04BD  30FF               	movlw	255
  8109  04BE  05BF               	andwf	___ftadd@f1+1,f
  8110  04BF  3000               	movlw	0
  8111  04C0  05C0               	andwf	___ftadd@f1+2,f
  8112  04C1  17C2               	bsf	___ftadd@f2+1,7
  8113  04C2  30FF               	movlw	255
  8114  04C3  05C1               	andwf	___ftadd@f2,f
  8115  04C4  30FF               	movlw	255
  8116  04C5  05C2               	andwf	___ftadd@f2+1,f
  8117  04C6  3000               	movlw	0
  8118  04C7  05C3               	andwf	___ftadd@f2+2,f
  8119  04C8  0849               	movf	___ftadd@exp2,w
  8120  04C9  024A               	subwf	___ftadd@exp1,w
  8121  04CA  1803               	skipnc
  8122  04CB  2CEE               	goto	l5410
  8123  04CC                     l5400:	
  8124  04CC  3001               	movlw	1
  8125  04CD                     u3785:	
  8126  04CD  35C1               	lslf	___ftadd@f2,f
  8127  04CE  0DC2               	rlf	___ftadd@f2+1,f
  8128  04CF  0DC3               	rlf	___ftadd@f2+2,f
  8129  04D0  0B89               	decfsz	9,f
  8130  04D1  2CCD               	goto	u3785
  8131  04D2  3001               	movlw	1
  8132  04D3  02C9               	subwf	___ftadd@exp2,f
  8133  04D4  0849               	movf	___ftadd@exp2,w
  8134  04D5  064A               	xorwf	___ftadd@exp1,w
  8135  04D6  1903               	skipnz
  8136  04D7  2CE9               	goto	l5408
  8137  04D8  3001               	movlw	1
  8138  04D9  02C8               	subwf	___ftadd@sign,f
  8139  04DA  0848               	movf	___ftadd@sign,w
  8140  04DB  3907               	andlw	7
  8141  04DC  1903               	btfsc	3,2
  8142  04DD  2CE9               	goto	l5408
  8143  04DE  2CCC               	goto	l5400
  8144  04DF                     l5406:	
  8145  04DF  3001               	movlw	1
  8146  04E0                     u3815:	
  8147  04E0  36C0               	lsrf	___ftadd@f1+2,f
  8148  04E1  0CBF               	rrf	___ftadd@f1+1,f
  8149  04E2  0CBE               	rrf	___ftadd@f1,f
  8150  04E3  0B89               	decfsz	9,f
  8151  04E4  2CE0               	goto	u3815
  8152  04E5  3001               	movlw	1
  8153  04E6  00C4               	movwf	??___ftadd
  8154  04E7  0844               	movf	??___ftadd,w
  8155  04E8  07CA               	addwf	___ftadd@exp1,f
  8156  04E9                     l5408:	
  8157  04E9  084A               	movf	___ftadd@exp1,w
  8158  04EA  0649               	xorwf	___ftadd@exp2,w
  8159  04EB  1903               	btfsc	3,2
  8160  04EC  2D13               	goto	l3023
  8161  04ED  2CDF               	goto	l5406
  8162  04EE                     l5410:	
  8163  04EE  084A               	movf	___ftadd@exp1,w
  8164  04EF  0249               	subwf	___ftadd@exp2,w
  8165  04F0  1803               	skipnc
  8166  04F1  2D13               	goto	l3023
  8167  04F2                     l5412:	
  8168  04F2  3001               	movlw	1
  8169  04F3                     u3845:	
  8170  04F3  35BE               	lslf	___ftadd@f1,f
  8171  04F4  0DBF               	rlf	___ftadd@f1+1,f
  8172  04F5  0DC0               	rlf	___ftadd@f1+2,f
  8173  04F6  0B89               	decfsz	9,f
  8174  04F7  2CF3               	goto	u3845
  8175  04F8  3001               	movlw	1
  8176  04F9  02CA               	subwf	___ftadd@exp1,f
  8177  04FA  0849               	movf	___ftadd@exp2,w
  8178  04FB  064A               	xorwf	___ftadd@exp1,w
  8179  04FC  1903               	skipnz
  8180  04FD  2D0F               	goto	l5420
  8181  04FE  3001               	movlw	1
  8182  04FF  02C8               	subwf	___ftadd@sign,f
  8183  0500  0848               	movf	___ftadd@sign,w
  8184  0501  3907               	andlw	7
  8185  0502  1903               	btfsc	3,2
  8186  0503  2D0F               	goto	l5420
  8187  0504  2CF2               	goto	l5412
  8188  0505                     l5418:	
  8189  0505  3001               	movlw	1
  8190  0506                     u3875:	
  8191  0506  36C3               	lsrf	___ftadd@f2+2,f
  8192  0507  0CC2               	rrf	___ftadd@f2+1,f
  8193  0508  0CC1               	rrf	___ftadd@f2,f
  8194  0509  0B89               	decfsz	9,f
  8195  050A  2D06               	goto	u3875
  8196  050B  3001               	movlw	1
  8197  050C  00C4               	movwf	??___ftadd
  8198  050D  0844               	movf	??___ftadd,w
  8199  050E  07C9               	addwf	___ftadd@exp2,f
  8200  050F                     l5420:	
  8201  050F  084A               	movf	___ftadd@exp1,w
  8202  0510  0649               	xorwf	___ftadd@exp2,w
  8203  0511  1D03               	skipz
  8204  0512  2D05               	goto	l5418
  8205  0513                     l3023:	
  8206  0513  1FC8               	btfss	___ftadd@sign,7
  8207  0514  2D25               	goto	l5424
  8208  0515  30FF               	movlw	255
  8209  0516  06BE               	xorwf	___ftadd@f1,f
  8210  0517  30FF               	movlw	255
  8211  0518  06BF               	xorwf	___ftadd@f1+1,f
  8212  0519  30FF               	movlw	255
  8213  051A  06C0               	xorwf	___ftadd@f1+2,f
  8214  051B  3001               	movlw	1
  8215  051C  07BE               	addwf	___ftadd@f1,f
  8216  051D  3000               	movlw	0
  8217  051E  1803               	skipnc
  8218  051F  3001               	movlw	1
  8219  0520  07BF               	addwf	___ftadd@f1+1,f
  8220  0521  3000               	movlw	0
  8221  0522  1803               	skipnc
  8222  0523  3001               	movlw	1
  8223  0524  07C0               	addwf	___ftadd@f1+2,f
  8224  0525                     l5424:	
  8225  0525  1F48               	btfss	___ftadd@sign,6
  8226  0526  2D37               	goto	l5428
  8227  0527  30FF               	movlw	255
  8228  0528  06C1               	xorwf	___ftadd@f2,f
  8229  0529  30FF               	movlw	255
  8230  052A  06C2               	xorwf	___ftadd@f2+1,f
  8231  052B  30FF               	movlw	255
  8232  052C  06C3               	xorwf	___ftadd@f2+2,f
  8233  052D  3001               	movlw	1
  8234  052E  07C1               	addwf	___ftadd@f2,f
  8235  052F  3000               	movlw	0
  8236  0530  1803               	skipnc
  8237  0531  3001               	movlw	1
  8238  0532  07C2               	addwf	___ftadd@f2+1,f
  8239  0533  3000               	movlw	0
  8240  0534  1803               	skipnc
  8241  0535  3001               	movlw	1
  8242  0536  07C3               	addwf	___ftadd@f2+2,f
  8243  0537                     l5428:	
  8244  0537  01C8               	clrf	___ftadd@sign
  8245  0538  083E               	movf	___ftadd@f1,w
  8246  0539  07C1               	addwf	___ftadd@f2,f
  8247  053A  083F               	movf	___ftadd@f1+1,w
  8248  053B  3DC2               	addwfc	___ftadd@f2+1,f
  8249  053C  0840               	movf	___ftadd@f1+2,w
  8250  053D  3DC3               	addwfc	___ftadd@f2+2,f
  8251  053E  1FC3               	btfss	___ftadd@f2+2,7
  8252  053F  2D52               	goto	l5438
  8253  0540  30FF               	movlw	255
  8254  0541  06C1               	xorwf	___ftadd@f2,f
  8255  0542  30FF               	movlw	255
  8256  0543  06C2               	xorwf	___ftadd@f2+1,f
  8257  0544  30FF               	movlw	255
  8258  0545  06C3               	xorwf	___ftadd@f2+2,f
  8259  0546  3001               	movlw	1
  8260  0547  07C1               	addwf	___ftadd@f2,f
  8261  0548  3000               	movlw	0
  8262  0549  1803               	skipnc
  8263  054A  3001               	movlw	1
  8264  054B  07C2               	addwf	___ftadd@f2+1,f
  8265  054C  3000               	movlw	0
  8266  054D  1803               	skipnc
  8267  054E  3001               	movlw	1
  8268  054F  07C3               	addwf	___ftadd@f2+2,f
  8269  0550  01C8               	clrf	___ftadd@sign
  8270  0551  0AC8               	incf	___ftadd@sign,f
  8271  0552                     l5438:	
  8272  0552  0841               	movf	___ftadd@f2,w
  8273  0553  00A0               	movwf	___ftpack@arg
  8274  0554  0842               	movf	___ftadd@f2+1,w
  8275  0555  00A1               	movwf	___ftpack@arg+1
  8276  0556  0843               	movf	___ftadd@f2+2,w
  8277  0557  00A2               	movwf	___ftpack@arg+2
  8278  0558  084A               	movf	___ftadd@exp1,w
  8279  0559  00C4               	movwf	??___ftadd
  8280  055A  0844               	movf	??___ftadd,w
  8281  055B  00A3               	movwf	___ftpack@exp
  8282  055C  0848               	movf	___ftadd@sign,w
  8283  055D  00C5               	movwf	??___ftadd+1
  8284  055E  0845               	movf	??___ftadd+1,w
  8285  055F  00A4               	movwf	___ftpack@sign
  8286  0560  3197  279F         	fcall	___ftpack
  8287  0562  0020               	movlb	0	; select bank0
  8288  0563  0820               	movf	?___ftpack,w
  8289  0564  00BE               	movwf	?___ftadd
  8290  0565  0821               	movf	?___ftpack+1,w
  8291  0566  00BF               	movwf	?___ftadd+1
  8292  0567  0822               	movf	?___ftpack+2,w
  8293  0568  00C0               	movwf	?___ftadd+2
  8294  0569  0008               	return
  8295  056A                     __end_of___ftadd:	
  8296                           
  8297                           	psect	text36
  8298  11E8                     __ptext36:	
  8299 ;; *************** function _RfSWPointSelect *****************
  8300 ;; Defined at:
  8301 ;;		line 340 in file "../src/RF_Control_B1.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;  sw              1    wreg     unsigned char 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  sw              1    1[BANK0 ] unsigned char 
  8306 ;; Return value:  Size  Location     Type
  8307 ;;		None               void
  8308 ;; Registers used:
  8309 ;;		wreg
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;Total ram usage:        2 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    5
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_setRFSW_Control
  8326 ;;		_setRFSW_AdjControl
  8327 ;;		_setRFSW_Status
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           
  8332                           ;psect for function _RfSWPointSelect
  8333  11E8                     _RfSWPointSelect:	
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _RfSWPointSelect: [wreg]
  8337                           ;RfSWPointSelect@sw stored from wreg
  8338  11E8  0020               	movlb	0	; select bank0
  8339  11E9  00A1               	movwf	RfSWPointSelect@sw
  8340                           
  8341                           ;RF_Control_B1.c: 342: if (sw == 1) {
  8342  11EA  0821               	movf	RfSWPointSelect@sw,w
  8343  11EB  3A01               	xorlw	1
  8344  11EC  1D03               	skipz
  8345  11ED  29F3               	goto	l2252
  8346                           
  8347                           ;RF_Control_B1.c: 343: RFSW = &RFSW1;
  8348  11EE  30E9               	movlw	_RFSW1& (0+255)
  8349  11EF  00A0               	movwf	??_RfSWPointSelect
  8350  11F0  0820               	movf	??_RfSWPointSelect,w
  8351  11F1  0021               	movlb	1	; select bank1
  8352  11F2  00BF               	movwf	_RFSW^(0+128)
  8353  11F3                     l2252:	
  8354                           
  8355                           ;RF_Control_B1.c: 344: }
  8356                           ;RF_Control_B1.c: 347: if (sw == 2) {
  8357  11F3  0020               	movlb	0	; select bank0
  8358  11F4  0821               	movf	RfSWPointSelect@sw,w
  8359  11F5  3A02               	xorlw	2
  8360  11F6  1D03               	skipz
  8361  11F7  29FD               	goto	l2253
  8362                           
  8363                           ;RF_Control_B1.c: 348: RFSW = &RFSW2;
  8364  11F8  30EA               	movlw	_RFSW2& (0+255)
  8365  11F9  00A0               	movwf	??_RfSWPointSelect
  8366  11FA  0820               	movf	??_RfSWPointSelect,w
  8367  11FB  0021               	movlb	1	; select bank1
  8368  11FC  00BF               	movwf	_RFSW^(0+128)
  8369  11FD                     l2253:	
  8370                           
  8371                           ;RF_Control_B1.c: 349: }
  8372                           ;RF_Control_B1.c: 352: if (sw == 3) {
  8373  11FD  0020               	movlb	0	; select bank0
  8374  11FE  0821               	movf	RfSWPointSelect@sw,w
  8375  11FF  3A03               	xorlw	3
  8376  1200  1D03               	skipz
  8377  1201  0008               	return
  8378                           
  8379                           ;RF_Control_B1.c: 353: RFSW = &RFSW3;
  8380  1202  30EB               	movlw	_RFSW3& (0+255)
  8381  1203  00A0               	movwf	??_RfSWPointSelect
  8382  1204  0820               	movf	??_RfSWPointSelect,w
  8383  1205  0021               	movlb	1	; select bank1
  8384  1206  00BF               	movwf	_RFSW^(0+128)
  8385  1207  0008               	return
  8386  1208                     __end_of_RfSWPointSelect:	
  8387                           
  8388                           	psect	text37
  8389  11C8                     __ptext37:	
  8390 ;; *************** function _RF_RxDisable *****************
  8391 ;; Defined at:
  8392 ;;		line 215 in file "../src/RF_Control_B1.c"
  8393 ;; Parameters:    Size  Location     Type
  8394 ;;  rf              1    wreg     unsigned char 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;  rf              1    4[BANK0 ] unsigned char 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;		None               void
  8399 ;; Registers used:
  8400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        1 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    7
  8413 ;; This function calls:
  8414 ;;		_CC2500_WriteCommand
  8415 ;;		_RfPointSelect
  8416 ;; This function is called by:
  8417 ;;		_setRF_Main
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           
  8422                           ;psect for function _RF_RxDisable
  8423  11C8                     _RF_RxDisable:	
  8424                           
  8425                           ;incstack = 0
  8426                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8427                           ;RF_RxDisable@rf stored from wreg
  8428  11C8  0020               	movlb	0	; select bank0
  8429  11C9  00A4               	movwf	RF_RxDisable@rf
  8430                           
  8431                           ;RF_Control_B1.c: 216: RfPointSelect(rf);
  8432  11CA  0824               	movf	RF_RxDisable@rf,w
  8433  11CB  319E  2627  3191   	fcall	_RfPointSelect
  8434                           
  8435                           ;RF_Control_B1.c: 218: if (RF->ReceiveGO == 1 || RF->RxStatus == 1) {
  8436  11CE  087A               	movf	_RF,w
  8437  11CF  0086               	movwf	6
  8438  11D0  0187               	clrf	7
  8439  11D1  1881               	btfsc	1,1
  8440  11D2  29D8               	goto	l6282
  8441  11D3  087A               	movf	_RF,w
  8442  11D4  0086               	movwf	6
  8443  11D5  0187               	clrf	7
  8444  11D6  1D81               	btfss	1,3
  8445  11D7  0008               	return
  8446  11D8                     l6282:	
  8447                           
  8448                           ;RF_Control_B1.c: 219: RF->RxStatus = 0;
  8449  11D8  087A               	movf	_RF,w
  8450  11D9  0086               	movwf	6
  8451  11DA  0187               	clrf	7
  8452  11DB  1181               	bcf	1,3
  8453                           
  8454                           ;RF_Control_B1.c: 220: RF->ReceiveGO = 0;
  8455  11DC  087A               	movf	_RF,w
  8456  11DD  0086               	movwf	6
  8457  11DE  0187               	clrf	7
  8458  11DF  1081               	bcf	1,1
  8459                           
  8460                           ;RF_Control_B1.c: 221: CC2500_WriteCommand(0x36);
  8461  11E0  3036               	movlw	54
  8462  11E1  319E  267F  3191   	fcall	_CC2500_WriteCommand
  8463                           
  8464                           ;RF_Control_B1.c: 222: CC2500_WriteCommand(0x3A);
  8465  11E4  303A               	movlw	58
  8466  11E5  319E  267F         	fcall	_CC2500_WriteCommand
  8467  11E7  0008               	return
  8468  11E8                     __end_of_RF_RxDisable:	
  8469                           
  8470                           	psect	text38
  8471  149C                     __ptext38:	
  8472 ;; *************** function _CC2500_TxData *****************
  8473 ;; Defined at:
  8474 ;;		line 32 in file "../src/CC2500_B1.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        2 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    7
  8495 ;; This function calls:
  8496 ;;		_CC2500_WriteByte
  8497 ;;		_CC2500_WriteCommand
  8498 ;; This function is called by:
  8499 ;;		_setRF_Main
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           
  8504                           ;psect for function _CC2500_TxData
  8505  149C                     _CC2500_TxData:	
  8506                           
  8507                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8508                           ;CC2500_B1.c: 35: RC4 = 0;
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8512  149C  0020               	movlb	0	; select bank0
  8513  149D  120E               	bcf	14,4	;volatile
  8514                           
  8515                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8516  149E  307F               	movlw	127
  8517  149F  00A4               	movwf	??_CC2500_TxData
  8518  14A0  0824               	movf	??_CC2500_TxData,w
  8519  14A1  0021               	movlb	1	; select bank1
  8520  14A2  00C2               	movwf	_SPI0Buffer^(0+128)
  8521  14A3                     l283:	
  8522                           ;CC2500_B1.c: 37: while (RC2 == 1);
  8523                           
  8524  14A3  0020               	movlb	0	; select bank0
  8525  14A4  190E               	btfsc	14,2	;volatile
  8526  14A5  2CA3               	goto	l283
  8527                           
  8528                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  8529  14A6  319F  27B4  3194   	fcall	_CC2500_WriteByte
  8530                           
  8531                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  8532  14A9  0021               	movlb	1	; select bank1
  8533  14AA  0843               	movf	_Tx_Length^(0+128),w
  8534  14AB  0020               	movlb	0	; select bank0
  8535  14AC  00A4               	movwf	??_CC2500_TxData
  8536  14AD  0824               	movf	??_CC2500_TxData,w
  8537  14AE  0021               	movlb	1	; select bank1
  8538  14AF  00C2               	movwf	_SPI0Buffer^(0+128)
  8539                           
  8540                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  8541  14B0  319F  27B4  3194   	fcall	_CC2500_WriteByte
  8542                           
  8543                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8544  14B3  0020               	movlb	0	; select bank0
  8545  14B4  01A5               	clrf	CC2500_TxData@loop_e
  8546  14B5                     l6070:	
  8547  14B5  0021               	movlb	1	; select bank1
  8548  14B6  0843               	movf	_Tx_Length^(0+128),w
  8549  14B7  0020               	movlb	0	; select bank0
  8550  14B8  0225               	subwf	CC2500_TxData@loop_e,w
  8551  14B9  1803               	btfsc	3,0
  8552  14BA  2CCD               	goto	l288
  8553                           
  8554                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  8555  14BB  0825               	movf	CC2500_TxData@loop_e,w
  8556  14BC  3EA0               	addlw	_RF_Data& (0+255)
  8557  14BD  0086               	movwf	6
  8558  14BE  0187               	clrf	7
  8559  14BF  0801               	movf	1,w
  8560  14C0  00A4               	movwf	??_CC2500_TxData
  8561  14C1  0824               	movf	??_CC2500_TxData,w
  8562  14C2  0021               	movlb	1	; select bank1
  8563  14C3  00C2               	movwf	_SPI0Buffer^(0+128)
  8564                           
  8565                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8566  14C4  319F  27B4  3194   	fcall	_CC2500_WriteByte
  8567  14C7  3001               	movlw	1
  8568  14C8  0020               	movlb	0	; select bank0
  8569  14C9  00A4               	movwf	??_CC2500_TxData
  8570  14CA  0824               	movf	??_CC2500_TxData,w
  8571  14CB  07A5               	addwf	CC2500_TxData@loop_e,f
  8572  14CC  2CB5               	goto	l6070
  8573  14CD                     l288:	
  8574                           
  8575                           ;CC2500_B1.c: 44: }
  8576                           ;CC2500_B1.c: 45: RC4 = 1;
  8577  14CD  160E               	bsf	14,4	;volatile
  8578                           
  8579                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  8580  14CE  3035               	movlw	53
  8581  14CF  319E  267F  3194   	fcall	_CC2500_WriteCommand
  8582  14D2                     l289:	
  8583                           ;CC2500_B1.c: 47: while (RB0 == 0);
  8584                           
  8585  14D2  0020               	movlb	0	; select bank0
  8586  14D3  1C0D               	btfss	13,0	;volatile
  8587  14D4  2CD2               	goto	l289
  8588  14D5                     l292:	
  8589                           ;CC2500_B1.c: 48: while (RB0 == 1);
  8590                           
  8591  14D5  180D               	btfsc	13,0	;volatile
  8592  14D6  2CD5               	goto	l292
  8593                           
  8594                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  8595  14D7  3036               	movlw	54
  8596  14D8  319E  267F  3194   	fcall	_CC2500_WriteCommand
  8597                           
  8598                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  8599  14DB  303B               	movlw	59
  8600  14DC  319E  267F         	fcall	_CC2500_WriteCommand
  8601                           
  8602                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  8603  14DE  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8604  14DF  0008               	return
  8605  14E0                     __end_of_CC2500_TxData:	
  8606                           
  8607                           	psect	text39
  8608  0705                     __ptext39:	
  8609 ;; *************** function _CC2500_RxData *****************
  8610 ;; Defined at:
  8611 ;;		line 57 in file "../src/CC2500_B1.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;  loop_f          1   15[BANK0 ] unsigned char 
  8616 ;; Return value:  Size  Location     Type
  8617 ;;		None               void
  8618 ;; Registers used:
  8619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;Total ram usage:        3 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    7
  8632 ;; This function calls:
  8633 ;;		_CC2500_ReadByte
  8634 ;;		_CC2500_ReadStatus
  8635 ;;		_CC2500_WriteByte
  8636 ;;		_CC2500_WriteCommand
  8637 ;;		_setBuz
  8638 ;; This function is called by:
  8639 ;;		_setRF_Main
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _CC2500_RxData
  8645  0705                     _CC2500_RxData:	
  8646                           
  8647                           ;CC2500_B1.c: 58: unsigned char loop_f;
  8648                           ;CC2500_B1.c: 62: if (RB0 == 1)
  8649                           
  8650                           ;incstack = 0
  8651                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8652  0705  0020               	movlb	0	; select bank0
  8653  0706  180D               	btfsc	13,0	;volatile
  8654  0707  2F38               	goto	l299
  8655  0708  2F3B               	goto	l6090
  8656  0709                     l6082:	
  8657                           ;CC2500_B1.c: 63: {
  8658                           ;CC2500_B1.c: 64: while (RB0 == 1) {
  8659                           
  8660                           
  8661                           ;CC2500_B1.c: 65: myMain->pcount1++;
  8662  0709  0021               	movlb	1	; select bank1
  8663  070A  086E               	movf	_myMain^(0+128),w
  8664  070B  3E10               	addlw	16
  8665  070C  0086               	movwf	6
  8666  070D  3001               	movlw	1	; select bank2/3
  8667  070E  0087               	movwf	7
  8668  070F  3001               	movlw	1
  8669  0710  0781               	addwf	1,f
  8670  0711  3141               	addfsr 1,1
  8671  0712  1803               	skipnc
  8672  0713  0A81               	incf	1,f
  8673                           
  8674                           ;CC2500_B1.c: 66: if (myMain->pcount1 >= 10000) {
  8675  0714  086E               	movf	_myMain^(0+128),w
  8676  0715  3E10               	addlw	16
  8677  0716  0086               	movwf	6
  8678  0717  3001               	movlw	1	; select bank2/3
  8679  0718  0087               	movwf	7
  8680  0719  3F40               	moviw [0]fsr1
  8681  071A  0020               	movlb	0	; select bank0
  8682  071B  00AD               	movwf	??_CC2500_RxData
  8683  071C  3F41               	moviw [1]fsr1
  8684  071D  00AE               	movwf	??_CC2500_RxData+1
  8685  071E  3027               	movlw	39
  8686  071F  022E               	subwf	??_CC2500_RxData+1,w
  8687  0720  3010               	movlw	16
  8688  0721  1903               	skipnz
  8689  0722  022D               	subwf	??_CC2500_RxData,w
  8690  0723  1C03               	skipc
  8691  0724  2F38               	goto	l299
  8692                           
  8693                           ;CC2500_B1.c: 67: myMain->pcount1 = 0;
  8694  0725  0021               	movlb	1	; select bank1
  8695  0726  086E               	movf	_myMain^(0+128),w
  8696  0727  3E10               	addlw	16
  8697  0728  0086               	movwf	6
  8698  0729  3001               	movlw	1	; select bank2/3
  8699  072A  0087               	movwf	7
  8700  072B  3000               	movlw	0
  8701  072C  3FC0               	movwi [0]fsr1
  8702  072D  3FC1               	movwi [1]fsr1
  8703                           
  8704                           ;CC2500_B1.c: 68: setBuz(1, 250);
  8705  072E  30FA               	movlw	250
  8706  072F  0020               	movlb	0	; select bank0
  8707  0730  00A9               	movwf	setBuz@time
  8708  0731  3000               	movlw	0
  8709  0732  00AA               	movwf	setBuz@time+1
  8710  0733  3001               	movlw	1
  8711  0734  318C  24B7  3187   	fcall	_setBuz
  8712                           
  8713                           ;CC2500_B1.c: 69: break;
  8714  0737  2F3B               	goto	l6090
  8715  0738                     l299:	
  8716  0738  0020               	movlb	0	; select bank0
  8717  0739  180D               	btfsc	13,0	;volatile
  8718  073A  2F09               	goto	l6082
  8719  073B                     l6090:	
  8720                           ;CC2500_B1.c: 70: }
  8721                           ;CC2500_B1.c: 71: };
  8722                           
  8723                           
  8724                           ;CC2500_B1.c: 72: }
  8725                           ;CC2500_B1.c: 74: CC2500_ReadStatus(0x3B);
  8726  073B  303B               	movlw	59
  8727  073C  3190  20DD  3187   	fcall	_CC2500_ReadStatus
  8728                           
  8729                           ;CC2500_B1.c: 75: if (s_data != 0) {
  8730  073F  0021               	movlb	1	; select bank1
  8731  0740  0846               	movf	_s_data^(0+128),w
  8732  0741  1903               	btfsc	3,2
  8733  0742  2FBB               	goto	l6132
  8734                           
  8735                           ;CC2500_B1.c: 76: RC4 = 0;
  8736  0743  0020               	movlb	0	; select bank0
  8737  0744  120E               	bcf	14,4	;volatile
  8738                           
  8739                           ;CC2500_B1.c: 77: SPI0Buffer = 0x3F + 0xC0;
  8740  0745  30FF               	movlw	255
  8741  0746  00AD               	movwf	??_CC2500_RxData
  8742  0747  082D               	movf	??_CC2500_RxData,w
  8743  0748  0021               	movlb	1	; select bank1
  8744  0749  00C2               	movwf	_SPI0Buffer^(0+128)
  8745  074A                     l304:	
  8746                           ;CC2500_B1.c: 78: while (RC2 == 1) {
  8747                           
  8748  074A  0020               	movlb	0	; select bank0
  8749  074B  1D0E               	btfss	14,2	;volatile
  8750  074C  2F7B               	goto	l6106
  8751                           
  8752                           ;CC2500_B1.c: 79: myMain->pcount2++;
  8753  074D  0021               	movlb	1	; select bank1
  8754  074E  086E               	movf	_myMain^(0+128),w
  8755  074F  3E12               	addlw	18
  8756  0750  0086               	movwf	6
  8757  0751  3001               	movlw	1	; select bank2/3
  8758  0752  0087               	movwf	7
  8759  0753  3001               	movlw	1
  8760  0754  0781               	addwf	1,f
  8761  0755  3141               	addfsr 1,1
  8762  0756  1803               	skipnc
  8763  0757  0A81               	incf	1,f
  8764                           
  8765                           ;CC2500_B1.c: 80: if (myMain->pcount2 >= 10000) {
  8766  0758  086E               	movf	_myMain^(0+128),w
  8767  0759  3E12               	addlw	18
  8768  075A  0086               	movwf	6
  8769  075B  3001               	movlw	1	; select bank2/3
  8770  075C  0087               	movwf	7
  8771  075D  3F40               	moviw [0]fsr1
  8772  075E  0020               	movlb	0	; select bank0
  8773  075F  00AD               	movwf	??_CC2500_RxData
  8774  0760  3F41               	moviw [1]fsr1
  8775  0761  00AE               	movwf	??_CC2500_RxData+1
  8776  0762  3027               	movlw	39
  8777  0763  022E               	subwf	??_CC2500_RxData+1,w
  8778  0764  3010               	movlw	16
  8779  0765  1903               	skipnz
  8780  0766  022D               	subwf	??_CC2500_RxData,w
  8781  0767  1C03               	skipc
  8782  0768  2F4A               	goto	l304
  8783                           
  8784                           ;CC2500_B1.c: 81: myMain->pcount2 = 0;
  8785  0769  0021               	movlb	1	; select bank1
  8786  076A  086E               	movf	_myMain^(0+128),w
  8787  076B  3E12               	addlw	18
  8788  076C  0086               	movwf	6
  8789  076D  3001               	movlw	1	; select bank2/3
  8790  076E  0087               	movwf	7
  8791  076F  3000               	movlw	0
  8792  0770  3FC0               	movwi [0]fsr1
  8793  0771  3FC1               	movwi [1]fsr1
  8794                           
  8795                           ;CC2500_B1.c: 82: setBuz(2, 250);
  8796  0772  30FA               	movlw	250
  8797  0773  0020               	movlb	0	; select bank0
  8798  0774  00A9               	movwf	setBuz@time
  8799  0775  3000               	movlw	0
  8800  0776  00AA               	movwf	setBuz@time+1
  8801  0777  3002               	movlw	2
  8802  0778  318C  24B7  3187   	fcall	_setBuz
  8803  077B                     l6106:	
  8804                           ;CC2500_B1.c: 83: break;
  8805                           
  8806                           
  8807                           ;CC2500_B1.c: 84: }
  8808                           ;CC2500_B1.c: 85: };
  8809                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8810  077B  319F  27B4  3187   	fcall	_CC2500_WriteByte
  8811                           
  8812                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8813  077E  3191  2131  3187   	fcall	_CC2500_ReadByte
  8814                           
  8815                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8816  0781  0021               	movlb	1	; select bank1
  8817  0782  0842               	movf	_SPI0Buffer^(0+128),w
  8818  0783  0020               	movlb	0	; select bank0
  8819  0784  00AD               	movwf	??_CC2500_RxData
  8820  0785  082D               	movf	??_CC2500_RxData,w
  8821  0786  0021               	movlb	1	; select bank1
  8822  0787  00C1               	movwf	_Rx_Length^(0+128)
  8823                           
  8824                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8825  0788  0020               	movlb	0	; select bank0
  8826  0789  01AF               	clrf	CC2500_RxData@loop_f
  8827  078A                     l6118:	
  8828  078A  0021               	movlb	1	; select bank1
  8829  078B  0841               	movf	_Rx_Length^(0+128),w
  8830  078C  0020               	movlb	0	; select bank0
  8831  078D  022F               	subwf	CC2500_RxData@loop_f,w
  8832  078E  1803               	btfsc	3,0
  8833  078F  2FA2               	goto	l6120
  8834                           
  8835                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8836  0790  3191  2131  3187   	fcall	_CC2500_ReadByte
  8837                           
  8838                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8839  0793  0021               	movlb	1	; select bank1
  8840  0794  0842               	movf	_SPI0Buffer^(0+128),w
  8841  0795  0020               	movlb	0	; select bank0
  8842  0796  00AD               	movwf	??_CC2500_RxData
  8843  0797  082F               	movf	CC2500_RxData@loop_f,w
  8844  0798  3EA0               	addlw	_RF_Data& (0+255)
  8845  0799  0086               	movwf	6
  8846  079A  0187               	clrf	7
  8847  079B  082D               	movf	??_CC2500_RxData,w
  8848  079C  0081               	movwf	1
  8849  079D  3001               	movlw	1
  8850  079E  00AD               	movwf	??_CC2500_RxData
  8851  079F  082D               	movf	??_CC2500_RxData,w
  8852  07A0  07AF               	addwf	CC2500_RxData@loop_f,f
  8853  07A1  2F8A               	goto	l6118
  8854  07A2                     l6120:	
  8855                           
  8856                           ;CC2500_B1.c: 94: }
  8857                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8858  07A2  3191  2131  3187   	fcall	_CC2500_ReadByte
  8859                           
  8860                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8861  07A5  0021               	movlb	1	; select bank1
  8862  07A6  0842               	movf	_SPI0Buffer^(0+128),w
  8863  07A7  0020               	movlb	0	; select bank0
  8864  07A8  00AD               	movwf	??_CC2500_RxData
  8865  07A9  082D               	movf	??_CC2500_RxData,w
  8866  07AA  0021               	movlb	1	; select bank1
  8867  07AB  00C0               	movwf	_RSSI^(0+128)
  8868                           
  8869                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8870  07AC  3191  2131  3187   	fcall	_CC2500_ReadByte
  8871                           
  8872                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  8873  07AF  0021               	movlb	1	; select bank1
  8874  07B0  0842               	movf	_SPI0Buffer^(0+128),w
  8875  07B1  0020               	movlb	0	; select bank0
  8876  07B2  00AD               	movwf	??_CC2500_RxData
  8877  07B3  082D               	movf	??_CC2500_RxData,w
  8878  07B4  0021               	movlb	1	; select bank1
  8879  07B5  00B8               	movwf	_CRC^(0+128)
  8880                           
  8881                           ;CC2500_B1.c: 99: RC4 = 1;
  8882  07B6  0020               	movlb	0	; select bank0
  8883  07B7  160E               	bsf	14,4	;volatile
  8884                           
  8885                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  8886  07B8  0021               	movlb	1	; select bank1
  8887  07B9  1BB8               	btfsc	_CRC^(0+128),7
  8888                           
  8889                           ;CC2500_B1.c: 101: Receive_OK = 1;
  8890  07BA  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8891  07BB                     l6132:	
  8892                           
  8893                           ;CC2500_B1.c: 102: }
  8894                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  8895  07BB  3036               	movlw	54
  8896  07BC  319E  267F  3187   	fcall	_CC2500_WriteCommand
  8897                           
  8898                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  8899  07BF  303A               	movlw	58
  8900  07C0  319E  267F         	fcall	_CC2500_WriteCommand
  8901  07C2  0008               	return
  8902  07C3                     __end_of_CC2500_RxData:	
  8903                           
  8904                           	psect	text40
  8905  10DD                     __ptext40:	
  8906 ;; *************** function _CC2500_ReadStatus *****************
  8907 ;; Defined at:
  8908 ;;		line 277 in file "../src/CC2500_B1.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  status_addr     1    wreg     unsigned char 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;		None               void
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0, pclath, cstack
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;Total ram usage:        2 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    6
  8929 ;; This function calls:
  8930 ;;		_CC2500_ReadByte
  8931 ;;		_CC2500_WriteByte
  8932 ;; This function is called by:
  8933 ;;		_CC2500_RxData
  8934 ;; This function uses a non-reentrant model
  8935 ;;
  8936                           
  8937                           
  8938                           ;psect for function _CC2500_ReadStatus
  8939  10DD                     _CC2500_ReadStatus:	
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  8943                           ;CC2500_ReadStatus@status_addr stored from wreg
  8944  10DD  0020               	movlb	0	; select bank0
  8945  10DE  00A3               	movwf	CC2500_ReadStatus@status_addr
  8946                           
  8947                           ;CC2500_B1.c: 278: RC4 = 0;
  8948  10DF  120E               	bcf	14,4	;volatile
  8949                           
  8950                           ;CC2500_B1.c: 279: SPI0Buffer = status_addr + 0xC0;
  8951  10E0  0823               	movf	CC2500_ReadStatus@status_addr,w
  8952  10E1  3EC0               	addlw	192
  8953  10E2  00A2               	movwf	??_CC2500_ReadStatus
  8954  10E3  0822               	movf	??_CC2500_ReadStatus,w
  8955  10E4  0021               	movlb	1	; select bank1
  8956  10E5  00C2               	movwf	_SPI0Buffer^(0+128)
  8957  10E6                     l381:	
  8958                           ;CC2500_B1.c: 281: while (RC2 == 1);
  8959                           
  8960  10E6  0020               	movlb	0	; select bank0
  8961  10E7  190E               	btfsc	14,2	;volatile
  8962  10E8  28E6               	goto	l381
  8963                           
  8964                           ;CC2500_B1.c: 283: CC2500_WriteByte();
  8965  10E9  319F  27B4  3190   	fcall	_CC2500_WriteByte
  8966                           
  8967                           ;CC2500_B1.c: 284: CC2500_ReadByte();
  8968  10EC  3191  2131         	fcall	_CC2500_ReadByte
  8969                           
  8970                           ;CC2500_B1.c: 285: RC4 = 1;
  8971  10EE  0020               	movlb	0	; select bank0
  8972  10EF  160E               	bsf	14,4	;volatile
  8973                           
  8974                           ;CC2500_B1.c: 287: s_data = SPI0Buffer;
  8975  10F0  0021               	movlb	1	; select bank1
  8976  10F1  0842               	movf	_SPI0Buffer^(0+128),w
  8977  10F2  0020               	movlb	0	; select bank0
  8978  10F3  00A2               	movwf	??_CC2500_ReadStatus
  8979  10F4  0822               	movf	??_CC2500_ReadStatus,w
  8980  10F5  0021               	movlb	1	; select bank1
  8981  10F6  00C6               	movwf	_s_data^(0+128)
  8982  10F7  0008               	return
  8983  10F8                     __end_of_CC2500_ReadStatus:	
  8984                           
  8985                           	psect	text41
  8986  1131                     __ptext41:	
  8987 ;; *************** function _CC2500_ReadByte *****************
  8988 ;; Defined at:
  8989 ;;		line 221 in file "../src/CC2500_B1.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8994 ;; Return value:  Size  Location     Type
  8995 ;;		None               void
  8996 ;; Registers used:
  8997 ;;		wreg, status,2, status,0
  8998 ;; Tracked objects:
  8999 ;;		On entry : 0/0
  9000 ;;		On exit  : 0/0
  9001 ;;		Unchanged: 0/0
  9002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;Total ram usage:        2 bytes
  9008 ;; Hardware stack levels used:    1
  9009 ;; Hardware stack levels required when called:    5
  9010 ;; This function calls:
  9011 ;;		Nothing
  9012 ;; This function is called by:
  9013 ;;		_CC2500_RxData
  9014 ;;		_CC2500_ReadStatus
  9015 ;;		_CC2500_ReadREG
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function _CC2500_ReadByte
  9021  1131                     _CC2500_ReadByte:	
  9022                           
  9023                           ;CC2500_B1.c: 222: unsigned char loop_b;
  9024                           ;CC2500_B1.c: 223: for (loop_b = 0; loop_b < 8; loop_b++) {
  9025                           
  9026                           ;incstack = 0
  9027                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9028  1131  0020               	movlb	0	; select bank0
  9029  1132  01A1               	clrf	CC2500_ReadByte@loop_b
  9030  1133                     L6:	
  9031  1133  3008               	movlw	8
  9032  1134  0221               	subwf	CC2500_ReadByte@loop_b,w
  9033  1135  1803               	btfsc	3,0
  9034  1136  0008               	return
  9035                           
  9036                           ;CC2500_B1.c: 224: RC1 = 1;
  9037  1137  148E               	bsf	14,1	;volatile
  9038                           
  9039                           ;CC2500_B1.c: 225: SPI0Buffer <<= 1;
  9040  1138  1003               	clrc
  9041  1139  0021               	movlb	1	; select bank1
  9042  113A  0DC2               	rlf	_SPI0Buffer^(0+128),f
  9043                           
  9044                           ;CC2500_B1.c: 226: if (RC2 == 1)
  9045  113B  0020               	movlb	0	; select bank0
  9046  113C  1D0E               	btfss	14,2	;volatile
  9047  113D  2941               	goto	l5868
  9048                           
  9049                           ;CC2500_B1.c: 227: SPI0Buffer |= 0x01;
  9050  113E  0021               	movlb	1	; select bank1
  9051  113F  1442               	bsf	_SPI0Buffer^(0+128),0
  9052  1140  2947               	goto	l5870
  9053  1141                     l5868:	
  9054                           
  9055                           ;CC2500_B1.c: 228: else
  9056                           ;CC2500_B1.c: 229: SPI0Buffer &= 0xFE;
  9057  1141  30FE               	movlw	254
  9058  1142  0020               	movlb	0	; select bank0
  9059  1143  00A0               	movwf	??_CC2500_ReadByte
  9060  1144  0820               	movf	??_CC2500_ReadByte,w
  9061  1145  0021               	movlb	1	; select bank1
  9062  1146  05C2               	andwf	_SPI0Buffer^(0+128),f
  9063  1147                     l5870:	
  9064                           
  9065                           ;CC2500_B1.c: 230: RC1 = 0;
  9066  1147  0020               	movlb	0	; select bank0
  9067  1148  108E               	bcf	14,1	;volatile
  9068  1149  3001               	movlw	1
  9069  114A  00A0               	movwf	??_CC2500_ReadByte
  9070  114B  0820               	movf	??_CC2500_ReadByte,w
  9071  114C  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9072  114D  2933               	goto	L6
  9073  114E                     __end_of_CC2500_ReadByte:	
  9074                           
  9075                           	psect	text42
  9076  1DA1                     __ptext42:	
  9077 ;; *************** function _RF_Initialization *****************
  9078 ;; Defined at:
  9079 ;;		line 19 in file "../src/RF_Control_B1.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;		None
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;		None
  9084 ;; Return value:  Size  Location     Type
  9085 ;;		None               void
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0, pclath, cstack
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;Total ram usage:        0 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    6
  9100 ;; This function calls:
  9101 ;;		_setRF_Initialization
  9102 ;; This function is called by:
  9103 ;;		_main
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           
  9108                           ;psect for function _RF_Initialization
  9109  1DA1                     _RF_Initialization:	
  9110                           
  9111                           ;RF_Control_B1.c: 21: setRF_Initialization(1);
  9112                           
  9113                           ;incstack = 0
  9114                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9115  1DA1  3001               	movlw	1
  9116  1DA2  319D  25CE         	fcall	_setRF_Initialization
  9117  1DA4  0008               	return
  9118  1DA5                     __end_of_RF_Initialization:	
  9119                           
  9120                           	psect	text43
  9121  1DCE                     __ptext43:	
  9122 ;; *************** function _setRF_Initialization *****************
  9123 ;; Defined at:
  9124 ;;		line 56 in file "../src/RF_Control_B1.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  rf              1    wreg     unsigned char 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  rf              1    0[COMMON] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;		None               void
  9131 ;; Registers used:
  9132 ;;		wreg
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;Total ram usage:        1 bytes
  9143 ;; Hardware stack levels used:    1
  9144 ;; Hardware stack levels required when called:    5
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_RF_Initialization
  9149 ;; This function uses a non-reentrant model
  9150 ;;
  9151                           
  9152                           
  9153                           ;psect for function _setRF_Initialization
  9154  1DCE                     _setRF_Initialization:	
  9155                           
  9156                           ;RF_Control_B1.c: 59: Tx_Length = 21;
  9157                           
  9158                           ;incstack = 0
  9159                           ; Regs used in _setRF_Initialization: [wreg]
  9160  1DCE  3015               	movlw	21
  9161  1DCF  0020               	movlb	0	; select bank0
  9162  1DD0  00A0               	movwf	??_setRF_Initialization
  9163  1DD1  0820               	movf	??_setRF_Initialization,w
  9164  1DD2  0021               	movlb	1	; select bank1
  9165  1DD3  00C3               	movwf	_Tx_Length^(0+128)
  9166  1DD4  0008               	return
  9167  1DD5                     __end_of_setRF_Initialization:	
  9168                           
  9169                           	psect	text44
  9170  10C2                     __ptext44:	
  9171 ;; *************** function _Mcu_Initialization *****************
  9172 ;; Defined at:
  9173 ;;		line 30 in file "../src/MCU_B1.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;Total ram usage:        1 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    6
  9194 ;; This function calls:
  9195 ;;		_ADC_Set
  9196 ;;		_Fosc_Set
  9197 ;;		_INT_Set
  9198 ;;		_IOC_Set
  9199 ;;		_IO_Set
  9200 ;;		_TMR0_Set
  9201 ;;		_WDT_Set
  9202 ;; This function is called by:
  9203 ;;		_main
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function _Mcu_Initialization
  9209  10C2                     _Mcu_Initialization:	
  9210                           
  9211                           ;MCU_B1.c: 32: Fosc_Set();
  9212                           
  9213                           ;incstack = 0
  9214                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9215  10C2  319D  259D  3190   	fcall	_Fosc_Set
  9216                           
  9217                           ;MCU_B1.c: 34: IO_Set();
  9218  10C5  319F  2784  3190   	fcall	_IO_Set
  9219                           
  9220                           ;MCU_B1.c: 36: TMR0_Set();
  9221  10C8  3188  2000  3190   	fcall	_TMR0_Set
  9222                           
  9223                           ;MCU_B1.c: 38: ;;
  9224                           ;MCU_B1.c: 40: ADC_Set();
  9225  10CB  319D  25C7  3190   	fcall	_ADC_Set
  9226                           
  9227                           ;MCU_B1.c: 44: INT_Set();
  9228  10CE  319D  25AE  3190   	fcall	_INT_Set
  9229                           
  9230                           ;MCU_B1.c: 46: IOC_Set();
  9231  10D1  3190  2066  3190   	fcall	_IOC_Set
  9232                           
  9233                           ;MCU_B1.c: 48: ;;
  9234                           ;MCU_B1.c: 50: ;;
  9235                           ;MCU_B1.c: 52: Memory=&VarMemory;
  9236  10D4  3020               	movlw	_VarMemory& (0+255)
  9237  10D5  0020               	movlb	0	; select bank0
  9238  10D6  00A1               	movwf	??_Mcu_Initialization
  9239  10D7  0821               	movf	??_Mcu_Initialization,w
  9240  10D8  0021               	movlb	1	; select bank1
  9241  10D9  00EF               	movwf	_Memory^(0+128)
  9242                           
  9243                           ;MCU_B1.c: 54: WDT_Set();
  9244  10DA  319F  279C         	fcall	_WDT_Set
  9245  10DC  0008               	return
  9246  10DD                     __end_of_Mcu_Initialization:	
  9247                           
  9248                           	psect	text45
  9249  1F9C                     __ptext45:	
  9250 ;; *************** function _WDT_Set *****************
  9251 ;; Defined at:
  9252 ;;		line 891 in file "../src/MCU_B1.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;		None               void
  9259 ;; Registers used:
  9260 ;;		wreg, fsr1l, fsr1h
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        1 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; Hardware stack levels required when called:    5
  9273 ;; This function calls:
  9274 ;;		Nothing
  9275 ;; This function is called by:
  9276 ;;		_Mcu_Initialization
  9277 ;; This function uses a non-reentrant model
  9278 ;;
  9279                           
  9280                           
  9281                           ;psect for function _WDT_Set
  9282  1F9C                     _WDT_Set:	
  9283                           
  9284                           ;MCU_B1.c: 892: WDTCON = 0b00010111;;
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in _WDT_Set: [wregfsr1]
  9288  1F9C  3017               	movlw	23
  9289  1F9D  0021               	movlb	1	; select bank1
  9290  1F9E  0097               	movwf	23	;volatile
  9291                           
  9292                           ;MCU_B1.c: 893: WDT = &_WDT;
  9293  1F9F  30E7               	movlw	__WDT& (0+255)
  9294  1FA0  0020               	movlb	0	; select bank0
  9295  1FA1  00A0               	movwf	??_WDT_Set
  9296  1FA2  0820               	movf	??_WDT_Set,w
  9297  1FA3  0021               	movlb	1	; select bank1
  9298  1FA4  00ED               	movwf	_WDT^(0+128)
  9299                           
  9300                           ;MCU_B1.c: 894: WDT->Enable = 1;
  9301  1FA5  086D               	movf	_WDT^(0+128),w
  9302  1FA6  0086               	movwf	6
  9303  1FA7  0187               	clrf	7
  9304  1FA8  1401               	bsf	1,0
  9305                           
  9306                           ;MCU_B1.c: 895: WDT->Count = 10;
  9307  1FA9  300A               	movlw	10
  9308  1FAA  0020               	movlb	0	; select bank0
  9309  1FAB  00A0               	movwf	??_WDT_Set
  9310  1FAC  0021               	movlb	1	; select bank1
  9311  1FAD  0A6D               	incf	_WDT^(0+128),w
  9312  1FAE  0086               	movwf	6
  9313  1FAF  0187               	clrf	7
  9314  1FB0  0020               	movlb	0	; select bank0
  9315  1FB1  0820               	movf	??_WDT_Set,w
  9316  1FB2  0081               	movwf	1
  9317  1FB3  0008               	return
  9318  1FB4                     __end_of_WDT_Set:	
  9319                           
  9320                           	psect	text46
  9321  0800                     __ptext46:	
  9322 ;; *************** function _TMR0_Set *****************
  9323 ;; Defined at:
  9324 ;;		line 128 in file "../src/MCU_B1.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, status,2
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        1 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    5
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_Mcu_Initialization
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function _TMR0_Set
  9354  0800                     _TMR0_Set:	
  9355                           
  9356                           ;MCU_B1.c: 129: Timer0 = &VarTimer0;
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _TMR0_Set: [wreg+status,2]
  9360  0800  30C7               	movlw	_VarTimer0& (0+255)
  9361  0801  0020               	movlb	0	; select bank0
  9362  0802  00A0               	movwf	??_TMR0_Set
  9363  0803  0820               	movf	??_TMR0_Set,w
  9364  0804  0021               	movlb	1	; select bank1
  9365  0805  00EC               	movwf	_Timer0^(0+128)
  9366                           
  9367                           ;MCU_B1.c: 130: OPTION_REG = 0x00;
  9368  0806  0195               	clrf	21	;volatile
  9369                           
  9370                           ;MCU_B1.c: 131: TMR0 = (256-190);
  9371  0807  3042               	movlw	66
  9372  0808  0020               	movlb	0	; select bank0
  9373  0809  0095               	movwf	21	;volatile
  9374                           
  9375                           ;MCU_B1.c: 132: TMR0IE = 1;
  9376  080A  168B               	bsf	11,5	;volatile
  9377                           
  9378                           ;MCU_B1.c: 133: GIE = 1;
  9379  080B  178B               	bsf	11,7	;volatile
  9380  080C  0008               	return
  9381  080D                     __end_of_TMR0_Set:	
  9382                           
  9383                           	psect	text47
  9384  1F84                     __ptext47:	
  9385 ;; *************** function _IO_Set *****************
  9386 ;; Defined at:
  9387 ;;		line 62 in file "../src/MCU_B1.c"
  9388 ;; Parameters:    Size  Location     Type
  9389 ;;		None
  9390 ;; Auto vars:     Size  Location     Type
  9391 ;;		None
  9392 ;; Return value:  Size  Location     Type
  9393 ;;		None               void
  9394 ;; Registers used:
  9395 ;;		wreg, status,2
  9396 ;; Tracked objects:
  9397 ;;		On entry : 0/0
  9398 ;;		On exit  : 0/0
  9399 ;;		Unchanged: 0/0
  9400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;Total ram usage:        0 bytes
  9406 ;; Hardware stack levels used:    1
  9407 ;; Hardware stack levels required when called:    5
  9408 ;; This function calls:
  9409 ;;		Nothing
  9410 ;; This function is called by:
  9411 ;;		_Mcu_Initialization
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           
  9416                           ;psect for function _IO_Set
  9417  1F84                     _IO_Set:	
  9418                           
  9419                           ;MCU_B1.c: 90: TRISA = 0b01110111;;
  9420                           
  9421                           ;incstack = 0
  9422                           ; Regs used in _IO_Set: [wreg+status,2]
  9423  1F84  3077               	movlw	119
  9424  1F85  0021               	movlb	1	; select bank1
  9425  1F86  008C               	movwf	12	;volatile
  9426                           
  9427                           ;MCU_B1.c: 91: TRISB = 0b00000101;;
  9428  1F87  3005               	movlw	5
  9429  1F88  008D               	movwf	13	;volatile
  9430                           
  9431                           ;MCU_B1.c: 92: TRISC = 0b00001100;;
  9432  1F89  300C               	movlw	12
  9433  1F8A  008E               	movwf	14	;volatile
  9434                           
  9435                           ;MCU_B1.c: 93: LATA = 0b00000000;;
  9436  1F8B  0022               	movlb	2	; select bank2
  9437  1F8C  018C               	clrf	12	;volatile
  9438                           
  9439                           ;MCU_B1.c: 94: LATB = 0b00000000;;
  9440  1F8D  018D               	clrf	13	;volatile
  9441                           
  9442                           ;MCU_B1.c: 95: LATC = 0b00000000;;
  9443  1F8E  018E               	clrf	14	;volatile
  9444                           
  9445                           ;MCU_B1.c: 96: ANSELA = 0b00000010;;
  9446  1F8F  3002               	movlw	2
  9447  1F90  0023               	movlb	3	; select bank3
  9448  1F91  008C               	movwf	12	;volatile
  9449                           
  9450                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
  9451  1F92  018D               	clrf	13	;volatile
  9452                           
  9453                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
  9454  1F93  018E               	clrf	14	;volatile
  9455                           
  9456                           ;MCU_B1.c: 99: PORTA = 0b01110111;;
  9457  1F94  3077               	movlw	119
  9458  1F95  0020               	movlb	0	; select bank0
  9459  1F96  008C               	movwf	12	;volatile
  9460                           
  9461                           ;MCU_B1.c: 100: PORTB = 0b00000101;;
  9462  1F97  3005               	movlw	5
  9463  1F98  008D               	movwf	13	;volatile
  9464                           
  9465                           ;MCU_B1.c: 101: PORTC = 0b00001100;;
  9466  1F99  300C               	movlw	12
  9467  1F9A  008E               	movwf	14	;volatile
  9468  1F9B  0008               	return
  9469  1F9C                     __end_of_IO_Set:	
  9470                           
  9471                           	psect	text48
  9472  1066                     __ptext48:	
  9473 ;; *************** function _IOC_Set *****************
  9474 ;; Defined at:
  9475 ;;		line 269 in file "../src/MCU_B1.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;		None
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, status,2
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;Total ram usage:        0 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    5
  9496 ;; This function calls:
  9497 ;;		Nothing
  9498 ;; This function is called by:
  9499 ;;		_Mcu_Initialization
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           
  9504                           ;psect for function _IOC_Set
  9505  1066                     _IOC_Set:	
  9506                           
  9507                           ;MCU_B1.c: 270: WPUB2 = 0;
  9508                           
  9509                           ;incstack = 0
  9510                           ; Regs used in _IOC_Set: [wreg+status,2]
  9511  1066  0024               	movlb	4	; select bank4
  9512  1067  110D               	bcf	13,2	;volatile
  9513                           
  9514                           ;MCU_B1.c: 272: IOCBP = 0b00000100;
  9515  1068  3004               	movlw	4
  9516  1069  0027               	movlb	7	; select bank7
  9517  106A  0094               	movwf	20	;volatile
  9518                           
  9519                           ;MCU_B1.c: 273: IOCBN = 0b00000100;
  9520  106B  3004               	movlw	4
  9521  106C  0095               	movwf	21	;volatile
  9522                           
  9523                           ;MCU_B1.c: 288: IOCBF = 0b00000000;
  9524  106D  0196               	clrf	22	;volatile
  9525                           
  9526                           ;MCU_B1.c: 290: IOCIE = 1;
  9527  106E  158B               	bsf	11,3	;volatile
  9528                           
  9529                           ;MCU_B1.c: 291: IOCIF = 0;
  9530  106F  100B               	bcf	11,0	;volatile
  9531                           
  9532                           ;MCU_B1.c: 292: PEIE = 1;
  9533  1070  170B               	bsf	11,6	;volatile
  9534                           
  9535                           ;MCU_B1.c: 293: GIE = 1;
  9536  1071  178B               	bsf	11,7	;volatile
  9537  1072  0008               	return
  9538  1073                     __end_of_IOC_Set:	
  9539                           
  9540                           	psect	text49
  9541  1DAE                     __ptext49:	
  9542 ;; *************** function _INT_Set *****************
  9543 ;; Defined at:
  9544 ;;		line 242 in file "../src/MCU_B1.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;		None
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;		None
  9549 ;; Return value:  Size  Location     Type
  9550 ;;		None               void
  9551 ;; Registers used:
  9552 ;;		None
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;Total ram usage:        0 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    5
  9565 ;; This function calls:
  9566 ;;		Nothing
  9567 ;; This function is called by:
  9568 ;;		_Mcu_Initialization
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           
  9573                           ;psect for function _INT_Set
  9574  1DAE                     _INT_Set:	
  9575                           
  9576                           ;MCU_B1.c: 243: WPUB0 = 0;
  9577                           
  9578                           ;incstack = 0
  9579                           ; Regs used in _INT_Set: []
  9580  1DAE  0024               	movlb	4	; select bank4
  9581  1DAF  100D               	bcf	13,0	;volatile
  9582                           
  9583                           ;MCU_B1.c: 244: INTE = 0;
  9584  1DB0  120B               	bcf	11,4	;volatile
  9585                           
  9586                           ;MCU_B1.c: 245: PEIE = 1;
  9587  1DB1  170B               	bsf	11,6	;volatile
  9588                           
  9589                           ;MCU_B1.c: 246: GIE = 1;
  9590  1DB2  178B               	bsf	11,7	;volatile
  9591  1DB3  0008               	return
  9592  1DB4                     __end_of_INT_Set:	
  9593                           
  9594                           	psect	text50
  9595  1D9D                     __ptext50:	
  9596 ;; *************** function _Fosc_Set *****************
  9597 ;; Defined at:
  9598 ;;		line 58 in file "../src/MCU_B1.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;		None
  9603 ;; Return value:  Size  Location     Type
  9604 ;;		None               void
  9605 ;; Registers used:
  9606 ;;		wreg
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9616 ;;Total ram usage:        0 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    5
  9619 ;; This function calls:
  9620 ;;		Nothing
  9621 ;; This function is called by:
  9622 ;;		_Mcu_Initialization
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           
  9627                           ;psect for function _Fosc_Set
  9628  1D9D                     _Fosc_Set:	
  9629                           
  9630                           ;MCU_B1.c: 59: OSCCON = 0x78;
  9631                           
  9632                           ;incstack = 0
  9633                           ; Regs used in _Fosc_Set: [wreg]
  9634  1D9D  3078               	movlw	120
  9635  1D9E  0021               	movlb	1	; select bank1
  9636  1D9F  0099               	movwf	25	;volatile
  9637  1DA0  0008               	return
  9638  1DA1                     __end_of_Fosc_Set:	
  9639                           
  9640                           	psect	text51
  9641  1DC7                     __ptext51:	
  9642 ;; *************** function _ADC_Set *****************
  9643 ;; Defined at:
  9644 ;;		line 315 in file "../src/MCU_B1.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    5
  9665 ;; This function calls:
  9666 ;;		Nothing
  9667 ;; This function is called by:
  9668 ;;		_Mcu_Initialization
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function _ADC_Set
  9674  1DC7                     _ADC_Set:	
  9675                           
  9676                           ;MCU_B1.c: 316: ADCON1 = 0xf2;
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in _ADC_Set: [wreg]
  9680  1DC7  30F2               	movlw	242
  9681  1DC8  0021               	movlb	1	; select bank1
  9682  1DC9  009E               	movwf	30	;volatile
  9683                           
  9684                           ;MCU_B1.c: 317: FVRCON = 0xc0;
  9685  1DCA  30C0               	movlw	192
  9686  1DCB  0022               	movlb	2	; select bank2
  9687  1DCC  0097               	movwf	23	;volatile
  9688  1DCD  0008               	return
  9689  1DCE                     __end_of_ADC_Set:	
  9690                           
  9691                           	psect	text52
  9692  1E9F                     __ptext52:	
  9693 ;; *************** function _LED_Main *****************
  9694 ;; Defined at:
  9695 ;;		line 51 in file "../src/LED_B1.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;		None               void
  9702 ;; Registers used:
  9703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;Total ram usage:        0 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    7
  9716 ;; This function calls:
  9717 ;;		_setLED_Main
  9718 ;; This function is called by:
  9719 ;;		_main
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           
  9724                           ;psect for function _LED_Main
  9725  1E9F                     _LED_Main:	
  9726                           
  9727                           ;LED_B1.c: 54: setLED_Main(1);
  9728                           
  9729                           ;incstack = 0
  9730                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9731  1E9F  3001               	movlw	1
  9732  1EA0  3195  256B  319E   	fcall	_setLED_Main
  9733                           
  9734                           ;LED_B1.c: 57: setLED_Main(2);
  9735  1EA3  3002               	movlw	2
  9736  1EA4  3195  256B  319E   	fcall	_setLED_Main
  9737                           
  9738                           ;LED_B1.c: 60: setLED_Main(3);
  9739  1EA7  3003               	movlw	3
  9740  1EA8  3195  256B  319E   	fcall	_setLED_Main
  9741                           
  9742                           ;LED_B1.c: 63: setLED_Main(99);
  9743  1EAB  3063               	movlw	99
  9744  1EAC  3195  256B         	fcall	_setLED_Main
  9745  1EAE  0008               	return
  9746  1EAF                     __end_of_LED_Main:	
  9747                           
  9748                           	psect	text53
  9749  156B                     __ptext53:	
  9750 ;; *************** function _setLED_Main *****************
  9751 ;; Defined at:
  9752 ;;		line 215 in file "../src/LED_B1.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  led             1    wreg     unsigned char 
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;  led             1    4[BANK0 ] unsigned char 
  9757 ;; Return value:  Size  Location     Type
  9758 ;;		None               void
  9759 ;; Registers used:
  9760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;Total ram usage:        3 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    6
  9773 ;; This function calls:
  9774 ;;		_LedPointSelect
  9775 ;; This function is called by:
  9776 ;;		_LED_Main
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _setLED_Main
  9782  156B                     _setLED_Main:	
  9783                           
  9784                           ;incstack = 0
  9785                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9786                           ;setLED_Main@led stored from wreg
  9787  156B  0020               	movlb	0	; select bank0
  9788  156C  00A4               	movwf	setLED_Main@led
  9789                           
  9790                           ;LED_B1.c: 217: LedPointSelect(led);
  9791  156D  0824               	movf	setLED_Main@led,w
  9792  156E  3193  235A  3195   	fcall	_LedPointSelect
  9793                           
  9794                           ;LED_B1.c: 218: if(LED->GO)
  9795  1571  0021               	movlb	1	; select bank1
  9796  1572  083E               	movf	_LED^(0+128),w
  9797  1573  0086               	movwf	6
  9798  1574  0187               	clrf	7
  9799  1575  1C81               	btfss	1,1
  9800  1576  0008               	return
  9801                           
  9802                           ;LED_B1.c: 219: {
  9803                           ;LED_B1.c: 220: LED->Time++;
  9804  1577  0A3E               	incf	_LED^(0+128),w
  9805  1578  0086               	movwf	6
  9806  1579  0187               	clrf	7
  9807  157A  3001               	movlw	1
  9808  157B  0781               	addwf	1,f
  9809  157C  3141               	addfsr 1,1
  9810  157D  1803               	skipnc
  9811  157E  0A81               	incf	1,f
  9812                           
  9813                           ;LED_B1.c: 221: if(LED->Time >= 500/10)
  9814  157F  0A3E               	incf	_LED^(0+128),w
  9815  1580  0086               	movwf	6
  9816  1581  0187               	clrf	7
  9817  1582  3F40               	moviw [0]fsr1
  9818  1583  0020               	movlb	0	; select bank0
  9819  1584  00A2               	movwf	??_setLED_Main
  9820  1585  3F41               	moviw [1]fsr1
  9821  1586  00A3               	movwf	??_setLED_Main+1
  9822  1587  3000               	movlw	0
  9823  1588  0223               	subwf	??_setLED_Main+1,w
  9824  1589  3032               	movlw	50
  9825  158A  1903               	skipnz
  9826  158B  0222               	subwf	??_setLED_Main,w
  9827  158C  1C03               	skipc
  9828  158D  0008               	return
  9829                           
  9830                           ;LED_B1.c: 222: {
  9831                           ;LED_B1.c: 223: LED->Time=0;
  9832  158E  0021               	movlb	1	; select bank1
  9833  158F  0A3E               	incf	_LED^(0+128),w
  9834  1590  0086               	movwf	6
  9835  1591  0187               	clrf	7
  9836  1592  3000               	movlw	0
  9837  1593  3FC0               	movwi [0]fsr1
  9838  1594  3FC1               	movwi [1]fsr1
  9839                           
  9840                           ;LED_B1.c: 225: if(led == 1)
  9841  1595  0020               	movlb	0	; select bank0
  9842  1596  0824               	movf	setLED_Main@led,w
  9843  1597  3A01               	xorlw	1
  9844  1598  1D03               	skipz
  9845  1599  2D9D               	goto	l6738
  9846                           
  9847                           ;LED_B1.c: 226: {
  9848                           ;LED_B1.c: 227: RC7=~RC7;
  9849  159A  3080               	movlw	128
  9850  159B  068E               	xorwf	14,f
  9851                           
  9852                           ;LED_B1.c: 228: }
  9853  159C  0008               	return
  9854  159D                     l6738:	
  9855                           
  9856                           ;LED_B1.c: 231: else if(led == 2)
  9857  159D  0824               	movf	setLED_Main@led,w
  9858  159E  3A02               	xorlw	2
  9859  159F  1D03               	skipz
  9860  15A0  2DA4               	goto	l6742
  9861                           
  9862                           ;LED_B1.c: 232: {
  9863                           ;LED_B1.c: 233: RA3=~RA3;
  9864  15A1  3008               	movlw	8
  9865  15A2  068C               	xorwf	12,f
  9866                           
  9867                           ;LED_B1.c: 234: }
  9868  15A3  0008               	return
  9869  15A4                     l6742:	
  9870                           
  9871                           ;LED_B1.c: 237: else if(led == 3)
  9872  15A4  0824               	movf	setLED_Main@led,w
  9873  15A5  3A03               	xorlw	3
  9874  15A6  1D03               	skipz
  9875  15A7  2DAB               	goto	l6746
  9876                           
  9877                           ;LED_B1.c: 238: {
  9878                           ;LED_B1.c: 239: RC6=~RC6;
  9879  15A8  3040               	movlw	64
  9880  15A9  068E               	xorwf	14,f
  9881                           
  9882                           ;LED_B1.c: 240: }
  9883  15AA  0008               	return
  9884  15AB                     l6746:	
  9885                           
  9886                           ;LED_B1.c: 243: else if(led == 99)
  9887  15AB  0824               	movf	setLED_Main@led,w
  9888  15AC  3A63               	xorlw	99
  9889  15AD  1D03               	skipz
  9890  15AE  0008               	return
  9891                           
  9892                           ;LED_B1.c: 244: {
  9893                           ;LED_B1.c: 245: RB5=~RB5;
  9894  15AF  3020               	movlw	32
  9895  15B0  068D               	xorwf	13,f
  9896  15B1  0008               	return
  9897  15B2                     __end_of_setLED_Main:	
  9898                           
  9899                           	psect	text54
  9900  1E8F                     __ptext54:	
  9901 ;; *************** function _LED_Initialization *****************
  9902 ;; Defined at:
  9903 ;;		line 35 in file "../src/LED_B1.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;		None
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;		None
  9908 ;; Return value:  Size  Location     Type
  9909 ;;		None               void
  9910 ;; Registers used:
  9911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;Total ram usage:        0 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    8
  9924 ;; This function calls:
  9925 ;;		_setLED_Initialization
  9926 ;; This function is called by:
  9927 ;;		_main
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           
  9932                           ;psect for function _LED_Initialization
  9933  1E8F                     _LED_Initialization:	
  9934                           
  9935                           ;LED_B1.c: 38: setLED_Initialization(1);
  9936                           
  9937                           ;incstack = 0
  9938                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9939  1E8F  3001               	movlw	1
  9940  1E90  319F  2700  319E   	fcall	_setLED_Initialization
  9941                           
  9942                           ;LED_B1.c: 41: setLED_Initialization(2);
  9943  1E93  3002               	movlw	2
  9944  1E94  319F  2700  319E   	fcall	_setLED_Initialization
  9945                           
  9946                           ;LED_B1.c: 44: setLED_Initialization(3);
  9947  1E97  3003               	movlw	3
  9948  1E98  319F  2700  319E   	fcall	_setLED_Initialization
  9949                           
  9950                           ;LED_B1.c: 47: setLED_Initialization(99);
  9951  1E9B  3063               	movlw	99
  9952  1E9C  319F  2700         	fcall	_setLED_Initialization
  9953  1E9E  0008               	return
  9954  1E9F                     __end_of_LED_Initialization:	
  9955                           
  9956                           	psect	text55
  9957  1F00                     __ptext55:	
  9958 ;; *************** function _setLED_Initialization *****************
  9959 ;; Defined at:
  9960 ;;		line 67 in file "../src/LED_B1.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  led             1    wreg     unsigned char 
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;  led             1    4[BANK0 ] unsigned char 
  9965 ;; Return value:  Size  Location     Type
  9966 ;;		None               void
  9967 ;; Registers used:
  9968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;Total ram usage:        1 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    7
  9981 ;; This function calls:
  9982 ;;		_LedPointSelect
  9983 ;;		_setLED
  9984 ;; This function is called by:
  9985 ;;		_LED_Initialization
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function _setLED_Initialization
  9991  1F00                     _setLED_Initialization:	
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9995                           ;setLED_Initialization@led stored from wreg
  9996  1F00  0020               	movlb	0	; select bank0
  9997  1F01  00A4               	movwf	setLED_Initialization@led
  9998                           
  9999                           ;LED_B1.c: 69: LedPointSelect(led);
 10000  1F02  0824               	movf	setLED_Initialization@led,w
 10001  1F03  3193  235A  319F   	fcall	_LedPointSelect
 10002                           
 10003                           ;LED_B1.c: 70: LED->Enable=1;
 10004  1F06  0021               	movlb	1	; select bank1
 10005  1F07  083E               	movf	_LED^(0+128),w
 10006  1F08  0086               	movwf	6
 10007  1F09  0187               	clrf	7
 10008  1F0A  1401               	bsf	1,0
 10009                           
 10010                           ;LED_B1.c: 71: setLED(led,0);
 10011  1F0B  0020               	movlb	0	; select bank0
 10012  1F0C  01A2               	clrf	setLED@command
 10013  1F0D  0824               	movf	setLED_Initialization@led,w
 10014  1F0E  3189  21BB         	fcall	_setLED
 10015  1F10  0008               	return
 10016  1F11                     __end_of_setLED_Initialization:	
 10017                           
 10018                           	psect	text56
 10019  14E0                     __ptext56:	
 10020 ;; *************** function _Flash_Memory_Main *****************
 10021 ;; Defined at:
 10022 ;;		line 786 in file "../src/MCU_B1.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;		None
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;		None
 10027 ;; Return value:  Size  Location     Type
 10028 ;;		None               void
 10029 ;; Registers used:
 10030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;Total ram usage:        0 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    8
 10043 ;; This function calls:
 10044 ;;		_Flash_Memory_Modify
 10045 ;; This function is called by:
 10046 ;;		_main
 10047 ;; This function uses a non-reentrant model
 10048 ;;
 10049                           
 10050                           
 10051                           ;psect for function _Flash_Memory_Main
 10052  14E0                     _Flash_Memory_Main:	
 10053                           
 10054                           ;MCU_B1.c: 787: if (Memory->GO == 1) {
 10055                           
 10056                           ;incstack = 0
 10057                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10058  14E0  0021               	movlb	1	; select bank1
 10059  14E1  086F               	movf	_Memory^(0+128),w
 10060  14E2  3E24               	addlw	36
 10061  14E3  0086               	movwf	6
 10062  14E4  3002               	movlw	2	; select bank4/5
 10063  14E5  0087               	movwf	7
 10064  14E6  1C81               	btfss	1,1
 10065  14E7  0008               	return
 10066                           
 10067                           ;MCU_B1.c: 788: if (Memory->Modify == 1) {
 10068  14E8  086F               	movf	_Memory^(0+128),w
 10069  14E9  3E24               	addlw	36
 10070  14EA  0086               	movwf	6
 10071  14EB  3002               	movlw	2	; select bank4/5
 10072  14EC  0087               	movwf	7
 10073  14ED  1C01               	btfss	1,0
 10074  14EE  2D1D               	goto	l7226
 10075                           
 10076                           ;MCU_B1.c: 789: Memory->Time++;
 10077  14EF  086F               	movf	_Memory^(0+128),w
 10078  14F0  3E22               	addlw	34
 10079  14F1  0086               	movwf	6
 10080  14F2  3002               	movlw	2	; select bank4/5
 10081  14F3  0087               	movwf	7
 10082  14F4  3001               	movlw	1
 10083  14F5  0781               	addwf	1,f
 10084  14F6  3141               	addfsr 1,1
 10085  14F7  1803               	skipnc
 10086  14F8  0A81               	incf	1,f
 10087                           
 10088                           ;MCU_B1.c: 790: if (Memory->Time == 25)
 10089  14F9  086F               	movf	_Memory^(0+128),w
 10090  14FA  3E22               	addlw	34
 10091  14FB  0086               	movwf	6
 10092  14FC  3002               	movlw	2	; select bank4/5
 10093  14FD  0087               	movwf	7
 10094  14FE  3F40               	moviw [0]fsr1
 10095  14FF  3A19               	xorlw	25
 10096  1500  1D03               	skipz
 10097  1501  2D04               	goto	u6865
 10098  1502  3F41               	moviw [1]fsr1
 10099  1503  3A00               	xorlw	0
 10100  1504                     u6865:	
 10101  1504  1D03               	skipz
 10102  1505  0008               	return
 10103                           
 10104                           ;MCU_B1.c: 791: {
 10105                           ;MCU_B1.c: 792: Memory->Time = 0;
 10106  1506  086F               	movf	_Memory^(0+128),w
 10107  1507  3E22               	addlw	34
 10108  1508  0086               	movwf	6
 10109  1509  3002               	movlw	2	; select bank4/5
 10110  150A  0087               	movwf	7
 10111  150B  3000               	movlw	0
 10112  150C  3FC0               	movwi [0]fsr1
 10113  150D  3FC1               	movwi [1]fsr1
 10114                           
 10115                           ;MCU_B1.c: 793: Memory->Modify = 0;
 10116  150E  086F               	movf	_Memory^(0+128),w
 10117  150F  3E24               	addlw	36
 10118  1510  0086               	movwf	6
 10119  1511  3002               	movlw	2	; select bank4/5
 10120  1512  0087               	movwf	7
 10121  1513  1001               	bcf	1,0
 10122                           
 10123                           ;MCU_B1.c: 794: Memory->GO = 0;
 10124  1514  086F               	movf	_Memory^(0+128),w
 10125  1515  3E24               	addlw	36
 10126  1516  0086               	movwf	6
 10127  1517  3002               	movlw	2	; select bank4/5
 10128  1518  0087               	movwf	7
 10129  1519  1081               	bcf	1,1
 10130                           
 10131                           ;MCU_B1.c: 795: Flash_Memory_Modify();
 10132  151A  3189  214D         	fcall	_Flash_Memory_Modify
 10133                           
 10134                           ;MCU_B1.c: 796: }
 10135                           ;MCU_B1.c: 797: } else {
 10136  151C  0008               	return
 10137  151D                     l7226:	
 10138                           
 10139                           ;MCU_B1.c: 798: Memory->GO = 0;
 10140  151D  0021               	movlb	1	; select bank1
 10141  151E  086F               	movf	_Memory^(0+128),w
 10142  151F  3E24               	addlw	36
 10143  1520  0086               	movwf	6
 10144  1521  3002               	movlw	2	; select bank4/5
 10145  1522  0087               	movwf	7
 10146  1523  1081               	bcf	1,1
 10147  1524  0008               	return
 10148  1525                     __end_of_Flash_Memory_Main:	
 10149                           
 10150                           	psect	text57
 10151  094D                     __ptext57:	
 10152 ;; *************** function _Flash_Memory_Modify *****************
 10153 ;; Defined at:
 10154 ;;		line 855 in file "../src/MCU_B1.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  i               1    6[BANK0 ] unsigned char 
 10159 ;; Return value:  Size  Location     Type
 10160 ;;		None               void
 10161 ;; Registers used:
 10162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10172 ;;Total ram usage:        3 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    7
 10175 ;; This function calls:
 10176 ;;		_Flash_Memory_Erasing
 10177 ;;		_Flash_Memory_Read
 10178 ;;		_Flash_Memory_Write
 10179 ;; This function is called by:
 10180 ;;		_Flash_Memory_Main
 10181 ;; This function uses a non-reentrant model
 10182 ;;
 10183                           
 10184                           
 10185                           ;psect for function _Flash_Memory_Modify
 10186  094D                     _Flash_Memory_Modify:	
 10187                           
 10188                           ;MCU_B1.c: 856: char i = 0;
 10189                           
 10190                           ;incstack = 0
 10191                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10192  094D  0020               	movlb	0	; select bank0
 10193  094E  01A6               	clrf	Flash_Memory_Modify@i
 10194                           
 10195                           ;MCU_B1.c: 857: for (i = 0; i < 32; i++) {
 10196  094F  01A6               	clrf	Flash_Memory_Modify@i
 10197  0950  3020               	movlw	32
 10198  0951  0226               	subwf	Flash_Memory_Modify@i,w
 10199  0952  1803               	btfsc	3,0
 10200  0953  296D               	goto	l6824
 10201  0954                     l6818:	
 10202                           
 10203                           ;MCU_B1.c: 858: Memory->Data[i] = Flash_Memory_Read(i);
 10204  0954  0826               	movf	Flash_Memory_Modify@i,w
 10205  0955  3190  208D  3189   	fcall	_Flash_Memory_Read
 10206  0958  0020               	movlb	0	; select bank0
 10207  0959  00A4               	movwf	??_Flash_Memory_Modify
 10208  095A  0826               	movf	Flash_Memory_Modify@i,w
 10209  095B  0021               	movlb	1	; select bank1
 10210  095C  076F               	addwf	_Memory^(0+128),w
 10211  095D  0020               	movlb	0	; select bank0
 10212  095E  00A5               	movwf	??_Flash_Memory_Modify+1
 10213  095F  0825               	movf	??_Flash_Memory_Modify+1,w
 10214  0960  0086               	movwf	6
 10215  0961  3002               	movlw	2	; select bank4/5
 10216  0962  0087               	movwf	7
 10217  0963  0824               	movf	??_Flash_Memory_Modify,w
 10218  0964  0081               	movwf	1
 10219  0965  3001               	movlw	1
 10220  0966  00A4               	movwf	??_Flash_Memory_Modify
 10221  0967  0824               	movf	??_Flash_Memory_Modify,w
 10222  0968  07A6               	addwf	Flash_Memory_Modify@i,f
 10223  0969  3020               	movlw	32
 10224  096A  0226               	subwf	Flash_Memory_Modify@i,w
 10225  096B  1C03               	skipc
 10226  096C  2954               	goto	l6818
 10227  096D                     l6824:	
 10228                           
 10229                           ;MCU_B1.c: 859: }
 10230                           ;MCU_B1.c: 860: Memory->Data[0]=product->Data[12];
 10231  096D  087D               	movf	_product,w
 10232  096E  3E0C               	addlw	12
 10233  096F  0086               	movwf	6
 10234  0970  3001               	movlw	1	; select bank2/3
 10235  0971  0087               	movwf	7
 10236  0972  0801               	movf	1,w
 10237  0973  00A4               	movwf	??_Flash_Memory_Modify
 10238  0974  0021               	movlb	1	; select bank1
 10239  0975  086F               	movf	_Memory^(0+128),w
 10240  0976  0086               	movwf	6
 10241  0977  3002               	movlw	2	; select bank4/5
 10242  0978  0087               	movwf	7
 10243  0979  0020               	movlb	0	; select bank0
 10244  097A  0824               	movf	??_Flash_Memory_Modify,w
 10245  097B  0081               	movwf	1
 10246                           
 10247                           ;MCU_B1.c: 861: Memory->Data[1]=product->Data[13];
 10248  097C  087D               	movf	_product,w
 10249  097D  3E0D               	addlw	13
 10250  097E  0086               	movwf	6
 10251  097F  3001               	movlw	1	; select bank2/3
 10252  0980  0087               	movwf	7
 10253  0981  0801               	movf	1,w
 10254  0982  00A4               	movwf	??_Flash_Memory_Modify
 10255  0983  0021               	movlb	1	; select bank1
 10256  0984  0A6F               	incf	_Memory^(0+128),w
 10257  0985  0086               	movwf	6
 10258  0986  3002               	movlw	2	; select bank4/5
 10259  0987  0087               	movwf	7
 10260  0988  0020               	movlb	0	; select bank0
 10261  0989  0824               	movf	??_Flash_Memory_Modify,w
 10262  098A  0081               	movwf	1
 10263                           
 10264                           ;MCU_B1.c: 862: Memory->Data[2]=product->Data[14];
 10265  098B  087D               	movf	_product,w
 10266  098C  3E0E               	addlw	14
 10267  098D  0086               	movwf	6
 10268  098E  3001               	movlw	1	; select bank2/3
 10269  098F  0087               	movwf	7
 10270  0990  0801               	movf	1,w
 10271  0991  00A4               	movwf	??_Flash_Memory_Modify
 10272  0992  0021               	movlb	1	; select bank1
 10273  0993  086F               	movf	_Memory^(0+128),w
 10274  0994  3E02               	addlw	2
 10275  0995  0086               	movwf	6
 10276  0996  3002               	movlw	2	; select bank4/5
 10277  0997  0087               	movwf	7
 10278  0998  0020               	movlb	0	; select bank0
 10279  0999  0824               	movf	??_Flash_Memory_Modify,w
 10280  099A  0081               	movwf	1
 10281                           
 10282                           ;MCU_B1.c: 868: if (Memory->LoopSave == 1) {
 10283  099B  0021               	movlb	1	; select bank1
 10284  099C  086F               	movf	_Memory^(0+128),w
 10285  099D  3E24               	addlw	36
 10286  099E  0086               	movwf	6
 10287  099F  3002               	movlw	2	; select bank4/5
 10288  09A0  0087               	movwf	7
 10289  09A1  1D01               	btfss	1,2
 10290  09A2  29B3               	goto	l6828
 10291                           
 10292                           ;MCU_B1.c: 869: Memory->LoopSave = 0;
 10293  09A3  086F               	movf	_Memory^(0+128),w
 10294  09A4  3E24               	addlw	36
 10295  09A5  0086               	movwf	6
 10296  09A6  3002               	movlw	2	; select bank4/5
 10297  09A7  0087               	movwf	7
 10298  09A8  1101               	bcf	1,2
 10299                           
 10300                           ;MCU_B1.c: 870: myMain->FirstOpen = 0;
 10301  09A9  086E               	movf	_myMain^(0+128),w
 10302  09AA  0086               	movwf	6
 10303  09AB  3001               	movlw	1	; select bank2/3
 10304  09AC  0087               	movwf	7
 10305  09AD  1281               	bcf	1,5
 10306                           
 10307                           ;MCU_B1.c: 871: myMain->First = 0;
 10308  09AE  086E               	movf	_myMain^(0+128),w
 10309  09AF  0086               	movwf	6
 10310  09B0  3001               	movlw	1	; select bank2/3
 10311  09B1  0087               	movwf	7
 10312  09B2  1381               	bcf	1,7
 10313  09B3                     l6828:	
 10314                           
 10315                           ;MCU_B1.c: 873: }
 10316                           ;MCU_B1.c: 874: GIE = 0;
 10317  09B3  138B               	bcf	11,7	;volatile
 10318                           
 10319                           ;MCU_B1.c: 875: Flash_Memory_Erasing();
 10320  09B4  319E  2602  3189   	fcall	_Flash_Memory_Erasing
 10321                           
 10322                           ;MCU_B1.c: 876: Flash_Memory_Write();
 10323  09B7  3193  23B7         	fcall	_Flash_Memory_Write
 10324                           
 10325                           ;MCU_B1.c: 877: GIE = 1;
 10326  09B9  178B               	bsf	11,7	;volatile
 10327  09BA  0008               	return
 10328  09BB                     __end_of_Flash_Memory_Modify:	
 10329                           
 10330                           	psect	text58
 10331  1E02                     __ptext58:	
 10332 ;; *************** function _Flash_Memory_Erasing *****************
 10333 ;; Defined at:
 10334 ;;		line 844 in file "../src/MCU_B1.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;		None
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;		None
 10339 ;; Return value:  Size  Location     Type
 10340 ;;		None               void
 10341 ;; Registers used:
 10342 ;;		wreg, status,2, status,0, pclath, cstack
 10343 ;; Tracked objects:
 10344 ;;		On entry : 0/0
 10345 ;;		On exit  : 0/0
 10346 ;;		Unchanged: 0/0
 10347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;Total ram usage:        0 bytes
 10353 ;; Hardware stack levels used:    1
 10354 ;; Hardware stack levels required when called:    6
 10355 ;; This function calls:
 10356 ;;		_Flash_Memory_Unlock
 10357 ;; This function is called by:
 10358 ;;		_Flash_Memory_Modify
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           
 10363                           ;psect for function _Flash_Memory_Erasing
 10364  1E02                     _Flash_Memory_Erasing:	
 10365                           
 10366                           ;MCU_B1.c: 845: CFGS = 0;
 10367                           
 10368                           ;incstack = 0
 10369                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10370  1E02  0023               	movlb	3	; select bank3
 10371  1E03  1315               	bcf	21,6	;volatile
 10372                           
 10373                           ;MCU_B1.c: 846: PMADRH = 0x30;
 10374  1E04  3030               	movlw	48
 10375  1E05  0092               	movwf	18	;volatile
 10376                           
 10377                           ;MCU_B1.c: 847: PMADRL = 0x00;
 10378  1E06  0191               	clrf	17	;volatile
 10379                           
 10380                           ;MCU_B1.c: 848: FREE = 1;
 10381  1E07  1615               	bsf	21,4	;volatile
 10382                           
 10383                           ;MCU_B1.c: 849: WREN = 1;
 10384  1E08  1515               	bsf	21,2	;volatile
 10385                           
 10386                           ;MCU_B1.c: 850: Flash_Memory_Unlock();
 10387  1E09  319D  25D5         	fcall	_Flash_Memory_Unlock
 10388                           
 10389                           ;MCU_B1.c: 851: WREN = 0;
 10390  1E0B  0023               	movlb	3	; select bank3
 10391  1E0C  1115               	bcf	21,2	;volatile
 10392  1E0D  0008               	return
 10393  1E0E                     __end_of_Flash_Memory_Erasing:	
 10394                           
 10395                           	psect	text59
 10396  037C                     __ptext59:	
 10397 ;; *************** function _Flash_Memory_Initialization *****************
 10398 ;; Defined at:
 10399 ;;		line 745 in file "../src/MCU_B1.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;		None
 10402 ;; Auto vars:     Size  Location     Type
 10403 ;;  i               1   62[BANK0 ] unsigned char 
 10404 ;; Return value:  Size  Location     Type
 10405 ;;		None               void
 10406 ;; Registers used:
 10407 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10408 ;; Tracked objects:
 10409 ;;		On entry : 0/0
 10410 ;;		On exit  : 0/0
 10411 ;;		Unchanged: 0/0
 10412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10417 ;;Total ram usage:        2 bytes
 10418 ;; Hardware stack levels used:    1
 10419 ;; Hardware stack levels required when called:    8
 10420 ;; This function calls:
 10421 ;;		_Flash_Memory_Read
 10422 ;;		_Flash_Memory_Write
 10423 ;;		_setPercentValue
 10424 ;; This function is called by:
 10425 ;;		_main
 10426 ;; This function uses a non-reentrant model
 10427 ;;
 10428                           
 10429                           
 10430                           ;psect for function _Flash_Memory_Initialization
 10431  037C                     _Flash_Memory_Initialization:	
 10432                           
 10433                           ;MCU_B1.c: 746: char i = 0;
 10434                           
 10435                           ;incstack = 0
 10436                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10437  037C  0020               	movlb	0	; select bank0
 10438  037D  01DE               	clrf	Flash_Memory_Initialization@i
 10439                           
 10440                           ;MCU_B1.c: 747: if (Flash_Memory_Read(31) == 0xaa) {
 10441  037E  301F               	movlw	31
 10442  037F  3190  208D  3183   	fcall	_Flash_Memory_Read
 10443  0382  3AAA               	xorlw	170
 10444  0383  1D03               	skipz
 10445  0384  2BF6               	goto	l7182
 10446                           
 10447                           ;MCU_B1.c: 748: product->Data[12] = Flash_Memory_Read(0);
 10448  0385  3000               	movlw	0
 10449  0386  3190  208D  3183   	fcall	_Flash_Memory_Read
 10450  0389  0020               	movlb	0	; select bank0
 10451  038A  00DD               	movwf	??_Flash_Memory_Initialization
 10452  038B  087D               	movf	_product,w
 10453  038C  3E0C               	addlw	12
 10454  038D  0086               	movwf	6
 10455  038E  3001               	movlw	1	; select bank2/3
 10456  038F  0087               	movwf	7
 10457  0390  085D               	movf	??_Flash_Memory_Initialization,w
 10458  0391  0081               	movwf	1
 10459                           
 10460                           ;MCU_B1.c: 749: product->Data[13] = Flash_Memory_Read(1);
 10461  0392  3001               	movlw	1
 10462  0393  3190  208D  3183   	fcall	_Flash_Memory_Read
 10463  0396  0020               	movlb	0	; select bank0
 10464  0397  00DD               	movwf	??_Flash_Memory_Initialization
 10465  0398  087D               	movf	_product,w
 10466  0399  3E0D               	addlw	13
 10467  039A  0086               	movwf	6
 10468  039B  3001               	movlw	1	; select bank2/3
 10469  039C  0087               	movwf	7
 10470  039D  085D               	movf	??_Flash_Memory_Initialization,w
 10471  039E  0081               	movwf	1
 10472                           
 10473                           ;MCU_B1.c: 750: product->Data[14] = Flash_Memory_Read(2);
 10474  039F  3002               	movlw	2
 10475  03A0  3190  208D  3183   	fcall	_Flash_Memory_Read
 10476  03A3  0020               	movlb	0	; select bank0
 10477  03A4  00DD               	movwf	??_Flash_Memory_Initialization
 10478  03A5  087D               	movf	_product,w
 10479  03A6  3E0E               	addlw	14
 10480  03A7  0086               	movwf	6
 10481  03A8  3001               	movlw	1	; select bank2/3
 10482  03A9  0087               	movwf	7
 10483  03AA  085D               	movf	??_Flash_Memory_Initialization,w
 10484  03AB  0081               	movwf	1
 10485                           
 10486                           ;MCU_B1.c: 756: i = setPercentValue(((char)((100-95)*0.8)));
 10487  03AC  3004               	movlw	4
 10488  03AD  3195  2525  3183   	fcall	_setPercentValue
 10489  03B0  0020               	movlb	0	; select bank0
 10490  03B1  00DD               	movwf	??_Flash_Memory_Initialization
 10491  03B2  085D               	movf	??_Flash_Memory_Initialization,w
 10492  03B3  00DE               	movwf	Flash_Memory_Initialization@i
 10493                           
 10494                           ;MCU_B1.c: 757: product->Data[21] = i;
 10495  03B4  085E               	movf	Flash_Memory_Initialization@i,w
 10496  03B5  00DD               	movwf	??_Flash_Memory_Initialization
 10497  03B6  087D               	movf	_product,w
 10498  03B7  3E15               	addlw	21
 10499  03B8  0086               	movwf	6
 10500  03B9  3001               	movlw	1	; select bank2/3
 10501  03BA  0087               	movwf	7
 10502  03BB  085D               	movf	??_Flash_Memory_Initialization,w
 10503  03BC  0081               	movwf	1
 10504                           
 10505                           ;MCU_B1.c: 758: product->Data[22] = i;
 10506  03BD  085E               	movf	Flash_Memory_Initialization@i,w
 10507  03BE  00DD               	movwf	??_Flash_Memory_Initialization
 10508  03BF  087D               	movf	_product,w
 10509  03C0  3E16               	addlw	22
 10510  03C1  0086               	movwf	6
 10511  03C2  3001               	movlw	1	; select bank2/3
 10512  03C3  0087               	movwf	7
 10513  03C4  085D               	movf	??_Flash_Memory_Initialization,w
 10514  03C5  0081               	movwf	1
 10515                           
 10516                           ;MCU_B1.c: 759: product->Data[23] = i;
 10517  03C6  085E               	movf	Flash_Memory_Initialization@i,w
 10518  03C7  00DD               	movwf	??_Flash_Memory_Initialization
 10519  03C8  087D               	movf	_product,w
 10520  03C9  3E17               	addlw	23
 10521  03CA  0086               	movwf	6
 10522  03CB  3001               	movlw	1	; select bank2/3
 10523  03CC  0087               	movwf	7
 10524  03CD  085D               	movf	??_Flash_Memory_Initialization,w
 10525  03CE  0081               	movwf	1
 10526                           
 10527                           ;MCU_B1.c: 761: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10528  03CF  087D               	movf	_product,w
 10529  03D0  3E0C               	addlw	12
 10530  03D1  0086               	movwf	6
 10531  03D2  3001               	movlw	1	; select bank2/3
 10532  03D3  0087               	movwf	7
 10533  03D4  0801               	movf	1,w
 10534  03D5  3AFF               	xorlw	255
 10535  03D6  1D03               	skipz
 10536  03D7  0008               	return
 10537  03D8  087D               	movf	_product,w
 10538  03D9  3E0D               	addlw	13
 10539  03DA  0086               	movwf	6
 10540  03DB  3001               	movlw	1	; select bank2/3
 10541  03DC  0087               	movwf	7
 10542  03DD  0801               	movf	1,w
 10543  03DE  3AFF               	xorlw	255
 10544  03DF  1D03               	skipz
 10545  03E0  0008               	return
 10546  03E1  087D               	movf	_product,w
 10547  03E2  3E0E               	addlw	14
 10548  03E3  0086               	movwf	6
 10549  03E4  3001               	movlw	1	; select bank2/3
 10550  03E5  0087               	movwf	7
 10551  03E6  0801               	movf	1,w
 10552  03E7  3AFF               	xorlw	255
 10553  03E8  1D03               	skipz
 10554  03E9  0008               	return
 10555                           
 10556                           ;MCU_B1.c: 762: myMain->FirstOpen = 1;
 10557  03EA  0021               	movlb	1	; select bank1
 10558  03EB  086E               	movf	_myMain^(0+128),w
 10559  03EC  0086               	movwf	6
 10560  03ED  3001               	movlw	1	; select bank2/3
 10561  03EE  0087               	movwf	7
 10562  03EF  1681               	bsf	1,5
 10563                           
 10564                           ;MCU_B1.c: 763: myMain->First = 1;
 10565  03F0  086E               	movf	_myMain^(0+128),w
 10566  03F1  0086               	movwf	6
 10567  03F2  3001               	movlw	1	; select bank2/3
 10568  03F3  0087               	movwf	7
 10569  03F4  1781               	bsf	1,7
 10570                           
 10571                           ;MCU_B1.c: 764: }
 10572                           ;MCU_B1.c: 765: } else {
 10573  03F5  0008               	return
 10574  03F6                     l7182:	
 10575                           
 10576                           ;MCU_B1.c: 766: i = setPercentValue(((char)((100-95)*0.8)));
 10577  03F6  3004               	movlw	4
 10578  03F7  3195  2525  3183   	fcall	_setPercentValue
 10579  03FA  0020               	movlb	0	; select bank0
 10580  03FB  00DD               	movwf	??_Flash_Memory_Initialization
 10581  03FC  085D               	movf	??_Flash_Memory_Initialization,w
 10582  03FD  00DE               	movwf	Flash_Memory_Initialization@i
 10583                           
 10584                           ;MCU_B1.c: 767: Memory->Data[0]=0xff;
 10585  03FE  30FF               	movlw	255
 10586  03FF  00DD               	movwf	??_Flash_Memory_Initialization
 10587  0400  0021               	movlb	1	; select bank1
 10588  0401  086F               	movf	_Memory^(0+128),w
 10589  0402  0086               	movwf	6
 10590  0403  3002               	movlw	2	; select bank4/5
 10591  0404  0087               	movwf	7
 10592  0405  0020               	movlb	0	; select bank0
 10593  0406  085D               	movf	??_Flash_Memory_Initialization,w
 10594  0407  0081               	movwf	1
 10595                           
 10596                           ;MCU_B1.c: 768: Memory->Data[1]=0xff;
 10597  0408  30FF               	movlw	255
 10598  0409  00DD               	movwf	??_Flash_Memory_Initialization
 10599  040A  0021               	movlb	1	; select bank1
 10600  040B  0A6F               	incf	_Memory^(0+128),w
 10601  040C  0086               	movwf	6
 10602  040D  3002               	movlw	2	; select bank4/5
 10603  040E  0087               	movwf	7
 10604  040F  0020               	movlb	0	; select bank0
 10605  0410  085D               	movf	??_Flash_Memory_Initialization,w
 10606  0411  0081               	movwf	1
 10607                           
 10608                           ;MCU_B1.c: 769: Memory->Data[2]=0xff;
 10609  0412  30FF               	movlw	255
 10610  0413  00DD               	movwf	??_Flash_Memory_Initialization
 10611  0414  0021               	movlb	1	; select bank1
 10612  0415  086F               	movf	_Memory^(0+128),w
 10613  0416  3E02               	addlw	2
 10614  0417  0086               	movwf	6
 10615  0418  3002               	movlw	2	; select bank4/5
 10616  0419  0087               	movwf	7
 10617  041A  0020               	movlb	0	; select bank0
 10618  041B  085D               	movf	??_Flash_Memory_Initialization,w
 10619  041C  0081               	movwf	1
 10620                           
 10621                           ;MCU_B1.c: 770: Memory->Data[3]=0xff;
 10622  041D  30FF               	movlw	255
 10623  041E  00DD               	movwf	??_Flash_Memory_Initialization
 10624  041F  0021               	movlb	1	; select bank1
 10625  0420  086F               	movf	_Memory^(0+128),w
 10626  0421  3E03               	addlw	3
 10627  0422  0086               	movwf	6
 10628  0423  3002               	movlw	2	; select bank4/5
 10629  0424  0087               	movwf	7
 10630  0425  0020               	movlb	0	; select bank0
 10631  0426  085D               	movf	??_Flash_Memory_Initialization,w
 10632  0427  0081               	movwf	1
 10633                           
 10634                           ;MCU_B1.c: 771: Memory->Data[4]=0xff;
 10635  0428  30FF               	movlw	255
 10636  0429  00DD               	movwf	??_Flash_Memory_Initialization
 10637  042A  0021               	movlb	1	; select bank1
 10638  042B  086F               	movf	_Memory^(0+128),w
 10639  042C  3E04               	addlw	4
 10640  042D  0086               	movwf	6
 10641  042E  3002               	movlw	2	; select bank4/5
 10642  042F  0087               	movwf	7
 10643  0430  0020               	movlb	0	; select bank0
 10644  0431  085D               	movf	??_Flash_Memory_Initialization,w
 10645  0432  0081               	movwf	1
 10646                           
 10647                           ;MCU_B1.c: 772: Memory->Data[5]=0xff;
 10648  0433  30FF               	movlw	255
 10649  0434  00DD               	movwf	??_Flash_Memory_Initialization
 10650  0435  0021               	movlb	1	; select bank1
 10651  0436  086F               	movf	_Memory^(0+128),w
 10652  0437  3E05               	addlw	5
 10653  0438  0086               	movwf	6
 10654  0439  3002               	movlw	2	; select bank4/5
 10655  043A  0087               	movwf	7
 10656  043B  0020               	movlb	0	; select bank0
 10657  043C  085D               	movf	??_Flash_Memory_Initialization,w
 10658  043D  0081               	movwf	1
 10659                           
 10660                           ;MCU_B1.c: 773: Memory->Data[31]=0xaa;
 10661  043E  30AA               	movlw	170
 10662  043F  00DD               	movwf	??_Flash_Memory_Initialization
 10663  0440  0021               	movlb	1	; select bank1
 10664  0441  086F               	movf	_Memory^(0+128),w
 10665  0442  3E1F               	addlw	31
 10666  0443  0086               	movwf	6
 10667  0444  3002               	movlw	2	; select bank4/5
 10668  0445  0087               	movwf	7
 10669  0446  0020               	movlb	0	; select bank0
 10670  0447  085D               	movf	??_Flash_Memory_Initialization,w
 10671  0448  0081               	movwf	1
 10672                           
 10673                           ;MCU_B1.c: 774: product->Data[21] = i;
 10674  0449  085E               	movf	Flash_Memory_Initialization@i,w
 10675  044A  00DD               	movwf	??_Flash_Memory_Initialization
 10676  044B  087D               	movf	_product,w
 10677  044C  3E15               	addlw	21
 10678  044D  0086               	movwf	6
 10679  044E  3001               	movlw	1	; select bank2/3
 10680  044F  0087               	movwf	7
 10681  0450  085D               	movf	??_Flash_Memory_Initialization,w
 10682  0451  0081               	movwf	1
 10683                           
 10684                           ;MCU_B1.c: 775: product->Data[22] = i;
 10685  0452  085E               	movf	Flash_Memory_Initialization@i,w
 10686  0453  00DD               	movwf	??_Flash_Memory_Initialization
 10687  0454  087D               	movf	_product,w
 10688  0455  3E16               	addlw	22
 10689  0456  0086               	movwf	6
 10690  0457  3001               	movlw	1	; select bank2/3
 10691  0458  0087               	movwf	7
 10692  0459  085D               	movf	??_Flash_Memory_Initialization,w
 10693  045A  0081               	movwf	1
 10694                           
 10695                           ;MCU_B1.c: 776: product->Data[23] = i;
 10696  045B  085E               	movf	Flash_Memory_Initialization@i,w
 10697  045C  00DD               	movwf	??_Flash_Memory_Initialization
 10698  045D  087D               	movf	_product,w
 10699  045E  3E17               	addlw	23
 10700  045F  0086               	movwf	6
 10701  0460  3001               	movlw	1	; select bank2/3
 10702  0461  0087               	movwf	7
 10703  0462  085D               	movf	??_Flash_Memory_Initialization,w
 10704  0463  0081               	movwf	1
 10705                           
 10706                           ;MCU_B1.c: 777: GIE = 0;
 10707  0464  138B               	bcf	11,7	;volatile
 10708                           
 10709                           ;MCU_B1.c: 778: Flash_Memory_Write();
 10710  0465  3193  23B7         	fcall	_Flash_Memory_Write
 10711                           
 10712                           ;MCU_B1.c: 779: GIE = 1;
 10713  0467  178B               	bsf	11,7	;volatile
 10714                           
 10715                           ;MCU_B1.c: 780: myMain->FirstOpen = 1;
 10716  0468  0021               	movlb	1	; select bank1
 10717  0469  086E               	movf	_myMain^(0+128),w
 10718  046A  0086               	movwf	6
 10719  046B  3001               	movlw	1	; select bank2/3
 10720  046C  0087               	movwf	7
 10721  046D  1681               	bsf	1,5
 10722                           
 10723                           ;MCU_B1.c: 781: myMain->First = 1;
 10724  046E  086E               	movf	_myMain^(0+128),w
 10725  046F  0086               	movwf	6
 10726  0470  3001               	movlw	1	; select bank2/3
 10727  0471  0087               	movwf	7
 10728  0472  1781               	bsf	1,7
 10729  0473  0008               	return
 10730  0474                     __end_of_Flash_Memory_Initialization:	
 10731                           
 10732                           	psect	text60
 10733  13B7                     __ptext60:	
 10734 ;; *************** function _Flash_Memory_Write *****************
 10735 ;; Defined at:
 10736 ;;		line 825 in file "../src/MCU_B1.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;  i               1    1[BANK0 ] unsigned char 
 10741 ;; Return value:  Size  Location     Type
 10742 ;;		None               void
 10743 ;; Registers used:
 10744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;Total ram usage:        2 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    6
 10757 ;; This function calls:
 10758 ;;		_Flash_Memory_Unlock
 10759 ;; This function is called by:
 10760 ;;		_Flash_Memory_Initialization
 10761 ;;		_Flash_Memory_Modify
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _Flash_Memory_Write
 10767  13B7                     _Flash_Memory_Write:	
 10768                           
 10769                           ;MCU_B1.c: 826: char i = 0;
 10770                           
 10771                           ;incstack = 0
 10772                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10773  13B7  0020               	movlb	0	; select bank0
 10774  13B8  01A1               	clrf	Flash_Memory_Write@i
 10775                           
 10776                           ;MCU_B1.c: 827: CFGS = 0;
 10777  13B9  0023               	movlb	3	; select bank3
 10778  13BA  1315               	bcf	21,6	;volatile
 10779                           
 10780                           ;MCU_B1.c: 828: PMADRH = 0x30;
 10781  13BB  3030               	movlw	48
 10782  13BC  0092               	movwf	18	;volatile
 10783                           
 10784                           ;MCU_B1.c: 829: PMDATH = 0;
 10785  13BD  0194               	clrf	20	;volatile
 10786                           
 10787                           ;MCU_B1.c: 830: FREE = 0;
 10788  13BE  1215               	bcf	21,4	;volatile
 10789                           
 10790                           ;MCU_B1.c: 831: LWLO = 1;
 10791  13BF  1695               	bsf	21,5	;volatile
 10792                           
 10793                           ;MCU_B1.c: 832: WREN = 1;
 10794  13C0  1515               	bsf	21,2	;volatile
 10795                           
 10796                           ;MCU_B1.c: 833: for (i = 0; i < 32; i++) {
 10797  13C1  0020               	movlb	0	; select bank0
 10798  13C2  01A1               	clrf	Flash_Memory_Write@i
 10799  13C3  3020               	movlw	32
 10800  13C4  0221               	subwf	Flash_Memory_Write@i,w
 10801  13C5  1803               	btfsc	3,0
 10802  13C6  2BE3               	goto	l1399
 10803  13C7                     l6244:	
 10804                           
 10805                           ;MCU_B1.c: 834: PMADRL = i;
 10806  13C7  0821               	movf	Flash_Memory_Write@i,w
 10807  13C8  0023               	movlb	3	; select bank3
 10808  13C9  0091               	movwf	17	;volatile
 10809                           
 10810                           ;MCU_B1.c: 835: PMDATL = Memory->Data[i];
 10811  13CA  0020               	movlb	0	; select bank0
 10812  13CB  0821               	movf	Flash_Memory_Write@i,w
 10813  13CC  0021               	movlb	1	; select bank1
 10814  13CD  076F               	addwf	_Memory^(0+128),w
 10815  13CE  0020               	movlb	0	; select bank0
 10816  13CF  00A0               	movwf	??_Flash_Memory_Write
 10817  13D0  0820               	movf	??_Flash_Memory_Write,w
 10818  13D1  0086               	movwf	6
 10819  13D2  3002               	movlw	2	; select bank4/5
 10820  13D3  0087               	movwf	7
 10821  13D4  0801               	movf	1,w
 10822  13D5  0023               	movlb	3	; select bank3
 10823  13D6  0093               	movwf	19	;volatile
 10824                           
 10825                           ;MCU_B1.c: 836: Flash_Memory_Unlock();
 10826  13D7  319D  25D5  3193   	fcall	_Flash_Memory_Unlock
 10827  13DA  3001               	movlw	1
 10828  13DB  0020               	movlb	0	; select bank0
 10829  13DC  00A0               	movwf	??_Flash_Memory_Write
 10830  13DD  0820               	movf	??_Flash_Memory_Write,w
 10831  13DE  07A1               	addwf	Flash_Memory_Write@i,f
 10832  13DF  3020               	movlw	32
 10833  13E0  0221               	subwf	Flash_Memory_Write@i,w
 10834  13E1  1C03               	skipc
 10835  13E2  2BC7               	goto	l6244
 10836  13E3                     l1399:	
 10837                           
 10838                           ;MCU_B1.c: 837: }
 10839                           ;MCU_B1.c: 838: LWLO = 0;
 10840  13E3  0023               	movlb	3	; select bank3
 10841  13E4  1295               	bcf	21,5	;volatile
 10842                           
 10843                           ;MCU_B1.c: 839: Flash_Memory_Unlock();
 10844  13E5  319D  25D5         	fcall	_Flash_Memory_Unlock
 10845                           
 10846                           ;MCU_B1.c: 840: WREN = 0;
 10847  13E7  0023               	movlb	3	; select bank3
 10848  13E8  1115               	bcf	21,2	;volatile
 10849  13E9  0008               	return
 10850  13EA                     __end_of_Flash_Memory_Write:	
 10851                           
 10852                           	psect	text61
 10853  1DD5                     __ptext61:	
 10854 ;; *************** function _Flash_Memory_Unlock *****************
 10855 ;; Defined at:
 10856 ;;		line 804 in file "../src/MCU_B1.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;		None
 10859 ;; Auto vars:     Size  Location     Type
 10860 ;;		None
 10861 ;; Return value:  Size  Location     Type
 10862 ;;		None               void
 10863 ;; Registers used:
 10864 ;;		wreg
 10865 ;; Tracked objects:
 10866 ;;		On entry : 0/0
 10867 ;;		On exit  : 0/0
 10868 ;;		Unchanged: 0/0
 10869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10874 ;;Total ram usage:        0 bytes
 10875 ;; Hardware stack levels used:    1
 10876 ;; Hardware stack levels required when called:    5
 10877 ;; This function calls:
 10878 ;;		Nothing
 10879 ;; This function is called by:
 10880 ;;		_Flash_Memory_Write
 10881 ;;		_Flash_Memory_Erasing
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           
 10886                           ;psect for function _Flash_Memory_Unlock
 10887  1DD5                     _Flash_Memory_Unlock:	
 10888                           
 10889                           ;MCU_B1.c: 805: PMCON2 = 0x55;
 10890                           
 10891                           ;incstack = 0
 10892                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10893  1DD5  3055               	movlw	85
 10894  1DD6  0023               	movlb	3	; select bank3
 10895  1DD7  0096               	movwf	22	;volatile
 10896                           
 10897                           ;MCU_B1.c: 806: PMCON2 = 0xaa;
 10898  1DD8  30AA               	movlw	170
 10899  1DD9  0096               	movwf	22	;volatile
 10900                           
 10901                           ;MCU_B1.c: 807: WR = 1;
 10902  1DDA  1495               	bsf	21,1	;volatile
 10903                           
 10904                           ;MCU_B1.c: 808: __nop();
 10905  1DDB  0000               	nop
 10906                           
 10907                           ;MCU_B1.c: 809: __nop();
 10908  1DDC  0000               	nop
 10909  1DDD  0008               	return
 10910  1DDE                     __end_of_Flash_Memory_Unlock:	
 10911                           
 10912                           	psect	text62
 10913  108D                     __ptext62:	
 10914 ;; *************** function _Flash_Memory_Read *****************
 10915 ;; Defined at:
 10916 ;;		line 813 in file "../src/MCU_B1.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;  address         1    wreg     unsigned char 
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;  address         1    2[BANK0 ] unsigned char 
 10921 ;;  ret             1    3[BANK0 ] unsigned char 
 10922 ;;  i               1    1[BANK0 ] unsigned char 
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  1    wreg      unsigned char 
 10925 ;; Registers used:
 10926 ;;		wreg, status,2
 10927 ;; Tracked objects:
 10928 ;;		On entry : 0/0
 10929 ;;		On exit  : 0/0
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;Total ram usage:        4 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; Hardware stack levels required when called:    5
 10939 ;; This function calls:
 10940 ;;		Nothing
 10941 ;; This function is called by:
 10942 ;;		_Flash_Memory_Initialization
 10943 ;;		_Flash_Memory_Modify
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           
 10948                           ;psect for function _Flash_Memory_Read
 10949  108D                     _Flash_Memory_Read:	
 10950                           
 10951                           ;incstack = 0
 10952                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10953                           ;Flash_Memory_Read@address stored from wreg
 10954  108D  0020               	movlb	0	; select bank0
 10955  108E  00A2               	movwf	Flash_Memory_Read@address
 10956                           
 10957                           ;MCU_B1.c: 814: char i = 0, ret = 0;
 10958  108F  01A1               	clrf	Flash_Memory_Read@i
 10959  1090  01A3               	clrf	Flash_Memory_Read@ret
 10960                           
 10961                           ;MCU_B1.c: 815: PMADRH = 0x30;
 10962  1091  3030               	movlw	48
 10963  1092  0023               	movlb	3	; select bank3
 10964  1093  0092               	movwf	18	;volatile
 10965                           
 10966                           ;MCU_B1.c: 816: PMADRL = address;
 10967  1094  0020               	movlb	0	; select bank0
 10968  1095  0822               	movf	Flash_Memory_Read@address,w
 10969  1096  0023               	movlb	3	; select bank3
 10970  1097  0091               	movwf	17	;volatile
 10971                           
 10972                           ;MCU_B1.c: 817: CFGS = 0;
 10973  1098  1315               	bcf	21,6	;volatile
 10974                           
 10975                           ;MCU_B1.c: 818: RD = 1;
 10976  1099  1415               	bsf	21,0	;volatile
 10977                           
 10978                           ;MCU_B1.c: 819: i = PMDATH;
 10979  109A  0814               	movf	20,w	;volatile
 10980  109B  0020               	movlb	0	; select bank0
 10981  109C  00A0               	movwf	??_Flash_Memory_Read
 10982  109D  0820               	movf	??_Flash_Memory_Read,w
 10983  109E  00A1               	movwf	Flash_Memory_Read@i
 10984                           
 10985                           ;MCU_B1.c: 820: ret = PMDATL;
 10986  109F  0023               	movlb	3	; select bank3
 10987  10A0  0813               	movf	19,w	;volatile
 10988  10A1  0020               	movlb	0	; select bank0
 10989  10A2  00A0               	movwf	??_Flash_Memory_Read
 10990  10A3  0820               	movf	??_Flash_Memory_Read,w
 10991  10A4  00A3               	movwf	Flash_Memory_Read@ret
 10992                           
 10993                           ;MCU_B1.c: 821: return ret;
 10994  10A5  0823               	movf	Flash_Memory_Read@ret,w
 10995  10A6  0008               	return
 10996  10A7                     __end_of_Flash_Memory_Read:	
 10997                           
 10998                           	psect	text63
 10999  1E52                     __ptext63:	
 11000 ;; *************** function _DimmerLights_Main *****************
 11001 ;; Defined at:
 11002 ;;		line 407 in file "../src/Dimmer_B1.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;		None               void
 11009 ;; Registers used:
 11010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;Total ram usage:        0 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:   11
 11023 ;; This function calls:
 11024 ;;		_DimmerLights_Close
 11025 ;;		_setDimmerLights_Main
 11026 ;; This function is called by:
 11027 ;;		_main
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _DimmerLights_Main
 11033  1E52                     _DimmerLights_Main:	
 11034                           
 11035                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11039  1E52  3001               	movlw	1
 11040  1E53  318C  242D  319E   	fcall	_setDimmerLights_Main
 11041                           
 11042                           ;Dimmer_B1.c: 414: setDimmerLights_Main(2);
 11043  1E56  3002               	movlw	2
 11044  1E57  318C  242D  319E   	fcall	_setDimmerLights_Main
 11045                           
 11046                           ;Dimmer_B1.c: 418: setDimmerLights_Main(3);
 11047  1E5A  3003               	movlw	3
 11048  1E5B  318C  242D  319E   	fcall	_setDimmerLights_Main
 11049                           
 11050                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11051  1E5E  319F  2747         	fcall	_DimmerLights_Close
 11052  1E60  0008               	return
 11053  1E61                     __end_of_DimmerLights_Main:	
 11054                           
 11055                           	psect	text64
 11056  0C2D                     __ptext64:	
 11057 ;; *************** function _setDimmerLights_Main *****************
 11058 ;; Defined at:
 11059 ;;		line 425 in file "../src/Dimmer_B1.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  lights          1    wreg     unsigned char 
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;  lights          1   74[BANK0 ] unsigned char 
 11064 ;;  clear           1   73[BANK0 ] unsigned char 
 11065 ;; Return value:  Size  Location     Type
 11066 ;;		None               void
 11067 ;; Registers used:
 11068 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11069 ;; Tracked objects:
 11070 ;;		On entry : 0/0
 11071 ;;		On exit  : 0/0
 11072 ;;		Unchanged: 0/0
 11073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11075 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;Total ram usage:        6 bytes
 11079 ;; Hardware stack levels used:    1
 11080 ;; Hardware stack levels required when called:   10
 11081 ;; This function calls:
 11082 ;;		_DimmerLightsPointSelect
 11083 ;;		_setBuz
 11084 ;;		_setDimmerLights
 11085 ;;		_setDimmerLights_Adj
 11086 ;; This function is called by:
 11087 ;;		_DimmerLights_Main
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           
 11092                           ;psect for function _setDimmerLights_Main
 11093  0C2D                     _setDimmerLights_Main:	
 11094                           
 11095                           ;incstack = 0
 11096                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11097                           ;setDimmerLights_Main@lights stored from wreg
 11098  0C2D  0020               	movlb	0	; select bank0
 11099  0C2E  00EA               	movwf	setDimmerLights_Main@lights
 11100                           
 11101                           ;Dimmer_B1.c: 426: char clear = 1;
 11102  0C2F  01E9               	clrf	setDimmerLights_Main@clear
 11103  0C30  0AE9               	incf	setDimmerLights_Main@clear,f
 11104                           
 11105                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11106  0C31  086A               	movf	setDimmerLights_Main@lights,w
 11107  0C32  3190  20A7  318C   	fcall	_DimmerLightsPointSelect
 11108                           
 11109                           ;Dimmer_B1.c: 430: if (lights == 1) {
 11110  0C35  0020               	movlb	0	; select bank0
 11111  0C36  086A               	movf	setDimmerLights_Main@lights,w
 11112  0C37  3A01               	xorlw	1
 11113  0C38  1D03               	skipz
 11114  0C39  2C45               	goto	l6674
 11115                           
 11116                           ;Dimmer_B1.c: 431: clear = (DimmerLights2.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11117  0C3A  01E6               	clrf	_setDimmerLights_Main$1956
 11118  0C3B  0022               	movlb	2	; select bank2
 11119  0C3C  1938               	btfsc	(_DimmerLights2^(0+256)+9),2
 11120  0C3D  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 11121  0C3E  2C42               	goto	l6672
 11122  0C3F  0020               	movlb	0	; select bank0
 11123  0C40  01E6               	clrf	_setDimmerLights_Main$1956
 11124  0C41  0AE6               	incf	_setDimmerLights_Main$1956,f
 11125  0C42                     l6672:	
 11126  0C42  0020               	movlb	0	; select bank0
 11127  0C43  0866               	movf	_setDimmerLights_Main$1956,w
 11128  0C44  2C62               	goto	L8
 11129  0C45                     l6674:	
 11130                           ;Dimmer_B1.c: 432: } else if (lights == 2) {
 11131                           
 11132  0C45  086A               	movf	setDimmerLights_Main@lights,w
 11133  0C46  3A02               	xorlw	2
 11134  0C47  1D03               	skipz
 11135  0C48  2C54               	goto	l6686
 11136                           
 11137                           ;Dimmer_B1.c: 433: clear = (DimmerLights1.Clear == 0 || DimmerLights3.Clear == 0) ? 0 : 
      +                          1;
 11138  0C49  01E7               	clrf	_setDimmerLights_Main$1957
 11139  0C4A  0022               	movlb	2	; select bank2
 11140  0C4B  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 11141  0C4C  1D47               	btfss	(_DimmerLights3^(0+256)+9),2
 11142  0C4D  2C51               	goto	l6684
 11143  0C4E  0020               	movlb	0	; select bank0
 11144  0C4F  01E7               	clrf	_setDimmerLights_Main$1957
 11145  0C50  0AE7               	incf	_setDimmerLights_Main$1957,f
 11146  0C51                     l6684:	
 11147  0C51  0020               	movlb	0	; select bank0
 11148  0C52  0867               	movf	_setDimmerLights_Main$1957,w
 11149  0C53  2C62               	goto	L8
 11150  0C54                     l6686:	
 11151                           ;Dimmer_B1.c: 434: } else if (lights == 3) {
 11152                           
 11153  0C54  086A               	movf	setDimmerLights_Main@lights,w
 11154  0C55  3A03               	xorlw	3
 11155  0C56  1D03               	skipz
 11156  0C57  2C65               	goto	l6698
 11157                           
 11158                           ;Dimmer_B1.c: 435: clear = (DimmerLights1.Clear == 0 || DimmerLights2.Clear == 0) ? 0 : 
      +                          1;
 11159  0C58  01E8               	clrf	_setDimmerLights_Main$1958
 11160  0C59  0022               	movlb	2	; select bank2
 11161  0C5A  1929               	btfsc	(_DimmerLights1^(0+256)+9),2
 11162  0C5B  1D38               	btfss	(_DimmerLights2^(0+256)+9),2
 11163  0C5C  2C60               	goto	l6696
 11164  0C5D  0020               	movlb	0	; select bank0
 11165  0C5E  01E8               	clrf	_setDimmerLights_Main$1958
 11166  0C5F  0AE8               	incf	_setDimmerLights_Main$1958,f
 11167  0C60                     l6696:	
 11168  0C60  0020               	movlb	0	; select bank0
 11169  0C61  0868               	movf	_setDimmerLights_Main$1958,w
 11170  0C62                     L8:	
 11171  0C62  00E5               	movwf	??_setDimmerLights_Main
 11172  0C63  0865               	movf	??_setDimmerLights_Main,w
 11173  0C64  00E9               	movwf	setDimmerLights_Main@clear
 11174  0C65                     l6698:	
 11175                           
 11176                           ;Dimmer_B1.c: 436: }
 11177                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11178  0C65  0878               	movf	_DimmerLights,w
 11179  0C66  3E08               	addlw	8
 11180  0C67  0086               	movwf	6
 11181  0C68  3001               	movlw	1	; select bank2/3
 11182  0C69  0087               	movwf	7
 11183  0C6A  1D01               	btfss	1,2
 11184  0C6B  2C89               	goto	l6708
 11185                           
 11186                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11187  0C6C  0869               	movf	setDimmerLights_Main@clear,w
 11188  0C6D  3A01               	xorlw	1
 11189  0C6E  1D03               	skipz
 11190  0C6F  0008               	return
 11191                           
 11192                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11193  0C70  0878               	movf	_DimmerLights,w
 11194  0C71  3E08               	addlw	8
 11195  0C72  0086               	movwf	6
 11196  0C73  3001               	movlw	1	; select bank2/3
 11197  0C74  0087               	movwf	7
 11198  0C75  1101               	bcf	1,2
 11199                           
 11200                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 11201  0C76  0878               	movf	_DimmerLights,w
 11202  0C77  3E08               	addlw	8
 11203  0C78  0086               	movwf	6
 11204  0C79  3001               	movlw	1	; select bank2/3
 11205  0C7A  0087               	movwf	7
 11206  0C7B  1C81               	btfss	1,1
 11207  0C7C  2C83               	goto	l6706
 11208                           
 11209                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 11210  0C7D  01A4               	clrf	setDimmerLights@status
 11211  0C7E  0AA4               	incf	setDimmerLights@status,f
 11212  0C7F  086A               	movf	setDimmerLights_Main@lights,w
 11213  0C80  318A  229F         	fcall	_setDimmerLights
 11214                           
 11215                           ;Dimmer_B1.c: 452: } else {
 11216  0C82  0008               	return
 11217  0C83                     l6706:	
 11218                           
 11219                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 11220  0C83  0020               	movlb	0	; select bank0
 11221  0C84  01A4               	clrf	setDimmerLights@status
 11222  0C85  086A               	movf	setDimmerLights_Main@lights,w
 11223  0C86  318A  229F         	fcall	_setDimmerLights
 11224                           
 11225                           ;Dimmer_B1.c: 454: }
 11226                           ;Dimmer_B1.c: 458: }
 11227                           ;Dimmer_B1.c: 459: } else {
 11228  0C88  0008               	return
 11229  0C89                     l6708:	
 11230                           
 11231                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 11232  0C89  0878               	movf	_DimmerLights,w
 11233  0C8A  3E08               	addlw	8
 11234  0C8B  0086               	movwf	6
 11235  0C8C  3001               	movlw	1	; select bank2/3
 11236  0C8D  0087               	movwf	7
 11237  0C8E  1E01               	btfss	1,4
 11238  0C8F  0008               	return
 11239                           
 11240                           ;Dimmer_B1.c: 461: if (clear == 1) {
 11241  0C90  0020               	movlb	0	; select bank0
 11242  0C91  0869               	movf	setDimmerLights_Main@clear,w
 11243  0C92  3A01               	xorlw	1
 11244  0C93  1D03               	skipz
 11245  0C94  0008               	return
 11246                           
 11247                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 11248  0C95  0878               	movf	_DimmerLights,w
 11249  0C96  3E08               	addlw	8
 11250  0C97  0086               	movwf	6
 11251  0C98  3001               	movlw	1	; select bank2/3
 11252  0C99  0087               	movwf	7
 11253  0C9A  1201               	bcf	1,4
 11254                           
 11255                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 11256  0C9B  0878               	movf	_DimmerLights,w
 11257  0C9C  3E08               	addlw	8
 11258  0C9D  0086               	movwf	6
 11259  0C9E  3001               	movlw	1	; select bank2/3
 11260  0C9F  0087               	movwf	7
 11261  0CA0  1D81               	btfss	1,3
 11262  0CA1  2CB1               	goto	l6716
 11263                           
 11264                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 11265  0CA2  01E2               	clrf	setDimmerLights_Adj@status
 11266  0CA3  0AE2               	incf	setDimmerLights_Adj@status,f
 11267  0CA4  086A               	movf	setDimmerLights_Main@lights,w
 11268  0CA5  3194  241E  318C   	fcall	_setDimmerLights_Adj
 11269                           
 11270                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 11271  0CA8  3064               	movlw	100
 11272  0CA9  0020               	movlb	0	; select bank0
 11273  0CAA  00A9               	movwf	setBuz@time
 11274  0CAB  3000               	movlw	0
 11275  0CAC  00AA               	movwf	setBuz@time+1
 11276  0CAD  3001               	movlw	1
 11277  0CAE  318C  24B7         	fcall	_setBuz
 11278                           
 11279                           ;Dimmer_B1.c: 466: } else {
 11280  0CB0  0008               	return
 11281  0CB1                     l6716:	
 11282                           
 11283                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 11284  0CB1  0020               	movlb	0	; select bank0
 11285  0CB2  01E2               	clrf	setDimmerLights_Adj@status
 11286  0CB3  086A               	movf	setDimmerLights_Main@lights,w
 11287  0CB4  3194  241E         	fcall	_setDimmerLights_Adj
 11288  0CB6  0008               	return
 11289  0CB7                     __end_of_setDimmerLights_Main:	
 11290                           
 11291                           	psect	text65
 11292  141E                     __ptext65:	
 11293 ;; *************** function _setDimmerLights_Adj *****************
 11294 ;; Defined at:
 11295 ;;		line 646 in file "../src/Dimmer_B1.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;  lights          1    wreg     unsigned char 
 11298 ;;  status          1   66[BANK0 ] unsigned char 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  lights          1   68[BANK0 ] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;		None               void
 11303 ;; Registers used:
 11304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11310 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;Total ram usage:        3 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    9
 11317 ;; This function calls:
 11318 ;;		_DimmerLightsPointSelect
 11319 ;;		_setRF_DimmerLights
 11320 ;;		_setTxData
 11321 ;; This function is called by:
 11322 ;;		_setDimmerLights_Main
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           
 11327                           ;psect for function _setDimmerLights_Adj
 11328  141E                     _setDimmerLights_Adj:	
 11329                           
 11330                           ;incstack = 0
 11331                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11332                           ;setDimmerLights_Adj@lights stored from wreg
 11333  141E  0020               	movlb	0	; select bank0
 11334  141F  00E4               	movwf	setDimmerLights_Adj@lights
 11335                           
 11336                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 11337  1420  0864               	movf	setDimmerLights_Adj@lights,w
 11338  1421  3190  20A7  3194   	fcall	_DimmerLightsPointSelect
 11339                           
 11340                           ;Dimmer_B1.c: 648: if (status == 1) {
 11341  1424  0020               	movlb	0	; select bank0
 11342  1425  0862               	movf	setDimmerLights_Adj@status,w
 11343  1426  3A01               	xorlw	1
 11344  1427  1D03               	skipz
 11345  1428  2C34               	goto	l6198
 11346                           
 11347                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 11348  1429  0878               	movf	_DimmerLights,w
 11349  142A  0086               	movwf	6
 11350  142B  3001               	movlw	1	; select bank2/3
 11351  142C  0087               	movwf	7
 11352  142D  1581               	bsf	1,3
 11353                           
 11354                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 11355  142E  0878               	movf	_DimmerLights,w
 11356  142F  0086               	movwf	6
 11357  1430  3001               	movlw	1	; select bank2/3
 11358  1431  0087               	movwf	7
 11359  1432  1481               	bsf	1,1
 11360                           
 11361                           ;Dimmer_B1.c: 651: } else {
 11362  1433  0008               	return
 11363  1434                     l6198:	
 11364                           
 11365                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 11366  1434  0878               	movf	_DimmerLights,w
 11367  1435  0086               	movwf	6
 11368  1436  3001               	movlw	1	; select bank2/3
 11369  1437  0087               	movwf	7
 11370  1438  1D81               	btfss	1,3
 11371  1439  0008               	return
 11372                           
 11373                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 11374  143A  0878               	movf	_DimmerLights,w
 11375  143B  0086               	movwf	6
 11376  143C  3001               	movlw	1	; select bank2/3
 11377  143D  0087               	movwf	7
 11378  143E  1081               	bcf	1,1
 11379                           
 11380                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 11381  143F  0878               	movf	_DimmerLights,w
 11382  1440  0086               	movwf	6
 11383  1441  3001               	movlw	1	; select bank2/3
 11384  1442  0087               	movwf	7
 11385  1443  1181               	bcf	1,3
 11386                           
 11387                           ;Dimmer_B1.c: 656: ;;
 11388                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11389  1444  0878               	movf	_DimmerLights,w
 11390  1445  3E04               	addlw	4
 11391  1446  0086               	movwf	6
 11392  1447  3001               	movlw	1	; select bank2/3
 11393  1448  0087               	movwf	7
 11394  1449  0801               	movf	1,w
 11395  144A  00E3               	movwf	??_setDimmerLights_Adj
 11396  144B  0878               	movf	_DimmerLights,w
 11397  144C  3E05               	addlw	5
 11398  144D  0086               	movwf	6
 11399  144E  3001               	movlw	1	; select bank2/3
 11400  144F  0087               	movwf	7
 11401  1450  0863               	movf	??_setDimmerLights_Adj,w
 11402  1451  0081               	movwf	1
 11403                           
 11404                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 11405  1452  01DD               	clrf	setRF_DimmerLights@on
 11406  1453  0ADD               	incf	setRF_DimmerLights@on,f
 11407  1454  0864               	movf	setDimmerLights_Adj@lights,w
 11408  1455  3188  20E1  3194   	fcall	_setRF_DimmerLights
 11409                           
 11410                           ;Dimmer_B1.c: 666: setTxData(1);
 11411  1458  3001               	movlw	1
 11412  1459  318D  254D         	fcall	_setTxData
 11413  145B  0008               	return
 11414  145C                     __end_of_setDimmerLights_Adj:	
 11415                           
 11416                           	psect	text66
 11417  0D4D                     __ptext66:	
 11418 ;; *************** function _setTxData *****************
 11419 ;; Defined at:
 11420 ;;		line 161 in file "../src/RF_Control_B1.c"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;  rf              1    wreg     unsigned char 
 11423 ;; Auto vars:     Size  Location     Type
 11424 ;;  rf              1    3[BANK0 ] unsigned char 
 11425 ;;  i               1    0        unsigned char 
 11426 ;; Return value:  Size  Location     Type
 11427 ;;		None               void
 11428 ;; Registers used:
 11429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;Total ram usage:        2 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; Hardware stack levels required when called:    6
 11442 ;; This function calls:
 11443 ;;		_RfPointSelect
 11444 ;; This function is called by:
 11445 ;;		_setDimmerLights_Adj
 11446 ;;		_setControl_Lights_Table
 11447 ;;		_setRFSW_Control
 11448 ;;		_setRFSW_AdjControl
 11449 ;;		_Sw_DimmerOnFunc
 11450 ;;		_Sw_DimmerOffFunc
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           
 11455                           ;psect for function _setTxData
 11456  0D4D                     _setTxData:	
 11457                           
 11458                           ;incstack = 0
 11459                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11460                           ;setTxData@rf stored from wreg
 11461  0D4D  0020               	movlb	0	; select bank0
 11462  0D4E  00A3               	movwf	setTxData@rf
 11463                           
 11464                           ;RF_Control_B1.c: 162: char i;
 11465                           ;RF_Control_B1.c: 163: RfPointSelect(rf);
 11466  0D4F  0823               	movf	setTxData@rf,w
 11467  0D50  319E  2627  318D   	fcall	_RfPointSelect
 11468                           
 11469                           ;RF_Control_B1.c: 164: if (RF->Enable == 1) {
 11470  0D53  087A               	movf	_RF,w
 11471  0D54  0086               	movwf	6
 11472  0D55  0187               	clrf	7
 11473  0D56  1C01               	btfss	1,0
 11474  0D57  0008               	return
 11475                           
 11476                           ;RF_Control_B1.c: 166: RF->TransceiveGO = 1;
 11477  0D58  087A               	movf	_RF,w
 11478  0D59  0086               	movwf	6
 11479  0D5A  0187               	clrf	7
 11480  0D5B  1501               	bsf	1,2
 11481                           
 11482                           ;RF_Control_B1.c: 176: RF_Data[0] = 0x63;
 11483  0D5C  3063               	movlw	99
 11484  0D5D  0020               	movlb	0	; select bank0
 11485  0D5E  00A2               	movwf	??_setTxData
 11486  0D5F  0822               	movf	??_setTxData,w
 11487  0D60  0021               	movlb	1	; select bank1
 11488  0D61  00A0               	movwf	_RF_Data^(0+128)
 11489                           
 11490                           ;RF_Control_B1.c: 177: RF_Data[1] = 0x02;
 11491  0D62  3002               	movlw	2
 11492  0D63  0020               	movlb	0	; select bank0
 11493  0D64  00A2               	movwf	??_setTxData
 11494  0D65  0822               	movf	??_setTxData,w
 11495  0D66  0021               	movlb	1	; select bank1
 11496  0D67  00A1               	movwf	(_RF_Data^(0+128)+1)
 11497                           
 11498                           ;RF_Control_B1.c: 178: RF_Data[2] = product->Data[2];
 11499  0D68  087D               	movf	_product,w
 11500  0D69  0086               	movwf	6
 11501  0D6A  3001               	movlw	1	; select bank2/3
 11502  0D6B  0087               	movwf	7
 11503  0D6C  3001               	movlw	1	; select bank2/3
 11504  0D6D  3F42               	moviw [2]fsr1
 11505  0D6E  00A2               	movwf	(_RF_Data^(0+128)+2)
 11506                           
 11507                           ;RF_Control_B1.c: 179: RF_Data[3] = product->Data[3];
 11508  0D6F  087D               	movf	_product,w
 11509  0D70  0086               	movwf	6
 11510  0D71  3001               	movlw	1	; select bank2/3
 11511  0D72  0087               	movwf	7
 11512  0D73  3001               	movlw	1	; select bank2/3
 11513  0D74  3F43               	moviw [3]fsr1
 11514  0D75  00A3               	movwf	(_RF_Data^(0+128)+3)
 11515                           
 11516                           ;RF_Control_B1.c: 180: RF_Data[4] = product->Data[4];
 11517  0D76  087D               	movf	_product,w
 11518  0D77  0086               	movwf	6
 11519  0D78  3001               	movlw	1	; select bank2/3
 11520  0D79  0087               	movwf	7
 11521  0D7A  3001               	movlw	1	; select bank2/3
 11522  0D7B  3F44               	moviw [4]fsr1
 11523  0D7C  00A4               	movwf	(_RF_Data^(0+128)+4)
 11524                           
 11525                           ;RF_Control_B1.c: 181: RF_Data[5] = product->Data[5];
 11526  0D7D  087D               	movf	_product,w
 11527  0D7E  0086               	movwf	6
 11528  0D7F  3001               	movlw	1	; select bank2/3
 11529  0D80  0087               	movwf	7
 11530  0D81  3001               	movlw	1	; select bank2/3
 11531  0D82  3F45               	moviw [5]fsr1
 11532  0D83  00A5               	movwf	(_RF_Data^(0+128)+5)
 11533                           
 11534                           ;RF_Control_B1.c: 182: RF_Data[6] = product->Data[6];
 11535  0D84  087D               	movf	_product,w
 11536  0D85  0086               	movwf	6
 11537  0D86  3001               	movlw	1	; select bank2/3
 11538  0D87  0087               	movwf	7
 11539  0D88  3001               	movlw	1	; select bank2/3
 11540  0D89  3F46               	moviw [6]fsr1
 11541  0D8A  00A6               	movwf	(_RF_Data^(0+128)+6)
 11542                           
 11543                           ;RF_Control_B1.c: 183: RF_Data[7] = product->Data[7];
 11544  0D8B  087D               	movf	_product,w
 11545  0D8C  0086               	movwf	6
 11546  0D8D  3001               	movlw	1	; select bank2/3
 11547  0D8E  0087               	movwf	7
 11548  0D8F  3001               	movlw	1	; select bank2/3
 11549  0D90  3F47               	moviw [7]fsr1
 11550  0D91  00A7               	movwf	(_RF_Data^(0+128)+7)
 11551                           
 11552                           ;RF_Control_B1.c: 184: RF_Data[8] = product->Data[8];
 11553  0D92  087D               	movf	_product,w
 11554  0D93  0086               	movwf	6
 11555  0D94  3001               	movlw	1	; select bank2/3
 11556  0D95  0087               	movwf	7
 11557  0D96  3001               	movlw	1	; select bank2/3
 11558  0D97  3F48               	moviw [8]fsr1
 11559  0D98  00A8               	movwf	(_RF_Data^(0+128)+8)
 11560                           
 11561                           ;RF_Control_B1.c: 185: RF_Data[9] = product->Data[9];
 11562  0D99  087D               	movf	_product,w
 11563  0D9A  0086               	movwf	6
 11564  0D9B  3001               	movlw	1	; select bank2/3
 11565  0D9C  0087               	movwf	7
 11566  0D9D  3001               	movlw	1	; select bank2/3
 11567  0D9E  3F49               	moviw [9]fsr1
 11568  0D9F  00A9               	movwf	(_RF_Data^(0+128)+9)
 11569                           
 11570                           ;RF_Control_B1.c: 186: RF_Data[10] = product->Data[10];
 11571  0DA0  087D               	movf	_product,w
 11572  0DA1  0086               	movwf	6
 11573  0DA2  3001               	movlw	1	; select bank2/3
 11574  0DA3  0087               	movwf	7
 11575  0DA4  3001               	movlw	1	; select bank2/3
 11576  0DA5  3F4A               	moviw [10]fsr1
 11577  0DA6  00AA               	movwf	(_RF_Data^(0+128)+10)
 11578                           
 11579                           ;RF_Control_B1.c: 187: RF_Data[11] = product->Data[11];
 11580  0DA7  087D               	movf	_product,w
 11581  0DA8  0086               	movwf	6
 11582  0DA9  3001               	movlw	1	; select bank2/3
 11583  0DAA  0087               	movwf	7
 11584  0DAB  3001               	movlw	1	; select bank2/3
 11585  0DAC  3F4B               	moviw [11]fsr1
 11586  0DAD  00AB               	movwf	(_RF_Data^(0+128)+11)
 11587                           
 11588                           ;RF_Control_B1.c: 188: RF_Data[12] = product->Data[12];
 11589  0DAE  087D               	movf	_product,w
 11590  0DAF  0086               	movwf	6
 11591  0DB0  3001               	movlw	1	; select bank2/3
 11592  0DB1  0087               	movwf	7
 11593  0DB2  3001               	movlw	1	; select bank2/3
 11594  0DB3  3F4C               	moviw [12]fsr1
 11595  0DB4  00AC               	movwf	(_RF_Data^(0+128)+12)
 11596                           
 11597                           ;RF_Control_B1.c: 189: RF_Data[13] = product->Data[13];
 11598  0DB5  087D               	movf	_product,w
 11599  0DB6  0086               	movwf	6
 11600  0DB7  3001               	movlw	1	; select bank2/3
 11601  0DB8  0087               	movwf	7
 11602  0DB9  3001               	movlw	1	; select bank2/3
 11603  0DBA  3F4D               	moviw [13]fsr1
 11604  0DBB  00AD               	movwf	(_RF_Data^(0+128)+13)
 11605                           
 11606                           ;RF_Control_B1.c: 190: RF_Data[14] = product->Data[14];
 11607  0DBC  087D               	movf	_product,w
 11608  0DBD  0086               	movwf	6
 11609  0DBE  3001               	movlw	1	; select bank2/3
 11610  0DBF  0087               	movwf	7
 11611  0DC0  3001               	movlw	1	; select bank2/3
 11612  0DC1  3F4E               	moviw [14]fsr1
 11613  0DC2  00AE               	movwf	(_RF_Data^(0+128)+14)
 11614                           
 11615                           ;RF_Control_B1.c: 191: RF_Data[15] = product->Data[15];
 11616  0DC3  087D               	movf	_product,w
 11617  0DC4  0086               	movwf	6
 11618  0DC5  3001               	movlw	1	; select bank2/3
 11619  0DC6  0087               	movwf	7
 11620  0DC7  3001               	movlw	1	; select bank2/3
 11621  0DC8  3F4F               	moviw [15]fsr1
 11622  0DC9  00AF               	movwf	(_RF_Data^(0+128)+15)
 11623                           
 11624                           ;RF_Control_B1.c: 192: RF_Data[16] = product->Data[16];
 11625  0DCA  087D               	movf	_product,w
 11626  0DCB  0086               	movwf	6
 11627  0DCC  3001               	movlw	1	; select bank2/3
 11628  0DCD  0087               	movwf	7
 11629  0DCE  3001               	movlw	1	; select bank2/3
 11630  0DCF  3F50               	moviw [16]fsr1
 11631  0DD0  00B0               	movwf	(_RF_Data^(0+128)+16)
 11632                           
 11633                           ;RF_Control_B1.c: 193: RF_Data[17] = product->Data[17];
 11634  0DD1  087D               	movf	_product,w
 11635  0DD2  0086               	movwf	6
 11636  0DD3  3001               	movlw	1	; select bank2/3
 11637  0DD4  0087               	movwf	7
 11638  0DD5  3001               	movlw	1	; select bank2/3
 11639  0DD6  3F51               	moviw [17]fsr1
 11640  0DD7  00B1               	movwf	(_RF_Data^(0+128)+17)
 11641                           
 11642                           ;RF_Control_B1.c: 194: RF_Data[18] = product->Data[18];
 11643  0DD8  087D               	movf	_product,w
 11644  0DD9  0086               	movwf	6
 11645  0DDA  3001               	movlw	1	; select bank2/3
 11646  0DDB  0087               	movwf	7
 11647  0DDC  3001               	movlw	1	; select bank2/3
 11648  0DDD  3F52               	moviw [18]fsr1
 11649  0DDE  00B2               	movwf	(_RF_Data^(0+128)+18)
 11650                           
 11651                           ;RF_Control_B1.c: 195: RF_Data[19] = product->Data[19];
 11652  0DDF  087D               	movf	_product,w
 11653  0DE0  0086               	movwf	6
 11654  0DE1  3001               	movlw	1	; select bank2/3
 11655  0DE2  0087               	movwf	7
 11656  0DE3  3001               	movlw	1	; select bank2/3
 11657  0DE4  3F53               	moviw [19]fsr1
 11658  0DE5  00B3               	movwf	(_RF_Data^(0+128)+19)
 11659                           
 11660                           ;RF_Control_B1.c: 196: RF_Data[20] = 211;
 11661  0DE6  30D3               	movlw	211
 11662  0DE7  0020               	movlb	0	; select bank0
 11663  0DE8  00A2               	movwf	??_setTxData
 11664  0DE9  0822               	movf	??_setTxData,w
 11665  0DEA  0021               	movlb	1	; select bank1
 11666  0DEB  00B4               	movwf	(_RF_Data^(0+128)+20)
 11667  0DEC  0008               	return
 11668  0DED                     __end_of_setTxData:	
 11669                           
 11670                           	psect	text67
 11671  1E27                     __ptext67:	
 11672 ;; *************** function _RfPointSelect *****************
 11673 ;; Defined at:
 11674 ;;		line 7 in file "../src/RF_Control_B1.c"
 11675 ;; Parameters:    Size  Location     Type
 11676 ;;  rf              1    wreg     unsigned char 
 11677 ;; Auto vars:     Size  Location     Type
 11678 ;;  rf              1    1[BANK0 ] unsigned char 
 11679 ;; Return value:  Size  Location     Type
 11680 ;;		None               void
 11681 ;; Registers used:
 11682 ;;		wreg
 11683 ;; Tracked objects:
 11684 ;;		On entry : 0/0
 11685 ;;		On exit  : 0/0
 11686 ;;		Unchanged: 0/0
 11687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;Total ram usage:        2 bytes
 11693 ;; Hardware stack levels used:    1
 11694 ;; Hardware stack levels required when called:    5
 11695 ;; This function calls:
 11696 ;;		Nothing
 11697 ;; This function is called by:
 11698 ;;		_setRF_Learn
 11699 ;;		_setRF_Main
 11700 ;;		_setTxData
 11701 ;;		_setRF_Enable
 11702 ;;		_RF_RxDisable
 11703 ;;		_getRxData
 11704 ;;		_setLog_Code
 11705 ;;		_setControl_Lights_Table
 11706 ;;		_setRF_RxStatus
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           
 11711                           ;psect for function _RfPointSelect
 11712  1E27                     _RfPointSelect:	
 11713                           
 11714                           ;incstack = 0
 11715                           ; Regs used in _RfPointSelect: [wreg]
 11716                           ;RfPointSelect@rf stored from wreg
 11717  1E27  0020               	movlb	0	; select bank0
 11718  1E28  00A1               	movwf	RfPointSelect@rf
 11719                           
 11720                           ;RF_Control_B1.c: 9: if (rf == 1) {
 11721  1E29  0821               	movf	RfPointSelect@rf,w
 11722  1E2A  3A01               	xorlw	1
 11723  1E2B  1D03               	skipz
 11724  1E2C  2E31               	goto	l5630
 11725                           
 11726                           ;RF_Control_B1.c: 10: RF = &RF1;
 11727  1E2D  30CF               	movlw	_RF1& (0+255)
 11728  1E2E  00A0               	movwf	??_RfPointSelect
 11729  1E2F  0820               	movf	??_RfPointSelect,w
 11730  1E30  00FA               	movwf	_RF
 11731  1E31                     l5630:	
 11732                           
 11733                           ;RF_Control_B1.c: 11: }
 11734                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 11735  1E31  1A0B               	btfsc	11,4	;volatile
 11736  1E32  0008               	return
 11737                           
 11738                           ;RF_Control_B1.c: 13: INTE = 1;
 11739  1E33  160B               	bsf	11,4	;volatile
 11740  1E34  0008               	return
 11741  1E35                     __end_of_RfPointSelect:	
 11742                           
 11743                           	psect	text68
 11744  08E1                     __ptext68:	
 11745 ;; *************** function _setRF_DimmerLights *****************
 11746 ;; Defined at:
 11747 ;;		line 423 in file "../src/RF_Control_B1.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;  lights          1    wreg     unsigned char 
 11750 ;;  on              1   61[BANK0 ] unsigned char 
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;  lights          1   65[BANK0 ] unsigned char 
 11753 ;;  status          1   64[BANK0 ] unsigned char 
 11754 ;; Return value:  Size  Location     Type
 11755 ;;		None               void
 11756 ;; Registers used:
 11757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11763 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;Total ram usage:        5 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    8
 11770 ;; This function calls:
 11771 ;;		_setPercentValue
 11772 ;; This function is called by:
 11773 ;;		_setDimmerLights_Adj
 11774 ;;		_setRFSW_Control
 11775 ;;		_Sw_DimmerOnFunc
 11776 ;;		_Sw_DimmerOffFunc
 11777 ;; This function uses a non-reentrant model
 11778 ;;
 11779                           
 11780                           
 11781                           ;psect for function _setRF_DimmerLights
 11782  08E1                     _setRF_DimmerLights:	
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11786                           ;setRF_DimmerLights@lights stored from wreg
 11787  08E1  0020               	movlb	0	; select bank0
 11788  08E2  00E1               	movwf	setRF_DimmerLights@lights
 11789                           
 11790                           ;RF_Control_B1.c: 424: char status;
 11791                           ;RF_Control_B1.c: 425: status = 1;
 11792  08E3  01E0               	clrf	setRF_DimmerLights@status
 11793  08E4  0AE0               	incf	setRF_DimmerLights@status,f
 11794                           
 11795                           ;RF_Control_B1.c: 426: status <<= (lights - 1);
 11796  08E5  0861               	movf	setRF_DimmerLights@lights,w
 11797  08E6  3EFF               	addlw	-1
 11798  08E7  0A89               	incf	9,f
 11799  08E8  28EB               	goto	u4650
 11800  08E9                     u4655:	
 11801  08E9  1003               	clrc
 11802  08EA  0DE0               	rlf	setRF_DimmerLights@status,f
 11803  08EB                     u4650:	
 11804  08EB  3EFF               	addlw	-1
 11805  08EC  1D03               	skipz
 11806  08ED  28E9               	goto	u4655
 11807                           
 11808                           ;RF_Control_B1.c: 427: product->Data[11]=lights;
 11809  08EE  0861               	movf	setRF_DimmerLights@lights,w
 11810  08EF  00DE               	movwf	??_setRF_DimmerLights
 11811  08F0  087D               	movf	_product,w
 11812  08F1  3E0B               	addlw	11
 11813  08F2  0086               	movwf	6
 11814  08F3  3001               	movlw	1	; select bank2/3
 11815  08F4  0087               	movwf	7
 11816  08F5  085E               	movf	??_setRF_DimmerLights,w
 11817  08F6  0081               	movwf	1
 11818                           
 11819                           ;RF_Control_B1.c: 430: product->Data[(20 + lights)]=setPercentValue(((char)((100-95)*0.8
      +                          )));
 11820  08F7  3004               	movlw	4
 11821  08F8  3195  2525  3188   	fcall	_setPercentValue
 11822  08FB  0020               	movlb	0	; select bank0
 11823  08FC  00DE               	movwf	??_setRF_DimmerLights
 11824  08FD  0861               	movf	setRF_DimmerLights@lights,w
 11825  08FE  3E14               	addlw	20
 11826  08FF  077D               	addwf	_product,w
 11827  0900  00DF               	movwf	??_setRF_DimmerLights+1
 11828  0901  085F               	movf	??_setRF_DimmerLights+1,w
 11829  0902  0086               	movwf	6
 11830  0903  3001               	movlw	1	; select bank2/3
 11831  0904  0087               	movwf	7
 11832  0905  085E               	movf	??_setRF_DimmerLights,w
 11833  0906  0081               	movwf	1
 11834                           
 11835                           ;RF_Control_B1.c: 433: product->Data[9]=product->Data[20 + lights];
 11836  0907  0861               	movf	setRF_DimmerLights@lights,w
 11837  0908  3E14               	addlw	20
 11838  0909  077D               	addwf	_product,w
 11839  090A  00DE               	movwf	??_setRF_DimmerLights
 11840  090B  085E               	movf	??_setRF_DimmerLights,w
 11841  090C  0086               	movwf	6
 11842  090D  3001               	movlw	1	; select bank2/3
 11843  090E  0087               	movwf	7
 11844  090F  0801               	movf	1,w
 11845  0910  00DF               	movwf	??_setRF_DimmerLights+1
 11846  0911  087D               	movf	_product,w
 11847  0912  3E09               	addlw	9
 11848  0913  0086               	movwf	6
 11849  0914  3001               	movlw	1	; select bank2/3
 11850  0915  0087               	movwf	7
 11851  0916  085F               	movf	??_setRF_DimmerLights+1,w
 11852  0917  0081               	movwf	1
 11853                           
 11854                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + lights];
 11855  0918  0861               	movf	setRF_DimmerLights@lights,w
 11856  0919  3E1A               	addlw	26
 11857  091A  077D               	addwf	_product,w
 11858  091B  00DE               	movwf	??_setRF_DimmerLights
 11859  091C  085E               	movf	??_setRF_DimmerLights,w
 11860  091D  0086               	movwf	6
 11861  091E  3001               	movlw	1	; select bank2/3
 11862  091F  0087               	movwf	7
 11863  0920  0801               	movf	1,w
 11864  0921  00DF               	movwf	??_setRF_DimmerLights+1
 11865  0922  087D               	movf	_product,w
 11866  0923  3E11               	addlw	17
 11867  0924  0086               	movwf	6
 11868  0925  3001               	movlw	1	; select bank2/3
 11869  0926  0087               	movwf	7
 11870  0927  085F               	movf	??_setRF_DimmerLights+1,w
 11871  0928  0081               	movwf	1
 11872                           
 11873                           ;RF_Control_B1.c: 435: if (on == 1) {
 11874  0929  085D               	movf	setRF_DimmerLights@on,w
 11875  092A  3A01               	xorlw	1
 11876  092B  1D03               	skipz
 11877  092C  293D               	goto	l5798
 11878                           
 11879                           ;RF_Control_B1.c: 436: product->Data[15]=(product->Data[15] | status);
 11880  092D  087D               	movf	_product,w
 11881  092E  3E0F               	addlw	15
 11882  092F  0086               	movwf	6
 11883  0930  3001               	movlw	1	; select bank2/3
 11884  0931  0087               	movwf	7
 11885  0932  0801               	movf	1,w
 11886  0933  0460               	iorwf	setRF_DimmerLights@status,w
 11887  0934  00DE               	movwf	??_setRF_DimmerLights
 11888  0935  087D               	movf	_product,w
 11889  0936  3E0F               	addlw	15
 11890  0937  0086               	movwf	6
 11891  0938  3001               	movlw	1	; select bank2/3
 11892  0939  0087               	movwf	7
 11893  093A  085E               	movf	??_setRF_DimmerLights,w
 11894  093B  0081               	movwf	1
 11895                           
 11896                           ;RF_Control_B1.c: 437: } else {
 11897  093C  0008               	return
 11898  093D                     l5798:	
 11899                           
 11900                           ;RF_Control_B1.c: 438: product->Data[15]=(product->Data[15]&(~status));
 11901  093D  087D               	movf	_product,w
 11902  093E  3E0F               	addlw	15
 11903  093F  0086               	movwf	6
 11904  0940  3001               	movlw	1	; select bank2/3
 11905  0941  0087               	movwf	7
 11906  0942  0960               	comf	setRF_DimmerLights@status,w
 11907  0943  0501               	andwf	1,w
 11908  0944  00DE               	movwf	??_setRF_DimmerLights
 11909  0945  087D               	movf	_product,w
 11910  0946  3E0F               	addlw	15
 11911  0947  0086               	movwf	6
 11912  0948  3001               	movlw	1	; select bank2/3
 11913  0949  0087               	movwf	7
 11914  094A  085E               	movf	??_setRF_DimmerLights,w
 11915  094B  0081               	movwf	1
 11916  094C  0008               	return
 11917  094D                     __end_of_setRF_DimmerLights:	
 11918                           
 11919                           	psect	text69
 11920  1525                     __ptext69:	
 11921 ;; *************** function _setPercentValue *****************
 11922 ;; Defined at:
 11923 ;;		line 768 in file "../src/Dimmer_B1.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  value           1    wreg     unsigned char 
 11926 ;; Auto vars:     Size  Location     Type
 11927 ;;  value           1   57[BANK0 ] unsigned char 
 11928 ;;  i               3   58[BANK0 ] float 
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      unsigned char 
 11931 ;; Registers used:
 11932 ;;		wreg, status,2, status,0, pclath, cstack
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;Total ram usage:        4 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    7
 11945 ;; This function calls:
 11946 ;;		___awtoft
 11947 ;;		___ftdiv
 11948 ;;		___fttol
 11949 ;; This function is called by:
 11950 ;;		_Flash_Memory_Initialization
 11951 ;;		_setRF_DimmerLights
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _setPercentValue
 11957  1525                     _setPercentValue:	
 11958                           
 11959                           ;incstack = 0
 11960                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 11961                           ;setPercentValue@value stored from wreg
 11962  1525  0020               	movlb	0	; select bank0
 11963  1526  00D9               	movwf	setPercentValue@value
 11964                           
 11965                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-95)*0.8));
 11966  1527  3000               	movlw	0
 11967  1528  00DA               	movwf	setPercentValue@i
 11968  1529  3060               	movlw	96
 11969  152A  00DB               	movwf	setPercentValue@i+1
 11970  152B  3042               	movlw	66
 11971  152C  00DC               	movwf	setPercentValue@i+2
 11972                           
 11973                           ;Dimmer_B1.c: 771: i /= 100;
 11974  152D  3000               	movlw	0
 11975  152E  00AE               	movwf	___ftdiv@f2
 11976  152F  30C8               	movlw	200
 11977  1530  00AF               	movwf	___ftdiv@f2+1
 11978  1531  3042               	movlw	66
 11979  1532  00B0               	movwf	___ftdiv@f2+2
 11980  1533  085A               	movf	setPercentValue@i,w
 11981  1534  00B1               	movwf	___ftdiv@f1
 11982  1535  085B               	movf	setPercentValue@i+1,w
 11983  1536  00B2               	movwf	___ftdiv@f1+1
 11984  1537  085C               	movf	setPercentValue@i+2,w
 11985  1538  00B3               	movwf	___ftdiv@f1+2
 11986  1539  318D  25ED  3195   	fcall	___ftdiv
 11987  153C  0020               	movlb	0	; select bank0
 11988  153D  082E               	movf	?___ftdiv,w
 11989  153E  00DA               	movwf	setPercentValue@i
 11990  153F  082F               	movf	?___ftdiv+1,w
 11991  1540  00DB               	movwf	setPercentValue@i+1
 11992  1541  0830               	movf	?___ftdiv+2,w
 11993  1542  00DC               	movwf	setPercentValue@i+2
 11994                           
 11995                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-95)*0.8))) / i));
 11996  1543  0859               	movf	setPercentValue@value,w
 11997  1544  3EFC               	addlw	252
 11998  1545  00A8               	movwf	___awtoft@c
 11999  1546  30FF               	movlw	255
 12000  1547  1803               	skipnc
 12001  1548  3000               	movlw	0
 12002  1549  00A9               	movwf	___awtoft@c+1
 12003  154A  3192  2249  3195   	fcall	___awtoft
 12004  154D  0020               	movlb	0	; select bank0
 12005  154E  0828               	movf	?___awtoft,w
 12006  154F  00B1               	movwf	___ftdiv@f1
 12007  1550  0829               	movf	?___awtoft+1,w
 12008  1551  00B2               	movwf	___ftdiv@f1+1
 12009  1552  082A               	movf	?___awtoft+2,w
 12010  1553  00B3               	movwf	___ftdiv@f1+2
 12011  1554  085A               	movf	setPercentValue@i,w
 12012  1555  00AE               	movwf	___ftdiv@f2
 12013  1556  085B               	movf	setPercentValue@i+1,w
 12014  1557  00AF               	movwf	___ftdiv@f2+1
 12015  1558  085C               	movf	setPercentValue@i+2,w
 12016  1559  00B0               	movwf	___ftdiv@f2+2
 12017  155A  318D  25ED  3195   	fcall	___ftdiv
 12018  155D  0020               	movlb	0	; select bank0
 12019  155E  082E               	movf	?___ftdiv,w
 12020  155F  00CB               	movwf	___fttol@f1
 12021  1560  082F               	movf	?___ftdiv+1,w
 12022  1561  00CC               	movwf	___fttol@f1+1
 12023  1562  0830               	movf	?___ftdiv+2,w
 12024  1563  00CD               	movwf	___fttol@f1+2
 12025  1564  318B  231F         	fcall	___fttol
 12026  1566  0020               	movlb	0	; select bank0
 12027  1567  034B               	decf	?___fttol,w
 12028  1568  3AFF               	xorlw	255
 12029  1569  3E64               	addlw	100
 12030  156A  0008               	return
 12031  156B                     __end_of_setPercentValue:	
 12032                           
 12033                           	psect	text70
 12034  0B1F                     __ptext70:	
 12035 ;; *************** function ___fttol *****************
 12036 ;; Defined at:
 12037 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;  f1              3   43[BANK0 ] float 
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;  lval            4   52[BANK0 ] unsigned long 
 12042 ;;  exp1            1   56[BANK0 ] unsigned char 
 12043 ;;  sign1           1   51[BANK0 ] unsigned char 
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  4   43[BANK0 ] long 
 12046 ;; Registers used:
 12047 ;;		wreg, status,2, status,0
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:       14 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    5
 12060 ;; This function calls:
 12061 ;;		Nothing
 12062 ;; This function is called by:
 12063 ;;		_getPercentValue
 12064 ;;		_setPercentValue
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           
 12069                           ;psect for function ___fttol
 12070  0B1F                     ___fttol:	
 12071                           
 12072                           ;incstack = 0
 12073                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12074  0B1F  0020               	movlb	0	; select bank0
 12075  0B20  084B               	movf	___fttol@f1,w
 12076  0B21  00CF               	movwf	??___fttol
 12077  0B22  084C               	movf	___fttol@f1+1,w
 12078  0B23  00D0               	movwf	??___fttol+1
 12079  0B24  084D               	movf	___fttol@f1+2,w
 12080  0B25  00D1               	movwf	??___fttol+2
 12081  0B26  1003               	clrc
 12082  0B27  0D50               	rlf	??___fttol+1,w
 12083  0B28  0D51               	rlf	??___fttol+2,w
 12084  0B29  00D2               	movwf	??___fttol+3
 12085  0B2A  0852               	movf	??___fttol+3,w
 12086  0B2B  00D8               	movwf	___fttol@exp1
 12087  0B2C  08D8               	movf	___fttol@exp1,f
 12088  0B2D  1D03               	skipz
 12089  0B2E  2B38               	goto	l5540
 12090  0B2F  3000               	movlw	0
 12091  0B30  00CE               	movwf	?___fttol+3
 12092  0B31  3000               	movlw	0
 12093  0B32  00CD               	movwf	?___fttol+2
 12094  0B33  3000               	movlw	0
 12095  0B34  00CC               	movwf	?___fttol+1
 12096  0B35  3000               	movlw	0
 12097  0B36  00CB               	movwf	?___fttol
 12098  0B37  0008               	return
 12099  0B38                     l5540:	
 12100  0B38  084B               	movf	___fttol@f1,w
 12101  0B39  00CF               	movwf	??___fttol
 12102  0B3A  084C               	movf	___fttol@f1+1,w
 12103  0B3B  00D0               	movwf	??___fttol+1
 12104  0B3C  084D               	movf	___fttol@f1+2,w
 12105  0B3D  00D1               	movwf	??___fttol+2
 12106  0B3E  3017               	movlw	23
 12107  0B3F                     u4135:	
 12108  0B3F  36D1               	lsrf	??___fttol+2,f
 12109  0B40  0CD0               	rrf	??___fttol+1,f
 12110  0B41  0CCF               	rrf	??___fttol,f
 12111  0B42  0B89               	decfsz	9,f
 12112  0B43  2B3F               	goto	u4135
 12113  0B44  084F               	movf	??___fttol,w
 12114  0B45  00D2               	movwf	??___fttol+3
 12115  0B46  0852               	movf	??___fttol+3,w
 12116  0B47  00D3               	movwf	___fttol@sign1
 12117  0B48  17CC               	bsf	___fttol@f1+1,7
 12118  0B49  30FF               	movlw	255
 12119  0B4A  05CB               	andwf	___fttol@f1,f
 12120  0B4B  30FF               	movlw	255
 12121  0B4C  05CC               	andwf	___fttol@f1+1,f
 12122  0B4D  3000               	movlw	0
 12123  0B4E  05CD               	andwf	___fttol@f1+2,f
 12124  0B4F  084B               	movf	___fttol@f1,w
 12125  0B50  00D4               	movwf	___fttol@lval
 12126  0B51  084C               	movf	___fttol@f1+1,w
 12127  0B52  00D5               	movwf	___fttol@lval+1
 12128  0B53  084D               	movf	___fttol@f1+2,w
 12129  0B54  00D6               	movwf	___fttol@lval+2
 12130  0B55  01D7               	clrf	___fttol@lval+3
 12131  0B56  308E               	movlw	142
 12132  0B57  02D8               	subwf	___fttol@exp1,f
 12133  0B58  1FD8               	btfss	___fttol@exp1,7
 12134  0B59  2B76               	goto	l5560
 12135  0B5A  0858               	movf	___fttol@exp1,w
 12136  0B5B  3A80               	xorlw	128
 12137  0B5C  3E8F               	addlw	143
 12138  0B5D  1803               	skipnc
 12139  0B5E  2B68               	goto	l5558
 12140  0B5F  3000               	movlw	0
 12141  0B60  00CE               	movwf	?___fttol+3
 12142  0B61  3000               	movlw	0
 12143  0B62  00CD               	movwf	?___fttol+2
 12144  0B63  3000               	movlw	0
 12145  0B64  00CC               	movwf	?___fttol+1
 12146  0B65  3000               	movlw	0
 12147  0B66  00CB               	movwf	?___fttol
 12148  0B67  0008               	return
 12149  0B68                     l5558:	
 12150  0B68  3001               	movlw	1
 12151  0B69                     u4165:	
 12152  0B69  36D7               	lsrf	___fttol@lval+3,f
 12153  0B6A  0CD6               	rrf	___fttol@lval+2,f
 12154  0B6B  0CD5               	rrf	___fttol@lval+1,f
 12155  0B6C  0CD4               	rrf	___fttol@lval,f
 12156  0B6D  0B89               	decfsz	9,f
 12157  0B6E  2B69               	goto	u4165
 12158  0B6F  3001               	movlw	1
 12159  0B70  00CF               	movwf	??___fttol
 12160  0B71  084F               	movf	??___fttol,w
 12161  0B72  07D8               	addwf	___fttol@exp1,f
 12162  0B73  1903               	btfsc	3,2
 12163  0B74  2B8F               	goto	l5570
 12164  0B75  2B68               	goto	l5558
 12165  0B76                     l5560:	
 12166  0B76  3018               	movlw	24
 12167  0B77  0258               	subwf	___fttol@exp1,w
 12168  0B78  1C03               	skipc
 12169  0B79  2B8C               	goto	l5568
 12170  0B7A  3000               	movlw	0
 12171  0B7B  00CE               	movwf	?___fttol+3
 12172  0B7C  3000               	movlw	0
 12173  0B7D  00CD               	movwf	?___fttol+2
 12174  0B7E  3000               	movlw	0
 12175  0B7F  00CC               	movwf	?___fttol+1
 12176  0B80  3000               	movlw	0
 12177  0B81  00CB               	movwf	?___fttol
 12178  0B82  0008               	return
 12179  0B83                     l5566:	
 12180  0B83  3001               	movlw	1
 12181  0B84                     u4195:	
 12182  0B84  35D4               	lslf	___fttol@lval,f
 12183  0B85  0DD5               	rlf	___fttol@lval+1,f
 12184  0B86  0DD6               	rlf	___fttol@lval+2,f
 12185  0B87  0DD7               	rlf	___fttol@lval+3,f
 12186  0B88  0B89               	decfsz	9,f
 12187  0B89  2B84               	goto	u4195
 12188  0B8A  3001               	movlw	1
 12189  0B8B  02D8               	subwf	___fttol@exp1,f
 12190  0B8C                     l5568:	
 12191  0B8C  08D8               	movf	___fttol@exp1,f
 12192  0B8D  1D03               	skipz
 12193  0B8E  2B83               	goto	l5566
 12194  0B8F                     l5570:	
 12195  0B8F  0853               	movf	___fttol@sign1,w
 12196  0B90  1903               	btfsc	3,2
 12197  0B91  2B9D               	goto	l5574
 12198  0B92  09D4               	comf	___fttol@lval,f
 12199  0B93  09D5               	comf	___fttol@lval+1,f
 12200  0B94  09D6               	comf	___fttol@lval+2,f
 12201  0B95  09D7               	comf	___fttol@lval+3,f
 12202  0B96  0AD4               	incf	___fttol@lval,f
 12203  0B97  1903               	skipnz
 12204  0B98  0AD5               	incf	___fttol@lval+1,f
 12205  0B99  1903               	skipnz
 12206  0B9A  0AD6               	incf	___fttol@lval+2,f
 12207  0B9B  1903               	skipnz
 12208  0B9C  0AD7               	incf	___fttol@lval+3,f
 12209  0B9D                     l5574:	
 12210  0B9D  0857               	movf	___fttol@lval+3,w
 12211  0B9E  00CE               	movwf	?___fttol+3
 12212  0B9F  0856               	movf	___fttol@lval+2,w
 12213  0BA0  00CD               	movwf	?___fttol+2
 12214  0BA1  0855               	movf	___fttol@lval+1,w
 12215  0BA2  00CC               	movwf	?___fttol+1
 12216  0BA3  0854               	movf	___fttol@lval,w
 12217  0BA4  00CB               	movwf	?___fttol
 12218  0BA5  0008               	return
 12219  0BA6                     __end_of___fttol:	
 12220                           
 12221                           	psect	text71
 12222  0DED                     __ptext71:	
 12223 ;; *************** function ___ftdiv *****************
 12224 ;; Defined at:
 12225 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  f2              3   14[BANK0 ] float 
 12228 ;;  f1              3   17[BANK0 ] float 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  f3              3   25[BANK0 ] float 
 12231 ;;  sign            1   29[BANK0 ] unsigned char 
 12232 ;;  exp             1   28[BANK0 ] unsigned char 
 12233 ;;  cntr            1   24[BANK0 ] unsigned char 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  3   14[BANK0 ] float 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2, status,0, pclath, cstack
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12243 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;Total ram usage:       16 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    6
 12250 ;; This function calls:
 12251 ;;		___ftpack
 12252 ;; This function is called by:
 12253 ;;		_getPercentValue
 12254 ;;		_setPercentValue
 12255 ;; This function uses a non-reentrant model
 12256 ;;
 12257                           
 12258                           
 12259                           ;psect for function ___ftdiv
 12260  0DED                     ___ftdiv:	
 12261                           
 12262                           ;incstack = 0
 12263                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12264  0DED  0020               	movlb	0	; select bank0
 12265  0DEE  0831               	movf	___ftdiv@f1,w
 12266  0DEF  00B4               	movwf	??___ftdiv
 12267  0DF0  0832               	movf	___ftdiv@f1+1,w
 12268  0DF1  00B5               	movwf	??___ftdiv+1
 12269  0DF2  0833               	movf	___ftdiv@f1+2,w
 12270  0DF3  00B6               	movwf	??___ftdiv+2
 12271  0DF4  1003               	clrc
 12272  0DF5  0D35               	rlf	??___ftdiv+1,w
 12273  0DF6  0D36               	rlf	??___ftdiv+2,w
 12274  0DF7  00B7               	movwf	??___ftdiv+3
 12275  0DF8  0837               	movf	??___ftdiv+3,w
 12276  0DF9  00BC               	movwf	___ftdiv@exp
 12277  0DFA  08BC               	movf	___ftdiv@exp,f
 12278  0DFB  1D03               	skipz
 12279  0DFC  2E04               	goto	l5448
 12280  0DFD  3000               	movlw	0
 12281  0DFE  00AE               	movwf	?___ftdiv
 12282  0DFF  3000               	movlw	0
 12283  0E00  00AF               	movwf	?___ftdiv+1
 12284  0E01  3000               	movlw	0
 12285  0E02  00B0               	movwf	?___ftdiv+2
 12286  0E03  0008               	return
 12287  0E04                     l5448:	
 12288  0E04  082E               	movf	___ftdiv@f2,w
 12289  0E05  00B4               	movwf	??___ftdiv
 12290  0E06  082F               	movf	___ftdiv@f2+1,w
 12291  0E07  00B5               	movwf	??___ftdiv+1
 12292  0E08  0830               	movf	___ftdiv@f2+2,w
 12293  0E09  00B6               	movwf	??___ftdiv+2
 12294  0E0A  1003               	clrc
 12295  0E0B  0D35               	rlf	??___ftdiv+1,w
 12296  0E0C  0D36               	rlf	??___ftdiv+2,w
 12297  0E0D  00B7               	movwf	??___ftdiv+3
 12298  0E0E  0837               	movf	??___ftdiv+3,w
 12299  0E0F  00BD               	movwf	___ftdiv@sign
 12300  0E10  08BD               	movf	___ftdiv@sign,f
 12301  0E11  1D03               	skipz
 12302  0E12  2E1A               	goto	l5454
 12303  0E13  3000               	movlw	0
 12304  0E14  00AE               	movwf	?___ftdiv
 12305  0E15  3000               	movlw	0
 12306  0E16  00AF               	movwf	?___ftdiv+1
 12307  0E17  3000               	movlw	0
 12308  0E18  00B0               	movwf	?___ftdiv+2
 12309  0E19  0008               	return
 12310  0E1A                     l5454:	
 12311  0E1A  3000               	movlw	0
 12312  0E1B  00B9               	movwf	___ftdiv@f3
 12313  0E1C  3000               	movlw	0
 12314  0E1D  00BA               	movwf	___ftdiv@f3+1
 12315  0E1E  3000               	movlw	0
 12316  0E1F  00BB               	movwf	___ftdiv@f3+2
 12317  0E20  3089               	movlw	137
 12318  0E21  073D               	addwf	___ftdiv@sign,w
 12319  0E22  00B4               	movwf	??___ftdiv
 12320  0E23  0834               	movf	??___ftdiv,w
 12321  0E24  02BC               	subwf	___ftdiv@exp,f
 12322  0E25  0831               	movf	___ftdiv@f1,w
 12323  0E26  00B4               	movwf	??___ftdiv
 12324  0E27  0832               	movf	___ftdiv@f1+1,w
 12325  0E28  00B5               	movwf	??___ftdiv+1
 12326  0E29  0833               	movf	___ftdiv@f1+2,w
 12327  0E2A  00B6               	movwf	??___ftdiv+2
 12328  0E2B  3010               	movlw	16
 12329  0E2C                     u3945:	
 12330  0E2C  36B6               	lsrf	??___ftdiv+2,f
 12331  0E2D  0CB5               	rrf	??___ftdiv+1,f
 12332  0E2E  0CB4               	rrf	??___ftdiv,f
 12333  0E2F  0B89               	decfsz	9,f
 12334  0E30  2E2C               	goto	u3945
 12335  0E31  0834               	movf	??___ftdiv,w
 12336  0E32  00B7               	movwf	??___ftdiv+3
 12337  0E33  0837               	movf	??___ftdiv+3,w
 12338  0E34  00BD               	movwf	___ftdiv@sign
 12339  0E35  082E               	movf	___ftdiv@f2,w
 12340  0E36  00B4               	movwf	??___ftdiv
 12341  0E37  082F               	movf	___ftdiv@f2+1,w
 12342  0E38  00B5               	movwf	??___ftdiv+1
 12343  0E39  0830               	movf	___ftdiv@f2+2,w
 12344  0E3A  00B6               	movwf	??___ftdiv+2
 12345  0E3B  3010               	movlw	16
 12346  0E3C                     u3955:	
 12347  0E3C  36B6               	lsrf	??___ftdiv+2,f
 12348  0E3D  0CB5               	rrf	??___ftdiv+1,f
 12349  0E3E  0CB4               	rrf	??___ftdiv,f
 12350  0E3F  0B89               	decfsz	9,f
 12351  0E40  2E3C               	goto	u3955
 12352  0E41  0834               	movf	??___ftdiv,w
 12353  0E42  00B7               	movwf	??___ftdiv+3
 12354  0E43  0837               	movf	??___ftdiv+3,w
 12355  0E44  06BD               	xorwf	___ftdiv@sign,f
 12356  0E45  3080               	movlw	128
 12357  0E46  00B4               	movwf	??___ftdiv
 12358  0E47  0834               	movf	??___ftdiv,w
 12359  0E48  05BD               	andwf	___ftdiv@sign,f
 12360  0E49  17B2               	bsf	___ftdiv@f1+1,7
 12361  0E4A  30FF               	movlw	255
 12362  0E4B  05B1               	andwf	___ftdiv@f1,f
 12363  0E4C  30FF               	movlw	255
 12364  0E4D  05B2               	andwf	___ftdiv@f1+1,f
 12365  0E4E  3000               	movlw	0
 12366  0E4F  05B3               	andwf	___ftdiv@f1+2,f
 12367  0E50  17AF               	bsf	___ftdiv@f2+1,7
 12368  0E51  30FF               	movlw	255
 12369  0E52  05AE               	andwf	___ftdiv@f2,f
 12370  0E53  30FF               	movlw	255
 12371  0E54  05AF               	andwf	___ftdiv@f2+1,f
 12372  0E55  3000               	movlw	0
 12373  0E56  05B0               	andwf	___ftdiv@f2+2,f
 12374  0E57  3018               	movlw	24
 12375  0E58  00B4               	movwf	??___ftdiv
 12376  0E59  0834               	movf	??___ftdiv,w
 12377  0E5A  00B8               	movwf	___ftdiv@cntr
 12378  0E5B                     l5468:	
 12379  0E5B  3001               	movlw	1
 12380  0E5C                     u3965:	
 12381  0E5C  35B9               	lslf	___ftdiv@f3,f
 12382  0E5D  0DBA               	rlf	___ftdiv@f3+1,f
 12383  0E5E  0DBB               	rlf	___ftdiv@f3+2,f
 12384  0E5F  0B89               	decfsz	9,f
 12385  0E60  2E5C               	goto	u3965
 12386  0E61  0830               	movf	___ftdiv@f2+2,w
 12387  0E62  0233               	subwf	___ftdiv@f1+2,w
 12388  0E63  1D03               	skipz
 12389  0E64  2E6B               	goto	u3975
 12390  0E65  082F               	movf	___ftdiv@f2+1,w
 12391  0E66  0232               	subwf	___ftdiv@f1+1,w
 12392  0E67  1D03               	skipz
 12393  0E68  2E6B               	goto	u3975
 12394  0E69  082E               	movf	___ftdiv@f2,w
 12395  0E6A  0231               	subwf	___ftdiv@f1,w
 12396  0E6B                     u3975:	
 12397  0E6B  1C03               	skipc
 12398  0E6C  2E74               	goto	l5476
 12399  0E6D  082E               	movf	___ftdiv@f2,w
 12400  0E6E  02B1               	subwf	___ftdiv@f1,f
 12401  0E6F  082F               	movf	___ftdiv@f2+1,w
 12402  0E70  3BB2               	subwfb	___ftdiv@f1+1,f
 12403  0E71  0830               	movf	___ftdiv@f2+2,w
 12404  0E72  3BB3               	subwfb	___ftdiv@f1+2,f
 12405  0E73  1439               	bsf	___ftdiv@f3,0
 12406  0E74                     l5476:	
 12407  0E74  3001               	movlw	1
 12408  0E75                     u3985:	
 12409  0E75  35B1               	lslf	___ftdiv@f1,f
 12410  0E76  0DB2               	rlf	___ftdiv@f1+1,f
 12411  0E77  0DB3               	rlf	___ftdiv@f1+2,f
 12412  0E78  0B89               	decfsz	9,f
 12413  0E79  2E75               	goto	u3985
 12414  0E7A  3001               	movlw	1
 12415  0E7B  02B8               	subwf	___ftdiv@cntr,f
 12416  0E7C  1D03               	btfss	3,2
 12417  0E7D  2E5B               	goto	l5468
 12418  0E7E  0839               	movf	___ftdiv@f3,w
 12419  0E7F  00A0               	movwf	___ftpack@arg
 12420  0E80  083A               	movf	___ftdiv@f3+1,w
 12421  0E81  00A1               	movwf	___ftpack@arg+1
 12422  0E82  083B               	movf	___ftdiv@f3+2,w
 12423  0E83  00A2               	movwf	___ftpack@arg+2
 12424  0E84  083C               	movf	___ftdiv@exp,w
 12425  0E85  00B4               	movwf	??___ftdiv
 12426  0E86  0834               	movf	??___ftdiv,w
 12427  0E87  00A3               	movwf	___ftpack@exp
 12428  0E88  083D               	movf	___ftdiv@sign,w
 12429  0E89  00B5               	movwf	??___ftdiv+1
 12430  0E8A  0835               	movf	??___ftdiv+1,w
 12431  0E8B  00A4               	movwf	___ftpack@sign
 12432  0E8C  3197  279F         	fcall	___ftpack
 12433  0E8E  0020               	movlb	0	; select bank0
 12434  0E8F  0820               	movf	?___ftpack,w
 12435  0E90  00AE               	movwf	?___ftdiv
 12436  0E91  0821               	movf	?___ftpack+1,w
 12437  0E92  00AF               	movwf	?___ftdiv+1
 12438  0E93  0822               	movf	?___ftpack+2,w
 12439  0E94  00B0               	movwf	?___ftdiv+2
 12440  0E95  0008               	return
 12441  0E96                     __end_of___ftdiv:	
 12442                           
 12443                           	psect	text72
 12444  1249                     __ptext72:	
 12445 ;; *************** function ___awtoft *****************
 12446 ;; Defined at:
 12447 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  c               2    8[BANK0 ] int 
 12450 ;; Auto vars:     Size  Location     Type
 12451 ;;  sign            1   13[BANK0 ] unsigned char 
 12452 ;; Return value:  Size  Location     Type
 12453 ;;                  3    8[BANK0 ] float 
 12454 ;; Registers used:
 12455 ;;		wreg, status,2, status,0, pclath, cstack
 12456 ;; Tracked objects:
 12457 ;;		On entry : 0/0
 12458 ;;		On exit  : 0/0
 12459 ;;		Unchanged: 0/0
 12460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12461 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;Total ram usage:        6 bytes
 12466 ;; Hardware stack levels used:    1
 12467 ;; Hardware stack levels required when called:    6
 12468 ;; This function calls:
 12469 ;;		___ftpack
 12470 ;; This function is called by:
 12471 ;;		_getPercentValue
 12472 ;;		_setPercentValue
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function ___awtoft
 12478  1249                     ___awtoft:	
 12479                           
 12480                           ;incstack = 0
 12481                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 12482  1249  0020               	movlb	0	; select bank0
 12483  124A  01AD               	clrf	___awtoft@sign
 12484  124B  1FA9               	btfss	___awtoft@c+1,7
 12485  124C  2A54               	goto	l5366
 12486  124D  09A8               	comf	___awtoft@c,f
 12487  124E  09A9               	comf	___awtoft@c+1,f
 12488  124F  0AA8               	incf	___awtoft@c,f
 12489  1250  1903               	skipnz
 12490  1251  0AA9               	incf	___awtoft@c+1,f
 12491  1252  01AD               	clrf	___awtoft@sign
 12492  1253  0AAD               	incf	___awtoft@sign,f
 12493  1254                     l5366:	
 12494  1254  0828               	movf	___awtoft@c,w
 12495  1255  00A0               	movwf	___ftpack@arg
 12496  1256  0829               	movf	___awtoft@c+1,w
 12497  1257  00A1               	movwf	___ftpack@arg+1
 12498  1258  01A2               	clrf	___ftpack@arg+2
 12499  1259  308E               	movlw	142
 12500  125A  00AB               	movwf	??___awtoft
 12501  125B  082B               	movf	??___awtoft,w
 12502  125C  00A3               	movwf	___ftpack@exp
 12503  125D  082D               	movf	___awtoft@sign,w
 12504  125E  00AC               	movwf	??___awtoft+1
 12505  125F  082C               	movf	??___awtoft+1,w
 12506  1260  00A4               	movwf	___ftpack@sign
 12507  1261  3197  279F         	fcall	___ftpack
 12508  1263  0020               	movlb	0	; select bank0
 12509  1264  0820               	movf	?___ftpack,w
 12510  1265  00A8               	movwf	?___awtoft
 12511  1266  0821               	movf	?___ftpack+1,w
 12512  1267  00A9               	movwf	?___awtoft+1
 12513  1268  0822               	movf	?___ftpack+2,w
 12514  1269  00AA               	movwf	?___awtoft+2
 12515  126A  0008               	return
 12516  126B                     __end_of___awtoft:	
 12517                           
 12518                           	psect	text73
 12519  179F                     __ptext73:	
 12520 ;; *************** function ___ftpack *****************
 12521 ;; Defined at:
 12522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  arg             3    0[BANK0 ] unsigned um
 12525 ;;  exp             1    3[BANK0 ] unsigned char 
 12526 ;;  sign            1    4[BANK0 ] unsigned char 
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;		None
 12529 ;; Return value:  Size  Location     Type
 12530 ;;                  3    0[BANK0 ] float 
 12531 ;; Registers used:
 12532 ;;		wreg, status,2, status,0
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:        8 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    5
 12545 ;; This function calls:
 12546 ;;		Nothing
 12547 ;; This function is called by:
 12548 ;;		___awtoft
 12549 ;;		___ftadd
 12550 ;;		___ftdiv
 12551 ;;		___ftmul
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555                           
 12556                           ;psect for function ___ftpack
 12557  179F                     ___ftpack:	
 12558                           
 12559                           ;incstack = 0
 12560                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 12561  179F  0020               	movlb	0	; select bank0
 12562  17A0  0823               	movf	___ftpack@exp,w
 12563  17A1  1903               	btfsc	3,2
 12564  17A2  2FA8               	goto	l5332
 12565  17A3  0822               	movf	___ftpack@arg+2,w
 12566  17A4  0421               	iorwf	___ftpack@arg+1,w
 12567  17A5  0420               	iorwf	___ftpack@arg,w
 12568  17A6  1D03               	skipz
 12569  17A7  2FB9               	goto	l5338
 12570  17A8                     l5332:	
 12571  17A8  3000               	movlw	0
 12572  17A9  00A0               	movwf	?___ftpack
 12573  17AA  3000               	movlw	0
 12574  17AB  00A1               	movwf	?___ftpack+1
 12575  17AC  3000               	movlw	0
 12576  17AD  00A2               	movwf	?___ftpack+2
 12577  17AE  0008               	return
 12578  17AF                     l5336:	
 12579  17AF  3001               	movlw	1
 12580  17B0  00A5               	movwf	??___ftpack
 12581  17B1  0825               	movf	??___ftpack,w
 12582  17B2  07A3               	addwf	___ftpack@exp,f
 12583  17B3  3001               	movlw	1
 12584  17B4                     u3595:	
 12585  17B4  36A2               	lsrf	___ftpack@arg+2,f
 12586  17B5  0CA1               	rrf	___ftpack@arg+1,f
 12587  17B6  0CA0               	rrf	___ftpack@arg,f
 12588  17B7  0B89               	decfsz	9,f
 12589  17B8  2FB4               	goto	u3595
 12590  17B9                     l5338:	
 12591  17B9  30FE               	movlw	254
 12592  17BA  0522               	andwf	___ftpack@arg+2,w
 12593  17BB  1903               	btfsc	3,2
 12594  17BC  2FD2               	goto	l2994
 12595  17BD  2FAF               	goto	l5336
 12596  17BE                     l5340:	
 12597  17BE  3001               	movlw	1
 12598  17BF  00A5               	movwf	??___ftpack
 12599  17C0  0825               	movf	??___ftpack,w
 12600  17C1  07A3               	addwf	___ftpack@exp,f
 12601  17C2  3001               	movlw	1
 12602  17C3  07A0               	addwf	___ftpack@arg,f
 12603  17C4  3000               	movlw	0
 12604  17C5  1803               	skipnc
 12605  17C6  3001               	movlw	1
 12606  17C7  07A1               	addwf	___ftpack@arg+1,f
 12607  17C8  3000               	movlw	0
 12608  17C9  1803               	skipnc
 12609  17CA  3001               	movlw	1
 12610  17CB  07A2               	addwf	___ftpack@arg+2,f
 12611  17CC  3001               	movlw	1
 12612  17CD                     u3615:	
 12613  17CD  36A2               	lsrf	___ftpack@arg+2,f
 12614  17CE  0CA1               	rrf	___ftpack@arg+1,f
 12615  17CF  0CA0               	rrf	___ftpack@arg,f
 12616  17D0  0B89               	decfsz	9,f
 12617  17D1  2FCD               	goto	u3615
 12618  17D2                     l2994:	
 12619  17D2  30FF               	movlw	255
 12620  17D3  0522               	andwf	___ftpack@arg+2,w
 12621  17D4  1903               	btfsc	3,2
 12622  17D5  2FDF               	goto	l5348
 12623  17D6  2FBE               	goto	l5340
 12624  17D7                     l5346:	
 12625  17D7  3001               	movlw	1
 12626  17D8  02A3               	subwf	___ftpack@exp,f
 12627  17D9  3001               	movlw	1
 12628  17DA                     u3635:	
 12629  17DA  35A0               	lslf	___ftpack@arg,f
 12630  17DB  0DA1               	rlf	___ftpack@arg+1,f
 12631  17DC  0DA2               	rlf	___ftpack@arg+2,f
 12632  17DD  0B89               	decfsz	9,f
 12633  17DE  2FDA               	goto	u3635
 12634  17DF                     l5348:	
 12635  17DF  1FA1               	btfss	___ftpack@arg+1,7
 12636  17E0  2FD7               	goto	l5346
 12637  17E1  1823               	btfsc	___ftpack@exp,0
 12638  17E2  2FE9               	goto	l3000
 12639  17E3  30FF               	movlw	255
 12640  17E4  05A0               	andwf	___ftpack@arg,f
 12641  17E5  307F               	movlw	127
 12642  17E6  05A1               	andwf	___ftpack@arg+1,f
 12643  17E7  30FF               	movlw	255
 12644  17E8  05A2               	andwf	___ftpack@arg+2,f
 12645  17E9                     l3000:	
 12646  17E9  1003               	clrc
 12647  17EA  0CA3               	rrf	___ftpack@exp,f
 12648  17EB  0823               	movf	___ftpack@exp,w
 12649  17EC  00A5               	movwf	??___ftpack
 12650  17ED  01A6               	clrf	??___ftpack+1
 12651  17EE  01A7               	clrf	??___ftpack+2
 12652  17EF  3010               	movlw	16
 12653  17F0                     u3665:	
 12654  17F0  35A5               	lslf	??___ftpack,f
 12655  17F1  0DA6               	rlf	??___ftpack+1,f
 12656  17F2  0DA7               	rlf	??___ftpack+2,f
 12657  17F3  0B89               	decfsz	9,f
 12658  17F4  2FF0               	goto	u3665
 12659  17F5  0825               	movf	??___ftpack,w
 12660  17F6  04A0               	iorwf	___ftpack@arg,f
 12661  17F7  0826               	movf	??___ftpack+1,w
 12662  17F8  04A1               	iorwf	___ftpack@arg+1,f
 12663  17F9  0827               	movf	??___ftpack+2,w
 12664  17FA  04A2               	iorwf	___ftpack@arg+2,f
 12665  17FB  0824               	movf	___ftpack@sign,w
 12666  17FC  1903               	btfsc	3,2
 12667  17FD  0008               	return
 12668  17FE  17A2               	bsf	___ftpack@arg+2,7
 12669  17FF  0008               	return
 12670  1800                     __end_of___ftpack:	
 12671                           
 12672                           	psect	text74
 12673  0A9F                     __ptext74:	
 12674 ;; *************** function _setDimmerLights *****************
 12675 ;; Defined at:
 12676 ;;		line 593 in file "../src/Dimmer_B1.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  lights          1    wreg     unsigned char 
 12679 ;;  status          1    4[BANK0 ] unsigned char 
 12680 ;; Auto vars:     Size  Location     Type
 12681 ;;  lights          1    6[BANK0 ] unsigned char 
 12682 ;; Return value:  Size  Location     Type
 12683 ;;		None               void
 12684 ;; Registers used:
 12685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12686 ;; Tracked objects:
 12687 ;;		On entry : 0/0
 12688 ;;		On exit  : 0/0
 12689 ;;		Unchanged: 0/0
 12690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12691 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;Total ram usage:        3 bytes
 12696 ;; Hardware stack levels used:    1
 12697 ;; Hardware stack levels required when called:    7
 12698 ;; This function calls:
 12699 ;;		_DimmerLightsPointSelect
 12700 ;;		_setLED
 12701 ;;		_setMemory_GO
 12702 ;; This function is called by:
 12703 ;;		_setDimmerLights_Main
 12704 ;;		_setControl_Lights_Table
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _setDimmerLights
 12710  0A9F                     _setDimmerLights:	
 12711                           
 12712                           ;incstack = 0
 12713                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12714                           ;setDimmerLights@lights stored from wreg
 12715  0A9F  0020               	movlb	0	; select bank0
 12716  0AA0  00A6               	movwf	setDimmerLights@lights
 12717                           
 12718                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12719  0AA1  0826               	movf	setDimmerLights@lights,w
 12720  0AA2  3190  20A7  318A   	fcall	_DimmerLightsPointSelect
 12721                           
 12722                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12723  0AA5  0020               	movlb	0	; select bank0
 12724  0AA6  0826               	movf	setDimmerLights@lights,w
 12725  0AA7  00A5               	movwf	??_setDimmerLights
 12726  0AA8  0021               	movlb	1	; select bank1
 12727  0AA9  0A39               	incf	_Dimmer^(0+128),w
 12728  0AAA  0086               	movwf	6
 12729  0AAB  0187               	clrf	7
 12730  0AAC  0020               	movlb	0	; select bank0
 12731  0AAD  0825               	movf	??_setDimmerLights,w
 12732  0AAE  0081               	movwf	1
 12733                           
 12734                           ;Dimmer_B1.c: 596: if (status == 1) {
 12735  0AAF  0824               	movf	setDimmerLights@status,w
 12736  0AB0  3A01               	xorlw	1
 12737  0AB1  1D03               	skipz
 12738  0AB2  2AF3               	goto	l5898
 12739                           
 12740                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12741  0AB3  0878               	movf	_DimmerLights,w
 12742  0AB4  0086               	movwf	6
 12743  0AB5  3001               	movlw	1	; select bank2/3
 12744  0AB6  0087               	movwf	7
 12745  0AB7  1681               	bsf	1,5
 12746                           
 12747                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12748  0AB8  01A2               	clrf	setLED@command
 12749  0AB9  0826               	movf	setDimmerLights@lights,w
 12750  0ABA  3189  21BB  318A   	fcall	_setLED
 12751                           
 12752                           ;Dimmer_B1.c: 600: ;;
 12753                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12754  0ABD  0878               	movf	_DimmerLights,w
 12755  0ABE  0086               	movwf	6
 12756  0ABF  3001               	movlw	1	; select bank2/3
 12757  0AC0  0087               	movwf	7
 12758  0AC1  1481               	bsf	1,1
 12759                           
 12760                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12761  0AC2  3007               	movlw	7
 12762  0AC3  0020               	movlb	0	; select bank0
 12763  0AC4  00A5               	movwf	??_setDimmerLights
 12764  0AC5  0878               	movf	_DimmerLights,w
 12765  0AC6  3E02               	addlw	2
 12766  0AC7  0086               	movwf	6
 12767  0AC8  3001               	movlw	1	; select bank2/3
 12768  0AC9  0087               	movwf	7
 12769  0ACA  0825               	movf	??_setDimmerLights,w
 12770  0ACB  0081               	movwf	1
 12771                           
 12772                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12773  0ACC  0878               	movf	_DimmerLights,w
 12774  0ACD  0086               	movwf	6
 12775  0ACE  3001               	movlw	1	; select bank2/3
 12776  0ACF  0087               	movwf	7
 12777  0AD0  1B01               	btfsc	1,6
 12778  0AD1  0008               	return
 12779                           
 12780                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12781  0AD2  0878               	movf	_DimmerLights,w
 12782  0AD3  0086               	movwf	6
 12783  0AD4  3001               	movlw	1	; select bank2/3
 12784  0AD5  0087               	movwf	7
 12785  0AD6  1701               	bsf	1,6
 12786                           
 12787                           ;Dimmer_B1.c: 607: ;;
 12788                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12789  0AD7  3000               	movlw	0
 12790  0AD8  3191  21A9         	fcall	_setMemory_GO
 12791                           
 12792                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12793  0ADA  0878               	movf	_DimmerLights,w
 12794  0ADB  3E05               	addlw	5
 12795  0ADC  0086               	movwf	6
 12796  0ADD  3001               	movlw	1	; select bank2/3
 12797  0ADE  0087               	movwf	7
 12798  0ADF  0801               	movf	1,w
 12799  0AE0  0020               	movlb	0	; select bank0
 12800  0AE1  00A5               	movwf	??_setDimmerLights
 12801  0AE2  0878               	movf	_DimmerLights,w
 12802  0AE3  3E04               	addlw	4
 12803  0AE4  0086               	movwf	6
 12804  0AE5  3001               	movlw	1	; select bank2/3
 12805  0AE6  0087               	movwf	7
 12806  0AE7  0825               	movf	??_setDimmerLights,w
 12807  0AE8  0081               	movwf	1
 12808                           
 12809                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-95)*0.8));
 12810  0AE9  3004               	movlw	4
 12811  0AEA  00A5               	movwf	??_setDimmerLights
 12812  0AEB  0878               	movf	_DimmerLights,w
 12813  0AEC  3E04               	addlw	4
 12814  0AED  0086               	movwf	6
 12815  0AEE  3001               	movlw	1	; select bank2/3
 12816  0AEF  0087               	movwf	7
 12817  0AF0  0825               	movf	??_setDimmerLights,w
 12818  0AF1  0081               	movwf	1
 12819                           
 12820                           ;Dimmer_B1.c: 617: }
 12821                           ;Dimmer_B1.c: 618: } else {
 12822  0AF2  0008               	return
 12823  0AF3                     l5898:	
 12824                           
 12825                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12826  0AF3  0878               	movf	_DimmerLights,w
 12827  0AF4  0086               	movwf	6
 12828  0AF5  3001               	movlw	1	; select bank2/3
 12829  0AF6  0087               	movwf	7
 12830  0AF7  1281               	bcf	1,5
 12831                           
 12832                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12833  0AF8  0878               	movf	_DimmerLights,w
 12834  0AF9  3E06               	addlw	6
 12835  0AFA  0086               	movwf	6
 12836  0AFB  3001               	movlw	1	; select bank2/3
 12837  0AFC  0087               	movwf	7
 12838  0AFD  0801               	movf	1,w
 12839  0AFE  00A5               	movwf	??_setDimmerLights
 12840  0AFF  0878               	movf	_DimmerLights,w
 12841  0B00  3E04               	addlw	4
 12842  0B01  0086               	movwf	6
 12843  0B02  3001               	movlw	1	; select bank2/3
 12844  0B03  0087               	movwf	7
 12845  0B04  0825               	movf	??_setDimmerLights,w
 12846  0B05  0081               	movwf	1
 12847                           
 12848                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12849  0B06  0878               	movf	_DimmerLights,w
 12850  0B07  0086               	movwf	6
 12851  0B08  3001               	movlw	1	; select bank2/3
 12852  0B09  0087               	movwf	7
 12853  0B0A  1481               	bsf	1,1
 12854                           
 12855                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12856  0B0B  0878               	movf	_DimmerLights,w
 12857  0B0C  0086               	movwf	6
 12858  0B0D  3001               	movlw	1	; select bank2/3
 12859  0B0E  0087               	movwf	7
 12860  0B0F  1181               	bcf	1,3
 12861                           
 12862                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12863  0B10  0878               	movf	_DimmerLights,w
 12864  0B11  0086               	movwf	6
 12865  0B12  3001               	movlw	1	; select bank2/3
 12866  0B13  0087               	movwf	7
 12867  0B14  1201               	bcf	1,4
 12868                           
 12869                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12870  0B15  3007               	movlw	7
 12871  0B16  00A5               	movwf	??_setDimmerLights
 12872  0B17  0878               	movf	_DimmerLights,w
 12873  0B18  3E02               	addlw	2
 12874  0B19  0086               	movwf	6
 12875  0B1A  3001               	movlw	1	; select bank2/3
 12876  0B1B  0087               	movwf	7
 12877  0B1C  0825               	movf	??_setDimmerLights,w
 12878  0B1D  0081               	movwf	1
 12879  0B1E  0008               	return
 12880  0B1F                     __end_of_setDimmerLights:	
 12881                           
 12882                           	psect	text75
 12883  09BB                     __ptext75:	
 12884 ;; *************** function _setLED *****************
 12885 ;; Defined at:
 12886 ;;		line 74 in file "../src/LED_B1.c"
 12887 ;; Parameters:    Size  Location     Type
 12888 ;;  led             1    wreg     unsigned char 
 12889 ;;  command         1    2[BANK0 ] unsigned char 
 12890 ;; Auto vars:     Size  Location     Type
 12891 ;;  led             1    3[BANK0 ] unsigned char 
 12892 ;; Return value:  Size  Location     Type
 12893 ;;		None               void
 12894 ;; Registers used:
 12895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12896 ;; Tracked objects:
 12897 ;;		On entry : 0/0
 12898 ;;		On exit  : 0/0
 12899 ;;		Unchanged: 0/0
 12900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12901 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12904 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12905 ;;Total ram usage:        2 bytes
 12906 ;; Hardware stack levels used:    1
 12907 ;; Hardware stack levels required when called:    6
 12908 ;; This function calls:
 12909 ;;		_LedPointSelect
 12910 ;; This function is called by:
 12911 ;;		_setDimmerLights
 12912 ;;		_setLED_Initialization
 12913 ;;		_setSw_Initialization
 12914 ;;		_setDimmerLights_ERROR
 12915 ;; This function uses a non-reentrant model
 12916 ;;
 12917                           
 12918                           
 12919                           ;psect for function _setLED
 12920  09BB                     _setLED:	
 12921                           
 12922                           ;incstack = 0
 12923                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12924                           ;setLED@led stored from wreg
 12925  09BB  0020               	movlb	0	; select bank0
 12926  09BC  00A3               	movwf	setLED@led
 12927                           
 12928                           ;LED_B1.c: 76: LedPointSelect(led);
 12929  09BD  0823               	movf	setLED@led,w
 12930  09BE  3193  235A  3189   	fcall	_LedPointSelect
 12931                           
 12932                           ;LED_B1.c: 77: if(command == 0)
 12933  09C1  0020               	movlb	0	; select bank0
 12934  09C2  08A2               	movf	setLED@command,f
 12935  09C3  1D03               	skipz
 12936  09C4  29DD               	goto	l5736
 12937                           
 12938                           ;LED_B1.c: 78: {
 12939                           ;LED_B1.c: 80: if(led == 1)
 12940  09C5  0823               	movf	setLED@led,w
 12941  09C6  3A01               	xorlw	1
 12942  09C7  1D03               	skipz
 12943  09C8  29CB               	goto	l5724
 12944                           
 12945                           ;LED_B1.c: 81: {
 12946                           ;LED_B1.c: 85: RC7=1;
 12947  09C9  178E               	bsf	14,7	;volatile
 12948                           
 12949                           ;LED_B1.c: 87: }
 12950  09CA  0008               	return
 12951  09CB                     l5724:	
 12952                           
 12953                           ;LED_B1.c: 90: else if(led == 2)
 12954  09CB  0823               	movf	setLED@led,w
 12955  09CC  3A02               	xorlw	2
 12956  09CD  1D03               	skipz
 12957  09CE  29D1               	goto	l5728
 12958                           
 12959                           ;LED_B1.c: 91: {
 12960                           ;LED_B1.c: 95: RA3=1;
 12961  09CF  158C               	bsf	12,3	;volatile
 12962                           
 12963                           ;LED_B1.c: 97: }
 12964  09D0  0008               	return
 12965  09D1                     l5728:	
 12966                           
 12967                           ;LED_B1.c: 100: else if(led == 3)
 12968  09D1  0823               	movf	setLED@led,w
 12969  09D2  3A03               	xorlw	3
 12970  09D3  1D03               	skipz
 12971  09D4  29D7               	goto	l5732
 12972                           
 12973                           ;LED_B1.c: 101: {
 12974                           ;LED_B1.c: 105: RC6=1;
 12975  09D5  170E               	bsf	14,6	;volatile
 12976                           
 12977                           ;LED_B1.c: 107: }
 12978  09D6  0008               	return
 12979  09D7                     l5732:	
 12980                           
 12981                           ;LED_B1.c: 110: else if(led == 99)
 12982  09D7  0823               	movf	setLED@led,w
 12983  09D8  3A63               	xorlw	99
 12984  09D9  1D03               	skipz
 12985  09DA  0008               	return
 12986                           
 12987                           ;LED_B1.c: 111: {
 12988                           ;LED_B1.c: 115: RB5=1;
 12989  09DB  168D               	bsf	13,5	;volatile
 12990                           
 12991                           ;LED_B1.c: 117: }
 12992                           ;LED_B1.c: 119: }
 12993  09DC  0008               	return
 12994  09DD                     l5736:	
 12995                           
 12996                           ;LED_B1.c: 120: else if(command == 1)
 12997  09DD  0822               	movf	setLED@command,w
 12998  09DE  3A01               	xorlw	1
 12999  09DF  1D03               	skipz
 13000  09E0  29F9               	goto	l5754
 13001                           
 13002                           ;LED_B1.c: 121: {
 13003                           ;LED_B1.c: 123: if(led == 1)
 13004  09E1  0823               	movf	setLED@led,w
 13005  09E2  3A01               	xorlw	1
 13006  09E3  1D03               	skipz
 13007  09E4  29E7               	goto	l5742
 13008                           
 13009                           ;LED_B1.c: 124: {
 13010                           ;LED_B1.c: 128: RC7=0;
 13011  09E5  138E               	bcf	14,7	;volatile
 13012                           
 13013                           ;LED_B1.c: 130: }
 13014  09E6  0008               	return
 13015  09E7                     l5742:	
 13016                           
 13017                           ;LED_B1.c: 133: else if(led == 2)
 13018  09E7  0823               	movf	setLED@led,w
 13019  09E8  3A02               	xorlw	2
 13020  09E9  1D03               	skipz
 13021  09EA  29ED               	goto	l5746
 13022                           
 13023                           ;LED_B1.c: 134: {
 13024                           ;LED_B1.c: 138: RA3=0;
 13025  09EB  118C               	bcf	12,3	;volatile
 13026                           
 13027                           ;LED_B1.c: 140: }
 13028  09EC  0008               	return
 13029  09ED                     l5746:	
 13030                           
 13031                           ;LED_B1.c: 143: else if(led == 3)
 13032  09ED  0823               	movf	setLED@led,w
 13033  09EE  3A03               	xorlw	3
 13034  09EF  1D03               	skipz
 13035  09F0  29F3               	goto	l5750
 13036                           
 13037                           ;LED_B1.c: 144: {
 13038                           ;LED_B1.c: 148: RC6=0;
 13039  09F1  130E               	bcf	14,6	;volatile
 13040                           
 13041                           ;LED_B1.c: 150: }
 13042  09F2  0008               	return
 13043  09F3                     l5750:	
 13044                           
 13045                           ;LED_B1.c: 153: else if(led == 99)
 13046  09F3  0823               	movf	setLED@led,w
 13047  09F4  3A63               	xorlw	99
 13048  09F5  1D03               	skipz
 13049  09F6  0008               	return
 13050                           
 13051                           ;LED_B1.c: 154: {
 13052                           ;LED_B1.c: 158: RB5=0;
 13053  09F7  128D               	bcf	13,5	;volatile
 13054                           
 13055                           ;LED_B1.c: 160: }
 13056                           ;LED_B1.c: 162: }
 13057  09F8  0008               	return
 13058  09F9                     l5754:	
 13059                           
 13060                           ;LED_B1.c: 163: else if(command == 10)
 13061  09F9  0822               	movf	setLED@command,w
 13062  09FA  3A0A               	xorlw	10
 13063  09FB  1D03               	skipz
 13064  09FC  2A21               	goto	l5774
 13065                           
 13066                           ;LED_B1.c: 164: {
 13067                           ;LED_B1.c: 165: LED->GO=0;
 13068  09FD  0021               	movlb	1	; select bank1
 13069  09FE  083E               	movf	_LED^(0+128),w
 13070  09FF  0086               	movwf	6
 13071  0A00  0187               	clrf	7
 13072  0A01  1081               	bcf	1,1
 13073                           
 13074                           ;LED_B1.c: 166: LED->Time=0;
 13075  0A02  0A3E               	incf	_LED^(0+128),w
 13076  0A03  0086               	movwf	6
 13077  0A04  0187               	clrf	7
 13078  0A05  3000               	movlw	0
 13079  0A06  3FC0               	movwi [0]fsr1
 13080  0A07  3FC1               	movwi [1]fsr1
 13081                           
 13082                           ;LED_B1.c: 168: if(led == 1)
 13083  0A08  0020               	movlb	0	; select bank0
 13084  0A09  0823               	movf	setLED@led,w
 13085  0A0A  3A01               	xorlw	1
 13086  0A0B  1D03               	skipz
 13087  0A0C  2A0F               	goto	l5762
 13088                           
 13089                           ;LED_B1.c: 169: {
 13090                           ;LED_B1.c: 173: RC7=1;
 13091  0A0D  178E               	bsf	14,7	;volatile
 13092                           
 13093                           ;LED_B1.c: 175: }
 13094  0A0E  0008               	return
 13095  0A0F                     l5762:	
 13096                           
 13097                           ;LED_B1.c: 178: else if(led == 2)
 13098  0A0F  0823               	movf	setLED@led,w
 13099  0A10  3A02               	xorlw	2
 13100  0A11  1D03               	skipz
 13101  0A12  2A15               	goto	l5766
 13102                           
 13103                           ;LED_B1.c: 179: {
 13104                           ;LED_B1.c: 183: RA3=1;
 13105  0A13  158C               	bsf	12,3	;volatile
 13106                           
 13107                           ;LED_B1.c: 185: }
 13108  0A14  0008               	return
 13109  0A15                     l5766:	
 13110                           
 13111                           ;LED_B1.c: 188: else if(led == 3)
 13112  0A15  0823               	movf	setLED@led,w
 13113  0A16  3A03               	xorlw	3
 13114  0A17  1D03               	skipz
 13115  0A18  2A1B               	goto	l5770
 13116                           
 13117                           ;LED_B1.c: 189: {
 13118                           ;LED_B1.c: 193: RC6=1;
 13119  0A19  170E               	bsf	14,6	;volatile
 13120                           
 13121                           ;LED_B1.c: 195: }
 13122  0A1A  0008               	return
 13123  0A1B                     l5770:	
 13124                           
 13125                           ;LED_B1.c: 198: else if(led == 99)
 13126  0A1B  0823               	movf	setLED@led,w
 13127  0A1C  3A63               	xorlw	99
 13128  0A1D  1D03               	skipz
 13129  0A1E  0008               	return
 13130                           
 13131                           ;LED_B1.c: 199: {
 13132                           ;LED_B1.c: 203: RB5=1;
 13133  0A1F  168D               	bsf	13,5	;volatile
 13134                           
 13135                           ;LED_B1.c: 205: }
 13136                           ;LED_B1.c: 207: }
 13137  0A20  0008               	return
 13138  0A21                     l5774:	
 13139                           
 13140                           ;LED_B1.c: 208: else if(command == 11)
 13141  0A21  0822               	movf	setLED@command,w
 13142  0A22  3A0B               	xorlw	11
 13143  0A23  1D03               	skipz
 13144  0A24  0008               	return
 13145                           
 13146                           ;LED_B1.c: 209: {
 13147                           ;LED_B1.c: 210: LED->GO=1;
 13148  0A25  0021               	movlb	1	; select bank1
 13149  0A26  083E               	movf	_LED^(0+128),w
 13150  0A27  0086               	movwf	6
 13151  0A28  0187               	clrf	7
 13152  0A29  1481               	bsf	1,1
 13153  0A2A  0008               	return
 13154  0A2B                     __end_of_setLED:	
 13155                           
 13156                           	psect	text76
 13157  135A                     __ptext76:	
 13158 ;; *************** function _LedPointSelect *****************
 13159 ;; Defined at:
 13160 ;;		line 7 in file "../src/LED_B1.c"
 13161 ;; Parameters:    Size  Location     Type
 13162 ;;  led             1    wreg     unsigned char 
 13163 ;; Auto vars:     Size  Location     Type
 13164 ;;  led             1    1[BANK0 ] unsigned char 
 13165 ;; Return value:  Size  Location     Type
 13166 ;;		None               void
 13167 ;; Registers used:
 13168 ;;		wreg
 13169 ;; Tracked objects:
 13170 ;;		On entry : 0/0
 13171 ;;		On exit  : 0/0
 13172 ;;		Unchanged: 0/0
 13173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;Total ram usage:        2 bytes
 13179 ;; Hardware stack levels used:    1
 13180 ;; Hardware stack levels required when called:    5
 13181 ;; This function calls:
 13182 ;;		Nothing
 13183 ;; This function is called by:
 13184 ;;		_setLED_Initialization
 13185 ;;		_setLED
 13186 ;;		_setLED_Main
 13187 ;; This function uses a non-reentrant model
 13188 ;;
 13189                           
 13190                           
 13191                           ;psect for function _LedPointSelect
 13192  135A                     _LedPointSelect:	
 13193                           
 13194                           ;incstack = 0
 13195                           ; Regs used in _LedPointSelect: [wreg]
 13196                           ;LedPointSelect@led stored from wreg
 13197  135A  0020               	movlb	0	; select bank0
 13198  135B  00A1               	movwf	LedPointSelect@led
 13199                           
 13200                           ;LED_B1.c: 10: if(led == 1)
 13201  135C  0821               	movf	LedPointSelect@led,w
 13202  135D  3A01               	xorlw	1
 13203  135E  1D03               	skipz
 13204  135F  2B66               	goto	l5614
 13205                           
 13206                           ;LED_B1.c: 11: {
 13207                           ;LED_B1.c: 12: LED=&VarLED1;
 13208  1360  30D8               	movlw	_VarLED1& (0+255)
 13209  1361  00A0               	movwf	??_LedPointSelect
 13210  1362  0820               	movf	??_LedPointSelect,w
 13211  1363  0021               	movlb	1	; select bank1
 13212  1364  00BE               	movwf	_LED^(0+128)
 13213                           
 13214                           ;LED_B1.c: 13: }
 13215  1365  0008               	return
 13216  1366                     l5614:	
 13217                           
 13218                           ;LED_B1.c: 16: else if(led == 2)
 13219  1366  0020               	movlb	0	; select bank0
 13220  1367  0821               	movf	LedPointSelect@led,w
 13221  1368  3A02               	xorlw	2
 13222  1369  1D03               	skipz
 13223  136A  2B71               	goto	l5618
 13224                           
 13225                           ;LED_B1.c: 17: {
 13226                           ;LED_B1.c: 18: LED=&VarLED2;
 13227  136B  30DC               	movlw	_VarLED2& (0+255)
 13228  136C  00A0               	movwf	??_LedPointSelect
 13229  136D  0820               	movf	??_LedPointSelect,w
 13230  136E  0021               	movlb	1	; select bank1
 13231  136F  00BE               	movwf	_LED^(0+128)
 13232                           
 13233                           ;LED_B1.c: 19: }
 13234  1370  0008               	return
 13235  1371                     l5618:	
 13236                           
 13237                           ;LED_B1.c: 22: else if(led == 3)
 13238  1371  0020               	movlb	0	; select bank0
 13239  1372  0821               	movf	LedPointSelect@led,w
 13240  1373  3A03               	xorlw	3
 13241  1374  1D03               	skipz
 13242  1375  2B7C               	goto	l5622
 13243                           
 13244                           ;LED_B1.c: 23: {
 13245                           ;LED_B1.c: 24: LED=&VarLED3;
 13246  1376  30E0               	movlw	_VarLED3& (0+255)
 13247  1377  00A0               	movwf	??_LedPointSelect
 13248  1378  0820               	movf	??_LedPointSelect,w
 13249  1379  0021               	movlb	1	; select bank1
 13250  137A  00BE               	movwf	_LED^(0+128)
 13251                           
 13252                           ;LED_B1.c: 25: }
 13253  137B  0008               	return
 13254  137C                     l5622:	
 13255                           
 13256                           ;LED_B1.c: 28: else if(led == 99)
 13257  137C  0020               	movlb	0	; select bank0
 13258  137D  0821               	movf	LedPointSelect@led,w
 13259  137E  3A63               	xorlw	99
 13260  137F  1D03               	skipz
 13261  1380  0008               	return
 13262                           
 13263                           ;LED_B1.c: 29: {
 13264                           ;LED_B1.c: 30: LED=&VarErrLED;
 13265  1381  30D4               	movlw	_VarErrLED& (0+255)
 13266  1382  00A0               	movwf	??_LedPointSelect
 13267  1383  0820               	movf	??_LedPointSelect,w
 13268  1384  0021               	movlb	1	; select bank1
 13269  1385  00BE               	movwf	_LED^(0+128)
 13270  1386  0008               	return
 13271  1387                     __end_of_LedPointSelect:	
 13272                           
 13273                           	psect	text77
 13274  0CB7                     __ptext77:	
 13275 ;; *************** function _setBuz *****************
 13276 ;; Defined at:
 13277 ;;		line 30 in file "../src/Buzzer_B1.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;  count           1    wreg     unsigned char 
 13280 ;;  time            2    9[BANK0 ] int 
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;  count           1   12[BANK0 ] unsigned char 
 13283 ;; Return value:  Size  Location     Type
 13284 ;;		None               void
 13285 ;; Registers used:
 13286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13287 ;; Tracked objects:
 13288 ;;		On entry : 0/0
 13289 ;;		On exit  : 0/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13292 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;Total ram usage:        4 bytes
 13297 ;; Hardware stack levels used:    1
 13298 ;; Hardware stack levels required when called:    6
 13299 ;; This function calls:
 13300 ;;		___awdiv
 13301 ;; This function is called by:
 13302 ;;		_CC2500_RxData
 13303 ;;		_setDimmerLights_Main
 13304 ;;		_my_Main
 13305 ;;		_setLog_Code
 13306 ;;		_setControl_Lights_Table
 13307 ;;		_setRFSW_Control
 13308 ;;		_setSw_Main
 13309 ;;		_Sw_DimmerOnFunc
 13310 ;;		_DimmerLights_Exceptions
 13311 ;; This function uses a non-reentrant model
 13312 ;;
 13313                           
 13314                           
 13315                           ;psect for function _setBuz
 13316  0CB7                     _setBuz:	
 13317                           
 13318                           ;incstack = 0
 13319                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13320                           ;setBuz@count stored from wreg
 13321  0CB7  0020               	movlb	0	; select bank0
 13322  0CB8  00AC               	movwf	setBuz@count
 13323                           
 13324                           ;Buzzer_B1.c: 31: Buz = &Buz1;
 13325  0CB9  304D               	movlw	_Buz1& (0+255)
 13326  0CBA  00AB               	movwf	??_setBuz
 13327  0CBB  082B               	movf	??_setBuz,w
 13328  0CBC  0021               	movlb	1	; select bank1
 13329  0CBD  00B7               	movwf	_Buz^(0+128)
 13330                           
 13331                           ;Buzzer_B1.c: 32: time /= 10;
 13332  0CBE  300A               	movlw	10
 13333  0CBF  0020               	movlb	0	; select bank0
 13334  0CC0  00A0               	movwf	___awdiv@divisor
 13335  0CC1  3000               	movlw	0
 13336  0CC2  00A1               	movwf	___awdiv@divisor+1
 13337  0CC3  082A               	movf	setBuz@time+1,w
 13338  0CC4  01A3               	clrf	___awdiv@dividend+1
 13339  0CC5  07A3               	addwf	___awdiv@dividend+1,f
 13340  0CC6  0829               	movf	setBuz@time,w
 13341  0CC7  01A2               	clrf	___awdiv@dividend
 13342  0CC8  07A2               	addwf	___awdiv@dividend,f
 13343  0CC9  3196  2690  318C   	fcall	___awdiv
 13344  0CCC  0020               	movlb	0	; select bank0
 13345  0CCD  0821               	movf	?___awdiv+1,w
 13346  0CCE  01AA               	clrf	setBuz@time+1
 13347  0CCF  07AA               	addwf	setBuz@time+1,f
 13348  0CD0  0820               	movf	?___awdiv,w
 13349  0CD1  01A9               	clrf	setBuz@time
 13350  0CD2  07A9               	addwf	setBuz@time,f
 13351                           
 13352                           ;Buzzer_B1.c: 33: if (Buz->Enable == 1) {
 13353  0CD3  0021               	movlb	1	; select bank1
 13354  0CD4  0837               	movf	_Buz^(0+128),w
 13355  0CD5  0086               	movwf	6
 13356  0CD6  3001               	movlw	1	; select bank2/3
 13357  0CD7  0087               	movwf	7
 13358  0CD8  1C01               	btfss	1,0
 13359  0CD9  0008               	return
 13360                           
 13361                           ;Buzzer_B1.c: 34: if (Buz->GO == 0) {
 13362  0CDA  0837               	movf	_Buz^(0+128),w
 13363  0CDB  0086               	movwf	6
 13364  0CDC  3001               	movlw	1	; select bank2/3
 13365  0CDD  0087               	movwf	7
 13366  0CDE  1881               	btfsc	1,1
 13367  0CDF  2D05               	goto	l5702
 13368                           
 13369                           ;Buzzer_B1.c: 35: Buz->GO = 1;
 13370  0CE0  0837               	movf	_Buz^(0+128),w
 13371  0CE1  0086               	movwf	6
 13372  0CE2  3001               	movlw	1	; select bank2/3
 13373  0CE3  0087               	movwf	7
 13374  0CE4  1481               	bsf	1,1
 13375                           
 13376                           ;Buzzer_B1.c: 36: Buz->Counter = 0;
 13377  0CE5  0A37               	incf	_Buz^(0+128),w
 13378  0CE6  0086               	movwf	6
 13379  0CE7  3001               	movlw	1	; select bank2/3
 13380  0CE8  0087               	movwf	7
 13381  0CE9  3000               	movlw	0
 13382  0CEA  3FC0               	movwi [0]fsr1
 13383  0CEB  3FC1               	movwi [1]fsr1
 13384                           
 13385                           ;Buzzer_B1.c: 37: Buz->Count = count;
 13386  0CEC  0020               	movlb	0	; select bank0
 13387  0CED  082C               	movf	setBuz@count,w
 13388  0CEE  00AB               	movwf	??_setBuz
 13389  0CEF  0021               	movlb	1	; select bank1
 13390  0CF0  0837               	movf	_Buz^(0+128),w
 13391  0CF1  3E03               	addlw	3
 13392  0CF2  0086               	movwf	6
 13393  0CF3  3001               	movlw	1	; select bank2/3
 13394  0CF4  0087               	movwf	7
 13395  0CF5  0020               	movlb	0	; select bank0
 13396  0CF6  082B               	movf	??_setBuz,w
 13397  0CF7  0081               	movwf	1
 13398                           
 13399                           ;Buzzer_B1.c: 38: Buz->TimeValue = time;
 13400  0CF8  0021               	movlb	1	; select bank1
 13401  0CF9  0837               	movf	_Buz^(0+128),w
 13402  0CFA  3E06               	addlw	6
 13403  0CFB  0086               	movwf	6
 13404  0CFC  3001               	movlw	1	; select bank2/3
 13405  0CFD  0087               	movwf	7
 13406  0CFE  0020               	movlb	0	; select bank0
 13407  0CFF  0829               	movf	setBuz@time,w
 13408  0D00  3FC0               	movwi [0]fsr1
 13409  0D01  082A               	movf	setBuz@time+1,w
 13410  0D02  3FC1               	movwi [1]fsr1
 13411                           
 13412                           ;Buzzer_B1.c: 39: RB3 = 1;
 13413  0D03  158D               	bsf	13,3	;volatile
 13414                           
 13415                           ;Buzzer_B1.c: 40: } else {
 13416  0D04  0008               	return
 13417  0D05                     l5702:	
 13418                           
 13419                           ;Buzzer_B1.c: 41: if (Buz->BufferStatus1 == 0) {
 13420  0D05  0021               	movlb	1	; select bank1
 13421  0D06  0837               	movf	_Buz^(0+128),w
 13422  0D07  0086               	movwf	6
 13423  0D08  3001               	movlw	1	; select bank2/3
 13424  0D09  0087               	movwf	7
 13425  0D0A  1981               	btfsc	1,3
 13426  0D0B  2D29               	goto	l5706
 13427                           
 13428                           ;Buzzer_B1.c: 42: Buz->BufferStatus1 = 1;
 13429  0D0C  0837               	movf	_Buz^(0+128),w
 13430  0D0D  0086               	movwf	6
 13431  0D0E  3001               	movlw	1	; select bank2/3
 13432  0D0F  0087               	movwf	7
 13433  0D10  1581               	bsf	1,3
 13434                           
 13435                           ;Buzzer_B1.c: 43: Buz->CountBuffer1 = count;
 13436  0D11  0020               	movlb	0	; select bank0
 13437  0D12  082C               	movf	setBuz@count,w
 13438  0D13  00AB               	movwf	??_setBuz
 13439  0D14  0021               	movlb	1	; select bank1
 13440  0D15  0837               	movf	_Buz^(0+128),w
 13441  0D16  3E04               	addlw	4
 13442  0D17  0086               	movwf	6
 13443  0D18  3001               	movlw	1	; select bank2/3
 13444  0D19  0087               	movwf	7
 13445  0D1A  0020               	movlb	0	; select bank0
 13446  0D1B  082B               	movf	??_setBuz,w
 13447  0D1C  0081               	movwf	1
 13448                           
 13449                           ;Buzzer_B1.c: 44: Buz->TimeValueBuffer1 = time;
 13450  0D1D  0021               	movlb	1	; select bank1
 13451  0D1E  0837               	movf	_Buz^(0+128),w
 13452  0D1F  3E08               	addlw	8
 13453  0D20  0086               	movwf	6
 13454  0D21  3001               	movlw	1	; select bank2/3
 13455  0D22  0087               	movwf	7
 13456  0D23  0020               	movlb	0	; select bank0
 13457  0D24  0829               	movf	setBuz@time,w
 13458  0D25  3FC0               	movwi [0]fsr1
 13459  0D26  082A               	movf	setBuz@time+1,w
 13460  0D27  3FC1               	movwi [1]fsr1
 13461                           
 13462                           ;Buzzer_B1.c: 45: } else if (Buz->BufferStatus2 == 0) {
 13463  0D28  0008               	return
 13464  0D29                     l5706:	
 13465  0D29  0021               	movlb	1	; select bank1
 13466  0D2A  0837               	movf	_Buz^(0+128),w
 13467  0D2B  0086               	movwf	6
 13468  0D2C  3001               	movlw	1	; select bank2/3
 13469  0D2D  0087               	movwf	7
 13470  0D2E  1A01               	btfsc	1,4
 13471  0D2F  0008               	return
 13472                           
 13473                           ;Buzzer_B1.c: 46: Buz->BufferStatus2 = 1;
 13474  0D30  0837               	movf	_Buz^(0+128),w
 13475  0D31  0086               	movwf	6
 13476  0D32  3001               	movlw	1	; select bank2/3
 13477  0D33  0087               	movwf	7
 13478  0D34  1601               	bsf	1,4
 13479                           
 13480                           ;Buzzer_B1.c: 47: Buz->CountBuffer2 = count;
 13481  0D35  0020               	movlb	0	; select bank0
 13482  0D36  082C               	movf	setBuz@count,w
 13483  0D37  00AB               	movwf	??_setBuz
 13484  0D38  0021               	movlb	1	; select bank1
 13485  0D39  0837               	movf	_Buz^(0+128),w
 13486  0D3A  3E05               	addlw	5
 13487  0D3B  0086               	movwf	6
 13488  0D3C  3001               	movlw	1	; select bank2/3
 13489  0D3D  0087               	movwf	7
 13490  0D3E  0020               	movlb	0	; select bank0
 13491  0D3F  082B               	movf	??_setBuz,w
 13492  0D40  0081               	movwf	1
 13493                           
 13494                           ;Buzzer_B1.c: 48: Buz->TimeValueBuffer2 = time;
 13495  0D41  0021               	movlb	1	; select bank1
 13496  0D42  0837               	movf	_Buz^(0+128),w
 13497  0D43  3E0A               	addlw	10
 13498  0D44  0086               	movwf	6
 13499  0D45  3001               	movlw	1	; select bank2/3
 13500  0D46  0087               	movwf	7
 13501  0D47  0020               	movlb	0	; select bank0
 13502  0D48  0829               	movf	setBuz@time,w
 13503  0D49  3FC0               	movwi [0]fsr1
 13504  0D4A  082A               	movf	setBuz@time+1,w
 13505  0D4B  3FC1               	movwi [1]fsr1
 13506  0D4C  0008               	return
 13507  0D4D                     __end_of_setBuz:	
 13508                           
 13509                           	psect	text78
 13510  1690                     __ptext78:	
 13511 ;; *************** function ___awdiv *****************
 13512 ;; Defined at:
 13513 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;  divisor         2    0[BANK0 ] int 
 13516 ;;  dividend        2    2[BANK0 ] int 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  quotient        2    7[BANK0 ] int 
 13519 ;;  sign            1    6[BANK0 ] unsigned char 
 13520 ;;  counter         1    5[BANK0 ] unsigned char 
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  2    0[BANK0 ] int 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13530 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;Total ram usage:        9 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    5
 13537 ;; This function calls:
 13538 ;;		Nothing
 13539 ;; This function is called by:
 13540 ;;		_setBuz
 13541 ;; This function uses a non-reentrant model
 13542 ;;
 13543                           
 13544                           
 13545                           ;psect for function ___awdiv
 13546  1690                     ___awdiv:	
 13547                           
 13548                           ;incstack = 0
 13549                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13550  1690  0020               	movlb	0	; select bank0
 13551  1691  01A6               	clrf	___awdiv@sign
 13552  1692  1FA1               	btfss	___awdiv@divisor+1,7
 13553  1693  2E9B               	goto	l5654
 13554  1694  09A0               	comf	___awdiv@divisor,f
 13555  1695  09A1               	comf	___awdiv@divisor+1,f
 13556  1696  0AA0               	incf	___awdiv@divisor,f
 13557  1697  1903               	skipnz
 13558  1698  0AA1               	incf	___awdiv@divisor+1,f
 13559  1699  01A6               	clrf	___awdiv@sign
 13560  169A  0AA6               	incf	___awdiv@sign,f
 13561  169B                     l5654:	
 13562  169B  1FA3               	btfss	___awdiv@dividend+1,7
 13563  169C  2EA6               	goto	l5660
 13564  169D  09A2               	comf	___awdiv@dividend,f
 13565  169E  09A3               	comf	___awdiv@dividend+1,f
 13566  169F  0AA2               	incf	___awdiv@dividend,f
 13567  16A0  1903               	skipnz
 13568  16A1  0AA3               	incf	___awdiv@dividend+1,f
 13569  16A2  3001               	movlw	1
 13570  16A3  00A4               	movwf	??___awdiv
 13571  16A4  0824               	movf	??___awdiv,w
 13572  16A5  06A6               	xorwf	___awdiv@sign,f
 13573  16A6                     l5660:	
 13574  16A6  01A7               	clrf	___awdiv@quotient
 13575  16A7  01A8               	clrf	___awdiv@quotient+1
 13576  16A8  0821               	movf	___awdiv@divisor+1,w
 13577  16A9  0420               	iorwf	___awdiv@divisor,w
 13578  16AA  1903               	skipnz
 13579  16AB  2ED5               	goto	l5682
 13580  16AC  01A5               	clrf	___awdiv@counter
 13581  16AD  0AA5               	incf	___awdiv@counter,f
 13582  16AE                     l5670:	
 13583  16AE  1BA1               	btfsc	___awdiv@divisor+1,7
 13584  16AF  2EBA               	goto	l5672
 13585  16B0  3001               	movlw	1
 13586  16B1                     u4375:	
 13587  16B1  35A0               	lslf	___awdiv@divisor,f
 13588  16B2  0DA1               	rlf	___awdiv@divisor+1,f
 13589  16B3  0B89               	decfsz	9,f
 13590  16B4  2EB1               	goto	u4375
 13591  16B5  3001               	movlw	1
 13592  16B6  00A4               	movwf	??___awdiv
 13593  16B7  0824               	movf	??___awdiv,w
 13594  16B8  07A5               	addwf	___awdiv@counter,f
 13595  16B9  2EAE               	goto	l5670
 13596  16BA                     l5672:	
 13597  16BA  3001               	movlw	1
 13598  16BB                     u4395:	
 13599  16BB  35A7               	lslf	___awdiv@quotient,f
 13600  16BC  0DA8               	rlf	___awdiv@quotient+1,f
 13601  16BD  0B89               	decfsz	9,f
 13602  16BE  2EBB               	goto	u4395
 13603  16BF  0821               	movf	___awdiv@divisor+1,w
 13604  16C0  0223               	subwf	___awdiv@dividend+1,w
 13605  16C1  1D03               	skipz
 13606  16C2  2EC5               	goto	u4405
 13607  16C3  0820               	movf	___awdiv@divisor,w
 13608  16C4  0222               	subwf	___awdiv@dividend,w
 13609  16C5                     u4405:	
 13610  16C5  1C03               	skipc
 13611  16C6  2ECC               	goto	l5678
 13612  16C7  0820               	movf	___awdiv@divisor,w
 13613  16C8  02A2               	subwf	___awdiv@dividend,f
 13614  16C9  0821               	movf	___awdiv@divisor+1,w
 13615  16CA  3BA3               	subwfb	___awdiv@dividend+1,f
 13616  16CB  1427               	bsf	___awdiv@quotient,0
 13617  16CC                     l5678:	
 13618  16CC  3001               	movlw	1
 13619  16CD                     u4415:	
 13620  16CD  36A1               	lsrf	___awdiv@divisor+1,f
 13621  16CE  0CA0               	rrf	___awdiv@divisor,f
 13622  16CF  0B89               	decfsz	9,f
 13623  16D0  2ECD               	goto	u4415
 13624  16D1  3001               	movlw	1
 13625  16D2  02A5               	subwf	___awdiv@counter,f
 13626  16D3  1D03               	btfss	3,2
 13627  16D4  2EBA               	goto	l5672
 13628  16D5                     l5682:	
 13629  16D5  0826               	movf	___awdiv@sign,w
 13630  16D6  1903               	btfsc	3,2
 13631  16D7  2EDD               	goto	l5686
 13632  16D8  09A7               	comf	___awdiv@quotient,f
 13633  16D9  09A8               	comf	___awdiv@quotient+1,f
 13634  16DA  0AA7               	incf	___awdiv@quotient,f
 13635  16DB  1903               	skipnz
 13636  16DC  0AA8               	incf	___awdiv@quotient+1,f
 13637  16DD                     l5686:	
 13638  16DD  0828               	movf	___awdiv@quotient+1,w
 13639  16DE  01A1               	clrf	?___awdiv+1
 13640  16DF  07A1               	addwf	?___awdiv+1,f
 13641  16E0  0827               	movf	___awdiv@quotient,w
 13642  16E1  01A0               	clrf	?___awdiv
 13643  16E2  07A0               	addwf	?___awdiv,f
 13644  16E3  0008               	return
 13645  16E4                     __end_of___awdiv:	
 13646                           
 13647                           	psect	text79
 13648  1F47                     __ptext79:	
 13649 ;; *************** function _DimmerLights_Close *****************
 13650 ;; Defined at:
 13651 ;;		line 396 in file "../src/Dimmer_B1.c"
 13652 ;; Parameters:    Size  Location     Type
 13653 ;;		None
 13654 ;; Auto vars:     Size  Location     Type
 13655 ;;		None
 13656 ;; Return value:  Size  Location     Type
 13657 ;;		None               void
 13658 ;; Registers used:
 13659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13660 ;; Tracked objects:
 13661 ;;		On entry : 0/0
 13662 ;;		On exit  : 0/0
 13663 ;;		Unchanged: 0/0
 13664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;Total ram usage:        0 bytes
 13670 ;; Hardware stack levels used:    1
 13671 ;; Hardware stack levels required when called:    6
 13672 ;; This function calls:
 13673 ;;		_getDimmerLights_StatusFlag
 13674 ;;		_setMemory_GO
 13675 ;; This function is called by:
 13676 ;;		_DimmerLights_Main
 13677 ;; This function uses a non-reentrant model
 13678 ;;
 13679                           
 13680                           
 13681                           ;psect for function _DimmerLights_Close
 13682  1F47                     _DimmerLights_Close:	
 13683                           
 13684                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 13685                           
 13686                           ;incstack = 0
 13687                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13688  1F47  0021               	movlb	1	; select bank1
 13689  1F48  0839               	movf	_Dimmer^(0+128),w
 13690  1F49  0086               	movwf	6
 13691  1F4A  0187               	clrf	7
 13692  1F4B  1C01               	btfss	1,0
 13693  1F4C  0008               	return
 13694                           
 13695                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 13696  1F4D  0839               	movf	_Dimmer^(0+128),w
 13697  1F4E  0086               	movwf	6
 13698  1F4F  0187               	clrf	7
 13699  1F50  1001               	bcf	1,0
 13700                           
 13701                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 13702  1F51  319F  2734  319F   	fcall	_getDimmerLights_StatusFlag
 13703  1F54  3800               	iorlw	0
 13704  1F55  1D03               	skipz
 13705  1F56  0008               	return
 13706                           
 13707                           ;Dimmer_B1.c: 400: ;;
 13708                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 13709  1F57  3001               	movlw	1
 13710  1F58  3191  21A9         	fcall	_setMemory_GO
 13711  1F5A  0008               	return
 13712  1F5B                     __end_of_DimmerLights_Close:	
 13713                           
 13714                           	psect	text80
 13715  11A9                     __ptext80:	
 13716 ;; *************** function _setMemory_GO *****************
 13717 ;; Defined at:
 13718 ;;		line 882 in file "../src/MCU_B1.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;  command         1    wreg     unsigned char 
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;  command         1    2[BANK0 ] unsigned char 
 13723 ;; Return value:  Size  Location     Type
 13724 ;;		None               void
 13725 ;; Registers used:
 13726 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;Total ram usage:        3 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    5
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_DimmerLights_Close
 13743 ;;		_setDimmerLights
 13744 ;; This function uses a non-reentrant model
 13745 ;;
 13746                           
 13747                           
 13748                           ;psect for function _setMemory_GO
 13749  11A9                     _setMemory_GO:	
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _setMemory_GO: [wreg+fsr1l+fsr1h+status,2+status,0]
 13753                           ;setMemory_GO@command stored from wreg
 13754  11A9  0020               	movlb	0	; select bank0
 13755  11AA  00A2               	movwf	setMemory_GO@command
 13756                           
 13757                           ;MCU_B1.c: 883: Memory->GO = command;
 13758  11AB  0021               	movlb	1	; select bank1
 13759  11AC  086F               	movf	_Memory^(0+128),w
 13760  11AD  3E24               	addlw	36
 13761  11AE  0086               	movwf	6
 13762  11AF  3002               	movlw	2	; select bank4/5
 13763  11B0  0087               	movwf	7
 13764  11B1  0020               	movlb	0	; select bank0
 13765  11B2  0822               	movf	setMemory_GO@command,w
 13766  11B3  1081               	bcf	1,1
 13767  11B4  1D03               	skipz
 13768  11B5  1481               	bsf	1,1
 13769                           
 13770                           ;MCU_B1.c: 884: if (command == 0) {
 13771  11B6  08A2               	movf	setMemory_GO@command,f
 13772  11B7  1D03               	skipz
 13773  11B8  0008               	return
 13774                           
 13775                           ;MCU_B1.c: 885: Memory->Time = command;
 13776  11B9  0822               	movf	setMemory_GO@command,w
 13777  11BA  00A0               	movwf	??_setMemory_GO
 13778  11BB  01A1               	clrf	??_setMemory_GO+1
 13779  11BC  0021               	movlb	1	; select bank1
 13780  11BD  086F               	movf	_Memory^(0+128),w
 13781  11BE  3E22               	addlw	34
 13782  11BF  0086               	movwf	6
 13783  11C0  3002               	movlw	2	; select bank4/5
 13784  11C1  0087               	movwf	7
 13785  11C2  0020               	movlb	0	; select bank0
 13786  11C3  0820               	movf	??_setMemory_GO,w
 13787  11C4  3FC0               	movwi [0]fsr1
 13788  11C5  0821               	movf	??_setMemory_GO+1,w
 13789  11C6  3FC1               	movwi [1]fsr1
 13790  11C7  0008               	return
 13791  11C8                     __end_of_setMemory_GO:	
 13792                           
 13793                           	psect	text81
 13794  1F34                     __ptext81:	
 13795 ;; *************** function _getDimmerLights_StatusFlag *****************
 13796 ;; Defined at:
 13797 ;;		line 475 in file "../src/Dimmer_B1.c"
 13798 ;; Parameters:    Size  Location     Type
 13799 ;;		None
 13800 ;; Auto vars:     Size  Location     Type
 13801 ;;  Status          1    1[BANK0 ] unsigned char 
 13802 ;; Return value:  Size  Location     Type
 13803 ;;                  1    wreg      unsigned char 
 13804 ;; Registers used:
 13805 ;;		wreg, status,2
 13806 ;; Tracked objects:
 13807 ;;		On entry : 0/0
 13808 ;;		On exit  : 0/0
 13809 ;;		Unchanged: 0/0
 13810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;Total ram usage:        3 bytes
 13816 ;; Hardware stack levels used:    1
 13817 ;; Hardware stack levels required when called:    5
 13818 ;; This function calls:
 13819 ;;		Nothing
 13820 ;; This function is called by:
 13821 ;;		_DimmerLights_Close
 13822 ;;		_DimmerLights_Exceptions
 13823 ;; This function uses a non-reentrant model
 13824 ;;
 13825                           
 13826                           
 13827                           ;psect for function _getDimmerLights_StatusFlag
 13828  1F34                     _getDimmerLights_StatusFlag:	
 13829                           
 13830                           ;Dimmer_B1.c: 476: char Status = 0;
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13834  1F34  0020               	movlb	0	; select bank0
 13835  1F35  01A1               	clrf	getDimmerLights_StatusFlag@Status
 13836                           
 13837                           ;Dimmer_B1.c: 479: Status = (DimmerLights1.StatusFlag == 1 || DimmerLights2.StatusFlag =
      +                          = 1 || DimmerLights3.StatusFlag == 1) ? 1 : 0;
 13838  1F36  01A2               	clrf	_getDimmerLights_StatusFlag$1961
 13839  1F37  0AA2               	incf	_getDimmerLights_StatusFlag$1961,f
 13840  1F38  0022               	movlb	2	; select bank2
 13841  1F39  1F20               	btfss	_DimmerLights1^(0+256),6
 13842  1F3A  1B2F               	btfsc	_DimmerLights2^(0+256),6
 13843  1F3B  2F40               	goto	l6186
 13844  1F3C  1B3E               	btfsc	_DimmerLights3^(0+256),6
 13845  1F3D  2F40               	goto	l6186
 13846  1F3E  0020               	movlb	0	; select bank0
 13847  1F3F  01A2               	clrf	_getDimmerLights_StatusFlag$1961
 13848  1F40                     l6186:	
 13849  1F40  0020               	movlb	0	; select bank0
 13850  1F41  0822               	movf	_getDimmerLights_StatusFlag$1961,w
 13851  1F42  00A0               	movwf	??_getDimmerLights_StatusFlag
 13852  1F43  0820               	movf	??_getDimmerLights_StatusFlag,w
 13853  1F44  00A1               	movwf	getDimmerLights_StatusFlag@Status
 13854                           
 13855                           ;Dimmer_B1.c: 490: return Status;
 13856  1F45  0821               	movf	getDimmerLights_StatusFlag@Status,w
 13857  1F46  0008               	return
 13858  1F47                     __end_of_getDimmerLights_StatusFlag:	
 13859                           
 13860                           	psect	text82
 13861  1228                     __ptext82:	
 13862 ;; *************** function _DimmerLights_Initialization *****************
 13863 ;; Defined at:
 13864 ;;		line 334 in file "../src/Dimmer_B1.c"
 13865 ;; Parameters:    Size  Location     Type
 13866 ;;		None
 13867 ;; Auto vars:     Size  Location     Type
 13868 ;;		None
 13869 ;; Return value:  Size  Location     Type
 13870 ;;		None               void
 13871 ;; Registers used:
 13872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13873 ;; Tracked objects:
 13874 ;;		On entry : 0/0
 13875 ;;		On exit  : 0/0
 13876 ;;		Unchanged: 0/0
 13877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13882 ;;Total ram usage:        1 bytes
 13883 ;; Hardware stack levels used:    1
 13884 ;; Hardware stack levels required when called:    7
 13885 ;; This function calls:
 13886 ;;		_Dimmer_Initialization
 13887 ;;		_setDimmerLights_Initialization
 13888 ;; This function is called by:
 13889 ;;		_main
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           
 13894                           ;psect for function _DimmerLights_Initialization
 13895  1228                     _DimmerLights_Initialization:	
 13896                           
 13897                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13901  1228  3020               	movlw	_DimmerLights1& (0+255)
 13902  1229  0020               	movlb	0	; select bank0
 13903  122A  00A4               	movwf	??_DimmerLights_Initialization
 13904  122B  0824               	movf	??_DimmerLights_Initialization,w
 13905  122C  0021               	movlb	1	; select bank1
 13906  122D  00BA               	movwf	_DimmerLights11^(0+128)
 13907                           
 13908                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 13909  122E  3001               	movlw	1
 13910  122F  3193  232D  3192   	fcall	_setDimmerLights_Initialization
 13911                           
 13912                           ;Dimmer_B1.c: 342: DimmerLights22 = &DimmerLights2;
 13913  1232  302F               	movlw	_DimmerLights2& (0+255)
 13914  1233  0020               	movlb	0	; select bank0
 13915  1234  00A4               	movwf	??_DimmerLights_Initialization
 13916  1235  0824               	movf	??_DimmerLights_Initialization,w
 13917  1236  0021               	movlb	1	; select bank1
 13918  1237  00BB               	movwf	_DimmerLights22^(0+128)
 13919                           
 13920                           ;Dimmer_B1.c: 343: setDimmerLights_Initialization(2);
 13921  1238  3002               	movlw	2
 13922  1239  3193  232D  3192   	fcall	_setDimmerLights_Initialization
 13923                           
 13924                           ;Dimmer_B1.c: 347: DimmerLights33 = &DimmerLights3;
 13925  123C  303E               	movlw	_DimmerLights3& (0+255)
 13926  123D  0020               	movlb	0	; select bank0
 13927  123E  00A4               	movwf	??_DimmerLights_Initialization
 13928  123F  0824               	movf	??_DimmerLights_Initialization,w
 13929  1240  0021               	movlb	1	; select bank1
 13930  1241  00BC               	movwf	_DimmerLights33^(0+128)
 13931                           
 13932                           ;Dimmer_B1.c: 348: setDimmerLights_Initialization(3);
 13933  1242  3003               	movlw	3
 13934  1243  3193  232D  3192   	fcall	_setDimmerLights_Initialization
 13935                           
 13936                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 13937  1246  319D  25C0         	fcall	_Dimmer_Initialization
 13938  1248  0008               	return
 13939  1249                     __end_of_DimmerLights_Initialization:	
 13940                           
 13941                           	psect	text83
 13942  132D                     __ptext83:	
 13943 ;; *************** function _setDimmerLights_Initialization *****************
 13944 ;; Defined at:
 13945 ;;		line 357 in file "../src/Dimmer_B1.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  lights          1    wreg     unsigned char 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  lights          1    3[BANK0 ] unsigned char 
 13950 ;; Return value:  Size  Location     Type
 13951 ;;		None               void
 13952 ;; Registers used:
 13953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13963 ;;Total ram usage:        2 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; Hardware stack levels required when called:    6
 13966 ;; This function calls:
 13967 ;;		_DimmerLightsPointSelect
 13968 ;; This function is called by:
 13969 ;;		_DimmerLights_Initialization
 13970 ;; This function uses a non-reentrant model
 13971 ;;
 13972                           
 13973                           
 13974                           ;psect for function _setDimmerLights_Initialization
 13975  132D                     _setDimmerLights_Initialization:	
 13976                           
 13977                           ;incstack = 0
 13978                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13979                           ;setDimmerLights_Initialization@lights stored from wreg
 13980  132D  0020               	movlb	0	; select bank0
 13981  132E  00A3               	movwf	setDimmerLights_Initialization@lights
 13982                           
 13983                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13984  132F  0823               	movf	setDimmerLights_Initialization@lights,w
 13985  1330  3190  20A7         	fcall	_DimmerLightsPointSelect
 13986                           
 13987                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13988  1332  0878               	movf	_DimmerLights,w
 13989  1333  3E09               	addlw	9
 13990  1334  0086               	movwf	6
 13991  1335  3001               	movlw	1	; select bank2/3
 13992  1336  0087               	movwf	7
 13993  1337  1501               	bsf	1,2
 13994                           
 13995                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-95)*0.8));
 13996  1338  3004               	movlw	4
 13997  1339  0020               	movlb	0	; select bank0
 13998  133A  00A2               	movwf	??_setDimmerLights_Initialization
 13999  133B  0878               	movf	_DimmerLights,w
 14000  133C  3E05               	addlw	5
 14001  133D  0086               	movwf	6
 14002  133E  3001               	movlw	1	; select bank2/3
 14003  133F  0087               	movwf	7
 14004  1340  0822               	movf	??_setDimmerLights_Initialization,w
 14005  1341  0081               	movwf	1
 14006                           
 14007                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 14008  1342  303C               	movlw	60
 14009  1343  00A2               	movwf	??_setDimmerLights_Initialization
 14010  1344  0878               	movf	_DimmerLights,w
 14011  1345  3E06               	addlw	6
 14012  1346  0086               	movwf	6
 14013  1347  3001               	movlw	1	; select bank2/3
 14014  1348  0087               	movwf	7
 14015  1349  0822               	movf	??_setDimmerLights_Initialization,w
 14016  134A  0081               	movwf	1
 14017                           
 14018                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 14019  134B  0878               	movf	_DimmerLights,w
 14020  134C  3E06               	addlw	6
 14021  134D  0086               	movwf	6
 14022  134E  3001               	movlw	1	; select bank2/3
 14023  134F  0087               	movwf	7
 14024  1350  0801               	movf	1,w
 14025  1351  00A2               	movwf	??_setDimmerLights_Initialization
 14026  1352  0878               	movf	_DimmerLights,w
 14027  1353  3E04               	addlw	4
 14028  1354  0086               	movwf	6
 14029  1355  3001               	movlw	1	; select bank2/3
 14030  1356  0087               	movwf	7
 14031  1357  0822               	movf	??_setDimmerLights_Initialization,w
 14032  1358  0081               	movwf	1
 14033  1359  0008               	return
 14034  135A                     __end_of_setDimmerLights_Initialization:	
 14035                           
 14036                           	psect	text84
 14037  10A7                     __ptext84:	
 14038 ;; *************** function _DimmerLightsPointSelect *****************
 14039 ;; Defined at:
 14040 ;;		line 315 in file "../src/Dimmer_B1.c"
 14041 ;; Parameters:    Size  Location     Type
 14042 ;;  lights          1    wreg     unsigned char 
 14043 ;; Auto vars:     Size  Location     Type
 14044 ;;  lights          1    1[BANK0 ] unsigned char 
 14045 ;; Return value:  Size  Location     Type
 14046 ;;		None               void
 14047 ;; Registers used:
 14048 ;;		wreg
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14058 ;;Total ram usage:        2 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; Hardware stack levels required when called:    5
 14061 ;; This function calls:
 14062 ;;		Nothing
 14063 ;; This function is called by:
 14064 ;;		_setDimmerLights_Initialization
 14065 ;;		_setDimmerLights_Main
 14066 ;;		_setDimmerLights
 14067 ;;		_setDimmerLights_Adj
 14068 ;;		_setDimmerLights_AdjRF
 14069 ;;		_setDimmerLights_Switch
 14070 ;;		_setDimmerLights_AdjGo
 14071 ;;		_setDimmerLights_Trigger
 14072 ;;		_setDimmerLights_TriggerAdj
 14073 ;;		_setDimmerLights_ERROR
 14074 ;;		_setDimmerLights_TriggerERROR
 14075 ;;		_setDimmerLights_GO
 14076 ;;		_setDimmerLights_MaxmumValue
 14077 ;;		_setDimmerLights_Clear
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           
 14082                           ;psect for function _DimmerLightsPointSelect
 14083  10A7                     _DimmerLightsPointSelect:	
 14084                           
 14085                           ;incstack = 0
 14086                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14087                           ;DimmerLightsPointSelect@lights stored from wreg
 14088  10A7  0020               	movlb	0	; select bank0
 14089  10A8  00A1               	movwf	DimmerLightsPointSelect@lights
 14090                           
 14091                           ;Dimmer_B1.c: 317: if (lights == 1) {
 14092  10A9  0821               	movf	DimmerLightsPointSelect@lights,w
 14093  10AA  3A01               	xorlw	1
 14094  10AB  1D03               	skipz
 14095  10AC  28B1               	goto	l802
 14096                           
 14097                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 14098  10AD  3020               	movlw	_DimmerLights1& (0+255)
 14099  10AE  00A0               	movwf	??_DimmerLightsPointSelect
 14100  10AF  0820               	movf	??_DimmerLightsPointSelect,w
 14101  10B0  00F8               	movwf	_DimmerLights
 14102  10B1                     l802:	
 14103                           
 14104                           ;Dimmer_B1.c: 319: }
 14105                           ;Dimmer_B1.c: 322: if (lights == 2) {
 14106  10B1  0821               	movf	DimmerLightsPointSelect@lights,w
 14107  10B2  3A02               	xorlw	2
 14108  10B3  1D03               	skipz
 14109  10B4  28B9               	goto	l803
 14110                           
 14111                           ;Dimmer_B1.c: 323: DimmerLights = &DimmerLights2;
 14112  10B5  302F               	movlw	_DimmerLights2& (0+255)
 14113  10B6  00A0               	movwf	??_DimmerLightsPointSelect
 14114  10B7  0820               	movf	??_DimmerLightsPointSelect,w
 14115  10B8  00F8               	movwf	_DimmerLights
 14116  10B9                     l803:	
 14117                           
 14118                           ;Dimmer_B1.c: 324: }
 14119                           ;Dimmer_B1.c: 327: if (lights == 3) {
 14120  10B9  0821               	movf	DimmerLightsPointSelect@lights,w
 14121  10BA  3A03               	xorlw	3
 14122  10BB  1D03               	skipz
 14123  10BC  0008               	return
 14124                           
 14125                           ;Dimmer_B1.c: 328: DimmerLights = &DimmerLights3;
 14126  10BD  303E               	movlw	_DimmerLights3& (0+255)
 14127  10BE  00A0               	movwf	??_DimmerLightsPointSelect
 14128  10BF  0820               	movf	??_DimmerLightsPointSelect,w
 14129  10C0  00F8               	movwf	_DimmerLights
 14130  10C1  0008               	return
 14131  10C2                     __end_of_DimmerLightsPointSelect:	
 14132                           
 14133                           	psect	text85
 14134  1DC0                     __ptext85:	
 14135 ;; *************** function _Dimmer_Initialization *****************
 14136 ;; Defined at:
 14137 ;;		line 786 in file "../src/Dimmer_B1.c"
 14138 ;; Parameters:    Size  Location     Type
 14139 ;;		None
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;		None
 14142 ;; Return value:  Size  Location     Type
 14143 ;;		None               void
 14144 ;; Registers used:
 14145 ;;		wreg
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/0
 14148 ;;		On exit  : 0/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;Total ram usage:        1 bytes
 14156 ;; Hardware stack levels used:    1
 14157 ;; Hardware stack levels required when called:    5
 14158 ;; This function calls:
 14159 ;;		Nothing
 14160 ;; This function is called by:
 14161 ;;		_DimmerLights_Initialization
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           
 14166                           ;psect for function _Dimmer_Initialization
 14167  1DC0                     _Dimmer_Initialization:	
 14168                           
 14169                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 14170                           
 14171                           ;incstack = 0
 14172                           ; Regs used in _Dimmer_Initialization: [wreg]
 14173  1DC0  30E4               	movlw	_Dimmer1& (0+255)
 14174  1DC1  0020               	movlb	0	; select bank0
 14175  1DC2  00A0               	movwf	??_Dimmer_Initialization
 14176  1DC3  0820               	movf	??_Dimmer_Initialization,w
 14177  1DC4  0021               	movlb	1	; select bank1
 14178  1DC5  00B9               	movwf	_Dimmer^(0+128)
 14179  1DC6  0008               	return
 14180  1DC7                     __end_of_Dimmer_Initialization:	
 14181                           
 14182                           	psect	text86
 14183  1F6F                     __ptext86:	
 14184 ;; *************** function _CC2500_PowerOnInitial *****************
 14185 ;; Defined at:
 14186 ;;		line 111 in file "../src/CC2500_B1.c"
 14187 ;; Parameters:    Size  Location     Type
 14188 ;;		None
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;		None
 14191 ;; Return value:  Size  Location     Type
 14192 ;;		None               void
 14193 ;; Registers used:
 14194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : 0/0
 14197 ;;		On exit  : 0/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;Total ram usage:        0 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:    8
 14207 ;; This function calls:
 14208 ;;		_CC2500_ClearRXFIFO
 14209 ;;		_CC2500_ClearTXFIFO
 14210 ;;		_CC2500_FrequencyCabr
 14211 ;;		_CC2500_InitPATable
 14212 ;;		_CC2500_InitSetREG
 14213 ;;		_CC2500_PowerRST
 14214 ;;		_CC2500_SIDLEMode
 14215 ;; This function is called by:
 14216 ;;		_main
 14217 ;; This function uses a non-reentrant model
 14218 ;;
 14219                           
 14220                           
 14221                           ;psect for function _CC2500_PowerOnInitial
 14222  1F6F                     _CC2500_PowerOnInitial:	
 14223                           
 14224                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 14225                           
 14226                           ;incstack = 0
 14227                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14228  1F6F  3193  2387  319F   	fcall	_CC2500_PowerRST
 14229                           
 14230                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 14231  1F72  3193  2303  319F   	fcall	_CC2500_InitSetREG
 14232                           
 14233                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 14234  1F75  3191  218A  319F   	fcall	_CC2500_InitPATable
 14235                           
 14236                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 14237  1F78  319D  2595  319F   	fcall	_CC2500_ClearTXFIFO
 14238                           
 14239                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 14240  1F7B  319D  2591  319F   	fcall	_CC2500_ClearRXFIFO
 14241                           
 14242                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 14243  1F7E  319D  25F6  319F   	fcall	_CC2500_FrequencyCabr
 14244                           
 14245                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 14246  1F81  319D  2599         	fcall	_CC2500_SIDLEMode
 14247  1F83  0008               	return
 14248  1F84                     __end_of_CC2500_PowerOnInitial:	
 14249                           
 14250                           	psect	text87
 14251  1D99                     __ptext87:	
 14252 ;; *************** function _CC2500_SIDLEMode *****************
 14253 ;; Defined at:
 14254 ;;		line 195 in file "../src/CC2500_B1.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;		None
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;		None
 14259 ;; Return value:  Size  Location     Type
 14260 ;;		None               void
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, status,0, pclath, cstack
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;Total ram usage:        0 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    7
 14275 ;; This function calls:
 14276 ;;		_CC2500_WriteCommand
 14277 ;; This function is called by:
 14278 ;;		_CC2500_PowerOnInitial
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function _CC2500_SIDLEMode
 14284  1D99                     _CC2500_SIDLEMode:	
 14285                           
 14286                           ;CC2500_B1.c: 196: CC2500_WriteCommand(0x36);
 14287                           
 14288                           ;incstack = 0
 14289                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 14290  1D99  3036               	movlw	54
 14291  1D9A  319E  267F         	fcall	_CC2500_WriteCommand
 14292  1D9C  0008               	return
 14293  1D9D                     __end_of_CC2500_SIDLEMode:	
 14294                           
 14295                           	psect	text88
 14296  1387                     __ptext88:	
 14297 ;; *************** function _CC2500_PowerRST *****************
 14298 ;; Defined at:
 14299 ;;		line 124 in file "../src/CC2500_B1.c"
 14300 ;; Parameters:    Size  Location     Type
 14301 ;;		None
 14302 ;; Auto vars:     Size  Location     Type
 14303 ;;		None
 14304 ;; Return value:  Size  Location     Type
 14305 ;;		None               void
 14306 ;; Registers used:
 14307 ;;		wreg, status,2, status,0, pclath, cstack
 14308 ;; Tracked objects:
 14309 ;;		On entry : 0/0
 14310 ;;		On exit  : 0/0
 14311 ;;		Unchanged: 0/0
 14312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;Total ram usage:        1 bytes
 14318 ;; Hardware stack levels used:    1
 14319 ;; Hardware stack levels required when called:    6
 14320 ;; This function calls:
 14321 ;;		_CC2500_WriteByte
 14322 ;;		_DelayTime_1us
 14323 ;; This function is called by:
 14324 ;;		_CC2500_PowerOnInitial
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           
 14329                           ;psect for function _CC2500_PowerRST
 14330  1387                     _CC2500_PowerRST:	
 14331                           
 14332                           ;CC2500_B1.c: 125: RC1 = 0;
 14333                           
 14334                           ;incstack = 0
 14335                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 14336  1387  0020               	movlb	0	; select bank0
 14337  1388  108E               	bcf	14,1	;volatile
 14338                           
 14339                           ;CC2500_B1.c: 126: RC0 = 0;
 14340  1389  100E               	bcf	14,0	;volatile
 14341                           
 14342                           ;CC2500_B1.c: 127: RC4 = 1;
 14343  138A  160E               	bsf	14,4	;volatile
 14344                           
 14345                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 14346  138B  300A               	movlw	10
 14347  138C  00A0               	movwf	DelayTime_1us@count
 14348  138D  3000               	movlw	0
 14349  138E  00A1               	movwf	DelayTime_1us@count+1
 14350  138F  3192  228D  3193   	fcall	_DelayTime_1us
 14351                           
 14352                           ;CC2500_B1.c: 129: RC4 = 0;
 14353  1392  0020               	movlb	0	; select bank0
 14354  1393  120E               	bcf	14,4	;volatile
 14355                           
 14356                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 14357  1394  300A               	movlw	10
 14358  1395  00A0               	movwf	DelayTime_1us@count
 14359  1396  3000               	movlw	0
 14360  1397  00A1               	movwf	DelayTime_1us@count+1
 14361  1398  3192  228D  3193   	fcall	_DelayTime_1us
 14362                           
 14363                           ;CC2500_B1.c: 131: RC4 = 1;
 14364  139B  0020               	movlb	0	; select bank0
 14365  139C  160E               	bsf	14,4	;volatile
 14366                           
 14367                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 14368  139D  3028               	movlw	40
 14369  139E  00A0               	movwf	DelayTime_1us@count
 14370  139F  3000               	movlw	0
 14371  13A0  00A1               	movwf	DelayTime_1us@count+1
 14372  13A1  3192  228D  3193   	fcall	_DelayTime_1us
 14373                           
 14374                           ;CC2500_B1.c: 133: RC4 = 0;
 14375  13A4  0020               	movlb	0	; select bank0
 14376  13A5  120E               	bcf	14,4	;volatile
 14377                           
 14378                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 14379  13A6  3030               	movlw	48
 14380  13A7  00A6               	movwf	??_CC2500_PowerRST
 14381  13A8  0826               	movf	??_CC2500_PowerRST,w
 14382  13A9  0021               	movlb	1	; select bank1
 14383  13AA  00C2               	movwf	_SPI0Buffer^(0+128)
 14384  13AB                     l318:	
 14385                           ;CC2500_B1.c: 135: while (RC2 == 1);
 14386                           
 14387  13AB  0020               	movlb	0	; select bank0
 14388  13AC  190E               	btfsc	14,2	;volatile
 14389  13AD  2BAB               	goto	l318
 14390                           
 14391                           ;CC2500_B1.c: 136: CC2500_WriteByte();
 14392  13AE  319F  27B4  3193   	fcall	_CC2500_WriteByte
 14393  13B1                     l321:	
 14394                           ;CC2500_B1.c: 137: while (RC2 == 1);
 14395                           
 14396  13B1  0020               	movlb	0	; select bank0
 14397  13B2  190E               	btfsc	14,2	;volatile
 14398  13B3  2BB1               	goto	l321
 14399                           
 14400                           ;CC2500_B1.c: 138: RC0 = 0;
 14401  13B4  100E               	bcf	14,0	;volatile
 14402                           
 14403                           ;CC2500_B1.c: 139: RC4 = 1;
 14404  13B5  160E               	bsf	14,4	;volatile
 14405  13B6  0008               	return
 14406  13B7                     __end_of_CC2500_PowerRST:	
 14407                           
 14408                           	psect	text89
 14409  1303                     __ptext89:	
 14410 ;; *************** function _CC2500_InitSetREG *****************
 14411 ;; Defined at:
 14412 ;;		line 145 in file "../src/CC2500_B1.c"
 14413 ;; Parameters:    Size  Location     Type
 14414 ;;		None
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;  loop_c          1    8[BANK0 ] unsigned char 
 14417 ;;  temp2           1    7[BANK0 ] unsigned char 
 14418 ;;  temp1           1    6[BANK0 ] unsigned char 
 14419 ;; Return value:  Size  Location     Type
 14420 ;;		None               void
 14421 ;; Registers used:
 14422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14423 ;; Tracked objects:
 14424 ;;		On entry : 0/0
 14425 ;;		On exit  : 0/0
 14426 ;;		Unchanged: 0/0
 14427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14431 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14432 ;;Total ram usage:        4 bytes
 14433 ;; Hardware stack levels used:    1
 14434 ;; Hardware stack levels required when called:    7
 14435 ;; This function calls:
 14436 ;;		_CC2500_WriteREG
 14437 ;; This function is called by:
 14438 ;;		_CC2500_PowerOnInitial
 14439 ;; This function uses a non-reentrant model
 14440 ;;
 14441                           
 14442                           
 14443                           ;psect for function _CC2500_InitSetREG
 14444  1303                     _CC2500_InitSetREG:	
 14445                           
 14446                           ;CC2500_B1.c: 146: unsigned char loop_c;
 14447                           ;CC2500_B1.c: 147: unsigned char temp1, temp2;
 14448                           ;CC2500_B1.c: 149: for (loop_c = 0; loop_c < 47; loop_c++) {
 14449                           
 14450                           ;incstack = 0
 14451                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14452  1303  0020               	movlb	0	; select bank0
 14453  1304  01A8               	clrf	CC2500_InitSetREG@loop_c
 14454  1305                     L9:	
 14455  1305  302F               	movlw	47
 14456  1306  0228               	subwf	CC2500_InitSetREG@loop_c,w
 14457  1307  1803               	btfsc	3,0
 14458  1308  0008               	return
 14459                           
 14460                           ;CC2500_B1.c: 150: temp1 = CC2500_registers_address[loop_c];
 14461  1309  0828               	movf	CC2500_InitSetREG@loop_c,w
 14462  130A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 14463  130B  0084               	movwf	4
 14464  130C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 14465  130D  1803               	skipnc
 14466  130E  3E01               	addlw	1
 14467  130F  0085               	movwf	5
 14468  1310  0800               	movf	0,w	;code access
 14469  1311  00A5               	movwf	??_CC2500_InitSetREG
 14470  1312  0825               	movf	??_CC2500_InitSetREG,w
 14471  1313  00A6               	movwf	CC2500_InitSetREG@temp1
 14472                           
 14473                           ;CC2500_B1.c: 151: temp2 = CC2500_rfSettings[loop_c];
 14474  1314  0828               	movf	CC2500_InitSetREG@loop_c,w
 14475  1315  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 14476  1316  0084               	movwf	4
 14477  1317  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 14478  1318  1803               	skipnc
 14479  1319  3E01               	addlw	1
 14480  131A  0085               	movwf	5
 14481  131B  0800               	movf	0,w	;code access
 14482  131C  00A5               	movwf	??_CC2500_InitSetREG
 14483  131D  0825               	movf	??_CC2500_InitSetREG,w
 14484  131E  00A7               	movwf	CC2500_InitSetREG@temp2
 14485                           
 14486                           ;CC2500_B1.c: 153: CC2500_WriteREG(temp1, temp2);
 14487  131F  0827               	movf	CC2500_InitSetREG@temp2,w
 14488  1320  00A5               	movwf	??_CC2500_InitSetREG
 14489  1321  0825               	movf	??_CC2500_InitSetREG,w
 14490  1322  00A2               	movwf	CC2500_WriteREG@value
 14491  1323  0826               	movf	CC2500_InitSetREG@temp1,w
 14492  1324  319F  27CD  3193   	fcall	_CC2500_WriteREG
 14493  1327  3001               	movlw	1
 14494  1328  0020               	movlb	0	; select bank0
 14495  1329  00A5               	movwf	??_CC2500_InitSetREG
 14496  132A  0825               	movf	??_CC2500_InitSetREG,w
 14497  132B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 14498  132C  2B05               	goto	L9
 14499  132D                     __end_of_CC2500_InitSetREG:	
 14500                           
 14501                           	psect	text90
 14502  118A                     __ptext90:	
 14503 ;; *************** function _CC2500_InitPATable *****************
 14504 ;; Defined at:
 14505 ;;		line 160 in file "../src/CC2500_B1.c"
 14506 ;; Parameters:    Size  Location     Type
 14507 ;;		None
 14508 ;; Auto vars:     Size  Location     Type
 14509 ;;  loop_d          1    7[BANK0 ] unsigned char 
 14510 ;;  temp            1    6[BANK0 ] unsigned char 
 14511 ;; Return value:  Size  Location     Type
 14512 ;;		None               void
 14513 ;; Registers used:
 14514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14524 ;;Total ram usage:        3 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; Hardware stack levels required when called:    7
 14527 ;; This function calls:
 14528 ;;		_CC2500_WriteREG
 14529 ;; This function is called by:
 14530 ;;		_CC2500_PowerOnInitial
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           
 14535                           ;psect for function _CC2500_InitPATable
 14536  118A                     _CC2500_InitPATable:	
 14537                           
 14538                           ;CC2500_B1.c: 161: unsigned char loop_d;
 14539                           ;CC2500_B1.c: 162: unsigned char temp;
 14540                           ;CC2500_B1.c: 164: for (loop_d = 0; loop_d < 8; loop_d++) {
 14541                           
 14542                           ;incstack = 0
 14543                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14544  118A  0020               	movlb	0	; select bank0
 14545  118B  01A7               	clrf	CC2500_InitPATable@loop_d
 14546  118C                     L10:	
 14547  118C  3008               	movlw	8
 14548  118D  0227               	subwf	CC2500_InitPATable@loop_d,w
 14549  118E  1803               	btfsc	3,0
 14550  118F  0008               	return
 14551                           
 14552                           ;CC2500_B1.c: 165: temp = CC2500_patable_vaule[loop_d];
 14553  1190  0827               	movf	CC2500_InitPATable@loop_d,w
 14554  1191  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 14555  1192  0084               	movwf	4
 14556  1193  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 14557  1194  1803               	skipnc
 14558  1195  3E01               	addlw	1
 14559  1196  0085               	movwf	5
 14560  1197  0800               	movf	0,w	;code access
 14561  1198  00A5               	movwf	??_CC2500_InitPATable
 14562  1199  0825               	movf	??_CC2500_InitPATable,w
 14563  119A  00A6               	movwf	CC2500_InitPATable@temp
 14564                           
 14565                           ;CC2500_B1.c: 166: CC2500_WriteREG(0x3E, temp);
 14566  119B  0826               	movf	CC2500_InitPATable@temp,w
 14567  119C  00A5               	movwf	??_CC2500_InitPATable
 14568  119D  0825               	movf	??_CC2500_InitPATable,w
 14569  119E  00A2               	movwf	CC2500_WriteREG@value
 14570  119F  303E               	movlw	62
 14571  11A0  319F  27CD  3191   	fcall	_CC2500_WriteREG
 14572  11A3  3001               	movlw	1
 14573  11A4  0020               	movlb	0	; select bank0
 14574  11A5  00A5               	movwf	??_CC2500_InitPATable
 14575  11A6  0825               	movf	??_CC2500_InitPATable,w
 14576  11A7  07A7               	addwf	CC2500_InitPATable@loop_d,f
 14577  11A8  298C               	goto	L10
 14578  11A9                     __end_of_CC2500_InitPATable:	
 14579                           
 14580                           	psect	text91
 14581  1FCD                     __ptext91:	
 14582 ;; *************** function _CC2500_WriteREG *****************
 14583 ;; Defined at:
 14584 ;;		line 237 in file "../src/CC2500_B1.c"
 14585 ;; Parameters:    Size  Location     Type
 14586 ;;  w_addr          1    wreg     unsigned char 
 14587 ;;  value           1    2[BANK0 ] unsigned char 
 14588 ;; Auto vars:     Size  Location     Type
 14589 ;;  w_addr          1    4[BANK0 ] unsigned char 
 14590 ;; Return value:  Size  Location     Type
 14591 ;;		None               void
 14592 ;; Registers used:
 14593 ;;		wreg, status,2, status,0, pclath, cstack
 14594 ;; Tracked objects:
 14595 ;;		On entry : 0/0
 14596 ;;		On exit  : 0/0
 14597 ;;		Unchanged: 0/0
 14598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14599 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14600 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;Total ram usage:        3 bytes
 14604 ;; Hardware stack levels used:    1
 14605 ;; Hardware stack levels required when called:    6
 14606 ;; This function calls:
 14607 ;;		_CC2500_WriteByte
 14608 ;; This function is called by:
 14609 ;;		_CC2500_InitSetREG
 14610 ;;		_CC2500_InitPATable
 14611 ;; This function uses a non-reentrant model
 14612 ;;
 14613                           
 14614                           
 14615                           ;psect for function _CC2500_WriteREG
 14616  1FCD                     _CC2500_WriteREG:	
 14617                           
 14618                           ;incstack = 0
 14619                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 14620                           ;CC2500_WriteREG@w_addr stored from wreg
 14621  1FCD  0020               	movlb	0	; select bank0
 14622  1FCE  00A4               	movwf	CC2500_WriteREG@w_addr
 14623                           
 14624                           ;CC2500_B1.c: 238: RC4 = 0;
 14625  1FCF  120E               	bcf	14,4	;volatile
 14626                           
 14627                           ;CC2500_B1.c: 239: SPI0Buffer = w_addr;
 14628  1FD0  0824               	movf	CC2500_WriteREG@w_addr,w
 14629  1FD1  00A3               	movwf	??_CC2500_WriteREG
 14630  1FD2  0823               	movf	??_CC2500_WriteREG,w
 14631  1FD3  0021               	movlb	1	; select bank1
 14632  1FD4  00C2               	movwf	_SPI0Buffer^(0+128)
 14633  1FD5                     l363:	
 14634                           ;CC2500_B1.c: 240: while (RC2 == 1);
 14635                           
 14636  1FD5  0020               	movlb	0	; select bank0
 14637  1FD6  190E               	btfsc	14,2	;volatile
 14638  1FD7  2FD5               	goto	l363
 14639                           
 14640                           ;CC2500_B1.c: 241: CC2500_WriteByte();
 14641  1FD8  319F  27B4  319F   	fcall	_CC2500_WriteByte
 14642                           
 14643                           ;CC2500_B1.c: 242: SPI0Buffer = value;
 14644  1FDB  0020               	movlb	0	; select bank0
 14645  1FDC  0822               	movf	CC2500_WriteREG@value,w
 14646  1FDD  00A3               	movwf	??_CC2500_WriteREG
 14647  1FDE  0823               	movf	??_CC2500_WriteREG,w
 14648  1FDF  0021               	movlb	1	; select bank1
 14649  1FE0  00C2               	movwf	_SPI0Buffer^(0+128)
 14650                           
 14651                           ;CC2500_B1.c: 243: CC2500_WriteByte();
 14652  1FE1  319F  27B4         	fcall	_CC2500_WriteByte
 14653                           
 14654                           ;CC2500_B1.c: 244: RC4 = 1;
 14655  1FE3  0020               	movlb	0	; select bank0
 14656  1FE4  160E               	bsf	14,4	;volatile
 14657  1FE5  0008               	return
 14658  1FE6                     __end_of_CC2500_WriteREG:	
 14659                           
 14660                           	psect	text92
 14661  1DF6                     __ptext92:	
 14662 ;; *************** function _CC2500_FrequencyCabr *****************
 14663 ;; Defined at:
 14664 ;;		line 187 in file "../src/CC2500_B1.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;		None
 14667 ;; Auto vars:     Size  Location     Type
 14668 ;;		None
 14669 ;; Return value:  Size  Location     Type
 14670 ;;		None               void
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0, pclath, cstack
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;Total ram usage:        0 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    7
 14685 ;; This function calls:
 14686 ;;		_CC2500_WriteCommand
 14687 ;;		_DelayTime_1us
 14688 ;; This function is called by:
 14689 ;;		_CC2500_PowerOnInitial
 14690 ;; This function uses a non-reentrant model
 14691 ;;
 14692                           
 14693                           
 14694                           ;psect for function _CC2500_FrequencyCabr
 14695  1DF6                     _CC2500_FrequencyCabr:	
 14696                           
 14697                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x33);
 14698                           
 14699                           ;incstack = 0
 14700                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 14701  1DF6  3033               	movlw	51
 14702  1DF7  319E  267F  319D   	fcall	_CC2500_WriteCommand
 14703                           
 14704                           ;CC2500_B1.c: 189: DelayTime_1us(1000);
 14705  1DFA  30E8               	movlw	232
 14706  1DFB  0020               	movlb	0	; select bank0
 14707  1DFC  00A0               	movwf	DelayTime_1us@count
 14708  1DFD  3003               	movlw	3
 14709  1DFE  00A1               	movwf	DelayTime_1us@count+1
 14710  1DFF  3192  228D         	fcall	_DelayTime_1us
 14711  1E01  0008               	return
 14712  1E02                     __end_of_CC2500_FrequencyCabr:	
 14713                           
 14714                           	psect	text93
 14715  128D                     __ptext93:	
 14716 ;; *************** function _DelayTime_1us *****************
 14717 ;; Defined at:
 14718 ;;		line 293 in file "../src/CC2500_B1.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  count           2    0[BANK0 ] int 
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  j               2    4[BANK0 ] unsigned int 
 14723 ;;  i               2    2[BANK0 ] unsigned int 
 14724 ;; Return value:  Size  Location     Type
 14725 ;;		None               void
 14726 ;; Registers used:
 14727 ;;		wreg, status,2
 14728 ;; Tracked objects:
 14729 ;;		On entry : 0/0
 14730 ;;		On exit  : 0/0
 14731 ;;		Unchanged: 0/0
 14732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14736 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14737 ;;Total ram usage:        6 bytes
 14738 ;; Hardware stack levels used:    1
 14739 ;; Hardware stack levels required when called:    5
 14740 ;; This function calls:
 14741 ;;		Nothing
 14742 ;; This function is called by:
 14743 ;;		_CC2500_PowerRST
 14744 ;;		_CC2500_FrequencyCabr
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           
 14749                           ;psect for function _DelayTime_1us
 14750  128D                     _DelayTime_1us:	
 14751                           
 14752                           ;CC2500_B1.c: 294: unsigned int i, j;
 14753                           ;CC2500_B1.c: 295: for (i = 1; i < count; i++)
 14754                           
 14755                           ;incstack = 0
 14756                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 14757  128D  3001               	movlw	1
 14758  128E  0020               	movlb	0	; select bank0
 14759  128F  00A2               	movwf	DelayTime_1us@i
 14760  1290  3000               	movlw	0
 14761  1291  00A3               	movwf	DelayTime_1us@i+1
 14762  1292                     l387:	
 14763  1292  0821               	movf	DelayTime_1us@count+1,w
 14764  1293  0223               	subwf	DelayTime_1us@i+1,w
 14765  1294  1D03               	skipz
 14766  1295  2A98               	goto	u5115
 14767  1296  0820               	movf	DelayTime_1us@count,w
 14768  1297  0222               	subwf	DelayTime_1us@i,w
 14769  1298                     u5115:	
 14770  1298  1803               	btfsc	3,0
 14771  1299  0008               	return
 14772                           
 14773                           ;CC2500_B1.c: 296: for (j = 0; j <= 1; j++);
 14774  129A  01A4               	clrf	DelayTime_1us@j
 14775  129B  01A5               	clrf	DelayTime_1us@j+1
 14776  129C  3000               	movlw	0
 14777  129D  0225               	subwf	DelayTime_1us@j+1,w
 14778  129E  3002               	movlw	2
 14779  129F  1903               	skipnz
 14780  12A0  0224               	subwf	DelayTime_1us@j,w
 14781  12A1  1803               	btfsc	3,0
 14782  12A2  2AAE               	goto	l6144
 14783  12A3                     l6142:	
 14784  12A3  3001               	movlw	1
 14785  12A4  07A4               	addwf	DelayTime_1us@j,f
 14786  12A5  3000               	movlw	0
 14787  12A6  3DA5               	addwfc	DelayTime_1us@j+1,f
 14788  12A7  3000               	movlw	0
 14789  12A8  0225               	subwf	DelayTime_1us@j+1,w
 14790  12A9  3002               	movlw	2
 14791  12AA  1903               	skipnz
 14792  12AB  0224               	subwf	DelayTime_1us@j,w
 14793  12AC  1C03               	skipc
 14794  12AD  2AA3               	goto	l6142
 14795  12AE                     l6144:	
 14796  12AE  3001               	movlw	1
 14797  12AF  07A2               	addwf	DelayTime_1us@i,f
 14798  12B0  3000               	movlw	0
 14799  12B1  3DA3               	addwfc	DelayTime_1us@i+1,f
 14800  12B2  2A92               	goto	l387
 14801  12B3                     __end_of_DelayTime_1us:	
 14802                           
 14803                           	psect	text94
 14804  1D95                     __ptext94:	
 14805 ;; *************** function _CC2500_ClearTXFIFO *****************
 14806 ;; Defined at:
 14807 ;;		line 173 in file "../src/CC2500_B1.c"
 14808 ;; Parameters:    Size  Location     Type
 14809 ;;		None
 14810 ;; Auto vars:     Size  Location     Type
 14811 ;;		None
 14812 ;; Return value:  Size  Location     Type
 14813 ;;		None               void
 14814 ;; Registers used:
 14815 ;;		wreg, status,2, status,0, pclath, cstack
 14816 ;; Tracked objects:
 14817 ;;		On entry : 0/0
 14818 ;;		On exit  : 0/0
 14819 ;;		Unchanged: 0/0
 14820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;Total ram usage:        0 bytes
 14826 ;; Hardware stack levels used:    1
 14827 ;; Hardware stack levels required when called:    7
 14828 ;; This function calls:
 14829 ;;		_CC2500_WriteCommand
 14830 ;; This function is called by:
 14831 ;;		_CC2500_PowerOnInitial
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           
 14836                           ;psect for function _CC2500_ClearTXFIFO
 14837  1D95                     _CC2500_ClearTXFIFO:	
 14838                           
 14839                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x3B);
 14840                           
 14841                           ;incstack = 0
 14842                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 14843  1D95  303B               	movlw	59
 14844  1D96  319E  267F         	fcall	_CC2500_WriteCommand
 14845  1D98  0008               	return
 14846  1D99                     __end_of_CC2500_ClearTXFIFO:	
 14847                           
 14848                           	psect	text95
 14849  1D91                     __ptext95:	
 14850 ;; *************** function _CC2500_ClearRXFIFO *****************
 14851 ;; Defined at:
 14852 ;;		line 180 in file "../src/CC2500_B1.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;		None
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;		None
 14857 ;; Return value:  Size  Location     Type
 14858 ;;		None               void
 14859 ;; Registers used:
 14860 ;;		wreg, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        0 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:    7
 14873 ;; This function calls:
 14874 ;;		_CC2500_WriteCommand
 14875 ;; This function is called by:
 14876 ;;		_CC2500_PowerOnInitial
 14877 ;; This function uses a non-reentrant model
 14878 ;;
 14879                           
 14880                           
 14881                           ;psect for function _CC2500_ClearRXFIFO
 14882  1D91                     _CC2500_ClearRXFIFO:	
 14883                           
 14884                           ;CC2500_B1.c: 181: CC2500_WriteCommand(0x3A);
 14885                           
 14886                           ;incstack = 0
 14887                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 14888  1D91  303A               	movlw	58
 14889  1D92  319E  267F         	fcall	_CC2500_WriteCommand
 14890  1D94  0008               	return
 14891  1D95                     __end_of_CC2500_ClearRXFIFO:	
 14892                           
 14893                           	psect	text96
 14894  1E7F                     __ptext96:	
 14895 ;; *************** function _CC2500_WriteCommand *****************
 14896 ;; Defined at:
 14897 ;;		line 263 in file "../src/CC2500_B1.c"
 14898 ;; Parameters:    Size  Location     Type
 14899 ;;  command         1    wreg     unsigned char 
 14900 ;; Auto vars:     Size  Location     Type
 14901 ;;  command         1    3[BANK0 ] unsigned char 
 14902 ;; Return value:  Size  Location     Type
 14903 ;;		None               void
 14904 ;; Registers used:
 14905 ;;		wreg, status,2, status,0, pclath, cstack
 14906 ;; Tracked objects:
 14907 ;;		On entry : 0/0
 14908 ;;		On exit  : 0/0
 14909 ;;		Unchanged: 0/0
 14910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;Total ram usage:        2 bytes
 14916 ;; Hardware stack levels used:    1
 14917 ;; Hardware stack levels required when called:    6
 14918 ;; This function calls:
 14919 ;;		_CC2500_WriteByte
 14920 ;; This function is called by:
 14921 ;;		_CC2500_TxData
 14922 ;;		_CC2500_RxData
 14923 ;;		_CC2500_ClearTXFIFO
 14924 ;;		_CC2500_ClearRXFIFO
 14925 ;;		_CC2500_FrequencyCabr
 14926 ;;		_CC2500_SIDLEMode
 14927 ;;		_setRF_Main
 14928 ;;		_RF_RxDisable
 14929 ;; This function uses a non-reentrant model
 14930 ;;
 14931                           
 14932                           
 14933                           ;psect for function _CC2500_WriteCommand
 14934  1E7F                     _CC2500_WriteCommand:	
 14935                           
 14936                           ;incstack = 0
 14937                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 14938                           ;CC2500_WriteCommand@command stored from wreg
 14939  1E7F  0020               	movlb	0	; select bank0
 14940  1E80  00A3               	movwf	CC2500_WriteCommand@command
 14941                           
 14942                           ;CC2500_B1.c: 264: RC4 = 0;
 14943  1E81  120E               	bcf	14,4	;volatile
 14944                           
 14945                           ;CC2500_B1.c: 265: SPI0Buffer = command;
 14946  1E82  0823               	movf	CC2500_WriteCommand@command,w
 14947  1E83  00A2               	movwf	??_CC2500_WriteCommand
 14948  1E84  0822               	movf	??_CC2500_WriteCommand,w
 14949  1E85  0021               	movlb	1	; select bank1
 14950  1E86  00C2               	movwf	_SPI0Buffer^(0+128)
 14951  1E87                     l375:	
 14952                           ;CC2500_B1.c: 267: while (RC2 == 1);
 14953                           
 14954  1E87  0020               	movlb	0	; select bank0
 14955  1E88  190E               	btfsc	14,2	;volatile
 14956  1E89  2E87               	goto	l375
 14957                           
 14958                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 14959  1E8A  319F  27B4         	fcall	_CC2500_WriteByte
 14960                           
 14961                           ;CC2500_B1.c: 270: RC4 = 1;
 14962  1E8C  0020               	movlb	0	; select bank0
 14963  1E8D  160E               	bsf	14,4	;volatile
 14964  1E8E  0008               	return
 14965  1E8F                     __end_of_CC2500_WriteCommand:	
 14966                           
 14967                           	psect	text97
 14968  1FB4                     __ptext97:	
 14969 ;; *************** function _CC2500_WriteByte *****************
 14970 ;; Defined at:
 14971 ;;		line 205 in file "../src/CC2500_B1.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;		None
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  loop_a          1    1[BANK0 ] unsigned char 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;		None               void
 14978 ;; Registers used:
 14979 ;;		wreg, status,2, status,0
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        2 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    5
 14992 ;; This function calls:
 14993 ;;		Nothing
 14994 ;; This function is called by:
 14995 ;;		_CC2500_TxData
 14996 ;;		_CC2500_RxData
 14997 ;;		_CC2500_PowerRST
 14998 ;;		_CC2500_WriteREG
 14999 ;;		_CC2500_WriteCommand
 15000 ;;		_CC2500_ReadStatus
 15001 ;;		_CC2500_ReadREG
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           
 15006                           ;psect for function _CC2500_WriteByte
 15007  1FB4                     _CC2500_WriteByte:	
 15008                           
 15009                           ;CC2500_B1.c: 206: unsigned char loop_a;
 15010                           ;CC2500_B1.c: 207: for (loop_a = 0; loop_a < 8; loop_a++) {
 15011                           
 15012                           ;incstack = 0
 15013                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 15014  1FB4  0020               	movlb	0	; select bank0
 15015  1FB5  01A1               	clrf	CC2500_WriteByte@loop_a
 15016  1FB6                     L11:	
 15017  1FB6  3008               	movlw	8
 15018  1FB7  0221               	subwf	CC2500_WriteByte@loop_a,w
 15019  1FB8  1803               	btfsc	3,0
 15020  1FB9  0008               	return
 15021                           
 15022                           ;CC2500_B1.c: 208: if (SPI0Buffer & 0x80)
 15023  1FBA  0021               	movlb	1	; select bank1
 15024  1FBB  1FC2               	btfss	_SPI0Buffer^(0+128),7
 15025  1FBC  2FC0               	goto	l351
 15026                           
 15027                           ;CC2500_B1.c: 209: RC0 = 1;
 15028  1FBD  0020               	movlb	0	; select bank0
 15029  1FBE  140E               	bsf	14,0	;volatile
 15030  1FBF  2FC2               	goto	l352
 15031  1FC0                     l351:	
 15032                           
 15033                           ;CC2500_B1.c: 210: else
 15034                           ;CC2500_B1.c: 211: RC0 = 0;
 15035  1FC0  0020               	movlb	0	; select bank0
 15036  1FC1  100E               	bcf	14,0	;volatile
 15037  1FC2                     l352:	
 15038                           
 15039                           ;CC2500_B1.c: 212: RC1 = 1;
 15040  1FC2  148E               	bsf	14,1	;volatile
 15041                           
 15042                           ;CC2500_B1.c: 213: SPI0Buffer <<= 1;
 15043  1FC3  1003               	clrc
 15044  1FC4  0021               	movlb	1	; select bank1
 15045  1FC5  0DC2               	rlf	_SPI0Buffer^(0+128),f
 15046                           
 15047                           ;CC2500_B1.c: 214: RC1 = 0;
 15048  1FC6  0020               	movlb	0	; select bank0
 15049  1FC7  108E               	bcf	14,1	;volatile
 15050  1FC8  3001               	movlw	1
 15051  1FC9  00A0               	movwf	??_CC2500_WriteByte
 15052  1FCA  0820               	movf	??_CC2500_WriteByte,w
 15053  1FCB  07A1               	addwf	CC2500_WriteByte@loop_a,f
 15054  1FCC  2FB6               	goto	L11
 15055  1FCD                     __end_of_CC2500_WriteByte:	
 15056                           
 15057                           	psect	text98
 15058  063E                     __ptext98:	
 15059 ;; *************** function _Buzzer_Main *****************
 15060 ;; Defined at:
 15061 ;;		line 55 in file "../src/Buzzer_B1.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;		None
 15064 ;; Auto vars:     Size  Location     Type
 15065 ;;		None
 15066 ;; Return value:  Size  Location     Type
 15067 ;;		None               void
 15068 ;; Registers used:
 15069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15070 ;; Tracked objects:
 15071 ;;		On entry : 0/0
 15072 ;;		On exit  : 0/0
 15073 ;;		Unchanged: 0/0
 15074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;Total ram usage:        4 bytes
 15080 ;; Hardware stack levels used:    1
 15081 ;; Hardware stack levels required when called:    5
 15082 ;; This function calls:
 15083 ;;		Nothing
 15084 ;; This function is called by:
 15085 ;;		_main
 15086 ;; This function uses a non-reentrant model
 15087 ;;
 15088                           
 15089                           
 15090                           ;psect for function _Buzzer_Main
 15091  063E                     _Buzzer_Main:	
 15092                           
 15093                           ;Buzzer_B1.c: 56: Buz = &Buz1;
 15094                           
 15095                           ;incstack = 0
 15096                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 15097  063E  304D               	movlw	_Buz1& (0+255)
 15098  063F  0020               	movlb	0	; select bank0
 15099  0640  00A0               	movwf	??_Buzzer_Main
 15100  0641  0820               	movf	??_Buzzer_Main,w
 15101  0642  0021               	movlb	1	; select bank1
 15102  0643  00B7               	movwf	_Buz^(0+128)
 15103                           
 15104                           ;Buzzer_B1.c: 57: if (Buz->GO == 1) {
 15105  0644  0837               	movf	_Buz^(0+128),w
 15106  0645  0086               	movwf	6
 15107  0646  3001               	movlw	1	; select bank2/3
 15108  0647  0087               	movwf	7
 15109  0648  1C81               	btfss	1,1
 15110  0649  0008               	return
 15111                           
 15112                           ;Buzzer_B1.c: 58: Buz->Counter++;
 15113  064A  0A37               	incf	_Buz^(0+128),w
 15114  064B  0086               	movwf	6
 15115  064C  3001               	movlw	1	; select bank2/3
 15116  064D  0087               	movwf	7
 15117  064E  3001               	movlw	1
 15118  064F  0781               	addwf	1,f
 15119  0650  3141               	addfsr 1,1
 15120  0651  1803               	skipnc
 15121  0652  0A81               	incf	1,f
 15122                           
 15123                           ;Buzzer_B1.c: 59: if (Buz->Counter >= Buz->TimeValue) {
 15124  0653  0837               	movf	_Buz^(0+128),w
 15125  0654  3E06               	addlw	6
 15126  0655  0086               	movwf	6
 15127  0656  3001               	movlw	1	; select bank2/3
 15128  0657  0087               	movwf	7
 15129  0658  3F40               	moviw [0]fsr1
 15130  0659  0020               	movlb	0	; select bank0
 15131  065A  00A0               	movwf	??_Buzzer_Main
 15132  065B  3F41               	moviw [1]fsr1
 15133  065C  00A1               	movwf	??_Buzzer_Main+1
 15134  065D  0021               	movlb	1	; select bank1
 15135  065E  0A37               	incf	_Buz^(0+128),w
 15136  065F  0086               	movwf	6
 15137  0660  3001               	movlw	1	; select bank2/3
 15138  0661  0087               	movwf	7
 15139  0662  3F40               	moviw [0]fsr1
 15140  0663  0020               	movlb	0	; select bank0
 15141  0664  00A2               	movwf	??_Buzzer_Main+2
 15142  0665  3F41               	moviw [1]fsr1
 15143  0666  00A3               	movwf	??_Buzzer_Main+3
 15144  0667  0821               	movf	??_Buzzer_Main+1,w
 15145  0668  0223               	subwf	??_Buzzer_Main+3,w
 15146  0669  1D03               	skipz
 15147  066A  2E6D               	goto	u6665
 15148  066B  0820               	movf	??_Buzzer_Main,w
 15149  066C  0222               	subwf	??_Buzzer_Main+2,w
 15150  066D                     u6665:	
 15151  066D  1C03               	skipc
 15152  066E  0008               	return
 15153                           
 15154                           ;Buzzer_B1.c: 60: Buz->Counter = 0;
 15155  066F  0021               	movlb	1	; select bank1
 15156  0670  0A37               	incf	_Buz^(0+128),w
 15157  0671  0086               	movwf	6
 15158  0672  3001               	movlw	1	; select bank2/3
 15159  0673  0087               	movwf	7
 15160  0674  3000               	movlw	0
 15161  0675  3FC0               	movwi [0]fsr1
 15162  0676  3FC1               	movwi [1]fsr1
 15163                           
 15164                           ;Buzzer_B1.c: 61: Buz->Switch = (RB3 == 1) ? 1 : 0;
 15165  0677  0837               	movf	_Buz^(0+128),w
 15166  0678  0086               	movwf	6
 15167  0679  3001               	movlw	1	; select bank2/3
 15168  067A  0087               	movwf	7
 15169  067B  1281               	bcf	1,5
 15170  067C  0020               	movlb	0	; select bank0
 15171  067D  198D               	btfsc	13,3	;volatile
 15172  067E  1681               	bsf	1,5
 15173                           
 15174                           ;Buzzer_B1.c: 62: if (Buz->Switch == 0) {
 15175  067F  0021               	movlb	1	; select bank1
 15176  0680  0837               	movf	_Buz^(0+128),w
 15177  0681  0086               	movwf	6
 15178  0682  3001               	movlw	1	; select bank2/3
 15179  0683  0087               	movwf	7
 15180  0684  1A81               	btfsc	1,5
 15181  0685  2EF4               	goto	l7082
 15182                           
 15183                           ;Buzzer_B1.c: 63: if (Buz->Count == 0) {
 15184  0686  0837               	movf	_Buz^(0+128),w
 15185  0687  3E03               	addlw	3
 15186  0688  0086               	movwf	6
 15187  0689  3001               	movlw	1	; select bank2/3
 15188  068A  0087               	movwf	7
 15189  068B  0881               	movf	1,f
 15190  068C  1D03               	skipz
 15191  068D  2EEC               	goto	l7078
 15192                           
 15193                           ;Buzzer_B1.c: 64: if (Buz->BufferStatus1 == 1) {
 15194  068E  0837               	movf	_Buz^(0+128),w
 15195  068F  0086               	movwf	6
 15196  0690  3001               	movlw	1	; select bank2/3
 15197  0691  0087               	movwf	7
 15198  0692  1D81               	btfss	1,3
 15199  0693  2EBA               	goto	l7070
 15200                           
 15201                           ;Buzzer_B1.c: 65: Buz->BufferStatus1 = 0;
 15202  0694  0837               	movf	_Buz^(0+128),w
 15203  0695  0086               	movwf	6
 15204  0696  3001               	movlw	1	; select bank2/3
 15205  0697  0087               	movwf	7
 15206  0698  1181               	bcf	1,3
 15207                           
 15208                           ;Buzzer_B1.c: 66: Buz->Count = Buz->CountBuffer1;
 15209  0699  0837               	movf	_Buz^(0+128),w
 15210  069A  3E04               	addlw	4
 15211  069B  0086               	movwf	6
 15212  069C  3001               	movlw	1	; select bank2/3
 15213  069D  0087               	movwf	7
 15214  069E  0801               	movf	1,w
 15215  069F  0020               	movlb	0	; select bank0
 15216  06A0  00A0               	movwf	??_Buzzer_Main
 15217  06A1  0021               	movlb	1	; select bank1
 15218  06A2  0837               	movf	_Buz^(0+128),w
 15219  06A3  3E03               	addlw	3
 15220  06A4  0086               	movwf	6
 15221  06A5  3001               	movlw	1	; select bank2/3
 15222  06A6  0087               	movwf	7
 15223  06A7  0020               	movlb	0	; select bank0
 15224  06A8  0820               	movf	??_Buzzer_Main,w
 15225  06A9  0081               	movwf	1
 15226                           
 15227                           ;Buzzer_B1.c: 67: Buz->TimeValue = Buz->TimeValueBuffer1;
 15228  06AA  0021               	movlb	1	; select bank1
 15229  06AB  0837               	movf	_Buz^(0+128),w
 15230  06AC  3E08               	addlw	8
 15231  06AD  0086               	movwf	6
 15232  06AE  3001               	movlw	1	; select bank2/3
 15233  06AF  0087               	movwf	7
 15234  06B0  0837               	movf	_Buz^(0+128),w
 15235  06B1  3E06               	addlw	6
 15236  06B2  0084               	movwf	4
 15237  06B3  3001               	movlw	1	; select bank2/3
 15238  06B4  0085               	movwf	5
 15239  06B5  3F40               	moviw [0]fsr1
 15240  06B6  3F80               	movwi [0]fsr0
 15241  06B7  3F41               	moviw [1]fsr1
 15242  06B8  3F81               	movwi [1]fsr0
 15243                           
 15244                           ;Buzzer_B1.c: 68: } else if (Buz->BufferStatus2 == 1) {
 15245  06B9  0008               	return
 15246  06BA                     l7070:	
 15247  06BA  0837               	movf	_Buz^(0+128),w
 15248  06BB  0086               	movwf	6
 15249  06BC  3001               	movlw	1	; select bank2/3
 15250  06BD  0087               	movwf	7
 15251  06BE  1E01               	btfss	1,4
 15252  06BF  2EE6               	goto	l7076
 15253                           
 15254                           ;Buzzer_B1.c: 69: Buz->BufferStatus2 = 0;
 15255  06C0  0837               	movf	_Buz^(0+128),w
 15256  06C1  0086               	movwf	6
 15257  06C2  3001               	movlw	1	; select bank2/3
 15258  06C3  0087               	movwf	7
 15259  06C4  1201               	bcf	1,4
 15260                           
 15261                           ;Buzzer_B1.c: 70: Buz->Count = Buz->CountBuffer2;
 15262  06C5  0837               	movf	_Buz^(0+128),w
 15263  06C6  3E05               	addlw	5
 15264  06C7  0086               	movwf	6
 15265  06C8  3001               	movlw	1	; select bank2/3
 15266  06C9  0087               	movwf	7
 15267  06CA  0801               	movf	1,w
 15268  06CB  0020               	movlb	0	; select bank0
 15269  06CC  00A0               	movwf	??_Buzzer_Main
 15270  06CD  0021               	movlb	1	; select bank1
 15271  06CE  0837               	movf	_Buz^(0+128),w
 15272  06CF  3E03               	addlw	3
 15273  06D0  0086               	movwf	6
 15274  06D1  3001               	movlw	1	; select bank2/3
 15275  06D2  0087               	movwf	7
 15276  06D3  0020               	movlb	0	; select bank0
 15277  06D4  0820               	movf	??_Buzzer_Main,w
 15278  06D5  0081               	movwf	1
 15279                           
 15280                           ;Buzzer_B1.c: 71: Buz->TimeValue = Buz->TimeValueBuffer2;
 15281  06D6  0021               	movlb	1	; select bank1
 15282  06D7  0837               	movf	_Buz^(0+128),w
 15283  06D8  3E0A               	addlw	10
 15284  06D9  0086               	movwf	6
 15285  06DA  3001               	movlw	1	; select bank2/3
 15286  06DB  0087               	movwf	7
 15287  06DC  0837               	movf	_Buz^(0+128),w
 15288  06DD  3E06               	addlw	6
 15289  06DE  0084               	movwf	4
 15290  06DF  3001               	movlw	1	; select bank2/3
 15291  06E0  0085               	movwf	5
 15292  06E1  3F40               	moviw [0]fsr1
 15293  06E2  3F80               	movwi [0]fsr0
 15294  06E3  3F41               	moviw [1]fsr1
 15295  06E4  3F81               	movwi [1]fsr0
 15296                           
 15297                           ;Buzzer_B1.c: 72: } else {
 15298  06E5  0008               	return
 15299  06E6                     l7076:	
 15300                           
 15301                           ;Buzzer_B1.c: 73: Buz->GO = 0;
 15302  06E6  0837               	movf	_Buz^(0+128),w
 15303  06E7  0086               	movwf	6
 15304  06E8  3001               	movlw	1	; select bank2/3
 15305  06E9  0087               	movwf	7
 15306  06EA  1081               	bcf	1,1
 15307                           
 15308                           ;Buzzer_B1.c: 74: }
 15309                           ;Buzzer_B1.c: 75: } else {
 15310  06EB  0008               	return
 15311  06EC                     l7078:	
 15312                           
 15313                           ;Buzzer_B1.c: 76: Buz->Switch = 1;
 15314  06EC  0837               	movf	_Buz^(0+128),w
 15315  06ED  0086               	movwf	6
 15316  06EE  3001               	movlw	1	; select bank2/3
 15317  06EF  0087               	movwf	7
 15318  06F0  1681               	bsf	1,5
 15319                           
 15320                           ;Buzzer_B1.c: 78: RB3 = 1;
 15321  06F1  0020               	movlb	0	; select bank0
 15322  06F2  158D               	bsf	13,3	;volatile
 15323                           
 15324                           ;Buzzer_B1.c: 79: }
 15325                           ;Buzzer_B1.c: 80: } else {
 15326  06F3  0008               	return
 15327  06F4                     l7082:	
 15328                           
 15329                           ;Buzzer_B1.c: 81: Buz->Switch = 0;
 15330  06F4  0021               	movlb	1	; select bank1
 15331  06F5  0837               	movf	_Buz^(0+128),w
 15332  06F6  0086               	movwf	6
 15333  06F7  3001               	movlw	1	; select bank2/3
 15334  06F8  0087               	movwf	7
 15335  06F9  1281               	bcf	1,5
 15336                           
 15337                           ;Buzzer_B1.c: 83: RB3 = 0;
 15338  06FA  0020               	movlb	0	; select bank0
 15339  06FB  118D               	bcf	13,3	;volatile
 15340                           
 15341                           ;Buzzer_B1.c: 85: Buz->Count--;
 15342  06FC  0021               	movlb	1	; select bank1
 15343  06FD  0837               	movf	_Buz^(0+128),w
 15344  06FE  3E03               	addlw	3
 15345  06FF  0086               	movwf	6
 15346  0700  3001               	movlw	1	; select bank2/3
 15347  0701  0087               	movwf	7
 15348  0702  3001               	movlw	1
 15349  0703  0281               	subwf	1,f
 15350  0704  0008               	return
 15351  0705                     __end_of_Buzzer_Main:	
 15352                           
 15353                           	psect	text99
 15354  1DEA                     __ptext99:	
 15355 ;; *************** function _Buzzer_Initialization *****************
 15356 ;; Defined at:
 15357 ;;		line 11 in file "../src/Buzzer_B1.c"
 15358 ;; Parameters:    Size  Location     Type
 15359 ;;		None
 15360 ;; Auto vars:     Size  Location     Type
 15361 ;;		None
 15362 ;; Return value:  Size  Location     Type
 15363 ;;		None               void
 15364 ;; Registers used:
 15365 ;;		wreg, fsr1l, fsr1h
 15366 ;; Tracked objects:
 15367 ;;		On entry : 0/0
 15368 ;;		On exit  : 0/0
 15369 ;;		Unchanged: 0/0
 15370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15375 ;;Total ram usage:        1 bytes
 15376 ;; Hardware stack levels used:    1
 15377 ;; Hardware stack levels required when called:    5
 15378 ;; This function calls:
 15379 ;;		Nothing
 15380 ;; This function is called by:
 15381 ;;		_main
 15382 ;; This function uses a non-reentrant model
 15383 ;;
 15384                           
 15385                           
 15386                           ;psect for function _Buzzer_Initialization
 15387  1DEA                     _Buzzer_Initialization:	
 15388                           
 15389                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 15390                           
 15391                           ;incstack = 0
 15392                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 15393  1DEA  304D               	movlw	_Buz1& (0+255)
 15394  1DEB  0020               	movlb	0	; select bank0
 15395  1DEC  00A0               	movwf	??_Buzzer_Initialization
 15396  1DED  0820               	movf	??_Buzzer_Initialization,w
 15397  1DEE  0021               	movlb	1	; select bank1
 15398  1DEF  00B7               	movwf	_Buz^(0+128)
 15399                           
 15400                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 15401  1DF0  0837               	movf	_Buz^(0+128),w
 15402  1DF1  0086               	movwf	6
 15403  1DF2  3001               	movlw	1	; select bank2/3
 15404  1DF3  0087               	movwf	7
 15405  1DF4  1401               	bsf	1,0
 15406  1DF5  0008               	return
 15407  1DF6                     __end_of_Buzzer_Initialization:	
 15408                           
 15409                           	psect	intentry
 15410  0004                     __pintentry:	
 15411 ;; *************** function _ISR *****************
 15412 ;; Defined at:
 15413 ;;		line 109 in file "../src/MCU_B1.c"
 15414 ;; Parameters:    Size  Location     Type
 15415 ;;		None
 15416 ;; Auto vars:     Size  Location     Type
 15417 ;;		None
 15418 ;; Return value:  Size  Location     Type
 15419 ;;		None               void
 15420 ;; Registers used:
 15421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15422 ;; Tracked objects:
 15423 ;;		On entry : 0/0
 15424 ;;		On exit  : 0/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;Total ram usage:        1 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; Hardware stack levels required when called:    4
 15434 ;; This function calls:
 15435 ;;		_INT_ISR
 15436 ;;		_IOC_ISR
 15437 ;;		_TMR0_ISR
 15438 ;; This function is called by:
 15439 ;;		Interrupt level 1
 15440 ;; This function uses a non-reentrant model
 15441 ;;
 15442                           
 15443  0004                     _ISR:	
 15444                           
 15445                           ;incstack = 0
 15446                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15447  0004  147E               	bsf	126,0	;set compiler interrupt flag
 15448  0005  3180               	pagesel	$
 15449  0006  0020               	movlb	0	; select bank0
 15450  0007  087F               	movf	127,w
 15451  0008  00F7               	movwf	??_ISR
 15452                           
 15453                           ;MCU_B1.c: 111: IOC_ISR();
 15454  0009  319E  26EF  3180   	fcall	_IOC_ISR
 15455                           
 15456                           ;MCU_B1.c: 113: TMR0_ISR();
 15457  000C  3193  23EA  3180   	fcall	_TMR0_ISR
 15458                           
 15459                           ;MCU_B1.c: 115: ;;
 15460                           ;MCU_B1.c: 119: INT_ISR();
 15461  000F  319D  25DE         	fcall	_INT_ISR
 15462  0011  0877               	movf	??_ISR,w
 15463  0012  0020               	movlb	0	; select bank0
 15464  0013  00FF               	movwf	127
 15465  0014  107E               	bcf	126,0	;clear compiler interrupt flag
 15466  0015  0009               	retfie
 15467  0016                     __end_of_ISR:	
 15468                           
 15469                           	psect	text101
 15470  13EA                     __ptext101:	
 15471 ;; *************** function _TMR0_ISR *****************
 15472 ;; Defined at:
 15473 ;;		line 137 in file "../src/MCU_B1.c"
 15474 ;; Parameters:    Size  Location     Type
 15475 ;;		None
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;		None
 15478 ;; Return value:  Size  Location     Type
 15479 ;;		None               void
 15480 ;; Registers used:
 15481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15482 ;; Tracked objects:
 15483 ;;		On entry : 0/0
 15484 ;;		On exit  : 0/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;Total ram usage:        0 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; Hardware stack levels required when called:    2
 15494 ;; This function calls:
 15495 ;;		_setDimmerLights_IntrControl
 15496 ;; This function is called by:
 15497 ;;		_ISR
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           
 15502                           ;psect for function _TMR0_ISR
 15503  13EA                     _TMR0_ISR:	
 15504                           
 15505                           ;MCU_B1.c: 138: if (TMR0IE == 1 && TMR0IF == 1) {
 15506                           
 15507                           ;incstack = 0
 15508                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15509  13EA  1E8B               	btfss	11,5	;volatile
 15510  13EB  0008               	return
 15511  13EC  1D0B               	btfss	11,2	;volatile
 15512  13ED  0008               	return
 15513                           
 15514                           ;MCU_B1.c: 139: TMR0 = (256-190);
 15515  13EE  3042               	movlw	66
 15516  13EF  0020               	movlb	0	; select bank0
 15517  13F0  0095               	movwf	21	;volatile
 15518                           
 15519                           ;MCU_B1.c: 140: TMR0IF = 0;
 15520  13F1  110B               	bcf	11,2	;volatile
 15521                           
 15522                           ;MCU_B1.c: 145: setDimmerLights_IntrControl(1);
 15523  13F2  3001               	movlw	1
 15524  13F3  3180  204C  3193   	fcall	_setDimmerLights_IntrControl
 15525                           
 15526                           ;MCU_B1.c: 150: setDimmerLights_IntrControl(2);
 15527  13F6  3002               	movlw	2
 15528  13F7  3180  204C  3193   	fcall	_setDimmerLights_IntrControl
 15529                           
 15530                           ;MCU_B1.c: 155: setDimmerLights_IntrControl(3);
 15531  13FA  3003               	movlw	3
 15532  13FB  3180  204C  3193   	fcall	_setDimmerLights_IntrControl
 15533                           
 15534                           ;MCU_B1.c: 161: Timer0->Count++;
 15535  13FE  0021               	movlb	1	; select bank1
 15536  13FF  0A6C               	incf	_Timer0^(0+128),w
 15537  1400  0086               	movwf	6
 15538  1401  0187               	clrf	7
 15539  1402  3001               	movlw	1
 15540  1403  0781               	addwf	1,f
 15541  1404  3141               	addfsr 1,1
 15542  1405  1803               	skipnc
 15543  1406  0A81               	incf	1,f
 15544                           
 15545                           ;MCU_B1.c: 162: if (Timer0->Count == 100) {
 15546  1407  0A6C               	incf	_Timer0^(0+128),w
 15547  1408  0086               	movwf	6
 15548  1409  0187               	clrf	7
 15549  140A  3F40               	moviw [0]fsr1
 15550  140B  3A64               	xorlw	100
 15551  140C  1D03               	skipz
 15552  140D  2C10               	goto	u677_25
 15553  140E  3F41               	moviw [1]fsr1
 15554  140F  3A00               	xorlw	0
 15555  1410                     u677_25:	
 15556  1410  1D03               	skipz
 15557  1411  0008               	return
 15558                           
 15559                           ;MCU_B1.c: 163: Timer0->Count = 0;
 15560  1412  0A6C               	incf	_Timer0^(0+128),w
 15561  1413  0086               	movwf	6
 15562  1414  0187               	clrf	7
 15563  1415  3000               	movlw	0
 15564  1416  3FC0               	movwi [0]fsr1
 15565  1417  3FC1               	movwi [1]fsr1
 15566                           
 15567                           ;MCU_B1.c: 164: myMain->T0_Timerout = 1;
 15568  1418  086E               	movf	_myMain^(0+128),w
 15569  1419  0086               	movwf	6
 15570  141A  3001               	movlw	1	; select bank2/3
 15571  141B  0087               	movwf	7
 15572  141C  1481               	bsf	1,1
 15573  141D  0008               	return
 15574  141E                     __end_of_TMR0_ISR:	
 15575                           
 15576                           	psect	text102
 15577  004C                     __ptext102:	
 15578 ;; *************** function _setDimmerLights_IntrControl *****************
 15579 ;; Defined at:
 15580 ;;		line 87 in file "../src/Dimmer_B1.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  lights          1    wreg     unsigned char 
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;  lights          1    6[COMMON] unsigned char 
 15585 ;; Return value:  Size  Location     Type
 15586 ;;		None               void
 15587 ;; Registers used:
 15588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15595 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15596 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15597 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15598 ;;Total ram usage:        5 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; Hardware stack levels required when called:    1
 15601 ;; This function calls:
 15602 ;;		_DimmerIntrPointSelect
 15603 ;; This function is called by:
 15604 ;;		_TMR0_ISR
 15605 ;; This function uses a non-reentrant model
 15606 ;;
 15607                           
 15608                           
 15609                           ;psect for function _setDimmerLights_IntrControl
 15610  004C                     _setDimmerLights_IntrControl:	
 15611                           
 15612                           ;incstack = 0
 15613                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15614                           ;setDimmerLights_IntrControl@lights stored from wreg
 15615  004C  00F6               	movwf	setDimmerLights_IntrControl@lights
 15616                           
 15617                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 15618  004D  0876               	movf	setDimmerLights_IntrControl@lights,w
 15619  004E  3190  2073  3180   	fcall	_DimmerIntrPointSelect
 15620                           
 15621                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 15622  0051  0879               	movf	_DimmerLightsIntr,w
 15623  0052  0086               	movwf	6
 15624  0053  3001               	movlw	1	; select bank2/3
 15625  0054  0087               	movwf	7
 15626  0055  1C01               	btfss	1,0
 15627  0056  28B7               	goto	i1l6540
 15628                           
 15629                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 15630  0057  3001               	movlw	1
 15631  0058  00F2               	movwf	??_setDimmerLights_IntrControl
 15632  0059  0879               	movf	_DimmerLightsIntr,w
 15633  005A  3E03               	addlw	3
 15634  005B  0086               	movwf	6
 15635  005C  3001               	movlw	1	; select bank2/3
 15636  005D  0087               	movwf	7
 15637  005E  0872               	movf	??_setDimmerLights_IntrControl,w
 15638  005F  0781               	addwf	1,f
 15639                           
 15640                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 15641  0060  0021               	movlb	1	; select bank1
 15642  0061  0839               	movf	_Dimmer^(0+128),w
 15643  0062  3E02               	addlw	2
 15644  0063  0086               	movwf	6
 15645  0064  0187               	clrf	7
 15646  0065  0801               	movf	1,w
 15647  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 15648  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 15649  0068  09F2               	comf	??_setDimmerLights_IntrControl,f
 15650  0069  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 15651  006A  0AF2               	incf	??_setDimmerLights_IntrControl,f
 15652  006B  1903               	skipnz
 15653  006C  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 15654  006D  0879               	movf	_DimmerLightsIntr,w
 15655  006E  3E04               	addlw	4
 15656  006F  0086               	movwf	6
 15657  0070  3001               	movlw	1	; select bank2/3
 15658  0071  0087               	movwf	7
 15659  0072  0801               	movf	1,w
 15660  0073  0772               	addwf	??_setDimmerLights_IntrControl,w
 15661  0074  00F4               	movwf	??_setDimmerLights_IntrControl+2
 15662  0075  0873               	movf	??_setDimmerLights_IntrControl+1,w
 15663  0076  1803               	skipnc
 15664  0077  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 15665  0078  00F5               	movwf	??_setDimmerLights_IntrControl+3
 15666  0079  0879               	movf	_DimmerLightsIntr,w
 15667  007A  3E03               	addlw	3
 15668  007B  0086               	movwf	6
 15669  007C  3001               	movlw	1	; select bank2/3
 15670  007D  0087               	movwf	7
 15671  007E  0875               	movf	??_setDimmerLights_IntrControl+3,w
 15672  007F  3A80               	xorlw	128
 15673  0080  3C80               	sublw	128
 15674  0081  1D03               	skipz
 15675  0082  2885               	goto	u572_25
 15676  0083  0874               	movf	??_setDimmerLights_IntrControl+2,w
 15677  0084  0201               	subwf	1,w
 15678  0085                     u572_25:	
 15679  0085  1C03               	skipc
 15680  0086  29C6               	goto	i1l6606
 15681                           
 15682                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 15683  0087  0879               	movf	_DimmerLightsIntr,w
 15684  0088  3E03               	addlw	3
 15685  0089  0086               	movwf	6
 15686  008A  3001               	movlw	1	; select bank2/3
 15687  008B  0087               	movwf	7
 15688  008C  0181               	clrf	1
 15689                           
 15690                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 15691  008D  0879               	movf	_DimmerLightsIntr,w
 15692  008E  0086               	movwf	6
 15693  008F  3001               	movlw	1	; select bank2/3
 15694  0090  0087               	movwf	7
 15695  0091  1001               	bcf	1,0
 15696                           
 15697                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 15698  0092  0879               	movf	_DimmerLightsIntr,w
 15699  0093  0086               	movwf	6
 15700  0094  3001               	movlw	1	; select bank2/3
 15701  0095  0087               	movwf	7
 15702  0096  1F01               	btfss	1,6
 15703  0097  29C6               	goto	i1l6606
 15704                           
 15705                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 15706  0098  0879               	movf	_DimmerLightsIntr,w
 15707  0099  3E08               	addlw	8
 15708  009A  0086               	movwf	6
 15709  009B  3001               	movlw	1	; select bank2/3
 15710  009C  0087               	movwf	7
 15711  009D  1401               	bsf	1,0
 15712                           
 15713                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 15714  009E  0879               	movf	_DimmerLightsIntr,w
 15715  009F  3E08               	addlw	8
 15716  00A0  0086               	movwf	6
 15717  00A1  3001               	movlw	1	; select bank2/3
 15718  00A2  0087               	movwf	7
 15719  00A3  1681               	bsf	1,5
 15720                           
 15721                           ;Dimmer_B1.c: 100: if (lights == 1) {
 15722  00A4  0876               	movf	setDimmerLights_IntrControl@lights,w
 15723  00A5  3A01               	xorlw	1
 15724  00A6  1D03               	skipz
 15725  00A7  28AA               	goto	i1l6532
 15726                           
 15727                           ;Dimmer_B1.c: 101: RB4 = 1;
 15728  00A8  0020               	movlb	0	; select bank0
 15729  00A9  160D               	bsf	13,4	;volatile
 15730  00AA                     i1l6532:	
 15731                           ;Dimmer_B1.c: 102: ;;
 15732                           
 15733                           
 15734                           ;Dimmer_B1.c: 103: }
 15735                           ;Dimmer_B1.c: 106: if (lights == 2) {
 15736  00AA  0876               	movf	setDimmerLights_IntrControl@lights,w
 15737  00AB  3A02               	xorlw	2
 15738  00AC  1D03               	skipz
 15739  00AD  28B0               	goto	i1l6536
 15740                           
 15741                           ;Dimmer_B1.c: 107: RA7 = 1;
 15742  00AE  0020               	movlb	0	; select bank0
 15743  00AF  178C               	bsf	12,7	;volatile
 15744  00B0                     i1l6536:	
 15745                           
 15746                           ;Dimmer_B1.c: 108: }
 15747                           ;Dimmer_B1.c: 111: if (lights == 3) {
 15748  00B0  0876               	movf	setDimmerLights_IntrControl@lights,w
 15749  00B1  3A03               	xorlw	3
 15750  00B2  1D03               	skipz
 15751  00B3  29C6               	goto	i1l6606
 15752                           
 15753                           ;Dimmer_B1.c: 112: RB1 = 1;
 15754  00B4  0020               	movlb	0	; select bank0
 15755  00B5  148D               	bsf	13,1	;volatile
 15756                           
 15757                           ;Dimmer_B1.c: 113: }
 15758                           ;Dimmer_B1.c: 115: }
 15759                           ;Dimmer_B1.c: 116: }
 15760                           ;Dimmer_B1.c: 117: } else {
 15761  00B6  29C6               	goto	i1l6606
 15762  00B7                     i1l6540:	
 15763                           
 15764                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 15765  00B7  0879               	movf	_DimmerLightsIntr,w
 15766  00B8  3E08               	addlw	8
 15767  00B9  0086               	movwf	6
 15768  00BA  3001               	movlw	1	; select bank2/3
 15769  00BB  0087               	movwf	7
 15770  00BC  1C01               	btfss	1,0
 15771  00BD  29C6               	goto	i1l6606
 15772                           
 15773                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 15774  00BE  0879               	movf	_DimmerLightsIntr,w
 15775  00BF  3E08               	addlw	8
 15776  00C0  0086               	movwf	6
 15777  00C1  3001               	movlw	1	; select bank2/3
 15778  00C2  0087               	movwf	7
 15779  00C3  1001               	bcf	1,0
 15780                           
 15781                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 15782  00C4  0879               	movf	_DimmerLightsIntr,w
 15783  00C5  0086               	movwf	6
 15784  00C6  3001               	movlw	1	; select bank2/3
 15785  00C7  0087               	movwf	7
 15786  00C8  1C81               	btfss	1,1
 15787  00C9  29C6               	goto	i1l6606
 15788                           
 15789                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 15790  00CA  3001               	movlw	1
 15791  00CB  00F2               	movwf	??_setDimmerLights_IntrControl
 15792  00CC  0A79               	incf	_DimmerLightsIntr,w
 15793  00CD  0086               	movwf	6
 15794  00CE  3001               	movlw	1	; select bank2/3
 15795  00CF  0087               	movwf	7
 15796  00D0  0872               	movf	??_setDimmerLights_IntrControl,w
 15797  00D1  0781               	addwf	1,f
 15798                           
 15799                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 15800  00D2  0A79               	incf	_DimmerLightsIntr,w
 15801  00D3  0086               	movwf	6
 15802  00D4  3001               	movlw	1	; select bank2/3
 15803  00D5  0087               	movwf	7
 15804  00D6  0879               	movf	_DimmerLightsIntr,w
 15805  00D7  3E02               	addlw	2
 15806  00D8  0084               	movwf	4
 15807  00D9  3001               	movlw	1	; select bank2/3
 15808  00DA  0085               	movwf	5
 15809  00DB  0800               	movf	0,w
 15810  00DC  0201               	subwf	1,w
 15811  00DD  1C03               	skipc
 15812  00DE  29C6               	goto	i1l6606
 15813                           
 15814                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 15815  00DF  0A79               	incf	_DimmerLightsIntr,w
 15816  00E0  0086               	movwf	6
 15817  00E1  3001               	movlw	1	; select bank2/3
 15818  00E2  0087               	movwf	7
 15819  00E3  0181               	clrf	1
 15820                           
 15821                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 15822  00E4  0879               	movf	_DimmerLightsIntr,w
 15823  00E5  0086               	movwf	6
 15824  00E6  3001               	movlw	1	; select bank2/3
 15825  00E7  0087               	movwf	7
 15826  00E8  1D81               	btfss	1,3
 15827  00E9  2920               	goto	i1l6566
 15828                           
 15829                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 15830  00EA  0879               	movf	_DimmerLightsIntr,w
 15831  00EB  0086               	movwf	6
 15832  00EC  3001               	movlw	1	; select bank2/3
 15833  00ED  0087               	movwf	7
 15834  00EE  1A01               	btfsc	1,4
 15835  00EF  2907               	goto	i1l6560
 15836                           
 15837                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-95)*0.8))) {
 15838  00F0  0879               	movf	_DimmerLightsIntr,w
 15839  00F1  3E04               	addlw	4
 15840  00F2  0086               	movwf	6
 15841  00F3  3001               	movlw	1	; select bank2/3
 15842  00F4  0087               	movwf	7
 15843  00F5  3005               	movlw	5
 15844  00F6  0201               	subwf	1,w
 15845  00F7  1C03               	skipc
 15846  00F8  2901               	goto	i1l6558
 15847                           
 15848                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 15849  00F9  0879               	movf	_DimmerLightsIntr,w
 15850  00FA  3E04               	addlw	4
 15851  00FB  0086               	movwf	6
 15852  00FC  3001               	movlw	1	; select bank2/3
 15853  00FD  0087               	movwf	7
 15854  00FE  3001               	movlw	1
 15855  00FF  0281               	subwf	1,f
 15856                           
 15857                           ;Dimmer_B1.c: 128: } else {
 15858  0100  29C6               	goto	i1l6606
 15859  0101                     i1l6558:	
 15860                           
 15861                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 15862  0101  0879               	movf	_DimmerLightsIntr,w
 15863  0102  0086               	movwf	6
 15864  0103  3001               	movlw	1	; select bank2/3
 15865  0104  0087               	movwf	7
 15866  0105  1601               	bsf	1,4
 15867                           
 15868                           ;Dimmer_B1.c: 130: }
 15869                           ;Dimmer_B1.c: 131: } else {
 15870  0106  29C6               	goto	i1l6606
 15871  0107                     i1l6560:	
 15872                           
 15873                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 15874  0107  0879               	movf	_DimmerLightsIntr,w
 15875  0108  3E04               	addlw	4
 15876  0109  0086               	movwf	6
 15877  010A  3001               	movlw	1	; select bank2/3
 15878  010B  0087               	movwf	7
 15879  010C  303C               	movlw	60
 15880  010D  0201               	subwf	1,w
 15881  010E  1803               	skipnc
 15882  010F  291A               	goto	i1l6564
 15883                           
 15884                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 15885  0110  3001               	movlw	1
 15886  0111  00F2               	movwf	??_setDimmerLights_IntrControl
 15887  0112  0879               	movf	_DimmerLightsIntr,w
 15888  0113  3E04               	addlw	4
 15889  0114  0086               	movwf	6
 15890  0115  3001               	movlw	1	; select bank2/3
 15891  0116  0087               	movwf	7
 15892  0117  0872               	movf	??_setDimmerLights_IntrControl,w
 15893  0118  0781               	addwf	1,f
 15894                           
 15895                           ;Dimmer_B1.c: 134: } else {
 15896  0119  29C6               	goto	i1l6606
 15897  011A                     i1l6564:	
 15898                           
 15899                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 15900  011A  0879               	movf	_DimmerLightsIntr,w
 15901  011B  0086               	movwf	6
 15902  011C  3001               	movlw	1	; select bank2/3
 15903  011D  0087               	movwf	7
 15904  011E  1201               	bcf	1,4
 15905                           
 15906                           ;Dimmer_B1.c: 136: }
 15907                           ;Dimmer_B1.c: 137: }
 15908                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 15909  011F  29C6               	goto	i1l6606
 15910  0120                     i1l6566:	
 15911  0120  0879               	movf	_DimmerLightsIntr,w
 15912  0121  0086               	movwf	6
 15913  0122  3001               	movlw	1	; select bank2/3
 15914  0123  0087               	movwf	7
 15915  0124  1D01               	btfss	1,2
 15916  0125  2967               	goto	i1l6580
 15917                           
 15918                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 15919  0126  0879               	movf	_DimmerLightsIntr,w
 15920  0127  3E05               	addlw	5
 15921  0128  0086               	movwf	6
 15922  0129  3001               	movlw	1	; select bank2/3
 15923  012A  0087               	movwf	7
 15924  012B  0879               	movf	_DimmerLightsIntr,w
 15925  012C  3E04               	addlw	4
 15926  012D  0084               	movwf	4
 15927  012E  3001               	movlw	1	; select bank2/3
 15928  012F  0085               	movwf	5
 15929  0130  0800               	movf	0,w
 15930  0131  0201               	subwf	1,w
 15931  0132  1803               	skipnc
 15932  0133  293C               	goto	i1l6572
 15933                           
 15934                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 15935  0134  0879               	movf	_DimmerLightsIntr,w
 15936  0135  3E04               	addlw	4
 15937  0136  0086               	movwf	6
 15938  0137  3001               	movlw	1	; select bank2/3
 15939  0138  0087               	movwf	7
 15940  0139  3001               	movlw	1
 15941  013A  0281               	subwf	1,f
 15942                           
 15943                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 15944  013B  2953               	goto	i1l6576
 15945  013C                     i1l6572:	
 15946  013C  0879               	movf	_DimmerLightsIntr,w
 15947  013D  3E04               	addlw	4
 15948  013E  0086               	movwf	6
 15949  013F  3001               	movlw	1	; select bank2/3
 15950  0140  0087               	movwf	7
 15951  0141  0879               	movf	_DimmerLightsIntr,w
 15952  0142  3E05               	addlw	5
 15953  0143  0084               	movwf	4
 15954  0144  3001               	movlw	1	; select bank2/3
 15955  0145  0085               	movwf	5
 15956  0146  0800               	movf	0,w
 15957  0147  0201               	subwf	1,w
 15958  0148  1803               	skipnc
 15959  0149  2953               	goto	i1l6576
 15960                           
 15961                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 15962  014A  3001               	movlw	1
 15963  014B  00F2               	movwf	??_setDimmerLights_IntrControl
 15964  014C  0879               	movf	_DimmerLightsIntr,w
 15965  014D  3E04               	addlw	4
 15966  014E  0086               	movwf	6
 15967  014F  3001               	movlw	1	; select bank2/3
 15968  0150  0087               	movwf	7
 15969  0151  0872               	movf	??_setDimmerLights_IntrControl,w
 15970  0152  0781               	addwf	1,f
 15971  0153                     i1l6576:	
 15972                           
 15973                           ;Dimmer_B1.c: 143: }
 15974                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 15975  0153  0879               	movf	_DimmerLightsIntr,w
 15976  0154  3E05               	addlw	5
 15977  0155  0086               	movwf	6
 15978  0156  3001               	movlw	1	; select bank2/3
 15979  0157  0087               	movwf	7
 15980  0158  0879               	movf	_DimmerLightsIntr,w
 15981  0159  3E04               	addlw	4
 15982  015A  0084               	movwf	4
 15983  015B  3001               	movlw	1	; select bank2/3
 15984  015C  0085               	movwf	5
 15985  015D  0800               	movf	0,w
 15986  015E  0601               	xorwf	1,w
 15987  015F  1D03               	skipz
 15988  0160  29C6               	goto	i1l6606
 15989                           
 15990                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 15991  0161  0879               	movf	_DimmerLightsIntr,w
 15992  0162  0086               	movwf	6
 15993  0163  3001               	movlw	1	; select bank2/3
 15994  0164  0087               	movwf	7
 15995  0165  1101               	bcf	1,2
 15996  0166  2982               	goto	i1l6586
 15997  0167                     i1l6580:	
 15998                           ;Dimmer_B1.c: 147: }
 15999                           ;Dimmer_B1.c: 148: } else {
 16000                           
 16001                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 16002                           
 16003                           
 16004                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 16005  0167  0879               	movf	_DimmerLightsIntr,w
 16006  0168  0086               	movwf	6
 16007  0169  3001               	movlw	1	; select bank2/3
 16008  016A  0087               	movwf	7
 16009  016B  1E81               	btfss	1,5
 16010  016C  2988               	goto	i1l6588
 16011                           
 16012                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 16013  016D  0879               	movf	_DimmerLightsIntr,w
 16014  016E  3E04               	addlw	4
 16015  016F  0086               	movwf	6
 16016  0170  3001               	movlw	1	; select bank2/3
 16017  0171  0087               	movwf	7
 16018  0172  3001               	movlw	1
 16019  0173  0281               	subwf	1,f
 16020                           
 16021                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 16022  0174  0879               	movf	_DimmerLightsIntr,w
 16023  0175  3E05               	addlw	5
 16024  0176  0086               	movwf	6
 16025  0177  3001               	movlw	1	; select bank2/3
 16026  0178  0087               	movwf	7
 16027  0179  0879               	movf	_DimmerLightsIntr,w
 16028  017A  3E04               	addlw	4
 16029  017B  0084               	movwf	4
 16030  017C  3001               	movlw	1	; select bank2/3
 16031  017D  0085               	movwf	5
 16032  017E  0800               	movf	0,w
 16033  017F  0201               	subwf	1,w
 16034  0180  1C03               	skipc
 16035  0181  29C6               	goto	i1l6606
 16036  0182                     i1l6586:	
 16037                           
 16038                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 16039  0182  0879               	movf	_DimmerLightsIntr,w
 16040  0183  0086               	movwf	6
 16041  0184  3001               	movlw	1	; select bank2/3
 16042  0185  0087               	movwf	7
 16043  0186  1081               	bcf	1,1
 16044                           
 16045                           ;Dimmer_B1.c: 153: }
 16046                           ;Dimmer_B1.c: 154: } else {
 16047  0187  29C6               	goto	i1l6606
 16048  0188                     i1l6588:	
 16049                           
 16050                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 16051  0188  3001               	movlw	1
 16052  0189  00F2               	movwf	??_setDimmerLights_IntrControl
 16053  018A  0879               	movf	_DimmerLightsIntr,w
 16054  018B  3E04               	addlw	4
 16055  018C  0086               	movwf	6
 16056  018D  3001               	movlw	1	; select bank2/3
 16057  018E  0087               	movwf	7
 16058  018F  0872               	movf	??_setDimmerLights_IntrControl,w
 16059  0190  0781               	addwf	1,f
 16060                           
 16061                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 16062  0191  0879               	movf	_DimmerLightsIntr,w
 16063  0192  3E04               	addlw	4
 16064  0193  0086               	movwf	6
 16065  0194  3001               	movlw	1	; select bank2/3
 16066  0195  0087               	movwf	7
 16067  0196  0879               	movf	_DimmerLightsIntr,w
 16068  0197  3E06               	addlw	6
 16069  0198  0084               	movwf	4
 16070  0199  3001               	movlw	1	; select bank2/3
 16071  019A  0085               	movwf	5
 16072  019B  0800               	movf	0,w
 16073  019C  0201               	subwf	1,w
 16074  019D  1C03               	skipc
 16075  019E  29C6               	goto	i1l6606
 16076                           
 16077                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 16078  019F  0879               	movf	_DimmerLightsIntr,w
 16079  01A0  0086               	movwf	6
 16080  01A1  3001               	movlw	1	; select bank2/3
 16081  01A2  0087               	movwf	7
 16082  01A3  1081               	bcf	1,1
 16083                           
 16084                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 16085  01A4  0879               	movf	_DimmerLightsIntr,w
 16086  01A5  0086               	movwf	6
 16087  01A6  3001               	movlw	1	; select bank2/3
 16088  01A7  0087               	movwf	7
 16089  01A8  1301               	bcf	1,6
 16090                           
 16091                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 16092  01A9  0879               	movf	_DimmerLightsIntr,w
 16093  01AA  3E09               	addlw	9
 16094  01AB  0086               	movwf	6
 16095  01AC  3001               	movlw	1	; select bank2/3
 16096  01AD  0087               	movwf	7
 16097  01AE  1501               	bsf	1,2
 16098                           
 16099                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 16100  01AF  0021               	movlb	1	; select bank1
 16101  01B0  0839               	movf	_Dimmer^(0+128),w
 16102  01B1  0086               	movwf	6
 16103  01B2  0187               	clrf	7
 16104  01B3  1401               	bsf	1,0
 16105                           
 16106                           ;Dimmer_B1.c: 162: if (lights == 1) {
 16107  01B4  0876               	movf	setDimmerLights_IntrControl@lights,w
 16108  01B5  3A01               	xorlw	1
 16109  01B6  1D03               	skipz
 16110  01B7  29BA               	goto	i1l6598
 16111                           
 16112                           ;Dimmer_B1.c: 163: RC7 = 0;
 16113  01B8  0020               	movlb	0	; select bank0
 16114  01B9  138E               	bcf	14,7	;volatile
 16115  01BA                     i1l6598:	
 16116                           
 16117                           ;Dimmer_B1.c: 165: }
 16118                           ;Dimmer_B1.c: 168: if (lights == 2) {
 16119  01BA  0876               	movf	setDimmerLights_IntrControl@lights,w
 16120  01BB  3A02               	xorlw	2
 16121  01BC  1D03               	skipz
 16122  01BD  29C0               	goto	i1l6602
 16123                           
 16124                           ;Dimmer_B1.c: 169: RA3 = 0;
 16125  01BE  0020               	movlb	0	; select bank0
 16126  01BF  118C               	bcf	12,3	;volatile
 16127  01C0                     i1l6602:	
 16128                           
 16129                           ;Dimmer_B1.c: 170: }
 16130                           ;Dimmer_B1.c: 173: if (lights == 3) {
 16131  01C0  0876               	movf	setDimmerLights_IntrControl@lights,w
 16132  01C1  3A03               	xorlw	3
 16133  01C2  1D03               	skipz
 16134  01C3  29C6               	goto	i1l6606
 16135                           
 16136                           ;Dimmer_B1.c: 174: RC6 = 0;
 16137  01C4  0020               	movlb	0	; select bank0
 16138  01C5  130E               	bcf	14,6	;volatile
 16139  01C6                     i1l6606:	
 16140                           ;Dimmer_B1.c: 175: }
 16141                           ;Dimmer_B1.c: 177: ;;
 16142                           
 16143                           
 16144                           ;Dimmer_B1.c: 178: }
 16145                           ;Dimmer_B1.c: 179: }
 16146                           ;Dimmer_B1.c: 180: }
 16147                           ;Dimmer_B1.c: 181: }
 16148                           ;Dimmer_B1.c: 182: }
 16149                           ;Dimmer_B1.c: 183: }
 16150                           ;Dimmer_B1.c: 184: }
 16151                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 16152  01C6  0879               	movf	_DimmerLightsIntr,w
 16153  01C7  3E08               	addlw	8
 16154  01C8  0086               	movwf	6
 16155  01C9  3001               	movlw	1	; select bank2/3
 16156  01CA  0087               	movwf	7
 16157  01CB  1E81               	btfss	1,5
 16158  01CC  29FD               	goto	i1l6628
 16159                           
 16160                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 16161  01CD  3001               	movlw	1
 16162  01CE  00F2               	movwf	??_setDimmerLights_IntrControl
 16163  01CF  0879               	movf	_DimmerLightsIntr,w
 16164  01D0  3E07               	addlw	7
 16165  01D1  0086               	movwf	6
 16166  01D2  3001               	movlw	1	; select bank2/3
 16167  01D3  0087               	movwf	7
 16168  01D4  0872               	movf	??_setDimmerLights_IntrControl,w
 16169  01D5  0781               	addwf	1,f
 16170                           
 16171                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 16172  01D6  0879               	movf	_DimmerLightsIntr,w
 16173  01D7  3E07               	addlw	7
 16174  01D8  0086               	movwf	6
 16175  01D9  3001               	movlw	1	; select bank2/3
 16176  01DA  0087               	movwf	7
 16177  01DB  3005               	movlw	5
 16178  01DC  0201               	subwf	1,w
 16179  01DD  1C03               	skipc
 16180  01DE  29FD               	goto	i1l6628
 16181                           
 16182                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 16183  01DF  0879               	movf	_DimmerLightsIntr,w
 16184  01E0  3E07               	addlw	7
 16185  01E1  0086               	movwf	6
 16186  01E2  3001               	movlw	1	; select bank2/3
 16187  01E3  0087               	movwf	7
 16188  01E4  0181               	clrf	1
 16189                           
 16190                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 16191  01E5  0879               	movf	_DimmerLightsIntr,w
 16192  01E6  3E08               	addlw	8
 16193  01E7  0086               	movwf	6
 16194  01E8  3001               	movlw	1	; select bank2/3
 16195  01E9  0087               	movwf	7
 16196  01EA  1281               	bcf	1,5
 16197                           
 16198                           ;Dimmer_B1.c: 192: if (lights == 1) {
 16199  01EB  0876               	movf	setDimmerLights_IntrControl@lights,w
 16200  01EC  3A01               	xorlw	1
 16201  01ED  1D03               	skipz
 16202  01EE  29F1               	goto	i1l6620
 16203                           
 16204                           ;Dimmer_B1.c: 193: RB4 = 0;
 16205  01EF  0020               	movlb	0	; select bank0
 16206  01F0  120D               	bcf	13,4	;volatile
 16207  01F1                     i1l6620:	
 16208                           ;Dimmer_B1.c: 194: ;;
 16209                           
 16210                           
 16211                           ;Dimmer_B1.c: 195: }
 16212                           ;Dimmer_B1.c: 198: if (lights == 2) {
 16213  01F1  0876               	movf	setDimmerLights_IntrControl@lights,w
 16214  01F2  3A02               	xorlw	2
 16215  01F3  1D03               	skipz
 16216  01F4  29F7               	goto	i1l6624
 16217                           
 16218                           ;Dimmer_B1.c: 199: RA7 = 0;
 16219  01F5  0020               	movlb	0	; select bank0
 16220  01F6  138C               	bcf	12,7	;volatile
 16221  01F7                     i1l6624:	
 16222                           
 16223                           ;Dimmer_B1.c: 200: }
 16224                           ;Dimmer_B1.c: 203: if (lights == 3) {
 16225  01F7  0876               	movf	setDimmerLights_IntrControl@lights,w
 16226  01F8  3A03               	xorlw	3
 16227  01F9  1D03               	skipz
 16228  01FA  29FD               	goto	i1l6628
 16229                           
 16230                           ;Dimmer_B1.c: 204: RB1 = 0;
 16231  01FB  0020               	movlb	0	; select bank0
 16232  01FC  108D               	bcf	13,1	;volatile
 16233  01FD                     i1l6628:	
 16234                           
 16235                           ;Dimmer_B1.c: 205: }
 16236                           ;Dimmer_B1.c: 207: }
 16237                           ;Dimmer_B1.c: 208: }
 16238                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 16239  01FD  0879               	movf	_DimmerLightsIntr,w
 16240  01FE  3E09               	addlw	9
 16241  01FF  0086               	movwf	6
 16242  0200  3001               	movlw	1	; select bank2/3
 16243  0201  0087               	movwf	7
 16244  0202  1E81               	btfss	1,5
 16245  0203  0008               	return
 16246                           
 16247                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 16248  0204  3001               	movlw	1
 16249  0205  00F2               	movwf	??_setDimmerLights_IntrControl
 16250  0206  0879               	movf	_DimmerLightsIntr,w
 16251  0207  3E0A               	addlw	10
 16252  0208  0086               	movwf	6
 16253  0209  3001               	movlw	1	; select bank2/3
 16254  020A  0087               	movwf	7
 16255  020B  0872               	movf	??_setDimmerLights_IntrControl,w
 16256  020C  0781               	addwf	1,f
 16257                           
 16258                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 16259  020D  0879               	movf	_DimmerLightsIntr,w
 16260  020E  3E0A               	addlw	10
 16261  020F  0086               	movwf	6
 16262  0210  3001               	movlw	1	; select bank2/3
 16263  0211  0087               	movwf	7
 16264  0212  0801               	movf	1,w
 16265  0213  3A46               	xorlw	70
 16266  0214  1D03               	skipz
 16267  0215  0008               	return
 16268                           
 16269                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 16270  0216  0879               	movf	_DimmerLightsIntr,w
 16271  0217  3E0A               	addlw	10
 16272  0218  0086               	movwf	6
 16273  0219  3001               	movlw	1	; select bank2/3
 16274  021A  0087               	movwf	7
 16275  021B  0181               	clrf	1
 16276                           
 16277                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 16278  021C  0879               	movf	_DimmerLightsIntr,w
 16279  021D  3E09               	addlw	9
 16280  021E  0086               	movwf	6
 16281  021F  3001               	movlw	1	; select bank2/3
 16282  0220  0087               	movwf	7
 16283  0221  1281               	bcf	1,5
 16284  0222  0008               	return
 16285  0223                     __end_of_setDimmerLights_IntrControl:	
 16286                           
 16287                           	psect	text103
 16288  1073                     __ptext103:	
 16289 ;; *************** function _DimmerIntrPointSelect *****************
 16290 ;; Defined at:
 16291 ;;		line 65 in file "../src/Dimmer_B1.c"
 16292 ;; Parameters:    Size  Location     Type
 16293 ;;  lights          1    wreg     unsigned char 
 16294 ;; Auto vars:     Size  Location     Type
 16295 ;;  lights          1    1[COMMON] unsigned char 
 16296 ;; Return value:  Size  Location     Type
 16297 ;;		None               void
 16298 ;; Registers used:
 16299 ;;		wreg
 16300 ;; Tracked objects:
 16301 ;;		On entry : 0/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16308 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16309 ;;Total ram usage:        2 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; This function calls:
 16312 ;;		Nothing
 16313 ;; This function is called by:
 16314 ;;		_setDimmerLights_IntrControl
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           
 16319                           ;psect for function _DimmerIntrPointSelect
 16320  1073                     _DimmerIntrPointSelect:	
 16321                           
 16322                           ;incstack = 0
 16323                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 16324                           ;DimmerIntrPointSelect@lights stored from wreg
 16325  1073  00F1               	movwf	DimmerIntrPointSelect@lights
 16326                           
 16327                           ;Dimmer_B1.c: 67: if (lights == 1) {
 16328  1074  0871               	movf	DimmerIntrPointSelect@lights,w
 16329  1075  3A01               	xorlw	1
 16330  1076  1D03               	skipz
 16331  1077  287C               	goto	i1l755
 16332                           
 16333                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 16334  1078  3020               	movlw	_DimmerLights1& (0+255)
 16335  1079  00F0               	movwf	??_DimmerIntrPointSelect
 16336  107A  0870               	movf	??_DimmerIntrPointSelect,w
 16337  107B  00F9               	movwf	_DimmerLightsIntr
 16338  107C                     i1l755:	
 16339                           
 16340                           ;Dimmer_B1.c: 69: }
 16341                           ;Dimmer_B1.c: 72: if (lights == 2) {
 16342  107C  0871               	movf	DimmerIntrPointSelect@lights,w
 16343  107D  3A02               	xorlw	2
 16344  107E  1D03               	skipz
 16345  107F  2884               	goto	i1l756
 16346                           
 16347                           ;Dimmer_B1.c: 73: DimmerLightsIntr = &DimmerLights2;
 16348  1080  302F               	movlw	_DimmerLights2& (0+255)
 16349  1081  00F0               	movwf	??_DimmerIntrPointSelect
 16350  1082  0870               	movf	??_DimmerIntrPointSelect,w
 16351  1083  00F9               	movwf	_DimmerLightsIntr
 16352  1084                     i1l756:	
 16353                           
 16354                           ;Dimmer_B1.c: 74: }
 16355                           ;Dimmer_B1.c: 78: if (lights == 3) {
 16356  1084  0871               	movf	DimmerIntrPointSelect@lights,w
 16357  1085  3A03               	xorlw	3
 16358  1086  1D03               	skipz
 16359  1087  0008               	return
 16360                           
 16361                           ;Dimmer_B1.c: 79: DimmerLightsIntr = &DimmerLights3;
 16362  1088  303E               	movlw	_DimmerLights3& (0+255)
 16363  1089  00F0               	movwf	??_DimmerIntrPointSelect
 16364  108A  0870               	movf	??_DimmerIntrPointSelect,w
 16365  108B  00F9               	movwf	_DimmerLightsIntr
 16366  108C  0008               	return
 16367  108D                     __end_of_DimmerIntrPointSelect:	
 16368                           
 16369                           	psect	text104
 16370  1EEF                     __ptext104:	
 16371 ;; *************** function _IOC_ISR *****************
 16372 ;; Defined at:
 16373 ;;		line 297 in file "../src/MCU_B1.c"
 16374 ;; Parameters:    Size  Location     Type
 16375 ;;		None
 16376 ;; Auto vars:     Size  Location     Type
 16377 ;;		None
 16378 ;; Return value:  Size  Location     Type
 16379 ;;		None               void
 16380 ;; Registers used:
 16381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16382 ;; Tracked objects:
 16383 ;;		On entry : 0/0
 16384 ;;		On exit  : 0/0
 16385 ;;		Unchanged: 0/0
 16386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16391 ;;Total ram usage:        0 bytes
 16392 ;; Hardware stack levels used:    1
 16393 ;; Hardware stack levels required when called:    3
 16394 ;; This function calls:
 16395 ;;		_setDimmerReClock
 16396 ;; This function is called by:
 16397 ;;		_ISR
 16398 ;; This function uses a non-reentrant model
 16399 ;;
 16400                           
 16401                           
 16402                           ;psect for function _IOC_ISR
 16403  1EEF                     _IOC_ISR:	
 16404                           
 16405                           ;MCU_B1.c: 298: if (IOCIE == 1 && IOCBF2 == 1) {
 16406                           
 16407                           ;incstack = 0
 16408                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16409  1EEF  1D8B               	btfss	11,3	;volatile
 16410  1EF0  0008               	return
 16411  1EF1  0027               	movlb	7	; select bank7
 16412  1EF2  1D16               	btfss	22,2	;volatile
 16413  1EF3  0008               	return
 16414                           
 16415                           ;MCU_B1.c: 299: IOCBF2 = 0;
 16416  1EF4  1116               	bcf	22,2	;volatile
 16417                           
 16418                           ;MCU_B1.c: 300: IOCIF = 0;
 16419  1EF5  100B               	bcf	11,0	;volatile
 16420                           
 16421                           ;MCU_B1.c: 301: if (myMain->PowerON == 1) {
 16422  1EF6  0021               	movlb	1	; select bank1
 16423  1EF7  086E               	movf	_myMain^(0+128),w
 16424  1EF8  0086               	movwf	6
 16425  1EF9  3001               	movlw	1	; select bank2/3
 16426  1EFA  0087               	movwf	7
 16427  1EFB  1C01               	btfss	1,0
 16428  1EFC  0008               	return
 16429                           
 16430                           ;MCU_B1.c: 303: setDimmerReClock();
 16431  1EFD  319E  2643         	fcall	_setDimmerReClock
 16432  1EFF  0008               	return
 16433  1F00                     __end_of_IOC_ISR:	
 16434                           
 16435                           	psect	text105
 16436  1E43                     __ptext105:	
 16437 ;; *************** function _setDimmerReClock *****************
 16438 ;; Defined at:
 16439 ;;		line 175 in file "../src/MCU_B1.c"
 16440 ;; Parameters:    Size  Location     Type
 16441 ;;		None
 16442 ;; Auto vars:     Size  Location     Type
 16443 ;;		None
 16444 ;; Return value:  Size  Location     Type
 16445 ;;		None               void
 16446 ;; Registers used:
 16447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16448 ;; Tracked objects:
 16449 ;;		On entry : 0/0
 16450 ;;		On exit  : 0/0
 16451 ;;		Unchanged: 0/0
 16452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;Total ram usage:        0 bytes
 16458 ;; Hardware stack levels used:    1
 16459 ;; Hardware stack levels required when called:    2
 16460 ;; This function calls:
 16461 ;;		_setDimmerLights_IntrIOC_GO
 16462 ;; This function is called by:
 16463 ;;		_IOC_ISR
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           
 16468                           ;psect for function _setDimmerReClock
 16469  1E43                     _setDimmerReClock:	
 16470                           
 16471                           ;MCU_B1.c: 180: setDimmerLights_IntrIOC_GO(1);
 16472                           
 16473                           ;incstack = 0
 16474                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16475  1E43  3001               	movlw	1
 16476  1E44  3191  216B  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16477                           
 16478                           ;MCU_B1.c: 184: setDimmerLights_IntrIOC_GO(2);
 16479  1E47  3002               	movlw	2
 16480  1E48  3191  216B  319E   	fcall	_setDimmerLights_IntrIOC_GO
 16481                           
 16482                           ;MCU_B1.c: 188: setDimmerLights_IntrIOC_GO(3);
 16483  1E4B  3003               	movlw	3
 16484  1E4C  3191  216B         	fcall	_setDimmerLights_IntrIOC_GO
 16485                           
 16486                           ;MCU_B1.c: 191: TMR0 = 255;
 16487  1E4E  30FF               	movlw	255
 16488  1E4F  0020               	movlb	0	; select bank0
 16489  1E50  0095               	movwf	21	;volatile
 16490  1E51  0008               	return
 16491  1E52                     __end_of_setDimmerReClock:	
 16492                           
 16493                           	psect	text106
 16494  116B                     __ptext106:	
 16495 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 16496 ;; Defined at:
 16497 ;;		line 28 in file "../src/Dimmer_B1.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;  lights          1    wreg     unsigned char 
 16500 ;; Auto vars:     Size  Location     Type
 16501 ;;  lights          1    2[COMMON] unsigned char 
 16502 ;; Return value:  Size  Location     Type
 16503 ;;		None               void
 16504 ;; Registers used:
 16505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;Total ram usage:        1 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    1
 16518 ;; This function calls:
 16519 ;;		_DimmerIntrIOCPointSelect
 16520 ;; This function is called by:
 16521 ;;		_setDimmerReClock
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           
 16526                           ;psect for function _setDimmerLights_IntrIOC_GO
 16527  116B                     _setDimmerLights_IntrIOC_GO:	
 16528                           
 16529                           ;incstack = 0
 16530                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16531                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 16532  116B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 16533                           
 16534                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 16535  116C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 16536  116D  3191  2114  3191   	fcall	_DimmerIntrIOCPointSelect
 16537                           
 16538                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 16539  1170  0021               	movlb	1	; select bank1
 16540  1171  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16541  1172  0086               	movwf	6
 16542  1173  3001               	movlw	1	; select bank2/3
 16543  1174  0087               	movwf	7
 16544  1175  1801               	btfsc	1,0
 16545  1176  0008               	return
 16546  1177  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16547  1178  3E09               	addlw	9
 16548  1179  0086               	movwf	6
 16549  117A  3001               	movlw	1	; select bank2/3
 16550  117B  0087               	movwf	7
 16551  117C  1A81               	btfsc	1,5
 16552  117D  0008               	return
 16553                           
 16554                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 16555  117E  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16556  117F  0086               	movwf	6
 16557  1180  3001               	movlw	1	; select bank2/3
 16558  1181  0087               	movwf	7
 16559  1182  1401               	bsf	1,0
 16560                           
 16561                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 16562  1183  083D               	movf	_DimmerLightsIntrIOC^(0+128),w
 16563  1184  3E09               	addlw	9
 16564  1185  0086               	movwf	6
 16565  1186  3001               	movlw	1	; select bank2/3
 16566  1187  0087               	movwf	7
 16567  1188  1681               	bsf	1,5
 16568  1189  0008               	return
 16569  118A                     __end_of_setDimmerLights_IntrIOC_GO:	
 16570                           
 16571                           	psect	text107
 16572  1114                     __ptext107:	
 16573 ;; *************** function _DimmerIntrIOCPointSelect *****************
 16574 ;; Defined at:
 16575 ;;		line 8 in file "../src/Dimmer_B1.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;  lights          1    wreg     unsigned char 
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;  lights          1    1[COMMON] unsigned char 
 16580 ;; Return value:  Size  Location     Type
 16581 ;;		None               void
 16582 ;; Registers used:
 16583 ;;		wreg
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;Total ram usage:        2 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; This function calls:
 16596 ;;		Nothing
 16597 ;; This function is called by:
 16598 ;;		_setDimmerLights_IntrIOC_GO
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           
 16603                           ;psect for function _DimmerIntrIOCPointSelect
 16604  1114                     _DimmerIntrIOCPointSelect:	
 16605                           
 16606                           ;incstack = 0
 16607                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 16608                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 16609  1114  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 16610                           
 16611                           ;Dimmer_B1.c: 10: if (lights == 1) {
 16612  1115  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16613  1116  3A01               	xorlw	1
 16614  1117  1D03               	skipz
 16615  1118  291E               	goto	i1l745
 16616                           
 16617                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 16618  1119  3020               	movlw	_DimmerLights1& (0+255)
 16619  111A  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16620  111B  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16621  111C  0021               	movlb	1	; select bank1
 16622  111D  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16623  111E                     i1l745:	
 16624                           
 16625                           ;Dimmer_B1.c: 12: }
 16626                           ;Dimmer_B1.c: 15: if (lights == 2) {
 16627  111E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16628  111F  3A02               	xorlw	2
 16629  1120  1D03               	skipz
 16630  1121  2927               	goto	i1l746
 16631                           
 16632                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 16633  1122  302F               	movlw	_DimmerLights2& (0+255)
 16634  1123  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16635  1124  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16636  1125  0021               	movlb	1	; select bank1
 16637  1126  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16638  1127                     i1l746:	
 16639                           
 16640                           ;Dimmer_B1.c: 17: }
 16641                           ;Dimmer_B1.c: 21: if (lights == 3) {
 16642  1127  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 16643  1128  3A03               	xorlw	3
 16644  1129  1D03               	skipz
 16645  112A  0008               	return
 16646                           
 16647                           ;Dimmer_B1.c: 22: DimmerLightsIntrIOC = &DimmerLights3;
 16648  112B  303E               	movlw	_DimmerLights3& (0+255)
 16649  112C  00F0               	movwf	??_DimmerIntrIOCPointSelect
 16650  112D  0870               	movf	??_DimmerIntrIOCPointSelect,w
 16651  112E  0021               	movlb	1	; select bank1
 16652  112F  00BD               	movwf	_DimmerLightsIntrIOC^(0+128)
 16653  1130  0008               	return
 16654  1131                     __end_of_DimmerIntrIOCPointSelect:	
 16655                           
 16656                           	psect	text108
 16657  1DDE                     __ptext108:	
 16658 ;; *************** function _INT_ISR *****************
 16659 ;; Defined at:
 16660 ;;		line 250 in file "../src/MCU_B1.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;		None
 16663 ;; Auto vars:     Size  Location     Type
 16664 ;;		None
 16665 ;; Return value:  Size  Location     Type
 16666 ;;		None               void
 16667 ;; Registers used:
 16668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16669 ;; Tracked objects:
 16670 ;;		On entry : 0/0
 16671 ;;		On exit  : 0/0
 16672 ;;		Unchanged: 0/0
 16673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;Total ram usage:        0 bytes
 16679 ;; Hardware stack levels used:    1
 16680 ;; Hardware stack levels required when called:    2
 16681 ;; This function calls:
 16682 ;;		_setRF_ReceiveGO
 16683 ;; This function is called by:
 16684 ;;		_ISR
 16685 ;; This function uses a non-reentrant model
 16686 ;;
 16687                           
 16688                           
 16689                           ;psect for function _INT_ISR
 16690  1DDE                     _INT_ISR:	
 16691                           
 16692                           ;MCU_B1.c: 251: if (INTE == 1 && INTF == 1) {
 16693                           
 16694                           ;incstack = 0
 16695                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16696  1DDE  1E0B               	btfss	11,4	;volatile
 16697  1DDF  0008               	return
 16698  1DE0  1C8B               	btfss	11,1	;volatile
 16699  1DE1  0008               	return
 16700                           
 16701                           ;MCU_B1.c: 252: INTF = 0;
 16702  1DE2  108B               	bcf	11,1	;volatile
 16703                           
 16704                           ;MCU_B1.c: 253: INTE = 0;
 16705  1DE3  120B               	bcf	11,4	;volatile
 16706                           
 16707                           ;MCU_B1.c: 254: setRF_ReceiveGO(1, 1);
 16708  1DE4  01F2               	clrf	setRF_ReceiveGO@command
 16709  1DE5  0AF2               	incf	setRF_ReceiveGO@command,f
 16710  1DE6  3001               	movlw	1
 16711  1DE7  319F  27E6         	fcall	_setRF_ReceiveGO
 16712  1DE9  0008               	return
 16713  1DEA                     __end_of_INT_ISR:	
 16714                           
 16715                           	psect	text109
 16716  1FE6                     __ptext109:	
 16717 ;; *************** function _setRF_ReceiveGO *****************
 16718 ;; Defined at:
 16719 ;;		line 39 in file "../src/RF_Control_B1.c"
 16720 ;; Parameters:    Size  Location     Type
 16721 ;;  rf              1    wreg     unsigned char 
 16722 ;;  command         1    2[COMMON] unsigned char 
 16723 ;; Auto vars:     Size  Location     Type
 16724 ;;  rf              1    3[COMMON] unsigned char 
 16725 ;; Return value:  Size  Location     Type
 16726 ;;		None               void
 16727 ;; Registers used:
 16728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16729 ;; Tracked objects:
 16730 ;;		On entry : 0/0
 16731 ;;		On exit  : 0/0
 16732 ;;		Unchanged: 0/0
 16733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16734 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16738 ;;Total ram usage:        2 bytes
 16739 ;; Hardware stack levels used:    1
 16740 ;; Hardware stack levels required when called:    1
 16741 ;; This function calls:
 16742 ;;		i1_RfPointSelect
 16743 ;; This function is called by:
 16744 ;;		_INT_ISR
 16745 ;; This function uses a non-reentrant model
 16746 ;;
 16747                           
 16748                           
 16749                           ;psect for function _setRF_ReceiveGO
 16750  1FE6                     _setRF_ReceiveGO:	
 16751                           
 16752                           ;incstack = 0
 16753                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16754                           ;setRF_ReceiveGO@rf stored from wreg
 16755  1FE6  00F3               	movwf	setRF_ReceiveGO@rf
 16756                           
 16757                           ;RF_Control_B1.c: 40: RfPointSelect(rf);
 16758  1FE7  0873               	movf	setRF_ReceiveGO@rf,w
 16759  1FE8  319E  261A  319F   	fcall	i1_RfPointSelect
 16760                           
 16761                           ;RF_Control_B1.c: 41: if (RF->RxStatus == 1) {
 16762  1FEB  087A               	movf	_RF,w
 16763  1FEC  0086               	movwf	6
 16764  1FED  0187               	clrf	7
 16765  1FEE  1D81               	btfss	1,3
 16766  1FEF  0008               	return
 16767                           
 16768                           ;RF_Control_B1.c: 42: RF->RxStatus = 0;
 16769  1FF0  087A               	movf	_RF,w
 16770  1FF1  0086               	movwf	6
 16771  1FF2  0187               	clrf	7
 16772  1FF3  1181               	bcf	1,3
 16773                           
 16774                           ;RF_Control_B1.c: 43: RF->Run = 1;
 16775  1FF4  0A7A               	incf	_RF,w
 16776  1FF5  0086               	movwf	6
 16777  1FF6  0187               	clrf	7
 16778  1FF7  1481               	bsf	1,1
 16779                           
 16780                           ;RF_Control_B1.c: 44: RF->ReceiveGO = command;
 16781  1FF8  087A               	movf	_RF,w
 16782  1FF9  0086               	movwf	6
 16783  1FFA  0187               	clrf	7
 16784  1FFB  0872               	movf	setRF_ReceiveGO@command,w
 16785  1FFC  1081               	bcf	1,1
 16786  1FFD  1D03               	skipz
 16787  1FFE  1481               	bsf	1,1
 16788  1FFF  0008               	return
 16789  2000                     __end_of_setRF_ReceiveGO:	
 16790                           
 16791                           	psect	text110
 16792  1E1A                     __ptext110:	
 16793 ;; *************** function i1_RfPointSelect *****************
 16794 ;; Defined at:
 16795 ;;		line 7 in file "../src/RF_Control_B1.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  rf              1    wreg     unsigned char 
 16798 ;; Auto vars:     Size  Location     Type
 16799 ;;  rf              1    1[COMMON] unsigned char 
 16800 ;; Return value:  Size  Location     Type
 16801 ;;		None               void
 16802 ;; Registers used:
 16803 ;;		wreg
 16804 ;; Tracked objects:
 16805 ;;		On entry : 0/0
 16806 ;;		On exit  : 0/0
 16807 ;;		Unchanged: 0/0
 16808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16813 ;;Total ram usage:        2 bytes
 16814 ;; Hardware stack levels used:    1
 16815 ;; This function calls:
 16816 ;;		Nothing
 16817 ;; This function is called by:
 16818 ;;		_setRF_ReceiveGO
 16819 ;; This function uses a non-reentrant model
 16820 ;;
 16821                           
 16822                           
 16823                           ;psect for function i1_RfPointSelect
 16824  1E1A                     i1_RfPointSelect:	
 16825                           
 16826                           ;incstack = 0
 16827                           ; Regs used in i1_RfPointSelect: [wreg]
 16828                           ;i1RfPointSelect@rf stored from wreg
 16829  1E1A  00F1               	movwf	i1RfPointSelect@rf
 16830                           
 16831                           ;RF_Control_B1.c: 9: if (rf == 1) {
 16832  1E1B  0871               	movf	i1RfPointSelect@rf,w
 16833  1E1C  3A01               	xorlw	1
 16834  1E1D  1D03               	skipz
 16835  1E1E  2E23               	goto	i1l6460
 16836                           
 16837                           ;RF_Control_B1.c: 10: RF = &RF1;
 16838  1E1F  30CF               	movlw	_RF1& (0+255)
 16839  1E20  00F0               	movwf	??i1_RfPointSelect
 16840  1E21  0870               	movf	??i1_RfPointSelect,w
 16841  1E22  00FA               	movwf	_RF
 16842  1E23                     i1l6460:	
 16843                           
 16844                           ;RF_Control_B1.c: 11: }
 16845                           ;RF_Control_B1.c: 12: if (INTE == 0) {
 16846  1E23  1A0B               	btfsc	11,4	;volatile
 16847  1E24  0008               	return
 16848                           
 16849                           ;RF_Control_B1.c: 13: INTE = 1;
 16850  1E25  160B               	bsf	11,4	;volatile
 16851  1E26  0008               	return
 16852  1E27                     __end_ofi1_RfPointSelect:	
 16853  007E                     btemp	set	126	;btemp
 16854  007E                     pic14e$flags	set	126
 16855  007E                     wtemp	set	126
 16856  007E                     wtemp0	set	126
 16857  0080                     wtemp1	set	128
 16858  0082                     wtemp2	set	130
 16859  0084                     wtemp3	set	132
 16860  0086                     wtemp4	set	134
 16861  0088                     wtemp5	set	136
 16862  007F                     wtemp6	set	127
 16863  007E                     ttemp	set	126
 16864  007E                     ttemp0	set	126
 16865  0081                     ttemp1	set	129
 16866  0084                     ttemp2	set	132
 16867  0087                     ttemp3	set	135
 16868  007F                     ttemp4	set	127
 16869  007E                     ltemp	set	126
 16870  007E                     ltemp0	set	126
 16871  0082                     ltemp1	set	130
 16872  0086                     ltemp2	set	134
 16873  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         221
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     80      80
    BANK1            80      0      80
    BANK2            80      0      75
    BANK3            80      0      61
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw3(BANK3[9]), Sw2(BANK2[9]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW3(BANK1[1]), RFSW2(BANK1[1]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 5
		 -> NULL(NULL[0]), RF1(BANK1[5]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 8
		 -> NULL(NULL[0]), VarTimer0(BANK1[8]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK4[37]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED3(BANK1[4]), VarLED2(BANK1[4]), 
		 -> VarLED1(BANK1[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DimmerLights33	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK2[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights3(BANK2[15]), DimmerLights2(BANK2[15]), DimmerLights1(BANK2[15]), 

    myMain	PTR struct myMain size(1) Largest target is 20
		 -> NULL(NULL[0]), _myMain(BANK3[20]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOnFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Status->_RfSWPointSelect
    _setRFSW_Control->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_setBuz
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _setBuz->___awdiv
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   67217
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                            _my_Main
                _my_TestPointCleared
 ---------------------------------------------------------------------------------
 (1) _my_TestPointCleared                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1549
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0     132
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     130
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19436
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   19436
                                             72 BANK0      3     3      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     258
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      6     6      0    8948
                                             66 BANK0      6     6      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    7459
                                             66 BANK0      3     3      0
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     6     6      0    1264
                                              4 BANK0      6     6      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     740
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     740
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   27370
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   27370
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            1     1      0   25355
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1331
                                             13 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   23980
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setRFSW_Status                                       2     1      1     558
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      1     1      0    8896
                                             66 BANK0      1     1      0
                    _RfSWPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setSw_Status                                         2     1      1     494
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     366
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11399
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11201
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11135
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _RfSWPointSelect                                      2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     112
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        3     3      0    1607
                                             13 BANK0      3     3      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     198
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     198
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     850
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     850
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     230
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9378
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 6     6      0    9264
                                             69 BANK0      6     6      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6357
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6053
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1258
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     718
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      88
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     114
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_StatusFlag                           3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      88
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      88
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     504
                                              7 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     286
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     286
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      88
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      88
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      88
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      66
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setBuz
           ___awdiv
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___awdiv
       _setRF_Learn
         _RfPointSelect
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
       _RfPointSelect
     _setSw_Enable
       _SwPointSelect
   _my_TestPointCleared

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4B       9       93.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 15 14:00:14 2014

                   __size_of_Switch_Main 000C                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                                     _RD 0CA8                                       _RF 007A  
                __end_of_CC2500_WriteREG 1FE6                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007B  
     __end_of_getDimmerLights_StatusFlag 1F47               _getDimmerLights_StatusFlag 1F34  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0C2D  
                           ___ftadd@sign 0048                                      l304 074A  
                                    l321 13B1                                      l318 13AB  
                                    l351 1FC0                                      l352 1FC2  
                                    l363 1FD5                                      l283 14A3  
                                    l292 14D5                                      l381 10E6  
                                    l375 1E87                                      l288 14CD  
                                    l289 14D2                                      l802 10B1  
                                    l387 1292                                      l803 10B9  
                                    l299 0738                                      _GIE 005F  
                                    _CRC 00B8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0021  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00BE                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC6 0076                                      _RC7 0077  
                                    _RF1 00CF                                      _ISR 0004  
                                    _WDT 00ED                                      _Sw1 0159  
                                    _Sw2 0162                                      _Buz 00B7  
                                    _Sw3 01D4                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1FCD                    _Buzzer_Initialization 1DEA  
                        __end_of_ADC_Set 1DCE                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0A9F  
                  _setDimmerLights_AdjRF 126B                    _setDimmerLights_AdjGo 1ECF  
                                   ?_ISR 0070                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F00                             ___ftdiv@sign 003D  
                                   l3000 17E9                                     l2230 15F2  
                                   l3023 0513                 ?_DimmerLightsPointSelect 0070  
                                   l2252 11F3                                     l2253 11FD  
                                   l2267 1486                          __end_of_IOC_Set 1073  
                                   l2710 1772                                     l1399 13E3  
                                   l2660 0255                                     l2629 1DA9  
                                   l6022 0FAF                                     l6120 07A2  
                                   l5400 04CC                                     l6040 0FE5  
                                   l6032 0FD3                                     l6106 077B  
                                   l5410 04EE                                     l5340 17BE  
                                   l5332 17A8                                     l6132 07BB  
                                   l5420 050F                                     l5412 04F2  
                                   l6044 0FEE                                     l6036 0FDC  
                                   l6028 0FCA                                     l7012 02F4  
                                   l6142 12A3                                     l6118 078A  
                                   l6070 14B5                                     l5406 04DF  
                                   l6310 1670                                     l2686 0BD9  
                                   l7022 0327                                     l6144 12AE  
                                   l5336 17AF                                     l5424 0525  
                                   l5408 04E9                                     l5520 0F1A  
                                   l5512 0F06                                     l6048 0FF7  
                                   l6400 174F                                     l5346 17D7  
                                   l5338 17B9                                     l6082 0709  
                                   l6090 073B                                     l5418 0505  
                                   l6402 1752                                     l5348 17DF  
                                   l5540 0B38                                     l6244 13C7  
                                   l5428 0537                                     l5524 0F22  
                                   l5508 0EFE                                     l6412 175E  
                                   l6340 0BB6                                     l7070 06BA  
                                   l5702 0D05                                     l5622 137C  
                                   l5614 1366                                     l5366 1254  
                                   l5454 0E1A                                     l5630 1E31  
                                   l5438 0552                                     l5382 04A3  
                                   l6414 1761                                     l6342 0BB9  
                                   l5448 0E04                                     l5560 0B76  
                                   l6424 176D                                     l6352 0BC5  
                                   l7082 06F4                                     l6186 1F40  
                                   l5706 0D29                                     l5618 1371  
                                   l2994 17D2                                     l5570 0B8F  
                                   l7226 151D                                     l6282 11D8  
                                   l5378 049C                                     l5490 0EAD  
                                   l5642 1162                                     l6354 0BC8  
                                   l7076 06E6                                     l5660 16A6  
                                   l5732 09D7                                     l5724 09CB  
                                   l5476 0E74                                     l5468 0E5B  
                                   l5388 04B2                                     l6364 0BD4  
                                   l7078 06EC                                     l5670 16AE  
                                   l5654 169B                                     l5750 09F3  
                                   l5742 09E7                                     l5574 0B9D  
                                   l5566 0B83                                     l5558 0B68  
                                   l6198 1434                                     l7182 03F6  
                                   l5638 1159                                     l6454 08C3  
                                   l5672 16BA                                     l5728 09D1  
                                   l5736 09DD                                     l5568 0B8C  
                                   l5496 0EC3                                     l5832 07D0  
                                   l5920 083C                                     l6384 0C1B  
                                   l5682 16D5                                     l5770 0A1B  
                                   l5762 0A0F                                     l5746 09ED  
                                   l5754 09F9                                     l6706 0C83  
                                   l6298 165A                                     l7274 0A99  
                                   l7266 0A6D                                     l6716 0CB1  
                                   l6708 0C89                                     l5924 0845  
                                   l7380 1614                                     l5686 16DD  
                                   l5678 16CC                                     l5766 0A15  
                                   l5774 0A21                                     l6742 15A4  
                                   l5870 1147                                     l6902 05C2  
                                   l6672 0C42                                     l6824 096D  
                                   l6674 0C45                                     l6818 0954  
                                   l6746 15AB                                     l6738 159D  
                                   l5946 1474                                     l6914 05DF  
                                   l6684 0C51                                     l6828 09B3  
                                   l5868 1141                                     l5798 093D  
                                   l6686 0C54                                     l6942 0621  
                                   l6696 0C60                                     l6928 0604  
                                   l6880 0584                                     l5898 0AF3  
                                   l6698 0C65                                     l6890 059D  
                                   l6972 0249                    _myMain_Initialization 1F5B  
                                   l6968 023C                                     l6988 0283  
                                   l6998 02B0                                     _CFGS 0CAE  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                          __end_of_INT_ISR 1DEA  
                                   _LATC 010E                                     u4105 0F29  
                                   u4025 0ECF                                     u4035 0EDF  
                                   u4135 0B3F                                     u4055 0F07  
                                   u4065 0F0D                                     u5115 1298  
                                   u4405 16C5                                     u4165 0B69  
                                   u4415 16CD                                     u3615 17CD  
                                   u4095 0F23                                     u3635 17DA  
                                   u4195 0B84                                     _PEIE 005E  
                                   _INTE 005C                                     _INTF 0059  
                                   u4375 16B1                                     u3815 04E0  
                                   u3665 17F0                                     u4650 08EB  
                                   u4395 16BB                                     u3595 17B4  
                                   u3845 04F3                                     u4655 08E9  
                                   u3945 0E2C                                     u3785 04CD  
                                   u3955 0E3C                                     u3875 0506  
                                   u3965 0E5C                                     u3975 0E6B  
                                   u3985 0E75                                     u6665 066D  
                                   u6905 0A45                                     u6915 0A83  
                                   u6865 1504                                     _LWLO 0CAD  
                                   _RFSW 00BF                                     _TMR0 0015  
                        __end_of_INT_Set 1DB4                                     _RSSI 00C0  
                                   _WREN 0CAA                                     _Buz1 014D  
                                   __WDT 00E7                                     _main 15F9  
                           ___ftpack@arg 0020                          __end_of_RF_Main 1DA9  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1FB4  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1E43                                     start 0016  
                                   ttemp 007E                                     wtemp 007E  
                          _RfPointSelect 1E27               __end_of_setRFSW_AdjControl 149C  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 001A  
                       __end_of_LED_Main 1EAF            __end_of_DimmerIntrPointSelect 108D  
                  ?_setDimmerLights_Main 0070                                    ?_main 006C  
              setControl_Lights_Table@rf 0067                          __end_of___awdiv 16E4  
                        __end_of___ftadd 056A                          __end_of___ftdiv 0E96  
                        __end_of___ftmul 0F4A                          ___awdiv@divisor 0020  
                        __end_of___fttol 0BA6             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l745 111E  
                                  i1l746 1127                                    i1l755 107C  
                                  i1l756 1084                   _setDimmerLights_Switch 1EAF  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00E9                                    _RFSW2 00EA  
                                  _RFSW3 00EB                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0022  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0023                            __CFG_WRT$HALF 0000  
     __end_of_setDimmerLights_IntrIOC_GO 118A               _setDimmerLights_IntrIOC_GO 116B  
                       __end_of_TMR0_ISR 141E             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 080D                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
                        __end_of_my_Main 0A9F              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1114  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 002F  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1F11                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0022                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                     _Sw_DimmerOnFunc$5033 0063  
                   _Sw_DimmerOnFunc$5034 0064                     _Sw_DimmerOnFunc$5035 0065  
                     _setRF_DimmerLights 08E1              __size_of_Flash_Memory_Write 0033  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0070                           setSw_Status@sw 0023  
              setDimmerLights_Main@clear 0069                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 16E4                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0018                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 1643                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1DA1                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0B1F  
                   _setSw_Initialization 07F8                                   ??_main 0070  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0F4A                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 001D                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 10C2  
                 ?_setDimmerLights_AdjRF 0070                                ??_INT_ISR 0074  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 006A  
                       ??_setRFSW_Status 0023                                ??_INT_Set 0020  
                ??_Switch_Initialization 0025                        i1RfPointSelect@rf 0071  
                   ??_setRF_DimmerLights 005E                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006C                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                           setRF_Enable@rf 0023  
                       __end_of___awtoft 126B                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 1800                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EBF                                   i1l6602 01C0  
                                 i1l6460 1E23                                   i1l6620 01F1  
                                 i1l6532 00AA                                   i1l6540 00B7  
                                 i1l6606 01C6                                   i1l6624 01F7  
                                 i1l6560 0107                                   i1l6536 00B0  
                                 i1l6628 01FD                                   i1l6572 013C  
                                 i1l6580 0167                                   i1l6564 011A  
                                 i1l6558 0101                                   i1l6566 0120  
                                 i1l6576 0153                                   i1l6586 0182  
                                 i1l6588 0188                                   i1l6598 01BA  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                                   u572_25 0085  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u677_25 1410                                   _IO_Set 1F84  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1DC0           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1F84                                   _Dimmer 00B9  
             __end_of_Mcu_Initialization 10DD                      __end_of_Buzzer_Main 0705  
                                 _Memory 00EF                                   _Timer0 00EC  
     __end_of_setDimmerLights_TriggerAdj 1EEF               _setDimmerLights_TriggerAdj 1EDF  
          setDimmerLights_Switch@command 0022                                ??___awdiv 0024  
                              ??___ftadd 0044                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
                        i1_RfPointSelect 1E1A              setDimmerLights_AdjRF@lights 0060  
                 ??_setDimmerLights_Main 0065                                   _r_data 00C5  
                                 _s_data 00C6                                   _setLED 09BB  
                                 _myMain 00EE                         _DimmerLightsIntr 0079  
              _setDimmerLights_Main$1956 0066                _setDimmerLights_Main$1957 0067  
              _setDimmerLights_Main$1958 0068                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0CB7         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070             __size_of_my_TestPointCleared 0012  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 0223  
            _setDimmerLights_IntrControl 004C                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                    __end_of_SwPointSelect 116B  
                          ?_setRF_Enable 0022                          _RfSWPointSelect 11E8  
           __size_of_Flash_Memory_Modify 006E        setDimmerLights_IntrControl@lights 0076  
            __size_of_DimmerLights_Close 0014                  __size_of_LedPointSelect 002D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1DA9                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 173F         __end_of_CC2500_registers_address 102F  
                __end_of__initialization 0048                          ??_RfPointSelect 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1208                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003E  
                     _LED_Initialization 1E8F                ??_setControl_Lights_Table 0067  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
               __size_of_setRF_ReceiveGO 001A                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                 __end_of_setDimmerReClock 1E52  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0070  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0023  
                         _DimmerLights11 00BA                           _DimmerLights22 00BB  
                         _DimmerLights33 00BC                     __size_of_setLED_Main 0047  
              ??_setDimmerLights_Trigger 0023                       ??_CC2500_WriteByte 0020  
           setDimmerLights_Switch@lights 0023                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 063E                        ??_setRFSW_Control 0062  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                               __pnvCOMMON 007D  
                          ??_Switch_Main 006B                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0078                        LedPointSelect@led 0021  
                __end_ofi1_RfPointSelect 1E27                     __size_of_setRF_Learn 000E  
                            setBuz@count 002C                               __pmaintext 15F9  
                    _CC2500_WriteCommand 1E7F         __size_of_DimmerLightsPointSelect 001B  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0077  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00A0                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0028                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1DC7  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1DD5                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 145C                  __end_of_RfSWPointSelect 1208  
                      Sw_DimmerOnFunc@sw 0067                                  _IOC_ISR 1EEF  
                                _IOC_Set 1066                     __size_of_setLog_Code 0047  
                                _INT_ISR 1DDE                                  _INT_Set 1DAE  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 14E0  
                      _Flash_Memory_Read 108D              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 00BE                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0070                              setTxData@rf 0023  
                                _RF_Data 00A0                                  _RF_Main 1DA5  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1F9C          __end_of_setControl_Lights_Table 1000  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 0BA6                          _setPercentValue 1525  
                          setLog_Code@rf 002E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00E4  
           __end_of_CC2500_FrequencyCabr 1E02                          __size_of_IO_Set 0018  
                    ??_Flash_Memory_Main 0027                      ??_Flash_Memory_Read 0020  
                                _VarLED1 00D8                                  _VarLED2 00DC  
                                _VarLED3 00E0                        __end_of_getRxData 1690  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1131  
                         RF_RxDisable@rf 0024          __end_of_setDimmerLights_Trigger 1ECF  
                   ??_setRFSW_AdjControl 0064           __end_of_setDimmerLights_Switch 1EBF  
                                ___awdiv 1690                                  ___ftadd 0474  
                         ??_setSw_Enable 0022                                  ___ftdiv 0DED  
                                ___ftmul 0E96                                  ___fttol 0B1F  
                    __end_of_Switch_Main 1E1A                  ??_Buzzer_Initialization 0020  
                                __myMain 01C0                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0070  
                   setRFSW_AdjControl@sw 0066                          __size_of_setBuz 0096  
                         ??_setSw_Status 0023                                  __ptext1 1F22  
                                __ptext2 0A2B                                  __ptext3 12DA  
                                __ptext4 12B3                                  __ptext5 1F5B  
                                __ptext6 10F8                                  __ptext7 0002  
                                __ptext8 1E0E                                  __ptext9 0223  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0066  
                  _DimmerIntrPointSelect 1073                             __size_of_ISR 0012  
              __end_of_Flash_Memory_Main 1525                __end_of_Flash_Memory_Read 10A7  
                             _setRF_Main 056A                  ??_myMain_Initialization 0020  
                      _DimmerLights_Main 1E52                                  _my_Main 0A2B  
                  ??_CC2500_WriteCommand 0022                        ??_setRF_ReceiveGO 0073  
             __end_of_CC2500_ClearRXFIFO 1D95               __end_of_CC2500_ClearTXFIFO 1D99  
          DimmerLightsPointSelect@lights 0021                       ?_DimmerLights_Main 0070  
                                _product 007D                           _LedPointSelect 135A  
                                clrloop0 1DBB           __size_of_Switch_Initialization 0011  
          __end_of_Switch_Initialization 1F22                     end_of_initialization 0048  
                      _CC2500_InitSetREG 1303                            _DelayTime_1us 128D  
                      __end_of_setTxData 0DED               __end_of_Flash_Memory_Write 13EA  
                    _my_TestPointCleared 1F22                                  init_ram 1DB4  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 006B  
                   Flash_Memory_Read@ret 0023                                  initloop 1DB5  
                             _setSw_Main 0223                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 10DD                     Flash_Memory_Modify@i 0026  
                  _setLED_Initialization 1F00                         ?i1_RfPointSelect 0070  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0705  
                          _CC2500_TxData 149C                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 12DA              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                      _Flash_Memory_Modify 094D  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1DD5  
                    ??_CC2500_ReadStatus 0022                   setRF_Initialization@rf 0070  
       getDimmerLights_StatusFlag@Status 0021                  CC2500_InitSetREG@loop_c 0028  
                   ?_my_TestPointCleared 0070                      __size_of_TouchPower 0005  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1E61                       _Mcu_Initialization 10C2  
               __size_of_CC2500_PowerRST 0030                         ?_RfSWPointSelect 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1387  
                __end_of_Sw_DimmerOnFunc 0C2D                  __end_of_setPercentValue 156B  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 132D  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 141E                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 10F8                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1F9C  
                   _setRF_Initialization 1DCE                              _Switch_Main 1E0E  
                      __size_of_LED_Main 0010                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 10A7  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1F6F  
                   ??_Mcu_Initialization 0021                            ?_WDT_Clearing 0070  
                   ?_setDimmerLights_Adj 0062                __size_of_Sw_DimmerAdjFunc 0060  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1114  
                  ??_my_TestPointCleared 0020                             setRF_Main@rf 006A  
                      __size_of_TMR0_ISR 0034                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 000D                     __end_of_setMemory_GO 11C8  
          __size_of_setDimmerLights_Main 008A                           __end_of_setLED 0A2B  
                         __end_of_setBuz 0D4D          _getDimmerLights_StatusFlag$1961 0022  
                   _CC2500_FrequencyCabr 1DF6                __size_of_Sw_DimmerOffFunc 006A  
             __size_of_Flash_Memory_Main 0045               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 080D  
                      __size_of_WDT_Main 001C                        ?_setDimmerReClock 0070  
                    start_initialization 0018                        _setRF_DimmerValue 07C3  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1F5B  
                            __end_of_ISR 0016                    ??_Flash_Memory_Modify 0024  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 11A9                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1303                          RfPointSelect@rf 0021  
                           ?_Buzzer_Main 0070                                 ??_IO_Set 0020  
                              _VarErrLED 00D4                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1E70                       Sw_DimmerAdjFunc@sw 0029  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                              _VarMemory 0220                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 1E35                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 00C7                           ??_WDT_Clearing 0020  
                              _Rx_Length 00C1                  setRF_DimmerValue@lights 0063  
                  ??_setDimmerLights_Adj 0063                   __size_of_SwPointSelect 001D  
                              _Tx_Length 00C3                              __pdataBANK3 01A0  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                        ??_CC2500_ReadByte 0020  
                       _CC2500_SIDLEMode 1D99               __size_of_DimmerLights_Main 000F  
              __end_of_setRF_DimmerValue 07F8                    ?_CC2500_FrequencyCabr 0070  
                          ??_setLED_Main 0022                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0070  
                        _setRF_Main$4228 006B                              __pbssCOMMON 0078  
                               ?_IOC_Set 0070                                ___latbits 0003  
                               ?_INT_ISR 0070                      setRF_Enable@command 0022  
                       ?_Sw_DimmerOnFunc 0070                            __pcstackBANK0 0020  
                               ?_INT_Set 0070                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020               __size_of_CC2500_ReadStatus 001B  
                          ??_setRF_Learn 0023                        ??_CC2500_WriteREG 0023  
                          _DimmerLights1 0120                            _DimmerLights2 012F  
                          _DimmerLights3 013E                    CC2500_WriteREG@w_addr 0024  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 0027  
                        ??_CC2500_RxData 002D                          ??_CC2500_TxData 0024  
                              __pnvBANK1 00EC              __size_of_LED_Initialization 0010  
                 ?_CC2500_PowerOnInitial 0070                      __size_of_setRF_Main 00D4  
                             setBuz@time 0029                 ?_setControl_Lights_Table 0070  
    __end_of_Flash_Memory_Initialization 0474              _Flash_Memory_Initialization 037C  
                               ?___awdiv 0020                                __ptext101 13EA  
                              __ptext110 1E1A                                __ptext102 004C  
                              __ptext103 1073                                __ptext104 1EEF  
                              __ptext105 1E43                                __ptext106 116B  
                              __ptext107 1114                                __ptext108 1DDE  
                              __ptext109 1FE6                                 ?___ftadd 003E  
                              _getRxData 1643                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0877                          _setRF_ReceiveGO 1FE6  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 1DF6                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1DAE                 ?_setDimmerLights_Trigger 0022  
                    __size_of_setSw_Main 0159             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0022           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 128D            __end_of_setDimmerLights_AdjGo 1EDF  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00C4           __size_of_myMain_Initialization 0014  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F6F  
                       __CFG_WDTE$SWDTEN 0000                             _setRF_Enable 12B3  
                          _SwPointSelect 114E                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 15B2                      _DimmerLightsIntrIOC 00BD  
                 ??_setRF_Initialization 0020                        _CC2500_rfSettings 102F  
                               _LED_Main 1E9F                          SwPointSelect@sw 0021  
                              clear_ram0 1DBA                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 0D4D      __end_of_DimmerLights_Initialization 1249  
            _DimmerLights_Initialization 1228                       _CC2500_ClearRXFIFO 1D91  
                     _CC2500_ClearTXFIFO 1D95           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E43                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060                   setRF_ReceiveGO@command 0072  
            __size_of_setRFSW_AdjControl 0040                    __size_of_setMemory_GO 001F  
                     _Flash_Memory_Write 13B7                               ?_getRxData 0070  
                               _TMR0_ISR 13EA                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                        setRF_ReceiveGO@rf 0073  
                               _TMR0_Set 0800                         _Sw_DimmerAdjFunc 173F  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 00B5  
                   __end_of_RF_RxDisable 11E8              __end_of_CC2500_WriteCommand 1E8F  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 10F8  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0877  
                  _Sw_DimmerAdjFunc$5043 0025                    _Sw_DimmerAdjFunc$5044 0026  
                  _Sw_DimmerAdjFunc$5045 0027                    __size_of_setSw_Enable 0029  
                           setSw_Main@sw 006A         setDimmerLights_IntrIOC_GO@lights 0072  
                       __size_of_IOC_ISR 0011             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1E0E  
                         ?_SwPointSelect 0070                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 15F9  
                  __size_of_setSw_Status 000F                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0004                                 _Fosc_Set 1D9D  
                       __size_of_WDT_Set 0018                    _Switch_Initialization 1F11  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0025  
                         _setRFSW_Status 1E70                             _setMemory_GO 11A9  
                   __size_of_Buzzer_Main 00C7                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1FB4             Flash_Memory_Initialization@i 005E  
                __end_of_setRF_ReceiveGO 2000                        setRFSW_Control@sw 0062  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 12DA                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                 __size_ofi1_RfPointSelect 000D  
                               ___awtoft 1249                         ??_LedPointSelect 0020  
                               ___ftpack 179F                             _setSw_Status 1E61  
                           ??_setRF_Main 0069                     CC2500_WriteREG@value 0022  
                            _setLED_Main 156B                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 094D                         __size_of_my_Main 0074  
                               __ptext10 1E35                                 __ptext11 0BA6  
                               __ptext20 056A                                 __ptext12 0877  
                               __ptext21 1643                                 __ptext13 173F  
                               __ptext30 145C                                 __ptext22 15B2  
                               __ptext14 1EDF                                 __ptext31 07C3  
                               __ptext23 0F4A                                 __ptext15 1ECF  
                               __ptext40 10DD                                 __ptext32 126B  
                               __ptext24 1E70                                 __ptext16 1F11  
                               __ptext41 1131                                 __ptext33 16E4  
                               __ptext25 080D                                 __ptext17 07F8  
                               __ptext50 1D9D                                 __ptext42 1DA1  
                               __ptext34 0E96                                 __ptext26 1E61  
                               __ptext18 1DA9                                 __ptext51 1DC7  
                               __ptext43 1DCE                                 __ptext35 0474  
                               __ptext27 114E                                 __ptext19 1DA5  
                               __ptext60 13B7                                 __ptext52 1E9F  
                               __ptext44 10C2                                 __ptext36 11E8  
                               __ptext28 1EBF                                 __ptext61 1DD5  
                               __ptext53 156B                                 __ptext45 1F9C  
                               __ptext37 11C8                                 __ptext29 1EAF  
                               __ptext70 0B1F                                 __ptext62 108D  
                               __ptext54 1E8F                                 __ptext46 0800  
                               __ptext38 149C                                 __ptext71 0DED  
                               __ptext63 1E52                                 __ptext55 1F00  
                               __ptext47 1F84                                 __ptext39 0705  
                               __ptext80 11A9                                 __ptext72 1249  
                               __ptext64 0C2D                                 __ptext56 14E0  
                               __ptext48 1066                                 __ptext81 1F34  
                               __ptext73 179F                                 __ptext65 141E  
                               __ptext57 094D                                 __ptext49 1DAE  
                               __ptext90 118A                                 __ptext82 1228  
                               __ptext74 0A9F                                 __ptext66 0D4D  
                               __ptext58 1E02                                 __ptext91 1FCD  
                               __ptext83 132D                                 __ptext75 09BB  
                               __ptext67 1E27                                 __ptext59 037C  
                               __ptext92 1DF6                                 __ptext84 10A7  
                               __ptext76 135A                                 __ptext68 08E1  
                               __ptext93 128D                                 __ptext85 1DC0  
                               __ptext77 0CB7                                 __ptext69 1525  
                               __ptext94 1D95                                 __ptext86 1F6F  
                               __ptext78 1690                                 __ptext95 1D91  
                               __ptext87 1D99                                 __ptext79 1F47  
                               __ptext96 1E7F                                 __ptext88 1387  
                               __ptext97 1FB4                                 __ptext89 1303  
                               __ptext98 063E                                 __ptext99 1DEA  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 0020  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1E7F  
          __end_of_Dimmer_Initialization 1DC7             __end_of_setDimmerLights_Main 0CB7  
                           ??_setSw_Main 0068                            setLED@command 0022  
                          __size_of_main 004A                              _setRF_Learn 1E35  
               __end_of_CC2500_SIDLEMode 1D9D               setDimmerLights_Main@lights 006A  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1F47  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 000F  
                        _CC2500_ReadByte 1131                       _CC2500_InitPATable 118A  
    __size_of_getDimmerLights_StatusFlag 0013              __end_of_my_TestPointCleared 1F34  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 063E  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0068                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 006C  
                               main@argv 006E                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1387              __end_of_Flash_Memory_Modify 09BB  
                      ??_getPercentValue 0059                              _setLog_Code 15B2  
            __end_of_Flash_Memory_Unlock 1DDE                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1FCD                       __end_of_setSw_Main 037C  
                          _Transceive_OK 03E1                              pic14e$flags 007E  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 135A  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 132D  
            __end_of_setDimmerLights_Adj 145C                              ??_setTxData 0022  
                       ?_setRF_ReceiveGO 0072                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 0020                        _RF_Initialization 1DA1  
   __size_of_setDimmerLights_IntrControl 01D7                     _Flash_Memory_Erasing 1E02  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00C2  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                      ??_RF_Initialization 0021  
                            getRxData@rf 0068         __size_of_setControl_Lights_Table 00B6  
                 __size_of_RfPointSelect 000E                        ??i1_RfPointSelect 0070  
   __size_of_Flash_Memory_Initialization 00F8                    __end_of_DelayTime_1us 12B3  
               __end_of_Sw_DimmerAdjFunc 179F                  __end_of_CC2500_ReadByte 114E  
           __end_of_setSw_Initialization 0800                     getPercentValue@value 005B  
                           _RF_RxDisable 11C8               __end_of_LED_Initialization 1E9F  
       __size_of_setDimmerLights_Trigger 0010                 __size_of_Sw_DimmerOnFunc 0087  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DA5                 __end_of_Sw_DimmerOffFunc 08E1  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 07C3                    __end_of_CC2500_TxData 14E0  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 13B7  
