

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 30 11:41:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK5,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	intentry,global,class=CODE,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,inline,delta=2
   174                           	psect	text154,local,class=CODE,merge=1,inline,delta=2
   175                           	dabs	1,0x7E,2
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0015                     	;# 
   195  0016                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001C                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  0090                     	;# 
   207  0091                     	;# 
   208  0092                     	;# 
   209  0095                     	;# 
   210  0096                     	;# 
   211  0097                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009B                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  010C                     	;# 
   220  010D                     	;# 
   221  010E                     	;# 
   222  0116                     	;# 
   223  0117                     	;# 
   224  011D                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  018E                     	;# 
   228  0191                     	;# 
   229  0191                     	;# 
   230  0192                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0194                     	;# 
   234  0195                     	;# 
   235  0196                     	;# 
   236  0197                     	;# 
   237  0199                     	;# 
   238  019A                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019C                     	;# 
   244  019C                     	;# 
   245  019D                     	;# 
   246  019E                     	;# 
   247  019F                     	;# 
   248  020D                     	;# 
   249  0210                     	;# 
   250  0211                     	;# 
   251  0211                     	;# 
   252  0212                     	;# 
   253  0212                     	;# 
   254  0213                     	;# 
   255  0213                     	;# 
   256  0214                     	;# 
   257  0214                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  0291                     	;# 
   266  0291                     	;# 
   267  0292                     	;# 
   268  0293                     	;# 
   269  0298                     	;# 
   270  0298                     	;# 
   271  0299                     	;# 
   272  029A                     	;# 
   273  0394                     	;# 
   274  0395                     	;# 
   275  0396                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  0010                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  008C                     	;# 
   315  008D                     	;# 
   316  008E                     	;# 
   317  0090                     	;# 
   318  0091                     	;# 
   319  0092                     	;# 
   320  0095                     	;# 
   321  0096                     	;# 
   322  0097                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  010C                     	;# 
   331  010D                     	;# 
   332  010E                     	;# 
   333  0116                     	;# 
   334  0117                     	;# 
   335  011D                     	;# 
   336  018C                     	;# 
   337  018D                     	;# 
   338  018E                     	;# 
   339  0191                     	;# 
   340  0191                     	;# 
   341  0192                     	;# 
   342  0193                     	;# 
   343  0193                     	;# 
   344  0194                     	;# 
   345  0195                     	;# 
   346  0196                     	;# 
   347  0197                     	;# 
   348  0199                     	;# 
   349  019A                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019B                     	;# 
   354  019C                     	;# 
   355  019C                     	;# 
   356  019D                     	;# 
   357  019E                     	;# 
   358  019F                     	;# 
   359  020D                     	;# 
   360  0210                     	;# 
   361  0211                     	;# 
   362  0211                     	;# 
   363  0212                     	;# 
   364  0212                     	;# 
   365  0213                     	;# 
   366  0213                     	;# 
   367  0214                     	;# 
   368  0214                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0215                     	;# 
   372  0216                     	;# 
   373  0216                     	;# 
   374  0217                     	;# 
   375  0217                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0298                     	;# 
   381  0298                     	;# 
   382  0299                     	;# 
   383  029A                     	;# 
   384  0394                     	;# 
   385  0395                     	;# 
   386  0396                     	;# 
   387  0FE4                     	;# 
   388  0FE5                     	;# 
   389  0FE6                     	;# 
   390  0FE7                     	;# 
   391  0FE8                     	;# 
   392  0FE9                     	;# 
   393  0FEA                     	;# 
   394  0FEB                     	;# 
   395  0FED                     	;# 
   396  0FEE                     	;# 
   397  0FEF                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000D                     	;# 
   412  000E                     	;# 
   413  0010                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0015                     	;# 
   417  0016                     	;# 
   418  0016                     	;# 
   419  0017                     	;# 
   420  0018                     	;# 
   421  0019                     	;# 
   422  001A                     	;# 
   423  001B                     	;# 
   424  001C                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  0090                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0095                     	;# 
   432  0096                     	;# 
   433  0097                     	;# 
   434  0099                     	;# 
   435  009A                     	;# 
   436  009B                     	;# 
   437  009B                     	;# 
   438  009C                     	;# 
   439  009D                     	;# 
   440  009E                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  0116                     	;# 
   445  0117                     	;# 
   446  011D                     	;# 
   447  018C                     	;# 
   448  018D                     	;# 
   449  018E                     	;# 
   450  0191                     	;# 
   451  0191                     	;# 
   452  0192                     	;# 
   453  0193                     	;# 
   454  0193                     	;# 
   455  0194                     	;# 
   456  0195                     	;# 
   457  0196                     	;# 
   458  0197                     	;# 
   459  0199                     	;# 
   460  019A                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019C                     	;# 
   466  019C                     	;# 
   467  019D                     	;# 
   468  019E                     	;# 
   469  019F                     	;# 
   470  020D                     	;# 
   471  0210                     	;# 
   472  0211                     	;# 
   473  0211                     	;# 
   474  0212                     	;# 
   475  0212                     	;# 
   476  0213                     	;# 
   477  0213                     	;# 
   478  0214                     	;# 
   479  0214                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0215                     	;# 
   483  0216                     	;# 
   484  0216                     	;# 
   485  0217                     	;# 
   486  0217                     	;# 
   487  0291                     	;# 
   488  0291                     	;# 
   489  0292                     	;# 
   490  0293                     	;# 
   491  0298                     	;# 
   492  0298                     	;# 
   493  0299                     	;# 
   494  029A                     	;# 
   495  0394                     	;# 
   496  0395                     	;# 
   497  0396                     	;# 
   498  0FE4                     	;# 
   499  0FE5                     	;# 
   500  0FE6                     	;# 
   501  0FE7                     	;# 
   502  0FE8                     	;# 
   503  0FE9                     	;# 
   504  0FEA                     	;# 
   505  0FEB                     	;# 
   506  0FED                     	;# 
   507  0FEE                     	;# 
   508  0FEF                     	;# 
   509  0000                     	;# 
   510  0001                     	;# 
   511  0002                     	;# 
   512  0003                     	;# 
   513  0004                     	;# 
   514  0005                     	;# 
   515  0006                     	;# 
   516  0007                     	;# 
   517  0008                     	;# 
   518  0009                     	;# 
   519  000A                     	;# 
   520  000B                     	;# 
   521  000C                     	;# 
   522  000D                     	;# 
   523  000E                     	;# 
   524  0010                     	;# 
   525  0011                     	;# 
   526  0012                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0016                     	;# 
   530  0017                     	;# 
   531  0018                     	;# 
   532  0019                     	;# 
   533  001A                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  008C                     	;# 
   537  008D                     	;# 
   538  008E                     	;# 
   539  0090                     	;# 
   540  0091                     	;# 
   541  0092                     	;# 
   542  0095                     	;# 
   543  0096                     	;# 
   544  0097                     	;# 
   545  0099                     	;# 
   546  009A                     	;# 
   547  009B                     	;# 
   548  009B                     	;# 
   549  009C                     	;# 
   550  009D                     	;# 
   551  009E                     	;# 
   552  010C                     	;# 
   553  010D                     	;# 
   554  010E                     	;# 
   555  0116                     	;# 
   556  0117                     	;# 
   557  011D                     	;# 
   558  018C                     	;# 
   559  018D                     	;# 
   560  018E                     	;# 
   561  0191                     	;# 
   562  0191                     	;# 
   563  0192                     	;# 
   564  0193                     	;# 
   565  0193                     	;# 
   566  0194                     	;# 
   567  0195                     	;# 
   568  0196                     	;# 
   569  0197                     	;# 
   570  0199                     	;# 
   571  019A                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019B                     	;# 
   576  019C                     	;# 
   577  019C                     	;# 
   578  019D                     	;# 
   579  019E                     	;# 
   580  019F                     	;# 
   581  020D                     	;# 
   582  0210                     	;# 
   583  0211                     	;# 
   584  0211                     	;# 
   585  0212                     	;# 
   586  0212                     	;# 
   587  0213                     	;# 
   588  0213                     	;# 
   589  0214                     	;# 
   590  0214                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0215                     	;# 
   594  0216                     	;# 
   595  0216                     	;# 
   596  0217                     	;# 
   597  0217                     	;# 
   598  0291                     	;# 
   599  0291                     	;# 
   600  0292                     	;# 
   601  0293                     	;# 
   602  0298                     	;# 
   603  0298                     	;# 
   604  0299                     	;# 
   605  029A                     	;# 
   606  0394                     	;# 
   607  0395                     	;# 
   608  0396                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  000D                     	;# 
   634  000E                     	;# 
   635  0010                     	;# 
   636  0011                     	;# 
   637  0012                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  008C                     	;# 
   648  008D                     	;# 
   649  008E                     	;# 
   650  0090                     	;# 
   651  0091                     	;# 
   652  0092                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0099                     	;# 
   657  009A                     	;# 
   658  009B                     	;# 
   659  009B                     	;# 
   660  009C                     	;# 
   661  009D                     	;# 
   662  009E                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0116                     	;# 
   667  0117                     	;# 
   668  011D                     	;# 
   669  018C                     	;# 
   670  018D                     	;# 
   671  018E                     	;# 
   672  0191                     	;# 
   673  0191                     	;# 
   674  0192                     	;# 
   675  0193                     	;# 
   676  0193                     	;# 
   677  0194                     	;# 
   678  0195                     	;# 
   679  0196                     	;# 
   680  0197                     	;# 
   681  0199                     	;# 
   682  019A                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019C                     	;# 
   688  019C                     	;# 
   689  019D                     	;# 
   690  019E                     	;# 
   691  019F                     	;# 
   692  020D                     	;# 
   693  0210                     	;# 
   694  0211                     	;# 
   695  0211                     	;# 
   696  0212                     	;# 
   697  0212                     	;# 
   698  0213                     	;# 
   699  0213                     	;# 
   700  0214                     	;# 
   701  0214                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0216                     	;# 
   706  0216                     	;# 
   707  0217                     	;# 
   708  0217                     	;# 
   709  0291                     	;# 
   710  0291                     	;# 
   711  0292                     	;# 
   712  0293                     	;# 
   713  0298                     	;# 
   714  0298                     	;# 
   715  0299                     	;# 
   716  029A                     	;# 
   717  0394                     	;# 
   718  0395                     	;# 
   719  0396                     	;# 
   720  0FE4                     	;# 
   721  0FE5                     	;# 
   722  0FE6                     	;# 
   723  0FE7                     	;# 
   724  0FE8                     	;# 
   725  0FE9                     	;# 
   726  0FEA                     	;# 
   727  0FEB                     	;# 
   728  0FED                     	;# 
   729  0FEE                     	;# 
   730  0FEF                     	;# 
   731  0000                     	;# 
   732  0001                     	;# 
   733  0002                     	;# 
   734  0003                     	;# 
   735  0004                     	;# 
   736  0005                     	;# 
   737  0006                     	;# 
   738  0007                     	;# 
   739  0008                     	;# 
   740  0009                     	;# 
   741  000A                     	;# 
   742  000B                     	;# 
   743  000C                     	;# 
   744  000D                     	;# 
   745  000E                     	;# 
   746  0010                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0015                     	;# 
   750  0016                     	;# 
   751  0016                     	;# 
   752  0017                     	;# 
   753  0018                     	;# 
   754  0019                     	;# 
   755  001A                     	;# 
   756  001B                     	;# 
   757  001C                     	;# 
   758  008C                     	;# 
   759  008D                     	;# 
   760  008E                     	;# 
   761  0090                     	;# 
   762  0091                     	;# 
   763  0092                     	;# 
   764  0095                     	;# 
   765  0096                     	;# 
   766  0097                     	;# 
   767  0099                     	;# 
   768  009A                     	;# 
   769  009B                     	;# 
   770  009B                     	;# 
   771  009C                     	;# 
   772  009D                     	;# 
   773  009E                     	;# 
   774  010C                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  0116                     	;# 
   778  0117                     	;# 
   779  011D                     	;# 
   780  018C                     	;# 
   781  018D                     	;# 
   782  018E                     	;# 
   783  0191                     	;# 
   784  0191                     	;# 
   785  0192                     	;# 
   786  0193                     	;# 
   787  0193                     	;# 
   788  0194                     	;# 
   789  0195                     	;# 
   790  0196                     	;# 
   791  0197                     	;# 
   792  0199                     	;# 
   793  019A                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019B                     	;# 
   798  019C                     	;# 
   799  019C                     	;# 
   800  019D                     	;# 
   801  019E                     	;# 
   802  019F                     	;# 
   803  020D                     	;# 
   804  0210                     	;# 
   805  0211                     	;# 
   806  0211                     	;# 
   807  0212                     	;# 
   808  0212                     	;# 
   809  0213                     	;# 
   810  0213                     	;# 
   811  0214                     	;# 
   812  0214                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0215                     	;# 
   816  0216                     	;# 
   817  0216                     	;# 
   818  0217                     	;# 
   819  0217                     	;# 
   820  0291                     	;# 
   821  0291                     	;# 
   822  0292                     	;# 
   823  0293                     	;# 
   824  0298                     	;# 
   825  0298                     	;# 
   826  0299                     	;# 
   827  029A                     	;# 
   828  0394                     	;# 
   829  0395                     	;# 
   830  0396                     	;# 
   831  0FE4                     	;# 
   832  0FE5                     	;# 
   833  0FE6                     	;# 
   834  0FE7                     	;# 
   835  0FE8                     	;# 
   836  0FE9                     	;# 
   837  0FEA                     	;# 
   838  0FEB                     	;# 
   839  0FED                     	;# 
   840  0FEE                     	;# 
   841  0FEF                     	;# 
   842  0000                     	;# 
   843  0001                     	;# 
   844  0002                     	;# 
   845  0003                     	;# 
   846  0004                     	;# 
   847  0005                     	;# 
   848  0006                     	;# 
   849  0007                     	;# 
   850  0008                     	;# 
   851  0009                     	;# 
   852  000A                     	;# 
   853  000B                     	;# 
   854  000C                     	;# 
   855  000D                     	;# 
   856  000E                     	;# 
   857  0010                     	;# 
   858  0011                     	;# 
   859  0012                     	;# 
   860  0015                     	;# 
   861  0016                     	;# 
   862  0016                     	;# 
   863  0017                     	;# 
   864  0018                     	;# 
   865  0019                     	;# 
   866  001A                     	;# 
   867  001B                     	;# 
   868  001C                     	;# 
   869  008C                     	;# 
   870  008D                     	;# 
   871  008E                     	;# 
   872  0090                     	;# 
   873  0091                     	;# 
   874  0092                     	;# 
   875  0095                     	;# 
   876  0096                     	;# 
   877  0097                     	;# 
   878  0099                     	;# 
   879  009A                     	;# 
   880  009B                     	;# 
   881  009B                     	;# 
   882  009C                     	;# 
   883  009D                     	;# 
   884  009E                     	;# 
   885  010C                     	;# 
   886  010D                     	;# 
   887  010E                     	;# 
   888  0116                     	;# 
   889  0117                     	;# 
   890  011D                     	;# 
   891  018C                     	;# 
   892  018D                     	;# 
   893  018E                     	;# 
   894  0191                     	;# 
   895  0191                     	;# 
   896  0192                     	;# 
   897  0193                     	;# 
   898  0193                     	;# 
   899  0194                     	;# 
   900  0195                     	;# 
   901  0196                     	;# 
   902  0197                     	;# 
   903  0199                     	;# 
   904  019A                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019B                     	;# 
   909  019C                     	;# 
   910  019C                     	;# 
   911  019D                     	;# 
   912  019E                     	;# 
   913  019F                     	;# 
   914  020D                     	;# 
   915  0210                     	;# 
   916  0211                     	;# 
   917  0211                     	;# 
   918  0212                     	;# 
   919  0212                     	;# 
   920  0213                     	;# 
   921  0213                     	;# 
   922  0214                     	;# 
   923  0214                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0215                     	;# 
   927  0216                     	;# 
   928  0216                     	;# 
   929  0217                     	;# 
   930  0217                     	;# 
   931  0291                     	;# 
   932  0291                     	;# 
   933  0292                     	;# 
   934  0293                     	;# 
   935  0298                     	;# 
   936  0298                     	;# 
   937  0299                     	;# 
   938  029A                     	;# 
   939  0394                     	;# 
   940  0395                     	;# 
   941  0396                     	;# 
   942  0FE4                     	;# 
   943  0FE5                     	;# 
   944  0FE6                     	;# 
   945  0FE7                     	;# 
   946  0FE8                     	;# 
   947  0FE9                     	;# 
   948  0FEA                     	;# 
   949  0FEB                     	;# 
   950  0FED                     	;# 
   951  0FEE                     	;# 
   952  0FEF                     	;# 
   953  0000                     	;# 
   954  0001                     	;# 
   955  0002                     	;# 
   956  0003                     	;# 
   957  0004                     	;# 
   958  0005                     	;# 
   959  0006                     	;# 
   960  0007                     	;# 
   961  0008                     	;# 
   962  0009                     	;# 
   963  000A                     	;# 
   964  000B                     	;# 
   965  000C                     	;# 
   966  000D                     	;# 
   967  000E                     	;# 
   968  0010                     	;# 
   969  0011                     	;# 
   970  0012                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  008C                     	;# 
   981  008D                     	;# 
   982  008E                     	;# 
   983  0090                     	;# 
   984  0091                     	;# 
   985  0092                     	;# 
   986  0095                     	;# 
   987  0096                     	;# 
   988  0097                     	;# 
   989  0099                     	;# 
   990  009A                     	;# 
   991  009B                     	;# 
   992  009B                     	;# 
   993  009C                     	;# 
   994  009D                     	;# 
   995  009E                     	;# 
   996  010C                     	;# 
   997  010D                     	;# 
   998  010E                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  011D                     	;# 
  1002  018C                     	;# 
  1003  018D                     	;# 
  1004  018E                     	;# 
  1005  0191                     	;# 
  1006  0191                     	;# 
  1007  0192                     	;# 
  1008  0193                     	;# 
  1009  0193                     	;# 
  1010  0194                     	;# 
  1011  0195                     	;# 
  1012  0196                     	;# 
  1013  0197                     	;# 
  1014  0199                     	;# 
  1015  019A                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019B                     	;# 
  1020  019C                     	;# 
  1021  019C                     	;# 
  1022  019D                     	;# 
  1023  019E                     	;# 
  1024  019F                     	;# 
  1025  020D                     	;# 
  1026  0210                     	;# 
  1027  0211                     	;# 
  1028  0211                     	;# 
  1029  0212                     	;# 
  1030  0212                     	;# 
  1031  0213                     	;# 
  1032  0213                     	;# 
  1033  0214                     	;# 
  1034  0214                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0215                     	;# 
  1038  0216                     	;# 
  1039  0216                     	;# 
  1040  0217                     	;# 
  1041  0217                     	;# 
  1042  0291                     	;# 
  1043  0291                     	;# 
  1044  0292                     	;# 
  1045  0293                     	;# 
  1046  0298                     	;# 
  1047  0298                     	;# 
  1048  0299                     	;# 
  1049  029A                     	;# 
  1050  0394                     	;# 
  1051  0395                     	;# 
  1052  0396                     	;# 
  1053  0FE4                     	;# 
  1054  0FE5                     	;# 
  1055  0FE6                     	;# 
  1056  0FE7                     	;# 
  1057  0FE8                     	;# 
  1058  0FE9                     	;# 
  1059  0FEA                     	;# 
  1060  0FEB                     	;# 
  1061  0FED                     	;# 
  1062  0FEE                     	;# 
  1063  0FEF                     	;# 
  1064  0000                     	;# 
  1065  0001                     	;# 
  1066  0002                     	;# 
  1067  0003                     	;# 
  1068  0004                     	;# 
  1069  0005                     	;# 
  1070  0006                     	;# 
  1071  0007                     	;# 
  1072  0008                     	;# 
  1073  0009                     	;# 
  1074  000A                     	;# 
  1075  000B                     	;# 
  1076  000C                     	;# 
  1077  000D                     	;# 
  1078  000E                     	;# 
  1079  0010                     	;# 
  1080  0011                     	;# 
  1081  0012                     	;# 
  1082  0015                     	;# 
  1083  0016                     	;# 
  1084  0016                     	;# 
  1085  0017                     	;# 
  1086  0018                     	;# 
  1087  0019                     	;# 
  1088  001A                     	;# 
  1089  001B                     	;# 
  1090  001C                     	;# 
  1091  008C                     	;# 
  1092  008D                     	;# 
  1093  008E                     	;# 
  1094  0090                     	;# 
  1095  0091                     	;# 
  1096  0092                     	;# 
  1097  0095                     	;# 
  1098  0096                     	;# 
  1099  0097                     	;# 
  1100  0099                     	;# 
  1101  009A                     	;# 
  1102  009B                     	;# 
  1103  009B                     	;# 
  1104  009C                     	;# 
  1105  009D                     	;# 
  1106  009E                     	;# 
  1107  010C                     	;# 
  1108  010D                     	;# 
  1109  010E                     	;# 
  1110  0116                     	;# 
  1111  0117                     	;# 
  1112  011D                     	;# 
  1113  018C                     	;# 
  1114  018D                     	;# 
  1115  018E                     	;# 
  1116  0191                     	;# 
  1117  0191                     	;# 
  1118  0192                     	;# 
  1119  0193                     	;# 
  1120  0193                     	;# 
  1121  0194                     	;# 
  1122  0195                     	;# 
  1123  0196                     	;# 
  1124  0197                     	;# 
  1125  0199                     	;# 
  1126  019A                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019B                     	;# 
  1131  019C                     	;# 
  1132  019C                     	;# 
  1133  019D                     	;# 
  1134  019E                     	;# 
  1135  019F                     	;# 
  1136  020D                     	;# 
  1137  0210                     	;# 
  1138  0211                     	;# 
  1139  0211                     	;# 
  1140  0212                     	;# 
  1141  0212                     	;# 
  1142  0213                     	;# 
  1143  0213                     	;# 
  1144  0214                     	;# 
  1145  0214                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0215                     	;# 
  1149  0216                     	;# 
  1150  0216                     	;# 
  1151  0217                     	;# 
  1152  0217                     	;# 
  1153  0291                     	;# 
  1154  0291                     	;# 
  1155  0292                     	;# 
  1156  0293                     	;# 
  1157  0298                     	;# 
  1158  0298                     	;# 
  1159  0299                     	;# 
  1160  029A                     	;# 
  1161  0394                     	;# 
  1162  0395                     	;# 
  1163  0396                     	;# 
  1164  0FE4                     	;# 
  1165  0FE5                     	;# 
  1166  0FE6                     	;# 
  1167  0FE7                     	;# 
  1168  0FE8                     	;# 
  1169  0FE9                     	;# 
  1170  0FEA                     	;# 
  1171  0FEB                     	;# 
  1172  0FED                     	;# 
  1173  0FEE                     	;# 
  1174  0FEF                     	;# 
  1175  0000                     	;# 
  1176  0001                     	;# 
  1177  0002                     	;# 
  1178  0003                     	;# 
  1179  0004                     	;# 
  1180  0005                     	;# 
  1181  0006                     	;# 
  1182  0007                     	;# 
  1183  0008                     	;# 
  1184  0009                     	;# 
  1185  000A                     	;# 
  1186  000B                     	;# 
  1187  000C                     	;# 
  1188  000D                     	;# 
  1189  000E                     	;# 
  1190  0010                     	;# 
  1191  0011                     	;# 
  1192  0012                     	;# 
  1193  0015                     	;# 
  1194  0016                     	;# 
  1195  0016                     	;# 
  1196  0017                     	;# 
  1197  0018                     	;# 
  1198  0019                     	;# 
  1199  001A                     	;# 
  1200  001B                     	;# 
  1201  001C                     	;# 
  1202  008C                     	;# 
  1203  008D                     	;# 
  1204  008E                     	;# 
  1205  0090                     	;# 
  1206  0091                     	;# 
  1207  0092                     	;# 
  1208  0095                     	;# 
  1209  0096                     	;# 
  1210  0097                     	;# 
  1211  0099                     	;# 
  1212  009A                     	;# 
  1213  009B                     	;# 
  1214  009B                     	;# 
  1215  009C                     	;# 
  1216  009D                     	;# 
  1217  009E                     	;# 
  1218  010C                     	;# 
  1219  010D                     	;# 
  1220  010E                     	;# 
  1221  0116                     	;# 
  1222  0117                     	;# 
  1223  011D                     	;# 
  1224  018C                     	;# 
  1225  018D                     	;# 
  1226  018E                     	;# 
  1227  0191                     	;# 
  1228  0191                     	;# 
  1229  0192                     	;# 
  1230  0193                     	;# 
  1231  0193                     	;# 
  1232  0194                     	;# 
  1233  0195                     	;# 
  1234  0196                     	;# 
  1235  0197                     	;# 
  1236  0199                     	;# 
  1237  019A                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019B                     	;# 
  1242  019C                     	;# 
  1243  019C                     	;# 
  1244  019D                     	;# 
  1245  019E                     	;# 
  1246  019F                     	;# 
  1247  020D                     	;# 
  1248  0210                     	;# 
  1249  0211                     	;# 
  1250  0211                     	;# 
  1251  0212                     	;# 
  1252  0212                     	;# 
  1253  0213                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0214                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0291                     	;# 
  1265  0291                     	;# 
  1266  0292                     	;# 
  1267  0293                     	;# 
  1268  0298                     	;# 
  1269  0298                     	;# 
  1270  0299                     	;# 
  1271  029A                     	;# 
  1272  0394                     	;# 
  1273  0395                     	;# 
  1274  0396                     	;# 
  1275  0FE4                     	;# 
  1276  0FE5                     	;# 
  1277  0FE6                     	;# 
  1278  0FE7                     	;# 
  1279  0FE8                     	;# 
  1280  0FE9                     	;# 
  1281  0FEA                     	;# 
  1282  0FEB                     	;# 
  1283  0FED                     	;# 
  1284  0FEE                     	;# 
  1285  0FEF                     	;# 
  1286  0000                     	;# 
  1287  0001                     	;# 
  1288  0002                     	;# 
  1289  0003                     	;# 
  1290  0004                     	;# 
  1291  0005                     	;# 
  1292  0006                     	;# 
  1293  0007                     	;# 
  1294  0008                     	;# 
  1295  0009                     	;# 
  1296  000A                     	;# 
  1297  000B                     	;# 
  1298  000C                     	;# 
  1299  000D                     	;# 
  1300  000E                     	;# 
  1301  0010                     	;# 
  1302  0011                     	;# 
  1303  0012                     	;# 
  1304  0015                     	;# 
  1305  0016                     	;# 
  1306  0016                     	;# 
  1307  0017                     	;# 
  1308  0018                     	;# 
  1309  0019                     	;# 
  1310  001A                     	;# 
  1311  001B                     	;# 
  1312  001C                     	;# 
  1313  008C                     	;# 
  1314  008D                     	;# 
  1315  008E                     	;# 
  1316  0090                     	;# 
  1317  0091                     	;# 
  1318  0092                     	;# 
  1319  0095                     	;# 
  1320  0096                     	;# 
  1321  0097                     	;# 
  1322  0099                     	;# 
  1323  009A                     	;# 
  1324  009B                     	;# 
  1325  009B                     	;# 
  1326  009C                     	;# 
  1327  009D                     	;# 
  1328  009E                     	;# 
  1329  010C                     	;# 
  1330  010D                     	;# 
  1331  010E                     	;# 
  1332  0116                     	;# 
  1333  0117                     	;# 
  1334  011D                     	;# 
  1335  018C                     	;# 
  1336  018D                     	;# 
  1337  018E                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0194                     	;# 
  1344  0195                     	;# 
  1345  0196                     	;# 
  1346  0197                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019B                     	;# 
  1353  019C                     	;# 
  1354  019C                     	;# 
  1355  019D                     	;# 
  1356  019E                     	;# 
  1357  019F                     	;# 
  1358  020D                     	;# 
  1359  0210                     	;# 
  1360  0211                     	;# 
  1361  0211                     	;# 
  1362  0212                     	;# 
  1363  0212                     	;# 
  1364  0213                     	;# 
  1365  0213                     	;# 
  1366  0214                     	;# 
  1367  0214                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0215                     	;# 
  1371  0216                     	;# 
  1372  0216                     	;# 
  1373  0217                     	;# 
  1374  0217                     	;# 
  1375  0291                     	;# 
  1376  0291                     	;# 
  1377  0292                     	;# 
  1378  0293                     	;# 
  1379  0298                     	;# 
  1380  0298                     	;# 
  1381  0299                     	;# 
  1382  029A                     	;# 
  1383  0394                     	;# 
  1384  0395                     	;# 
  1385  0396                     	;# 
  1386  0FE4                     	;# 
  1387  0FE5                     	;# 
  1388  0FE6                     	;# 
  1389  0FE7                     	;# 
  1390  0FE8                     	;# 
  1391  0FE9                     	;# 
  1392  0FEA                     	;# 
  1393  0FEB                     	;# 
  1394  0FED                     	;# 
  1395  0FEE                     	;# 
  1396  0FEF                     	;# 
  1397  0000                     	;# 
  1398  0001                     	;# 
  1399  0002                     	;# 
  1400  0003                     	;# 
  1401  0004                     	;# 
  1402  0005                     	;# 
  1403  0006                     	;# 
  1404  0007                     	;# 
  1405  0008                     	;# 
  1406  0009                     	;# 
  1407  000A                     	;# 
  1408  000B                     	;# 
  1409  000C                     	;# 
  1410  000D                     	;# 
  1411  000E                     	;# 
  1412  0010                     	;# 
  1413  0011                     	;# 
  1414  0012                     	;# 
  1415  0015                     	;# 
  1416  0016                     	;# 
  1417  0016                     	;# 
  1418  0017                     	;# 
  1419  0018                     	;# 
  1420  0019                     	;# 
  1421  001A                     	;# 
  1422  001B                     	;# 
  1423  001C                     	;# 
  1424  008C                     	;# 
  1425  008D                     	;# 
  1426  008E                     	;# 
  1427  0090                     	;# 
  1428  0091                     	;# 
  1429  0092                     	;# 
  1430  0095                     	;# 
  1431  0096                     	;# 
  1432  0097                     	;# 
  1433  0099                     	;# 
  1434  009A                     	;# 
  1435  009B                     	;# 
  1436  009B                     	;# 
  1437  009C                     	;# 
  1438  009D                     	;# 
  1439  009E                     	;# 
  1440  010C                     	;# 
  1441  010D                     	;# 
  1442  010E                     	;# 
  1443  0116                     	;# 
  1444  0117                     	;# 
  1445  011D                     	;# 
  1446  018C                     	;# 
  1447  018D                     	;# 
  1448  018E                     	;# 
  1449  0191                     	;# 
  1450  0191                     	;# 
  1451  0192                     	;# 
  1452  0193                     	;# 
  1453  0193                     	;# 
  1454  0194                     	;# 
  1455  0195                     	;# 
  1456  0196                     	;# 
  1457  0197                     	;# 
  1458  0199                     	;# 
  1459  019A                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019B                     	;# 
  1464  019C                     	;# 
  1465  019C                     	;# 
  1466  019D                     	;# 
  1467  019E                     	;# 
  1468  019F                     	;# 
  1469  020D                     	;# 
  1470  0210                     	;# 
  1471  0211                     	;# 
  1472  0211                     	;# 
  1473  0212                     	;# 
  1474  0212                     	;# 
  1475  0213                     	;# 
  1476  0213                     	;# 
  1477  0214                     	;# 
  1478  0214                     	;# 
  1479  0215                     	;# 
  1480  0215                     	;# 
  1481  0215                     	;# 
  1482  0216                     	;# 
  1483  0216                     	;# 
  1484  0217                     	;# 
  1485  0217                     	;# 
  1486  0291                     	;# 
  1487  0291                     	;# 
  1488  0292                     	;# 
  1489  0293                     	;# 
  1490  0298                     	;# 
  1491  0298                     	;# 
  1492  0299                     	;# 
  1493  029A                     	;# 
  1494  0394                     	;# 
  1495  0395                     	;# 
  1496  0396                     	;# 
  1497  0FE4                     	;# 
  1498  0FE5                     	;# 
  1499  0FE6                     	;# 
  1500  0FE7                     	;# 
  1501  0FE8                     	;# 
  1502  0FE9                     	;# 
  1503  0FEA                     	;# 
  1504  0FEB                     	;# 
  1505  0FED                     	;# 
  1506  0FEE                     	;# 
  1507  0FEF                     	;# 
  1508  0000                     	;# 
  1509  0001                     	;# 
  1510  0002                     	;# 
  1511  0003                     	;# 
  1512  0004                     	;# 
  1513  0005                     	;# 
  1514  0006                     	;# 
  1515  0007                     	;# 
  1516  0008                     	;# 
  1517  0009                     	;# 
  1518  000A                     	;# 
  1519  000B                     	;# 
  1520  000C                     	;# 
  1521  000D                     	;# 
  1522  000E                     	;# 
  1523  0010                     	;# 
  1524  0011                     	;# 
  1525  0012                     	;# 
  1526  0015                     	;# 
  1527  0016                     	;# 
  1528  0016                     	;# 
  1529  0017                     	;# 
  1530  0018                     	;# 
  1531  0019                     	;# 
  1532  001A                     	;# 
  1533  001B                     	;# 
  1534  001C                     	;# 
  1535  008C                     	;# 
  1536  008D                     	;# 
  1537  008E                     	;# 
  1538  0090                     	;# 
  1539  0091                     	;# 
  1540  0092                     	;# 
  1541  0095                     	;# 
  1542  0096                     	;# 
  1543  0097                     	;# 
  1544  0099                     	;# 
  1545  009A                     	;# 
  1546  009B                     	;# 
  1547  009B                     	;# 
  1548  009C                     	;# 
  1549  009D                     	;# 
  1550  009E                     	;# 
  1551  010C                     	;# 
  1552  010D                     	;# 
  1553  010E                     	;# 
  1554  0116                     	;# 
  1555  0117                     	;# 
  1556  011D                     	;# 
  1557  018C                     	;# 
  1558  018D                     	;# 
  1559  018E                     	;# 
  1560  0191                     	;# 
  1561  0191                     	;# 
  1562  0192                     	;# 
  1563  0193                     	;# 
  1564  0193                     	;# 
  1565  0194                     	;# 
  1566  0195                     	;# 
  1567  0196                     	;# 
  1568  0197                     	;# 
  1569  0199                     	;# 
  1570  019A                     	;# 
  1571  019B                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019B                     	;# 
  1575  019C                     	;# 
  1576  019C                     	;# 
  1577  019D                     	;# 
  1578  019E                     	;# 
  1579  019F                     	;# 
  1580  020D                     	;# 
  1581  0210                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0216                     	;# 
  1594  0216                     	;# 
  1595  0217                     	;# 
  1596  0217                     	;# 
  1597  0291                     	;# 
  1598  0291                     	;# 
  1599  0292                     	;# 
  1600  0293                     	;# 
  1601  0298                     	;# 
  1602  0298                     	;# 
  1603  0299                     	;# 
  1604  029A                     	;# 
  1605  0394                     	;# 
  1606  0395                     	;# 
  1607  0396                     	;# 
  1608  0FE4                     	;# 
  1609  0FE5                     	;# 
  1610  0FE6                     	;# 
  1611  0FE7                     	;# 
  1612  0FE8                     	;# 
  1613  0FE9                     	;# 
  1614  0FEA                     	;# 
  1615  0FEB                     	;# 
  1616  0FED                     	;# 
  1617  0FEE                     	;# 
  1618  0FEF                     	;# 
  1619  0000                     	;# 
  1620  0001                     	;# 
  1621  0002                     	;# 
  1622  0003                     	;# 
  1623  0004                     	;# 
  1624  0005                     	;# 
  1625  0006                     	;# 
  1626  0007                     	;# 
  1627  0008                     	;# 
  1628  0009                     	;# 
  1629  000A                     	;# 
  1630  000B                     	;# 
  1631  000C                     	;# 
  1632  000D                     	;# 
  1633  000E                     	;# 
  1634  0010                     	;# 
  1635  0011                     	;# 
  1636  0012                     	;# 
  1637  0015                     	;# 
  1638  0016                     	;# 
  1639  0016                     	;# 
  1640  0017                     	;# 
  1641  0018                     	;# 
  1642  0019                     	;# 
  1643  001A                     	;# 
  1644  001B                     	;# 
  1645  001C                     	;# 
  1646  008C                     	;# 
  1647  008D                     	;# 
  1648  008E                     	;# 
  1649  0090                     	;# 
  1650  0091                     	;# 
  1651  0092                     	;# 
  1652  0095                     	;# 
  1653  0096                     	;# 
  1654  0097                     	;# 
  1655  0099                     	;# 
  1656  009A                     	;# 
  1657  009B                     	;# 
  1658  009B                     	;# 
  1659  009C                     	;# 
  1660  009D                     	;# 
  1661  009E                     	;# 
  1662  010C                     	;# 
  1663  010D                     	;# 
  1664  010E                     	;# 
  1665  0116                     	;# 
  1666  0117                     	;# 
  1667  011D                     	;# 
  1668  018C                     	;# 
  1669  018D                     	;# 
  1670  018E                     	;# 
  1671  0191                     	;# 
  1672  0191                     	;# 
  1673  0192                     	;# 
  1674  0193                     	;# 
  1675  0193                     	;# 
  1676  0194                     	;# 
  1677  0195                     	;# 
  1678  0196                     	;# 
  1679  0197                     	;# 
  1680  0199                     	;# 
  1681  019A                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019B                     	;# 
  1686  019C                     	;# 
  1687  019C                     	;# 
  1688  019D                     	;# 
  1689  019E                     	;# 
  1690  019F                     	;# 
  1691  020D                     	;# 
  1692  0210                     	;# 
  1693  0211                     	;# 
  1694  0211                     	;# 
  1695  0212                     	;# 
  1696  0212                     	;# 
  1697  0213                     	;# 
  1698  0213                     	;# 
  1699  0214                     	;# 
  1700  0214                     	;# 
  1701  0215                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0216                     	;# 
  1705  0216                     	;# 
  1706  0217                     	;# 
  1707  0217                     	;# 
  1708  0291                     	;# 
  1709  0291                     	;# 
  1710  0292                     	;# 
  1711  0293                     	;# 
  1712  0298                     	;# 
  1713  0298                     	;# 
  1714  0299                     	;# 
  1715  029A                     	;# 
  1716  0394                     	;# 
  1717  0395                     	;# 
  1718  0396                     	;# 
  1719  0FE4                     	;# 
  1720  0FE5                     	;# 
  1721  0FE6                     	;# 
  1722  0FE7                     	;# 
  1723  0FE8                     	;# 
  1724  0FE9                     	;# 
  1725  0FEA                     	;# 
  1726  0FEB                     	;# 
  1727  0FED                     	;# 
  1728  0FEE                     	;# 
  1729  0FEF                     	;# 
  1730  0000                     	;# 
  1731  0001                     	;# 
  1732  0002                     	;# 
  1733  0003                     	;# 
  1734  0004                     	;# 
  1735  0005                     	;# 
  1736  0006                     	;# 
  1737  0007                     	;# 
  1738  0008                     	;# 
  1739  0009                     	;# 
  1740  000A                     	;# 
  1741  000B                     	;# 
  1742  000C                     	;# 
  1743  000D                     	;# 
  1744  000E                     	;# 
  1745  0010                     	;# 
  1746  0011                     	;# 
  1747  0012                     	;# 
  1748  0015                     	;# 
  1749  0016                     	;# 
  1750  0016                     	;# 
  1751  0017                     	;# 
  1752  0018                     	;# 
  1753  0019                     	;# 
  1754  001A                     	;# 
  1755  001B                     	;# 
  1756  001C                     	;# 
  1757  008C                     	;# 
  1758  008D                     	;# 
  1759  008E                     	;# 
  1760  0090                     	;# 
  1761  0091                     	;# 
  1762  0092                     	;# 
  1763  0095                     	;# 
  1764  0096                     	;# 
  1765  0097                     	;# 
  1766  0099                     	;# 
  1767  009A                     	;# 
  1768  009B                     	;# 
  1769  009B                     	;# 
  1770  009C                     	;# 
  1771  009D                     	;# 
  1772  009E                     	;# 
  1773  010C                     	;# 
  1774  010D                     	;# 
  1775  010E                     	;# 
  1776  0116                     	;# 
  1777  0117                     	;# 
  1778  011D                     	;# 
  1779  018C                     	;# 
  1780  018D                     	;# 
  1781  018E                     	;# 
  1782  0191                     	;# 
  1783  0191                     	;# 
  1784  0192                     	;# 
  1785  0193                     	;# 
  1786  0193                     	;# 
  1787  0194                     	;# 
  1788  0195                     	;# 
  1789  0196                     	;# 
  1790  0197                     	;# 
  1791  0199                     	;# 
  1792  019A                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019B                     	;# 
  1797  019C                     	;# 
  1798  019C                     	;# 
  1799  019D                     	;# 
  1800  019E                     	;# 
  1801  019F                     	;# 
  1802  020D                     	;# 
  1803  0210                     	;# 
  1804  0211                     	;# 
  1805  0211                     	;# 
  1806  0212                     	;# 
  1807  0212                     	;# 
  1808  0213                     	;# 
  1809  0213                     	;# 
  1810  0214                     	;# 
  1811  0214                     	;# 
  1812  0215                     	;# 
  1813  0215                     	;# 
  1814  0215                     	;# 
  1815  0216                     	;# 
  1816  0216                     	;# 
  1817  0217                     	;# 
  1818  0217                     	;# 
  1819  0291                     	;# 
  1820  0291                     	;# 
  1821  0292                     	;# 
  1822  0293                     	;# 
  1823  0298                     	;# 
  1824  0298                     	;# 
  1825  0299                     	;# 
  1826  029A                     	;# 
  1827  0394                     	;# 
  1828  0395                     	;# 
  1829  0396                     	;# 
  1830  0FE4                     	;# 
  1831  0FE5                     	;# 
  1832  0FE6                     	;# 
  1833  0FE7                     	;# 
  1834  0FE8                     	;# 
  1835  0FE9                     	;# 
  1836  0FEA                     	;# 
  1837  0FEB                     	;# 
  1838  0FED                     	;# 
  1839  0FEE                     	;# 
  1840  0FEF                     	;# 
  1841  0000                     	;# 
  1842  0001                     	;# 
  1843  0002                     	;# 
  1844  0003                     	;# 
  1845  0004                     	;# 
  1846  0005                     	;# 
  1847  0006                     	;# 
  1848  0007                     	;# 
  1849  0008                     	;# 
  1850  0009                     	;# 
  1851  000A                     	;# 
  1852  000B                     	;# 
  1853  000C                     	;# 
  1854  000D                     	;# 
  1855  000E                     	;# 
  1856  0010                     	;# 
  1857  0011                     	;# 
  1858  0012                     	;# 
  1859  0015                     	;# 
  1860  0016                     	;# 
  1861  0016                     	;# 
  1862  0017                     	;# 
  1863  0018                     	;# 
  1864  0019                     	;# 
  1865  001A                     	;# 
  1866  001B                     	;# 
  1867  001C                     	;# 
  1868  008C                     	;# 
  1869  008D                     	;# 
  1870  008E                     	;# 
  1871  0090                     	;# 
  1872  0091                     	;# 
  1873  0092                     	;# 
  1874  0095                     	;# 
  1875  0096                     	;# 
  1876  0097                     	;# 
  1877  0099                     	;# 
  1878  009A                     	;# 
  1879  009B                     	;# 
  1880  009B                     	;# 
  1881  009C                     	;# 
  1882  009D                     	;# 
  1883  009E                     	;# 
  1884  010C                     	;# 
  1885  010D                     	;# 
  1886  010E                     	;# 
  1887  0116                     	;# 
  1888  0117                     	;# 
  1889  011D                     	;# 
  1890  018C                     	;# 
  1891  018D                     	;# 
  1892  018E                     	;# 
  1893  0191                     	;# 
  1894  0191                     	;# 
  1895  0192                     	;# 
  1896  0193                     	;# 
  1897  0193                     	;# 
  1898  0194                     	;# 
  1899  0195                     	;# 
  1900  0196                     	;# 
  1901  0197                     	;# 
  1902  0199                     	;# 
  1903  019A                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019B                     	;# 
  1908  019C                     	;# 
  1909  019C                     	;# 
  1910  019D                     	;# 
  1911  019E                     	;# 
  1912  019F                     	;# 
  1913  020D                     	;# 
  1914  0210                     	;# 
  1915  0211                     	;# 
  1916  0211                     	;# 
  1917  0212                     	;# 
  1918  0212                     	;# 
  1919  0213                     	;# 
  1920  0213                     	;# 
  1921  0214                     	;# 
  1922  0214                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0215                     	;# 
  1926  0216                     	;# 
  1927  0216                     	;# 
  1928  0217                     	;# 
  1929  0217                     	;# 
  1930  0291                     	;# 
  1931  0291                     	;# 
  1932  0292                     	;# 
  1933  0293                     	;# 
  1934  0298                     	;# 
  1935  0298                     	;# 
  1936  0299                     	;# 
  1937  029A                     	;# 
  1938  0394                     	;# 
  1939  0395                     	;# 
  1940  0396                     	;# 
  1941  0FE4                     	;# 
  1942  0FE5                     	;# 
  1943  0FE6                     	;# 
  1944  0FE7                     	;# 
  1945  0FE8                     	;# 
  1946  0FE9                     	;# 
  1947  0FEA                     	;# 
  1948  0FEB                     	;# 
  1949  0FED                     	;# 
  1950  0FEE                     	;# 
  1951  0FEF                     	;# 
  1952  0000                     	;# 
  1953  0001                     	;# 
  1954  0002                     	;# 
  1955  0003                     	;# 
  1956  0004                     	;# 
  1957  0005                     	;# 
  1958  0006                     	;# 
  1959  0007                     	;# 
  1960  0008                     	;# 
  1961  0009                     	;# 
  1962  000A                     	;# 
  1963  000B                     	;# 
  1964  000C                     	;# 
  1965  000D                     	;# 
  1966  000E                     	;# 
  1967  0010                     	;# 
  1968  0011                     	;# 
  1969  0012                     	;# 
  1970  0015                     	;# 
  1971  0016                     	;# 
  1972  0016                     	;# 
  1973  0017                     	;# 
  1974  0018                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  008C                     	;# 
  1980  008D                     	;# 
  1981  008E                     	;# 
  1982  0090                     	;# 
  1983  0091                     	;# 
  1984  0092                     	;# 
  1985  0095                     	;# 
  1986  0096                     	;# 
  1987  0097                     	;# 
  1988  0099                     	;# 
  1989  009A                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  010C                     	;# 
  1996  010D                     	;# 
  1997  010E                     	;# 
  1998  0116                     	;# 
  1999  0117                     	;# 
  2000  011D                     	;# 
  2001  018C                     	;# 
  2002  018D                     	;# 
  2003  018E                     	;# 
  2004  0191                     	;# 
  2005  0191                     	;# 
  2006  0192                     	;# 
  2007  0193                     	;# 
  2008  0193                     	;# 
  2009  0194                     	;# 
  2010  0195                     	;# 
  2011  0196                     	;# 
  2012  0197                     	;# 
  2013  0199                     	;# 
  2014  019A                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019C                     	;# 
  2020  019C                     	;# 
  2021  019D                     	;# 
  2022  019E                     	;# 
  2023  019F                     	;# 
  2024  020D                     	;# 
  2025  0210                     	;# 
  2026  0211                     	;# 
  2027  0211                     	;# 
  2028  0212                     	;# 
  2029  0212                     	;# 
  2030  0213                     	;# 
  2031  0213                     	;# 
  2032  0214                     	;# 
  2033  0214                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0215                     	;# 
  2037  0216                     	;# 
  2038  0216                     	;# 
  2039  0217                     	;# 
  2040  0217                     	;# 
  2041  0291                     	;# 
  2042  0291                     	;# 
  2043  0292                     	;# 
  2044  0293                     	;# 
  2045  0298                     	;# 
  2046  0298                     	;# 
  2047  0299                     	;# 
  2048  029A                     	;# 
  2049  0394                     	;# 
  2050  0395                     	;# 
  2051  0396                     	;# 
  2052  0FE4                     	;# 
  2053  0FE5                     	;# 
  2054  0FE6                     	;# 
  2055  0FE7                     	;# 
  2056  0FE8                     	;# 
  2057  0FE9                     	;# 
  2058  0FEA                     	;# 
  2059  0FEB                     	;# 
  2060  0FED                     	;# 
  2061  0FEE                     	;# 
  2062  0FEF                     	;# 
  2063  0000                     	;# 
  2064  0001                     	;# 
  2065  0002                     	;# 
  2066  0003                     	;# 
  2067  0004                     	;# 
  2068  0005                     	;# 
  2069  0006                     	;# 
  2070  0007                     	;# 
  2071  0008                     	;# 
  2072  0009                     	;# 
  2073  000A                     	;# 
  2074  000B                     	;# 
  2075  000C                     	;# 
  2076  000D                     	;# 
  2077  000E                     	;# 
  2078  0010                     	;# 
  2079  0011                     	;# 
  2080  0012                     	;# 
  2081  0015                     	;# 
  2082  0016                     	;# 
  2083  0016                     	;# 
  2084  0017                     	;# 
  2085  0018                     	;# 
  2086  0019                     	;# 
  2087  001A                     	;# 
  2088  001B                     	;# 
  2089  001C                     	;# 
  2090  008C                     	;# 
  2091  008D                     	;# 
  2092  008E                     	;# 
  2093  0090                     	;# 
  2094  0091                     	;# 
  2095  0092                     	;# 
  2096  0095                     	;# 
  2097  0096                     	;# 
  2098  0097                     	;# 
  2099  0099                     	;# 
  2100  009A                     	;# 
  2101  009B                     	;# 
  2102  009B                     	;# 
  2103  009C                     	;# 
  2104  009D                     	;# 
  2105  009E                     	;# 
  2106  010C                     	;# 
  2107  010D                     	;# 
  2108  010E                     	;# 
  2109  0116                     	;# 
  2110  0117                     	;# 
  2111  011D                     	;# 
  2112  018C                     	;# 
  2113  018D                     	;# 
  2114  018E                     	;# 
  2115  0191                     	;# 
  2116  0191                     	;# 
  2117  0192                     	;# 
  2118  0193                     	;# 
  2119  0193                     	;# 
  2120  0194                     	;# 
  2121  0195                     	;# 
  2122  0196                     	;# 
  2123  0197                     	;# 
  2124  0199                     	;# 
  2125  019A                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019B                     	;# 
  2130  019C                     	;# 
  2131  019C                     	;# 
  2132  019D                     	;# 
  2133  019E                     	;# 
  2134  019F                     	;# 
  2135  020D                     	;# 
  2136  0210                     	;# 
  2137  0211                     	;# 
  2138  0211                     	;# 
  2139  0212                     	;# 
  2140  0212                     	;# 
  2141  0213                     	;# 
  2142  0213                     	;# 
  2143  0214                     	;# 
  2144  0214                     	;# 
  2145  0215                     	;# 
  2146  0215                     	;# 
  2147  0215                     	;# 
  2148  0216                     	;# 
  2149  0216                     	;# 
  2150  0217                     	;# 
  2151  0217                     	;# 
  2152  0291                     	;# 
  2153  0291                     	;# 
  2154  0292                     	;# 
  2155  0293                     	;# 
  2156  0298                     	;# 
  2157  0298                     	;# 
  2158  0299                     	;# 
  2159  029A                     	;# 
  2160  0394                     	;# 
  2161  0395                     	;# 
  2162  0396                     	;# 
  2163  0FE4                     	;# 
  2164  0FE5                     	;# 
  2165  0FE6                     	;# 
  2166  0FE7                     	;# 
  2167  0FE8                     	;# 
  2168  0FE9                     	;# 
  2169  0FEA                     	;# 
  2170  0FEB                     	;# 
  2171  0FED                     	;# 
  2172  0FEE                     	;# 
  2173  0FEF                     	;# 
  2174                           
  2175                           	psect	idataBANK5
  2176  1C85                     __pidataBANK5:	
  2177                           
  2178                           ;initializer for __product
  2179  1C85  3463               	retlw	99
  2180  1C86  3402               	retlw	2
  2181  1C87  3400               	retlw	0
  2182  1C88  3400               	retlw	0
  2183  1C89  3400               	retlw	0
  2184  1C8A  3400               	retlw	0
  2185  1C8B  3400               	retlw	0
  2186  1C8C  3400               	retlw	0
  2187  1C8D  3400               	retlw	0
  2188  1C8E  3400               	retlw	0
  2189  1C8F  3400               	retlw	0
  2190  1C90  3400               	retlw	0
  2191  1C91  34FF               	retlw	255
  2192  1C92  34FF               	retlw	255
  2193  1C93  34FF               	retlw	255
  2194  1C94  3400               	retlw	0
  2195  1C95  3400               	retlw	0
  2196  1C96  3400               	retlw	0
  2197  1C97  3400               	retlw	0
  2198  1C98  3400               	retlw	0
  2199  1C99  3400               	retlw	0
  2200  1C9A  3400               	retlw	0
  2201  1C9B  3400               	retlw	0
  2202  1C9C  3400               	retlw	0
  2203  1C9D  3400               	retlw	0
  2204  1C9E  3400               	retlw	0
  2205  1C9F  3400               	retlw	0
  2206  1CA0  3400               	retlw	0
  2207  1CA1  3400               	retlw	0
  2208  1CA2  3400               	retlw	0
  2209  1CA3  3400               	retlw	0
  2210  1CA4  3400               	retlw	0
  2211                           
  2212                           	psect	stringtext
  2213  1000                     __pstringtext:	
  2214  1000                     _CC2500_registers_address:	
  2215  1000  3403               	retlw	3
  2216  1001  3416               	retlw	22
  2217  1002  3417               	retlw	23
  2218  1003  341E               	retlw	30
  2219  1004  341F               	retlw	31
  2220  1005  3420               	retlw	32
  2221  1006  342A               	retlw	42
  2222  1007  342B               	retlw	43
  2223  1008  340B               	retlw	11
  2224  1009  340C               	retlw	12
  2225  100A  340D               	retlw	13
  2226  100B  340E               	retlw	14
  2227  100C  340F               	retlw	15
  2228  100D  3410               	retlw	16
  2229  100E  3411               	retlw	17
  2230  100F  3412               	retlw	18
  2231  1010  3413               	retlw	19
  2232  1011  3414               	retlw	20
  2233  1012  340A               	retlw	10
  2234  1013  3415               	retlw	21
  2235  1014  3421               	retlw	33
  2236  1015  3422               	retlw	34
  2237  1016  3418               	retlw	24
  2238  1017  3419               	retlw	25
  2239  1018  341A               	retlw	26
  2240  1019  341B               	retlw	27
  2241  101A  341C               	retlw	28
  2242  101B  341D               	retlw	29
  2243  101C  3423               	retlw	35
  2244  101D  3424               	retlw	36
  2245  101E  3425               	retlw	37
  2246  101F  3426               	retlw	38
  2247  1020  3429               	retlw	41
  2248  1021  342C               	retlw	44
  2249  1022  342D               	retlw	45
  2250  1023  342E               	retlw	46
  2251  1024  3400               	retlw	0
  2252  1025  3401               	retlw	1
  2253  1026  3402               	retlw	2
  2254  1027  3407               	retlw	7
  2255  1028  3408               	retlw	8
  2256  1029  3409               	retlw	9
  2257  102A  3406               	retlw	6
  2258  102B  3404               	retlw	4
  2259  102C  3405               	retlw	5
  2260  102D  3427               	retlw	39
  2261  102E  3428               	retlw	40
  2262  102F                     __end_of_CC2500_registers_address:	
  2263  102F                     _CC2500_rfSettings:	
  2264  102F  3407               	retlw	7
  2265  1030  3407               	retlw	7
  2266  1031  3430               	retlw	48
  2267  1032  3487               	retlw	135
  2268  1033  346B               	retlw	107
  2269  1034  34F8               	retlw	248
  2270  1035  347F               	retlw	127
  2271  1036  343F               	retlw	63
  2272  1037  3409               	retlw	9
  2273  1038  3400               	retlw	0
  2274  1039  345C               	retlw	92
  2275  103A  34A7               	retlw	167
  2276  103B  3462               	retlw	98
  2277  103C  3486               	retlw	134
  2278  103D  3483               	retlw	131
  2279  103E  3403               	retlw	3
  2280  103F  3422               	retlw	34
  2281  1040  34F8               	retlw	248
  2282  1041  3400               	retlw	0
  2283  1042  3444               	retlw	68
  2284  1043  34B6               	retlw	182
  2285  1044  3410               	retlw	16
  2286  1045  3418               	retlw	24
  2287  1046  341D               	retlw	29
  2288  1047  341C               	retlw	28
  2289  1048  34C7               	retlw	199
  2290  1049  3400               	retlw	0
  2291  104A  34B2               	retlw	178
  2292  104B  34EA               	retlw	234
  2293  104C  340A               	retlw	10
  2294  104D  3400               	retlw	0
  2295  104E  3411               	retlw	17
  2296  104F  3459               	retlw	89
  2297  1050  3488               	retlw	136
  2298  1051  3431               	retlw	49
  2299  1052  340B               	retlw	11
  2300  1053  342F               	retlw	47
  2301  1054  342E               	retlw	46
  2302  1055  3406               	retlw	6
  2303  1056  3404               	retlw	4
  2304  1057  3405               	retlw	5
  2305  1058  3400               	retlw	0
  2306  1059  3430               	retlw	48
  2307  105A  34D3               	retlw	211
  2308  105B  3491               	retlw	145
  2309  105C  3441               	retlw	65
  2310  105D  3400               	retlw	0
  2311  105E                     __end_of_CC2500_rfSettings:	
  2312  105E                     _CC2500_patable_vaule:	
  2313  105E  34FE               	retlw	254
  2314  105F  34FE               	retlw	254
  2315  1060  34FE               	retlw	254
  2316  1061  34FE               	retlw	254
  2317  1062  34FE               	retlw	254
  2318  1063  34FE               	retlw	254
  2319  1064  34FE               	retlw	254
  2320  1065  34FE               	retlw	254
  2321  1066                     __end_of_CC2500_patable_vaule:	
  2322                           
  2323                           	psect	nvCOMMON
  2324  007B                     __pnvCOMMON:	
  2325  007B                     _product:	
  2326  007B                     	ds	1
  2327  000C                     _PORTA	set	12
  2328  000D                     _PORTB	set	13
  2329  000E                     _PORTC	set	14
  2330  0018                     _T1CON	set	24
  2331  0017                     _TMR1H	set	23
  2332  0016                     _TMR1L	set	22
  2333  005F                     _GIE	set	95
  2334  005B                     _IOCIE	set	91
  2335  0058                     _IOCIF	set	88
  2336  005E                     _PEIE	set	94
  2337  0060                     _RA0	set	96
  2338  0063                     _RA3	set	99
  2339  0066                     _RA6	set	102
  2340  0067                     _RA7	set	103
  2341  0068                     _RB0	set	104
  2342  006A                     _RB2	set	106
  2343  006B                     _RB3	set	107
  2344  006C                     _RB4	set	108
  2345  006D                     _RB5	set	109
  2346  0070                     _RC0	set	112
  2347  0071                     _RC1	set	113
  2348  0072                     _RC2	set	114
  2349  0074                     _RC4	set	116
  2350  0077                     _RC7	set	119
  2351  0088                     _TMR1IF	set	136
  2352  009D                     _ADCON0	set	157
  2353  009E                     _ADCON1	set	158
  2354  009C                     _ADRESH	set	156
  2355  009B                     _ADRESL	set	155
  2356  0099                     _OSCCON	set	153
  2357  008C                     _TRISA	set	140
  2358  008D                     _TRISB	set	141
  2359  008E                     _TRISC	set	142
  2360  0097                     _WDTCON	set	151
  2361  04E9                     _GO_nDONE	set	1257
  2362  0488                     _TMR1IE	set	1160
  2363  0117                     _FVRCON	set	279
  2364  010C                     _LATA	set	268
  2365  010D                     _LATB	set	269
  2366  010E                     _LATC	set	270
  2367  018C                     _ANSELA	set	396
  2368  018D                     _ANSELB	set	397
  2369  018E                     _ANSELC	set	398
  2370  0192                     _PMADRH	set	402
  2371  0191                     _PMADRL	set	401
  2372  0196                     _PMCON2	set	406
  2373  0194                     _PMDATH	set	404
  2374  0193                     _PMDATL	set	403
  2375  0CAE                     _CFGS	set	3246
  2376  0CAC                     _FREE	set	3244
  2377  0CAD                     _LWLO	set	3245
  2378  0CA8                     _RD	set	3240
  2379  0CA9                     _WR	set	3241
  2380  0CAA                     _WREN	set	3242
  2381  020D                     _WPUB	set	525
  2382  0396                     _IOCBF	set	918
  2383  0395                     _IOCBN	set	917
  2384  0394                     _IOCBP	set	916
  2385  1CB2                     _IOCBF2	set	7346
  2386                           
  2387                           ; #config settings
  2388  0000                     
  2389                           	psect	cinit
  2390  0021                     start_initialization:	
  2391  0021                     __initialization:	
  2392                           
  2393                           ; Clear objects allocated to BITCOMMON
  2394  0021  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2395                           
  2396                           ; Clear objects allocated to BANK0
  2397  0022  01EC               	clrf	__pbssBANK0& (0+127)
  2398  0023  01ED               	clrf	(__pbssBANK0+1)& (0+127)
  2399                           
  2400                           ; Clear objects allocated to BANK1
  2401  0024  30A0               	movlw	low __pbssBANK1
  2402  0025  0084               	movwf	4
  2403  0026  3000               	movlw	high __pbssBANK1
  2404  0027  0085               	movwf	5
  2405  0028  3050               	movlw	80
  2406  0029  3198  200F  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK2
  2409  002C  3020               	movlw	low __pbssBANK2
  2410  002D  0084               	movwf	4
  2411  002E  3001               	movlw	high __pbssBANK2
  2412  002F  0085               	movwf	5
  2413  0030  3050               	movlw	80
  2414  0031  3198  200F  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK3
  2417  0034  30A0               	movlw	low __pbssBANK3
  2418  0035  0084               	movwf	4
  2419  0036  3001               	movlw	high __pbssBANK3
  2420  0037  0085               	movwf	5
  2421  0038  3050               	movlw	80
  2422  0039  3198  200F  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Clear objects allocated to BANK4
  2425  003C  3020               	movlw	low __pbssBANK4
  2426  003D  0084               	movwf	4
  2427  003E  3002               	movlw	high __pbssBANK4
  2428  003F  0085               	movwf	5
  2429  0040  3035               	movlw	53
  2430  0041  3198  200F  3180   	fcall	clear_ram0
  2431                           
  2432                           ; Initialize objects allocated to BANK5
  2433  0044  3085               	movlw	low __pidataBANK5
  2434  0045  0084               	movwf	4
  2435  0046  309C               	movlw	(high __pidataBANK5)| (0+128)
  2436  0047  0085               	movwf	5
  2437  0048  30A0               	movlw	low __pdataBANK5
  2438  0049  0086               	movwf	6
  2439  004A  3002               	movlw	high __pdataBANK5
  2440  004B  0087               	movwf	7
  2441  004C  3020               	movlw	32
  2442  004D  3198  2009         	fcall	init_ram
  2443  004F                     end_of_initialization:	
  2444                           ;End of C runtime variable initialization code
  2445                           
  2446  004F                     __end_of__initialization:	
  2447  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2448  0050  0020               	movlb	0
  2449  0051  3194  2C92         	ljmp	_main	;jump to C main() function
  2450                           
  2451                           	psect	bitbssCOMMON
  2452  03D0                     __pbitbssCOMMON:	
  2453  03D0                     _Receive_OK:	
  2454  03D0                     	ds	1
  2455  03D1                     _Transceive_OK:	
  2456  03D1                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006C                     __pbssBANK0:	
  2460  006C                     _DimmerLights:	
  2461  006C                     	ds	1
  2462  006D                     _Sw:	
  2463  006D                     	ds	1
  2464                           
  2465                           	psect	bssBANK1
  2466  00A0                     __pbssBANK1:	
  2467  00A0                     _DimmerIntr1:	
  2468  00A0                     	ds	16
  2469  00B0                     _DimmerIntr2:	
  2470  00B0                     	ds	16
  2471  00C0                     _RF1:	
  2472  00C0                     	ds	15
  2473  00CF                     _myMain:	
  2474  00CF                     	ds	13
  2475  00DC                     _Buz1:	
  2476  00DC                     	ds	12
  2477  00E8                     _CRC:	
  2478  00E8                     	ds	1
  2479  00E9                     _Cmd:	
  2480  00E9                     	ds	1
  2481  00EA                     _DelayOff:	
  2482  00EA                     	ds	1
  2483  00EB                     _LED:	
  2484  00EB                     	ds	1
  2485  00EC                     _Rx_Length:	
  2486  00EC                     	ds	1
  2487  00ED                     _SPI0Buffer:	
  2488  00ED                     	ds	1
  2489  00EE                     _Tx_Length:	
  2490  00EE                     	ds	1
  2491  00EF                     _s_data:	
  2492  00EF                     	ds	1
  2493                           
  2494                           	psect	bssBANK2
  2495  0120                     __pbssBANK2:	
  2496  0120                     _Dimmer:	
  2497  0120                     	ds	5
  2498  0125                     _Timer1:	
  2499  0125                     	ds	3
  2500  0128                     _RF_Count:	
  2501  0128                     	ds	2
  2502  012A                     _WDT:	
  2503  012A                     	ds	2
  2504  012C                     _DimmerIntr:	
  2505  012C                     	ds	1
  2506  012D                     _Light:	
  2507  012D                     	ds	1
  2508  012E                     _RSSI:	
  2509  012E                     	ds	1
  2510  012F                     _SwDetect:	
  2511  012F                     	ds	1
  2512  0130                     _r_address:	
  2513  0130                     	ds	1
  2514  0131                     _r_data:	
  2515  0131                     	ds	1
  2516  0132                     _Load:	
  2517  0132                     	ds	40
  2518  015A                     _Temp:	
  2519  015A                     	ds	14
  2520  0168                     _VarErrLED:	
  2521  0168                     	ds	4
  2522  016C                     _VarLED1:	
  2523  016C                     	ds	4
  2524                           
  2525                           	psect	bssBANK3
  2526  01A0                     __pbssBANK3:	
  2527  01A0                     _RF_Data:	
  2528  01A0                     	ds	30
  2529  01BE                     _DimmerLights1:	
  2530  01BE                     	ds	9
  2531  01C7                     _DimmerLights2:	
  2532  01C7                     	ds	9
  2533  01D0                     _Sw1:	
  2534  01D0                     	ds	9
  2535  01D9                     _Sw2:	
  2536  01D9                     	ds	9
  2537  01E2                     _DlySw1:	
  2538  01E2                     	ds	5
  2539  01E7                     _DlySw2:	
  2540  01E7                     	ds	5
  2541  01EC                     _VarLED2:	
  2542  01EC                     	ds	4
  2543                           
  2544                           	psect	bssBANK4
  2545  0220                     __pbssBANK4:	
  2546  0220                     _u1:	
  2547  0220                     	ds	16
  2548  0230                     _Memory:	
  2549  0230                     	ds	37
  2550                           
  2551                           	psect	dataBANK5
  2552  02A0                     __pdataBANK5:	
  2553  02A0                     __product:	
  2554  02A0                     	ds	32
  2555                           
  2556                           	psect	clrtext
  2557  180F                     clear_ram0:	
  2558                           ;	Called with FSR0 containing the base address, and
  2559                           ;	WREG with the size to clear
  2560                           
  2561  180F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2562  1810                     clrloop0:	
  2563  1810  0180               	clrf	0	;clear RAM location pointed to by FSR
  2564  1811  3101               	addfsr 0,1
  2565  1812  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2566  1813  2810               	goto	clrloop0	;have we reached the end yet?
  2567  1814  3400               	retlw	0	;all done for this memory range, return
  2568                           
  2569                           	psect	inittext
  2570  1809                     init_ram:	
  2571  1809  00FE               	movwf	126
  2572  180A                     initloop:	
  2573  180A  0012               	moviw fsr0++
  2574  180B  001E               	movwi fsr1++
  2575  180C  0BFE               	decfsz	126,f
  2576  180D  280A               	goto	initloop
  2577  180E  3400               	retlw	0
  2578                           
  2579                           	psect	cstackBANK4
  2580  0255                     __pcstackBANK4:	
  2581  0255                     ?_main:	
  2582  0255                     main@argc:	
  2583                           ; 2 bytes @ 0x0
  2584                           
  2585                           
  2586                           ; 2 bytes @ 0x0
  2587  0255                     	ds	2
  2588  0257                     main@argv:	
  2589                           
  2590                           ; 2 bytes @ 0x2
  2591  0257                     	ds	2
  2592                           
  2593                           	psect	cstackCOMMON
  2594  0070                     __pcstackCOMMON:	
  2595  0070                     ?_CC2500_WriteCommand:	
  2596  0070                     ?_RF_Timeout_Counter:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setRF_TimeoutCleared:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_WriteByte:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_ReadStatus:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadByte:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_PowerRST:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_InitSetREG:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitPATable:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ClearTXFIFO:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearRXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_FrequencyCabr:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_SIDLEMode:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_DlyOff_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_SwOn:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_SwOff:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setMemory_Modify:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DimmerLights_DimmingFunction:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DimmerLights_TwoPhase_Main:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DimmerLights_AssignationDimming:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Line:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_DimmerIntr_ValueCalculate:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_DimmingClose:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setTxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setRF_TransceiveGO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setLED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setLED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Fosc_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IO_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR1_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_ADC_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_ISR:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Timeout_Counter:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_set_TimeoutCleared:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Write:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Modify:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Clearing:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_myMain_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Temp_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Load_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Switch_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_RF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getTemp_AD:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_my_MainTimer:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Temp_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Load_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Switch_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Exception_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setLoad_AH_AL_Restore:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setTemp_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setTemp_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setOverTemp_ADV_Restore:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRF_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRF_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_RF_RxDisable:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setData:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_getRxData:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setLog_Code:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setControl_Lights_Table:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setRFSW_Control:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRFSW_AdjControl:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setRF_AdjControl:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setSw_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_Buzzer_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_TxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_RxData:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_CC2500_PowerOnInitial:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOffPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DelayOff_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerIntr_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_SelectPointer:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DimmerLights_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_DimmingOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_DimmerLights_TMR_1:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ??_DimmerLights_TMR_1:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_DimmerLights_IOC_1:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ??_DimmerLights_IOC_1:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_DimmerLights_TMR_2:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ??_DimmerLights_TMR_2:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_DimmerLights_IOC_2:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ??_DimmerLights_IOC_2:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_LED_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_LED_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Mcu_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_ISR:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Flash_Memory_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_Flash_Memory_Main:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Flash_Memory_Unlock:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Flash_Memory_Erasing:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_setMemory_LoopSave:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_WDT_Main:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_setRF_Learn:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_SwPointSelect:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_getDimmerLights_Status:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDimmerLights_ValueToPercent:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerLights_PercentToValue:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getLoad_OK:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getMain_All_Error_Status:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getMain_All_LightsStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_Allow_Condition:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getCmd_Status:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_Flash_Memory_Read:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getAll_Sw_KeyStatus:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getRF_KeyStatus:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getSw_KeyStatus:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDelayOff_GO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmerIntr_DimmingValue:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getDimmerLights_Line:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getDimmer_LoadGO:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getDimmer_Load_Status:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_getMain_Lights_Count:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     setDimmerLights_Initialization@lights:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x0
  2976  0070                     	ds	1
  2977  0071                     ??_TMR1_ISR:	
  2978  0071                     ??_IOC_ISR:	
  2979                           ; 0 bytes @ 0x1
  2980                           
  2981  0071                     ??_ISR:	
  2982                           ; 0 bytes @ 0x1
  2983                           
  2984                           
  2985                           ; 0 bytes @ 0x1
  2986  0071                     	ds	1
  2987  0072                     ??_RF_Timeout_Counter:	
  2988  0072                     ??_setRF_TimeoutCleared:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0072                     ??_CC2500_WriteByte:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0072                     ??_CC2500_ReadByte:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ?_DelayTime_1us:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_setMemory_Modify:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ??_setDimmerLights_Initialization:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_getLoad_OK:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_getMain_All_Error_Status:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_getMain_All_LightsStatus:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ??_setDimmerLights_Line:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_getCmd_Status:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ?_setCmd_Status:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ??_setTxData:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_setRF_TransceiveGO:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_Fosc_Set:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ??_IO_Set:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_TMR1_Set:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_ADC_Set:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_IOC_Set:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_WDT_Set:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_Timeout_Counter:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_set_TimeoutCleared:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_Flash_Memory_Read:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ?_setMemory_Data:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ??_Flash_Memory_Write:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_getAll_Sw_KeyStatus:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ??_WDT_Clearing:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ??_myMain_Initialization:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_Temp_Initialization:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ??_setLoad_AH_AL_Restore:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ??_setTemp_Initialization:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_setOverTemp_ADV_Restore:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ??_setRF_Initialization:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_getRF_KeyStatus:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ??_RF_RxDisable:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_setData:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ??_getSw_KeyStatus:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_Buzzer_Initialization:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ??_Buzzer_Main:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ??_DelayOffPointSelect:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ?_setDimmerIntr_ControlStatus:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ?_setDimmerIntr_DimmingValue:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ??_getDimmerIntr_DimmingValue:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ??_getDimmerIntr_Dimming_Sw:	
  3121                           ; 0 bytes @ 0x2
  3122                           
  3123  0072                     ?_setDimmerIntr_Dimming_RF:	
  3124                           ; 0 bytes @ 0x2
  3125                           
  3126  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3127                           ; 0 bytes @ 0x2
  3128                           
  3129  0072                     ??_DimmerLights_SelectPointer:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0072                     ??_getDimmerLights_Line:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0072                     ??_getDimmer_LoadGO:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0072                     ??_getDimmer_Load_Status:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0072                     ??_LedPointSelect:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0072                     ??_Flash_Memory_Unlock:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0072                     ??_Flash_Memory_Erasing:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0072                     ??_setMemory_LoopSave:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0072                     ??_WDT_Main:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0072                     ??_getMain_Lights_Count:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0072                     ??_setRF_Learn:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0072                     ??_SwPointSelect:	
  3163                           ; 0 bytes @ 0x2
  3164                           
  3165  0072                     ?___bmul:	
  3166                           ; 0 bytes @ 0x2
  3167                           
  3168  0072                     ?___lbdiv:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     ?_getBuz_GO:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     ?_getAD:	
  3175                           ; 2 bytes @ 0x2
  3176                           
  3177  0072                     ?___wmul:	
  3178                           ; 2 bytes @ 0x2
  3179                           
  3180  0072                     ?___awdiv:	
  3181                           ; 2 bytes @ 0x2
  3182                           
  3183  0072                     ?___lwdiv:	
  3184                           ; 2 bytes @ 0x2
  3185                           
  3186  0072                     ?___ftpack:	
  3187                           ; 2 bytes @ 0x2
  3188                           
  3189  0072                     setDimmerIntr_ControlStatus@command:	
  3190                           ; 3 bytes @ 0x2
  3191                           
  3192  0072                     setDimmerIntr_DimmingValue@value:	
  3193                           ; 1 bytes @ 0x2
  3194                           
  3195  0072                     setDimmerIntr_Dimming_Sw@command:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0072                     getDimmerIntr_Dimming_Sw@status:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0072                     setDimmerIntr_Dimming_RF@command:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0072                     setDimmerLights_Line@lights:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0072                     getDimmer_LoadGO@loadgo:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0072                     getDimmer_Load_Status@status:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0072                     getAD@adcon1:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0072                     setMemory_Data@data:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0072                     getMain_All_LightsStatus@status:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0072                     setCmd_Status@cmd:	
  3223                           ; 1 bytes @ 0x2
  3224                           
  3225  0072                     getCmd_Status@number:	
  3226                           ; 1 bytes @ 0x2
  3227                           
  3228  0072                     getLoad_OK@ok:	
  3229                           ; 1 bytes @ 0x2
  3230                           
  3231  0072                     getSw_KeyStatus@status:	
  3232                           ; 1 bytes @ 0x2
  3233                           
  3234  0072                     ___bmul@multiplicand:	
  3235                           ; 1 bytes @ 0x2
  3236                           
  3237  0072                     ___lbdiv@divisor:	
  3238                           ; 1 bytes @ 0x2
  3239                           
  3240  0072                     DelayTime_1us@count:	
  3241                           ; 1 bytes @ 0x2
  3242                           
  3243  0072                     ___wmul@multiplier:	
  3244                           ; 2 bytes @ 0x2
  3245                           
  3246  0072                     ___awdiv@divisor:	
  3247                           ; 2 bytes @ 0x2
  3248                           
  3249  0072                     ___lwdiv@divisor:	
  3250                           ; 2 bytes @ 0x2
  3251                           
  3252  0072                     ___ftpack@arg:	
  3253                           ; 2 bytes @ 0x2
  3254                           
  3255                           
  3256                           ; 3 bytes @ 0x2
  3257  0072                     	ds	1
  3258  0073                     ??_getDimmerLights_Allow_Condition:	
  3259  0073                     ??_setCmd_Status:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0073                     ??_setMemory_Data:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0073                     ??_RF_Initialization:	
  3266                           ; 0 bytes @ 0x3
  3267                           
  3268  0073                     ??_setDimmerIntr_ControlStatus:	
  3269                           ; 0 bytes @ 0x3
  3270                           
  3271  0073                     ??_setDimmerIntr_DimmingValue:	
  3272                           ; 0 bytes @ 0x3
  3273                           
  3274  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3275                           ; 0 bytes @ 0x3
  3276                           
  3277  0073                     ??_setDimmerIntr_Dimming_RF:	
  3278                           ; 0 bytes @ 0x3
  3279                           
  3280  0073                     ??_Mcu_Initialization:	
  3281                           ; 0 bytes @ 0x3
  3282                           
  3283  0073                     ??___bmul:	
  3284                           ; 0 bytes @ 0x3
  3285                           
  3286  0073                     ??___lbdiv:	
  3287                           ; 0 bytes @ 0x3
  3288                           
  3289  0073                     CC2500_WriteByte@loop_a:	
  3290                           ; 0 bytes @ 0x3
  3291                           
  3292  0073                     CC2500_ReadByte@loop_b:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295  0073                     DelayOffPointSelect@sw:	
  3296                           ; 1 bytes @ 0x3
  3297                           
  3298  0073                     getDimmerIntr_DimmingValue@value:	
  3299                           ; 1 bytes @ 0x3
  3300                           
  3301  0073                     getDimmerIntr_Dimming_Sw@lights:	
  3302                           ; 1 bytes @ 0x3
  3303                           
  3304  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2605:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0073                     DimmerLights_SelectPointer@lights:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0073                     getDimmerLights_Line@line:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0073                     LedPointSelect@led:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0073                     Flash_Memory_Read@i:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0073                     Flash_Memory_Write@i:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0073                     setMemory_Modify@command:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0073                     setMemory_LoopSave@command:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0073                     getMain_Lights_Count@status1:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0073                     getCmd_Status@cmd:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0073                     setLoad_AH_AL_Restore@i:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0073                     setRF_Learn@command:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0073                     getRF_KeyStatus@key:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0073                     setRF_TransceiveGO@command:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0073                     SwPointSelect@sw:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0073                     getSw_KeyStatus@sw:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0073                     getAll_Sw_KeyStatus@status:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0073                     _getMain_All_Error_Status$4214:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0073                     setOverTemp_ADV_Restore@i:	
  3359                           ; 2 bytes @ 0x3
  3360                           
  3361                           
  3362                           ; 2 bytes @ 0x3
  3363  0073                     	ds	1
  3364  0074                     ??_CC2500_WriteCommand:	
  3365  0074                     ??_CC2500_ReadStatus:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0074                     ??_DelayTime_1us:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0074                     ?_CC2500_WriteREG:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0074                     ??_DlyOff_Initialization:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0074                     ??_getDimmerLights_Status:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0074                     ??_setDimmerLights_SwOff:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0074                     ?_setLED:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0074                     ??_setLED_Main:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0074                     ??_Load_Initialization:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0074                     ??_getBuz_GO:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0074                     ??_getDelayOff_GO:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0074                     ??_setDimmerLights_DimmingOn:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0074                     ?_setDimmerLights_DimmingRun:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0074                     CC2500_WriteREG@value:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0074                     DlyOff_Initialization@sw:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410  0074                     getDelayOff_GO@sw:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413  0074                     setDimmerIntr_ControlStatus@lights:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416  0074                     setDimmerIntr_DimmingValue@lights:	
  3417                           ; 1 bytes @ 0x4
  3418                           
  3419  0074                     getDimmerIntr_DimmingValue@lights:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0074                     setDimmerIntr_Dimming_RF@lights:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2606:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0074                     setDimmerLights_SwOff@sw:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0074                     setDimmerLights_DimmingOn@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0074                     _getDimmerLights_Allow_Condition$2729:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0074                     getDimmerLights_Status@lights:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0074                     setDimmerLights_DimmingRun@command:	
  3444                           ; 1 bytes @ 0x4
  3445                           
  3446  0074                     setLED@command:	
  3447                           ; 1 bytes @ 0x4
  3448                           
  3449  0074                     Flash_Memory_Read@address:	
  3450                           ; 1 bytes @ 0x4
  3451                           
  3452  0074                     setMemory_Data@address:	
  3453                           ; 1 bytes @ 0x4
  3454                           
  3455  0074                     getMain_Lights_Count@status2:	
  3456                           ; 1 bytes @ 0x4
  3457                           
  3458  0074                     setCmd_Status@number:	
  3459                           ; 1 bytes @ 0x4
  3460                           
  3461  0074                     _getRF_KeyStatus$6247:	
  3462                           ; 1 bytes @ 0x4
  3463                           
  3464  0074                     _getAll_Sw_KeyStatus$7434:	
  3465                           ; 1 bytes @ 0x4
  3466                           
  3467  0074                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x4
  3469                           
  3470  0074                     ___lbdiv@dividend:	
  3471                           ; 1 bytes @ 0x4
  3472                           
  3473  0074                     DelayTime_1us@i:	
  3474                           ; 1 bytes @ 0x4
  3475                           
  3476  0074                     ___wmul@multiplicand:	
  3477                           ; 2 bytes @ 0x4
  3478                           
  3479  0074                     ___awdiv@dividend:	
  3480                           ; 2 bytes @ 0x4
  3481                           
  3482  0074                     ___lwdiv@dividend:	
  3483                           ; 2 bytes @ 0x4
  3484                           
  3485                           
  3486                           ; 2 bytes @ 0x4
  3487  0074                     	ds	1
  3488  0075                     ??_CC2500_WriteREG:	
  3489  0075                     ??_setLED:	
  3490                           ; 0 bytes @ 0x5
  3491                           
  3492  0075                     ??_setDimmerLights_DimmingClose:	
  3493                           ; 0 bytes @ 0x5
  3494                           
  3495  0075                     ??_DelayOff_Initialization:	
  3496                           ; 0 bytes @ 0x5
  3497                           
  3498  0075                     ??_setDimmerLights_DimmingRun:	
  3499                           ; 0 bytes @ 0x5
  3500                           
  3501  0075                     ??_getAD:	
  3502                           ; 0 bytes @ 0x5
  3503                           
  3504  0075                     CC2500_WriteCommand@command:	
  3505                           ; 0 bytes @ 0x5
  3506                           
  3507  0075                     CC2500_ReadStatus@status_addr:	
  3508                           ; 1 bytes @ 0x5
  3509                           
  3510  0075                     getDelayOff_GO@go:	
  3511                           ; 1 bytes @ 0x5
  3512                           
  3513  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3514                           ; 1 bytes @ 0x5
  3515                           
  3516  0075                     _getDimmerLights_Allow_Condition$2730:	
  3517                           ; 1 bytes @ 0x5
  3518                           
  3519  0075                     getDimmerLights_Status@status:	
  3520                           ; 1 bytes @ 0x5
  3521                           
  3522  0075                     setLED@led:	
  3523                           ; 1 bytes @ 0x5
  3524                           
  3525  0075                     getAD@adcon0:	
  3526                           ; 1 bytes @ 0x5
  3527                           
  3528  0075                     Flash_Memory_Read@ret:	
  3529                           ; 1 bytes @ 0x5
  3530                           
  3531  0075                     getMain_Lights_Count@count:	
  3532                           ; 1 bytes @ 0x5
  3533                           
  3534  0075                     ___bmul@multiplier:	
  3535                           ; 1 bytes @ 0x5
  3536                           
  3537  0075                     ___ftpack@exp:	
  3538                           ; 1 bytes @ 0x5
  3539                           
  3540  0075                     ___lbdiv@counter:	
  3541                           ; 1 bytes @ 0x5
  3542                           
  3543  0075                     _getMain_All_Error_Status$4215:	
  3544                           ; 1 bytes @ 0x5
  3545                           
  3546                           
  3547                           ; 2 bytes @ 0x5
  3548  0075                     	ds	1
  3549  0076                     ??_CC2500_ClearTXFIFO:	
  3550  0076                     ??_CC2500_ClearRXFIFO:	
  3551                           ; 0 bytes @ 0x6
  3552                           
  3553  0076                     ??_CC2500_SIDLEMode:	
  3554                           ; 0 bytes @ 0x6
  3555                           
  3556  0076                     ??_setLED_Initialization:	
  3557                           ; 0 bytes @ 0x6
  3558                           
  3559  0076                     ??_Flash_Memory_Modify:	
  3560                           ; 0 bytes @ 0x6
  3561                           
  3562  0076                     ??_getLoad_AD:	
  3563                           ; 0 bytes @ 0x6
  3564                           
  3565  0076                     ??_getTemp_AD:	
  3566                           ; 0 bytes @ 0x6
  3567                           
  3568  0076                     ??_setRF_AdjControl:	
  3569                           ; 0 bytes @ 0x6
  3570                           
  3571  0076                     ??_setSw_Initialization:	
  3572                           ; 0 bytes @ 0x6
  3573                           
  3574  0076                     ??_CC2500_TxData:	
  3575                           ; 0 bytes @ 0x6
  3576                           
  3577  0076                     ??_CC2500_RxData:	
  3578                           ; 0 bytes @ 0x6
  3579                           
  3580  0076                     ??_Flash_Memory_Initialization:	
  3581                           ; 0 bytes @ 0x6
  3582                           
  3583  0076                     ??___wmul:	
  3584                           ; 0 bytes @ 0x6
  3585                           
  3586  0076                     ??___awdiv:	
  3587                           ; 0 bytes @ 0x6
  3588                           
  3589  0076                     ??___lwdiv:	
  3590                           ; 0 bytes @ 0x6
  3591                           
  3592  0076                     CC2500_WriteREG@w_addr:	
  3593                           ; 0 bytes @ 0x6
  3594                           
  3595  0076                     _getDimmerLights_Allow_Condition$2731:	
  3596                           ; 1 bytes @ 0x6
  3597                           
  3598  0076                     setDimmerLights_DimmingRun@lights:	
  3599                           ; 1 bytes @ 0x6
  3600                           
  3601  0076                     setLED_Initialization@led:	
  3602                           ; 1 bytes @ 0x6
  3603                           
  3604  0076                     setLED_Main@led:	
  3605                           ; 1 bytes @ 0x6
  3606                           
  3607  0076                     setSw_Initialization@sw:	
  3608                           ; 1 bytes @ 0x6
  3609                           
  3610  0076                     ___ftpack@sign:	
  3611                           ; 1 bytes @ 0x6
  3612                           
  3613  0076                     ___lbdiv@quotient:	
  3614                           ; 1 bytes @ 0x6
  3615                           
  3616  0076                     getBuz_GO@i:	
  3617                           ; 1 bytes @ 0x6
  3618                           
  3619  0076                     DelayTime_1us@j:	
  3620                           ; 2 bytes @ 0x6
  3621                           
  3622  0076                     ___wmul@product:	
  3623                           ; 2 bytes @ 0x6
  3624                           
  3625                           
  3626                           ; 2 bytes @ 0x6
  3627  0076                     	ds	1
  3628  0077                     ??_CC2500_InitSetREG:	
  3629  0077                     ??_CC2500_InitPATable:	
  3630                           ; 0 bytes @ 0x7
  3631                           
  3632  0077                     ??_Switch_Initialization:	
  3633                           ; 0 bytes @ 0x7
  3634                           
  3635  0077                     ??___ftpack:	
  3636                           ; 0 bytes @ 0x7
  3637                           
  3638  0077                     ??_setBuz:	
  3639                           ; 0 bytes @ 0x7
  3640                           
  3641  0077                     ??_LED_Initialization:	
  3642                           ; 0 bytes @ 0x7
  3643                           
  3644  0077                     ??_LED_Main:	
  3645                           ; 0 bytes @ 0x7
  3646                           
  3647  0077                     ?_Division:	
  3648                           ; 0 bytes @ 0x7
  3649                           
  3650  0077                     CC2500_TxData@loop_e:	
  3651                           ; 1 bytes @ 0x7
  3652                           
  3653  0077                     CC2500_RxData@loop_f:	
  3654                           ; 1 bytes @ 0x7
  3655                           
  3656  0077                     getDimmerLights_Allow_Condition@lights:	
  3657                           ; 1 bytes @ 0x7
  3658                           
  3659  0077                     Division@num:	
  3660                           ; 1 bytes @ 0x7
  3661                           
  3662  0077                     Flash_Memory_Initialization@value:	
  3663                           ; 1 bytes @ 0x7
  3664                           
  3665  0077                     Flash_Memory_Modify@i:	
  3666                           ; 1 bytes @ 0x7
  3667                           
  3668  0077                     getMain_All_Error_Status@command:	
  3669                           ; 1 bytes @ 0x7
  3670                           
  3671  0077                     getTemp_AD@channel:	
  3672                           ; 1 bytes @ 0x7
  3673                           
  3674  0077                     setRF_AdjControl@status:	
  3675                           ; 1 bytes @ 0x7
  3676                           
  3677  0077                     ___lwdiv@quotient:	
  3678                           ; 1 bytes @ 0x7
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x7
  3682  0077                     	ds	1
  3683  0078                     ??_CC2500_PowerRST:	
  3684  0078                     ??_CC2500_FrequencyCabr:	
  3685                           ; 0 bytes @ 0x8
  3686                           
  3687  0078                     ??_Division:	
  3688                           ; 0 bytes @ 0x8
  3689                           
  3690  0078                     ??_Flash_Memory_Main:	
  3691                           ; 0 bytes @ 0x8
  3692                           
  3693  0078                     setBuz@count:	
  3694                           ; 0 bytes @ 0x8
  3695                           
  3696  0078                     CC2500_InitPATable@temp:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699  0078                     getDimmerLights_Allow_Condition@allow:	
  3700                           ; 1 bytes @ 0x8
  3701                           
  3702  0078                     getMain_All_Error_Status@status:	
  3703                           ; 1 bytes @ 0x8
  3704                           
  3705  0078                     setRF_AdjControl@dimmingStatus:	
  3706                           ; 1 bytes @ 0x8
  3707                           
  3708  0078                     getTemp_AD@ADRES:	
  3709                           ; 1 bytes @ 0x8
  3710                           
  3711                           
  3712                           ; 2 bytes @ 0x8
  3713  0078                     	ds	1
  3714  0079                     ??_setDimmerLights_SwOn:	
  3715  0079                     ??_my_MainTimer:	
  3716                           ; 0 bytes @ 0x9
  3717                           
  3718  0079                     ??_Exception_Main:	
  3719                           ; 0 bytes @ 0x9
  3720                           
  3721  0079                     CC2500_InitPATable@loop_d:	
  3722                           ; 0 bytes @ 0x9
  3723                           
  3724  0079                     setRF_AdjControl@sw:	
  3725                           ; 1 bytes @ 0x9
  3726                           
  3727  0079                     ___lwdiv@counter:	
  3728                           ; 1 bytes @ 0x9
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x9
  3732  0079                     	ds	1
  3733  007A                     ??_setDimmerLights_Main:	
  3734  007A                     ??_DimmerLights_TwoPhase_Main:	
  3735                           ; 0 bytes @ 0xA
  3736                           
  3737  007A                     ??_Temp_Main:	
  3738                           ; 0 bytes @ 0xA
  3739                           
  3740  007A                     ??_Switch_Main:	
  3741                           ; 0 bytes @ 0xA
  3742                           
  3743  007A                     ??_RF_Main:	
  3744                           ; 0 bytes @ 0xA
  3745                           
  3746  007A                     ??_setControl_Lights_Table:	
  3747                           ; 0 bytes @ 0xA
  3748                           
  3749  007A                     ??_CC2500_PowerOnInitial:	
  3750                           ; 0 bytes @ 0xA
  3751                           
  3752  007A                     ??_DelayOff_Main:	
  3753                           ; 0 bytes @ 0xA
  3754                           
  3755  007A                     ??_DimmerLights_Initialization:	
  3756                           ; 0 bytes @ 0xA
  3757                           
  3758  007A                     ??_DimmerLights_Main:	
  3759                           ; 0 bytes @ 0xA
  3760                           
  3761  007A                     ??_main:	
  3762                           ; 0 bytes @ 0xA
  3763                           
  3764  007A                     ??___ftneg:	
  3765                           ; 0 bytes @ 0xA
  3766                           
  3767                           
  3768                           	psect	cstackBANK0
  3769  0020                     __pcstackBANK0:	
  3770                           ; 0 bytes @ 0xA
  3771                           
  3772  0020                     ??_Load_Main:	
  3773  0020                     ?___awtoft:	
  3774                           ; 0 bytes @ 0x0
  3775                           
  3776  0020                     CC2500_InitSetREG@temp1:	
  3777                           ; 3 bytes @ 0x0
  3778                           
  3779  0020                     Division@value:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782  0020                     Flash_Memory_Main@key_Status:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785  0020                     getLoad_AD@channel:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788  0020                     ___awdiv@counter:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791  0020                     ___awtoft@c:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794                           
  3795                           ; 2 bytes @ 0x0
  3796  0020                     	ds	1
  3797  0021                     CC2500_InitSetREG@temp2:	
  3798  0021                     Division@result:	
  3799                           ; 1 bytes @ 0x1
  3800                           
  3801  0021                     _Flash_Memory_Main$3708:	
  3802                           ; 1 bytes @ 0x1
  3803                           
  3804  0021                     getLoad_AD@k:	
  3805                           ; 1 bytes @ 0x1
  3806                           
  3807  0021                     ___awdiv@sign:	
  3808                           ; 1 bytes @ 0x1
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0x1
  3812  0021                     	ds	1
  3813  0022                     ??_DimmerIntr_ValueCalculate:	
  3814  0022                     CC2500_InitSetREG@loop_c:	
  3815                           ; 0 bytes @ 0x2
  3816                           
  3817  0022                     getLoad_AD@j:	
  3818                           ; 1 bytes @ 0x2
  3819                           
  3820  0022                     Load_Main@error:	
  3821                           ; 1 bytes @ 0x2
  3822                           
  3823  0022                     ___awdiv@quotient:	
  3824                           ; 1 bytes @ 0x2
  3825                           
  3826                           
  3827                           ; 2 bytes @ 0x2
  3828  0022                     	ds	1
  3829  0023                     ??___awtoft:	
  3830  0023                     getLoad_AD@ADRES:	
  3831                           ; 0 bytes @ 0x3
  3832                           
  3833  0023                     _Load_Main$4636:	
  3834                           ; 2 bytes @ 0x3
  3835                           
  3836                           
  3837                           ; 2 bytes @ 0x3
  3838  0023                     	ds	1
  3839  0024                     ?_setBuz:	
  3840  0024                     DimmerIntr_ValueCalculate@lights:	
  3841                           ; 0 bytes @ 0x4
  3842                           
  3843  0024                     setBuz@time:	
  3844                           ; 1 bytes @ 0x4
  3845                           
  3846                           
  3847                           ; 2 bytes @ 0x4
  3848  0024                     	ds	1
  3849  0025                     ??_DimmerLights_DimmingFunction:	
  3850  0025                     getLoad_AD@i:	
  3851                           ; 0 bytes @ 0x5
  3852                           
  3853  0025                     Load_Main@ErrorCountValue:	
  3854                           ; 1 bytes @ 0x5
  3855                           
  3856  0025                     ___awtoft@sign:	
  3857                           ; 1 bytes @ 0x5
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0x5
  3861  0025                     	ds	1
  3862  0026                     ?___ftdiv:	
  3863  0026                     ?___ftmul:	
  3864                           ; 3 bytes @ 0x6
  3865                           
  3866  0026                     setDimmerLights_SwOn@dimmingStatus:	
  3867                           ; 3 bytes @ 0x6
  3868                           
  3869  0026                     DimmerLights_DimmingFunction@lights:	
  3870                           ; 1 bytes @ 0x6
  3871                           
  3872  0026                     Exception_Main@status:	
  3873                           ; 1 bytes @ 0x6
  3874                           
  3875  0026                     Load_Main@Load_RunStatus:	
  3876                           ; 1 bytes @ 0x6
  3877                           
  3878  0026                     ___ftdiv@f2:	
  3879                           ; 1 bytes @ 0x6
  3880                           
  3881  0026                     ___ftmul@f1:	
  3882                           ; 3 bytes @ 0x6
  3883                           
  3884                           
  3885                           ; 3 bytes @ 0x6
  3886  0026                     	ds	1
  3887  0027                     _setDimmerLights_SwOn$2659:	
  3888  0027                     Exception_Main@count:	
  3889                           ; 1 bytes @ 0x7
  3890                           
  3891  0027                     Load_Main@LightsCount:	
  3892                           ; 1 bytes @ 0x7
  3893                           
  3894                           
  3895                           ; 1 bytes @ 0x7
  3896  0027                     	ds	1
  3897  0028                     _setDimmerLights_SwOn$2668:	
  3898  0028                     Exception_Main@error:	
  3899                           ; 1 bytes @ 0x8
  3900                           
  3901  0028                     Load_Main@i:	
  3902                           ; 1 bytes @ 0x8
  3903                           
  3904                           
  3905                           ; 2 bytes @ 0x8
  3906  0028                     	ds	1
  3907  0029                     setDimmerLights_SwOn@idle:	
  3908  0029                     Exception_Main@i:	
  3909                           ; 1 bytes @ 0x9
  3910                           
  3911  0029                     ___ftdiv@f1:	
  3912                           ; 2 bytes @ 0x9
  3913                           
  3914  0029                     ___ftmul@f2:	
  3915                           ; 3 bytes @ 0x9
  3916                           
  3917                           
  3918                           ; 3 bytes @ 0x9
  3919  0029                     	ds	1
  3920  002A                     setDimmerLights_SwOn@sw:	
  3921                           
  3922                           ; 1 bytes @ 0xA
  3923  002A                     	ds	1
  3924  002B                     ??_setSw_Main:	
  3925  002B                     Exception_Main@i_4227:	
  3926                           ; 0 bytes @ 0xB
  3927                           
  3928                           
  3929                           ; 2 bytes @ 0xB
  3930  002B                     	ds	1
  3931  002C                     ??___ftdiv:	
  3932  002C                     ??___ftmul:	
  3933                           ; 0 bytes @ 0xC
  3934                           
  3935                           
  3936                           ; 0 bytes @ 0xC
  3937  002C                     	ds	1
  3938  002D                     Exception_Main@lights:	
  3939  002D                     setSw_Main@sw:	
  3940                           ; 1 bytes @ 0xD
  3941                           
  3942                           
  3943                           ; 1 bytes @ 0xD
  3944  002D                     	ds	3
  3945  0030                     ___ftdiv@cntr:	
  3946  0030                     ___ftmul@exp:	
  3947                           ; 1 bytes @ 0x10
  3948                           
  3949                           
  3950                           ; 1 bytes @ 0x10
  3951  0030                     	ds	1
  3952  0031                     ___ftdiv@f3:	
  3953  0031                     ___ftmul@f3_as_product:	
  3954                           ; 3 bytes @ 0x11
  3955                           
  3956                           
  3957                           ; 3 bytes @ 0x11
  3958  0031                     	ds	3
  3959  0034                     ___ftdiv@exp:	
  3960  0034                     ___ftmul@cntr:	
  3961                           ; 1 bytes @ 0x14
  3962                           
  3963                           
  3964                           ; 1 bytes @ 0x14
  3965  0034                     	ds	1
  3966  0035                     ___ftdiv@sign:	
  3967  0035                     ___ftmul@sign:	
  3968                           ; 1 bytes @ 0x15
  3969                           
  3970                           
  3971                           ; 1 bytes @ 0x15
  3972  0035                     	ds	1
  3973  0036                     ?___ftneg:	
  3974  0036                     ___ftneg@f1:	
  3975                           ; 3 bytes @ 0x16
  3976                           
  3977                           
  3978                           ; 3 bytes @ 0x16
  3979  0036                     	ds	3
  3980  0039                     ?___ftadd:	
  3981  0039                     ___ftadd@f1:	
  3982                           ; 3 bytes @ 0x19
  3983                           
  3984                           
  3985                           ; 3 bytes @ 0x19
  3986  0039                     	ds	3
  3987  003C                     ___ftadd@f2:	
  3988                           
  3989                           ; 3 bytes @ 0x1C
  3990  003C                     	ds	3
  3991  003F                     ??___ftadd:	
  3992                           
  3993                           ; 0 bytes @ 0x1F
  3994  003F                     	ds	4
  3995  0043                     ___ftadd@sign:	
  3996                           
  3997                           ; 1 bytes @ 0x23
  3998  0043                     	ds	1
  3999  0044                     ___ftadd@exp2:	
  4000                           
  4001                           ; 1 bytes @ 0x24
  4002  0044                     	ds	1
  4003  0045                     ___ftadd@exp1:	
  4004                           
  4005                           ; 1 bytes @ 0x25
  4006  0045                     	ds	1
  4007  0046                     ?___fttol:	
  4008  0046                     ___fttol@f1:	
  4009                           ; 4 bytes @ 0x26
  4010                           
  4011                           
  4012                           ; 3 bytes @ 0x26
  4013  0046                     	ds	4
  4014  004A                     ??___fttol:	
  4015                           
  4016                           ; 0 bytes @ 0x2A
  4017  004A                     	ds	4
  4018  004E                     ___fttol@sign1:	
  4019                           
  4020                           ; 1 bytes @ 0x2E
  4021  004E                     	ds	1
  4022  004F                     ___fttol@lval:	
  4023                           
  4024                           ; 4 bytes @ 0x2F
  4025  004F                     	ds	4
  4026  0053                     ___fttol@exp1:	
  4027                           
  4028                           ; 1 bytes @ 0x33
  4029  0053                     	ds	1
  4030  0054                     ??_getDimmerLights_ValueToPercent:	
  4031  0054                     ??_getDimmerLights_PercentToValue:	
  4032                           ; 0 bytes @ 0x34
  4033                           
  4034                           
  4035                           ; 0 bytes @ 0x34
  4036  0054                     	ds	2
  4037  0056                     getDimmerLights_PercentToValue@value:	
  4038  0056                     getDimmerLights_ValueToPercent@value:	
  4039                           ; 1 bytes @ 0x36
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x36
  4043  0056                     	ds	1
  4044  0057                     getDimmerLights_PercentToValue@i:	
  4045  0057                     getDimmerLights_ValueToPercent@i:	
  4046                           ; 3 bytes @ 0x37
  4047                           
  4048                           
  4049                           ; 3 bytes @ 0x37
  4050  0057                     	ds	3
  4051  005A                     ?_setProductData:	
  4052  005A                     ??_DimmerIntr_Initialization:	
  4053                           ; 0 bytes @ 0x3A
  4054                           
  4055  005A                     ?_setDimmerIntr_MaxmumValue:	
  4056                           ; 0 bytes @ 0x3A
  4057                           
  4058  005A                     setDimmerIntr_MaxmumValue@value:	
  4059                           ; 0 bytes @ 0x3A
  4060                           
  4061  005A                     setProductData@value:	
  4062                           ; 1 bytes @ 0x3A
  4063                           
  4064                           
  4065                           ; 1 bytes @ 0x3A
  4066  005A                     	ds	1
  4067  005B                     ??_setProductData:	
  4068  005B                     ??_setDimmerIntr_MaxmumValue:	
  4069                           ; 0 bytes @ 0x3B
  4070                           
  4071                           
  4072                           ; 0 bytes @ 0x3B
  4073  005B                     	ds	1
  4074  005C                     setDimmerIntr_MaxmumValue@lights:	
  4075  005C                     setProductData@address:	
  4076                           ; 1 bytes @ 0x3C
  4077                           
  4078                           
  4079                           ; 1 bytes @ 0x3C
  4080  005C                     	ds	1
  4081  005D                     ??_DlyOff_Main:	
  4082  005D                     ??_DimmerLights_AssignationDimming:	
  4083                           ; 0 bytes @ 0x3D
  4084                           
  4085  005D                     ?_setRF_DimmerLights:	
  4086                           ; 0 bytes @ 0x3D
  4087                           
  4088  005D                     ??_setTemp_Main:	
  4089                           ; 0 bytes @ 0x3D
  4090                           
  4091  005D                     ??_setLog_Code:	
  4092                           ; 0 bytes @ 0x3D
  4093                           
  4094  005D                     ??_setRFSW_AdjControl:	
  4095                           ; 0 bytes @ 0x3D
  4096                           
  4097  005D                     ?_setDelayOff_GO:	
  4098                           ; 0 bytes @ 0x3D
  4099                           
  4100  005D                     setDelayOff_GO@command:	
  4101                           ; 0 bytes @ 0x3D
  4102                           
  4103  005D                     setRF_DimmerLights@on:	
  4104                           ; 1 bytes @ 0x3D
  4105                           
  4106                           
  4107                           ; 1 bytes @ 0x3D
  4108  005D                     	ds	1
  4109  005E                     ??_setRF_DimmerLights:	
  4110  005E                     setDelayOff_GO@value:	
  4111                           ; 0 bytes @ 0x3E
  4112                           
  4113                           
  4114                           ; 1 bytes @ 0x3E
  4115  005E                     	ds	1
  4116  005F                     ??_setDelayOff_GO:	
  4117  005F                     DlyOff_Main@sw:	
  4118                           ; 0 bytes @ 0x3F
  4119                           
  4120  005F                     DimmerLights_AssignationDimming@status:	
  4121                           ; 1 bytes @ 0x3F
  4122                           
  4123  005F                     setTemp_Main@error:	
  4124                           ; 1 bytes @ 0x3F
  4125                           
  4126  005F                     setRFSW_AdjControl@status:	
  4127                           ; 1 bytes @ 0x3F
  4128                           
  4129                           
  4130                           ; 1 bytes @ 0x3F
  4131  005F                     	ds	1
  4132  0060                     DimmerLights_AssignationDimming@sw:	
  4133  0060                     setTemp_Main@TempGO:	
  4134                           ; 1 bytes @ 0x40
  4135                           
  4136  0060                     setRFSW_AdjControl@sw:	
  4137                           ; 1 bytes @ 0x40
  4138                           
  4139  0060                     setRF_DimmerLights@status:	
  4140                           ; 1 bytes @ 0x40
  4141                           
  4142                           
  4143                           ; 1 bytes @ 0x40
  4144  0060                     	ds	1
  4145  0061                     setDelayOff_GO@i:	
  4146  0061                     DimmerLights_TwoPhase_Main@lights:	
  4147                           ; 1 bytes @ 0x41
  4148                           
  4149  0061                     setRF_DimmerLights@lights:	
  4150                           ; 1 bytes @ 0x41
  4151                           
  4152  0061                     setTemp_Main@SafeValue:	
  4153                           ; 1 bytes @ 0x41
  4154                           
  4155                           
  4156                           ; 2 bytes @ 0x41
  4157  0061                     	ds	1
  4158  0062                     ?_setDimmerLights_Dimming:	
  4159  0062                     setDelayOff_GO@j:	
  4160                           ; 0 bytes @ 0x42
  4161                           
  4162  0062                     setDimmerLights_Dimming@status:	
  4163                           ; 1 bytes @ 0x42
  4164                           
  4165                           
  4166                           ; 1 bytes @ 0x42
  4167  0062                     	ds	1
  4168  0063                     ??_setDimmerLights_Dimming:	
  4169  0063                     setDelayOff_GO@k:	
  4170                           ; 0 bytes @ 0x43
  4171                           
  4172  0063                     setTemp_Main@DangerValue:	
  4173                           ; 1 bytes @ 0x43
  4174                           
  4175                           
  4176                           ; 2 bytes @ 0x43
  4177  0063                     	ds	1
  4178  0064                     setDelayOff_GO@sw:	
  4179  0064                     setDimmerLights_Dimming@value:	
  4180                           ; 1 bytes @ 0x44
  4181                           
  4182                           
  4183                           ; 1 bytes @ 0x44
  4184  0064                     	ds	1
  4185  0065                     ?_setDimmerLights_OnOff:	
  4186  0065                     ??_setRFSW_Control:	
  4187                           ; 0 bytes @ 0x45
  4188                           
  4189  0065                     setDimmerLights_OnOff@command:	
  4190                           ; 0 bytes @ 0x45
  4191                           
  4192  0065                     setDimmerLights_Dimming@lights:	
  4193                           ; 1 bytes @ 0x45
  4194                           
  4195  0065                     setTemp_Main@AD:	
  4196                           ; 1 bytes @ 0x45
  4197                           
  4198                           
  4199                           ; 2 bytes @ 0x45
  4200  0065                     	ds	1
  4201  0066                     ??_setDimmerLights_OnOff:	
  4202  0066                     setRFSW_Control@status:	
  4203                           ; 0 bytes @ 0x46
  4204                           
  4205                           
  4206                           ; 1 bytes @ 0x46
  4207  0066                     	ds	1
  4208  0067                     setRFSW_Control@sw:	
  4209                           
  4210                           ; 1 bytes @ 0x47
  4211  0067                     	ds	1
  4212  0068                     ??_getRxData:	
  4213  0068                     setDimmerLights_OnOff@lights:	
  4214                           ; 0 bytes @ 0x48
  4215                           
  4216                           
  4217                           ; 1 bytes @ 0x48
  4218  0068                     	ds	1
  4219  0069                     setDimmerLights_Main@lights:	
  4220  0069                     getRxData@error:	
  4221                           ; 1 bytes @ 0x49
  4222                           
  4223                           
  4224                           ; 1 bytes @ 0x49
  4225  0069                     	ds	1
  4226  006A                     ??_setRF_Main:	
  4227                           
  4228                           ; 0 bytes @ 0x4A
  4229  006A                     	ds	1
  4230  006B                     setRF_Main@error:	
  4231                           
  4232                           ; 1 bytes @ 0x4B
  4233  006B                     	ds	1
  4234                           
  4235                           	psect	maintext
  4236  1492                     __pmaintext:	
  4237 ;;
  4238 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4239 ;;
  4240 ;; *************** function _main *****************
  4241 ;; Defined at:
  4242 ;;		line 6 in file "../src/Main_B1.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;  argc            2    0[BANK4 ] int 
  4245 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  2    0[BANK4 ] int 
  4250 ;; Registers used:
  4251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4252 ;; Tracked objects:
  4253 ;;		On entry : 17F/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4257 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4261 ;;Total ram usage:        4 bytes
  4262 ;; Hardware stack levels required when called:   11
  4263 ;; This function calls:
  4264 ;;		_Buzzer_Initialization
  4265 ;;		_Buzzer_Main
  4266 ;;		_CC2500_PowerOnInitial
  4267 ;;		_DelayOff_Initialization
  4268 ;;		_DelayOff_Main
  4269 ;;		_DimmerLights_Initialization
  4270 ;;		_DimmerLights_Main
  4271 ;;		_Exception_Main
  4272 ;;		_Flash_Memory_Initialization
  4273 ;;		_Flash_Memory_Main
  4274 ;;		_LED_Initialization
  4275 ;;		_LED_Main
  4276 ;;		_Load_Initialization
  4277 ;;		_Load_Main
  4278 ;;		_Mcu_Initialization
  4279 ;;		_RF_Initialization
  4280 ;;		_RF_Main
  4281 ;;		_Switch_Initialization
  4282 ;;		_Switch_Main
  4283 ;;		_Temp_Initialization
  4284 ;;		_Temp_Main
  4285 ;;		_WDT_Main
  4286 ;;		_getLoad_AD
  4287 ;;		_getTemp_AD
  4288 ;;		_myMain_Initialization
  4289 ;;		_my_MainTimer
  4290 ;; This function is called by:
  4291 ;;		Startup code after reset
  4292 ;; This function uses a non-reentrant model
  4293 ;;
  4294                           
  4295                           
  4296                           ;psect for function _main
  4297  1492                     _main:	
  4298                           
  4299                           ;Main_B1.c: 7: myMain_Initialization();
  4300                           
  4301                           ;incstack = 0
  4302                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4303  1492  3199  211E  3194   	fcall	_myMain_Initialization
  4304                           
  4305                           ;Main_B1.c: 8: Mcu_Initialization();
  4306  1495  319A  221A  3194   	fcall	_Mcu_Initialization
  4307                           
  4308                           ;Main_B1.c: 9: Flash_Memory_Initialization();
  4309  1498  3186  2601  3194   	fcall	_Flash_Memory_Initialization
  4310                           
  4311                           ;Main_B1.c: 10: LED_Initialization();
  4312  149B  3198  20DE  3194   	fcall	_LED_Initialization
  4313                           
  4314                           ;Main_B1.c: 11: Buzzer_Initialization();
  4315  149E  31A7  27D9  3194   	fcall	_Buzzer_Initialization
  4316                           
  4317                           ;Main_B1.c: 13: ;;
  4318                           ;Main_B1.c: 14: Temp_Initialization();
  4319  14A1  31A7  27E5  3194   	fcall	_Temp_Initialization
  4320                           
  4321                           ;Main_B1.c: 15: Load_Initialization();
  4322  14A4  31A7  27DC  3194   	fcall	_Load_Initialization
  4323                           
  4324                           ;Main_B1.c: 16: ;;
  4325                           ;Main_B1.c: 17: DelayOff_Initialization();
  4326  14A7  3198  203F  3194   	fcall	_DelayOff_Initialization
  4327                           
  4328                           ;Main_B1.c: 19: DimmerLights_Initialization();
  4329  14AA  3198  208E  3194   	fcall	_DimmerLights_Initialization
  4330                           
  4331                           ;Main_B1.c: 20: ;;
  4332                           ;Main_B1.c: 21: ;;
  4333                           ;Main_B1.c: 22: ;;
  4334                           ;Main_B1.c: 23: Switch_Initialization();
  4335  14AD  3198  2057  3194   	fcall	_Switch_Initialization
  4336                           
  4337                           ;Main_B1.c: 24: RF_Initialization();
  4338  14B0  31A7  27DF  3194   	fcall	_RF_Initialization
  4339                           
  4340                           ;Main_B1.c: 25: CC2500_PowerOnInitial();
  4341  14B3  319A  22A9  3194   	fcall	_CC2500_PowerOnInitial
  4342  14B6                     l11241:	
  4343                           ;Main_B1.c: 26: ;;
  4344                           ;Main_B1.c: 27: ;;
  4345                           ;Main_B1.c: 29: while (1) {
  4346                           
  4347                           
  4348                           ;Main_B1.c: 31: if (myMain.PowerON == 1) {
  4349  14B6  0021               	movlb	1	; select bank1
  4350  14B7  1C4F               	btfss	_myMain^(0+128),0
  4351  14B8  2CC1               	goto	l11245
  4352                           
  4353                           ;Main_B1.c: 37: getLoad_AD(0x05);
  4354  14B9  3005               	movlw	5
  4355  14BA  3189  2168  3194   	fcall	_getLoad_AD
  4356                           
  4357                           ;Main_B1.c: 41: getTemp_AD(0x09);
  4358  14BD  3009               	movlw	9
  4359  14BE  3196  266D  3194   	fcall	_getTemp_AD
  4360  14C1                     l11245:	
  4361                           
  4362                           ;Main_B1.c: 56: }
  4363                           ;Main_B1.c: 92: if (Timer1.Timeout == 1) {
  4364  14C1  0022               	movlb	2	; select bank2
  4365  14C2  1C25               	btfss	_Timer1^(0+256),0
  4366  14C3  2CB6               	goto	l11241
  4367                           
  4368                           ;Main_B1.c: 93: Timer1.Timeout = 0;
  4369  14C4  1025               	bcf	_Timer1^(0+256),0
  4370                           
  4371                           ;Main_B1.c: 95: my_MainTimer();
  4372  14C5  3190  20EA  3194   	fcall	_my_MainTimer
  4373                           
  4374                           ;Main_B1.c: 96: WDT_Main();
  4375  14C8  3199  21D7  3194   	fcall	_WDT_Main
  4376                           
  4377                           ;Main_B1.c: 97: ;;
  4378                           ;Main_B1.c: 98: ;;
  4379                           ;Main_B1.c: 99: if (myMain.PowerON == 1) {
  4380  14CB  0021               	movlb	1	; select bank1
  4381  14CC  1C4F               	btfss	_myMain^(0+128),0
  4382  14CD  2CB6               	goto	l11241
  4383                           
  4384                           ;Main_B1.c: 100: Flash_Memory_Main();
  4385  14CE  3191  219C  3194   	fcall	_Flash_Memory_Main
  4386                           
  4387                           ;Main_B1.c: 102: LED_Main();
  4388  14D1  3198  20EA  3194   	fcall	_LED_Main
  4389                           
  4390                           ;Main_B1.c: 103: Buzzer_Main();
  4391  14D4  3192  22A6  3194   	fcall	_Buzzer_Main
  4392                           
  4393                           ;Main_B1.c: 105: ;;
  4394                           ;Main_B1.c: 106: Temp_Main();
  4395  14D7  31A7  27E8  3194   	fcall	_Temp_Main
  4396                           
  4397                           ;Main_B1.c: 107: Load_Main();
  4398  14DA  3180  2053  3194   	fcall	_Load_Main
  4399                           
  4400                           ;Main_B1.c: 108: ;;
  4401                           ;Main_B1.c: 110: ;;
  4402                           ;Main_B1.c: 111: DimmerLights_Main();
  4403  14DD  319E  26F9  3194   	fcall	_DimmerLights_Main
  4404                           
  4405                           ;Main_B1.c: 112: Switch_Main();
  4406  14E0  3198  205F  3194   	fcall	_Switch_Main
  4407                           
  4408                           ;Main_B1.c: 113: ;;
  4409                           ;Main_B1.c: 114: ;;
  4410                           ;Main_B1.c: 116: RF_Main();
  4411  14E3  31A7  27E2  3194   	fcall	_RF_Main
  4412                           
  4413                           ;Main_B1.c: 117: DelayOff_Main();
  4414  14E6  3198  2047  3194   	fcall	_DelayOff_Main
  4415                           
  4416                           ;Main_B1.c: 118: ;;
  4417                           ;Main_B1.c: 119: ;;
  4418                           ;Main_B1.c: 120: Exception_Main();
  4419  14E9  3185  252F  3194   	fcall	_Exception_Main
  4420  14EC  2CB6               	goto	l11241
  4421  14ED                     __end_of_main:	
  4422                           ;Main_B1.c: 127: }
  4423                           ;Main_B1.c: 128: }
  4424                           ;Main_B1.c: 162: }
  4425                           ;Main_B1.c: 163: return (0);
  4426                           ;	Return value of _main is never used
  4427                           
  4428                           
  4429                           	psect	text1
  4430  10EA                     __ptext1:	
  4431 ;; *************** function _my_MainTimer *****************
  4432 ;; Defined at:
  4433 ;;		line 184 in file "../src/Main_B1.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;		None
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;		None               void
  4440 ;; Registers used:
  4441 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4449 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;Total ram usage:        1 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    5
  4454 ;; This function calls:
  4455 ;;		_setBuz
  4456 ;; This function is called by:
  4457 ;;		_main
  4458 ;; This function uses a non-reentrant model
  4459 ;;
  4460                           
  4461                           
  4462                           ;psect for function _my_MainTimer
  4463  10EA                     _my_MainTimer:	
  4464                           
  4465                           ;Main_B1.c: 186: if (myMain.PowerON == 0) {
  4466                           
  4467                           ;incstack = 0
  4468                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4469  10EA  0021               	movlb	1	; select bank1
  4470  10EB  184F               	btfsc	_myMain^(0+128),0
  4471  10EC  2902               	goto	l10957
  4472                           
  4473                           ;Main_B1.c: 187: myMain.PowerCount++;
  4474  10ED  3001               	movlw	1
  4475  10EE  00F9               	movwf	??_my_MainTimer
  4476  10EF  0879               	movf	??_my_MainTimer,w
  4477  10F0  07D0               	addwf	(_myMain^(0+128)+1),f
  4478                           
  4479                           ;Main_B1.c: 188: if (myMain.PowerCount == (1500 / 20)) {
  4480  10F1  0850               	movf	(_myMain^(0+128)+1),w
  4481  10F2  3A4B               	xorlw	75
  4482  10F3  1D03               	skipz
  4483  10F4  0008               	return
  4484                           
  4485                           ;Main_B1.c: 189: myMain.PowerCount = 0;
  4486  10F5  01D0               	clrf	(_myMain^(0+128)+1)
  4487                           
  4488                           ;Main_B1.c: 190: myMain.PowerON = 1;
  4489  10F6  144F               	bsf	_myMain^(0+128),0
  4490                           
  4491                           ;Main_B1.c: 195: setBuz(3, 50);
  4492  10F7  3032               	movlw	50
  4493  10F8  0020               	movlb	0	; select bank0
  4494  10F9  00A4               	movwf	setBuz@time
  4495  10FA  3000               	movlw	0
  4496  10FB  00A5               	movwf	setBuz@time+1
  4497  10FC  3003               	movlw	3
  4498  10FD  3192  22EC         	fcall	_setBuz
  4499                           
  4500                           ;Main_B1.c: 196: myMain.SelfTest = 1;
  4501  10FF  0021               	movlb	1	; select bank1
  4502  1100  164F               	bsf	_myMain^(0+128),4
  4503                           
  4504                           ;Main_B1.c: 205: }
  4505                           ;Main_B1.c: 206: } else {
  4506  1101  0008               	return
  4507  1102                     l10957:	
  4508                           
  4509                           ;Main_B1.c: 207: myMain.PowerCount++;
  4510  1102  3001               	movlw	1
  4511  1103  00F9               	movwf	??_my_MainTimer
  4512  1104  0879               	movf	??_my_MainTimer,w
  4513  1105  07D0               	addwf	(_myMain^(0+128)+1),f
  4514                           
  4515                           ;Main_B1.c: 208: if (myMain.PowerCount == (1000 / 20)) {
  4516  1106  0850               	movf	(_myMain^(0+128)+1),w
  4517  1107  3A32               	xorlw	50
  4518  1108  1903               	btfsc	3,2
  4519                           
  4520                           ;Main_B1.c: 209: myMain.PowerCount = 0;
  4521  1109  01D0               	clrf	(_myMain^(0+128)+1)
  4522                           
  4523                           ;Main_B1.c: 231: }
  4524                           ;Main_B1.c: 233: myMain.Count1++;
  4525  110A  3001               	movlw	1
  4526  110B  07D3               	addwf	(_myMain^(0+128)+4),f
  4527  110C  3000               	movlw	0
  4528  110D  3DD4               	addwfc	((_myMain+1)^(0+128)+4),f
  4529                           
  4530                           ;Main_B1.c: 234: if (myMain.Count1 == (1000 / 20)) {
  4531  110E  3004               	movlw	4
  4532  110F  3ECF               	addlw	_myMain& (0+255)
  4533  1110  0086               	movwf	6
  4534  1111  0187               	clrf	7
  4535  1112  3F40               	moviw [0]fsr1
  4536  1113  3A32               	xorlw	50
  4537  1114  1D03               	skipz
  4538  1115  2918               	goto	u12365
  4539  1116  3F41               	moviw [1]fsr1
  4540  1117  3A00               	xorlw	0
  4541  1118                     u12365:	
  4542  1118  1D03               	skipz
  4543  1119  0008               	return
  4544                           
  4545                           ;Main_B1.c: 235: myMain.Count1 = 0;
  4546  111A  01D3               	clrf	(_myMain^(0+128)+4)
  4547  111B  01D4               	clrf	((_myMain+1)^(0+128)+4)
  4548                           
  4549                           ;Main_B1.c: 247: if (myMain.Flag) {
  4550  111C  1CCF               	btfss	_myMain^(0+128),1
  4551  111D  2920               	goto	l1714
  4552                           
  4553                           ;Main_B1.c: 248: myMain.Flag = 0;
  4554  111E  10CF               	bcf	_myMain^(0+128),1
  4555                           
  4556                           ;Main_B1.c: 257: } else {
  4557  111F  0008               	return
  4558  1120                     l1714:	
  4559                           
  4560                           ;Main_B1.c: 258: myMain.Flag = 1;
  4561  1120  14CF               	bsf	_myMain^(0+128),1
  4562  1121  0008               	return
  4563  1122                     __end_of_my_MainTimer:	
  4564                           
  4565                           	psect	text2
  4566  191E                     __ptext2:	
  4567 ;; *************** function _myMain_Initialization *****************
  4568 ;; Defined at:
  4569 ;;		line 169 in file "../src/Main_B1.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;		None
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;		None               void
  4576 ;; Registers used:
  4577 ;;		wreg, fsr1l, fsr1h
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;Total ram usage:        1 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    3
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_main
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           
  4598                           ;psect for function _myMain_Initialization
  4599  191E                     _myMain_Initialization:	
  4600                           
  4601                           ;Main_B1.c: 172: product = &_product;
  4602                           
  4603                           ;incstack = 0
  4604                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4605  191E  30A0               	movlw	__product& (0+255)
  4606  191F  00F2               	movwf	??_myMain_Initialization
  4607  1920  0872               	movf	??_myMain_Initialization,w
  4608  1921  00FB               	movwf	_product
  4609                           
  4610                           ;Main_B1.c: 173: product->Data[20] = 210;
  4611  1922  30D2               	movlw	210
  4612  1923  00F2               	movwf	??_myMain_Initialization
  4613  1924  087B               	movf	_product,w
  4614  1925  3E14               	addlw	20
  4615  1926  0086               	movwf	6
  4616  1927  3002               	movlw	2	; select bank4/5
  4617  1928  0087               	movwf	7
  4618  1929  0872               	movf	??_myMain_Initialization,w
  4619  192A  0081               	movwf	1
  4620  192B  0008               	return
  4621  192C                     __end_of_myMain_Initialization:	
  4622                           
  4623                           	psect	text3
  4624  166D                     __ptext3:	
  4625 ;; *************** function _getTemp_AD *****************
  4626 ;; Defined at:
  4627 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  channel         1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  channel         1    7[COMMON] unsigned char 
  4632 ;;  ADRES           2    8[COMMON] unsigned int 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;		None               void
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4643 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4645 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;Total ram usage:        4 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    5
  4649 ;; This function calls:
  4650 ;;		_getAD
  4651 ;; This function is called by:
  4652 ;;		_main
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           
  4657                           ;psect for function _getTemp_AD
  4658  166D                     _getTemp_AD:	
  4659                           
  4660                           ;incstack = 0
  4661                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4662                           ;getTemp_AD@channel stored from wreg
  4663  166D  00F7               	movwf	getTemp_AD@channel
  4664                           
  4665                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4666  166E  01F8               	clrf	getTemp_AD@ADRES
  4667  166F  01F9               	clrf	getTemp_AD@ADRES+1
  4668                           
  4669                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4670  1670  0022               	movlb	2	; select bank2
  4671  1671  1D5A               	btfss	_Temp^(0+256),2
  4672  1672  0008               	return
  4673                           
  4674                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4675  1673  30F0               	movlw	240
  4676  1674  00F6               	movwf	??_getTemp_AD
  4677  1675  0876               	movf	??_getTemp_AD,w
  4678  1676  00F2               	movwf	getAD@adcon1
  4679  1677  0877               	movf	getTemp_AD@channel,w
  4680  1678  319B  23A7  3196   	fcall	_getAD
  4681  167B  0873               	movf	?_getAD+1,w
  4682  167C  01F9               	clrf	getTemp_AD@ADRES+1
  4683  167D  07F9               	addwf	getTemp_AD@ADRES+1,f
  4684  167E  0872               	movf	?_getAD,w
  4685  167F  01F8               	clrf	getTemp_AD@ADRES
  4686  1680  07F8               	addwf	getTemp_AD@ADRES,f
  4687                           
  4688                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4689  1681  0879               	movf	getTemp_AD@ADRES+1,w
  4690  1682  0478               	iorwf	getTemp_AD@ADRES,w
  4691  1683  1903               	skipnz
  4692  1684  0008               	return
  4693                           
  4694                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4695  1685  0879               	movf	getTemp_AD@ADRES+1,w
  4696  1686  0022               	movlb	2	; select bank2
  4697  1687  025F               	subwf	((_Temp+1)^(0+256)+4),w
  4698  1688  1D03               	skipz
  4699  1689  2E8C               	goto	u9565
  4700  168A  0878               	movf	getTemp_AD@ADRES,w
  4701  168B  025E               	subwf	(_Temp^(0+256)+4),w
  4702  168C                     u9565:	
  4703  168C  1803               	skipnc
  4704  168D  2E95               	goto	l9137
  4705                           
  4706                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4707  168E  0879               	movf	getTemp_AD@ADRES+1,w
  4708  168F  01DF               	clrf	((_Temp+1)^(0+256)+4)
  4709  1690  07DF               	addwf	((_Temp+1)^(0+256)+4),f
  4710  1691  0878               	movf	getTemp_AD@ADRES,w
  4711  1692  01DE               	clrf	(_Temp^(0+256)+4)
  4712  1693  07DE               	addwf	(_Temp^(0+256)+4),f
  4713                           
  4714                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4715  1694  0008               	return
  4716  1695                     l9137:	
  4717  1695  0879               	movf	getTemp_AD@ADRES+1,w
  4718  1696  0261               	subwf	((_Temp+1)^(0+256)+6),w
  4719  1697  1D03               	skipz
  4720  1698  2E9B               	goto	u9575
  4721  1699  0878               	movf	getTemp_AD@ADRES,w
  4722  169A  0260               	subwf	(_Temp^(0+256)+6),w
  4723  169B                     u9575:	
  4724  169B  1803               	skipnc
  4725  169C  2EA4               	goto	l9141
  4726                           
  4727                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4728  169D  0879               	movf	getTemp_AD@ADRES+1,w
  4729  169E  01E1               	clrf	((_Temp+1)^(0+256)+6)
  4730  169F  07E1               	addwf	((_Temp+1)^(0+256)+6),f
  4731  16A0  0878               	movf	getTemp_AD@ADRES,w
  4732  16A1  01E0               	clrf	(_Temp^(0+256)+6)
  4733  16A2  07E0               	addwf	(_Temp^(0+256)+6),f
  4734                           
  4735                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4736  16A3  0008               	return
  4737  16A4                     l9141:	
  4738  16A4  0879               	movf	getTemp_AD@ADRES+1,w
  4739  16A5  0263               	subwf	((_Temp+1)^(0+256)+8),w
  4740  16A6  1D03               	skipz
  4741  16A7  2EAA               	goto	u9585
  4742  16A8  0878               	movf	getTemp_AD@ADRES,w
  4743  16A9  0262               	subwf	(_Temp^(0+256)+8),w
  4744  16AA                     u9585:	
  4745  16AA  1803               	skipnc
  4746  16AB  2EB3               	goto	l9145
  4747                           
  4748                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4749  16AC  0879               	movf	getTemp_AD@ADRES+1,w
  4750  16AD  01E3               	clrf	((_Temp+1)^(0+256)+8)
  4751  16AE  07E3               	addwf	((_Temp+1)^(0+256)+8),f
  4752  16AF  0878               	movf	getTemp_AD@ADRES,w
  4753  16B0  01E2               	clrf	(_Temp^(0+256)+8)
  4754  16B1  07E2               	addwf	(_Temp^(0+256)+8),f
  4755                           
  4756                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4757  16B2  0008               	return
  4758  16B3                     l9145:	
  4759  16B3  0879               	movf	getTemp_AD@ADRES+1,w
  4760  16B4  0265               	subwf	((_Temp+1)^(0+256)+10),w
  4761  16B5  1D03               	skipz
  4762  16B6  2EB9               	goto	u9595
  4763  16B7  0878               	movf	getTemp_AD@ADRES,w
  4764  16B8  0264               	subwf	(_Temp^(0+256)+10),w
  4765  16B9                     u9595:	
  4766  16B9  1803               	skipnc
  4767  16BA  2EC2               	goto	l9149
  4768                           
  4769                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4770  16BB  0879               	movf	getTemp_AD@ADRES+1,w
  4771  16BC  01E5               	clrf	((_Temp+1)^(0+256)+10)
  4772  16BD  07E5               	addwf	((_Temp+1)^(0+256)+10),f
  4773  16BE  0878               	movf	getTemp_AD@ADRES,w
  4774  16BF  01E4               	clrf	(_Temp^(0+256)+10)
  4775  16C0  07E4               	addwf	(_Temp^(0+256)+10),f
  4776                           
  4777                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4778  16C1  0008               	return
  4779  16C2                     l9149:	
  4780  16C2  0879               	movf	getTemp_AD@ADRES+1,w
  4781  16C3  0267               	subwf	((_Temp+1)^(0+256)+12),w
  4782  16C4  1D03               	skipz
  4783  16C5  2EC8               	goto	u9605
  4784  16C6  0878               	movf	getTemp_AD@ADRES,w
  4785  16C7  0266               	subwf	(_Temp^(0+256)+12),w
  4786  16C8                     u9605:	
  4787  16C8  1803               	skipnc
  4788  16C9  0008               	return
  4789                           
  4790                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4791  16CA  0879               	movf	getTemp_AD@ADRES+1,w
  4792  16CB  01E7               	clrf	((_Temp+1)^(0+256)+12)
  4793  16CC  07E7               	addwf	((_Temp+1)^(0+256)+12),f
  4794  16CD  0878               	movf	getTemp_AD@ADRES,w
  4795  16CE  01E6               	clrf	(_Temp^(0+256)+12)
  4796  16CF  07E6               	addwf	(_Temp^(0+256)+12),f
  4797  16D0  0008               	return
  4798  16D1                     __end_of_getTemp_AD:	
  4799                           
  4800                           	psect	text4
  4801  0968                     __ptext4:	
  4802 ;; *************** function _getLoad_AD *****************
  4803 ;; Defined at:
  4804 ;;		line 16 in file "../src/OverLoad_B1.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  channel         1    wreg     unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  channel         1    0[BANK0 ] unsigned char 
  4809 ;;  ADRES           2    3[BANK0 ] unsigned int 
  4810 ;;  i               1    5[BANK0 ] unsigned char 
  4811 ;;  j               1    2[BANK0 ] unsigned char 
  4812 ;;  k               1    1[BANK0 ] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        8 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    5
  4829 ;; This function calls:
  4830 ;;		_getAD
  4831 ;; This function is called by:
  4832 ;;		_main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _getLoad_AD
  4838  0968                     _getLoad_AD:	
  4839                           
  4840                           ;incstack = 0
  4841                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4842                           ;getLoad_AD@channel stored from wreg
  4843  0968  0020               	movlb	0	; select bank0
  4844  0969  00A0               	movwf	getLoad_AD@channel
  4845                           
  4846                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4847  096A  01A5               	clrf	getLoad_AD@i
  4848  096B  01A2               	clrf	getLoad_AD@j
  4849  096C  01A1               	clrf	getLoad_AD@k
  4850                           
  4851                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4852  096D  01A3               	clrf	getLoad_AD@ADRES
  4853  096E  01A4               	clrf	getLoad_AD@ADRES+1
  4854                           
  4855                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4856  096F  0022               	movlb	2	; select bank2
  4857  0970  1E32               	btfss	_Load^(0+256),4
  4858  0971  0008               	return
  4859                           
  4860                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4861  0972  30F3               	movlw	243
  4862  0973  00F6               	movwf	??_getLoad_AD
  4863  0974  0876               	movf	??_getLoad_AD,w
  4864  0975  00F2               	movwf	getAD@adcon1
  4865  0976  0020               	movlb	0	; select bank0
  4866  0977  0820               	movf	getLoad_AD@channel,w
  4867  0978  319B  23A7  3189   	fcall	_getAD
  4868  097B  0873               	movf	?_getAD+1,w
  4869  097C  0020               	movlb	0	; select bank0
  4870  097D  01A4               	clrf	getLoad_AD@ADRES+1
  4871  097E  07A4               	addwf	getLoad_AD@ADRES+1,f
  4872  097F  0872               	movf	?_getAD,w
  4873  0980  01A3               	clrf	getLoad_AD@ADRES
  4874  0981  07A3               	addwf	getLoad_AD@ADRES,f
  4875                           
  4876                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4877  0982  01A5               	clrf	getLoad_AD@i
  4878  0983  3004               	movlw	4
  4879  0984  0225               	subwf	getLoad_AD@i,w
  4880  0985  1803               	btfsc	3,0
  4881  0986  29AE               	goto	l9105
  4882  0987                     l9093:	
  4883                           
  4884                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4885  0987  3525               	lslf	getLoad_AD@i,w
  4886  0988  3E3D               	addlw	(_Load+11)& (0+255)
  4887  0989  0086               	movwf	6
  4888  098A  3001               	movlw	1	; select bank2/3
  4889  098B  0087               	movwf	7
  4890  098C  3F40               	moviw [0]fsr1
  4891  098D  00F6               	movwf	??_getLoad_AD
  4892  098E  3F41               	moviw [1]fsr1
  4893  098F  00F7               	movwf	??_getLoad_AD+1
  4894  0990  0824               	movf	getLoad_AD@ADRES+1,w
  4895  0991  0277               	subwf	??_getLoad_AD+1,w
  4896  0992  1D03               	skipz
  4897  0993  2996               	goto	u9465
  4898  0994  0823               	movf	getLoad_AD@ADRES,w
  4899  0995  0276               	subwf	??_getLoad_AD,w
  4900  0996                     u9465:	
  4901  0996  1803               	skipnc
  4902  0997  29A6               	goto	l9101
  4903  0998  08A2               	movf	getLoad_AD@j,f
  4904  0999  1D03               	skipz
  4905  099A  29A6               	goto	l9101
  4906                           
  4907                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4908  099B  3525               	lslf	getLoad_AD@i,w
  4909  099C  3E3D               	addlw	(_Load+11)& (0+255)
  4910  099D  0086               	movwf	6
  4911  099E  3001               	movlw	1	; select bank2/3
  4912  099F  0087               	movwf	7
  4913  09A0  0823               	movf	getLoad_AD@ADRES,w
  4914  09A1  3FC0               	movwi [0]fsr1
  4915  09A2  0824               	movf	getLoad_AD@ADRES+1,w
  4916  09A3  3FC1               	movwi [1]fsr1
  4917                           
  4918                           ;OverLoad_B1.c: 25: j = 1;
  4919  09A4  01A2               	clrf	getLoad_AD@j
  4920  09A5  0AA2               	incf	getLoad_AD@j,f
  4921  09A6                     l9101:	
  4922  09A6  3001               	movlw	1
  4923  09A7  00F6               	movwf	??_getLoad_AD
  4924  09A8  0876               	movf	??_getLoad_AD,w
  4925  09A9  07A5               	addwf	getLoad_AD@i,f
  4926  09AA  3004               	movlw	4
  4927  09AB  0225               	subwf	getLoad_AD@i,w
  4928  09AC  1C03               	skipc
  4929  09AD  2987               	goto	l9093
  4930  09AE                     l9105:	
  4931                           
  4932                           ;OverLoad_B1.c: 26: }
  4933                           ;OverLoad_B1.c: 27: }
  4934                           ;OverLoad_B1.c: 28: if (j == 0) {
  4935  09AE  08A2               	movf	getLoad_AD@j,f
  4936  09AF  1D03               	skipz
  4937  09B0  0008               	return
  4938                           
  4939                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4940  09B1  01A5               	clrf	getLoad_AD@i
  4941  09B2                     L1:	
  4942  09B2  3004               	movlw	4
  4943  09B3  0225               	subwf	getLoad_AD@i,w
  4944  09B4  1803               	btfsc	3,0
  4945  09B5  0008               	return
  4946                           
  4947                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4948  09B6  3525               	lslf	getLoad_AD@i,w
  4949  09B7  3E47               	addlw	(_Load+21)& (0+255)
  4950  09B8  0086               	movwf	6
  4951  09B9  3001               	movlw	1	; select bank2/3
  4952  09BA  0087               	movwf	7
  4953  09BB  3F40               	moviw [0]fsr1
  4954  09BC  00F6               	movwf	??_getLoad_AD
  4955  09BD  3F41               	moviw [1]fsr1
  4956  09BE  00F7               	movwf	??_getLoad_AD+1
  4957  09BF  0877               	movf	??_getLoad_AD+1,w
  4958  09C0  0224               	subwf	getLoad_AD@ADRES+1,w
  4959  09C1  1D03               	skipz
  4960  09C2  29C5               	goto	u9515
  4961  09C3  0876               	movf	??_getLoad_AD,w
  4962  09C4  0223               	subwf	getLoad_AD@ADRES,w
  4963  09C5                     u9515:	
  4964  09C5  1803               	skipnc
  4965  09C6  29D5               	goto	l9121
  4966  09C7  08A1               	movf	getLoad_AD@k,f
  4967  09C8  1D03               	skipz
  4968  09C9  29D5               	goto	l9121
  4969                           
  4970                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4971  09CA  3525               	lslf	getLoad_AD@i,w
  4972  09CB  3E47               	addlw	(_Load+21)& (0+255)
  4973  09CC  0086               	movwf	6
  4974  09CD  3001               	movlw	1	; select bank2/3
  4975  09CE  0087               	movwf	7
  4976  09CF  0823               	movf	getLoad_AD@ADRES,w
  4977  09D0  3FC0               	movwi [0]fsr1
  4978  09D1  0824               	movf	getLoad_AD@ADRES+1,w
  4979  09D2  3FC1               	movwi [1]fsr1
  4980                           
  4981                           ;OverLoad_B1.c: 32: k = 1;
  4982  09D3  01A1               	clrf	getLoad_AD@k
  4983  09D4  0AA1               	incf	getLoad_AD@k,f
  4984  09D5                     l9121:	
  4985  09D5  3001               	movlw	1
  4986  09D6  00F6               	movwf	??_getLoad_AD
  4987  09D7  0876               	movf	??_getLoad_AD,w
  4988  09D8  07A5               	addwf	getLoad_AD@i,f
  4989  09D9  29B2               	goto	L1
  4990  09DA                     __end_of_getLoad_AD:	
  4991                           
  4992                           	psect	text5
  4993  1BA7                     __ptext5:	
  4994 ;; *************** function _getAD *****************
  4995 ;; Defined at:
  4996 ;;		line 463 in file "../src/MCU_B1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  adcon0          1    wreg     unsigned char 
  4999 ;;  adcon1          1    2[COMMON] unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  adcon0          1    5[COMMON] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  2    2[COMMON] int 
  5004 ;; Registers used:
  5005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;Total ram usage:        4 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    4
  5018 ;; This function calls:
  5019 ;;		_Timeout_Counter
  5020 ;;		_set_TimeoutCleared
  5021 ;; This function is called by:
  5022 ;;		_getLoad_AD
  5023 ;;		_getTemp_AD
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           
  5028                           ;psect for function _getAD
  5029  1BA7                     _getAD:	
  5030                           
  5031                           ;incstack = 0
  5032                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5033                           ;getAD@adcon0 stored from wreg
  5034  1BA7  00F5               	movwf	getAD@adcon0
  5035                           
  5036                           ;MCU_B1.c: 464: ADCON0 = adcon0;
  5037  1BA8  0875               	movf	getAD@adcon0,w
  5038  1BA9  0021               	movlb	1	; select bank1
  5039  1BAA  009D               	movwf	29	;volatile
  5040                           
  5041                           ;MCU_B1.c: 465: ADCON1 = adcon1;
  5042  1BAB  0872               	movf	getAD@adcon1,w
  5043  1BAC  009E               	movwf	30	;volatile
  5044                           
  5045                           ;MCU_B1.c: 466: GO_nDONE = 1;
  5046  1BAD  149D               	bsf	29,1	;volatile
  5047                           
  5048                           ;MCU_B1.c: 467: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5049  1BAE  2BB2               	goto	l8575
  5050  1BAF                     l8573:	
  5051                           
  5052                           ;MCU_B1.c: 468: Timeout_Counter();
  5053  1BAF  319A  22D3  319B   	fcall	_Timeout_Counter
  5054  1BB2                     l8575:	
  5055  1BB2  0021               	movlb	1	; select bank1
  5056  1BB3  1C9D               	btfss	29,1	;volatile
  5057  1BB4  2BB7               	goto	l8579
  5058  1BB5  1D59               	btfss	(_myMain^(0+128)+10),2
  5059  1BB6  2BAF               	goto	l8573
  5060  1BB7                     l8579:	
  5061                           
  5062                           ;MCU_B1.c: 469: };
  5063                           ;MCU_B1.c: 470: set_TimeoutCleared();
  5064  1BB7  3198  2004         	fcall	_set_TimeoutCleared
  5065                           
  5066                           ;MCU_B1.c: 471: return ((ADRESH*256)+ADRESL);
  5067  1BB9  0021               	movlb	1	; select bank1
  5068  1BBA  081C               	movf	28,w	;volatile
  5069  1BBB  01F3               	clrf	?_getAD+1
  5070  1BBC  07F3               	addwf	?_getAD+1,f
  5071  1BBD  081B               	movf	27,w	;volatile
  5072  1BBE  01F2               	clrf	?_getAD
  5073  1BBF  07F2               	addwf	?_getAD,f
  5074  1BC0  0008               	return
  5075  1BC1                     __end_of_getAD:	
  5076                           
  5077                           	psect	text6
  5078  1804                     __ptext6:	
  5079 ;; *************** function _set_TimeoutCleared *****************
  5080 ;; Defined at:
  5081 ;;		line 286 in file "../src/Main_B1.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;		None               void
  5088 ;; Registers used:
  5089 ;;		status,2
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;Total ram usage:        0 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    3
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_getAD
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           
  5110                           ;psect for function _set_TimeoutCleared
  5111  1804                     _set_TimeoutCleared:	
  5112                           
  5113                           ;Main_B1.c: 287: myMain.Timeout = 0;
  5114                           
  5115                           ;incstack = 0
  5116                           ; Regs used in _set_TimeoutCleared: [status,2]
  5117  1804  0021               	movlb	1	; select bank1
  5118  1805  1159               	bcf	(_myMain^(0+128)+10),2
  5119                           
  5120                           ;Main_B1.c: 288: myMain.Timeout_Counter = 0;
  5121  1806  01DA               	clrf	(_myMain^(0+128)+11)
  5122  1807  01DB               	clrf	((_myMain+1)^(0+128)+11)
  5123  1808  0008               	return
  5124  1809                     __end_of_set_TimeoutCleared:	
  5125                           
  5126                           	psect	text7
  5127  1AD3                     __ptext7:	
  5128 ;; *************** function _Timeout_Counter *****************
  5129 ;; Defined at:
  5130 ;;		line 277 in file "../src/Main_B1.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;		None               void
  5137 ;; Registers used:
  5138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    3
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_getAD
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function _Timeout_Counter
  5160  1AD3                     _Timeout_Counter:	
  5161                           
  5162                           ;Main_B1.c: 278: myMain.Timeout_Counter++;
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  5166  1AD3  3001               	movlw	1
  5167  1AD4  0021               	movlb	1	; select bank1
  5168  1AD5  07DA               	addwf	(_myMain^(0+128)+11),f
  5169  1AD6  3000               	movlw	0
  5170  1AD7  3DDB               	addwfc	((_myMain+1)^(0+128)+11),f
  5171                           
  5172                           ;Main_B1.c: 279: if (myMain.Timeout_Counter == 25000) {
  5173  1AD8  300B               	movlw	11
  5174  1AD9  3ECF               	addlw	_myMain& (0+255)
  5175  1ADA  0086               	movwf	6
  5176  1ADB  0187               	clrf	7
  5177  1ADC  3F40               	moviw [0]fsr1
  5178  1ADD  3AA8               	xorlw	168
  5179  1ADE  1D03               	skipz
  5180  1ADF  2AE2               	goto	u7445
  5181  1AE0  3F41               	moviw [1]fsr1
  5182  1AE1  3A61               	xorlw	97
  5183  1AE2                     u7445:	
  5184  1AE2  1D03               	skipz
  5185  1AE3  0008               	return
  5186                           
  5187                           ;Main_B1.c: 280: myMain.Timeout_Counter = 0;
  5188  1AE4  01DA               	clrf	(_myMain^(0+128)+11)
  5189  1AE5  01DB               	clrf	((_myMain+1)^(0+128)+11)
  5190                           
  5191                           ;Main_B1.c: 281: myMain.Timeout = 1;
  5192  1AE6  1559               	bsf	(_myMain^(0+128)+10),2
  5193  1AE7  0008               	return
  5194  1AE8                     __end_of_Timeout_Counter:	
  5195                           
  5196                           	psect	text8
  5197  19D7                     __ptext8:	
  5198 ;; *************** function _WDT_Main *****************
  5199 ;; Defined at:
  5200 ;;		line 1121 in file "../src/MCU_B1.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;		None
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;		None
  5205 ;; Return value:  Size  Location     Type
  5206 ;;		None               void
  5207 ;; Registers used:
  5208 ;;		wreg, status,2, status,0, pclath, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 0/0
  5211 ;;		On exit  : 0/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5218 ;;Total ram usage:        1 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:    4
  5221 ;; This function calls:
  5222 ;;		_WDT_Clearing
  5223 ;; This function is called by:
  5224 ;;		_main
  5225 ;; This function uses a non-reentrant model
  5226 ;;
  5227                           
  5228                           
  5229                           ;psect for function _WDT_Main
  5230  19D7                     _WDT_Main:	
  5231                           
  5232                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  5233                           
  5234                           ;incstack = 0
  5235                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5236  19D7  0022               	movlb	2	; select bank2
  5237  19D8  1C2A               	btfss	_WDT^(0+256),0
  5238  19D9  0008               	return
  5239                           
  5240                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  5241  19DA  3001               	movlw	1
  5242  19DB  02AB               	subwf	(_WDT^(0+256)+1),f
  5243  19DC  082B               	movf	(_WDT^(0+256)+1),w
  5244  19DD  3AFF               	xorlw	255
  5245  19DE  1903               	skipnz
  5246  19DF  0008               	return
  5247                           
  5248                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  5249  19E0  3064               	movlw	100
  5250  19E1  00F2               	movwf	??_WDT_Main
  5251  19E2  0872               	movf	??_WDT_Main,w
  5252  19E3  00AB               	movwf	(_WDT^(0+256)+1)
  5253                           
  5254                           ;MCU_B1.c: 1125: WDT_Clearing();
  5255  19E4  3180  2002         	fcall	_WDT_Clearing
  5256  19E6  0008               	return
  5257  19E7                     __end_of_WDT_Main:	
  5258                           
  5259                           	psect	text9
  5260  0002                     __ptext9:	
  5261 ;; *************** function _WDT_Clearing *****************
  5262 ;; Defined at:
  5263 ;;		line 1131 in file "../src/MCU_B1.c"
  5264 ;; Parameters:    Size  Location     Type
  5265 ;;		None
  5266 ;; Auto vars:     Size  Location     Type
  5267 ;;		None
  5268 ;; Return value:  Size  Location     Type
  5269 ;;		None               void
  5270 ;; Registers used:
  5271 ;;		None
  5272 ;; Tracked objects:
  5273 ;;		On entry : 0/0
  5274 ;;		On exit  : 0/0
  5275 ;;		Unchanged: 0/0
  5276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;Total ram usage:        0 bytes
  5282 ;; Hardware stack levels used:    1
  5283 ;; Hardware stack levels required when called:    3
  5284 ;; This function calls:
  5285 ;;		Nothing
  5286 ;; This function is called by:
  5287 ;;		_WDT_Main
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           
  5292                           ;psect for function _WDT_Clearing
  5293  0002                     _WDT_Clearing:	
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _WDT_Clearing: []
  5297  0002  0064               	clrwdt	;# 
  5298  0003  0008               	return
  5299  0004                     __end_of_WDT_Clearing:	
  5300                           
  5301                           	psect	text10
  5302  27E8                     __ptext10:	
  5303 ;; *************** function _Temp_Main *****************
  5304 ;; Defined at:
  5305 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;		None               void
  5312 ;; Registers used:
  5313 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5314 ;; Tracked objects:
  5315 ;;		On entry : 0/0
  5316 ;;		On exit  : 0/0
  5317 ;;		Unchanged: 0/0
  5318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;Total ram usage:        0 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:    6
  5326 ;; This function calls:
  5327 ;;		_setTemp_Main
  5328 ;; This function is called by:
  5329 ;;		_main
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           
  5334                           ;psect for function _Temp_Main
  5335  27E8                     _Temp_Main:	
  5336                           
  5337                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5338                           
  5339                           ;incstack = 0
  5340                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5341  27E8  3184  245A         	fcall	_setTemp_Main
  5342  27EA  0008               	return
  5343  27EB                     __end_of_Temp_Main:	
  5344                           
  5345                           	psect	text11
  5346  045A                     __ptext11:	
  5347 ;; *************** function _setTemp_Main *****************
  5348 ;; Defined at:
  5349 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5350 ;; Parameters:    Size  Location     Type
  5351 ;;		None
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  AD              2   69[BANK0 ] int 
  5354 ;;  DangerValue     2   67[BANK0 ] unsigned int 
  5355 ;;  SafeValue       2   65[BANK0 ] unsigned int 
  5356 ;;  TempGO          1   64[BANK0 ] unsigned char 
  5357 ;;  error           1   63[BANK0 ] unsigned char 
  5358 ;; Return value:  Size  Location     Type
  5359 ;;		None               void
  5360 ;; Registers used:
  5361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:       10 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    5
  5374 ;; This function calls:
  5375 ;;		___lwdiv
  5376 ;;		_getMain_All_Error_Status
  5377 ;;		_getMain_All_LightsStatus
  5378 ;;		_setBuz
  5379 ;;		_setOverTemp_ADV_Restore
  5380 ;;		_setProductData
  5381 ;; This function is called by:
  5382 ;;		_Temp_Main
  5383 ;; This function uses a non-reentrant model
  5384 ;;
  5385                           
  5386                           
  5387                           ;psect for function _setTemp_Main
  5388  045A                     _setTemp_Main:	
  5389                           
  5390                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5391                           
  5392                           ;incstack = 0
  5393                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5394  045A  3000               	movlw	0
  5395  045B  319E  263C  3184   	fcall	_getMain_All_Error_Status
  5396  045E  0020               	movlb	0	; select bank0
  5397  045F  00DD               	movwf	??_setTemp_Main
  5398  0460  085D               	movf	??_setTemp_Main,w
  5399  0461  00DF               	movwf	setTemp_Main@error
  5400                           
  5401                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5402  0462  01E1               	clrf	setTemp_Main@SafeValue
  5403  0463  01E2               	clrf	setTemp_Main@SafeValue+1
  5404  0464  01E3               	clrf	setTemp_Main@DangerValue
  5405  0465  01E4               	clrf	setTemp_Main@DangerValue+1
  5406                           
  5407                           ;OverTemperature_B1.c: 75: int AD = 0;
  5408  0466  01E5               	clrf	setTemp_Main@AD
  5409  0467  01E6               	clrf	setTemp_Main@AD+1
  5410                           
  5411                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5412  0468  3199  2159  3184   	fcall	_getMain_All_LightsStatus
  5413  046B  0020               	movlb	0	; select bank0
  5414  046C  00DD               	movwf	??_setTemp_Main
  5415  046D  085D               	movf	??_setTemp_Main,w
  5416  046E  00E0               	movwf	setTemp_Main@TempGO
  5417                           
  5418                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5419  046F  0022               	movlb	2	; select bank2
  5420  0470  1C5A               	btfss	_Temp^(0+256),0
  5421  0471  2D29               	goto	l2092
  5422                           
  5423                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5424  0472  195A               	btfsc	_Temp^(0+256),2
  5425  0473  2C91               	goto	l10643
  5426                           
  5427                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5428  0474  0020               	movlb	0	; select bank0
  5429  0475  0860               	movf	setTemp_Main@TempGO,w
  5430  0476  3A01               	xorlw	1
  5431  0477  1D03               	skipz
  5432  0478  2C7C               	goto	l2098
  5433  0479  0022               	movlb	2	; select bank2
  5434  047A  1CDA               	btfss	_Temp^(0+256),1
  5435  047B  2C7F               	goto	l10635
  5436  047C                     l2098:	
  5437  047C  0022               	movlb	2	; select bank2
  5438  047D  1CDA               	btfss	_Temp^(0+256),1
  5439  047E  2C8E               	goto	l10641
  5440  047F                     l10635:	
  5441                           
  5442                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5443  047F  3001               	movlw	1
  5444  0480  07DB               	addwf	(_Temp^(0+256)+1),f
  5445  0481  3000               	movlw	0
  5446  0482  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5447                           
  5448                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5449  0483  3000               	movlw	0
  5450  0484  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5451  0485  30FA               	movlw	250
  5452  0486  1903               	skipnz
  5453  0487  025B               	subwf	(_Temp^(0+256)+1),w
  5454  0488  1C03               	skipc
  5455  0489  0008               	return
  5456                           
  5457                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5458  048A  01DB               	clrf	(_Temp^(0+256)+1)
  5459  048B  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5460                           
  5461                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5462  048C  155A               	bsf	_Temp^(0+256),2
  5463                           
  5464                           ;OverTemperature_B1.c: 92: }
  5465                           ;OverTemperature_B1.c: 93: } else {
  5466  048D  0008               	return
  5467  048E                     l10641:	
  5468                           
  5469                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5470  048E  01DB               	clrf	(_Temp^(0+256)+1)
  5471  048F  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5472                           
  5473                           ;OverTemperature_B1.c: 95: }
  5474                           ;OverTemperature_B1.c: 96: } else {
  5475  0490  0008               	return
  5476  0491                     l10643:	
  5477                           
  5478                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5479  0491  3001               	movlw	1
  5480  0492  07DB               	addwf	(_Temp^(0+256)+1),f
  5481  0493  3000               	movlw	0
  5482  0494  3DDC               	addwfc	((_Temp+1)^(0+256)+1),f
  5483                           
  5484                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5485  0495  3000               	movlw	0
  5486  0496  025C               	subwf	((_Temp+1)^(0+256)+1),w
  5487  0497  3005               	movlw	5
  5488  0498  1903               	skipnz
  5489  0499  025B               	subwf	(_Temp^(0+256)+1),w
  5490  049A  1C03               	skipc
  5491  049B  0008               	return
  5492                           
  5493                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5494  049C  01DB               	clrf	(_Temp^(0+256)+1)
  5495  049D  01DC               	clrf	((_Temp+1)^(0+256)+1)
  5496                           
  5497                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5498  049E  3003               	movlw	3
  5499  049F  00F2               	movwf	___lwdiv@divisor
  5500  04A0  3000               	movlw	0
  5501  04A1  00F3               	movwf	___lwdiv@divisor+1
  5502  04A2  300A               	movlw	10
  5503  04A3  3E5A               	addlw	_Temp& (0+255)
  5504  04A4  0086               	movwf	6
  5505  04A5  3001               	movlw	1	; select bank2/3
  5506  04A6  0087               	movwf	7
  5507  04A7  3008               	movlw	8
  5508  04A8  3E5A               	addlw	_Temp& (0+255)
  5509  04A9  0084               	movwf	4
  5510  04AA  3001               	movlw	1	; select bank2/3
  5511  04AB  0085               	movwf	5
  5512  04AC  3F00               	moviw [0]fsr0
  5513  04AD  0760               	addwf	(_Temp^(0+256)+6),w
  5514  04AE  0020               	movlb	0	; select bank0
  5515  04AF  00DD               	movwf	??_setTemp_Main
  5516  04B0  3F01               	moviw [1]fsr0
  5517  04B1  0022               	movlb	2	; select bank2
  5518  04B2  3D61               	addwfc	((_Temp+1)^(0+256)+6),w
  5519  04B3  0020               	movlb	0	; select bank0
  5520  04B4  00DE               	movwf	??_setTemp_Main+1
  5521  04B5  3F40               	moviw [0]fsr1
  5522  04B6  075D               	addwf	??_setTemp_Main,w
  5523  04B7  00F4               	movwf	___lwdiv@dividend
  5524  04B8  3F41               	moviw [1]fsr1
  5525  04B9  3D5E               	addwfc	??_setTemp_Main+1,w
  5526  04BA  00F5               	movwf	___lwdiv@dividend+1
  5527  04BB  319F  275D  3184   	fcall	___lwdiv
  5528  04BE  0873               	movf	?___lwdiv+1,w
  5529  04BF  0020               	movlb	0	; select bank0
  5530  04C0  01E6               	clrf	setTemp_Main@AD+1
  5531  04C1  07E6               	addwf	setTemp_Main@AD+1,f
  5532  04C2  0872               	movf	?___lwdiv,w
  5533  04C3  01E5               	clrf	setTemp_Main@AD
  5534  04C4  07E5               	addwf	setTemp_Main@AD,f
  5535                           
  5536                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5537  04C5  319B  238D  3184   	fcall	_setOverTemp_ADV_Restore
  5538                           
  5539                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5540  04C8  0020               	movlb	0	; select bank0
  5541  04C9  0866               	movf	setTemp_Main@AD+1,w
  5542  04CA  3A80               	xorlw	128
  5543  04CB  00DD               	movwf	??_setTemp_Main
  5544  04CC  3080               	movlw	128
  5545  04CD  025D               	subwf	??_setTemp_Main,w
  5546  04CE  1D03               	skipz
  5547  04CF  2CD2               	goto	u11835
  5548  04D0  3001               	movlw	1
  5549  04D1  0265               	subwf	setTemp_Main@AD,w
  5550  04D2                     u11835:	
  5551  04D2  1C03               	skipc
  5552  04D3  0008               	return
  5553                           
  5554                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5555  04D4  0022               	movlb	2	; select bank2
  5556  04D5  115A               	bcf	_Temp^(0+256),2
  5557                           
  5558                           ;OverTemperature_B1.c: 123: SafeValue = 420;
  5559  04D6  30A4               	movlw	164
  5560  04D7  0020               	movlb	0	; select bank0
  5561  04D8  00E1               	movwf	setTemp_Main@SafeValue
  5562  04D9  3001               	movlw	1
  5563  04DA  00E2               	movwf	setTemp_Main@SafeValue+1
  5564                           
  5565                           ;OverTemperature_B1.c: 124: DangerValue = 365;
  5566  04DB  306D               	movlw	109
  5567  04DC  00E3               	movwf	setTemp_Main@DangerValue
  5568  04DD  3001               	movlw	1
  5569  04DE  00E4               	movwf	setTemp_Main@DangerValue+1
  5570                           
  5571                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5572  04DF  0022               	movlb	2	; select bank2
  5573  04E0  1CDA               	btfss	_Temp^(0+256),1
  5574  04E1  2D00               	goto	l10673
  5575                           
  5576                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5577  04E2  0020               	movlb	0	; select bank0
  5578  04E3  0862               	movf	setTemp_Main@SafeValue+1,w
  5579  04E4  0266               	subwf	setTemp_Main@AD+1,w
  5580  04E5  1D03               	skipz
  5581  04E6  2CE9               	goto	u11855
  5582  04E7  0861               	movf	setTemp_Main@SafeValue,w
  5583  04E8  0265               	subwf	setTemp_Main@AD,w
  5584  04E9                     u11855:	
  5585  04E9  1C03               	skipc
  5586  04EA  2D15               	goto	l10683
  5587                           
  5588                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5589  04EB  3001               	movlw	1
  5590  04EC  00DD               	movwf	??_setTemp_Main
  5591  04ED  085D               	movf	??_setTemp_Main,w
  5592  04EE  0022               	movlb	2	; select bank2
  5593  04EF  07DD               	addwf	(_Temp^(0+256)+3),f
  5594                           
  5595                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5596  04F0  3003               	movlw	3
  5597  04F1  025D               	subwf	(_Temp^(0+256)+3),w
  5598  04F2  1C03               	skipc
  5599  04F3  2D17               	goto	l10685
  5600                           
  5601                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5602  04F4  01DD               	clrf	(_Temp^(0+256)+3)
  5603                           
  5604                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5605  04F5  10DA               	bcf	_Temp^(0+256),1
  5606                           
  5607                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5608  04F6  3064               	movlw	100
  5609  04F7  0020               	movlb	0	; select bank0
  5610  04F8  00A4               	movwf	setBuz@time
  5611  04F9  3000               	movlw	0
  5612  04FA  00A5               	movwf	setBuz@time+1
  5613  04FB  3002               	movlw	2
  5614  04FC  3192  22EC  3184   	fcall	_setBuz
  5615                           
  5616                           ;OverTemperature_B1.c: 137: }
  5617                           ;OverTemperature_B1.c: 138: } else {
  5618  04FF  2D17               	goto	l10685
  5619  0500                     l10673:	
  5620                           ;OverTemperature_B1.c: 140: }
  5621                           ;OverTemperature_B1.c: 141: } else {
  5622                           
  5623                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5624                           
  5625                           
  5626                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5627  0500  0020               	movlb	0	; select bank0
  5628  0501  0866               	movf	setTemp_Main@AD+1,w
  5629  0502  0264               	subwf	setTemp_Main@DangerValue+1,w
  5630  0503  1D03               	skipz
  5631  0504  2D07               	goto	u11875
  5632  0505  0865               	movf	setTemp_Main@AD,w
  5633  0506  0263               	subwf	setTemp_Main@DangerValue,w
  5634  0507                     u11875:	
  5635  0507  1C03               	skipc
  5636  0508  2D15               	goto	l10683
  5637                           
  5638                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5639  0509  3001               	movlw	1
  5640  050A  00DD               	movwf	??_setTemp_Main
  5641  050B  085D               	movf	??_setTemp_Main,w
  5642  050C  0022               	movlb	2	; select bank2
  5643  050D  07DD               	addwf	(_Temp^(0+256)+3),f
  5644                           
  5645                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5646  050E  3003               	movlw	3
  5647  050F  025D               	subwf	(_Temp^(0+256)+3),w
  5648  0510  1C03               	skipc
  5649  0511  2D17               	goto	l10685
  5650                           
  5651                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5652  0512  01DD               	clrf	(_Temp^(0+256)+3)
  5653                           
  5654                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5655  0513  14DA               	bsf	_Temp^(0+256),1
  5656                           
  5657                           ;OverTemperature_B1.c: 147: }
  5658                           ;OverTemperature_B1.c: 148: } else {
  5659  0514  2D17               	goto	l10685
  5660  0515                     l10683:	
  5661                           
  5662                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5663  0515  0022               	movlb	2	; select bank2
  5664  0516  01DD               	clrf	(_Temp^(0+256)+3)
  5665  0517                     l10685:	
  5666                           
  5667                           ;OverTemperature_B1.c: 150: }
  5668                           ;OverTemperature_B1.c: 151: }
  5669                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5670  0517  0020               	movlb	0	; select bank0
  5671  0518  0866               	movf	setTemp_Main@AD+1,w
  5672  0519  00DD               	movwf	??_setTemp_Main
  5673  051A  085D               	movf	??_setTemp_Main,w
  5674  051B  00DA               	movwf	setProductData@value
  5675  051C  3018               	movlw	24
  5676  051D  3198  20C6  3184   	fcall	_setProductData
  5677                           
  5678                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5679  0520  0020               	movlb	0	; select bank0
  5680  0521  0865               	movf	setTemp_Main@AD,w
  5681  0522  00DD               	movwf	??_setTemp_Main
  5682  0523  085D               	movf	??_setTemp_Main,w
  5683  0524  00DA               	movwf	setProductData@value
  5684  0525  3019               	movlw	25
  5685  0526  3198  20C6         	fcall	_setProductData
  5686                           
  5687                           ;OverTemperature_B1.c: 169: }
  5688                           ;OverTemperature_B1.c: 170: }
  5689                           ;OverTemperature_B1.c: 171: }
  5690                           ;OverTemperature_B1.c: 174: } else {
  5691  0528  0008               	return
  5692  0529                     l2092:	
  5693                           
  5694                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5695  0529  0021               	movlb	1	; select bank1
  5696  052A  1C4F               	btfss	_myMain^(0+128),0
  5697  052B  0008               	return
  5698                           
  5699                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5700  052C  0022               	movlb	2	; select bank2
  5701  052D  145A               	bsf	_Temp^(0+256),0
  5702  052E  0008               	return
  5703  052F                     __end_of_setTemp_Main:	
  5704                           
  5705                           	psect	text12
  5706  1B8D                     __ptext12:	
  5707 ;; *************** function _setOverTemp_ADV_Restore *****************
  5708 ;; Defined at:
  5709 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  i               2    3[COMMON] int 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        3 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    3
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_setTemp_Main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _setOverTemp_ADV_Restore
  5739  1B8D                     _setOverTemp_ADV_Restore:	
  5740                           
  5741                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5745  1B8D  01F3               	clrf	setOverTemp_ADV_Restore@i
  5746  1B8E  01F4               	clrf	setOverTemp_ADV_Restore@i+1
  5747  1B8F                     L2:	
  5748  1B8F  0874               	movf	setOverTemp_ADV_Restore@i+1,w
  5749  1B90  3A80               	xorlw	128
  5750  1B91  00F2               	movwf	??_setOverTemp_ADV_Restore
  5751  1B92  3080               	movlw	128
  5752  1B93  0272               	subwf	??_setOverTemp_ADV_Restore,w
  5753  1B94  1D03               	skipz
  5754  1B95  2B98               	goto	u7475
  5755  1B96  3005               	movlw	5
  5756  1B97  0273               	subwf	setOverTemp_ADV_Restore@i,w
  5757  1B98                     u7475:	
  5758  1B98  1803               	btfsc	3,0
  5759  1B99  0008               	return
  5760                           
  5761                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5762  1B9A  3573               	lslf	setOverTemp_ADV_Restore@i,w
  5763  1B9B  3E5E               	addlw	(_Temp+4)& (0+255)
  5764  1B9C  0086               	movwf	6
  5765  1B9D  3001               	movlw	1	; select bank2/3
  5766  1B9E  0087               	movwf	7
  5767  1B9F  3000               	movlw	0
  5768  1BA0  3FC0               	movwi [0]fsr1
  5769  1BA1  3FC1               	movwi [1]fsr1
  5770  1BA2  3001               	movlw	1
  5771  1BA3  07F3               	addwf	setOverTemp_ADV_Restore@i,f
  5772  1BA4  3000               	movlw	0
  5773  1BA5  3DF4               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5774  1BA6  2B8F               	goto	L2
  5775  1BA7                     __end_of_setOverTemp_ADV_Restore:	
  5776                           
  5777                           	psect	text13
  5778  27E5                     __ptext13:	
  5779 ;; *************** function _Temp_Initialization *****************
  5780 ;; Defined at:
  5781 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;		None
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;		None
  5786 ;; Return value:  Size  Location     Type
  5787 ;;		None               void
  5788 ;; Registers used:
  5789 ;;		status,2, status,0, pclath, cstack
  5790 ;; Tracked objects:
  5791 ;;		On entry : 0/0
  5792 ;;		On exit  : 0/0
  5793 ;;		Unchanged: 0/0
  5794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;Total ram usage:        0 bytes
  5800 ;; Hardware stack levels used:    1
  5801 ;; Hardware stack levels required when called:    4
  5802 ;; This function calls:
  5803 ;;		_setTemp_Initialization
  5804 ;; This function is called by:
  5805 ;;		_main
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           
  5810                           ;psect for function _Temp_Initialization
  5811  27E5                     _Temp_Initialization:	
  5812                           
  5813                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5814                           
  5815                           ;incstack = 0
  5816                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5817  27E5  3188  2000         	fcall	_setTemp_Initialization
  5818  27E7  0008               	return
  5819  27E8                     __end_of_Temp_Initialization:	
  5820                           
  5821                           	psect	text14
  5822  0800                     __ptext14:	
  5823 ;; *************** function _setTemp_Initialization *****************
  5824 ;; Defined at:
  5825 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;		None
  5830 ;; Return value:  Size  Location     Type
  5831 ;;		None               void
  5832 ;; Registers used:
  5833 ;;		None
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;Total ram usage:        0 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    3
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_Temp_Initialization
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function _setTemp_Initialization
  5855  0800                     _setTemp_Initialization:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in _setTemp_Initialization: []
  5859  0800  0008               	return
  5860  0801                     __end_of_setTemp_Initialization:	
  5861                           
  5862                           	psect	text15
  5863  185F                     __ptext15:	
  5864 ;; *************** function _Switch_Main *****************
  5865 ;; Defined at:
  5866 ;;		line 76 in file "../src/Switch_B1.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;		None               void
  5873 ;; Registers used:
  5874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;Total ram usage:        0 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    7
  5887 ;; This function calls:
  5888 ;;		_setSw_Main
  5889 ;; This function is called by:
  5890 ;;		_main
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _Switch_Main
  5896  185F                     _Switch_Main:	
  5897                           
  5898                           ;Switch_B1.c: 79: setSw_Main(1);
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5902  185F  3001               	movlw	1
  5903  1860  3181  21F3  3198   	fcall	_setSw_Main
  5904                           
  5905                           ;Switch_B1.c: 83: setSw_Main(2);
  5906  1863  3002               	movlw	2
  5907  1864  3181  21F3         	fcall	_setSw_Main
  5908  1866  0008               	return
  5909  1867                     __end_of_Switch_Main:	
  5910                           
  5911                           	psect	text16
  5912  01F3                     __ptext16:	
  5913 ;; *************** function _setSw_Main *****************
  5914 ;; Defined at:
  5915 ;;		line 117 in file "../src/Switch_B1.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;  sw              1    wreg     unsigned char 
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;  sw              1   13[BANK0 ] unsigned char 
  5920 ;; Return value:  Size  Location     Type
  5921 ;;		None               void
  5922 ;; Registers used:
  5923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;Total ram usage:        3 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:    6
  5936 ;; This function calls:
  5937 ;;		_SwPointSelect
  5938 ;;		_getMain_All_Error_Status
  5939 ;;		_getSw_KeyStatus
  5940 ;;		_setBuz
  5941 ;;		_setDimmerLights_DimmingOn
  5942 ;;		_setDimmerLights_SwOff
  5943 ;;		_setDimmerLights_SwOn
  5944 ;;		_setRF_Learn
  5945 ;; This function is called by:
  5946 ;;		_Switch_Main
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           
  5951                           ;psect for function _setSw_Main
  5952  01F3                     _setSw_Main:	
  5953                           
  5954                           ;incstack = 0
  5955                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5956                           ;setSw_Main@sw stored from wreg
  5957  01F3  0020               	movlb	0	; select bank0
  5958  01F4  00AD               	movwf	setSw_Main@sw
  5959                           
  5960                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5961  01F5  082D               	movf	setSw_Main@sw,w
  5962  01F6  319A  22BE  3181   	fcall	_SwPointSelect
  5963                           
  5964                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5965  01F9  0020               	movlb	0	; select bank0
  5966  01FA  086D               	movf	_Sw,w
  5967  01FB  0086               	movwf	6
  5968  01FC  3001               	movlw	1	; select bank2/3
  5969  01FD  0087               	movwf	7
  5970  01FE  1C01               	btfss	1,0
  5971  01FF  2B5A               	goto	l2899
  5972                           
  5973                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5974  0200  3000               	movlw	0
  5975  0201  319E  263C  3181   	fcall	_getMain_All_Error_Status
  5976  0204  3800               	iorlw	0
  5977  0205  1D03               	skipz
  5978  0206  2A22               	goto	l10779
  5979                           
  5980                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5981  0207  0020               	movlb	0	; select bank0
  5982  0208  0A6D               	incf	_Sw,w
  5983  0209  0086               	movwf	6
  5984  020A  3001               	movlw	1	; select bank2/3
  5985  020B  0087               	movwf	7
  5986  020C  1081               	bcf	1,1
  5987                           
  5988                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5989  020D  082D               	movf	setSw_Main@sw,w
  5990  020E  319B  232C  3181   	fcall	_getSw_KeyStatus
  5991  0211  3A01               	xorlw	1
  5992  0212  3000               	movlw	0
  5993  0213  1903               	skipnz
  5994  0214  3001               	movlw	1
  5995  0215  0020               	movlb	0	; select bank0
  5996  0216  00AB               	movwf	??_setSw_Main
  5997  0217  086D               	movf	_Sw,w
  5998  0218  0086               	movwf	6
  5999  0219  3001               	movlw	1	; select bank2/3
  6000  021A  0087               	movwf	7
  6001  021B  0DAB               	rlf	??_setSw_Main,f
  6002  021C  0801               	movf	1,w
  6003  021D  062B               	xorwf	??_setSw_Main,w
  6004  021E  39FD               	andlw	-3
  6005  021F  062B               	xorwf	??_setSw_Main,w
  6006  0220  0081               	movwf	1
  6007                           
  6008                           ;Switch_B1.c: 124: } else {
  6009  0221  2A38               	goto	l2901
  6010  0222                     l10779:	
  6011                           
  6012                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  6013  0222  0020               	movlb	0	; select bank0
  6014  0223  0A6D               	incf	_Sw,w
  6015  0224  0086               	movwf	6
  6016  0225  3001               	movlw	1	; select bank2/3
  6017  0226  0087               	movwf	7
  6018  0227  1881               	btfsc	1,1
  6019  0228  2A38               	goto	l2901
  6020                           
  6021                           ;Switch_B1.c: 126: Sw->Detect = 1;
  6022  0229  0A6D               	incf	_Sw,w
  6023  022A  0086               	movwf	6
  6024  022B  3001               	movlw	1	; select bank2/3
  6025  022C  0087               	movwf	7
  6026  022D  1481               	bsf	1,1
  6027                           
  6028                           ;Switch_B1.c: 128: Sw->Touch = 0;
  6029  022E  086D               	movf	_Sw,w
  6030  022F  0086               	movwf	6
  6031  0230  3001               	movlw	1	; select bank2/3
  6032  0231  0087               	movwf	7
  6033  0232  1081               	bcf	1,1
  6034                           
  6035                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  6036  0233  086D               	movf	_Sw,w
  6037  0234  0086               	movwf	6
  6038  0235  3001               	movlw	1	; select bank2/3
  6039  0236  0087               	movwf	7
  6040  0237  1501               	bsf	1,2
  6041  0238                     l2901:	
  6042                           
  6043                           ;Switch_B1.c: 130: }
  6044                           ;Switch_B1.c: 131: }
  6045                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  6046  0238  086D               	movf	_Sw,w
  6047  0239  0086               	movwf	6
  6048  023A  3001               	movlw	1	; select bank2/3
  6049  023B  0087               	movwf	7
  6050  023C  1C81               	btfss	1,1
  6051  023D  2B07               	goto	l10829
  6052                           
  6053                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  6054  023E  086D               	movf	_Sw,w
  6055  023F  0086               	movwf	6
  6056  0240  3001               	movlw	1	; select bank2/3
  6057  0241  0087               	movwf	7
  6058  0242  1901               	btfsc	1,2
  6059  0243  2A65               	goto	l10795
  6060                           
  6061                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  6062  0244  3001               	movlw	1
  6063  0245  00AB               	movwf	??_setSw_Main
  6064  0246  086D               	movf	_Sw,w
  6065  0247  3E02               	addlw	2
  6066  0248  0086               	movwf	6
  6067  0249  3001               	movlw	1	; select bank2/3
  6068  024A  0087               	movwf	7
  6069  024B  082B               	movf	??_setSw_Main,w
  6070  024C  0781               	addwf	1,f
  6071                           
  6072                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  6073  024D  086D               	movf	_Sw,w
  6074  024E  3E02               	addlw	2
  6075  024F  0086               	movwf	6
  6076  0250  3001               	movlw	1	; select bank2/3
  6077  0251  0087               	movwf	7
  6078  0252  3005               	movlw	5
  6079  0253  0201               	subwf	1,w
  6080  0254  1C03               	skipc
  6081  0255  0008               	return
  6082                           
  6083                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  6084  0256  086D               	movf	_Sw,w
  6085  0257  3E02               	addlw	2
  6086  0258  0086               	movwf	6
  6087  0259  3001               	movlw	1	; select bank2/3
  6088  025A  0087               	movwf	7
  6089  025B  0181               	clrf	1
  6090                           
  6091                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6092  025C  086D               	movf	_Sw,w
  6093  025D  0086               	movwf	6
  6094  025E  3001               	movlw	1	; select bank2/3
  6095  025F  0087               	movwf	7
  6096  0260  1501               	bsf	1,2
  6097                           
  6098                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6099  0261  082D               	movf	setSw_Main@sw,w
  6100  0262  3187  2784         	fcall	_setDimmerLights_SwOn
  6101                           
  6102                           ;Switch_B1.c: 147: }
  6103                           ;Switch_B1.c: 148: } else {
  6104  0264  0008               	return
  6105  0265                     l10795:	
  6106                           
  6107                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6108  0265  0020               	movlb	0	; select bank0
  6109  0266  086D               	movf	_Sw,w
  6110  0267  0086               	movwf	6
  6111  0268  3001               	movlw	1	; select bank2/3
  6112  0269  0087               	movwf	7
  6113  026A  1981               	btfsc	1,3
  6114  026B  2A97               	goto	l10805
  6115                           
  6116                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6117  026C  086D               	movf	_Sw,w
  6118  026D  3E03               	addlw	3
  6119  026E  0086               	movwf	6
  6120  026F  3001               	movlw	1	; select bank2/3
  6121  0270  0087               	movwf	7
  6122  0271  3001               	movlw	1
  6123  0272  0781               	addwf	1,f
  6124  0273  3141               	addfsr 1,1
  6125  0274  1803               	skipnc
  6126  0275  0A81               	incf	1,f
  6127                           
  6128                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6129  0276  086D               	movf	_Sw,w
  6130  0277  3E03               	addlw	3
  6131  0278  0086               	movwf	6
  6132  0279  3001               	movlw	1	; select bank2/3
  6133  027A  0087               	movwf	7
  6134  027B  3F40               	moviw [0]fsr1
  6135  027C  00AB               	movwf	??_setSw_Main
  6136  027D  3F41               	moviw [1]fsr1
  6137  027E  00AC               	movwf	??_setSw_Main+1
  6138  027F  3000               	movlw	0
  6139  0280  022C               	subwf	??_setSw_Main+1,w
  6140  0281  304B               	movlw	75
  6141  0282  1903               	skipnz
  6142  0283  022B               	subwf	??_setSw_Main,w
  6143  0284  1C03               	skipc
  6144  0285  0008               	return
  6145                           
  6146                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6147  0286  086D               	movf	_Sw,w
  6148  0287  3E03               	addlw	3
  6149  0288  0086               	movwf	6
  6150  0289  3001               	movlw	1	; select bank2/3
  6151  028A  0087               	movwf	7
  6152  028B  3000               	movlw	0
  6153  028C  3FC0               	movwi [0]fsr1
  6154  028D  3FC1               	movwi [1]fsr1
  6155                           
  6156                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6157  028E  086D               	movf	_Sw,w
  6158  028F  0086               	movwf	6
  6159  0290  3001               	movlw	1	; select bank2/3
  6160  0291  0087               	movwf	7
  6161  0292  1581               	bsf	1,3
  6162                           
  6163                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6164  0293  082D               	movf	setSw_Main@sw,w
  6165  0294  319D  2599         	fcall	_setDimmerLights_DimmingOn
  6166                           
  6167                           ;Switch_B1.c: 162: }
  6168                           ;Switch_B1.c: 163: } else {
  6169  0296  0008               	return
  6170  0297                     l10805:	
  6171                           
  6172                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6173  0297  0020               	movlb	0	; select bank0
  6174  0298  086D               	movf	_Sw,w
  6175  0299  0086               	movwf	6
  6176  029A  3001               	movlw	1	; select bank2/3
  6177  029B  0087               	movwf	7
  6178  029C  1A01               	btfsc	1,4
  6179  029D  2AD5               	goto	l10819
  6180                           
  6181                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6182  029E  086D               	movf	_Sw,w
  6183  029F  3E05               	addlw	5
  6184  02A0  0086               	movwf	6
  6185  02A1  3001               	movlw	1	; select bank2/3
  6186  02A2  0087               	movwf	7
  6187  02A3  3001               	movlw	1
  6188  02A4  0781               	addwf	1,f
  6189  02A5  3141               	addfsr 1,1
  6190  02A6  1803               	skipnc
  6191  02A7  0A81               	incf	1,f
  6192                           
  6193                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6194  02A8  086D               	movf	_Sw,w
  6195  02A9  3E05               	addlw	5
  6196  02AA  0086               	movwf	6
  6197  02AB  3001               	movlw	1	; select bank2/3
  6198  02AC  0087               	movwf	7
  6199  02AD  3F40               	moviw [0]fsr1
  6200  02AE  00AB               	movwf	??_setSw_Main
  6201  02AF  3F41               	moviw [1]fsr1
  6202  02B0  00AC               	movwf	??_setSw_Main+1
  6203  02B1  3000               	movlw	0
  6204  02B2  022C               	subwf	??_setSw_Main+1,w
  6205  02B3  304B               	movlw	75
  6206  02B4  1903               	skipnz
  6207  02B5  022B               	subwf	??_setSw_Main,w
  6208  02B6  1C03               	skipc
  6209  02B7  0008               	return
  6210                           
  6211                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6212  02B8  086D               	movf	_Sw,w
  6213  02B9  3E05               	addlw	5
  6214  02BA  0086               	movwf	6
  6215  02BB  3001               	movlw	1	; select bank2/3
  6216  02BC  0087               	movwf	7
  6217  02BD  3000               	movlw	0
  6218  02BE  3FC0               	movwi [0]fsr1
  6219  02BF  3FC1               	movwi [1]fsr1
  6220                           
  6221                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6222  02C0  086D               	movf	_Sw,w
  6223  02C1  0086               	movwf	6
  6224  02C2  3001               	movlw	1	; select bank2/3
  6225  02C3  0087               	movwf	7
  6226  02C4  1601               	bsf	1,4
  6227                           
  6228                           ;Switch_B1.c: 172: setRF_Learn(1);
  6229  02C5  3001               	movlw	1
  6230  02C6  319A  2209  3181   	fcall	_setRF_Learn
  6231                           
  6232                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6233  02C9  0021               	movlb	1	; select bank1
  6234  02CA  1ECF               	btfss	_myMain^(0+128),5
  6235  02CB  0008               	return
  6236                           
  6237                           ;Switch_B1.c: 174: setBuz(2, 100);
  6238  02CC  3064               	movlw	100
  6239  02CD  0020               	movlb	0	; select bank0
  6240  02CE  00A4               	movwf	setBuz@time
  6241  02CF  3000               	movlw	0
  6242  02D0  00A5               	movwf	setBuz@time+1
  6243  02D1  3002               	movlw	2
  6244  02D2  3192  22EC         	fcall	_setBuz
  6245                           
  6246                           ;Switch_B1.c: 175: }
  6247                           ;Switch_B1.c: 179: }
  6248                           ;Switch_B1.c: 180: } else {
  6249  02D4  0008               	return
  6250  02D5                     l10819:	
  6251                           
  6252                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6253  02D5  0020               	movlb	0	; select bank0
  6254  02D6  086D               	movf	_Sw,w
  6255  02D7  0086               	movwf	6
  6256  02D8  3001               	movlw	1	; select bank2/3
  6257  02D9  0087               	movwf	7
  6258  02DA  1A81               	btfsc	1,5
  6259  02DB  0008               	return
  6260                           
  6261                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6262  02DC  086D               	movf	_Sw,w
  6263  02DD  3E07               	addlw	7
  6264  02DE  0086               	movwf	6
  6265  02DF  3001               	movlw	1	; select bank2/3
  6266  02E0  0087               	movwf	7
  6267  02E1  3001               	movlw	1
  6268  02E2  0781               	addwf	1,f
  6269  02E3  3141               	addfsr 1,1
  6270  02E4  1803               	skipnc
  6271  02E5  0A81               	incf	1,f
  6272                           
  6273                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6274  02E6  086D               	movf	_Sw,w
  6275  02E7  3E07               	addlw	7
  6276  02E8  0086               	movwf	6
  6277  02E9  3001               	movlw	1	; select bank2/3
  6278  02EA  0087               	movwf	7
  6279  02EB  3F40               	moviw [0]fsr1
  6280  02EC  00AB               	movwf	??_setSw_Main
  6281  02ED  3F41               	moviw [1]fsr1
  6282  02EE  00AC               	movwf	??_setSw_Main+1
  6283  02EF  3000               	movlw	0
  6284  02F0  022C               	subwf	??_setSw_Main+1,w
  6285  02F1  3096               	movlw	150
  6286  02F2  1903               	skipnz
  6287  02F3  022B               	subwf	??_setSw_Main,w
  6288  02F4  1C03               	skipc
  6289  02F5  0008               	return
  6290                           
  6291                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6292  02F6  086D               	movf	_Sw,w
  6293  02F7  3E07               	addlw	7
  6294  02F8  0086               	movwf	6
  6295  02F9  3001               	movlw	1	; select bank2/3
  6296  02FA  0087               	movwf	7
  6297  02FB  3000               	movlw	0
  6298  02FC  3FC0               	movwi [0]fsr1
  6299  02FD  3FC1               	movwi [1]fsr1
  6300                           
  6301                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6302  02FE  086D               	movf	_Sw,w
  6303  02FF  0086               	movwf	6
  6304  0300  3001               	movlw	1	; select bank2/3
  6305  0301  0087               	movwf	7
  6306  0302  1681               	bsf	1,5
  6307                           
  6308                           ;Switch_B1.c: 188: setRF_Learn(0);
  6309  0303  3000               	movlw	0
  6310  0304  319A  2209         	fcall	_setRF_Learn
  6311                           
  6312                           ;Switch_B1.c: 191: }
  6313                           ;Switch_B1.c: 192: }
  6314                           ;Switch_B1.c: 193: }
  6315                           ;Switch_B1.c: 195: }
  6316                           ;Switch_B1.c: 196: }
  6317                           ;Switch_B1.c: 197: } else {
  6318  0306  0008               	return
  6319  0307                     l10829:	
  6320                           
  6321                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6322  0307  0020               	movlb	0	; select bank0
  6323  0308  086D               	movf	_Sw,w
  6324  0309  0086               	movwf	6
  6325  030A  3001               	movlw	1	; select bank2/3
  6326  030B  0087               	movwf	7
  6327  030C  1D01               	btfss	1,2
  6328  030D  0008               	return
  6329                           
  6330                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6331  030E  3001               	movlw	1
  6332  030F  00AB               	movwf	??_setSw_Main
  6333  0310  086D               	movf	_Sw,w
  6334  0311  3E02               	addlw	2
  6335  0312  0086               	movwf	6
  6336  0313  3001               	movlw	1	; select bank2/3
  6337  0314  0087               	movwf	7
  6338  0315  082B               	movf	??_setSw_Main,w
  6339  0316  0781               	addwf	1,f
  6340                           
  6341                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6342  0317  086D               	movf	_Sw,w
  6343  0318  3E02               	addlw	2
  6344  0319  0086               	movwf	6
  6345  031A  3001               	movlw	1	; select bank2/3
  6346  031B  0087               	movwf	7
  6347  031C  3005               	movlw	5
  6348  031D  0201               	subwf	1,w
  6349  031E  1C03               	skipc
  6350  031F  0008               	return
  6351                           
  6352                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6353  0320  086D               	movf	_Sw,w
  6354  0321  3E02               	addlw	2
  6355  0322  0086               	movwf	6
  6356  0323  3001               	movlw	1	; select bank2/3
  6357  0324  0087               	movwf	7
  6358  0325  0181               	clrf	1
  6359                           
  6360                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6361  0326  086D               	movf	_Sw,w
  6362  0327  0086               	movwf	6
  6363  0328  3001               	movlw	1	; select bank2/3
  6364  0329  0087               	movwf	7
  6365  032A  1101               	bcf	1,2
  6366                           
  6367                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6368  032B  086D               	movf	_Sw,w
  6369  032C  3E03               	addlw	3
  6370  032D  0086               	movwf	6
  6371  032E  3001               	movlw	1	; select bank2/3
  6372  032F  0087               	movwf	7
  6373  0330  3000               	movlw	0
  6374  0331  3FC0               	movwi [0]fsr1
  6375  0332  3FC1               	movwi [1]fsr1
  6376                           
  6377                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6378  0333  086D               	movf	_Sw,w
  6379  0334  0086               	movwf	6
  6380  0335  3001               	movlw	1	; select bank2/3
  6381  0336  0087               	movwf	7
  6382  0337  1181               	bcf	1,3
  6383                           
  6384                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6385  0338  086D               	movf	_Sw,w
  6386  0339  0086               	movwf	6
  6387  033A  3001               	movlw	1	; select bank2/3
  6388  033B  0087               	movwf	7
  6389  033C  1201               	bcf	1,4
  6390                           
  6391                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6392  033D  086D               	movf	_Sw,w
  6393  033E  0086               	movwf	6
  6394  033F  3001               	movlw	1	; select bank2/3
  6395  0340  0087               	movwf	7
  6396  0341  1281               	bcf	1,5
  6397                           
  6398                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6399  0342  086D               	movf	_Sw,w
  6400  0343  3E05               	addlw	5
  6401  0344  0086               	movwf	6
  6402  0345  3001               	movlw	1	; select bank2/3
  6403  0346  0087               	movwf	7
  6404  0347  3000               	movlw	0
  6405  0348  3FC0               	movwi [0]fsr1
  6406  0349  3FC1               	movwi [1]fsr1
  6407                           
  6408                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6409  034A  086D               	movf	_Sw,w
  6410  034B  3E07               	addlw	7
  6411  034C  0086               	movwf	6
  6412  034D  3001               	movlw	1	; select bank2/3
  6413  034E  0087               	movwf	7
  6414  034F  3000               	movlw	0
  6415  0350  3FC0               	movwi [0]fsr1
  6416  0351  3FC1               	movwi [1]fsr1
  6417                           
  6418                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6419  0352  082D               	movf	setSw_Main@sw,w
  6420  0353  3191  2122  3181   	fcall	_setDimmerLights_SwOff
  6421                           
  6422                           ;Switch_B1.c: 220: setRF_Learn(0);
  6423  0356  3000               	movlw	0
  6424  0357  319A  2209         	fcall	_setRF_Learn
  6425                           
  6426                           ;Switch_B1.c: 222: }
  6427                           ;Switch_B1.c: 223: }
  6428                           ;Switch_B1.c: 224: }
  6429                           ;Switch_B1.c: 225: } else {
  6430  0359  0008               	return
  6431  035A                     l2899:	
  6432                           
  6433                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6434  035A  0021               	movlb	1	; select bank1
  6435  035B  1C4F               	btfss	_myMain^(0+128),0
  6436  035C  0008               	return
  6437                           
  6438                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6439  035D  0020               	movlb	0	; select bank0
  6440  035E  086D               	movf	_Sw,w
  6441  035F  0086               	movwf	6
  6442  0360  3001               	movlw	1	; select bank2/3
  6443  0361  0087               	movwf	7
  6444  0362  1401               	bsf	1,0
  6445  0363  0008               	return
  6446  0364                     __end_of_setSw_Main:	
  6447                           
  6448                           	psect	text17
  6449  1A09                     __ptext17:	
  6450 ;; *************** function _setRF_Learn *****************
  6451 ;; Defined at:
  6452 ;;		line 33 in file "../src/RF_Control_B1.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  command         1    wreg     unsigned char 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;  command         1    3[COMMON] unsigned char 
  6457 ;; Return value:  Size  Location     Type
  6458 ;;		None               void
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;Total ram usage:        2 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; Hardware stack levels required when called:    3
  6473 ;; This function calls:
  6474 ;;		Nothing
  6475 ;; This function is called by:
  6476 ;;		_setSw_Main
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           
  6481                           ;psect for function _setRF_Learn
  6482  1A09                     _setRF_Learn:	
  6483                           
  6484                           ;incstack = 0
  6485                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6486                           ;setRF_Learn@command stored from wreg
  6487  1A09  00F3               	movwf	setRF_Learn@command
  6488                           
  6489                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6490  1A0A  0873               	movf	setRF_Learn@command,w
  6491  1A0B  3A01               	xorlw	1
  6492  1A0C  3000               	movlw	0
  6493  1A0D  1903               	skipnz
  6494  1A0E  3001               	movlw	1
  6495  1A0F  00F2               	movwf	??_setRF_Learn
  6496  1A10  0EF2               	swapf	??_setRF_Learn,f
  6497  1A11  0DF2               	rlf	??_setRF_Learn,f
  6498  1A12  0DF2               	rlf	??_setRF_Learn,f
  6499  1A13  0021               	movlb	1	; select bank1
  6500  1A14  0840               	movf	_RF1^(0+128),w
  6501  1A15  0672               	xorwf	??_setRF_Learn,w
  6502  1A16  39BF               	andlw	-65
  6503  1A17  0672               	xorwf	??_setRF_Learn,w
  6504  1A18  00C0               	movwf	_RF1^(0+128)
  6505  1A19  0008               	return
  6506  1A1A                     __end_of_setRF_Learn:	
  6507                           
  6508                           	psect	text18
  6509  1D99                     __ptext18:	
  6510 ;; *************** function _setDimmerLights_DimmingOn *****************
  6511 ;; Defined at:
  6512 ;;		line 846 in file "../src/Dimmer_B1.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  sw              1    wreg     unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  sw              1    4[COMMON] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        1 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    4
  6533 ;; This function calls:
  6534 ;;		_DimmerLights_SelectPointer
  6535 ;; This function is called by:
  6536 ;;		_setSw_Main
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _setDimmerLights_DimmingOn
  6542  1D99                     _setDimmerLights_DimmingOn:	
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6546                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6547  1D99  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6548                           
  6549                           ;Dimmer_B1.c: 852: DimmerLights_SelectPointer(sw);
  6550  1D9A  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6551  1D9B  319A  2255  319D   	fcall	_DimmerLights_SelectPointer
  6552                           
  6553                           ;Dimmer_B1.c: 853: if (DimmerLights->Trigger == 0) {
  6554  1D9E  0020               	movlb	0	; select bank0
  6555  1D9F  086C               	movf	_DimmerLights,w
  6556  1DA0  0086               	movwf	6
  6557  1DA1  3001               	movlw	1	; select bank2/3
  6558  1DA2  0087               	movwf	7
  6559  1DA3  1881               	btfsc	1,1
  6560  1DA4  0008               	return
  6561                           
  6562                           ;Dimmer_B1.c: 854: if (DimmerLights->SwFlag == 1) {
  6563  1DA5  086C               	movf	_DimmerLights,w
  6564  1DA6  0086               	movwf	6
  6565  1DA7  3001               	movlw	1	; select bank2/3
  6566  1DA8  0087               	movwf	7
  6567  1DA9  1C01               	btfss	1,0
  6568  1DAA  0008               	return
  6569                           
  6570                           ;Dimmer_B1.c: 855: DimmerLights->Status = 1;
  6571  1DAB  0A6C               	incf	_DimmerLights,w
  6572  1DAC  0086               	movwf	6
  6573  1DAD  3001               	movlw	1	; select bank2/3
  6574  1DAE  0087               	movwf	7
  6575  1DAF  1401               	bsf	1,0
  6576                           
  6577                           ;Dimmer_B1.c: 857: DimmerLights->DimmingSwFlag = 1;
  6578  1DB0  086C               	movf	_DimmerLights,w
  6579  1DB1  0086               	movwf	6
  6580  1DB2  3001               	movlw	1	; select bank2/3
  6581  1DB3  0087               	movwf	7
  6582  1DB4  1581               	bsf	1,3
  6583                           
  6584                           ;Dimmer_B1.c: 858: DimmerLights->DimmingTrigger = 1;
  6585  1DB5  086C               	movf	_DimmerLights,w
  6586  1DB6  0086               	movwf	6
  6587  1DB7  3001               	movlw	1	; select bank2/3
  6588  1DB8  0087               	movwf	7
  6589  1DB9  1601               	bsf	1,4
  6590                           
  6591                           ;Dimmer_B1.c: 859: DimmerLights->DimmingSwitch = 1;
  6592  1DBA  086C               	movf	_DimmerLights,w
  6593  1DBB  0086               	movwf	6
  6594  1DBC  3001               	movlw	1	; select bank2/3
  6595  1DBD  0087               	movwf	7
  6596  1DBE  1681               	bsf	1,5
  6597  1DBF  0008               	return
  6598  1DC0                     __end_of_setDimmerLights_DimmingOn:	
  6599                           
  6600                           	psect	text19
  6601  1B2C                     __ptext19:	
  6602 ;; *************** function _getSw_KeyStatus *****************
  6603 ;; Defined at:
  6604 ;;		line 238 in file "../src/Switch_B1.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  sw              1    wreg     unsigned char 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  sw              1    3[COMMON] unsigned char 
  6609 ;;  status          1    2[COMMON] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      unsigned char 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;Total ram usage:        2 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    3
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_setSw_Main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function _getSw_KeyStatus
  6635  1B2C                     _getSw_KeyStatus:	
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6639                           ;getSw_KeyStatus@sw stored from wreg
  6640  1B2C  00F3               	movwf	getSw_KeyStatus@sw
  6641                           
  6642                           ;Switch_B1.c: 239: char status = 0;
  6643  1B2D  01F2               	clrf	getSw_KeyStatus@status
  6644                           
  6645                           ;Switch_B1.c: 259: if (sw == 1) {
  6646  1B2E  0873               	movf	getSw_KeyStatus@sw,w
  6647  1B2F  3A01               	xorlw	1
  6648  1B30  1D03               	skipz
  6649  1B31  2B38               	goto	l8099
  6650                           
  6651                           ;Switch_B1.c: 260: status = RA6 == 1 ? 1 : 0;
  6652  1B32  3000               	movlw	0
  6653  1B33  0020               	movlb	0	; select bank0
  6654  1B34  1B0C               	btfsc	12,6	;volatile
  6655  1B35  3001               	movlw	1
  6656  1B36  00F2               	movwf	getSw_KeyStatus@status
  6657                           
  6658                           ;Switch_B1.c: 261: } else if (sw == 2) {
  6659  1B37  2B41               	goto	l8103
  6660  1B38                     l8099:	
  6661  1B38  0873               	movf	getSw_KeyStatus@sw,w
  6662  1B39  3A02               	xorlw	2
  6663  1B3A  1D03               	skipz
  6664  1B3B  2B41               	goto	l8103
  6665                           
  6666                           ;Switch_B1.c: 262: status = RA0 == 1 ? 1 : 0;
  6667  1B3C  3000               	movlw	0
  6668  1B3D  0020               	movlb	0	; select bank0
  6669  1B3E  180C               	btfsc	12,0	;volatile
  6670  1B3F  3001               	movlw	1
  6671  1B40  00F2               	movwf	getSw_KeyStatus@status
  6672  1B41                     l8103:	
  6673                           
  6674                           ;Switch_B1.c: 263: }
  6675                           ;Switch_B1.c: 283: return status;
  6676  1B41  0872               	movf	getSw_KeyStatus@status,w
  6677  1B42  0008               	return
  6678  1B43                     __end_of_getSw_KeyStatus:	
  6679                           
  6680                           	psect	text20
  6681  1ABE                     __ptext20:	
  6682 ;; *************** function _SwPointSelect *****************
  6683 ;; Defined at:
  6684 ;;		line 25 in file "../src/Switch_B1.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  sw              1    wreg     unsigned char 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  sw              1    3[COMMON] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;		None               void
  6691 ;; Registers used:
  6692 ;;		wreg
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;Total ram usage:        2 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; Hardware stack levels required when called:    3
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_setSw_Main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           
  6713                           ;psect for function _SwPointSelect
  6714  1ABE                     _SwPointSelect:	
  6715                           
  6716                           ;incstack = 0
  6717                           ; Regs used in _SwPointSelect: [wreg]
  6718                           ;SwPointSelect@sw stored from wreg
  6719  1ABE  00F3               	movwf	SwPointSelect@sw
  6720                           
  6721                           ;Switch_B1.c: 28: if (sw == 1) {
  6722  1ABF  0873               	movf	SwPointSelect@sw,w
  6723  1AC0  3A01               	xorlw	1
  6724  1AC1  1D03               	skipz
  6725  1AC2  2AC9               	goto	l8089
  6726                           
  6727                           ;Switch_B1.c: 29: Sw = &Sw1;
  6728  1AC3  30D0               	movlw	_Sw1& (0+255)
  6729  1AC4  00F2               	movwf	??_SwPointSelect
  6730  1AC5  0872               	movf	??_SwPointSelect,w
  6731  1AC6  0020               	movlb	0	; select bank0
  6732  1AC7  00ED               	movwf	_Sw
  6733                           
  6734                           ;Switch_B1.c: 30: }
  6735  1AC8  0008               	return
  6736  1AC9                     l8089:	
  6737                           
  6738                           ;Switch_B1.c: 33: else if (sw == 2) {
  6739  1AC9  0873               	movf	SwPointSelect@sw,w
  6740  1ACA  3A02               	xorlw	2
  6741  1ACB  1D03               	skipz
  6742  1ACC  0008               	return
  6743                           
  6744                           ;Switch_B1.c: 34: Sw = &Sw2;
  6745  1ACD  30D9               	movlw	_Sw2& (0+255)
  6746  1ACE  00F2               	movwf	??_SwPointSelect
  6747  1ACF  0872               	movf	??_SwPointSelect,w
  6748  1AD0  0020               	movlb	0	; select bank0
  6749  1AD1  00ED               	movwf	_Sw
  6750  1AD2  0008               	return
  6751  1AD3                     __end_of_SwPointSelect:	
  6752                           
  6753                           	psect	text21
  6754  1857                     __ptext21:	
  6755 ;; *************** function _Switch_Initialization *****************
  6756 ;; Defined at:
  6757 ;;		line 46 in file "../src/Switch_B1.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;		None
  6760 ;; Auto vars:     Size  Location     Type
  6761 ;;		None
  6762 ;; Return value:  Size  Location     Type
  6763 ;;		None               void
  6764 ;; Registers used:
  6765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6766 ;; Tracked objects:
  6767 ;;		On entry : 0/0
  6768 ;;		On exit  : 0/0
  6769 ;;		Unchanged: 0/0
  6770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;Total ram usage:        0 bytes
  6776 ;; Hardware stack levels used:    1
  6777 ;; Hardware stack levels required when called:    6
  6778 ;; This function calls:
  6779 ;;		_setSw_Initialization
  6780 ;; This function is called by:
  6781 ;;		_main
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           
  6786                           ;psect for function _Switch_Initialization
  6787  1857                     _Switch_Initialization:	
  6788                           
  6789                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6790                           
  6791                           ;incstack = 0
  6792                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6793  1857  3001               	movlw	1
  6794  1858  3198  2038  3198   	fcall	_setSw_Initialization
  6795                           
  6796                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6797  185B  3002               	movlw	2
  6798  185C  3198  2038         	fcall	_setSw_Initialization
  6799  185E  0008               	return
  6800  185F                     __end_of_Switch_Initialization:	
  6801                           
  6802                           	psect	text22
  6803  1838                     __ptext22:	
  6804 ;; *************** function _setSw_Initialization *****************
  6805 ;; Defined at:
  6806 ;;		line 66 in file "../src/Switch_B1.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  sw              1    wreg     unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  sw              1    6[COMMON] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;		None               void
  6813 ;; Registers used:
  6814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;Total ram usage:        1 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:    5
  6827 ;; This function calls:
  6828 ;;		_setLED
  6829 ;; This function is called by:
  6830 ;;		_Switch_Initialization
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           
  6835                           ;psect for function _setSw_Initialization
  6836  1838                     _setSw_Initialization:	
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6840                           ;setSw_Initialization@sw stored from wreg
  6841  1838  00F6               	movwf	setSw_Initialization@sw
  6842                           
  6843                           ;Switch_B1.c: 68: setLED(sw, 1);
  6844  1839  01F4               	clrf	setLED@command
  6845  183A  0AF4               	incf	setLED@command,f
  6846  183B  0876               	movf	setSw_Initialization@sw,w
  6847  183C  3194  24ED         	fcall	_setLED
  6848  183E  0008               	return
  6849  183F                     __end_of_setSw_Initialization:	
  6850                           
  6851                           	psect	text23
  6852  27E2                     __ptext23:	
  6853 ;; *************** function _RF_Main *****************
  6854 ;; Defined at:
  6855 ;;		line 26 in file "../src/RF_Control_B1.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;		None               void
  6862 ;; Registers used:
  6863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 0/0
  6866 ;;		On exit  : 0/0
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;Total ram usage:        0 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:   10
  6876 ;; This function calls:
  6877 ;;		_setRF_Main
  6878 ;; This function is called by:
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           
  6884                           ;psect for function _RF_Main
  6885  27E2                     _RF_Main:	
  6886                           
  6887                           ;RF_Control_B1.c: 28: setRF_Main();
  6888                           
  6889                           ;incstack = 0
  6890                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6891  27E2  3186  26C5         	fcall	_setRF_Main
  6892  27E4  0008               	return
  6893  27E5                     __end_of_RF_Main:	
  6894                           
  6895                           	psect	text24
  6896  06C5                     __ptext24:	
  6897 ;; *************** function _setRF_Main *****************
  6898 ;; Defined at:
  6899 ;;		line 53 in file "../src/RF_Control_B1.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;		None
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  error           1   75[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;		None               void
  6906 ;; Registers used:
  6907 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;Total ram usage:        2 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    9
  6920 ;; This function calls:
  6921 ;;		_CC2500_PowerOnInitial
  6922 ;;		_CC2500_RxData
  6923 ;;		_CC2500_TxData
  6924 ;;		_CC2500_WriteCommand
  6925 ;;		_RF_RxDisable
  6926 ;;		___lwdiv
  6927 ;;		_getBuz_GO
  6928 ;;		_getRF_KeyStatus
  6929 ;;		_getRxData
  6930 ;;		_setData
  6931 ;; This function is called by:
  6932 ;;		_RF_Main
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function _setRF_Main
  6938  06C5                     _setRF_Main:	
  6939                           
  6940                           ;RF_Control_B1.c: 54: char error = 0;
  6941                           
  6942                           ;incstack = 0
  6943                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6944  06C5  0020               	movlb	0	; select bank0
  6945  06C6  01EB               	clrf	setRF_Main@error
  6946                           
  6947                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6948  06C7  0021               	movlb	1	; select bank1
  6949  06C8  1C40               	btfss	_RF1^(0+128),0
  6950  06C9  2F80               	goto	l2475
  6951                           
  6952                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6953  06CA  3199  21B7  3186   	fcall	_getBuz_GO
  6954  06CD  0873               	movf	?_getBuz_GO+1,w
  6955  06CE  0472               	iorwf	?_getBuz_GO,w
  6956  06CF  1D03               	skipz
  6957  06D0  2F65               	goto	l10749
  6958                           
  6959                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6960  06D1  3199  2110  3186   	fcall	_getRF_KeyStatus
  6961  06D4  3A01               	xorlw	1
  6962  06D5  3000               	movlw	0
  6963  06D6  1903               	skipnz
  6964  06D7  3001               	movlw	1
  6965  06D8  0020               	movlb	0	; select bank0
  6966  06D9  00EA               	movwf	??_setRF_Main
  6967  06DA  0CEA               	rrf	??_setRF_Main,f
  6968  06DB  0CEA               	rrf	??_setRF_Main,f
  6969  06DC  0021               	movlb	1	; select bank1
  6970  06DD  0840               	movf	_RF1^(0+128),w
  6971  06DE  0020               	movlb	0	; select bank0
  6972  06DF  066A               	xorwf	??_setRF_Main,w
  6973  06E0  397F               	andlw	-129
  6974  06E1  066A               	xorwf	??_setRF_Main,w
  6975  06E2  0021               	movlb	1	; select bank1
  6976  06E3  00C0               	movwf	_RF1^(0+128)
  6977                           
  6978                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6979  06E4  1FC0               	btfss	_RF1^(0+128),7
  6980  06E5  2EE8               	goto	l2479
  6981  06E6  1F40               	btfss	_RF1^(0+128),6
  6982  06E7  2F65               	goto	l10749
  6983  06E8                     l2479:	
  6984                           
  6985                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6986  06E8  1D40               	btfss	_RF1^(0+128),2
  6987  06E9  2F2C               	goto	l2480
  6988                           
  6989                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6990  06EA  1B40               	btfsc	_RF1^(0+128),6
  6991  06EB  2F27               	goto	l10721
  6992                           
  6993                           ;RF_Control_B1.c: 68: RF1.Count++;
  6994  06EC  3001               	movlw	1
  6995  06ED  07C3               	addwf	(_RF1^(0+128)+3),f
  6996  06EE  3000               	movlw	0
  6997  06EF  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  6998                           
  6999                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7000  06F0  3014               	movlw	20
  7001  06F1  00F2               	movwf	___lwdiv@divisor
  7002  06F2  3000               	movlw	0
  7003  06F3  00F3               	movwf	___lwdiv@divisor+1
  7004  06F4  0849               	movf	((_RF1+1)^(0+128)+8),w
  7005  06F5  01F5               	clrf	___lwdiv@dividend+1
  7006  06F6  07F5               	addwf	___lwdiv@dividend+1,f
  7007  06F7  0848               	movf	(_RF1^(0+128)+8),w
  7008  06F8  01F4               	clrf	___lwdiv@dividend
  7009  06F9  07F4               	addwf	___lwdiv@dividend,f
  7010  06FA  319F  275D  3186   	fcall	___lwdiv
  7011  06FD  0873               	movf	?___lwdiv+1,w
  7012  06FE  0021               	movlb	1	; select bank1
  7013  06FF  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7014  0700  1D03               	skipz
  7015  0701  2F04               	goto	u11965
  7016  0702  0872               	movf	?___lwdiv,w
  7017  0703  0243               	subwf	(_RF1^(0+128)+3),w
  7018  0704                     u11965:	
  7019  0704  1C03               	skipc
  7020  0705  2F65               	goto	l10749
  7021                           
  7022                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7023  0706  3014               	movlw	20
  7024  0707  00F2               	movwf	___lwdiv@divisor
  7025  0708  3000               	movlw	0
  7026  0709  00F3               	movwf	___lwdiv@divisor+1
  7027  070A  0849               	movf	((_RF1+1)^(0+128)+8),w
  7028  070B  01F5               	clrf	___lwdiv@dividend+1
  7029  070C  07F5               	addwf	___lwdiv@dividend+1,f
  7030  070D  0848               	movf	(_RF1^(0+128)+8),w
  7031  070E  01F4               	clrf	___lwdiv@dividend
  7032  070F  07F4               	addwf	___lwdiv@dividend,f
  7033  0710  319F  275D  3186   	fcall	___lwdiv
  7034  0713  0873               	movf	?___lwdiv+1,w
  7035  0714  0021               	movlb	1	; select bank1
  7036  0715  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7037  0716  07C4               	addwf	((_RF1+1)^(0+128)+3),f
  7038  0717  0872               	movf	?___lwdiv,w
  7039  0718  01C3               	clrf	(_RF1^(0+128)+3)
  7040  0719  07C3               	addwf	(_RF1^(0+128)+3),f
  7041                           
  7042                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7043  071A  1140               	bcf	_RF1^(0+128),2
  7044                           
  7045                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7046  071B  01CB               	clrf	(_RF1^(0+128)+11)
  7047  071C  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7048                           
  7049                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7050  071D  3198  204F  3186   	fcall	_RF_RxDisable
  7051                           
  7052                           ;RF_Control_B1.c: 75: setData();
  7053  0720  3192  2262  3186   	fcall	_setData
  7054                           
  7055                           ;RF_Control_B1.c: 76: CC2500_TxData();
  7056  0723  3188  2091  3186   	fcall	_CC2500_TxData
  7057                           
  7058                           ;RF_Control_B1.c: 78: }
  7059                           ;RF_Control_B1.c: 79: } else {
  7060  0726  2F65               	goto	l10749
  7061  0727                     l10721:	
  7062                           
  7063                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  7064  0727  0021               	movlb	1	; select bank1
  7065  0728  01C3               	clrf	(_RF1^(0+128)+3)
  7066  0729  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7067                           
  7068                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  7069  072A  1140               	bcf	_RF1^(0+128),2
  7070                           
  7071                           ;RF_Control_B1.c: 82: }
  7072                           ;RF_Control_B1.c: 83: } else {
  7073  072B  2F65               	goto	l10749
  7074  072C                     l2480:	
  7075                           
  7076                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  7077  072C  1DC0               	btfss	_RF1^(0+128),3
  7078  072D  2F3B               	goto	l10735
  7079                           
  7080                           ;RF_Control_B1.c: 86: CC2500_RxData();
  7081  072E  3196  260B  3186   	fcall	_CC2500_RxData
  7082                           
  7083                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  7084  0731  0021               	movlb	1	; select bank1
  7085  0732  1CC0               	btfss	_RF1^(0+128),1
  7086  0733  2F65               	goto	l10749
  7087                           
  7088                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  7089  0734  10C0               	bcf	_RF1^(0+128),1
  7090                           
  7091                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  7092  0735  01CB               	clrf	(_RF1^(0+128)+11)
  7093  0736  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7094                           
  7095                           ;RF_Control_B1.c: 98: getRxData();
  7096  0737  3195  254C  3186   	fcall	_getRxData
  7097                           
  7098                           ;RF_Control_B1.c: 101: }
  7099                           ;RF_Control_B1.c: 102: } else {
  7100  073A  2F65               	goto	l10749
  7101  073B                     l10735:	
  7102                           
  7103                           ;RF_Control_B1.c: 103: RF1.Count++;
  7104  073B  3001               	movlw	1
  7105  073C  0021               	movlb	1	; select bank1
  7106  073D  07C3               	addwf	(_RF1^(0+128)+3),f
  7107  073E  3000               	movlw	0
  7108  073F  3DC4               	addwfc	((_RF1+1)^(0+128)+3),f
  7109                           
  7110                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  7111  0740  3014               	movlw	20
  7112  0741  00F2               	movwf	___lwdiv@divisor
  7113  0742  3000               	movlw	0
  7114  0743  00F3               	movwf	___lwdiv@divisor+1
  7115  0744  0849               	movf	((_RF1+1)^(0+128)+8),w
  7116  0745  01F5               	clrf	___lwdiv@dividend+1
  7117  0746  07F5               	addwf	___lwdiv@dividend+1,f
  7118  0747  0848               	movf	(_RF1^(0+128)+8),w
  7119  0748  01F4               	clrf	___lwdiv@dividend
  7120  0749  07F4               	addwf	___lwdiv@dividend,f
  7121  074A  319F  275D  3186   	fcall	___lwdiv
  7122  074D  0873               	movf	?___lwdiv+1,w
  7123  074E  0021               	movlb	1	; select bank1
  7124  074F  0244               	subwf	((_RF1+1)^(0+128)+3),w
  7125  0750  1D03               	skipz
  7126  0751  2F54               	goto	u11995
  7127  0752  0872               	movf	?___lwdiv,w
  7128  0753  0243               	subwf	(_RF1^(0+128)+3),w
  7129  0754                     u11995:	
  7130  0754  1C03               	skipc
  7131  0755  2F65               	goto	l10749
  7132                           
  7133                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  7134  0756  01C3               	clrf	(_RF1^(0+128)+3)
  7135  0757  01C4               	clrf	((_RF1+1)^(0+128)+3)
  7136                           
  7137                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  7138  0758  15C0               	bsf	_RF1^(0+128),3
  7139                           
  7140                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  7141  0759  3036               	movlw	54
  7142  075A  319B  2373  3186   	fcall	_CC2500_WriteCommand
  7143                           
  7144                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  7145  075D  303A               	movlw	58
  7146  075E  319B  2373  3186   	fcall	_CC2500_WriteCommand
  7147                           
  7148                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  7149  0761  3034               	movlw	52
  7150  0762  319B  2373  3186   	fcall	_CC2500_WriteCommand
  7151  0765                     l10749:	
  7152                           
  7153                           ;RF_Control_B1.c: 112: }
  7154                           ;RF_Control_B1.c: 113: }
  7155                           ;RF_Control_B1.c: 114: }
  7156                           ;RF_Control_B1.c: 115: }
  7157                           ;RF_Control_B1.c: 116: }
  7158                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  7159  0765  3001               	movlw	1
  7160  0766  0021               	movlb	1	; select bank1
  7161  0767  07CB               	addwf	(_RF1^(0+128)+11),f
  7162  0768  3000               	movlw	0
  7163  0769  3DCC               	addwfc	((_RF1+1)^(0+128)+11),f
  7164                           
  7165                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  7166  076A  300B               	movlw	11
  7167  076B  024C               	subwf	((_RF1+1)^(0+128)+11),w
  7168  076C  30B9               	movlw	185
  7169  076D  1903               	skipnz
  7170  076E  024B               	subwf	(_RF1^(0+128)+11),w
  7171  076F  1C03               	skipc
  7172  0770  2F79               	goto	l10761
  7173                           
  7174                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  7175  0771  01CB               	clrf	(_RF1^(0+128)+11)
  7176  0772  01CC               	clrf	((_RF1+1)^(0+128)+11)
  7177                           
  7178                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  7179  0773  11C0               	bcf	_RF1^(0+128),3
  7180                           
  7181                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  7182  0774  10C0               	bcf	_RF1^(0+128),1
  7183                           
  7184                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  7185  0775  3036               	movlw	54
  7186  0776  319B  2373  3186   	fcall	_CC2500_WriteCommand
  7187  0779                     l10761:	
  7188                           
  7189                           ;RF_Control_B1.c: 126: }
  7190                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  7191  0779  0021               	movlb	1	; select bank1
  7192  077A  1F41               	btfss	(_RF1^(0+128)+1),6
  7193  077B  0008               	return
  7194                           
  7195                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  7196  077C  1341               	bcf	(_RF1^(0+128)+1),6
  7197                           
  7198                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  7199  077D  319A  22A9         	fcall	_CC2500_PowerOnInitial
  7200                           
  7201                           ;RF_Control_B1.c: 131: }
  7202                           ;RF_Control_B1.c: 133: } else {
  7203  077F  0008               	return
  7204  0780                     l2475:	
  7205                           
  7206                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  7207  0780  1C4F               	btfss	_myMain^(0+128),0
  7208  0781  0008               	return
  7209                           
  7210                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  7211  0782  1440               	bsf	_RF1^(0+128),0
  7212  0783  0008               	return
  7213  0784                     __end_of_setRF_Main:	
  7214                           
  7215                           	psect	text25
  7216  1262                     __ptext25:	
  7217 ;; *************** function _setData *****************
  7218 ;; Defined at:
  7219 ;;		line 188 in file "../src/RF_Control_B1.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;		None
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;		None
  7224 ;; Return value:  Size  Location     Type
  7225 ;;		None               void
  7226 ;; Registers used:
  7227 ;;		wreg, fsr1l, fsr1h, status,2
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        1 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    3
  7240 ;; This function calls:
  7241 ;;		Nothing
  7242 ;; This function is called by:
  7243 ;;		_setRF_Main
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setData
  7249  1262                     _setData:	
  7250                           
  7251                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  7252                           
  7253                           ;incstack = 0
  7254                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  7255  1262  3063               	movlw	99
  7256  1263  00F2               	movwf	??_setData
  7257  1264  0872               	movf	??_setData,w
  7258  1265  0023               	movlb	3	; select bank3
  7259  1266  00A0               	movwf	_RF_Data^(0+384)
  7260                           
  7261                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  7262  1267  3002               	movlw	2
  7263  1268  00F2               	movwf	??_setData
  7264  1269  0872               	movf	??_setData,w
  7265  126A  00A1               	movwf	(_RF_Data^(0+384)+1)
  7266                           
  7267                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  7268  126B  01A2               	clrf	(_RF_Data^(0+384)+2)
  7269                           
  7270                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  7271  126C  01A3               	clrf	(_RF_Data^(0+384)+3)
  7272                           
  7273                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  7274  126D  01A4               	clrf	(_RF_Data^(0+384)+4)
  7275                           
  7276                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  7277  126E  01A5               	clrf	(_RF_Data^(0+384)+5)
  7278                           
  7279                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  7280  126F  01A6               	clrf	(_RF_Data^(0+384)+6)
  7281                           
  7282                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  7283  1270  01A7               	clrf	(_RF_Data^(0+384)+7)
  7284                           
  7285                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  7286  1271  01A8               	clrf	(_RF_Data^(0+384)+8)
  7287                           
  7288                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  7289  1272  087B               	movf	_product,w
  7290  1273  0086               	movwf	6
  7291  1274  3002               	movlw	2	; select bank4/5
  7292  1275  0087               	movwf	7
  7293  1276  3002               	movlw	2	; select bank4/5
  7294  1277  3F49               	moviw [9]fsr1
  7295  1278  00A9               	movwf	(_RF_Data^(0+384)+9)
  7296                           
  7297                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  7298  1279  01AA               	clrf	(_RF_Data^(0+384)+10)
  7299                           
  7300                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  7301  127A  087B               	movf	_product,w
  7302  127B  0086               	movwf	6
  7303  127C  3002               	movlw	2	; select bank4/5
  7304  127D  0087               	movwf	7
  7305  127E  3002               	movlw	2	; select bank4/5
  7306  127F  3F4B               	moviw [11]fsr1
  7307  1280  00AB               	movwf	(_RF_Data^(0+384)+11)
  7308                           
  7309                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  7310  1281  087B               	movf	_product,w
  7311  1282  0086               	movwf	6
  7312  1283  3002               	movlw	2	; select bank4/5
  7313  1284  0087               	movwf	7
  7314  1285  3002               	movlw	2	; select bank4/5
  7315  1286  3F4C               	moviw [12]fsr1
  7316  1287  00AC               	movwf	(_RF_Data^(0+384)+12)
  7317                           
  7318                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  7319  1288  087B               	movf	_product,w
  7320  1289  0086               	movwf	6
  7321  128A  3002               	movlw	2	; select bank4/5
  7322  128B  0087               	movwf	7
  7323  128C  3002               	movlw	2	; select bank4/5
  7324  128D  3F4D               	moviw [13]fsr1
  7325  128E  00AD               	movwf	(_RF_Data^(0+384)+13)
  7326                           
  7327                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  7328  128F  087B               	movf	_product,w
  7329  1290  0086               	movwf	6
  7330  1291  3002               	movlw	2	; select bank4/5
  7331  1292  0087               	movwf	7
  7332  1293  3002               	movlw	2	; select bank4/5
  7333  1294  3F4E               	moviw [14]fsr1
  7334  1295  00AE               	movwf	(_RF_Data^(0+384)+14)
  7335                           
  7336                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  7337  1296  087B               	movf	_product,w
  7338  1297  0086               	movwf	6
  7339  1298  3002               	movlw	2	; select bank4/5
  7340  1299  0087               	movwf	7
  7341  129A  3002               	movlw	2	; select bank4/5
  7342  129B  3F4F               	moviw [15]fsr1
  7343  129C  00AF               	movwf	(_RF_Data^(0+384)+15)
  7344                           
  7345                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  7346  129D  01B0               	clrf	(_RF_Data^(0+384)+16)
  7347                           
  7348                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  7349  129E  01B1               	clrf	(_RF_Data^(0+384)+17)
  7350                           
  7351                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  7352  129F  01B2               	clrf	(_RF_Data^(0+384)+18)
  7353                           
  7354                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  7355  12A0  01B3               	clrf	(_RF_Data^(0+384)+19)
  7356                           
  7357                           ;RF_Control_B1.c: 233: RF_Data[20] = 210;
  7358  12A1  30D2               	movlw	210
  7359  12A2  00F2               	movwf	??_setData
  7360  12A3  0872               	movf	??_setData,w
  7361  12A4  00B4               	movwf	(_RF_Data^(0+384)+20)
  7362  12A5  0008               	return
  7363  12A6                     __end_of_setData:	
  7364                           
  7365                           	psect	text26
  7366  154C                     __ptext26:	
  7367 ;; *************** function _getRxData *****************
  7368 ;; Defined at:
  7369 ;;		line 256 in file "../src/RF_Control_B1.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;		None
  7372 ;; Auto vars:     Size  Location     Type
  7373 ;;  error           1   73[BANK0 ] unsigned char 
  7374 ;; Return value:  Size  Location     Type
  7375 ;;		None               void
  7376 ;; Registers used:
  7377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;Total ram usage:        2 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; Hardware stack levels required when called:    8
  7390 ;; This function calls:
  7391 ;;		_getMain_All_Error_Status
  7392 ;;		_setControl_Lights_Table
  7393 ;;		_setLog_Code
  7394 ;;		_setTxData
  7395 ;; This function is called by:
  7396 ;;		_setRF_Main
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400                           
  7401                           ;psect for function _getRxData
  7402  154C                     _getRxData:	
  7403                           
  7404                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7405                           
  7406                           ;incstack = 0
  7407                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7408  154C  0023               	movlb	3	; select bank3
  7409  154D  0820               	movf	_RF_Data^(0+384),w
  7410  154E  3AAA               	xorlw	170
  7411  154F  1D03               	skipz
  7412  1550  2D62               	goto	l10351
  7413  1551  0821               	movf	(_RF_Data^(0+384)+1),w
  7414  1552  3A01               	xorlw	1
  7415  1553  1D03               	skipz
  7416  1554  2D62               	goto	l10351
  7417                           
  7418                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  7419  1555  3055               	movlw	85
  7420  1556  0020               	movlb	0	; select bank0
  7421  1557  00E8               	movwf	??_getRxData
  7422  1558  087B               	movf	_product,w
  7423  1559  3E02               	addlw	2
  7424  155A  0086               	movwf	6
  7425  155B  3002               	movlw	2	; select bank4/5
  7426  155C  0087               	movwf	7
  7427  155D  0868               	movf	??_getRxData,w
  7428  155E  0081               	movwf	1
  7429                           
  7430                           ;RF_Control_B1.c: 260: setTxData();
  7431  155F  3198  201C         	fcall	_setTxData
  7432                           
  7433                           ;RF_Control_B1.c: 264: } else {
  7434  1561  0008               	return
  7435  1562                     l10351:	
  7436                           
  7437                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  7438  1562  3000               	movlw	0
  7439  1563  319E  263C  3195   	fcall	_getMain_All_Error_Status
  7440  1566  0020               	movlb	0	; select bank0
  7441  1567  00E8               	movwf	??_getRxData
  7442  1568  0868               	movf	??_getRxData,w
  7443  1569  00E9               	movwf	getRxData@error
  7444                           
  7445                           ;RF_Control_B1.c: 266: if (error == 0) {
  7446  156A  08E9               	movf	getRxData@error,f
  7447  156B  1D03               	skipz
  7448  156C  2DA9               	goto	l2523
  7449                           
  7450                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  7451  156D  0021               	movlb	1	; select bank1
  7452  156E  1F40               	btfss	_RF1^(0+128),6
  7453  156F  2D7B               	goto	l10363
  7454                           
  7455                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7456  1570  0023               	movlb	3	; select bank3
  7457  1571  08A0               	movf	_RF_Data^(0+384),f
  7458  1572  1D03               	skipz
  7459  1573  0008               	return
  7460  1574  0821               	movf	(_RF_Data^(0+384)+1),w
  7461  1575  3A64               	xorlw	100
  7462  1576  1D03               	skipz
  7463  1577  0008               	return
  7464                           
  7465                           ;RF_Control_B1.c: 270: setLog_Code();
  7466  1578  319F  2729         	fcall	_setLog_Code
  7467                           
  7468                           ;RF_Control_B1.c: 271: }
  7469                           ;RF_Control_B1.c: 289: } else {
  7470  157A  0008               	return
  7471  157B                     l10363:	
  7472                           
  7473                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7474  157B  0023               	movlb	3	; select bank3
  7475  157C  0834               	movf	(_RF_Data^(0+384)+20),w
  7476  157D  3AD2               	xorlw	210
  7477  157E  1903               	skipnz
  7478  157F  2D84               	goto	l10367
  7479  1580  0834               	movf	(_RF_Data^(0+384)+20),w
  7480  1581  3A0A               	xorlw	10
  7481  1582  1D03               	skipz
  7482  1583  0008               	return
  7483  1584                     l10367:	
  7484                           
  7485                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7486  1584  08A0               	movf	_RF_Data^(0+384),f
  7487  1585  1D03               	skipz
  7488  1586  0008               	return
  7489  1587  0821               	movf	(_RF_Data^(0+384)+1),w
  7490  1588  3A02               	xorlw	2
  7491  1589  1D03               	skipz
  7492  158A  0008               	return
  7493                           
  7494                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7495  158B  087B               	movf	_product,w
  7496  158C  3E0C               	addlw	12
  7497  158D  0086               	movwf	6
  7498  158E  3002               	movlw	2	; select bank4/5
  7499  158F  0087               	movwf	7
  7500  1590  082C               	movf	(_RF_Data^(0+384)+12),w
  7501  1591  0601               	xorwf	1,w
  7502  1592  1D03               	skipz
  7503  1593  0008               	return
  7504  1594  087B               	movf	_product,w
  7505  1595  3E0D               	addlw	13
  7506  1596  0086               	movwf	6
  7507  1597  3002               	movlw	2	; select bank4/5
  7508  1598  0087               	movwf	7
  7509  1599  082D               	movf	(_RF_Data^(0+384)+13),w
  7510  159A  0601               	xorwf	1,w
  7511  159B  1D03               	skipz
  7512  159C  0008               	return
  7513  159D  087B               	movf	_product,w
  7514  159E  3E0E               	addlw	14
  7515  159F  0086               	movwf	6
  7516  15A0  3002               	movlw	2	; select bank4/5
  7517  15A1  0087               	movwf	7
  7518  15A2  082E               	movf	(_RF_Data^(0+384)+14),w
  7519  15A3  0601               	xorwf	1,w
  7520  15A4  1D03               	skipz
  7521  15A5  0008               	return
  7522                           
  7523                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  7524  15A6  318B  23F6         	fcall	_setControl_Lights_Table
  7525                           
  7526                           ;RF_Control_B1.c: 296: }
  7527                           ;RF_Control_B1.c: 299: }
  7528                           ;RF_Control_B1.c: 310: }
  7529                           ;RF_Control_B1.c: 311: }
  7530                           ;RF_Control_B1.c: 312: } else {
  7531  15A8  0008               	return
  7532  15A9                     l2523:	
  7533                           
  7534                           ;RF_Control_B1.c: 313: __nop();
  7535  15A9  0000               	nop
  7536  15AA  0008               	return
  7537  15AB                     __end_of_getRxData:	
  7538                           
  7539                           	psect	text27
  7540  1F29                     __ptext27:	
  7541 ;; *************** function _setLog_Code *****************
  7542 ;; Defined at:
  7543 ;;		line 319 in file "../src/RF_Control_B1.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;		None
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;		None
  7548 ;; Return value:  Size  Location     Type
  7549 ;;		None               void
  7550 ;; Registers used:
  7551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;Total ram usage:        1 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    5
  7564 ;; This function calls:
  7565 ;;		_setBuz
  7566 ;;		_setMemory_LoopSave
  7567 ;;		_setMemory_Modify
  7568 ;;		_setProductData
  7569 ;; This function is called by:
  7570 ;;		_getRxData
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function _setLog_Code
  7576  1F29                     _setLog_Code:	
  7577                           
  7578                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  7579                           
  7580                           ;incstack = 0
  7581                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7582  1F29  0021               	movlb	1	; select bank1
  7583  1F2A  1340               	bcf	_RF1^(0+128),6
  7584                           
  7585                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  7586  1F2B  0023               	movlb	3	; select bank3
  7587  1F2C  082C               	movf	(_RF_Data^(0+384)+12),w
  7588  1F2D  0020               	movlb	0	; select bank0
  7589  1F2E  00DD               	movwf	??_setLog_Code
  7590  1F2F  085D               	movf	??_setLog_Code,w
  7591  1F30  00DA               	movwf	setProductData@value
  7592  1F31  300C               	movlw	12
  7593  1F32  3198  20C6  319F   	fcall	_setProductData
  7594                           
  7595                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  7596  1F35  0023               	movlb	3	; select bank3
  7597  1F36  082D               	movf	(_RF_Data^(0+384)+13),w
  7598  1F37  0020               	movlb	0	; select bank0
  7599  1F38  00DD               	movwf	??_setLog_Code
  7600  1F39  085D               	movf	??_setLog_Code,w
  7601  1F3A  00DA               	movwf	setProductData@value
  7602  1F3B  300D               	movlw	13
  7603  1F3C  3198  20C6  319F   	fcall	_setProductData
  7604                           
  7605                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  7606  1F3F  0023               	movlb	3	; select bank3
  7607  1F40  082E               	movf	(_RF_Data^(0+384)+14),w
  7608  1F41  0020               	movlb	0	; select bank0
  7609  1F42  00DD               	movwf	??_setLog_Code
  7610  1F43  085D               	movf	??_setLog_Code,w
  7611  1F44  00DA               	movwf	setProductData@value
  7612  1F45  300E               	movlw	14
  7613  1F46  3198  20C6  319F   	fcall	_setProductData
  7614                           
  7615                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  7616  1F49  3064               	movlw	100
  7617  1F4A  0020               	movlb	0	; select bank0
  7618  1F4B  00A4               	movwf	setBuz@time
  7619  1F4C  3000               	movlw	0
  7620  1F4D  00A5               	movwf	setBuz@time+1
  7621  1F4E  3001               	movlw	1
  7622  1F4F  3192  22EC  319F   	fcall	_setBuz
  7623                           
  7624                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  7625  1F52  0021               	movlb	1	; select bank1
  7626  1F53  1ECF               	btfss	_myMain^(0+128),5
  7627  1F54  2F59               	goto	l2536
  7628                           
  7629                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  7630  1F55  3001               	movlw	1
  7631  1F56  3199  21C7  319F   	fcall	_setMemory_LoopSave
  7632  1F59                     l2536:	
  7633                           
  7634                           ;RF_Control_B1.c: 327: }
  7635                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  7636  1F59  3001               	movlw	1
  7637  1F5A  3199  2177         	fcall	_setMemory_Modify
  7638  1F5C  0008               	return
  7639  1F5D                     __end_of_setLog_Code:	
  7640                           
  7641                           	psect	text28
  7642  19C7                     __ptext28:	
  7643 ;; *************** function _setMemory_LoopSave *****************
  7644 ;; Defined at:
  7645 ;;		line 1094 in file "../src/MCU_B1.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;  command         1    wreg     unsigned char 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  command         1    3[COMMON] unsigned char 
  7650 ;; Return value:  Size  Location     Type
  7651 ;;		None               void
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;Total ram usage:        2 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    3
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_setLog_Code
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           
  7674                           ;psect for function _setMemory_LoopSave
  7675  19C7                     _setMemory_LoopSave:	
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7679                           ;setMemory_LoopSave@command stored from wreg
  7680  19C7  00F3               	movwf	setMemory_LoopSave@command
  7681                           
  7682                           ;MCU_B1.c: 1095: Memory.LoopSave = command == 1 ? 1 : 0;
  7683  19C8  0873               	movf	setMemory_LoopSave@command,w
  7684  19C9  3A01               	xorlw	1
  7685  19CA  3000               	movlw	0
  7686  19CB  1903               	skipnz
  7687  19CC  3001               	movlw	1
  7688  19CD  00F2               	movwf	??_setMemory_LoopSave
  7689  19CE  0DF2               	rlf	??_setMemory_LoopSave,f
  7690  19CF  0DF2               	rlf	??_setMemory_LoopSave,f
  7691  19D0  0024               	movlb	4	; select bank4
  7692  19D1  0854               	movf	(_Memory^(0+512)+36),w
  7693  19D2  0672               	xorwf	??_setMemory_LoopSave,w
  7694  19D3  39FB               	andlw	-5
  7695  19D4  0672               	xorwf	??_setMemory_LoopSave,w
  7696  19D5  00D4               	movwf	(_Memory^(0+512)+36)
  7697  19D6  0008               	return
  7698  19D7                     __end_of_setMemory_LoopSave:	
  7699                           
  7700                           	psect	text29
  7701  0BF6                     __ptext29:	
  7702 ;; *************** function _setControl_Lights_Table *****************
  7703 ;; Defined at:
  7704 ;;		line 332 in file "../src/RF_Control_B1.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;		None               void
  7711 ;; Registers used:
  7712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    7
  7725 ;; This function calls:
  7726 ;;		_getDimmerLights_Status
  7727 ;;		_getMain_All_LightsStatus
  7728 ;;		_setCmd_Status
  7729 ;;		_setDimmerLights_SwOff
  7730 ;;		_setDimmerLights_SwOn
  7731 ;;		_setProductData
  7732 ;;		_setRFSW_AdjControl
  7733 ;;		_setRFSW_Control
  7734 ;;		_setRF_AdjControl
  7735 ;;		_setTxData
  7736 ;; This function is called by:
  7737 ;;		_getRxData
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _setControl_Lights_Table
  7743  0BF6                     _setControl_Lights_Table:	
  7744                           
  7745                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7749  0BF6  2C75               	goto	l10069
  7750  0BF7                     l10037:	
  7751                           ;RF_Control_B1.c: 336: case 0x00:
  7752                           
  7753                           
  7754                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  7755  0BF7  3199  2159  318B   	fcall	_getMain_All_LightsStatus
  7756  0BFA  3A01               	xorlw	1
  7757  0BFB  1D03               	skipz
  7758  0BFC  2C21               	goto	l10047
  7759                           
  7760                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  7761  0BFD  3001               	movlw	1
  7762  0BFE  3199  212C  318B   	fcall	_getDimmerLights_Status
  7763  0C01  3A01               	xorlw	1
  7764  0C02  1D03               	skipz
  7765  0C03  2C0C               	goto	l2543
  7766                           
  7767                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  7768  0C04  3001               	movlw	1
  7769  0C05  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7770                           
  7771                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  7772  0C08  3001               	movlw	1
  7773  0C09  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7774  0C0C                     l2543:	
  7775                           
  7776                           ;RF_Control_B1.c: 343: }
  7777                           ;RF_Control_B1.c: 346: if (getDimmerLights_Status(2) == 1) {
  7778  0C0C  3002               	movlw	2
  7779  0C0D  3199  212C  318B   	fcall	_getDimmerLights_Status
  7780  0C10  3A01               	xorlw	1
  7781  0C11  1D03               	skipz
  7782  0C12  2C1B               	goto	l10045
  7783                           
  7784                           ;RF_Control_B1.c: 347: setDimmerLights_SwOn(2);
  7785  0C13  3002               	movlw	2
  7786  0C14  3187  2784  318B   	fcall	_setDimmerLights_SwOn
  7787                           
  7788                           ;RF_Control_B1.c: 348: setDimmerLights_SwOff(2);
  7789  0C17  3002               	movlw	2
  7790  0C18  3191  2122  318B   	fcall	_setDimmerLights_SwOff
  7791  0C1B                     l10045:	
  7792                           
  7793                           ;RF_Control_B1.c: 349: }
  7794                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  7795  0C1B  01F2               	clrf	setCmd_Status@cmd
  7796  0C1C  0AF2               	incf	setCmd_Status@cmd,f
  7797  0C1D  3001               	movlw	1
  7798  0C1E  319A  226A         	fcall	_setCmd_Status
  7799                           
  7800                           ;RF_Control_B1.c: 359: } else {
  7801  0C20  0008               	return
  7802  0C21                     l10047:	
  7803                           
  7804                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  7805  0C21  0020               	movlb	0	; select bank0
  7806  0C22  01DA               	clrf	setProductData@value
  7807  0C23  3009               	movlw	9
  7808  0C24  3198  20C6  318B   	fcall	_setProductData
  7809                           
  7810                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  7811  0C27  0020               	movlb	0	; select bank0
  7812  0C28  01DA               	clrf	setProductData@value
  7813  0C29  300B               	movlw	11
  7814  0C2A  3198  20C6  318B   	fcall	_setProductData
  7815                           
  7816                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  7817  0C2D  0020               	movlb	0	; select bank0
  7818  0C2E  01DA               	clrf	setProductData@value
  7819  0C2F  300F               	movlw	15
  7820  0C30  3198  20C6  318B   	fcall	_setProductData
  7821                           
  7822                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  7823  0C33  0020               	movlb	0	; select bank0
  7824  0C34  01DA               	clrf	setProductData@value
  7825  0C35  3011               	movlw	17
  7826  0C36  3198  20C6  318B   	fcall	_setProductData
  7827                           
  7828                           ;RF_Control_B1.c: 364: setTxData();
  7829  0C39  3198  201C         	fcall	_setTxData
  7830                           
  7831                           ;RF_Control_B1.c: 365: }
  7832                           ;RF_Control_B1.c: 366: break;
  7833  0C3B  0008               	return
  7834  0C3C                     l10051:	
  7835                           ;RF_Control_B1.c: 368: case 0x20:
  7836                           
  7837                           
  7838                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  7839  0C3C  0020               	movlb	0	; select bank0
  7840  0C3D  01DA               	clrf	setProductData@value
  7841  0C3E  3009               	movlw	9
  7842  0C3F  3198  20C6  318B   	fcall	_setProductData
  7843                           
  7844                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  7845  0C42  0020               	movlb	0	; select bank0
  7846  0C43  01DA               	clrf	setProductData@value
  7847  0C44  300B               	movlw	11
  7848  0C45  3198  20C6  318B   	fcall	_setProductData
  7849                           
  7850                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  7851  0C48  087B               	movf	_product,w
  7852  0C49  0086               	movwf	6
  7853  0C4A  3002               	movlw	2	; select bank4/5
  7854  0C4B  0087               	movwf	7
  7855  0C4C  3002               	movlw	2	; select bank4/5
  7856  0C4D  3F4F               	moviw [15]fsr1
  7857  0C4E  0020               	movlb	0	; select bank0
  7858  0C4F  00DA               	movwf	setProductData@value
  7859  0C50  300F               	movlw	15
  7860  0C51  3198  20C6  318B   	fcall	_setProductData
  7861                           
  7862                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  7863  0C54  0020               	movlb	0	; select bank0
  7864  0C55  01DA               	clrf	setProductData@value
  7865  0C56  3011               	movlw	17
  7866  0C57  3198  20C6  318B   	fcall	_setProductData
  7867                           
  7868                           ;RF_Control_B1.c: 373: setTxData();
  7869  0C5A  3198  201C         	fcall	_setTxData
  7870                           
  7871                           ;RF_Control_B1.c: 374: break;
  7872  0C5C  0008               	return
  7873  0C5D                     l10055:	
  7874                           ;RF_Control_B1.c: 377: case 0x01:
  7875                           
  7876                           
  7877                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  7878  0C5D  3001               	movlw	1
  7879  0C5E  3191  215C         	fcall	_setRFSW_Control
  7880                           
  7881                           ;RF_Control_B1.c: 379: break;
  7882  0C60  0008               	return
  7883  0C61                     l10057:	
  7884                           ;RF_Control_B1.c: 383: case 0x11:
  7885                           
  7886                           
  7887                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7888  0C61  3001               	movlw	1
  7889  0C62  318A  22E3         	fcall	_setRFSW_AdjControl
  7890                           
  7891                           ;RF_Control_B1.c: 385: break;
  7892  0C64  0008               	return
  7893  0C65                     l10059:	
  7894                           ;RF_Control_B1.c: 387: case 0xd1:
  7895                           
  7896                           
  7897                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  7898  0C65  3001               	movlw	1
  7899  0C66  319F  2793         	fcall	_setRF_AdjControl
  7900                           
  7901                           ;RF_Control_B1.c: 389: break;
  7902  0C68  0008               	return
  7903  0C69                     l10061:	
  7904                           ;RF_Control_B1.c: 394: case 0x02:
  7905                           
  7906                           
  7907                           ;RF_Control_B1.c: 395: setRFSW_Control(2);
  7908  0C69  3002               	movlw	2
  7909  0C6A  3191  215C         	fcall	_setRFSW_Control
  7910                           
  7911                           ;RF_Control_B1.c: 396: break;
  7912  0C6C  0008               	return
  7913  0C6D                     l10063:	
  7914                           ;RF_Control_B1.c: 399: case 0x21:
  7915                           
  7916                           
  7917                           ;RF_Control_B1.c: 400: setRFSW_AdjControl(2);
  7918  0C6D  3002               	movlw	2
  7919  0C6E  318A  22E3         	fcall	_setRFSW_AdjControl
  7920                           
  7921                           ;RF_Control_B1.c: 401: break;
  7922  0C70  0008               	return
  7923  0C71                     l10065:	
  7924                           ;RF_Control_B1.c: 403: case 0xd2:
  7925                           
  7926                           
  7927                           ;RF_Control_B1.c: 404: setRF_AdjControl(2);
  7928  0C71  3002               	movlw	2
  7929  0C72  319F  2793         	fcall	_setRF_AdjControl
  7930                           
  7931                           ;RF_Control_B1.c: 422: }
  7932                           
  7933                           ;RF_Control_B1.c: 405: break;
  7934  0C74  0008               	return
  7935  0C75                     l10069:	
  7936  0C75  0023               	movlb	3	; select bank3
  7937  0C76  082F               	movf	(_RF_Data^(0+384)+15),w
  7938                           
  7939                           ; Switch size 1, requested type "space"
  7940                           ; Number of cases is 8, Range of values is 0 to 210
  7941                           ; switch strategies available:
  7942                           ; Name         Instructions Cycles
  7943                           ; simple_byte           25    13 (average)
  7944                           ; jumptable            260     6 (fixed)
  7945                           ;	Chosen strategy is simple_byte
  7946  0C77  3A00               	xorlw	0	; case 0
  7947  0C78  1903               	skipnz
  7948  0C79  2BF7               	goto	l10037
  7949  0C7A  3A01               	xorlw	1	; case 1
  7950  0C7B  1903               	skipnz
  7951  0C7C  2C5D               	goto	l10055
  7952  0C7D  3A03               	xorlw	3	; case 2
  7953  0C7E  1903               	skipnz
  7954  0C7F  2C69               	goto	l10061
  7955  0C80  3A13               	xorlw	19	; case 17
  7956  0C81  1903               	skipnz
  7957  0C82  2C61               	goto	l10057
  7958  0C83  3A31               	xorlw	49	; case 32
  7959  0C84  1903               	skipnz
  7960  0C85  2C3C               	goto	l10051
  7961  0C86  3A01               	xorlw	1	; case 33
  7962  0C87  1903               	skipnz
  7963  0C88  2C6D               	goto	l10063
  7964  0C89  3AF0               	xorlw	240	; case 209
  7965  0C8A  1903               	skipnz
  7966  0C8B  2C65               	goto	l10059
  7967  0C8C  3A03               	xorlw	3	; case 210
  7968  0C8D  1903               	skipnz
  7969  0C8E  2C71               	goto	l10065
  7970  0C8F  2C90               	goto	l2554
  7971  0C90                     l2554:	
  7972  0C90  0008               	return
  7973  0C91                     __end_of_setControl_Lights_Table:	
  7974                           
  7975                           	psect	text30
  7976  1F93                     __ptext30:	
  7977 ;; *************** function _setRF_AdjControl *****************
  7978 ;; Defined at:
  7979 ;;		line 501 in file "../src/RF_Control_B1.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  sw              1    wreg     unsigned char 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;  sw              1    9[COMMON] unsigned char 
  7984 ;;  dimmingStatu    1    8[COMMON] unsigned char 
  7985 ;;  status          1    7[COMMON] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;		None               void
  7988 ;; Registers used:
  7989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7996 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7998 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;Total ram usage:        4 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    5
  8002 ;; This function calls:
  8003 ;;		_DimmerLights_SelectPointer
  8004 ;;		_getDimmerIntr_Dimming_Sw
  8005 ;;		_getDimmerLights_Status
  8006 ;; This function is called by:
  8007 ;;		_setControl_Lights_Table
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           
  8012                           ;psect for function _setRF_AdjControl
  8013  1F93                     _setRF_AdjControl:	
  8014                           
  8015                           ;incstack = 0
  8016                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8017                           ;setRF_AdjControl@sw stored from wreg
  8018  1F93  00F9               	movwf	setRF_AdjControl@sw
  8019                           
  8020                           ;RF_Control_B1.c: 502: char status = 0;
  8021  1F94  01F7               	clrf	setRF_AdjControl@status
  8022                           
  8023                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  8024  1F95  0879               	movf	setRF_AdjControl@sw,w
  8025  1F96  3199  212C  319F   	fcall	_getDimmerLights_Status
  8026  1F99  00F6               	movwf	??_setRF_AdjControl
  8027  1F9A  0876               	movf	??_setRF_AdjControl,w
  8028  1F9B  00F7               	movwf	setRF_AdjControl@status
  8029                           
  8030                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  8031  1F9C  01F8               	clrf	setRF_AdjControl@dimmingStatus
  8032                           
  8033                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8034  1F9D  0879               	movf	setRF_AdjControl@sw,w
  8035  1F9E  319A  22E8  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8036  1FA1  00F6               	movwf	??_setRF_AdjControl
  8037  1FA2  0876               	movf	??_setRF_AdjControl,w
  8038  1FA3  00F8               	movwf	setRF_AdjControl@dimmingStatus
  8039                           
  8040                           ;RF_Control_B1.c: 508: if (status == 1) {
  8041  1FA4  0877               	movf	setRF_AdjControl@status,w
  8042  1FA5  3A01               	xorlw	1
  8043  1FA6  1D03               	skipz
  8044  1FA7  0008               	return
  8045                           
  8046                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  8047  1FA8  08F8               	movf	setRF_AdjControl@dimmingStatus,f
  8048  1FA9  1D03               	skipz
  8049  1FAA  2FBA               	goto	l7313
  8050                           
  8051                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  8052  1FAB  0879               	movf	setRF_AdjControl@sw,w
  8053  1FAC  319A  2255         	fcall	_DimmerLights_SelectPointer
  8054                           
  8055                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  8056  1FAE  0020               	movlb	0	; select bank0
  8057  1FAF  086C               	movf	_DimmerLights,w
  8058  1FB0  0086               	movwf	6
  8059  1FB1  3001               	movlw	1	; select bank2/3
  8060  1FB2  0087               	movwf	7
  8061  1FB3  1601               	bsf	1,4
  8062                           
  8063                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  8064  1FB4  086C               	movf	_DimmerLights,w
  8065  1FB5  0086               	movwf	6
  8066  1FB6  3001               	movlw	1	; select bank2/3
  8067  1FB7  0087               	movwf	7
  8068  1FB8  1681               	bsf	1,5
  8069                           
  8070                           ;RF_Control_B1.c: 514: } else {
  8071  1FB9  0008               	return
  8072  1FBA                     l7313:	
  8073                           
  8074                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  8075  1FBA  0879               	movf	setRF_AdjControl@sw,w
  8076  1FBB  319A  2255         	fcall	_DimmerLights_SelectPointer
  8077                           
  8078                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  8079  1FBD  0020               	movlb	0	; select bank0
  8080  1FBE  086C               	movf	_DimmerLights,w
  8081  1FBF  0086               	movwf	6
  8082  1FC0  3001               	movlw	1	; select bank2/3
  8083  1FC1  0087               	movwf	7
  8084  1FC2  1601               	bsf	1,4
  8085                           
  8086                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  8087  1FC3  086C               	movf	_DimmerLights,w
  8088  1FC4  0086               	movwf	6
  8089  1FC5  3001               	movlw	1	; select bank2/3
  8090  1FC6  0087               	movwf	7
  8091  1FC7  1281               	bcf	1,5
  8092  1FC8  0008               	return
  8093  1FC9                     __end_of_setRF_AdjControl:	
  8094                           
  8095                           	psect	text31
  8096  115C                     __ptext31:	
  8097 ;; *************** function _setRFSW_Control *****************
  8098 ;; Defined at:
  8099 ;;		line 430 in file "../src/RF_Control_B1.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;  sw              1    wreg     unsigned char 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  sw              1   71[BANK0 ] unsigned char 
  8104 ;;  status          1   70[BANK0 ] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;		None               void
  8107 ;; Registers used:
  8108 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;Total ram usage:        3 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    6
  8121 ;; This function calls:
  8122 ;;		_getDimmerLights_Status
  8123 ;;		_setBuz
  8124 ;;		_setDelayOff_GO
  8125 ;;		_setDimmerLights_SwOff
  8126 ;;		_setDimmerLights_SwOn
  8127 ;;		_setRF_DimmerLights
  8128 ;;		_setTxData
  8129 ;; This function is called by:
  8130 ;;		_setControl_Lights_Table
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _setRFSW_Control
  8136  115C                     _setRFSW_Control:	
  8137                           
  8138                           ;incstack = 0
  8139                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8140                           ;setRFSW_Control@sw stored from wreg
  8141  115C  0020               	movlb	0	; select bank0
  8142  115D  00E7               	movwf	setRFSW_Control@sw
  8143                           
  8144                           ;RF_Control_B1.c: 431: char status = 0;
  8145  115E  01E6               	clrf	setRFSW_Control@status
  8146                           
  8147                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  8148  115F  0023               	movlb	3	; select bank3
  8149  1160  0830               	movf	(_RF_Data^(0+384)+16),w
  8150  1161  3A80               	xorlw	128
  8151  1162  1D03               	skipz
  8152  1163  298F               	goto	l9861
  8153                           
  8154                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  8155  1164  0020               	movlb	0	; select bank0
  8156  1165  01DD               	clrf	setDelayOff_GO@command
  8157  1166  0ADD               	incf	setDelayOff_GO@command,f
  8158  1167  0023               	movlb	3	; select bank3
  8159  1168  0831               	movf	(_RF_Data^(0+384)+17),w
  8160  1169  0020               	movlb	0	; select bank0
  8161  116A  00E5               	movwf	??_setRFSW_Control
  8162  116B  0865               	movf	??_setRFSW_Control,w
  8163  116C  00DE               	movwf	setDelayOff_GO@value
  8164  116D  0867               	movf	setRFSW_Control@sw,w
  8165  116E  318B  236A  3191   	fcall	_setDelayOff_GO
  8166                           
  8167                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  8168  1171  0020               	movlb	0	; select bank0
  8169  1172  0867               	movf	setRFSW_Control@sw,w
  8170  1173  3199  212C  3191   	fcall	_getDimmerLights_Status
  8171  1176  3A01               	xorlw	1
  8172  1177  1D03               	skipz
  8173  1178  298F               	goto	l9861
  8174                           
  8175                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  8176  1179  3064               	movlw	100
  8177  117A  0020               	movlb	0	; select bank0
  8178  117B  00A4               	movwf	setBuz@time
  8179  117C  3000               	movlw	0
  8180  117D  00A5               	movwf	setBuz@time+1
  8181  117E  3001               	movlw	1
  8182  117F  3192  22EC  3191   	fcall	_setBuz
  8183                           
  8184                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  8185  1182  0020               	movlb	0	; select bank0
  8186  1183  01DD               	clrf	setRF_DimmerLights@on
  8187  1184  0ADD               	incf	setRF_DimmerLights@on,f
  8188  1185  0867               	movf	setRFSW_Control@sw,w
  8189  1186  3188  202B  3191   	fcall	_setRF_DimmerLights
  8190                           
  8191                           ;RF_Control_B1.c: 438: setTxData();
  8192  1189  3198  201C  3191   	fcall	_setTxData
  8193                           
  8194                           ;RF_Control_B1.c: 439: status = 1;
  8195  118C  0020               	movlb	0	; select bank0
  8196  118D  01E6               	clrf	setRFSW_Control@status
  8197  118E  0AE6               	incf	setRFSW_Control@status,f
  8198  118F                     l9861:	
  8199                           
  8200                           ;RF_Control_B1.c: 440: }
  8201                           ;RF_Control_B1.c: 441: }
  8202                           ;RF_Control_B1.c: 443: if (status == 0) {
  8203  118F  0020               	movlb	0	; select bank0
  8204  1190  08E6               	movf	setRFSW_Control@status,f
  8205  1191  1D03               	skipz
  8206  1192  0008               	return
  8207                           
  8208                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  8209  1193  0867               	movf	setRFSW_Control@sw,w
  8210  1194  3187  2784  3191   	fcall	_setDimmerLights_SwOn
  8211                           
  8212                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  8213  1197  0020               	movlb	0	; select bank0
  8214  1198  0867               	movf	setRFSW_Control@sw,w
  8215  1199  3191  2122         	fcall	_setDimmerLights_SwOff
  8216  119B  0008               	return
  8217  119C                     __end_of_setRFSW_Control:	
  8218                           
  8219                           	psect	text32
  8220  0AE3                     __ptext32:	
  8221 ;; *************** function _setRFSW_AdjControl *****************
  8222 ;; Defined at:
  8223 ;;		line 453 in file "../src/RF_Control_B1.c"
  8224 ;; Parameters:    Size  Location     Type
  8225 ;;  sw              1    wreg     unsigned char 
  8226 ;; Auto vars:     Size  Location     Type
  8227 ;;  sw              1   64[BANK0 ] unsigned char 
  8228 ;;  status          1   63[BANK0 ] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;		None               void
  8231 ;; Registers used:
  8232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;Total ram usage:        4 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    6
  8245 ;; This function calls:
  8246 ;;		_getDimmerLights_PercentToValue
  8247 ;;		_getDimmerLights_Status
  8248 ;;		_setBuz
  8249 ;;		_setDimmerIntr_Dimming_RF
  8250 ;;		_setDimmerIntr_MaxmumValue
  8251 ;;		_setDimmerLights_DimmingRun
  8252 ;;		_setDimmerLights_SwOff
  8253 ;;		_setDimmerLights_SwOn
  8254 ;;		_setMemory_Modify
  8255 ;;		_setProductData
  8256 ;;		_setTxData
  8257 ;; This function is called by:
  8258 ;;		_setControl_Lights_Table
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _setRFSW_AdjControl
  8264  0AE3                     _setRFSW_AdjControl:	
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8268                           ;setRFSW_AdjControl@sw stored from wreg
  8269  0AE3  0020               	movlb	0	; select bank0
  8270  0AE4  00E0               	movwf	setRFSW_AdjControl@sw
  8271                           
  8272                           ;RF_Control_B1.c: 454: char status = 0;
  8273  0AE5  01DF               	clrf	setRFSW_AdjControl@status
  8274                           
  8275                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  8276  0AE6  0860               	movf	setRFSW_AdjControl@sw,w
  8277  0AE7  3199  212C  318A   	fcall	_getDimmerLights_Status
  8278  0AEA  0020               	movlb	0	; select bank0
  8279  0AEB  00DD               	movwf	??_setRFSW_AdjControl
  8280  0AEC  085D               	movf	??_setRFSW_AdjControl,w
  8281  0AED  00DF               	movwf	setRFSW_AdjControl@status
  8282                           
  8283                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  8284  0AEE  3065               	movlw	101
  8285  0AEF  0023               	movlb	3	; select bank3
  8286  0AF0  0229               	subwf	(_RF_Data^(0+384)+9),w
  8287  0AF1  1C03               	skipc
  8288  0AF2  2AFA               	goto	l9873
  8289                           
  8290                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  8291  0AF3  3064               	movlw	100
  8292  0AF4  0020               	movlb	0	; select bank0
  8293  0AF5  00DD               	movwf	??_setRFSW_AdjControl
  8294  0AF6  085D               	movf	??_setRFSW_AdjControl,w
  8295  0AF7  0023               	movlb	3	; select bank3
  8296  0AF8  00A9               	movwf	(_RF_Data^(0+384)+9)
  8297                           
  8298                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  8299  0AF9  2AFF               	goto	l9877
  8300  0AFA                     l9873:	
  8301  0AFA  08A9               	movf	(_RF_Data^(0+384)+9),f
  8302  0AFB  1D03               	skipz
  8303  0AFC  2AFF               	goto	l9877
  8304                           
  8305                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  8306  0AFD  01A9               	clrf	(_RF_Data^(0+384)+9)
  8307  0AFE  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8308  0AFF                     l9877:	
  8309                           
  8310                           ;RF_Control_B1.c: 462: }
  8311                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  8312  0AFF  0829               	movf	(_RF_Data^(0+384)+9),w
  8313  0B00  0020               	movlb	0	; select bank0
  8314  0B01  00DD               	movwf	??_setRFSW_AdjControl
  8315  0B02  085D               	movf	??_setRFSW_AdjControl,w
  8316  0B03  00DA               	movwf	setProductData@value
  8317  0B04  3009               	movlw	9
  8318  0B05  3198  20C6  318A   	fcall	_setProductData
  8319                           
  8320                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  8321  0B08  0020               	movlb	0	; select bank0
  8322  0B09  0860               	movf	setRFSW_AdjControl@sw,w
  8323  0B0A  00DD               	movwf	??_setRFSW_AdjControl
  8324  0B0B  085D               	movf	??_setRFSW_AdjControl,w
  8325  0B0C  00DA               	movwf	setProductData@value
  8326  0B0D  300B               	movlw	11
  8327  0B0E  3198  20C6  318A   	fcall	_setProductData
  8328                           
  8329                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  8330  0B11  0020               	movlb	0	; select bank0
  8331  0B12  0860               	movf	setRFSW_AdjControl@sw,w
  8332  0B13  3E1A               	addlw	26
  8333  0B14  077B               	addwf	_product,w
  8334  0B15  00DD               	movwf	??_setRFSW_AdjControl
  8335  0B16  085D               	movf	??_setRFSW_AdjControl,w
  8336  0B17  0086               	movwf	6
  8337  0B18  3002               	movlw	2	; select bank4/5
  8338  0B19  0087               	movwf	7
  8339  0B1A  0801               	movf	1,w
  8340  0B1B  00DE               	movwf	??_setRFSW_AdjControl+1
  8341  0B1C  085E               	movf	??_setRFSW_AdjControl+1,w
  8342  0B1D  00DA               	movwf	setProductData@value
  8343  0B1E  3011               	movlw	17
  8344  0B1F  3198  20C6  318A   	fcall	_setProductData
  8345                           
  8346                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  8347  0B22  0023               	movlb	3	; select bank3
  8348  0B23  0829               	movf	(_RF_Data^(0+384)+9),w
  8349  0B24  0020               	movlb	0	; select bank0
  8350  0B25  00DD               	movwf	??_setRFSW_AdjControl
  8351  0B26  085D               	movf	??_setRFSW_AdjControl,w
  8352  0B27  00DA               	movwf	setProductData@value
  8353  0B28  0860               	movf	setRFSW_AdjControl@sw,w
  8354  0B29  3E14               	addlw	20
  8355  0B2A  3198  20C6  318A   	fcall	_setProductData
  8356                           
  8357                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  8358  0B2D  3001               	movlw	1
  8359  0B2E  3199  2177  318A   	fcall	_setMemory_Modify
  8360                           
  8361                           ;RF_Control_B1.c: 478: if (status == 1) {
  8362  0B31  0020               	movlb	0	; select bank0
  8363  0B32  085F               	movf	setRFSW_AdjControl@status,w
  8364  0B33  3A01               	xorlw	1
  8365  0B34  1D03               	skipz
  8366  0B35  2B56               	goto	l9889
  8367                           
  8368                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8369  0B36  0023               	movlb	3	; select bank3
  8370  0B37  0829               	movf	(_RF_Data^(0+384)+9),w
  8371  0B38  3196  26D1  318A   	fcall	_getDimmerLights_PercentToValue
  8372  0B3B  0020               	movlb	0	; select bank0
  8373  0B3C  00DD               	movwf	??_setRFSW_AdjControl
  8374  0B3D  085D               	movf	??_setRFSW_AdjControl,w
  8375  0B3E  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  8376  0B3F  0860               	movf	setRFSW_AdjControl@sw,w
  8377  0B40  319A  22FE  318A   	fcall	_setDimmerIntr_MaxmumValue
  8378                           
  8379                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  8380  0B43  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  8381  0B44  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  8382  0B45  0020               	movlb	0	; select bank0
  8383  0B46  0860               	movf	setRFSW_AdjControl@sw,w
  8384  0B47  319D  25C0  318A   	fcall	_setDimmerIntr_Dimming_RF
  8385                           
  8386                           ;RF_Control_B1.c: 483: setTxData();
  8387  0B4A  3198  201C  318A   	fcall	_setTxData
  8388                           
  8389                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  8390  0B4D  3064               	movlw	100
  8391  0B4E  0020               	movlb	0	; select bank0
  8392  0B4F  00A4               	movwf	setBuz@time
  8393  0B50  3000               	movlw	0
  8394  0B51  00A5               	movwf	setBuz@time+1
  8395  0B52  3001               	movlw	1
  8396  0B53  3192  22EC         	fcall	_setBuz
  8397                           
  8398                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  8399  0B55  0008               	return
  8400  0B56                     l9889:	
  8401  0B56  0020               	movlb	0	; select bank0
  8402  0B57  08DF               	movf	setRFSW_AdjControl@status,f
  8403  0B58  1D03               	skipz
  8404  0B59  0008               	return
  8405                           
  8406                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  8407  0B5A  01F4               	clrf	setDimmerLights_DimmingRun@command
  8408  0B5B  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  8409  0B5C  0860               	movf	setRFSW_AdjControl@sw,w
  8410  0B5D  319B  235B  318A   	fcall	_setDimmerLights_DimmingRun
  8411                           
  8412                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  8413  0B60  0020               	movlb	0	; select bank0
  8414  0B61  0860               	movf	setRFSW_AdjControl@sw,w
  8415  0B62  3187  2784  318A   	fcall	_setDimmerLights_SwOn
  8416                           
  8417                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  8418  0B65  0020               	movlb	0	; select bank0
  8419  0B66  0860               	movf	setRFSW_AdjControl@sw,w
  8420  0B67  3191  2122         	fcall	_setDimmerLights_SwOff
  8421  0B69  0008               	return
  8422  0B6A                     __end_of_setRFSW_AdjControl:	
  8423                           
  8424                           	psect	text33
  8425  1B5B                     __ptext33:	
  8426 ;; *************** function _setDimmerLights_DimmingRun *****************
  8427 ;; Defined at:
  8428 ;;		line 1272 in file "../src/Dimmer_B1.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;  lights          1    wreg     unsigned char 
  8431 ;;  command         1    4[COMMON] unsigned char 
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  lights          1    6[COMMON] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;		None               void
  8436 ;; Registers used:
  8437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8443 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;Total ram usage:        3 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    4
  8450 ;; This function calls:
  8451 ;;		_DimmerLights_SelectPointer
  8452 ;; This function is called by:
  8453 ;;		_setRFSW_AdjControl
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _setDimmerLights_DimmingRun
  8459  1B5B                     _setDimmerLights_DimmingRun:	
  8460                           
  8461                           ;incstack = 0
  8462                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8463                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8464  1B5B  00F6               	movwf	setDimmerLights_DimmingRun@lights
  8465                           
  8466                           ;Dimmer_B1.c: 1273: DimmerLights_SelectPointer(lights);
  8467  1B5C  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8468  1B5D  319A  2255         	fcall	_DimmerLights_SelectPointer
  8469                           
  8470                           ;Dimmer_B1.c: 1274: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8471  1B5F  0874               	movf	setDimmerLights_DimmingRun@command,w
  8472  1B60  3A01               	xorlw	1
  8473  1B61  3000               	movlw	0
  8474  1B62  1903               	skipnz
  8475  1B63  3001               	movlw	1
  8476  1B64  00F5               	movwf	??_setDimmerLights_DimmingRun
  8477  1B65  0020               	movlb	0	; select bank0
  8478  1B66  0A6C               	incf	_DimmerLights,w
  8479  1B67  0086               	movwf	6
  8480  1B68  3001               	movlw	1	; select bank2/3
  8481  1B69  0087               	movwf	7
  8482  1B6A  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8483  1B6B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8484  1B6C  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8485  1B6D  0801               	movf	1,w
  8486  1B6E  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8487  1B6F  39BF               	andlw	-65
  8488  1B70  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8489  1B71  0081               	movwf	1
  8490  1B72  0008               	return
  8491  1B73                     __end_of_setDimmerLights_DimmingRun:	
  8492                           
  8493                           	psect	text34
  8494  1910                     __ptext34:	
  8495 ;; *************** function _getRF_KeyStatus *****************
  8496 ;; Defined at:
  8497 ;;		line 167 in file "../src/RF_Control_B1.c"
  8498 ;; Parameters:    Size  Location     Type
  8499 ;;		None
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;  key             1    3[COMMON] unsigned char 
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      unsigned char 
  8504 ;; Registers used:
  8505 ;;		wreg, status,2
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;Total ram usage:        3 bytes
  8516 ;; Hardware stack levels used:    1
  8517 ;; Hardware stack levels required when called:    3
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_setRF_Main
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           
  8526                           ;psect for function _getRF_KeyStatus
  8527  1910                     _getRF_KeyStatus:	
  8528                           
  8529                           ;RF_Control_B1.c: 168: char key = 0;
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8533  1910  01F3               	clrf	getRF_KeyStatus@key
  8534                           
  8535                           ;RF_Control_B1.c: 175: key = (RA6 == 1 || RA0 == 1) ? 1 : 0;
  8536  1911  01F4               	clrf	_getRF_KeyStatus$6247
  8537  1912  0AF4               	incf	_getRF_KeyStatus$6247,f
  8538  1913  0020               	movlb	0	; select bank0
  8539  1914  1F0C               	btfss	12,6	;volatile
  8540  1915  180C               	btfsc	12,0	;volatile
  8541  1916  2918               	goto	l8001
  8542  1917  01F4               	clrf	_getRF_KeyStatus$6247
  8543  1918                     l8001:	
  8544  1918  0874               	movf	_getRF_KeyStatus$6247,w
  8545  1919  00F2               	movwf	??_getRF_KeyStatus
  8546  191A  0872               	movf	??_getRF_KeyStatus,w
  8547  191B  00F3               	movwf	getRF_KeyStatus@key
  8548                           
  8549                           ;RF_Control_B1.c: 184: return key;
  8550  191C  0873               	movf	getRF_KeyStatus@key,w
  8551  191D  0008               	return
  8552  191E                     __end_of_getRF_KeyStatus:	
  8553                           
  8554                           	psect	text35
  8555  19B7                     __ptext35:	
  8556 ;; *************** function _getBuz_GO *****************
  8557 ;; Defined at:
  8558 ;;		line 82 in file "../src/Buzzer_B1.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  i               2    6[COMMON] int 
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  2    2[COMMON] int 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;Total ram usage:        6 bytes
  8577 ;; Hardware stack levels used:    1
  8578 ;; Hardware stack levels required when called:    3
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_setRF_Main
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _getBuz_GO
  8588  19B7                     _getBuz_GO:	
  8589                           
  8590                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8591                           
  8592                           ;incstack = 0
  8593                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8594  19B7  0021               	movlb	1	; select bank1
  8595  19B8  0C5C               	rrf	_Buz1^(0+128),w
  8596  19B9  3901               	andlw	1
  8597  19BA  00F4               	movwf	??_getBuz_GO
  8598  19BB  01F5               	clrf	??_getBuz_GO+1
  8599  19BC  0874               	movf	??_getBuz_GO,w
  8600  19BD  00F6               	movwf	getBuz_GO@i
  8601  19BE  0875               	movf	??_getBuz_GO+1,w
  8602  19BF  00F7               	movwf	getBuz_GO@i+1
  8603                           
  8604                           ;Buzzer_B1.c: 84: return i;
  8605  19C0  0877               	movf	getBuz_GO@i+1,w
  8606  19C1  01F3               	clrf	?_getBuz_GO+1
  8607  19C2  07F3               	addwf	?_getBuz_GO+1,f
  8608  19C3  0876               	movf	getBuz_GO@i,w
  8609  19C4  01F2               	clrf	?_getBuz_GO
  8610  19C5  07F2               	addwf	?_getBuz_GO,f
  8611  19C6  0008               	return
  8612  19C7                     __end_of_getBuz_GO:	
  8613                           
  8614                           	psect	text36
  8615  184F                     __ptext36:	
  8616 ;; *************** function _RF_RxDisable *****************
  8617 ;; Defined at:
  8618 ;;		line 155 in file "../src/RF_Control_B1.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;		None
  8621 ;; Auto vars:     Size  Location     Type
  8622 ;;		None
  8623 ;; Return value:  Size  Location     Type
  8624 ;;		None               void
  8625 ;; Registers used:
  8626 ;;		None
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;Total ram usage:        0 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    3
  8639 ;; This function calls:
  8640 ;;		Nothing
  8641 ;; This function is called by:
  8642 ;;		_setRF_Main
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           
  8647                           ;psect for function _RF_RxDisable
  8648  184F                     _RF_RxDisable:	
  8649                           
  8650                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8651                           
  8652                           ;incstack = 0
  8653                           ; Regs used in _RF_RxDisable: []
  8654  184F  0021               	movlb	1	; select bank1
  8655  1850  18C0               	btfsc	_RF1^(0+128),1
  8656  1851  2854               	goto	l2505
  8657  1852  1DC0               	btfss	_RF1^(0+128),3
  8658  1853  0008               	return
  8659  1854                     l2505:	
  8660                           
  8661                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  8662  1854  11C0               	bcf	_RF1^(0+128),3
  8663                           
  8664                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  8665  1855  10C0               	bcf	_RF1^(0+128),1
  8666  1856  0008               	return
  8667  1857                     __end_of_RF_RxDisable:	
  8668                           
  8669                           	psect	text37
  8670  0891                     __ptext37:	
  8671 ;; *************** function _CC2500_TxData *****************
  8672 ;; Defined at:
  8673 ;;		line 32 in file "../src/CC2500_B1.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;  loop_e          1    7[COMMON] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;		None               void
  8680 ;; Registers used:
  8681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;Total ram usage:        2 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    5
  8694 ;; This function calls:
  8695 ;;		_CC2500_WriteByte
  8696 ;;		_CC2500_WriteCommand
  8697 ;;		_RF_Timeout_Counter
  8698 ;;		_setRF_TimeoutCleared
  8699 ;; This function is called by:
  8700 ;;		_setRF_Main
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           
  8705                           ;psect for function _CC2500_TxData
  8706  0891                     _CC2500_TxData:	
  8707                           
  8708                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8709                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8710                           
  8711                           ;incstack = 0
  8712                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8713  0891  3036               	movlw	54
  8714  0892  319B  2373  3188   	fcall	_CC2500_WriteCommand
  8715                           
  8716                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8717  0895  303B               	movlw	59
  8718  0896  319B  2373  3188   	fcall	_CC2500_WriteCommand
  8719                           
  8720                           ;CC2500_B1.c: 38: RC4 = 0;
  8721  0899  0020               	movlb	0	; select bank0
  8722  089A  120E               	bcf	14,4	;volatile
  8723                           
  8724                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8725  089B  307F               	movlw	127
  8726  089C  00F6               	movwf	??_CC2500_TxData
  8727  089D  0876               	movf	??_CC2500_TxData,w
  8728  089E  0021               	movlb	1	; select bank1
  8729  089F  00ED               	movwf	_SPI0Buffer^(0+128)
  8730                           
  8731                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8732  08A0  28A4               	goto	l10079
  8733  08A1                     l10077:	
  8734                           
  8735                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8736  08A1  319A  2294  3188   	fcall	_RF_Timeout_Counter
  8737  08A4                     l10079:	
  8738  08A4  0020               	movlb	0	; select bank0
  8739  08A5  1D0E               	btfss	14,2	;volatile
  8740  08A6  28AA               	goto	l10083
  8741  08A7  0021               	movlb	1	; select bank1
  8742  08A8  1F41               	btfss	(_RF1^(0+128)+1),6
  8743  08A9  28A1               	goto	l10077
  8744  08AA                     l10083:	
  8745                           
  8746                           ;CC2500_B1.c: 42: };
  8747                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8748  08AA  31A7  27EF  3188   	fcall	_setRF_TimeoutCleared
  8749                           
  8750                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8751  08AD  319B  2343  3188   	fcall	_CC2500_WriteByte
  8752                           
  8753                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8754  08B0  0021               	movlb	1	; select bank1
  8755  08B1  086E               	movf	_Tx_Length^(0+128),w
  8756  08B2  00F6               	movwf	??_CC2500_TxData
  8757  08B3  0876               	movf	??_CC2500_TxData,w
  8758  08B4  00ED               	movwf	_SPI0Buffer^(0+128)
  8759                           
  8760                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8761  08B5  319B  2343  3188   	fcall	_CC2500_WriteByte
  8762                           
  8763                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8764  08B8  01F7               	clrf	CC2500_TxData@loop_e
  8765  08B9                     l10097:	
  8766  08B9  0021               	movlb	1	; select bank1
  8767  08BA  086E               	movf	_Tx_Length^(0+128),w
  8768  08BB  0277               	subwf	CC2500_TxData@loop_e,w
  8769  08BC  1803               	btfsc	3,0
  8770  08BD  28D0               	goto	l263
  8771                           
  8772                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8773  08BE  0877               	movf	CC2500_TxData@loop_e,w
  8774  08BF  3EA0               	addlw	_RF_Data& (0+255)
  8775  08C0  0086               	movwf	6
  8776  08C1  3001               	movlw	1	; select bank3/4
  8777  08C2  0087               	movwf	7
  8778  08C3  0801               	movf	1,w
  8779  08C4  00F6               	movwf	??_CC2500_TxData
  8780  08C5  0876               	movf	??_CC2500_TxData,w
  8781  08C6  0021               	movlb	1	; select bank1
  8782  08C7  00ED               	movwf	_SPI0Buffer^(0+128)
  8783                           
  8784                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8785  08C8  319B  2343  3188   	fcall	_CC2500_WriteByte
  8786  08CB  3001               	movlw	1
  8787  08CC  00F6               	movwf	??_CC2500_TxData
  8788  08CD  0876               	movf	??_CC2500_TxData,w
  8789  08CE  07F7               	addwf	CC2500_TxData@loop_e,f
  8790  08CF  28B9               	goto	l10097
  8791  08D0                     l263:	
  8792                           
  8793                           ;CC2500_B1.c: 51: }
  8794                           ;CC2500_B1.c: 52: RC4 = 1;
  8795  08D0  0020               	movlb	0	; select bank0
  8796  08D1  160E               	bsf	14,4	;volatile
  8797                           
  8798                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8799  08D2  3035               	movlw	53
  8800  08D3  319B  2373  3188   	fcall	_CC2500_WriteCommand
  8801                           
  8802                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8803  08D6  28DA               	goto	l10103
  8804  08D7                     l10101:	
  8805                           
  8806                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8807  08D7  319A  2294  3188   	fcall	_RF_Timeout_Counter
  8808  08DA                     l10103:	
  8809  08DA  0020               	movlb	0	; select bank0
  8810  08DB  180D               	btfsc	13,0	;volatile
  8811  08DC  28E0               	goto	l10107
  8812  08DD  0021               	movlb	1	; select bank1
  8813  08DE  1F41               	btfss	(_RF1^(0+128)+1),6
  8814  08DF  28D7               	goto	l10101
  8815  08E0                     l10107:	
  8816                           
  8817                           ;CC2500_B1.c: 56: };
  8818                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8819  08E0  31A7  27EF  3188   	fcall	_setRF_TimeoutCleared
  8820                           
  8821                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8822  08E3  28E7               	goto	l10111
  8823  08E4                     l10109:	
  8824                           
  8825                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8826  08E4  319A  2294  3188   	fcall	_RF_Timeout_Counter
  8827  08E7                     l10111:	
  8828  08E7  0020               	movlb	0	; select bank0
  8829  08E8  1C0D               	btfss	13,0	;volatile
  8830  08E9  28ED               	goto	l10115
  8831  08EA  0021               	movlb	1	; select bank1
  8832  08EB  1F41               	btfss	(_RF1^(0+128)+1),6
  8833  08EC  28E4               	goto	l10109
  8834  08ED                     l10115:	
  8835                           
  8836                           ;CC2500_B1.c: 61: };
  8837                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8838  08ED  31A7  27EF  3188   	fcall	_setRF_TimeoutCleared
  8839                           
  8840                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8841  08F0  3036               	movlw	54
  8842  08F1  319B  2373  3188   	fcall	_CC2500_WriteCommand
  8843                           
  8844                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8845  08F4  303B               	movlw	59
  8846  08F5  319B  2373         	fcall	_CC2500_WriteCommand
  8847                           
  8848                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8849  08F7  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8850  08F8  0008               	return
  8851  08F9                     __end_of_CC2500_TxData:	
  8852                           
  8853                           	psect	text38
  8854  160B                     __ptext38:	
  8855 ;; *************** function _CC2500_RxData *****************
  8856 ;; Defined at:
  8857 ;;		line 73 in file "../src/CC2500_B1.c"
  8858 ;; Parameters:    Size  Location     Type
  8859 ;;		None
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;  loop_f          1    7[COMMON] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;		None               void
  8864 ;; Registers used:
  8865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;Total ram usage:        2 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    5
  8878 ;; This function calls:
  8879 ;;		_CC2500_ReadByte
  8880 ;;		_CC2500_ReadStatus
  8881 ;;		_CC2500_WriteByte
  8882 ;;		_CC2500_WriteCommand
  8883 ;;		_RF_Timeout_Counter
  8884 ;;		_setRF_TimeoutCleared
  8885 ;; This function is called by:
  8886 ;;		_setRF_Main
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           
  8891                           ;psect for function _CC2500_RxData
  8892  160B                     _CC2500_RxData:	
  8893                           
  8894                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8895                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8899  160B  0020               	movlb	0	; select bank0
  8900  160C  180D               	btfsc	13,0	;volatile
  8901  160D  0008               	return
  8902                           
  8903                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8904  160E  303B               	movlw	59
  8905  160F  319D  252C  3196   	fcall	_CC2500_ReadStatus
  8906                           
  8907                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8908  1612  0021               	movlb	1	; select bank1
  8909  1613  086F               	movf	_s_data^(0+128),w
  8910  1614  1903               	btfsc	3,2
  8911  1615  0008               	return
  8912                           
  8913                           ;CC2500_B1.c: 90: RC4 = 0;
  8914  1616  0020               	movlb	0	; select bank0
  8915  1617  120E               	bcf	14,4	;volatile
  8916                           
  8917                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8918  1618  30FF               	movlw	255
  8919  1619  00F6               	movwf	??_CC2500_RxData
  8920  161A  0876               	movf	??_CC2500_RxData,w
  8921  161B  0021               	movlb	1	; select bank1
  8922  161C  00ED               	movwf	_SPI0Buffer^(0+128)
  8923                           
  8924                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8925  161D  2E21               	goto	l10135
  8926  161E                     l10133:	
  8927                           
  8928                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8929  161E  319A  2294  3196   	fcall	_RF_Timeout_Counter
  8930  1621                     l10135:	
  8931  1621  0020               	movlb	0	; select bank0
  8932  1622  1D0E               	btfss	14,2	;volatile
  8933  1623  2E27               	goto	l10139
  8934  1624  0021               	movlb	1	; select bank1
  8935  1625  1F41               	btfss	(_RF1^(0+128)+1),6
  8936  1626  2E1E               	goto	l10133
  8937  1627                     l10139:	
  8938                           
  8939                           ;CC2500_B1.c: 95: };
  8940                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8941  1627  31A7  27EF  3196   	fcall	_setRF_TimeoutCleared
  8942                           
  8943                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8944  162A  319B  2343  3196   	fcall	_CC2500_WriteByte
  8945                           
  8946                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8947  162D  319C  2412  3196   	fcall	_CC2500_ReadByte
  8948                           
  8949                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8950  1630  0021               	movlb	1	; select bank1
  8951  1631  086D               	movf	_SPI0Buffer^(0+128),w
  8952  1632  00F6               	movwf	??_CC2500_RxData
  8953  1633  0876               	movf	??_CC2500_RxData,w
  8954  1634  00EC               	movwf	_Rx_Length^(0+128)
  8955                           
  8956                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8957  1635  01F7               	clrf	CC2500_RxData@loop_f
  8958  1636                     l10155:	
  8959  1636  086C               	movf	_Rx_Length^(0+128),w
  8960  1637  0277               	subwf	CC2500_RxData@loop_f,w
  8961  1638  1803               	btfsc	3,0
  8962  1639  2E4C               	goto	l10157
  8963                           
  8964                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8965  163A  319C  2412  3196   	fcall	_CC2500_ReadByte
  8966                           
  8967                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8968  163D  0021               	movlb	1	; select bank1
  8969  163E  086D               	movf	_SPI0Buffer^(0+128),w
  8970  163F  00F6               	movwf	??_CC2500_RxData
  8971  1640  0877               	movf	CC2500_RxData@loop_f,w
  8972  1641  3EA0               	addlw	_RF_Data& (0+255)
  8973  1642  0086               	movwf	6
  8974  1643  3001               	movlw	1	; select bank3/4
  8975  1644  0087               	movwf	7
  8976  1645  0876               	movf	??_CC2500_RxData,w
  8977  1646  0081               	movwf	1
  8978  1647  3001               	movlw	1
  8979  1648  00F6               	movwf	??_CC2500_RxData
  8980  1649  0876               	movf	??_CC2500_RxData,w
  8981  164A  07F7               	addwf	CC2500_RxData@loop_f,f
  8982  164B  2E36               	goto	l10155
  8983  164C                     l10157:	
  8984                           
  8985                           ;CC2500_B1.c: 104: }
  8986                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8987  164C  319C  2412  3196   	fcall	_CC2500_ReadByte
  8988                           
  8989                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8990  164F  0021               	movlb	1	; select bank1
  8991  1650  086D               	movf	_SPI0Buffer^(0+128),w
  8992  1651  00F6               	movwf	??_CC2500_RxData
  8993  1652  0876               	movf	??_CC2500_RxData,w
  8994  1653  0022               	movlb	2	; select bank2
  8995  1654  00AE               	movwf	_RSSI^(0+256)
  8996                           
  8997                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8998  1655  319C  2412  3196   	fcall	_CC2500_ReadByte
  8999                           
  9000                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9001  1658  0021               	movlb	1	; select bank1
  9002  1659  086D               	movf	_SPI0Buffer^(0+128),w
  9003  165A  00F6               	movwf	??_CC2500_RxData
  9004  165B  0876               	movf	??_CC2500_RxData,w
  9005  165C  00E8               	movwf	_CRC^(0+128)
  9006                           
  9007                           ;CC2500_B1.c: 109: RC4 = 1;
  9008  165D  0020               	movlb	0	; select bank0
  9009  165E  160E               	bsf	14,4	;volatile
  9010                           
  9011                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9012  165F  0021               	movlb	1	; select bank1
  9013  1660  1BE8               	btfsc	_CRC^(0+128),7
  9014                           
  9015                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9016  1661  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9017                           
  9018                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9019  1662  11C0               	bcf	_RF1^(0+128),3
  9020                           
  9021                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9022  1663  14C0               	bsf	_RF1^(0+128),1
  9023                           
  9024                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9025  1664  3036               	movlw	54
  9026  1665  319B  2373  3196   	fcall	_CC2500_WriteCommand
  9027                           
  9028                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9029  1668  303A               	movlw	58
  9030  1669  319B  2373         	fcall	_CC2500_WriteCommand
  9031  166B  0021               	movlb	1	; select bank1
  9032  166C  0008               	return
  9033  166D                     __end_of_CC2500_RxData:	
  9034                           
  9035                           	psect	text39
  9036  1D2C                     __ptext39:	
  9037 ;; *************** function _CC2500_ReadStatus *****************
  9038 ;; Defined at:
  9039 ;;		line 308 in file "../src/CC2500_B1.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  status_addr     1    wreg     unsigned char 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  status_addr     1    5[COMMON] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;Total ram usage:        2 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    4
  9060 ;; This function calls:
  9061 ;;		_CC2500_ReadByte
  9062 ;;		_CC2500_WriteByte
  9063 ;;		_RF_Timeout_Counter
  9064 ;;		_setRF_TimeoutCleared
  9065 ;; This function is called by:
  9066 ;;		_CC2500_RxData
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _CC2500_ReadStatus
  9072  1D2C                     _CC2500_ReadStatus:	
  9073                           
  9074                           ;incstack = 0
  9075                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9076                           ;CC2500_ReadStatus@status_addr stored from wreg
  9077  1D2C  00F5               	movwf	CC2500_ReadStatus@status_addr
  9078                           
  9079                           ;CC2500_B1.c: 309: RC4 = 0;
  9080  1D2D  0020               	movlb	0	; select bank0
  9081  1D2E  120E               	bcf	14,4	;volatile
  9082                           
  9083                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9084  1D2F  0875               	movf	CC2500_ReadStatus@status_addr,w
  9085  1D30  3EC0               	addlw	192
  9086  1D31  00F4               	movwf	??_CC2500_ReadStatus
  9087  1D32  0874               	movf	??_CC2500_ReadStatus,w
  9088  1D33  0021               	movlb	1	; select bank1
  9089  1D34  00ED               	movwf	_SPI0Buffer^(0+128)
  9090                           
  9091                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9092  1D35  2D39               	goto	l9899
  9093  1D36                     l9897:	
  9094                           
  9095                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9096  1D36  319A  2294  319D   	fcall	_RF_Timeout_Counter
  9097  1D39                     l9899:	
  9098  1D39  0020               	movlb	0	; select bank0
  9099  1D3A  1D0E               	btfss	14,2	;volatile
  9100  1D3B  2D3F               	goto	l9903
  9101  1D3C  0021               	movlb	1	; select bank1
  9102  1D3D  1F41               	btfss	(_RF1^(0+128)+1),6
  9103  1D3E  2D36               	goto	l9897
  9104  1D3F                     l9903:	
  9105                           
  9106                           ;CC2500_B1.c: 314: };
  9107                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9108  1D3F  31A7  27EF  319D   	fcall	_setRF_TimeoutCleared
  9109                           
  9110                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9111  1D42  319B  2343  319D   	fcall	_CC2500_WriteByte
  9112                           
  9113                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9114  1D45  319C  2412         	fcall	_CC2500_ReadByte
  9115                           
  9116                           ;CC2500_B1.c: 319: RC4 = 1;
  9117  1D47  0020               	movlb	0	; select bank0
  9118  1D48  160E               	bsf	14,4	;volatile
  9119                           
  9120                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9121  1D49  0021               	movlb	1	; select bank1
  9122  1D4A  086D               	movf	_SPI0Buffer^(0+128),w
  9123  1D4B  00F4               	movwf	??_CC2500_ReadStatus
  9124  1D4C  0874               	movf	??_CC2500_ReadStatus,w
  9125  1D4D  00EF               	movwf	_s_data^(0+128)
  9126  1D4E  0008               	return
  9127  1D4F                     __end_of_CC2500_ReadStatus:	
  9128                           
  9129                           	psect	text40
  9130  1C12                     __ptext40:	
  9131 ;; *************** function _CC2500_ReadByte *****************
  9132 ;; Defined at:
  9133 ;;		line 242 in file "../src/CC2500_B1.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;		None
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  loop_b          1    3[COMMON] unsigned char 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;		None               void
  9140 ;; Registers used:
  9141 ;;		wreg, status,2, status,0
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9148 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;Total ram usage:        2 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:    3
  9154 ;; This function calls:
  9155 ;;		Nothing
  9156 ;; This function is called by:
  9157 ;;		_CC2500_RxData
  9158 ;;		_CC2500_ReadStatus
  9159 ;;		_CC2500_ReadREG
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           
  9164                           ;psect for function _CC2500_ReadByte
  9165  1C12                     _CC2500_ReadByte:	
  9166                           
  9167                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9168                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9172  1C12  01F3               	clrf	CC2500_ReadByte@loop_b
  9173  1C13                     L3:	
  9174  1C13  3008               	movlw	8
  9175  1C14  0273               	subwf	CC2500_ReadByte@loop_b,w
  9176  1C15  1803               	btfsc	3,0
  9177  1C16  0008               	return
  9178                           
  9179                           ;CC2500_B1.c: 245: RC1 = 1;
  9180  1C17  0020               	movlb	0	; select bank0
  9181  1C18  148E               	bsf	14,1	;volatile
  9182                           
  9183                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9184  1C19  1003               	clrc
  9185  1C1A  0021               	movlb	1	; select bank1
  9186  1C1B  0DED               	rlf	_SPI0Buffer^(0+128),f
  9187                           
  9188                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9189  1C1C  0020               	movlb	0	; select bank0
  9190  1C1D  1D0E               	btfss	14,2	;volatile
  9191  1C1E  2C22               	goto	l7169
  9192                           
  9193                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9194  1C1F  0021               	movlb	1	; select bank1
  9195  1C20  146D               	bsf	_SPI0Buffer^(0+128),0
  9196  1C21  2C27               	goto	l7171
  9197  1C22                     l7169:	
  9198                           
  9199                           ;CC2500_B1.c: 249: else
  9200                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9201  1C22  30FE               	movlw	254
  9202  1C23  00F2               	movwf	??_CC2500_ReadByte
  9203  1C24  0872               	movf	??_CC2500_ReadByte,w
  9204  1C25  0021               	movlb	1	; select bank1
  9205  1C26  05ED               	andwf	_SPI0Buffer^(0+128),f
  9206  1C27                     l7171:	
  9207                           
  9208                           ;CC2500_B1.c: 251: RC1 = 0;
  9209  1C27  0020               	movlb	0	; select bank0
  9210  1C28  108E               	bcf	14,1	;volatile
  9211  1C29  3001               	movlw	1
  9212  1C2A  00F2               	movwf	??_CC2500_ReadByte
  9213  1C2B  0872               	movf	??_CC2500_ReadByte,w
  9214  1C2C  07F3               	addwf	CC2500_ReadByte@loop_b,f
  9215  1C2D  2C13               	goto	L3
  9216  1C2E                     __end_of_CC2500_ReadByte:	
  9217                           
  9218                           	psect	text41
  9219  1AA9                     __ptext41:	
  9220 ;; *************** function _CC2500_PowerOnInitial *****************
  9221 ;; Defined at:
  9222 ;;		line 126 in file "../src/CC2500_B1.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;		None               void
  9229 ;; Registers used:
  9230 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;Total ram usage:        0 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    6
  9243 ;; This function calls:
  9244 ;;		_CC2500_ClearRXFIFO
  9245 ;;		_CC2500_ClearTXFIFO
  9246 ;;		_CC2500_FrequencyCabr
  9247 ;;		_CC2500_InitPATable
  9248 ;;		_CC2500_InitSetREG
  9249 ;;		_CC2500_PowerRST
  9250 ;;		_CC2500_SIDLEMode
  9251 ;; This function is called by:
  9252 ;;		_main
  9253 ;;		_setRF_Main
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           
  9258                           ;psect for function _CC2500_PowerOnInitial
  9259  1AA9                     _CC2500_PowerOnInitial:	
  9260                           
  9261                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9262                           
  9263                           ;incstack = 0
  9264                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9265  1AA9  3192  221E  319A   	fcall	_CC2500_PowerRST
  9266                           
  9267                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9268  1AAC  3188  2001  319A   	fcall	_CC2500_InitSetREG
  9269                           
  9270                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9271  1AAF  319C  2468  319A   	fcall	_CC2500_InitPATable
  9272                           
  9273                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9274  1AB2  31A7  27F7  319A   	fcall	_CC2500_ClearTXFIFO
  9275                           
  9276                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9277  1AB5  31A7  27F3  319A   	fcall	_CC2500_ClearRXFIFO
  9278                           
  9279                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9280  1AB8  3198  20AF  319A   	fcall	_CC2500_FrequencyCabr
  9281                           
  9282                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9283  1ABB  3198  2000         	fcall	_CC2500_SIDLEMode
  9284  1ABD  0008               	return
  9285  1ABE                     __end_of_CC2500_PowerOnInitial:	
  9286                           
  9287                           	psect	text42
  9288  1800                     __ptext42:	
  9289 ;; *************** function _CC2500_SIDLEMode *****************
  9290 ;; Defined at:
  9291 ;;		line 216 in file "../src/CC2500_B1.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;		None
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;Total ram usage:        0 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    5
  9312 ;; This function calls:
  9313 ;;		_CC2500_WriteCommand
  9314 ;; This function is called by:
  9315 ;;		_CC2500_PowerOnInitial
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           
  9320                           ;psect for function _CC2500_SIDLEMode
  9321  1800                     _CC2500_SIDLEMode:	
  9322                           
  9323                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9327  1800  3036               	movlw	54
  9328  1801  319B  2373         	fcall	_CC2500_WriteCommand
  9329  1803  0008               	return
  9330  1804                     __end_of_CC2500_SIDLEMode:	
  9331                           
  9332                           	psect	text43
  9333  121E                     __ptext43:	
  9334 ;; *************** function _CC2500_PowerRST *****************
  9335 ;; Defined at:
  9336 ;;		line 139 in file "../src/CC2500_B1.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;		None
  9341 ;; Return value:  Size  Location     Type
  9342 ;;		None               void
  9343 ;; Registers used:
  9344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;Total ram usage:        1 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    4
  9357 ;; This function calls:
  9358 ;;		_CC2500_WriteByte
  9359 ;;		_DelayTime_1us
  9360 ;;		_RF_Timeout_Counter
  9361 ;;		_setRF_TimeoutCleared
  9362 ;; This function is called by:
  9363 ;;		_CC2500_PowerOnInitial
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           
  9368                           ;psect for function _CC2500_PowerRST
  9369  121E                     _CC2500_PowerRST:	
  9370                           
  9371                           ;CC2500_B1.c: 140: RC1 = 0;
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9375  121E  0020               	movlb	0	; select bank0
  9376  121F  108E               	bcf	14,1	;volatile
  9377                           
  9378                           ;CC2500_B1.c: 141: RC0 = 0;
  9379  1220  100E               	bcf	14,0	;volatile
  9380                           
  9381                           ;CC2500_B1.c: 142: RC4 = 1;
  9382  1221  160E               	bsf	14,4	;volatile
  9383                           
  9384                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9385  1222  300A               	movlw	10
  9386  1223  00F2               	movwf	DelayTime_1us@count
  9387  1224  3000               	movlw	0
  9388  1225  00F3               	movwf	DelayTime_1us@count+1
  9389  1226  319D  2574  3192   	fcall	_DelayTime_1us
  9390                           
  9391                           ;CC2500_B1.c: 144: RC4 = 0;
  9392  1229  0020               	movlb	0	; select bank0
  9393  122A  120E               	bcf	14,4	;volatile
  9394                           
  9395                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9396  122B  300A               	movlw	10
  9397  122C  00F2               	movwf	DelayTime_1us@count
  9398  122D  3000               	movlw	0
  9399  122E  00F3               	movwf	DelayTime_1us@count+1
  9400  122F  319D  2574  3192   	fcall	_DelayTime_1us
  9401                           
  9402                           ;CC2500_B1.c: 146: RC4 = 1;
  9403  1232  0020               	movlb	0	; select bank0
  9404  1233  160E               	bsf	14,4	;volatile
  9405                           
  9406                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9407  1234  3028               	movlw	40
  9408  1235  00F2               	movwf	DelayTime_1us@count
  9409  1236  3000               	movlw	0
  9410  1237  00F3               	movwf	DelayTime_1us@count+1
  9411  1238  319D  2574  3192   	fcall	_DelayTime_1us
  9412                           
  9413                           ;CC2500_B1.c: 148: RC4 = 0;
  9414  123B  0020               	movlb	0	; select bank0
  9415  123C  120E               	bcf	14,4	;volatile
  9416                           
  9417                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9418  123D  3030               	movlw	48
  9419  123E  00F8               	movwf	??_CC2500_PowerRST
  9420  123F  0878               	movf	??_CC2500_PowerRST,w
  9421  1240  0021               	movlb	1	; select bank1
  9422  1241  00ED               	movwf	_SPI0Buffer^(0+128)
  9423                           
  9424                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9425  1242  2A46               	goto	l9927
  9426  1243                     l9925:	
  9427                           
  9428                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9429  1243  319A  2294  3192   	fcall	_RF_Timeout_Counter
  9430  1246                     l9927:	
  9431  1246  0020               	movlb	0	; select bank0
  9432  1247  1D0E               	btfss	14,2	;volatile
  9433  1248  2A4C               	goto	l9931
  9434  1249  0021               	movlb	1	; select bank1
  9435  124A  1F41               	btfss	(_RF1^(0+128)+1),6
  9436  124B  2A43               	goto	l9925
  9437  124C                     l9931:	
  9438                           
  9439                           ;CC2500_B1.c: 152: };
  9440                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9441  124C  31A7  27EF  3192   	fcall	_setRF_TimeoutCleared
  9442                           
  9443                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9444  124F  319B  2343  3192   	fcall	_CC2500_WriteByte
  9445                           
  9446                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9447  1252  2A56               	goto	l9937
  9448  1253                     l9935:	
  9449                           
  9450                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9451  1253  319A  2294  3192   	fcall	_RF_Timeout_Counter
  9452  1256                     l9937:	
  9453  1256  0020               	movlb	0	; select bank0
  9454  1257  1D0E               	btfss	14,2	;volatile
  9455  1258  2A5C               	goto	l9941
  9456  1259  0021               	movlb	1	; select bank1
  9457  125A  1F41               	btfss	(_RF1^(0+128)+1),6
  9458  125B  2A53               	goto	l9935
  9459  125C                     l9941:	
  9460                           
  9461                           ;CC2500_B1.c: 157: };
  9462                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9463  125C  31A7  27EF         	fcall	_setRF_TimeoutCleared
  9464                           
  9465                           ;CC2500_B1.c: 159: RC0 = 0;
  9466  125E  0020               	movlb	0	; select bank0
  9467  125F  100E               	bcf	14,0	;volatile
  9468                           
  9469                           ;CC2500_B1.c: 160: RC4 = 1;
  9470  1260  160E               	bsf	14,4	;volatile
  9471  1261  0008               	return
  9472  1262                     __end_of_CC2500_PowerRST:	
  9473                           
  9474                           	psect	text44
  9475  0801                     __ptext44:	
  9476 ;; *************** function _CC2500_InitSetREG *****************
  9477 ;; Defined at:
  9478 ;;		line 166 in file "../src/CC2500_B1.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9483 ;;  temp2           1    1[BANK0 ] unsigned char 
  9484 ;;  temp1           1    0[BANK0 ] unsigned char 
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        4 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		_CC2500_WriteREG
  9503 ;; This function is called by:
  9504 ;;		_CC2500_PowerOnInitial
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _CC2500_InitSetREG
  9510  0801                     _CC2500_InitSetREG:	
  9511                           
  9512                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9513                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9514                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9515                           
  9516                           ;incstack = 0
  9517                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9518  0801  0020               	movlb	0	; select bank0
  9519  0802  01A2               	clrf	CC2500_InitSetREG@loop_c
  9520  0803                     L4:	
  9521  0803  302F               	movlw	47
  9522  0804  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9523  0805  1803               	btfsc	3,0
  9524  0806  0008               	return
  9525                           
  9526                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9527  0807  0822               	movf	CC2500_InitSetREG@loop_c,w
  9528  0808  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9529  0809  0084               	movwf	4
  9530  080A  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9531  080B  1803               	skipnc
  9532  080C  3E01               	addlw	1
  9533  080D  0085               	movwf	5
  9534  080E  0800               	movf	0,w	;code access
  9535  080F  00F7               	movwf	??_CC2500_InitSetREG
  9536  0810  0877               	movf	??_CC2500_InitSetREG,w
  9537  0811  00A0               	movwf	CC2500_InitSetREG@temp1
  9538                           
  9539                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9540  0812  0822               	movf	CC2500_InitSetREG@loop_c,w
  9541  0813  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9542  0814  0084               	movwf	4
  9543  0815  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9544  0816  1803               	skipnc
  9545  0817  3E01               	addlw	1
  9546  0818  0085               	movwf	5
  9547  0819  0800               	movf	0,w	;code access
  9548  081A  00F7               	movwf	??_CC2500_InitSetREG
  9549  081B  0877               	movf	??_CC2500_InitSetREG,w
  9550  081C  00A1               	movwf	CC2500_InitSetREG@temp2
  9551                           
  9552                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9553  081D  0821               	movf	CC2500_InitSetREG@temp2,w
  9554  081E  00F7               	movwf	??_CC2500_InitSetREG
  9555  081F  0877               	movf	??_CC2500_InitSetREG,w
  9556  0820  00F4               	movwf	CC2500_WriteREG@value
  9557  0821  0820               	movf	CC2500_InitSetREG@temp1,w
  9558  0822  319D  250A  3188   	fcall	_CC2500_WriteREG
  9559  0825  3001               	movlw	1
  9560  0826  00F7               	movwf	??_CC2500_InitSetREG
  9561  0827  0877               	movf	??_CC2500_InitSetREG,w
  9562  0828  0020               	movlb	0	; select bank0
  9563  0829  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9564  082A  2803               	goto	L4
  9565  082B                     __end_of_CC2500_InitSetREG:	
  9566                           
  9567                           	psect	text45
  9568  1C68                     __ptext45:	
  9569 ;; *************** function _CC2500_InitPATable *****************
  9570 ;; Defined at:
  9571 ;;		line 181 in file "../src/CC2500_B1.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;		None
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  loop_d          1    9[COMMON] unsigned char 
  9576 ;;  temp            1    8[COMMON] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        3 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    5
  9593 ;; This function calls:
  9594 ;;		_CC2500_WriteREG
  9595 ;; This function is called by:
  9596 ;;		_CC2500_PowerOnInitial
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _CC2500_InitPATable
  9602  1C68                     _CC2500_InitPATable:	
  9603                           
  9604                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9605                           ;CC2500_B1.c: 183: unsigned char temp;
  9606                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9607                           
  9608                           ;incstack = 0
  9609                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9610  1C68  01F9               	clrf	CC2500_InitPATable@loop_d
  9611  1C69                     L5:	
  9612  1C69  3008               	movlw	8
  9613  1C6A  0279               	subwf	CC2500_InitPATable@loop_d,w
  9614  1C6B  1803               	btfsc	3,0
  9615  1C6C  0008               	return
  9616                           
  9617                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9618  1C6D  0879               	movf	CC2500_InitPATable@loop_d,w
  9619  1C6E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9620  1C6F  0084               	movwf	4
  9621  1C70  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9622  1C71  1803               	skipnc
  9623  1C72  3E01               	addlw	1
  9624  1C73  0085               	movwf	5
  9625  1C74  0800               	movf	0,w	;code access
  9626  1C75  00F7               	movwf	??_CC2500_InitPATable
  9627  1C76  0877               	movf	??_CC2500_InitPATable,w
  9628  1C77  00F8               	movwf	CC2500_InitPATable@temp
  9629                           
  9630                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9631  1C78  0878               	movf	CC2500_InitPATable@temp,w
  9632  1C79  00F7               	movwf	??_CC2500_InitPATable
  9633  1C7A  0877               	movf	??_CC2500_InitPATable,w
  9634  1C7B  00F4               	movwf	CC2500_WriteREG@value
  9635  1C7C  303E               	movlw	62
  9636  1C7D  319D  250A  319C   	fcall	_CC2500_WriteREG
  9637  1C80  3001               	movlw	1
  9638  1C81  00F7               	movwf	??_CC2500_InitPATable
  9639  1C82  0877               	movf	??_CC2500_InitPATable,w
  9640  1C83  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9641  1C84  2C69               	goto	L5
  9642  1C85                     __end_of_CC2500_InitPATable:	
  9643                           
  9644                           	psect	text46
  9645  1D0A                     __ptext46:	
  9646 ;; *************** function _CC2500_WriteREG *****************
  9647 ;; Defined at:
  9648 ;;		line 258 in file "../src/CC2500_B1.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  w_addr          1    wreg     unsigned char 
  9651 ;;  value           1    4[COMMON] unsigned char 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  w_addr          1    6[COMMON] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;		None               void
  9656 ;; Registers used:
  9657 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9663 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;Total ram usage:        3 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    4
  9670 ;; This function calls:
  9671 ;;		_CC2500_WriteByte
  9672 ;;		_RF_Timeout_Counter
  9673 ;;		_setRF_TimeoutCleared
  9674 ;; This function is called by:
  9675 ;;		_CC2500_InitSetREG
  9676 ;;		_CC2500_InitPATable
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _CC2500_WriteREG
  9682  1D0A                     _CC2500_WriteREG:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9686                           ;CC2500_WriteREG@w_addr stored from wreg
  9687  1D0A  00F6               	movwf	CC2500_WriteREG@w_addr
  9688                           
  9689                           ;CC2500_B1.c: 259: RC4 = 0;
  9690  1D0B  0020               	movlb	0	; select bank0
  9691  1D0C  120E               	bcf	14,4	;volatile
  9692                           
  9693                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9694  1D0D  0876               	movf	CC2500_WriteREG@w_addr,w
  9695  1D0E  00F5               	movwf	??_CC2500_WriteREG
  9696  1D0F  0875               	movf	??_CC2500_WriteREG,w
  9697  1D10  0021               	movlb	1	; select bank1
  9698  1D11  00ED               	movwf	_SPI0Buffer^(0+128)
  9699                           
  9700                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9701  1D12  2D16               	goto	l9817
  9702  1D13                     l9815:	
  9703                           
  9704                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9705  1D13  319A  2294  319D   	fcall	_RF_Timeout_Counter
  9706  1D16                     l9817:	
  9707  1D16  0020               	movlb	0	; select bank0
  9708  1D17  1D0E               	btfss	14,2	;volatile
  9709  1D18  2D1C               	goto	l9821
  9710  1D19  0021               	movlb	1	; select bank1
  9711  1D1A  1F41               	btfss	(_RF1^(0+128)+1),6
  9712  1D1B  2D13               	goto	l9815
  9713  1D1C                     l9821:	
  9714                           
  9715                           ;CC2500_B1.c: 263: };
  9716                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9717  1D1C  31A7  27EF  319D   	fcall	_setRF_TimeoutCleared
  9718                           
  9719                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9720  1D1F  319B  2343  319D   	fcall	_CC2500_WriteByte
  9721                           
  9722                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9723  1D22  0874               	movf	CC2500_WriteREG@value,w
  9724  1D23  00F5               	movwf	??_CC2500_WriteREG
  9725  1D24  0875               	movf	??_CC2500_WriteREG,w
  9726  1D25  0021               	movlb	1	; select bank1
  9727  1D26  00ED               	movwf	_SPI0Buffer^(0+128)
  9728                           
  9729                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9730  1D27  319B  2343         	fcall	_CC2500_WriteByte
  9731                           
  9732                           ;CC2500_B1.c: 269: RC4 = 1;
  9733  1D29  0020               	movlb	0	; select bank0
  9734  1D2A  160E               	bsf	14,4	;volatile
  9735  1D2B  0008               	return
  9736  1D2C                     __end_of_CC2500_WriteREG:	
  9737                           
  9738                           	psect	text47
  9739  18AF                     __ptext47:	
  9740 ;; *************** function _CC2500_FrequencyCabr *****************
  9741 ;; Defined at:
  9742 ;;		line 208 in file "../src/CC2500_B1.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;		None
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;		None
  9747 ;; Return value:  Size  Location     Type
  9748 ;;		None               void
  9749 ;; Registers used:
  9750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        0 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    5
  9763 ;; This function calls:
  9764 ;;		_CC2500_WriteCommand
  9765 ;;		_DelayTime_1us
  9766 ;; This function is called by:
  9767 ;;		_CC2500_PowerOnInitial
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771                           
  9772                           ;psect for function _CC2500_FrequencyCabr
  9773  18AF                     _CC2500_FrequencyCabr:	
  9774                           
  9775                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9776                           
  9777                           ;incstack = 0
  9778                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9779  18AF  3033               	movlw	51
  9780  18B0  319B  2373  3198   	fcall	_CC2500_WriteCommand
  9781                           
  9782                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9783  18B3  30E8               	movlw	232
  9784  18B4  00F2               	movwf	DelayTime_1us@count
  9785  18B5  3003               	movlw	3
  9786  18B6  00F3               	movwf	DelayTime_1us@count+1
  9787  18B7  319D  2574         	fcall	_DelayTime_1us
  9788  18B9  0008               	return
  9789  18BA                     __end_of_CC2500_FrequencyCabr:	
  9790                           
  9791                           	psect	text48
  9792  1D74                     __ptext48:	
  9793 ;; *************** function _DelayTime_1us *****************
  9794 ;; Defined at:
  9795 ;;		line 327 in file "../src/CC2500_B1.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;  count           2    2[COMMON] int 
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;  j               2    6[COMMON] unsigned int 
  9800 ;;  i               2    4[COMMON] unsigned int 
  9801 ;; Return value:  Size  Location     Type
  9802 ;;		None               void
  9803 ;; Registers used:
  9804 ;;		wreg, status,2
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: 0/0
  9809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;Total ram usage:        6 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; Hardware stack levels required when called:    3
  9817 ;; This function calls:
  9818 ;;		Nothing
  9819 ;; This function is called by:
  9820 ;;		_CC2500_PowerRST
  9821 ;;		_CC2500_FrequencyCabr
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _DelayTime_1us
  9827  1D74                     _DelayTime_1us:	
  9828                           
  9829                           ;CC2500_B1.c: 328: unsigned int i, j;
  9830                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9831                           
  9832                           ;incstack = 0
  9833                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9834  1D74  3001               	movlw	1
  9835  1D75  00F4               	movwf	DelayTime_1us@i
  9836  1D76  3000               	movlw	0
  9837  1D77  00F5               	movwf	DelayTime_1us@i+1
  9838  1D78                     l375:	
  9839  1D78  0873               	movf	DelayTime_1us@count+1,w
  9840  1D79  0275               	subwf	DelayTime_1us@i+1,w
  9841  1D7A  1D03               	skipz
  9842  1D7B  2D7E               	goto	u6445
  9843  1D7C  0872               	movf	DelayTime_1us@count,w
  9844  1D7D  0274               	subwf	DelayTime_1us@i,w
  9845  1D7E                     u6445:	
  9846  1D7E  1803               	btfsc	3,0
  9847  1D7F  0008               	return
  9848                           
  9849                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9850  1D80  01F6               	clrf	DelayTime_1us@j
  9851  1D81  01F7               	clrf	DelayTime_1us@j+1
  9852  1D82  3000               	movlw	0
  9853  1D83  0277               	subwf	DelayTime_1us@j+1,w
  9854  1D84  3002               	movlw	2
  9855  1D85  1903               	skipnz
  9856  1D86  0276               	subwf	DelayTime_1us@j,w
  9857  1D87  1803               	btfsc	3,0
  9858  1D88  2D94               	goto	l7185
  9859  1D89                     l7183:	
  9860  1D89  3001               	movlw	1
  9861  1D8A  07F6               	addwf	DelayTime_1us@j,f
  9862  1D8B  3000               	movlw	0
  9863  1D8C  3DF7               	addwfc	DelayTime_1us@j+1,f
  9864  1D8D  3000               	movlw	0
  9865  1D8E  0277               	subwf	DelayTime_1us@j+1,w
  9866  1D8F  3002               	movlw	2
  9867  1D90  1903               	skipnz
  9868  1D91  0276               	subwf	DelayTime_1us@j,w
  9869  1D92  1C03               	skipc
  9870  1D93  2D89               	goto	l7183
  9871  1D94                     l7185:	
  9872  1D94  3001               	movlw	1
  9873  1D95  07F4               	addwf	DelayTime_1us@i,f
  9874  1D96  3000               	movlw	0
  9875  1D97  3DF5               	addwfc	DelayTime_1us@i+1,f
  9876  1D98  2D78               	goto	l375
  9877  1D99                     __end_of_DelayTime_1us:	
  9878                           
  9879                           	psect	text49
  9880  27F7                     __ptext49:	
  9881 ;; *************** function _CC2500_ClearTXFIFO *****************
  9882 ;; Defined at:
  9883 ;;		line 194 in file "../src/CC2500_B1.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;		None
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;		None               void
  9890 ;; Registers used:
  9891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;Total ram usage:        0 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    5
  9904 ;; This function calls:
  9905 ;;		_CC2500_WriteCommand
  9906 ;; This function is called by:
  9907 ;;		_CC2500_PowerOnInitial
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           
  9912                           ;psect for function _CC2500_ClearTXFIFO
  9913  27F7                     _CC2500_ClearTXFIFO:	
  9914                           
  9915                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9916                           
  9917                           ;incstack = 0
  9918                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9919  27F7  303B               	movlw	59
  9920  27F8  319B  2373         	fcall	_CC2500_WriteCommand
  9921  27FA  0008               	return
  9922  27FB                     __end_of_CC2500_ClearTXFIFO:	
  9923                           
  9924                           	psect	text50
  9925  27F3                     __ptext50:	
  9926 ;; *************** function _CC2500_ClearRXFIFO *****************
  9927 ;; Defined at:
  9928 ;;		line 201 in file "../src/CC2500_B1.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;		None
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;		None
  9933 ;; Return value:  Size  Location     Type
  9934 ;;		None               void
  9935 ;; Registers used:
  9936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;Total ram usage:        0 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    5
  9949 ;; This function calls:
  9950 ;;		_CC2500_WriteCommand
  9951 ;; This function is called by:
  9952 ;;		_CC2500_PowerOnInitial
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           
  9957                           ;psect for function _CC2500_ClearRXFIFO
  9958  27F3                     _CC2500_ClearRXFIFO:	
  9959                           
  9960                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9961                           
  9962                           ;incstack = 0
  9963                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9964  27F3  303A               	movlw	58
  9965  27F4  319B  2373         	fcall	_CC2500_WriteCommand
  9966  27F6  0008               	return
  9967  27F7                     __end_of_CC2500_ClearRXFIFO:	
  9968                           
  9969                           	psect	text51
  9970  1B73                     __ptext51:	
  9971 ;; *************** function _CC2500_WriteCommand *****************
  9972 ;; Defined at:
  9973 ;;		line 292 in file "../src/CC2500_B1.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  command         1    wreg     unsigned char 
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;  command         1    5[COMMON] unsigned char 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;		None               void
  9980 ;; Registers used:
  9981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:        2 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    4
  9994 ;; This function calls:
  9995 ;;		_CC2500_WriteByte
  9996 ;;		_RF_Timeout_Counter
  9997 ;;		_setRF_TimeoutCleared
  9998 ;; This function is called by:
  9999 ;;		_CC2500_TxData
 10000 ;;		_CC2500_RxData
 10001 ;;		_CC2500_ClearTXFIFO
 10002 ;;		_CC2500_ClearRXFIFO
 10003 ;;		_CC2500_FrequencyCabr
 10004 ;;		_CC2500_SIDLEMode
 10005 ;;		_setRF_Main
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           
 10010                           ;psect for function _CC2500_WriteCommand
 10011  1B73                     _CC2500_WriteCommand:	
 10012                           
 10013                           ;incstack = 0
 10014                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10015                           ;CC2500_WriteCommand@command stored from wreg
 10016  1B73  00F5               	movwf	CC2500_WriteCommand@command
 10017                           
 10018                           ;CC2500_B1.c: 293: RC4 = 0;
 10019  1B74  0020               	movlb	0	; select bank0
 10020  1B75  120E               	bcf	14,4	;volatile
 10021                           
 10022                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10023  1B76  0875               	movf	CC2500_WriteCommand@command,w
 10024  1B77  00F4               	movwf	??_CC2500_WriteCommand
 10025  1B78  0874               	movf	??_CC2500_WriteCommand,w
 10026  1B79  0021               	movlb	1	; select bank1
 10027  1B7A  00ED               	movwf	_SPI0Buffer^(0+128)
 10028                           
 10029                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10030  1B7B  2B7F               	goto	l9801
 10031  1B7C                     l9799:	
 10032                           
 10033                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10034  1B7C  319A  2294  319B   	fcall	_RF_Timeout_Counter
 10035  1B7F                     l9801:	
 10036  1B7F  0020               	movlb	0	; select bank0
 10037  1B80  1D0E               	btfss	14,2	;volatile
 10038  1B81  2B85               	goto	l9805
 10039  1B82  0021               	movlb	1	; select bank1
 10040  1B83  1F41               	btfss	(_RF1^(0+128)+1),6
 10041  1B84  2B7C               	goto	l9799
 10042  1B85                     l9805:	
 10043                           
 10044                           ;CC2500_B1.c: 298: };
 10045                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10046  1B85  31A7  27EF  319B   	fcall	_setRF_TimeoutCleared
 10047                           
 10048                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10049  1B88  319B  2343         	fcall	_CC2500_WriteByte
 10050                           
 10051                           ;CC2500_B1.c: 302: RC4 = 1;
 10052  1B8A  0020               	movlb	0	; select bank0
 10053  1B8B  160E               	bsf	14,4	;volatile
 10054  1B8C  0008               	return
 10055  1B8D                     __end_of_CC2500_WriteCommand:	
 10056                           
 10057                           	psect	text52
 10058  27EF                     __ptext52:	
 10059 ;; *************** function _setRF_TimeoutCleared *****************
 10060 ;; Defined at:
 10061 ;;		line 150 in file "../src/RF_Control_B1.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;		None
 10064 ;; Auto vars:     Size  Location     Type
 10065 ;;		None
 10066 ;; Return value:  Size  Location     Type
 10067 ;;		None               void
 10068 ;; Registers used:
 10069 ;;		status,2
 10070 ;; Tracked objects:
 10071 ;;		On entry : 0/0
 10072 ;;		On exit  : 0/0
 10073 ;;		Unchanged: 0/0
 10074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;Total ram usage:        0 bytes
 10080 ;; Hardware stack levels used:    1
 10081 ;; Hardware stack levels required when called:    3
 10082 ;; This function calls:
 10083 ;;		Nothing
 10084 ;; This function is called by:
 10085 ;;		_CC2500_TxData
 10086 ;;		_CC2500_RxData
 10087 ;;		_CC2500_PowerRST
 10088 ;;		_CC2500_WriteREG
 10089 ;;		_CC2500_WriteCommand
 10090 ;;		_CC2500_ReadStatus
 10091 ;;		_CC2500_ReadREG
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _setRF_TimeoutCleared
 10097  27EF                     _setRF_TimeoutCleared:	
 10098                           
 10099                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10103  27EF  0021               	movlb	1	; select bank1
 10104  27F0  01CD               	clrf	(_RF1^(0+128)+13)
 10105  27F1  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10106  27F2  0008               	return
 10107  27F3                     __end_of_setRF_TimeoutCleared:	
 10108                           
 10109                           	psect	text53
 10110  1A94                     __ptext53:	
 10111 ;; *************** function _RF_Timeout_Counter *****************
 10112 ;; Defined at:
 10113 ;;		line 142 in file "../src/RF_Control_B1.c"
 10114 ;; Parameters:    Size  Location     Type
 10115 ;;		None
 10116 ;; Auto vars:     Size  Location     Type
 10117 ;;		None
 10118 ;; Return value:  Size  Location     Type
 10119 ;;		None               void
 10120 ;; Registers used:
 10121 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10122 ;; Tracked objects:
 10123 ;;		On entry : 0/0
 10124 ;;		On exit  : 0/0
 10125 ;;		Unchanged: 0/0
 10126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10131 ;;Total ram usage:        0 bytes
 10132 ;; Hardware stack levels used:    1
 10133 ;; Hardware stack levels required when called:    3
 10134 ;; This function calls:
 10135 ;;		Nothing
 10136 ;; This function is called by:
 10137 ;;		_CC2500_TxData
 10138 ;;		_CC2500_RxData
 10139 ;;		_CC2500_PowerRST
 10140 ;;		_CC2500_WriteREG
 10141 ;;		_CC2500_WriteCommand
 10142 ;;		_CC2500_ReadStatus
 10143 ;;		_CC2500_ReadREG
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           
 10148                           ;psect for function _RF_Timeout_Counter
 10149  1A94                     _RF_Timeout_Counter:	
 10150                           
 10151                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
 10152                           
 10153                           ;incstack = 0
 10154                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10155  1A94  3001               	movlw	1
 10156  1A95  0021               	movlb	1	; select bank1
 10157  1A96  07CD               	addwf	(_RF1^(0+128)+13),f
 10158  1A97  3000               	movlw	0
 10159  1A98  3DCE               	addwfc	((_RF1+1)^(0+128)+13),f
 10160                           
 10161                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
 10162  1A99  300D               	movlw	13
 10163  1A9A  3EC0               	addlw	_RF1& (0+255)
 10164  1A9B  0086               	movwf	6
 10165  1A9C  0187               	clrf	7
 10166  1A9D  3F40               	moviw [0]fsr1
 10167  1A9E  3AA8               	xorlw	168
 10168  1A9F  1D03               	skipz
 10169  1AA0  2AA3               	goto	u10465
 10170  1AA1  3F41               	moviw [1]fsr1
 10171  1AA2  3A61               	xorlw	97
 10172  1AA3                     u10465:	
 10173  1AA3  1D03               	skipz
 10174  1AA4  0008               	return
 10175                           
 10176                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10177  1AA5  01CD               	clrf	(_RF1^(0+128)+13)
 10178  1AA6  01CE               	clrf	((_RF1+1)^(0+128)+13)
 10179                           
 10180                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
 10181  1AA7  1741               	bsf	(_RF1^(0+128)+1),6
 10182  1AA8  0008               	return
 10183  1AA9                     __end_of_RF_Timeout_Counter:	
 10184                           
 10185                           	psect	text54
 10186  1B43                     __ptext54:	
 10187 ;; *************** function _CC2500_WriteByte *****************
 10188 ;; Defined at:
 10189 ;;		line 226 in file "../src/CC2500_B1.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  loop_a          1    3[COMMON] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        2 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    3
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_CC2500_TxData
 10214 ;;		_CC2500_RxData
 10215 ;;		_CC2500_PowerRST
 10216 ;;		_CC2500_WriteREG
 10217 ;;		_CC2500_WriteCommand
 10218 ;;		_CC2500_ReadStatus
 10219 ;;		_CC2500_ReadREG
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           
 10224                           ;psect for function _CC2500_WriteByte
 10225  1B43                     _CC2500_WriteByte:	
 10226                           
 10227                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10228                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10232  1B43  01F3               	clrf	CC2500_WriteByte@loop_a
 10233  1B44                     L6:	
 10234  1B44  3008               	movlw	8
 10235  1B45  0273               	subwf	CC2500_WriteByte@loop_a,w
 10236  1B46  1803               	btfsc	3,0
 10237  1B47  0008               	return
 10238                           
 10239                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10240  1B48  0021               	movlb	1	; select bank1
 10241  1B49  1FED               	btfss	_SPI0Buffer^(0+128),7
 10242  1B4A  2B4E               	goto	l331
 10243                           
 10244                           ;CC2500_B1.c: 230: RC0 = 1;
 10245  1B4B  0020               	movlb	0	; select bank0
 10246  1B4C  140E               	bsf	14,0	;volatile
 10247  1B4D  2B50               	goto	l332
 10248  1B4E                     l331:	
 10249                           
 10250                           ;CC2500_B1.c: 231: else
 10251                           ;CC2500_B1.c: 232: RC0 = 0;
 10252  1B4E  0020               	movlb	0	; select bank0
 10253  1B4F  100E               	bcf	14,0	;volatile
 10254  1B50                     l332:	
 10255                           
 10256                           ;CC2500_B1.c: 233: RC1 = 1;
 10257  1B50  148E               	bsf	14,1	;volatile
 10258                           
 10259                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10260  1B51  1003               	clrc
 10261  1B52  0021               	movlb	1	; select bank1
 10262  1B53  0DED               	rlf	_SPI0Buffer^(0+128),f
 10263                           
 10264                           ;CC2500_B1.c: 235: RC1 = 0;
 10265  1B54  0020               	movlb	0	; select bank0
 10266  1B55  108E               	bcf	14,1	;volatile
 10267  1B56  3001               	movlw	1
 10268  1B57  00F2               	movwf	??_CC2500_WriteByte
 10269  1B58  0872               	movf	??_CC2500_WriteByte,w
 10270  1B59  07F3               	addwf	CC2500_WriteByte@loop_a,f
 10271  1B5A  2B44               	goto	L6
 10272  1B5B                     __end_of_CC2500_WriteByte:	
 10273                           
 10274                           	psect	text55
 10275  27DF                     __ptext55:	
 10276 ;; *************** function _RF_Initialization *****************
 10277 ;; Defined at:
 10278 ;;		line 9 in file "../src/RF_Control_B1.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;		None               void
 10285 ;; Registers used:
 10286 ;;		wreg, status,2, status,0, pclath, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    4
 10299 ;; This function calls:
 10300 ;;		_setRF_Initialization
 10301 ;; This function is called by:
 10302 ;;		_main
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           
 10307                           ;psect for function _RF_Initialization
 10308  27DF                     _RF_Initialization:	
 10309                           
 10310                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10314  27DF  3198  2084         	fcall	_setRF_Initialization
 10315  27E1  0008               	return
 10316  27E2                     __end_of_RF_Initialization:	
 10317                           
 10318                           	psect	text56
 10319  1884                     __ptext56:	
 10320 ;; *************** function _setRF_Initialization *****************
 10321 ;; Defined at:
 10322 ;;		line 17 in file "../src/RF_Control_B1.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;		None               void
 10329 ;; Registers used:
 10330 ;;		wreg
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;Total ram usage:        1 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    3
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_RF_Initialization
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           
 10351                           ;psect for function _setRF_Initialization
 10352  1884                     _setRF_Initialization:	
 10353                           
 10354                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10355                           
 10356                           ;incstack = 0
 10357                           ; Regs used in _setRF_Initialization: [wreg]
 10358  1884  3015               	movlw	21
 10359  1885  00F2               	movwf	??_setRF_Initialization
 10360  1886  0872               	movf	??_setRF_Initialization,w
 10361  1887  0021               	movlb	1	; select bank1
 10362  1888  00EE               	movwf	_Tx_Length^(0+128)
 10363                           
 10364                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10365  1889  30C8               	movlw	200
 10366  188A  00C8               	movwf	(_RF1^(0+128)+8)
 10367  188B  3000               	movlw	0
 10368  188C  00C9               	movwf	(_RF1^(0+128)+9)
 10369  188D  0008               	return
 10370  188E                     __end_of_setRF_Initialization:	
 10371                           
 10372                           	psect	text57
 10373  1A1A                     __ptext57:	
 10374 ;; *************** function _Mcu_Initialization *****************
 10375 ;; Defined at:
 10376 ;;		line 30 in file "../src/MCU_B1.c"
 10377 ;; Parameters:    Size  Location     Type
 10378 ;;		None
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;		None
 10381 ;; Return value:  Size  Location     Type
 10382 ;;		None               void
 10383 ;; Registers used:
 10384 ;;		wreg, status,2, status,0, pclath, cstack
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        0 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; Hardware stack levels required when called:    4
 10397 ;; This function calls:
 10398 ;;		_ADC_Set
 10399 ;;		_Fosc_Set
 10400 ;;		_IOC_Set
 10401 ;;		_IO_Set
 10402 ;;		_TMR1_Set
 10403 ;;		_WDT_Set
 10404 ;; This function is called by:
 10405 ;;		_main
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           
 10410                           ;psect for function _Mcu_Initialization
 10411  1A1A                     _Mcu_Initialization:	
 10412                           
 10413                           ;MCU_B1.c: 32: Fosc_Set();
 10414                           
 10415                           ;incstack = 0
 10416                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10417  1A1A  31A7  27EB  319A   	fcall	_Fosc_Set
 10418                           
 10419                           ;MCU_B1.c: 34: IO_Set();
 10420  1A1D  319B  23F7  319A   	fcall	_IO_Set
 10421                           
 10422                           ;MCU_B1.c: 36: ;;
 10423                           ;MCU_B1.c: 38: TMR1_Set();
 10424  1A20  3198  20F6  319A   	fcall	_TMR1_Set
 10425                           
 10426                           ;MCU_B1.c: 40: ADC_Set();
 10427  1A23  3198  2031  319A   	fcall	_ADC_Set
 10428                           
 10429                           ;MCU_B1.c: 42: ;;
 10430                           ;MCU_B1.c: 44: ;;
 10431                           ;MCU_B1.c: 46: IOC_Set();
 10432  1A26  3198  20A4  319A   	fcall	_IOC_Set
 10433                           
 10434                           ;MCU_B1.c: 48: ;;
 10435                           ;MCU_B1.c: 50: ;;
 10436                           ;MCU_B1.c: 52: WDT_Set();
 10437  1A29  3198  207A         	fcall	_WDT_Set
 10438  1A2B  0008               	return
 10439  1A2C                     __end_of_Mcu_Initialization:	
 10440                           
 10441                           	psect	text58
 10442  187A                     __ptext58:	
 10443 ;; *************** function _WDT_Set *****************
 10444 ;; Defined at:
 10445 ;;		line 1107 in file "../src/MCU_B1.c"
 10446 ;; Parameters:    Size  Location     Type
 10447 ;;		None
 10448 ;; Auto vars:     Size  Location     Type
 10449 ;;		None
 10450 ;; Return value:  Size  Location     Type
 10451 ;;		None               void
 10452 ;; Registers used:
 10453 ;;		wreg
 10454 ;; Tracked objects:
 10455 ;;		On entry : 0/0
 10456 ;;		On exit  : 0/0
 10457 ;;		Unchanged: 0/0
 10458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;Total ram usage:        1 bytes
 10464 ;; Hardware stack levels used:    1
 10465 ;; Hardware stack levels required when called:    3
 10466 ;; This function calls:
 10467 ;;		Nothing
 10468 ;; This function is called by:
 10469 ;;		_Mcu_Initialization
 10470 ;; This function uses a non-reentrant model
 10471 ;;
 10472                           
 10473                           
 10474                           ;psect for function _WDT_Set
 10475  187A                     _WDT_Set:	
 10476                           
 10477                           ;MCU_B1.c: 1114: WDTCON = 0b00010111;;
 10478                           
 10479                           ;incstack = 0
 10480                           ; Regs used in _WDT_Set: [wreg]
 10481  187A  3017               	movlw	23
 10482  187B  0021               	movlb	1	; select bank1
 10483  187C  0097               	movwf	23	;volatile
 10484                           
 10485                           ;MCU_B1.c: 1116: WDT.Enable = 1;
 10486  187D  0022               	movlb	2	; select bank2
 10487  187E  142A               	bsf	_WDT^(0+256),0
 10488                           
 10489                           ;MCU_B1.c: 1117: WDT.Timer = 10;
 10490  187F  300A               	movlw	10
 10491  1880  00F2               	movwf	??_WDT_Set
 10492  1881  0872               	movf	??_WDT_Set,w
 10493  1882  00AB               	movwf	(_WDT^(0+256)+1)
 10494  1883  0008               	return
 10495  1884                     __end_of_WDT_Set:	
 10496                           
 10497                           	psect	text59
 10498  18F6                     __ptext59:	
 10499 ;; *************** function _TMR1_Set *****************
 10500 ;; Defined at:
 10501 ;;		line 226 in file "../src/MCU_B1.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;		None
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;		None
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		wreg
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10519 ;;Total ram usage:        0 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    3
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_Mcu_Initialization
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _TMR1_Set
 10531  18F6                     _TMR1_Set:	
 10532                           
 10533                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _TMR1_Set: [wreg]
 10537  18F6  3041               	movlw	65
 10538  18F7  0020               	movlb	0	; select bank0
 10539  18F8  0098               	movwf	24	;volatile
 10540                           
 10541                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10542  18F9  30FA               	movlw	250
 10543  18FA  0097               	movwf	23	;volatile
 10544                           
 10545                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10546  18FB  3038               	movlw	56
 10547  18FC  0096               	movwf	22	;volatile
 10548                           
 10549                           ;MCU_B1.c: 230: TMR1IE = 1;
 10550  18FD  0021               	movlb	1	; select bank1
 10551  18FE  1411               	bsf	17,0	;volatile
 10552                           
 10553                           ;MCU_B1.c: 231: PEIE = 1;
 10554  18FF  170B               	bsf	11,6	;volatile
 10555                           
 10556                           ;MCU_B1.c: 232: GIE = 1;
 10557  1900  178B               	bsf	11,7	;volatile
 10558  1901  0008               	return
 10559  1902                     __end_of_TMR1_Set:	
 10560                           
 10561                           	psect	text60
 10562  1BF7                     __ptext60:	
 10563 ;; *************** function _IO_Set *****************
 10564 ;; Defined at:
 10565 ;;		line 60 in file "../src/MCU_B1.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;		None
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;		None               void
 10572 ;; Registers used:
 10573 ;;		wreg, status,2
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;Total ram usage:        0 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    3
 10586 ;; This function calls:
 10587 ;;		Nothing
 10588 ;; This function is called by:
 10589 ;;		_Mcu_Initialization
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           
 10594                           ;psect for function _IO_Set
 10595  1BF7                     _IO_Set:	
 10596                           
 10597                           ;MCU_B1.c: 92: TRISA = 0b01010111;;
 10598                           
 10599                           ;incstack = 0
 10600                           ; Regs used in _IO_Set: [wreg+status,2]
 10601  1BF7  3057               	movlw	87
 10602  1BF8  0021               	movlb	1	; select bank1
 10603  1BF9  008C               	movwf	12	;volatile
 10604                           
 10605                           ;MCU_B1.c: 93: TRISB = 0b00000101;;
 10606  1BFA  3005               	movlw	5
 10607  1BFB  008D               	movwf	13	;volatile
 10608                           
 10609                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10610  1BFC  300C               	movlw	12
 10611  1BFD  008E               	movwf	14	;volatile
 10612                           
 10613                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10614  1BFE  0022               	movlb	2	; select bank2
 10615  1BFF  018C               	clrf	12	;volatile
 10616                           
 10617                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10618  1C00  3002               	movlw	2
 10619  1C01  008D               	movwf	13	;volatile
 10620                           
 10621                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10622  1C02  018E               	clrf	14	;volatile
 10623                           
 10624                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10625  1C03  3022               	movlw	34
 10626  1C04  0023               	movlb	3	; select bank3
 10627  1C05  008C               	movwf	12	;volatile
 10628                           
 10629                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10630  1C06  018D               	clrf	13	;volatile
 10631                           
 10632                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10633  1C07  018E               	clrf	14	;volatile
 10634                           
 10635                           ;MCU_B1.c: 104: PORTA = 0b01010111;;
 10636  1C08  3057               	movlw	87
 10637  1C09  0020               	movlb	0	; select bank0
 10638  1C0A  008C               	movwf	12	;volatile
 10639                           
 10640                           ;MCU_B1.c: 105: PORTB = 0b00000101;;
 10641  1C0B  3005               	movlw	5
 10642  1C0C  008D               	movwf	13	;volatile
 10643                           
 10644                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10645  1C0D  300C               	movlw	12
 10646  1C0E  008E               	movwf	14	;volatile
 10647                           
 10648                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10649  1C0F  0024               	movlb	4	; select bank4
 10650  1C10  018D               	clrf	13	;volatile
 10651  1C11  0008               	return
 10652  1C12                     __end_of_IO_Set:	
 10653                           
 10654                           	psect	text61
 10655  18A4                     __ptext61:	
 10656 ;; *************** function _IOC_Set *****************
 10657 ;; Defined at:
 10658 ;;		line 381 in file "../src/MCU_B1.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;		None
 10661 ;; Auto vars:     Size  Location     Type
 10662 ;;		None
 10663 ;; Return value:  Size  Location     Type
 10664 ;;		None               void
 10665 ;; Registers used:
 10666 ;;		wreg, status,2
 10667 ;; Tracked objects:
 10668 ;;		On entry : 0/0
 10669 ;;		On exit  : 0/0
 10670 ;;		Unchanged: 0/0
 10671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;Total ram usage:        0 bytes
 10677 ;; Hardware stack levels used:    1
 10678 ;; Hardware stack levels required when called:    3
 10679 ;; This function calls:
 10680 ;;		Nothing
 10681 ;; This function is called by:
 10682 ;;		_Mcu_Initialization
 10683 ;; This function uses a non-reentrant model
 10684 ;;
 10685                           
 10686                           
 10687                           ;psect for function _IOC_Set
 10688  18A4                     _IOC_Set:	
 10689                           
 10690                           ;MCU_B1.c: 383: IOCBP = 0b00000100;;
 10691                           
 10692                           ;incstack = 0
 10693                           ; Regs used in _IOC_Set: [wreg+status,2]
 10694  18A4  3004               	movlw	4
 10695  18A5  0027               	movlb	7	; select bank7
 10696  18A6  0094               	movwf	20	;volatile
 10697                           
 10698                           ;MCU_B1.c: 384: IOCBN = 0b00000100;;
 10699  18A7  3004               	movlw	4
 10700  18A8  0095               	movwf	21	;volatile
 10701                           
 10702                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
 10703  18A9  0196               	clrf	22	;volatile
 10704                           
 10705                           ;MCU_B1.c: 388: IOCIE = 1;
 10706  18AA  158B               	bsf	11,3	;volatile
 10707                           
 10708                           ;MCU_B1.c: 389: IOCIF = 0;
 10709  18AB  100B               	bcf	11,0	;volatile
 10710                           
 10711                           ;MCU_B1.c: 390: PEIE = 1;
 10712  18AC  170B               	bsf	11,6	;volatile
 10713                           
 10714                           ;MCU_B1.c: 391: GIE = 1;
 10715  18AD  178B               	bsf	11,7	;volatile
 10716  18AE  0008               	return
 10717  18AF                     __end_of_IOC_Set:	
 10718                           
 10719                           	psect	text62
 10720  27EB                     __ptext62:	
 10721 ;; *************** function _Fosc_Set *****************
 10722 ;; Defined at:
 10723 ;;		line 56 in file "../src/MCU_B1.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;		None
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;		None               void
 10730 ;; Registers used:
 10731 ;;		wreg
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;Total ram usage:        0 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:    3
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		_Mcu_Initialization
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           
 10752                           ;psect for function _Fosc_Set
 10753  27EB                     _Fosc_Set:	
 10754                           
 10755                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in _Fosc_Set: [wreg]
 10759  27EB  3078               	movlw	120
 10760  27EC  0021               	movlb	1	; select bank1
 10761  27ED  0099               	movwf	25	;volatile
 10762  27EE  0008               	return
 10763  27EF                     __end_of_Fosc_Set:	
 10764                           
 10765                           	psect	text63
 10766  1831                     __ptext63:	
 10767 ;; *************** function _ADC_Set *****************
 10768 ;; Defined at:
 10769 ;;		line 429 in file "../src/MCU_B1.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;		None
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;		None
 10774 ;; Return value:  Size  Location     Type
 10775 ;;		None               void
 10776 ;; Registers used:
 10777 ;;		wreg
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;Total ram usage:        0 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    3
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_Mcu_Initialization
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           
 10798                           ;psect for function _ADC_Set
 10799  1831                     _ADC_Set:	
 10800                           
 10801                           ;MCU_B1.c: 430: ADCON1 = 0xf3;
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _ADC_Set: [wreg]
 10805  1831  30F3               	movlw	243
 10806  1832  0021               	movlb	1	; select bank1
 10807  1833  009E               	movwf	30	;volatile
 10808                           
 10809                           ;MCU_B1.c: 431: FVRCON = 0xc1;
 10810  1834  30C1               	movlw	193
 10811  1835  0022               	movlb	2	; select bank2
 10812  1836  0097               	movwf	23	;volatile
 10813  1837  0008               	return
 10814  1838                     __end_of_ADC_Set:	
 10815                           
 10816                           	psect	text64
 10817  0053                     __ptext64:	
 10818 ;; *************** function _Load_Main *****************
 10819 ;; Defined at:
 10820 ;;		line 40 in file "../src/OverLoad_B1.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;  i               2    8[BANK0 ] int 
 10825 ;;  LightsCount     1    7[BANK0 ] unsigned char 
 10826 ;;  Load_RunStat    1    6[BANK0 ] unsigned char 
 10827 ;;  ErrorCountVa    1    5[BANK0 ] unsigned char 
 10828 ;;  error           1    2[BANK0 ] unsigned char 
 10829 ;; Return value:  Size  Location     Type
 10830 ;;		None               void
 10831 ;; Registers used:
 10832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10833 ;; Tracked objects:
 10834 ;;		On entry : 0/0
 10835 ;;		On exit  : 0/0
 10836 ;;		Unchanged: 0/0
 10837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;Total ram usage:       10 bytes
 10843 ;; Hardware stack levels used:    1
 10844 ;; Hardware stack levels required when called:    4
 10845 ;; This function calls:
 10846 ;;		___lwdiv
 10847 ;;		___wmul
 10848 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10849 ;;		_getDimmer_LoadGO
 10850 ;;		_getDimmer_Load_Status
 10851 ;;		_getMain_All_Error_Status
 10852 ;;		_getMain_All_LightsStatus
 10853 ;;		_getMain_Lights_Count
 10854 ;;		_setLoad_AH_AL_Restore
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _Load_Main
 10862  0053                     _Load_Main:	
 10863                           
 10864                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10868  0053  3000               	movlw	0
 10869  0054  319E  263C  3180   	fcall	_getMain_All_Error_Status
 10870  0057  0020               	movlb	0	; select bank0
 10871  0058  00A0               	movwf	??_Load_Main
 10872  0059  0820               	movf	??_Load_Main,w
 10873  005A  00A2               	movwf	Load_Main@error
 10874                           
 10875                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10876  005B  01A6               	clrf	Load_Main@Load_RunStatus
 10877  005C  01A5               	clrf	Load_Main@ErrorCountValue
 10878  005D  01A7               	clrf	Load_Main@LightsCount
 10879                           
 10880                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10881  005E  0022               	movlb	2	; select bank2
 10882  005F  1C32               	btfss	_Load^(0+256),0
 10883  0060  29ED               	goto	l1906
 10884                           
 10885                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10886  0061  3199  2159  3180   	fcall	_getMain_All_LightsStatus
 10887  0064  3800               	iorlw	0
 10888  0065  1D03               	skipz
 10889  0066  2869               	goto	l10989
 10890                           
 10891                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10892  0067  0022               	movlb	2	; select bank2
 10893  0068  288A               	goto	l11007
 10894  0069                     l10989:	
 10895                           ;OverLoad_B1.c: 47: } else {
 10896                           
 10897                           
 10898                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10899  0069  0020               	movlb	0	; select bank0
 10900  006A  08A2               	movf	Load_Main@error,f
 10901  006B  1D03               	skipz
 10902  006C  2887               	goto	l1909
 10903  006D  319B  23DC  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10904  0070  3800               	iorlw	0
 10905  0071  1D03               	skipz
 10906  0072  2887               	goto	l1909
 10907                           
 10908                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10909  0073  0022               	movlb	2	; select bank2
 10910  0074  14B2               	bsf	_Load^(0+256),1
 10911                           
 10912                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10913  0075  3198  2023  3180   	fcall	_getDimmer_LoadGO
 10914  0078  3A01               	xorlw	1
 10915  0079  1D03               	skipz
 10916  007A  2882               	goto	l1910
 10917                           
 10918                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10919  007B  0022               	movlb	2	; select bank2
 10920  007C  1DB2               	btfss	_Load^(0+256),3
 10921  007D  1BB2               	btfsc	_Load^(0+256),7
 10922  007E  288B               	goto	l1908
 10923                           
 10924                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10925  007F  15B2               	bsf	_Load^(0+256),3
 10926                           
 10927                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10928  0080  01D7               	clrf	(_Load^(0+256)+37)
 10929                           
 10930                           ;OverLoad_B1.c: 57: }
 10931                           ;OverLoad_B1.c: 58: } else {
 10932  0081  288B               	goto	l1908
 10933  0082                     l1910:	
 10934                           
 10935                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10936  0082  0022               	movlb	2	; select bank2
 10937  0083  1FB2               	btfss	_Load^(0+256),7
 10938  0084  288B               	goto	l1908
 10939                           
 10940                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10941  0085  13B2               	bcf	_Load^(0+256),7
 10942                           
 10943                           ;OverLoad_B1.c: 61: }
 10944                           ;OverLoad_B1.c: 62: }
 10945                           ;OverLoad_B1.c: 63: } else {
 10946  0086  288B               	goto	l1908
 10947  0087                     l1909:	
 10948                           
 10949                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10950  0087  0022               	movlb	2	; select bank2
 10951  0088  1CB2               	btfss	_Load^(0+256),1
 10952  0089  288B               	goto	l1908
 10953  008A                     l11007:	
 10954                           
 10955                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10956  008A  10B2               	bcf	_Load^(0+256),1
 10957  008B                     l1908:	
 10958                           
 10959                           ;OverLoad_B1.c: 66: }
 10960                           ;OverLoad_B1.c: 67: }
 10961                           ;OverLoad_B1.c: 89: }
 10962                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10963  008B  1CB2               	btfss	_Load^(0+256),1
 10964  008C  29C9               	goto	l1916
 10965                           
 10966                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10967  008D  1532               	bsf	_Load^(0+256),2
 10968                           
 10969                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10970  008E  1E32               	btfss	_Load^(0+256),4
 10971  008F  29C7               	goto	l1917
 10972                           
 10973                           ;OverLoad_B1.c: 96: Load.Time++;
 10974  0090  3001               	movlw	1
 10975  0091  07B3               	addwf	(_Load^(0+256)+1),f
 10976  0092  3000               	movlw	0
 10977  0093  3DB4               	addwfc	((_Load+1)^(0+256)+1),f
 10978                           
 10979                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10980  0094  3000               	movlw	0
 10981  0095  0234               	subwf	((_Load+1)^(0+256)+1),w
 10982  0096  3002               	movlw	2
 10983  0097  1903               	skipnz
 10984  0098  0233               	subwf	(_Load^(0+256)+1),w
 10985  0099  1C03               	skipc
 10986  009A  0008               	return
 10987                           
 10988                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10989  009B  01B3               	clrf	(_Load^(0+256)+1)
 10990  009C  01B4               	clrf	((_Load+1)^(0+256)+1)
 10991                           
 10992                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10993  009D  1232               	bcf	_Load^(0+256),4
 10994                           
 10995                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10996  009E  3001               	movlw	1
 10997  009F  0020               	movlb	0	; select bank0
 10998  00A0  00A8               	movwf	Load_Main@i
 10999  00A1  3000               	movlw	0
 11000  00A2  00A9               	movwf	Load_Main@i+1
 11001  00A3  0829               	movf	Load_Main@i+1,w
 11002  00A4  3A80               	xorlw	128
 11003  00A5  00A0               	movwf	??_Load_Main
 11004  00A6  3080               	movlw	128
 11005  00A7  0220               	subwf	??_Load_Main,w
 11006  00A8  1D03               	skipz
 11007  00A9  28AC               	goto	u12505
 11008  00AA  3004               	movlw	4
 11009  00AB  0228               	subwf	Load_Main@i,w
 11010  00AC                     u12505:	
 11011  00AC  1803               	btfsc	3,0
 11012  00AD  28E0               	goto	l11029
 11013  00AE                     l11023:	
 11014                           
 11015                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11016  00AE  0020               	movlb	0	; select bank0
 11017  00AF  3528               	lslf	Load_Main@i,w
 11018  00B0  3E3D               	addlw	(_Load+11)& (0+255)
 11019  00B1  0086               	movwf	6
 11020  00B2  3001               	movlw	1	; select bank2/3
 11021  00B3  0087               	movwf	7
 11022  00B4  3F40               	moviw [0]fsr1
 11023  00B5  00A0               	movwf	??_Load_Main
 11024  00B6  3F41               	moviw [1]fsr1
 11025  00B7  00A1               	movwf	??_Load_Main+1
 11026  00B8  0820               	movf	??_Load_Main,w
 11027  00B9  0022               	movlb	2	; select bank2
 11028  00BA  07B7               	addwf	(_Load^(0+256)+5),f
 11029  00BB  0020               	movlb	0	; select bank0
 11030  00BC  0821               	movf	??_Load_Main+1,w
 11031  00BD  0022               	movlb	2	; select bank2
 11032  00BE  3DB8               	addwfc	((_Load+1)^(0+256)+5),f
 11033                           
 11034                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11035  00BF  0020               	movlb	0	; select bank0
 11036  00C0  3528               	lslf	Load_Main@i,w
 11037  00C1  3E47               	addlw	(_Load+21)& (0+255)
 11038  00C2  0086               	movwf	6
 11039  00C3  3001               	movlw	1	; select bank2/3
 11040  00C4  0087               	movwf	7
 11041  00C5  3F40               	moviw [0]fsr1
 11042  00C6  00A0               	movwf	??_Load_Main
 11043  00C7  3F41               	moviw [1]fsr1
 11044  00C8  00A1               	movwf	??_Load_Main+1
 11045  00C9  0820               	movf	??_Load_Main,w
 11046  00CA  0022               	movlb	2	; select bank2
 11047  00CB  07B9               	addwf	(_Load^(0+256)+7),f
 11048  00CC  0020               	movlb	0	; select bank0
 11049  00CD  0821               	movf	??_Load_Main+1,w
 11050  00CE  0022               	movlb	2	; select bank2
 11051  00CF  3DBA               	addwfc	((_Load+1)^(0+256)+7),f
 11052  00D0  3001               	movlw	1
 11053  00D1  0020               	movlb	0	; select bank0
 11054  00D2  07A8               	addwf	Load_Main@i,f
 11055  00D3  3000               	movlw	0
 11056  00D4  3DA9               	addwfc	Load_Main@i+1,f
 11057  00D5  0829               	movf	Load_Main@i+1,w
 11058  00D6  3A80               	xorlw	128
 11059  00D7  00A0               	movwf	??_Load_Main
 11060  00D8  3080               	movlw	128
 11061  00D9  0220               	subwf	??_Load_Main,w
 11062  00DA  1D03               	skipz
 11063  00DB  28DE               	goto	u12515
 11064  00DC  3004               	movlw	4
 11065  00DD  0228               	subwf	Load_Main@i,w
 11066  00DE                     u12515:	
 11067  00DE  1C03               	skipc
 11068  00DF  28AE               	goto	l11023
 11069  00E0                     l11029:	
 11070                           
 11071                           ;OverLoad_B1.c: 104: }
 11072                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11073  00E0  3003               	movlw	3
 11074  00E1  00F2               	movwf	___lwdiv@divisor
 11075  00E2  3000               	movlw	0
 11076  00E3  00F3               	movwf	___lwdiv@divisor+1
 11077  00E4  0022               	movlb	2	; select bank2
 11078  00E5  0838               	movf	((_Load+1)^(0+256)+5),w
 11079  00E6  01F5               	clrf	___lwdiv@dividend+1
 11080  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 11081  00E8  0837               	movf	(_Load^(0+256)+5),w
 11082  00E9  01F4               	clrf	___lwdiv@dividend
 11083  00EA  07F4               	addwf	___lwdiv@dividend,f
 11084  00EB  319F  275D  3180   	fcall	___lwdiv
 11085  00EE  0873               	movf	?___lwdiv+1,w
 11086  00EF  0022               	movlb	2	; select bank2
 11087  00F0  01B8               	clrf	((_Load+1)^(0+256)+5)
 11088  00F1  07B8               	addwf	((_Load+1)^(0+256)+5),f
 11089  00F2  0872               	movf	?___lwdiv,w
 11090  00F3  01B7               	clrf	(_Load^(0+256)+5)
 11091  00F4  07B7               	addwf	(_Load^(0+256)+5),f
 11092                           
 11093                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11094  00F5  3003               	movlw	3
 11095  00F6  00F2               	movwf	___lwdiv@divisor
 11096  00F7  3000               	movlw	0
 11097  00F8  00F3               	movwf	___lwdiv@divisor+1
 11098  00F9  083A               	movf	((_Load+1)^(0+256)+7),w
 11099  00FA  01F5               	clrf	___lwdiv@dividend+1
 11100  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 11101  00FC  0839               	movf	(_Load^(0+256)+7),w
 11102  00FD  01F4               	clrf	___lwdiv@dividend
 11103  00FE  07F4               	addwf	___lwdiv@dividend,f
 11104  00FF  319F  275D  3180   	fcall	___lwdiv
 11105  0102  0873               	movf	?___lwdiv+1,w
 11106  0103  0022               	movlb	2	; select bank2
 11107  0104  01BA               	clrf	((_Load+1)^(0+256)+7)
 11108  0105  07BA               	addwf	((_Load+1)^(0+256)+7),f
 11109  0106  0872               	movf	?___lwdiv,w
 11110  0107  01B9               	clrf	(_Load^(0+256)+7)
 11111  0108  07B9               	addwf	(_Load^(0+256)+7),f
 11112                           
 11113                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11114  0109  319B  23C1  3180   	fcall	_setLoad_AH_AL_Restore
 11115                           
 11116                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11117  010C  0022               	movlb	2	; select bank2
 11118  010D  083A               	movf	((_Load+1)^(0+256)+7),w
 11119  010E  0238               	subwf	((_Load+1)^(0+256)+5),w
 11120  010F  1D03               	skipz
 11121  0110  2913               	goto	u12525
 11122  0111  0839               	movf	(_Load^(0+256)+7),w
 11123  0112  0237               	subwf	(_Load^(0+256)+5),w
 11124  0113                     u12525:	
 11125  0113  1C03               	skipc
 11126  0114  0008               	return
 11127                           
 11128                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11129  0115  3005               	movlw	5
 11130  0116  3E32               	addlw	_Load& (0+255)
 11131  0117  0086               	movwf	6
 11132  0118  3001               	movlw	1	; select bank2/3
 11133  0119  0087               	movwf	7
 11134  011A  0939               	comf	(_Load^(0+256)+7),w
 11135  011B  0020               	movlb	0	; select bank0
 11136  011C  00A0               	movwf	??_Load_Main
 11137  011D  0022               	movlb	2	; select bank2
 11138  011E  093A               	comf	((_Load+1)^(0+256)+7),w
 11139  011F  0020               	movlb	0	; select bank0
 11140  0120  00A1               	movwf	??_Load_Main+1
 11141  0121  0AA0               	incf	??_Load_Main,f
 11142  0122  1903               	skipnz
 11143  0123  0AA1               	incf	??_Load_Main+1,f
 11144  0124  3F40               	moviw [0]fsr1
 11145  0125  0720               	addwf	??_Load_Main,w
 11146  0126  0022               	movlb	2	; select bank2
 11147  0127  00D1               	movwf	(_Load^(0+256)+31)
 11148  0128  3F41               	moviw [1]fsr1
 11149  0129  0020               	movlb	0	; select bank0
 11150  012A  3D21               	addwfc	??_Load_Main+1,w
 11151  012B  0022               	movlb	2	; select bank2
 11152  012C  00D2               	movwf	(_Load^(0+256)+32)
 11153                           
 11154                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11155  012D  01B7               	clrf	(_Load^(0+256)+5)
 11156  012E  01B8               	clrf	((_Load+1)^(0+256)+5)
 11157                           
 11158                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11159  012F  01B9               	clrf	(_Load^(0+256)+7)
 11160  0130  01BA               	clrf	((_Load+1)^(0+256)+7)
 11161                           
 11162                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11163  0131  1DB2               	btfss	_Load^(0+256),3
 11164  0132  2989               	goto	l11069
 11165                           
 11166                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11167  0133  3002               	movlw	2
 11168  0134  0257               	subwf	(_Load^(0+256)+37),w
 11169  0135  1803               	skipnc
 11170  0136  2989               	goto	l11069
 11171                           
 11172                           ;OverLoad_B1.c: 117: Load.Count++;
 11173  0137  3001               	movlw	1
 11174  0138  0020               	movlb	0	; select bank0
 11175  0139  00A0               	movwf	??_Load_Main
 11176  013A  0820               	movf	??_Load_Main,w
 11177  013B  0022               	movlb	2	; select bank2
 11178  013C  07D7               	addwf	(_Load^(0+256)+37),f
 11179                           
 11180                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11181  013D  3198  202A  3180   	fcall	_getDimmer_Load_Status
 11182  0140  0020               	movlb	0	; select bank0
 11183  0141  00A0               	movwf	??_Load_Main
 11184  0142  0820               	movf	??_Load_Main,w
 11185  0143  00A6               	movwf	Load_Main@Load_RunStatus
 11186                           
 11187                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11188  0144  3199  21F8  3180   	fcall	_getMain_Lights_Count
 11189  0147  0020               	movlb	0	; select bank0
 11190  0148  00A0               	movwf	??_Load_Main
 11191  0149  0820               	movf	??_Load_Main,w
 11192  014A  00A7               	movwf	Load_Main@LightsCount
 11193                           
 11194                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11195  014B  0022               	movlb	2	; select bank2
 11196  014C  0857               	movf	(_Load^(0+256)+37),w
 11197  014D  3A01               	xorlw	1
 11198  014E  1D03               	skipz
 11199  014F  2954               	goto	l11055
 11200                           
 11201                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11202  0150  3060               	movlw	96
 11203  0151  00D5               	movwf	(_Load^(0+256)+35)
 11204  0152  3004               	movlw	4
 11205  0153  2961               	goto	L7
 11206  0154                     l11055:	
 11207                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11208                           
 11209  0154  0857               	movf	(_Load^(0+256)+37),w
 11210  0155  3A02               	xorlw	2
 11211  0156  1D03               	skipz
 11212  0157  2989               	goto	l11069
 11213                           
 11214                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11215  0158  0020               	movlb	0	; select bank0
 11216  0159  0827               	movf	Load_Main@LightsCount,w
 11217  015A  3A01               	xorlw	1
 11218  015B  1D03               	skipz
 11219  015C  2963               	goto	l11061
 11220                           
 11221                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11222  015D  3043               	movlw	67
 11223  015E  0022               	movlb	2	; select bank2
 11224  015F  00D5               	movwf	(_Load^(0+256)+35)
 11225  0160  3000               	movlw	0
 11226  0161                     L7:	
 11227  0161  00D6               	movwf	(_Load^(0+256)+36)
 11228                           
 11229                           ;OverLoad_B1.c: 132: } else {
 11230  0162  2989               	goto	l11069
 11231  0163                     l11061:	
 11232                           
 11233                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11234  0163  0020               	movlb	0	; select bank0
 11235  0164  08A6               	movf	Load_Main@Load_RunStatus,f
 11236  0165  1D03               	skipz
 11237  0166  297D               	goto	l11065
 11238                           
 11239                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11240  0167  0827               	movf	Load_Main@LightsCount,w
 11241  0168  00A0               	movwf	??_Load_Main
 11242  0169  01A1               	clrf	??_Load_Main+1
 11243  016A  0820               	movf	??_Load_Main,w
 11244  016B  00F2               	movwf	___wmul@multiplier
 11245  016C  0821               	movf	??_Load_Main+1,w
 11246  016D  00F3               	movwf	___wmul@multiplier+1
 11247  016E  3043               	movlw	67
 11248  016F  00F4               	movwf	___wmul@multiplicand
 11249  0170  3000               	movlw	0
 11250  0171  00F5               	movwf	___wmul@multiplicand+1
 11251  0172  319C  244B  3180   	fcall	___wmul
 11252  0175  0873               	movf	?___wmul+1,w
 11253  0176  0022               	movlb	2	; select bank2
 11254  0177  01D6               	clrf	((_Load+1)^(0+256)+35)
 11255  0178  07D6               	addwf	((_Load+1)^(0+256)+35),f
 11256  0179  0872               	movf	?___wmul,w
 11257  017A  01D5               	clrf	(_Load^(0+256)+35)
 11258  017B  07D5               	addwf	(_Load^(0+256)+35),f
 11259                           
 11260                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11261  017C  2989               	goto	l11069
 11262  017D                     l11065:	
 11263  017D  0020               	movlb	0	; select bank0
 11264  017E  0826               	movf	Load_Main@Load_RunStatus,w
 11265  017F  3A01               	xorlw	1
 11266  0180  1D03               	skipz
 11267  0181  2989               	goto	l11069
 11268                           
 11269                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11270  0182  0022               	movlb	2	; select bank2
 11271  0183  083B               	movf	(_Load^(0+256)+9),w
 11272  0184  3E43               	addlw	67
 11273  0185  00D5               	movwf	(_Load^(0+256)+35)
 11274  0186  3000               	movlw	0
 11275  0187  3D3C               	addwfc	((_Load+1)^(0+256)+9),w
 11276  0188  00D6               	movwf	((_Load+1)^(0+256)+35)
 11277  0189                     l11069:	
 11278                           
 11279                           ;OverLoad_B1.c: 137: }
 11280                           ;OverLoad_B1.c: 138: }
 11281                           ;OverLoad_B1.c: 139: }
 11282                           ;OverLoad_B1.c: 140: }
 11283                           ;OverLoad_B1.c: 141: }
 11284                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11285  0189  0022               	movlb	2	; select bank2
 11286  018A  0856               	movf	((_Load+1)^(0+256)+35),w
 11287  018B  0252               	subwf	((_Load+1)^(0+256)+31),w
 11288  018C  1D03               	skipz
 11289  018D  2990               	goto	u12605
 11290  018E  0855               	movf	(_Load^(0+256)+35),w
 11291  018F  0251               	subwf	(_Load^(0+256)+31),w
 11292  0190                     u12605:	
 11293  0190  1C03               	skipc
 11294  0191  29AF               	goto	l11085
 11295                           
 11296                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11297  0192  0020               	movlb	0	; select bank0
 11298  0193  0827               	movf	Load_Main@LightsCount,w
 11299  0194  3A01               	xorlw	1
 11300  0195  1903               	skipnz
 11301  0196  2999               	goto	l11075
 11302  0197  3003               	movlw	3
 11303  0198  299A               	goto	L8
 11304  0199                     l11075:	
 11305  0199  3002               	movlw	2
 11306  019A                     L8:	
 11307  019A  00A3               	movwf	_Load_Main$4636
 11308  019B  3000               	movlw	0
 11309  019C  00A4               	movwf	_Load_Main$4636+1
 11310  019D  0823               	movf	_Load_Main$4636,w
 11311  019E  00A0               	movwf	??_Load_Main
 11312  019F  0820               	movf	??_Load_Main,w
 11313  01A0  00A5               	movwf	Load_Main@ErrorCountValue
 11314                           
 11315                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11316  01A1  3001               	movlw	1
 11317  01A2  00A0               	movwf	??_Load_Main
 11318  01A3  0820               	movf	??_Load_Main,w
 11319  01A4  0022               	movlb	2	; select bank2
 11320  01A5  07D8               	addwf	(_Load^(0+256)+38),f
 11321                           
 11322                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11323  01A6  0858               	movf	(_Load^(0+256)+38),w
 11324  01A7  0020               	movlb	0	; select bank0
 11325  01A8  0225               	subwf	Load_Main@ErrorCountValue,w
 11326  01A9  1803               	skipnc
 11327  01AA  0008               	return
 11328                           
 11329                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11330  01AB  0022               	movlb	2	; select bank2
 11331  01AC  01D8               	clrf	(_Load^(0+256)+38)
 11332                           
 11333                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11334  01AD  16B2               	bsf	_Load^(0+256),5
 11335                           
 11336                           ;OverLoad_B1.c: 170: }
 11337                           ;OverLoad_B1.c: 171: } else {
 11338  01AE  0008               	return
 11339  01AF                     l11085:	
 11340                           
 11341                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11342  01AF  01D8               	clrf	(_Load^(0+256)+38)
 11343                           
 11344                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11345  01B0  1DB2               	btfss	_Load^(0+256),3
 11346  01B1  0008               	return
 11347                           
 11348                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11349  01B2  3001               	movlw	1
 11350  01B3  0020               	movlb	0	; select bank0
 11351  01B4  00A0               	movwf	??_Load_Main
 11352  01B5  0820               	movf	??_Load_Main,w
 11353  01B6  0022               	movlb	2	; select bank2
 11354  01B7  07D9               	addwf	(_Load^(0+256)+39),f
 11355                           
 11356                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11357  01B8  3003               	movlw	3
 11358  01B9  0259               	subwf	(_Load^(0+256)+39),w
 11359  01BA  1C03               	skipc
 11360  01BB  0008               	return
 11361                           
 11362                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11363  01BC  01D9               	clrf	(_Load^(0+256)+39)
 11364                           
 11365                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11366  01BD  17B2               	bsf	_Load^(0+256),7
 11367                           
 11368                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11369  01BE  11B2               	bcf	_Load^(0+256),3
 11370                           
 11371                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11372  01BF  01D7               	clrf	(_Load^(0+256)+37)
 11373                           
 11374                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11375  01C0  0852               	movf	((_Load+1)^(0+256)+31),w
 11376  01C1  01BC               	clrf	((_Load+1)^(0+256)+9)
 11377  01C2  07BC               	addwf	((_Load+1)^(0+256)+9),f
 11378  01C3  0851               	movf	(_Load^(0+256)+31),w
 11379  01C4  01BB               	clrf	(_Load^(0+256)+9)
 11380  01C5  07BB               	addwf	(_Load^(0+256)+9),f
 11381                           
 11382                           ;OverLoad_B1.c: 184: }
 11383                           ;OverLoad_B1.c: 185: }
 11384                           ;OverLoad_B1.c: 208: }
 11385                           ;OverLoad_B1.c: 209: }
 11386                           ;OverLoad_B1.c: 210: }
 11387                           ;OverLoad_B1.c: 211: } else {
 11388  01C6  0008               	return
 11389  01C7                     l1917:	
 11390                           
 11391                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11392  01C7  1632               	bsf	_Load^(0+256),4
 11393                           
 11394                           ;OverLoad_B1.c: 213: }
 11395                           ;OverLoad_B1.c: 214: } else {
 11396  01C8  0008               	return
 11397  01C9                     l1916:	
 11398                           
 11399                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11400  01C9  1D32               	btfss	_Load^(0+256),2
 11401  01CA  29DC               	goto	l11121
 11402                           
 11403                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11404  01CB  1132               	bcf	_Load^(0+256),2
 11405                           
 11406                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11407  01CC  1232               	bcf	_Load^(0+256),4
 11408                           
 11409                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11410  01CD  01B3               	clrf	(_Load^(0+256)+1)
 11411  01CE  01B4               	clrf	((_Load+1)^(0+256)+1)
 11412                           
 11413                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11414  01CF  319B  23C1  3180   	fcall	_setLoad_AH_AL_Restore
 11415                           
 11416                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11417  01D2  0022               	movlb	2	; select bank2
 11418  01D3  01D8               	clrf	(_Load^(0+256)+38)
 11419                           
 11420                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11421  01D4  01D9               	clrf	(_Load^(0+256)+39)
 11422                           
 11423                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11424  01D5  01B7               	clrf	(_Load^(0+256)+5)
 11425  01D6  01B8               	clrf	((_Load+1)^(0+256)+5)
 11426                           
 11427                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11428  01D7  01B9               	clrf	(_Load^(0+256)+7)
 11429  01D8  01BA               	clrf	((_Load+1)^(0+256)+7)
 11430                           
 11431                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11432  01D9  11B2               	bcf	_Load^(0+256),3
 11433                           
 11434                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11435  01DA  01D7               	clrf	(_Load^(0+256)+37)
 11436                           
 11437                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11438  01DB  13B2               	bcf	_Load^(0+256),7
 11439  01DC                     l11121:	
 11440                           
 11441                           ;OverLoad_B1.c: 257: }
 11442                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11443  01DC  1EB2               	btfss	_Load^(0+256),5
 11444  01DD  0008               	return
 11445                           
 11446                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11447  01DE  3001               	movlw	1
 11448  01DF  07B5               	addwf	(_Load^(0+256)+3),f
 11449  01E0  3000               	movlw	0
 11450  01E1  3DB6               	addwfc	((_Load+1)^(0+256)+3),f
 11451                           
 11452                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11453  01E2  3001               	movlw	1
 11454  01E3  0236               	subwf	((_Load+1)^(0+256)+3),w
 11455  01E4  30F4               	movlw	244
 11456  01E5  1903               	skipnz
 11457  01E6  0235               	subwf	(_Load^(0+256)+3),w
 11458  01E7  1C03               	skipc
 11459  01E8  0008               	return
 11460                           
 11461                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11462  01E9  01B5               	clrf	(_Load^(0+256)+3)
 11463  01EA  01B6               	clrf	((_Load+1)^(0+256)+3)
 11464                           
 11465                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11466  01EB  12B2               	bcf	_Load^(0+256),5
 11467                           
 11468                           ;OverLoad_B1.c: 263: }
 11469                           ;OverLoad_B1.c: 264: }
 11470                           ;OverLoad_B1.c: 265: }
 11471                           ;OverLoad_B1.c: 266: } else {
 11472  01EC  0008               	return
 11473  01ED                     l1906:	
 11474                           
 11475                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11476  01ED  0021               	movlb	1	; select bank1
 11477  01EE  1C4F               	btfss	_myMain^(0+128),0
 11478  01EF  0008               	return
 11479                           
 11480                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11481  01F0  0022               	movlb	2	; select bank2
 11482  01F1  1432               	bsf	_Load^(0+256),0
 11483  01F2  0008               	return
 11484  01F3                     __end_of_Load_Main:	
 11485                           
 11486                           	psect	text65
 11487  19F8                     __ptext65:	
 11488 ;; *************** function _getMain_Lights_Count *****************
 11489 ;; Defined at:
 11490 ;;		line 464 in file "../src/Main_B1.c"
 11491 ;; Parameters:    Size  Location     Type
 11492 ;;		None
 11493 ;; Auto vars:     Size  Location     Type
 11494 ;;  count           1    5[COMMON] unsigned char 
 11495 ;;  status2         1    4[COMMON] unsigned char 
 11496 ;;  status1         1    3[COMMON] unsigned char 
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  1    wreg      unsigned char 
 11499 ;; Registers used:
 11500 ;;		wreg, status,2, status,0
 11501 ;; Tracked objects:
 11502 ;;		On entry : 0/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;Total ram usage:        4 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    3
 11513 ;; This function calls:
 11514 ;;		Nothing
 11515 ;; This function is called by:
 11516 ;;		_Load_Main
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           
 11521                           ;psect for function _getMain_Lights_Count
 11522  19F8                     _getMain_Lights_Count:	
 11523                           
 11524                           ;Main_B1.c: 465: char count = 0;
 11525                           
 11526                           ;incstack = 0
 11527                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11528  19F8  01F5               	clrf	getMain_Lights_Count@count
 11529                           
 11530                           ;Main_B1.c: 469: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11531  19F9  3000               	movlw	0
 11532  19FA  0021               	movlb	1	; select bank1
 11533  19FB  19A0               	btfsc	_DimmerIntr1^(0+128),3
 11534  19FC  3001               	movlw	1
 11535  19FD  00F3               	movwf	getMain_Lights_Count@status1
 11536                           
 11537                           ;Main_B1.c: 472: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11538  19FE  3000               	movlw	0
 11539  19FF  19B0               	btfsc	_DimmerIntr2^(0+128),3
 11540  1A00  3001               	movlw	1
 11541  1A01  00F4               	movwf	getMain_Lights_Count@status2
 11542                           
 11543                           ;Main_B1.c: 495: count = (status1 + status2);
 11544  1A02  0873               	movf	getMain_Lights_Count@status1,w
 11545  1A03  0774               	addwf	getMain_Lights_Count@status2,w
 11546  1A04  00F2               	movwf	??_getMain_Lights_Count
 11547  1A05  0872               	movf	??_getMain_Lights_Count,w
 11548  1A06  00F5               	movwf	getMain_Lights_Count@count
 11549                           
 11550                           ;Main_B1.c: 500: return count;
 11551  1A07  0875               	movf	getMain_Lights_Count@count,w
 11552  1A08  0008               	return
 11553  1A09                     __end_of_getMain_Lights_Count:	
 11554                           
 11555                           	psect	text66
 11556  182A                     __ptext66:	
 11557 ;; *************** function _getDimmer_Load_Status *****************
 11558 ;; Defined at:
 11559 ;;		line 1344 in file "../src/Dimmer_B1.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;		None
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;  status          1    2[COMMON] unsigned char 
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  1    wreg      unsigned char 
 11566 ;; Registers used:
 11567 ;;		wreg, status,2
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        1 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:    3
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_Load_Main
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _getDimmer_Load_Status
 11589  182A                     _getDimmer_Load_Status:	
 11590                           
 11591                           ;Dimmer_B1.c: 1345: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11595  182A  3000               	movlw	0
 11596  182B  0022               	movlb	2	; select bank2
 11597  182C  1920               	btfsc	_Dimmer^(0+256),2
 11598  182D  3001               	movlw	1
 11599  182E  00F2               	movwf	getDimmer_Load_Status@status
 11600                           
 11601                           ;Dimmer_B1.c: 1346: return status;
 11602  182F  0872               	movf	getDimmer_Load_Status@status,w
 11603  1830  0008               	return
 11604  1831                     __end_of_getDimmer_Load_Status:	
 11605                           
 11606                           	psect	text67
 11607  1823                     __ptext67:	
 11608 ;; *************** function _getDimmer_LoadGO *****************
 11609 ;; Defined at:
 11610 ;;		line 1338 in file "../src/Dimmer_B1.c"
 11611 ;; Parameters:    Size  Location     Type
 11612 ;;		None
 11613 ;; Auto vars:     Size  Location     Type
 11614 ;;  loadgo          1    2[COMMON] unsigned char 
 11615 ;; Return value:  Size  Location     Type
 11616 ;;                  1    wreg      unsigned char 
 11617 ;; Registers used:
 11618 ;;		wreg, status,2
 11619 ;; Tracked objects:
 11620 ;;		On entry : 0/0
 11621 ;;		On exit  : 0/0
 11622 ;;		Unchanged: 0/0
 11623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;Total ram usage:        1 bytes
 11629 ;; Hardware stack levels used:    1
 11630 ;; Hardware stack levels required when called:    3
 11631 ;; This function calls:
 11632 ;;		Nothing
 11633 ;; This function is called by:
 11634 ;;		_Load_Main
 11635 ;; This function uses a non-reentrant model
 11636 ;;
 11637                           
 11638                           
 11639                           ;psect for function _getDimmer_LoadGO
 11640  1823                     _getDimmer_LoadGO:	
 11641                           
 11642                           ;Dimmer_B1.c: 1339: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11643                           
 11644                           ;incstack = 0
 11645                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11646  1823  3000               	movlw	0
 11647  1824  0022               	movlb	2	; select bank2
 11648  1825  18A0               	btfsc	_Dimmer^(0+256),1
 11649  1826  3001               	movlw	1
 11650  1827  00F2               	movwf	getDimmer_LoadGO@loadgo
 11651                           
 11652                           ;Dimmer_B1.c: 1340: return loadgo;
 11653  1828  0872               	movf	getDimmer_LoadGO@loadgo,w
 11654  1829  0008               	return
 11655  182A                     __end_of_getDimmer_LoadGO:	
 11656                           
 11657                           	psect	text68
 11658  1BDC                     __ptext68:	
 11659 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11660 ;; Defined at:
 11661 ;;		line 348 in file "../src/Dimmer_B1.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;  status          1    5[COMMON] unsigned char 
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      unsigned char 
 11668 ;; Registers used:
 11669 ;;		wreg, status,2, status,0
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;Total ram usage:        4 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    3
 11682 ;; This function calls:
 11683 ;;		Nothing
 11684 ;; This function is called by:
 11685 ;;		_Load_Main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11691  1BDC                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11692                           
 11693                           ;Dimmer_B1.c: 349: char status = 0;
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11697  1BDC  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11698                           
 11699                           ;Dimmer_B1.c: 356: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11700  1BDD  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11701  1BDE  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,f
 11702  1BDF  0021               	movlb	1	; select bank1
 11703  1BE0  1E20               	btfss	_DimmerIntr1^(0+128),4
 11704  1BE1  1A30               	btfsc	_DimmerIntr2^(0+128),4
 11705  1BE2  2BE4               	goto	l8207
 11706  1BE3  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2605
 11707  1BE4                     l8207:	
 11708  1BE4  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2605,w
 11709  1BE5  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11710  1BE6  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11711  1BE7  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11712                           
 11713                           ;Dimmer_B1.c: 364: if (status == 0) {
 11714  1BE8  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11715  1BE9  1D03               	skipz
 11716  1BEA  2BF5               	goto	l8219
 11717                           
 11718                           ;Dimmer_B1.c: 370: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11719  1BEB  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11720  1BEC  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,f
 11721  1BED  1F20               	btfss	_DimmerIntr1^(0+128),6
 11722  1BEE  1B30               	btfsc	_DimmerIntr2^(0+128),6
 11723  1BEF  2BF1               	goto	l8217
 11724  1BF0  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2606
 11725  1BF1                     l8217:	
 11726  1BF1  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2606,w
 11727  1BF2  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11728  1BF3  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11729  1BF4  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11730  1BF5                     l8219:	
 11731                           
 11732                           ;Dimmer_B1.c: 376: }
 11733                           ;Dimmer_B1.c: 378: return status;
 11734  1BF5  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11735  1BF6  0008               	return
 11736  1BF7                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11737                           
 11738                           	psect	text69
 11739  1C4B                     __ptext69:	
 11740 ;; *************** function ___wmul *****************
 11741 ;; Defined at:
 11742 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  multiplier      2    2[COMMON] unsigned int 
 11745 ;;  multiplicand    2    4[COMMON] unsigned int 
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  product         2    6[COMMON] unsigned int 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2    2[COMMON] unsigned int 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;Total ram usage:        6 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    3
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		_Load_Main
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           
 11772                           ;psect for function ___wmul
 11773  1C4B                     ___wmul:	
 11774                           
 11775                           ;incstack = 0
 11776                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11777  1C4B  01F6               	clrf	___wmul@product
 11778  1C4C  01F7               	clrf	___wmul@product+1
 11779  1C4D                     l8903:	
 11780  1C4D  1C72               	btfss	___wmul@multiplier,0
 11781  1C4E  2C53               	goto	l3112
 11782  1C4F  0874               	movf	___wmul@multiplicand,w
 11783  1C50  07F6               	addwf	___wmul@product,f
 11784  1C51  0875               	movf	___wmul@multiplicand+1,w
 11785  1C52  3DF7               	addwfc	___wmul@product+1,f
 11786  1C53                     l3112:	
 11787  1C53  3001               	movlw	1
 11788  1C54                     u9165:	
 11789  1C54  35F4               	lslf	___wmul@multiplicand,f
 11790  1C55  0DF5               	rlf	___wmul@multiplicand+1,f
 11791  1C56  0B89               	decfsz	9,f
 11792  1C57  2C54               	goto	u9165
 11793  1C58  3001               	movlw	1
 11794  1C59                     u9175:	
 11795  1C59  36F3               	lsrf	___wmul@multiplier+1,f
 11796  1C5A  0CF2               	rrf	___wmul@multiplier,f
 11797  1C5B  0B89               	decfsz	9,f
 11798  1C5C  2C59               	goto	u9175
 11799  1C5D  0873               	movf	___wmul@multiplier+1,w
 11800  1C5E  0472               	iorwf	___wmul@multiplier,w
 11801  1C5F  1D03               	skipz
 11802  1C60  2C4D               	goto	l8903
 11803  1C61  0877               	movf	___wmul@product+1,w
 11804  1C62  01F3               	clrf	?___wmul+1
 11805  1C63  07F3               	addwf	?___wmul+1,f
 11806  1C64  0876               	movf	___wmul@product,w
 11807  1C65  01F2               	clrf	?___wmul
 11808  1C66  07F2               	addwf	?___wmul,f
 11809  1C67  0008               	return
 11810  1C68                     __end_of___wmul:	
 11811                           
 11812                           	psect	text70
 11813  1F5D                     __ptext70:	
 11814 ;; *************** function ___lwdiv *****************
 11815 ;; Defined at:
 11816 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;  divisor         2    2[COMMON] unsigned int 
 11819 ;;  dividend        2    4[COMMON] unsigned int 
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  quotient        2    7[COMMON] unsigned int 
 11822 ;;  counter         1    9[COMMON] unsigned char 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;                  2    2[COMMON] unsigned int 
 11825 ;; Registers used:
 11826 ;;		wreg, status,2, status,0
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;Total ram usage:        8 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:    3
 11839 ;; This function calls:
 11840 ;;		Nothing
 11841 ;; This function is called by:
 11842 ;;		_Load_Main
 11843 ;;		_setTemp_Main
 11844 ;;		_setRF_Main
 11845 ;; This function uses a non-reentrant model
 11846 ;;
 11847                           
 11848                           
 11849                           ;psect for function ___lwdiv
 11850  1F5D                     ___lwdiv:	
 11851                           
 11852                           ;incstack = 0
 11853                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11854  1F5D  01F7               	clrf	___lwdiv@quotient
 11855  1F5E  01F8               	clrf	___lwdiv@quotient+1
 11856  1F5F  0873               	movf	___lwdiv@divisor+1,w
 11857  1F60  0472               	iorwf	___lwdiv@divisor,w
 11858  1F61  1903               	skipnz
 11859  1F62  2F8C               	goto	l8129
 11860  1F63  01F9               	clrf	___lwdiv@counter
 11861  1F64  0AF9               	incf	___lwdiv@counter,f
 11862  1F65                     l8117:	
 11863  1F65  1BF3               	btfsc	___lwdiv@divisor+1,7
 11864  1F66  2F71               	goto	l8119
 11865  1F67  3001               	movlw	1
 11866  1F68                     u7715:	
 11867  1F68  35F2               	lslf	___lwdiv@divisor,f
 11868  1F69  0DF3               	rlf	___lwdiv@divisor+1,f
 11869  1F6A  0B89               	decfsz	9,f
 11870  1F6B  2F68               	goto	u7715
 11871  1F6C  3001               	movlw	1
 11872  1F6D  00F6               	movwf	??___lwdiv
 11873  1F6E  0876               	movf	??___lwdiv,w
 11874  1F6F  07F9               	addwf	___lwdiv@counter,f
 11875  1F70  2F65               	goto	l8117
 11876  1F71                     l8119:	
 11877  1F71  3001               	movlw	1
 11878  1F72                     u7735:	
 11879  1F72  35F7               	lslf	___lwdiv@quotient,f
 11880  1F73  0DF8               	rlf	___lwdiv@quotient+1,f
 11881  1F74  0B89               	decfsz	9,f
 11882  1F75  2F72               	goto	u7735
 11883  1F76  0873               	movf	___lwdiv@divisor+1,w
 11884  1F77  0275               	subwf	___lwdiv@dividend+1,w
 11885  1F78  1D03               	skipz
 11886  1F79  2F7C               	goto	u7745
 11887  1F7A  0872               	movf	___lwdiv@divisor,w
 11888  1F7B  0274               	subwf	___lwdiv@dividend,w
 11889  1F7C                     u7745:	
 11890  1F7C  1C03               	skipc
 11891  1F7D  2F83               	goto	l8125
 11892  1F7E  0872               	movf	___lwdiv@divisor,w
 11893  1F7F  02F4               	subwf	___lwdiv@dividend,f
 11894  1F80  0873               	movf	___lwdiv@divisor+1,w
 11895  1F81  3BF5               	subwfb	___lwdiv@dividend+1,f
 11896  1F82  1477               	bsf	___lwdiv@quotient,0
 11897  1F83                     l8125:	
 11898  1F83  3001               	movlw	1
 11899  1F84                     u7755:	
 11900  1F84  36F3               	lsrf	___lwdiv@divisor+1,f
 11901  1F85  0CF2               	rrf	___lwdiv@divisor,f
 11902  1F86  0B89               	decfsz	9,f
 11903  1F87  2F84               	goto	u7755
 11904  1F88  3001               	movlw	1
 11905  1F89  02F9               	subwf	___lwdiv@counter,f
 11906  1F8A  1D03               	btfss	3,2
 11907  1F8B  2F71               	goto	l8119
 11908  1F8C                     l8129:	
 11909  1F8C  0878               	movf	___lwdiv@quotient+1,w
 11910  1F8D  01F3               	clrf	?___lwdiv+1
 11911  1F8E  07F3               	addwf	?___lwdiv+1,f
 11912  1F8F  0877               	movf	___lwdiv@quotient,w
 11913  1F90  01F2               	clrf	?___lwdiv
 11914  1F91  07F2               	addwf	?___lwdiv,f
 11915  1F92  0008               	return
 11916  1F93                     __end_of___lwdiv:	
 11917                           
 11918                           	psect	text71
 11919  27DC                     __ptext71:	
 11920 ;; *************** function _Load_Initialization *****************
 11921 ;; Defined at:
 11922 ;;		line 9 in file "../src/OverLoad_B1.c"
 11923 ;; Parameters:    Size  Location     Type
 11924 ;;		None
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;		None
 11927 ;; Return value:  Size  Location     Type
 11928 ;;		None               void
 11929 ;; Registers used:
 11930 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11931 ;; Tracked objects:
 11932 ;;		On entry : 0/0
 11933 ;;		On exit  : 0/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;Total ram usage:        0 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:    4
 11943 ;; This function calls:
 11944 ;;		_setLoad_AH_AL_Restore
 11945 ;; This function is called by:
 11946 ;;		_main
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           
 11951                           ;psect for function _Load_Initialization
 11952  27DC                     _Load_Initialization:	
 11953                           
 11954                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11955                           
 11956                           ;incstack = 0
 11957                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11958  27DC  319B  23C1         	fcall	_setLoad_AH_AL_Restore
 11959  27DE  0008               	return
 11960  27DF                     __end_of_Load_Initialization:	
 11961                           
 11962                           	psect	text72
 11963  1BC1                     __ptext72:	
 11964 ;; *************** function _setLoad_AH_AL_Restore *****************
 11965 ;; Defined at:
 11966 ;;		line 294 in file "../src/OverLoad_B1.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;		None
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  i               1    3[COMMON] unsigned char 
 11971 ;; Return value:  Size  Location     Type
 11972 ;;		None               void
 11973 ;; Registers used:
 11974 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;Total ram usage:        2 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    3
 11987 ;; This function calls:
 11988 ;;		Nothing
 11989 ;; This function is called by:
 11990 ;;		_Load_Initialization
 11991 ;;		_Load_Main
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           
 11996                           ;psect for function _setLoad_AH_AL_Restore
 11997  1BC1                     _setLoad_AH_AL_Restore:	
 11998                           
 11999                           ;OverLoad_B1.c: 295: char i;
 12000                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12001                           
 12002                           ;incstack = 0
 12003                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12004  1BC1  01F3               	clrf	setLoad_AH_AL_Restore@i
 12005  1BC2                     L9:	
 12006  1BC2  3005               	movlw	5
 12007  1BC3  0273               	subwf	setLoad_AH_AL_Restore@i,w
 12008  1BC4  1803               	btfsc	3,0
 12009  1BC5  0008               	return
 12010                           
 12011                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12012  1BC6  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12013  1BC7  3E3D               	addlw	(_Load+11)& (0+255)
 12014  1BC8  0086               	movwf	6
 12015  1BC9  3001               	movlw	1	; select bank2/3
 12016  1BCA  0087               	movwf	7
 12017  1BCB  3000               	movlw	0
 12018  1BCC  3FC0               	movwi [0]fsr1
 12019  1BCD  3FC1               	movwi [1]fsr1
 12020                           
 12021                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12022  1BCE  3573               	lslf	setLoad_AH_AL_Restore@i,w
 12023  1BCF  3E47               	addlw	(_Load+21)& (0+255)
 12024  1BD0  0086               	movwf	6
 12025  1BD1  3001               	movlw	1	; select bank2/3
 12026  1BD2  0087               	movwf	7
 12027  1BD3  30FF               	movlw	255
 12028  1BD4  3FC0               	movwi [0]fsr1
 12029  1BD5  30FF               	movlw	255
 12030  1BD6  3FC1               	movwi [1]fsr1
 12031  1BD7  3001               	movlw	1
 12032  1BD8  00F2               	movwf	??_setLoad_AH_AL_Restore
 12033  1BD9  0872               	movf	??_setLoad_AH_AL_Restore,w
 12034  1BDA  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 12035  1BDB  2BC2               	goto	L9
 12036  1BDC                     __end_of_setLoad_AH_AL_Restore:	
 12037                           
 12038                           	psect	text73
 12039  18EA                     __ptext73:	
 12040 ;; *************** function _LED_Main *****************
 12041 ;; Defined at:
 12042 ;;		line 47 in file "../src/LED_B1.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;		None
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;		None
 12047 ;; Return value:  Size  Location     Type
 12048 ;;		None               void
 12049 ;; Registers used:
 12050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12051 ;; Tracked objects:
 12052 ;;		On entry : 0/0
 12053 ;;		On exit  : 0/0
 12054 ;;		Unchanged: 0/0
 12055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;Total ram usage:        0 bytes
 12061 ;; Hardware stack levels used:    1
 12062 ;; Hardware stack levels required when called:    5
 12063 ;; This function calls:
 12064 ;;		_setLED_Main
 12065 ;; This function is called by:
 12066 ;;		_main
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           
 12071                           ;psect for function _LED_Main
 12072  18EA                     _LED_Main:	
 12073                           
 12074                           ;LED_B1.c: 58: setLED_Main(1);
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12078  18EA  3001               	movlw	1
 12079  18EB  3191  21DD  3198   	fcall	_setLED_Main
 12080                           
 12081                           ;LED_B1.c: 61: setLED_Main(2);
 12082  18EE  3002               	movlw	2
 12083  18EF  3191  21DD  3198   	fcall	_setLED_Main
 12084                           
 12085                           ;LED_B1.c: 67: setLED_Main(99);
 12086  18F2  3063               	movlw	99
 12087  18F3  3191  21DD         	fcall	_setLED_Main
 12088  18F5  0008               	return
 12089  18F6                     __end_of_LED_Main:	
 12090                           
 12091                           	psect	text74
 12092  11DD                     __ptext74:	
 12093 ;; *************** function _setLED_Main *****************
 12094 ;; Defined at:
 12095 ;;		line 229 in file "../src/LED_B1.c"
 12096 ;; Parameters:    Size  Location     Type
 12097 ;;  led             1    wreg     unsigned char 
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;  led             1    6[COMMON] unsigned char 
 12100 ;; Return value:  Size  Location     Type
 12101 ;;		None               void
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;Total ram usage:        3 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    4
 12116 ;; This function calls:
 12117 ;;		_LedPointSelect
 12118 ;; This function is called by:
 12119 ;;		_LED_Main
 12120 ;; This function uses a non-reentrant model
 12121 ;;
 12122                           
 12123                           
 12124                           ;psect for function _setLED_Main
 12125  11DD                     _setLED_Main:	
 12126                           
 12127                           ;incstack = 0
 12128                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12129                           ;setLED_Main@led stored from wreg
 12130  11DD  00F6               	movwf	setLED_Main@led
 12131                           
 12132                           ;LED_B1.c: 230: LedPointSelect(led);
 12133  11DE  0876               	movf	setLED_Main@led,w
 12134  11DF  319C  242E  3191   	fcall	_LedPointSelect
 12135                           
 12136                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12137  11E2  0021               	movlb	1	; select bank1
 12138  11E3  086B               	movf	_LED^(0+128),w
 12139  11E4  0086               	movwf	6
 12140  11E5  3001               	movlw	1	; select bank2/3
 12141  11E6  0087               	movwf	7
 12142  11E7  1C81               	btfss	1,1
 12143  11E8  0008               	return
 12144                           
 12145                           ;LED_B1.c: 232: LED->Time++;
 12146  11E9  0A6B               	incf	_LED^(0+128),w
 12147  11EA  0086               	movwf	6
 12148  11EB  3001               	movlw	1	; select bank2/3
 12149  11EC  0087               	movwf	7
 12150  11ED  3001               	movlw	1
 12151  11EE  0781               	addwf	1,f
 12152  11EF  3141               	addfsr 1,1
 12153  11F0  1803               	skipnc
 12154  11F1  0A81               	incf	1,f
 12155                           
 12156                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12157  11F2  0A6B               	incf	_LED^(0+128),w
 12158  11F3  0086               	movwf	6
 12159  11F4  3001               	movlw	1	; select bank2/3
 12160  11F5  0087               	movwf	7
 12161  11F6  3F40               	moviw [0]fsr1
 12162  11F7  00F4               	movwf	??_setLED_Main
 12163  11F8  3F41               	moviw [1]fsr1
 12164  11F9  00F5               	movwf	??_setLED_Main+1
 12165  11FA  3000               	movlw	0
 12166  11FB  0275               	subwf	??_setLED_Main+1,w
 12167  11FC  3019               	movlw	25
 12168  11FD  1903               	skipnz
 12169  11FE  0274               	subwf	??_setLED_Main,w
 12170  11FF  1C03               	skipc
 12171  1200  0008               	return
 12172                           
 12173                           ;LED_B1.c: 234: LED->Time = 0;
 12174  1201  0A6B               	incf	_LED^(0+128),w
 12175  1202  0086               	movwf	6
 12176  1203  3001               	movlw	1	; select bank2/3
 12177  1204  0087               	movwf	7
 12178  1205  3000               	movlw	0
 12179  1206  3FC0               	movwi [0]fsr1
 12180  1207  3FC1               	movwi [1]fsr1
 12181                           
 12182                           ;LED_B1.c: 237: if (led == 1) {
 12183  1208  0876               	movf	setLED_Main@led,w
 12184  1209  3A01               	xorlw	1
 12185  120A  1D03               	skipz
 12186  120B  2A0F               	goto	l1223
 12187                           
 12188                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 12189  120C  3008               	movlw	8
 12190  120D  0020               	movlb	0	; select bank0
 12191  120E  068C               	xorwf	12,f
 12192  120F                     l1223:	
 12193                           
 12194                           ;LED_B1.c: 239: }
 12195                           ;LED_B1.c: 242: if (led == 2) {
 12196  120F  0876               	movf	setLED_Main@led,w
 12197  1210  3A02               	xorlw	2
 12198  1211  1D03               	skipz
 12199  1212  2A16               	goto	l1224
 12200                           
 12201                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 12202  1213  3080               	movlw	128
 12203  1214  0020               	movlb	0	; select bank0
 12204  1215  068E               	xorwf	14,f
 12205  1216                     l1224:	
 12206                           
 12207                           ;LED_B1.c: 244: }
 12208                           ;LED_B1.c: 252: if (led == 99) {
 12209  1216  0876               	movf	setLED_Main@led,w
 12210  1217  3A63               	xorlw	99
 12211  1218  1D03               	skipz
 12212  1219  0008               	return
 12213                           
 12214                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12215  121A  3020               	movlw	32
 12216  121B  0020               	movlb	0	; select bank0
 12217  121C  068D               	xorwf	13,f
 12218  121D  0008               	return
 12219  121E                     __end_of_setLED_Main:	
 12220                           
 12221                           	psect	text75
 12222  18DE                     __ptext75:	
 12223 ;; *************** function _LED_Initialization *****************
 12224 ;; Defined at:
 12225 ;;		line 31 in file "../src/LED_B1.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;		None
 12228 ;; Auto vars:     Size  Location     Type
 12229 ;;		None
 12230 ;; Return value:  Size  Location     Type
 12231 ;;		None               void
 12232 ;; Registers used:
 12233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12234 ;; Tracked objects:
 12235 ;;		On entry : 0/0
 12236 ;;		On exit  : 0/0
 12237 ;;		Unchanged: 0/0
 12238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;Total ram usage:        0 bytes
 12244 ;; Hardware stack levels used:    1
 12245 ;; Hardware stack levels required when called:    6
 12246 ;; This function calls:
 12247 ;;		_setLED_Initialization
 12248 ;; This function is called by:
 12249 ;;		_main
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           
 12254                           ;psect for function _LED_Initialization
 12255  18DE                     _LED_Initialization:	
 12256                           
 12257                           ;LED_B1.c: 33: setLED_Initialization(1);
 12258                           
 12259                           ;incstack = 0
 12260                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12261  18DE  3001               	movlw	1
 12262  18DF  3199  21A7  3198   	fcall	_setLED_Initialization
 12263                           
 12264                           ;LED_B1.c: 36: setLED_Initialization(2);
 12265  18E2  3002               	movlw	2
 12266  18E3  3199  21A7  3198   	fcall	_setLED_Initialization
 12267                           
 12268                           ;LED_B1.c: 42: setLED_Initialization(99);
 12269  18E6  3063               	movlw	99
 12270  18E7  3199  21A7         	fcall	_setLED_Initialization
 12271  18E9  0008               	return
 12272  18EA                     __end_of_LED_Initialization:	
 12273                           
 12274                           	psect	text76
 12275  19A7                     __ptext76:	
 12276 ;; *************** function _setLED_Initialization *****************
 12277 ;; Defined at:
 12278 ;;		line 74 in file "../src/LED_B1.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  led             1    wreg     unsigned char 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  led             1    6[COMMON] unsigned char 
 12283 ;; Return value:  Size  Location     Type
 12284 ;;		None               void
 12285 ;; Registers used:
 12286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;Total ram usage:        1 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:    5
 12299 ;; This function calls:
 12300 ;;		_LedPointSelect
 12301 ;;		_setLED
 12302 ;; This function is called by:
 12303 ;;		_LED_Initialization
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           
 12308                           ;psect for function _setLED_Initialization
 12309  19A7                     _setLED_Initialization:	
 12310                           
 12311                           ;incstack = 0
 12312                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12313                           ;setLED_Initialization@led stored from wreg
 12314  19A7  00F6               	movwf	setLED_Initialization@led
 12315                           
 12316                           ;LED_B1.c: 75: LedPointSelect(led);
 12317  19A8  0876               	movf	setLED_Initialization@led,w
 12318  19A9  319C  242E  3199   	fcall	_LedPointSelect
 12319                           
 12320                           ;LED_B1.c: 76: LED->Enable = 1;
 12321  19AC  0021               	movlb	1	; select bank1
 12322  19AD  086B               	movf	_LED^(0+128),w
 12323  19AE  0086               	movwf	6
 12324  19AF  3001               	movlw	1	; select bank2/3
 12325  19B0  0087               	movwf	7
 12326  19B1  1401               	bsf	1,0
 12327                           
 12328                           ;LED_B1.c: 77: setLED(led, 0);
 12329  19B2  01F4               	clrf	setLED@command
 12330  19B3  0876               	movf	setLED_Initialization@led,w
 12331  19B4  3194  24ED         	fcall	_setLED
 12332  19B6  0008               	return
 12333  19B7                     __end_of_setLED_Initialization:	
 12334                           
 12335                           	psect	text77
 12336  119C                     __ptext77:	
 12337 ;; *************** function _Flash_Memory_Main *****************
 12338 ;; Defined at:
 12339 ;;		line 980 in file "../src/MCU_B1.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;		None
 12342 ;; Auto vars:     Size  Location     Type
 12343 ;;  key_Status      1    0[BANK0 ] unsigned char 
 12344 ;; Return value:  Size  Location     Type
 12345 ;;		None               void
 12346 ;; Registers used:
 12347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12348 ;; Tracked objects:
 12349 ;;		On entry : 0/0
 12350 ;;		On exit  : 0/0
 12351 ;;		Unchanged: 0/0
 12352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;Total ram usage:        3 bytes
 12358 ;; Hardware stack levels used:    1
 12359 ;; Hardware stack levels required when called:    6
 12360 ;; This function calls:
 12361 ;;		_Flash_Memory_Modify
 12362 ;;		_getAll_Sw_KeyStatus
 12363 ;;		_getMain_All_LightsStatus
 12364 ;; This function is called by:
 12365 ;;		_main
 12366 ;; This function uses a non-reentrant model
 12367 ;;
 12368                           
 12369                           
 12370                           ;psect for function _Flash_Memory_Main
 12371  119C                     _Flash_Memory_Main:	
 12372                           
 12373                           ;MCU_B1.c: 981: char key_Status = 0;
 12374                           
 12375                           ;incstack = 0
 12376                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12377  119C  0020               	movlb	0	; select bank0
 12378  119D  01A0               	clrf	Flash_Memory_Main@key_Status
 12379                           
 12380                           ;MCU_B1.c: 983: key_Status = getAll_Sw_KeyStatus();
 12381  119E  3199  2102  3191   	fcall	_getAll_Sw_KeyStatus
 12382  11A1  00F8               	movwf	??_Flash_Memory_Main
 12383  11A2  0878               	movf	??_Flash_Memory_Main,w
 12384  11A3  0020               	movlb	0	; select bank0
 12385  11A4  00A0               	movwf	Flash_Memory_Main@key_Status
 12386                           
 12387                           ;MCU_B1.c: 985: if (Memory.Modify == 1) {
 12388  11A5  0024               	movlb	4	; select bank4
 12389  11A6  1C54               	btfss	(_Memory^(0+512)+36),0
 12390  11A7  0008               	return
 12391                           
 12392                           ;MCU_B1.c: 986: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12393  11A8  0020               	movlb	0	; select bank0
 12394  11A9  01A1               	clrf	_Flash_Memory_Main$3708
 12395  11AA  3199  2159  3191   	fcall	_getMain_All_LightsStatus
 12396  11AD  3800               	iorlw	0
 12397  11AE  1D03               	skipz
 12398  11AF  29B6               	goto	l10921
 12399  11B0  0020               	movlb	0	; select bank0
 12400  11B1  08A0               	movf	Flash_Memory_Main@key_Status,f
 12401  11B2  1D03               	skipz
 12402  11B3  29B6               	goto	l10921
 12403  11B4  01A1               	clrf	_Flash_Memory_Main$3708
 12404  11B5  0AA1               	incf	_Flash_Memory_Main$3708,f
 12405  11B6                     l10921:	
 12406  11B6  0020               	movlb	0	; select bank0
 12407  11B7  0821               	movf	_Flash_Memory_Main$3708,w
 12408  11B8  0024               	movlb	4	; select bank4
 12409  11B9  10D4               	bcf	(_Memory^(0+512)+36),1
 12410  11BA  1D03               	skipz
 12411  11BB  14D4               	bsf	(_Memory^(0+512)+36),1
 12412                           
 12413                           ;MCU_B1.c: 987: if (Memory.GO == 1) {
 12414  11BC  1CD4               	btfss	(_Memory^(0+512)+36),1
 12415  11BD  29D7               	goto	l1499
 12416                           
 12417                           ;MCU_B1.c: 988: Memory.Runtime = 1;
 12418  11BE  15D4               	bsf	(_Memory^(0+512)+36),3
 12419                           
 12420                           ;MCU_B1.c: 989: Memory.Time++;
 12421  11BF  3001               	movlw	1
 12422  11C0  07D2               	addwf	(_Memory^(0+512)+34),f
 12423  11C1  3000               	movlw	0
 12424  11C2  3DD3               	addwfc	((_Memory+1)^(0+512)+34),f
 12425                           
 12426                           ;MCU_B1.c: 990: if (Memory.Time == (200 / 20)) {
 12427  11C3  3022               	movlw	34
 12428  11C4  3E30               	addlw	_Memory& (0+255)
 12429  11C5  0086               	movwf	6
 12430  11C6  3002               	movlw	2	; select bank4/5
 12431  11C7  0087               	movwf	7
 12432  11C8  3F40               	moviw [0]fsr1
 12433  11C9  3A0A               	xorlw	10
 12434  11CA  1D03               	skipz
 12435  11CB  29CE               	goto	u12315
 12436  11CC  3F41               	moviw [1]fsr1
 12437  11CD  3A00               	xorlw	0
 12438  11CE                     u12315:	
 12439  11CE  1D03               	skipz
 12440  11CF  0008               	return
 12441                           
 12442                           ;MCU_B1.c: 991: Memory.Time = 0;
 12443  11D0  01D2               	clrf	(_Memory^(0+512)+34)
 12444  11D1  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12445                           
 12446                           ;MCU_B1.c: 992: Memory.Modify = 0;
 12447  11D2  1054               	bcf	(_Memory^(0+512)+36),0
 12448                           
 12449                           ;MCU_B1.c: 993: Memory.GO = 0;
 12450  11D3  10D4               	bcf	(_Memory^(0+512)+36),1
 12451                           
 12452                           ;MCU_B1.c: 994: Flash_Memory_Modify();
 12453  11D4  3189  21DA         	fcall	_Flash_Memory_Modify
 12454                           
 12455                           ;MCU_B1.c: 995: }
 12456                           ;MCU_B1.c: 996: } else {
 12457  11D6  0008               	return
 12458  11D7                     l1499:	
 12459                           
 12460                           ;MCU_B1.c: 997: if (Memory.Runtime == 1) {
 12461  11D7  1DD4               	btfss	(_Memory^(0+512)+36),3
 12462  11D8  0008               	return
 12463                           
 12464                           ;MCU_B1.c: 998: Memory.Runtime = 0;
 12465  11D9  11D4               	bcf	(_Memory^(0+512)+36),3
 12466                           
 12467                           ;MCU_B1.c: 999: Memory.Time = 0;
 12468  11DA  01D2               	clrf	(_Memory^(0+512)+34)
 12469  11DB  01D3               	clrf	((_Memory+1)^(0+512)+34)
 12470  11DC  0008               	return
 12471  11DD                     __end_of_Flash_Memory_Main:	
 12472                           
 12473                           	psect	text78
 12474  1902                     __ptext78:	
 12475 ;; *************** function _getAll_Sw_KeyStatus *****************
 12476 ;; Defined at:
 12477 ;;		line 286 in file "../src/Switch_B1.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;		None
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  status          1    3[COMMON] unsigned char 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      unsigned char 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;Total ram usage:        3 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    3
 12498 ;; This function calls:
 12499 ;;		Nothing
 12500 ;; This function is called by:
 12501 ;;		_Flash_Memory_Main
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           
 12506                           ;psect for function _getAll_Sw_KeyStatus
 12507  1902                     _getAll_Sw_KeyStatus:	
 12508                           
 12509                           ;Switch_B1.c: 287: char status = 0;
 12510                           
 12511                           ;incstack = 0
 12512                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12513  1902  01F3               	clrf	getAll_Sw_KeyStatus@status
 12514                           
 12515                           ;Switch_B1.c: 299: status = (RA6 == 1 || RA0 == 1) ? 1 : 0;
 12516  1903  01F4               	clrf	_getAll_Sw_KeyStatus$7434
 12517  1904  0AF4               	incf	_getAll_Sw_KeyStatus$7434,f
 12518  1905  0020               	movlb	0	; select bank0
 12519  1906  1F0C               	btfss	12,6	;volatile
 12520  1907  180C               	btfsc	12,0	;volatile
 12521  1908  290A               	goto	l10581
 12522  1909  01F4               	clrf	_getAll_Sw_KeyStatus$7434
 12523  190A                     l10581:	
 12524  190A  0874               	movf	_getAll_Sw_KeyStatus$7434,w
 12525  190B  00F2               	movwf	??_getAll_Sw_KeyStatus
 12526  190C  0872               	movf	??_getAll_Sw_KeyStatus,w
 12527  190D  00F3               	movwf	getAll_Sw_KeyStatus@status
 12528                           
 12529                           ;Switch_B1.c: 315: return status;
 12530  190E  0873               	movf	getAll_Sw_KeyStatus@status,w
 12531  190F  0008               	return
 12532  1910                     __end_of_getAll_Sw_KeyStatus:	
 12533                           
 12534                           	psect	text79
 12535  09DA                     __ptext79:	
 12536 ;; *************** function _Flash_Memory_Modify *****************
 12537 ;; Defined at:
 12538 ;;		line 1057 in file "../src/MCU_B1.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;		None
 12541 ;; Auto vars:     Size  Location     Type
 12542 ;;  i               1    7[COMMON] unsigned char 
 12543 ;; Return value:  Size  Location     Type
 12544 ;;		None               void
 12545 ;; Registers used:
 12546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12547 ;; Tracked objects:
 12548 ;;		On entry : 0/0
 12549 ;;		On exit  : 0/0
 12550 ;;		Unchanged: 0/0
 12551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12555 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;Total ram usage:        2 bytes
 12557 ;; Hardware stack levels used:    1
 12558 ;; Hardware stack levels required when called:    5
 12559 ;; This function calls:
 12560 ;;		_Flash_Memory_Erasing
 12561 ;;		_Flash_Memory_Read
 12562 ;;		_Flash_Memory_Write
 12563 ;;		_setMemory_Data
 12564 ;; This function is called by:
 12565 ;;		_Flash_Memory_Main
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function _Flash_Memory_Modify
 12571  09DA                     _Flash_Memory_Modify:	
 12572                           
 12573                           ;MCU_B1.c: 1058: char i = 0;
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12577  09DA  01F7               	clrf	Flash_Memory_Modify@i
 12578                           
 12579                           ;MCU_B1.c: 1059: for (i = 0; i < 32; i++) {
 12580  09DB  01F7               	clrf	Flash_Memory_Modify@i
 12581  09DC  3020               	movlw	32
 12582  09DD  0277               	subwf	Flash_Memory_Modify@i,w
 12583  09DE  1803               	btfsc	3,0
 12584  09DF  29F4               	goto	l10599
 12585  09E0                     l10593:	
 12586                           
 12587                           ;MCU_B1.c: 1060: Memory.Data[i] = Flash_Memory_Read(i);
 12588  09E0  0877               	movf	Flash_Memory_Modify@i,w
 12589  09E1  3190  2066  3189   	fcall	_Flash_Memory_Read
 12590  09E4  00F6               	movwf	??_Flash_Memory_Modify
 12591  09E5  0877               	movf	Flash_Memory_Modify@i,w
 12592  09E6  3E30               	addlw	_Memory& (0+255)
 12593  09E7  0086               	movwf	6
 12594  09E8  3002               	movlw	2	; select bank4/5
 12595  09E9  0087               	movwf	7
 12596  09EA  0876               	movf	??_Flash_Memory_Modify,w
 12597  09EB  0081               	movwf	1
 12598  09EC  3001               	movlw	1
 12599  09ED  00F6               	movwf	??_Flash_Memory_Modify
 12600  09EE  0876               	movf	??_Flash_Memory_Modify,w
 12601  09EF  07F7               	addwf	Flash_Memory_Modify@i,f
 12602  09F0  3020               	movlw	32
 12603  09F1  0277               	subwf	Flash_Memory_Modify@i,w
 12604  09F2  1C03               	skipc
 12605  09F3  29E0               	goto	l10593
 12606  09F4                     l10599:	
 12607                           
 12608                           ;MCU_B1.c: 1061: }
 12609                           ;MCU_B1.c: 1062: setMemory_Data(6, product->Data[11]);
 12610  09F4  087B               	movf	_product,w
 12611  09F5  0086               	movwf	6
 12612  09F6  3002               	movlw	2	; select bank4/5
 12613  09F7  0087               	movwf	7
 12614  09F8  3002               	movlw	2	; select bank4/5
 12615  09F9  3F4B               	moviw [11]fsr1
 12616  09FA  00F2               	movwf	setMemory_Data@data
 12617  09FB  3006               	movlw	6
 12618  09FC  3198  2099  3189   	fcall	_setMemory_Data
 12619                           
 12620                           ;MCU_B1.c: 1063: setMemory_Data(0, product->Data[12]);
 12621  09FF  087B               	movf	_product,w
 12622  0A00  0086               	movwf	6
 12623  0A01  3002               	movlw	2	; select bank4/5
 12624  0A02  0087               	movwf	7
 12625  0A03  3002               	movlw	2	; select bank4/5
 12626  0A04  3F4C               	moviw [12]fsr1
 12627  0A05  00F2               	movwf	setMemory_Data@data
 12628  0A06  3000               	movlw	0
 12629  0A07  3198  2099  3189   	fcall	_setMemory_Data
 12630                           
 12631                           ;MCU_B1.c: 1064: setMemory_Data(1, product->Data[13]);
 12632  0A0A  087B               	movf	_product,w
 12633  0A0B  0086               	movwf	6
 12634  0A0C  3002               	movlw	2	; select bank4/5
 12635  0A0D  0087               	movwf	7
 12636  0A0E  3002               	movlw	2	; select bank4/5
 12637  0A0F  3F4D               	moviw [13]fsr1
 12638  0A10  00F2               	movwf	setMemory_Data@data
 12639  0A11  3001               	movlw	1
 12640  0A12  3198  2099  3189   	fcall	_setMemory_Data
 12641                           
 12642                           ;MCU_B1.c: 1065: setMemory_Data(2, product->Data[14]);
 12643  0A15  087B               	movf	_product,w
 12644  0A16  0086               	movwf	6
 12645  0A17  3002               	movlw	2	; select bank4/5
 12646  0A18  0087               	movwf	7
 12647  0A19  3002               	movlw	2	; select bank4/5
 12648  0A1A  3F4E               	moviw [14]fsr1
 12649  0A1B  00F2               	movwf	setMemory_Data@data
 12650  0A1C  3002               	movlw	2
 12651  0A1D  3198  2099  3189   	fcall	_setMemory_Data
 12652                           
 12653                           ;MCU_B1.c: 1067: setMemory_Data(3, product->Data[21]);
 12654  0A20  087B               	movf	_product,w
 12655  0A21  0086               	movwf	6
 12656  0A22  3002               	movlw	2	; select bank4/5
 12657  0A23  0087               	movwf	7
 12658  0A24  3002               	movlw	2	; select bank4/5
 12659  0A25  3F55               	moviw [21]fsr1
 12660  0A26  00F2               	movwf	setMemory_Data@data
 12661  0A27  3003               	movlw	3
 12662  0A28  3198  2099  3189   	fcall	_setMemory_Data
 12663                           
 12664                           ;MCU_B1.c: 1068: setMemory_Data(4, product->Data[22]);
 12665  0A2B  087B               	movf	_product,w
 12666  0A2C  0086               	movwf	6
 12667  0A2D  3002               	movlw	2	; select bank4/5
 12668  0A2E  0087               	movwf	7
 12669  0A2F  3002               	movlw	2	; select bank4/5
 12670  0A30  3F56               	moviw [22]fsr1
 12671  0A31  00F2               	movwf	setMemory_Data@data
 12672  0A32  3004               	movlw	4
 12673  0A33  3198  2099  3189   	fcall	_setMemory_Data
 12674                           
 12675                           ;MCU_B1.c: 1069: setMemory_Data(5, product->Data[23]);
 12676  0A36  087B               	movf	_product,w
 12677  0A37  0086               	movwf	6
 12678  0A38  3002               	movlw	2	; select bank4/5
 12679  0A39  0087               	movwf	7
 12680  0A3A  3002               	movlw	2	; select bank4/5
 12681  0A3B  3F57               	moviw [23]fsr1
 12682  0A3C  00F2               	movwf	setMemory_Data@data
 12683  0A3D  3005               	movlw	5
 12684  0A3E  3198  2099  3189   	fcall	_setMemory_Data
 12685                           
 12686                           ;MCU_B1.c: 1070: if (myMain.SaveDimmer == 1) {
 12687  0A41  0021               	movlb	1	; select bank1
 12688  0A42  1ED9               	btfss	(_myMain^(0+128)+10),5
 12689  0A43  2A4D               	goto	l10607
 12690                           
 12691                           ;MCU_B1.c: 1071: myMain.SaveDimmer = 0;
 12692  0A44  12D9               	bcf	(_myMain^(0+128)+10),5
 12693                           
 12694                           ;MCU_B1.c: 1072: setMemory_Data(30, 0xaa);
 12695  0A45  30AA               	movlw	170
 12696  0A46  00F6               	movwf	??_Flash_Memory_Modify
 12697  0A47  0876               	movf	??_Flash_Memory_Modify,w
 12698  0A48  00F2               	movwf	setMemory_Data@data
 12699  0A49  301E               	movlw	30
 12700  0A4A  3198  2099  3189   	fcall	_setMemory_Data
 12701  0A4D                     l10607:	
 12702                           
 12703                           ;MCU_B1.c: 1073: }
 12704                           ;MCU_B1.c: 1075: if (Memory.LoopSave == 1) {
 12705  0A4D  0024               	movlb	4	; select bank4
 12706  0A4E  1D54               	btfss	(_Memory^(0+512)+36),2
 12707  0A4F  2A54               	goto	l1523
 12708                           
 12709                           ;MCU_B1.c: 1076: Memory.LoopSave = 0;
 12710  0A50  1154               	bcf	(_Memory^(0+512)+36),2
 12711                           
 12712                           ;MCU_B1.c: 1077: myMain.FirstOpen = 0;
 12713  0A51  0021               	movlb	1	; select bank1
 12714  0A52  11CF               	bcf	_myMain^(0+128),3
 12715                           
 12716                           ;MCU_B1.c: 1078: myMain.First = 0;
 12717  0A53  12CF               	bcf	_myMain^(0+128),5
 12718  0A54                     l1523:	
 12719                           
 12720                           ;MCU_B1.c: 1080: }
 12721                           ;MCU_B1.c: 1081: GIE = 0;
 12722  0A54  138B               	bcf	11,7	;volatile
 12723                           
 12724                           ;MCU_B1.c: 1082: Flash_Memory_Erasing();
 12725  0A55  3198  20D2  3189   	fcall	_Flash_Memory_Erasing
 12726                           
 12727                           ;MCU_B1.c: 1083: Flash_Memory_Write();
 12728  0A58  319E  2612         	fcall	_Flash_Memory_Write
 12729                           
 12730                           ;MCU_B1.c: 1084: GIE = 1;
 12731  0A5A  178B               	bsf	11,7	;volatile
 12732  0A5B  0008               	return
 12733  0A5C                     __end_of_Flash_Memory_Modify:	
 12734                           
 12735                           	psect	text80
 12736  18D2                     __ptext80:	
 12737 ;; *************** function _Flash_Memory_Erasing *****************
 12738 ;; Defined at:
 12739 ;;		line 1046 in file "../src/MCU_B1.c"
 12740 ;; Parameters:    Size  Location     Type
 12741 ;;		None
 12742 ;; Auto vars:     Size  Location     Type
 12743 ;;		None
 12744 ;; Return value:  Size  Location     Type
 12745 ;;		None               void
 12746 ;; Registers used:
 12747 ;;		wreg, status,2, status,0, pclath, cstack
 12748 ;; Tracked objects:
 12749 ;;		On entry : 0/0
 12750 ;;		On exit  : 0/0
 12751 ;;		Unchanged: 0/0
 12752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;Total ram usage:        0 bytes
 12758 ;; Hardware stack levels used:    1
 12759 ;; Hardware stack levels required when called:    4
 12760 ;; This function calls:
 12761 ;;		_Flash_Memory_Unlock
 12762 ;; This function is called by:
 12763 ;;		_Flash_Memory_Modify
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _Flash_Memory_Erasing
 12769  18D2                     _Flash_Memory_Erasing:	
 12770                           
 12771                           ;MCU_B1.c: 1047: CFGS = 0;
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12775  18D2  0023               	movlb	3	; select bank3
 12776  18D3  1315               	bcf	21,6	;volatile
 12777                           
 12778                           ;MCU_B1.c: 1048: PMADRH = 0x30;
 12779  18D4  3030               	movlw	48
 12780  18D5  0092               	movwf	18	;volatile
 12781                           
 12782                           ;MCU_B1.c: 1049: PMADRL = 0x00;
 12783  18D6  0191               	clrf	17	;volatile
 12784                           
 12785                           ;MCU_B1.c: 1050: FREE = 1;
 12786  18D7  1615               	bsf	21,4	;volatile
 12787                           
 12788                           ;MCU_B1.c: 1051: WREN = 1;
 12789  18D8  1515               	bsf	21,2	;volatile
 12790                           
 12791                           ;MCU_B1.c: 1052: Flash_Memory_Unlock();
 12792  18D9  3187  27F7         	fcall	_Flash_Memory_Unlock
 12793                           
 12794                           ;MCU_B1.c: 1053: WREN = 0;
 12795  18DB  0023               	movlb	3	; select bank3
 12796  18DC  1115               	bcf	21,2	;volatile
 12797  18DD  0008               	return
 12798  18DE                     __end_of_Flash_Memory_Erasing:	
 12799                           
 12800                           	psect	text81
 12801  0601                     __ptext81:	
 12802 ;; *************** function _Flash_Memory_Initialization *****************
 12803 ;; Defined at:
 12804 ;;		line 934 in file "../src/MCU_B1.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;		None
 12807 ;; Auto vars:     Size  Location     Type
 12808 ;;  value           1    7[COMMON] unsigned char 
 12809 ;; Return value:  Size  Location     Type
 12810 ;;		None               void
 12811 ;; Registers used:
 12812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12813 ;; Tracked objects:
 12814 ;;		On entry : 0/0
 12815 ;;		On exit  : 0/0
 12816 ;;		Unchanged: 0/0
 12817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;Total ram usage:        2 bytes
 12823 ;; Hardware stack levels used:    1
 12824 ;; Hardware stack levels required when called:    5
 12825 ;; This function calls:
 12826 ;;		_Flash_Memory_Read
 12827 ;;		_Flash_Memory_Write
 12828 ;;		_setMemory_Data
 12829 ;; This function is called by:
 12830 ;;		_main
 12831 ;; This function uses a non-reentrant model
 12832 ;;
 12833                           
 12834                           
 12835                           ;psect for function _Flash_Memory_Initialization
 12836  0601                     _Flash_Memory_Initialization:	
 12837                           
 12838                           ;MCU_B1.c: 935: char value = 0;
 12839                           
 12840                           ;incstack = 0
 12841                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12842  0601  01F7               	clrf	Flash_Memory_Initialization@value
 12843                           
 12844                           ;MCU_B1.c: 936: if (Flash_Memory_Read(31) == 0xaa) {
 12845  0602  301F               	movlw	31
 12846  0603  3190  2066  3186   	fcall	_Flash_Memory_Read
 12847  0606  3AAA               	xorlw	170
 12848  0607  1D03               	skipz
 12849  0608  2E7C               	goto	l10895
 12850                           
 12851                           ;MCU_B1.c: 937: product->Data[11] = Flash_Memory_Read(6);
 12852  0609  3006               	movlw	6
 12853  060A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12854  060D  00F6               	movwf	??_Flash_Memory_Initialization
 12855  060E  087B               	movf	_product,w
 12856  060F  3E0B               	addlw	11
 12857  0610  0086               	movwf	6
 12858  0611  3002               	movlw	2	; select bank4/5
 12859  0612  0087               	movwf	7
 12860  0613  0876               	movf	??_Flash_Memory_Initialization,w
 12861  0614  0081               	movwf	1
 12862                           
 12863                           ;MCU_B1.c: 938: product->Data[12] = Flash_Memory_Read(0);
 12864  0615  3000               	movlw	0
 12865  0616  3190  2066  3186   	fcall	_Flash_Memory_Read
 12866  0619  00F6               	movwf	??_Flash_Memory_Initialization
 12867  061A  087B               	movf	_product,w
 12868  061B  3E0C               	addlw	12
 12869  061C  0086               	movwf	6
 12870  061D  3002               	movlw	2	; select bank4/5
 12871  061E  0087               	movwf	7
 12872  061F  0876               	movf	??_Flash_Memory_Initialization,w
 12873  0620  0081               	movwf	1
 12874                           
 12875                           ;MCU_B1.c: 939: product->Data[13] = Flash_Memory_Read(1);
 12876  0621  3001               	movlw	1
 12877  0622  3190  2066  3186   	fcall	_Flash_Memory_Read
 12878  0625  00F6               	movwf	??_Flash_Memory_Initialization
 12879  0626  087B               	movf	_product,w
 12880  0627  3E0D               	addlw	13
 12881  0628  0086               	movwf	6
 12882  0629  3002               	movlw	2	; select bank4/5
 12883  062A  0087               	movwf	7
 12884  062B  0876               	movf	??_Flash_Memory_Initialization,w
 12885  062C  0081               	movwf	1
 12886                           
 12887                           ;MCU_B1.c: 940: product->Data[14] = Flash_Memory_Read(2);
 12888  062D  3002               	movlw	2
 12889  062E  3190  2066  3186   	fcall	_Flash_Memory_Read
 12890  0631  00F6               	movwf	??_Flash_Memory_Initialization
 12891  0632  087B               	movf	_product,w
 12892  0633  3E0E               	addlw	14
 12893  0634  0086               	movwf	6
 12894  0635  3002               	movlw	2	; select bank4/5
 12895  0636  0087               	movwf	7
 12896  0637  0876               	movf	??_Flash_Memory_Initialization,w
 12897  0638  0081               	movwf	1
 12898                           
 12899                           ;MCU_B1.c: 943: product->Data[21] = Flash_Memory_Read(3);
 12900  0639  3003               	movlw	3
 12901  063A  3190  2066  3186   	fcall	_Flash_Memory_Read
 12902  063D  00F6               	movwf	??_Flash_Memory_Initialization
 12903  063E  087B               	movf	_product,w
 12904  063F  3E15               	addlw	21
 12905  0640  0086               	movwf	6
 12906  0641  3002               	movlw	2	; select bank4/5
 12907  0642  0087               	movwf	7
 12908  0643  0876               	movf	??_Flash_Memory_Initialization,w
 12909  0644  0081               	movwf	1
 12910                           
 12911                           ;MCU_B1.c: 944: product->Data[22] = Flash_Memory_Read(4);
 12912  0645  3004               	movlw	4
 12913  0646  3190  2066  3186   	fcall	_Flash_Memory_Read
 12914  0649  00F6               	movwf	??_Flash_Memory_Initialization
 12915  064A  087B               	movf	_product,w
 12916  064B  3E16               	addlw	22
 12917  064C  0086               	movwf	6
 12918  064D  3002               	movlw	2	; select bank4/5
 12919  064E  0087               	movwf	7
 12920  064F  0876               	movf	??_Flash_Memory_Initialization,w
 12921  0650  0081               	movwf	1
 12922                           
 12923                           ;MCU_B1.c: 945: product->Data[23] = Flash_Memory_Read(5);
 12924  0651  3005               	movlw	5
 12925  0652  3190  2066  3186   	fcall	_Flash_Memory_Read
 12926  0655  00F6               	movwf	??_Flash_Memory_Initialization
 12927  0656  087B               	movf	_product,w
 12928  0657  3E17               	addlw	23
 12929  0658  0086               	movwf	6
 12930  0659  3002               	movlw	2	; select bank4/5
 12931  065A  0087               	movwf	7
 12932  065B  0876               	movf	??_Flash_Memory_Initialization,w
 12933  065C  0081               	movwf	1
 12934                           
 12935                           ;MCU_B1.c: 952: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12936  065D  087B               	movf	_product,w
 12937  065E  3E0C               	addlw	12
 12938  065F  0086               	movwf	6
 12939  0660  3002               	movlw	2	; select bank4/5
 12940  0661  0087               	movwf	7
 12941  0662  0801               	movf	1,w
 12942  0663  3AFF               	xorlw	255
 12943  0664  1D03               	skipz
 12944  0665  0008               	return
 12945  0666  087B               	movf	_product,w
 12946  0667  3E0D               	addlw	13
 12947  0668  0086               	movwf	6
 12948  0669  3002               	movlw	2	; select bank4/5
 12949  066A  0087               	movwf	7
 12950  066B  0801               	movf	1,w
 12951  066C  3AFF               	xorlw	255
 12952  066D  1D03               	skipz
 12953  066E  0008               	return
 12954  066F  087B               	movf	_product,w
 12955  0670  3E0E               	addlw	14
 12956  0671  0086               	movwf	6
 12957  0672  3002               	movlw	2	; select bank4/5
 12958  0673  0087               	movwf	7
 12959  0674  0801               	movf	1,w
 12960  0675  3AFF               	xorlw	255
 12961  0676  1D03               	skipz
 12962  0677  0008               	return
 12963                           
 12964                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 12965  0678  0021               	movlb	1	; select bank1
 12966  0679  15CF               	bsf	_myMain^(0+128),3
 12967                           
 12968                           ;MCU_B1.c: 954: myMain.First = 1;
 12969  067A  16CF               	bsf	_myMain^(0+128),5
 12970                           
 12971                           ;MCU_B1.c: 955: }
 12972                           ;MCU_B1.c: 956: } else {
 12973  067B  0008               	return
 12974  067C                     l10895:	
 12975                           
 12976                           ;MCU_B1.c: 958: setMemory_Data(0, 0xff);
 12977  067C  30FF               	movlw	255
 12978  067D  00F6               	movwf	??_Flash_Memory_Initialization
 12979  067E  0876               	movf	??_Flash_Memory_Initialization,w
 12980  067F  00F2               	movwf	setMemory_Data@data
 12981  0680  3000               	movlw	0
 12982  0681  3198  2099  3186   	fcall	_setMemory_Data
 12983                           
 12984                           ;MCU_B1.c: 959: setMemory_Data(1, 0xff);
 12985  0684  30FF               	movlw	255
 12986  0685  00F6               	movwf	??_Flash_Memory_Initialization
 12987  0686  0876               	movf	??_Flash_Memory_Initialization,w
 12988  0687  00F2               	movwf	setMemory_Data@data
 12989  0688  3001               	movlw	1
 12990  0689  3198  2099  3186   	fcall	_setMemory_Data
 12991                           
 12992                           ;MCU_B1.c: 960: setMemory_Data(2, 0xff);
 12993  068C  30FF               	movlw	255
 12994  068D  00F6               	movwf	??_Flash_Memory_Initialization
 12995  068E  0876               	movf	??_Flash_Memory_Initialization,w
 12996  068F  00F2               	movwf	setMemory_Data@data
 12997  0690  3002               	movlw	2
 12998  0691  3198  2099  3186   	fcall	_setMemory_Data
 12999                           
 13000                           ;MCU_B1.c: 961: setMemory_Data(3, 0xff);
 13001  0694  30FF               	movlw	255
 13002  0695  00F6               	movwf	??_Flash_Memory_Initialization
 13003  0696  0876               	movf	??_Flash_Memory_Initialization,w
 13004  0697  00F2               	movwf	setMemory_Data@data
 13005  0698  3003               	movlw	3
 13006  0699  3198  2099  3186   	fcall	_setMemory_Data
 13007                           
 13008                           ;MCU_B1.c: 962: setMemory_Data(4, 0xff);
 13009  069C  30FF               	movlw	255
 13010  069D  00F6               	movwf	??_Flash_Memory_Initialization
 13011  069E  0876               	movf	??_Flash_Memory_Initialization,w
 13012  069F  00F2               	movwf	setMemory_Data@data
 13013  06A0  3004               	movlw	4
 13014  06A1  3198  2099  3186   	fcall	_setMemory_Data
 13015                           
 13016                           ;MCU_B1.c: 963: setMemory_Data(5, 0xff);
 13017  06A4  30FF               	movlw	255
 13018  06A5  00F6               	movwf	??_Flash_Memory_Initialization
 13019  06A6  0876               	movf	??_Flash_Memory_Initialization,w
 13020  06A7  00F2               	movwf	setMemory_Data@data
 13021  06A8  3005               	movlw	5
 13022  06A9  3198  2099  3186   	fcall	_setMemory_Data
 13023                           
 13024                           ;MCU_B1.c: 964: setMemory_Data(6, 0xff);
 13025  06AC  30FF               	movlw	255
 13026  06AD  00F6               	movwf	??_Flash_Memory_Initialization
 13027  06AE  0876               	movf	??_Flash_Memory_Initialization,w
 13028  06AF  00F2               	movwf	setMemory_Data@data
 13029  06B0  3006               	movlw	6
 13030  06B1  3198  2099  3186   	fcall	_setMemory_Data
 13031                           
 13032                           ;MCU_B1.c: 965: setMemory_Data(31, 0xaa);
 13033  06B4  30AA               	movlw	170
 13034  06B5  00F6               	movwf	??_Flash_Memory_Initialization
 13035  06B6  0876               	movf	??_Flash_Memory_Initialization,w
 13036  06B7  00F2               	movwf	setMemory_Data@data
 13037  06B8  301F               	movlw	31
 13038  06B9  3198  2099  3186   	fcall	_setMemory_Data
 13039                           
 13040                           ;MCU_B1.c: 970: GIE = 0;
 13041  06BC  138B               	bcf	11,7	;volatile
 13042                           
 13043                           ;MCU_B1.c: 971: Flash_Memory_Write();
 13044  06BD  319E  2612         	fcall	_Flash_Memory_Write
 13045                           
 13046                           ;MCU_B1.c: 972: GIE = 1;
 13047  06BF  178B               	bsf	11,7	;volatile
 13048                           
 13049                           ;MCU_B1.c: 973: myMain.FirstOpen = 1;
 13050  06C0  0021               	movlb	1	; select bank1
 13051  06C1  15CF               	bsf	_myMain^(0+128),3
 13052                           
 13053                           ;MCU_B1.c: 974: myMain.First = 1;
 13054  06C2  16CF               	bsf	_myMain^(0+128),5
 13055                           
 13056                           ;MCU_B1.c: 975: myMain.InitDimmer = 1;
 13057  06C3  1659               	bsf	(_myMain^(0+128)+10),4
 13058  06C4  0008               	return
 13059  06C5                     __end_of_Flash_Memory_Initialization:	
 13060                           
 13061                           	psect	text82
 13062  1899                     __ptext82:	
 13063 ;; *************** function _setMemory_Data *****************
 13064 ;; Defined at:
 13065 ;;		line 1099 in file "../src/MCU_B1.c"
 13066 ;; Parameters:    Size  Location     Type
 13067 ;;  address         1    wreg     unsigned char 
 13068 ;;  data            1    2[COMMON] unsigned char 
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;  address         1    4[COMMON] unsigned char 
 13071 ;; Return value:  Size  Location     Type
 13072 ;;		None               void
 13073 ;; Registers used:
 13074 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13080 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;Total ram usage:        3 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    3
 13087 ;; This function calls:
 13088 ;;		Nothing
 13089 ;; This function is called by:
 13090 ;;		_Flash_Memory_Initialization
 13091 ;;		_Flash_Memory_Modify
 13092 ;; This function uses a non-reentrant model
 13093 ;;
 13094                           
 13095                           
 13096                           ;psect for function _setMemory_Data
 13097  1899                     _setMemory_Data:	
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13101                           ;setMemory_Data@address stored from wreg
 13102  1899  00F4               	movwf	setMemory_Data@address
 13103                           
 13104                           ;MCU_B1.c: 1100: Memory.Data[address] = data;
 13105  189A  0872               	movf	setMemory_Data@data,w
 13106  189B  00F3               	movwf	??_setMemory_Data
 13107  189C  0874               	movf	setMemory_Data@address,w
 13108  189D  3E30               	addlw	_Memory& (0+255)
 13109  189E  0086               	movwf	6
 13110  189F  3002               	movlw	2	; select bank4/5
 13111  18A0  0087               	movwf	7
 13112  18A1  0873               	movf	??_setMemory_Data,w
 13113  18A2  0081               	movwf	1
 13114  18A3  0008               	return
 13115  18A4                     __end_of_setMemory_Data:	
 13116                           
 13117                           	psect	text83
 13118  1E12                     __ptext83:	
 13119 ;; *************** function _Flash_Memory_Write *****************
 13120 ;; Defined at:
 13121 ;;		line 1027 in file "../src/MCU_B1.c"
 13122 ;; Parameters:    Size  Location     Type
 13123 ;;		None
 13124 ;; Auto vars:     Size  Location     Type
 13125 ;;  i               1    3[COMMON] unsigned char 
 13126 ;; Return value:  Size  Location     Type
 13127 ;;		None               void
 13128 ;; Registers used:
 13129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13130 ;; Tracked objects:
 13131 ;;		On entry : 0/0
 13132 ;;		On exit  : 0/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;Total ram usage:        2 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:    4
 13142 ;; This function calls:
 13143 ;;		_Flash_Memory_Unlock
 13144 ;; This function is called by:
 13145 ;;		_Flash_Memory_Initialization
 13146 ;;		_Flash_Memory_Modify
 13147 ;; This function uses a non-reentrant model
 13148 ;;
 13149                           
 13150                           
 13151                           ;psect for function _Flash_Memory_Write
 13152  1E12                     _Flash_Memory_Write:	
 13153                           
 13154                           ;MCU_B1.c: 1028: char i = 0;
 13155                           
 13156                           ;incstack = 0
 13157                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13158  1E12  01F3               	clrf	Flash_Memory_Write@i
 13159                           
 13160                           ;MCU_B1.c: 1029: CFGS = 0;
 13161  1E13  0023               	movlb	3	; select bank3
 13162  1E14  1315               	bcf	21,6	;volatile
 13163                           
 13164                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 13165  1E15  3030               	movlw	48
 13166  1E16  0092               	movwf	18	;volatile
 13167                           
 13168                           ;MCU_B1.c: 1031: PMDATH = 0;
 13169  1E17  0194               	clrf	20	;volatile
 13170                           
 13171                           ;MCU_B1.c: 1032: FREE = 0;
 13172  1E18  1215               	bcf	21,4	;volatile
 13173                           
 13174                           ;MCU_B1.c: 1033: LWLO = 1;
 13175  1E19  1695               	bsf	21,5	;volatile
 13176                           
 13177                           ;MCU_B1.c: 1034: WREN = 1;
 13178  1E1A  1515               	bsf	21,2	;volatile
 13179                           
 13180                           ;MCU_B1.c: 1035: for (i = 0; i < 32; i++) {
 13181  1E1B  01F3               	clrf	Flash_Memory_Write@i
 13182  1E1C  3020               	movlw	32
 13183  1E1D  0273               	subwf	Flash_Memory_Write@i,w
 13184  1E1E  1803               	btfsc	3,0
 13185  1E1F  2E35               	goto	l1513
 13186  1E20                     l10315:	
 13187                           
 13188                           ;MCU_B1.c: 1036: PMADRL = i;
 13189  1E20  0873               	movf	Flash_Memory_Write@i,w
 13190  1E21  0023               	movlb	3	; select bank3
 13191  1E22  0091               	movwf	17	;volatile
 13192                           
 13193                           ;MCU_B1.c: 1037: PMDATL = Memory.Data[i];
 13194  1E23  0873               	movf	Flash_Memory_Write@i,w
 13195  1E24  3E30               	addlw	_Memory& (0+255)
 13196  1E25  0086               	movwf	6
 13197  1E26  3002               	movlw	2	; select bank4/5
 13198  1E27  0087               	movwf	7
 13199  1E28  0801               	movf	1,w
 13200  1E29  0093               	movwf	19	;volatile
 13201                           
 13202                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 13203  1E2A  3187  27F7  319E   	fcall	_Flash_Memory_Unlock
 13204  1E2D  3001               	movlw	1
 13205  1E2E  00F2               	movwf	??_Flash_Memory_Write
 13206  1E2F  0872               	movf	??_Flash_Memory_Write,w
 13207  1E30  07F3               	addwf	Flash_Memory_Write@i,f
 13208  1E31  3020               	movlw	32
 13209  1E32  0273               	subwf	Flash_Memory_Write@i,w
 13210  1E33  1C03               	skipc
 13211  1E34  2E20               	goto	l10315
 13212  1E35                     l1513:	
 13213                           
 13214                           ;MCU_B1.c: 1039: }
 13215                           ;MCU_B1.c: 1040: LWLO = 0;
 13216  1E35  0023               	movlb	3	; select bank3
 13217  1E36  1295               	bcf	21,5	;volatile
 13218                           
 13219                           ;MCU_B1.c: 1041: Flash_Memory_Unlock();
 13220  1E37  3187  27F7         	fcall	_Flash_Memory_Unlock
 13221                           
 13222                           ;MCU_B1.c: 1042: WREN = 0;
 13223  1E39  0023               	movlb	3	; select bank3
 13224  1E3A  1115               	bcf	21,2	;volatile
 13225  1E3B  0008               	return
 13226  1E3C                     __end_of_Flash_Memory_Write:	
 13227                           
 13228                           	psect	text84
 13229  07F7                     __ptext84:	
 13230 ;; *************** function _Flash_Memory_Unlock *****************
 13231 ;; Defined at:
 13232 ;;		line 1006 in file "../src/MCU_B1.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;		None
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;		None
 13237 ;; Return value:  Size  Location     Type
 13238 ;;		None               void
 13239 ;; Registers used:
 13240 ;;		wreg
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;Total ram usage:        0 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    3
 13253 ;; This function calls:
 13254 ;;		Nothing
 13255 ;; This function is called by:
 13256 ;;		_Flash_Memory_Write
 13257 ;;		_Flash_Memory_Erasing
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           
 13262                           ;psect for function _Flash_Memory_Unlock
 13263  07F7                     _Flash_Memory_Unlock:	
 13264                           
 13265                           ;MCU_B1.c: 1007: PMCON2 = 0x55;
 13266                           
 13267                           ;incstack = 0
 13268                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13269  07F7  3055               	movlw	85
 13270  07F8  0023               	movlb	3	; select bank3
 13271  07F9  0096               	movwf	22	;volatile
 13272                           
 13273                           ;MCU_B1.c: 1008: PMCON2 = 0xaa;
 13274  07FA  30AA               	movlw	170
 13275  07FB  0096               	movwf	22	;volatile
 13276                           
 13277                           ;MCU_B1.c: 1009: WR = 1;
 13278  07FC  1495               	bsf	21,1	;volatile
 13279                           
 13280                           ;MCU_B1.c: 1010: __nop();
 13281  07FD  0000               	nop
 13282                           
 13283                           ;MCU_B1.c: 1011: __nop();
 13284  07FE  0000               	nop
 13285  07FF  0008               	return
 13286  0800                     __end_of_Flash_Memory_Unlock:	
 13287                           
 13288                           	psect	text85
 13289  1066                     __ptext85:	
 13290 ;; *************** function _Flash_Memory_Read *****************
 13291 ;; Defined at:
 13292 ;;		line 1015 in file "../src/MCU_B1.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;  address         1    wreg     unsigned char 
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;  address         1    4[COMMON] unsigned char 
 13297 ;;  ret             1    5[COMMON] unsigned char 
 13298 ;;  i               1    3[COMMON] unsigned char 
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  1    wreg      unsigned char 
 13301 ;; Registers used:
 13302 ;;		wreg, status,2
 13303 ;; Tracked objects:
 13304 ;;		On entry : 0/0
 13305 ;;		On exit  : 0/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13309 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;Total ram usage:        4 bytes
 13313 ;; Hardware stack levels used:    1
 13314 ;; Hardware stack levels required when called:    3
 13315 ;; This function calls:
 13316 ;;		Nothing
 13317 ;; This function is called by:
 13318 ;;		_Flash_Memory_Initialization
 13319 ;;		_Flash_Memory_Modify
 13320 ;; This function uses a non-reentrant model
 13321 ;;
 13322                           
 13323                           
 13324                           ;psect for function _Flash_Memory_Read
 13325  1066                     _Flash_Memory_Read:	
 13326                           
 13327                           ;incstack = 0
 13328                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13329                           ;Flash_Memory_Read@address stored from wreg
 13330  1066  00F4               	movwf	Flash_Memory_Read@address
 13331                           
 13332                           ;MCU_B1.c: 1016: char i = 0, ret = 0;
 13333  1067  01F3               	clrf	Flash_Memory_Read@i
 13334  1068  01F5               	clrf	Flash_Memory_Read@ret
 13335                           
 13336                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 13337  1069  3030               	movlw	48
 13338  106A  0023               	movlb	3	; select bank3
 13339  106B  0092               	movwf	18	;volatile
 13340                           
 13341                           ;MCU_B1.c: 1018: PMADRL = address;
 13342  106C  0874               	movf	Flash_Memory_Read@address,w
 13343  106D  0091               	movwf	17	;volatile
 13344                           
 13345                           ;MCU_B1.c: 1019: CFGS = 0;
 13346  106E  1315               	bcf	21,6	;volatile
 13347                           
 13348                           ;MCU_B1.c: 1020: RD = 1;
 13349  106F  1415               	bsf	21,0	;volatile
 13350                           
 13351                           ;MCU_B1.c: 1021: i = PMDATH;
 13352  1070  0814               	movf	20,w	;volatile
 13353  1071  00F2               	movwf	??_Flash_Memory_Read
 13354  1072  0872               	movf	??_Flash_Memory_Read,w
 13355  1073  00F3               	movwf	Flash_Memory_Read@i
 13356                           
 13357                           ;MCU_B1.c: 1022: ret = PMDATL;
 13358  1074  0813               	movf	19,w	;volatile
 13359  1075  00F2               	movwf	??_Flash_Memory_Read
 13360  1076  0872               	movf	??_Flash_Memory_Read,w
 13361  1077  00F5               	movwf	Flash_Memory_Read@ret
 13362                           
 13363                           ;MCU_B1.c: 1023: return ret;
 13364  1078  0875               	movf	Flash_Memory_Read@ret,w
 13365  1079  0008               	return
 13366  107A                     __end_of_Flash_Memory_Read:	
 13367                           
 13368                           	psect	text86
 13369  052F                     __ptext86:	
 13370 ;; *************** function _Exception_Main *****************
 13371 ;; Defined at:
 13372 ;;		line 504 in file "../src/Main_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  i               2   11[BANK0 ] int 
 13377 ;;  i               2    9[BANK0 ] int 
 13378 ;;  lights          1   13[BANK0 ] unsigned char 
 13379 ;;  error           1    8[BANK0 ] unsigned char 
 13380 ;;  count           1    7[BANK0 ] unsigned char 
 13381 ;;  status          1    6[BANK0 ] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;		None               void
 13384 ;; Registers used:
 13385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;Total ram usage:        9 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    5
 13398 ;; This function calls:
 13399 ;;		_getDimmerLights_Line
 13400 ;;		_getDimmerLights_Status
 13401 ;;		_getMain_All_Error_Status
 13402 ;;		_getMain_All_LightsStatus
 13403 ;;		_setBuz
 13404 ;;		_setDimmerLights_SwOff
 13405 ;;		_setLED
 13406 ;; This function is called by:
 13407 ;;		_main
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           
 13412                           ;psect for function _Exception_Main
 13413  052F                     _Exception_Main:	
 13414                           
 13415                           ;Main_B1.c: 505: char error = getMain_All_Error_Status(0);
 13416                           
 13417                           ;incstack = 0
 13418                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13419  052F  3000               	movlw	0
 13420  0530  319E  263C  3185   	fcall	_getMain_All_Error_Status
 13421  0533  00F9               	movwf	??_Exception_Main
 13422  0534  0879               	movf	??_Exception_Main,w
 13423  0535  0020               	movlb	0	; select bank0
 13424  0536  00A8               	movwf	Exception_Main@error
 13425                           
 13426                           ;Main_B1.c: 506: char lights = 0, count = 2;
 13427  0537  01AD               	clrf	Exception_Main@lights
 13428  0538  3002               	movlw	2
 13429  0539  00F9               	movwf	??_Exception_Main
 13430  053A  0879               	movf	??_Exception_Main,w
 13431  053B  00A7               	movwf	Exception_Main@count
 13432                           
 13433                           ;Main_B1.c: 507: char status = 0;
 13434  053C  01A6               	clrf	Exception_Main@status
 13435                           
 13436                           ;Main_B1.c: 509: if (myMain.Error_Run == 1) {
 13437  053D  0021               	movlb	1	; select bank1
 13438  053E  1DD9               	btfss	(_myMain^(0+128)+10),3
 13439  053F  2D4E               	goto	l11151
 13440                           
 13441                           ;Main_B1.c: 510: if (error == 0) {
 13442  0540  0020               	movlb	0	; select bank0
 13443  0541  08A8               	movf	Exception_Main@error,f
 13444  0542  1D03               	skipz
 13445  0543  0008               	return
 13446                           
 13447                           ;Main_B1.c: 511: myMain.Error_Run = 0;
 13448  0544  0021               	movlb	1	; select bank1
 13449  0545  11D9               	bcf	(_myMain^(0+128)+10),3
 13450                           
 13451                           ;Main_B1.c: 514: setLED(99, 10);
 13452  0546  300A               	movlw	10
 13453  0547  00F9               	movwf	??_Exception_Main
 13454  0548  0879               	movf	??_Exception_Main,w
 13455  0549  00F4               	movwf	setLED@command
 13456  054A  3063               	movlw	99
 13457  054B  3194  24ED         	fcall	_setLED
 13458                           
 13459                           ;Main_B1.c: 527: }
 13460                           ;Main_B1.c: 528: } else {
 13461  054D  0008               	return
 13462  054E                     l11151:	
 13463                           
 13464                           ;Main_B1.c: 529: if (error != 0) {
 13465  054E  0020               	movlb	0	; select bank0
 13466  054F  0828               	movf	Exception_Main@error,w
 13467  0550  1903               	btfsc	3,2
 13468  0551  0008               	return
 13469                           
 13470                           ;Main_B1.c: 530: myMain.Error_Run = 1;
 13471  0552  0021               	movlb	1	; select bank1
 13472  0553  15D9               	bsf	(_myMain^(0+128)+10),3
 13473                           
 13474                           ;Main_B1.c: 532: setLED(99, 11);
 13475  0554  300B               	movlw	11
 13476  0555  00F9               	movwf	??_Exception_Main
 13477  0556  0879               	movf	??_Exception_Main,w
 13478  0557  00F4               	movwf	setLED@command
 13479  0558  3063               	movlw	99
 13480  0559  3194  24ED  3185   	fcall	_setLED
 13481                           
 13482                           ;Main_B1.c: 543: switch (error) {
 13483  055C  2DF6               	goto	l11199
 13484  055D                     l11157:	
 13485                           ;Main_B1.c: 544: case 2:
 13486                           
 13487                           
 13488                           ;Main_B1.c: 551: if (getMain_All_LightsStatus() == 1) {
 13489  055D  3199  2159  3185   	fcall	_getMain_All_LightsStatus
 13490  0560  3A01               	xorlw	1
 13491  0561  1D03               	skipz
 13492  0562  2D6C               	goto	l11161
 13493                           
 13494                           ;Main_B1.c: 552: setBuz(10, 300);
 13495  0563  302C               	movlw	44
 13496  0564  0020               	movlb	0	; select bank0
 13497  0565  00A4               	movwf	setBuz@time
 13498  0566  3001               	movlw	1
 13499  0567  00A5               	movwf	setBuz@time+1
 13500  0568  300A               	movlw	10
 13501  0569  3192  22EC  3185   	fcall	_setBuz
 13502  056C                     l11161:	
 13503                           
 13504                           ;Main_B1.c: 553: }
 13505                           ;Main_B1.c: 555: for (int i = 0; i < count; i++) {
 13506  056C  0020               	movlb	0	; select bank0
 13507  056D  01A9               	clrf	Exception_Main@i
 13508  056E  01AA               	clrf	Exception_Main@i+1
 13509  056F                     l11171:	
 13510  056F  082A               	movf	Exception_Main@i+1,w
 13511  0570  3A80               	xorlw	128
 13512  0571  00F9               	movwf	??_Exception_Main
 13513  0572  3080               	movlw	128
 13514  0573  0279               	subwf	??_Exception_Main,w
 13515  0574  1D03               	skipz
 13516  0575  2D78               	goto	u12745
 13517  0576  0827               	movf	Exception_Main@count,w
 13518  0577  0229               	subwf	Exception_Main@i,w
 13519  0578                     u12745:	
 13520  0578  1803               	btfsc	3,0
 13521  0579  2D99               	goto	u12740
 13522                           
 13523                           ;Main_B1.c: 557: if (getDimmerLights_Status(i + 1) == 1) {
 13524  057A  0020               	movlb	0	; select bank0
 13525  057B  0829               	movf	Exception_Main@i,w
 13526  057C  3E01               	addlw	1
 13527  057D  3199  212C  3185   	fcall	_getDimmerLights_Status
 13528  0580  3A01               	xorlw	1
 13529  0581  1D03               	skipz
 13530  0582  2D93               	goto	l11169
 13531                           
 13532                           ;Main_B1.c: 558: DimmerLights->SwFlag = 1;
 13533  0583  0020               	movlb	0	; select bank0
 13534  0584  086C               	movf	_DimmerLights,w
 13535  0585  0086               	movwf	6
 13536  0586  3001               	movlw	1	; select bank2/3
 13537  0587  0087               	movwf	7
 13538  0588  1401               	bsf	1,0
 13539                           
 13540                           ;Main_B1.c: 559: DimmerLights->Status = 0;
 13541  0589  0A6C               	incf	_DimmerLights,w
 13542  058A  0086               	movwf	6
 13543  058B  3001               	movlw	1	; select bank2/3
 13544  058C  0087               	movwf	7
 13545  058D  1001               	bcf	1,0
 13546                           
 13547                           ;Main_B1.c: 560: setDimmerLights_SwOff(i + 1);
 13548  058E  0829               	movf	Exception_Main@i,w
 13549  058F  3E01               	addlw	1
 13550  0590  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13551  0593                     l11169:	
 13552  0593  3001               	movlw	1
 13553  0594  0020               	movlb	0	; select bank0
 13554  0595  07A9               	addwf	Exception_Main@i,f
 13555  0596  3000               	movlw	0
 13556  0597  3DAA               	addwfc	Exception_Main@i+1,f
 13557  0598  2D6F               	goto	l11171
 13558  0599                     u12740:	
 13559  0599  0020               	movlb	0	; select bank0
 13560  059A  0008               	return
 13561  059B                     l11173:	
 13562                           ;Main_B1.c: 566: case 3:
 13563                           
 13564                           ;Main_B1.c: 561: }
 13565                           ;Main_B1.c: 562: }
 13566                           ;Main_B1.c: 565: break;
 13567                           
 13568                           
 13569                           ;Main_B1.c: 568: setBuz(5, 300);
 13570  059B  302C               	movlw	44
 13571  059C  0020               	movlb	0	; select bank0
 13572  059D  00A4               	movwf	setBuz@time
 13573  059E  3001               	movlw	1
 13574  059F  00A5               	movwf	setBuz@time+1
 13575  05A0  3005               	movlw	5
 13576  05A1  3192  22EC  3185   	fcall	_setBuz
 13577                           
 13578                           ;Main_B1.c: 569: lights = getDimmerLights_Line();
 13579  05A4  3199  2168  3185   	fcall	_getDimmerLights_Line
 13580  05A7  00F9               	movwf	??_Exception_Main
 13581  05A8  0879               	movf	??_Exception_Main,w
 13582  05A9  0020               	movlb	0	; select bank0
 13583  05AA  00AD               	movwf	Exception_Main@lights
 13584                           
 13585                           ;Main_B1.c: 570: if (lights == 0) {
 13586  05AB  08AD               	movf	Exception_Main@lights,f
 13587  05AC  1D03               	skipz
 13588  05AD  2DDC               	goto	l11191
 13589                           
 13590                           ;Main_B1.c: 572: for (int i = 0; i < count; i++) {
 13591  05AE  01AB               	clrf	Exception_Main@i_4227
 13592  05AF  01AC               	clrf	Exception_Main@i_4227+1
 13593  05B0                     l11189:	
 13594  05B0  082C               	movf	Exception_Main@i_4227+1,w
 13595  05B1  3A80               	xorlw	128
 13596  05B2  00F9               	movwf	??_Exception_Main
 13597  05B3  3080               	movlw	128
 13598  05B4  0279               	subwf	??_Exception_Main,w
 13599  05B5  1D03               	skipz
 13600  05B6  2DB9               	goto	u12775
 13601  05B7  0827               	movf	Exception_Main@count,w
 13602  05B8  022B               	subwf	Exception_Main@i_4227,w
 13603  05B9                     u12775:	
 13604  05B9  1803               	btfsc	3,0
 13605  05BA  2DDA               	goto	u12770
 13606                           
 13607                           ;Main_B1.c: 574: if (getDimmerLights_Status(i + 1) == 1) {
 13608  05BB  0020               	movlb	0	; select bank0
 13609  05BC  082B               	movf	Exception_Main@i_4227,w
 13610  05BD  3E01               	addlw	1
 13611  05BE  3199  212C  3185   	fcall	_getDimmerLights_Status
 13612  05C1  3A01               	xorlw	1
 13613  05C2  1D03               	skipz
 13614  05C3  2DD4               	goto	l11187
 13615                           
 13616                           ;Main_B1.c: 575: DimmerLights->SwFlag = 1;
 13617  05C4  0020               	movlb	0	; select bank0
 13618  05C5  086C               	movf	_DimmerLights,w
 13619  05C6  0086               	movwf	6
 13620  05C7  3001               	movlw	1	; select bank2/3
 13621  05C8  0087               	movwf	7
 13622  05C9  1401               	bsf	1,0
 13623                           
 13624                           ;Main_B1.c: 576: DimmerLights->Status = 0;
 13625  05CA  0A6C               	incf	_DimmerLights,w
 13626  05CB  0086               	movwf	6
 13627  05CC  3001               	movlw	1	; select bank2/3
 13628  05CD  0087               	movwf	7
 13629  05CE  1001               	bcf	1,0
 13630                           
 13631                           ;Main_B1.c: 577: setDimmerLights_SwOff(i + 1);
 13632  05CF  082B               	movf	Exception_Main@i_4227,w
 13633  05D0  3E01               	addlw	1
 13634  05D1  3191  2122  3185   	fcall	_setDimmerLights_SwOff
 13635  05D4                     l11187:	
 13636  05D4  3001               	movlw	1
 13637  05D5  0020               	movlb	0	; select bank0
 13638  05D6  07AB               	addwf	Exception_Main@i_4227,f
 13639  05D7  3000               	movlw	0
 13640  05D8  3DAC               	addwfc	Exception_Main@i_4227+1,f
 13641  05D9  2DB0               	goto	l11189
 13642  05DA                     u12770:	
 13643  05DA  0020               	movlb	0	; select bank0
 13644  05DB  0008               	return
 13645  05DC                     l11191:	
 13646                           ;Main_B1.c: 578: }
 13647                           ;Main_B1.c: 579: }
 13648                           ;Main_B1.c: 580: } else {
 13649                           
 13650                           
 13651                           ;Main_B1.c: 582: if (getDimmerLights_Status(lights) == 1) {
 13652  05DC  0020               	movlb	0	; select bank0
 13653  05DD  082D               	movf	Exception_Main@lights,w
 13654  05DE  3199  212C  3185   	fcall	_getDimmerLights_Status
 13655  05E1  3A01               	xorlw	1
 13656  05E2  1903               	btfsc	3,2
 13657  05E3  2DE6               	goto	l11193
 13658  05E4  0020               	movlb	0	; select bank0
 13659  05E5  0008               	return
 13660  05E6                     l11193:	
 13661                           
 13662                           ;Main_B1.c: 584: DimmerLights->SwFlag = 1;
 13663  05E6  0020               	movlb	0	; select bank0
 13664  05E7  086C               	movf	_DimmerLights,w
 13665  05E8  0086               	movwf	6
 13666  05E9  3001               	movlw	1	; select bank2/3
 13667  05EA  0087               	movwf	7
 13668  05EB  1401               	bsf	1,0
 13669                           
 13670                           ;Main_B1.c: 585: DimmerLights->Status = 0;
 13671  05EC  0A6C               	incf	_DimmerLights,w
 13672  05ED  0086               	movwf	6
 13673  05EE  3001               	movlw	1	; select bank2/3
 13674  05EF  0087               	movwf	7
 13675  05F0  1001               	bcf	1,0
 13676                           
 13677                           ;Main_B1.c: 586: setDimmerLights_SwOff(lights);
 13678  05F1  082D               	movf	Exception_Main@lights,w
 13679  05F2  3191  2122         	fcall	_setDimmerLights_SwOff
 13680  05F4  0020               	movlb	0	; select bank0
 13681  05F5  0008               	return
 13682  05F6                     l11199:	
 13683                           ;Main_B1.c: 591: }
 13684                           
 13685                           ;Main_B1.c: 587: }
 13686                           ;Main_B1.c: 588: }
 13687                           ;Main_B1.c: 590: break;
 13688                           
 13689  05F6  0020               	movlb	0	; select bank0
 13690  05F7  0828               	movf	Exception_Main@error,w
 13691                           
 13692                           ; Switch size 1, requested type "space"
 13693                           ; Number of cases is 2, Range of values is 2 to 3
 13694                           ; switch strategies available:
 13695                           ; Name         Instructions Cycles
 13696                           ; simple_byte            7     4 (average)
 13697                           ; direct_byte           13     9 (fixed)
 13698                           ; jumptable            263     9 (fixed)
 13699                           ;	Chosen strategy is simple_byte
 13700  05F8  3A02               	xorlw	2	; case 2
 13701  05F9  1903               	skipnz
 13702  05FA  2D5D               	goto	l11157
 13703  05FB  3A01               	xorlw	1	; case 3
 13704  05FC  1903               	skipnz
 13705  05FD  2D9B               	goto	l11173
 13706  05FE  2E00               	goto	l1770
 13707  05FF  0008               	return
 13708  0600                     l1770:	
 13709  0600  0008               	return
 13710  0601                     __end_of_Exception_Main:	
 13711                           
 13712                           	psect	text87
 13713  1968                     __ptext87:	
 13714 ;; *************** function _getDimmerLights_Line *****************
 13715 ;; Defined at:
 13716 ;;		line 1238 in file "../src/Dimmer_B1.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;		None
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;  line            1    3[COMMON] unsigned char 
 13721 ;; Return value:  Size  Location     Type
 13722 ;;                  1    wreg      unsigned char 
 13723 ;; Registers used:
 13724 ;;		wreg, status,2
 13725 ;; Tracked objects:
 13726 ;;		On entry : 0/0
 13727 ;;		On exit  : 0/0
 13728 ;;		Unchanged: 0/0
 13729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13734 ;;Total ram usage:        2 bytes
 13735 ;; Hardware stack levels used:    1
 13736 ;; Hardware stack levels required when called:    3
 13737 ;; This function calls:
 13738 ;;		Nothing
 13739 ;; This function is called by:
 13740 ;;		_Exception_Main
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _getDimmerLights_Line
 13746  1968                     _getDimmerLights_Line:	
 13747                           
 13748                           ;Dimmer_B1.c: 1239: char line = 0;
 13749                           
 13750                           ;incstack = 0
 13751                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13752  1968  01F3               	clrf	getDimmerLights_Line@line
 13753                           
 13754                           ;Dimmer_B1.c: 1241: if (DimmerLights1.Line == 1) {
 13755  1969  0023               	movlb	3	; select bank3
 13756  196A  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 13757  196B  296F               	goto	l960
 13758                           
 13759                           ;Dimmer_B1.c: 1242: line = 1;
 13760  196C  01F3               	clrf	getDimmerLights_Line@line
 13761  196D  0AF3               	incf	getDimmerLights_Line@line,f
 13762                           
 13763                           ;Dimmer_B1.c: 1243: }
 13764  196E  2975               	goto	l961
 13765  196F                     l960:	
 13766                           
 13767                           ;Dimmer_B1.c: 1246: else if (DimmerLights2.Line == 1) {
 13768  196F  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 13769  1970  2975               	goto	l961
 13770                           
 13771                           ;Dimmer_B1.c: 1247: line = 2;
 13772  1971  3002               	movlw	2
 13773  1972  00F2               	movwf	??_getDimmerLights_Line
 13774  1973  0872               	movf	??_getDimmerLights_Line,w
 13775  1974  00F3               	movwf	getDimmerLights_Line@line
 13776  1975                     l961:	
 13777                           
 13778                           ;Dimmer_B1.c: 1248: }
 13779                           ;Dimmer_B1.c: 1255: return line;
 13780  1975  0873               	movf	getDimmerLights_Line@line,w
 13781  1976  0008               	return
 13782  1977                     __end_of_getDimmerLights_Line:	
 13783                           
 13784                           	psect	text88
 13785  1EF9                     __ptext88:	
 13786 ;; *************** function _DimmerLights_Main *****************
 13787 ;; Defined at:
 13788 ;;		line 867 in file "../src/Dimmer_B1.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;		None
 13791 ;; Auto vars:     Size  Location     Type
 13792 ;;		None
 13793 ;; Return value:  Size  Location     Type
 13794 ;;		None               void
 13795 ;; Registers used:
 13796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;Total ram usage:        0 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    8
 13809 ;; This function calls:
 13810 ;;		_DimmerLights_DimmingFunction
 13811 ;;		_DimmerLights_TwoPhase_Main
 13812 ;;		_getLoad_OK
 13813 ;;		_getMain_All_Error_Status
 13814 ;;		_getMain_All_LightsStatus
 13815 ;;		_setDimmerLights_Main
 13816 ;; This function is called by:
 13817 ;;		_main
 13818 ;; This function uses a non-reentrant model
 13819 ;;
 13820                           
 13821                           
 13822                           ;psect for function _DimmerLights_Main
 13823  1EF9                     _DimmerLights_Main:	
 13824                           
 13825                           ;Dimmer_B1.c: 870: if (Dimmer.LoadGO == 1) {
 13826                           
 13827                           ;incstack = 0
 13828                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13829  1EF9  0022               	movlb	2	; select bank2
 13830  1EFA  1CA0               	btfss	_Dimmer^(0+256),1
 13831  1EFB  2F11               	goto	l10871
 13832                           
 13833                           ;Dimmer_B1.c: 871: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13834  1EFC  3198  2015  319E   	fcall	_getLoad_OK
 13835  1EFF  3A01               	xorlw	1
 13836  1F00  1903               	skipnz
 13837  1F01  2F0F               	goto	l886
 13838  1F02  3000               	movlw	0
 13839  1F03  319E  263C  319E   	fcall	_getMain_All_Error_Status
 13840  1F06  3800               	iorlw	0
 13841  1F07  1D03               	skipz
 13842  1F08  2F0F               	goto	l886
 13843  1F09  3199  2159  319E   	fcall	_getMain_All_LightsStatus
 13844  1F0C  3800               	iorlw	0
 13845  1F0D  1D03               	skipz
 13846  1F0E  2F11               	goto	l10871
 13847  1F0F                     l886:	
 13848                           
 13849                           ;Dimmer_B1.c: 872: Dimmer.LoadGO = 0;
 13850  1F0F  0022               	movlb	2	; select bank2
 13851  1F10  10A0               	bcf	_Dimmer^(0+256),1
 13852  1F11                     l10871:	
 13853                           
 13854                           ;Dimmer_B1.c: 873: }
 13855                           ;Dimmer_B1.c: 874: }
 13856                           ;Dimmer_B1.c: 879: setDimmerLights_Main(1);
 13857  1F11  3001               	movlw	1
 13858  1F12  3197  279B  319E   	fcall	_setDimmerLights_Main
 13859                           
 13860                           ;Dimmer_B1.c: 882: DimmerLights_DimmingFunction(1);
 13861  1F15  3001               	movlw	1
 13862  1F16  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13863                           
 13864                           ;Dimmer_B1.c: 886: DimmerLights_TwoPhase_Main(1);
 13865  1F19  3001               	movlw	1
 13866  1F1A  3193  2393  319E   	fcall	_DimmerLights_TwoPhase_Main
 13867                           
 13868                           ;Dimmer_B1.c: 892: setDimmerLights_Main(2);
 13869  1F1D  3002               	movlw	2
 13870  1F1E  3197  279B  319E   	fcall	_setDimmerLights_Main
 13871                           
 13872                           ;Dimmer_B1.c: 894: DimmerLights_DimmingFunction(2);
 13873  1F21  3002               	movlw	2
 13874  1F22  318C  2491  319E   	fcall	_DimmerLights_DimmingFunction
 13875                           
 13876                           ;Dimmer_B1.c: 898: DimmerLights_TwoPhase_Main(2);
 13877  1F25  3002               	movlw	2
 13878  1F26  3193  2393         	fcall	_DimmerLights_TwoPhase_Main
 13879  1F28  0008               	return
 13880  1F29                     __end_of_DimmerLights_Main:	
 13881                           
 13882                           	psect	text89
 13883  179B                     __ptext89:	
 13884 ;; *************** function _setDimmerLights_Main *****************
 13885 ;; Defined at:
 13886 ;;		line 924 in file "../src/Dimmer_B1.c"
 13887 ;; Parameters:    Size  Location     Type
 13888 ;;  lights          1    wreg     unsigned char 
 13889 ;; Auto vars:     Size  Location     Type
 13890 ;;  lights          1   73[BANK0 ] unsigned char 
 13891 ;; Return value:  Size  Location     Type
 13892 ;;		None               void
 13893 ;; Registers used:
 13894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;Total ram usage:        1 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    7
 13907 ;; This function calls:
 13908 ;;		_DimmerLights_SelectPointer
 13909 ;;		_getDimmerLights_Allow_Condition
 13910 ;;		_getMain_All_LightsStatus
 13911 ;;		_setDimmerLights_Dimming
 13912 ;;		_setDimmerLights_OnOff
 13913 ;; This function is called by:
 13914 ;;		_DimmerLights_Main
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           
 13919                           ;psect for function _setDimmerLights_Main
 13920  179B                     _setDimmerLights_Main:	
 13921                           
 13922                           ;incstack = 0
 13923                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13924                           ;setDimmerLights_Main@lights stored from wreg
 13925  179B  0020               	movlb	0	; select bank0
 13926  179C  00E9               	movwf	setDimmerLights_Main@lights
 13927                           
 13928                           ;Dimmer_B1.c: 926: DimmerLights_SelectPointer(lights);
 13929  179D  0869               	movf	setDimmerLights_Main@lights,w
 13930  179E  319A  2255  3197   	fcall	_DimmerLights_SelectPointer
 13931                           
 13932                           ;Dimmer_B1.c: 927: if (DimmerLights->Trigger == 1) {
 13933  17A1  0020               	movlb	0	; select bank0
 13934  17A2  086C               	movf	_DimmerLights,w
 13935  17A3  0086               	movwf	6
 13936  17A4  3001               	movlw	1	; select bank2/3
 13937  17A5  0087               	movwf	7
 13938  17A6  1C81               	btfss	1,1
 13939  17A7  2FC7               	goto	l10453
 13940                           
 13941                           ;Dimmer_B1.c: 928: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13942  17A8  0869               	movf	setDimmerLights_Main@lights,w
 13943  17A9  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 13944  17AC  3800               	iorlw	0
 13945  17AD  1D03               	skipz
 13946  17AE  0008               	return
 13947                           
 13948                           ;Dimmer_B1.c: 929: DimmerLights->Trigger = 0;
 13949  17AF  0020               	movlb	0	; select bank0
 13950  17B0  086C               	movf	_DimmerLights,w
 13951  17B1  0086               	movwf	6
 13952  17B2  3001               	movlw	1	; select bank2/3
 13953  17B3  0087               	movwf	7
 13954  17B4  1081               	bcf	1,1
 13955                           
 13956                           ;Dimmer_B1.c: 930: if (DimmerLights->Switch == 1) {
 13957  17B5  086C               	movf	_DimmerLights,w
 13958  17B6  0086               	movwf	6
 13959  17B7  3001               	movlw	1	; select bank2/3
 13960  17B8  0087               	movwf	7
 13961  17B9  1D01               	btfss	1,2
 13962  17BA  2FC1               	goto	l10451
 13963                           
 13964                           ;Dimmer_B1.c: 931: setDimmerLights_OnOff(lights, 1);
 13965  17BB  01E5               	clrf	setDimmerLights_OnOff@command
 13966  17BC  0AE5               	incf	setDimmerLights_OnOff@command,f
 13967  17BD  0869               	movf	setDimmerLights_Main@lights,w
 13968  17BE  318F  2742         	fcall	_setDimmerLights_OnOff
 13969                           
 13970                           ;Dimmer_B1.c: 932: } else {
 13971  17C0  0008               	return
 13972  17C1                     l10451:	
 13973                           
 13974                           ;Dimmer_B1.c: 933: setDimmerLights_OnOff(lights, 0);
 13975  17C1  0020               	movlb	0	; select bank0
 13976  17C2  01E5               	clrf	setDimmerLights_OnOff@command
 13977  17C3  0869               	movf	setDimmerLights_Main@lights,w
 13978  17C4  318F  2742         	fcall	_setDimmerLights_OnOff
 13979                           
 13980                           ;Dimmer_B1.c: 934: }
 13981                           ;Dimmer_B1.c: 935: }
 13982                           ;Dimmer_B1.c: 936: } else {
 13983  17C6  0008               	return
 13984  17C7                     l10453:	
 13985                           
 13986                           ;Dimmer_B1.c: 937: if (getMain_All_LightsStatus() == 1) {
 13987  17C7  3199  2159  3197   	fcall	_getMain_All_LightsStatus
 13988  17CA  3A01               	xorlw	1
 13989  17CB  1D03               	skipz
 13990  17CC  2FF3               	goto	l10465
 13991                           
 13992                           ;Dimmer_B1.c: 938: if (DimmerLights->DimmingTrigger == 1) {
 13993  17CD  0020               	movlb	0	; select bank0
 13994  17CE  086C               	movf	_DimmerLights,w
 13995  17CF  0086               	movwf	6
 13996  17D0  3001               	movlw	1	; select bank2/3
 13997  17D1  0087               	movwf	7
 13998  17D2  1E01               	btfss	1,4
 13999  17D3  0008               	return
 14000                           
 14001                           ;Dimmer_B1.c: 939: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14002  17D4  0869               	movf	setDimmerLights_Main@lights,w
 14003  17D5  319F  27C9  3197   	fcall	_getDimmerLights_Allow_Condition
 14004  17D8  3800               	iorlw	0
 14005  17D9  1D03               	skipz
 14006  17DA  0008               	return
 14007                           
 14008                           ;Dimmer_B1.c: 940: DimmerLights->DimmingTrigger = 0;
 14009  17DB  0020               	movlb	0	; select bank0
 14010  17DC  086C               	movf	_DimmerLights,w
 14011  17DD  0086               	movwf	6
 14012  17DE  3001               	movlw	1	; select bank2/3
 14013  17DF  0087               	movwf	7
 14014  17E0  1201               	bcf	1,4
 14015                           
 14016                           ;Dimmer_B1.c: 941: if (DimmerLights->DimmingSwitch == 1) {
 14017  17E1  086C               	movf	_DimmerLights,w
 14018  17E2  0086               	movwf	6
 14019  17E3  3001               	movlw	1	; select bank2/3
 14020  17E4  0087               	movwf	7
 14021  17E5  1E81               	btfss	1,5
 14022  17E6  2FED               	goto	l10463
 14023                           
 14024                           ;Dimmer_B1.c: 942: setDimmerLights_Dimming(lights, 1);
 14025  17E7  01E2               	clrf	setDimmerLights_Dimming@status
 14026  17E8  0AE2               	incf	setDimmerLights_Dimming@status,f
 14027  17E9  0869               	movf	setDimmerLights_Main@lights,w
 14028  17EA  3193  23E7         	fcall	_setDimmerLights_Dimming
 14029                           
 14030                           ;Dimmer_B1.c: 943: } else {
 14031  17EC  0008               	return
 14032  17ED                     l10463:	
 14033                           
 14034                           ;Dimmer_B1.c: 944: setDimmerLights_Dimming(lights, 0);
 14035  17ED  0020               	movlb	0	; select bank0
 14036  17EE  01E2               	clrf	setDimmerLights_Dimming@status
 14037  17EF  0869               	movf	setDimmerLights_Main@lights,w
 14038  17F0  3193  23E7         	fcall	_setDimmerLights_Dimming
 14039                           
 14040                           ;Dimmer_B1.c: 945: }
 14041                           ;Dimmer_B1.c: 946: }
 14042                           ;Dimmer_B1.c: 947: }
 14043                           ;Dimmer_B1.c: 948: } else {
 14044  17F2  0008               	return
 14045  17F3                     l10465:	
 14046                           
 14047                           ;Dimmer_B1.c: 949: if (DimmerLights->DimmingTrigger == 1) {
 14048  17F3  0020               	movlb	0	; select bank0
 14049  17F4  086C               	movf	_DimmerLights,w
 14050  17F5  0086               	movwf	6
 14051  17F6  3001               	movlw	1	; select bank2/3
 14052  17F7  0087               	movwf	7
 14053  17F8  1E01               	btfss	1,4
 14054  17F9  0008               	return
 14055                           
 14056                           ;Dimmer_B1.c: 950: DimmerLights->DimmingTrigger = 0;
 14057  17FA  086C               	movf	_DimmerLights,w
 14058  17FB  0086               	movwf	6
 14059  17FC  3001               	movlw	1	; select bank2/3
 14060  17FD  0087               	movwf	7
 14061  17FE  1201               	bcf	1,4
 14062  17FF  0008               	return
 14063  1800                     __end_of_setDimmerLights_Main:	
 14064                           
 14065                           	psect	text90
 14066  0F42                     __ptext90:	
 14067 ;; *************** function _setDimmerLights_OnOff *****************
 14068 ;; Defined at:
 14069 ;;		line 1001 in file "../src/Dimmer_B1.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  lights          1    wreg     unsigned char 
 14072 ;;  command         1   69[BANK0 ] unsigned char 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  lights          1   72[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;		None               void
 14077 ;; Registers used:
 14078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:        4 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    6
 14091 ;; This function calls:
 14092 ;;		_DimmerIntr_ValueCalculate
 14093 ;;		_getCmd_Status
 14094 ;;		_getDelayOff_GO
 14095 ;;		_getDimmerLights_PercentToValue
 14096 ;;		_getMain_All_LightsStatus
 14097 ;;		_setCmd_Status
 14098 ;;		_setDelayOff_GO
 14099 ;;		_setDimmerIntr_ControlStatus
 14100 ;;		_setDimmerIntr_DimmingValue
 14101 ;;		_setDimmerIntr_Dimming_RF
 14102 ;;		_setDimmerIntr_MaxmumValue
 14103 ;;		_setDimmerLights_DimmingClose
 14104 ;;		_setDimmerLights_Line
 14105 ;;		_setLED
 14106 ;;		_setProductData
 14107 ;;		_setRF_DimmerLights
 14108 ;;		_setTxData
 14109 ;; This function is called by:
 14110 ;;		_setDimmerLights_Main
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           
 14115                           ;psect for function _setDimmerLights_OnOff
 14116  0F42                     _setDimmerLights_OnOff:	
 14117                           
 14118                           ;incstack = 0
 14119                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14120                           ;setDimmerLights_OnOff@lights stored from wreg
 14121  0F42  0020               	movlb	0	; select bank0
 14122  0F43  00E8               	movwf	setDimmerLights_OnOff@lights
 14123                           
 14124                           ;Dimmer_B1.c: 1003: if (command == 1) {
 14125  0F44  0865               	movf	setDimmerLights_OnOff@command,w
 14126  0F45  3A01               	xorlw	1
 14127  0F46  1D03               	skipz
 14128  0F47  2FA0               	goto	l10203
 14129                           
 14130                           ;Dimmer_B1.c: 1005: setDimmerIntr_ControlStatus(lights, 1);
 14131  0F48  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14132  0F49  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 14133  0F4A  0868               	movf	setDimmerLights_OnOff@lights,w
 14134  0F4B  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14135                           
 14136                           ;Dimmer_B1.c: 1008: Dimmer.Load_Status = 1;
 14137  0F4E  0022               	movlb	2	; select bank2
 14138  0F4F  1520               	bsf	_Dimmer^(0+256),2
 14139                           
 14140                           ;Dimmer_B1.c: 1009: setDimmerLights_Line(lights);
 14141  0F50  0020               	movlb	0	; select bank0
 14142  0F51  0868               	movf	setDimmerLights_OnOff@lights,w
 14143  0F52  319B  2315  318F   	fcall	_setDimmerLights_Line
 14144                           
 14145                           ;Dimmer_B1.c: 1015: setLED(lights, 0);
 14146  0F55  01F4               	clrf	setLED@command
 14147  0F56  0020               	movlb	0	; select bank0
 14148  0F57  0868               	movf	setDimmerLights_OnOff@lights,w
 14149  0F58  3194  24ED  318F   	fcall	_setLED
 14150                           
 14151                           ;Dimmer_B1.c: 1036: if (DimmerLights->DimmingRun == 1) {
 14152  0F5B  0020               	movlb	0	; select bank0
 14153  0F5C  0A6C               	incf	_DimmerLights,w
 14154  0F5D  0086               	movwf	6
 14155  0F5E  3001               	movlw	1	; select bank2/3
 14156  0F5F  0087               	movwf	7
 14157  0F60  1F01               	btfss	1,6
 14158  0F61  2F83               	goto	l10193
 14159                           
 14160                           ;Dimmer_B1.c: 1037: DimmerLights->DimmingRun = 0;
 14161  0F62  0A6C               	incf	_DimmerLights,w
 14162  0F63  0086               	movwf	6
 14163  0F64  3001               	movlw	1	; select bank2/3
 14164  0F65  0087               	movwf	7
 14165  0F66  1301               	bcf	1,6
 14166                           
 14167                           ;Dimmer_B1.c: 1038: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14168  0F67  0868               	movf	setDimmerLights_OnOff@lights,w
 14169  0F68  3E14               	addlw	20
 14170  0F69  077B               	addwf	_product,w
 14171  0F6A  00E6               	movwf	??_setDimmerLights_OnOff
 14172  0F6B  0866               	movf	??_setDimmerLights_OnOff,w
 14173  0F6C  0086               	movwf	6
 14174  0F6D  3002               	movlw	2	; select bank4/5
 14175  0F6E  0087               	movwf	7
 14176  0F6F  0801               	movf	1,w
 14177  0F70  3196  26D1  318F   	fcall	_getDimmerLights_PercentToValue
 14178  0F73  0020               	movlb	0	; select bank0
 14179  0F74  00E7               	movwf	??_setDimmerLights_OnOff+1
 14180  0F75  0867               	movf	??_setDimmerLights_OnOff+1,w
 14181  0F76  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14182  0F77  0868               	movf	setDimmerLights_OnOff@lights,w
 14183  0F78  319A  22FE  318F   	fcall	_setDimmerIntr_MaxmumValue
 14184                           
 14185                           ;Dimmer_B1.c: 1039: setDimmerIntr_Dimming_RF(lights, 1);
 14186  0F7B  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 14187  0F7C  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 14188  0F7D  0020               	movlb	0	; select bank0
 14189  0F7E  0868               	movf	setDimmerLights_OnOff@lights,w
 14190  0F7F  319D  25C0  318F   	fcall	_setDimmerIntr_Dimming_RF
 14191                           
 14192                           ;Dimmer_B1.c: 1040: } else {
 14193  0F82  2F8C               	goto	l10195
 14194  0F83                     l10193:	
 14195                           
 14196                           ;Dimmer_B1.c: 1045: setDimmerIntr_DimmingValue(lights, ((char)(5*0.55))+((((char)(77*0.5
      +                          5))-((char)(5*0.55)))/2));
 14197  0F83  3016               	movlw	22
 14198  0F84  0020               	movlb	0	; select bank0
 14199  0F85  00E6               	movwf	??_setDimmerLights_OnOff
 14200  0F86  0866               	movf	??_setDimmerLights_OnOff,w
 14201  0F87  00F2               	movwf	setDimmerIntr_DimmingValue@value
 14202  0F88  0868               	movf	setDimmerLights_OnOff@lights,w
 14203  0F89  319A  227F  318F   	fcall	_setDimmerIntr_DimmingValue
 14204  0F8C                     l10195:	
 14205                           
 14206                           ;Dimmer_B1.c: 1049: }
 14207                           ;Dimmer_B1.c: 1051: if (lights == 1) {
 14208  0F8C  0020               	movlb	0	; select bank0
 14209  0F8D  0868               	movf	setDimmerLights_OnOff@lights,w
 14210  0F8E  3A01               	xorlw	1
 14211  0F8F  1D03               	skipz
 14212  0F90  2F96               	goto	l10199
 14213                           
 14214                           ;Dimmer_B1.c: 1054: DimmerIntr_ValueCalculate(1);
 14215  0F91  3001               	movlw	1
 14216  0F92  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14217                           
 14218                           ;Dimmer_B1.c: 1056: } else if (lights == 2) {
 14219  0F95  2FD0               	goto	l10221
 14220  0F96                     l10199:	
 14221  0F96  0020               	movlb	0	; select bank0
 14222  0F97  0868               	movf	setDimmerLights_OnOff@lights,w
 14223  0F98  3A02               	xorlw	2
 14224  0F99  1D03               	skipz
 14225  0F9A  2FD0               	goto	l10221
 14226                           
 14227                           ;Dimmer_B1.c: 1059: DimmerIntr_ValueCalculate(2);
 14228  0F9B  3002               	movlw	2
 14229  0F9C  3194  243B  318F   	fcall	_DimmerIntr_ValueCalculate
 14230                           
 14231                           ;Dimmer_B1.c: 1061: }
 14232                           ;Dimmer_B1.c: 1067: } else if (command == 0) {
 14233  0F9F  2FD0               	goto	l10221
 14234  0FA0                     l10203:	
 14235  0FA0  0020               	movlb	0	; select bank0
 14236  0FA1  08E5               	movf	setDimmerLights_OnOff@command,f
 14237  0FA2  1D03               	skipz
 14238  0FA3  2FD0               	goto	l10221
 14239                           
 14240                           ;Dimmer_B1.c: 1069: setDimmerIntr_ControlStatus(lights, 0);
 14241  0FA4  01F2               	clrf	setDimmerIntr_ControlStatus@command
 14242  0FA5  0868               	movf	setDimmerLights_OnOff@lights,w
 14243  0FA6  319D  25E9  318F   	fcall	_setDimmerIntr_ControlStatus
 14244                           
 14245                           ;Dimmer_B1.c: 1071: Dimmer.Load_Status = 0;
 14246  0FA9  0022               	movlb	2	; select bank2
 14247  0FAA  1120               	bcf	_Dimmer^(0+256),2
 14248                           
 14249                           ;Dimmer_B1.c: 1072: setDimmerLights_Line(0);
 14250  0FAB  3000               	movlw	0
 14251  0FAC  319B  2315  318F   	fcall	_setDimmerLights_Line
 14252                           
 14253                           ;Dimmer_B1.c: 1076: if (getDelayOff_GO(lights) == 1) {
 14254  0FAF  0020               	movlb	0	; select bank0
 14255  0FB0  0868               	movf	setDimmerLights_OnOff@lights,w
 14256  0FB1  3199  214A  318F   	fcall	_getDelayOff_GO
 14257  0FB4  3A01               	xorlw	1
 14258  0FB5  1D03               	skipz
 14259  0FB6  2FBE               	goto	l926
 14260                           
 14261                           ;Dimmer_B1.c: 1077: setDelayOff_GO(lights, 0, 0);
 14262  0FB7  0020               	movlb	0	; select bank0
 14263  0FB8  01DD               	clrf	setDelayOff_GO@command
 14264  0FB9  01DE               	clrf	setDelayOff_GO@value
 14265  0FBA  0868               	movf	setDimmerLights_OnOff@lights,w
 14266  0FBB  318B  236A  318F   	fcall	_setDelayOff_GO
 14267  0FBE                     l926:	
 14268                           
 14269                           ;Dimmer_B1.c: 1078: }
 14270                           ;Dimmer_B1.c: 1083: setLED(lights, 1);
 14271  0FBE  01F4               	clrf	setLED@command
 14272  0FBF  0AF4               	incf	setLED@command,f
 14273  0FC0  0020               	movlb	0	; select bank0
 14274  0FC1  0868               	movf	setDimmerLights_OnOff@lights,w
 14275  0FC2  3194  24ED  318F   	fcall	_setLED
 14276                           
 14277                           ;Dimmer_B1.c: 1088: if (lights == 1) {
 14278  0FC5  0020               	movlb	0	; select bank0
 14279  0FC6  0868               	movf	setDimmerLights_OnOff@lights,w
 14280  0FC7  3A01               	xorlw	1
 14281  0FC8  1D03               	skipz
 14282  0FC9  2FCC               	goto	l10217
 14283                           
 14284                           ;Dimmer_B1.c: 1090: RA7 = 0;
 14285  0FCA  138C               	bcf	12,7	;volatile
 14286                           
 14287                           ;Dimmer_B1.c: 1096: }
 14288  0FCB  2FD0               	goto	l10221
 14289  0FCC                     l10217:	
 14290                           
 14291                           ;Dimmer_B1.c: 1099: else if (lights == 2) {
 14292  0FCC  0868               	movf	setDimmerLights_OnOff@lights,w
 14293  0FCD  3A02               	xorlw	2
 14294  0FCE  1903               	btfsc	3,2
 14295                           
 14296                           ;Dimmer_B1.c: 1101: RB4 = 0;
 14297  0FCF  120D               	bcf	13,4	;volatile
 14298  0FD0                     l10221:	
 14299                           
 14300                           ;Dimmer_B1.c: 1106: }
 14301                           ;Dimmer_B1.c: 1122: }
 14302                           ;Dimmer_B1.c: 1124: setDimmerLights_DimmingClose();
 14303  0FD0  3198  2070  318F   	fcall	_setDimmerLights_DimmingClose
 14304                           
 14305                           ;Dimmer_B1.c: 1126: setRF_DimmerLights(lights, command);
 14306  0FD3  0020               	movlb	0	; select bank0
 14307  0FD4  0865               	movf	setDimmerLights_OnOff@command,w
 14308  0FD5  00E6               	movwf	??_setDimmerLights_OnOff
 14309  0FD6  0866               	movf	??_setDimmerLights_OnOff,w
 14310  0FD7  00DD               	movwf	setRF_DimmerLights@on
 14311  0FD8  0868               	movf	setDimmerLights_OnOff@lights,w
 14312  0FD9  3188  202B  318F   	fcall	_setRF_DimmerLights
 14313                           
 14314                           ;Dimmer_B1.c: 1128: if (getCmd_Status(1) == 1) {
 14315  0FDC  3001               	movlw	1
 14316  0FDD  3199  2197  318F   	fcall	_getCmd_Status
 14317  0FE0  3A01               	xorlw	1
 14318  0FE1  1D03               	skipz
 14319  0FE2  2FFD               	goto	l10237
 14320                           
 14321                           ;Dimmer_B1.c: 1129: if (getMain_All_LightsStatus() == 0) {
 14322  0FE3  3199  2159  318F   	fcall	_getMain_All_LightsStatus
 14323  0FE6  3800               	iorlw	0
 14324  0FE7  1D03               	skipz
 14325  0FE8  0008               	return
 14326                           
 14327                           ;Dimmer_B1.c: 1130: setCmd_Status(1, 0);
 14328  0FE9  01F2               	clrf	setCmd_Status@cmd
 14329  0FEA  3001               	movlw	1
 14330  0FEB  319A  226A  318F   	fcall	_setCmd_Status
 14331                           
 14332                           ;Dimmer_B1.c: 1131: setProductData(11, 0);
 14333  0FEE  0020               	movlb	0	; select bank0
 14334  0FEF  01DA               	clrf	setProductData@value
 14335  0FF0  300B               	movlw	11
 14336  0FF1  3198  20C6  318F   	fcall	_setProductData
 14337                           
 14338                           ;Dimmer_B1.c: 1132: setProductData(17, 0);
 14339  0FF4  0020               	movlb	0	; select bank0
 14340  0FF5  01DA               	clrf	setProductData@value
 14341  0FF6  3011               	movlw	17
 14342  0FF7  3198  20C6  318F   	fcall	_setProductData
 14343                           
 14344                           ;Dimmer_B1.c: 1133: setTxData();
 14345  0FFA  3198  201C         	fcall	_setTxData
 14346                           
 14347                           ;Dimmer_B1.c: 1134: }
 14348                           ;Dimmer_B1.c: 1135: } else {
 14349  0FFC  0008               	return
 14350  0FFD                     l10237:	
 14351                           
 14352                           ;Dimmer_B1.c: 1136: setTxData();
 14353  0FFD  3198  201C         	fcall	_setTxData
 14354  0FFF  0008               	return
 14355  1000                     __end_of_setDimmerLights_OnOff:	
 14356                           
 14357                           	psect	text91
 14358  14ED                     __ptext91:	
 14359 ;; *************** function _setLED *****************
 14360 ;; Defined at:
 14361 ;;		line 81 in file "../src/LED_B1.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;  led             1    wreg     unsigned char 
 14364 ;;  command         1    4[COMMON] unsigned char 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  led             1    5[COMMON] unsigned char 
 14367 ;; Return value:  Size  Location     Type
 14368 ;;		None               void
 14369 ;; Registers used:
 14370 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14376 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;Total ram usage:        2 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    4
 14383 ;; This function calls:
 14384 ;;		_LedPointSelect
 14385 ;; This function is called by:
 14386 ;;		_setDimmerLights_OnOff
 14387 ;;		_setLED_Initialization
 14388 ;;		_Exception_Main
 14389 ;;		_setSw_Initialization
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           
 14394                           ;psect for function _setLED
 14395  14ED                     _setLED:	
 14396                           
 14397                           ;incstack = 0
 14398                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14399                           ;setLED@led stored from wreg
 14400  14ED  00F5               	movwf	setLED@led
 14401                           
 14402                           ;LED_B1.c: 82: LedPointSelect(led);
 14403  14EE  0875               	movf	setLED@led,w
 14404  14EF  319C  242E  3194   	fcall	_LedPointSelect
 14405                           
 14406                           ;LED_B1.c: 83: if (command == 0) {
 14407  14F2  08F4               	movf	setLED@command,f
 14408  14F3  1D03               	skipz
 14409  14F4  2D07               	goto	l7515
 14410                           
 14411                           ;LED_B1.c: 85: if (led == 1) {
 14412  14F5  0875               	movf	setLED@led,w
 14413  14F6  3A01               	xorlw	1
 14414  14F7  1D03               	skipz
 14415  14F8  2CFB               	goto	l7507
 14416                           
 14417                           ;LED_B1.c: 89: RA3 = 1;
 14418  14F9  0020               	movlb	0	; select bank0
 14419  14FA  158C               	bsf	12,3	;volatile
 14420  14FB                     l7507:	
 14421                           
 14422                           ;LED_B1.c: 91: }
 14423                           ;LED_B1.c: 94: if (led == 2) {
 14424  14FB  0875               	movf	setLED@led,w
 14425  14FC  3A02               	xorlw	2
 14426  14FD  1D03               	skipz
 14427  14FE  2D01               	goto	l7511
 14428                           
 14429                           ;LED_B1.c: 98: RC7 = 1;
 14430  14FF  0020               	movlb	0	; select bank0
 14431  1500  178E               	bsf	14,7	;volatile
 14432  1501                     l7511:	
 14433                           
 14434                           ;LED_B1.c: 100: }
 14435                           ;LED_B1.c: 112: if (led == 99) {
 14436  1501  0875               	movf	setLED@led,w
 14437  1502  3A63               	xorlw	99
 14438  1503  1D03               	skipz
 14439  1504  2D07               	goto	l7515
 14440                           
 14441                           ;LED_B1.c: 116: RB5 = 1;
 14442  1505  0020               	movlb	0	; select bank0
 14443  1506  168D               	bsf	13,5	;volatile
 14444  1507                     l7515:	
 14445                           
 14446                           ;LED_B1.c: 118: }
 14447                           ;LED_B1.c: 120: }
 14448                           ;LED_B1.c: 121: if (command == 1) {
 14449  1507  0874               	movf	setLED@command,w
 14450  1508  3A01               	xorlw	1
 14451  1509  1D03               	skipz
 14452  150A  2D1D               	goto	l7529
 14453                           
 14454                           ;LED_B1.c: 123: if (led == 1) {
 14455  150B  0875               	movf	setLED@led,w
 14456  150C  3A01               	xorlw	1
 14457  150D  1D03               	skipz
 14458  150E  2D11               	goto	l7521
 14459                           
 14460                           ;LED_B1.c: 127: RA3 = 0;
 14461  150F  0020               	movlb	0	; select bank0
 14462  1510  118C               	bcf	12,3	;volatile
 14463  1511                     l7521:	
 14464                           
 14465                           ;LED_B1.c: 129: }
 14466                           ;LED_B1.c: 132: if (led == 2) {
 14467  1511  0875               	movf	setLED@led,w
 14468  1512  3A02               	xorlw	2
 14469  1513  1D03               	skipz
 14470  1514  2D17               	goto	l7525
 14471                           
 14472                           ;LED_B1.c: 136: RC7 = 0;
 14473  1515  0020               	movlb	0	; select bank0
 14474  1516  138E               	bcf	14,7	;volatile
 14475  1517                     l7525:	
 14476                           
 14477                           ;LED_B1.c: 138: }
 14478                           ;LED_B1.c: 150: if (led == 99) {
 14479  1517  0875               	movf	setLED@led,w
 14480  1518  3A63               	xorlw	99
 14481  1519  1D03               	skipz
 14482  151A  2D1D               	goto	l7529
 14483                           
 14484                           ;LED_B1.c: 154: RB5 = 0;
 14485  151B  0020               	movlb	0	; select bank0
 14486  151C  128D               	bcf	13,5	;volatile
 14487  151D                     l7529:	
 14488                           
 14489                           ;LED_B1.c: 156: }
 14490                           ;LED_B1.c: 158: }
 14491                           ;LED_B1.c: 159: if (command == 10) {
 14492  151D  0874               	movf	setLED@command,w
 14493  151E  3A0A               	xorlw	10
 14494  151F  1D03               	skipz
 14495  1520  2D41               	goto	l7545
 14496                           
 14497                           ;LED_B1.c: 160: LED->GO = 0;
 14498  1521  0021               	movlb	1	; select bank1
 14499  1522  086B               	movf	_LED^(0+128),w
 14500  1523  0086               	movwf	6
 14501  1524  3001               	movlw	1	; select bank2/3
 14502  1525  0087               	movwf	7
 14503  1526  1081               	bcf	1,1
 14504                           
 14505                           ;LED_B1.c: 161: LED->Time = 0;
 14506  1527  0A6B               	incf	_LED^(0+128),w
 14507  1528  0086               	movwf	6
 14508  1529  3001               	movlw	1	; select bank2/3
 14509  152A  0087               	movwf	7
 14510  152B  3000               	movlw	0
 14511  152C  3FC0               	movwi [0]fsr1
 14512  152D  3FC1               	movwi [1]fsr1
 14513                           
 14514                           ;LED_B1.c: 163: if (led == 1) {
 14515  152E  0875               	movf	setLED@led,w
 14516  152F  3A01               	xorlw	1
 14517  1530  1D03               	skipz
 14518  1531  2D35               	goto	l7537
 14519                           
 14520                           ;LED_B1.c: 167: RA3 = 1;
 14521  1532  0020               	movlb	0	; select bank0
 14522  1533  158C               	bsf	12,3	;volatile
 14523                           
 14524                           ;LED_B1.c: 169: }
 14525  1534  2D3B               	goto	l7541
 14526  1535                     l7537:	
 14527                           
 14528                           ;LED_B1.c: 172: else if (led == 2) {
 14529  1535  0875               	movf	setLED@led,w
 14530  1536  3A02               	xorlw	2
 14531  1537  1D03               	skipz
 14532  1538  2D3B               	goto	l7541
 14533                           
 14534                           ;LED_B1.c: 176: RC7 = 1;
 14535  1539  0020               	movlb	0	; select bank0
 14536  153A  178E               	bsf	14,7	;volatile
 14537  153B                     l7541:	
 14538                           
 14539                           ;LED_B1.c: 178: }
 14540                           ;LED_B1.c: 190: if (led == 99) {
 14541  153B  0875               	movf	setLED@led,w
 14542  153C  3A63               	xorlw	99
 14543  153D  1D03               	skipz
 14544  153E  2D41               	goto	l7545
 14545                           
 14546                           ;LED_B1.c: 194: RB5 = 1;
 14547  153F  0020               	movlb	0	; select bank0
 14548  1540  168D               	bsf	13,5	;volatile
 14549  1541                     l7545:	
 14550                           
 14551                           ;LED_B1.c: 196: }
 14552                           ;LED_B1.c: 198: }
 14553                           ;LED_B1.c: 199: if (command == 11) {
 14554  1541  0874               	movf	setLED@command,w
 14555  1542  3A0B               	xorlw	11
 14556  1543  1D03               	skipz
 14557  1544  0008               	return
 14558                           
 14559                           ;LED_B1.c: 200: LED->GO = 1;
 14560  1545  0021               	movlb	1	; select bank1
 14561  1546  086B               	movf	_LED^(0+128),w
 14562  1547  0086               	movwf	6
 14563  1548  3001               	movlw	1	; select bank2/3
 14564  1549  0087               	movwf	7
 14565  154A  1481               	bsf	1,1
 14566  154B  0008               	return
 14567  154C                     __end_of_setLED:	
 14568                           
 14569                           	psect	text92
 14570  1C2E                     __ptext92:	
 14571 ;; *************** function _LedPointSelect *****************
 14572 ;; Defined at:
 14573 ;;		line 7 in file "../src/LED_B1.c"
 14574 ;; Parameters:    Size  Location     Type
 14575 ;;  led             1    wreg     unsigned char 
 14576 ;; Auto vars:     Size  Location     Type
 14577 ;;  led             1    3[COMMON] unsigned char 
 14578 ;; Return value:  Size  Location     Type
 14579 ;;		None               void
 14580 ;; Registers used:
 14581 ;;		wreg
 14582 ;; Tracked objects:
 14583 ;;		On entry : 0/0
 14584 ;;		On exit  : 0/0
 14585 ;;		Unchanged: 0/0
 14586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;Total ram usage:        2 bytes
 14592 ;; Hardware stack levels used:    1
 14593 ;; Hardware stack levels required when called:    3
 14594 ;; This function calls:
 14595 ;;		Nothing
 14596 ;; This function is called by:
 14597 ;;		_setLED_Initialization
 14598 ;;		_setLED
 14599 ;;		_setLED_Main
 14600 ;; This function uses a non-reentrant model
 14601 ;;
 14602                           
 14603                           
 14604                           ;psect for function _LedPointSelect
 14605  1C2E                     _LedPointSelect:	
 14606                           
 14607                           ;incstack = 0
 14608                           ; Regs used in _LedPointSelect: [wreg]
 14609                           ;LedPointSelect@led stored from wreg
 14610  1C2E  00F3               	movwf	LedPointSelect@led
 14611                           
 14612                           ;LED_B1.c: 9: if (led == 1) {
 14613  1C2F  0873               	movf	LedPointSelect@led,w
 14614  1C30  3A01               	xorlw	1
 14615  1C31  1D03               	skipz
 14616  1C32  2C38               	goto	l1189
 14617                           
 14618                           ;LED_B1.c: 10: LED = &VarLED1;
 14619  1C33  306C               	movlw	_VarLED1& (0+255)
 14620  1C34  00F2               	movwf	??_LedPointSelect
 14621  1C35  0872               	movf	??_LedPointSelect,w
 14622  1C36  0021               	movlb	1	; select bank1
 14623  1C37  00EB               	movwf	_LED^(0+128)
 14624  1C38                     l1189:	
 14625                           
 14626                           ;LED_B1.c: 11: }
 14627                           ;LED_B1.c: 14: if (led == 2) {
 14628  1C38  0873               	movf	LedPointSelect@led,w
 14629  1C39  3A02               	xorlw	2
 14630  1C3A  1D03               	skipz
 14631  1C3B  2C41               	goto	l1190
 14632                           
 14633                           ;LED_B1.c: 15: LED = &VarLED2;
 14634  1C3C  30EC               	movlw	_VarLED2& (0+255)
 14635  1C3D  00F2               	movwf	??_LedPointSelect
 14636  1C3E  0872               	movf	??_LedPointSelect,w
 14637  1C3F  0021               	movlb	1	; select bank1
 14638  1C40  00EB               	movwf	_LED^(0+128)
 14639  1C41                     l1190:	
 14640                           
 14641                           ;LED_B1.c: 16: }
 14642                           ;LED_B1.c: 24: if (led == 99) {
 14643  1C41  0873               	movf	LedPointSelect@led,w
 14644  1C42  3A63               	xorlw	99
 14645  1C43  1D03               	skipz
 14646  1C44  0008               	return
 14647                           
 14648                           ;LED_B1.c: 25: LED = &VarErrLED;
 14649  1C45  3068               	movlw	_VarErrLED& (0+255)
 14650  1C46  00F2               	movwf	??_LedPointSelect
 14651  1C47  0872               	movf	??_LedPointSelect,w
 14652  1C48  0021               	movlb	1	; select bank1
 14653  1C49  00EB               	movwf	_LED^(0+128)
 14654  1C4A  0008               	return
 14655  1C4B                     __end_of_LedPointSelect:	
 14656                           
 14657                           	psect	text93
 14658  1870                     __ptext93:	
 14659 ;; *************** function _setDimmerLights_DimmingClose *****************
 14660 ;; Defined at:
 14661 ;;		line 2043 in file "../src/Dimmer_B1.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;		None
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;		None
 14666 ;; Return value:  Size  Location     Type
 14667 ;;		None               void
 14668 ;; Registers used:
 14669 ;;		wreg, status,2, status,0, pclath, cstack
 14670 ;; Tracked objects:
 14671 ;;		On entry : 0/0
 14672 ;;		On exit  : 0/0
 14673 ;;		Unchanged: 0/0
 14674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;Total ram usage:        0 bytes
 14680 ;; Hardware stack levels used:    1
 14681 ;; Hardware stack levels required when called:    4
 14682 ;; This function calls:
 14683 ;;		_setDimmerIntr_Dimming_Sw
 14684 ;; This function is called by:
 14685 ;;		_setDimmerLights_OnOff
 14686 ;; This function uses a non-reentrant model
 14687 ;;
 14688                           
 14689                           
 14690                           ;psect for function _setDimmerLights_DimmingClose
 14691  1870                     _setDimmerLights_DimmingClose:	
 14692                           
 14693                           ;Dimmer_B1.c: 2045: setDimmerIntr_Dimming_Sw(1, 0);
 14694                           
 14695                           ;incstack = 0
 14696                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14697  1870  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14698  1871  3001               	movlw	1
 14699  1872  319D  254F  3198   	fcall	_setDimmerIntr_Dimming_Sw
 14700                           
 14701                           ;Dimmer_B1.c: 2049: setDimmerIntr_Dimming_Sw(2, 0);
 14702  1875  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14703  1876  3002               	movlw	2
 14704  1877  319D  254F         	fcall	_setDimmerIntr_Dimming_Sw
 14705  1879  0008               	return
 14706  187A                     __end_of_setDimmerLights_DimmingClose:	
 14707                           
 14708                           	psect	text94
 14709  1A7F                     __ptext94:	
 14710 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14711 ;; Defined at:
 14712 ;;		line 137 in file "../src/Dimmer_B1.c"
 14713 ;; Parameters:    Size  Location     Type
 14714 ;;  lights          1    wreg     unsigned char 
 14715 ;;  value           1    2[COMMON] unsigned char 
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;  lights          1    4[COMMON] unsigned char 
 14718 ;; Return value:  Size  Location     Type
 14719 ;;		None               void
 14720 ;; Registers used:
 14721 ;;		wreg
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/0
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14727 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;Total ram usage:        3 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    3
 14734 ;; This function calls:
 14735 ;;		Nothing
 14736 ;; This function is called by:
 14737 ;;		_setDimmerLights_OnOff
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           
 14742                           ;psect for function _setDimmerIntr_DimmingValue
 14743  1A7F                     _setDimmerIntr_DimmingValue:	
 14744                           
 14745                           ;incstack = 0
 14746                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14747                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14748  1A7F  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14749                           
 14750                           ;Dimmer_B1.c: 139: if (lights == 1) {
 14751  1A80  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14752  1A81  3A01               	xorlw	1
 14753  1A82  1D03               	skipz
 14754  1A83  2A8A               	goto	l7439
 14755                           
 14756                           ;Dimmer_B1.c: 140: DimmerIntr1.DimmingValue = value;
 14757  1A84  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14758  1A85  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14759  1A86  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14760  1A87  0021               	movlb	1	; select bank1
 14761  1A88  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 14762                           
 14763                           ;Dimmer_B1.c: 141: }
 14764  1A89  0008               	return
 14765  1A8A                     l7439:	
 14766                           
 14767                           ;Dimmer_B1.c: 144: else if (lights == 2) {
 14768  1A8A  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14769  1A8B  3A02               	xorlw	2
 14770  1A8C  1D03               	skipz
 14771  1A8D  0008               	return
 14772                           
 14773                           ;Dimmer_B1.c: 145: DimmerIntr2.DimmingValue = value;
 14774  1A8E  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14775  1A8F  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14776  1A90  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14777  1A91  0021               	movlb	1	; select bank1
 14778  1A92  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 14779  1A93  0008               	return
 14780  1A94                     __end_of_setDimmerIntr_DimmingValue:	
 14781                           
 14782                           	psect	text95
 14783  1DE9                     __ptext95:	
 14784 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14785 ;; Defined at:
 14786 ;;		line 119 in file "../src/Dimmer_B1.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  lights          1    wreg     unsigned char 
 14789 ;;  command         1    2[COMMON] unsigned char 
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;  lights          1    4[COMMON] unsigned char 
 14792 ;; Return value:  Size  Location     Type
 14793 ;;		None               void
 14794 ;; Registers used:
 14795 ;;		wreg, status,2, status,0
 14796 ;; Tracked objects:
 14797 ;;		On entry : 0/0
 14798 ;;		On exit  : 0/0
 14799 ;;		Unchanged: 0/0
 14800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14801 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14804 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;Total ram usage:        3 bytes
 14806 ;; Hardware stack levels used:    1
 14807 ;; Hardware stack levels required when called:    3
 14808 ;; This function calls:
 14809 ;;		Nothing
 14810 ;; This function is called by:
 14811 ;;		_setDimmerLights_OnOff
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           
 14816                           ;psect for function _setDimmerIntr_ControlStatus
 14817  1DE9                     _setDimmerIntr_ControlStatus:	
 14818                           
 14819                           ;incstack = 0
 14820                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14821                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14822  1DE9  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14823                           
 14824                           ;Dimmer_B1.c: 121: if (lights == 1) {
 14825  1DEA  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14826  1DEB  3A01               	xorlw	1
 14827  1DEC  1D03               	skipz
 14828  1DED  2DFE               	goto	l7431
 14829                           
 14830                           ;Dimmer_B1.c: 122: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14831  1DEE  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14832  1DEF  3A01               	xorlw	1
 14833  1DF0  3000               	movlw	0
 14834  1DF1  1903               	skipnz
 14835  1DF2  3001               	movlw	1
 14836  1DF3  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14837  1DF4  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14838  1DF5  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14839  1DF6  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14840  1DF7  0021               	movlb	1	; select bank1
 14841  1DF8  0820               	movf	_DimmerIntr1^(0+128),w
 14842  1DF9  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14843  1DFA  39F7               	andlw	-9
 14844  1DFB  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14845  1DFC  00A0               	movwf	_DimmerIntr1^(0+128)
 14846                           
 14847                           ;Dimmer_B1.c: 123: }
 14848  1DFD  0008               	return
 14849  1DFE                     l7431:	
 14850                           
 14851                           ;Dimmer_B1.c: 126: else if (lights == 2) {
 14852  1DFE  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14853  1DFF  3A02               	xorlw	2
 14854  1E00  1D03               	skipz
 14855  1E01  0008               	return
 14856                           
 14857                           ;Dimmer_B1.c: 127: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14858  1E02  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14859  1E03  3A01               	xorlw	1
 14860  1E04  3000               	movlw	0
 14861  1E05  1903               	skipnz
 14862  1E06  3001               	movlw	1
 14863  1E07  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14864  1E08  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14865  1E09  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14866  1E0A  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14867  1E0B  0021               	movlb	1	; select bank1
 14868  1E0C  0830               	movf	_DimmerIntr2^(0+128),w
 14869  1E0D  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14870  1E0E  39F7               	andlw	-9
 14871  1E0F  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14872  1E10  00B0               	movwf	_DimmerIntr2^(0+128)
 14873  1E11  0008               	return
 14874  1E12                     __end_of_setDimmerIntr_ControlStatus:	
 14875                           
 14876                           	psect	text96
 14877  0B6A                     __ptext96:	
 14878 ;; *************** function _setDelayOff_GO *****************
 14879 ;; Defined at:
 14880 ;;		line 87 in file "../src/DelayOff_B1.c"
 14881 ;; Parameters:    Size  Location     Type
 14882 ;;  sw              1    wreg     unsigned char 
 14883 ;;  command         1   61[BANK0 ] unsigned char 
 14884 ;;  value           1   62[BANK0 ] unsigned char 
 14885 ;; Auto vars:     Size  Location     Type
 14886 ;;  sw              1   68[BANK0 ] unsigned char 
 14887 ;;  k               1   67[BANK0 ] unsigned char 
 14888 ;;  j               1   66[BANK0 ] unsigned char 
 14889 ;;  i               1   65[BANK0 ] unsigned char 
 14890 ;; Return value:  Size  Location     Type
 14891 ;;		None               void
 14892 ;; Registers used:
 14893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14894 ;; Tracked objects:
 14895 ;;		On entry : 0/0
 14896 ;;		On exit  : 0/0
 14897 ;;		Unchanged: 0/0
 14898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14899 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;Total ram usage:        8 bytes
 14904 ;; Hardware stack levels used:    1
 14905 ;; Hardware stack levels required when called:    4
 14906 ;; This function calls:
 14907 ;;		_DelayOffPointSelect
 14908 ;;		___bmul
 14909 ;;		_setProductData
 14910 ;; This function is called by:
 14911 ;;		_setDimmerLights_OnOff
 14912 ;;		_setRFSW_Control
 14913 ;; This function uses a non-reentrant model
 14914 ;;
 14915                           
 14916                           
 14917                           ;psect for function _setDelayOff_GO
 14918  0B6A                     _setDelayOff_GO:	
 14919                           
 14920                           ;incstack = 0
 14921                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14922                           ;setDelayOff_GO@sw stored from wreg
 14923  0B6A  0020               	movlb	0	; select bank0
 14924  0B6B  00E4               	movwf	setDelayOff_GO@sw
 14925                           
 14926                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14927  0B6C  0864               	movf	setDelayOff_GO@sw,w
 14928  0B6D  319A  2240  318B   	fcall	_DelayOffPointSelect
 14929                           
 14930                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14931  0B70  0020               	movlb	0	; select bank0
 14932  0B71  085D               	movf	setDelayOff_GO@command,w
 14933  0B72  3A01               	xorlw	1
 14934  0B73  3000               	movlw	0
 14935  0B74  1903               	skipnz
 14936  0B75  3001               	movlw	1
 14937  0B76  00DF               	movwf	??_setDelayOff_GO
 14938  0B77  0021               	movlb	1	; select bank1
 14939  0B78  086A               	movf	_DelayOff^(0+128),w
 14940  0B79  0086               	movwf	6
 14941  0B7A  3001               	movlw	1	; select bank2/3
 14942  0B7B  0087               	movwf	7
 14943  0B7C  0020               	movlb	0	; select bank0
 14944  0B7D  0DDF               	rlf	??_setDelayOff_GO,f
 14945  0B7E  0801               	movf	1,w
 14946  0B7F  065F               	xorwf	??_setDelayOff_GO,w
 14947  0B80  39FD               	andlw	-3
 14948  0B81  065F               	xorwf	??_setDelayOff_GO,w
 14949  0B82  0081               	movwf	1
 14950                           
 14951                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14952  0B83  0021               	movlb	1	; select bank1
 14953  0B84  086A               	movf	_DelayOff^(0+128),w
 14954  0B85  3E02               	addlw	2
 14955  0B86  0086               	movwf	6
 14956  0B87  3001               	movlw	1	; select bank2/3
 14957  0B88  0087               	movwf	7
 14958  0B89  3000               	movlw	0
 14959  0B8A  3FC0               	movwi [0]fsr1
 14960  0B8B  3FC1               	movwi [1]fsr1
 14961                           
 14962                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14963  0B8C  086A               	movf	_DelayOff^(0+128),w
 14964  0B8D  3E04               	addlw	4
 14965  0B8E  0086               	movwf	6
 14966  0B8F  3001               	movlw	1	; select bank2/3
 14967  0B90  0087               	movwf	7
 14968  0B91  0181               	clrf	1
 14969                           
 14970                           ;DelayOff_B1.c: 94: if (command == 1) {
 14971  0B92  0020               	movlb	0	; select bank0
 14972  0B93  085D               	movf	setDelayOff_GO@command,w
 14973  0B94  3A01               	xorlw	1
 14974  0B95  1D03               	skipz
 14975  0B96  2BEC               	goto	l7055
 14976                           
 14977                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14978  0B97  3005               	movlw	5
 14979  0B98  00DF               	movwf	??_setDelayOff_GO
 14980  0B99  085F               	movf	??_setDelayOff_GO,w
 14981  0B9A  00E1               	movwf	setDelayOff_GO@i
 14982  0B9B  01E2               	clrf	setDelayOff_GO@j
 14983  0B9C  01E3               	clrf	setDelayOff_GO@k
 14984                           
 14985                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14986  0B9D  300F               	movlw	15
 14987  0B9E  055E               	andwf	setDelayOff_GO@value,w
 14988  0B9F  00DF               	movwf	??_setDelayOff_GO
 14989  0BA0  085F               	movf	??_setDelayOff_GO,w
 14990  0BA1  3A05               	xorlw	5
 14991  0BA2  1903               	skipnz
 14992  0BA3  2BA8               	goto	l7041
 14993  0BA4  085E               	movf	setDelayOff_GO@value,w
 14994  0BA5  390F               	andlw	15
 14995  0BA6  1D03               	btfss	3,2
 14996  0BA7  2BD8               	goto	l7051
 14997  0BA8                     l7041:	
 14998  0BA8  3031               	movlw	49
 14999  0BA9  025E               	subwf	setDelayOff_GO@value,w
 15000  0BAA  1803               	skipnc
 15001  0BAB  2BD8               	goto	l7051
 15002                           
 15003                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15004  0BAC  085E               	movf	setDelayOff_GO@value,w
 15005  0BAD  390F               	andlw	15
 15006  0BAE  00DF               	movwf	??_setDelayOff_GO
 15007  0BAF  085F               	movf	??_setDelayOff_GO,w
 15008  0BB0  00E2               	movwf	setDelayOff_GO@j
 15009                           
 15010                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15011  0BB1  085E               	movf	setDelayOff_GO@value,w
 15012  0BB2  00DF               	movwf	??_setDelayOff_GO
 15013  0BB3  3004               	movlw	4
 15014  0BB4                     u6255:	
 15015  0BB4  36DF               	lsrf	??_setDelayOff_GO,f
 15016  0BB5  0B89               	decfsz	9,f
 15017  0BB6  2BB4               	goto	u6255
 15018  0BB7  085F               	movf	??_setDelayOff_GO,w
 15019  0BB8  390F               	andlw	15
 15020  0BB9  00E0               	movwf	??_setDelayOff_GO+1
 15021  0BBA  0860               	movf	??_setDelayOff_GO+1,w
 15022  0BBB  00E3               	movwf	setDelayOff_GO@k
 15023                           
 15024                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15025  0BBC  300A               	movlw	10
 15026  0BBD  00DF               	movwf	??_setDelayOff_GO
 15027  0BBE  085F               	movf	??_setDelayOff_GO,w
 15028  0BBF  00F2               	movwf	___bmul@multiplicand
 15029  0BC0  0863               	movf	setDelayOff_GO@k,w
 15030  0BC1  3199  21E7  318B   	fcall	___bmul
 15031  0BC4  0020               	movlb	0	; select bank0
 15032  0BC5  0762               	addwf	setDelayOff_GO@j,w
 15033  0BC6  00E0               	movwf	??_setDelayOff_GO+1
 15034  0BC7  0021               	movlb	1	; select bank1
 15035  0BC8  0A6A               	incf	_DelayOff^(0+128),w
 15036  0BC9  0086               	movwf	6
 15037  0BCA  3001               	movlw	1	; select bank2/3
 15038  0BCB  0087               	movwf	7
 15039  0BCC  0020               	movlb	0	; select bank0
 15040  0BCD  0860               	movf	??_setDelayOff_GO+1,w
 15041  0BCE  0081               	movwf	1
 15042                           
 15043                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15044  0BCF  085E               	movf	setDelayOff_GO@value,w
 15045  0BD0  00DF               	movwf	??_setDelayOff_GO
 15046  0BD1  085F               	movf	??_setDelayOff_GO,w
 15047  0BD2  00DA               	movwf	setProductData@value
 15048  0BD3  0864               	movf	setDelayOff_GO@sw,w
 15049  0BD4  3E1A               	addlw	26
 15050  0BD5  3198  20C6         	fcall	_setProductData
 15051                           
 15052                           ;DelayOff_B1.c: 103: } else {
 15053  0BD7  0008               	return
 15054  0BD8                     l7051:	
 15055                           
 15056                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15057  0BD8  3005               	movlw	5
 15058  0BD9  0020               	movlb	0	; select bank0
 15059  0BDA  00DF               	movwf	??_setDelayOff_GO
 15060  0BDB  0021               	movlb	1	; select bank1
 15061  0BDC  0A6A               	incf	_DelayOff^(0+128),w
 15062  0BDD  0086               	movwf	6
 15063  0BDE  3001               	movlw	1	; select bank2/3
 15064  0BDF  0087               	movwf	7
 15065  0BE0  0020               	movlb	0	; select bank0
 15066  0BE1  085F               	movf	??_setDelayOff_GO,w
 15067  0BE2  0081               	movwf	1
 15068                           
 15069                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15070  0BE3  3005               	movlw	5
 15071  0BE4  00DF               	movwf	??_setDelayOff_GO
 15072  0BE5  085F               	movf	??_setDelayOff_GO,w
 15073  0BE6  00DA               	movwf	setProductData@value
 15074  0BE7  0864               	movf	setDelayOff_GO@sw,w
 15075  0BE8  3E1A               	addlw	26
 15076  0BE9  3198  20C6         	fcall	_setProductData
 15077                           
 15078                           ;DelayOff_B1.c: 106: }
 15079                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15080  0BEB  0008               	return
 15081  0BEC                     l7055:	
 15082  0BEC  0020               	movlb	0	; select bank0
 15083  0BED  08DD               	movf	setDelayOff_GO@command,f
 15084  0BEE  1D03               	skipz
 15085  0BEF  0008               	return
 15086                           
 15087                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15088  0BF0  01DA               	clrf	setProductData@value
 15089  0BF1  0864               	movf	setDelayOff_GO@sw,w
 15090  0BF2  3E1A               	addlw	26
 15091  0BF3  3198  20C6         	fcall	_setProductData
 15092  0BF5  0008               	return
 15093  0BF6                     __end_of_setDelayOff_GO:	
 15094                           
 15095                           	psect	text97
 15096  19E7                     __ptext97:	
 15097 ;; *************** function ___bmul *****************
 15098 ;; Defined at:
 15099 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  multiplier      1    wreg     unsigned char 
 15102 ;;  multiplicand    1    2[COMMON] unsigned char 
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;  multiplier      1    5[COMMON] unsigned char 
 15105 ;;  product         1    4[COMMON] unsigned char 
 15106 ;; Return value:  Size  Location     Type
 15107 ;;                  1    wreg      unsigned char 
 15108 ;; Registers used:
 15109 ;;		wreg, status,2, status,0
 15110 ;; Tracked objects:
 15111 ;;		On entry : 0/0
 15112 ;;		On exit  : 0/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15115 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;Total ram usage:        4 bytes
 15120 ;; Hardware stack levels used:    1
 15121 ;; Hardware stack levels required when called:    3
 15122 ;; This function calls:
 15123 ;;		Nothing
 15124 ;; This function is called by:
 15125 ;;		_setDelayOff_GO
 15126 ;;		_DelayTimejudge
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130                           
 15131                           ;psect for function ___bmul
 15132  19E7                     ___bmul:	
 15133                           
 15134                           ;incstack = 0
 15135                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15136                           ;___bmul@multiplier stored from wreg
 15137  19E7  00F5               	movwf	___bmul@multiplier
 15138  19E8  01F4               	clrf	___bmul@product
 15139  19E9                     l6691:	
 15140  19E9  1C75               	btfss	___bmul@multiplier,0
 15141  19EA  29EF               	goto	l6695
 15142  19EB  0872               	movf	___bmul@multiplicand,w
 15143  19EC  00F3               	movwf	??___bmul
 15144  19ED  0873               	movf	??___bmul,w
 15145  19EE  07F4               	addwf	___bmul@product,f
 15146  19EF                     l6695:	
 15147  19EF  1003               	clrc
 15148  19F0  0DF2               	rlf	___bmul@multiplicand,f
 15149  19F1  1003               	clrc
 15150  19F2  0CF5               	rrf	___bmul@multiplier,f
 15151  19F3  08F5               	movf	___bmul@multiplier,f
 15152  19F4  1D03               	skipz
 15153  19F5  29E9               	goto	l6691
 15154  19F6  0874               	movf	___bmul@product,w
 15155  19F7  0008               	return
 15156  19F8                     __end_of___bmul:	
 15157                           
 15158                           	psect	text98
 15159  1A6A                     __ptext98:	
 15160 ;; *************** function _setCmd_Status *****************
 15161 ;; Defined at:
 15162 ;;		line 656 in file "../src/Main_B1.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;  number          1    wreg     unsigned char 
 15165 ;;  cmd             1    2[COMMON] unsigned char 
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;  number          1    4[COMMON] unsigned char 
 15168 ;; Return value:  Size  Location     Type
 15169 ;;		None               void
 15170 ;; Registers used:
 15171 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        3 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; Hardware stack levels required when called:    3
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_setDimmerLights_OnOff
 15188 ;;		_setControl_Lights_Table
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192                           
 15193                           ;psect for function _setCmd_Status
 15194  1A6A                     _setCmd_Status:	
 15195                           
 15196                           ;incstack = 0
 15197                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15198                           ;setCmd_Status@number stored from wreg
 15199  1A6A  00F4               	movwf	setCmd_Status@number
 15200                           
 15201                           ;Main_B1.c: 657: switch (number) {
 15202  1A6B  2A79               	goto	l7237
 15203  1A6C                     l7233:	
 15204                           ;Main_B1.c: 658: case 1:
 15205                           
 15206                           
 15207                           ;Main_B1.c: 659: Cmd.all_off = cmd == 1 ? 1 : 0;
 15208  1A6C  0872               	movf	setCmd_Status@cmd,w
 15209  1A6D  3A01               	xorlw	1
 15210  1A6E  3000               	movlw	0
 15211  1A6F  1903               	skipnz
 15212  1A70  3001               	movlw	1
 15213  1A71  00F3               	movwf	??_setCmd_Status
 15214  1A72  0021               	movlb	1	; select bank1
 15215  1A73  0869               	movf	_Cmd^(0+128),w
 15216  1A74  0673               	xorwf	??_setCmd_Status,w
 15217  1A75  39FE               	andlw	-2
 15218  1A76  0673               	xorwf	??_setCmd_Status,w
 15219  1A77  00E9               	movwf	_Cmd^(0+128)
 15220                           
 15221                           ;Main_B1.c: 661: }
 15222                           
 15223                           ;Main_B1.c: 660: break;
 15224  1A78  0008               	return
 15225  1A79                     l7237:	
 15226  1A79  0874               	movf	setCmd_Status@number,w
 15227                           
 15228                           ; Switch size 1, requested type "space"
 15229                           ; Number of cases is 1, Range of values is 1 to 1
 15230                           ; switch strategies available:
 15231                           ; Name         Instructions Cycles
 15232                           ; simple_byte            4     3 (average)
 15233                           ; direct_byte           11     9 (fixed)
 15234                           ; jumptable            263     9 (fixed)
 15235                           ;	Chosen strategy is simple_byte
 15236  1A7A  3A01               	xorlw	1	; case 1
 15237  1A7B  1903               	skipnz
 15238  1A7C  2A6C               	goto	l7233
 15239  1A7D  2A7E               	goto	l1779
 15240  1A7E                     l1779:	
 15241  1A7E  0008               	return
 15242  1A7F                     __end_of_setCmd_Status:	
 15243                           
 15244                           	psect	text99
 15245  1959                     __ptext99:	
 15246 ;; *************** function _getMain_All_LightsStatus *****************
 15247 ;; Defined at:
 15248 ;;		line 378 in file "../src/Main_B1.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;		None
 15251 ;; Auto vars:     Size  Location     Type
 15252 ;;  status          1    2[COMMON] unsigned char 
 15253 ;; Return value:  Size  Location     Type
 15254 ;;                  1    wreg      unsigned char 
 15255 ;; Registers used:
 15256 ;;		wreg, status,2, status,0
 15257 ;; Tracked objects:
 15258 ;;		On entry : 0/0
 15259 ;;		On exit  : 0/0
 15260 ;;		Unchanged: 0/0
 15261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;Total ram usage:        1 bytes
 15267 ;; Hardware stack levels used:    1
 15268 ;; Hardware stack levels required when called:    3
 15269 ;; This function calls:
 15270 ;;		Nothing
 15271 ;; This function is called by:
 15272 ;;		_DimmerLights_Main
 15273 ;;		_setDimmerLights_Main
 15274 ;;		_setDimmerLights_OnOff
 15275 ;;		_Flash_Memory_Main
 15276 ;;		_Exception_Main
 15277 ;;		_Load_Main
 15278 ;;		_setTemp_Main
 15279 ;;		_setControl_Lights_Table
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function _getMain_All_LightsStatus
 15285  1959                     _getMain_All_LightsStatus:	
 15286                           
 15287                           ;Main_B1.c: 379: char status = 0;
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15291  1959  01F2               	clrf	getMain_All_LightsStatus@status
 15292                           
 15293                           ;Main_B1.c: 398: status = DimmerLights1.Status == 1 ? 1 : 0;
 15294  195A  3000               	movlw	0
 15295  195B  0023               	movlb	3	; select bank3
 15296  195C  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15297  195D  3001               	movlw	1
 15298  195E  00F2               	movwf	getMain_All_LightsStatus@status
 15299                           
 15300                           ;Main_B1.c: 399: if (status == 0) {
 15301  195F  08F2               	movf	getMain_All_LightsStatus@status,f
 15302  1960  1D03               	skipz
 15303  1961  2966               	goto	l9843
 15304                           
 15305                           ;Main_B1.c: 400: status = DimmerLights2.Status == 1 ? 1 : 0;
 15306  1962  3000               	movlw	0
 15307  1963  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15308  1964  3001               	movlw	1
 15309  1965  00F2               	movwf	getMain_All_LightsStatus@status
 15310  1966                     l9843:	
 15311                           
 15312                           ;Main_B1.c: 401: }
 15313                           ;Main_B1.c: 425: return status;
 15314  1966  0872               	movf	getMain_All_LightsStatus@status,w
 15315  1967  0008               	return
 15316  1968                     __end_of_getMain_All_LightsStatus:	
 15317                           
 15318                           	psect	text100
 15319  194A                     __ptext100:	
 15320 ;; *************** function _getDelayOff_GO *****************
 15321 ;; Defined at:
 15322 ;;		line 114 in file "../src/DelayOff_B1.c"
 15323 ;; Parameters:    Size  Location     Type
 15324 ;;  sw              1    wreg     unsigned char 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  sw              1    4[COMMON] unsigned char 
 15327 ;;  go              1    5[COMMON] unsigned char 
 15328 ;; Return value:  Size  Location     Type
 15329 ;;                  1    wreg      unsigned char 
 15330 ;; Registers used:
 15331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;Total ram usage:        2 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    4
 15344 ;; This function calls:
 15345 ;;		_DelayOffPointSelect
 15346 ;; This function is called by:
 15347 ;;		_setDimmerLights_OnOff
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           
 15352                           ;psect for function _getDelayOff_GO
 15353  194A                     _getDelayOff_GO:	
 15354                           
 15355                           ;incstack = 0
 15356                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15357                           ;getDelayOff_GO@sw stored from wreg
 15358  194A  00F4               	movwf	getDelayOff_GO@sw
 15359                           
 15360                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15361  194B  0874               	movf	getDelayOff_GO@sw,w
 15362  194C  319A  2240         	fcall	_DelayOffPointSelect
 15363                           
 15364                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15365  194E  0021               	movlb	1	; select bank1
 15366  194F  086A               	movf	_DelayOff^(0+128),w
 15367  1950  0086               	movwf	6
 15368  1951  3001               	movlw	1	; select bank2/3
 15369  1952  0087               	movwf	7
 15370  1953  3000               	movlw	0
 15371  1954  1881               	btfsc	1,1
 15372  1955  3001               	movlw	1
 15373  1956  00F5               	movwf	getDelayOff_GO@go
 15374                           
 15375                           ;DelayOff_B1.c: 117: return go;
 15376  1957  0875               	movf	getDelayOff_GO@go,w
 15377  1958  0008               	return
 15378  1959                     __end_of_getDelayOff_GO:	
 15379                           
 15380                           	psect	text101
 15381  1997                     __ptext101:	
 15382 ;; *************** function _getCmd_Status *****************
 15383 ;; Defined at:
 15384 ;;		line 664 in file "../src/Main_B1.c"
 15385 ;; Parameters:    Size  Location     Type
 15386 ;;  number          1    wreg     unsigned char 
 15387 ;; Auto vars:     Size  Location     Type
 15388 ;;  number          1    2[COMMON] unsigned char 
 15389 ;;  cmd             1    3[COMMON] unsigned char 
 15390 ;; Return value:  Size  Location     Type
 15391 ;;                  1    wreg      unsigned char 
 15392 ;; Registers used:
 15393 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15394 ;; Tracked objects:
 15395 ;;		On entry : 0/0
 15396 ;;		On exit  : 0/0
 15397 ;;		Unchanged: 0/0
 15398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15400 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15402 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15403 ;;Total ram usage:        2 bytes
 15404 ;; Hardware stack levels used:    1
 15405 ;; Hardware stack levels required when called:    3
 15406 ;; This function calls:
 15407 ;;		Nothing
 15408 ;; This function is called by:
 15409 ;;		_setDimmerLights_OnOff
 15410 ;; This function uses a non-reentrant model
 15411 ;;
 15412                           
 15413                           
 15414                           ;psect for function _getCmd_Status
 15415  1997                     _getCmd_Status:	
 15416                           
 15417                           ;incstack = 0
 15418                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15419                           ;getCmd_Status@number stored from wreg
 15420  1997  00F2               	movwf	getCmd_Status@number
 15421                           
 15422                           ;Main_B1.c: 665: char cmd = 0;
 15423  1998  01F3               	clrf	getCmd_Status@cmd
 15424                           
 15425                           ;Main_B1.c: 666: switch (number) {
 15426  1999  29A0               	goto	l7581
 15427  199A                     l7577:	
 15428                           ;Main_B1.c: 667: case 1:
 15429                           
 15430                           
 15431                           ;Main_B1.c: 668: cmd = Cmd.all_off == 1 ? 1 : 0;
 15432  199A  3000               	movlw	0
 15433  199B  0021               	movlb	1	; select bank1
 15434  199C  1869               	btfsc	_Cmd^(0+128),0
 15435  199D  3001               	movlw	1
 15436  199E  00F3               	movwf	getCmd_Status@cmd
 15437                           
 15438                           ;Main_B1.c: 670: }
 15439                           
 15440                           ;Main_B1.c: 669: break;
 15441  199F  29A5               	goto	l7583
 15442  19A0                     l7581:	
 15443  19A0  0872               	movf	getCmd_Status@number,w
 15444                           
 15445                           ; Switch size 1, requested type "space"
 15446                           ; Number of cases is 1, Range of values is 1 to 1
 15447                           ; switch strategies available:
 15448                           ; Name         Instructions Cycles
 15449                           ; simple_byte            4     3 (average)
 15450                           ; direct_byte           11     9 (fixed)
 15451                           ; jumptable            263     9 (fixed)
 15452                           ;	Chosen strategy is simple_byte
 15453  19A1  3A01               	xorlw	1	; case 1
 15454  19A2  1903               	skipnz
 15455  19A3  299A               	goto	l7577
 15456  19A4  29A5               	goto	l7583
 15457  19A5                     l7583:	
 15458                           
 15459                           ;Main_B1.c: 671: return cmd;
 15460  19A5  0873               	movf	getCmd_Status@cmd,w
 15461  19A6  0008               	return
 15462  19A7                     __end_of_getCmd_Status:	
 15463                           
 15464                           	psect	text102
 15465  13E7                     __ptext102:	
 15466 ;; *************** function _setDimmerLights_Dimming *****************
 15467 ;; Defined at:
 15468 ;;		line 1142 in file "../src/Dimmer_B1.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;  lights          1    wreg     unsigned char 
 15471 ;;  status          1   66[BANK0 ] unsigned char 
 15472 ;; Auto vars:     Size  Location     Type
 15473 ;;  lights          1   69[BANK0 ] unsigned char 
 15474 ;;  value           1   68[BANK0 ] unsigned char 
 15475 ;; Return value:  Size  Location     Type
 15476 ;;		None               void
 15477 ;; Registers used:
 15478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15484 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;Total ram usage:        4 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; Hardware stack levels required when called:    6
 15491 ;; This function calls:
 15492 ;;		_getDimmerIntr_DimmingValue
 15493 ;;		_getDimmerLights_ValueToPercent
 15494 ;;		_setBuz
 15495 ;;		_setDimmerIntr_Dimming_Sw
 15496 ;;		_setDimmerIntr_MaxmumValue
 15497 ;;		_setDimmerLights_Line
 15498 ;;		_setMemory_Modify
 15499 ;;		_setProductData
 15500 ;;		_setRF_DimmerLights
 15501 ;;		_setRF_TransceiveGO
 15502 ;;		_setTxData
 15503 ;; This function is called by:
 15504 ;;		_setDimmerLights_Main
 15505 ;; This function uses a non-reentrant model
 15506 ;;
 15507                           
 15508                           
 15509                           ;psect for function _setDimmerLights_Dimming
 15510  13E7                     _setDimmerLights_Dimming:	
 15511                           
 15512                           ;incstack = 0
 15513                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15514                           ;setDimmerLights_Dimming@lights stored from wreg
 15515  13E7  0020               	movlb	0	; select bank0
 15516  13E8  00E5               	movwf	setDimmerLights_Dimming@lights
 15517                           
 15518                           ;Dimmer_B1.c: 1143: setDimmerIntr_Dimming_Sw(lights, status);
 15519  13E9  0862               	movf	setDimmerLights_Dimming@status,w
 15520  13EA  00E3               	movwf	??_setDimmerLights_Dimming
 15521  13EB  0863               	movf	??_setDimmerLights_Dimming,w
 15522  13EC  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 15523  13ED  0865               	movf	setDimmerLights_Dimming@lights,w
 15524  13EE  319D  254F  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15525                           
 15526                           ;Dimmer_B1.c: 1144: if (status == 1) {
 15527  13F1  0020               	movlb	0	; select bank0
 15528  13F2  0862               	movf	setDimmerLights_Dimming@status,w
 15529  13F3  3A01               	xorlw	1
 15530  13F4  1D03               	skipz
 15531  13F5  2C03               	goto	l10245
 15532                           
 15533                           ;Dimmer_B1.c: 1146: setRF_TransceiveGO(0);
 15534  13F6  3000               	movlw	0
 15535  13F7  3199  2187  3193   	fcall	_setRF_TransceiveGO
 15536                           
 15537                           ;Dimmer_B1.c: 1148: setBuz(1, 100);
 15538  13FA  3064               	movlw	100
 15539  13FB  0020               	movlb	0	; select bank0
 15540  13FC  00A4               	movwf	setBuz@time
 15541  13FD  3000               	movlw	0
 15542  13FE  00A5               	movwf	setBuz@time+1
 15543  13FF  3001               	movlw	1
 15544  1400  3192  22EC         	fcall	_setBuz
 15545                           
 15546                           ;Dimmer_B1.c: 1149: } else if (status == 0) {
 15547  1402  0008               	return
 15548  1403                     l10245:	
 15549  1403  0020               	movlb	0	; select bank0
 15550  1404  08E2               	movf	setDimmerLights_Dimming@status,f
 15551  1405  1D03               	skipz
 15552  1406  0008               	return
 15553                           
 15554                           ;Dimmer_B1.c: 1152: Dimmer.Load_Status = 0;
 15555  1407  0022               	movlb	2	; select bank2
 15556  1408  1120               	bcf	_Dimmer^(0+256),2
 15557                           
 15558                           ;Dimmer_B1.c: 1153: setDimmerLights_Line(lights);
 15559  1409  0020               	movlb	0	; select bank0
 15560  140A  0865               	movf	setDimmerLights_Dimming@lights,w
 15561  140B  319B  2315  3193   	fcall	_setDimmerLights_Line
 15562                           
 15563                           ;Dimmer_B1.c: 1155: char value = getDimmerIntr_DimmingValue(lights);
 15564  140E  0020               	movlb	0	; select bank0
 15565  140F  0865               	movf	setDimmerLights_Dimming@lights,w
 15566  1410  319A  222C  3193   	fcall	_getDimmerIntr_DimmingValue
 15567  1413  0020               	movlb	0	; select bank0
 15568  1414  00E3               	movwf	??_setDimmerLights_Dimming
 15569  1415  0863               	movf	??_setDimmerLights_Dimming,w
 15570  1416  00E4               	movwf	setDimmerLights_Dimming@value
 15571                           
 15572                           ;Dimmer_B1.c: 1156: setDimmerIntr_MaxmumValue(lights, value);
 15573  1417  0864               	movf	setDimmerLights_Dimming@value,w
 15574  1418  00E3               	movwf	??_setDimmerLights_Dimming
 15575  1419  0863               	movf	??_setDimmerLights_Dimming,w
 15576  141A  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15577  141B  0865               	movf	setDimmerLights_Dimming@lights,w
 15578  141C  319A  22FE  3193   	fcall	_setDimmerIntr_MaxmumValue
 15579                           
 15580                           ;Dimmer_B1.c: 1157: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15581  141F  0020               	movlb	0	; select bank0
 15582  1420  0864               	movf	setDimmerLights_Dimming@value,w
 15583  1421  3197  2736  3193   	fcall	_getDimmerLights_ValueToPercent
 15584  1424  0020               	movlb	0	; select bank0
 15585  1425  00E3               	movwf	??_setDimmerLights_Dimming
 15586  1426  0863               	movf	??_setDimmerLights_Dimming,w
 15587  1427  00DA               	movwf	setProductData@value
 15588  1428  0865               	movf	setDimmerLights_Dimming@lights,w
 15589  1429  3E14               	addlw	20
 15590  142A  3198  20C6  3193   	fcall	_setProductData
 15591                           
 15592                           ;Dimmer_B1.c: 1164: setMemory_Modify(1);
 15593  142D  3001               	movlw	1
 15594  142E  3199  2177  3193   	fcall	_setMemory_Modify
 15595                           
 15596                           ;Dimmer_B1.c: 1168: setRF_DimmerLights(lights, 1);
 15597  1431  0020               	movlb	0	; select bank0
 15598  1432  01DD               	clrf	setRF_DimmerLights@on
 15599  1433  0ADD               	incf	setRF_DimmerLights@on,f
 15600  1434  0865               	movf	setDimmerLights_Dimming@lights,w
 15601  1435  3188  202B  3193   	fcall	_setRF_DimmerLights
 15602                           
 15603                           ;Dimmer_B1.c: 1169: setTxData();
 15604  1438  3198  201C         	fcall	_setTxData
 15605  143A  0008               	return
 15606  143B                     __end_of_setDimmerLights_Dimming:	
 15607                           
 15608                           	psect	text103
 15609  181C                     __ptext103:	
 15610 ;; *************** function _setTxData *****************
 15611 ;; Defined at:
 15612 ;;		line 237 in file "../src/RF_Control_B1.c"
 15613 ;; Parameters:    Size  Location     Type
 15614 ;;		None
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;  i               1    0        unsigned char 
 15617 ;; Return value:  Size  Location     Type
 15618 ;;		None               void
 15619 ;; Registers used:
 15620 ;;		status,2
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;Total ram usage:        0 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    3
 15633 ;; This function calls:
 15634 ;;		Nothing
 15635 ;; This function is called by:
 15636 ;;		_setDimmerLights_OnOff
 15637 ;;		_setDimmerLights_Dimming
 15638 ;;		_getRxData
 15639 ;;		_setControl_Lights_Table
 15640 ;;		_setRFSW_Control
 15641 ;;		_setRFSW_AdjControl
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           
 15646                           ;psect for function _setTxData
 15647  181C                     _setTxData:	
 15648                           
 15649                           ;RF_Control_B1.c: 238: char i;
 15650                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 15651                           
 15652                           ;incstack = 0
 15653                           ; Regs used in _setTxData: [status,2]
 15654  181C  0021               	movlb	1	; select bank1
 15655  181D  1C40               	btfss	_RF1^(0+128),0
 15656  181E  0008               	return
 15657                           
 15658                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 15659  181F  1540               	bsf	_RF1^(0+128),2
 15660                           
 15661                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 15662  1820  01C3               	clrf	(_RF1^(0+128)+3)
 15663  1821  01C4               	clrf	((_RF1+1)^(0+128)+3)
 15664  1822  0008               	return
 15665  1823                     __end_of_setTxData:	
 15666                           
 15667                           	psect	text104
 15668  1987                     __ptext104:	
 15669 ;; *************** function _setRF_TransceiveGO *****************
 15670 ;; Defined at:
 15671 ;;		line 575 in file "../src/RF_Control_B1.c"
 15672 ;; Parameters:    Size  Location     Type
 15673 ;;  command         1    wreg     unsigned char 
 15674 ;; Auto vars:     Size  Location     Type
 15675 ;;  command         1    3[COMMON] unsigned char 
 15676 ;; Return value:  Size  Location     Type
 15677 ;;		None               void
 15678 ;; Registers used:
 15679 ;;		wreg, status,2, status,0
 15680 ;; Tracked objects:
 15681 ;;		On entry : 0/0
 15682 ;;		On exit  : 0/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;Total ram usage:        2 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:    3
 15692 ;; This function calls:
 15693 ;;		Nothing
 15694 ;; This function is called by:
 15695 ;;		_setDimmerLights_Dimming
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           
 15700                           ;psect for function _setRF_TransceiveGO
 15701  1987                     _setRF_TransceiveGO:	
 15702                           
 15703                           ;incstack = 0
 15704                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15705                           ;setRF_TransceiveGO@command stored from wreg
 15706  1987  00F3               	movwf	setRF_TransceiveGO@command
 15707                           
 15708                           ;RF_Control_B1.c: 576: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15709  1988  0873               	movf	setRF_TransceiveGO@command,w
 15710  1989  3A01               	xorlw	1
 15711  198A  3000               	movlw	0
 15712  198B  1903               	skipnz
 15713  198C  3001               	movlw	1
 15714  198D  00F2               	movwf	??_setRF_TransceiveGO
 15715  198E  0DF2               	rlf	??_setRF_TransceiveGO,f
 15716  198F  0DF2               	rlf	??_setRF_TransceiveGO,f
 15717  1990  0021               	movlb	1	; select bank1
 15718  1991  0840               	movf	_RF1^(0+128),w
 15719  1992  0672               	xorwf	??_setRF_TransceiveGO,w
 15720  1993  39FB               	andlw	-5
 15721  1994  0672               	xorwf	??_setRF_TransceiveGO,w
 15722  1995  00C0               	movwf	_RF1^(0+128)
 15723  1996  0008               	return
 15724  1997                     __end_of_setRF_TransceiveGO:	
 15725                           
 15726                           	psect	text105
 15727  082B                     __ptext105:	
 15728 ;; *************** function _setRF_DimmerLights *****************
 15729 ;; Defined at:
 15730 ;;		line 550 in file "../src/RF_Control_B1.c"
 15731 ;; Parameters:    Size  Location     Type
 15732 ;;  lights          1    wreg     unsigned char 
 15733 ;;  on              1   61[BANK0 ] unsigned char 
 15734 ;; Auto vars:     Size  Location     Type
 15735 ;;  lights          1   65[BANK0 ] unsigned char 
 15736 ;;  status          1   64[BANK0 ] unsigned char 
 15737 ;; Return value:  Size  Location     Type
 15738 ;;		None               void
 15739 ;; Registers used:
 15740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15741 ;; Tracked objects:
 15742 ;;		On entry : 0/0
 15743 ;;		On exit  : 0/0
 15744 ;;		Unchanged: 0/0
 15745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15746 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15747 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;Total ram usage:        5 bytes
 15751 ;; Hardware stack levels used:    1
 15752 ;; Hardware stack levels required when called:    4
 15753 ;; This function calls:
 15754 ;;		_setProductData
 15755 ;; This function is called by:
 15756 ;;		_setDimmerLights_OnOff
 15757 ;;		_setDimmerLights_Dimming
 15758 ;;		_setRFSW_Control
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _setRF_DimmerLights
 15764  082B                     _setRF_DimmerLights:	
 15765                           
 15766                           ;incstack = 0
 15767                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15768                           ;setRF_DimmerLights@lights stored from wreg
 15769  082B  0020               	movlb	0	; select bank0
 15770  082C  00E1               	movwf	setRF_DimmerLights@lights
 15771                           
 15772                           ;RF_Control_B1.c: 551: char status = 1;
 15773  082D  01E0               	clrf	setRF_DimmerLights@status
 15774  082E  0AE0               	incf	setRF_DimmerLights@status,f
 15775                           
 15776                           ;RF_Control_B1.c: 552: switch (lights) {
 15777  082F  2836               	goto	l7095
 15778  0830                     l7089:	
 15779                           ;RF_Control_B1.c: 553: case 2:
 15780                           
 15781  0830  2833               	goto	L10
 15782  0831                     l7091:	
 15783                           ;RF_Control_B1.c: 556: case 3:
 15784                           
 15785                           ;RF_Control_B1.c: 555: break;
 15786                           
 15787                           ;RF_Control_B1.c: 554: status <<= 1;
 15788                           
 15789                           
 15790                           ;RF_Control_B1.c: 557: status <<= 2;
 15791  0831  1003               	clrc
 15792  0832  0DE0               	rlf	setRF_DimmerLights@status,f
 15793  0833                     L10:	
 15794  0833  1003               	clrc
 15795  0834  0DE0               	rlf	setRF_DimmerLights@status,f
 15796                           
 15797                           ;RF_Control_B1.c: 559: }
 15798                           
 15799                           ;RF_Control_B1.c: 558: break;
 15800  0835  283E               	goto	l2586
 15801  0836                     l7095:	
 15802  0836  0861               	movf	setRF_DimmerLights@lights,w
 15803                           
 15804                           ; Switch size 1, requested type "space"
 15805                           ; Number of cases is 2, Range of values is 2 to 3
 15806                           ; switch strategies available:
 15807                           ; Name         Instructions Cycles
 15808                           ; simple_byte            7     4 (average)
 15809                           ; direct_byte           13     9 (fixed)
 15810                           ; jumptable            263     9 (fixed)
 15811                           ;	Chosen strategy is simple_byte
 15812  0837  3A02               	xorlw	2	; case 2
 15813  0838  1903               	skipnz
 15814  0839  2830               	goto	l7089
 15815  083A  3A01               	xorlw	1	; case 3
 15816  083B  1903               	skipnz
 15817  083C  2831               	goto	l7091
 15818  083D  283E               	goto	l2586
 15819  083E                     l2586:	
 15820                           
 15821                           ;RF_Control_B1.c: 560: status = ~status;
 15822  083E  09E0               	comf	setRF_DimmerLights@status,f
 15823                           
 15824                           ;RF_Control_B1.c: 562: setProductData(11, lights);
 15825  083F  0861               	movf	setRF_DimmerLights@lights,w
 15826  0840  00DE               	movwf	??_setRF_DimmerLights
 15827  0841  085E               	movf	??_setRF_DimmerLights,w
 15828  0842  00DA               	movwf	setProductData@value
 15829  0843  300B               	movlw	11
 15830  0844  3198  20C6  3188   	fcall	_setProductData
 15831                           
 15832                           ;RF_Control_B1.c: 563: setProductData(17, product->Data[26 + lights]);
 15833  0847  0020               	movlb	0	; select bank0
 15834  0848  0861               	movf	setRF_DimmerLights@lights,w
 15835  0849  3E1A               	addlw	26
 15836  084A  077B               	addwf	_product,w
 15837  084B  00DE               	movwf	??_setRF_DimmerLights
 15838  084C  085E               	movf	??_setRF_DimmerLights,w
 15839  084D  0086               	movwf	6
 15840  084E  3002               	movlw	2	; select bank4/5
 15841  084F  0087               	movwf	7
 15842  0850  0801               	movf	1,w
 15843  0851  00DF               	movwf	??_setRF_DimmerLights+1
 15844  0852  085F               	movf	??_setRF_DimmerLights+1,w
 15845  0853  00DA               	movwf	setProductData@value
 15846  0854  3011               	movlw	17
 15847  0855  3198  20C6  3188   	fcall	_setProductData
 15848                           
 15849                           ;RF_Control_B1.c: 564: if (on == 1) {
 15850  0858  0020               	movlb	0	; select bank0
 15851  0859  085D               	movf	setRF_DimmerLights@on,w
 15852  085A  3A01               	xorlw	1
 15853  085B  1D03               	skipz
 15854  085C  287C               	goto	l7103
 15855                           
 15856                           ;RF_Control_B1.c: 565: setProductData(9, product->Data[20 + lights]);
 15857  085D  0861               	movf	setRF_DimmerLights@lights,w
 15858  085E  3E14               	addlw	20
 15859  085F  077B               	addwf	_product,w
 15860  0860  00DE               	movwf	??_setRF_DimmerLights
 15861  0861  085E               	movf	??_setRF_DimmerLights,w
 15862  0862  0086               	movwf	6
 15863  0863  3002               	movlw	2	; select bank4/5
 15864  0864  0087               	movwf	7
 15865  0865  0801               	movf	1,w
 15866  0866  00DF               	movwf	??_setRF_DimmerLights+1
 15867  0867  085F               	movf	??_setRF_DimmerLights+1,w
 15868  0868  00DA               	movwf	setProductData@value
 15869  0869  3009               	movlw	9
 15870  086A  3198  20C6  3188   	fcall	_setProductData
 15871                           
 15872                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] | lights));
 15873  086D  087B               	movf	_product,w
 15874  086E  3E0F               	addlw	15
 15875  086F  0086               	movwf	6
 15876  0870  3002               	movlw	2	; select bank4/5
 15877  0871  0087               	movwf	7
 15878  0872  0801               	movf	1,w
 15879  0873  0020               	movlb	0	; select bank0
 15880  0874  0461               	iorwf	setRF_DimmerLights@lights,w
 15881  0875  00DE               	movwf	??_setRF_DimmerLights
 15882  0876  085E               	movf	??_setRF_DimmerLights,w
 15883  0877  00DA               	movwf	setProductData@value
 15884  0878  300F               	movlw	15
 15885  0879  3198  20C6         	fcall	_setProductData
 15886                           
 15887                           ;RF_Control_B1.c: 567: } else {
 15888  087B  0008               	return
 15889  087C                     l7103:	
 15890                           
 15891                           ;RF_Control_B1.c: 568: setProductData(9, 0x00);
 15892  087C  0020               	movlb	0	; select bank0
 15893  087D  01DA               	clrf	setProductData@value
 15894  087E  3009               	movlw	9
 15895  087F  3198  20C6  3188   	fcall	_setProductData
 15896                           
 15897                           ;RF_Control_B1.c: 569: setProductData(15, (product->Data[15] & status));
 15898  0882  087B               	movf	_product,w
 15899  0883  3E0F               	addlw	15
 15900  0884  0086               	movwf	6
 15901  0885  3002               	movlw	2	; select bank4/5
 15902  0886  0087               	movwf	7
 15903  0887  0801               	movf	1,w
 15904  0888  0020               	movlb	0	; select bank0
 15905  0889  0560               	andwf	setRF_DimmerLights@status,w
 15906  088A  00DE               	movwf	??_setRF_DimmerLights
 15907  088B  085E               	movf	??_setRF_DimmerLights,w
 15908  088C  00DA               	movwf	setProductData@value
 15909  088D  300F               	movlw	15
 15910  088E  3198  20C6         	fcall	_setProductData
 15911  0890  0008               	return
 15912  0891                     __end_of_setRF_DimmerLights:	
 15913                           
 15914                           	psect	text106
 15915  1B15                     __ptext106:	
 15916 ;; *************** function _setDimmerLights_Line *****************
 15917 ;; Defined at:
 15918 ;;		line 1215 in file "../src/Dimmer_B1.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;  lights          1    wreg     unsigned char 
 15921 ;; Auto vars:     Size  Location     Type
 15922 ;;  lights          1    2[COMMON] unsigned char 
 15923 ;; Return value:  Size  Location     Type
 15924 ;;		None               void
 15925 ;; Registers used:
 15926 ;;		wreg
 15927 ;; Tracked objects:
 15928 ;;		On entry : 0/0
 15929 ;;		On exit  : 0/0
 15930 ;;		Unchanged: 0/0
 15931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;Total ram usage:        1 bytes
 15937 ;; Hardware stack levels used:    1
 15938 ;; Hardware stack levels required when called:    3
 15939 ;; This function calls:
 15940 ;;		Nothing
 15941 ;; This function is called by:
 15942 ;;		_setDimmerLights_OnOff
 15943 ;;		_setDimmerLights_Dimming
 15944 ;; This function uses a non-reentrant model
 15945 ;;
 15946                           
 15947                           
 15948                           ;psect for function _setDimmerLights_Line
 15949  1B15                     _setDimmerLights_Line:	
 15950                           
 15951                           ;incstack = 0
 15952                           ; Regs used in _setDimmerLights_Line: [wreg]
 15953                           ;setDimmerLights_Line@lights stored from wreg
 15954  1B15  00F2               	movwf	setDimmerLights_Line@lights
 15955                           
 15956                           ;Dimmer_B1.c: 1216: Dimmer.LoadGO = 1;
 15957  1B16  0022               	movlb	2	; select bank2
 15958  1B17  14A0               	bsf	_Dimmer^(0+256),1
 15959                           
 15960                           ;Dimmer_B1.c: 1218: DimmerLights1.Line = 0;
 15961  1B18  0023               	movlb	3	; select bank3
 15962  1B19  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 15963                           
 15964                           ;Dimmer_B1.c: 1219: if (lights == 1 && lights != 0) {
 15965  1B1A  0872               	movf	setDimmerLights_Line@lights,w
 15966  1B1B  3A01               	xorlw	1
 15967  1B1C  1D03               	skipz
 15968  1B1D  2B22               	goto	l955
 15969  1B1E  0872               	movf	setDimmerLights_Line@lights,w
 15970  1B1F  1903               	btfsc	3,2
 15971  1B20  2B22               	goto	l955
 15972                           
 15973                           ;Dimmer_B1.c: 1220: DimmerLights1.Line = 1;
 15974  1B21  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 15975  1B22                     l955:	
 15976                           
 15977                           ;Dimmer_B1.c: 1221: }
 15978                           ;Dimmer_B1.c: 1224: DimmerLights2.Line = 0;
 15979  1B22  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 15980                           
 15981                           ;Dimmer_B1.c: 1225: if (lights == 2 && lights != 0) {
 15982  1B23  0872               	movf	setDimmerLights_Line@lights,w
 15983  1B24  3A02               	xorlw	2
 15984  1B25  1D03               	skipz
 15985  1B26  0008               	return
 15986  1B27  0872               	movf	setDimmerLights_Line@lights,w
 15987  1B28  1903               	btfsc	3,2
 15988  1B29  0008               	return
 15989                           
 15990                           ;Dimmer_B1.c: 1226: DimmerLights2.Line = 1;
 15991  1B2A  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 15992  1B2B  0008               	return
 15993  1B2C                     __end_of_setDimmerLights_Line:	
 15994                           
 15995                           	psect	text107
 15996  1D4F                     __ptext107:	
 15997 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15998 ;; Defined at:
 15999 ;;		line 251 in file "../src/Dimmer_B1.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;  lights          1    wreg     unsigned char 
 16002 ;;  command         1    2[COMMON] unsigned char 
 16003 ;; Auto vars:     Size  Location     Type
 16004 ;;  lights          1    4[COMMON] unsigned char 
 16005 ;; Return value:  Size  Location     Type
 16006 ;;		None               void
 16007 ;; Registers used:
 16008 ;;		wreg, status,2, status,0
 16009 ;; Tracked objects:
 16010 ;;		On entry : 0/0
 16011 ;;		On exit  : 0/0
 16012 ;;		Unchanged: 0/0
 16013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16014 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;Total ram usage:        3 bytes
 16019 ;; Hardware stack levels used:    1
 16020 ;; Hardware stack levels required when called:    3
 16021 ;; This function calls:
 16022 ;;		Nothing
 16023 ;; This function is called by:
 16024 ;;		_setDimmerLights_Dimming
 16025 ;;		_setDimmerLights_DimmingClose
 16026 ;; This function uses a non-reentrant model
 16027 ;;
 16028                           
 16029                           
 16030                           ;psect for function _setDimmerIntr_Dimming_Sw
 16031  1D4F                     _setDimmerIntr_Dimming_Sw:	
 16032                           
 16033                           ;incstack = 0
 16034                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16035                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16036  1D4F  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16037                           
 16038                           ;Dimmer_B1.c: 253: if (lights == 1) {
 16039  1D50  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16040  1D51  3A01               	xorlw	1
 16041  1D52  1D03               	skipz
 16042  1D53  2D62               	goto	l7215
 16043                           
 16044                           ;Dimmer_B1.c: 254: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16045  1D54  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16046  1D55  3A01               	xorlw	1
 16047  1D56  3000               	movlw	0
 16048  1D57  1903               	skipnz
 16049  1D58  3001               	movlw	1
 16050  1D59  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16051  1D5A  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16052  1D5B  0021               	movlb	1	; select bank1
 16053  1D5C  0820               	movf	_DimmerIntr1^(0+128),w
 16054  1D5D  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16055  1D5E  39EF               	andlw	-17
 16056  1D5F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16057  1D60  00A0               	movwf	_DimmerIntr1^(0+128)
 16058                           
 16059                           ;Dimmer_B1.c: 255: }
 16060  1D61  0008               	return
 16061  1D62                     l7215:	
 16062                           
 16063                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 16064  1D62  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16065  1D63  3A02               	xorlw	2
 16066  1D64  1D03               	skipz
 16067  1D65  0008               	return
 16068                           
 16069                           ;Dimmer_B1.c: 259: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16070  1D66  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16071  1D67  3A01               	xorlw	1
 16072  1D68  3000               	movlw	0
 16073  1D69  1903               	skipnz
 16074  1D6A  3001               	movlw	1
 16075  1D6B  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16076  1D6C  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16077  1D6D  0021               	movlb	1	; select bank1
 16078  1D6E  0830               	movf	_DimmerIntr2^(0+128),w
 16079  1D6F  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16080  1D70  39EF               	andlw	-17
 16081  1D71  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16082  1D72  00B0               	movwf	_DimmerIntr2^(0+128)
 16083  1D73  0008               	return
 16084  1D74                     __end_of_setDimmerIntr_Dimming_Sw:	
 16085                           
 16086                           	psect	text108
 16087  1A2C                     __ptext108:	
 16088 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16089 ;; Defined at:
 16090 ;;		line 155 in file "../src/Dimmer_B1.c"
 16091 ;; Parameters:    Size  Location     Type
 16092 ;;  lights          1    wreg     unsigned char 
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;  lights          1    4[COMMON] unsigned char 
 16095 ;;  value           1    3[COMMON] unsigned char 
 16096 ;; Return value:  Size  Location     Type
 16097 ;;                  1    wreg      unsigned char 
 16098 ;; Registers used:
 16099 ;;		wreg, status,2
 16100 ;; Tracked objects:
 16101 ;;		On entry : 0/0
 16102 ;;		On exit  : 0/0
 16103 ;;		Unchanged: 0/0
 16104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;Total ram usage:        3 bytes
 16110 ;; Hardware stack levels used:    1
 16111 ;; Hardware stack levels required when called:    3
 16112 ;; This function calls:
 16113 ;;		Nothing
 16114 ;; This function is called by:
 16115 ;;		_setDimmerLights_Dimming
 16116 ;; This function uses a non-reentrant model
 16117 ;;
 16118                           
 16119                           
 16120                           ;psect for function _getDimmerIntr_DimmingValue
 16121  1A2C                     _getDimmerIntr_DimmingValue:	
 16122                           
 16123                           ;incstack = 0
 16124                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16125                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16126  1A2C  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16127                           
 16128                           ;Dimmer_B1.c: 156: char value = 0;
 16129  1A2D  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16130                           
 16131                           ;Dimmer_B1.c: 158: if (lights == 1) {
 16132  1A2E  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16133  1A2F  3A01               	xorlw	1
 16134  1A30  1D03               	skipz
 16135  1A31  2A35               	goto	l7449
 16136                           
 16137                           ;Dimmer_B1.c: 159: value = DimmerIntr1.DimmingValue;
 16138  1A32  0021               	movlb	1	; select bank1
 16139  1A33  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 16140  1A34  2A3B               	goto	L11
 16141  1A35                     l7449:	
 16142                           ;Dimmer_B1.c: 160: }
 16143                           
 16144                           
 16145                           ;Dimmer_B1.c: 163: else if (lights == 2) {
 16146  1A35  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16147  1A36  3A02               	xorlw	2
 16148  1A37  1D03               	skipz
 16149  1A38  2A3E               	goto	l779
 16150                           
 16151                           ;Dimmer_B1.c: 164: value = DimmerIntr2.DimmingValue;
 16152  1A39  0021               	movlb	1	; select bank1
 16153  1A3A  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 16154  1A3B                     L11:	
 16155  1A3B  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16156  1A3C  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16157  1A3D  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16158  1A3E                     l779:	
 16159                           
 16160                           ;Dimmer_B1.c: 165: }
 16161                           ;Dimmer_B1.c: 172: return value;
 16162  1A3E  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16163  1A3F  0008               	return
 16164  1A40                     __end_of_getDimmerIntr_DimmingValue:	
 16165                           
 16166                           	psect	text109
 16167  1FC9                     __ptext109:	
 16168 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16169 ;; Defined at:
 16170 ;;		line 1175 in file "../src/Dimmer_B1.c"
 16171 ;; Parameters:    Size  Location     Type
 16172 ;;  lights          1    wreg     unsigned char 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;  lights          1    7[COMMON] unsigned char 
 16175 ;;  allow           1    8[COMMON] unsigned char 
 16176 ;; Return value:  Size  Location     Type
 16177 ;;                  1    wreg      unsigned char 
 16178 ;; Registers used:
 16179 ;;		wreg, status,2, status,0, pclath, cstack
 16180 ;; Tracked objects:
 16181 ;;		On entry : 0/0
 16182 ;;		On exit  : 0/0
 16183 ;;		Unchanged: 0/0
 16184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16189 ;;Total ram usage:        6 bytes
 16190 ;; Hardware stack levels used:    1
 16191 ;; Hardware stack levels required when called:    4
 16192 ;; This function calls:
 16193 ;;		_getLoad_OK
 16194 ;; This function is called by:
 16195 ;;		_setDimmerLights_Main
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           
 16200                           ;psect for function _getDimmerLights_Allow_Condition
 16201  1FC9                     _getDimmerLights_Allow_Condition:	
 16202                           
 16203                           ;incstack = 0
 16204                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16205                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16206  1FC9  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16207                           
 16208                           ;Dimmer_B1.c: 1176: char allow = 0;
 16209  1FCA  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16210                           
 16211                           ;Dimmer_B1.c: 1182: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16212  1FCB  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16213  1FCC  0AF4               	incf	_getDimmerLights_Allow_Condition$2729,f
 16214  1FCD  3198  2015  319F   	fcall	_getLoad_OK
 16215  1FD0  3800               	iorlw	0
 16216  1FD1  1D03               	skipz
 16217  1FD2  2FD7               	goto	l7771
 16218  1FD3  0022               	movlb	2	; select bank2
 16219  1FD4  18A0               	btfsc	_Dimmer^(0+256),1
 16220  1FD5  2FD7               	goto	l7771
 16221  1FD6  01F4               	clrf	_getDimmerLights_Allow_Condition$2729
 16222  1FD7                     l7771:	
 16223  1FD7  0874               	movf	_getDimmerLights_Allow_Condition$2729,w
 16224  1FD8  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16225  1FD9  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16226  1FDA  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16227                           
 16228                           ;Dimmer_B1.c: 1186: if (allow == 0) {
 16229  1FDB  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16230  1FDC  1D03               	skipz
 16231  1FDD  2FFE               	goto	l7795
 16232                           
 16233                           ;Dimmer_B1.c: 1187: if (lights == 1) {
 16234  1FDE  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16235  1FDF  3A01               	xorlw	1
 16236  1FE0  1D03               	skipz
 16237  1FE1  2FED               	goto	l7785
 16238                           
 16239                           ;Dimmer_B1.c: 1188: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16240  1FE2  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16241  1FE3  0AF5               	incf	_getDimmerLights_Allow_Condition$2730,f
 16242  1FE4  0023               	movlb	3	; select bank3
 16243  1FE5  1A47               	btfsc	_DimmerLights2^(0+384),4
 16244  1FE6  2FEB               	goto	l7783
 16245  1FE7  0021               	movlb	1	; select bank1
 16246  1FE8  1A30               	btfsc	_DimmerIntr2^(0+128),4
 16247  1FE9  2FEB               	goto	l7783
 16248  1FEA  01F5               	clrf	_getDimmerLights_Allow_Condition$2730
 16249  1FEB                     l7783:	
 16250  1FEB  0875               	movf	_getDimmerLights_Allow_Condition$2730,w
 16251  1FEC  2FFB               	goto	L12
 16252  1FED                     l7785:	
 16253                           ;Dimmer_B1.c: 1189: } else if (lights == 2) {
 16254                           
 16255  1FED  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16256  1FEE  3A02               	xorlw	2
 16257  1FEF  1D03               	skipz
 16258  1FF0  2FFE               	goto	l7795
 16259                           
 16260                           ;Dimmer_B1.c: 1190: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16261  1FF1  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16262  1FF2  0AF6               	incf	_getDimmerLights_Allow_Condition$2731,f
 16263  1FF3  0023               	movlb	3	; select bank3
 16264  1FF4  1A3E               	btfsc	_DimmerLights1^(0+384),4
 16265  1FF5  2FFA               	goto	l7793
 16266  1FF6  0021               	movlb	1	; select bank1
 16267  1FF7  1A20               	btfsc	_DimmerIntr1^(0+128),4
 16268  1FF8  2FFA               	goto	l7793
 16269  1FF9  01F6               	clrf	_getDimmerLights_Allow_Condition$2731
 16270  1FFA                     l7793:	
 16271  1FFA  0876               	movf	_getDimmerLights_Allow_Condition$2731,w
 16272  1FFB                     L12:	
 16273  1FFB  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16274  1FFC  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16275  1FFD  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16276  1FFE                     l7795:	
 16277                           
 16278                           ;Dimmer_B1.c: 1191: }
 16279                           ;Dimmer_B1.c: 1192: }
 16280                           ;Dimmer_B1.c: 1210: return allow;
 16281  1FFE  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16282  1FFF  0008               	return
 16283  2000                     __end_of_getDimmerLights_Allow_Condition:	
 16284                           
 16285                           	psect	text110
 16286  1815                     __ptext110:	
 16287 ;; *************** function _getLoad_OK *****************
 16288 ;; Defined at:
 16289 ;;		line 274 in file "../src/OverLoad_B1.c"
 16290 ;; Parameters:    Size  Location     Type
 16291 ;;		None
 16292 ;; Auto vars:     Size  Location     Type
 16293 ;;  ok              1    2[COMMON] unsigned char 
 16294 ;; Return value:  Size  Location     Type
 16295 ;;                  1    wreg      unsigned char 
 16296 ;; Registers used:
 16297 ;;		wreg, status,2
 16298 ;; Tracked objects:
 16299 ;;		On entry : 0/0
 16300 ;;		On exit  : 0/0
 16301 ;;		Unchanged: 0/0
 16302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16307 ;;Total ram usage:        1 bytes
 16308 ;; Hardware stack levels used:    1
 16309 ;; Hardware stack levels required when called:    3
 16310 ;; This function calls:
 16311 ;;		Nothing
 16312 ;; This function is called by:
 16313 ;;		_DimmerLights_Main
 16314 ;;		_getDimmerLights_Allow_Condition
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           
 16319                           ;psect for function _getLoad_OK
 16320  1815                     _getLoad_OK:	
 16321                           
 16322                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16323                           
 16324                           ;incstack = 0
 16325                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16326  1815  3000               	movlw	0
 16327  1816  0022               	movlb	2	; select bank2
 16328  1817  1BB2               	btfsc	_Load^(0+256),7
 16329  1818  3001               	movlw	1
 16330  1819  00F2               	movwf	getLoad_OK@ok
 16331                           
 16332                           ;OverLoad_B1.c: 276: return ok;
 16333  181A  0872               	movf	getLoad_OK@ok,w
 16334  181B  0008               	return
 16335  181C                     __end_of_getLoad_OK:	
 16336                           
 16337                           	psect	text111
 16338  1E3C                     __ptext111:	
 16339 ;; *************** function _getMain_All_Error_Status *****************
 16340 ;; Defined at:
 16341 ;;		line 429 in file "../src/Main_B1.c"
 16342 ;; Parameters:    Size  Location     Type
 16343 ;;  command         1    wreg     unsigned char 
 16344 ;; Auto vars:     Size  Location     Type
 16345 ;;  command         1    7[COMMON] unsigned char 
 16346 ;;  status          1    8[COMMON] unsigned char 
 16347 ;; Return value:  Size  Location     Type
 16348 ;;                  1    wreg      unsigned char 
 16349 ;; Registers used:
 16350 ;;		wreg, status,2, status,0
 16351 ;; Tracked objects:
 16352 ;;		On entry : 0/0
 16353 ;;		On exit  : 0/0
 16354 ;;		Unchanged: 0/0
 16355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;Total ram usage:        7 bytes
 16361 ;; Hardware stack levels used:    1
 16362 ;; Hardware stack levels required when called:    3
 16363 ;; This function calls:
 16364 ;;		Nothing
 16365 ;; This function is called by:
 16366 ;;		_DimmerLights_Main
 16367 ;;		_Exception_Main
 16368 ;;		_Load_Main
 16369 ;;		_setTemp_Main
 16370 ;;		_getRxData
 16371 ;;		_setSw_Main
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           
 16376                           ;psect for function _getMain_All_Error_Status
 16377  1E3C                     _getMain_All_Error_Status:	
 16378                           
 16379                           ;incstack = 0
 16380                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16381                           ;getMain_All_Error_Status@command stored from wreg
 16382  1E3C  00F7               	movwf	getMain_All_Error_Status@command
 16383                           
 16384                           ;Main_B1.c: 430: char status = 0;
 16385  1E3D  01F8               	clrf	getMain_All_Error_Status@status
 16386                           
 16387                           ;Main_B1.c: 441: if (status == 0 && command != 2) {
 16388  1E3E  08F8               	movf	getMain_All_Error_Status@status,f
 16389  1E3F  1D03               	skipz
 16390  1E40  2E53               	goto	l7473
 16391  1E41  0877               	movf	getMain_All_Error_Status@command,w
 16392  1E42  3A02               	xorlw	2
 16393  1E43  1903               	skipnz
 16394  1E44  2E53               	goto	l7473
 16395                           
 16396                           ;Main_B1.c: 442: status = Temp.ERROR == 1 ? 2 : 0;
 16397  1E45  0022               	movlb	2	; select bank2
 16398  1E46  18DA               	btfsc	_Temp^(0+256),1
 16399  1E47  2E4B               	goto	l7471
 16400  1E48  01F3               	clrf	_getMain_All_Error_Status$4214
 16401  1E49  01F4               	clrf	_getMain_All_Error_Status$4214+1
 16402  1E4A  2E4F               	goto	l1738
 16403  1E4B                     l7471:	
 16404  1E4B  3002               	movlw	2
 16405  1E4C  00F3               	movwf	_getMain_All_Error_Status$4214
 16406  1E4D  3000               	movlw	0
 16407  1E4E  00F4               	movwf	_getMain_All_Error_Status$4214+1
 16408  1E4F                     l1738:	
 16409  1E4F  0873               	movf	_getMain_All_Error_Status$4214,w
 16410  1E50  00F2               	movwf	??_getMain_All_Error_Status
 16411  1E51  0872               	movf	??_getMain_All_Error_Status,w
 16412  1E52  00F8               	movwf	getMain_All_Error_Status@status
 16413  1E53                     l7473:	
 16414                           
 16415                           ;Main_B1.c: 443: }
 16416                           ;Main_B1.c: 448: if (status == 0 && command != 3) {
 16417  1E53  08F8               	movf	getMain_All_Error_Status@status,f
 16418  1E54  1D03               	skipz
 16419  1E55  2E68               	goto	l1739
 16420  1E56  0877               	movf	getMain_All_Error_Status@command,w
 16421  1E57  3A03               	xorlw	3
 16422  1E58  1903               	skipnz
 16423  1E59  2E68               	goto	l1739
 16424                           
 16425                           ;Main_B1.c: 449: status = Load.ERROR == 1 ? 3 : 0;
 16426  1E5A  0022               	movlb	2	; select bank2
 16427  1E5B  1AB2               	btfsc	_Load^(0+256),5
 16428  1E5C  2E60               	goto	l7481
 16429  1E5D  01F5               	clrf	_getMain_All_Error_Status$4215
 16430  1E5E  01F6               	clrf	_getMain_All_Error_Status$4215+1
 16431  1E5F  2E64               	goto	l1743
 16432  1E60                     l7481:	
 16433  1E60  3003               	movlw	3
 16434  1E61  00F5               	movwf	_getMain_All_Error_Status$4215
 16435  1E62  3000               	movlw	0
 16436  1E63  00F6               	movwf	_getMain_All_Error_Status$4215+1
 16437  1E64                     l1743:	
 16438  1E64  0875               	movf	_getMain_All_Error_Status$4215,w
 16439  1E65  00F2               	movwf	??_getMain_All_Error_Status
 16440  1E66  0872               	movf	??_getMain_All_Error_Status,w
 16441  1E67  00F8               	movwf	getMain_All_Error_Status@status
 16442  1E68                     l1739:	
 16443                           
 16444                           ;Main_B1.c: 450: }
 16445                           ;Main_B1.c: 460: return status;
 16446  1E68  0878               	movf	getMain_All_Error_Status@status,w
 16447  1E69  0008               	return
 16448  1E6A                     __end_of_getMain_All_Error_Status:	
 16449                           
 16450                           	psect	text112
 16451  1393                     __ptext112:	
 16452 ;; *************** function _DimmerLights_TwoPhase_Main *****************
 16453 ;; Defined at:
 16454 ;;		line 957 in file "../src/Dimmer_B1.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;  lights          1    wreg     unsigned char 
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;  lights          1   65[BANK0 ] unsigned char 
 16459 ;; Return value:  Size  Location     Type
 16460 ;;		None               void
 16461 ;; Registers used:
 16462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16463 ;; Tracked objects:
 16464 ;;		On entry : 0/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;Total ram usage:        1 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; Hardware stack levels required when called:    7
 16475 ;; This function calls:
 16476 ;;		_DimmerLights_AssignationDimming
 16477 ;;		_DimmerLights_SelectPointer
 16478 ;; This function is called by:
 16479 ;;		_DimmerLights_Main
 16480 ;; This function uses a non-reentrant model
 16481 ;;
 16482                           
 16483                           
 16484                           ;psect for function _DimmerLights_TwoPhase_Main
 16485  1393                     _DimmerLights_TwoPhase_Main:	
 16486                           
 16487                           ;incstack = 0
 16488                           ; Regs used in _DimmerLights_TwoPhase_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16489                           ;DimmerLights_TwoPhase_Main@lights stored from wreg
 16490  1393  0020               	movlb	0	; select bank0
 16491  1394  00E1               	movwf	DimmerLights_TwoPhase_Main@lights
 16492                           
 16493                           ;Dimmer_B1.c: 959: DimmerLights_SelectPointer(lights);
 16494  1395  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16495  1396  319A  2255  3193   	fcall	_DimmerLights_SelectPointer
 16496                           
 16497                           ;Dimmer_B1.c: 960: if (DimmerLights->Phase == 1) {
 16498  1399  0020               	movlb	0	; select bank0
 16499  139A  086C               	movf	_DimmerLights,w
 16500  139B  3E02               	addlw	2
 16501  139C  0086               	movwf	6
 16502  139D  3001               	movlw	1	; select bank2/3
 16503  139E  0087               	movwf	7
 16504  139F  1C01               	btfss	1,0
 16505  13A0  0008               	return
 16506                           
 16507                           ;Dimmer_B1.c: 961: if (DimmerLights->PhaseFirst == 0) {
 16508  13A1  086C               	movf	_DimmerLights,w
 16509  13A2  3E02               	addlw	2
 16510  13A3  0086               	movwf	6
 16511  13A4  3001               	movlw	1	; select bank2/3
 16512  13A5  0087               	movwf	7
 16513  13A6  1881               	btfsc	1,1
 16514  13A7  2BD1               	goto	l10565
 16515                           
 16516                           ;Dimmer_B1.c: 963: if (DimmerLights->PhaseSwitch == 1) {
 16517  13A8  086C               	movf	_DimmerLights,w
 16518  13A9  3E02               	addlw	2
 16519  13AA  0086               	movwf	6
 16520  13AB  3001               	movlw	1	; select bank2/3
 16521  13AC  0087               	movwf	7
 16522  13AD  1D01               	btfss	1,2
 16523  13AE  2BC0               	goto	l10563
 16524                           
 16525                           ;Dimmer_B1.c: 964: DimmerLights->PhaseFirst = 1;
 16526  13AF  086C               	movf	_DimmerLights,w
 16527  13B0  3E02               	addlw	2
 16528  13B1  0086               	movwf	6
 16529  13B2  3001               	movlw	1	; select bank2/3
 16530  13B3  0087               	movwf	7
 16531  13B4  1481               	bsf	1,1
 16532                           
 16533                           ;Dimmer_B1.c: 965: DimmerLights->Trigger = 1;
 16534  13B5  086C               	movf	_DimmerLights,w
 16535  13B6  0086               	movwf	6
 16536  13B7  3001               	movlw	1	; select bank2/3
 16537  13B8  0087               	movwf	7
 16538  13B9  1481               	bsf	1,1
 16539                           
 16540                           ;Dimmer_B1.c: 966: DimmerLights->Switch = 1;
 16541  13BA  086C               	movf	_DimmerLights,w
 16542  13BB  0086               	movwf	6
 16543  13BC  3001               	movlw	1	; select bank2/3
 16544  13BD  0087               	movwf	7
 16545  13BE  1501               	bsf	1,2
 16546                           
 16547                           ;Dimmer_B1.c: 967: } else {
 16548  13BF  0008               	return
 16549  13C0                     l10563:	
 16550                           
 16551                           ;Dimmer_B1.c: 968: DimmerLights->Phase = 0;
 16552  13C0  086C               	movf	_DimmerLights,w
 16553  13C1  3E02               	addlw	2
 16554  13C2  0086               	movwf	6
 16555  13C3  3001               	movlw	1	; select bank2/3
 16556  13C4  0087               	movwf	7
 16557  13C5  1001               	bcf	1,0
 16558                           
 16559                           ;Dimmer_B1.c: 969: DimmerLights->Trigger = 1;
 16560  13C6  086C               	movf	_DimmerLights,w
 16561  13C7  0086               	movwf	6
 16562  13C8  3001               	movlw	1	; select bank2/3
 16563  13C9  0087               	movwf	7
 16564  13CA  1481               	bsf	1,1
 16565                           
 16566                           ;Dimmer_B1.c: 970: DimmerLights->Switch = 0;
 16567  13CB  086C               	movf	_DimmerLights,w
 16568  13CC  0086               	movwf	6
 16569  13CD  3001               	movlw	1	; select bank2/3
 16570  13CE  0087               	movwf	7
 16571  13CF  1101               	bcf	1,2
 16572                           
 16573                           ;Dimmer_B1.c: 971: }
 16574                           ;Dimmer_B1.c: 972: } else {
 16575  13D0  0008               	return
 16576  13D1                     l10565:	
 16577                           
 16578                           ;Dimmer_B1.c: 973: if (DimmerLights->Trigger == 0) {
 16579  13D1  086C               	movf	_DimmerLights,w
 16580  13D2  0086               	movwf	6
 16581  13D3  3001               	movlw	1	; select bank2/3
 16582  13D4  0087               	movwf	7
 16583  13D5  1881               	btfsc	1,1
 16584  13D6  0008               	return
 16585                           
 16586                           ;Dimmer_B1.c: 974: DimmerLights->PhaseFirst = 0;
 16587  13D7  086C               	movf	_DimmerLights,w
 16588  13D8  3E02               	addlw	2
 16589  13D9  0086               	movwf	6
 16590  13DA  3001               	movlw	1	; select bank2/3
 16591  13DB  0087               	movwf	7
 16592  13DC  1081               	bcf	1,1
 16593                           
 16594                           ;Dimmer_B1.c: 975: DimmerLights->Phase = 0;
 16595  13DD  086C               	movf	_DimmerLights,w
 16596  13DE  3E02               	addlw	2
 16597  13DF  0086               	movwf	6
 16598  13E0  3001               	movlw	1	; select bank2/3
 16599  13E1  0087               	movwf	7
 16600  13E2  1001               	bcf	1,0
 16601                           
 16602                           ;Dimmer_B1.c: 976: DimmerLights_AssignationDimming(lights);
 16603  13E3  0861               	movf	DimmerLights_TwoPhase_Main@lights,w
 16604  13E4  319E  266A         	fcall	_DimmerLights_AssignationDimming
 16605  13E6  0008               	return
 16606  13E7                     __end_of_DimmerLights_TwoPhase_Main:	
 16607                           
 16608                           	psect	text113
 16609  1E6A                     __ptext113:	
 16610 ;; *************** function _DimmerLights_AssignationDimming *****************
 16611 ;; Defined at:
 16612 ;;		line 983 in file "../src/Dimmer_B1.c"
 16613 ;; Parameters:    Size  Location     Type
 16614 ;;  sw              1    wreg     unsigned char 
 16615 ;; Auto vars:     Size  Location     Type
 16616 ;;  sw              1   64[BANK0 ] unsigned char 
 16617 ;;  status          1   63[BANK0 ] unsigned char 
 16618 ;; Return value:  Size  Location     Type
 16619 ;;		None               void
 16620 ;; Registers used:
 16621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16622 ;; Tracked objects:
 16623 ;;		On entry : 0/0
 16624 ;;		On exit  : 0/0
 16625 ;;		Unchanged: 0/0
 16626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16629 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16630 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16631 ;;Total ram usage:        4 bytes
 16632 ;; Hardware stack levels used:    1
 16633 ;; Hardware stack levels required when called:    6
 16634 ;; This function calls:
 16635 ;;		_getDimmerLights_PercentToValue
 16636 ;;		_getDimmerLights_Status
 16637 ;;		_setDimmerIntr_Dimming_RF
 16638 ;;		_setDimmerIntr_MaxmumValue
 16639 ;;		_setMemory_Modify
 16640 ;; This function is called by:
 16641 ;;		_DimmerLights_TwoPhase_Main
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function _DimmerLights_AssignationDimming
 16647  1E6A                     _DimmerLights_AssignationDimming:	
 16648                           
 16649                           ;incstack = 0
 16650                           ; Regs used in _DimmerLights_AssignationDimming: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 16651                           ;DimmerLights_AssignationDimming@sw stored from wreg
 16652  1E6A  0020               	movlb	0	; select bank0
 16653  1E6B  00E0               	movwf	DimmerLights_AssignationDimming@sw
 16654                           
 16655                           ;Dimmer_B1.c: 984: char status = 0;
 16656  1E6C  01DF               	clrf	DimmerLights_AssignationDimming@status
 16657                           
 16658                           ;Dimmer_B1.c: 986: status = getDimmerLights_Status(sw);
 16659  1E6D  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16660  1E6E  3199  212C  319E   	fcall	_getDimmerLights_Status
 16661  1E71  0020               	movlb	0	; select bank0
 16662  1E72  00DD               	movwf	??_DimmerLights_AssignationDimming
 16663  1E73  085D               	movf	??_DimmerLights_AssignationDimming,w
 16664  1E74  00DF               	movwf	DimmerLights_AssignationDimming@status
 16665                           
 16666                           ;Dimmer_B1.c: 990: setMemory_Modify(1);
 16667  1E75  3001               	movlw	1
 16668  1E76  3199  2177  319E   	fcall	_setMemory_Modify
 16669                           
 16670                           ;Dimmer_B1.c: 994: if (status == 1) {
 16671  1E79  0020               	movlb	0	; select bank0
 16672  1E7A  085F               	movf	DimmerLights_AssignationDimming@status,w
 16673  1E7B  3A01               	xorlw	1
 16674  1E7C  1D03               	skipz
 16675  1E7D  0008               	return
 16676                           
 16677                           ;Dimmer_B1.c: 995: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(product-
      +                          >Data[20 + sw]));
 16678  1E7E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16679  1E7F  3E14               	addlw	20
 16680  1E80  077B               	addwf	_product,w
 16681  1E81  00DD               	movwf	??_DimmerLights_AssignationDimming
 16682  1E82  085D               	movf	??_DimmerLights_AssignationDimming,w
 16683  1E83  0086               	movwf	6
 16684  1E84  3002               	movlw	2	; select bank4/5
 16685  1E85  0087               	movwf	7
 16686  1E86  0801               	movf	1,w
 16687  1E87  3196  26D1  319E   	fcall	_getDimmerLights_PercentToValue
 16688  1E8A  0020               	movlb	0	; select bank0
 16689  1E8B  00DE               	movwf	??_DimmerLights_AssignationDimming+1
 16690  1E8C  085E               	movf	??_DimmerLights_AssignationDimming+1,w
 16691  1E8D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 16692  1E8E  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16693  1E8F  319A  22FE  319E   	fcall	_setDimmerIntr_MaxmumValue
 16694                           
 16695                           ;Dimmer_B1.c: 996: setDimmerIntr_Dimming_RF(sw, 1);
 16696  1E92  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 16697  1E93  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 16698  1E94  0020               	movlb	0	; select bank0
 16699  1E95  0860               	movf	DimmerLights_AssignationDimming@sw,w
 16700  1E96  319D  25C0         	fcall	_setDimmerIntr_Dimming_RF
 16701  1E98  0008               	return
 16702  1E99                     __end_of_DimmerLights_AssignationDimming:	
 16703                           
 16704                           	psect	text114
 16705  1AFE                     __ptext114:	
 16706 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16707 ;; Defined at:
 16708 ;;		line 175 in file "../src/Dimmer_B1.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;  lights          1    wreg     unsigned char 
 16711 ;;  value           1   58[BANK0 ] unsigned char 
 16712 ;; Auto vars:     Size  Location     Type
 16713 ;;  lights          1   60[BANK0 ] unsigned char 
 16714 ;; Return value:  Size  Location     Type
 16715 ;;		None               void
 16716 ;; Registers used:
 16717 ;;		wreg
 16718 ;; Tracked objects:
 16719 ;;		On entry : 0/0
 16720 ;;		On exit  : 0/0
 16721 ;;		Unchanged: 0/0
 16722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16723 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;Total ram usage:        3 bytes
 16728 ;; Hardware stack levels used:    1
 16729 ;; Hardware stack levels required when called:    3
 16730 ;; This function calls:
 16731 ;;		Nothing
 16732 ;; This function is called by:
 16733 ;;		_DimmerLights_AssignationDimming
 16734 ;;		_setDimmerLights_OnOff
 16735 ;;		_setDimmerLights_Dimming
 16736 ;;		_setRFSW_AdjControl
 16737 ;; This function uses a non-reentrant model
 16738 ;;
 16739                           
 16740                           
 16741                           ;psect for function _setDimmerIntr_MaxmumValue
 16742  1AFE                     _setDimmerIntr_MaxmumValue:	
 16743                           
 16744                           ;incstack = 0
 16745                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16746                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16747  1AFE  0020               	movlb	0	; select bank0
 16748  1AFF  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16749                           
 16750                           ;Dimmer_B1.c: 177: if (lights == 1) {
 16751  1B00  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16752  1B01  3A01               	xorlw	1
 16753  1B02  1D03               	skipz
 16754  1B03  2B0A               	goto	l7075
 16755                           
 16756                           ;Dimmer_B1.c: 178: DimmerIntr1.MaxmumValue = value;
 16757  1B04  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16758  1B05  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16759  1B06  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16760  1B07  0021               	movlb	1	; select bank1
 16761  1B08  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 16762                           
 16763                           ;Dimmer_B1.c: 179: }
 16764  1B09  0008               	return
 16765  1B0A                     l7075:	
 16766                           
 16767                           ;Dimmer_B1.c: 182: else if (lights == 2) {
 16768  1B0A  0020               	movlb	0	; select bank0
 16769  1B0B  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16770  1B0C  3A02               	xorlw	2
 16771  1B0D  1D03               	skipz
 16772  1B0E  0008               	return
 16773                           
 16774                           ;Dimmer_B1.c: 183: DimmerIntr2.MaxmumValue = value;
 16775  1B0F  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16776  1B10  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16777  1B11  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16778  1B12  0021               	movlb	1	; select bank1
 16779  1B13  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 16780  1B14  0008               	return
 16781  1B15                     __end_of_setDimmerIntr_MaxmumValue:	
 16782                           
 16783                           	psect	text115
 16784  1DC0                     __ptext115:	
 16785 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 16786 ;; Defined at:
 16787 ;;		line 290 in file "../src/Dimmer_B1.c"
 16788 ;; Parameters:    Size  Location     Type
 16789 ;;  lights          1    wreg     unsigned char 
 16790 ;;  command         1    2[COMMON] unsigned char 
 16791 ;; Auto vars:     Size  Location     Type
 16792 ;;  lights          1    4[COMMON] unsigned char 
 16793 ;; Return value:  Size  Location     Type
 16794 ;;		None               void
 16795 ;; Registers used:
 16796 ;;		wreg, status,2, status,0
 16797 ;; Tracked objects:
 16798 ;;		On entry : 0/0
 16799 ;;		On exit  : 0/0
 16800 ;;		Unchanged: 0/0
 16801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16802 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16805 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;Total ram usage:        3 bytes
 16807 ;; Hardware stack levels used:    1
 16808 ;; Hardware stack levels required when called:    3
 16809 ;; This function calls:
 16810 ;;		Nothing
 16811 ;; This function is called by:
 16812 ;;		_DimmerLights_AssignationDimming
 16813 ;;		_setDimmerLights_OnOff
 16814 ;;		_setRFSW_AdjControl
 16815 ;; This function uses a non-reentrant model
 16816 ;;
 16817                           
 16818                           
 16819                           ;psect for function _setDimmerIntr_Dimming_RF
 16820  1DC0                     _setDimmerIntr_Dimming_RF:	
 16821                           
 16822                           ;incstack = 0
 16823                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 16824                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 16825  1DC0  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 16826                           
 16827                           ;Dimmer_B1.c: 292: if (lights == 1) {
 16828  1DC1  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16829  1DC2  3A01               	xorlw	1
 16830  1DC3  1D03               	skipz
 16831  1DC4  2DD5               	goto	l7083
 16832                           
 16833                           ;Dimmer_B1.c: 293: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 16834  1DC5  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16835  1DC6  3A01               	xorlw	1
 16836  1DC7  3000               	movlw	0
 16837  1DC8  1903               	skipnz
 16838  1DC9  3001               	movlw	1
 16839  1DCA  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16840  1DCB  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16841  1DCC  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16842  1DCD  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16843  1DCE  0021               	movlb	1	; select bank1
 16844  1DCF  0820               	movf	_DimmerIntr1^(0+128),w
 16845  1DD0  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16846  1DD1  39BF               	andlw	-65
 16847  1DD2  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16848  1DD3  00A0               	movwf	_DimmerIntr1^(0+128)
 16849                           
 16850                           ;Dimmer_B1.c: 294: }
 16851  1DD4  0008               	return
 16852  1DD5                     l7083:	
 16853                           
 16854                           ;Dimmer_B1.c: 297: else if (lights == 2) {
 16855  1DD5  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 16856  1DD6  3A02               	xorlw	2
 16857  1DD7  1D03               	skipz
 16858  1DD8  0008               	return
 16859                           
 16860                           ;Dimmer_B1.c: 298: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 16861  1DD9  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 16862  1DDA  3A01               	xorlw	1
 16863  1DDB  3000               	movlw	0
 16864  1DDC  1903               	skipnz
 16865  1DDD  3001               	movlw	1
 16866  1DDE  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 16867  1DDF  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 16868  1DE0  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16869  1DE1  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 16870  1DE2  0021               	movlb	1	; select bank1
 16871  1DE3  0830               	movf	_DimmerIntr2^(0+128),w
 16872  1DE4  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16873  1DE5  39BF               	andlw	-65
 16874  1DE6  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 16875  1DE7  00B0               	movwf	_DimmerIntr2^(0+128)
 16876  1DE8  0008               	return
 16877  1DE9                     __end_of_setDimmerIntr_Dimming_RF:	
 16878                           
 16879                           	psect	text116
 16880  0C91                     __ptext116:	
 16881 ;; *************** function _DimmerLights_DimmingFunction *****************
 16882 ;; Defined at:
 16883 ;;		line 2127 in file "../src/Dimmer_B1.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;  lights          1    wreg     unsigned char 
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;  lights          1    6[BANK0 ] unsigned char 
 16888 ;; Return value:  Size  Location     Type
 16889 ;;		None               void
 16890 ;; Registers used:
 16891 ;;		wreg, status,2, status,0, pclath, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;Total ram usage:        2 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    6
 16904 ;; This function calls:
 16905 ;;		_DimmerIntr_ValueCalculate
 16906 ;; This function is called by:
 16907 ;;		_DimmerLights_Main
 16908 ;; This function uses a non-reentrant model
 16909 ;;
 16910                           
 16911                           
 16912                           ;psect for function _DimmerLights_DimmingFunction
 16913  0C91                     _DimmerLights_DimmingFunction:	
 16914                           
 16915                           ;incstack = 0
 16916                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 16917                           ;DimmerLights_DimmingFunction@lights stored from wreg
 16918  0C91  0020               	movlb	0	; select bank0
 16919  0C92  00A6               	movwf	DimmerLights_DimmingFunction@lights
 16920                           
 16921                           ;Dimmer_B1.c: 2129: if (lights == 1) {
 16922  0C93  0826               	movf	DimmerLights_DimmingFunction@lights,w
 16923  0C94  3A01               	xorlw	1
 16924  0C95  1D03               	skipz
 16925  0C96  2CE7               	goto	l10511
 16926                           
 16927                           ;Dimmer_B1.c: 2130: if (DimmerIntr1.Tune == 1) {
 16928  0C97  0021               	movlb	1	; select bank1
 16929  0C98  1CA0               	btfss	_DimmerIntr1^(0+128),1
 16930  0C99  2CE7               	goto	l10511
 16931                           
 16932                           ;Dimmer_B1.c: 2131: DimmerIntr1.Tune = 0;
 16933  0C9A  10A0               	bcf	_DimmerIntr1^(0+128),1
 16934                           
 16935                           ;Dimmer_B1.c: 2132: DimmerIntr1.TuneTime++;
 16936  0C9B  3001               	movlw	1
 16937  0C9C  0020               	movlb	0	; select bank0
 16938  0C9D  00A5               	movwf	??_DimmerLights_DimmingFunction
 16939  0C9E  0825               	movf	??_DimmerLights_DimmingFunction,w
 16940  0C9F  0021               	movlb	1	; select bank1
 16941  0CA0  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 16942                           
 16943                           ;Dimmer_B1.c: 2133: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 16944  0CA1  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 16945  0CA2  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 16946  0CA3  1C03               	skipc
 16947  0CA4  2CE7               	goto	l10511
 16948                           
 16949                           ;Dimmer_B1.c: 2134: DimmerIntr1.TuneTime = 0;
 16950  0CA5  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 16951                           
 16952                           ;Dimmer_B1.c: 2135: DimmerIntr1.TuneGO = 1;
 16953  0CA6  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 16954                           
 16955                           ;Dimmer_B1.c: 2136: if (DimmerIntr1.Dimming_Sw == 1) {
 16956  0CA7  1E20               	btfss	_DimmerIntr1^(0+128),4
 16957  0CA8  2CC9               	goto	l1054
 16958                           
 16959                           ;Dimmer_B1.c: 2138: if (DimmerIntr1.Dimming_Status == 0) {
 16960  0CA9  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 16961  0CAA  2CBC               	goto	l10493
 16962                           
 16963                           ;Dimmer_B1.c: 2139: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 16964  0CAB  302A               	movlw	42
 16965  0CAC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 16966  0CAD  1803               	skipnc
 16967  0CAE  2CBA               	goto	l1056
 16968                           
 16969                           ;Dimmer_B1.c: 2140: DimmerIntr1.DimmingValue++;
 16970  0CAF  3001               	movlw	1
 16971  0CB0  0020               	movlb	0	; select bank0
 16972  0CB1  00A5               	movwf	??_DimmerLights_DimmingFunction
 16973  0CB2  0825               	movf	??_DimmerLights_DimmingFunction,w
 16974  0CB3  0021               	movlb	1	; select bank1
 16975  0CB4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 16976                           
 16977                           ;Dimmer_B1.c: 2141: DimmerIntr_ValueCalculate(1);
 16978  0CB5  3001               	movlw	1
 16979  0CB6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 16980                           
 16981                           ;Dimmer_B1.c: 2142: } else {
 16982  0CB9  2CE7               	goto	l10511
 16983  0CBA                     l1056:	
 16984                           
 16985                           ;Dimmer_B1.c: 2143: DimmerIntr1.Dimming_Status = 1;
 16986  0CBA  16A0               	bsf	_DimmerIntr1^(0+128),5
 16987                           
 16988                           ;Dimmer_B1.c: 2144: }
 16989                           ;Dimmer_B1.c: 2145: } else {
 16990  0CBB  2CE7               	goto	l10511
 16991  0CBC                     l10493:	
 16992                           
 16993                           ;Dimmer_B1.c: 2146: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 16994  0CBC  3003               	movlw	3
 16995  0CBD  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 16996  0CBE  1C03               	skipc
 16997  0CBF  2CC7               	goto	l1059
 16998                           
 16999                           ;Dimmer_B1.c: 2147: DimmerIntr1.DimmingValue--;
 17000  0CC0  3001               	movlw	1
 17001  0CC1  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17002                           
 17003                           ;Dimmer_B1.c: 2148: DimmerIntr_ValueCalculate(1);
 17004  0CC2  3001               	movlw	1
 17005  0CC3  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17006                           
 17007                           ;Dimmer_B1.c: 2149: } else {
 17008  0CC6  2CE7               	goto	l10511
 17009  0CC7                     l1059:	
 17010                           
 17011                           ;Dimmer_B1.c: 2150: DimmerIntr1.Dimming_Status = 0;
 17012  0CC7  12A0               	bcf	_DimmerIntr1^(0+128),5
 17013                           
 17014                           ;Dimmer_B1.c: 2151: }
 17015                           ;Dimmer_B1.c: 2152: }
 17016                           ;Dimmer_B1.c: 2171: } else if (DimmerIntr1.Dimming_RF == 1) {
 17017  0CC8  2CE7               	goto	l10511
 17018  0CC9                     l1054:	
 17019  0CC9  1F20               	btfss	_DimmerIntr1^(0+128),6
 17020  0CCA  2CE7               	goto	l10511
 17021                           
 17022                           ;Dimmer_B1.c: 2173: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17023  0CCB  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 17024  0CCC  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 17025  0CCD  1803               	skipnc
 17026  0CCE  2CDA               	goto	l10505
 17027                           
 17028                           ;Dimmer_B1.c: 2174: DimmerIntr1.DimmingValue++;
 17029  0CCF  3001               	movlw	1
 17030  0CD0  0020               	movlb	0	; select bank0
 17031  0CD1  00A5               	movwf	??_DimmerLights_DimmingFunction
 17032  0CD2  0825               	movf	??_DimmerLights_DimmingFunction,w
 17033  0CD3  0021               	movlb	1	; select bank1
 17034  0CD4  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 17035                           
 17036                           ;Dimmer_B1.c: 2175: DimmerIntr_ValueCalculate(1);
 17037  0CD5  3001               	movlw	1
 17038  0CD6  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17039                           
 17040                           ;Dimmer_B1.c: 2176: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17041  0CD9  2CE7               	goto	l10511
 17042  0CDA                     l10505:	
 17043  0CDA  0021               	movlb	1	; select bank1
 17044  0CDB  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17045  0CDC  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 17046  0CDD  1803               	skipnc
 17047  0CDE  2CE6               	goto	l1065
 17048                           
 17049                           ;Dimmer_B1.c: 2177: DimmerIntr1.DimmingValue--;
 17050  0CDF  3001               	movlw	1
 17051  0CE0  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 17052                           
 17053                           ;Dimmer_B1.c: 2178: DimmerIntr_ValueCalculate(1);
 17054  0CE1  3001               	movlw	1
 17055  0CE2  3194  243B  318C   	fcall	_DimmerIntr_ValueCalculate
 17056                           
 17057                           ;Dimmer_B1.c: 2179: } else {
 17058  0CE5  2CE7               	goto	l10511
 17059  0CE6                     l1065:	
 17060                           
 17061                           ;Dimmer_B1.c: 2180: DimmerIntr1.Dimming_RF = 0;
 17062  0CE6  1320               	bcf	_DimmerIntr1^(0+128),6
 17063  0CE7                     l10511:	
 17064                           
 17065                           ;Dimmer_B1.c: 2181: }
 17066                           ;Dimmer_B1.c: 2194: }
 17067                           ;Dimmer_B1.c: 2195: }
 17068                           ;Dimmer_B1.c: 2196: }
 17069                           ;Dimmer_B1.c: 2197: }
 17070                           ;Dimmer_B1.c: 2201: if (lights == 2) {
 17071  0CE7  0020               	movlb	0	; select bank0
 17072  0CE8  0826               	movf	DimmerLights_DimmingFunction@lights,w
 17073  0CE9  3A02               	xorlw	2
 17074  0CEA  1D03               	skipz
 17075  0CEB  0008               	return
 17076                           
 17077                           ;Dimmer_B1.c: 2202: if (DimmerIntr2.Tune == 1) {
 17078  0CEC  0021               	movlb	1	; select bank1
 17079  0CED  1CB0               	btfss	_DimmerIntr2^(0+128),1
 17080  0CEE  0008               	return
 17081                           
 17082                           ;Dimmer_B1.c: 2203: DimmerIntr2.Tune = 0;
 17083  0CEF  10B0               	bcf	_DimmerIntr2^(0+128),1
 17084                           
 17085                           ;Dimmer_B1.c: 2204: DimmerIntr2.TuneTime++;
 17086  0CF0  3001               	movlw	1
 17087  0CF1  0020               	movlb	0	; select bank0
 17088  0CF2  00A5               	movwf	??_DimmerLights_DimmingFunction
 17089  0CF3  0825               	movf	??_DimmerLights_DimmingFunction,w
 17090  0CF4  0021               	movlb	1	; select bank1
 17091  0CF5  07B3               	addwf	(_DimmerIntr2^(0+128)+3),f
 17092                           
 17093                           ;Dimmer_B1.c: 2205: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17094  0CF6  0834               	movf	(_DimmerIntr2^(0+128)+4),w
 17095  0CF7  0233               	subwf	(_DimmerIntr2^(0+128)+3),w
 17096  0CF8  1C03               	skipc
 17097  0CF9  0008               	return
 17098                           
 17099                           ;Dimmer_B1.c: 2206: DimmerIntr2.TuneTime = 0;
 17100  0CFA  01B3               	clrf	(_DimmerIntr2^(0+128)+3)
 17101                           
 17102                           ;Dimmer_B1.c: 2207: DimmerIntr2.TuneGO = 1;
 17103  0CFB  1731               	bsf	(_DimmerIntr2^(0+128)+1),6
 17104                           
 17105                           ;Dimmer_B1.c: 2208: if (DimmerIntr2.Dimming_Sw == 1) {
 17106  0CFC  1E30               	btfss	_DimmerIntr2^(0+128),4
 17107  0CFD  2D1C               	goto	l1070
 17108                           
 17109                           ;Dimmer_B1.c: 2210: if (DimmerIntr2.Dimming_Status == 0) {
 17110  0CFE  1AB0               	btfsc	_DimmerIntr2^(0+128),5
 17111  0CFF  2D10               	goto	l10535
 17112                           
 17113                           ;Dimmer_B1.c: 2211: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17114  0D00  302A               	movlw	42
 17115  0D01  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17116  0D02  1803               	skipnc
 17117  0D03  2D0E               	goto	l1072
 17118                           
 17119                           ;Dimmer_B1.c: 2212: DimmerIntr2.DimmingValue++;
 17120  0D04  3001               	movlw	1
 17121  0D05  0020               	movlb	0	; select bank0
 17122  0D06  00A5               	movwf	??_DimmerLights_DimmingFunction
 17123  0D07  0825               	movf	??_DimmerLights_DimmingFunction,w
 17124  0D08  0021               	movlb	1	; select bank1
 17125  0D09  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17126                           
 17127                           ;Dimmer_B1.c: 2213: DimmerIntr_ValueCalculate(2);
 17128  0D0A  3002               	movlw	2
 17129  0D0B  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17130                           
 17131                           ;Dimmer_B1.c: 2214: } else {
 17132  0D0D  0008               	return
 17133  0D0E                     l1072:	
 17134                           
 17135                           ;Dimmer_B1.c: 2215: DimmerIntr2.Dimming_Status = 1;
 17136  0D0E  16B0               	bsf	_DimmerIntr2^(0+128),5
 17137                           
 17138                           ;Dimmer_B1.c: 2216: }
 17139                           ;Dimmer_B1.c: 2217: } else {
 17140  0D0F  0008               	return
 17141  0D10                     l10535:	
 17142                           
 17143                           ;Dimmer_B1.c: 2218: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17144  0D10  3003               	movlw	3
 17145  0D11  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17146  0D12  1C03               	skipc
 17147  0D13  2D1A               	goto	l1075
 17148                           
 17149                           ;Dimmer_B1.c: 2219: DimmerIntr2.DimmingValue--;
 17150  0D14  3001               	movlw	1
 17151  0D15  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17152                           
 17153                           ;Dimmer_B1.c: 2220: DimmerIntr_ValueCalculate(2);
 17154  0D16  3002               	movlw	2
 17155  0D17  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17156                           
 17157                           ;Dimmer_B1.c: 2221: } else {
 17158  0D19  0008               	return
 17159  0D1A                     l1075:	
 17160                           
 17161                           ;Dimmer_B1.c: 2222: DimmerIntr2.Dimming_Status = 0;
 17162  0D1A  12B0               	bcf	_DimmerIntr2^(0+128),5
 17163                           
 17164                           ;Dimmer_B1.c: 2223: }
 17165                           ;Dimmer_B1.c: 2224: }
 17166                           ;Dimmer_B1.c: 2243: } else if (DimmerIntr2.Dimming_RF == 1) {
 17167  0D1B  0008               	return
 17168  0D1C                     l1070:	
 17169  0D1C  1F30               	btfss	_DimmerIntr2^(0+128),6
 17170  0D1D  0008               	return
 17171                           
 17172                           ;Dimmer_B1.c: 2245: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17173  0D1E  0836               	movf	(_DimmerIntr2^(0+128)+6),w
 17174  0D1F  0235               	subwf	(_DimmerIntr2^(0+128)+5),w
 17175  0D20  1803               	skipnc
 17176  0D21  2D2C               	goto	l10547
 17177                           
 17178                           ;Dimmer_B1.c: 2246: DimmerIntr2.DimmingValue++;
 17179  0D22  3001               	movlw	1
 17180  0D23  0020               	movlb	0	; select bank0
 17181  0D24  00A5               	movwf	??_DimmerLights_DimmingFunction
 17182  0D25  0825               	movf	??_DimmerLights_DimmingFunction,w
 17183  0D26  0021               	movlb	1	; select bank1
 17184  0D27  07B5               	addwf	(_DimmerIntr2^(0+128)+5),f
 17185                           
 17186                           ;Dimmer_B1.c: 2247: DimmerIntr_ValueCalculate(2);
 17187  0D28  3002               	movlw	2
 17188  0D29  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17189                           
 17190                           ;Dimmer_B1.c: 2248: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17191  0D2B  0008               	return
 17192  0D2C                     l10547:	
 17193  0D2C  0021               	movlb	1	; select bank1
 17194  0D2D  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17195  0D2E  0236               	subwf	(_DimmerIntr2^(0+128)+6),w
 17196  0D2F  1803               	skipnc
 17197  0D30  2D37               	goto	l1081
 17198                           
 17199                           ;Dimmer_B1.c: 2249: DimmerIntr2.DimmingValue--;
 17200  0D31  3001               	movlw	1
 17201  0D32  02B5               	subwf	(_DimmerIntr2^(0+128)+5),f
 17202                           
 17203                           ;Dimmer_B1.c: 2250: DimmerIntr_ValueCalculate(2);
 17204  0D33  3002               	movlw	2
 17205  0D34  3194  243B         	fcall	_DimmerIntr_ValueCalculate
 17206                           
 17207                           ;Dimmer_B1.c: 2251: } else {
 17208  0D36  0008               	return
 17209  0D37                     l1081:	
 17210                           
 17211                           ;Dimmer_B1.c: 2252: DimmerIntr2.Dimming_RF = 0;
 17212  0D37  1330               	bcf	_DimmerIntr2^(0+128),6
 17213  0D38  0008               	return
 17214  0D39                     __end_of_DimmerLights_DimmingFunction:	
 17215                           
 17216                           	psect	text117
 17217  143B                     __ptext117:	
 17218 ;; *************** function _DimmerIntr_ValueCalculate *****************
 17219 ;; Defined at:
 17220 ;;		line 2058 in file "../src/Dimmer_B1.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;  lights          1    wreg     unsigned char 
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;  lights          1    4[BANK0 ] unsigned char 
 17225 ;; Return value:  Size  Location     Type
 17226 ;;		None               void
 17227 ;; Registers used:
 17228 ;;		wreg, status,2, status,0, pclath, cstack
 17229 ;; Tracked objects:
 17230 ;;		On entry : 0/0
 17231 ;;		On exit  : 0/0
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17237 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17238 ;;Total ram usage:        3 bytes
 17239 ;; Hardware stack levels used:    1
 17240 ;; Hardware stack levels required when called:    5
 17241 ;; This function calls:
 17242 ;;		_Division
 17243 ;; This function is called by:
 17244 ;;		_setDimmerLights_OnOff
 17245 ;;		_DimmerLights_DimmingFunction
 17246 ;; This function uses a non-reentrant model
 17247 ;;
 17248                           
 17249                           
 17250                           ;psect for function _DimmerIntr_ValueCalculate
 17251  143B                     _DimmerIntr_ValueCalculate:	
 17252                           
 17253                           ;incstack = 0
 17254                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg+status,2+status,0+pclath+cstack]
 17255                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 17256  143B  0020               	movlb	0	; select bank0
 17257  143C  00A4               	movwf	DimmerIntr_ValueCalculate@lights
 17258                           
 17259                           ;Dimmer_B1.c: 2060: if (lights == 1) {
 17260  143D  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17261  143E  3A01               	xorlw	1
 17262  143F  1D03               	skipz
 17263  1440  2C67               	goto	l10005
 17264                           
 17265                           ;Dimmer_B1.c: 2071: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 17266  1441  3002               	movlw	2
 17267  1442  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17268  1443  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17269  1444  00F7               	movwf	Division@num
 17270  1445  0021               	movlb	1	; select bank1
 17271  1446  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 17272  1447  3199  213B  3194   	fcall	_Division
 17273  144A  0020               	movlb	0	; select bank0
 17274  144B  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17275  144C  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17276  144D  0021               	movlb	1	; select bank1
 17277  144E  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17278                           
 17279                           ;Dimmer_B1.c: 2072: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 17280  144F  0325               	decf	(_DimmerIntr1^(0+128)+5),w
 17281  1450  3AFF               	xorlw	255
 17282  1451  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17283  1452  3E37               	addlw	55
 17284  1453  0020               	movlb	0	; select bank0
 17285  1454  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17286  1455  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17287  1456  0021               	movlb	1	; select bank1
 17288  1457  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17289                           
 17290                           ;Dimmer_B1.c: 2073: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 17291  1458  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17292  1459  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17293  145A  0020               	movlb	0	; select bank0
 17294  145B  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17295  145C  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17296  145D  0021               	movlb	1	; select bank1
 17297  145E  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17298                           
 17299                           ;Dimmer_B1.c: 2074: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 17300  145F  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17301  1460  3E05               	addlw	5
 17302  1461  0020               	movlb	0	; select bank0
 17303  1462  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17304  1463  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17305  1464  0021               	movlb	1	; select bank1
 17306  1465  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17307                           
 17308                           ;Dimmer_B1.c: 2076: DimmerIntr1.Calculate = 1;
 17309  1466  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17310  1467                     l10005:	
 17311                           
 17312                           ;Dimmer_B1.c: 2078: }
 17313                           ;Dimmer_B1.c: 2083: if (lights == 2) {
 17314  1467  0020               	movlb	0	; select bank0
 17315  1468  0824               	movf	DimmerIntr_ValueCalculate@lights,w
 17316  1469  3A02               	xorlw	2
 17317  146A  1D03               	skipz
 17318  146B  0008               	return
 17319                           
 17320                           ;Dimmer_B1.c: 2094: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 17321  146C  3002               	movlw	2
 17322  146D  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17323  146E  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17324  146F  00F7               	movwf	Division@num
 17325  1470  0021               	movlb	1	; select bank1
 17326  1471  0835               	movf	(_DimmerIntr2^(0+128)+5),w
 17327  1472  3199  213B         	fcall	_Division
 17328  1474  0020               	movlb	0	; select bank0
 17329  1475  00A3               	movwf	??_DimmerIntr_ValueCalculate+1
 17330  1476  0823               	movf	??_DimmerIntr_ValueCalculate+1,w
 17331  1477  0021               	movlb	1	; select bank1
 17332  1478  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17333                           
 17334                           ;Dimmer_B1.c: 2095: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 17335  1479  0335               	decf	(_DimmerIntr2^(0+128)+5),w
 17336  147A  3AFF               	xorlw	255
 17337  147B  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17338  147C  3E37               	addlw	55
 17339  147D  0020               	movlb	0	; select bank0
 17340  147E  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17341  147F  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17342  1480  0021               	movlb	1	; select bank1
 17343  1481  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17344                           
 17345                           ;Dimmer_B1.c: 2096: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 17346  1482  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17347  1483  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17348  1484  0020               	movlb	0	; select bank0
 17349  1485  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17350  1486  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17351  1487  0021               	movlb	1	; select bank1
 17352  1488  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17353                           
 17354                           ;Dimmer_B1.c: 2097: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 17355  1489  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17356  148A  3E05               	addlw	5
 17357  148B  0020               	movlb	0	; select bank0
 17358  148C  00A2               	movwf	??_DimmerIntr_ValueCalculate
 17359  148D  0822               	movf	??_DimmerIntr_ValueCalculate,w
 17360  148E  0021               	movlb	1	; select bank1
 17361  148F  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17362                           
 17363                           ;Dimmer_B1.c: 2099: DimmerIntr2.Calculate = 1;
 17364  1490  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17365  1491  0008               	return
 17366  1492                     __end_of_DimmerIntr_ValueCalculate:	
 17367                           
 17368                           	psect	text118
 17369  188E                     __ptext118:	
 17370 ;; *************** function _DimmerLights_Initialization *****************
 17371 ;; Defined at:
 17372 ;;		line 703 in file "../src/Dimmer_B1.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;		None
 17375 ;; Auto vars:     Size  Location     Type
 17376 ;;		None
 17377 ;; Return value:  Size  Location     Type
 17378 ;;		None               void
 17379 ;; Registers used:
 17380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17381 ;; Tracked objects:
 17382 ;;		On entry : 0/0
 17383 ;;		On exit  : 0/0
 17384 ;;		Unchanged: 0/0
 17385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;Total ram usage:        0 bytes
 17391 ;; Hardware stack levels used:    1
 17392 ;; Hardware stack levels required when called:    7
 17393 ;; This function calls:
 17394 ;;		_DimmerIntr_Initialization
 17395 ;;		_setDimmerLights_Initialization
 17396 ;; This function is called by:
 17397 ;;		_main
 17398 ;; This function uses a non-reentrant model
 17399 ;;
 17400                           
 17401                           
 17402                           ;psect for function _DimmerLights_Initialization
 17403  188E                     _DimmerLights_Initialization:	
 17404                           
 17405                           ;Dimmer_B1.c: 705: setDimmerLights_Initialization(1);
 17406                           
 17407                           ;incstack = 0
 17408                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17409  188E  3001               	movlw	1
 17410  188F  31A7  27D8  3198   	fcall	_setDimmerLights_Initialization
 17411                           
 17412                           ;Dimmer_B1.c: 709: setDimmerLights_Initialization(2);
 17413  1892  3002               	movlw	2
 17414  1893  31A7  27D8  3198   	fcall	_setDimmerLights_Initialization
 17415                           
 17416                           ;Dimmer_B1.c: 715: DimmerIntr_Initialization();
 17417  1896  318D  25E2         	fcall	_DimmerIntr_Initialization
 17418  1898  0008               	return
 17419  1899                     __end_of_DimmerLights_Initialization:	
 17420                           
 17421                           	psect	text119
 17422  27D8                     __ptext119:	
 17423 ;; *************** function _setDimmerLights_Initialization *****************
 17424 ;; Defined at:
 17425 ;;		line 719 in file "../src/Dimmer_B1.c"
 17426 ;; Parameters:    Size  Location     Type
 17427 ;;  lights          1    wreg     unsigned char 
 17428 ;; Auto vars:     Size  Location     Type
 17429 ;;  lights          1    0[COMMON] unsigned char 
 17430 ;; Return value:  Size  Location     Type
 17431 ;;		None               void
 17432 ;; Registers used:
 17433 ;;		wreg
 17434 ;; Tracked objects:
 17435 ;;		On entry : 0/0
 17436 ;;		On exit  : 0/0
 17437 ;;		Unchanged: 0/0
 17438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17443 ;;Total ram usage:        0 bytes
 17444 ;; Hardware stack levels used:    1
 17445 ;; Hardware stack levels required when called:    3
 17446 ;; This function calls:
 17447 ;;		Nothing
 17448 ;; This function is called by:
 17449 ;;		_DimmerLights_Initialization
 17450 ;; This function uses a non-reentrant model
 17451 ;;
 17452                           
 17453                           
 17454                           ;psect for function _setDimmerLights_Initialization
 17455  27D8                     _setDimmerLights_Initialization:	
 17456                           
 17457                           ;incstack = 0
 17458                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17459  27D8  0008               	return
 17460  27D9                     __end_of_setDimmerLights_Initialization:	
 17461                           
 17462                           	psect	text120
 17463  0DE2                     __ptext120:	
 17464 ;; *************** function _DimmerIntr_Initialization *****************
 17465 ;; Defined at:
 17466 ;;		line 7 in file "../src/Dimmer_B1.c"
 17467 ;; Parameters:    Size  Location     Type
 17468 ;;		None
 17469 ;; Auto vars:     Size  Location     Type
 17470 ;;		None
 17471 ;; Return value:  Size  Location     Type
 17472 ;;		None               void
 17473 ;; Registers used:
 17474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17475 ;; Tracked objects:
 17476 ;;		On entry : 0/0
 17477 ;;		On exit  : 0/0
 17478 ;;		Unchanged: 0/0
 17479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;Total ram usage:        2 bytes
 17485 ;; Hardware stack levels used:    1
 17486 ;; Hardware stack levels required when called:    6
 17487 ;; This function calls:
 17488 ;;		_Division
 17489 ;;		_getDimmerLights_PercentToValue
 17490 ;;		_getDimmerLights_ValueToPercent
 17491 ;;		_setMemory_Modify
 17492 ;; This function is called by:
 17493 ;;		_DimmerLights_Initialization
 17494 ;; This function uses a non-reentrant model
 17495 ;;
 17496                           
 17497                           
 17498                           ;psect for function _DimmerIntr_Initialization
 17499  0DE2                     _DimmerIntr_Initialization:	
 17500                           
 17501                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17502                           
 17503                           ;incstack = 0
 17504                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17505  0DE2  3003               	movlw	3
 17506  0DE3  0020               	movlb	0	; select bank0
 17507  0DE4  00DA               	movwf	??_DimmerIntr_Initialization
 17508  0DE5  085A               	movf	??_DimmerIntr_Initialization,w
 17509  0DE6  0021               	movlb	1	; select bank1
 17510  0DE7  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 17511                           
 17512                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17513  0DE8  302A               	movlw	42
 17514  0DE9  0020               	movlb	0	; select bank0
 17515  0DEA  00DA               	movwf	??_DimmerIntr_Initialization
 17516  0DEB  085A               	movf	??_DimmerIntr_Initialization,w
 17517  0DEC  0021               	movlb	1	; select bank1
 17518  0DED  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 17519                           
 17520                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17521  0DEE  3002               	movlw	2
 17522  0DEF  0020               	movlb	0	; select bank0
 17523  0DF0  00DA               	movwf	??_DimmerIntr_Initialization
 17524  0DF1  085A               	movf	??_DimmerIntr_Initialization,w
 17525  0DF2  0021               	movlb	1	; select bank1
 17526  0DF3  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 17527                           
 17528                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17529  0DF4  10A0               	bcf	_DimmerIntr1^(0+128),1
 17530                           
 17531                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17532  0DF5  302A               	movlw	42
 17533  0DF6  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17534  0DF9  0020               	movlb	0	; select bank0
 17535  0DFA  00DA               	movwf	??_DimmerIntr_Initialization
 17536  0DFB  087B               	movf	_product,w
 17537  0DFC  3E15               	addlw	21
 17538  0DFD  0086               	movwf	6
 17539  0DFE  3002               	movlw	2	; select bank4/5
 17540  0DFF  0087               	movwf	7
 17541  0E00  085A               	movf	??_DimmerIntr_Initialization,w
 17542  0E01  0081               	movwf	1
 17543                           
 17544                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17545  0E02  087B               	movf	_product,w
 17546  0E03  3E15               	addlw	21
 17547  0E04  0086               	movwf	6
 17548  0E05  3002               	movlw	2	; select bank4/5
 17549  0E06  0087               	movwf	7
 17550  0E07  0801               	movf	1,w
 17551  0E08  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17552  0E0B  0020               	movlb	0	; select bank0
 17553  0E0C  00DA               	movwf	??_DimmerIntr_Initialization
 17554  0E0D  085A               	movf	??_DimmerIntr_Initialization,w
 17555  0E0E  0021               	movlb	1	; select bank1
 17556  0E0F  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 17557                           
 17558                           ;Dimmer_B1.c: 38: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17559  0E10  3002               	movlw	2
 17560  0E11  0020               	movlb	0	; select bank0
 17561  0E12  00DA               	movwf	??_DimmerIntr_Initialization
 17562  0E13  085A               	movf	??_DimmerIntr_Initialization,w
 17563  0E14  00F7               	movwf	Division@num
 17564  0E15  302A               	movlw	42
 17565  0E16  3199  213B  318D   	fcall	_Division
 17566  0E19  0020               	movlb	0	; select bank0
 17567  0E1A  00DB               	movwf	??_DimmerIntr_Initialization+1
 17568  0E1B  085B               	movf	??_DimmerIntr_Initialization+1,w
 17569  0E1C  0021               	movlb	1	; select bank1
 17570  0E1D  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 17571                           
 17572                           ;Dimmer_B1.c: 39: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17573  0E1E  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17574  0E1F  3E0D               	addlw	13
 17575  0E20  0020               	movlb	0	; select bank0
 17576  0E21  00DA               	movwf	??_DimmerIntr_Initialization
 17577  0E22  085A               	movf	??_DimmerIntr_Initialization,w
 17578  0E23  0021               	movlb	1	; select bank1
 17579  0E24  00A9               	movwf	(_DimmerIntr1^(0+128)+9)
 17580                           
 17581                           ;Dimmer_B1.c: 40: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17582  0E25  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 17583  0E26  0728               	addwf	(_DimmerIntr1^(0+128)+8),w
 17584  0E27  0020               	movlb	0	; select bank0
 17585  0E28  00DA               	movwf	??_DimmerIntr_Initialization
 17586  0E29  085A               	movf	??_DimmerIntr_Initialization,w
 17587  0E2A  0021               	movlb	1	; select bank1
 17588  0E2B  00AA               	movwf	(_DimmerIntr1^(0+128)+10)
 17589                           
 17590                           ;Dimmer_B1.c: 41: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17591  0E2C  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 17592  0E2D  3E01               	addlw	1
 17593  0E2E  0020               	movlb	0	; select bank0
 17594  0E2F  00DA               	movwf	??_DimmerIntr_Initialization
 17595  0E30  085A               	movf	??_DimmerIntr_Initialization,w
 17596  0E31  0021               	movlb	1	; select bank1
 17597  0E32  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 17598                           
 17599                           ;Dimmer_B1.c: 42: DimmerIntr1.Calculate = 1;
 17600  0E33  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 17601                           
 17602                           ;Dimmer_B1.c: 51: DimmerIntr2.TuneTimeValue = 3;
 17603  0E34  3003               	movlw	3
 17604  0E35  0020               	movlb	0	; select bank0
 17605  0E36  00DA               	movwf	??_DimmerIntr_Initialization
 17606  0E37  085A               	movf	??_DimmerIntr_Initialization,w
 17607  0E38  0021               	movlb	1	; select bank1
 17608  0E39  00B4               	movwf	(_DimmerIntr2^(0+128)+4)
 17609                           
 17610                           ;Dimmer_B1.c: 52: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17611  0E3A  302A               	movlw	42
 17612  0E3B  0020               	movlb	0	; select bank0
 17613  0E3C  00DA               	movwf	??_DimmerIntr_Initialization
 17614  0E3D  085A               	movf	??_DimmerIntr_Initialization,w
 17615  0E3E  0021               	movlb	1	; select bank1
 17616  0E3F  00B6               	movwf	(_DimmerIntr2^(0+128)+6)
 17617                           
 17618                           ;Dimmer_B1.c: 53: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17619  0E40  3002               	movlw	2
 17620  0E41  0020               	movlb	0	; select bank0
 17621  0E42  00DA               	movwf	??_DimmerIntr_Initialization
 17622  0E43  085A               	movf	??_DimmerIntr_Initialization,w
 17623  0E44  0021               	movlb	1	; select bank1
 17624  0E45  00B7               	movwf	(_DimmerIntr2^(0+128)+7)
 17625                           
 17626                           ;Dimmer_B1.c: 54: DimmerIntr2.Tune = 0;
 17627  0E46  10B0               	bcf	_DimmerIntr2^(0+128),1
 17628                           
 17629                           ;Dimmer_B1.c: 59: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17630  0E47  302A               	movlw	42
 17631  0E48  3197  2736  318D   	fcall	_getDimmerLights_ValueToPercent
 17632  0E4B  0020               	movlb	0	; select bank0
 17633  0E4C  00DA               	movwf	??_DimmerIntr_Initialization
 17634  0E4D  087B               	movf	_product,w
 17635  0E4E  3E16               	addlw	22
 17636  0E4F  0086               	movwf	6
 17637  0E50  3002               	movlw	2	; select bank4/5
 17638  0E51  0087               	movwf	7
 17639  0E52  085A               	movf	??_DimmerIntr_Initialization,w
 17640  0E53  0081               	movwf	1
 17641                           
 17642                           ;Dimmer_B1.c: 62: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17643  0E54  087B               	movf	_product,w
 17644  0E55  3E16               	addlw	22
 17645  0E56  0086               	movwf	6
 17646  0E57  3002               	movlw	2	; select bank4/5
 17647  0E58  0087               	movwf	7
 17648  0E59  0801               	movf	1,w
 17649  0E5A  3196  26D1  318D   	fcall	_getDimmerLights_PercentToValue
 17650  0E5D  0020               	movlb	0	; select bank0
 17651  0E5E  00DA               	movwf	??_DimmerIntr_Initialization
 17652  0E5F  085A               	movf	??_DimmerIntr_Initialization,w
 17653  0E60  0021               	movlb	1	; select bank1
 17654  0E61  00B5               	movwf	(_DimmerIntr2^(0+128)+5)
 17655                           
 17656                           ;Dimmer_B1.c: 77: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17657  0E62  3002               	movlw	2
 17658  0E63  0020               	movlb	0	; select bank0
 17659  0E64  00DA               	movwf	??_DimmerIntr_Initialization
 17660  0E65  085A               	movf	??_DimmerIntr_Initialization,w
 17661  0E66  00F7               	movwf	Division@num
 17662  0E67  302A               	movlw	42
 17663  0E68  3199  213B  318D   	fcall	_Division
 17664  0E6B  0020               	movlb	0	; select bank0
 17665  0E6C  00DB               	movwf	??_DimmerIntr_Initialization+1
 17666  0E6D  085B               	movf	??_DimmerIntr_Initialization+1,w
 17667  0E6E  0021               	movlb	1	; select bank1
 17668  0E6F  00B8               	movwf	(_DimmerIntr2^(0+128)+8)
 17669                           
 17670                           ;Dimmer_B1.c: 78: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17671  0E70  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 17672  0E71  3E0D               	addlw	13
 17673  0E72  0020               	movlb	0	; select bank0
 17674  0E73  00DA               	movwf	??_DimmerIntr_Initialization
 17675  0E74  085A               	movf	??_DimmerIntr_Initialization,w
 17676  0E75  0021               	movlb	1	; select bank1
 17677  0E76  00B9               	movwf	(_DimmerIntr2^(0+128)+9)
 17678                           
 17679                           ;Dimmer_B1.c: 79: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17680  0E77  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 17681  0E78  0738               	addwf	(_DimmerIntr2^(0+128)+8),w
 17682  0E79  0020               	movlb	0	; select bank0
 17683  0E7A  00DA               	movwf	??_DimmerIntr_Initialization
 17684  0E7B  085A               	movf	??_DimmerIntr_Initialization,w
 17685  0E7C  0021               	movlb	1	; select bank1
 17686  0E7D  00BA               	movwf	(_DimmerIntr2^(0+128)+10)
 17687                           
 17688                           ;Dimmer_B1.c: 80: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17689  0E7E  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 17690  0E7F  3E01               	addlw	1
 17691  0E80  0020               	movlb	0	; select bank0
 17692  0E81  00DA               	movwf	??_DimmerIntr_Initialization
 17693  0E82  085A               	movf	??_DimmerIntr_Initialization,w
 17694  0E83  0021               	movlb	1	; select bank1
 17695  0E84  00BB               	movwf	(_DimmerIntr2^(0+128)+11)
 17696                           
 17697                           ;Dimmer_B1.c: 81: DimmerIntr2.Calculate = 1;
 17698  0E85  17B1               	bsf	(_DimmerIntr2^(0+128)+1),7
 17699                           
 17700                           ;Dimmer_B1.c: 111: if (myMain.InitDimmer == 1) {
 17701  0E86  1E59               	btfss	(_myMain^(0+128)+10),4
 17702  0E87  0008               	return
 17703                           
 17704                           ;Dimmer_B1.c: 112: myMain.InitDimmer = 0;
 17705  0E88  1259               	bcf	(_myMain^(0+128)+10),4
 17706                           
 17707                           ;Dimmer_B1.c: 113: myMain.SaveDimmer = 1;
 17708  0E89  16D9               	bsf	(_myMain^(0+128)+10),5
 17709                           
 17710                           ;Dimmer_B1.c: 114: setMemory_Modify(1);
 17711  0E8A  3001               	movlw	1
 17712  0E8B  3199  2177         	fcall	_setMemory_Modify
 17713  0E8D  0008               	return
 17714  0E8E                     __end_of_DimmerIntr_Initialization:	
 17715                           
 17716                           	psect	text121
 17717  1977                     __ptext121:	
 17718 ;; *************** function _setMemory_Modify *****************
 17719 ;; Defined at:
 17720 ;;		line 1088 in file "../src/MCU_B1.c"
 17721 ;; Parameters:    Size  Location     Type
 17722 ;;  command         1    wreg     unsigned char 
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;  command         1    3[COMMON] unsigned char 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;		None               void
 17727 ;; Registers used:
 17728 ;;		wreg, status,2, status,0
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;Total ram usage:        2 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    3
 17741 ;; This function calls:
 17742 ;;		Nothing
 17743 ;; This function is called by:
 17744 ;;		_DimmerIntr_Initialization
 17745 ;;		_DimmerLights_AssignationDimming
 17746 ;;		_setDimmerLights_Dimming
 17747 ;;		_setLog_Code
 17748 ;;		_setRFSW_AdjControl
 17749 ;; This function uses a non-reentrant model
 17750 ;;
 17751                           
 17752                           
 17753                           ;psect for function _setMemory_Modify
 17754  1977                     _setMemory_Modify:	
 17755                           
 17756                           ;incstack = 0
 17757                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 17758                           ;setMemory_Modify@command stored from wreg
 17759  1977  00F3               	movwf	setMemory_Modify@command
 17760                           
 17761                           ;MCU_B1.c: 1089: Memory.Modify = command == 1 ? 1 : 0;
 17762  1978  0873               	movf	setMemory_Modify@command,w
 17763  1979  3A01               	xorlw	1
 17764  197A  3000               	movlw	0
 17765  197B  1903               	skipnz
 17766  197C  3001               	movlw	1
 17767  197D  00F2               	movwf	??_setMemory_Modify
 17768  197E  0024               	movlb	4	; select bank4
 17769  197F  0854               	movf	(_Memory^(0+512)+36),w
 17770  1980  0672               	xorwf	??_setMemory_Modify,w
 17771  1981  39FE               	andlw	-2
 17772  1982  0672               	xorwf	??_setMemory_Modify,w
 17773  1983  00D4               	movwf	(_Memory^(0+512)+36)
 17774                           
 17775                           ;MCU_B1.c: 1090: Memory.Time = 0;
 17776  1984  01D2               	clrf	(_Memory^(0+512)+34)
 17777  1985  01D3               	clrf	((_Memory+1)^(0+512)+34)
 17778  1986  0008               	return
 17779  1987                     __end_of_setMemory_Modify:	
 17780                           
 17781                           	psect	text122
 17782  1736                     __ptext122:	
 17783 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17784 ;; Defined at:
 17785 ;;		line 1315 in file "../src/Dimmer_B1.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;  value           1    wreg     unsigned char 
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;  value           1   54[BANK0 ] unsigned char 
 17790 ;;  i               3   55[BANK0 ] float 
 17791 ;; Return value:  Size  Location     Type
 17792 ;;                  1    wreg      unsigned char 
 17793 ;; Registers used:
 17794 ;;		wreg, status,2, status,0, pclath, cstack
 17795 ;; Tracked objects:
 17796 ;;		On entry : 0/0
 17797 ;;		On exit  : 0/0
 17798 ;;		Unchanged: 0/0
 17799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17803 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;Total ram usage:        6 bytes
 17805 ;; Hardware stack levels used:    1
 17806 ;; Hardware stack levels required when called:    5
 17807 ;; This function calls:
 17808 ;;		___awtoft
 17809 ;;		___ftadd
 17810 ;;		___ftdiv
 17811 ;;		___ftneg
 17812 ;;		___fttol
 17813 ;; This function is called by:
 17814 ;;		_DimmerIntr_Initialization
 17815 ;;		_setDimmerLights_Dimming
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           
 17820                           ;psect for function _getDimmerLights_ValueToPercent
 17821  1736                     _getDimmerLights_ValueToPercent:	
 17822                           
 17823                           ;incstack = 0
 17824                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17825                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17826  1736  0020               	movlb	0	; select bank0
 17827  1737  00D6               	movwf	getDimmerLights_ValueToPercent@value
 17828                           
 17829                           ;Dimmer_B1.c: 1323: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17830  1738  3000               	movlw	0
 17831  1739  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17832  173A  3020               	movlw	32
 17833  173B  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17834  173C  3042               	movlw	66
 17835  173D  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17836                           
 17837                           ;Dimmer_B1.c: 1324: i /= 100;
 17838  173E  3000               	movlw	0
 17839  173F  00A6               	movwf	___ftdiv@f2
 17840  1740  30C8               	movlw	200
 17841  1741  00A7               	movwf	___ftdiv@f2+1
 17842  1742  3042               	movlw	66
 17843  1743  00A8               	movwf	___ftdiv@f2+2
 17844  1744  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17845  1745  00A9               	movwf	___ftdiv@f1
 17846  1746  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17847  1747  00AA               	movwf	___ftdiv@f1+1
 17848  1748  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17849  1749  00AB               	movwf	___ftdiv@f1+2
 17850  174A  318D  2539  3197   	fcall	___ftdiv
 17851  174D  0020               	movlb	0	; select bank0
 17852  174E  0826               	movf	?___ftdiv,w
 17853  174F  00D7               	movwf	getDimmerLights_ValueToPercent@i
 17854  1750  0827               	movf	?___ftdiv+1,w
 17855  1751  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 17856  1752  0828               	movf	?___ftdiv+2,w
 17857  1753  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 17858                           
 17859                           ;Dimmer_B1.c: 1326: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 17860  1754  0856               	movf	getDimmerLights_ValueToPercent@value,w
 17861  1755  00D4               	movwf	??_getDimmerLights_ValueToPercent
 17862  1756  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 17863  1757  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 17864  1758  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 17865  1759  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 17866  175A  1903               	skipnz
 17867  175B  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 17868  175C  0854               	movf	??_getDimmerLights_ValueToPercent,w
 17869  175D  3E2A               	addlw	42
 17870  175E  00A0               	movwf	___awtoft@c
 17871  175F  3000               	movlw	0
 17872  1760  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17873  1761  00A1               	movwf	___awtoft@c+1
 17874  1762  319C  24E8  3197   	fcall	___awtoft
 17875  1765  0020               	movlb	0	; select bank0
 17876  1766  0820               	movf	?___awtoft,w
 17877  1767  00A9               	movwf	___ftdiv@f1
 17878  1768  0821               	movf	?___awtoft+1,w
 17879  1769  00AA               	movwf	___ftdiv@f1+1
 17880  176A  0822               	movf	?___awtoft+2,w
 17881  176B  00AB               	movwf	___ftdiv@f1+2
 17882  176C  0857               	movf	getDimmerLights_ValueToPercent@i,w
 17883  176D  00A6               	movwf	___ftdiv@f2
 17884  176E  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 17885  176F  00A7               	movwf	___ftdiv@f2+1
 17886  1770  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 17887  1771  00A8               	movwf	___ftdiv@f2+2
 17888  1772  318D  2539  3197   	fcall	___ftdiv
 17889  1775  0020               	movlb	0	; select bank0
 17890  1776  0826               	movf	?___ftdiv,w
 17891  1777  00B6               	movwf	___ftneg@f1
 17892  1778  0827               	movf	?___ftdiv+1,w
 17893  1779  00B7               	movwf	___ftneg@f1+1
 17894  177A  0828               	movf	?___ftdiv+2,w
 17895  177B  00B8               	movwf	___ftneg@f1+2
 17896  177C  3198  2067  3197   	fcall	___ftneg
 17897  177F  0020               	movlb	0	; select bank0
 17898  1780  0836               	movf	?___ftneg,w
 17899  1781  00BC               	movwf	___ftadd@f2
 17900  1782  0837               	movf	?___ftneg+1,w
 17901  1783  00BD               	movwf	___ftadd@f2+1
 17902  1784  0838               	movf	?___ftneg+2,w
 17903  1785  00BE               	movwf	___ftadd@f2+2
 17904  1786  3000               	movlw	0
 17905  1787  00B9               	movwf	___ftadd@f1
 17906  1788  30C8               	movlw	200
 17907  1789  00BA               	movwf	___ftadd@f1+1
 17908  178A  3042               	movlw	66
 17909  178B  00BB               	movwf	___ftadd@f1+2
 17910  178C  3183  2364  3197   	fcall	___ftadd
 17911  178F  0020               	movlb	0	; select bank0
 17912  1790  0839               	movf	?___ftadd,w
 17913  1791  00C6               	movwf	___fttol@f1
 17914  1792  083A               	movf	?___ftadd+1,w
 17915  1793  00C7               	movwf	___fttol@f1+1
 17916  1794  083B               	movf	?___ftadd+2,w
 17917  1795  00C8               	movwf	___fttol@f1+2
 17918  1796  318A  225C         	fcall	___fttol
 17919  1798  0020               	movlb	0	; select bank0
 17920  1799  0846               	movf	?___fttol,w
 17921  179A  0008               	return
 17922  179B                     __end_of_getDimmerLights_ValueToPercent:	
 17923                           
 17924                           	psect	text123
 17925  16D1                     __ptext123:	
 17926 ;; *************** function _getDimmerLights_PercentToValue *****************
 17927 ;; Defined at:
 17928 ;;		line 1299 in file "../src/Dimmer_B1.c"
 17929 ;; Parameters:    Size  Location     Type
 17930 ;;  value           1    wreg     unsigned char 
 17931 ;; Auto vars:     Size  Location     Type
 17932 ;;  value           1   54[BANK0 ] unsigned char 
 17933 ;;  i               3   55[BANK0 ] float 
 17934 ;; Return value:  Size  Location     Type
 17935 ;;                  1    wreg      unsigned char 
 17936 ;; Registers used:
 17937 ;;		wreg, status,2, status,0, pclath, cstack
 17938 ;; Tracked objects:
 17939 ;;		On entry : 0/0
 17940 ;;		On exit  : 0/0
 17941 ;;		Unchanged: 0/0
 17942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17947 ;;Total ram usage:        6 bytes
 17948 ;; Hardware stack levels used:    1
 17949 ;; Hardware stack levels required when called:    5
 17950 ;; This function calls:
 17951 ;;		___awtoft
 17952 ;;		___ftadd
 17953 ;;		___ftdiv
 17954 ;;		___ftmul
 17955 ;;		___ftneg
 17956 ;;		___fttol
 17957 ;; This function is called by:
 17958 ;;		_DimmerIntr_Initialization
 17959 ;;		_DimmerLights_AssignationDimming
 17960 ;;		_setDimmerLights_OnOff
 17961 ;;		_setRFSW_AdjControl
 17962 ;; This function uses a non-reentrant model
 17963 ;;
 17964                           
 17965                           
 17966                           ;psect for function _getDimmerLights_PercentToValue
 17967  16D1                     _getDimmerLights_PercentToValue:	
 17968                           
 17969                           ;incstack = 0
 17970                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17971                           ;getDimmerLights_PercentToValue@value stored from wreg
 17972  16D1  0020               	movlb	0	; select bank0
 17973  16D2  00D6               	movwf	getDimmerLights_PercentToValue@value
 17974                           
 17975                           ;Dimmer_B1.c: 1307: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17976  16D3  3000               	movlw	0
 17977  16D4  00D7               	movwf	getDimmerLights_PercentToValue@i
 17978  16D5  3020               	movlw	32
 17979  16D6  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 17980  16D7  3042               	movlw	66
 17981  16D8  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 17982                           
 17983                           ;Dimmer_B1.c: 1308: i /= 100;
 17984  16D9  3000               	movlw	0
 17985  16DA  00A6               	movwf	___ftdiv@f2
 17986  16DB  30C8               	movlw	200
 17987  16DC  00A7               	movwf	___ftdiv@f2+1
 17988  16DD  3042               	movlw	66
 17989  16DE  00A8               	movwf	___ftdiv@f2+2
 17990  16DF  0857               	movf	getDimmerLights_PercentToValue@i,w
 17991  16E0  00A9               	movwf	___ftdiv@f1
 17992  16E1  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 17993  16E2  00AA               	movwf	___ftdiv@f1+1
 17994  16E3  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 17995  16E4  00AB               	movwf	___ftdiv@f1+2
 17996  16E5  318D  2539  3196   	fcall	___ftdiv
 17997  16E8  0020               	movlb	0	; select bank0
 17998  16E9  0826               	movf	?___ftdiv,w
 17999  16EA  00D7               	movwf	getDimmerLights_PercentToValue@i
 18000  16EB  0827               	movf	?___ftdiv+1,w
 18001  16EC  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 18002  16ED  0828               	movf	?___ftdiv+2,w
 18003  16EE  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 18004                           
 18005                           ;Dimmer_B1.c: 1310: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18006  16EF  0856               	movf	getDimmerLights_PercentToValue@value,w
 18007  16F0  00D4               	movwf	??_getDimmerLights_PercentToValue
 18008  16F1  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 18009  16F2  09D4               	comf	??_getDimmerLights_PercentToValue,f
 18010  16F3  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 18011  16F4  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 18012  16F5  1903               	skipnz
 18013  16F6  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 18014  16F7  0854               	movf	??_getDimmerLights_PercentToValue,w
 18015  16F8  3E64               	addlw	100
 18016  16F9  00A0               	movwf	___awtoft@c
 18017  16FA  3000               	movlw	0
 18018  16FB  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18019  16FC  00A1               	movwf	___awtoft@c+1
 18020  16FD  319C  24E8  3196   	fcall	___awtoft
 18021  1700  0020               	movlb	0	; select bank0
 18022  1701  0820               	movf	?___awtoft,w
 18023  1702  00A9               	movwf	___ftmul@f2
 18024  1703  0821               	movf	?___awtoft+1,w
 18025  1704  00AA               	movwf	___ftmul@f2+1
 18026  1705  0822               	movf	?___awtoft+2,w
 18027  1706  00AB               	movwf	___ftmul@f2+2
 18028  1707  0857               	movf	getDimmerLights_PercentToValue@i,w
 18029  1708  00A6               	movwf	___ftmul@f1
 18030  1709  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 18031  170A  00A7               	movwf	___ftmul@f1+1
 18032  170B  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 18033  170C  00A8               	movwf	___ftmul@f1+2
 18034  170D  318E  268E  3196   	fcall	___ftmul
 18035  1710  0020               	movlb	0	; select bank0
 18036  1711  0826               	movf	?___ftmul,w
 18037  1712  00B6               	movwf	___ftneg@f1
 18038  1713  0827               	movf	?___ftmul+1,w
 18039  1714  00B7               	movwf	___ftneg@f1+1
 18040  1715  0828               	movf	?___ftmul+2,w
 18041  1716  00B8               	movwf	___ftneg@f1+2
 18042  1717  3198  2067  3196   	fcall	___ftneg
 18043  171A  0020               	movlb	0	; select bank0
 18044  171B  0836               	movf	?___ftneg,w
 18045  171C  00BC               	movwf	___ftadd@f2
 18046  171D  0837               	movf	?___ftneg+1,w
 18047  171E  00BD               	movwf	___ftadd@f2+1
 18048  171F  0838               	movf	?___ftneg+2,w
 18049  1720  00BE               	movwf	___ftadd@f2+2
 18050  1721  3000               	movlw	0
 18051  1722  00B9               	movwf	___ftadd@f1
 18052  1723  3028               	movlw	40
 18053  1724  00BA               	movwf	___ftadd@f1+1
 18054  1725  3042               	movlw	66
 18055  1726  00BB               	movwf	___ftadd@f1+2
 18056  1727  3183  2364  3196   	fcall	___ftadd
 18057  172A  0020               	movlb	0	; select bank0
 18058  172B  0839               	movf	?___ftadd,w
 18059  172C  00C6               	movwf	___fttol@f1
 18060  172D  083A               	movf	?___ftadd+1,w
 18061  172E  00C7               	movwf	___fttol@f1+1
 18062  172F  083B               	movf	?___ftadd+2,w
 18063  1730  00C8               	movwf	___fttol@f1+2
 18064  1731  318A  225C         	fcall	___fttol
 18065  1733  0020               	movlb	0	; select bank0
 18066  1734  0846               	movf	?___fttol,w
 18067  1735  0008               	return
 18068  1736                     __end_of_getDimmerLights_PercentToValue:	
 18069                           
 18070                           	psect	text124
 18071  0A5C                     __ptext124:	
 18072 ;; *************** function ___fttol *****************
 18073 ;; Defined at:
 18074 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;  f1              3   38[BANK0 ] float 
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;  lval            4   47[BANK0 ] unsigned long 
 18079 ;;  exp1            1   51[BANK0 ] unsigned char 
 18080 ;;  sign1           1   46[BANK0 ] unsigned char 
 18081 ;; Return value:  Size  Location     Type
 18082 ;;                  4   38[BANK0 ] long 
 18083 ;; Registers used:
 18084 ;;		wreg, status,2, status,0
 18085 ;; Tracked objects:
 18086 ;;		On entry : 0/0
 18087 ;;		On exit  : 0/0
 18088 ;;		Unchanged: 0/0
 18089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;Total ram usage:       14 bytes
 18095 ;; Hardware stack levels used:    1
 18096 ;; Hardware stack levels required when called:    3
 18097 ;; This function calls:
 18098 ;;		Nothing
 18099 ;; This function is called by:
 18100 ;;		_getDimmerLights_PercentToValue
 18101 ;;		_getDimmerLights_ValueToPercent
 18102 ;; This function uses a non-reentrant model
 18103 ;;
 18104                           
 18105                           
 18106                           ;psect for function ___fttol
 18107  0A5C                     ___fttol:	
 18108                           
 18109                           ;incstack = 0
 18110                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18111  0A5C  0020               	movlb	0	; select bank0
 18112  0A5D  0846               	movf	___fttol@f1,w
 18113  0A5E  00CA               	movwf	??___fttol
 18114  0A5F  0847               	movf	___fttol@f1+1,w
 18115  0A60  00CB               	movwf	??___fttol+1
 18116  0A61  0848               	movf	___fttol@f1+2,w
 18117  0A62  00CC               	movwf	??___fttol+2
 18118  0A63  1003               	clrc
 18119  0A64  0D4B               	rlf	??___fttol+1,w
 18120  0A65  0D4C               	rlf	??___fttol+2,w
 18121  0A66  00CD               	movwf	??___fttol+3
 18122  0A67  084D               	movf	??___fttol+3,w
 18123  0A68  00D3               	movwf	___fttol@exp1
 18124  0A69  08D3               	movf	___fttol@exp1,f
 18125  0A6A  1D03               	skipz
 18126  0A6B  2A75               	goto	l6895
 18127  0A6C  3000               	movlw	0
 18128  0A6D  00C9               	movwf	?___fttol+3
 18129  0A6E  3000               	movlw	0
 18130  0A6F  00C8               	movwf	?___fttol+2
 18131  0A70  3000               	movlw	0
 18132  0A71  00C7               	movwf	?___fttol+1
 18133  0A72  3000               	movlw	0
 18134  0A73  00C6               	movwf	?___fttol
 18135  0A74  0008               	return
 18136  0A75                     l6895:	
 18137  0A75  0846               	movf	___fttol@f1,w
 18138  0A76  00CA               	movwf	??___fttol
 18139  0A77  0847               	movf	___fttol@f1+1,w
 18140  0A78  00CB               	movwf	??___fttol+1
 18141  0A79  0848               	movf	___fttol@f1+2,w
 18142  0A7A  00CC               	movwf	??___fttol+2
 18143  0A7B  3017               	movlw	23
 18144  0A7C                     u5955:	
 18145  0A7C  36CC               	lsrf	??___fttol+2,f
 18146  0A7D  0CCB               	rrf	??___fttol+1,f
 18147  0A7E  0CCA               	rrf	??___fttol,f
 18148  0A7F  0B89               	decfsz	9,f
 18149  0A80  2A7C               	goto	u5955
 18150  0A81  084A               	movf	??___fttol,w
 18151  0A82  00CD               	movwf	??___fttol+3
 18152  0A83  084D               	movf	??___fttol+3,w
 18153  0A84  00CE               	movwf	___fttol@sign1
 18154  0A85  17C7               	bsf	___fttol@f1+1,7
 18155  0A86  30FF               	movlw	255
 18156  0A87  05C6               	andwf	___fttol@f1,f
 18157  0A88  30FF               	movlw	255
 18158  0A89  05C7               	andwf	___fttol@f1+1,f
 18159  0A8A  3000               	movlw	0
 18160  0A8B  05C8               	andwf	___fttol@f1+2,f
 18161  0A8C  0846               	movf	___fttol@f1,w
 18162  0A8D  00CF               	movwf	___fttol@lval
 18163  0A8E  0847               	movf	___fttol@f1+1,w
 18164  0A8F  00D0               	movwf	___fttol@lval+1
 18165  0A90  0848               	movf	___fttol@f1+2,w
 18166  0A91  00D1               	movwf	___fttol@lval+2
 18167  0A92  01D2               	clrf	___fttol@lval+3
 18168  0A93  308E               	movlw	142
 18169  0A94  02D3               	subwf	___fttol@exp1,f
 18170  0A95  1FD3               	btfss	___fttol@exp1,7
 18171  0A96  2AB3               	goto	l6915
 18172  0A97  0853               	movf	___fttol@exp1,w
 18173  0A98  3A80               	xorlw	128
 18174  0A99  3E8F               	addlw	143
 18175  0A9A  1803               	skipnc
 18176  0A9B  2AA5               	goto	l6913
 18177  0A9C  3000               	movlw	0
 18178  0A9D  00C9               	movwf	?___fttol+3
 18179  0A9E  3000               	movlw	0
 18180  0A9F  00C8               	movwf	?___fttol+2
 18181  0AA0  3000               	movlw	0
 18182  0AA1  00C7               	movwf	?___fttol+1
 18183  0AA2  3000               	movlw	0
 18184  0AA3  00C6               	movwf	?___fttol
 18185  0AA4  0008               	return
 18186  0AA5                     l6913:	
 18187  0AA5  3001               	movlw	1
 18188  0AA6                     u5985:	
 18189  0AA6  36D2               	lsrf	___fttol@lval+3,f
 18190  0AA7  0CD1               	rrf	___fttol@lval+2,f
 18191  0AA8  0CD0               	rrf	___fttol@lval+1,f
 18192  0AA9  0CCF               	rrf	___fttol@lval,f
 18193  0AAA  0B89               	decfsz	9,f
 18194  0AAB  2AA6               	goto	u5985
 18195  0AAC  3001               	movlw	1
 18196  0AAD  00CA               	movwf	??___fttol
 18197  0AAE  084A               	movf	??___fttol,w
 18198  0AAF  07D3               	addwf	___fttol@exp1,f
 18199  0AB0  1903               	btfsc	3,2
 18200  0AB1  2ACC               	goto	l6925
 18201  0AB2  2AA5               	goto	l6913
 18202  0AB3                     l6915:	
 18203  0AB3  3018               	movlw	24
 18204  0AB4  0253               	subwf	___fttol@exp1,w
 18205  0AB5  1C03               	skipc
 18206  0AB6  2AC9               	goto	l6923
 18207  0AB7  3000               	movlw	0
 18208  0AB8  00C9               	movwf	?___fttol+3
 18209  0AB9  3000               	movlw	0
 18210  0ABA  00C8               	movwf	?___fttol+2
 18211  0ABB  3000               	movlw	0
 18212  0ABC  00C7               	movwf	?___fttol+1
 18213  0ABD  3000               	movlw	0
 18214  0ABE  00C6               	movwf	?___fttol
 18215  0ABF  0008               	return
 18216  0AC0                     l6921:	
 18217  0AC0  3001               	movlw	1
 18218  0AC1                     u6015:	
 18219  0AC1  35CF               	lslf	___fttol@lval,f
 18220  0AC2  0DD0               	rlf	___fttol@lval+1,f
 18221  0AC3  0DD1               	rlf	___fttol@lval+2,f
 18222  0AC4  0DD2               	rlf	___fttol@lval+3,f
 18223  0AC5  0B89               	decfsz	9,f
 18224  0AC6  2AC1               	goto	u6015
 18225  0AC7  3001               	movlw	1
 18226  0AC8  02D3               	subwf	___fttol@exp1,f
 18227  0AC9                     l6923:	
 18228  0AC9  08D3               	movf	___fttol@exp1,f
 18229  0ACA  1D03               	skipz
 18230  0ACB  2AC0               	goto	l6921
 18231  0ACC                     l6925:	
 18232  0ACC  084E               	movf	___fttol@sign1,w
 18233  0ACD  1903               	btfsc	3,2
 18234  0ACE  2ADA               	goto	l6929
 18235  0ACF  09CF               	comf	___fttol@lval,f
 18236  0AD0  09D0               	comf	___fttol@lval+1,f
 18237  0AD1  09D1               	comf	___fttol@lval+2,f
 18238  0AD2  09D2               	comf	___fttol@lval+3,f
 18239  0AD3  0ACF               	incf	___fttol@lval,f
 18240  0AD4  1903               	skipnz
 18241  0AD5  0AD0               	incf	___fttol@lval+1,f
 18242  0AD6  1903               	skipnz
 18243  0AD7  0AD1               	incf	___fttol@lval+2,f
 18244  0AD8  1903               	skipnz
 18245  0AD9  0AD2               	incf	___fttol@lval+3,f
 18246  0ADA                     l6929:	
 18247  0ADA  0852               	movf	___fttol@lval+3,w
 18248  0ADB  00C9               	movwf	?___fttol+3
 18249  0ADC  0851               	movf	___fttol@lval+2,w
 18250  0ADD  00C8               	movwf	?___fttol+2
 18251  0ADE  0850               	movf	___fttol@lval+1,w
 18252  0ADF  00C7               	movwf	?___fttol+1
 18253  0AE0  084F               	movf	___fttol@lval,w
 18254  0AE1  00C6               	movwf	?___fttol
 18255  0AE2  0008               	return
 18256  0AE3                     __end_of___fttol:	
 18257                           
 18258                           	psect	text125
 18259  1867                     __ptext125:	
 18260 ;; *************** function ___ftneg *****************
 18261 ;; Defined at:
 18262 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  f1              3   22[BANK0 ] float 
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;		None
 18267 ;; Return value:  Size  Location     Type
 18268 ;;                  3   22[BANK0 ] float 
 18269 ;; Registers used:
 18270 ;;		wreg
 18271 ;; Tracked objects:
 18272 ;;		On entry : 0/0
 18273 ;;		On exit  : 0/0
 18274 ;;		Unchanged: 0/0
 18275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18276 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;Total ram usage:        3 bytes
 18281 ;; Hardware stack levels used:    1
 18282 ;; Hardware stack levels required when called:    3
 18283 ;; This function calls:
 18284 ;;		Nothing
 18285 ;; This function is called by:
 18286 ;;		_getDimmerLights_PercentToValue
 18287 ;;		_getDimmerLights_ValueToPercent
 18288 ;; This function uses a non-reentrant model
 18289 ;;
 18290                           
 18291                           
 18292                           ;psect for function ___ftneg
 18293  1867                     ___ftneg:	
 18294                           
 18295                           ;incstack = 0
 18296                           ; Regs used in ___ftneg: [wreg]
 18297  1867  0020               	movlb	0	; select bank0
 18298  1868  0838               	movf	___ftneg@f1+2,w
 18299  1869  0437               	iorwf	___ftneg@f1+1,w
 18300  186A  0436               	iorwf	___ftneg@f1,w
 18301  186B  1903               	skipnz
 18302  186C  0008               	return
 18303  186D  3080               	movlw	128
 18304  186E  06B8               	xorwf	___ftneg@f1+2,f
 18305  186F  0008               	return
 18306  1870                     __end_of___ftneg:	
 18307                           
 18308                           	psect	text126
 18309  0E8E                     __ptext126:	
 18310 ;; *************** function ___ftmul *****************
 18311 ;; Defined at:
 18312 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18313 ;; Parameters:    Size  Location     Type
 18314 ;;  f1              3    6[BANK0 ] float 
 18315 ;;  f2              3    9[BANK0 ] float 
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 18318 ;;  sign            1   21[BANK0 ] unsigned char 
 18319 ;;  cntr            1   20[BANK0 ] unsigned char 
 18320 ;;  exp             1   16[BANK0 ] unsigned char 
 18321 ;; Return value:  Size  Location     Type
 18322 ;;                  3    6[BANK0 ] float 
 18323 ;; Registers used:
 18324 ;;		wreg, status,2, status,0, pclath, cstack
 18325 ;; Tracked objects:
 18326 ;;		On entry : 0/0
 18327 ;;		On exit  : 0/0
 18328 ;;		Unchanged: 0/0
 18329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18330 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18332 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18333 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18334 ;;Total ram usage:       16 bytes
 18335 ;; Hardware stack levels used:    1
 18336 ;; Hardware stack levels required when called:    4
 18337 ;; This function calls:
 18338 ;;		___ftpack
 18339 ;; This function is called by:
 18340 ;;		_getDimmerLights_PercentToValue
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           
 18345                           ;psect for function ___ftmul
 18346  0E8E                     ___ftmul:	
 18347                           
 18348                           ;incstack = 0
 18349                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18350  0E8E  0020               	movlb	0	; select bank0
 18351  0E8F  0826               	movf	___ftmul@f1,w
 18352  0E90  00AC               	movwf	??___ftmul
 18353  0E91  0827               	movf	___ftmul@f1+1,w
 18354  0E92  00AD               	movwf	??___ftmul+1
 18355  0E93  0828               	movf	___ftmul@f1+2,w
 18356  0E94  00AE               	movwf	??___ftmul+2
 18357  0E95  1003               	clrc
 18358  0E96  0D2D               	rlf	??___ftmul+1,w
 18359  0E97  0D2E               	rlf	??___ftmul+2,w
 18360  0E98  00AF               	movwf	??___ftmul+3
 18361  0E99  082F               	movf	??___ftmul+3,w
 18362  0E9A  00B0               	movwf	___ftmul@exp
 18363  0E9B  08B0               	movf	___ftmul@exp,f
 18364  0E9C  1D03               	skipz
 18365  0E9D  2EA5               	goto	l6837
 18366  0E9E  3000               	movlw	0
 18367  0E9F  00A6               	movwf	?___ftmul
 18368  0EA0  3000               	movlw	0
 18369  0EA1  00A7               	movwf	?___ftmul+1
 18370  0EA2  3000               	movlw	0
 18371  0EA3  00A8               	movwf	?___ftmul+2
 18372  0EA4  0008               	return
 18373  0EA5                     l6837:	
 18374  0EA5  0829               	movf	___ftmul@f2,w
 18375  0EA6  00AC               	movwf	??___ftmul
 18376  0EA7  082A               	movf	___ftmul@f2+1,w
 18377  0EA8  00AD               	movwf	??___ftmul+1
 18378  0EA9  082B               	movf	___ftmul@f2+2,w
 18379  0EAA  00AE               	movwf	??___ftmul+2
 18380  0EAB  1003               	clrc
 18381  0EAC  0D2D               	rlf	??___ftmul+1,w
 18382  0EAD  0D2E               	rlf	??___ftmul+2,w
 18383  0EAE  00AF               	movwf	??___ftmul+3
 18384  0EAF  082F               	movf	??___ftmul+3,w
 18385  0EB0  00B5               	movwf	___ftmul@sign
 18386  0EB1  08B5               	movf	___ftmul@sign,f
 18387  0EB2  1D03               	skipz
 18388  0EB3  2EBB               	goto	l6843
 18389  0EB4  3000               	movlw	0
 18390  0EB5  00A6               	movwf	?___ftmul
 18391  0EB6  3000               	movlw	0
 18392  0EB7  00A7               	movwf	?___ftmul+1
 18393  0EB8  3000               	movlw	0
 18394  0EB9  00A8               	movwf	?___ftmul+2
 18395  0EBA  0008               	return
 18396  0EBB                     l6843:	
 18397  0EBB  0835               	movf	___ftmul@sign,w
 18398  0EBC  3E7B               	addlw	123
 18399  0EBD  00AC               	movwf	??___ftmul
 18400  0EBE  082C               	movf	??___ftmul,w
 18401  0EBF  07B0               	addwf	___ftmul@exp,f
 18402  0EC0  0826               	movf	___ftmul@f1,w
 18403  0EC1  00AC               	movwf	??___ftmul
 18404  0EC2  0827               	movf	___ftmul@f1+1,w
 18405  0EC3  00AD               	movwf	??___ftmul+1
 18406  0EC4  0828               	movf	___ftmul@f1+2,w
 18407  0EC5  00AE               	movwf	??___ftmul+2
 18408  0EC6  3010               	movlw	16
 18409  0EC7                     u5835:	
 18410  0EC7  36AE               	lsrf	??___ftmul+2,f
 18411  0EC8  0CAD               	rrf	??___ftmul+1,f
 18412  0EC9  0CAC               	rrf	??___ftmul,f
 18413  0ECA  0B89               	decfsz	9,f
 18414  0ECB  2EC7               	goto	u5835
 18415  0ECC  082C               	movf	??___ftmul,w
 18416  0ECD  00AF               	movwf	??___ftmul+3
 18417  0ECE  082F               	movf	??___ftmul+3,w
 18418  0ECF  00B5               	movwf	___ftmul@sign
 18419  0ED0  0829               	movf	___ftmul@f2,w
 18420  0ED1  00AC               	movwf	??___ftmul
 18421  0ED2  082A               	movf	___ftmul@f2+1,w
 18422  0ED3  00AD               	movwf	??___ftmul+1
 18423  0ED4  082B               	movf	___ftmul@f2+2,w
 18424  0ED5  00AE               	movwf	??___ftmul+2
 18425  0ED6  3010               	movlw	16
 18426  0ED7                     u5845:	
 18427  0ED7  36AE               	lsrf	??___ftmul+2,f
 18428  0ED8  0CAD               	rrf	??___ftmul+1,f
 18429  0ED9  0CAC               	rrf	??___ftmul,f
 18430  0EDA  0B89               	decfsz	9,f
 18431  0EDB  2ED7               	goto	u5845
 18432  0EDC  082C               	movf	??___ftmul,w
 18433  0EDD  00AF               	movwf	??___ftmul+3
 18434  0EDE  082F               	movf	??___ftmul+3,w
 18435  0EDF  06B5               	xorwf	___ftmul@sign,f
 18436  0EE0  3080               	movlw	128
 18437  0EE1  00AC               	movwf	??___ftmul
 18438  0EE2  082C               	movf	??___ftmul,w
 18439  0EE3  05B5               	andwf	___ftmul@sign,f
 18440  0EE4  17A7               	bsf	___ftmul@f1+1,7
 18441  0EE5  17AA               	bsf	___ftmul@f2+1,7
 18442  0EE6  30FF               	movlw	255
 18443  0EE7  05A9               	andwf	___ftmul@f2,f
 18444  0EE8  30FF               	movlw	255
 18445  0EE9  05AA               	andwf	___ftmul@f2+1,f
 18446  0EEA  3000               	movlw	0
 18447  0EEB  05AB               	andwf	___ftmul@f2+2,f
 18448  0EEC  3000               	movlw	0
 18449  0EED  00B1               	movwf	___ftmul@f3_as_product
 18450  0EEE  3000               	movlw	0
 18451  0EEF  00B2               	movwf	___ftmul@f3_as_product+1
 18452  0EF0  3000               	movlw	0
 18453  0EF1  00B3               	movwf	___ftmul@f3_as_product+2
 18454  0EF2  3007               	movlw	7
 18455  0EF3  00AC               	movwf	??___ftmul
 18456  0EF4  082C               	movf	??___ftmul,w
 18457  0EF5  00B4               	movwf	___ftmul@cntr
 18458  0EF6                     l6855:	
 18459  0EF6  1C26               	btfss	___ftmul@f1,0
 18460  0EF7  2EFE               	goto	l6859
 18461  0EF8  0829               	movf	___ftmul@f2,w
 18462  0EF9  07B1               	addwf	___ftmul@f3_as_product,f
 18463  0EFA  082A               	movf	___ftmul@f2+1,w
 18464  0EFB  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18465  0EFC  082B               	movf	___ftmul@f2+2,w
 18466  0EFD  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18467  0EFE                     l6859:	
 18468  0EFE  3001               	movlw	1
 18469  0EFF                     u5865:	
 18470  0EFF  36A8               	lsrf	___ftmul@f1+2,f
 18471  0F00  0CA7               	rrf	___ftmul@f1+1,f
 18472  0F01  0CA6               	rrf	___ftmul@f1,f
 18473  0F02  0B89               	decfsz	9,f
 18474  0F03  2EFF               	goto	u5865
 18475  0F04  3001               	movlw	1
 18476  0F05                     u5875:	
 18477  0F05  35A9               	lslf	___ftmul@f2,f
 18478  0F06  0DAA               	rlf	___ftmul@f2+1,f
 18479  0F07  0DAB               	rlf	___ftmul@f2+2,f
 18480  0F08  0B89               	decfsz	9,f
 18481  0F09  2F05               	goto	u5875
 18482  0F0A  3001               	movlw	1
 18483  0F0B  02B4               	subwf	___ftmul@cntr,f
 18484  0F0C  1D03               	btfss	3,2
 18485  0F0D  2EF6               	goto	l6855
 18486  0F0E  3009               	movlw	9
 18487  0F0F  00AC               	movwf	??___ftmul
 18488  0F10  082C               	movf	??___ftmul,w
 18489  0F11  00B4               	movwf	___ftmul@cntr
 18490  0F12                     l6867:	
 18491  0F12  1C26               	btfss	___ftmul@f1,0
 18492  0F13  2F1A               	goto	l6871
 18493  0F14  0829               	movf	___ftmul@f2,w
 18494  0F15  07B1               	addwf	___ftmul@f3_as_product,f
 18495  0F16  082A               	movf	___ftmul@f2+1,w
 18496  0F17  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 18497  0F18  082B               	movf	___ftmul@f2+2,w
 18498  0F19  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 18499  0F1A                     l6871:	
 18500  0F1A  3001               	movlw	1
 18501  0F1B                     u5905:	
 18502  0F1B  36A8               	lsrf	___ftmul@f1+2,f
 18503  0F1C  0CA7               	rrf	___ftmul@f1+1,f
 18504  0F1D  0CA6               	rrf	___ftmul@f1,f
 18505  0F1E  0B89               	decfsz	9,f
 18506  0F1F  2F1B               	goto	u5905
 18507  0F20  3001               	movlw	1
 18508  0F21                     u5915:	
 18509  0F21  36B3               	lsrf	___ftmul@f3_as_product+2,f
 18510  0F22  0CB2               	rrf	___ftmul@f3_as_product+1,f
 18511  0F23  0CB1               	rrf	___ftmul@f3_as_product,f
 18512  0F24  0B89               	decfsz	9,f
 18513  0F25  2F21               	goto	u5915
 18514  0F26  3001               	movlw	1
 18515  0F27  02B4               	subwf	___ftmul@cntr,f
 18516  0F28  1D03               	btfss	3,2
 18517  0F29  2F12               	goto	l6867
 18518  0F2A  0831               	movf	___ftmul@f3_as_product,w
 18519  0F2B  00F2               	movwf	___ftpack@arg
 18520  0F2C  0832               	movf	___ftmul@f3_as_product+1,w
 18521  0F2D  00F3               	movwf	___ftpack@arg+1
 18522  0F2E  0833               	movf	___ftmul@f3_as_product+2,w
 18523  0F2F  00F4               	movwf	___ftpack@arg+2
 18524  0F30  0830               	movf	___ftmul@exp,w
 18525  0F31  00AC               	movwf	??___ftmul
 18526  0F32  082C               	movf	??___ftmul,w
 18527  0F33  00F5               	movwf	___ftpack@exp
 18528  0F34  0835               	movf	___ftmul@sign,w
 18529  0F35  00AD               	movwf	??___ftmul+1
 18530  0F36  082D               	movf	??___ftmul+1,w
 18531  0F37  00F6               	movwf	___ftpack@sign
 18532  0F38  3195  25AB         	fcall	___ftpack
 18533  0F3A  0872               	movf	?___ftpack,w
 18534  0F3B  0020               	movlb	0	; select bank0
 18535  0F3C  00A6               	movwf	?___ftmul
 18536  0F3D  0873               	movf	?___ftpack+1,w
 18537  0F3E  00A7               	movwf	?___ftmul+1
 18538  0F3F  0874               	movf	?___ftpack+2,w
 18539  0F40  00A8               	movwf	?___ftmul+2
 18540  0F41  0008               	return
 18541  0F42                     __end_of___ftmul:	
 18542                           
 18543                           	psect	text127
 18544  0D39                     __ptext127:	
 18545 ;; *************** function ___ftdiv *****************
 18546 ;; Defined at:
 18547 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18548 ;; Parameters:    Size  Location     Type
 18549 ;;  f2              3    6[BANK0 ] float 
 18550 ;;  f1              3    9[BANK0 ] float 
 18551 ;; Auto vars:     Size  Location     Type
 18552 ;;  f3              3   17[BANK0 ] float 
 18553 ;;  sign            1   21[BANK0 ] unsigned char 
 18554 ;;  exp             1   20[BANK0 ] unsigned char 
 18555 ;;  cntr            1   16[BANK0 ] unsigned char 
 18556 ;; Return value:  Size  Location     Type
 18557 ;;                  3    6[BANK0 ] float 
 18558 ;; Registers used:
 18559 ;;		wreg, status,2, status,0, pclath, cstack
 18560 ;; Tracked objects:
 18561 ;;		On entry : 0/0
 18562 ;;		On exit  : 0/0
 18563 ;;		Unchanged: 0/0
 18564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18565 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18566 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18569 ;;Total ram usage:       16 bytes
 18570 ;; Hardware stack levels used:    1
 18571 ;; Hardware stack levels required when called:    4
 18572 ;; This function calls:
 18573 ;;		___ftpack
 18574 ;; This function is called by:
 18575 ;;		_getDimmerLights_PercentToValue
 18576 ;;		_getDimmerLights_ValueToPercent
 18577 ;; This function uses a non-reentrant model
 18578 ;;
 18579                           
 18580                           
 18581                           ;psect for function ___ftdiv
 18582  0D39                     ___ftdiv:	
 18583                           
 18584                           ;incstack = 0
 18585                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18586  0D39  0020               	movlb	0	; select bank0
 18587  0D3A  0829               	movf	___ftdiv@f1,w
 18588  0D3B  00AC               	movwf	??___ftdiv
 18589  0D3C  082A               	movf	___ftdiv@f1+1,w
 18590  0D3D  00AD               	movwf	??___ftdiv+1
 18591  0D3E  082B               	movf	___ftdiv@f1+2,w
 18592  0D3F  00AE               	movwf	??___ftdiv+2
 18593  0D40  1003               	clrc
 18594  0D41  0D2D               	rlf	??___ftdiv+1,w
 18595  0D42  0D2E               	rlf	??___ftdiv+2,w
 18596  0D43  00AF               	movwf	??___ftdiv+3
 18597  0D44  082F               	movf	??___ftdiv+3,w
 18598  0D45  00B4               	movwf	___ftdiv@exp
 18599  0D46  08B4               	movf	___ftdiv@exp,f
 18600  0D47  1D03               	skipz
 18601  0D48  2D50               	goto	l6795
 18602  0D49  3000               	movlw	0
 18603  0D4A  00A6               	movwf	?___ftdiv
 18604  0D4B  3000               	movlw	0
 18605  0D4C  00A7               	movwf	?___ftdiv+1
 18606  0D4D  3000               	movlw	0
 18607  0D4E  00A8               	movwf	?___ftdiv+2
 18608  0D4F  0008               	return
 18609  0D50                     l6795:	
 18610  0D50  0826               	movf	___ftdiv@f2,w
 18611  0D51  00AC               	movwf	??___ftdiv
 18612  0D52  0827               	movf	___ftdiv@f2+1,w
 18613  0D53  00AD               	movwf	??___ftdiv+1
 18614  0D54  0828               	movf	___ftdiv@f2+2,w
 18615  0D55  00AE               	movwf	??___ftdiv+2
 18616  0D56  1003               	clrc
 18617  0D57  0D2D               	rlf	??___ftdiv+1,w
 18618  0D58  0D2E               	rlf	??___ftdiv+2,w
 18619  0D59  00AF               	movwf	??___ftdiv+3
 18620  0D5A  082F               	movf	??___ftdiv+3,w
 18621  0D5B  00B5               	movwf	___ftdiv@sign
 18622  0D5C  08B5               	movf	___ftdiv@sign,f
 18623  0D5D  1D03               	skipz
 18624  0D5E  2D66               	goto	l6801
 18625  0D5F  3000               	movlw	0
 18626  0D60  00A6               	movwf	?___ftdiv
 18627  0D61  3000               	movlw	0
 18628  0D62  00A7               	movwf	?___ftdiv+1
 18629  0D63  3000               	movlw	0
 18630  0D64  00A8               	movwf	?___ftdiv+2
 18631  0D65  0008               	return
 18632  0D66                     l6801:	
 18633  0D66  3000               	movlw	0
 18634  0D67  00B1               	movwf	___ftdiv@f3
 18635  0D68  3000               	movlw	0
 18636  0D69  00B2               	movwf	___ftdiv@f3+1
 18637  0D6A  3000               	movlw	0
 18638  0D6B  00B3               	movwf	___ftdiv@f3+2
 18639  0D6C  3089               	movlw	137
 18640  0D6D  0735               	addwf	___ftdiv@sign,w
 18641  0D6E  00AC               	movwf	??___ftdiv
 18642  0D6F  082C               	movf	??___ftdiv,w
 18643  0D70  02B4               	subwf	___ftdiv@exp,f
 18644  0D71  0829               	movf	___ftdiv@f1,w
 18645  0D72  00AC               	movwf	??___ftdiv
 18646  0D73  082A               	movf	___ftdiv@f1+1,w
 18647  0D74  00AD               	movwf	??___ftdiv+1
 18648  0D75  082B               	movf	___ftdiv@f1+2,w
 18649  0D76  00AE               	movwf	??___ftdiv+2
 18650  0D77  3010               	movlw	16
 18651  0D78                     u5755:	
 18652  0D78  36AE               	lsrf	??___ftdiv+2,f
 18653  0D79  0CAD               	rrf	??___ftdiv+1,f
 18654  0D7A  0CAC               	rrf	??___ftdiv,f
 18655  0D7B  0B89               	decfsz	9,f
 18656  0D7C  2D78               	goto	u5755
 18657  0D7D  082C               	movf	??___ftdiv,w
 18658  0D7E  00AF               	movwf	??___ftdiv+3
 18659  0D7F  082F               	movf	??___ftdiv+3,w
 18660  0D80  00B5               	movwf	___ftdiv@sign
 18661  0D81  0826               	movf	___ftdiv@f2,w
 18662  0D82  00AC               	movwf	??___ftdiv
 18663  0D83  0827               	movf	___ftdiv@f2+1,w
 18664  0D84  00AD               	movwf	??___ftdiv+1
 18665  0D85  0828               	movf	___ftdiv@f2+2,w
 18666  0D86  00AE               	movwf	??___ftdiv+2
 18667  0D87  3010               	movlw	16
 18668  0D88                     u5765:	
 18669  0D88  36AE               	lsrf	??___ftdiv+2,f
 18670  0D89  0CAD               	rrf	??___ftdiv+1,f
 18671  0D8A  0CAC               	rrf	??___ftdiv,f
 18672  0D8B  0B89               	decfsz	9,f
 18673  0D8C  2D88               	goto	u5765
 18674  0D8D  082C               	movf	??___ftdiv,w
 18675  0D8E  00AF               	movwf	??___ftdiv+3
 18676  0D8F  082F               	movf	??___ftdiv+3,w
 18677  0D90  06B5               	xorwf	___ftdiv@sign,f
 18678  0D91  3080               	movlw	128
 18679  0D92  00AC               	movwf	??___ftdiv
 18680  0D93  082C               	movf	??___ftdiv,w
 18681  0D94  05B5               	andwf	___ftdiv@sign,f
 18682  0D95  17AA               	bsf	___ftdiv@f1+1,7
 18683  0D96  30FF               	movlw	255
 18684  0D97  05A9               	andwf	___ftdiv@f1,f
 18685  0D98  30FF               	movlw	255
 18686  0D99  05AA               	andwf	___ftdiv@f1+1,f
 18687  0D9A  3000               	movlw	0
 18688  0D9B  05AB               	andwf	___ftdiv@f1+2,f
 18689  0D9C  17A7               	bsf	___ftdiv@f2+1,7
 18690  0D9D  30FF               	movlw	255
 18691  0D9E  05A6               	andwf	___ftdiv@f2,f
 18692  0D9F  30FF               	movlw	255
 18693  0DA0  05A7               	andwf	___ftdiv@f2+1,f
 18694  0DA1  3000               	movlw	0
 18695  0DA2  05A8               	andwf	___ftdiv@f2+2,f
 18696  0DA3  3018               	movlw	24
 18697  0DA4  00AC               	movwf	??___ftdiv
 18698  0DA5  082C               	movf	??___ftdiv,w
 18699  0DA6  00B0               	movwf	___ftdiv@cntr
 18700  0DA7                     l6815:	
 18701  0DA7  3001               	movlw	1
 18702  0DA8                     u5775:	
 18703  0DA8  35B1               	lslf	___ftdiv@f3,f
 18704  0DA9  0DB2               	rlf	___ftdiv@f3+1,f
 18705  0DAA  0DB3               	rlf	___ftdiv@f3+2,f
 18706  0DAB  0B89               	decfsz	9,f
 18707  0DAC  2DA8               	goto	u5775
 18708  0DAD  0828               	movf	___ftdiv@f2+2,w
 18709  0DAE  022B               	subwf	___ftdiv@f1+2,w
 18710  0DAF  1D03               	skipz
 18711  0DB0  2DB7               	goto	u5785
 18712  0DB1  0827               	movf	___ftdiv@f2+1,w
 18713  0DB2  022A               	subwf	___ftdiv@f1+1,w
 18714  0DB3  1D03               	skipz
 18715  0DB4  2DB7               	goto	u5785
 18716  0DB5  0826               	movf	___ftdiv@f2,w
 18717  0DB6  0229               	subwf	___ftdiv@f1,w
 18718  0DB7                     u5785:	
 18719  0DB7  1C03               	skipc
 18720  0DB8  2DC0               	goto	l6823
 18721  0DB9  0826               	movf	___ftdiv@f2,w
 18722  0DBA  02A9               	subwf	___ftdiv@f1,f
 18723  0DBB  0827               	movf	___ftdiv@f2+1,w
 18724  0DBC  3BAA               	subwfb	___ftdiv@f1+1,f
 18725  0DBD  0828               	movf	___ftdiv@f2+2,w
 18726  0DBE  3BAB               	subwfb	___ftdiv@f1+2,f
 18727  0DBF  1431               	bsf	___ftdiv@f3,0
 18728  0DC0                     l6823:	
 18729  0DC0  3001               	movlw	1
 18730  0DC1                     u5795:	
 18731  0DC1  35A9               	lslf	___ftdiv@f1,f
 18732  0DC2  0DAA               	rlf	___ftdiv@f1+1,f
 18733  0DC3  0DAB               	rlf	___ftdiv@f1+2,f
 18734  0DC4  0B89               	decfsz	9,f
 18735  0DC5  2DC1               	goto	u5795
 18736  0DC6  3001               	movlw	1
 18737  0DC7  02B0               	subwf	___ftdiv@cntr,f
 18738  0DC8  1D03               	btfss	3,2
 18739  0DC9  2DA7               	goto	l6815
 18740  0DCA  0831               	movf	___ftdiv@f3,w
 18741  0DCB  00F2               	movwf	___ftpack@arg
 18742  0DCC  0832               	movf	___ftdiv@f3+1,w
 18743  0DCD  00F3               	movwf	___ftpack@arg+1
 18744  0DCE  0833               	movf	___ftdiv@f3+2,w
 18745  0DCF  00F4               	movwf	___ftpack@arg+2
 18746  0DD0  0834               	movf	___ftdiv@exp,w
 18747  0DD1  00AC               	movwf	??___ftdiv
 18748  0DD2  082C               	movf	??___ftdiv,w
 18749  0DD3  00F5               	movwf	___ftpack@exp
 18750  0DD4  0835               	movf	___ftdiv@sign,w
 18751  0DD5  00AD               	movwf	??___ftdiv+1
 18752  0DD6  082D               	movf	??___ftdiv+1,w
 18753  0DD7  00F6               	movwf	___ftpack@sign
 18754  0DD8  3195  25AB         	fcall	___ftpack
 18755  0DDA  0872               	movf	?___ftpack,w
 18756  0DDB  0020               	movlb	0	; select bank0
 18757  0DDC  00A6               	movwf	?___ftdiv
 18758  0DDD  0873               	movf	?___ftpack+1,w
 18759  0DDE  00A7               	movwf	?___ftdiv+1
 18760  0DDF  0874               	movf	?___ftpack+2,w
 18761  0DE0  00A8               	movwf	?___ftdiv+2
 18762  0DE1  0008               	return
 18763  0DE2                     __end_of___ftdiv:	
 18764                           
 18765                           	psect	text128
 18766  0364                     __ptext128:	
 18767 ;; *************** function ___ftadd *****************
 18768 ;; Defined at:
 18769 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 18770 ;; Parameters:    Size  Location     Type
 18771 ;;  f1              3   25[BANK0 ] float 
 18772 ;;  f2              3   28[BANK0 ] float 
 18773 ;; Auto vars:     Size  Location     Type
 18774 ;;  exp1            1   37[BANK0 ] unsigned char 
 18775 ;;  exp2            1   36[BANK0 ] unsigned char 
 18776 ;;  sign            1   35[BANK0 ] unsigned char 
 18777 ;; Return value:  Size  Location     Type
 18778 ;;                  3   25[BANK0 ] float 
 18779 ;; Registers used:
 18780 ;;		wreg, status,2, status,0, pclath, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 0/0
 18783 ;;		On exit  : 0/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18787 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18789 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18790 ;;Total ram usage:       13 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    4
 18793 ;; This function calls:
 18794 ;;		___ftpack
 18795 ;; This function is called by:
 18796 ;;		_getDimmerLights_PercentToValue
 18797 ;;		_getDimmerLights_ValueToPercent
 18798 ;; This function uses a non-reentrant model
 18799 ;;
 18800                           
 18801                           
 18802                           ;psect for function ___ftadd
 18803  0364                     ___ftadd:	
 18804                           
 18805                           ;incstack = 0
 18806                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18807  0364  0020               	movlb	0	; select bank0
 18808  0365  0839               	movf	___ftadd@f1,w
 18809  0366  00BF               	movwf	??___ftadd
 18810  0367  083A               	movf	___ftadd@f1+1,w
 18811  0368  00C0               	movwf	??___ftadd+1
 18812  0369  083B               	movf	___ftadd@f1+2,w
 18813  036A  00C1               	movwf	??___ftadd+2
 18814  036B  1003               	clrc
 18815  036C  0D40               	rlf	??___ftadd+1,w
 18816  036D  0D41               	rlf	??___ftadd+2,w
 18817  036E  00C2               	movwf	??___ftadd+3
 18818  036F  0842               	movf	??___ftadd+3,w
 18819  0370  00C5               	movwf	___ftadd@exp1
 18820  0371  083C               	movf	___ftadd@f2,w
 18821  0372  00BF               	movwf	??___ftadd
 18822  0373  083D               	movf	___ftadd@f2+1,w
 18823  0374  00C0               	movwf	??___ftadd+1
 18824  0375  083E               	movf	___ftadd@f2+2,w
 18825  0376  00C1               	movwf	??___ftadd+2
 18826  0377  1003               	clrc
 18827  0378  0D40               	rlf	??___ftadd+1,w
 18828  0379  0D41               	rlf	??___ftadd+2,w
 18829  037A  00C2               	movwf	??___ftadd+3
 18830  037B  0842               	movf	??___ftadd+3,w
 18831  037C  00C4               	movwf	___ftadd@exp2
 18832  037D  0845               	movf	___ftadd@exp1,w
 18833  037E  1903               	btfsc	3,2
 18834  037F  2B8C               	goto	l6725
 18835  0380  0844               	movf	___ftadd@exp2,w
 18836  0381  0245               	subwf	___ftadd@exp1,w
 18837  0382  1803               	skipnc
 18838  0383  2B93               	goto	l6729
 18839  0384  0345               	decf	___ftadd@exp1,w
 18840  0385  3AFF               	xorlw	255
 18841  0386  0744               	addwf	___ftadd@exp2,w
 18842  0387  00BF               	movwf	??___ftadd
 18843  0388  3019               	movlw	25
 18844  0389  023F               	subwf	??___ftadd,w
 18845  038A  1C03               	skipc
 18846  038B  2B93               	goto	l6729
 18847  038C                     l6725:	
 18848  038C  083C               	movf	___ftadd@f2,w
 18849  038D  00B9               	movwf	?___ftadd
 18850  038E  083D               	movf	___ftadd@f2+1,w
 18851  038F  00BA               	movwf	?___ftadd+1
 18852  0390  083E               	movf	___ftadd@f2+2,w
 18853  0391  00BB               	movwf	?___ftadd+2
 18854  0392  0008               	return
 18855  0393                     l6729:	
 18856  0393  0844               	movf	___ftadd@exp2,w
 18857  0394  1903               	btfsc	3,2
 18858  0395  0008               	return
 18859  0396  0845               	movf	___ftadd@exp1,w
 18860  0397  0244               	subwf	___ftadd@exp2,w
 18861  0398  1803               	skipnc
 18862  0399  2BA2               	goto	l6735
 18863  039A  0344               	decf	___ftadd@exp2,w
 18864  039B  3AFF               	xorlw	255
 18865  039C  0745               	addwf	___ftadd@exp1,w
 18866  039D  00BF               	movwf	??___ftadd
 18867  039E  3019               	movlw	25
 18868  039F  023F               	subwf	??___ftadd,w
 18869  03A0  1803               	btfsc	3,0
 18870  03A1  0008               	return
 18871  03A2                     l6735:	
 18872  03A2  3006               	movlw	6
 18873  03A3  00BF               	movwf	??___ftadd
 18874  03A4  083F               	movf	??___ftadd,w
 18875  03A5  00C3               	movwf	___ftadd@sign
 18876  03A6  1BBB               	btfsc	___ftadd@f1+2,7
 18877  03A7  17C3               	bsf	___ftadd@sign,7
 18878  03A8  1BBE               	btfsc	___ftadd@f2+2,7
 18879  03A9  1743               	bsf	___ftadd@sign,6
 18880  03AA  17BA               	bsf	___ftadd@f1+1,7
 18881  03AB  30FF               	movlw	255
 18882  03AC  05B9               	andwf	___ftadd@f1,f
 18883  03AD  30FF               	movlw	255
 18884  03AE  05BA               	andwf	___ftadd@f1+1,f
 18885  03AF  3000               	movlw	0
 18886  03B0  05BB               	andwf	___ftadd@f1+2,f
 18887  03B1  17BD               	bsf	___ftadd@f2+1,7
 18888  03B2  30FF               	movlw	255
 18889  03B3  05BC               	andwf	___ftadd@f2,f
 18890  03B4  30FF               	movlw	255
 18891  03B5  05BD               	andwf	___ftadd@f2+1,f
 18892  03B6  3000               	movlw	0
 18893  03B7  05BE               	andwf	___ftadd@f2+2,f
 18894  03B8  0844               	movf	___ftadd@exp2,w
 18895  03B9  0245               	subwf	___ftadd@exp1,w
 18896  03BA  1803               	skipnc
 18897  03BB  2BDE               	goto	l6757
 18898  03BC                     l6747:	
 18899  03BC  3001               	movlw	1
 18900  03BD                     u5595:	
 18901  03BD  35BC               	lslf	___ftadd@f2,f
 18902  03BE  0DBD               	rlf	___ftadd@f2+1,f
 18903  03BF  0DBE               	rlf	___ftadd@f2+2,f
 18904  03C0  0B89               	decfsz	9,f
 18905  03C1  2BBD               	goto	u5595
 18906  03C2  3001               	movlw	1
 18907  03C3  02C4               	subwf	___ftadd@exp2,f
 18908  03C4  0844               	movf	___ftadd@exp2,w
 18909  03C5  0645               	xorwf	___ftadd@exp1,w
 18910  03C6  1903               	skipnz
 18911  03C7  2BD9               	goto	l6755
 18912  03C8  3001               	movlw	1
 18913  03C9  02C3               	subwf	___ftadd@sign,f
 18914  03CA  0843               	movf	___ftadd@sign,w
 18915  03CB  3907               	andlw	7
 18916  03CC  1903               	btfsc	3,2
 18917  03CD  2BD9               	goto	l6755
 18918  03CE  2BBC               	goto	l6747
 18919  03CF                     l6753:	
 18920  03CF  3001               	movlw	1
 18921  03D0                     u5625:	
 18922  03D0  36BB               	lsrf	___ftadd@f1+2,f
 18923  03D1  0CBA               	rrf	___ftadd@f1+1,f
 18924  03D2  0CB9               	rrf	___ftadd@f1,f
 18925  03D3  0B89               	decfsz	9,f
 18926  03D4  2BD0               	goto	u5625
 18927  03D5  3001               	movlw	1
 18928  03D6  00BF               	movwf	??___ftadd
 18929  03D7  083F               	movf	??___ftadd,w
 18930  03D8  07C5               	addwf	___ftadd@exp1,f
 18931  03D9                     l6755:	
 18932  03D9  0845               	movf	___ftadd@exp1,w
 18933  03DA  0644               	xorwf	___ftadd@exp2,w
 18934  03DB  1903               	btfsc	3,2
 18935  03DC  2C03               	goto	l3302
 18936  03DD  2BCF               	goto	l6753
 18937  03DE                     l6757:	
 18938  03DE  0845               	movf	___ftadd@exp1,w
 18939  03DF  0244               	subwf	___ftadd@exp2,w
 18940  03E0  1803               	skipnc
 18941  03E1  2C03               	goto	l3302
 18942  03E2                     l6759:	
 18943  03E2  3001               	movlw	1
 18944  03E3                     u5655:	
 18945  03E3  35B9               	lslf	___ftadd@f1,f
 18946  03E4  0DBA               	rlf	___ftadd@f1+1,f
 18947  03E5  0DBB               	rlf	___ftadd@f1+2,f
 18948  03E6  0B89               	decfsz	9,f
 18949  03E7  2BE3               	goto	u5655
 18950  03E8  3001               	movlw	1
 18951  03E9  02C5               	subwf	___ftadd@exp1,f
 18952  03EA  0844               	movf	___ftadd@exp2,w
 18953  03EB  0645               	xorwf	___ftadd@exp1,w
 18954  03EC  1903               	skipnz
 18955  03ED  2BFF               	goto	l6767
 18956  03EE  3001               	movlw	1
 18957  03EF  02C3               	subwf	___ftadd@sign,f
 18958  03F0  0843               	movf	___ftadd@sign,w
 18959  03F1  3907               	andlw	7
 18960  03F2  1903               	btfsc	3,2
 18961  03F3  2BFF               	goto	l6767
 18962  03F4  2BE2               	goto	l6759
 18963  03F5                     l6765:	
 18964  03F5  3001               	movlw	1
 18965  03F6                     u5685:	
 18966  03F6  36BE               	lsrf	___ftadd@f2+2,f
 18967  03F7  0CBD               	rrf	___ftadd@f2+1,f
 18968  03F8  0CBC               	rrf	___ftadd@f2,f
 18969  03F9  0B89               	decfsz	9,f
 18970  03FA  2BF6               	goto	u5685
 18971  03FB  3001               	movlw	1
 18972  03FC  00BF               	movwf	??___ftadd
 18973  03FD  083F               	movf	??___ftadd,w
 18974  03FE  07C4               	addwf	___ftadd@exp2,f
 18975  03FF                     l6767:	
 18976  03FF  0845               	movf	___ftadd@exp1,w
 18977  0400  0644               	xorwf	___ftadd@exp2,w
 18978  0401  1D03               	skipz
 18979  0402  2BF5               	goto	l6765
 18980  0403                     l3302:	
 18981  0403  1FC3               	btfss	___ftadd@sign,7
 18982  0404  2C15               	goto	l6771
 18983  0405  30FF               	movlw	255
 18984  0406  06B9               	xorwf	___ftadd@f1,f
 18985  0407  30FF               	movlw	255
 18986  0408  06BA               	xorwf	___ftadd@f1+1,f
 18987  0409  30FF               	movlw	255
 18988  040A  06BB               	xorwf	___ftadd@f1+2,f
 18989  040B  3001               	movlw	1
 18990  040C  07B9               	addwf	___ftadd@f1,f
 18991  040D  3000               	movlw	0
 18992  040E  1803               	skipnc
 18993  040F  3001               	movlw	1
 18994  0410  07BA               	addwf	___ftadd@f1+1,f
 18995  0411  3000               	movlw	0
 18996  0412  1803               	skipnc
 18997  0413  3001               	movlw	1
 18998  0414  07BB               	addwf	___ftadd@f1+2,f
 18999  0415                     l6771:	
 19000  0415  1F43               	btfss	___ftadd@sign,6
 19001  0416  2C27               	goto	l6775
 19002  0417  30FF               	movlw	255
 19003  0418  06BC               	xorwf	___ftadd@f2,f
 19004  0419  30FF               	movlw	255
 19005  041A  06BD               	xorwf	___ftadd@f2+1,f
 19006  041B  30FF               	movlw	255
 19007  041C  06BE               	xorwf	___ftadd@f2+2,f
 19008  041D  3001               	movlw	1
 19009  041E  07BC               	addwf	___ftadd@f2,f
 19010  041F  3000               	movlw	0
 19011  0420  1803               	skipnc
 19012  0421  3001               	movlw	1
 19013  0422  07BD               	addwf	___ftadd@f2+1,f
 19014  0423  3000               	movlw	0
 19015  0424  1803               	skipnc
 19016  0425  3001               	movlw	1
 19017  0426  07BE               	addwf	___ftadd@f2+2,f
 19018  0427                     l6775:	
 19019  0427  01C3               	clrf	___ftadd@sign
 19020  0428  0839               	movf	___ftadd@f1,w
 19021  0429  07BC               	addwf	___ftadd@f2,f
 19022  042A  083A               	movf	___ftadd@f1+1,w
 19023  042B  3DBD               	addwfc	___ftadd@f2+1,f
 19024  042C  083B               	movf	___ftadd@f1+2,w
 19025  042D  3DBE               	addwfc	___ftadd@f2+2,f
 19026  042E  1FBE               	btfss	___ftadd@f2+2,7
 19027  042F  2C42               	goto	l6785
 19028  0430  30FF               	movlw	255
 19029  0431  06BC               	xorwf	___ftadd@f2,f
 19030  0432  30FF               	movlw	255
 19031  0433  06BD               	xorwf	___ftadd@f2+1,f
 19032  0434  30FF               	movlw	255
 19033  0435  06BE               	xorwf	___ftadd@f2+2,f
 19034  0436  3001               	movlw	1
 19035  0437  07BC               	addwf	___ftadd@f2,f
 19036  0438  3000               	movlw	0
 19037  0439  1803               	skipnc
 19038  043A  3001               	movlw	1
 19039  043B  07BD               	addwf	___ftadd@f2+1,f
 19040  043C  3000               	movlw	0
 19041  043D  1803               	skipnc
 19042  043E  3001               	movlw	1
 19043  043F  07BE               	addwf	___ftadd@f2+2,f
 19044  0440  01C3               	clrf	___ftadd@sign
 19045  0441  0AC3               	incf	___ftadd@sign,f
 19046  0442                     l6785:	
 19047  0442  083C               	movf	___ftadd@f2,w
 19048  0443  00F2               	movwf	___ftpack@arg
 19049  0444  083D               	movf	___ftadd@f2+1,w
 19050  0445  00F3               	movwf	___ftpack@arg+1
 19051  0446  083E               	movf	___ftadd@f2+2,w
 19052  0447  00F4               	movwf	___ftpack@arg+2
 19053  0448  0845               	movf	___ftadd@exp1,w
 19054  0449  00BF               	movwf	??___ftadd
 19055  044A  083F               	movf	??___ftadd,w
 19056  044B  00F5               	movwf	___ftpack@exp
 19057  044C  0843               	movf	___ftadd@sign,w
 19058  044D  00C0               	movwf	??___ftadd+1
 19059  044E  0840               	movf	??___ftadd+1,w
 19060  044F  00F6               	movwf	___ftpack@sign
 19061  0450  3195  25AB         	fcall	___ftpack
 19062  0452  0872               	movf	?___ftpack,w
 19063  0453  0020               	movlb	0	; select bank0
 19064  0454  00B9               	movwf	?___ftadd
 19065  0455  0873               	movf	?___ftpack+1,w
 19066  0456  00BA               	movwf	?___ftadd+1
 19067  0457  0874               	movf	?___ftpack+2,w
 19068  0458  00BB               	movwf	?___ftadd+2
 19069  0459  0008               	return
 19070  045A                     __end_of___ftadd:	
 19071                           
 19072                           	psect	text129
 19073  1CE8                     __ptext129:	
 19074 ;; *************** function ___awtoft *****************
 19075 ;; Defined at:
 19076 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19077 ;; Parameters:    Size  Location     Type
 19078 ;;  c               2    0[BANK0 ] int 
 19079 ;; Auto vars:     Size  Location     Type
 19080 ;;  sign            1    5[BANK0 ] unsigned char 
 19081 ;; Return value:  Size  Location     Type
 19082 ;;                  3    0[BANK0 ] float 
 19083 ;; Registers used:
 19084 ;;		wreg, status,2, status,0, pclath, cstack
 19085 ;; Tracked objects:
 19086 ;;		On entry : 0/0
 19087 ;;		On exit  : 0/0
 19088 ;;		Unchanged: 0/0
 19089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19090 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19094 ;;Total ram usage:        6 bytes
 19095 ;; Hardware stack levels used:    1
 19096 ;; Hardware stack levels required when called:    4
 19097 ;; This function calls:
 19098 ;;		___ftpack
 19099 ;; This function is called by:
 19100 ;;		_getDimmerLights_PercentToValue
 19101 ;;		_getDimmerLights_ValueToPercent
 19102 ;; This function uses a non-reentrant model
 19103 ;;
 19104                           
 19105                           
 19106                           ;psect for function ___awtoft
 19107  1CE8                     ___awtoft:	
 19108                           
 19109                           ;incstack = 0
 19110                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19111  1CE8  0020               	movlb	0	; select bank0
 19112  1CE9  01A5               	clrf	___awtoft@sign
 19113  1CEA  1FA1               	btfss	___awtoft@c+1,7
 19114  1CEB  2CF3               	goto	l9689
 19115  1CEC  09A0               	comf	___awtoft@c,f
 19116  1CED  09A1               	comf	___awtoft@c+1,f
 19117  1CEE  0AA0               	incf	___awtoft@c,f
 19118  1CEF  1903               	skipnz
 19119  1CF0  0AA1               	incf	___awtoft@c+1,f
 19120  1CF1  01A5               	clrf	___awtoft@sign
 19121  1CF2  0AA5               	incf	___awtoft@sign,f
 19122  1CF3                     l9689:	
 19123  1CF3  0820               	movf	___awtoft@c,w
 19124  1CF4  00F2               	movwf	___ftpack@arg
 19125  1CF5  0821               	movf	___awtoft@c+1,w
 19126  1CF6  00F3               	movwf	___ftpack@arg+1
 19127  1CF7  01F4               	clrf	___ftpack@arg+2
 19128  1CF8  308E               	movlw	142
 19129  1CF9  00A3               	movwf	??___awtoft
 19130  1CFA  0823               	movf	??___awtoft,w
 19131  1CFB  00F5               	movwf	___ftpack@exp
 19132  1CFC  0825               	movf	___awtoft@sign,w
 19133  1CFD  00A4               	movwf	??___awtoft+1
 19134  1CFE  0824               	movf	??___awtoft+1,w
 19135  1CFF  00F6               	movwf	___ftpack@sign
 19136  1D00  3195  25AB         	fcall	___ftpack
 19137  1D02  0872               	movf	?___ftpack,w
 19138  1D03  0020               	movlb	0	; select bank0
 19139  1D04  00A0               	movwf	?___awtoft
 19140  1D05  0873               	movf	?___ftpack+1,w
 19141  1D06  00A1               	movwf	?___awtoft+1
 19142  1D07  0874               	movf	?___ftpack+2,w
 19143  1D08  00A2               	movwf	?___awtoft+2
 19144  1D09  0008               	return
 19145  1D0A                     __end_of___awtoft:	
 19146                           
 19147                           	psect	text130
 19148  15AB                     __ptext130:	
 19149 ;; *************** function ___ftpack *****************
 19150 ;; Defined at:
 19151 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19152 ;; Parameters:    Size  Location     Type
 19153 ;;  arg             3    2[COMMON] unsigned um
 19154 ;;  exp             1    5[COMMON] unsigned char 
 19155 ;;  sign            1    6[COMMON] unsigned char 
 19156 ;; Auto vars:     Size  Location     Type
 19157 ;;		None
 19158 ;; Return value:  Size  Location     Type
 19159 ;;                  3    2[COMMON] float 
 19160 ;; Registers used:
 19161 ;;		wreg, status,2, status,0
 19162 ;; Tracked objects:
 19163 ;;		On entry : 0/0
 19164 ;;		On exit  : 0/0
 19165 ;;		Unchanged: 0/0
 19166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19167 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19169 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19170 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19171 ;;Total ram usage:        8 bytes
 19172 ;; Hardware stack levels used:    1
 19173 ;; Hardware stack levels required when called:    3
 19174 ;; This function calls:
 19175 ;;		Nothing
 19176 ;; This function is called by:
 19177 ;;		___awtoft
 19178 ;;		___ftadd
 19179 ;;		___ftdiv
 19180 ;;		___ftmul
 19181 ;; This function uses a non-reentrant model
 19182 ;;
 19183                           
 19184                           
 19185                           ;psect for function ___ftpack
 19186  15AB                     ___ftpack:	
 19187                           
 19188                           ;incstack = 0
 19189                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19190  15AB  0875               	movf	___ftpack@exp,w
 19191  15AC  1903               	btfsc	3,2
 19192  15AD  2DB3               	goto	l6559
 19193  15AE  0874               	movf	___ftpack@arg+2,w
 19194  15AF  0473               	iorwf	___ftpack@arg+1,w
 19195  15B0  0472               	iorwf	___ftpack@arg,w
 19196  15B1  1D03               	skipz
 19197  15B2  2DC4               	goto	l6565
 19198  15B3                     l6559:	
 19199  15B3  3000               	movlw	0
 19200  15B4  00F2               	movwf	?___ftpack
 19201  15B5  3000               	movlw	0
 19202  15B6  00F3               	movwf	?___ftpack+1
 19203  15B7  3000               	movlw	0
 19204  15B8  00F4               	movwf	?___ftpack+2
 19205  15B9  0008               	return
 19206  15BA                     l6563:	
 19207  15BA  3001               	movlw	1
 19208  15BB  00F7               	movwf	??___ftpack
 19209  15BC  0877               	movf	??___ftpack,w
 19210  15BD  07F5               	addwf	___ftpack@exp,f
 19211  15BE  3001               	movlw	1
 19212  15BF                     u5185:	
 19213  15BF  36F4               	lsrf	___ftpack@arg+2,f
 19214  15C0  0CF3               	rrf	___ftpack@arg+1,f
 19215  15C1  0CF2               	rrf	___ftpack@arg,f
 19216  15C2  0B89               	decfsz	9,f
 19217  15C3  2DBF               	goto	u5185
 19218  15C4                     l6565:	
 19219  15C4  30FE               	movlw	254
 19220  15C5  0574               	andwf	___ftpack@arg+2,w
 19221  15C6  1903               	btfsc	3,2
 19222  15C7  2DDD               	goto	l3273
 19223  15C8  2DBA               	goto	l6563
 19224  15C9                     l6567:	
 19225  15C9  3001               	movlw	1
 19226  15CA  00F7               	movwf	??___ftpack
 19227  15CB  0877               	movf	??___ftpack,w
 19228  15CC  07F5               	addwf	___ftpack@exp,f
 19229  15CD  3001               	movlw	1
 19230  15CE  07F2               	addwf	___ftpack@arg,f
 19231  15CF  3000               	movlw	0
 19232  15D0  1803               	skipnc
 19233  15D1  3001               	movlw	1
 19234  15D2  07F3               	addwf	___ftpack@arg+1,f
 19235  15D3  3000               	movlw	0
 19236  15D4  1803               	skipnc
 19237  15D5  3001               	movlw	1
 19238  15D6  07F4               	addwf	___ftpack@arg+2,f
 19239  15D7  3001               	movlw	1
 19240  15D8                     u5205:	
 19241  15D8  36F4               	lsrf	___ftpack@arg+2,f
 19242  15D9  0CF3               	rrf	___ftpack@arg+1,f
 19243  15DA  0CF2               	rrf	___ftpack@arg,f
 19244  15DB  0B89               	decfsz	9,f
 19245  15DC  2DD8               	goto	u5205
 19246  15DD                     l3273:	
 19247  15DD  30FF               	movlw	255
 19248  15DE  0574               	andwf	___ftpack@arg+2,w
 19249  15DF  1903               	btfsc	3,2
 19250  15E0  2DEA               	goto	l6575
 19251  15E1  2DC9               	goto	l6567
 19252  15E2                     l6573:	
 19253  15E2  3001               	movlw	1
 19254  15E3  02F5               	subwf	___ftpack@exp,f
 19255  15E4  3001               	movlw	1
 19256  15E5                     u5225:	
 19257  15E5  35F2               	lslf	___ftpack@arg,f
 19258  15E6  0DF3               	rlf	___ftpack@arg+1,f
 19259  15E7  0DF4               	rlf	___ftpack@arg+2,f
 19260  15E8  0B89               	decfsz	9,f
 19261  15E9  2DE5               	goto	u5225
 19262  15EA                     l6575:	
 19263  15EA  1FF3               	btfss	___ftpack@arg+1,7
 19264  15EB  2DE2               	goto	l6573
 19265  15EC  1875               	btfsc	___ftpack@exp,0
 19266  15ED  2DF4               	goto	l3279
 19267  15EE  30FF               	movlw	255
 19268  15EF  05F2               	andwf	___ftpack@arg,f
 19269  15F0  307F               	movlw	127
 19270  15F1  05F3               	andwf	___ftpack@arg+1,f
 19271  15F2  30FF               	movlw	255
 19272  15F3  05F4               	andwf	___ftpack@arg+2,f
 19273  15F4                     l3279:	
 19274  15F4  1003               	clrc
 19275  15F5  0CF5               	rrf	___ftpack@exp,f
 19276  15F6  0875               	movf	___ftpack@exp,w
 19277  15F7  00F7               	movwf	??___ftpack
 19278  15F8  01F8               	clrf	??___ftpack+1
 19279  15F9  01F9               	clrf	??___ftpack+2
 19280  15FA  3010               	movlw	16
 19281  15FB                     u5255:	
 19282  15FB  35F7               	lslf	??___ftpack,f
 19283  15FC  0DF8               	rlf	??___ftpack+1,f
 19284  15FD  0DF9               	rlf	??___ftpack+2,f
 19285  15FE  0B89               	decfsz	9,f
 19286  15FF  2DFB               	goto	u5255
 19287  1600  0877               	movf	??___ftpack,w
 19288  1601  04F2               	iorwf	___ftpack@arg,f
 19289  1602  0878               	movf	??___ftpack+1,w
 19290  1603  04F3               	iorwf	___ftpack@arg+1,f
 19291  1604  0879               	movf	??___ftpack+2,w
 19292  1605  04F4               	iorwf	___ftpack@arg+2,f
 19293  1606  0876               	movf	___ftpack@sign,w
 19294  1607  1903               	btfsc	3,2
 19295  1608  0008               	return
 19296  1609  17F4               	bsf	___ftpack@arg+2,7
 19297  160A  0008               	return
 19298  160B                     __end_of___ftpack:	
 19299                           
 19300                           	psect	text131
 19301  193B                     __ptext131:	
 19302 ;; *************** function _Division *****************
 19303 ;; Defined at:
 19304 ;;		line 2398 in file "../src/Dimmer_B1.c"
 19305 ;; Parameters:    Size  Location     Type
 19306 ;;  value           1    wreg     unsigned char 
 19307 ;;  num             1    7[COMMON] unsigned char 
 19308 ;; Auto vars:     Size  Location     Type
 19309 ;;  value           1    0[BANK0 ] unsigned char 
 19310 ;;  result          1    1[BANK0 ] unsigned char 
 19311 ;; Return value:  Size  Location     Type
 19312 ;;                  1    wreg      unsigned char 
 19313 ;; Registers used:
 19314 ;;		wreg, status,2, status,0, pclath, cstack
 19315 ;; Tracked objects:
 19316 ;;		On entry : 0/0
 19317 ;;		On exit  : 0/0
 19318 ;;		Unchanged: 0/0
 19319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19320 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19324 ;;Total ram usage:        5 bytes
 19325 ;; Hardware stack levels used:    1
 19326 ;; Hardware stack levels required when called:    4
 19327 ;; This function calls:
 19328 ;;		___lbdiv
 19329 ;; This function is called by:
 19330 ;;		_DimmerIntr_Initialization
 19331 ;;		_DimmerIntr_ValueCalculate
 19332 ;; This function uses a non-reentrant model
 19333 ;;
 19334                           
 19335                           
 19336                           ;psect for function _Division
 19337  193B                     _Division:	
 19338                           
 19339                           ;incstack = 0
 19340                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19341                           ;Division@value stored from wreg
 19342  193B  0020               	movlb	0	; select bank0
 19343  193C  00A0               	movwf	Division@value
 19344                           
 19345                           ;Dimmer_B1.c: 2399: char result = (char) (value / num);
 19346  193D  0877               	movf	Division@num,w
 19347  193E  00F8               	movwf	??_Division
 19348  193F  0878               	movf	??_Division,w
 19349  1940  00F2               	movwf	___lbdiv@divisor
 19350  1941  0820               	movf	Division@value,w
 19351  1942  319C  24A5         	fcall	___lbdiv
 19352  1944  00F9               	movwf	??_Division+1
 19353  1945  0879               	movf	??_Division+1,w
 19354  1946  0020               	movlb	0	; select bank0
 19355  1947  00A1               	movwf	Division@result
 19356                           
 19357                           ;Dimmer_B1.c: 2400: return result;
 19358  1948  0821               	movf	Division@result,w
 19359  1949  0008               	return
 19360  194A                     __end_of_Division:	
 19361                           
 19362                           	psect	text132
 19363  1CA5                     __ptext132:	
 19364 ;; *************** function ___lbdiv *****************
 19365 ;; Defined at:
 19366 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19367 ;; Parameters:    Size  Location     Type
 19368 ;;  dividend        1    wreg     unsigned char 
 19369 ;;  divisor         1    2[COMMON] unsigned char 
 19370 ;; Auto vars:     Size  Location     Type
 19371 ;;  dividend        1    4[COMMON] unsigned char 
 19372 ;;  quotient        1    6[COMMON] unsigned char 
 19373 ;;  counter         1    5[COMMON] unsigned char 
 19374 ;; Return value:  Size  Location     Type
 19375 ;;                  1    wreg      unsigned char 
 19376 ;; Registers used:
 19377 ;;		wreg, status,2, status,0
 19378 ;; Tracked objects:
 19379 ;;		On entry : 0/0
 19380 ;;		On exit  : 0/0
 19381 ;;		Unchanged: 0/0
 19382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19383 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19384 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19386 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19387 ;;Total ram usage:        5 bytes
 19388 ;; Hardware stack levels used:    1
 19389 ;; Hardware stack levels required when called:    3
 19390 ;; This function calls:
 19391 ;;		Nothing
 19392 ;; This function is called by:
 19393 ;;		_Division
 19394 ;; This function uses a non-reentrant model
 19395 ;;
 19396                           
 19397                           
 19398                           ;psect for function ___lbdiv
 19399  1CA5                     ___lbdiv:	
 19400                           
 19401                           ;incstack = 0
 19402                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19403                           ;___lbdiv@dividend stored from wreg
 19404  1CA5  00F4               	movwf	___lbdiv@dividend
 19405  1CA6  01F6               	clrf	___lbdiv@quotient
 19406  1CA7  0872               	movf	___lbdiv@divisor,w
 19407  1CA8  1903               	btfsc	3,2
 19408  1CA9  2CC4               	goto	l9791
 19409  1CAA  01F5               	clrf	___lbdiv@counter
 19410  1CAB  0AF5               	incf	___lbdiv@counter,f
 19411  1CAC                     l9779:	
 19412  1CAC  1BF2               	btfsc	___lbdiv@divisor,7
 19413  1CAD  2CB5               	goto	l9781
 19414  1CAE  1003               	clrc
 19415  1CAF  0DF2               	rlf	___lbdiv@divisor,f
 19416  1CB0  3001               	movlw	1
 19417  1CB1  00F3               	movwf	??___lbdiv
 19418  1CB2  0873               	movf	??___lbdiv,w
 19419  1CB3  07F5               	addwf	___lbdiv@counter,f
 19420  1CB4  2CAC               	goto	l9779
 19421  1CB5                     l9781:	
 19422  1CB5  1003               	clrc
 19423  1CB6  0DF6               	rlf	___lbdiv@quotient,f
 19424  1CB7  0872               	movf	___lbdiv@divisor,w
 19425  1CB8  0274               	subwf	___lbdiv@dividend,w
 19426  1CB9  1C03               	skipc
 19427  1CBA  2CBF               	goto	L13
 19428  1CBB  0872               	movf	___lbdiv@divisor,w
 19429  1CBC  02F4               	subwf	___lbdiv@dividend,f
 19430  1CBD  1476               	bsf	___lbdiv@quotient,0
 19431  1CBE  1003               	clrc
 19432  1CBF                     L13:	
 19433  1CBF  0CF2               	rrf	___lbdiv@divisor,f
 19434  1CC0  3001               	movlw	1
 19435  1CC1  02F5               	subwf	___lbdiv@counter,f
 19436  1CC2  1D03               	btfss	3,2
 19437  1CC3  2CB5               	goto	l9781
 19438  1CC4                     l9791:	
 19439  1CC4  0876               	movf	___lbdiv@quotient,w
 19440  1CC5  0008               	return
 19441  1CC6                     __end_of___lbdiv:	
 19442                           
 19443                           	psect	text133
 19444  1847                     __ptext133:	
 19445 ;; *************** function _DelayOff_Main *****************
 19446 ;; Defined at:
 19447 ;;		line 41 in file "../src/DelayOff_B1.c"
 19448 ;; Parameters:    Size  Location     Type
 19449 ;;		None
 19450 ;; Auto vars:     Size  Location     Type
 19451 ;;		None
 19452 ;; Return value:  Size  Location     Type
 19453 ;;		None               void
 19454 ;; Registers used:
 19455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19456 ;; Tracked objects:
 19457 ;;		On entry : 0/0
 19458 ;;		On exit  : 0/0
 19459 ;;		Unchanged: 0/0
 19460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19465 ;;Total ram usage:        0 bytes
 19466 ;; Hardware stack levels used:    1
 19467 ;; Hardware stack levels required when called:    7
 19468 ;; This function calls:
 19469 ;;		_DlyOff_Main
 19470 ;; This function is called by:
 19471 ;;		_main
 19472 ;; This function uses a non-reentrant model
 19473 ;;
 19474                           
 19475                           
 19476                           ;psect for function _DelayOff_Main
 19477  1847                     _DelayOff_Main:	
 19478                           
 19479                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19480                           
 19481                           ;incstack = 0
 19482                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19483  1847  3001               	movlw	1
 19484  1848  3188  20F9  3198   	fcall	_DlyOff_Main
 19485                           
 19486                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19487  184B  3002               	movlw	2
 19488  184C  3188  20F9         	fcall	_DlyOff_Main
 19489  184E  0008               	return
 19490  184F                     __end_of_DelayOff_Main:	
 19491                           
 19492                           	psect	text134
 19493  08F9                     __ptext134:	
 19494 ;; *************** function _DlyOff_Main *****************
 19495 ;; Defined at:
 19496 ;;		line 61 in file "../src/DelayOff_B1.c"
 19497 ;; Parameters:    Size  Location     Type
 19498 ;;  sw              1    wreg     unsigned char 
 19499 ;; Auto vars:     Size  Location     Type
 19500 ;;  sw              1   63[BANK0 ] unsigned char 
 19501 ;; Return value:  Size  Location     Type
 19502 ;;		None               void
 19503 ;; Registers used:
 19504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19505 ;; Tracked objects:
 19506 ;;		On entry : 0/0
 19507 ;;		On exit  : 0/0
 19508 ;;		Unchanged: 0/0
 19509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19512 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19513 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19514 ;;Total ram usage:        3 bytes
 19515 ;; Hardware stack levels used:    1
 19516 ;; Hardware stack levels required when called:    6
 19517 ;; This function calls:
 19518 ;;		_DelayOffPointSelect
 19519 ;;		_getDimmerLights_Status
 19520 ;;		_setDimmerLights_SwOff
 19521 ;;		_setDimmerLights_SwOn
 19522 ;;		_setProductData
 19523 ;; This function is called by:
 19524 ;;		_DelayOff_Main
 19525 ;; This function uses a non-reentrant model
 19526 ;;
 19527                           
 19528                           
 19529                           ;psect for function _DlyOff_Main
 19530  08F9                     _DlyOff_Main:	
 19531                           
 19532                           ;incstack = 0
 19533                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19534                           ;DlyOff_Main@sw stored from wreg
 19535  08F9  0020               	movlb	0	; select bank0
 19536  08FA  00DF               	movwf	DlyOff_Main@sw
 19537                           
 19538                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19539  08FB  085F               	movf	DlyOff_Main@sw,w
 19540  08FC  319A  2240  3188   	fcall	_DelayOffPointSelect
 19541                           
 19542                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19543  08FF  0021               	movlb	1	; select bank1
 19544  0900  086A               	movf	_DelayOff^(0+128),w
 19545  0901  0086               	movwf	6
 19546  0902  3001               	movlw	1	; select bank2/3
 19547  0903  0087               	movwf	7
 19548  0904  1C81               	btfss	1,1
 19549  0905  0008               	return
 19550                           
 19551                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19552  0906  086A               	movf	_DelayOff^(0+128),w
 19553  0907  3E02               	addlw	2
 19554  0908  0086               	movwf	6
 19555  0909  3001               	movlw	1	; select bank2/3
 19556  090A  0087               	movwf	7
 19557  090B  3001               	movlw	1
 19558  090C  0781               	addwf	1,f
 19559  090D  3141               	addfsr 1,1
 19560  090E  1803               	skipnc
 19561  090F  0A81               	incf	1,f
 19562                           
 19563                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 19564  0910  086A               	movf	_DelayOff^(0+128),w
 19565  0911  3E02               	addlw	2
 19566  0912  0086               	movwf	6
 19567  0913  3001               	movlw	1	; select bank2/3
 19568  0914  0087               	movwf	7
 19569  0915  3F40               	moviw [0]fsr1
 19570  0916  0020               	movlb	0	; select bank0
 19571  0917  00DD               	movwf	??_DlyOff_Main
 19572  0918  3F41               	moviw [1]fsr1
 19573  0919  00DE               	movwf	??_DlyOff_Main+1
 19574  091A  3009               	movlw	9
 19575  091B  025E               	subwf	??_DlyOff_Main+1,w
 19576  091C  30C4               	movlw	196
 19577  091D  1903               	skipnz
 19578  091E  025D               	subwf	??_DlyOff_Main,w
 19579  091F  1C03               	skipc
 19580  0920  0008               	return
 19581                           
 19582                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19583  0921  0021               	movlb	1	; select bank1
 19584  0922  086A               	movf	_DelayOff^(0+128),w
 19585  0923  3E02               	addlw	2
 19586  0924  0086               	movwf	6
 19587  0925  3001               	movlw	1	; select bank2/3
 19588  0926  0087               	movwf	7
 19589  0927  3000               	movlw	0
 19590  0928  3FC0               	movwi [0]fsr1
 19591  0929  3FC1               	movwi [1]fsr1
 19592                           
 19593                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19594  092A  3001               	movlw	1
 19595  092B  0020               	movlb	0	; select bank0
 19596  092C  00DD               	movwf	??_DlyOff_Main
 19597  092D  0021               	movlb	1	; select bank1
 19598  092E  086A               	movf	_DelayOff^(0+128),w
 19599  092F  3E04               	addlw	4
 19600  0930  0086               	movwf	6
 19601  0931  3001               	movlw	1	; select bank2/3
 19602  0932  0087               	movwf	7
 19603  0933  0020               	movlb	0	; select bank0
 19604  0934  085D               	movf	??_DlyOff_Main,w
 19605  0935  0781               	addwf	1,f
 19606                           
 19607                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19608  0936  0021               	movlb	1	; select bank1
 19609  0937  086A               	movf	_DelayOff^(0+128),w
 19610  0938  3E04               	addlw	4
 19611  0939  0086               	movwf	6
 19612  093A  3001               	movlw	1	; select bank2/3
 19613  093B  0087               	movwf	7
 19614  093C  0A6A               	incf	_DelayOff^(0+128),w
 19615  093D  0084               	movwf	4
 19616  093E  3001               	movlw	1	; select bank2/3
 19617  093F  0085               	movwf	5
 19618  0940  0800               	movf	0,w
 19619  0941  0201               	subwf	1,w
 19620  0942  1C03               	skipc
 19621  0943  0008               	return
 19622                           
 19623                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19624  0944  086A               	movf	_DelayOff^(0+128),w
 19625  0945  3E04               	addlw	4
 19626  0946  0086               	movwf	6
 19627  0947  3001               	movlw	1	; select bank2/3
 19628  0948  0087               	movwf	7
 19629  0949  0181               	clrf	1
 19630                           
 19631                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19632  094A  086A               	movf	_DelayOff^(0+128),w
 19633  094B  0086               	movwf	6
 19634  094C  3001               	movlw	1	; select bank2/3
 19635  094D  0087               	movwf	7
 19636  094E  1081               	bcf	1,1
 19637                           
 19638                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19639  094F  0020               	movlb	0	; select bank0
 19640  0950  085F               	movf	DlyOff_Main@sw,w
 19641  0951  3199  212C  3188   	fcall	_getDimmerLights_Status
 19642  0954  3A01               	xorlw	1
 19643  0955  1D03               	skipz
 19644  0956  2961               	goto	l589
 19645                           
 19646                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19647  0957  0020               	movlb	0	; select bank0
 19648  0958  085F               	movf	DlyOff_Main@sw,w
 19649  0959  3187  2784  3188   	fcall	_setDimmerLights_SwOn
 19650                           
 19651                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19652  095C  0020               	movlb	0	; select bank0
 19653  095D  085F               	movf	DlyOff_Main@sw,w
 19654  095E  3191  2122  3188   	fcall	_setDimmerLights_SwOff
 19655  0961                     l589:	
 19656                           
 19657                           ;DelayOff_B1.c: 78: }
 19658                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19659  0961  0020               	movlb	0	; select bank0
 19660  0962  01DA               	clrf	setProductData@value
 19661  0963  085F               	movf	DlyOff_Main@sw,w
 19662  0964  3E1A               	addlw	26
 19663  0965  3198  20C6         	fcall	_setProductData
 19664  0967  0008               	return
 19665  0968                     __end_of_DlyOff_Main:	
 19666                           
 19667                           	psect	text135
 19668  18C6                     __ptext135:	
 19669 ;; *************** function _setProductData *****************
 19670 ;; Defined at:
 19671 ;;		line 650 in file "../src/Main_B1.c"
 19672 ;; Parameters:    Size  Location     Type
 19673 ;;  address         1    wreg     unsigned char 
 19674 ;;  value           1   58[BANK0 ] unsigned char 
 19675 ;; Auto vars:     Size  Location     Type
 19676 ;;  address         1   60[BANK0 ] unsigned char 
 19677 ;; Return value:  Size  Location     Type
 19678 ;;		None               void
 19679 ;; Registers used:
 19680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19681 ;; Tracked objects:
 19682 ;;		On entry : 0/0
 19683 ;;		On exit  : 0/0
 19684 ;;		Unchanged: 0/0
 19685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19686 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19690 ;;Total ram usage:        3 bytes
 19691 ;; Hardware stack levels used:    1
 19692 ;; Hardware stack levels required when called:    3
 19693 ;; This function calls:
 19694 ;;		Nothing
 19695 ;; This function is called by:
 19696 ;;		_DlyOff_Main
 19697 ;;		_setDelayOff_GO
 19698 ;;		_setDimmerLights_OnOff
 19699 ;;		_setDimmerLights_Dimming
 19700 ;;		_setTemp_Main
 19701 ;;		_setLog_Code
 19702 ;;		_setControl_Lights_Table
 19703 ;;		_setRFSW_AdjControl
 19704 ;;		_setRF_DimmerLights
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708                           
 19709                           ;psect for function _setProductData
 19710  18C6                     _setProductData:	
 19711                           
 19712                           ;incstack = 0
 19713                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19714                           ;setProductData@address stored from wreg
 19715  18C6  0020               	movlb	0	; select bank0
 19716  18C7  00DC               	movwf	setProductData@address
 19717                           
 19718                           ;Main_B1.c: 651: _product.Data[address] = value;
 19719  18C8  085A               	movf	setProductData@value,w
 19720  18C9  00DB               	movwf	??_setProductData
 19721  18CA  085C               	movf	setProductData@address,w
 19722  18CB  3EA0               	addlw	__product& (0+255)
 19723  18CC  0086               	movwf	6
 19724  18CD  3002               	movlw	2	; select bank5/6
 19725  18CE  0087               	movwf	7
 19726  18CF  085B               	movf	??_setProductData,w
 19727  18D0  0081               	movwf	1
 19728  18D1  0008               	return
 19729  18D2                     __end_of_setProductData:	
 19730                           
 19731                           	psect	text136
 19732  0784                     __ptext136:	
 19733 ;; *************** function _setDimmerLights_SwOn *****************
 19734 ;; Defined at:
 19735 ;;		line 759 in file "../src/Dimmer_B1.c"
 19736 ;; Parameters:    Size  Location     Type
 19737 ;;  sw              1    wreg     unsigned char 
 19738 ;; Auto vars:     Size  Location     Type
 19739 ;;  sw              1   10[BANK0 ] unsigned char 
 19740 ;;  idle            1    9[BANK0 ] unsigned char 
 19741 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
 19742 ;; Return value:  Size  Location     Type
 19743 ;;		None               void
 19744 ;; Registers used:
 19745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19746 ;; Tracked objects:
 19747 ;;		On entry : 0/0
 19748 ;;		On exit  : 0/0
 19749 ;;		Unchanged: 0/0
 19750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19752 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19753 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19754 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19755 ;;Total ram usage:        6 bytes
 19756 ;; Hardware stack levels used:    1
 19757 ;; Hardware stack levels required when called:    5
 19758 ;; This function calls:
 19759 ;;		_DimmerLights_SelectPointer
 19760 ;;		_getDimmerIntr_Dimming_Sw
 19761 ;;		_setBuz
 19762 ;; This function is called by:
 19763 ;;		_DlyOff_Main
 19764 ;;		_setControl_Lights_Table
 19765 ;;		_setRFSW_Control
 19766 ;;		_setRFSW_AdjControl
 19767 ;;		_setSw_Main
 19768 ;; This function uses a non-reentrant model
 19769 ;;
 19770                           
 19771                           
 19772                           ;psect for function _setDimmerLights_SwOn
 19773  0784                     _setDimmerLights_SwOn:	
 19774                           
 19775                           ;incstack = 0
 19776                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19777                           ;setDimmerLights_SwOn@sw stored from wreg
 19778  0784  0020               	movlb	0	; select bank0
 19779  0785  00AA               	movwf	setDimmerLights_SwOn@sw
 19780                           
 19781                           ;Dimmer_B1.c: 760: char idle = 0;
 19782  0786  01A9               	clrf	setDimmerLights_SwOn@idle
 19783                           
 19784                           ;Dimmer_B1.c: 762: char dimmingStatus = 0;
 19785  0787  01A6               	clrf	setDimmerLights_SwOn@dimmingStatus
 19786                           
 19787                           ;Dimmer_B1.c: 763: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19788  0788  082A               	movf	setDimmerLights_SwOn@sw,w
 19789  0789  319A  22E8  3187   	fcall	_getDimmerIntr_Dimming_Sw
 19790  078C  00F9               	movwf	??_setDimmerLights_SwOn
 19791  078D  0879               	movf	??_setDimmerLights_SwOn,w
 19792  078E  0020               	movlb	0	; select bank0
 19793  078F  00A6               	movwf	setDimmerLights_SwOn@dimmingStatus
 19794                           
 19795                           ;Dimmer_B1.c: 767: if (idle == 0) {
 19796  0790  08A9               	movf	setDimmerLights_SwOn@idle,f
 19797  0791  1D03               	skipz
 19798  0792  2FB7               	goto	l9745
 19799                           
 19800                           ;Dimmer_B1.c: 768: if (sw == 1) {
 19801  0793  082A               	movf	setDimmerLights_SwOn@sw,w
 19802  0794  3A01               	xorlw	1
 19803  0795  1D03               	skipz
 19804  0796  2FA4               	goto	l9735
 19805                           
 19806                           ;Dimmer_B1.c: 769: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19807  0797  01A7               	clrf	_setDimmerLights_SwOn$2659
 19808  0798  0AA7               	incf	_setDimmerLights_SwOn$2659,f
 19809  0799  0023               	movlb	3	; select bank3
 19810  079A  1A47               	btfsc	_DimmerLights2^(0+384),4
 19811  079B  2FA1               	goto	l9733
 19812  079C  0021               	movlb	1	; select bank1
 19813  079D  1A30               	btfsc	_DimmerIntr2^(0+128),4
 19814  079E  2FA1               	goto	l9733
 19815  079F  0020               	movlb	0	; select bank0
 19816  07A0  01A7               	clrf	_setDimmerLights_SwOn$2659
 19817  07A1                     l9733:	
 19818  07A1  0020               	movlb	0	; select bank0
 19819  07A2  0827               	movf	_setDimmerLights_SwOn$2659,w
 19820  07A3  2FB4               	goto	L14
 19821  07A4                     l9735:	
 19822                           ;Dimmer_B1.c: 770: } else if (sw == 2) {
 19823                           
 19824  07A4  082A               	movf	setDimmerLights_SwOn@sw,w
 19825  07A5  3A02               	xorlw	2
 19826  07A6  1D03               	skipz
 19827  07A7  2FB7               	goto	l9745
 19828                           
 19829                           ;Dimmer_B1.c: 771: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19830  07A8  01A8               	clrf	_setDimmerLights_SwOn$2668
 19831  07A9  0AA8               	incf	_setDimmerLights_SwOn$2668,f
 19832  07AA  0023               	movlb	3	; select bank3
 19833  07AB  1A3E               	btfsc	_DimmerLights1^(0+384),4
 19834  07AC  2FB2               	goto	l9743
 19835  07AD  0021               	movlb	1	; select bank1
 19836  07AE  1A20               	btfsc	_DimmerIntr1^(0+128),4
 19837  07AF  2FB2               	goto	l9743
 19838  07B0  0020               	movlb	0	; select bank0
 19839  07B1  01A8               	clrf	_setDimmerLights_SwOn$2668
 19840  07B2                     l9743:	
 19841  07B2  0020               	movlb	0	; select bank0
 19842  07B3  0828               	movf	_setDimmerLights_SwOn$2668,w
 19843  07B4                     L14:	
 19844  07B4  00F9               	movwf	??_setDimmerLights_SwOn
 19845  07B5  0879               	movf	??_setDimmerLights_SwOn,w
 19846  07B6  00A9               	movwf	setDimmerLights_SwOn@idle
 19847  07B7                     l9745:	
 19848                           
 19849                           ;Dimmer_B1.c: 772: }
 19850                           ;Dimmer_B1.c: 773: }
 19851                           ;Dimmer_B1.c: 790: DimmerLights_SelectPointer(sw);
 19852  07B7  082A               	movf	setDimmerLights_SwOn@sw,w
 19853  07B8  319A  2255  3187   	fcall	_DimmerLights_SelectPointer
 19854                           
 19855                           ;Dimmer_B1.c: 791: if (idle == 0) {
 19856  07BB  0020               	movlb	0	; select bank0
 19857  07BC  08A9               	movf	setDimmerLights_SwOn@idle,f
 19858  07BD  1D03               	skipz
 19859  07BE  0008               	return
 19860                           
 19861                           ;Dimmer_B1.c: 793: if (dimmingStatus == 0) {
 19862  07BF  08A6               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19863  07C0  1D03               	skipz
 19864  07C1  2FE5               	goto	l9757
 19865                           
 19866                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 1;
 19867  07C2  086C               	movf	_DimmerLights,w
 19868  07C3  0086               	movwf	6
 19869  07C4  3001               	movlw	1	; select bank2/3
 19870  07C5  0087               	movwf	7
 19871  07C6  1401               	bsf	1,0
 19872                           
 19873                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 0) {
 19874  07C7  0A6C               	incf	_DimmerLights,w
 19875  07C8  0086               	movwf	6
 19876  07C9  3001               	movlw	1	; select bank2/3
 19877  07CA  0087               	movwf	7
 19878  07CB  1801               	btfsc	1,0
 19879  07CC  2FDF               	goto	l9755
 19880                           
 19881                           ;Dimmer_B1.c: 796: DimmerLights->Status = 1;
 19882  07CD  0A6C               	incf	_DimmerLights,w
 19883  07CE  0086               	movwf	6
 19884  07CF  3001               	movlw	1	; select bank2/3
 19885  07D0  0087               	movwf	7
 19886  07D1  1401               	bsf	1,0
 19887                           
 19888                           ;Dimmer_B1.c: 802: DimmerLights->Phase = 1;
 19889  07D2  086C               	movf	_DimmerLights,w
 19890  07D3  3E02               	addlw	2
 19891  07D4  0086               	movwf	6
 19892  07D5  3001               	movlw	1	; select bank2/3
 19893  07D6  0087               	movwf	7
 19894  07D7  1401               	bsf	1,0
 19895                           
 19896                           ;Dimmer_B1.c: 803: DimmerLights->PhaseSwitch = 1;
 19897  07D8  086C               	movf	_DimmerLights,w
 19898  07D9  3E02               	addlw	2
 19899  07DA  0086               	movwf	6
 19900  07DB  3001               	movlw	1	; select bank2/3
 19901  07DC  0087               	movwf	7
 19902  07DD  1501               	bsf	1,2
 19903                           
 19904                           ;Dimmer_B1.c: 807: } else {
 19905  07DE  2FEF               	goto	l9759
 19906  07DF                     l9755:	
 19907                           
 19908                           ;Dimmer_B1.c: 808: DimmerLights->Status = 0;
 19909  07DF  0A6C               	incf	_DimmerLights,w
 19910  07E0  0086               	movwf	6
 19911  07E1  3001               	movlw	1	; select bank2/3
 19912  07E2  0087               	movwf	7
 19913  07E3  1001               	bcf	1,0
 19914                           
 19915                           ;Dimmer_B1.c: 809: }
 19916                           ;Dimmer_B1.c: 810: } else {
 19917  07E4  2FEF               	goto	l9759
 19918  07E5                     l9757:	
 19919                           
 19920                           ;Dimmer_B1.c: 811: DimmerLights->DimmingTrigger = 1;
 19921  07E5  086C               	movf	_DimmerLights,w
 19922  07E6  0086               	movwf	6
 19923  07E7  3001               	movlw	1	; select bank2/3
 19924  07E8  0087               	movwf	7
 19925  07E9  1601               	bsf	1,4
 19926                           
 19927                           ;Dimmer_B1.c: 812: DimmerLights->DimmingSwitch = 0;
 19928  07EA  086C               	movf	_DimmerLights,w
 19929  07EB  0086               	movwf	6
 19930  07EC  3001               	movlw	1	; select bank2/3
 19931  07ED  0087               	movwf	7
 19932  07EE  1281               	bcf	1,5
 19933  07EF                     l9759:	
 19934                           
 19935                           ;Dimmer_B1.c: 813: }
 19936                           ;Dimmer_B1.c: 814: setBuz(1, 100);
 19937  07EF  3064               	movlw	100
 19938  07F0  00A4               	movwf	setBuz@time
 19939  07F1  3000               	movlw	0
 19940  07F2  00A5               	movwf	setBuz@time+1
 19941  07F3  3001               	movlw	1
 19942  07F4  3192  22EC         	fcall	_setBuz
 19943  07F6  0008               	return
 19944  07F7                     __end_of_setDimmerLights_SwOn:	
 19945                           
 19946                           	psect	text137
 19947  12EC                     __ptext137:	
 19948 ;; *************** function _setBuz *****************
 19949 ;; Defined at:
 19950 ;;		line 22 in file "../src/Buzzer_B1.c"
 19951 ;; Parameters:    Size  Location     Type
 19952 ;;  count           1    wreg     unsigned char 
 19953 ;;  time            2    4[BANK0 ] int 
 19954 ;; Auto vars:     Size  Location     Type
 19955 ;;  count           1    8[COMMON] unsigned char 
 19956 ;; Return value:  Size  Location     Type
 19957 ;;		None               void
 19958 ;; Registers used:
 19959 ;;		wreg, status,2, status,0, pclath, cstack
 19960 ;; Tracked objects:
 19961 ;;		On entry : 0/0
 19962 ;;		On exit  : 0/0
 19963 ;;		Unchanged: 0/0
 19964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19968 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19969 ;;Total ram usage:        4 bytes
 19970 ;; Hardware stack levels used:    1
 19971 ;; Hardware stack levels required when called:    4
 19972 ;; This function calls:
 19973 ;;		___awdiv
 19974 ;; This function is called by:
 19975 ;;		_setDimmerLights_SwOn
 19976 ;;		_setDimmerLights_Dimming
 19977 ;;		_my_MainTimer
 19978 ;;		_Exception_Main
 19979 ;;		_setTemp_Main
 19980 ;;		_setLog_Code
 19981 ;;		_setRFSW_Control
 19982 ;;		_setRFSW_AdjControl
 19983 ;;		_setSw_Main
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           
 19988                           ;psect for function _setBuz
 19989  12EC                     _setBuz:	
 19990                           
 19991                           ;incstack = 0
 19992                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 19993                           ;setBuz@count stored from wreg
 19994  12EC  00F8               	movwf	setBuz@count
 19995                           
 19996                           ;Buzzer_B1.c: 23: time /= 20;
 19997  12ED  3014               	movlw	20
 19998  12EE  00F2               	movwf	___awdiv@divisor
 19999  12EF  3000               	movlw	0
 20000  12F0  00F3               	movwf	___awdiv@divisor+1
 20001  12F1  0020               	movlb	0	; select bank0
 20002  12F2  0825               	movf	setBuz@time+1,w
 20003  12F3  01F5               	clrf	___awdiv@dividend+1
 20004  12F4  07F5               	addwf	___awdiv@dividend+1,f
 20005  12F5  0824               	movf	setBuz@time,w
 20006  12F6  01F4               	clrf	___awdiv@dividend
 20007  12F7  07F4               	addwf	___awdiv@dividend,f
 20008  12F8  3193  233F  3192   	fcall	___awdiv
 20009  12FB  0873               	movf	?___awdiv+1,w
 20010  12FC  0020               	movlb	0	; select bank0
 20011  12FD  01A5               	clrf	setBuz@time+1
 20012  12FE  07A5               	addwf	setBuz@time+1,f
 20013  12FF  0872               	movf	?___awdiv,w
 20014  1300  01A4               	clrf	setBuz@time
 20015  1301  07A4               	addwf	setBuz@time,f
 20016                           
 20017                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20018  1302  0021               	movlb	1	; select bank1
 20019  1303  1C5C               	btfss	_Buz1^(0+128),0
 20020  1304  0008               	return
 20021                           
 20022                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20023  1305  18DC               	btfsc	_Buz1^(0+128),1
 20024  1306  2B1B               	goto	l100
 20025                           
 20026                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20027  1307  14DC               	bsf	_Buz1^(0+128),1
 20028                           
 20029                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20030  1308  01DD               	clrf	(_Buz1^(0+128)+1)
 20031  1309  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20032                           
 20033                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20034  130A  0878               	movf	setBuz@count,w
 20035  130B  00F7               	movwf	??_setBuz
 20036  130C  0877               	movf	??_setBuz,w
 20037  130D  00DF               	movwf	(_Buz1^(0+128)+3)
 20038                           
 20039                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20040  130E  0020               	movlb	0	; select bank0
 20041  130F  0825               	movf	setBuz@time+1,w
 20042  1310  0021               	movlb	1	; select bank1
 20043  1311  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20044  1312  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20045  1313  0020               	movlb	0	; select bank0
 20046  1314  0824               	movf	setBuz@time,w
 20047  1315  0021               	movlb	1	; select bank1
 20048  1316  01E2               	clrf	(_Buz1^(0+128)+6)
 20049  1317  07E2               	addwf	(_Buz1^(0+128)+6),f
 20050                           
 20051                           ;Buzzer_B1.c: 30: RB3 = 1;
 20052  1318  0020               	movlb	0	; select bank0
 20053  1319  158D               	bsf	13,3	;volatile
 20054                           
 20055                           ;Buzzer_B1.c: 31: } else {
 20056  131A  0008               	return
 20057  131B                     l100:	
 20058                           
 20059                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20060  131B  19DC               	btfsc	_Buz1^(0+128),3
 20061  131C  2B2D               	goto	l102
 20062                           
 20063                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20064  131D  15DC               	bsf	_Buz1^(0+128),3
 20065                           
 20066                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20067  131E  0878               	movf	setBuz@count,w
 20068  131F  00F7               	movwf	??_setBuz
 20069  1320  0877               	movf	??_setBuz,w
 20070  1321  00E0               	movwf	(_Buz1^(0+128)+4)
 20071                           
 20072                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20073  1322  0020               	movlb	0	; select bank0
 20074  1323  0825               	movf	setBuz@time+1,w
 20075  1324  0021               	movlb	1	; select bank1
 20076  1325  01E5               	clrf	((_Buz1+1)^(0+128)+8)
 20077  1326  07E5               	addwf	((_Buz1+1)^(0+128)+8),f
 20078  1327  0020               	movlb	0	; select bank0
 20079  1328  0824               	movf	setBuz@time,w
 20080  1329  0021               	movlb	1	; select bank1
 20081  132A  01E4               	clrf	(_Buz1^(0+128)+8)
 20082  132B  07E4               	addwf	(_Buz1^(0+128)+8),f
 20083                           
 20084                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20085  132C  0008               	return
 20086  132D                     l102:	
 20087  132D  1A5C               	btfsc	_Buz1^(0+128),4
 20088  132E  0008               	return
 20089                           
 20090                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20091  132F  165C               	bsf	_Buz1^(0+128),4
 20092                           
 20093                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20094  1330  0878               	movf	setBuz@count,w
 20095  1331  00F7               	movwf	??_setBuz
 20096  1332  0877               	movf	??_setBuz,w
 20097  1333  00E1               	movwf	(_Buz1^(0+128)+5)
 20098                           
 20099                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20100  1334  0020               	movlb	0	; select bank0
 20101  1335  0825               	movf	setBuz@time+1,w
 20102  1336  0021               	movlb	1	; select bank1
 20103  1337  01E7               	clrf	((_Buz1+1)^(0+128)+10)
 20104  1338  07E7               	addwf	((_Buz1+1)^(0+128)+10),f
 20105  1339  0020               	movlb	0	; select bank0
 20106  133A  0824               	movf	setBuz@time,w
 20107  133B  0021               	movlb	1	; select bank1
 20108  133C  01E6               	clrf	(_Buz1^(0+128)+10)
 20109  133D  07E6               	addwf	(_Buz1^(0+128)+10),f
 20110  133E  0008               	return
 20111  133F                     __end_of_setBuz:	
 20112                           
 20113                           	psect	text138
 20114  133F                     __ptext138:	
 20115 ;; *************** function ___awdiv *****************
 20116 ;; Defined at:
 20117 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20118 ;; Parameters:    Size  Location     Type
 20119 ;;  divisor         2    2[COMMON] int 
 20120 ;;  dividend        2    4[COMMON] int 
 20121 ;; Auto vars:     Size  Location     Type
 20122 ;;  quotient        2    2[BANK0 ] int 
 20123 ;;  sign            1    1[BANK0 ] unsigned char 
 20124 ;;  counter         1    0[BANK0 ] unsigned char 
 20125 ;; Return value:  Size  Location     Type
 20126 ;;                  2    2[COMMON] int 
 20127 ;; Registers used:
 20128 ;;		wreg, status,2, status,0
 20129 ;; Tracked objects:
 20130 ;;		On entry : 0/0
 20131 ;;		On exit  : 0/0
 20132 ;;		Unchanged: 0/0
 20133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20135 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20137 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20138 ;;Total ram usage:        9 bytes
 20139 ;; Hardware stack levels used:    1
 20140 ;; Hardware stack levels required when called:    3
 20141 ;; This function calls:
 20142 ;;		Nothing
 20143 ;; This function is called by:
 20144 ;;		_setBuz
 20145 ;; This function uses a non-reentrant model
 20146 ;;
 20147                           
 20148                           
 20149                           ;psect for function ___awdiv
 20150  133F                     ___awdiv:	
 20151                           
 20152                           ;incstack = 0
 20153                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20154  133F  0020               	movlb	0	; select bank0
 20155  1340  01A1               	clrf	___awdiv@sign
 20156  1341  1FF3               	btfss	___awdiv@divisor+1,7
 20157  1342  2B4A               	goto	l9617
 20158  1343  09F2               	comf	___awdiv@divisor,f
 20159  1344  09F3               	comf	___awdiv@divisor+1,f
 20160  1345  0AF2               	incf	___awdiv@divisor,f
 20161  1346  1903               	skipnz
 20162  1347  0AF3               	incf	___awdiv@divisor+1,f
 20163  1348  01A1               	clrf	___awdiv@sign
 20164  1349  0AA1               	incf	___awdiv@sign,f
 20165  134A                     l9617:	
 20166  134A  1FF5               	btfss	___awdiv@dividend+1,7
 20167  134B  2B55               	goto	l9623
 20168  134C  09F4               	comf	___awdiv@dividend,f
 20169  134D  09F5               	comf	___awdiv@dividend+1,f
 20170  134E  0AF4               	incf	___awdiv@dividend,f
 20171  134F  1903               	skipnz
 20172  1350  0AF5               	incf	___awdiv@dividend+1,f
 20173  1351  3001               	movlw	1
 20174  1352  00F6               	movwf	??___awdiv
 20175  1353  0876               	movf	??___awdiv,w
 20176  1354  06A1               	xorwf	___awdiv@sign,f
 20177  1355                     l9623:	
 20178  1355  01A2               	clrf	___awdiv@quotient
 20179  1356  01A3               	clrf	___awdiv@quotient+1
 20180  1357  0873               	movf	___awdiv@divisor+1,w
 20181  1358  0472               	iorwf	___awdiv@divisor,w
 20182  1359  1903               	skipnz
 20183  135A  2B84               	goto	l9645
 20184  135B  01A0               	clrf	___awdiv@counter
 20185  135C  0AA0               	incf	___awdiv@counter,f
 20186  135D                     l9633:	
 20187  135D  1BF3               	btfsc	___awdiv@divisor+1,7
 20188  135E  2B69               	goto	l9635
 20189  135F  3001               	movlw	1
 20190  1360                     u10345:	
 20191  1360  35F2               	lslf	___awdiv@divisor,f
 20192  1361  0DF3               	rlf	___awdiv@divisor+1,f
 20193  1362  0B89               	decfsz	9,f
 20194  1363  2B60               	goto	u10345
 20195  1364  3001               	movlw	1
 20196  1365  00F6               	movwf	??___awdiv
 20197  1366  0876               	movf	??___awdiv,w
 20198  1367  07A0               	addwf	___awdiv@counter,f
 20199  1368  2B5D               	goto	l9633
 20200  1369                     l9635:	
 20201  1369  3001               	movlw	1
 20202  136A                     u10365:	
 20203  136A  35A2               	lslf	___awdiv@quotient,f
 20204  136B  0DA3               	rlf	___awdiv@quotient+1,f
 20205  136C  0B89               	decfsz	9,f
 20206  136D  2B6A               	goto	u10365
 20207  136E  0873               	movf	___awdiv@divisor+1,w
 20208  136F  0275               	subwf	___awdiv@dividend+1,w
 20209  1370  1D03               	skipz
 20210  1371  2B74               	goto	u10375
 20211  1372  0872               	movf	___awdiv@divisor,w
 20212  1373  0274               	subwf	___awdiv@dividend,w
 20213  1374                     u10375:	
 20214  1374  1C03               	skipc
 20215  1375  2B7B               	goto	l9641
 20216  1376  0872               	movf	___awdiv@divisor,w
 20217  1377  02F4               	subwf	___awdiv@dividend,f
 20218  1378  0873               	movf	___awdiv@divisor+1,w
 20219  1379  3BF5               	subwfb	___awdiv@dividend+1,f
 20220  137A  1422               	bsf	___awdiv@quotient,0
 20221  137B                     l9641:	
 20222  137B  3001               	movlw	1
 20223  137C                     u10385:	
 20224  137C  36F3               	lsrf	___awdiv@divisor+1,f
 20225  137D  0CF2               	rrf	___awdiv@divisor,f
 20226  137E  0B89               	decfsz	9,f
 20227  137F  2B7C               	goto	u10385
 20228  1380  3001               	movlw	1
 20229  1381  02A0               	subwf	___awdiv@counter,f
 20230  1382  1D03               	btfss	3,2
 20231  1383  2B69               	goto	l9635
 20232  1384                     l9645:	
 20233  1384  0821               	movf	___awdiv@sign,w
 20234  1385  1903               	btfsc	3,2
 20235  1386  2B8C               	goto	l9649
 20236  1387  09A2               	comf	___awdiv@quotient,f
 20237  1388  09A3               	comf	___awdiv@quotient+1,f
 20238  1389  0AA2               	incf	___awdiv@quotient,f
 20239  138A  1903               	skipnz
 20240  138B  0AA3               	incf	___awdiv@quotient+1,f
 20241  138C                     l9649:	
 20242  138C  0823               	movf	___awdiv@quotient+1,w
 20243  138D  01F3               	clrf	?___awdiv+1
 20244  138E  07F3               	addwf	?___awdiv+1,f
 20245  138F  0822               	movf	___awdiv@quotient,w
 20246  1390  01F2               	clrf	?___awdiv
 20247  1391  07F2               	addwf	?___awdiv,f
 20248  1392  0008               	return
 20249  1393                     __end_of___awdiv:	
 20250                           
 20251                           	psect	text139
 20252  1AE8                     __ptext139:	
 20253 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20254 ;; Defined at:
 20255 ;;		line 269 in file "../src/Dimmer_B1.c"
 20256 ;; Parameters:    Size  Location     Type
 20257 ;;  lights          1    wreg     unsigned char 
 20258 ;; Auto vars:     Size  Location     Type
 20259 ;;  lights          1    3[COMMON] unsigned char 
 20260 ;;  status          1    2[COMMON] unsigned char 
 20261 ;; Return value:  Size  Location     Type
 20262 ;;                  1    wreg      unsigned char 
 20263 ;; Registers used:
 20264 ;;		wreg, status,2
 20265 ;; Tracked objects:
 20266 ;;		On entry : 0/0
 20267 ;;		On exit  : 0/0
 20268 ;;		Unchanged: 0/0
 20269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20274 ;;Total ram usage:        2 bytes
 20275 ;; Hardware stack levels used:    1
 20276 ;; Hardware stack levels required when called:    3
 20277 ;; This function calls:
 20278 ;;		Nothing
 20279 ;; This function is called by:
 20280 ;;		_setDimmerLights_SwOn
 20281 ;;		_setRF_AdjControl
 20282 ;; This function uses a non-reentrant model
 20283 ;;
 20284                           
 20285                           
 20286                           ;psect for function _getDimmerIntr_Dimming_Sw
 20287  1AE8                     _getDimmerIntr_Dimming_Sw:	
 20288                           
 20289                           ;incstack = 0
 20290                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20291                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20292  1AE8  00F3               	movwf	getDimmerIntr_Dimming_Sw@lights
 20293                           
 20294                           ;Dimmer_B1.c: 270: char status = 0;
 20295  1AE9  01F2               	clrf	getDimmerIntr_Dimming_Sw@status
 20296                           
 20297                           ;Dimmer_B1.c: 272: if (lights == 1) {
 20298  1AEA  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20299  1AEB  3A01               	xorlw	1
 20300  1AEC  1D03               	skipz
 20301  1AED  2AF3               	goto	l6673
 20302                           
 20303                           ;Dimmer_B1.c: 273: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20304  1AEE  3000               	movlw	0
 20305  1AEF  0021               	movlb	1	; select bank1
 20306  1AF0  1A20               	btfsc	_DimmerIntr1^(0+128),4
 20307  1AF1  3001               	movlw	1
 20308  1AF2  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20309  1AF3                     l6673:	
 20310                           
 20311                           ;Dimmer_B1.c: 274: }
 20312                           ;Dimmer_B1.c: 277: if (lights == 2) {
 20313  1AF3  0873               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20314  1AF4  3A02               	xorlw	2
 20315  1AF5  1D03               	skipz
 20316  1AF6  2AFC               	goto	l6677
 20317                           
 20318                           ;Dimmer_B1.c: 278: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20319  1AF7  3000               	movlw	0
 20320  1AF8  0021               	movlb	1	; select bank1
 20321  1AF9  1A30               	btfsc	_DimmerIntr2^(0+128),4
 20322  1AFA  3001               	movlw	1
 20323  1AFB  00F2               	movwf	getDimmerIntr_Dimming_Sw@status
 20324  1AFC                     l6677:	
 20325                           
 20326                           ;Dimmer_B1.c: 279: }
 20327                           ;Dimmer_B1.c: 287: return status;
 20328  1AFC  0872               	movf	getDimmerIntr_Dimming_Sw@status,w
 20329  1AFD  0008               	return
 20330  1AFE                     __end_of_getDimmerIntr_Dimming_Sw:	
 20331                           
 20332                           	psect	text140
 20333  1122                     __ptext140:	
 20334 ;; *************** function _setDimmerLights_SwOff *****************
 20335 ;; Defined at:
 20336 ;;		line 819 in file "../src/Dimmer_B1.c"
 20337 ;; Parameters:    Size  Location     Type
 20338 ;;  sw              1    wreg     unsigned char 
 20339 ;; Auto vars:     Size  Location     Type
 20340 ;;  sw              1    4[COMMON] unsigned char 
 20341 ;; Return value:  Size  Location     Type
 20342 ;;		None               void
 20343 ;; Registers used:
 20344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20345 ;; Tracked objects:
 20346 ;;		On entry : 0/0
 20347 ;;		On exit  : 0/0
 20348 ;;		Unchanged: 0/0
 20349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20354 ;;Total ram usage:        1 bytes
 20355 ;; Hardware stack levels used:    1
 20356 ;; Hardware stack levels required when called:    4
 20357 ;; This function calls:
 20358 ;;		_DimmerLights_SelectPointer
 20359 ;; This function is called by:
 20360 ;;		_DlyOff_Main
 20361 ;;		_Exception_Main
 20362 ;;		_setControl_Lights_Table
 20363 ;;		_setRFSW_Control
 20364 ;;		_setRFSW_AdjControl
 20365 ;;		_setSw_Main
 20366 ;; This function uses a non-reentrant model
 20367 ;;
 20368                           
 20369                           
 20370                           ;psect for function _setDimmerLights_SwOff
 20371  1122                     _setDimmerLights_SwOff:	
 20372                           
 20373                           ;incstack = 0
 20374                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20375                           ;setDimmerLights_SwOff@sw stored from wreg
 20376  1122  00F4               	movwf	setDimmerLights_SwOff@sw
 20377                           
 20378                           ;Dimmer_B1.c: 821: DimmerLights_SelectPointer(sw);
 20379  1123  0874               	movf	setDimmerLights_SwOff@sw,w
 20380  1124  319A  2255  3191   	fcall	_DimmerLights_SelectPointer
 20381                           
 20382                           ;Dimmer_B1.c: 823: if (DimmerLights->SwFlag == 1) {
 20383  1127  0020               	movlb	0	; select bank0
 20384  1128  086C               	movf	_DimmerLights,w
 20385  1129  0086               	movwf	6
 20386  112A  3001               	movlw	1	; select bank2/3
 20387  112B  0087               	movwf	7
 20388  112C  1C01               	btfss	1,0
 20389  112D  0008               	return
 20390                           
 20391                           ;Dimmer_B1.c: 824: DimmerLights->SwFlag = 0;
 20392  112E  086C               	movf	_DimmerLights,w
 20393  112F  0086               	movwf	6
 20394  1130  3001               	movlw	1	; select bank2/3
 20395  1131  0087               	movwf	7
 20396  1132  1001               	bcf	1,0
 20397                           
 20398                           ;Dimmer_B1.c: 825: if (DimmerLights->Status == 1) {
 20399  1133  0A6C               	incf	_DimmerLights,w
 20400  1134  0086               	movwf	6
 20401  1135  3001               	movlw	1	; select bank2/3
 20402  1136  0087               	movwf	7
 20403  1137  1C01               	btfss	1,0
 20404  1138  294F               	goto	l7019
 20405                           
 20406                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwFlag == 1) {
 20407  1139  086C               	movf	_DimmerLights,w
 20408  113A  0086               	movwf	6
 20409  113B  3001               	movlw	1	; select bank2/3
 20410  113C  0087               	movwf	7
 20411  113D  1D81               	btfss	1,3
 20412  113E  0008               	return
 20413                           
 20414                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 0;
 20415  113F  086C               	movf	_DimmerLights,w
 20416  1140  0086               	movwf	6
 20417  1141  3001               	movlw	1	; select bank2/3
 20418  1142  0087               	movwf	7
 20419  1143  1181               	bcf	1,3
 20420                           
 20421                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 1;
 20422  1144  086C               	movf	_DimmerLights,w
 20423  1145  0086               	movwf	6
 20424  1146  3001               	movlw	1	; select bank2/3
 20425  1147  0087               	movwf	7
 20426  1148  1601               	bsf	1,4
 20427                           
 20428                           ;Dimmer_B1.c: 830: DimmerLights->DimmingSwitch = 0;
 20429  1149  086C               	movf	_DimmerLights,w
 20430  114A  0086               	movwf	6
 20431  114B  3001               	movlw	1	; select bank2/3
 20432  114C  0087               	movwf	7
 20433  114D  1281               	bcf	1,5
 20434                           
 20435                           ;Dimmer_B1.c: 831: }
 20436                           ;Dimmer_B1.c: 832: } else {
 20437  114E  0008               	return
 20438  114F                     l7019:	
 20439                           
 20440                           ;Dimmer_B1.c: 838: DimmerLights->Phase = 1;
 20441  114F  086C               	movf	_DimmerLights,w
 20442  1150  3E02               	addlw	2
 20443  1151  0086               	movwf	6
 20444  1152  3001               	movlw	1	; select bank2/3
 20445  1153  0087               	movwf	7
 20446  1154  1401               	bsf	1,0
 20447                           
 20448                           ;Dimmer_B1.c: 839: DimmerLights->PhaseSwitch = 0;
 20449  1155  086C               	movf	_DimmerLights,w
 20450  1156  3E02               	addlw	2
 20451  1157  0086               	movwf	6
 20452  1158  3001               	movlw	1	; select bank2/3
 20453  1159  0087               	movwf	7
 20454  115A  1101               	bcf	1,2
 20455  115B  0008               	return
 20456  115C                     __end_of_setDimmerLights_SwOff:	
 20457                           
 20458                           	psect	text141
 20459  192C                     __ptext141:	
 20460 ;; *************** function _getDimmerLights_Status *****************
 20461 ;; Defined at:
 20462 ;;		line 1266 in file "../src/Dimmer_B1.c"
 20463 ;; Parameters:    Size  Location     Type
 20464 ;;  lights          1    wreg     unsigned char 
 20465 ;; Auto vars:     Size  Location     Type
 20466 ;;  lights          1    4[COMMON] unsigned char 
 20467 ;;  status          1    5[COMMON] unsigned char 
 20468 ;; Return value:  Size  Location     Type
 20469 ;;                  1    wreg      unsigned char 
 20470 ;; Registers used:
 20471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20472 ;; Tracked objects:
 20473 ;;		On entry : 0/0
 20474 ;;		On exit  : 0/0
 20475 ;;		Unchanged: 0/0
 20476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20478 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20481 ;;Total ram usage:        2 bytes
 20482 ;; Hardware stack levels used:    1
 20483 ;; Hardware stack levels required when called:    4
 20484 ;; This function calls:
 20485 ;;		_DimmerLights_SelectPointer
 20486 ;; This function is called by:
 20487 ;;		_DlyOff_Main
 20488 ;;		_DimmerLights_AssignationDimming
 20489 ;;		_Exception_Main
 20490 ;;		_setControl_Lights_Table
 20491 ;;		_setRFSW_Control
 20492 ;;		_setRFSW_AdjControl
 20493 ;;		_setRF_AdjControl
 20494 ;; This function uses a non-reentrant model
 20495 ;;
 20496                           
 20497                           
 20498                           ;psect for function _getDimmerLights_Status
 20499  192C                     _getDimmerLights_Status:	
 20500                           
 20501                           ;incstack = 0
 20502                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20503                           ;getDimmerLights_Status@lights stored from wreg
 20504  192C  00F4               	movwf	getDimmerLights_Status@lights
 20505                           
 20506                           ;Dimmer_B1.c: 1267: DimmerLights_SelectPointer(lights);
 20507  192D  0874               	movf	getDimmerLights_Status@lights,w
 20508  192E  319A  2255         	fcall	_DimmerLights_SelectPointer
 20509                           
 20510                           ;Dimmer_B1.c: 1268: char status = DimmerLights->Status == 1 ? 1 : 0;
 20511  1930  0020               	movlb	0	; select bank0
 20512  1931  0A6C               	incf	_DimmerLights,w
 20513  1932  0086               	movwf	6
 20514  1933  3001               	movlw	1	; select bank2/3
 20515  1934  0087               	movwf	7
 20516  1935  3000               	movlw	0
 20517  1936  1801               	btfsc	1,0
 20518  1937  3001               	movlw	1
 20519  1938  00F5               	movwf	getDimmerLights_Status@status
 20520                           
 20521                           ;Dimmer_B1.c: 1269: return status;
 20522  1939  0875               	movf	getDimmerLights_Status@status,w
 20523  193A  0008               	return
 20524  193B                     __end_of_getDimmerLights_Status:	
 20525                           
 20526                           	psect	text142
 20527  1A55                     __ptext142:	
 20528 ;; *************** function _DimmerLights_SelectPointer *****************
 20529 ;; Defined at:
 20530 ;;		line 682 in file "../src/Dimmer_B1.c"
 20531 ;; Parameters:    Size  Location     Type
 20532 ;;  lights          1    wreg     unsigned char 
 20533 ;; Auto vars:     Size  Location     Type
 20534 ;;  lights          1    3[COMMON] unsigned char 
 20535 ;; Return value:  Size  Location     Type
 20536 ;;		None               void
 20537 ;; Registers used:
 20538 ;;		wreg
 20539 ;; Tracked objects:
 20540 ;;		On entry : 0/0
 20541 ;;		On exit  : 0/0
 20542 ;;		Unchanged: 0/0
 20543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20548 ;;Total ram usage:        2 bytes
 20549 ;; Hardware stack levels used:    1
 20550 ;; Hardware stack levels required when called:    3
 20551 ;; This function calls:
 20552 ;;		Nothing
 20553 ;; This function is called by:
 20554 ;;		_setDimmerLights_SwOn
 20555 ;;		_setDimmerLights_SwOff
 20556 ;;		_setDimmerLights_DimmingOn
 20557 ;;		_setDimmerLights_Main
 20558 ;;		_DimmerLights_TwoPhase_Main
 20559 ;;		_getDimmerLights_Status
 20560 ;;		_setDimmerLights_DimmingRun
 20561 ;;		_setRF_AdjControl
 20562 ;;		_setDimmerLights_Status
 20563 ;; This function uses a non-reentrant model
 20564 ;;
 20565                           
 20566                           
 20567                           ;psect for function _DimmerLights_SelectPointer
 20568  1A55                     _DimmerLights_SelectPointer:	
 20569                           
 20570                           ;incstack = 0
 20571                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20572                           ;DimmerLights_SelectPointer@lights stored from wreg
 20573  1A55  00F3               	movwf	DimmerLights_SelectPointer@lights
 20574                           
 20575                           ;Dimmer_B1.c: 684: if (lights == 1) {
 20576  1A56  0873               	movf	DimmerLights_SelectPointer@lights,w
 20577  1A57  3A01               	xorlw	1
 20578  1A58  1D03               	skipz
 20579  1A59  2A60               	goto	l6685
 20580                           
 20581                           ;Dimmer_B1.c: 685: DimmerLights = &DimmerLights1;
 20582  1A5A  30BE               	movlw	_DimmerLights1& (0+255)
 20583  1A5B  00F2               	movwf	??_DimmerLights_SelectPointer
 20584  1A5C  0872               	movf	??_DimmerLights_SelectPointer,w
 20585  1A5D  0020               	movlb	0	; select bank0
 20586  1A5E  00EC               	movwf	_DimmerLights
 20587                           
 20588                           ;Dimmer_B1.c: 686: }
 20589  1A5F  0008               	return
 20590  1A60                     l6685:	
 20591                           
 20592                           ;Dimmer_B1.c: 689: else if (lights == 2) {
 20593  1A60  0873               	movf	DimmerLights_SelectPointer@lights,w
 20594  1A61  3A02               	xorlw	2
 20595  1A62  1D03               	skipz
 20596  1A63  0008               	return
 20597                           
 20598                           ;Dimmer_B1.c: 690: DimmerLights = &DimmerLights2;
 20599  1A64  30C7               	movlw	_DimmerLights2& (0+255)
 20600  1A65  00F2               	movwf	??_DimmerLights_SelectPointer
 20601  1A66  0872               	movf	??_DimmerLights_SelectPointer,w
 20602  1A67  0020               	movlb	0	; select bank0
 20603  1A68  00EC               	movwf	_DimmerLights
 20604  1A69  0008               	return
 20605  1A6A                     __end_of_DimmerLights_SelectPointer:	
 20606                           
 20607                           	psect	text143
 20608  183F                     __ptext143:	
 20609 ;; *************** function _DelayOff_Initialization *****************
 20610 ;; Defined at:
 20611 ;;		line 26 in file "../src/DelayOff_B1.c"
 20612 ;; Parameters:    Size  Location     Type
 20613 ;;		None
 20614 ;; Auto vars:     Size  Location     Type
 20615 ;;		None
 20616 ;; Return value:  Size  Location     Type
 20617 ;;		None               void
 20618 ;; Registers used:
 20619 ;;		wreg, status,2, status,0, pclath, cstack
 20620 ;; Tracked objects:
 20621 ;;		On entry : 0/0
 20622 ;;		On exit  : 0/0
 20623 ;;		Unchanged: 0/0
 20624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20629 ;;Total ram usage:        0 bytes
 20630 ;; Hardware stack levels used:    1
 20631 ;; Hardware stack levels required when called:    5
 20632 ;; This function calls:
 20633 ;;		_DlyOff_Initialization
 20634 ;; This function is called by:
 20635 ;;		_main
 20636 ;; This function uses a non-reentrant model
 20637 ;;
 20638                           
 20639                           
 20640                           ;psect for function _DelayOff_Initialization
 20641  183F                     _DelayOff_Initialization:	
 20642                           
 20643                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20644                           
 20645                           ;incstack = 0
 20646                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20647  183F  3001               	movlw	1
 20648  1840  31A7  27FB  3198   	fcall	_DlyOff_Initialization
 20649                           
 20650                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20651  1843  3002               	movlw	2
 20652  1844  31A7  27FB         	fcall	_DlyOff_Initialization
 20653  1846  0008               	return
 20654  1847                     __end_of_DelayOff_Initialization:	
 20655                           
 20656                           	psect	text144
 20657  27FB                     __ptext144:	
 20658 ;; *************** function _DlyOff_Initialization *****************
 20659 ;; Defined at:
 20660 ;;		line 56 in file "../src/DelayOff_B1.c"
 20661 ;; Parameters:    Size  Location     Type
 20662 ;;  sw              1    wreg     unsigned char 
 20663 ;; Auto vars:     Size  Location     Type
 20664 ;;  sw              1    4[COMMON] unsigned char 
 20665 ;; Return value:  Size  Location     Type
 20666 ;;		None               void
 20667 ;; Registers used:
 20668 ;;		wreg, status,2, status,0, pclath, cstack
 20669 ;; Tracked objects:
 20670 ;;		On entry : 0/0
 20671 ;;		On exit  : 0/0
 20672 ;;		Unchanged: 0/0
 20673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20678 ;;Total ram usage:        1 bytes
 20679 ;; Hardware stack levels used:    1
 20680 ;; Hardware stack levels required when called:    4
 20681 ;; This function calls:
 20682 ;;		_DelayOffPointSelect
 20683 ;; This function is called by:
 20684 ;;		_DelayOff_Initialization
 20685 ;; This function uses a non-reentrant model
 20686 ;;
 20687                           
 20688                           
 20689                           ;psect for function _DlyOff_Initialization
 20690  27FB                     _DlyOff_Initialization:	
 20691                           
 20692                           ;incstack = 0
 20693                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20694                           ;DlyOff_Initialization@sw stored from wreg
 20695  27FB  00F4               	movwf	DlyOff_Initialization@sw
 20696                           
 20697                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20698  27FC  0874               	movf	DlyOff_Initialization@sw,w
 20699  27FD  319A  2240         	fcall	_DelayOffPointSelect
 20700  27FF  0008               	return
 20701  2800                     __end_of_DlyOff_Initialization:	
 20702                           
 20703                           	psect	text145
 20704  1A40                     __ptext145:	
 20705 ;; *************** function _DelayOffPointSelect *****************
 20706 ;; Defined at:
 20707 ;;		line 7 in file "../src/DelayOff_B1.c"
 20708 ;; Parameters:    Size  Location     Type
 20709 ;;  sw              1    wreg     unsigned char 
 20710 ;; Auto vars:     Size  Location     Type
 20711 ;;  sw              1    3[COMMON] unsigned char 
 20712 ;; Return value:  Size  Location     Type
 20713 ;;		None               void
 20714 ;; Registers used:
 20715 ;;		wreg
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20725 ;;Total ram usage:        2 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; Hardware stack levels required when called:    3
 20728 ;; This function calls:
 20729 ;;		Nothing
 20730 ;; This function is called by:
 20731 ;;		_DlyOff_Initialization
 20732 ;;		_DlyOff_Main
 20733 ;;		_setDelayOff_GO
 20734 ;;		_getDelayOff_GO
 20735 ;; This function uses a non-reentrant model
 20736 ;;
 20737                           
 20738                           
 20739                           ;psect for function _DelayOffPointSelect
 20740  1A40                     _DelayOffPointSelect:	
 20741                           
 20742                           ;incstack = 0
 20743                           ; Regs used in _DelayOffPointSelect: [wreg]
 20744                           ;DelayOffPointSelect@sw stored from wreg
 20745  1A40  00F3               	movwf	DelayOffPointSelect@sw
 20746                           
 20747                           ;DelayOff_B1.c: 9: if (sw == 1) {
 20748  1A41  0873               	movf	DelayOffPointSelect@sw,w
 20749  1A42  3A01               	xorlw	1
 20750  1A43  1D03               	skipz
 20751  1A44  2A4B               	goto	l6661
 20752                           
 20753                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 20754  1A45  30E2               	movlw	_DlySw1& (0+255)
 20755  1A46  00F2               	movwf	??_DelayOffPointSelect
 20756  1A47  0872               	movf	??_DelayOffPointSelect,w
 20757  1A48  0021               	movlb	1	; select bank1
 20758  1A49  00EA               	movwf	_DelayOff^(0+128)
 20759                           
 20760                           ;DelayOff_B1.c: 11: }
 20761  1A4A  0008               	return
 20762  1A4B                     l6661:	
 20763                           
 20764                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 20765  1A4B  0873               	movf	DelayOffPointSelect@sw,w
 20766  1A4C  3A02               	xorlw	2
 20767  1A4D  1D03               	skipz
 20768  1A4E  0008               	return
 20769                           
 20770                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 20771  1A4F  30E7               	movlw	_DlySw2& (0+255)
 20772  1A50  00F2               	movwf	??_DelayOffPointSelect
 20773  1A51  0872               	movf	??_DelayOffPointSelect,w
 20774  1A52  0021               	movlb	1	; select bank1
 20775  1A53  00EA               	movwf	_DelayOff^(0+128)
 20776  1A54  0008               	return
 20777  1A55                     __end_of_DelayOffPointSelect:	
 20778                           
 20779                           	psect	text146
 20780  12A6                     __ptext146:	
 20781 ;; *************** function _Buzzer_Main *****************
 20782 ;; Defined at:
 20783 ;;		line 46 in file "../src/Buzzer_B1.c"
 20784 ;; Parameters:    Size  Location     Type
 20785 ;;		None
 20786 ;; Auto vars:     Size  Location     Type
 20787 ;;		None
 20788 ;; Return value:  Size  Location     Type
 20789 ;;		None               void
 20790 ;; Registers used:
 20791 ;;		wreg, status,2, status,0
 20792 ;; Tracked objects:
 20793 ;;		On entry : 0/0
 20794 ;;		On exit  : 0/0
 20795 ;;		Unchanged: 0/0
 20796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20801 ;;Total ram usage:        1 bytes
 20802 ;; Hardware stack levels used:    1
 20803 ;; Hardware stack levels required when called:    3
 20804 ;; This function calls:
 20805 ;;		Nothing
 20806 ;; This function is called by:
 20807 ;;		_main
 20808 ;; This function uses a non-reentrant model
 20809 ;;
 20810                           
 20811                           
 20812                           ;psect for function _Buzzer_Main
 20813  12A6                     _Buzzer_Main:	
 20814                           
 20815                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 20816                           
 20817                           ;incstack = 0
 20818                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 20819  12A6  0021               	movlb	1	; select bank1
 20820  12A7  1CDC               	btfss	_Buz1^(0+128),1
 20821  12A8  0008               	return
 20822                           
 20823                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 20824  12A9  3001               	movlw	1
 20825  12AA  07DD               	addwf	(_Buz1^(0+128)+1),f
 20826  12AB  3000               	movlw	0
 20827  12AC  3DDE               	addwfc	((_Buz1+1)^(0+128)+1),f
 20828                           
 20829                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 20830  12AD  0863               	movf	((_Buz1+1)^(0+128)+6),w
 20831  12AE  025E               	subwf	((_Buz1+1)^(0+128)+1),w
 20832  12AF  1D03               	skipz
 20833  12B0  2AB3               	goto	u9205
 20834  12B1  0862               	movf	(_Buz1^(0+128)+6),w
 20835  12B2  025D               	subwf	(_Buz1^(0+128)+1),w
 20836  12B3                     u9205:	
 20837  12B3  1C03               	skipc
 20838  12B4  0008               	return
 20839                           
 20840                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 20841  12B5  01DD               	clrf	(_Buz1^(0+128)+1)
 20842  12B6  01DE               	clrf	((_Buz1+1)^(0+128)+1)
 20843                           
 20844                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 20845  12B7  12DC               	bcf	_Buz1^(0+128),5
 20846  12B8  0020               	movlb	0	; select bank0
 20847  12B9  1D8D               	btfss	13,3	;volatile
 20848  12BA  2ABD               	goto	l8923
 20849  12BB  0021               	movlb	1	; select bank1
 20850  12BC  16DC               	bsf	_Buz1^(0+128),5
 20851  12BD                     l8923:	
 20852                           
 20853                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 20854  12BD  0021               	movlb	1	; select bank1
 20855  12BE  1ADC               	btfsc	_Buz1^(0+128),5
 20856  12BF  2AE5               	goto	l110
 20857                           
 20858                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20859  12C0  08DF               	movf	(_Buz1^(0+128)+3),f
 20860  12C1  1D03               	skipz
 20861  12C2  2AE1               	goto	l111
 20862                           
 20863                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20864  12C3  1DDC               	btfss	_Buz1^(0+128),3
 20865  12C4  2AD1               	goto	l112
 20866                           
 20867                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20868  12C5  11DC               	bcf	_Buz1^(0+128),3
 20869                           
 20870                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20871  12C6  0860               	movf	(_Buz1^(0+128)+4),w
 20872  12C7  00F2               	movwf	??_Buzzer_Main
 20873  12C8  0872               	movf	??_Buzzer_Main,w
 20874  12C9  00DF               	movwf	(_Buz1^(0+128)+3)
 20875                           
 20876                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20877  12CA  0865               	movf	((_Buz1+1)^(0+128)+8),w
 20878  12CB  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20879  12CC  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20880  12CD  0864               	movf	(_Buz1^(0+128)+8),w
 20881  12CE  01E2               	clrf	(_Buz1^(0+128)+6)
 20882  12CF  07E2               	addwf	(_Buz1^(0+128)+6),f
 20883                           
 20884                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20885  12D0  0008               	return
 20886  12D1                     l112:	
 20887  12D1  1E5C               	btfss	_Buz1^(0+128),4
 20888  12D2  2ADF               	goto	l114
 20889                           
 20890                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20891  12D3  125C               	bcf	_Buz1^(0+128),4
 20892                           
 20893                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20894  12D4  0861               	movf	(_Buz1^(0+128)+5),w
 20895  12D5  00F2               	movwf	??_Buzzer_Main
 20896  12D6  0872               	movf	??_Buzzer_Main,w
 20897  12D7  00DF               	movwf	(_Buz1^(0+128)+3)
 20898                           
 20899                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 20900  12D8  0867               	movf	((_Buz1+1)^(0+128)+10),w
 20901  12D9  01E3               	clrf	((_Buz1+1)^(0+128)+6)
 20902  12DA  07E3               	addwf	((_Buz1+1)^(0+128)+6),f
 20903  12DB  0866               	movf	(_Buz1^(0+128)+10),w
 20904  12DC  01E2               	clrf	(_Buz1^(0+128)+6)
 20905  12DD  07E2               	addwf	(_Buz1^(0+128)+6),f
 20906                           
 20907                           ;Buzzer_B1.c: 62: } else {
 20908  12DE  0008               	return
 20909  12DF                     l114:	
 20910                           
 20911                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 20912  12DF  10DC               	bcf	_Buz1^(0+128),1
 20913                           
 20914                           ;Buzzer_B1.c: 64: }
 20915                           ;Buzzer_B1.c: 65: } else {
 20916  12E0  0008               	return
 20917  12E1                     l111:	
 20918                           
 20919                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 20920  12E1  16DC               	bsf	_Buz1^(0+128),5
 20921                           
 20922                           ;Buzzer_B1.c: 68: RB3 = 1;
 20923  12E2  0020               	movlb	0	; select bank0
 20924  12E3  158D               	bsf	13,3	;volatile
 20925                           
 20926                           ;Buzzer_B1.c: 69: }
 20927                           ;Buzzer_B1.c: 70: } else {
 20928  12E4  0008               	return
 20929  12E5                     l110:	
 20930                           
 20931                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 20932  12E5  12DC               	bcf	_Buz1^(0+128),5
 20933                           
 20934                           ;Buzzer_B1.c: 73: RB3 = 0;
 20935  12E6  0020               	movlb	0	; select bank0
 20936  12E7  118D               	bcf	13,3	;volatile
 20937                           
 20938                           ;Buzzer_B1.c: 75: Buz1.Count--;
 20939  12E8  3001               	movlw	1
 20940  12E9  0021               	movlb	1	; select bank1
 20941  12EA  02DF               	subwf	(_Buz1^(0+128)+3),f
 20942  12EB  0008               	return
 20943  12EC                     __end_of_Buzzer_Main:	
 20944                           
 20945                           	psect	text147
 20946  27D9                     __ptext147:	
 20947 ;; *************** function _Buzzer_Initialization *****************
 20948 ;; Defined at:
 20949 ;;		line 11 in file "../src/Buzzer_B1.c"
 20950 ;; Parameters:    Size  Location     Type
 20951 ;;		None
 20952 ;; Auto vars:     Size  Location     Type
 20953 ;;		None
 20954 ;; Return value:  Size  Location     Type
 20955 ;;		None               void
 20956 ;; Registers used:
 20957 ;;		None
 20958 ;; Tracked objects:
 20959 ;;		On entry : 0/0
 20960 ;;		On exit  : 0/0
 20961 ;;		Unchanged: 0/0
 20962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20967 ;;Total ram usage:        0 bytes
 20968 ;; Hardware stack levels used:    1
 20969 ;; Hardware stack levels required when called:    3
 20970 ;; This function calls:
 20971 ;;		Nothing
 20972 ;; This function is called by:
 20973 ;;		_main
 20974 ;; This function uses a non-reentrant model
 20975 ;;
 20976                           
 20977                           
 20978                           ;psect for function _Buzzer_Initialization
 20979  27D9                     _Buzzer_Initialization:	
 20980                           
 20981                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 20982                           
 20983                           ;incstack = 0
 20984                           ; Regs used in _Buzzer_Initialization: []
 20985  27D9  0021               	movlb	1	; select bank1
 20986  27DA  145C               	bsf	_Buz1^(0+128),0
 20987  27DB  0008               	return
 20988  27DC                     __end_of_Buzzer_Initialization:	
 20989                           
 20990                           	psect	intentry
 20991  0004                     __pintentry:	
 20992 ;; *************** function _ISR *****************
 20993 ;; Defined at:
 20994 ;;		line 116 in file "../src/MCU_B1.c"
 20995 ;; Parameters:    Size  Location     Type
 20996 ;;		None
 20997 ;; Auto vars:     Size  Location     Type
 20998 ;;		None
 20999 ;; Return value:  Size  Location     Type
 21000 ;;		None               void
 21001 ;; Registers used:
 21002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21003 ;; Tracked objects:
 21004 ;;		On entry : 0/0
 21005 ;;		On exit  : 0/0
 21006 ;;		Unchanged: 0/0
 21007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21010 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21011 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21012 ;;Total ram usage:        1 bytes
 21013 ;; Hardware stack levels used:    1
 21014 ;; Hardware stack levels required when called:    2
 21015 ;; This function calls:
 21016 ;;		_IOC_ISR
 21017 ;;		_TMR1_ISR
 21018 ;; This function is called by:
 21019 ;;		Interrupt level 1
 21020 ;; This function uses a non-reentrant model
 21021 ;;
 21022                           
 21023  0004                     _ISR:	
 21024                           
 21025                           ;incstack = 0
 21026                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21027  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21028  0005  3180               	pagesel	$
 21029  0006  0020               	movlb	0	; select bank0
 21030  0007  087F               	movf	127,w
 21031  0008  00F1               	movwf	??_ISR
 21032                           
 21033                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21034  0009  0021               	movlb	1	; select bank1
 21035  000A  1C11               	btfss	17,0	;volatile
 21036  000B  2812               	goto	i1l9531
 21037  000C  0020               	movlb	0	; select bank0
 21038  000D  1C11               	btfss	17,0	;volatile
 21039  000E  2812               	goto	i1l9531
 21040                           
 21041                           ;MCU_B1.c: 126: TMR1_ISR();
 21042  000F  319C  24C6  3180   	fcall	_TMR1_ISR
 21043  0012                     i1l9531:	
 21044                           
 21045                           ;MCU_B1.c: 127: }
 21046                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21047  0012  198B               	btfsc	11,3	;volatile
 21048  0013  1C0B               	btfss	11,0	;volatile
 21049  0014  281A               	goto	i1l1462
 21050  0015  0027               	movlb	7	; select bank7
 21051  0016  1D16               	btfss	22,2	;volatile
 21052  0017  281A               	goto	i1l1462
 21053                           
 21054                           ;MCU_B1.c: 139: IOC_ISR();
 21055  0018  3198  20BA         	fcall	_IOC_ISR
 21056  001A                     i1l1462:	
 21057                           ;MCU_B1.c: 140: }
 21058                           ;MCU_B1.c: 148: return;
 21059                           
 21060  001A  0871               	movf	??_ISR,w
 21061  001B  0020               	movlb	0	; select bank0
 21062  001C  00FF               	movwf	127
 21063  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21064  001E  0009               	retfie
 21065  001F                     __end_of_ISR:	
 21066                           
 21067                           	psect	text149
 21068  1CC6                     __ptext149:	
 21069 ;; *************** function _TMR1_ISR *****************
 21070 ;; Defined at:
 21071 ;;		line 236 in file "../src/MCU_B1.c"
 21072 ;; Parameters:    Size  Location     Type
 21073 ;;		None
 21074 ;; Auto vars:     Size  Location     Type
 21075 ;;		None
 21076 ;; Return value:  Size  Location     Type
 21077 ;;		None               void
 21078 ;; Registers used:
 21079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21080 ;; Tracked objects:
 21081 ;;		On entry : 0/0
 21082 ;;		On exit  : 0/0
 21083 ;;		Unchanged: 0/0
 21084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21089 ;;Total ram usage:        0 bytes
 21090 ;; Hardware stack levels used:    1
 21091 ;; Hardware stack levels required when called:    1
 21092 ;; This function calls:
 21093 ;;		_DimmerLights_TMR_1
 21094 ;;		_DimmerLights_TMR_2
 21095 ;; This function is called by:
 21096 ;;		_ISR
 21097 ;; This function uses a non-reentrant model
 21098 ;;
 21099                           
 21100                           
 21101                           ;psect for function _TMR1_ISR
 21102  1CC6                     _TMR1_ISR:	
 21103                           
 21104                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21105                           
 21106                           ;incstack = 0
 21107                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21108  1CC6  3190  207A  319C   	fcall	_DimmerLights_TMR_1
 21109                           
 21110                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21111  1CC9  3190  20B2  319C   	fcall	_DimmerLights_TMR_2
 21112                           
 21113                           ;MCU_B1.c: 269: Timer1.Count++;
 21114  1CCC  3001               	movlw	1
 21115  1CCD  0022               	movlb	2	; select bank2
 21116  1CCE  07A6               	addwf	(_Timer1^(0+256)+1),f
 21117  1CCF  3000               	movlw	0
 21118  1CD0  3DA7               	addwfc	((_Timer1+1)^(0+256)+1),f
 21119                           
 21120                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
 21121  1CD1  3001               	movlw	1
 21122  1CD2  3E25               	addlw	_Timer1& (0+255)
 21123  1CD3  0086               	movwf	6
 21124  1CD4  3001               	movlw	1	; select bank2/3
 21125  1CD5  0087               	movwf	7
 21126  1CD6  3F40               	moviw [0]fsr1
 21127  1CD7  3AC8               	xorlw	200
 21128  1CD8  1D03               	skipz
 21129  1CD9  2CDC               	goto	u930_25
 21130  1CDA  3F41               	moviw [1]fsr1
 21131  1CDB  3A00               	xorlw	0
 21132  1CDC                     u930_25:	
 21133  1CDC  1D03               	skipz
 21134  1CDD  2CE1               	goto	i1l8985
 21135                           
 21136                           ;MCU_B1.c: 271: Timer1.Count = 0;
 21137  1CDE  01A6               	clrf	(_Timer1^(0+256)+1)
 21138  1CDF  01A7               	clrf	((_Timer1+1)^(0+256)+1)
 21139                           
 21140                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
 21141  1CE0  1425               	bsf	_Timer1^(0+256),0
 21142  1CE1                     i1l8985:	
 21143                           
 21144                           ;MCU_B1.c: 273: }
 21145                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
 21146  1CE1  30FA               	movlw	250
 21147  1CE2  0020               	movlb	0	; select bank0
 21148  1CE3  0097               	movwf	23	;volatile
 21149                           
 21150                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
 21151  1CE4  3038               	movlw	56
 21152  1CE5  0096               	movwf	22	;volatile
 21153                           
 21154                           ;MCU_B1.c: 277: TMR1IF = 0;
 21155  1CE6  1011               	bcf	17,0	;volatile
 21156  1CE7  0008               	return
 21157  1CE8                     __end_of_TMR1_ISR:	
 21158                           
 21159                           	psect	text150
 21160  10B2                     __ptext150:	
 21161 ;; *************** function _DimmerLights_TMR_2 *****************
 21162 ;; Defined at:
 21163 ;;		line 1892 in file "../src/Dimmer_B1.c"
 21164 ;; Parameters:    Size  Location     Type
 21165 ;;		None
 21166 ;; Auto vars:     Size  Location     Type
 21167 ;;		None
 21168 ;; Return value:  Size  Location     Type
 21169 ;;		None               void
 21170 ;; Registers used:
 21171 ;;		wreg, status,2, status,0
 21172 ;; Tracked objects:
 21173 ;;		On entry : 0/0
 21174 ;;		On exit  : 0/0
 21175 ;;		Unchanged: 0/0
 21176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21181 ;;Total ram usage:        1 bytes
 21182 ;; Hardware stack levels used:    1
 21183 ;; This function calls:
 21184 ;;		Nothing
 21185 ;; This function is called by:
 21186 ;;		_TMR1_ISR
 21187 ;; This function uses a non-reentrant model
 21188 ;;
 21189                           
 21190                           
 21191                           ;psect for function _DimmerLights_TMR_2
 21192  10B2                     _DimmerLights_TMR_2:	
 21193                           
 21194                           ;Dimmer_B1.c: 1894: if (DimmerIntr2.Start == 1) {
 21195                           
 21196                           ;incstack = 0
 21197                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21198  10B2  0021               	movlb	1	; select bank1
 21199  10B3  1D30               	btfss	_DimmerIntr2^(0+128),2
 21200  10B4  28D8               	goto	i1l1019
 21201                           
 21202                           ;Dimmer_B1.c: 1895: DimmerIntr2.Count++;
 21203  10B5  3001               	movlw	1
 21204  10B6  00F0               	movwf	??_DimmerLights_TMR_2
 21205  10B7  0870               	movf	??_DimmerLights_TMR_2,w
 21206  10B8  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21207                           
 21208                           ;Dimmer_B1.c: 1897: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd_Value) {
 21209  10B9  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21210  10BA  063F               	xorwf	(_DimmerIntr2^(0+128)+15),w
 21211  10BB  1D03               	skipz
 21212  10BC  28BF               	goto	i1l8447
 21213                           
 21214                           ;Dimmer_B1.c: 1898: DimmerIntr2.Count = 0;
 21215  10BD  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21216                           
 21217                           ;Dimmer_B1.c: 1899: DimmerIntr2.Start = 0;
 21218  10BE  1130               	bcf	_DimmerIntr2^(0+128),2
 21219  10BF                     i1l8447:	
 21220                           
 21221                           ;Dimmer_B1.c: 1900: }
 21222                           ;Dimmer_B1.c: 1904: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2_Value) {
 21223  10BF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21224  10C0  063C               	xorwf	(_DimmerIntr2^(0+128)+12),w
 21225  10C1  1903               	btfsc	3,2
 21226                           
 21227                           ;Dimmer_B1.c: 1905: if (DimmerIntr2.ControlStatus == 1) {
 21228  10C2  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21229  10C3  28C6               	goto	i1l8453
 21230                           
 21231                           ;Dimmer_B1.c: 1906: RB4 = 0;
 21232  10C4  0020               	movlb	0	; select bank0
 21233  10C5  120D               	bcf	13,4	;volatile
 21234  10C6                     i1l8453:	
 21235                           
 21236                           ;Dimmer_B1.c: 1907: }
 21237                           ;Dimmer_B1.c: 1908: }
 21238                           ;Dimmer_B1.c: 1911: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3_Value) {
 21239  10C6  0021               	movlb	1	; select bank1
 21240  10C7  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21241  10C8  063D               	xorwf	(_DimmerIntr2^(0+128)+13),w
 21242  10C9  1903               	btfsc	3,2
 21243                           
 21244                           ;Dimmer_B1.c: 1912: if (DimmerIntr2.ControlStatus == 1) {
 21245  10CA  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21246  10CB  28CE               	goto	i1l8459
 21247                           
 21248                           ;Dimmer_B1.c: 1913: RB4 = 1;
 21249  10CC  0020               	movlb	0	; select bank0
 21250  10CD  160D               	bsf	13,4	;volatile
 21251  10CE                     i1l8459:	
 21252                           
 21253                           ;Dimmer_B1.c: 1914: }
 21254                           ;Dimmer_B1.c: 1915: }
 21255                           ;Dimmer_B1.c: 1918: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4_Value) {
 21256  10CE  0021               	movlb	1	; select bank1
 21257  10CF  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21258  10D0  063E               	xorwf	(_DimmerIntr2^(0+128)+14),w
 21259  10D1  1D03               	skipz
 21260  10D2  0008               	return
 21261                           
 21262                           ;Dimmer_B1.c: 1919: if (DimmerIntr2.ControlStatus == 1) {
 21263  10D3  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21264  10D4  0008               	return
 21265                           
 21266                           ;Dimmer_B1.c: 1920: RB4 = 0;
 21267  10D5  0020               	movlb	0	; select bank0
 21268  10D6  120D               	bcf	13,4	;volatile
 21269                           
 21270                           ;Dimmer_B1.c: 1921: }
 21271                           ;Dimmer_B1.c: 1924: }
 21272                           ;Dimmer_B1.c: 1926: } else {
 21273  10D7  0008               	return
 21274  10D8                     i1l1019:	
 21275                           
 21276                           ;Dimmer_B1.c: 1927: if (DimmerIntr2.GO == 1) {
 21277  10D8  1C30               	btfss	_DimmerIntr2^(0+128),0
 21278  10D9  0008               	return
 21279                           
 21280                           ;Dimmer_B1.c: 1928: DimmerIntr2.Count++;
 21281  10DA  3001               	movlw	1
 21282  10DB  00F0               	movwf	??_DimmerLights_TMR_2
 21283  10DC  0870               	movf	??_DimmerLights_TMR_2,w
 21284  10DD  07B2               	addwf	(_DimmerIntr2^(0+128)+2),f
 21285                           
 21286                           ;Dimmer_B1.c: 1929: if (DimmerIntr2.Count == 4) {
 21287  10DE  0832               	movf	(_DimmerIntr2^(0+128)+2),w
 21288  10DF  3A04               	xorlw	4
 21289  10E0  1D03               	skipz
 21290  10E1  0008               	return
 21291                           
 21292                           ;Dimmer_B1.c: 1930: DimmerIntr2.Count = 0;
 21293  10E2  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21294                           
 21295                           ;Dimmer_B1.c: 1931: DimmerIntr2.GO = 0;
 21296  10E3  1030               	bcf	_DimmerIntr2^(0+128),0
 21297                           
 21298                           ;Dimmer_B1.c: 1932: DimmerIntr2.Start = 1;
 21299  10E4  1530               	bsf	_DimmerIntr2^(0+128),2
 21300                           
 21301                           ;Dimmer_B1.c: 1934: if (DimmerIntr2.ControlStatus == 1) {
 21302  10E5  1DB0               	btfss	_DimmerIntr2^(0+128),3
 21303  10E6  0008               	return
 21304                           
 21305                           ;Dimmer_B1.c: 1935: RB4 = 1;
 21306  10E7  0020               	movlb	0	; select bank0
 21307  10E8  160D               	bsf	13,4	;volatile
 21308  10E9  0008               	return
 21309  10EA                     __end_of_DimmerLights_TMR_2:	
 21310                           
 21311                           	psect	text151
 21312  107A                     __ptext151:	
 21313 ;; *************** function _DimmerLights_TMR_1 *****************
 21314 ;; Defined at:
 21315 ;;		line 1731 in file "../src/Dimmer_B1.c"
 21316 ;; Parameters:    Size  Location     Type
 21317 ;;		None
 21318 ;; Auto vars:     Size  Location     Type
 21319 ;;		None
 21320 ;; Return value:  Size  Location     Type
 21321 ;;		None               void
 21322 ;; Registers used:
 21323 ;;		wreg, status,2, status,0
 21324 ;; Tracked objects:
 21325 ;;		On entry : 0/0
 21326 ;;		On exit  : 0/0
 21327 ;;		Unchanged: 0/0
 21328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21333 ;;Total ram usage:        1 bytes
 21334 ;; Hardware stack levels used:    1
 21335 ;; This function calls:
 21336 ;;		Nothing
 21337 ;; This function is called by:
 21338 ;;		_TMR1_ISR
 21339 ;; This function uses a non-reentrant model
 21340 ;;
 21341                           
 21342                           
 21343                           ;psect for function _DimmerLights_TMR_1
 21344  107A                     _DimmerLights_TMR_1:	
 21345                           
 21346                           ;Dimmer_B1.c: 1734: if (DimmerIntr1.Start == 1) {
 21347                           
 21348                           ;incstack = 0
 21349                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21350  107A  0021               	movlb	1	; select bank1
 21351  107B  1D20               	btfss	_DimmerIntr1^(0+128),2
 21352  107C  28A0               	goto	i1l995
 21353                           
 21354                           ;Dimmer_B1.c: 1735: DimmerIntr1.Count++;
 21355  107D  3001               	movlw	1
 21356  107E  00F0               	movwf	??_DimmerLights_TMR_1
 21357  107F  0870               	movf	??_DimmerLights_TMR_1,w
 21358  1080  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21359                           
 21360                           ;Dimmer_B1.c: 1737: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd_Value) {
 21361  1081  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21362  1082  062F               	xorwf	(_DimmerIntr1^(0+128)+15),w
 21363  1083  1D03               	skipz
 21364  1084  2887               	goto	i1l8385
 21365                           
 21366                           ;Dimmer_B1.c: 1738: DimmerIntr1.Count = 0;
 21367  1085  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21368                           
 21369                           ;Dimmer_B1.c: 1739: DimmerIntr1.Start = 0;
 21370  1086  1120               	bcf	_DimmerIntr1^(0+128),2
 21371  1087                     i1l8385:	
 21372                           
 21373                           ;Dimmer_B1.c: 1740: }
 21374                           ;Dimmer_B1.c: 1744: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 21375  1087  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21376  1088  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 21377  1089  1903               	btfsc	3,2
 21378                           
 21379                           ;Dimmer_B1.c: 1745: if (DimmerIntr1.ControlStatus == 1) {
 21380  108A  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21381  108B  288E               	goto	i1l8391
 21382                           
 21383                           ;Dimmer_B1.c: 1746: RA7 = 0;
 21384  108C  0020               	movlb	0	; select bank0
 21385  108D  138C               	bcf	12,7	;volatile
 21386  108E                     i1l8391:	
 21387                           
 21388                           ;Dimmer_B1.c: 1747: }
 21389                           ;Dimmer_B1.c: 1748: }
 21390                           ;Dimmer_B1.c: 1751: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3_Value) {
 21391  108E  0021               	movlb	1	; select bank1
 21392  108F  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21393  1090  062D               	xorwf	(_DimmerIntr1^(0+128)+13),w
 21394  1091  1903               	btfsc	3,2
 21395                           
 21396                           ;Dimmer_B1.c: 1752: if (DimmerIntr1.ControlStatus == 1) {
 21397  1092  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21398  1093  2896               	goto	i1l8397
 21399                           
 21400                           ;Dimmer_B1.c: 1753: RA7 = 1;
 21401  1094  0020               	movlb	0	; select bank0
 21402  1095  178C               	bsf	12,7	;volatile
 21403  1096                     i1l8397:	
 21404                           
 21405                           ;Dimmer_B1.c: 1754: }
 21406                           ;Dimmer_B1.c: 1755: }
 21407                           ;Dimmer_B1.c: 1758: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4_Value) {
 21408  1096  0021               	movlb	1	; select bank1
 21409  1097  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21410  1098  062E               	xorwf	(_DimmerIntr1^(0+128)+14),w
 21411  1099  1D03               	skipz
 21412  109A  0008               	return
 21413                           
 21414                           ;Dimmer_B1.c: 1759: if (DimmerIntr1.ControlStatus == 1) {
 21415  109B  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21416  109C  0008               	return
 21417                           
 21418                           ;Dimmer_B1.c: 1760: RA7 = 0;
 21419  109D  0020               	movlb	0	; select bank0
 21420  109E  138C               	bcf	12,7	;volatile
 21421                           
 21422                           ;Dimmer_B1.c: 1761: }
 21423                           ;Dimmer_B1.c: 1764: }
 21424                           ;Dimmer_B1.c: 1766: } else {
 21425  109F  0008               	return
 21426  10A0                     i1l995:	
 21427                           
 21428                           ;Dimmer_B1.c: 1767: if (DimmerIntr1.GO == 1) {
 21429  10A0  1C20               	btfss	_DimmerIntr1^(0+128),0
 21430  10A1  0008               	return
 21431                           
 21432                           ;Dimmer_B1.c: 1768: DimmerIntr1.Count++;
 21433  10A2  3001               	movlw	1
 21434  10A3  00F0               	movwf	??_DimmerLights_TMR_1
 21435  10A4  0870               	movf	??_DimmerLights_TMR_1,w
 21436  10A5  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 21437                           
 21438                           ;Dimmer_B1.c: 1769: if (DimmerIntr1.Count == 4) {
 21439  10A6  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 21440  10A7  3A04               	xorlw	4
 21441  10A8  1D03               	skipz
 21442  10A9  0008               	return
 21443                           
 21444                           ;Dimmer_B1.c: 1770: DimmerIntr1.Count = 0;
 21445  10AA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21446                           
 21447                           ;Dimmer_B1.c: 1771: DimmerIntr1.GO = 0;
 21448  10AB  1020               	bcf	_DimmerIntr1^(0+128),0
 21449                           
 21450                           ;Dimmer_B1.c: 1772: DimmerIntr1.Start = 1;
 21451  10AC  1520               	bsf	_DimmerIntr1^(0+128),2
 21452                           
 21453                           ;Dimmer_B1.c: 1774: if (DimmerIntr1.ControlStatus == 1) {
 21454  10AD  1DA0               	btfss	_DimmerIntr1^(0+128),3
 21455  10AE  0008               	return
 21456                           
 21457                           ;Dimmer_B1.c: 1775: RA7 = 1;
 21458  10AF  0020               	movlb	0	; select bank0
 21459  10B0  178C               	bsf	12,7	;volatile
 21460  10B1  0008               	return
 21461  10B2                     __end_of_DimmerLights_TMR_1:	
 21462                           
 21463                           	psect	text152
 21464  18BA                     __ptext152:	
 21465 ;; *************** function _IOC_ISR *****************
 21466 ;; Defined at:
 21467 ;;		line 396 in file "../src/MCU_B1.c"
 21468 ;; Parameters:    Size  Location     Type
 21469 ;;		None
 21470 ;; Auto vars:     Size  Location     Type
 21471 ;;		None
 21472 ;; Return value:  Size  Location     Type
 21473 ;;		None               void
 21474 ;; Registers used:
 21475 ;;		wreg, status,2, status,0, pclath, cstack
 21476 ;; Tracked objects:
 21477 ;;		On entry : 0/0
 21478 ;;		On exit  : 0/0
 21479 ;;		Unchanged: 0/0
 21480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21485 ;;Total ram usage:        0 bytes
 21486 ;; Hardware stack levels used:    1
 21487 ;; Hardware stack levels required when called:    1
 21488 ;; This function calls:
 21489 ;;		_DimmerLights_IOC_1
 21490 ;;		_DimmerLights_IOC_2
 21491 ;; This function is called by:
 21492 ;;		_ISR
 21493 ;; This function uses a non-reentrant model
 21494 ;;
 21495                           
 21496                           
 21497                           ;psect for function _IOC_ISR
 21498  18BA                     _IOC_ISR:	
 21499                           
 21500                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 21501                           
 21502                           ;incstack = 0
 21503                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21504  18BA  0021               	movlb	1	; select bank1
 21505  18BB  1C4F               	btfss	_myMain^(0+128),0
 21506  18BC  28C2               	goto	i1l8995
 21507                           
 21508                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 21509  18BD  319E  2699  3198   	fcall	_DimmerLights_IOC_1
 21510                           
 21511                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 21512  18C0  319E  26C9         	fcall	_DimmerLights_IOC_2
 21513  18C2                     i1l8995:	
 21514                           
 21515                           ;MCU_B1.c: 418: }
 21516                           ;MCU_B1.c: 420: IOCBF2 = 0;
 21517  18C2  0027               	movlb	7	; select bank7
 21518  18C3  1116               	bcf	22,2	;volatile
 21519                           
 21520                           ;MCU_B1.c: 421: IOCIF = 0;
 21521  18C4  100B               	bcf	11,0	;volatile
 21522  18C5  0008               	return
 21523  18C6                     __end_of_IOC_ISR:	
 21524                           
 21525                           	psect	text153
 21526  1EC9                     __ptext153:	
 21527 ;; *************** function _DimmerLights_IOC_2 *****************
 21528 ;; Defined at:
 21529 ;;		line 1975 in file "../src/Dimmer_B1.c"
 21530 ;; Parameters:    Size  Location     Type
 21531 ;;		None
 21532 ;; Auto vars:     Size  Location     Type
 21533 ;;		None
 21534 ;; Return value:  Size  Location     Type
 21535 ;;		None               void
 21536 ;; Registers used:
 21537 ;;		wreg, status,2, status,0
 21538 ;; Tracked objects:
 21539 ;;		On entry : 0/0
 21540 ;;		On exit  : 0/0
 21541 ;;		Unchanged: 0/0
 21542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21545 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21547 ;;Total ram usage:        1 bytes
 21548 ;; Hardware stack levels used:    1
 21549 ;; This function calls:
 21550 ;;		Nothing
 21551 ;; This function is called by:
 21552 ;;		_IOC_ISR
 21553 ;; This function uses a non-reentrant model
 21554 ;;
 21555                           
 21556                           
 21557                           ;psect for function _DimmerLights_IOC_2
 21558  1EC9                     _DimmerLights_IOC_2:	
 21559                           
 21560                           ;Dimmer_B1.c: 1990: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21561                           
 21562                           ;incstack = 0
 21563                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0]
 21564  1EC9  0021               	movlb	1	; select bank1
 21565  1ECA  1930               	btfsc	_DimmerIntr2^(0+128),2
 21566  1ECB  0008               	return
 21567  1ECC  1830               	btfsc	_DimmerIntr2^(0+128),0
 21568  1ECD  0008               	return
 21569                           
 21570                           ;Dimmer_B1.c: 1992: if (RB2 != DimmerIntr2.Status) {
 21571  1ECE  0E31               	swapf	(_DimmerIntr2^(0+128)+1),w
 21572  1ECF  0C89               	rrf	9,f
 21573  1ED0  3901               	andlw	1
 21574  1ED1  00F0               	movwf	??_DimmerLights_IOC_2
 21575  1ED2  3000               	movlw	0
 21576  1ED3  0020               	movlb	0	; select bank0
 21577  1ED4  190D               	btfsc	13,2	;volatile
 21578  1ED5  3001               	movlw	1
 21579  1ED6  0670               	xorwf	??_DimmerLights_IOC_2,w
 21580  1ED7  1903               	skipnz
 21581  1ED8  0008               	return
 21582                           
 21583                           ;Dimmer_B1.c: 1995: DimmerIntr2.Count = 0;
 21584  1ED9  0021               	movlb	1	; select bank1
 21585  1EDA  01B2               	clrf	(_DimmerIntr2^(0+128)+2)
 21586                           
 21587                           ;Dimmer_B1.c: 1996: DimmerIntr2.GO = 1;
 21588  1EDB  1430               	bsf	_DimmerIntr2^(0+128),0
 21589                           
 21590                           ;Dimmer_B1.c: 1998: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21591  1EDC  1E30               	btfss	_DimmerIntr2^(0+128),4
 21592  1EDD  1B30               	btfsc	_DimmerIntr2^(0+128),6
 21593                           
 21594                           ;Dimmer_B1.c: 1999: DimmerIntr2.Tune = 1;
 21595  1EDE  14B0               	bsf	_DimmerIntr2^(0+128),1
 21596                           
 21597                           ;Dimmer_B1.c: 2000: }
 21598                           ;Dimmer_B1.c: 2002: if (DimmerIntr2.Calculate == 1) {
 21599  1EDF  1FB1               	btfss	(_DimmerIntr2^(0+128)+1),7
 21600  1EE0  2EF2               	goto	i1l8497
 21601                           
 21602                           ;Dimmer_B1.c: 2003: DimmerIntr2.Calculate = 0;
 21603  1EE1  13B1               	bcf	(_DimmerIntr2^(0+128)+1),7
 21604                           
 21605                           ;Dimmer_B1.c: 2004: DimmerIntr2.TuneEnd_Value = DimmerIntr2.TuneEnd;
 21606  1EE2  083B               	movf	(_DimmerIntr2^(0+128)+11),w
 21607  1EE3  00F0               	movwf	??_DimmerLights_IOC_2
 21608  1EE4  0870               	movf	??_DimmerLights_IOC_2,w
 21609  1EE5  00BF               	movwf	(_DimmerIntr2^(0+128)+15)
 21610                           
 21611                           ;Dimmer_B1.c: 2005: DimmerIntr2.TuneValue2_Value = DimmerIntr2.TuneValue2;
 21612  1EE6  0838               	movf	(_DimmerIntr2^(0+128)+8),w
 21613  1EE7  00F0               	movwf	??_DimmerLights_IOC_2
 21614  1EE8  0870               	movf	??_DimmerLights_IOC_2,w
 21615  1EE9  00BC               	movwf	(_DimmerIntr2^(0+128)+12)
 21616                           
 21617                           ;Dimmer_B1.c: 2006: DimmerIntr2.TuneValue3_Value = DimmerIntr2.TuneValue3;
 21618  1EEA  0839               	movf	(_DimmerIntr2^(0+128)+9),w
 21619  1EEB  00F0               	movwf	??_DimmerLights_IOC_2
 21620  1EEC  0870               	movf	??_DimmerLights_IOC_2,w
 21621  1EED  00BD               	movwf	(_DimmerIntr2^(0+128)+13)
 21622                           
 21623                           ;Dimmer_B1.c: 2007: DimmerIntr2.TuneValue4_Value = DimmerIntr2.TuneValue4;
 21624  1EEE  083A               	movf	(_DimmerIntr2^(0+128)+10),w
 21625  1EEF  00F0               	movwf	??_DimmerLights_IOC_2
 21626  1EF0  0870               	movf	??_DimmerLights_IOC_2,w
 21627  1EF1  00BE               	movwf	(_DimmerIntr2^(0+128)+14)
 21628  1EF2                     i1l8497:	
 21629                           
 21630                           ;Dimmer_B1.c: 2008: }
 21631                           ;Dimmer_B1.c: 2018: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21632  1EF2  12B1               	bcf	(_DimmerIntr2^(0+128)+1),5
 21633  1EF3  0020               	movlb	0	; select bank0
 21634  1EF4  1D0D               	btfss	13,2	;volatile
 21635  1EF5  0008               	return
 21636  1EF6  0021               	movlb	1	; select bank1
 21637  1EF7  16B1               	bsf	(_DimmerIntr2^(0+128)+1),5
 21638  1EF8  0008               	return
 21639  1EF9                     __end_of_DimmerLights_IOC_2:	
 21640                           
 21641                           	psect	text154
 21642  1E99                     __ptext154:	
 21643 ;; *************** function _DimmerLights_IOC_1 *****************
 21644 ;; Defined at:
 21645 ;;		line 1817 in file "../src/Dimmer_B1.c"
 21646 ;; Parameters:    Size  Location     Type
 21647 ;;		None
 21648 ;; Auto vars:     Size  Location     Type
 21649 ;;		None
 21650 ;; Return value:  Size  Location     Type
 21651 ;;		None               void
 21652 ;; Registers used:
 21653 ;;		wreg, status,2, status,0
 21654 ;; Tracked objects:
 21655 ;;		On entry : 0/0
 21656 ;;		On exit  : 0/0
 21657 ;;		Unchanged: 0/0
 21658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21661 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21662 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21663 ;;Total ram usage:        1 bytes
 21664 ;; Hardware stack levels used:    1
 21665 ;; This function calls:
 21666 ;;		Nothing
 21667 ;; This function is called by:
 21668 ;;		_IOC_ISR
 21669 ;; This function uses a non-reentrant model
 21670 ;;
 21671                           
 21672                           
 21673                           ;psect for function _DimmerLights_IOC_1
 21674  1E99                     _DimmerLights_IOC_1:	
 21675                           
 21676                           ;Dimmer_B1.c: 1831: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21677                           
 21678                           ;incstack = 0
 21679                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0]
 21680  1E99  0021               	movlb	1	; select bank1
 21681  1E9A  1920               	btfsc	_DimmerIntr1^(0+128),2
 21682  1E9B  0008               	return
 21683  1E9C  1820               	btfsc	_DimmerIntr1^(0+128),0
 21684  1E9D  0008               	return
 21685                           
 21686                           ;Dimmer_B1.c: 1833: if (RB2 != DimmerIntr1.Status) {
 21687  1E9E  0E21               	swapf	(_DimmerIntr1^(0+128)+1),w
 21688  1E9F  0C89               	rrf	9,f
 21689  1EA0  3901               	andlw	1
 21690  1EA1  00F0               	movwf	??_DimmerLights_IOC_1
 21691  1EA2  3000               	movlw	0
 21692  1EA3  0020               	movlb	0	; select bank0
 21693  1EA4  190D               	btfsc	13,2	;volatile
 21694  1EA5  3001               	movlw	1
 21695  1EA6  0670               	xorwf	??_DimmerLights_IOC_1,w
 21696  1EA7  1903               	skipnz
 21697  1EA8  0008               	return
 21698                           
 21699                           ;Dimmer_B1.c: 1836: DimmerIntr1.Count = 0;
 21700  1EA9  0021               	movlb	1	; select bank1
 21701  1EAA  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 21702                           
 21703                           ;Dimmer_B1.c: 1837: DimmerIntr1.GO = 1;
 21704  1EAB  1420               	bsf	_DimmerIntr1^(0+128),0
 21705                           
 21706                           ;Dimmer_B1.c: 1839: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21707  1EAC  1E20               	btfss	_DimmerIntr1^(0+128),4
 21708  1EAD  1B20               	btfsc	_DimmerIntr1^(0+128),6
 21709                           
 21710                           ;Dimmer_B1.c: 1840: DimmerIntr1.Tune = 1;
 21711  1EAE  14A0               	bsf	_DimmerIntr1^(0+128),1
 21712                           
 21713                           ;Dimmer_B1.c: 1841: }
 21714                           ;Dimmer_B1.c: 1843: if (DimmerIntr1.Calculate == 1) {
 21715  1EAF  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 21716  1EB0  2EC2               	goto	i1l8435
 21717                           
 21718                           ;Dimmer_B1.c: 1844: DimmerIntr1.Calculate = 0;
 21719  1EB1  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 21720                           
 21721                           ;Dimmer_B1.c: 1845: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 21722  1EB2  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 21723  1EB3  00F0               	movwf	??_DimmerLights_IOC_1
 21724  1EB4  0870               	movf	??_DimmerLights_IOC_1,w
 21725  1EB5  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 21726                           
 21727                           ;Dimmer_B1.c: 1846: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 21728  1EB6  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 21729  1EB7  00F0               	movwf	??_DimmerLights_IOC_1
 21730  1EB8  0870               	movf	??_DimmerLights_IOC_1,w
 21731  1EB9  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 21732                           
 21733                           ;Dimmer_B1.c: 1847: DimmerIntr1.TuneValue3_Value = DimmerIntr1.TuneValue3;
 21734  1EBA  0829               	movf	(_DimmerIntr1^(0+128)+9),w
 21735  1EBB  00F0               	movwf	??_DimmerLights_IOC_1
 21736  1EBC  0870               	movf	??_DimmerLights_IOC_1,w
 21737  1EBD  00AD               	movwf	(_DimmerIntr1^(0+128)+13)
 21738                           
 21739                           ;Dimmer_B1.c: 1848: DimmerIntr1.TuneValue4_Value = DimmerIntr1.TuneValue4;
 21740  1EBE  082A               	movf	(_DimmerIntr1^(0+128)+10),w
 21741  1EBF  00F0               	movwf	??_DimmerLights_IOC_1
 21742  1EC0  0870               	movf	??_DimmerLights_IOC_1,w
 21743  1EC1  00AE               	movwf	(_DimmerIntr1^(0+128)+14)
 21744  1EC2                     i1l8435:	
 21745                           
 21746                           ;Dimmer_B1.c: 1849: }
 21747                           ;Dimmer_B1.c: 1859: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 21748  1EC2  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 21749  1EC3  0020               	movlb	0	; select bank0
 21750  1EC4  1D0D               	btfss	13,2	;volatile
 21751  1EC5  0008               	return
 21752  1EC6  0021               	movlb	1	; select bank1
 21753  1EC7  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 21754  1EC8  0008               	return
 21755  1EC9                     __end_of_DimmerLights_IOC_1:	
 21756  007E                     btemp	set	126	;btemp
 21757  007E                     pic14e$flags	set	126
 21758  007E                     wtemp	set	126
 21759  007E                     wtemp0	set	126
 21760  0080                     wtemp1	set	128
 21761  0082                     wtemp2	set	130
 21762  0084                     wtemp3	set	132
 21763  0086                     wtemp4	set	134
 21764  0088                     wtemp5	set	136
 21765  007F                     wtemp6	set	127
 21766  007E                     ttemp	set	126
 21767  007E                     ttemp0	set	126
 21768  0081                     ttemp1	set	129
 21769  0084                     ttemp2	set	132
 21770  0087                     ttemp3	set	135
 21771  007F                     ttemp4	set	127
 21772  007E                     ltemp	set	126
 21773  007E                     ltemp0	set	126
 21774  0082                     ltemp1	set	130
 21775  0086                     ltemp2	set	134
 21776  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         295
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     76      78
    BANK1            80      0      80
    BANK2            80      0      80
    BANK3            80      0      80
    BANK4            80      4      57
    BANK5            80      0      32
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK5[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_getTemp_AD
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->___lwdiv
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setControl_Lights_Table->_setRF_AdjControl
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerIntr_ValueCalculate->_Division
    _DimmerIntr_Initialization->_Division
    ___ftmul->___ftpack
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _DimmerLights_TwoPhase_Main->_DimmerLights_AssignationDimming
    _DimmerLights_AssignationDimming->_setDimmerIntr_MaxmumValue
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _DimmerIntr_ValueCalculate->_Division
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  181915
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              6 COMMON     4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              6 COMMON     2     2      0
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6429
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    6429
                                             61 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4828
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4828
                                             11 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   50311
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   50311
                                             74 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45880
                                             72 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4671
                                             61 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41014
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              6 COMMON     4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11472
                                             69 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   23710
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2438
                                              0 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      70
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2285
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3694
                                              9 COMMON     1     1      0
                                              6 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   68979
       _DimmerLights_DimmingFunction
         _DimmerLights_TwoPhase_Main
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   51315
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   29582
                                             69 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             61 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   21214
                                             66 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3161
                                             61 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_TwoPhase_Main                           1     1      0   16428
                                             65 BANK0      1     1      0
    _DimmerLights_AssignationDimming
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _DimmerLights_AssignationDimming                      4     4      0   16322
                                             61 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0     981
                                              5 BANK0      2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            3     3      0     919
                                              2 BANK0      3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   28004
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   28004
                                             58 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) _Division                                             5     4      1     857
                                              7 COMMON     3     2      1
                                              0 BANK0      2     2      0
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              5     4      1     345
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5400
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5400
                                             61 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             58 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    2332
                                              9 COMMON     1     1      0
                                              6 BANK0      5     5      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
         _Division
           ___lbdiv
     _DimmerLights_TwoPhase_Main
       _DimmerLights_AssignationDimming
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_Status
           _DimmerLights_SelectPointer
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setMemory_Modify
       _DimmerLights_SelectPointer
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
           _Division
             ___lbdiv
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
     _DimmerLights_IOC_2
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      39      13       71.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      20      15       40.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1A3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 30 11:41:23 2015

                    __size_of_Switch_Main 0008                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1A7F                            ___bmul@product 0074  
               getMain_Lights_Count@count 0075                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1D2C                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _u1 0220  
                                      _Sw 006D                            setTemp_Main@AD 0065  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1968  
                  __end_of_setDelayOff_GO 0BF6                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                    setRF_AdjControl@status 0077  
                __size_of_getRF_KeyStatus 000E                      _setDimmerLights_Main 179B  
                    _setDimmerLights_Line 1B15                              ___ftadd@sign 0043  
                                     l100 131B                                       l110 12E5  
                                     l102 132D                                       l111 12E1  
                                     l112 12D1                                       l114 12DF  
                                     l331 1B4E                      _setDimmerLights_SwOn 0784  
                                     l332 1B50                                       l263 08D0  
                                     l375 1D78                                       l589 0961  
                                     l926 0FBE                                       l960 196F  
                                     l961 1975                                       l779 1A3E  
                                     l955 1B22                                       l886 1F0F  
                                     _GIE 005F                                       _CRC 00E8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _LED 00EB                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC7 0077  
                                     _RF1 00C0                                       _ISR 0004  
                                     _WDT 012A                                       _Cmd 00E9  
            getDimmerLights_Status@lights 0074                                       _Sw1 01D0  
                                     _Sw2 01D9                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 1B5B                     _Buzzer_Initialization 27D9  
                         __end_of_ADC_Set 1838                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 1E12               _setDimmerIntr_ControlStatus 1DE9  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 18C6  
                   _setDimmerLights_OnOff 0F42          setDimmerLights_DimmingRun@lights 0076  
                              Load_Main@i 0028                              ___ftdiv@sign 0035  
                                    l1070 0D1C                                      l1054 0CC9  
                                    l1223 120F                                      l1072 0D0E  
                                    l1056 0CBA                                      l1224 1216  
                                    l1081 0D37                                      l1065 0CE6  
                                    l1075 0D1A                                      l1059 0CC7  
                                    l1190 1C41                                      l3112 1C53  
                                    l1513 1E35                                      l1523 0A54  
                                    l2092 0529                                      l1189 1C38  
                                    l3302 0403                                      l2505 1854  
                                    l2098 047C                                      l1714 1120  
                                    l2523 15A9                           __end_of_IOC_Set 18AF  
                                    l1910 0082                                      l1743 1E64  
                                    l2543 0C0C                                      l2536 1F59  
                                    l2480 072C                                      l3273 15DD  
                                    l1738 1E4F                                      l1770 0600  
                                    l1906 01ED                                      l2554 0C90  
                                    l1739 1E68                                      l1499 11D7  
                                    l2475 0780                                      l1916 01C9  
                                    l1908 008B                                      l1917 01C7  
                                    l1909 0087                                      l2901 0238  
                                    l3279 15F4                                      l2479 06E8  
                                    l2586 083E                            _Load_Main$4636 0023  
                                    l1779 1A7E                                      l7103 087C  
                                    l7041 0BA8                                      l8001 1918  
                                    l7019 114F                                      l7051 0BD8  
                                    l7215 1D62                                      l7055 0BEC  
                                    l8103 1B41                                      l7233 1A6C  
                                    l7313 1FBA                                      l7083 1DD5  
                                    l7075 1B0A                                      l7091 0831  
                                    l7171 1C27                                      l2899 035A  
                   _setDimmerLights_SwOff 1122                                      l7237 1A79  
                                    l8125 1F83                                      l8117 1F65  
                                    l9101 09A6                                      l7095 0836  
                                    l7431 1DFE                                      l7511 1501  
                                    l8119 1F71                                      l8207 1BE4  
                                    l7183 1D89                                      l6801 0D66  
                                    l7089 0830                                      l7521 1511  
                                    l8129 1F8C                                      l8217 1BF1  
                                    l7185 1D94                                      l7169 1C22  
                                    l9121 09D5                                      l9105 09AE  
                                    l6563 15BA                                      l7507 14FB  
                                    l7515 1507                                      l8219 1BF5  
                                    l6661 1A4B                                      l6573 15E2  
                                    l6565 15C4                                      l6725 038C  
                                    l7541 153B                                      l7525 1517  
                                    l9141 16A4                                      l6575 15EA  
                                    l6567 15C9                                      l6559 15B3  
                                    l6735 03A2                                      l6823 0DC0  
                                    l6815 0DA7                                      l7471 1E4B  
                                    l7439 1A8A                                      l6673 1AF3  
                                    l6753 03CF                                      l6729 0393  
                                    l6921 0AC0                                      l6913 0AA5  
                                    l7481 1E60                                      l7473 1E53  
                                    l7449 1A35                                      l7537 1535  
                                    l7545 1541                                      l7529 151D  
                                    l8089 1AC9                                      l9145 16B3  
                                    l9137 1695                                      l6771 0415  
                                    l6755 03D9                                      l6747 03BC  
                                    l6843 0EBB                                      l6923 0AC9  
                                    l6915 0AB3                                      l6691 19E9  
                                    l8099 1B38                                      l6685 1A60  
                                    l6677 1AFC                                      l6765 03F5  
                                    l6757 03DE                                      l6837 0EA5  
                                    l6925 0ACC                                      l7581 19A0  
                                    l9093 0987                                      l9149 16C2  
                                    l6775 0427                                      l6767 03FF  
                                    l6759 03E2                                      l6871 0F1A  
                                    l6855 0EF6                                      l7583 19A5  
                                    l6695 19EF                                      l6785 0442  
                                    l6929 0ADA                                      l7577 199A  
                                    l6795 0D50                                      l6867 0F12  
                                    l6859 0EFE                                      l7771 1FD7  
                                    l8573 1BAF                     _myMain_Initialization 191E  
                                    l9623 1355                                      l6895 0A75  
                                    l7783 1FEB                                      l8903 1C4D  
                                    l8575 1BB2                                      l9641 137B  
                                    l9633 135D                                      l9617 134A  
                                    l7793 1FFA                                      l7785 1FED  
                                    l9801 1B7F                                      l8923 12BD  
                                    l9635 1369                                      l7795 1FFE  
                                    l8579 1BB7                                      l9645 1384  
                                    l9733 07A1                                      l9805 1B85  
                                    l9821 1D1C                                      l9743 07B2  
                                    l9735 07A4                                      l9815 1D13  
                                    l9903 1D3F                                      l9649 138C  
                                    l9745 07B7                                      l9817 1D16  
                                    _CFGS 0CAE                                      l9755 07DF  
                                    l9843 1966                                      l9931 124C  
                                    l9757 07E5                                      l9781 1CB5  
                                    l9941 125C                                      l9925 1243  
                                    l9861 118F                                      l9759 07EF  
                                    l9791 1CC4                                      l9935 1253  
                                    l9927 1246                              __CFG_WDTE$ON 0000  
                                    l9689 1CF3                                      l9937 1256  
                                    l9873 0AFA                                      l9779 1CAC  
                                    l9877 0AFF                                      l9799 1B7C  
                                    l9897 1D36                                      l9889 0B56  
                                    l9899 1D39                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5205 15D8  
                                    u6015 0AC1                                      u5225 15E5  
                                    _PEIE 005E                                      u5255 15FB  
                                    u5185 15BF                                      u6255 0BB4  
                                    u5625 03D0                                      u6445 1D7E  
                                    u5655 03E3                                      u5905 0F1B  
                                    u5595 03BD                                      u5755 0D78  
                                    u5915 0F21                                      u5835 0EC7  
                                    u9205 12B3                                      u5685 03F6  
                                    u5765 0D88                                      u5845 0ED7  
                                    u7445 1AE2                                      u5775 0DA8  
                                    u5785 0DB7                                      u5865 0EFF  
                                    u5795 0DC1                                      u5875 0F05  
                                    u5955 0A7C                                      u7715 1F68  
                                    u7475 1B98                                      u9165 1C54  
                                    u7735 1F72                                      u9175 1C59  
                                    u5985 0AA6                                      u7745 1F7C  
                                    u7755 1F84                                      u9515 09C5  
                                    u9605 16C8                                      u9465 0996  
                                    u9565 168C                                      u9575 169B  
                                    u9585 16AA                                      u9595 16B9  
                                    _LWLO 0CAD                                      _RSSI 012E  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1B73                _setDimmerLights_DimmingRun 1B5B  
                                    _Buz1 00DC                                      _Load 0132  
                                    _Temp 015A                                      _main 1492  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0968  
                         __end_of_RF_Main 27E5                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1884  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 0026  
    __end_of_DimmerLights_DimmingFunction 0D39     __size_of_DimmerLights_DimmingFunction 00A8  
            _DimmerLights_DimmingFunction 0C91                __end_of_setRFSW_AdjControl 0B6A  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2730 0075      _getDimmerLights_Allow_Condition$2731 0076  
    _getDimmerLights_Allow_Condition$2729 0074                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
              ?_DimmerIntr_ValueCalculate 0070                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 2000  
__size_of_getDimmerLights_Allow_Condition 0037         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1FC9  
                  _getDimmerLights_Status 192C                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 18F6                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 012C                                     l10005 1467  
                                   l10101 08D7                                     l10111 08E7  
                                   l10103 08DA                                     l10203 0FA0  
                                   l10115 08ED                                     l10107 08E0  
                                   l10051 0C3C                                     l10221 0FD0  
                                   l10133 161E                                     l10109 08E4  
                                   l10061 0C69                                     l10045 0C1B  
                                   l10037 0BF7                                     l11023 00AE  
                                   l11007 008A                                     l10135 1621  
                                   l10063 0C6D                                     l10055 0C5D  
                                   l10047 0C21                                     l10217 0FCC  
                                   l11121 01DC                                     l10065 0C71  
                                   l10057 0C61                                     l10315 1E20  
                                   l10155 1636                                     l10139 1627  
                                   l10083 08AA                                     l10059 0C65  
                                   l10245 1403                                     l10237 0FFD  
                                   l11061 0163                                     l11029 00E0  
                                   l10157 164C                                     l10077 08A1  
                                   l10069 0C75                                     l10511 0CE7  
                                   l11151 054E                                     l11055 0154  
                                   l10079 08A4                                     l10351 1562  
                                   l10505 0CDA                                     l10193 0F83  
                                   l11161 056C                                     l11065 017D  
                                   l10097 08B9                                     l11241 14B6  
                                   l10195 0F8C                                     l10451 17C1  
                                   l11171 056F                                     l11075 0199  
                                   l10363 157B                                     l10453 17C7  
                                   l11173 059B                                     l11157 055D  
                                   l11085 01AF                                     l11069 0189  
                                   l11245 14C1                                     l10535 0D10  
                                   l10199 0F96                                     l10463 17ED  
                                   l11191 05DC                                     l10607 0A4D  
                                   l10367 1584                                     l10465 17F3  
                                   l11193 05E6                                     l11169 0593  
                                   l10721 0727                                     l10641 048E  
                                   l10547 0D2C                                     l10563 13C0  
                                   l11187 05D4                                     l10635 047F  
                                   l10643 0491                                     l10493 0CBC  
                                   l10565 13D1                                     l11189 05B0  
                                   l10581 190A                                     l10805 0297  
                                   l11199 05F6                                     l10735 073B  
                   ?_setDimmerLights_Main 0070                                     l10593 09E0  
                                   l10921 11B6                                     l10761 0779  
                                   l10673 0500                                     l10819 02D5  
                                   l10683 0515                                     l10749 0765  
                                   l10829 0307                                     l10685 0517  
                                   l10871 1F11                                     l10599 09F4  
                                   l10795 0265                                     l10779 0222  
                                   l10957 1102                                     l10895 067C  
                                   l10989 0069                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 005D                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0255                           __end_of___awdiv 1393  
                         __end_of___lbdiv 1CC6                           __end_of___ftadd 045A  
                         __end_of___ftdiv 0DE2                           __end_of___ftneg 1870  
                         __end_of___ftmul 0F42                                     u10345 1360  
                         ___awdiv@divisor 0072                                     u10365 136A  
                                   u10375 1374                                     _T1CON 0018  
                                   u10385 137C                                     u10465 1AA3  
                                   u12315 11CE                           __end_of___fttol 0AE3  
                                   u12505 00AC                                     u12515 00DE  
                                   u12605 0190                                     u12525 0113  
                                   u12365 1118                                     u11835 04D2  
                                   u12740 0599                                     u11855 04E9  
                                   u12745 0578                                     u12770 05DA  
                                   u11875 0507                                     u11965 0704  
                                   _IOCBF 0396                                     u12775 05B9  
                                   u11995 0754                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1F93  
                                   i1l995 10A0                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1AE8  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 179B  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1736  
                                   _Light 012D                          __end_of_TMR1_ISR 1CE8  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1902        DimmerLights_DimmingFunction@lights 0026  
                                   _getAD 1BA7                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076                           __end_of_setData 12A6  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 19E7               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1A09  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010             __end_of_setLED_Initialization 19B7  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1902                        _setRF_DimmerLights 082B  
                         ___lbdiv@divisor 0072               __size_of_Flash_Memory_Write 002A  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0075  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 005F  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 194A                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 14ED                       ?_setRF_DimmerLights 005D  
                        __end_of_Fosc_Set 27EF            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0065  
                          _Exception_Main 052F                          ?_CC2500_WriteREG 0074  
       __end_of_DimmerIntr_ValueCalculate 1492                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1838                                    ??_main 007A  
                           ___fttol@sign1 004E                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0BF6  
                          _setMemory_Data 1899                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 13E7  
                               ??_IOC_ISR 0071                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00A0                               _DimmerIntr2 00B0  
                _getMain_All_LightsStatus 1959                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1A94                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0065                      ??_setRF_DimmerLights 005E  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08F9  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1AFE  
                               ??_RF_Main 007A               ?_DimmerLights_TwoPhase_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 182A  
                               ??_WDT_Set 0072                          __end_of___awtoft 1D0A  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 160B  
                _getMain_All_Error_Status 1E3C                                    _IOCBF2 1CB2  
                                  i1l1019 10D8                                    i1l1462 001A  
                                  i1l8435 1EC2                                    i1l8453 10C6  
                                  i1l8391 108E                                    i1l8447 10BF  
                                  i1l8385 1087                                    i1l8459 10CE  
                                  i1l9531 0012                                    i1l8397 1096  
                                  i1l8497 1EF2                                    _FVRCON 0117  
                                  i1l8985 1CE1                                    i1l8995 18C2  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01A0                                    u930_25 1CDC  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1BF7                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 187A     __size_of_setDimmerLights_DimmingClose 000A  
            _setDimmerLights_DimmingClose 1870                      Exception_Main@i_4227 002B  
                      DelayTime_1us@count 0072                        setRF_AdjControl@sw 0079  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1ABE                                    _Dimmer 0120  
                                  _DlySw1 01E2                                    _DlySw2 01E7  
                        _setRF_AdjControl 1F93                  ?_setOverTemp_ADV_Restore 0070  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 19A7  
              __end_of_Mcu_Initialization 1A2C                       __end_of_Buzzer_Main 12EC  
                                  _Memory 0230                                    _Timer1 0125  
                                  ___bmul 19E7                    __end_of_Exception_Main 0601  
                    Exception_Main@lights 002D                                    ___wmul 1C4B  
                               ??___awdiv 0076                                 ??___lbdiv 0073  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 0131  
                    Exception_Main@status 0026   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1BF7  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B         ??_getAll_DimmerIntr_Dimming_Sw_RF 0072  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1BDC  
                                  _s_data 00EF                    ??_setDimmerLights_SwOn 0079  
                                  _setLED 14ED                                    _myMain 00CF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 18A4  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 12EC                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 0027               __end_of_Load_Initialization 27DF  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0072          __end_of_setDimmerIntr_Dimming_RF 1DE9  
        __end_of_setDimmerIntr_Dimming_Sw 1D74                     ___ftmul@f3_as_product 0031  
               _setDimmerLights_DimmingOn 1D99                                 ??_setData 0072  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 19D7               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074               __size_of_DimmerLights_IOC_1 0030  
             __size_of_DimmerLights_IOC_2 0030                     __end_of_SwPointSelect 1AD3  
             __size_of_DimmerLights_TMR_1 0038               __size_of_DimmerLights_TMR_2 0038  
            __size_of_Flash_Memory_Modify 0082                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                        setTemp_Main@TempGO 0060  
                        ___lbdiv@dividend 0074                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 004F           getDimmerIntr_DimmingValue@value 0073  
         setDimmerIntr_DimmingValue@value 0072                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$6247 0074                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0029                 _setDimmerLights_SwOn$2659 0027  
               _setDimmerLights_SwOn$2668 0028                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK5 1C85                             __end_of_getAD 1BC1  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 18DE                           _getSw_KeyStatus 1B2C  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
   DimmerLights_AssignationDimming@status 005F                           ?_setMemory_Data 0072  
          ??_DimmerLights_DimmingFunction 0025          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0063  
           ??_Flash_Memory_Initialization 0076                          ___lbdiv@quotient 0076  
                    _getMain_Lights_Count 19F8                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01F3         setDimmerIntr_ControlStatus@lights 0074  
                      __size_of_getBuz_GO 0010                 _setDimmerIntr_MaxmumValue 1AFE  
              __end_of_set_TimeoutCleared 1809           setDimmerIntr_MaxmumValue@lights 005C  
                      __size_of_getRxData 005F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 18C6  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0075                       _Temp_Initialization 27E5  
                      ??_CC2500_WriteByte 0072                                 ?_Division 0077  
                              __pbssBANK0 006C                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 12A6                         ??_setRFSW_Control 0065  
             ?_setDimmerLights_DimmingRun 0074                         __end_of_Temp_Main 27EB  
                                 ?_IO_Set 0070                            ??_my_MainTimer 0079  
                              ??_LED_Main 0077                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 183F                                __pnvCOMMON 007B  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 006C                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1492  
                          _getDelayOff_GO 194A                       _CC2500_WriteCommand 1B73  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 005F         __end_of_DimmerIntr_Initialization 0E8E  
           ??_DimmerLights_Initialization 007A                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
       __size_of_getDimmerIntr_Dimming_Sw 0016                                _getLoad_AD 0968  
                              ??_TMR1_Set 0072                                __pintentry 0004  
                  ??_setSw_Initialization 0076                                _getLoad_OK 1815  
               ?_getDimmerIntr_Dimming_Sw 0070                        __size_of_setTxData 0007  
             ??_DimmerIntr_ValueCalculate 0022                                   ?_setLED 0074  
                  __size_of_DelayTime_1us 0025       __size_of_DimmerLights_TwoPhase_Main 0054  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1831  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 166D  
      __end_of_DimmerLights_SelectPointer 1A6A                _DimmerLights_SelectPointer 1A55  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 188E  
                      _setRFSW_AdjControl 0AE3                    __end_of_setProductData 18D2  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 18BA  
                                 _IOC_Set 18A4                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0062     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 119C  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1066  
                  __size_of_CC2500_RxData 0062                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 27E2                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0078  
                                 _WDT_Set 187A           __end_of_setControl_Lights_Table 0C91  
                         setRF_Main@error 006B                    __size_of_setCmd_Status 0015  
                              ??_Fosc_Set 0072           __end_of_setDimmerLights_Dimming 143B  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 18BA                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 19C7  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1959                                   _VarLED1 016C  
                                 _VarLED2 01EC            __end_of_getDimmerLights_Status 193B  
                       __end_of_getRxData 15AB                   __end_of_getSw_KeyStatus 1B43  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005D                            ??_setTemp_Main 005D  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 133F            ??_setDimmerLights_DimmingClose 0075  
                                 ___lbdiv 1CA5                                   ___ftadd 0364  
                                 ___ftdiv 0D39                                   ___ftneg 1867  
                         __size_of___wmul 001D                                   ___ftmul 0E8E  
                                 ___fttol 0A5C                       __end_of_Switch_Main 1867  
                                 ___lwdiv 1F5D                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1910  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0060  
         DimmerIntr_ValueCalculate@lights 0024                           __size_of_setBuz 0053  
                                 __ptext1 10EA                                   __ptext2 191E  
                                 __ptext3 166D                                   __ptext4 0968  
                                 __ptext5 1BA7                                   __ptext6 1804  
                                 __ptext7 1AD3                                   __ptext8 19D7  
                                 __ptext9 0002                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0066                           ?_setProductData 005A  
               __end_of_Flash_Memory_Main 11DD                 __end_of_Flash_Memory_Read 107A  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 06C5  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 1847  
                __end_of_setRF_AdjControl 1FC9                         _DimmerLights_Main 1EF9  
                                 _setData 1262            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 2800                __end_of_CC2500_ClearRXFIFO 27F7  
                ??_setTemp_Initialization 0072                __end_of_CC2500_ClearTXFIFO 27FB  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 007B                            _LedPointSelect 1C2E  
               getAll_Sw_KeyStatus@status 0073                           getTemp_AD@ADRES 0078  
                     _DelayOffPointSelect 1A40                                   clrloop0 1810  
          __size_of_Switch_Initialization 0008                 _DimmerIntr_ValueCalculate 143B  
           __end_of_Switch_Initialization 185F                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 0801  
                           _DelayTime_1us 1D74                         __end_of_setTxData 1823  
              __end_of_Flash_Memory_Write 1E3C        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1809                __end_of_setRF_TransceiveGO 1997  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 180A  
                              _setSw_Main 01F3                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 002A                         _CC2500_ReadStatus 1D2C  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 19A7  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 160B                             _CC2500_TxData 0891  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 09DA  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1A6A                       _Flash_Memory_Unlock 07F7  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                  setLED_Initialization@led 0076  
                 setTemp_Main@DangerValue 0063                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F29                        _Mcu_Initialization 1A1A  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001A  
            __end_of_setRF_TimeoutCleared 27F3                      __end_of_my_MainTimer 1122  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C4B                  __size_of_CC2500_WriteREG 0022  
                Load_Main@ErrorCountValue 0025          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 082B  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0066         DimmerLights_AssignationDimming@sw 0060  
                          ?_DelayTime_1us 0072                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1D4F  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0074  
         getMain_All_Error_Status@command 0077                               ___ftdiv@exp 0034  
       __end_of_setDimmerLights_DimmingOn 1DC0                          ??_Exception_Main 0079  
                          __end_of_IO_Set 1C12                      _setRF_Initialization 1884  
                      _setMemory_LoopSave 19C7                               _Switch_Main 185F  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 191E                          ??_setMemory_Data 0073  
                             ___ftmul@exp 0030                     _CC2500_PowerOnInitial 1AA9  
             ??_DimmerIntr_Initialization 005A                      ??_Mcu_Initialization 0073  
             __end_of_getAll_Sw_KeyStatus 1910                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 19F8  
     __size_of_getDimmerIntr_DimmingValue 0014          DimmerLights_TwoPhase_Main@lights 0061  
                    setRF_DimmerLights@on 005D                            __end_of___wmul 1C68  
                       getSw_KeyStatus@sw 0073               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0022             __size_of_getDimmerLights_Line 000F  
        DimmerLights_SelectPointer@lights 0073                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0065                            __end_of_setLED 154C  
           __size_of_setDimmerLights_Line 0017             __size_of_setDimmerLights_SwOn 0073  
                          __end_of_setBuz 133F                __end_of_DimmerLights_IOC_1 1EC9  
              __end_of_DimmerLights_IOC_2 1EF9                      _CC2500_FrequencyCabr 18AF  
                 ??_getDimmer_Load_Status 0072                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 0014                               ?_setRF_Main 0070  
                         _setRFSW_Control 115C                         __size_of_WDT_Main 0010  
              __end_of_DimmerLights_TMR_1 10B2                __end_of_DimmerLights_TMR_2 10EA  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0010                          _getDimmer_LoadGO 1823  
                   ??_Flash_Memory_Modify 0076              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0072                __end_of_CC2500_InitPATable 1C85  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0072  
                   ??_Flash_Memory_Unlock 0072                      __end_of_setTemp_Main 052F  
                          ??_RF_RxDisable 0072    __end_of_getDimmerLights_PercentToValue 1736  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 16D1  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 0056                       __size_of_getLoad_OK 0007  
           setRF_AdjControl@dimmingStatus 0078                        _set_TimeoutCleared 1804  
       __end_of_setDimmerIntr_MaxmumValue 1B15                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0168  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0064                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 27E8  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0072  
                               _Rx_Length 00EC                     setProductData@address 005C  
                     Exception_Main@count 0027                       Exception_Main@error 0028  
                                ??___bmul 0073                                  ??___wmul 0076  
                  __size_of_SwPointSelect 0015          __end_of_getMain_All_LightsStatus 1968  
                               _Tx_Length 00EE                               __pdataBANK5 02A0  
                                ??_setLED 0075                                  ?_ADC_Set 0070  
                                ??_setBuz 0077                           ??_DelayOff_Main 007A  
                       ??_CC2500_ReadByte 0072               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 1E6A                          _CC2500_SIDLEMode 1800  
              __size_of_DimmerLights_Main 0030                        setMemory_Data@data 0072  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0074  
          getDimmerIntr_Dimming_Sw@lights 0073                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 0026            getDimmerIntr_Dimming_Sw@status 0072  
                               ___latbits 0003                          _setMemory_Modify 1977  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
               setRF_TransceiveGO@command 0073                             __pcstackBANK4 0255  
                    ??_set_TimeoutCleared 0072                 _DimmerIntr_Initialization 0DE2  
                         ??_DelayTime_1us 0074                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 005F                         ??_CC2500_PowerRST 0078  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0073                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 005D            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1BDC  
                setRFSW_AdjControl@status 005F                           ??_CC2500_TxData 0076  
                          getRxData@error 0069               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 27EF                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0029                                ?_Temp_Main 0070  
      __size_of_DimmerIntr_ValueCalculate 0057                       __size_of_setRF_Main 00BF  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1997                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005E  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 0800  
                               _getBuz_GO 19B7                  ?_setDimmerLights_Dimming 0062  
     __end_of_Flash_Memory_Initialization 06C5               _Flash_Memory_Initialization 0601  
                                ?___awdiv 0072                                 __ptext100 194A  
                               __ptext101 1997                                  ?___lbdiv 0072  
                               __ptext110 1815                                 __ptext102 13E7  
                               __ptext111 1E3C                                 __ptext103 181C  
                               __ptext120 0DE2                                 __ptext112 1393  
                               __ptext104 1987                                 __ptext121 1977  
                               __ptext113 1E6A                                 __ptext105 082B  
                               __ptext130 15AB                                 __ptext122 1736  
                               __ptext114 1AFE                                 __ptext106 1B15  
                               __ptext131 193B                                 __ptext123 16D1  
                               __ptext115 1DC0                                 __ptext107 1D4F  
                               __ptext140 1122                                 __ptext132 1CA5  
                               __ptext124 0A5C                                 __ptext116 0C91  
                               __ptext108 1A2C                                 __ptext141 192C  
                               __ptext133 1847                                 __ptext125 1867  
                               __ptext117 143B                                 __ptext109 1FC9  
                                ?___ftadd 0039                                 __ptext150 10B2  
                               __ptext142 1A55                                 __ptext134 08F9  
                               __ptext126 0E8E                                 __ptext118 188E  
                               __ptext151 107A                                 __ptext143 183F  
                               __ptext135 18C6                                 __ptext127 0D39  
                               __ptext119 27D8                                 __ptext152 18BA  
                               __ptext144 27FB                                 __ptext136 0784  
                               __ptext128 0364                                 __ptext153 1EC9  
                               __ptext145 1A40                                 __ptext137 12EC  
                               __ptext129 1CE8                                 __ptext154 1E99  
                               __ptext146 12A6                                 __ptext138 133F  
                               __ptext147 27D9                                 __ptext139 1AE8  
                               __ptext149 1CC6                                 _getRxData 154C  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0038                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 119C                          ??_setProductData 005B  
                 _setOverTemp_ADV_Restore 1B8D             __size_of_setSw_Initialization 0007  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 27DC  
                           ??_setLog_Code 005D                  getDimmerLights_Line@line 0073  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1A40              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1A2C                    CC2500_WriteByte@loop_a 0073  
                                ?_setData 0070            __size_of_setDimmerLights_OnOff 00BE  
                       ?_setRF_AdjControl 0070                                 _r_address 0130  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 003A  
          __size_of_myMain_Initialization 000E             __end_of_setDimmerLights_SwOff 115C  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 192C  
                          __size_of_getAD 001A                          ___lwdiv@quotient 0077  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 1ABE  
                     __end_of_setLED_Main 121E              ??_DimmerLights_TwoPhase_Main 007A  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 27E8                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 18EA  
                         SwPointSelect@sw 0073                                 clear_ram0 180F  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10EA                                 _setTxData 181C  
     __end_of_DimmerLights_Initialization 1899               _DimmerLights_Initialization 188E  
                      _CC2500_ClearRXFIFO 27F3                    _Flash_Memory_Main$3708 0021  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 27F7  
                _getDimmerIntr_Dimming_Sw 1AE8                  setRF_DimmerLights@lights 0061  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1A1A  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0060      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 0087       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1E12                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1CC6  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 18F6  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1987                                  _RF_Count 0128  
                    __end_of_RF_RxDisable 1857                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1B8D                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 19D7                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0072                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D5                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00EA  
                            setSw_Main@sw 002D                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 18DE  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1F5D  
                   _DlyOff_Initialization 27FB         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                                  _Division 193B  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DC0               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 1D4F                                  _Fosc_Set 27EB  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0066  
                      __end_of_getLoad_AD 09DA                        __end_of_getLoad_OK 181C  
                   _Switch_Initialization 1857         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 16D1  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1B43                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 0015                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 012F                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0067             _getMain_All_Error_Status$4214 0073  
           _getMain_All_Error_Status$4215 0075                  __end_of_getDimmer_LoadGO 182A  
                     _Load_Initialization 27DC          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
               ??_setOverTemp_ADV_Restore 0072                              _setTemp_Main 045A  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0029  
                                ___awtoft 1CE8                          ??_LedPointSelect 0072  
                                ___ftpack 15AB             __size_of_getMain_Lights_Count 0011  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006A                      CC2500_WriteREG@value 0074  
                             _setLED_Main 11DD                __end_of_setRF_DimmerLights 0891  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1831                          setDelayOff_GO@sw 0064  
                         ___lwdiv@divisor 0072                          __size_of_setData 0044  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 27E8                                  __ptext11 045A  
                                __ptext20 1ABE                                  __ptext12 1B8D  
                                __ptext21 1857                                  __ptext13 27E5  
                                __ptext30 1F93                                  __ptext22 1838  
                                __ptext14 0800                                  __ptext31 115C  
                                __ptext23 27E2                                  __ptext15 185F  
                                __ptext40 1C12                                  __ptext32 0AE3  
                                __ptext24 06C5                                  __ptext16 01F3  
                                __ptext41 1AA9                                  __ptext33 1B5B  
                                __ptext25 1262                                  __ptext17 1A09  
                                __ptext50 27F3                                  __ptext42 1800  
                                __ptext34 1910                                  __ptext26 154C  
                                __ptext18 1D99                                  __ptext51 1B73  
                                __ptext43 121E                                  __ptext35 19B7  
                                __ptext27 1F29                                  __ptext19 1B2C  
                                __ptext60 1BF7                                  __ptext52 27EF  
                                __ptext44 0801                                  __ptext36 184F  
                                __ptext28 19C7                                  __ptext61 18A4  
                                __ptext53 1A94                                  __ptext45 1C68  
                                __ptext37 0891                                  __ptext29 0BF6  
                                __ptext70 1F5D                                  __ptext62 27EB  
                                __ptext54 1B43                                  __ptext46 1D0A  
                                __ptext38 160B                                  __ptext71 27DC  
                                __ptext63 1831                                  __ptext55 27DF  
                                __ptext47 18AF                                  __ptext39 1D2C  
                                __ptext80 18D2                                  __ptext72 1BC1  
                                __ptext64 0053                                  __ptext56 1884  
                                __ptext48 1D74                                  __ptext81 0601  
                                __ptext73 18EA                                  __ptext65 19F8  
                                __ptext57 1A1A                                  __ptext49 27F7  
                                __ptext90 0F42                                  __ptext82 1899  
                                __ptext74 11DD                                  __ptext66 182A  
                                __ptext58 187A                                  __ptext91 14ED  
                                __ptext83 1E12                                  __ptext75 18DE  
                                __ptext67 1823                                  __ptext59 18F6  
                                __ptext92 1C2E                                  __ptext84 07F7  
                                __ptext76 19A7                                  __ptext68 1BDC  
                                __ptext93 1870                                  __ptext85 1066  
                                __ptext77 119C                                  __ptext69 1C4B  
                                __ptext94 1A7F                                  __ptext86 052F  
                                __ptext78 1902                                  __ptext95 1DE9  
                                __ptext87 1968                                  __ptext79 09DA  
                                __ptext96 0B6A                                  __ptext88 1EF9  
                                __ptext97 19E7                                  __ptext89 179B  
                                __ptext98 1A6A                                  __ptext99 1959  
                                __product 02A0                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 1977  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1B2C  
                      _DimmerLights_IOC_1 1E99                        _DimmerLights_IOC_2 1EC9  
            __end_of_setDimmerLights_SwOn 07F7                              ??_setSw_Main 002B  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 1A09        __size_of_DimmerIntr_Initialization 00AC  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 107A  
                      _DimmerLights_TMR_2 10B2                  __end_of_CC2500_SIDLEMode 1804  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1A55  
                setOverTemp_ADV_Restore@i 0073                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1C12                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1C68                  __end_of_setMemory_Modify 1987  
    _getAll_DimmerIntr_Dimming_Sw_RF$2605 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2606 0074  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 0784                               ??_getBuz_GO 0074  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0068                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1AA9               Flash_Memory_Main@key_Status 0020  
                _getAll_Sw_KeyStatus$7434 0074                                  main@argc 0255  
                                main@argv 0257                       ?_CC2500_InitPATable 0070  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 121E  
                __size_of_getSw_KeyStatus 0017              setDimmerLights_Dimming@value 0064  
      __end_of_setDimmerIntr_DimmingValue 1A94                _setDimmerIntr_DimmingValue 1A7F  
             __end_of_Flash_Memory_Modify 0A5C              __size_of_getAll_Sw_KeyStatus 000E  
                             _setLog_Code 1F29               __end_of_Flash_Memory_Unlock 0800  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1D0A  
                      __end_of_setSw_Main 0364                     ??_Load_Initialization 0074  
                    ??_DimmerLights_IOC_1 0070                      ??_DimmerLights_IOC_2 0070  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0021           __end_of_setOverTemp_ADV_Restore 1BA7  
      __end_of_DimmerLights_TwoPhase_Main 13E7                _DimmerLights_TwoPhase_Main 1393  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0061                           setDelayOff_GO@j 0062  
                         setDelayOff_GO@k 0063                   ??_CC2500_PowerOnInitial 007A  
                   setTemp_Main@SafeValue 0061    __end_of_setDimmerLights_Initialization 27D9  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 27D8  
              ?_setDimmerIntr_MaxmumValue 005A                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                         getLoad_AD@ADRES 0023                     __size_of_RF_RxDisable 0008  
                       _RF_Initialization 27DF                               getLoad_AD@i 0025  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
 __end_of_DimmerLights_AssignationDimming 1E99  __size_of_DimmerLights_AssignationDimming 002F  
       ??_DimmerLights_AssignationDimming 005D          ?_DimmerLights_AssignationDimming 0070  
         _DimmerLights_AssignationDimming 1E6A                      _Flash_Memory_Erasing 18D2  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00ED  
                 __size_of_Exception_Main 00D2                             Division@value 0020  
         __end_of_DelayOff_Initialization 1847                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 184F                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0B6A  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009B  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00C4               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005D                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1D99                ??_getDimmerIntr_Dimming_Sw 0072  
                 __end_of_CC2500_ReadByte 1C2E              __end_of_setSw_Initialization 183F  
                         _Timeout_Counter 1AD3           __size_of_getDimmerLights_Status 000F  
         getDimmerLights_ValueToPercent@i 0057                              _RF_RxDisable 184F  
        Flash_Memory_Initialization@value 0077                __end_of_LED_Initialization 18EA  
          __end_of_setTemp_Initialization 0801                               Division@num 0077  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 27E2  
               __size_of_setRF_AdjControl 0036                     __end_of_CC2500_RxData 166D  
                   __end_of_CC2500_TxData 08F9                     _setLoad_AH_AL_Restore 1BC1  
                 __end_of_CC2500_PowerRST 1262  
